{
  "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/5447",
  "repository_url": "https://api.github.com/repos/ChainSafe/lodestar",
  "labels_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/5447/labels{/name}",
  "comments_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/5447/comments",
  "events_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/5447/events",
  "html_url": "https://github.com/ChainSafe/lodestar/issues/5447",
  "id": 1690736989,
  "node_id": "I_kwDOCD5_Gc5kxpld",
  "number": 5447,
  "title": "Move libp2p to worker thread",
  "user": {
    "login": "dapplion",
    "id": 35266934,
    "node_id": "MDQ6VXNlcjM1MjY2OTM0",
    "avatar_url": "https://avatars.githubusercontent.com/u/35266934?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/dapplion",
    "html_url": "https://github.com/dapplion",
    "followers_url": "https://api.github.com/users/dapplion/followers",
    "following_url": "https://api.github.com/users/dapplion/following{/other_user}",
    "gists_url": "https://api.github.com/users/dapplion/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/dapplion/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/dapplion/subscriptions",
    "organizations_url": "https://api.github.com/users/dapplion/orgs",
    "repos_url": "https://api.github.com/users/dapplion/repos",
    "events_url": "https://api.github.com/users/dapplion/events{/privacy}",
    "received_events_url": "https://api.github.com/users/dapplion/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2023-05-01T12:08:42Z",
  "updated_at": "2023-05-26T06:37:04Z",
  "closed_at": "2023-05-26T06:37:04Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "**Rationale**\r\n\r\nMain goals:\r\n- Move network crypto to thread\r\n- Isolate network to protect main thread of DOS attacks\r\n- Allow to throttle network processor better to keep main thread event loop lag under control \r\n\r\nAlso, for nodes subscribed to many subnets recent benchmarks show that network handling takes decent chunk CPU time, lagging the main thread and delaying other pipelines like block processing.\r\n\r\n- Part of https://github.com/ChainSafe/lodestar/issues/4856\r\n- WIP branch all-in-one https://github.com/ChainSafe/lodestar/pull/5229\r\n\r\n**Architecture**\r\n\r\nSimple and lame chart for general idea. libp2p instance is rooted on the TCP transport's socket. It pulls many components that are best together in the same thread:\r\n- peer manager\r\n- gossip\r\n- reqresp\r\n\r\nOn the other hand, the main thread is the only thread with access to the state cache, so the network processor must remain there. For now we'll place the network queues in the main thread, but those could be placed in the worker.\r\n\r\n![image](https://user-images.githubusercontent.com/35266934/235447759-3cb9438d-76ce-4551-a4eb-6e4c90975f29.png)\r\n\r\n**Interfaces**\r\n\r\nTo do A/B testing we want to have a flag to switch the libp2p instance from being in a worker thread or the main thread. So we need\r\n- A) Main thread \"public\" facing network API with variable backend. Implements `NetworkPublic` and calls `NetworkCore` internally (either B or C).\r\n- B) Internal network class with logic de-duplicated from either backend. Implements `NetworkCore` with actual logic\r\n- C) Main to worker event based interface to wire A to B through worker. Implements `NetworkCore` and calls `NetworkCore` internally (B).\r\n\r\n```ts\r\ninterface NetworkPublic extends NetworkCorePublic {\r\n  // Functions using multiple reqresp / gossip methods\r\n  publishBeaconBlockMaybeBlobs(signedBlock: BlockInput): Promise<void>;\r\n  beaconBlocksMaybeBlobsByRange(peerId: PeerId, request: phase0.BeaconBlocksByRangeRequest): Promise<BlockInput[]>;\r\n  beaconBlocksMaybeBlobsByRoot(peerId: PeerId, request: phase0.BeaconBlocksByRootRequest): Promise<BlockInput[]>;\r\n  \r\n  // ReqResp caller helpers\r\n  // NOTE: Should map to a single fn to prevent boilerplate\r\n  status(peerId: PeerId, request: phase0.Status): Promise<phase0.Status>;\r\n  goodbye(peerId: PeerId, request: phase0.Goodbye): Promise<void>;\r\n  ping(peerId: PeerId): Promise<phase0.Ping>;\r\n  metadata(peerId: PeerId): Promise<allForks.Metadata>;\r\n  beaconBlocksByRange(peerId: PeerId, request: phase0.BeaconBlocksByRangeRequest): Promise<allForks.SignedBeaconBlock[]>;\r\n  beaconBlocksByRoot(peerId: PeerId, request: phase0.BeaconBlocksByRootRequest): Promise<allForks.SignedBeaconBlock[]>;\r\n  blobsSidecarsByRange(peerId: PeerId, request: deneb.BlobsSidecarsByRangeRequest): Promise<deneb.BlobsSidecar[]>;\r\n  beaconBlockAndBlobsSidecarByRoot(peerId: PeerId, request: deneb.BeaconBlockAndBlobsSidecarByRootRequest): Promise<deneb.SignedBeaconBlockAndBlobsSidecar[]>;\r\n  lightClientBootstrap(peerId: PeerId, request: Uint8Array): Promise<allForks.LightClientBootstrap>;\r\n  lightClientOptimisticUpdate(peerId: PeerId): Promise<allForks.LightClientOptimisticUpdate>;\r\n  lightClientFinalityUpdate(peerId: PeerId): Promise<allForks.LightClientFinalityUpdate>;\r\n  lightClientUpdatesByRange(peerId: PeerId, request: altair.LightClientUpdatesByRange): Promise<allForks.LightClientUpdate[]>;\r\n\r\n  // Gossip publish helpers\r\n  // NOTE: This functions could be stand-alone since each have usually one single caller\r\n  publishBeaconBlock(signedBlock: allForks.SignedBeaconBlock): Promise<PublishResult>\r\n  publishSignedBeaconBlockAndBlobsSidecar(item: deneb.SignedBeaconBlockAndBlobsSidecar): Promise<PublishResult>\r\n  publishBeaconAggregateAndProof(aggregateAndProof: phase0.SignedAggregateAndProof): Promise<PublishResult>\r\n  publishBeaconAttestation(attestation: phase0.Attestation, subnet: number): Promise<PublishResult>\r\n  publishVoluntaryExit(voluntaryExit: phase0.SignedVoluntaryExit): Promise<PublishResult>\r\n  publishBlsToExecutionChange(blsToExecutionChange: capella.SignedBLSToExecutionChange): Promise<PublishResult>\r\n  publishProposerSlashing(proposerSlashing: phase0.ProposerSlashing): Promise<PublishResult>\r\n  publishAttesterSlashing(attesterSlashing: phase0.AttesterSlashing): Promise<PublishResult>\r\n  publishSyncCommitteeSignature(signature: altair.SyncCommitteeMessage, subnet: number): Promise<PublishResult>\r\n  publishContributionAndProof(contributionAndProof: altair.SignedContributionAndProof): Promise<PublishResult>\r\n  publishLightClientFinalityUpdate(lightClientFinalityUpdate: allForks.LightClientFinalityUpdate): Promise<PublishResult>\r\n  publishLightClientOptimisticUpdate(lightClientOptimisitcUpdate: allForks.LightClientOptimisticUpdate): Promise<PublishResult>\r\n}\r\n```\r\n\r\n```ts\r\ninterface NetworkCore extends NetworkCorePublic {\r\n  // Service\r\n  metrics(): Promise<string>;\r\n  close(): Promise<void>;\r\n\r\n  sendReqRespRequest(method, peerId: PeerId, request): ??;\r\n  publishGossip<K extends GossipType>(topic: GossipTopicMap[K], object: GossipTypeMap[K], opts?: PublishOpts): Promise<number>;\r\n}\r\n```\r\n\r\n```ts\r\ninterface NetworkCorePublic {\r\n  getEnr(): Promise<SignableENR | undefined>;\r\n  getMetadata(): Promise<altair.Metadata>;\r\n  getConnectedPeers(): PeerId[];\r\n  getConnectedPeerCount(): number;\r\n\r\n  prepareBeaconCommitteeSubnet(subscriptions: CommitteeSubscription[]): Promise<void>;\r\n  prepareSyncCommitteeSubnets(subscriptions: CommitteeSubscription[]): Promise<void>;\r\n  reStatusPeers(peers: PeerId[]): Promise<void>;\r\n  reportPeer(peer: PeerId, action: PeerAction, actionName: string): Promise<void>;\r\n\r\n  subscribeGossipCoreTopics(): Promise<void>;\r\n  unsubscribeGossipCoreTopics(): Promise<void>;\r\n  isSubscribedToGossipCoreTopics(): boolean;\r\n\r\n  connectToPeer(peer: PeerId, multiaddr: Multiaddr[]): Promise<void>;\r\n  disconnectPeer(peer: PeerId): Promise<void>;\r\n  dumpPeers(): Promise<routes.lodestar.LodestarNodePeer[]>;\r\n  dumpPeer(peerIdStr: string): Promise<routes.lodestar.LodestarNodePeer | undefined>;\r\n  dumpPeerScoreStats(): Promise<PeerScoreStats>;\r\n  dumpGossipPeerScoreStats(): Promise<PeerScoreStatsDump>;\r\n  dumpGossipQueue(gossipType: GossipType): Promise<PendingGossipsubMessage[]>;\r\n  dumpDiscv5KadValues(): Promise<string[]>;\r\n}\r\n```\r\n",
  "closed_by": {
    "login": "dapplion",
    "id": 35266934,
    "node_id": "MDQ6VXNlcjM1MjY2OTM0",
    "avatar_url": "https://avatars.githubusercontent.com/u/35266934?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/dapplion",
    "html_url": "https://github.com/dapplion",
    "followers_url": "https://api.github.com/users/dapplion/followers",
    "following_url": "https://api.github.com/users/dapplion/following{/other_user}",
    "gists_url": "https://api.github.com/users/dapplion/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/dapplion/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/dapplion/subscriptions",
    "organizations_url": "https://api.github.com/users/dapplion/orgs",
    "repos_url": "https://api.github.com/users/dapplion/repos",
    "events_url": "https://api.github.com/users/dapplion/events{/privacy}",
    "received_events_url": "https://api.github.com/users/dapplion/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/5447/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/5447/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/1561139370",
    "html_url": "https://github.com/ChainSafe/lodestar/issues/5447#issuecomment-1561139370",
    "issue_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/5447",
    "id": 1561139370,
    "node_id": "IC_kwDOCD5_Gc5dDRiq",
    "user": {
      "login": "philknows",
      "id": 58080811,
      "node_id": "MDQ6VXNlcjU4MDgwODEx",
      "avatar_url": "https://avatars.githubusercontent.com/u/58080811?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/philknows",
      "html_url": "https://github.com/philknows",
      "followers_url": "https://api.github.com/users/philknows/followers",
      "following_url": "https://api.github.com/users/philknows/following{/other_user}",
      "gists_url": "https://api.github.com/users/philknows/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/philknows/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/philknows/subscriptions",
      "organizations_url": "https://api.github.com/users/philknows/orgs",
      "repos_url": "https://api.github.com/users/philknows/repos",
      "events_url": "https://api.github.com/users/philknows/events{/privacy}",
      "received_events_url": "https://api.github.com/users/philknows/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-24T13:21:24Z",
    "updated_at": "2023-05-24T13:21:24Z",
    "author_association": "MEMBER",
    "body": "Is this technically complete now with #5229 ?",
    "reactions": {
      "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/1561139370/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
