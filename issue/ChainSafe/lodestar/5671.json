{
  "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/5671",
  "repository_url": "https://api.github.com/repos/ChainSafe/lodestar",
  "labels_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/5671/labels{/name}",
  "comments_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/5671/comments",
  "events_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/5671/events",
  "html_url": "https://github.com/ChainSafe/lodestar/issues/5671",
  "id": 1764850116,
  "node_id": "I_kwDOCD5_Gc5pMXnE",
  "number": 5671,
  "title": "De-duplicate payload from persisted beacon blocks",
  "user": {
    "login": "dapplion",
    "id": 35266934,
    "node_id": "MDQ6VXNlcjM1MjY2OTM0",
    "avatar_url": "https://avatars.githubusercontent.com/u/35266934?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/dapplion",
    "html_url": "https://github.com/dapplion",
    "followers_url": "https://api.github.com/users/dapplion/followers",
    "following_url": "https://api.github.com/users/dapplion/following{/other_user}",
    "gists_url": "https://api.github.com/users/dapplion/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/dapplion/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/dapplion/subscriptions",
    "organizations_url": "https://api.github.com/users/dapplion/orgs",
    "repos_url": "https://api.github.com/users/dapplion/repos",
    "events_url": "https://api.github.com/users/dapplion/events{/privacy}",
    "received_events_url": "https://api.github.com/users/dapplion/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1200090447,
      "node_id": "MDU6TGFiZWwxMjAwMDkwNDQ3",
      "url": "https://api.github.com/repos/ChainSafe/lodestar/labels/prio-high",
      "name": "prio-high",
      "color": "fd9579",
      "default": false,
      "description": "Resolve issues as soon as possible."
    },
    {
      "id": 4754137758,
      "node_id": "LA_kwDOCD5_Gc8AAAABG15ing",
      "url": "https://api.github.com/repos/ChainSafe/lodestar/labels/meta-feature-request",
      "name": "meta-feature-request",
      "color": "B5CF5F",
      "default": false,
      "description": "Issues to track feature requests."
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": {
    "login": "matthewkeil",
    "id": 18608739,
    "node_id": "MDQ6VXNlcjE4NjA4NzM5",
    "avatar_url": "https://avatars.githubusercontent.com/u/18608739?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/matthewkeil",
    "html_url": "https://github.com/matthewkeil",
    "followers_url": "https://api.github.com/users/matthewkeil/followers",
    "following_url": "https://api.github.com/users/matthewkeil/following{/other_user}",
    "gists_url": "https://api.github.com/users/matthewkeil/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/matthewkeil/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/matthewkeil/subscriptions",
    "organizations_url": "https://api.github.com/users/matthewkeil/orgs",
    "repos_url": "https://api.github.com/users/matthewkeil/repos",
    "events_url": "https://api.github.com/users/matthewkeil/events{/privacy}",
    "received_events_url": "https://api.github.com/users/matthewkeil/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "matthewkeil",
      "id": 18608739,
      "node_id": "MDQ6VXNlcjE4NjA4NzM5",
      "avatar_url": "https://avatars.githubusercontent.com/u/18608739?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/matthewkeil",
      "html_url": "https://github.com/matthewkeil",
      "followers_url": "https://api.github.com/users/matthewkeil/followers",
      "following_url": "https://api.github.com/users/matthewkeil/following{/other_user}",
      "gists_url": "https://api.github.com/users/matthewkeil/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/matthewkeil/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/matthewkeil/subscriptions",
      "organizations_url": "https://api.github.com/users/matthewkeil/orgs",
      "repos_url": "https://api.github.com/users/matthewkeil/repos",
      "events_url": "https://api.github.com/users/matthewkeil/events{/privacy}",
      "received_events_url": "https://api.github.com/users/matthewkeil/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 8,
  "created_at": "2023-06-20T07:48:53Z",
  "updated_at": "2023-09-11T06:36:34Z",
  "closed_at": null,
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "### Problem description\n\nSince the merge, both execution and Lodestar beacon nodes persist the block's execution payload into the DB.\r\n\r\nAt an average block size of 100Kb, that's about 720 MB / day or 263 GB / year of redundant data we don't _really_ need to store. See https://ycharts.com/indicators/ethereum_average_block_size According to metrics, current Lodestar DB growth averaged over the last 30 days on a mainnet node without validator is 666 MB/day.\r\n\n\n### Solution description\n\nInstead Lodestar should persist in its DB blinded blocks, and retrieve from the execution node the payloads on demand to comply with:\r\n- ReqResp beacon_blocks_by_root\r\n- ReqResp beacon_blocks_by_range\r\n- API requests involving the full block\r\n\r\nAll of this operations are not super time sensitive so the added latency is not a breaking deal\n\n### Additional context\n\n_No response_",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/5671/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/5671/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/1612166540",
    "html_url": "https://github.com/ChainSafe/lodestar/issues/5671#issuecomment-1612166540",
    "issue_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/5671",
    "id": 1612166540,
    "node_id": "IC_kwDOCD5_Gc5gF7WM",
    "user": {
      "login": "matthewkeil",
      "id": 18608739,
      "node_id": "MDQ6VXNlcjE4NjA4NzM5",
      "avatar_url": "https://avatars.githubusercontent.com/u/18608739?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/matthewkeil",
      "html_url": "https://github.com/matthewkeil",
      "followers_url": "https://api.github.com/users/matthewkeil/followers",
      "following_url": "https://api.github.com/users/matthewkeil/following{/other_user}",
      "gists_url": "https://api.github.com/users/matthewkeil/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/matthewkeil/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/matthewkeil/subscriptions",
      "organizations_url": "https://api.github.com/users/matthewkeil/orgs",
      "repos_url": "https://api.github.com/users/matthewkeil/repos",
      "events_url": "https://api.github.com/users/matthewkeil/events{/privacy}",
      "received_events_url": "https://api.github.com/users/matthewkeil/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-06-28T22:03:15Z",
    "updated_at": "2023-06-29T00:22:56Z",
    "author_association": "MEMBER",
    "body": "Initial thoughts are that DB growth over time should only be affected by finalized blocks so limiting modification to `blockArchive` as overhead for converting blocks in hot `block` db will likely be too high.\r\n\r\n## Existing parts of code that interact with `blockArchive` \r\n\r\n#### API call usage:\r\n\r\n`beacon-node/src/api/impl/beacon/blocks/index.ts`\r\n- `getBlockHeaders`\r\n\r\n`beacon-node/src/chain/chain.ts`\r\n- `getCanonicalBlockAtSlot`\r\n- `getBlockByRoot`\r\n\r\n#### ReqResp usage:\r\n\r\n`beacon-node/src/network/reqresp/handlers/beaconBlocksByRange.ts`\r\n- `onBlocksOrBlobSidecarsByRange`\r\n\r\n`beacon-node/src/network/reqresp/handlers/beaconBlocksByRoot.ts`\r\n- `onBeaconBlocksByRoot`\r\n\r\n#### Block archival:\r\n\r\n`beacon-node/src/chain/archiver/archiveBlocks.ts`\r\n- `migrateBlocksFromHotToColdDb`\r\n\r\n#### Sync:\r\n\r\n`beacon-node/src/sync/backfill/backfill.ts`\r\n- `backfillSync.sync`\r\n- `backfillSync.fastBackfillDb`\r\n- `backfillSync.syncBlockByRoot`\r\n- `backfillSync.fastBackfillDb`\r\n- `backfillSync.syncRange`\r\n- `backfillSync.extractPreviousFinOrWsCheckpoint`\r\n\r\n## Methodology\r\n\r\n#### Storage\r\n\r\nWill attempt to use the same db bucket for both blinded and full archived blocks.  For users that have an existing database it will be important to distinguish between the types, when serialized, so that deserialization works correctly. `try/catch`ing the ssz deserialization will be very slow so @dapplion suggested a great idea to use a bit flag within the container offset.\r\n\r\nAll serialized blocks start with `0x00000064` so using the first bit to distinguish between the two seems like it will work really well.  I suggest using `0xff000064` for blinded blocks and the standard `0x00000064` for full blocks as that is how they are stored now.  \r\n\r\nThis will also allow for a single db `Repository` to accommodate both.  The type will need to be updated to `Repository<Slot, allForks.FullOrBlindedSignedBeaconBlock>` to allow for the change but the member function types can be narrowed to `allForks.SignedBeaconBlock` so all other existing code works as expected and only `allForks.SignedBeaconBlock`s are passed to and from the `Repository`.\r\n\r\n#### Deserialization\r\n\r\nWhen pulling blocks out of the db, a simple bit check will allow for fast type determination. Swapping the bit back to `0x00` for blinded blocks will ensure that ssz deserialization works correctly.\r\n\r\nThe check can happen in `decodeValue` before running `getSignedBlockTypeFromBytes` to pul the correct ssz type for deserialization. `getSignedBlockTypeFromBytes` can be updated by passing a `isBlinded` flag to pull the correct container from `config.getBlindedForkTypes` or `config.getForkTypes`.  The `block` archive also calls `getSignedBlockTypeFromBytes` but `false` can be passed for the parameter to always pull the full container for the hot db.\r\n\r\n`decodeValue` is a synchronous method so pulling the full block from the execution engine will need to happen in the repository methods that `get` blocks.\r\n\r\n#### Serialization\r\n\r\nOnce blinded blocks are serialized the first bit will be swapped to `0xff` before storing in the database.  This can happen within `encodeValue` after running through `this.config.getBlindedForkTypes(value.message.slot).SignedBeaconBlock.serialize(value)`.  The binary put methods do not call `encodeValue` so conversion should probably happen in the put methods.  This will also match the deserialization method for consistency.\r\n\r\n#### `SignedBeaconBlock` to `SignedBlindedBeaconBlock` Conversion\r\n\r\nA private method `blindedFromFullBlock` can be added to the `BlockArchiveRepository` so `put`, `putBinary`, `batchPut` and `batchPutBinary` have a common API for conversion. The `transactionRoot` will be calculated and the container shape will be converted so it serializes correctly.  See \"Potential Issues\" below about `putBinary` and `batchPutBinary`.\r\n\r\n#### `SignedBlindedBeaconBlock` to `SignedBeaconBlock` Conversion\r\n\r\nPulling the `ExecutionPayload` from the execution engine will be required to get the transaction list for recreation of the full block.\r\n\r\nThe db is created outside of the `BeaconNode` class and passed in as a parameter to `BeaconNode.init`.  The `executionEngine` is created inside of `BeaconNode.init` during creating on the `new BeaconChain`.  The `execution engine` is dependent on `metrics` and `AbortController`, which are also both created within `BeaconNode.init` so passing the execution engine into the `Db` constructor is infeasible without a substantial refactor.\r\n\r\nOne possible suggestion is to add a method to the `BlockArchiveRepository` to `setExecutionEngine` after initialization.  The method can be called within the `BeaconNode` constructor.\r\n\r\nOnce the execution engine is available within the `BlockArchiveRepository` it will be relatively simple to pull the full `ExecutionPayload` via `executionEngine.getPayloadBodiesByHash` and passing in the `block.message.body.executionPayloadHeader.blockHash` and reassembling the block.\r\n\r\nA private method `fullBlockFromMaybeBlinded` can be added to the `BlockArchiveRepository` so `get` and `valueStream` have a common API for reassembly.  `getBinary` will need to be updated to `decodeValue` the block first and pass to `fullBlockFromMaybeBlinded` and then re-serialize it which is not ideal (see notes below).  The `getSlot*` methods pull the slot via binary data which should not be affected (slot stored at same offset for both types). All other getter methods internally call `get`, `valueStream` or `getBinary`.\r\n\r\n## Potential Issues\r\n\r\nConversion for binary methods will require deserialization and re-serialization.  This is not ideal from a performance perspective.\r\n\r\nPR #5573 just modified the code to avoid this.  That PR updated `beacon-node/src/sync/backfill/backfill.ts` and the `batchPutBinary` may want to get put back to `batchPut` as the deserialized blocks are available in the calling context.\r\n\r\n`migrateBlocksFromHotToColdDb` uses `block.getBinary` and `blockArchive.batchPutBinary` and may want to be swapped to `block.get` and `blockArchive.batchPut`.\r\n\r\n`BackFillSync.syncBlockByRoot` uses `blockArchive.putBinary` and may want to be converted to `blockArchive.put` as the deserialized block is available in `syncBlockByRoot`.\r\n\r\n`Repository.entriesStream` is used by `onBlocksOrBlobSidecarsByRange` in reqresp and there is a call to `this.decodeValue.bind(this)` which should, but may not, isomorphically call the correct `decodeValue`.  Will need to be double checked that the correct method is called so the deserialization does not throw.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/1612166540/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/1612497246",
    "html_url": "https://github.com/ChainSafe/lodestar/issues/5671#issuecomment-1612497246",
    "issue_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/5671",
    "id": 1612497246,
    "node_id": "IC_kwDOCD5_Gc5gHMFe",
    "user": {
      "login": "dapplion",
      "id": 35266934,
      "node_id": "MDQ6VXNlcjM1MjY2OTM0",
      "avatar_url": "https://avatars.githubusercontent.com/u/35266934?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dapplion",
      "html_url": "https://github.com/dapplion",
      "followers_url": "https://api.github.com/users/dapplion/followers",
      "following_url": "https://api.github.com/users/dapplion/following{/other_user}",
      "gists_url": "https://api.github.com/users/dapplion/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dapplion/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dapplion/subscriptions",
      "organizations_url": "https://api.github.com/users/dapplion/orgs",
      "repos_url": "https://api.github.com/users/dapplion/repos",
      "events_url": "https://api.github.com/users/dapplion/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dapplion/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-06-29T06:30:35Z",
    "updated_at": "2023-06-29T06:30:35Z",
    "author_association": "MEMBER",
    "body": "To recap a bit:\r\n\r\n### Block DB input/output paths:\r\n\r\n- Input: after successfully importing block\r\n- Output: ReqResp request, REST API request, Regen block replay\r\n\r\n### Storage schema\r\n\r\nUse same format / strategy for archive and hot DB. Use the first byte of the payload are version byte. This allows to make the migration optional, or not do it at all.\r\n- First byte `0x00`: Full block\r\n- First byte `0x01`: Blinded block\r\n\r\n### Inserting block\r\n\r\nAfter this change blocks must always be inserted as blinded. In the import flow, we can compute the execution header from the struct value which has cached hashing. Then merge those bytes with the serialized payload and persist\r\n\r\n### Serving blocks\r\n\r\nFor API and ReqResp requests:\r\n- Read block from DB\r\n- If 0x00, response completed\r\n- If 0x01, fetch execution payload from execution node\r\n\r\nFor Regen replay:\r\n- Both Full and Blinded blocks are ok for state transition",
    "reactions": {
      "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/1612497246/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/1614040808",
    "html_url": "https://github.com/ChainSafe/lodestar/issues/5671#issuecomment-1614040808",
    "issue_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/5671",
    "id": 1614040808,
    "node_id": "IC_kwDOCD5_Gc5gNE7o",
    "user": {
      "login": "matthewkeil",
      "id": 18608739,
      "node_id": "MDQ6VXNlcjE4NjA4NzM5",
      "avatar_url": "https://avatars.githubusercontent.com/u/18608739?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/matthewkeil",
      "html_url": "https://github.com/matthewkeil",
      "followers_url": "https://api.github.com/users/matthewkeil/followers",
      "following_url": "https://api.github.com/users/matthewkeil/following{/other_user}",
      "gists_url": "https://api.github.com/users/matthewkeil/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/matthewkeil/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/matthewkeil/subscriptions",
      "organizations_url": "https://api.github.com/users/matthewkeil/orgs",
      "repos_url": "https://api.github.com/users/matthewkeil/repos",
      "events_url": "https://api.github.com/users/matthewkeil/events{/privacy}",
      "received_events_url": "https://api.github.com/users/matthewkeil/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-06-30T02:50:56Z",
    "updated_at": "2023-06-30T02:50:56Z",
    "author_association": "MEMBER",
    "body": "> This allows to make the migration optional, or not do it at all.\r\n\r\nShould there be a cli flag to turn the feature on?",
    "reactions": {
      "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/1614040808/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/1619737608",
    "html_url": "https://github.com/ChainSafe/lodestar/issues/5671#issuecomment-1619737608",
    "issue_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/5671",
    "id": 1619737608,
    "node_id": "IC_kwDOCD5_Gc5gizwI",
    "user": {
      "login": "dapplion",
      "id": 35266934,
      "node_id": "MDQ6VXNlcjM1MjY2OTM0",
      "avatar_url": "https://avatars.githubusercontent.com/u/35266934?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dapplion",
      "html_url": "https://github.com/dapplion",
      "followers_url": "https://api.github.com/users/dapplion/followers",
      "following_url": "https://api.github.com/users/dapplion/following{/other_user}",
      "gists_url": "https://api.github.com/users/dapplion/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dapplion/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dapplion/subscriptions",
      "organizations_url": "https://api.github.com/users/dapplion/orgs",
      "repos_url": "https://api.github.com/users/dapplion/repos",
      "events_url": "https://api.github.com/users/dapplion/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dapplion/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-07-04T08:02:11Z",
    "updated_at": "2023-07-04T08:02:11Z",
    "author_association": "MEMBER",
    "body": "> Should there be a cli flag to turn the feature on?\r\n\r\nif easy to implement, it's a good to have in case there are issues in the future",
    "reactions": {
      "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/1619737608/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/1665874782",
    "html_url": "https://github.com/ChainSafe/lodestar/issues/5671#issuecomment-1665874782",
    "issue_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/5671",
    "id": 1665874782,
    "node_id": "IC_kwDOCD5_Gc5jSzte",
    "user": {
      "login": "dapplion",
      "id": 35266934,
      "node_id": "MDQ6VXNlcjM1MjY2OTM0",
      "avatar_url": "https://avatars.githubusercontent.com/u/35266934?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dapplion",
      "html_url": "https://github.com/dapplion",
      "followers_url": "https://api.github.com/users/dapplion/followers",
      "following_url": "https://api.github.com/users/dapplion/following{/other_user}",
      "gists_url": "https://api.github.com/users/dapplion/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dapplion/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dapplion/subscriptions",
      "organizations_url": "https://api.github.com/users/dapplion/orgs",
      "repos_url": "https://api.github.com/users/dapplion/repos",
      "events_url": "https://api.github.com/users/dapplion/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dapplion/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-08-04T16:21:48Z",
    "updated_at": "2023-08-04T16:21:48Z",
    "author_association": "MEMBER",
    "body": "We can tell if a serialized execution payload is blinded or not by looking at the extra_data offset value. So no need to prefixes in the DB\r\n\r\n| offset | ExecutionPayloadHeader | ExecutionPayload\r\n| - | - | - |\r\n| 0 | fixed fields (size N - 4) \r\n| x ∈[0, N-4] | extra_data: N+64 (offset) | extra_data: N+8 (offset)\r\n| N | transactions_root (data) | transactions: offset\r\n| N + 4 | -- | withdrawals: offset\r\n| N + 8 | -- | [extra_data]\r\n| N + 32 | withdrawals_root (data)\r\n| N + 64 | [extra_data]\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/1665874782/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/1666444665",
    "html_url": "https://github.com/ChainSafe/lodestar/issues/5671#issuecomment-1666444665",
    "issue_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/5671",
    "id": 1666444665,
    "node_id": "IC_kwDOCD5_Gc5jU-15",
    "user": {
      "login": "dapplion",
      "id": 35266934,
      "node_id": "MDQ6VXNlcjM1MjY2OTM0",
      "avatar_url": "https://avatars.githubusercontent.com/u/35266934?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dapplion",
      "html_url": "https://github.com/dapplion",
      "followers_url": "https://api.github.com/users/dapplion/followers",
      "following_url": "https://api.github.com/users/dapplion/following{/other_user}",
      "gists_url": "https://api.github.com/users/dapplion/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dapplion/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dapplion/subscriptions",
      "organizations_url": "https://api.github.com/users/dapplion/orgs",
      "repos_url": "https://api.github.com/users/dapplion/repos",
      "events_url": "https://api.github.com/users/dapplion/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dapplion/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-08-05T08:52:11Z",
    "updated_at": "2023-08-05T08:52:11Z",
    "author_association": "MEMBER",
    "body": "@matthewkeil I've done a sketch of how this feature could be implemented, can you take a look if this approach make sense to you? https://github.com/ChainSafe/lodestar/compare/dapplion/dedup-payloads?expand=1",
    "reactions": {
      "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/1666444665/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/1668142988",
    "html_url": "https://github.com/ChainSafe/lodestar/issues/5671#issuecomment-1668142988",
    "issue_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/5671",
    "id": 1668142988,
    "node_id": "IC_kwDOCD5_Gc5jbdeM",
    "user": {
      "login": "matthewkeil",
      "id": 18608739,
      "node_id": "MDQ6VXNlcjE4NjA4NzM5",
      "avatar_url": "https://avatars.githubusercontent.com/u/18608739?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/matthewkeil",
      "html_url": "https://github.com/matthewkeil",
      "followers_url": "https://api.github.com/users/matthewkeil/followers",
      "following_url": "https://api.github.com/users/matthewkeil/following{/other_user}",
      "gists_url": "https://api.github.com/users/matthewkeil/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/matthewkeil/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/matthewkeil/subscriptions",
      "organizations_url": "https://api.github.com/users/matthewkeil/orgs",
      "repos_url": "https://api.github.com/users/matthewkeil/repos",
      "events_url": "https://api.github.com/users/matthewkeil/events{/privacy}",
      "received_events_url": "https://api.github.com/users/matthewkeil/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-08-07T15:57:31Z",
    "updated_at": "2023-08-07T15:57:31Z",
    "author_association": "MEMBER",
    "body": "> We can tell if a serialized execution payload is blinded or not by looking at the extra_data offset value. So no need to prefixes in the DB\r\n> \r\n\r\nAwesome!  I will get this implemented when i switch back to this task.  Should be this sprint.\r\n\r\n\r\n> @matthewkeil I've done a sketch of how this feature could be implemented, can you take a look if this approach make sense to you? https://github.com/ChainSafe/lodestar/compare/dapplion/dedup-payloads?expand=1\r\n\r\nYep.  Looks good @dapplion!!  Is very similar to how I was doing on my work branch.  \r\nhttps://github.com/ChainSafe/lodestar/compare/unstable...mkeil/dedup-beacon-block?expand=1\r\n\r\nI will read through your changes carefully and makes sure I limit the changes to just what you recommended.  I found there were some places that the types do not line up when moving to FullOrBlindedBeaconBlock for the two Repositories but those changes were pretty minimal.  I'll message you when I start on this work again and will let you know if i have any questions as I go.",
    "reactions": {
      "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/1668142988/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/1713255109",
    "html_url": "https://github.com/ChainSafe/lodestar/issues/5671#issuecomment-1713255109",
    "issue_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/5671",
    "id": 1713255109,
    "node_id": "IC_kwDOCD5_Gc5mHjLF",
    "user": {
      "login": "matthewkeil",
      "id": 18608739,
      "node_id": "MDQ6VXNlcjE4NjA4NzM5",
      "avatar_url": "https://avatars.githubusercontent.com/u/18608739?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/matthewkeil",
      "html_url": "https://github.com/matthewkeil",
      "followers_url": "https://api.github.com/users/matthewkeil/followers",
      "following_url": "https://api.github.com/users/matthewkeil/following{/other_user}",
      "gists_url": "https://api.github.com/users/matthewkeil/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/matthewkeil/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/matthewkeil/subscriptions",
      "organizations_url": "https://api.github.com/users/matthewkeil/orgs",
      "repos_url": "https://api.github.com/users/matthewkeil/repos",
      "events_url": "https://api.github.com/users/matthewkeil/events{/privacy}",
      "received_events_url": "https://api.github.com/users/matthewkeil/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-09-11T06:36:34Z",
    "updated_at": "2023-09-11T06:36:34Z",
    "author_association": "MEMBER",
    "body": "Note to self: Make sure that #5923 still works correctly during PR process",
    "reactions": {
      "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/1713255109/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
