{
  "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/5765",
  "repository_url": "https://api.github.com/repos/ChainSafe/lodestar",
  "labels_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/5765/labels{/name}",
  "comments_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/5765/comments",
  "events_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/5765/events",
  "html_url": "https://github.com/ChainSafe/lodestar/issues/5765",
  "id": 1807594082,
  "node_id": "I_kwDOCD5_Gc5rvbJi",
  "number": 5765,
  "title": "Consecutive HTTP requests cause socket hang up on node v20",
  "user": {
    "login": "nflaig",
    "id": 38436224,
    "node_id": "MDQ6VXNlcjM4NDM2MjI0",
    "avatar_url": "https://avatars.githubusercontent.com/u/38436224?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nflaig",
    "html_url": "https://github.com/nflaig",
    "followers_url": "https://api.github.com/users/nflaig/followers",
    "following_url": "https://api.github.com/users/nflaig/following{/other_user}",
    "gists_url": "https://api.github.com/users/nflaig/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nflaig/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nflaig/subscriptions",
    "organizations_url": "https://api.github.com/users/nflaig/orgs",
    "repos_url": "https://api.github.com/users/nflaig/repos",
    "events_url": "https://api.github.com/users/nflaig/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nflaig/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 5670219610,
      "node_id": "LA_kwDOCD5_Gc8AAAABUfivWg",
      "url": "https://api.github.com/repos/ChainSafe/lodestar/labels/meta-bug",
      "name": "meta-bug",
      "color": "E79553",
      "default": false,
      "description": "Issues that identify a bug and require a fix."
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 3,
  "created_at": "2023-07-17T11:46:45Z",
  "updated_at": "2023-07-24T07:37:25Z",
  "closed_at": null,
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "### Describe the bug\r\n\r\nConsecutive HTTP requests cause socket hang up on node v20. This only happens with some servers, so far I could only reproduce this with Lighthouse. This issue causes the [sim tests to fail](https://github.com/ChainSafe/lodestar/actions/runs/5575358658/jobs/10185174387#step:8:94) and might cause other issues, e.g. when running Lodestar VC with a Lighthouse BN.\r\n\r\n\r\n### Expected behavior\r\n\r\nNo socket hang up / requests failures\r\n\r\n### Steps to reproduce\r\n\r\nRunning the following script will cause the first request to pass but the second one fails with socket hang up error\r\n\r\n```ts\r\nimport { getClient } from \"@lodestar/api\";\r\nimport { config } from \"@lodestar/config/default\";\r\n\r\nconst lighthouse = \"http://localhost:5052\"\r\nconst api = getClient({ baseUrl: lighthouse }, { config });\r\n\r\nawait api.beacon.getBlockV2(\"head\");\r\nawait api.beacon.getBlockV2(\"head\");\r\n```\r\n```sh\r\n> node index.js \r\n\r\n/home/nico/projects/test/debug-getStatev2/node_modules/node-fetch/lib/index.js:1505\r\n                        reject(new FetchError(`request to ${request.url} failed, reason: ${err.message}`, 'system', err));\r\n                               ^\r\nFetchError: request to http://localhost:5052/eth/v2/beacon/blocks/head failed, reason: socket hang up\r\n    at ClientRequest.<anonymous> (/home/nico/projects/test/debug-getStatev2/node_modules/node-fetch/lib/index.js:1505:11)\r\n    at ClientRequest.emit (node:events:512:28)\r\n    at Socket.socketOnEnd (node:_http_client:519:9)\r\n    at Socket.emit (node:events:524:35)\r\n    at endReadableNT (node:internal/streams/readable:1378:12)\r\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21) {\r\n  type: 'system',\r\n  errno: 'ECONNRESET',\r\n  code: 'ECONNRESET'\r\n}\r\n\r\nNode.js v20.4.0\r\n```\r\n\r\nYielding to macro queue in-between the two requests does not produce an error\r\n```ts\r\n// ...\r\nawait api.beacon.getBlockV2(\"head\");\r\nsetTimeout(async () => await api.beacon.getBlockV2(\"head\"), 0);\r\n```\r\n\r\n### Additional context\r\n\r\nThe issue is already reported upstream\r\n\r\n- https://github.com/node-fetch/node-fetch/issues/1735\r\n- https://github.com/nodejs/node/issues/47130\r\n\r\nThere are also some [suggested workarounds](https://github.com/node-fetch/node-fetch/issues/1735) but those can't easily applied in our case since we are using cross-fetch and require browser compatiblity.\r\n\r\n### Operating system\r\n\r\nLinux\r\n\r\n### Lodestar version or commit hash\r\n\r\n6e014217f9df78c0916299d357588a5bbab05d88",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/5765/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/5765/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/1640376855",
    "html_url": "https://github.com/ChainSafe/lodestar/issues/5765#issuecomment-1640376855",
    "issue_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/5765",
    "id": 1640376855,
    "node_id": "IC_kwDOCD5_Gc5hxioX",
    "user": {
      "login": "nflaig",
      "id": 38436224,
      "node_id": "MDQ6VXNlcjM4NDM2MjI0",
      "avatar_url": "https://avatars.githubusercontent.com/u/38436224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nflaig",
      "html_url": "https://github.com/nflaig",
      "followers_url": "https://api.github.com/users/nflaig/followers",
      "following_url": "https://api.github.com/users/nflaig/following{/other_user}",
      "gists_url": "https://api.github.com/users/nflaig/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nflaig/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nflaig/subscriptions",
      "organizations_url": "https://api.github.com/users/nflaig/orgs",
      "repos_url": "https://api.github.com/users/nflaig/repos",
      "events_url": "https://api.github.com/users/nflaig/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nflaig/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-07-18T14:49:32Z",
    "updated_at": "2023-07-19T18:52:43Z",
    "author_association": "MEMBER",
    "body": "Would be also interesting to find out why this only happens with Lighthouse as all other CLs don't have this issue. Maybe something related to set headers / keep-alive / connection header.",
    "reactions": {
      "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/1640376855/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/1643621831",
    "html_url": "https://github.com/ChainSafe/lodestar/issues/5765#issuecomment-1643621831",
    "issue_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/5765",
    "id": 1643621831,
    "node_id": "IC_kwDOCD5_Gc5h963H",
    "user": {
      "login": "nflaig",
      "id": 38436224,
      "node_id": "MDQ6VXNlcjM4NDM2MjI0",
      "avatar_url": "https://avatars.githubusercontent.com/u/38436224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nflaig",
      "html_url": "https://github.com/nflaig",
      "followers_url": "https://api.github.com/users/nflaig/followers",
      "following_url": "https://api.github.com/users/nflaig/following{/other_user}",
      "gists_url": "https://api.github.com/users/nflaig/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nflaig/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nflaig/subscriptions",
      "organizations_url": "https://api.github.com/users/nflaig/orgs",
      "repos_url": "https://api.github.com/users/nflaig/repos",
      "events_url": "https://api.github.com/users/nflaig/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nflaig/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-07-20T09:52:17Z",
    "updated_at": "2023-07-20T09:52:17Z",
    "author_association": "MEMBER",
    "body": "> Maybe something related to set headers / keep-alive / connection header\r\n\r\nDoes not seem to be related to HTTP response headers\r\n- Lodestar and Nimbus set `Connection: keep-alive` header\r\n- Lighthouse, Prysm, and Teku do not set the header\r\n\r\nsocket hang up only happens with Lighthouse",
    "reactions": {
      "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/1643621831/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/1647375023",
    "html_url": "https://github.com/ChainSafe/lodestar/issues/5765#issuecomment-1647375023",
    "issue_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/5765",
    "id": 1647375023,
    "node_id": "IC_kwDOCD5_Gc5iMPKv",
    "user": {
      "login": "matthewkeil",
      "id": 18608739,
      "node_id": "MDQ6VXNlcjE4NjA4NzM5",
      "avatar_url": "https://avatars.githubusercontent.com/u/18608739?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/matthewkeil",
      "html_url": "https://github.com/matthewkeil",
      "followers_url": "https://api.github.com/users/matthewkeil/followers",
      "following_url": "https://api.github.com/users/matthewkeil/following{/other_user}",
      "gists_url": "https://api.github.com/users/matthewkeil/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/matthewkeil/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/matthewkeil/subscriptions",
      "organizations_url": "https://api.github.com/users/matthewkeil/orgs",
      "repos_url": "https://api.github.com/users/matthewkeil/repos",
      "events_url": "https://api.github.com/users/matthewkeil/events{/privacy}",
      "received_events_url": "https://api.github.com/users/matthewkeil/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-07-24T07:37:25Z",
    "updated_at": "2023-07-24T07:37:25Z",
    "author_association": "MEMBER",
    "body": "After digging a bit this is related to how the socket is being handled by the two sides below the http layer.   Why only Lighthouse is sending the `RESET` and the other clients do not I am not sure but it is a function of how they default handle half-open sockets.  Similar to what was mentioned [here](https://github.com/nodejs/node/issues/47130#issuecomment-1475869205) in reference to the various implementations within node itself.   I took a peak at the rust `net` and `http` crates but after a short dig I realized that it would not be a great use of time to try and figure out how they handle post FIN packages differently than the `Nim` and `Go` packages.\r\n\r\nAs a tl/dr; for the short term it appears that using an `Agent` with the `keepAlive` set will prevent `node-fetch` from including the `Connection: close` header and will keep the server side from sending the `RESET`.  I have not tested this yet to confirm but @dhedey mentioned it works in his PR to node-fetch\r\n\r\nThat PR's in node-fetch/node-fetch#1736 is approved and waiting for merge as of Apr 12.  It defaults to the node agent's keep-alive setting which will keep the socket open for reuse without having to pass an agent to skip a conditional check that is removed.  In the mean time the workaround for passing a keep-alive agent suggested in that PR should work.\r\n\r\nThe core issue though is how the sockets are being recycled in node though.\r\n\r\nAfter reading the other thread linked in \"additional context\" I started my spelunking in the node repo. \r\n\r\nmcolina mentioned [in this comment](https://github.com/nodejs/node/issues/47130#issuecomment-1476197381) that he agrees with benbnoordhuis how its possible to pop an invalid socket which may resolve part of the issue.  Adjusting that may help the situation and could provide a performance boost commensurate with [this comment](https://github.com/nodejs/node/issues/47130#issuecomment-1476095306).  \r\n\r\nAlthough if that was the only issue it would not explain why 100% of the time an error gets thrown as there should be some percentage of the sockets that get shifted from the checked side of the array under loads.\r\n\r\n@DevasiaThomas mentioned just below that he is working on a fix as of Apr 21.  I tend to agree with @DevasiaThomas though that it will take more than just updating that `while` loop as there are a few places that emitter callbacks are required for resolution which is why we are seeing no error with a setTimeout(0).\r\n\r\nI have pinged him here to see if he has made headway and would like help collaborating on the solution.  I will be happy to help as this issue causing issues with us upgrading our project to node 20.\r\n\r\nI dropped some hints to myself and others below as I dig.  I will update the below as I go with how to resolve the issue.  \r\n\r\nSome code notes for potential resolution:\r\n---------------------------------------------------------\r\n\r\nThere is a note in Socket.prototype._destroy about `error` event being handled in next tick que:\r\nhttps://github.com/nodejs/node/blob/4166d40d0873b6d8a0c7291872c8d20dc680b1d7/lib/net.js#L781\r\n\r\nI found [this line](https://github.com/nodejs/node/blob/4166d40d0873b6d8a0c7291872c8d20dc680b1d7/lib/net.js#L529) in the socket that appears to be getting called after the write side of the client socket is closed by the server and the socket is written to again.  Reference [onReadableStreamEnd](https://github.com/nodejs/node/blob/4166d40d0873b6d8a0c7291872c8d20dc680b1d7/lib/net.js#L736) that throws the error during the microtask que with [process.nextTick](https://github.com/nodejs/node/blob/4166d40d0873b6d8a0c7291872c8d20dc680b1d7/lib/net.js#L529).",
    "reactions": {
      "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/1647375023/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
