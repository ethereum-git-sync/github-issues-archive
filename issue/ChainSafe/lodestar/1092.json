{
  "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/1092",
  "repository_url": "https://api.github.com/repos/ChainSafe/lodestar",
  "labels_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/1092/labels{/name}",
  "comments_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/1092/comments",
  "events_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/1092/events",
  "html_url": "https://github.com/ChainSafe/lodestar/issues/1092",
  "id": 650784637,
  "node_id": "MDU6SXNzdWU2NTA3ODQ2Mzc=",
  "number": 1092,
  "title": "Add typechecks when using a dynamic key in an object",
  "user": {
    "login": "dapplion",
    "id": 35266934,
    "node_id": "MDQ6VXNlcjM1MjY2OTM0",
    "avatar_url": "https://avatars.githubusercontent.com/u/35266934?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/dapplion",
    "html_url": "https://github.com/dapplion",
    "followers_url": "https://api.github.com/users/dapplion/followers",
    "following_url": "https://api.github.com/users/dapplion/following{/other_user}",
    "gists_url": "https://api.github.com/users/dapplion/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/dapplion/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/dapplion/subscriptions",
    "organizations_url": "https://api.github.com/users/dapplion/orgs",
    "repos_url": "https://api.github.com/users/dapplion/repos",
    "events_url": "https://api.github.com/users/dapplion/events{/privacy}",
    "received_events_url": "https://api.github.com/users/dapplion/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": {
    "login": "wemeetagain",
    "id": 1348242,
    "node_id": "MDQ6VXNlcjEzNDgyNDI=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1348242?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/wemeetagain",
    "html_url": "https://github.com/wemeetagain",
    "followers_url": "https://api.github.com/users/wemeetagain/followers",
    "following_url": "https://api.github.com/users/wemeetagain/following{/other_user}",
    "gists_url": "https://api.github.com/users/wemeetagain/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/wemeetagain/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/wemeetagain/subscriptions",
    "organizations_url": "https://api.github.com/users/wemeetagain/orgs",
    "repos_url": "https://api.github.com/users/wemeetagain/repos",
    "events_url": "https://api.github.com/users/wemeetagain/events{/privacy}",
    "received_events_url": "https://api.github.com/users/wemeetagain/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "wemeetagain",
      "id": 1348242,
      "node_id": "MDQ6VXNlcjEzNDgyNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1348242?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wemeetagain",
      "html_url": "https://github.com/wemeetagain",
      "followers_url": "https://api.github.com/users/wemeetagain/followers",
      "following_url": "https://api.github.com/users/wemeetagain/following{/other_user}",
      "gists_url": "https://api.github.com/users/wemeetagain/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wemeetagain/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wemeetagain/subscriptions",
      "organizations_url": "https://api.github.com/users/wemeetagain/orgs",
      "repos_url": "https://api.github.com/users/wemeetagain/repos",
      "events_url": "https://api.github.com/users/wemeetagain/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wemeetagain/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2020-07-03T22:38:07Z",
  "updated_at": "2020-08-28T15:13:45Z",
  "closed_at": "2020-08-28T15:13:45Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "<!--NOTE: -->\r\n<!--- General questions should go to the discord chat instead of the issue tracker.-->\r\n\r\n**Describe the bug**\r\nThis statement will throw a TypeError if `blockProposerIndex` is not in state. `blockProposerIndex` is an uncontrolled API request parameter, so it can happen\r\n```js\r\nstate.validators[blockProposerIndex].pubkey\r\n```\r\n<!--A clear and concise description of what the bug is and steps to reproduce it.-->\r\n\r\n**Expected behavior**\r\nIt should throw a nice error like `unknown proposer index`\r\n\r\n<!--A clear and concise description of what you expected to happen.-->\r\n\r\n**Steps to Reproduce**\r\nCall the getProposerDuties endpoint with a random `blockProposerIndex`\r\n\r\n<!--Steps to reproduce the behavior:\r\n1. Go to '...'\r\n2. Click on '....'\r\n3. Scroll down to '....'\r\n4. See error\r\n-->\r\n\r\n---\r\n\r\n## Todo\r\n\r\nSimilar errors can exist in other parts of the codebase, review\r\n",
  "closed_by": {
    "login": "wemeetagain",
    "id": 1348242,
    "node_id": "MDQ6VXNlcjEzNDgyNDI=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1348242?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/wemeetagain",
    "html_url": "https://github.com/wemeetagain",
    "followers_url": "https://api.github.com/users/wemeetagain/followers",
    "following_url": "https://api.github.com/users/wemeetagain/following{/other_user}",
    "gists_url": "https://api.github.com/users/wemeetagain/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/wemeetagain/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/wemeetagain/subscriptions",
    "organizations_url": "https://api.github.com/users/wemeetagain/orgs",
    "repos_url": "https://api.github.com/users/wemeetagain/repos",
    "events_url": "https://api.github.com/users/wemeetagain/events{/privacy}",
    "received_events_url": "https://api.github.com/users/wemeetagain/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/1092/reactions",
    "total_count": 1,
    "+1": 1,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/1092/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/653786087",
    "html_url": "https://github.com/ChainSafe/lodestar/issues/1092#issuecomment-653786087",
    "issue_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/1092",
    "id": 653786087,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1Mzc4NjA4Nw==",
    "user": {
      "login": "dapplion",
      "id": 35266934,
      "node_id": "MDQ6VXNlcjM1MjY2OTM0",
      "avatar_url": "https://avatars.githubusercontent.com/u/35266934?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dapplion",
      "html_url": "https://github.com/dapplion",
      "followers_url": "https://api.github.com/users/dapplion/followers",
      "following_url": "https://api.github.com/users/dapplion/following{/other_user}",
      "gists_url": "https://api.github.com/users/dapplion/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dapplion/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dapplion/subscriptions",
      "organizations_url": "https://api.github.com/users/dapplion/orgs",
      "repos_url": "https://api.github.com/users/dapplion/repos",
      "events_url": "https://api.github.com/users/dapplion/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dapplion/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-04T16:29:46Z",
    "updated_at": "2020-07-04T16:29:46Z",
    "author_association": "MEMBER",
    "body": "After investigating the issue, the use of arbitrary keys is extremely extensive in the codebase. Adding a check such as\r\n```js\r\n      const validator = state.validators[blockProposerIndex];\r\n      if (!validator) throw Error(`validator ${blockProposerIndex} not in state`);\r\n      duties.push({slot, proposerPubkey: validator.pubkey});\r\n```\r\nis completely unfeasible.\r\n\r\nI see that the desired behavior will be that accessing key without a value throws an error immediately, instead of breaking the code downstream for some random reason. Will ES6 Proxies add some value here?",
    "reactions": {
      "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/653786087/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/653786687",
    "html_url": "https://github.com/ChainSafe/lodestar/issues/1092#issuecomment-653786687",
    "issue_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/1092",
    "id": 653786687,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1Mzc4NjY4Nw==",
    "user": {
      "login": "wemeetagain",
      "id": 1348242,
      "node_id": "MDQ6VXNlcjEzNDgyNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1348242?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wemeetagain",
      "html_url": "https://github.com/wemeetagain",
      "followers_url": "https://api.github.com/users/wemeetagain/followers",
      "following_url": "https://api.github.com/users/wemeetagain/following{/other_user}",
      "gists_url": "https://api.github.com/users/wemeetagain/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wemeetagain/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wemeetagain/subscriptions",
      "organizations_url": "https://api.github.com/users/wemeetagain/orgs",
      "repos_url": "https://api.github.com/users/wemeetagain/repos",
      "events_url": "https://api.github.com/users/wemeetagain/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wemeetagain/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-04T16:35:39Z",
    "updated_at": "2020-07-04T16:35:39Z",
    "author_association": "MEMBER",
    "body": "In this case, the state object is actually already a `Proxy`, created in the ssz library, wrapping a binary merkle tree, exposing the `BeaconState` interface. Any subsequent getters that return non-primitive values also return Proxy objects. Eg: `state.validators[x]`\r\n\r\nThe ssz library _should_ already be throwing an error for an invalid access, ie to a node in the tree that does not exist or should not be accessible. Such as the case when an invalid validator index is accessed in `state.validators`.",
    "reactions": {
      "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/653786687/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/653787926",
    "html_url": "https://github.com/ChainSafe/lodestar/issues/1092#issuecomment-653787926",
    "issue_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/1092",
    "id": 653787926,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1Mzc4NzkyNg==",
    "user": {
      "login": "dapplion",
      "id": 35266934,
      "node_id": "MDQ6VXNlcjM1MjY2OTM0",
      "avatar_url": "https://avatars.githubusercontent.com/u/35266934?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dapplion",
      "html_url": "https://github.com/dapplion",
      "followers_url": "https://api.github.com/users/dapplion/followers",
      "following_url": "https://api.github.com/users/dapplion/following{/other_user}",
      "gists_url": "https://api.github.com/users/dapplion/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dapplion/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dapplion/subscriptions",
      "organizations_url": "https://api.github.com/users/dapplion/orgs",
      "repos_url": "https://api.github.com/users/dapplion/repos",
      "events_url": "https://api.github.com/users/dapplion/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dapplion/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-04T16:48:48Z",
    "updated_at": "2020-07-04T16:49:07Z",
    "author_association": "MEMBER",
    "body": "@wemeetagain You changed it from throwing an error to returning undefined in `v0.6.7` https://github.com/ChainSafe/ssz/commit/f94ad9db979d4b9b5895b8b7721f98d92d4f5be9#diff-6bfccd37008feef12ddec272c9e10203L82\r\n\r\nCan you remember the reasoning?",
    "reactions": {
      "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/653787926/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/653789165",
    "html_url": "https://github.com/ChainSafe/lodestar/issues/1092#issuecomment-653789165",
    "issue_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/1092",
    "id": 653789165,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1Mzc4OTE2NQ==",
    "user": {
      "login": "wemeetagain",
      "id": 1348242,
      "node_id": "MDQ6VXNlcjEzNDgyNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1348242?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wemeetagain",
      "html_url": "https://github.com/wemeetagain",
      "followers_url": "https://api.github.com/users/wemeetagain/followers",
      "following_url": "https://api.github.com/users/wemeetagain/following{/other_user}",
      "gists_url": "https://api.github.com/users/wemeetagain/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wemeetagain/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wemeetagain/subscriptions",
      "organizations_url": "https://api.github.com/users/wemeetagain/orgs",
      "repos_url": "https://api.github.com/users/wemeetagain/repos",
      "events_url": "https://api.github.com/users/wemeetagain/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wemeetagain/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-04T17:02:11Z",
    "updated_at": "2020-07-04T17:02:11Z",
    "author_association": "MEMBER",
    "body": "Yeah, the reasoning was to align `TreeBacked` object behavior to that of `ObjBacked` objects.\r\nOfc this is exactly the issue you're bringing up. The `Object` interface doesn't handle null checks well XD",
    "reactions": {
      "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/653789165/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
