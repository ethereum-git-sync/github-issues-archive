{
  "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/2885",
  "repository_url": "https://api.github.com/repos/ChainSafe/lodestar",
  "labels_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/2885/labels{/name}",
  "comments_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/2885/comments",
  "events_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/2885/events",
  "html_url": "https://github.com/ChainSafe/lodestar/issues/2885",
  "id": 952757736,
  "node_id": "MDU6SXNzdWU5NTI3NTc3MzY=",
  "number": 2885,
  "title": "Research reducing memory footprint",
  "user": {
    "login": "dapplion",
    "id": 35266934,
    "node_id": "MDQ6VXNlcjM1MjY2OTM0",
    "avatar_url": "https://avatars.githubusercontent.com/u/35266934?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/dapplion",
    "html_url": "https://github.com/dapplion",
    "followers_url": "https://api.github.com/users/dapplion/followers",
    "following_url": "https://api.github.com/users/dapplion/following{/other_user}",
    "gists_url": "https://api.github.com/users/dapplion/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/dapplion/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/dapplion/subscriptions",
    "organizations_url": "https://api.github.com/users/dapplion/orgs",
    "repos_url": "https://api.github.com/users/dapplion/repos",
    "events_url": "https://api.github.com/users/dapplion/events{/privacy}",
    "received_events_url": "https://api.github.com/users/dapplion/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3172006584,
      "node_id": "MDU6TGFiZWwzMTcyMDA2NTg0",
      "url": "https://api.github.com/repos/ChainSafe/lodestar/labels/scope-memory",
      "name": "scope-memory",
      "color": "980043",
      "default": false,
      "description": "Issues to reduce and improve memory usage."
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 7,
  "created_at": "2021-07-26T10:35:54Z",
  "updated_at": "2021-09-03T07:38:54Z",
  "closed_at": "2021-09-02T18:58:33Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "Tracking issue for various research efforts into reducing Lodestar beacon node memory footprint.",
  "closed_by": {
    "login": "wemeetagain",
    "id": 1348242,
    "node_id": "MDQ6VXNlcjEzNDgyNDI=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1348242?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/wemeetagain",
    "html_url": "https://github.com/wemeetagain",
    "followers_url": "https://api.github.com/users/wemeetagain/followers",
    "following_url": "https://api.github.com/users/wemeetagain/following{/other_user}",
    "gists_url": "https://api.github.com/users/wemeetagain/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/wemeetagain/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/wemeetagain/subscriptions",
    "organizations_url": "https://api.github.com/users/wemeetagain/orgs",
    "repos_url": "https://api.github.com/users/wemeetagain/repos",
    "events_url": "https://api.github.com/users/wemeetagain/events{/privacy}",
    "received_events_url": "https://api.github.com/users/wemeetagain/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/2885/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/2885/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/886583291",
    "html_url": "https://github.com/ChainSafe/lodestar/issues/2885#issuecomment-886583291",
    "issue_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/2885",
    "id": 886583291,
    "node_id": "IC_kwDOCD5_Gc402C_7",
    "user": {
      "login": "dapplion",
      "id": 35266934,
      "node_id": "MDQ6VXNlcjM1MjY2OTM0",
      "avatar_url": "https://avatars.githubusercontent.com/u/35266934?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dapplion",
      "html_url": "https://github.com/dapplion",
      "followers_url": "https://api.github.com/users/dapplion/followers",
      "following_url": "https://api.github.com/users/dapplion/following{/other_user}",
      "gists_url": "https://api.github.com/users/dapplion/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dapplion/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dapplion/subscriptions",
      "organizations_url": "https://api.github.com/users/dapplion/orgs",
      "repos_url": "https://api.github.com/users/dapplion/repos",
      "events_url": "https://api.github.com/users/dapplion/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dapplion/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-07-26T10:36:15Z",
    "updated_at": "2021-07-26T10:36:15Z",
    "author_association": "MEMBER",
    "body": "A small analysis of state sizes. I'm using the performance states which are maxed out states with 250_000 validators\r\n\r\n```\r\nstart                rss  0 B             heapTotal  0 B             heapUsed +4.8 KB          external +40 B            arrayBuffers  0 B            \r\ngetPubkeys()         rss +73.39 MB        heapTotal +38.91 MB        heapUsed +41.32 MB        external +11.87 MB        arrayBuffers +11.87 MB       \r\n.defaultValue()      rss +11.83 MB        heapTotal +11.5 MB         heapUsed +12.61 MB        external -520.44 KB       arrayBuffers -520.44 KB      \r\nbuild raw state      rss +100.47 MB       heapTotal +100.82 MB       heapUsed +100.43 MB       external  0 B             arrayBuffers  0 B            \r\naddPendingAtt        rss +123.2 MB        heapTotal +128.25 MB       heapUsed +128.3 MB        external  0 B             arrayBuffers  0 B            \r\ntoTreeBacked         rss +684.8 MB        heapTotal +675.74 MB       heapUsed +675.85 MB       external -13.3 KB         arrayBuffers -12.69 KB       \r\nCachedBeaconState    rss +624.05 MB       heapTotal +537.52 MB       heapUsed +529.14 MB       external +7.65 MB         arrayBuffers +7.65 MB\r\n```\r\n\r\nSource code:\r\n\r\n```ts\r\nasync function analyzeStateMemory(): Promise<void> {\r\n  await init(\"blst-native\");\r\n\r\n  const tracker = new MemoryTracker();\r\n  tracker.logDiff(\"start\");\r\n\r\n  const pubkeys = getPubkeys().pubkeys;\r\n  tracker.logDiff(\"getPubkeys()\");\r\n\r\n  const defaultState = ssz.phase0.BeaconState.defaultValue();\r\n  tracker.logDiff(\".defaultValue()\");\r\n\r\n  const state = buildPerformanceStateAllForks(defaultState, pubkeys);\r\n  tracker.logDiff(\"build raw state\");\r\n\r\n  addPendingAttestations(state as phase0.BeaconState);\r\n  tracker.logDiff(\"addPendingAtt\");\r\n\r\n  const stateTB = ssz.phase0.BeaconState.createTreeBackedFromStruct(state as phase0.BeaconState);\r\n  tracker.logDiff(\"toTreeBacked\");\r\n\r\n  const cached = allForks.createCachedBeaconState(config, stateTB);\r\n  tracker.logDiff(\"CachedBeaconState\");\r\n}\r\n\r\nclass MemoryTracker {\r\n  prev = process.memoryUsage();\r\n\r\n  logDiff(id: string): void {\r\n    const curr = process.memoryUsage();\r\n    const parts: string[] = [];\r\n    for (const key of Object.keys(this.prev) as (keyof NodeJS.MemoryUsage)[]) {\r\n      const prevVal = this.prev[key];\r\n      const currVal = curr[key];\r\n      const bytesDiff = currVal - prevVal;\r\n      const sign = bytesDiff < 0 ? \"-\" : bytesDiff > 0 ? \"+\" : \" \";\r\n      parts.push(`${key} ${sign}${formatBytes(Math.abs(bytesDiff)).padEnd(15)}`);\r\n    }\r\n    this.prev = curr;\r\n    console.log(id.padEnd(20), parts.join(\" \"));\r\n  }\r\n}\r\n```\r\n\r\n----\r\n\r\nOriginally posted in https://github.com/ChainSafe/lodestar/issues/2846#issuecomment-881551138",
    "reactions": {
      "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/886583291/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/886584827",
    "html_url": "https://github.com/ChainSafe/lodestar/issues/2885#issuecomment-886584827",
    "issue_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/2885",
    "id": 886584827,
    "node_id": "IC_kwDOCD5_Gc402DX7",
    "user": {
      "login": "dapplion",
      "id": 35266934,
      "node_id": "MDQ6VXNlcjM1MjY2OTM0",
      "avatar_url": "https://avatars.githubusercontent.com/u/35266934?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dapplion",
      "html_url": "https://github.com/dapplion",
      "followers_url": "https://api.github.com/users/dapplion/followers",
      "following_url": "https://api.github.com/users/dapplion/following{/other_user}",
      "gists_url": "https://api.github.com/users/dapplion/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dapplion/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dapplion/subscriptions",
      "organizations_url": "https://api.github.com/users/dapplion/orgs",
      "repos_url": "https://api.github.com/users/dapplion/repos",
      "events_url": "https://api.github.com/users/dapplion/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dapplion/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-07-26T10:38:35Z",
    "updated_at": "2021-07-26T10:46:30Z",
    "author_association": "MEMBER",
    "body": "@protolambda very kindly tested memory usage of tree backed structures in Go and Python implementations, thanks! :pray: \r\n\r\n----\r\n\r\n```\r\nALL                        4448778  207.526 MB\r\ntree.PairNode              2351329  143.514 MB\r\ntree.Root                  2097425   64.008 MB\r\nview.ContainerTypeDef            9    3.460 KB\r\nview.ComplexListTypeDef          5       281 B\r\nview.ComplexVectorTypeDef        3       171 B\r\nview.BasicVectorTypeDef          2       128 B\r\nview.BitListTypeDef              2        80 B\r\nview.BasicListTypeDef            1        64 B\r\nview.ContainerView               1        56 B\r\nview.BitVectorTypeDef            1        40 B\r\n```\r\nMemory usage of deserialized state, after running hash-tree-root (i.e. filled cached hashes), in Go\r\n\r\n```\r\nALL                            4250067  198.368 MB\r\ntree.PairNode                  2250030  137.331 MB\r\ntree.Root                      2000032   61.036 MB\r\nview.ContainerTypeDef                1       519 B\r\nview.BasicVectorTypeDef              1        64 B\r\nview.ComplexListTypeDef              1        56 B\r\nview.ComplexListView                 1        56 B\r\nphase0.ValidatorsRegistryView        1         8 B\r\n```\r\nAnd just the validators registry\r\n\r\n(tooling: https://github.com/fjl/memsize)\r\n\r\nI just checked the python version, that one is 672 MB;\r\n\r\n```\r\nasizeof((BeaconState(Container)\r\n    genesis_ti....c3f685007d2842f01615a0768870961ccc17,), limit=1000, stats=3.0) ...\r\n 672767672 bytes or 641.6 MiB\r\n         8 byte aligned\r\n         8 byte sizeof(void*)\r\n         1 object given\r\n   9405514 objects sized\r\n  21161972 objects seen\r\n        54 deepest recursion\r\n\r\n         7 profiles:  total (% of grand total), average, and largest flat size:  largest object\r\n   2608206 class dict objects:  271253424 or 258.7 MiB (40%), 104, 104:  {'_backing': H(H(H(H(H(0xd85b295f00000....4c4bc15ff4cd105ab33c)), '_hook': None} alen 0\r\n   2351329 class remerkleable.tree.PairNode objects:  169295688 or 161.5 MiB (25%), 72, 72:  H(H(H(H(H(0xd85b295f000000000000000000....a353aaa542ed63e44c4bc15ff4cd105ab33c))\r\n   2351330 class remerkleable.tree.RootNode objects:  131674480 or 125.6 MiB (20%), 56, 56:  0xd85b295f00000000000000000000000000000000000000000000000000000000\r\n   2094642 class asizeof._Slots objects:  100543896 or 95.9 MiB (15%), 48, 72:  ('left', 'right', '_root') alen 2\r\n   \r\n   (after init the hash-tree-root in python)\r\n   \r\n   2351329 class bytes objects:  169295688 or 161.5 MiB\r\n```\r\n\r\n- Pair node: 143 MB (Go) 161 MiB=168 MB (Python): not significant really\r\n- Root node: 64 MB (Go) 125 MiB = 135 MB (python): double somehow, trying to figure that out\r\n- class asizeof._Slots objects:: python takes space to store attributes in slots per object. Will look into optimizing this, but 15% of total is not that bad\r\n- class dict objects: will look into difference between view and backing, it might just accidentally scanned the view attributes recursively, even though not using extra memory\r\n\r\n(tooling https://gist.github.com/protolambda/4a918e48f835cd08e1c5a562ab730cfe)\r\n\r\n-----\r\n\r\nFound a way to get rid of those empty 32% class dicts by forcing remerkleable Node parent classes to have no class-dicts with empty __slots__ = () annotations. Python total size is down to 376.7 MiB now, cutting 259.6 MiB\r\n\r\nIt also cut down the sizes of the other types, now it's:\r\n```\r\n   2351329 class bytes objects:  169295688 or 161.5 MiB (43%), 72, 72:  b'_\\xdb\\xc3\\xd3-US\\xd0h\\xd4\\x99\\x138\\x....\\x90\\x88yu\\x92(K\\xe2\\x15\\xf2\\xe4\"\\xf8' alen 32\r\n   2351329 class remerkleable.tree.PairNode objects:  131674424 or 125.6 MiB (33%), 56, 56:  H(H(H(H(H(0xd85b295f000000000000000000....a353aaa542ed63e44c4bc15ff4cd105ab33c))\r\n   2351330 class remerkleable.tree.RootNode objects:  94053200 or 89.7 MiB (24%), 40, 40:  0xd85b295f00000000000000000000000000000000000000000000000000000000\r\n       127 class asizeof._Slots objects:  6888 or 6.7 KiB (0%), 54, 72:  ('left', 'right', '_root') alen 2\r\n```\r\n\r\n----\r\n\r\n**Conclusion**: Current SSZ representation of tree is very heavy compared with low level langs, and significantly more heavy that python. Look for similar tricks or different strategies to represent those data structures that may be more memory efficient.",
    "reactions": {
      "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/886584827/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/886586985",
    "html_url": "https://github.com/ChainSafe/lodestar/issues/2885#issuecomment-886586985",
    "issue_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/2885",
    "id": 886586985,
    "node_id": "IC_kwDOCD5_Gc402D5p",
    "user": {
      "login": "tuyennhv",
      "id": 10568965,
      "node_id": "MDQ6VXNlcjEwNTY4OTY1",
      "avatar_url": "https://avatars.githubusercontent.com/u/10568965?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tuyennhv",
      "html_url": "https://github.com/tuyennhv",
      "followers_url": "https://api.github.com/users/tuyennhv/followers",
      "following_url": "https://api.github.com/users/tuyennhv/following{/other_user}",
      "gists_url": "https://api.github.com/users/tuyennhv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tuyennhv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tuyennhv/subscriptions",
      "organizations_url": "https://api.github.com/users/tuyennhv/orgs",
      "repos_url": "https://api.github.com/users/tuyennhv/repos",
      "events_url": "https://api.github.com/users/tuyennhv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tuyennhv/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-07-26T10:42:10Z",
    "updated_at": "2021-07-26T10:42:10Z",
    "author_association": "CONTRIBUTOR",
    "body": "Currently, to store the hash information in a persistent-merkle-tree Node, it takes 208 bytes\r\n<img width=\"1270\" alt=\"Screen Shot 2021-07-26 at 17 30 43\" src=\"https://user-images.githubusercontent.com/10568965/126976129-e719665c-902f-46cd-8559-dd8f976bfae9.png\">\r\n\r\nthis is confirmed by v8 developer here https://stackoverflow.com/questions/45803829/memory-overhead-of-typed-arrays-vs-strings . He confirmed that `however having a large number of small TypedArrays is not memory efficient`, in our case it's Uint8Array\r\n\r\nI wonder if it's possible to store ArrayBuffer as our hash instead of Uint8Array? This would reduce from 208 bytes to 72 bytes.",
    "reactions": {
      "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/886586985/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/890372759",
    "html_url": "https://github.com/ChainSafe/lodestar/issues/2885#issuecomment-890372759",
    "issue_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/2885",
    "id": 890372759,
    "node_id": "IC_kwDOCD5_Gc41EgKX",
    "user": {
      "login": "dapplion",
      "id": 35266934,
      "node_id": "MDQ6VXNlcjM1MjY2OTM0",
      "avatar_url": "https://avatars.githubusercontent.com/u/35266934?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dapplion",
      "html_url": "https://github.com/dapplion",
      "followers_url": "https://api.github.com/users/dapplion/followers",
      "following_url": "https://api.github.com/users/dapplion/following{/other_user}",
      "gists_url": "https://api.github.com/users/dapplion/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dapplion/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dapplion/subscriptions",
      "organizations_url": "https://api.github.com/users/dapplion/orgs",
      "repos_url": "https://api.github.com/users/dapplion/repos",
      "events_url": "https://api.github.com/users/dapplion/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dapplion/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-07-31T16:35:06Z",
    "updated_at": "2021-07-31T16:35:06Z",
    "author_association": "MEMBER",
    "body": "This script captures the approach memory footprint of different Javascript objects experimentally https://gist.github.com/dapplion/94dff8bbf92d45a75c10181e1a95100f all numbers below refer to the resident set size increase.\r\n\r\n- `Uint8Array` with 32 bytes: 223 bytes / instance\r\n- `FixedObject` (from proto): 105 bytes / instance\r\n- native `bigint` with 32 bytes: 72 bytes / instance\r\n\r\nOther options that result as bad as Uint8Array: DataView, ArrayBuffer, native bindings, strings.\r\n\r\nI investigated using a big Uint8Array and manually managing memory, but seems like it's a worse option than using BigInts.\r\n- Adding items to a FinalizationRegistry has significant overhead, ~130 bytes\r\n- Would need to create a new object for each 32 bytes area of use, so it can be garbage collected and notify the FinalizationRegistry. An object with one property takes ~50 bytes\r\n\r\n**So seems that bigint could be useful to store hashes**\r\n\r\n-----\r\n\r\nAbout overhead of bigint <-> buffer conversions (in my laptop)\r\nWith native binding from https://github.com/no2chem/bigint-buffer\r\n- bigint -> buffer: 0.6us/op\r\n- buffer -> bigint: 0.6us/op\r\n- hash 2 x 32 bytes with our WASM impl (includes concat): 2.2us/op\r\n\r\nBut there exist a library from the same pp https://github.com/no2chem/bigint-hash that returns a bigint and is faster\r\n- hash 2 x 32 bytes with bigint-hash (pre-concated): 1.3us/op\r\n\r\nThat would be 2*0.6us (bigint conversions) + 0.4us (concat) + 1.3us, vs 2.2us currently. +30% slower\r\n\r\nHaving a custom wrapper at the bindings level that took two bigints, and does the conversions and concating efficiently while hashing it could be a big win",
    "reactions": {
      "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/890372759/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/890373235",
    "html_url": "https://github.com/ChainSafe/lodestar/issues/2885#issuecomment-890373235",
    "issue_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/2885",
    "id": 890373235,
    "node_id": "IC_kwDOCD5_Gc41EgRz",
    "user": {
      "login": "dapplion",
      "id": 35266934,
      "node_id": "MDQ6VXNlcjM1MjY2OTM0",
      "avatar_url": "https://avatars.githubusercontent.com/u/35266934?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dapplion",
      "html_url": "https://github.com/dapplion",
      "followers_url": "https://api.github.com/users/dapplion/followers",
      "following_url": "https://api.github.com/users/dapplion/following{/other_user}",
      "gists_url": "https://api.github.com/users/dapplion/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dapplion/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dapplion/subscriptions",
      "organizations_url": "https://api.github.com/users/dapplion/orgs",
      "repos_url": "https://api.github.com/users/dapplion/repos",
      "events_url": "https://api.github.com/users/dapplion/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dapplion/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-07-31T16:39:25Z",
    "updated_at": "2021-07-31T17:01:18Z",
    "author_association": "MEMBER",
    "body": "I did some analysis on the Prater state at slot 936600 to understand the impact of size of each field / type. The sizes are approximate and may not account for offsets\r\n\r\nfield | length | ser size per item | serialized size | tree size per item | tree leaf size\r\n-- | -- | -- | -- | -- | --\r\nblockRoots | 8192 | 32 | 262144 | 32 | 262144\r\nstateRoots | 8192 | 32 | 262144 | 32 | 262144\r\nhistoricalRoots | 114 | 23 | 2622 | 32 | 3648\r\neth1DataVotes | 611 | 72 | 43992 | 96 | 58656\r\nvalidators | 215612 | 121 | 26089052 | 320 | 68995840\r\nbalances | 215612 | 8 | 1724896 | 8 | 1724896\r\nrandaoMixes | 65536 | 32 | 2097152 | 32 | 2097152\r\nslashings | 8192 | 8 | 65536 | 8 | 65536\r\npreviousEpochAttestations | 3431 | 165 | 566115 | 400 | 1372400\r\ncurrentEpochAttestations | 2494 | 165 | 411510 | 400 | 997600\r\nTotal MB |   |   | 31.525163 |   | 75.840016\r\n\r\n-----\r\n\r\n![Screenshot from 2021-07-31 18-56-35](https://user-images.githubusercontent.com/35266934/127747033-abf93c14-0462-49b0-bf4c-caec2e3ac345.png)\r\n\r\n----\r\n\r\nFor validators the Uint8Array inefficiency accounts for `6 * 68995840 = 413 MB`, where the 6 factor comes from `220/32-1 = 6`. So it's worth it to explore alternative ways of representing the leafs of the validators tree.",
    "reactions": {
      "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/890373235/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 1
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/911971894",
    "html_url": "https://github.com/ChainSafe/lodestar/issues/2885#issuecomment-911971894",
    "issue_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/2885",
    "id": 911971894,
    "node_id": "IC_kwDOCD5_Gc42W5Y2",
    "user": {
      "login": "dapplion",
      "id": 35266934,
      "node_id": "MDQ6VXNlcjM1MjY2OTM0",
      "avatar_url": "https://avatars.githubusercontent.com/u/35266934?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dapplion",
      "html_url": "https://github.com/dapplion",
      "followers_url": "https://api.github.com/users/dapplion/followers",
      "following_url": "https://api.github.com/users/dapplion/following{/other_user}",
      "gists_url": "https://api.github.com/users/dapplion/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dapplion/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dapplion/subscriptions",
      "organizations_url": "https://api.github.com/users/dapplion/orgs",
      "repos_url": "https://api.github.com/users/dapplion/repos",
      "events_url": "https://api.github.com/users/dapplion/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dapplion/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-02T19:02:30Z",
    "updated_at": "2021-09-02T19:02:30Z",
    "author_association": "MEMBER",
    "body": "After https://github.com/ChainSafe/lodestar/pull/3046\r\n\r\n```\r\ngetPubkeys()         rss +96.79 MB        heapTotal +33.91 MB        heapUsed +40.16 MB        external +11.44 MB        arrayBuffers +11.44 MB       \r\n.defaultValue()      rss +17.75 MB        heapTotal +17.25 MB        heapUsed +17.07 MB        external  0 B             arrayBuffers  0 B            \r\nbuild raw state      rss +91.24 MB        heapTotal +93.82 MB        heapUsed +94.21 MB        external  0 B             arrayBuffers  0 B            \r\naddPendingAtt        rss +127.2 MB        heapTotal +134.5 MB        heapUsed +127.45 MB       external  0 B             arrayBuffers  0 B            \r\ntoTreeBacked         rss +111.71 MB       heapTotal +98.75 MB        heapUsed +106.14 MB       external  0 B             arrayBuffers  0 B            \r\nCachedBeaconState    rss +493.89 MB       heapTotal +433.62 MB       heapUsed +430.64 MB       external  0 B             arrayBuffers  0 B \r\n```\r\n\r\nAdding some granularity to CachedBeaconState\r\n\r\n```\r\npubkey2index              rss +75 MB\r\nindex2pubkey              rss +385 MB\r\neffectiveBalances cache   rss +15 MB\r\nshufflings                rss +11.3 MB\r\nrest of epochCtx          rss +0 MB\r\nparticipation cache       rss +7.11 MB\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/911971894/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/912327742",
    "html_url": "https://github.com/ChainSafe/lodestar/issues/2885#issuecomment-912327742",
    "issue_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/2885",
    "id": 912327742,
    "node_id": "IC_kwDOCD5_Gc42YQQ-",
    "user": {
      "login": "dapplion",
      "id": 35266934,
      "node_id": "MDQ6VXNlcjM1MjY2OTM0",
      "avatar_url": "https://avatars.githubusercontent.com/u/35266934?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dapplion",
      "html_url": "https://github.com/dapplion",
      "followers_url": "https://api.github.com/users/dapplion/followers",
      "following_url": "https://api.github.com/users/dapplion/following{/other_user}",
      "gists_url": "https://api.github.com/users/dapplion/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dapplion/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dapplion/subscriptions",
      "organizations_url": "https://api.github.com/users/dapplion/orgs",
      "repos_url": "https://api.github.com/users/dapplion/repos",
      "events_url": "https://api.github.com/users/dapplion/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dapplion/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-03T07:38:54Z",
    "updated_at": "2021-09-03T07:38:54Z",
    "author_association": "MEMBER",
    "body": "After redoing the tests in my local env more times and in @tuyennhv 's the results are different:\r\n```\r\npubkey2index + index2pubkey    rss +90.32 MB        heapTotal +61.23 MB        heapUsed +59.41 MB        external  0 B             arrayBuffers  0 B\r\n```\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/912327742/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
