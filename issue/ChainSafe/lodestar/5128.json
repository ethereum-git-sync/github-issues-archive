{
  "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/5128",
  "repository_url": "https://api.github.com/repos/ChainSafe/lodestar",
  "labels_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/5128/labels{/name}",
  "comments_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/5128/comments",
  "events_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/5128/events",
  "html_url": "https://github.com/ChainSafe/lodestar/issues/5128",
  "id": 1580011543,
  "node_id": "I_kwDOCD5_Gc5eLRAX",
  "number": 5128,
  "title": "API SSZ response",
  "user": {
    "login": "wemeetagain",
    "id": 1348242,
    "node_id": "MDQ6VXNlcjEzNDgyNDI=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1348242?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/wemeetagain",
    "html_url": "https://github.com/wemeetagain",
    "followers_url": "https://api.github.com/users/wemeetagain/followers",
    "following_url": "https://api.github.com/users/wemeetagain/following{/other_user}",
    "gists_url": "https://api.github.com/users/wemeetagain/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/wemeetagain/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/wemeetagain/subscriptions",
    "organizations_url": "https://api.github.com/users/wemeetagain/orgs",
    "repos_url": "https://api.github.com/users/wemeetagain/repos",
    "events_url": "https://api.github.com/users/wemeetagain/events{/privacy}",
    "received_events_url": "https://api.github.com/users/wemeetagain/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 4754137758,
      "node_id": "LA_kwDOCD5_Gc8AAAABG15ing",
      "url": "https://api.github.com/repos/ChainSafe/lodestar/labels/meta-feature-request",
      "name": "meta-feature-request",
      "color": "B5CF5F",
      "default": false,
      "description": "Issues to track feature requests."
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 13,
  "created_at": "2023-02-10T16:40:50Z",
  "updated_at": "2023-10-03T13:14:36Z",
  "closed_at": null,
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "\r\n**Is your feature request related to a problem? Please describe.**\r\n- See https://github.com/ethereum/beacon-APIs/issues/250\r\n\r\n**Describe the solution you'd like**\r\n\r\nSystematically support returning ssz-encoded responses throughout all/most API endpoints.\r\nSystematically return the [Eth-Consensus-Version](https://github.com/ethereum/beacon-APIs/blob/093890f163788d9f78cbf0b8cd529e524cf6fe48/apis/validator/block.v2.yaml#L43-L45) header \r\n\r\nFigure out how to expose encoding choice + raw response in our api client. (Take notes from fetch API?)\r\n\r\n**Additional context**\r\n\r\nThere are a benefit from using ssz across the board in production. SSZ encoding is more performant than JSON encoding.\r\n\r\nWe also already have some consumers that are requesting this feature.",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/5128/reactions",
    "total_count": 3,
    "+1": 3,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/5128/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/1456749094",
    "html_url": "https://github.com/ChainSafe/lodestar/issues/5128#issuecomment-1456749094",
    "issue_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/5128",
    "id": 1456749094,
    "node_id": "IC_kwDOCD5_Gc5W1Dom",
    "user": {
      "login": "maschad",
      "id": 9755286,
      "node_id": "MDQ6VXNlcjk3NTUyODY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9755286?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/maschad",
      "html_url": "https://github.com/maschad",
      "followers_url": "https://api.github.com/users/maschad/followers",
      "following_url": "https://api.github.com/users/maschad/following{/other_user}",
      "gists_url": "https://api.github.com/users/maschad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/maschad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/maschad/subscriptions",
      "organizations_url": "https://api.github.com/users/maschad/orgs",
      "repos_url": "https://api.github.com/users/maschad/repos",
      "events_url": "https://api.github.com/users/maschad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/maschad/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-06T18:43:51Z",
    "updated_at": "2023-03-06T18:43:51Z",
    "author_association": "CONTRIBUTOR",
    "body": "The [getReqSerializers()](https://github.com/ChainSafe/lodestar/blob/0006d8662d4e082a85496235b6b5431189776bbb/packages/api/src/beacon/routes/debug.ts#L147) function checks the headers for the requested format in the header. Given this function is implemented across a variety of other clients I am thinking it should be an interface that does this check and then based on that [generates a JSON client](https://github.com/ChainSafe/lodestar/blob/0006d8662d4e082a85496235b6b5431189776bbb/packages/api/src/utils/client/client.ts#L52) or an SSZ client. Wdty @nazarhussain @wemeetagain @dapplion ",
    "reactions": {
      "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/1456749094/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/1457064791",
    "html_url": "https://github.com/ChainSafe/lodestar/issues/5128#issuecomment-1457064791",
    "issue_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/5128",
    "id": 1457064791,
    "node_id": "IC_kwDOCD5_Gc5W2QtX",
    "user": {
      "login": "nazarhussain",
      "id": 112468,
      "node_id": "MDQ6VXNlcjExMjQ2OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/112468?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nazarhussain",
      "html_url": "https://github.com/nazarhussain",
      "followers_url": "https://api.github.com/users/nazarhussain/followers",
      "following_url": "https://api.github.com/users/nazarhussain/following{/other_user}",
      "gists_url": "https://api.github.com/users/nazarhussain/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nazarhussain/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nazarhussain/subscriptions",
      "organizations_url": "https://api.github.com/users/nazarhussain/orgs",
      "repos_url": "https://api.github.com/users/nazarhussain/repos",
      "events_url": "https://api.github.com/users/nazarhussain/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nazarhussain/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-06T21:58:00Z",
    "updated_at": "2023-03-06T22:00:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "I suggest API clients should not be encoding specific but each endpoint. I can initiate a client, and for some endpoints I need SSZ and for some I need JSON. \r\n\r\nWe have one endpoint already implemented with this approach. Check this reference. \r\n\r\nhttps://github.com/ChainSafe/lodestar/blob/0006d8662d4e082a85496235b6b5431189776bbb/packages/api/src/beacon/routes/debug.ts#L84-L98\r\n\r\nThe second argument from the API client should be passed as HEADER to the request and than parsed by **ReqeustSerializers**.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/1457064791/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/1457283155",
    "html_url": "https://github.com/ChainSafe/lodestar/issues/5128#issuecomment-1457283155",
    "issue_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/5128",
    "id": 1457283155,
    "node_id": "IC_kwDOCD5_Gc5W3GBT",
    "user": {
      "login": "dapplion",
      "id": 35266934,
      "node_id": "MDQ6VXNlcjM1MjY2OTM0",
      "avatar_url": "https://avatars.githubusercontent.com/u/35266934?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dapplion",
      "html_url": "https://github.com/dapplion",
      "followers_url": "https://api.github.com/users/dapplion/followers",
      "following_url": "https://api.github.com/users/dapplion/following{/other_user}",
      "gists_url": "https://api.github.com/users/dapplion/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dapplion/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dapplion/subscriptions",
      "organizations_url": "https://api.github.com/users/dapplion/orgs",
      "repos_url": "https://api.github.com/users/dapplion/repos",
      "events_url": "https://api.github.com/users/dapplion/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dapplion/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-07T00:40:05Z",
    "updated_at": "2023-03-07T00:40:18Z",
    "author_association": "MEMBER",
    "body": "@nazarhussain I imagine an API ergonomics like this would be nice:\r\n\r\n```ts\r\napi.beacon.getGenesis() // queries with mime-type json\r\napi.beacon.ssz.getGenesis() // queries with mime-type ssz\r\n```\r\nWDYT",
    "reactions": {
      "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/1457283155/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/1457754401",
    "html_url": "https://github.com/ChainSafe/lodestar/issues/5128#issuecomment-1457754401",
    "issue_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/5128",
    "id": 1457754401,
    "node_id": "IC_kwDOCD5_Gc5W45Eh",
    "user": {
      "login": "nazarhussain",
      "id": 112468,
      "node_id": "MDQ6VXNlcjExMjQ2OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/112468?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nazarhussain",
      "html_url": "https://github.com/nazarhussain",
      "followers_url": "https://api.github.com/users/nazarhussain/followers",
      "following_url": "https://api.github.com/users/nazarhussain/following{/other_user}",
      "gists_url": "https://api.github.com/users/nazarhussain/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nazarhussain/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nazarhussain/subscriptions",
      "organizations_url": "https://api.github.com/users/nazarhussain/orgs",
      "repos_url": "https://api.github.com/users/nazarhussain/repos",
      "events_url": "https://api.github.com/users/nazarhussain/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nazarhussain/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-07T08:29:12Z",
    "updated_at": "2023-03-07T08:29:12Z",
    "author_association": "CONTRIBUTOR",
    "body": "My preferences would be \n\n```ts\n\napi.beacon.getGenesis() // queries with mime-type json\napi.beacon.getGenesis('ssz') // queries with mime-type ssz\n```\n\nFor the following reasons:\n\n1. Namespace derivation is associated with the eth API, so we should not use it for other purposes. \n2. The parameter convention is consistent to use.\n3. We can extend easily for more mime types in future. ",
    "reactions": {
      "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/1457754401/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/1458230224",
    "html_url": "https://github.com/ChainSafe/lodestar/issues/5128#issuecomment-1458230224",
    "issue_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/5128",
    "id": 1458230224,
    "node_id": "IC_kwDOCD5_Gc5W6tPQ",
    "user": {
      "login": "dapplion",
      "id": 35266934,
      "node_id": "MDQ6VXNlcjM1MjY2OTM0",
      "avatar_url": "https://avatars.githubusercontent.com/u/35266934?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dapplion",
      "html_url": "https://github.com/dapplion",
      "followers_url": "https://api.github.com/users/dapplion/followers",
      "following_url": "https://api.github.com/users/dapplion/following{/other_user}",
      "gists_url": "https://api.github.com/users/dapplion/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dapplion/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dapplion/subscriptions",
      "organizations_url": "https://api.github.com/users/dapplion/orgs",
      "repos_url": "https://api.github.com/users/dapplion/repos",
      "events_url": "https://api.github.com/users/dapplion/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dapplion/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-07T14:03:48Z",
    "updated_at": "2023-03-07T14:04:02Z",
    "author_association": "MEMBER",
    "body": "@nazarhussain The API has a lot of surface so supporting that generically should not involve a huge change that make maintenance a pain. Could you draft some ideas on how to implement that last argument generically?\r\n\r\nA current feature of the library type is that the API has the same interface consumed programmatically or via REST. Having to add this last parameter must have to break this symmetry, otherwise api/impl/* would be a complete nightmare.\r\n\r\nWhat about name-spacing at the top level? \r\n\r\n```ts\r\napi.beacon.getGenesis() // queries with mime-type json\r\napi.ssz.beacon.getGenesis() // queries with mime-type ssz\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/1458230224/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/1458322863",
    "html_url": "https://github.com/ChainSafe/lodestar/issues/5128#issuecomment-1458322863",
    "issue_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/5128",
    "id": 1458322863,
    "node_id": "IC_kwDOCD5_Gc5W7D2v",
    "user": {
      "login": "maschad",
      "id": 9755286,
      "node_id": "MDQ6VXNlcjk3NTUyODY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9755286?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/maschad",
      "html_url": "https://github.com/maschad",
      "followers_url": "https://api.github.com/users/maschad/followers",
      "following_url": "https://api.github.com/users/maschad/following{/other_user}",
      "gists_url": "https://api.github.com/users/maschad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/maschad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/maschad/subscriptions",
      "organizations_url": "https://api.github.com/users/maschad/orgs",
      "repos_url": "https://api.github.com/users/maschad/repos",
      "events_url": "https://api.github.com/users/maschad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/maschad/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-07T15:00:24Z",
    "updated_at": "2023-03-07T15:00:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "@dapplion @nazarhussain I think we should focus on the server for now as this issue was originally raised with the consumers of these endpoints in mind. ",
    "reactions": {
      "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/1458322863/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/1458875759",
    "html_url": "https://github.com/ChainSafe/lodestar/issues/5128#issuecomment-1458875759",
    "issue_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/5128",
    "id": 1458875759,
    "node_id": "IC_kwDOCD5_Gc5W9K1v",
    "user": {
      "login": "nazarhussain",
      "id": 112468,
      "node_id": "MDQ6VXNlcjExMjQ2OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/112468?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nazarhussain",
      "html_url": "https://github.com/nazarhussain",
      "followers_url": "https://api.github.com/users/nazarhussain/followers",
      "following_url": "https://api.github.com/users/nazarhussain/following{/other_user}",
      "gists_url": "https://api.github.com/users/nazarhussain/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nazarhussain/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nazarhussain/subscriptions",
      "organizations_url": "https://api.github.com/users/nazarhussain/orgs",
      "repos_url": "https://api.github.com/users/nazarhussain/repos",
      "events_url": "https://api.github.com/users/nazarhussain/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nazarhussain/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-07T21:07:23Z",
    "updated_at": "2023-03-07T21:07:23Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Could you draft some ideas on how to implement that last argument generically?\r\n\r\nThere could be two options: \r\n\r\n1. We can do it explicitly the same way [`debug.getState`](https://github.com/ChainSafe/lodestar/blob/unstable/packages/api/src/beacon/routes/debug.ts#L91) endpoint. \r\n2. Add an additional parameter implicitly with a custom type before setting the `export type Api` in the routes. \r\n\r\nOther approach which looks more appropriate than namespace is the function chaining. \r\n\r\n```ts\r\napi.beacon.getGenesis().json() // queries with mime-type json\r\napi.beacon.getGenesis().ssz() // queries with mime-type ssz\r\n```\r\n\r\nWhere actual request is triggered by calling a specfic format function after the request function. This approach will be more explicit for consumer (so less confusion) and more extensible for us in future. ",
    "reactions": {
      "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/1458875759/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/1459084240",
    "html_url": "https://github.com/ChainSafe/lodestar/issues/5128#issuecomment-1459084240",
    "issue_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/5128",
    "id": 1459084240,
    "node_id": "IC_kwDOCD5_Gc5W99vQ",
    "user": {
      "login": "dapplion",
      "id": 35266934,
      "node_id": "MDQ6VXNlcjM1MjY2OTM0",
      "avatar_url": "https://avatars.githubusercontent.com/u/35266934?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dapplion",
      "html_url": "https://github.com/dapplion",
      "followers_url": "https://api.github.com/users/dapplion/followers",
      "following_url": "https://api.github.com/users/dapplion/following{/other_user}",
      "gists_url": "https://api.github.com/users/dapplion/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dapplion/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dapplion/subscriptions",
      "organizations_url": "https://api.github.com/users/dapplion/orgs",
      "repos_url": "https://api.github.com/users/dapplion/repos",
      "events_url": "https://api.github.com/users/dapplion/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dapplion/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-08T00:35:00Z",
    "updated_at": "2023-03-08T00:35:00Z",
    "author_association": "MEMBER",
    "body": "@nazarhussain please check the usage pattern here https://github.com/ChainSafe/lodestar/blob/eb4b43da98d28225990178d969132b994bc33de3/packages/validator/src/validator.ts#L74-L89 on how the validator can both consume the api directly in-memory of via HTTP. In the in-memory case what would cause to call that suffixed `.ssz()`?\r\n\r\nAlso this tooling must serve us as well as the broader community. Adding more boilerplate like that sounds annoying. I want to support the simplest case of \"just give me a block I don't care\". PR https://github.com/ChainSafe/lodestar/pull/4994 already kind of defeated that requiring non-trivial amount of boilerplate to do anything, but we should agree first on the goals and audience of the library",
    "reactions": {
      "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/1459084240/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/1460540003",
    "html_url": "https://github.com/ChainSafe/lodestar/issues/5128#issuecomment-1460540003",
    "issue_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/5128",
    "id": 1460540003,
    "node_id": "IC_kwDOCD5_Gc5XDhJj",
    "user": {
      "login": "nazarhussain",
      "id": 112468,
      "node_id": "MDQ6VXNlcjExMjQ2OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/112468?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nazarhussain",
      "html_url": "https://github.com/nazarhussain",
      "followers_url": "https://api.github.com/users/nazarhussain/followers",
      "following_url": "https://api.github.com/users/nazarhussain/following{/other_user}",
      "gists_url": "https://api.github.com/users/nazarhussain/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nazarhussain/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nazarhussain/subscriptions",
      "organizations_url": "https://api.github.com/users/nazarhussain/orgs",
      "repos_url": "https://api.github.com/users/nazarhussain/repos",
      "events_url": "https://api.github.com/users/nazarhussain/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nazarhussain/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-08T17:27:05Z",
    "updated_at": "2023-03-08T17:27:05Z",
    "author_association": "CONTRIBUTOR",
    "body": "> on how the validator can both consume the api directly in-memory of via HTTP. In the in-memory case what would cause to call that suffixed `.ssz()`?\r\n\r\nYes user had to call `.ssz()` in that case. \r\n\r\n\r\n\r\n> \"just give me a block I don't care\"\r\n\r\nBut as a user you should care about the format of that block. So telling the API client if you need the block as ssz or json is not a trivial boilerplate. \r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/1460540003/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/1460635800",
    "html_url": "https://github.com/ChainSafe/lodestar/issues/5128#issuecomment-1460635800",
    "issue_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/5128",
    "id": 1460635800,
    "node_id": "IC_kwDOCD5_Gc5XD4iY",
    "user": {
      "login": "wemeetagain",
      "id": 1348242,
      "node_id": "MDQ6VXNlcjEzNDgyNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1348242?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wemeetagain",
      "html_url": "https://github.com/wemeetagain",
      "followers_url": "https://api.github.com/users/wemeetagain/followers",
      "following_url": "https://api.github.com/users/wemeetagain/following{/other_user}",
      "gists_url": "https://api.github.com/users/wemeetagain/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wemeetagain/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wemeetagain/subscriptions",
      "organizations_url": "https://api.github.com/users/wemeetagain/orgs",
      "repos_url": "https://api.github.com/users/wemeetagain/repos",
      "events_url": "https://api.github.com/users/wemeetagain/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wemeetagain/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-08T18:15:31Z",
    "updated_at": "2023-03-08T18:15:31Z",
    "author_association": "MEMBER",
    "body": "agree with @maschad that the server is actually the more important feature for now\r\n\r\nRegarding the client, I have some opinions about it, having used it fairly extensively in side chainsafe projects.\r\nI feel that the direction mentioned by @nazarhussain is the right direction for a full-featured client. We can also support a simple \"I don't care\" client, if necessary. (It's easy to wrap a full-featured client into a simple client. It's not easy to extend a simple client into a full-featured client.)\r\n\r\n> PR https://github.com/ChainSafe/lodestar/pull/4994 already kind of defeated that requiring non-trivial amount of boilerplate to do anything\r\n\r\nThis PR made the error handling that was already needed more explicit. The \"non-trivial\" amount of boilerplate is either an `if(result.ok) {` or `ApiError.assert(result)`, imo, neither of which can be considered \"non-trivial\". We could still improve the situation though by adding something like an `assertOk` method that could do the assertion as a one-liner and return the success type.\r\n\r\nThe way I'd like to see the full-featured client operate is taking inspiration from the `fetch` api, which operates on the model of Request and Response objects.\r\n\r\nSomething like this:\r\n```ts\r\n\r\ntype RequestOpts = {\r\n  wireFormat?: 'json' | 'ssz';\r\n  timeoutMs?: number;\r\n}\r\n\r\ntype FailResponse = {\r\n  ok: false;\r\n  code: number;\r\n  message?: string;\r\n}\r\ntype SuccessResponse<T> = {\r\n  ok: true;\r\n  type: Type;\r\n  forkVersion?: Version;\r\n  fork: Fork;\r\n  value(): T;\r\n  ssz(): Uint8Array;\r\n}\r\ntype Response<T> = (SuccessResponse<T> | FailResponse) & {\r\n  assertOk(): SuccessResponse<T>;\r\n}\r\n\r\nconst response = await api[namespace][method](...args, opts)\r\n```\r\n\r\nIf we want a simplified client, we can wrap responses with something like:\r\n```ts\r\nfunction simplifyResponse<T>(response: Response<T>): {fork: Fork; value: T} {\r\n  response = response.assertOk();\r\n  return {\r\n    fork: response.fork,\r\n    value: response.value(),\r\n  };\r\n}\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/1460635800/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/1460962450",
    "html_url": "https://github.com/ChainSafe/lodestar/issues/5128#issuecomment-1460962450",
    "issue_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/5128",
    "id": 1460962450,
    "node_id": "IC_kwDOCD5_Gc5XFISS",
    "user": {
      "login": "nazarhussain",
      "id": 112468,
      "node_id": "MDQ6VXNlcjExMjQ2OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/112468?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nazarhussain",
      "html_url": "https://github.com/nazarhussain",
      "followers_url": "https://api.github.com/users/nazarhussain/followers",
      "following_url": "https://api.github.com/users/nazarhussain/following{/other_user}",
      "gists_url": "https://api.github.com/users/nazarhussain/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nazarhussain/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nazarhussain/subscriptions",
      "organizations_url": "https://api.github.com/users/nazarhussain/orgs",
      "repos_url": "https://api.github.com/users/nazarhussain/repos",
      "events_url": "https://api.github.com/users/nazarhussain/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nazarhussain/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-08T22:26:36Z",
    "updated_at": "2023-03-08T22:26:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "> adding something like an `assertOk` method that could do the assertion as a one-liner and return the success type.\r\n\r\nWe already have `ApiError.assert(res)` everywhere which is just one line extra so not trivial. ",
    "reactions": {
      "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/1460962450/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/1462085080",
    "html_url": "https://github.com/ChainSafe/lodestar/issues/5128#issuecomment-1462085080",
    "issue_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/5128",
    "id": 1462085080,
    "node_id": "IC_kwDOCD5_Gc5XJaXY",
    "user": {
      "login": "dapplion",
      "id": 35266934,
      "node_id": "MDQ6VXNlcjM1MjY2OTM0",
      "avatar_url": "https://avatars.githubusercontent.com/u/35266934?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dapplion",
      "html_url": "https://github.com/dapplion",
      "followers_url": "https://api.github.com/users/dapplion/followers",
      "following_url": "https://api.github.com/users/dapplion/following{/other_user}",
      "gists_url": "https://api.github.com/users/dapplion/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dapplion/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dapplion/subscriptions",
      "organizations_url": "https://api.github.com/users/dapplion/orgs",
      "repos_url": "https://api.github.com/users/dapplion/repos",
      "events_url": "https://api.github.com/users/dapplion/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dapplion/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-09T13:37:51Z",
    "updated_at": "2023-03-09T13:37:51Z",
    "author_association": "MEMBER",
    "body": "Ok yeah you are right it's not that bad, let's go with the full featured client",
    "reactions": {
      "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/1462085080/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/1744956266",
    "html_url": "https://github.com/ChainSafe/lodestar/issues/5128#issuecomment-1744956266",
    "issue_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/5128",
    "id": 1744956266,
    "node_id": "IC_kwDOCD5_Gc5oAetq",
    "user": {
      "login": "jshufro",
      "id": 116244,
      "node_id": "MDQ6VXNlcjExNjI0NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/116244?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jshufro",
      "html_url": "https://github.com/jshufro",
      "followers_url": "https://api.github.com/users/jshufro/followers",
      "following_url": "https://api.github.com/users/jshufro/following{/other_user}",
      "gists_url": "https://api.github.com/users/jshufro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jshufro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jshufro/subscriptions",
      "organizations_url": "https://api.github.com/users/jshufro/orgs",
      "repos_url": "https://api.github.com/users/jshufro/repos",
      "events_url": "https://api.github.com/users/jshufro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jshufro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-10-03T13:14:35Z",
    "updated_at": "2023-10-03T13:14:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "At @wemeetagain 's request here: https://github.com/ChainSafe/lodestar/pull/6014#pullrequestreview-1653629578 I'm going to share a couple use-cases for SSZ handlers that I've run across building applications downstream of the consensus clients.\r\n\r\nIt's my preference that every beacon-api endpoint eventually support ssz as a matter of course.\r\n\r\nFeel free to ignore this post, unless you really want to know a lot more about how rocket pool and the rocket rescue node work.\r\n\r\n---\r\n\r\nThe first use-case pertains to rocket pool's smoothing pool tree generation. The tree itself is a merkle tree containing performance data pertinent to all rocket pool validators that have opted in to the smoothing pool. A node operator's share of the smoothing pool is proportionate to how many successful attestations they made during a rewards interval (28 days). At the end of the interval, the oDAO generates this tree and votes on the root. Once vote consensus is reached, the root is published on-chain and users can submit merkle proofs to get their rewards.\r\n\r\nThe most compute intensive portion of this process is scanning 28 days worth of epochs (6300) and collecting performance data for over 14400 validators. First, we check the epoch for duties assignments for each validator using `/eth/v1/beacon/states/finalized/committees?state_id={epoch}`. This handler only returns json, and the responses are quite large:\r\n\r\n```\r\n$ curl -Ss http://eth2:5052/eth/v1/beacon/states/finalized/committees?state_id=230000 | wc -c\r\n7576856\r\n```\r\n7 MB of data, 6300 times reaches to around 48 GB of json that we must serialize, pass over the wire, and deserialize. It took sufficiently long that, just for fun, I wrote a reverse proxy to man-in-the-middle requests to /beacon/states/finalized/committees, convert them to protobuf, and cache them on disk. [I found quite a large speedup from that alone.](https://gist.github.com/jshufro/6c1cd90adc3ca74808e27ea44a1655aa#hack-5-the-dirty-dirty-protobuf-cache)\r\n\r\n---\r\n\r\nThe second use-case is probably one you're already aware of from other users- namely, rocket rescue node wants to build a bidirectional mapping of 0x01 credentials to validator pubkeys. The rescue node, if you're unfamiliar, is free to use, but access limited. We needed a way to reject access to specific users after they reach some quota, so we settled on HMAC credentials which include an expiry, and we keep track of which users have requested credentials and when in a database. We settled on using the address of the node operator's node wallet as a user identifier, because we could easily have users prove custody of the node wallet via a signed message (see the form on https://rescuenode.com ).\r\n\r\nNow, we're expanding access to solo validators, but we still need a way for them to prove custody of a given validator, and to rate limit them. We settled on a signed message from the 0x01 credential, which allows us a small amount of sybil protection... however, we need to know if an address is a 0x01 credential for at least one validator before we issue the HMAC credential, ergo the need for a 0x01->pubkey map. Additionally, when the validator uses the rescue node, we need to do some fee_recipient policing to mitigate the prepare_beacon_proposer attack outlined [here](https://www.symphonious.net/2022/04/09/exploring-eth2-stealing-inclusion-fees-from-public-beacon-nodes/). For RP node operators, the valid fee_recipient is well-known and derived from on-chain data. For solo validators, we will require them to use their withdrawal address as their fee recipient. As such, when we receive a prepare_beacon_proposer request, we need to fetch the 0x01 credential for a given pubkey- ergo the pubkey->0x01 map.\r\n\r\nThe result of this is that rescue-proxy would like to poll `/eth/v1/beacon/states/finalized/validators` to create the index:\r\n```\r\n$ curl -Ss http://eth2:5052/eth/v1/beacon/states/finalized/validators | wc -c\r\n456968766\r\n```\r\nSince the request is so slow and large, we reduced the polling frequency to every few hours. The fallout of this is that a user who migrates from 0x00 to 0x01 credentials in order to use the rescue node may not be able to until the polling boundary elapses, which we generally consider to be acceptable... but, in addition, our rescue proxy startup speed and therefor our ability to recover from service degradation is diminished.\r\n\r\nWe were able to side-step this through attestantio's beacon client, which has an optimization to pull the full set from the state instead of the beacon/states/finalized/validators endpoint: https://github.com/attestantio/go-eth2-client/blob/master/http/validators.go#L78-L80\r\n\r\nUltimately this is how we discovered https://github.com/ChainSafe/lodestar/issues/5966 since attestantio sets weights in the Accept header.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/1744956266/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
