{
  "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/4656",
  "repository_url": "https://api.github.com/repos/ChainSafe/lodestar",
  "labels_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/4656/labels{/name}",
  "comments_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/4656/comments",
  "events_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/4656/events",
  "html_url": "https://github.com/ChainSafe/lodestar/issues/4656",
  "id": 1404100899,
  "node_id": "I_kwDOCD5_Gc5TsOEj",
  "number": 4656,
  "title": "Possible typescript type improvements",
  "user": {
    "login": "wemeetagain",
    "id": 1348242,
    "node_id": "MDQ6VXNlcjEzNDgyNDI=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1348242?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/wemeetagain",
    "html_url": "https://github.com/wemeetagain",
    "followers_url": "https://api.github.com/users/wemeetagain/followers",
    "following_url": "https://api.github.com/users/wemeetagain/following{/other_user}",
    "gists_url": "https://api.github.com/users/wemeetagain/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/wemeetagain/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/wemeetagain/subscriptions",
    "organizations_url": "https://api.github.com/users/wemeetagain/orgs",
    "repos_url": "https://api.github.com/users/wemeetagain/repos",
    "events_url": "https://api.github.com/users/wemeetagain/events{/privacy}",
    "received_events_url": "https://api.github.com/users/wemeetagain/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1200090453,
      "node_id": "MDU6TGFiZWwxMjAwMDkwNDUz",
      "url": "https://api.github.com/repos/ChainSafe/lodestar/labels/prio-low",
      "name": "prio-low",
      "color": "fde2b4",
      "default": false,
      "description": "This is nice to have."
    },
    {
      "id": 4116885308,
      "node_id": "LA_kwDOCD5_Gc71Yq88",
      "url": "https://api.github.com/repos/ChainSafe/lodestar/labels/scope-ux",
      "name": "scope-ux",
      "color": "980043",
      "default": false,
      "description": "Issues for CLI UX or general consumer UX."
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": {
    "login": "wemeetagain",
    "id": 1348242,
    "node_id": "MDQ6VXNlcjEzNDgyNDI=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1348242?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/wemeetagain",
    "html_url": "https://github.com/wemeetagain",
    "followers_url": "https://api.github.com/users/wemeetagain/followers",
    "following_url": "https://api.github.com/users/wemeetagain/following{/other_user}",
    "gists_url": "https://api.github.com/users/wemeetagain/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/wemeetagain/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/wemeetagain/subscriptions",
    "organizations_url": "https://api.github.com/users/wemeetagain/orgs",
    "repos_url": "https://api.github.com/users/wemeetagain/repos",
    "events_url": "https://api.github.com/users/wemeetagain/events{/privacy}",
    "received_events_url": "https://api.github.com/users/wemeetagain/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "wemeetagain",
      "id": 1348242,
      "node_id": "MDQ6VXNlcjEzNDgyNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1348242?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wemeetagain",
      "html_url": "https://github.com/wemeetagain",
      "followers_url": "https://api.github.com/users/wemeetagain/followers",
      "following_url": "https://api.github.com/users/wemeetagain/following{/other_user}",
      "gists_url": "https://api.github.com/users/wemeetagain/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wemeetagain/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wemeetagain/subscriptions",
      "organizations_url": "https://api.github.com/users/wemeetagain/orgs",
      "repos_url": "https://api.github.com/users/wemeetagain/repos",
      "events_url": "https://api.github.com/users/wemeetagain/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wemeetagain/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2022-10-11T06:54:29Z",
  "updated_at": "2023-11-05T16:15:53Z",
  "closed_at": null,
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "I was thinking about how we could better handle consensus types changing across different forks, fork capabilities, and also blinded and unblinded variants.\r\n\r\nWe can/should use generics to help switch between both forks/capabilities and blinded/unblinded if we restructure types a bit.\r\n\r\nHere's a proposal using an example:\r\n```ts\r\nexport type BlindedOrFull = \"full\" | \"blinded\";\r\n\r\nexport type ExecutionFork = ForkName.bellatrix | ForkName.capella;\r\n\r\ntype forkTypes = {\r\n  [ForkName.phase0]: {\r\n    BeaconBlockBody: phase0.BeaconBlockBody;\r\n  };\r\n  [ForkName.altair]: {\r\n    BeaconBlockBody: altair.BeaconBlockBody;\r\n  };\r\n  [ForkName.bellatrix]: {\r\n    BeaconBlockBody: bellatrix.BeaconBlockBody;\r\n    BlindedBeaconBlockBody: bellatrix.BlindedBeaconBlockBody;\r\n  };\r\n  [ForkName.capella]: {\r\n    BeaconBlockBody: capella.BeaconBlockBody;\r\n    BlindedBeaconBlockBody: capella.BlindedBeaconBlockBody;\r\n  };\r\n};\r\n\r\nexport type BeaconBlockBody<\r\n  F extends ForkName = ForkName,\r\n  B extends BlindedOrFull = \"full\"\r\n> = F extends ExecutionFork\r\n  ? B extends \"full\"\r\n    ? forkTypes[F][\"BeaconBlockBody\"]\r\n    : forkTypes[F][\"BlindedBeaconBlockBody\"]\r\n  : B extends \"full\"\r\n  ? forkTypes[F][\"BeaconBlockBody\"]\r\n  : never; // <- we can exclude non-execution blinded blocks :)\r\n\r\n// \r\nexport function isBlindedBlockBody<F extends ExecutionFork>(\r\n  body: BeaconBlockBody<F, BlindedOrFull>\r\n): body is BeaconBlockBody<F, \"blinded\"> { // <- the fork type isn't lost if its known :)\r\n  (body as BeaconBlockBody<F, \"blinded\">).executionPayloadHeader !== undefined;\r\n  return true;\r\n}\r\n```\r\n\r\nSo functions could be gated on different forks or unions of fork names:\r\n\r\n```ts\r\nexport function doSomethingWithBellatrix(body: BeaconBlockBody<ForkName.bellatrix>): void {}\r\n\r\nexport function doSomethingWithExecution(body: BeaconBlockBody<ExecutionFork>): void {\r\n  body.executionPayload;\r\n}\r\n```\r\n\r\nAnd functions that deal with blinded or unblinded blocks can also be kept typesafe:\r\n\r\n```ts\r\nexport function doSomethingWithBlindedOrUnblinded(body: BeaconBlockBody<ExecutionFork, BlindedOrFull>): void {\r\n  if (isBlindedBlockBody(body)) {\r\n    body.executionPayloadHeader;\r\n  } else {\r\n    body.executionPayload;\r\n  }\r\n}\r\n```\r\n\r\nAnd we get nice things that we didn't have before:\r\n\r\n```ts\r\nfunction foo (body: BeaconBlockBody<ForkName.eip4844, BlindedOrFull>): void {\r\n  // since the fork is already typed as eip4844, the type assertion returned by isBlindedBlockBody will still have that fork type\r\n  // isBlindedBlockBody doesn't have to return some sort of \"allForks\" type as is the current pattern or be redefined with per fork variants\r\n  if (isBlindedBlockBody(body)) {\r\n    body.executionPayloadHeader;\r\n    body.blobKzgCommitments\r\n  }\r\n}\r\n```\r\n\r\nWhat's nice about this is that this easily works with future forks with minimal changes as we add new forks. We'd just add the new fork to `ForkName`, add that fork to any capabilities / union types (eg: `ExecutionFork`), and add the fork-specific types to `forkTypes`.\r\n\r\nUsing a generic for the fork has better devex since its easier to combine forks into capabilities using a union type. (switching on namespaces isn't allowed :( )\r\n\r\nUsing a generic for blinded/full blocks is also pretty nice, esp if we set the default `BlindedOrFull` to `\"full\"`. It stays out of the way most of the time, until we need it.",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/4656/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/4656/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/1279250336",
    "html_url": "https://github.com/ChainSafe/lodestar/issues/4656#issuecomment-1279250336",
    "issue_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/4656",
    "id": 1279250336,
    "node_id": "IC_kwDOCD5_Gc5MP8-g",
    "user": {
      "login": "dapplion",
      "id": 35266934,
      "node_id": "MDQ6VXNlcjM1MjY2OTM0",
      "avatar_url": "https://avatars.githubusercontent.com/u/35266934?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dapplion",
      "html_url": "https://github.com/dapplion",
      "followers_url": "https://api.github.com/users/dapplion/followers",
      "following_url": "https://api.github.com/users/dapplion/following{/other_user}",
      "gists_url": "https://api.github.com/users/dapplion/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dapplion/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dapplion/subscriptions",
      "organizations_url": "https://api.github.com/users/dapplion/orgs",
      "repos_url": "https://api.github.com/users/dapplion/repos",
      "events_url": "https://api.github.com/users/dapplion/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dapplion/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-10-14T16:58:57Z",
    "updated_at": "2022-10-14T16:58:57Z",
    "author_association": "MEMBER",
    "body": "As a general look the ergonomics of this proposal are pretty nice",
    "reactions": {
      "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/1279250336/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
