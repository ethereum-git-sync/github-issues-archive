{
  "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/1103",
  "repository_url": "https://api.github.com/repos/ChainSafe/lodestar",
  "labels_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/1103/labels{/name}",
  "comments_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/1103/comments",
  "events_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/1103/events",
  "html_url": "https://github.com/ChainSafe/lodestar/issues/1103",
  "id": 651115533,
  "node_id": "MDU6SXNzdWU2NTExMTU1MzM=",
  "number": 1103,
  "title": "Decompose IEth1Notifier into parts",
  "user": {
    "login": "wemeetagain",
    "id": 1348242,
    "node_id": "MDQ6VXNlcjEzNDgyNDI=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1348242?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/wemeetagain",
    "html_url": "https://github.com/wemeetagain",
    "followers_url": "https://api.github.com/users/wemeetagain/followers",
    "following_url": "https://api.github.com/users/wemeetagain/following{/other_user}",
    "gists_url": "https://api.github.com/users/wemeetagain/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/wemeetagain/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/wemeetagain/subscriptions",
    "organizations_url": "https://api.github.com/users/wemeetagain/orgs",
    "repos_url": "https://api.github.com/users/wemeetagain/repos",
    "events_url": "https://api.github.com/users/wemeetagain/events{/privacy}",
    "received_events_url": "https://api.github.com/users/wemeetagain/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": {
    "login": "dapplion",
    "id": 35266934,
    "node_id": "MDQ6VXNlcjM1MjY2OTM0",
    "avatar_url": "https://avatars.githubusercontent.com/u/35266934?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/dapplion",
    "html_url": "https://github.com/dapplion",
    "followers_url": "https://api.github.com/users/dapplion/followers",
    "following_url": "https://api.github.com/users/dapplion/following{/other_user}",
    "gists_url": "https://api.github.com/users/dapplion/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/dapplion/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/dapplion/subscriptions",
    "organizations_url": "https://api.github.com/users/dapplion/orgs",
    "repos_url": "https://api.github.com/users/dapplion/repos",
    "events_url": "https://api.github.com/users/dapplion/events{/privacy}",
    "received_events_url": "https://api.github.com/users/dapplion/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "dapplion",
      "id": 35266934,
      "node_id": "MDQ6VXNlcjM1MjY2OTM0",
      "avatar_url": "https://avatars.githubusercontent.com/u/35266934?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dapplion",
      "html_url": "https://github.com/dapplion",
      "followers_url": "https://api.github.com/users/dapplion/followers",
      "following_url": "https://api.github.com/users/dapplion/following{/other_user}",
      "gists_url": "https://api.github.com/users/dapplion/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dapplion/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dapplion/subscriptions",
      "organizations_url": "https://api.github.com/users/dapplion/orgs",
      "repos_url": "https://api.github.com/users/dapplion/repos",
      "events_url": "https://api.github.com/users/dapplion/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dapplion/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 3,
  "created_at": "2020-07-05T17:55:50Z",
  "updated_at": "2020-09-03T15:53:28Z",
  "closed_at": "2020-09-03T15:53:28Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "I think we can (eventually) decompose this `IEth1Notifier` into a few parts, that can be run on-demand, rather than started globally. If we want to reuse resources, we could keep the provider and keep that around (it could be started/stopped in node.ts). Decomposing the functionality will lead to increased maintainability (each thing can be in its own file) and flexibility in how we can use this:\r\n```typescript\r\ntype BlockTag = string | number\r\n\r\n/**\r\n * Thin wrapper around ethers provider, tailored for the deposit contract\r\n */\r\ninterface IEth1Provider {\r\n  /**\r\n   * initialize contract, error if it doesn't exist or is invalid\r\n   */\r\n  start(): Promise<void>;\r\n  stop(): Promise<void>;\r\n\r\n  getBlock(blockTag: BlockTag): Promise<Block>;\r\n  getDepositEvents(fromBlockTag: BlockTag, toBlockTag?: BlockTag): Promise<IDepositEvent[]>;\r\n\r\n  // event for new blocks\r\n  on(event: 'block', block: Block): void;\r\n  off(event: 'block', block: Block): void;\r\n\r\n  // event for module stopping, allows for event consumers to gracefully shut down\r\n  on(event: 'stop'): void;\r\n  off(event: 'stop'): void;\r\n}\r\n\r\ninterface IBatchDepositEvents {\r\n  depositEvents: IDepositEvent[];\r\n  blockNumber: number;\r\n}\r\n\r\n/**\r\n * Stream of deposit events, batched by block number.\r\n * Includes blocks with 0 deposit events\r\n */\r\nfunction getHistoricalDepositEventsStream(provider: IEth1Provider, from: blockNumber, to: blockNumber): Promise<Pushable<IBatchDepositEvents>>;\r\n\r\n/**\r\n * Abortable stream of batched deposit events\r\n * data starting at `from`, continues at ETH1_FOLLOW_DISTANCE until aborted or IEthProvider stops\r\n */\r\nfunction getFollowDepositEventsStream(provider: IEth1Provider, from: blockNumber): Promise<Pushable<IBatchDepositEvents>>;\r\n```\r\n\r\nFrom there we've separated how the data is consumed, database storage concerns, whether a stream has a single or multiple consumers, etc. We should write up a design doc determining what we store, when we store, which modules manage storage, etc. Likely, we will have a strategy for genesis and a strategy for proposing.\r\n\r\nEth1Data processing requires a depositData tree, either fetched from the db module, or managed by the genesis builder.\r\n```typescript\r\n/**\r\n * Create an Eth1Data based on a block and a deposit data root tree\r\n */\r\nfunction getEth1Data(block: Block, depositDataRootTree: TreeBacked<Root<DepositData>[]>): {timestamp: number, eth1Data: Eth1Data};\r\n```\r\n\r\nIMO building out good primitives like this will help everything else fall into place.\r\n\r\n_Originally posted by @wemeetagain in https://github.com/_render_node/MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1NDkxODM1/pull_request_reviews/more_threads_",
  "closed_by": {
    "login": "wemeetagain",
    "id": 1348242,
    "node_id": "MDQ6VXNlcjEzNDgyNDI=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1348242?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/wemeetagain",
    "html_url": "https://github.com/wemeetagain",
    "followers_url": "https://api.github.com/users/wemeetagain/followers",
    "following_url": "https://api.github.com/users/wemeetagain/following{/other_user}",
    "gists_url": "https://api.github.com/users/wemeetagain/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/wemeetagain/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/wemeetagain/subscriptions",
    "organizations_url": "https://api.github.com/users/wemeetagain/orgs",
    "repos_url": "https://api.github.com/users/wemeetagain/repos",
    "events_url": "https://api.github.com/users/wemeetagain/events{/privacy}",
    "received_events_url": "https://api.github.com/users/wemeetagain/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/1103/reactions",
    "total_count": 2,
    "+1": 2,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/1103/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/653972206",
    "html_url": "https://github.com/ChainSafe/lodestar/issues/1103#issuecomment-653972206",
    "issue_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/1103",
    "id": 653972206,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1Mzk3MjIwNg==",
    "user": {
      "login": "wemeetagain",
      "id": 1348242,
      "node_id": "MDQ6VXNlcjEzNDgyNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1348242?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wemeetagain",
      "html_url": "https://github.com/wemeetagain",
      "followers_url": "https://api.github.com/users/wemeetagain/followers",
      "following_url": "https://api.github.com/users/wemeetagain/following{/other_user}",
      "gists_url": "https://api.github.com/users/wemeetagain/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wemeetagain/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wemeetagain/subscriptions",
      "organizations_url": "https://api.github.com/users/wemeetagain/orgs",
      "repos_url": "https://api.github.com/users/wemeetagain/repos",
      "events_url": "https://api.github.com/users/wemeetagain/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wemeetagain/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-06T01:34:03Z",
    "updated_at": "2020-07-06T01:34:26Z",
    "author_association": "MEMBER",
    "body": "With the machinery above, the _genesis builder_ can control when to get blocks / eth1 data:\r\n\r\npseudocode for a stateless genesis builder:\r\n- constructor takes eth1 provider and beacon config\r\n  - create and manage an empty deposit tree\r\n  - create and manage an empty genesis state\r\n  - start from some known block number\r\n- use getFollowDepositEventsStream to handle batched deposit events for each block\r\n  - incrementally build genesis state and deposit tree\r\n  - once the state has min_validators\r\n    - begin fetching eth1 data and timestamp w/ provider.getBlock and getEth1Data\r\n    - optionally: if fetched timestamp is before min_genesis_time, don't fetch eth1 data again 'until necessary'\r\n  - if a valid genesis is found, abort stream\r\n- throw error if managed state is invalid (eth1 provider stopped before genesis processed)\r\n- return genesis state, deposit tree, last processed block number on success, if managed state is valid\r\n\r\nNote1: This can be run entirely without the db, which is great for keeping things simple.\r\nDepending on how fast this is, we likely don't even need to store pre-genesis deposits to db, but only store to db after a valid genesis state is returned -- outside of the scope of genesis builder.\r\nOr we can 'save our progress' to the db by having genesis builder accept a starting deposit tree and block number, return the processed deposit tree and last processed block number in the 'error case', to be saved to db on shutdown.\r\n\r\nNote2: Because we use the state.validators.length to compare against min_validators, we don't run into the issue of fetching eth1 data \"too soon\" as we do now when comparing # of deposit events against min_validators. :)",
    "reactions": {
      "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/653972206/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/657732866",
    "html_url": "https://github.com/ChainSafe/lodestar/issues/1103#issuecomment-657732866",
    "issue_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/1103",
    "id": 657732866,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1NzczMjg2Ng==",
    "user": {
      "login": "dapplion",
      "id": 35266934,
      "node_id": "MDQ6VXNlcjM1MjY2OTM0",
      "avatar_url": "https://avatars.githubusercontent.com/u/35266934?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dapplion",
      "html_url": "https://github.com/dapplion",
      "followers_url": "https://api.github.com/users/dapplion/followers",
      "following_url": "https://api.github.com/users/dapplion/following{/other_user}",
      "gists_url": "https://api.github.com/users/dapplion/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dapplion/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dapplion/subscriptions",
      "organizations_url": "https://api.github.com/users/dapplion/orgs",
      "repos_url": "https://api.github.com/users/dapplion/repos",
      "events_url": "https://api.github.com/users/dapplion/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dapplion/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-13T18:55:57Z",
    "updated_at": "2020-07-13T18:55:57Z",
    "author_association": "MEMBER",
    "body": "Agree on the vision for this. Meta-assigning this issue to self",
    "reactions": {
      "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/657732866/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/667955876",
    "html_url": "https://github.com/ChainSafe/lodestar/issues/1103#issuecomment-667955876",
    "issue_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/1103",
    "id": 667955876,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2Nzk1NTg3Ng==",
    "user": {
      "login": "tuyennhv",
      "id": 10568965,
      "node_id": "MDQ6VXNlcjEwNTY4OTY1",
      "avatar_url": "https://avatars.githubusercontent.com/u/10568965?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tuyennhv",
      "html_url": "https://github.com/tuyennhv",
      "followers_url": "https://api.github.com/users/tuyennhv/followers",
      "following_url": "https://api.github.com/users/tuyennhv/following{/other_user}",
      "gists_url": "https://api.github.com/users/tuyennhv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tuyennhv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tuyennhv/subscriptions",
      "organizations_url": "https://api.github.com/users/tuyennhv/orgs",
      "repos_url": "https://api.github.com/users/tuyennhv/repos",
      "events_url": "https://api.github.com/users/tuyennhv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tuyennhv/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-03T10:54:27Z",
    "updated_at": "2020-08-03T10:54:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "Need to support restarting chain while detecting genesis state. Current it's like\r\n```\r\n2020-08-03 17:50:39  [ETH1]          verbose: Processing 1 deposit events of eth1 block 3086571\r\n ✖ Error: Invalid deposit merkle branch\r\n    at Object.true (/Users/tuyennguyen/Projects/workshop/lodestar/packages/lodestar-utils/lib/assert.js:16:13)\r\n    at processDeposit (/Users/tuyennguyen/Projects/workshop/lodestar/packages/lodestar-beacon-state-transition/lib/block/operations/deposit.js:27:29)\r\n    at /Users/tuyennguyen/Projects/workshop/lodestar/packages/lodestar/lib/chain/genesis/util.js:79:55\r\n    at Array.forEach (<anonymous>)\r\n    at applyDeposits (/Users/tuyennguyen/Projects/workshop/lodestar/packages/lodestar/lib/chain/genesis/util.js:69:15)\r\n    at /Users/tuyennguyen/Projects/workshop/lodestar/packages/lodestar/lib/chain/genesis/genesis.js:87:35\r\n    at async GenesisBuilder.waitForGenesis (/Users/tuyennguyen/Projects/workshop/lodestar/packages/lodestar/lib/chain/genesis/genesis.js:72:19)\r\n    at async BeaconChain.waitForState (/Users/tuyennguyen/Projects/workshop/lodestar/packages/lodestar/lib/chain/chain.js:395:15)\r\n    at async BeaconChain.start (/Users/tuyennguyen/Projects/workshop/lodestar/packages/lodestar/lib/chain/chain.js:148:19)\r\n    at async BeaconNode.start (/Users/tuyennguyen/Projects/workshop/lodestar/packages/lodestar/lib/node/nodejs.js:157:5)\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/667955876/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
