{
  "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/1523",
  "repository_url": "https://api.github.com/repos/ChainSafe/lodestar",
  "labels_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/1523/labels{/name}",
  "comments_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/1523/comments",
  "events_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/1523/events",
  "html_url": "https://github.com/ChainSafe/lodestar/issues/1523",
  "id": 697082321,
  "node_id": "MDU6SXNzdWU2OTcwODIzMjE=",
  "number": 1523,
  "title": "Discussion: unit test stubbing",
  "user": {
    "login": "dapplion",
    "id": 35266934,
    "node_id": "MDQ6VXNlcjM1MjY2OTM0",
    "avatar_url": "https://avatars.githubusercontent.com/u/35266934?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/dapplion",
    "html_url": "https://github.com/dapplion",
    "followers_url": "https://api.github.com/users/dapplion/followers",
    "following_url": "https://api.github.com/users/dapplion/following{/other_user}",
    "gists_url": "https://api.github.com/users/dapplion/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/dapplion/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/dapplion/subscriptions",
    "organizations_url": "https://api.github.com/users/dapplion/orgs",
    "repos_url": "https://api.github.com/users/dapplion/repos",
    "events_url": "https://api.github.com/users/dapplion/events{/privacy}",
    "received_events_url": "https://api.github.com/users/dapplion/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1478321239,
      "node_id": "MDU6TGFiZWwxNDc4MzIxMjM5",
      "url": "https://api.github.com/repos/ChainSafe/lodestar/labels/meta-discussion",
      "name": "meta-discussion",
      "color": "a6bddb",
      "default": false,
      "description": "Indicates a topic that requires input from various developers."
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 8,
  "created_at": "2020-09-09T19:14:23Z",
  "updated_at": "2022-12-11T22:38:12Z",
  "closed_at": "2022-05-12T03:54:37Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "#### Background\r\n\r\nWhen doing the eth1 data for block processing refactor I had to update a lot of stubbed unit tests just because I changed the implementation slightly. A great example of a stubbed unit test is this one:\r\n\r\nhttps://github.com/ChainSafe/lodestar/blob/master/packages/lodestar/test/unit/chain/factory/block/blockAssembly.test.ts\r\n\r\nWhat is this test trying to verify or prove? Apparently, it only asserts a bunch of functions are called in the implementation. It's almost an identical implementation of the original implementation but with more code.\r\n\r\n#### Proposal\r\n\r\nIn my personal opinion, the test linked above is more of a liability than an asset to this codebase. I would like to know other contributors' thoughts about testing to try to improve it going forward.\r\n\r\n1. Whenever possible isolate all logic into pure functions that can be tested just by feeding them values and asserting the result.\r\n2. \"Delegator functions\" like `blockAssembly` should not be tested at all. Prevented that, (1) their implementation is so simple that a test is not necessary and (2) exist an end-to-end test (maybe many abstractions above) that uses the function and would fail if delegation is not done properly.\r\n",
  "closed_by": {
    "login": "dapplion",
    "id": 35266934,
    "node_id": "MDQ6VXNlcjM1MjY2OTM0",
    "avatar_url": "https://avatars.githubusercontent.com/u/35266934?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/dapplion",
    "html_url": "https://github.com/dapplion",
    "followers_url": "https://api.github.com/users/dapplion/followers",
    "following_url": "https://api.github.com/users/dapplion/following{/other_user}",
    "gists_url": "https://api.github.com/users/dapplion/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/dapplion/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/dapplion/subscriptions",
    "organizations_url": "https://api.github.com/users/dapplion/orgs",
    "repos_url": "https://api.github.com/users/dapplion/repos",
    "events_url": "https://api.github.com/users/dapplion/events{/privacy}",
    "received_events_url": "https://api.github.com/users/dapplion/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/1523/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/1523/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/689766945",
    "html_url": "https://github.com/ChainSafe/lodestar/issues/1523#issuecomment-689766945",
    "issue_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/1523",
    "id": 689766945,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4OTc2Njk0NQ==",
    "user": {
      "login": "mpetrunic",
      "id": 8836210,
      "node_id": "MDQ6VXNlcjg4MzYyMTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8836210?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mpetrunic",
      "html_url": "https://github.com/mpetrunic",
      "followers_url": "https://api.github.com/users/mpetrunic/followers",
      "following_url": "https://api.github.com/users/mpetrunic/following{/other_user}",
      "gists_url": "https://api.github.com/users/mpetrunic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mpetrunic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mpetrunic/subscriptions",
      "organizations_url": "https://api.github.com/users/mpetrunic/orgs",
      "repos_url": "https://api.github.com/users/mpetrunic/repos",
      "events_url": "https://api.github.com/users/mpetrunic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mpetrunic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-09T19:23:15Z",
    "updated_at": "2020-09-09T19:23:15Z",
    "author_association": "MEMBER",
    "body": "blockAssembly method is not simple and it currently just checks if in happy path all block fields are set. Value correctness are not tested as it depends on other methods which we expect to work correctly. What this test do lack is most important part of unit testing, error paths like state context is missing, head block is missing etc.",
    "reactions": {
      "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/689766945/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/689780206",
    "html_url": "https://github.com/ChainSafe/lodestar/issues/1523#issuecomment-689780206",
    "issue_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/1523",
    "id": 689780206,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4OTc4MDIwNg==",
    "user": {
      "login": "dapplion",
      "id": 35266934,
      "node_id": "MDQ6VXNlcjM1MjY2OTM0",
      "avatar_url": "https://avatars.githubusercontent.com/u/35266934?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dapplion",
      "html_url": "https://github.com/dapplion",
      "followers_url": "https://api.github.com/users/dapplion/followers",
      "following_url": "https://api.github.com/users/dapplion/following{/other_user}",
      "gists_url": "https://api.github.com/users/dapplion/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dapplion/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dapplion/subscriptions",
      "organizations_url": "https://api.github.com/users/dapplion/orgs",
      "repos_url": "https://api.github.com/users/dapplion/repos",
      "events_url": "https://api.github.com/users/dapplion/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dapplion/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-09T19:46:50Z",
    "updated_at": "2020-09-09T19:52:06Z",
    "author_association": "MEMBER",
    "body": "Following your point I would suggest do abstract blockAssembly to fit this layout\r\n```ts\r\nasync function doSomething(db: Db) {\r\n  const values = await db.something.values();\r\n  return doSomethingLogic(values);\r\n}\r\n```\r\nWhere `doSomething` exclusively collects values and calls pure functions encapsulating the logic. Then you test error paths and everything else in `doSomethingLogic` with mock values only, instead of stubbed classes.\r\n\r\n**EDIT**\r\nThis issue is inspired by the feeling that the current usage of stubs in the lodestar codebase is not optimal. In many tests stubs are defined in the parent scope with `any` type which is evil\r\nhttps://github.com/ChainSafe/lodestar/blob/3492e8e7973baeb4a75e4575d7017cfa2310cd67/packages/lodestar-beacon-state-transition/test/unit/stateTransition/block/operations/voluntaryExit.test.ts#L16\r\nAs a new-comer, I have a hard time reading the tests and understanding what they are trying to prove. Most of the code ends up being boilerplate that doesn't add meaningful information. The goal of this issue is to find better ways to test the codebase in more elegant and correct ways.",
    "reactions": {
      "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/689780206/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/689787626",
    "html_url": "https://github.com/ChainSafe/lodestar/issues/1523#issuecomment-689787626",
    "issue_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/1523",
    "id": 689787626,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4OTc4NzYyNg==",
    "user": {
      "login": "mpetrunic",
      "id": 8836210,
      "node_id": "MDQ6VXNlcjg4MzYyMTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8836210?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mpetrunic",
      "html_url": "https://github.com/mpetrunic",
      "followers_url": "https://api.github.com/users/mpetrunic/followers",
      "following_url": "https://api.github.com/users/mpetrunic/following{/other_user}",
      "gists_url": "https://api.github.com/users/mpetrunic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mpetrunic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mpetrunic/subscriptions",
      "organizations_url": "https://api.github.com/users/mpetrunic/orgs",
      "repos_url": "https://api.github.com/users/mpetrunic/repos",
      "events_url": "https://api.github.com/users/mpetrunic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mpetrunic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-09T19:59:36Z",
    "updated_at": "2020-09-09T19:59:36Z",
    "author_association": "MEMBER",
    "body": "> This issue is inspired by the feeling that the current usage of stubs in the lodestar codebase is not optimal. In many tests stubs are defined in the parent scope with any type which is evil\r\n\r\nOh yeah, thats real problem that occurred because lack of lint rules/lack of knowledge what types should be. It's a lot easier in tests where type is `StubbedInstance<IBeaconChain>`. \r\n\r\n> Where doSomething exclusively collects values and calls pure functions encapsulating the logic. Then you test error paths and everything else in doSomethingLogic with mock values only, instead of stubbed classes.\r\n\r\nMaybe it's just me, but I'm finding stubbed methods/classes a lot more expressive than having methods\r\nwhere all params can be null and you have to throw errors in that case. I think it just comes down whether we wanna write boilerplate tests or boilerplate code (abstracting every small logic part into separate function).\r\n\r\nIt's not really black and white, I like small logical functions but I feel that in blockAssembly is a bit pointless as it makes code context harder to follow.",
    "reactions": {
      "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/689787626/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/689815727",
    "html_url": "https://github.com/ChainSafe/lodestar/issues/1523#issuecomment-689815727",
    "issue_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/1523",
    "id": 689815727,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4OTgxNTcyNw==",
    "user": {
      "login": "wemeetagain",
      "id": 1348242,
      "node_id": "MDQ6VXNlcjEzNDgyNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1348242?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wemeetagain",
      "html_url": "https://github.com/wemeetagain",
      "followers_url": "https://api.github.com/users/wemeetagain/followers",
      "following_url": "https://api.github.com/users/wemeetagain/following{/other_user}",
      "gists_url": "https://api.github.com/users/wemeetagain/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wemeetagain/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wemeetagain/subscriptions",
      "organizations_url": "https://api.github.com/users/wemeetagain/orgs",
      "repos_url": "https://api.github.com/users/wemeetagain/repos",
      "events_url": "https://api.github.com/users/wemeetagain/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wemeetagain/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-09T20:52:59Z",
    "updated_at": "2020-09-09T20:52:59Z",
    "author_association": "MEMBER",
    "body": ":+1: Definitely agree with OP. I also feel like we abuse stubs in some cases to test internal implementation details. We shouldn't be doing things checking `stubbedMethod.calledOnce` to determine if a code path is taken.\r\n\r\nI think there are two big cases cases where we're over-using stubs:\r\n1. We're trying to trigger some sort of behavior based on chain state - In this case, we don't have good infrastructure to generate meaningful chain states, and it ends up being very \"convenient\" to just stub things. Eg: since committees/proposers depend on randao we might stub to force a certain validator index to be proposer.\r\nA better path would be to build up the necessary infra to generate states with certain properties and also to decompose functions into testable pieces that no longer rely on a very specifically-crafted chain state.\r\n2. We're stubbing submodules to test \"delegator\" functions and module methods. I think at this level, either e2e tests or unit tests of smaller functions are much more valuable.\r\nStubs can be used to test and can provide valuable tests, but imo in most cases, refactoring as in your `doSomething` example is a good idea. The inner `doSomethingLogic` can have cleaned up types, and need not include trivially incorrect cases (eg: null values), which can be checked in `doSomething`. The benefit of this approach is that higher-level modules which mostly call inner functions and hold state can be more easily refactored. Tests will also have less boiler plate and can interact with only \"real\" values.\r\n\r\n> It's not really black and white\r\n\r\nAgree with this too. IMO its not worth tearing down what we have entirely to enforce some sort of anti-stubbing policy. I think a good course of action is simply to be mindful about how we design modules and test _going forward_ and make sure the tests that we _do_ maintain are actually providing value and have a strong purpose.",
    "reactions": {
      "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/689815727/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/689833636",
    "html_url": "https://github.com/ChainSafe/lodestar/issues/1523#issuecomment-689833636",
    "issue_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/1523",
    "id": 689833636,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4OTgzMzYzNg==",
    "user": {
      "login": "mpetrunic",
      "id": 8836210,
      "node_id": "MDQ6VXNlcjg4MzYyMTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8836210?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mpetrunic",
      "html_url": "https://github.com/mpetrunic",
      "followers_url": "https://api.github.com/users/mpetrunic/followers",
      "following_url": "https://api.github.com/users/mpetrunic/following{/other_user}",
      "gists_url": "https://api.github.com/users/mpetrunic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mpetrunic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mpetrunic/subscriptions",
      "organizations_url": "https://api.github.com/users/mpetrunic/orgs",
      "repos_url": "https://api.github.com/users/mpetrunic/repos",
      "events_url": "https://api.github.com/users/mpetrunic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mpetrunic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-09T21:32:54Z",
    "updated_at": "2020-09-09T21:33:03Z",
    "author_association": "MEMBER",
    "body": "> A better path would be to build up the necessary infra to generate states with certain properties and also to decompose functions into testable pieces that no longer rely on a very specifically-crafted chain state.\r\n\r\nI don't like this at all, that something e2e tests should have because:\r\n1. it will make unit tests slower, while we should aim them to be faster\r\n2. slight change to state structure could invalidate our infra to generate specifically-crafted chain state\r\n\r\n>  The inner doSomethingLogic can have cleaned up types, and need not include trivially incorrect cases (eg: null values)\r\n\r\nIt cannot, it has to support null argument values or you would have to forcefully cast values when using `doSomethingLogic`.\r\n\r\nStubs are you friends, we have examples where stubs provide wonderful tests but it all depends on how \"testable\" code you write. By providing values and expecting some result you can easily miss paths like method called twice/or none that resulted in same returned value which could've been easily detected with `stubbedMethod.calledOnce` . We can just as easily have nightmare tests with obfuscating logic into \"logic\" functions.",
    "reactions": {
      "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/689833636/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/723670437",
    "html_url": "https://github.com/ChainSafe/lodestar/issues/1523#issuecomment-723670437",
    "issue_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/1523",
    "id": 723670437,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcyMzY3MDQzNw==",
    "user": {
      "login": "stale[bot]",
      "id": 26384082,
      "node_id": "MDM6Qm90MjYzODQwODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/1724?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stale%5Bbot%5D",
      "html_url": "https://github.com/apps/stale",
      "followers_url": "https://api.github.com/users/stale%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/stale%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/stale%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stale%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stale%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/stale%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/stale%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/stale%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stale%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2020-11-08T21:46:01Z",
    "updated_at": "2020-11-08T21:46:01Z",
    "author_association": "NONE",
    "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed in 15 days if no further activity occurs. Thank you for your contributions.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/723670437/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/1124503324",
    "html_url": "https://github.com/ChainSafe/lodestar/issues/1523#issuecomment-1124503324",
    "issue_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/1523",
    "id": 1124503324,
    "node_id": "IC_kwDOCD5_Gc5DBo8c",
    "user": {
      "login": "dapplion",
      "id": 35266934,
      "node_id": "MDQ6VXNlcjM1MjY2OTM0",
      "avatar_url": "https://avatars.githubusercontent.com/u/35266934?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dapplion",
      "html_url": "https://github.com/dapplion",
      "followers_url": "https://api.github.com/users/dapplion/followers",
      "following_url": "https://api.github.com/users/dapplion/following{/other_user}",
      "gists_url": "https://api.github.com/users/dapplion/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dapplion/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dapplion/subscriptions",
      "organizations_url": "https://api.github.com/users/dapplion/orgs",
      "repos_url": "https://api.github.com/users/dapplion/repos",
      "events_url": "https://api.github.com/users/dapplion/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dapplion/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-12T03:54:37Z",
    "updated_at": "2022-05-12T03:54:37Z",
    "author_association": "MEMBER",
    "body": "After +1.5y I would conclude:\r\n\r\n- Completely forbid import stubbing. It's incredibly painful to maintain, and has caused us a lot of issues when migrating to higher TS versions, ESM, etc.\r\n- Recommend to avoid stubbing when other approaches are feasible. For example:\r\n  - generate valid test data\r\n  - design your functions are pure\r\n  - design your functions with plug-able dependencies to have built-in stubbing\r\n\r\nStubbing is a valuable tool, but it's usually the \"lazy option\" increasing the cost to maintainers down the line. It also offers very poor real coverage, providing a false sense of security when adding those tests.\r\n\r\nif there's no opposition, @philknows can you add this notes to contributing doc?",
    "reactions": {
      "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/1124503324/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/1345676484",
    "html_url": "https://github.com/ChainSafe/lodestar/issues/1523#issuecomment-1345676484",
    "issue_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/1523",
    "id": 1345676484,
    "node_id": "IC_kwDOCD5_Gc5QNWTE",
    "user": {
      "login": "nazarhussain",
      "id": 112468,
      "node_id": "MDQ6VXNlcjExMjQ2OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/112468?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nazarhussain",
      "html_url": "https://github.com/nazarhussain",
      "followers_url": "https://api.github.com/users/nazarhussain/followers",
      "following_url": "https://api.github.com/users/nazarhussain/following{/other_user}",
      "gists_url": "https://api.github.com/users/nazarhussain/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nazarhussain/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nazarhussain/subscriptions",
      "organizations_url": "https://api.github.com/users/nazarhussain/orgs",
      "repos_url": "https://api.github.com/users/nazarhussain/repos",
      "events_url": "https://api.github.com/users/nazarhussain/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nazarhussain/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-12-11T22:38:12Z",
    "updated_at": "2022-12-11T22:38:12Z",
    "author_association": "CONTRIBUTOR",
    "body": "I am late to discussion, but here is my thoughts. \r\n\r\nBased on my experience I would disagree to your conclusion for the sinon. If used properly and with right patterns, it's always best to use stubs and spies in the unit tests. There is no harm in using sinon based stubs to replace dependencies, even if we don't need to assert any of it's behavior. It's better approach for test mocks.\r\n\r\nThe rule of thumb is: \r\n\r\n> The unit tests focus on a unit and all dependencies can be replaced with mocks. So using sinon or related libraries in unit tests are highly encouraged. \r\n\r\nThe issues that one may face could be because of these patterns. \r\n\r\n1. Not setting up and clearing the stubbed environments e.g. sinon sandbox. \r\n2. Not clearing up the stubbed counters which are consumed in assertions. \r\n3. Mis-matched mocks with actual implementation. \r\n4. Having multiple mocks for same behavior instead of re-using one. \r\n\r\nRelated to the points mentioned above. \r\n\r\n**generate valid test data**\r\nThat's should be done always when the unit under test is dependent on that data. This point is true for all testing scenarios, not just for unit tests. \r\n\r\n**design your functions are pure**\r\nHaving pure functions does not mean, all the dependencies which are passed through arguments must be captured from the return values. e.g. logger, metrics. If for a unit tests we want to assert any such behavior which is not captured through output requires to pass spies and stubs. \r\n\r\n**design your functions with plug-able dependencies to have built-in stubbing**\r\nThere is no concept **built-in** stubbing. If you are referring to auto-mocking the dependencies, that goes against earlier argument of avoiding stubbing. As of my experience, having explicit mocks are more readable than auto mocks. \r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/1345676484/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
