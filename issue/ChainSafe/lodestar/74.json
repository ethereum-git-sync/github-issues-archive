{
  "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/74",
  "repository_url": "https://api.github.com/repos/ChainSafe/lodestar",
  "labels_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/74/labels{/name}",
  "comments_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/74/comments",
  "events_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/74/events",
  "html_url": "https://github.com/ChainSafe/lodestar/issues/74",
  "id": 396289515,
  "node_id": "MDU6SXNzdWUzOTYyODk1MTU=",
  "number": 74,
  "title": "Create run-time type definitions of our interfaces",
  "user": {
    "login": "wemeetagain",
    "id": 1348242,
    "node_id": "MDQ6VXNlcjEzNDgyNDI=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1348242?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/wemeetagain",
    "html_url": "https://github.com/wemeetagain",
    "followers_url": "https://api.github.com/users/wemeetagain/followers",
    "following_url": "https://api.github.com/users/wemeetagain/following{/other_user}",
    "gists_url": "https://api.github.com/users/wemeetagain/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/wemeetagain/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/wemeetagain/subscriptions",
    "organizations_url": "https://api.github.com/users/wemeetagain/orgs",
    "repos_url": "https://api.github.com/users/wemeetagain/repos",
    "events_url": "https://api.github.com/users/wemeetagain/events{/privacy}",
    "received_events_url": "https://api.github.com/users/wemeetagain/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1200090446,
      "node_id": "MDU6TGFiZWwxMjAwMDkwNDQ2",
      "url": "https://api.github.com/repos/ChainSafe/lodestar/labels/prio-medium",
      "name": "prio-medium",
      "color": "fdc09f",
      "default": false,
      "description": "Resolve this some time soon (tm)."
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2019-01-06T20:04:25Z",
  "updated_at": "2019-01-31T00:12:03Z",
  "closed_at": "2019-01-31T00:12:03Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "Unfortunately, typescript interfaces do not appear to be available/exist at run time.\r\nThis means that we don't have access to the type information necessary to properly serialize the data.\r\n\r\n\r\nThere is a dependency here, between our \"types\" and our ssz library that we should be aware of.\r\nOur ssz library assumes a type object with a `fields` key, which it uses to serialize each field. (See [here](https://github.com/ChainSafeSystems/ssz-js/blob/master/src/index.js#L90))\r\n\r\nHere is an example that can show the issue:\r\n```javascript\r\ninterface ProposalSignedData {\r\n  // Slot number\r\n  slot: uint64;\r\n  // Shard number (`BEACON_CHAIN_SHARD_NUMBER` for beacon chain)\r\n  shard: uint64;\r\n  // Block hash\r\n  blockHash: hash32;\r\n}\r\n\r\nconst data: ProposalSignedData = {\r\n  slot: 0,\r\n  shard: 0,\r\n  blockHash: 0,\r\n};\r\n\r\nconst serializedData: Uint8Array = ssz.serialize(data, ???); // <--- problem here\r\n```\r\n\r\nPerhaps a way forward would be to create a \"type\" object for each interface.\r\nSomething that would play nicely with ssz-js:\r\n```javascript\r\nconst ProposalSignedData = {\r\n  fields: [\r\n    ['slot', 'uint64'],\r\n    ['shard', 'uint64'],\r\n    ['blockHash', 'hash32'],\r\n  ],\r\n};\r\n\r\n// from above, problem fixed\r\nconst serializedData: Uint8Array = ssz.serialize(data, ProposalSignedData);\r\n```\r\n\r\nSee also how the python implementation deals with this, eg: [here](https://github.com/ethereum/beacon_chain/blob/master/beacon_chain/state/block.py#L19)",
  "closed_by": {
    "login": "GregTheGreek",
    "id": 16929357,
    "node_id": "MDQ6VXNlcjE2OTI5MzU3",
    "avatar_url": "https://avatars.githubusercontent.com/u/16929357?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/GregTheGreek",
    "html_url": "https://github.com/GregTheGreek",
    "followers_url": "https://api.github.com/users/GregTheGreek/followers",
    "following_url": "https://api.github.com/users/GregTheGreek/following{/other_user}",
    "gists_url": "https://api.github.com/users/GregTheGreek/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/GregTheGreek/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/GregTheGreek/subscriptions",
    "organizations_url": "https://api.github.com/users/GregTheGreek/orgs",
    "repos_url": "https://api.github.com/users/GregTheGreek/repos",
    "events_url": "https://api.github.com/users/GregTheGreek/events{/privacy}",
    "received_events_url": "https://api.github.com/users/GregTheGreek/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/74/reactions",
    "total_count": 1,
    "+1": 1,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/74/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/451770744",
    "html_url": "https://github.com/ChainSafe/lodestar/issues/74#issuecomment-451770744",
    "issue_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/74",
    "id": 451770744,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MTc3MDc0NA==",
    "user": {
      "login": "JonathanLorimer",
      "id": 32466011,
      "node_id": "MDQ6VXNlcjMyNDY2MDEx",
      "avatar_url": "https://avatars.githubusercontent.com/u/32466011?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JonathanLorimer",
      "html_url": "https://github.com/JonathanLorimer",
      "followers_url": "https://api.github.com/users/JonathanLorimer/followers",
      "following_url": "https://api.github.com/users/JonathanLorimer/following{/other_user}",
      "gists_url": "https://api.github.com/users/JonathanLorimer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JonathanLorimer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JonathanLorimer/subscriptions",
      "organizations_url": "https://api.github.com/users/JonathanLorimer/orgs",
      "repos_url": "https://api.github.com/users/JonathanLorimer/repos",
      "events_url": "https://api.github.com/users/JonathanLorimer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JonathanLorimer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-06T20:11:37Z",
    "updated_at": "2019-01-06T20:14:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "@wemeetagain The most straightforward solution I can see is to create a Class that directly mimics the interface and include that on the data object. for example:\r\n\r\n```javascript\r\n\r\nconst proposalSignedDataClass = Class {\r\n  constructor(){\r\n    this.slot: 'uint64'\r\n    this.shard: 'uint64'\r\n    this.blockHash: 'hash32'\r\n  }\r\n}\r\n\r\ninterface ProposalSignedData {\r\n  // Slot number\r\n  slot: uint64;\r\n  // Shard number (`BEACON_CHAIN_SHARD_NUMBER` for beacon chain)\r\n  shard: uint64;\r\n  // Block hash\r\n  blockHash: hash32;\r\n  // runtime interface\r\n  proposalSignedDataClass: object\r\n}\r\n\r\nconst data: ProposalSignedData = {\r\n  slot: 0,\r\n  shard: 0,\r\n  blockHash: 0,\r\n  new proposalSignedDataClass()\r\n};\r\n\r\nconst serializedData: Uint8Array = ssz.serialize(data, ???);\r\n```\r\n\r\nLooks like we had similar ideas here",
    "reactions": {
      "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/451770744/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/451770995",
    "html_url": "https://github.com/ChainSafe/lodestar/issues/74#issuecomment-451770995",
    "issue_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/74",
    "id": 451770995,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MTc3MDk5NQ==",
    "user": {
      "login": "wemeetagain",
      "id": 1348242,
      "node_id": "MDQ6VXNlcjEzNDgyNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1348242?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wemeetagain",
      "html_url": "https://github.com/wemeetagain",
      "followers_url": "https://api.github.com/users/wemeetagain/followers",
      "following_url": "https://api.github.com/users/wemeetagain/following{/other_user}",
      "gists_url": "https://api.github.com/users/wemeetagain/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wemeetagain/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wemeetagain/subscriptions",
      "organizations_url": "https://api.github.com/users/wemeetagain/orgs",
      "repos_url": "https://api.github.com/users/wemeetagain/repos",
      "events_url": "https://api.github.com/users/wemeetagain/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wemeetagain/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-06T20:14:49Z",
    "updated_at": "2019-01-06T20:16:56Z",
    "author_association": "MEMBER",
    "body": "@JonathanLorimer \r\nAgree, this looks like a good solution. Would just modify your proposal to include the ordering of the fields, since object fields are unordered.\r\n\r\nsomething like:\r\n```javascript\r\nconst proposalSignedDataClass = Class {\r\n  constructor(){\r\n    this.slot = 'uint64'\r\n    this.shard = 'uint64'\r\n    this.blockHash = 'hash32'\r\n    this.fields = ['slot', 'shard', 'blockHash']\r\n  }\r\n}\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/451770995/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/451771284",
    "html_url": "https://github.com/ChainSafe/lodestar/issues/74#issuecomment-451771284",
    "issue_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/74",
    "id": 451771284,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MTc3MTI4NA==",
    "user": {
      "login": "JonathanLorimer",
      "id": 32466011,
      "node_id": "MDQ6VXNlcjMyNDY2MDEx",
      "avatar_url": "https://avatars.githubusercontent.com/u/32466011?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JonathanLorimer",
      "html_url": "https://github.com/JonathanLorimer",
      "followers_url": "https://api.github.com/users/JonathanLorimer/followers",
      "following_url": "https://api.github.com/users/JonathanLorimer/following{/other_user}",
      "gists_url": "https://api.github.com/users/JonathanLorimer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JonathanLorimer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JonathanLorimer/subscriptions",
      "organizations_url": "https://api.github.com/users/JonathanLorimer/orgs",
      "repos_url": "https://api.github.com/users/JonathanLorimer/repos",
      "events_url": "https://api.github.com/users/JonathanLorimer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JonathanLorimer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-06T20:18:09Z",
    "updated_at": "2019-01-06T20:18:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "Yeah, that looks great. The fields array is a really nice touch. I would suggest using a factory function because I think its more terse, but that is really just an implementation detail.\r\n```javascript\r\nconst proposalSignedDataClass = () =>({\r\n    slot = 'uint64'\r\n    shard = 'uint64'\r\n    blockHash = 'hash32'\r\n    fields = ['slot', 'shard', 'blockHash']\r\n  })\r\n}\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/451771284/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/451771347",
    "html_url": "https://github.com/ChainSafe/lodestar/issues/74#issuecomment-451771347",
    "issue_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/74",
    "id": 451771347,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MTc3MTM0Nw==",
    "user": {
      "login": "GregTheGreek",
      "id": 16929357,
      "node_id": "MDQ6VXNlcjE2OTI5MzU3",
      "avatar_url": "https://avatars.githubusercontent.com/u/16929357?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/GregTheGreek",
      "html_url": "https://github.com/GregTheGreek",
      "followers_url": "https://api.github.com/users/GregTheGreek/followers",
      "following_url": "https://api.github.com/users/GregTheGreek/following{/other_user}",
      "gists_url": "https://api.github.com/users/GregTheGreek/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/GregTheGreek/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/GregTheGreek/subscriptions",
      "organizations_url": "https://api.github.com/users/GregTheGreek/orgs",
      "repos_url": "https://api.github.com/users/GregTheGreek/repos",
      "events_url": "https://api.github.com/users/GregTheGreek/events{/privacy}",
      "received_events_url": "https://api.github.com/users/GregTheGreek/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-06T20:19:03Z",
    "updated_at": "2019-01-06T20:19:03Z",
    "author_association": "MEMBER",
    "body": "Also looking into using classes to manage the state of the beacon chain. Mutating state functions will probably need to be re written a bit but it will help.",
    "reactions": {
      "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/451771347/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
