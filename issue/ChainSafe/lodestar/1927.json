{
  "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/1927",
  "repository_url": "https://api.github.com/repos/ChainSafe/lodestar",
  "labels_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/1927/labels{/name}",
  "comments_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/1927/comments",
  "events_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/1927/events",
  "html_url": "https://github.com/ChainSafe/lodestar/issues/1927",
  "id": 778813211,
  "node_id": "MDU6SXNzdWU3Nzg4MTMyMTE=",
  "number": 1927,
  "title": "Implemented hard fork compatible db",
  "user": {
    "login": "mpetrunic",
    "id": 8836210,
    "node_id": "MDQ6VXNlcjg4MzYyMTA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8836210?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mpetrunic",
    "html_url": "https://github.com/mpetrunic",
    "followers_url": "https://api.github.com/users/mpetrunic/followers",
    "following_url": "https://api.github.com/users/mpetrunic/following{/other_user}",
    "gists_url": "https://api.github.com/users/mpetrunic/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mpetrunic/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mpetrunic/subscriptions",
    "organizations_url": "https://api.github.com/users/mpetrunic/orgs",
    "repos_url": "https://api.github.com/users/mpetrunic/repos",
    "events_url": "https://api.github.com/users/mpetrunic/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mpetrunic/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": {
    "login": "mpetrunic",
    "id": 8836210,
    "node_id": "MDQ6VXNlcjg4MzYyMTA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8836210?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mpetrunic",
    "html_url": "https://github.com/mpetrunic",
    "followers_url": "https://api.github.com/users/mpetrunic/followers",
    "following_url": "https://api.github.com/users/mpetrunic/following{/other_user}",
    "gists_url": "https://api.github.com/users/mpetrunic/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mpetrunic/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mpetrunic/subscriptions",
    "organizations_url": "https://api.github.com/users/mpetrunic/orgs",
    "repos_url": "https://api.github.com/users/mpetrunic/repos",
    "events_url": "https://api.github.com/users/mpetrunic/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mpetrunic/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "mpetrunic",
      "id": 8836210,
      "node_id": "MDQ6VXNlcjg4MzYyMTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8836210?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mpetrunic",
      "html_url": "https://github.com/mpetrunic",
      "followers_url": "https://api.github.com/users/mpetrunic/followers",
      "following_url": "https://api.github.com/users/mpetrunic/following{/other_user}",
      "gists_url": "https://api.github.com/users/mpetrunic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mpetrunic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mpetrunic/subscriptions",
      "organizations_url": "https://api.github.com/users/mpetrunic/orgs",
      "repos_url": "https://api.github.com/users/mpetrunic/repos",
      "events_url": "https://api.github.com/users/mpetrunic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mpetrunic/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2021-01-05T09:39:56Z",
  "updated_at": "2021-02-01T11:06:49Z",
  "closed_at": "2021-02-01T11:06:49Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "Since we store everything in ssz format to db, we could end up being unable to read pre fork data.\r\nAs suggested in chat, we could add `getTypesByEpoch` method to BeaconConfig. This assumes only time anchored types would change (contains slot or epoch) otherwise we would need another repository.",
  "closed_by": {
    "login": "mpetrunic",
    "id": 8836210,
    "node_id": "MDQ6VXNlcjg4MzYyMTA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8836210?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mpetrunic",
    "html_url": "https://github.com/mpetrunic",
    "followers_url": "https://api.github.com/users/mpetrunic/followers",
    "following_url": "https://api.github.com/users/mpetrunic/following{/other_user}",
    "gists_url": "https://api.github.com/users/mpetrunic/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mpetrunic/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mpetrunic/subscriptions",
    "organizations_url": "https://api.github.com/users/mpetrunic/orgs",
    "repos_url": "https://api.github.com/users/mpetrunic/repos",
    "events_url": "https://api.github.com/users/mpetrunic/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mpetrunic/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/1927/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/1927/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/759275248",
    "html_url": "https://github.com/ChainSafe/lodestar/issues/1927#issuecomment-759275248",
    "issue_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/1927",
    "id": 759275248,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc1OTI3NTI0OA==",
    "user": {
      "login": "mpetrunic",
      "id": 8836210,
      "node_id": "MDQ6VXNlcjg4MzYyMTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8836210?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mpetrunic",
      "html_url": "https://github.com/mpetrunic",
      "followers_url": "https://api.github.com/users/mpetrunic/followers",
      "following_url": "https://api.github.com/users/mpetrunic/following{/other_user}",
      "gists_url": "https://api.github.com/users/mpetrunic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mpetrunic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mpetrunic/subscriptions",
      "organizations_url": "https://api.github.com/users/mpetrunic/orgs",
      "repos_url": "https://api.github.com/users/mpetrunic/repos",
      "events_url": "https://api.github.com/users/mpetrunic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mpetrunic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-01-13T07:59:26Z",
    "updated_at": "2021-01-13T08:29:08Z",
    "author_association": "MEMBER",
    "body": "Discord discussion:\r\n\r\nwemeetagain12/18/2020\r\nIf the fork epoch is part of the params, then the db will have what it needs to serialize/deserialize the right type (at least for state archive)(edited)\r\n[9:59 PM]\r\nwe could develop some helper methods on IBeaconConfig / types to return the right type given an epoch:\r\nconfig.getTypesByEpoch(epoch).BeaconState\r\n(edited)\r\n\r\nMarin Petrunić (mpetrunic)12/18/2020\r\nHmm that's true, gonna experiment with that soon. We will have type issues though. Like what would be return type of getTypesByEpoch \r\n\r\nMarin Petrunić (mpetrunic)Yesterday at 9:19 AM\r\nYeah, about that, my attempt to modify existing repositories to use different ssz types depending on fork hit a wall. I don't think that approach is good. Values stream and iteration and decode value cannot be adjusted since they work  with raw buffers and they don't and can't have access to time anchor.\r\n\r\nI was thinking maybe better way would be to introduce fork version into db keys and have like top level BlockRepository that holds reference to GenesisBlocksRepository, LightclientBlockRepository etc while providing single api to fetch block and depending on fork version it can decide from what repo to request block. When iterating values it would combine streams from all repositories. What do you think?\r\nIf you would like, I can move this convo to github discussion?\r\n\r\nprotoYesterday at 4:44 PM\r\nregarding DB: yes, it definitely makes sense to me to essentially just have different tables of data for each fork, since we are not stuck to a fork forever, it is nice to keep different types of data nicely separated\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/759275248/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/759291874",
    "html_url": "https://github.com/ChainSafe/lodestar/issues/1927#issuecomment-759291874",
    "issue_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/1927",
    "id": 759291874,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc1OTI5MTg3NA==",
    "user": {
      "login": "dapplion",
      "id": 35266934,
      "node_id": "MDQ6VXNlcjM1MjY2OTM0",
      "avatar_url": "https://avatars.githubusercontent.com/u/35266934?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dapplion",
      "html_url": "https://github.com/dapplion",
      "followers_url": "https://api.github.com/users/dapplion/followers",
      "following_url": "https://api.github.com/users/dapplion/following{/other_user}",
      "gists_url": "https://api.github.com/users/dapplion/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dapplion/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dapplion/subscriptions",
      "organizations_url": "https://api.github.com/users/dapplion/orgs",
      "repos_url": "https://api.github.com/users/dapplion/repos",
      "events_url": "https://api.github.com/users/dapplion/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dapplion/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-01-13T08:32:14Z",
    "updated_at": "2021-01-13T08:32:14Z",
    "author_association": "MEMBER",
    "body": "> LightclientBlockRepository etc while providing single api to fetch block and depending on fork version it can decide from what repo to request block. When iterating values it would combine streams from all repositories.\r\n\r\nIs it really necessary to be able to satisfy blocksByRange requests that span multiple forks? Can we force other clients to request from `forkSlot - 64, forkSlot -1`, then `forkSlot, forkSlot +64`?",
    "reactions": {
      "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/759291874/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/759299647",
    "html_url": "https://github.com/ChainSafe/lodestar/issues/1927#issuecomment-759299647",
    "issue_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/1927",
    "id": 759299647,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc1OTI5OTY0Nw==",
    "user": {
      "login": "mpetrunic",
      "id": 8836210,
      "node_id": "MDQ6VXNlcjg4MzYyMTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8836210?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mpetrunic",
      "html_url": "https://github.com/mpetrunic",
      "followers_url": "https://api.github.com/users/mpetrunic/followers",
      "following_url": "https://api.github.com/users/mpetrunic/following{/other_user}",
      "gists_url": "https://api.github.com/users/mpetrunic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mpetrunic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mpetrunic/subscriptions",
      "organizations_url": "https://api.github.com/users/mpetrunic/orgs",
      "repos_url": "https://api.github.com/users/mpetrunic/repos",
      "events_url": "https://api.github.com/users/mpetrunic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mpetrunic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-01-13T08:47:07Z",
    "updated_at": "2021-01-13T08:47:07Z",
    "author_association": "MEMBER",
    "body": "Well you could always open PR on spec but it's not certain it's gonna be accepted. But there are other awkward situations like handling unfinalized blocks which are indexed by root so you would have to ask root -> slot map for every action. \r\n\r\nWith approach that I've suggested it ain't gonna be problem anyways",
    "reactions": {
      "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/759299647/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/759334067",
    "html_url": "https://github.com/ChainSafe/lodestar/issues/1927#issuecomment-759334067",
    "issue_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/1927",
    "id": 759334067,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc1OTMzNDA2Nw==",
    "user": {
      "login": "dapplion",
      "id": 35266934,
      "node_id": "MDQ6VXNlcjM1MjY2OTM0",
      "avatar_url": "https://avatars.githubusercontent.com/u/35266934?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dapplion",
      "html_url": "https://github.com/dapplion",
      "followers_url": "https://api.github.com/users/dapplion/followers",
      "following_url": "https://api.github.com/users/dapplion/following{/other_user}",
      "gists_url": "https://api.github.com/users/dapplion/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dapplion/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dapplion/subscriptions",
      "organizations_url": "https://api.github.com/users/dapplion/orgs",
      "repos_url": "https://api.github.com/users/dapplion/repos",
      "events_url": "https://api.github.com/users/dapplion/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dapplion/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-01-13T09:48:28Z",
    "updated_at": "2021-01-13T09:48:28Z",
    "author_association": "MEMBER",
    "body": "> Well you could always open PR on spec but it's not certain it's gonna be accepted. But there are other awkward situations like handling unfinalized blocks which are indexed by root so you would have to ask root -> slot map for every action.\r\n\r\nYou right, too many possibilities best to support them",
    "reactions": {
      "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/759334067/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
