{
  "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/2547",
  "repository_url": "https://api.github.com/repos/ChainSafe/lodestar",
  "labels_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/2547/labels{/name}",
  "comments_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/2547/comments",
  "events_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/2547/events",
  "html_url": "https://github.com/ChainSafe/lodestar/issues/2547",
  "id": 898359880,
  "node_id": "MDU6SXNzdWU4OTgzNTk4ODA=",
  "number": 2547,
  "title": "Separate preset from config",
  "user": {
    "login": "wemeetagain",
    "id": 1348242,
    "node_id": "MDQ6VXNlcjEzNDgyNDI=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1348242?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/wemeetagain",
    "html_url": "https://github.com/wemeetagain",
    "followers_url": "https://api.github.com/users/wemeetagain/followers",
    "following_url": "https://api.github.com/users/wemeetagain/following{/other_user}",
    "gists_url": "https://api.github.com/users/wemeetagain/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/wemeetagain/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/wemeetagain/subscriptions",
    "organizations_url": "https://api.github.com/users/wemeetagain/orgs",
    "repos_url": "https://api.github.com/users/wemeetagain/repos",
    "events_url": "https://api.github.com/users/wemeetagain/events{/privacy}",
    "received_events_url": "https://api.github.com/users/wemeetagain/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2021-05-21T19:19:45Z",
  "updated_at": "2021-06-09T16:32:52Z",
  "closed_at": "2021-06-09T16:32:52Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "**Is your feature request related to a problem? Please describe.**\r\n\r\n- The `IBeaconConfig` object has become a catch-all object to house many things. Many functions/modules/etc require a config object, and its not immediately clear _why_. \r\n- The `IBeaconSSZTypes` object is seemingly overly abstract. In practice, we only ever need a single copy of all ssz types, and ssz types don't change. (They only change in testing, when we use the minimal config)\r\n- Our organization, the naming, diverges from the spec. It could be more closely aligned if we try.\r\n\r\n**Describe the solution you'd like**\r\n\r\nWith the introduction of ethereum/eth2.0-specs#2390, we may simplify our code by moving much of the config logic into static imports.\r\n\r\nI also recommend using this opportunity to realign our naming with the spec. This will make it much easier for new contributors to pick up our code.\r\n\r\nSpecifically, we can separate our `IBeaconParams` into two interfaces, eg: `IBeaconPreset` and `IBeaconConfig`\r\nThe `IBeaconContig` being the run-time params\r\nThe `IBeaconPreset` being the 'compile-time' params\r\nIBeaconPreset may be exposed like:\r\n\r\n`preset.ts`\r\n```ts\r\n// Use environment variable or other means to switch presets\r\nif (process.env.LODESTAR_PRESET === \"mainnet\") {\r\n  exports = require(\"./mainnet\"):\r\n} else ...\r\n```\r\n\r\nThe preset values can then be accessed like \"constants\"\r\n\r\n```ts\r\nimport {SYNC_COMMITTEE_SIZE} from \"@chainsafe/lodestar-preset\";\r\n...\r\n```\r\n\r\nThe presets include all variables needed to create SSZ types. So then SSZ types can be exported/imported in the same way:\r\n```ts\r\nimport {Root, phase0} from \"@chainsafe/lodestar-ssz-types\";\r\nRoot.equals(...);\r\nphase0.BeaconState.hashTreeRoot(...);\r\n```\r\n\r\nThis would let us simplify our current `IBeaconConfig` to be `IBeaconConfig & IBeaconForkInfo` or similar.\r\nNote that the types are no longer included here!\r\neg:\r\n```ts\r\n// Now IBeaconConfig can be the thing named 'config' in the specs, ie the runtime configuration\r\ninterface IBeaconConfig {\r\n  SECONDS_PER_SLOT: number;\r\n  ...\r\n}\r\ninterface IBeaconForkInfo {\r\n  forks: {[K in ForkName]: IForkInfo};\r\n  getForkInfo(slot: Slot): IForkInfo;\r\n  ...\r\n}\r\n\r\n// what was previously called IBeaconConfig can be the union or similar of these two\r\n// Or we can keep them separate? up to us\r\ninterface INewIBeaconConfig = IBeaconConfig & IBeaconForkInfo;\r\n```\r\n\r\nMany downstream functions pass in a config just do hash/serialize/etc a type, they can all be simplified:\r\n```ts\r\n// before\r\nfunction getFoo(config: IBeaconConfig, data) {\r\n  config.types.Root.equals(...);\r\n  }\r\n\r\n// after\r\nimport {Root} from \"@chainsafe/lodestar-ssz-types\";\r\nfunction getFoo(data) {\r\n  Root.equals(...);\r\n}\r\n```\r\n\r\nThe one hiccup here that would need to be worked thru is how ssz types vs typescript types are exported/imported so not to step on one another:\r\neg:\r\n```ts\r\nimport {Root} from \"@chainsafe/lodestar-types\";\r\n// Root is a typescript type (doesn't actually exist in javascript)\r\nimport {Root} from \"@chainsafe/lodestar-ssz-types\";\r\n// Root is an ssz type (eg: a javascript object with methods)\r\n\r\n// how should this naming conflict be resolved??\r\n```\r\n\r\nOpen discussion items:\r\n- Naming? standardize to spec? eg: \"preset\", \"config\", etc\r\n- Packages? unify packages? how to organize code: \"preset\", \"config\", \"fork\", \"types\" (ts and ssz)\r\n- How to handle import clash between ts and ssz types\r\n\r\n**Describe alternatives you've considered**\r\n\r\nstatus quo? This update intentionally limits the flexibility and number of `IBeaconSSZTypes` instantiated in a single javascript process (to 1). If that was an issue for some reason, we wouldn't want to do this.\r\n\r\n**Additional context**\r\n\r\nethereum/eth2.0-specs#2390",
  "closed_by": {
    "login": "dapplion",
    "id": 35266934,
    "node_id": "MDQ6VXNlcjM1MjY2OTM0",
    "avatar_url": "https://avatars.githubusercontent.com/u/35266934?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/dapplion",
    "html_url": "https://github.com/dapplion",
    "followers_url": "https://api.github.com/users/dapplion/followers",
    "following_url": "https://api.github.com/users/dapplion/following{/other_user}",
    "gists_url": "https://api.github.com/users/dapplion/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/dapplion/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/dapplion/subscriptions",
    "organizations_url": "https://api.github.com/users/dapplion/orgs",
    "repos_url": "https://api.github.com/users/dapplion/repos",
    "events_url": "https://api.github.com/users/dapplion/events{/privacy}",
    "received_events_url": "https://api.github.com/users/dapplion/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/2547/reactions",
    "total_count": 2,
    "+1": 1,
    "-1": 0,
    "laugh": 0,
    "hooray": 1,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/2547/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/846377267",
    "html_url": "https://github.com/ChainSafe/lodestar/issues/2547#issuecomment-846377267",
    "issue_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/2547",
    "id": 846377267,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0NjM3NzI2Nw==",
    "user": {
      "login": "dapplion",
      "id": 35266934,
      "node_id": "MDQ6VXNlcjM1MjY2OTM0",
      "avatar_url": "https://avatars.githubusercontent.com/u/35266934?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dapplion",
      "html_url": "https://github.com/dapplion",
      "followers_url": "https://api.github.com/users/dapplion/followers",
      "following_url": "https://api.github.com/users/dapplion/following{/other_user}",
      "gists_url": "https://api.github.com/users/dapplion/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dapplion/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dapplion/subscriptions",
      "organizations_url": "https://api.github.com/users/dapplion/orgs",
      "repos_url": "https://api.github.com/users/dapplion/repos",
      "events_url": "https://api.github.com/users/dapplion/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dapplion/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-22T08:52:34Z",
    "updated_at": "2021-05-22T08:52:34Z",
    "author_association": "MEMBER",
    "body": "This is great but I would work by steps:\r\n1. Split params following ethereum/eth2.0-specs#2390, keep using the config object everywhere. Rename following the spec\r\n2. Figure out latter how to deal with the issues you mentioned about name clashing (e.g. `Root`), etc.",
    "reactions": {
      "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/846377267/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/846790837",
    "html_url": "https://github.com/ChainSafe/lodestar/issues/2547#issuecomment-846790837",
    "issue_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/2547",
    "id": 846790837,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0Njc5MDgzNw==",
    "user": {
      "login": "tuyennhv",
      "id": 10568965,
      "node_id": "MDQ6VXNlcjEwNTY4OTY1",
      "avatar_url": "https://avatars.githubusercontent.com/u/10568965?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tuyennhv",
      "html_url": "https://github.com/tuyennhv",
      "followers_url": "https://api.github.com/users/tuyennhv/followers",
      "following_url": "https://api.github.com/users/tuyennhv/following{/other_user}",
      "gists_url": "https://api.github.com/users/tuyennhv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tuyennhv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tuyennhv/subscriptions",
      "organizations_url": "https://api.github.com/users/tuyennhv/orgs",
      "repos_url": "https://api.github.com/users/tuyennhv/repos",
      "events_url": "https://api.github.com/users/tuyennhv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tuyennhv/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-24T06:33:17Z",
    "updated_at": "2021-05-24T06:33:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "> How to handle import clash between ts and ssz types\r\n\r\nI prefer `Root` for typescript type and `RootType` (or `RootSSZType`) for ssz type, that should make it easier to understand for new contributors",
    "reactions": {
      "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/846790837/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
