{
  "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/6326",
  "repository_url": "https://api.github.com/repos/ChainSafe/lodestar",
  "labels_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/6326/labels{/name}",
  "comments_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/6326/comments",
  "events_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/6326/events",
  "html_url": "https://github.com/ChainSafe/lodestar/issues/6326",
  "id": 2090204960,
  "node_id": "I_kwDOCD5_Gc58lf8g",
  "number": 6326,
  "title": "Fork version used to verify sync aggregate in LC update",
  "user": {
    "login": "nflaig",
    "id": 38436224,
    "node_id": "MDQ6VXNlcjM4NDM2MjI0",
    "avatar_url": "https://avatars.githubusercontent.com/u/38436224?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nflaig",
    "html_url": "https://github.com/nflaig",
    "followers_url": "https://api.github.com/users/nflaig/followers",
    "following_url": "https://api.github.com/users/nflaig/following{/other_user}",
    "gists_url": "https://api.github.com/users/nflaig/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nflaig/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nflaig/subscriptions",
    "organizations_url": "https://api.github.com/users/nflaig/orgs",
    "repos_url": "https://api.github.com/users/nflaig/repos",
    "events_url": "https://api.github.com/users/nflaig/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nflaig/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1478321239,
      "node_id": "MDU6TGFiZWwxNDc4MzIxMjM5",
      "url": "https://api.github.com/repos/ChainSafe/lodestar/labels/meta-discussion",
      "name": "meta-discussion",
      "color": "a6bddb",
      "default": false,
      "description": "Indicates a topic that requires input from various developers."
    },
    {
      "id": 4115551418,
      "node_id": "LA_kwDOCD5_Gc71TlS6",
      "url": "https://api.github.com/repos/ChainSafe/lodestar/labels/scope-light-clients",
      "name": "scope-light-clients",
      "color": "980043",
      "default": false,
      "description": "All issues regarding light client development."
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2024-01-19T10:29:08Z",
  "updated_at": "2024-01-26T14:00:35Z",
  "closed_at": null,
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "From reviewing the spec, I noticed that is states that `sync_aggregate` fork might be different and is based on `signature_slot`\r\n\r\n[specs/altair/light-client/p2p-interface.md?plain=1#L245](https://github.com/ethereum/consensus-specs/blob/3727a757450feb6110e2d4e403604572a478343d/specs/altair/light-client/p2p-interface.md?plain=1#L245)\r\n> A `ForkDigest`-context based on `compute_fork_version(compute_epoch_at_slot(optimistic_update.attested_header.beacon.slot))` is used to select the fork namespace of the Response type. Note that this `fork_version` may be different from the one used to verify the `optimistic_update.sync_aggregate`, which is based on `optimistic_update.signature_slot`.\r\n\r\nI don't think we are following the spec here, but based on our current design of spec types it is difficult to use a different fork type for nested properties. \r\n\r\nThis seems to be mostly relevant during a hard fork and only if the `SyncAggregate` changes between those forks.\r\n\r\n@wemeetagain @g11tech any thoughts?\r\n\r\n_Originally posted by @nflaig in https://github.com/ChainSafe/lodestar/issues/6309#issuecomment-1899215202_\r\n            ",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/6326/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/6326/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/1912040472",
    "html_url": "https://github.com/ChainSafe/lodestar/issues/6326#issuecomment-1912040472",
    "issue_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/6326",
    "id": 1912040472,
    "node_id": "IC_kwDOCD5_Gc5x92wY",
    "user": {
      "login": "g11tech",
      "id": 76567250,
      "node_id": "MDQ6VXNlcjc2NTY3MjUw",
      "avatar_url": "https://avatars.githubusercontent.com/u/76567250?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/g11tech",
      "html_url": "https://github.com/g11tech",
      "followers_url": "https://api.github.com/users/g11tech/followers",
      "following_url": "https://api.github.com/users/g11tech/following{/other_user}",
      "gists_url": "https://api.github.com/users/g11tech/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/g11tech/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/g11tech/subscriptions",
      "organizations_url": "https://api.github.com/users/g11tech/orgs",
      "repos_url": "https://api.github.com/users/g11tech/repos",
      "events_url": "https://api.github.com/users/g11tech/events{/privacy}",
      "received_events_url": "https://api.github.com/users/g11tech/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2024-01-26T13:05:49Z",
    "updated_at": "2024-01-26T13:05:49Z",
    "author_association": "CONTRIBUTOR",
    "body": "I have had discussions on this in past if I remember, yes the fork version depends on attested header, but it doesnt matter if you keep or transmit an updated version of it\r\n\r\nlet me know some concrete example thats bugging you because that can help in identifying what should be the treatment",
    "reactions": {
      "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/1912040472/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/1912115175",
    "html_url": "https://github.com/ChainSafe/lodestar/issues/6326#issuecomment-1912115175",
    "issue_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/6326",
    "id": 1912115175,
    "node_id": "IC_kwDOCD5_Gc5x-I_n",
    "user": {
      "login": "nflaig",
      "id": 38436224,
      "node_id": "MDQ6VXNlcjM4NDM2MjI0",
      "avatar_url": "https://avatars.githubusercontent.com/u/38436224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nflaig",
      "html_url": "https://github.com/nflaig",
      "followers_url": "https://api.github.com/users/nflaig/followers",
      "following_url": "https://api.github.com/users/nflaig/following{/other_user}",
      "gists_url": "https://api.github.com/users/nflaig/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nflaig/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nflaig/subscriptions",
      "organizations_url": "https://api.github.com/users/nflaig/orgs",
      "repos_url": "https://api.github.com/users/nflaig/repos",
      "events_url": "https://api.github.com/users/nflaig/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nflaig/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2024-01-26T14:00:34Z",
    "updated_at": "2024-01-26T14:00:34Z",
    "author_association": "MEMBER",
    "body": "> let me know some concrete example thats bugging you because that can help in identifying what should be the treatment\r\n\r\nAs I understand it, the `signature_slot` is the slot of the block while `attested_header.beacon.slot` is the slot of the previous block. This means if there is a fork transition, we might have to different fork types to serialize / deserialize the data.\r\n\r\ne.g use `capella.LightClientOptimisticUpdate` for the update itself but the `sync_aggregate` should use `deneb.SyncAggregate`\r\n\r\nOur current ssz types do not support this as far as I can see as we don't allow to pick a fork type for individual properties, only the whole container.\r\n\r\nAs is it right now, it does not seem to be relevant because `sync_aggregate` didn't change since altair\r\nhttps://github.com/ChainSafe/lodestar/blob/01d47b9a0901c9f03a01ef68c819f4e592cbfd8b/packages/types/src/capella/sszTypes.ts#L241\r\n\r\nBut it is something we should keep in mind in case it changes in some future fork\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/1912115175/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
