{
  "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/1234",
  "repository_url": "https://api.github.com/repos/ChainSafe/lodestar",
  "labels_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/1234/labels{/name}",
  "comments_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/1234/comments",
  "events_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/1234/events",
  "html_url": "https://github.com/ChainSafe/lodestar/issues/1234",
  "id": 665874554,
  "node_id": "MDU6SXNzdWU2NjU4NzQ1NTQ=",
  "number": 1234,
  "title": "Regular Sync: some peers are out-of-sync",
  "user": {
    "login": "tuyennhv",
    "id": 10568965,
    "node_id": "MDQ6VXNlcjEwNTY4OTY1",
    "avatar_url": "https://avatars.githubusercontent.com/u/10568965?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tuyennhv",
    "html_url": "https://github.com/tuyennhv",
    "followers_url": "https://api.github.com/users/tuyennhv/followers",
    "following_url": "https://api.github.com/users/tuyennhv/following{/other_user}",
    "gists_url": "https://api.github.com/users/tuyennhv/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tuyennhv/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tuyennhv/subscriptions",
    "organizations_url": "https://api.github.com/users/tuyennhv/orgs",
    "repos_url": "https://api.github.com/users/tuyennhv/repos",
    "events_url": "https://api.github.com/users/tuyennhv/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tuyennhv/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": {
    "login": "tuyennhv",
    "id": 10568965,
    "node_id": "MDQ6VXNlcjEwNTY4OTY1",
    "avatar_url": "https://avatars.githubusercontent.com/u/10568965?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tuyennhv",
    "html_url": "https://github.com/tuyennhv",
    "followers_url": "https://api.github.com/users/tuyennhv/followers",
    "following_url": "https://api.github.com/users/tuyennhv/following{/other_user}",
    "gists_url": "https://api.github.com/users/tuyennhv/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tuyennhv/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tuyennhv/subscriptions",
    "organizations_url": "https://api.github.com/users/tuyennhv/orgs",
    "repos_url": "https://api.github.com/users/tuyennhv/repos",
    "events_url": "https://api.github.com/users/tuyennhv/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tuyennhv/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "tuyennhv",
      "id": 10568965,
      "node_id": "MDQ6VXNlcjEwNTY4OTY1",
      "avatar_url": "https://avatars.githubusercontent.com/u/10568965?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tuyennhv",
      "html_url": "https://github.com/tuyennhv",
      "followers_url": "https://api.github.com/users/tuyennhv/followers",
      "following_url": "https://api.github.com/users/tuyennhv/following{/other_user}",
      "gists_url": "https://api.github.com/users/tuyennhv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tuyennhv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tuyennhv/subscriptions",
      "organizations_url": "https://api.github.com/users/tuyennhv/orgs",
      "repos_url": "https://api.github.com/users/tuyennhv/repos",
      "events_url": "https://api.github.com/users/tuyennhv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tuyennhv/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 9,
  "created_at": "2020-07-26T22:45:32Z",
  "updated_at": "2020-08-21T09:26:59Z",
  "closed_at": "2020-08-21T09:26:59Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "**Describe the bug**\r\nIn my environment, I can sync to gossip parent blocks 5-6 times. However there are 1-2 times I cannot do that because we sent `beacon_block_by_range` requests to out-of-date peers. \r\n```\r\n2020-07-26 21:56:28  [SYNC]             info: Requesting blocks from slot 194977 to slot 195131\r\n2020-07-26 21:56:28  [NETWORK]       verbose: sending beacon_blocks_by_range request to 16Uiu2HAmUghihDaHutopxWPoxjUedJZBLVuuP1NBDq2LfpQZTnad requestId=3fb6e9d3489b0875, encoding=ssz_snappy\r\n2020-07-26 21:56:28  [NETWORK]       verbose: sending beacon_blocks_by_range request to 16Uiu2HAm2BfJQmNSNdAtGfJLH1CyQKKRVr425uJgrSq9ps8TLJe2 requestId=c618c049d122bcee, encoding=ssz_snappy\r\n...\r\n2020-07-26 21:56:29  [NETWORK]       verbose: receive beacon_blocks_by_range response with 0 chunks from 16Uiu2HAmUghihDaHutopxWPoxjUedJZBLVuuP1NBDq2LfpQZTnad requestId=3fb6e9d3489b0875, encoding=ssz_snappy, body={\"startSlot\":194977,\"step\":1,\"count\":78}\r\n2020-07-26 21:56:31  [NETWORK]       verbose: receive beacon_blocks_by_range response with 52 chunks from 16Uiu2HAm2BfJQmNSNdAtGfJLH1CyQKKRVr425uJgrSq9ps8TLJe2 requestId=c618c049d122bcee, encoding=ssz_snappy, body={\"startSlot\":195055,\"step\":1,\"count\":77}\r\n```\r\n\r\nSince the 1st peer above returned 0 chunk because it's not up to date, we cannot process any blocks. So we have to filter to up-to-date peers only.\r\n\r\nThere are 2 ways I can think of:\r\n+ Filter based on headSlot of Status message, send status messages at init time of regular sync. This maybe does not work if peers have `headSlot` not equal to `currentSlot`\r\n+ Find a way to keep peerIds of gossip blocks and just get peers based on that - but a peer's chain may not be up to date even it published gossip blocks",
  "closed_by": {
    "login": "tuyennhv",
    "id": 10568965,
    "node_id": "MDQ6VXNlcjEwNTY4OTY1",
    "avatar_url": "https://avatars.githubusercontent.com/u/10568965?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tuyennhv",
    "html_url": "https://github.com/tuyennhv",
    "followers_url": "https://api.github.com/users/tuyennhv/followers",
    "following_url": "https://api.github.com/users/tuyennhv/following{/other_user}",
    "gists_url": "https://api.github.com/users/tuyennhv/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tuyennhv/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tuyennhv/subscriptions",
    "organizations_url": "https://api.github.com/users/tuyennhv/orgs",
    "repos_url": "https://api.github.com/users/tuyennhv/repos",
    "events_url": "https://api.github.com/users/tuyennhv/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tuyennhv/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/1234/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/1234/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/664091642",
    "html_url": "https://github.com/ChainSafe/lodestar/issues/1234#issuecomment-664091642",
    "issue_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/1234",
    "id": 664091642,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2NDA5MTY0Mg==",
    "user": {
      "login": "tuyennhv",
      "id": 10568965,
      "node_id": "MDQ6VXNlcjEwNTY4OTY1",
      "avatar_url": "https://avatars.githubusercontent.com/u/10568965?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tuyennhv",
      "html_url": "https://github.com/tuyennhv",
      "followers_url": "https://api.github.com/users/tuyennhv/followers",
      "following_url": "https://api.github.com/users/tuyennhv/following{/other_user}",
      "gists_url": "https://api.github.com/users/tuyennhv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tuyennhv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tuyennhv/subscriptions",
      "organizations_url": "https://api.github.com/users/tuyennhv/orgs",
      "repos_url": "https://api.github.com/users/tuyennhv/repos",
      "events_url": "https://api.github.com/users/tuyennhv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tuyennhv/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-27T02:52:53Z",
    "updated_at": "2020-07-27T02:52:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "Since `headSlot` in `Status` message is not a guarantee to help us find peers to get blocks up to `currentSlot`, I found that using `step` in `beacon_block_by_range` may help us (and that's probably what it's designed for)\r\n\r\nGiven 3 peers, we can query by interleaving way, assuming we want to get block 10 to 20 for regular sync:\r\nRound 0\r\n+ Peer 0: start_slot=10, step=3 => return 10,13,16,19\r\n+ Peer 1: start_slot=11, step=3 => return 11,14 - this peer is out-of-sync because expected latest slot=20\r\n+ Peer 2: start_slot=12, step=3 => return null - error querying this peer - timeout for example\r\n=> bestPeer=peer has `max(lastSlot)`=peer 0\r\n\r\nRound 1 - fallback\r\n+ Query bestPeer with start_slot=17, step=3\r\n+ Query bestPeer with start_slot=12, step=3\r\n\r\nThen merge/sort blocks and return. In the case of missing blocks (some slots don't have blocks), it's addressed by Round 1.",
    "reactions": {
      "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/664091642/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/665105422",
    "html_url": "https://github.com/ChainSafe/lodestar/issues/1234#issuecomment-665105422",
    "issue_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/1234",
    "id": 665105422,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2NTEwNTQyMg==",
    "user": {
      "login": "wemeetagain",
      "id": 1348242,
      "node_id": "MDQ6VXNlcjEzNDgyNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1348242?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wemeetagain",
      "html_url": "https://github.com/wemeetagain",
      "followers_url": "https://api.github.com/users/wemeetagain/followers",
      "following_url": "https://api.github.com/users/wemeetagain/following{/other_user}",
      "gists_url": "https://api.github.com/users/wemeetagain/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wemeetagain/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wemeetagain/subscriptions",
      "organizations_url": "https://api.github.com/users/wemeetagain/orgs",
      "repos_url": "https://api.github.com/users/wemeetagain/repos",
      "events_url": "https://api.github.com/users/wemeetagain/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wemeetagain/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-28T15:22:53Z",
    "updated_at": "2020-07-28T15:22:53Z",
    "author_association": "MEMBER",
    "body": "I don't think we should be relying _entirely_ on `beacon_block_by_range` in regular sync.\r\nRegular sync is when we've synced up to (what we believe is) up to / past the finalized checkpoint. After that we don't yet have a linearized version of history, but instead have a tree. This is what we're tracking in our fork choice.\r\n\r\n```\r\nGenesis                         Finalized                  Head\r\n                                        /------------------o\r\n   o--------       ...       -------o--<\r\n                                        \\---<\r\n                                             \\------\r\n```\r\nWe can retry requests from good peers, do some syncing by range, if it helps us get closer to the head, thats cool. But ultimately I don't think its what is intended.\r\n\r\nI think a more robust and complete approach would have us using gossip + block by root to sync from the tips of the network backwards block by block to meet up with our current head.\r\nThis is what is what is meant by `a client MAY queue blocks for processing once the parent block is retrieved` from the spec, in validation of blocks w/o an existing parent block. If we send those blocks to the chain for processing, it may resolve the need to have a complex \"regular sync\" strategy at all.",
    "reactions": {
      "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/665105422/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/665111152",
    "html_url": "https://github.com/ChainSafe/lodestar/issues/1234#issuecomment-665111152",
    "issue_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/1234",
    "id": 665111152,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2NTExMTE1Mg==",
    "user": {
      "login": "mpetrunic",
      "id": 8836210,
      "node_id": "MDQ6VXNlcjg4MzYyMTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8836210?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mpetrunic",
      "html_url": "https://github.com/mpetrunic",
      "followers_url": "https://api.github.com/users/mpetrunic/followers",
      "following_url": "https://api.github.com/users/mpetrunic/following{/other_user}",
      "gists_url": "https://api.github.com/users/mpetrunic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mpetrunic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mpetrunic/subscriptions",
      "organizations_url": "https://api.github.com/users/mpetrunic/orgs",
      "repos_url": "https://api.github.com/users/mpetrunic/repos",
      "events_url": "https://api.github.com/users/mpetrunic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mpetrunic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-28T15:33:26Z",
    "updated_at": "2020-07-28T15:33:57Z",
    "author_association": "MEMBER",
    "body": "> I don't think we should be relying _entirely_ on `beacon_block_by_range` in regular sync.\r\n> Regular sync is when we've synced up to (what we believe is) up to / past the finalized checkpoint. After that we don't yet have a linearized version of history, but instead have a tree. This is what we're tracking in our fork choice.\r\n> \r\n> ```\r\n> Genesis                         Finalized                  Head\r\n>                                         /------------------o\r\n>    o--------       ...       -------o--<\r\n>                                         \\---<\r\n>                                              \\------\r\n> ```\r\n> \r\n> We can retry requests from good peers, do some syncing by range, if it helps us get closer to the head, thats cool. But ultimately I don't think its what is intended.\r\n> \r\n> I think a more robust and complete approach would have us using gossip + block by root to sync from the tips of the network backwards block by block to meet up with our current head.\r\n> This is what is what is meant by `a client MAY queue blocks for processing once the parent block is retrieved` from the spec, in validation of blocks w/o an existing parent block. If we send those blocks to the chain for processing, it may resolve the need to have a complex \"regular sync\" strategy at all.\r\n\r\nTried that, you get banned quickly because you are spamming block by Root requests.\r\n\r\nWe actually do that if received block is less that 5 slots ahead",
    "reactions": {
      "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/665111152/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/665114885",
    "html_url": "https://github.com/ChainSafe/lodestar/issues/1234#issuecomment-665114885",
    "issue_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/1234",
    "id": 665114885,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2NTExNDg4NQ==",
    "user": {
      "login": "wemeetagain",
      "id": 1348242,
      "node_id": "MDQ6VXNlcjEzNDgyNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1348242?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wemeetagain",
      "html_url": "https://github.com/wemeetagain",
      "followers_url": "https://api.github.com/users/wemeetagain/followers",
      "following_url": "https://api.github.com/users/wemeetagain/following{/other_user}",
      "gists_url": "https://api.github.com/users/wemeetagain/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wemeetagain/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wemeetagain/subscriptions",
      "organizations_url": "https://api.github.com/users/wemeetagain/orgs",
      "repos_url": "https://api.github.com/users/wemeetagain/repos",
      "events_url": "https://api.github.com/users/wemeetagain/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wemeetagain/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-28T15:40:03Z",
    "updated_at": "2020-07-28T15:40:03Z",
    "author_association": "MEMBER",
    "body": "> Tried that, you get banned quickly because you are spamming block by Root requests.\r\n\r\nCan we spread out requests across our peers? Throttle requests to N / second / peer?\r\nThis seems like a good compliment to whatever forward-sync strategy we determine.",
    "reactions": {
      "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/665114885/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/665235486",
    "html_url": "https://github.com/ChainSafe/lodestar/issues/1234#issuecomment-665235486",
    "issue_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/1234",
    "id": 665235486,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2NTIzNTQ4Ng==",
    "user": {
      "login": "wemeetagain",
      "id": 1348242,
      "node_id": "MDQ6VXNlcjEzNDgyNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1348242?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wemeetagain",
      "html_url": "https://github.com/wemeetagain",
      "followers_url": "https://api.github.com/users/wemeetagain/followers",
      "following_url": "https://api.github.com/users/wemeetagain/following{/other_user}",
      "gists_url": "https://api.github.com/users/wemeetagain/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wemeetagain/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wemeetagain/subscriptions",
      "organizations_url": "https://api.github.com/users/wemeetagain/orgs",
      "repos_url": "https://api.github.com/users/wemeetagain/repos",
      "events_url": "https://api.github.com/users/wemeetagain/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wemeetagain/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-28T19:34:47Z",
    "updated_at": "2020-07-28T19:34:47Z",
    "author_association": "MEMBER",
    "body": "This is an interesting resource: https://github.com/sigp/lighthouse/blob/master/beacon_node/network/src/sync/range_sync/range.rs\r\nLook under \"head chain sync\"",
    "reactions": {
      "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/665235486/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/665341709",
    "html_url": "https://github.com/ChainSafe/lodestar/issues/1234#issuecomment-665341709",
    "issue_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/1234",
    "id": 665341709,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2NTM0MTcwOQ==",
    "user": {
      "login": "tuyennhv",
      "id": 10568965,
      "node_id": "MDQ6VXNlcjEwNTY4OTY1",
      "avatar_url": "https://avatars.githubusercontent.com/u/10568965?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tuyennhv",
      "html_url": "https://github.com/tuyennhv",
      "followers_url": "https://api.github.com/users/tuyennhv/followers",
      "following_url": "https://api.github.com/users/tuyennhv/following{/other_user}",
      "gists_url": "https://api.github.com/users/tuyennhv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tuyennhv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tuyennhv/subscriptions",
      "organizations_url": "https://api.github.com/users/tuyennhv/orgs",
      "repos_url": "https://api.github.com/users/tuyennhv/repos",
      "events_url": "https://api.github.com/users/tuyennhv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tuyennhv/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-28T23:15:54Z",
    "updated_at": "2020-07-28T23:15:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "`beacon_block_by_range` should return blocks of the same chain up to head.\r\n\r\nshould we just select a best peer and issue `beacon_block_by_range` for it only?",
    "reactions": {
      "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/665341709/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/665686898",
    "html_url": "https://github.com/ChainSafe/lodestar/issues/1234#issuecomment-665686898",
    "issue_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/1234",
    "id": 665686898,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2NTY4Njg5OA==",
    "user": {
      "login": "wemeetagain",
      "id": 1348242,
      "node_id": "MDQ6VXNlcjEzNDgyNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1348242?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wemeetagain",
      "html_url": "https://github.com/wemeetagain",
      "followers_url": "https://api.github.com/users/wemeetagain/followers",
      "following_url": "https://api.github.com/users/wemeetagain/following{/other_user}",
      "gists_url": "https://api.github.com/users/wemeetagain/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wemeetagain/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wemeetagain/subscriptions",
      "organizations_url": "https://api.github.com/users/wemeetagain/orgs",
      "repos_url": "https://api.github.com/users/wemeetagain/repos",
      "events_url": "https://api.github.com/users/wemeetagain/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wemeetagain/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-29T14:09:05Z",
    "updated_at": "2020-07-29T14:09:05Z",
    "author_association": "MEMBER",
    "body": "> should we just select a best peer and issue beacon_block_by_range for it only?\r\n\r\nI think we should go that direction. Will be simpler and more in line with batch-processing, which we will eventually want to do.",
    "reactions": {
      "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/665686898/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/667613315",
    "html_url": "https://github.com/ChainSafe/lodestar/issues/1234#issuecomment-667613315",
    "issue_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/1234",
    "id": 667613315,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2NzYxMzMxNQ==",
    "user": {
      "login": "tuyennhv",
      "id": 10568965,
      "node_id": "MDQ6VXNlcjEwNTY4OTY1",
      "avatar_url": "https://avatars.githubusercontent.com/u/10568965?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tuyennhv",
      "html_url": "https://github.com/tuyennhv",
      "followers_url": "https://api.github.com/users/tuyennhv/followers",
      "following_url": "https://api.github.com/users/tuyennhv/following{/other_user}",
      "gists_url": "https://api.github.com/users/tuyennhv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tuyennhv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tuyennhv/subscriptions",
      "organizations_url": "https://api.github.com/users/tuyennhv/orgs",
      "repos_url": "https://api.github.com/users/tuyennhv/repos",
      "events_url": "https://api.github.com/users/tuyennhv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tuyennhv/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-02T02:11:03Z",
    "updated_at": "2020-08-02T02:11:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "## Latest issue\r\n\r\nRestore chain\r\n```\r\n2020-08-02 08:28:29  [CHAIN]            info: Processed new chain head newChainHeadRoot=0x3bd4f8518971d022f01e60cff1fe542b4260662b4b23c9f35a152bf9c698fdc4, slot=237728, epoch=7429\r\n2020-08-02 08:28:30  [CHAIN]            info: Processed new chain head newChainHeadRoot=0x74332574cf13a236c57efc822a64686e899b0deb53a501014a4e6b4682965f76, slot=237732, epoch=7429\r\n```\r\n\r\n```\r\n2020-08-02 08:29:33  [SYNC]          verbose: Regular Sync: Found best peer 16Uiu2HAm7NAPSL46rXBSmjZQKX8pvU99iRpQJNMDY3o89XUzZBrM, headSlot=241496\r\n2020-08-02 08:29:33  [SYNC]             info: Regular Sync: Setting target newTargetSlot=237752\r\n2020-08-02 08:29:33  [SYNC]             info: Regular Sync: Requesting blocks from slot 237733 to slot 237752\r\n2020-08-02 08:29:34  [SYNC]             info: Imported blocks for slots: 237735,237738,237739,237740,237743,237744,237749,237750\r\n```\r\nnot received \"processedCheckpoint\" because all of the received blocks already exists, meaning our `lastSlot` is greater than `headSlot` and when we start Regular Sync, we always start from `headSlot` -> we receive existing blocks in our chain -> not passed `packages/lodestar/src/chain/blocks/validate.ts` -> `processedBlock` not emitted -> Regular Sync suspended.",
    "reactions": {
      "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/667613315/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/678140008",
    "html_url": "https://github.com/ChainSafe/lodestar/issues/1234#issuecomment-678140008",
    "issue_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/1234",
    "id": 678140008,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3ODE0MDAwOA==",
    "user": {
      "login": "tuyennhv",
      "id": 10568965,
      "node_id": "MDQ6VXNlcjEwNTY4OTY1",
      "avatar_url": "https://avatars.githubusercontent.com/u/10568965?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tuyennhv",
      "html_url": "https://github.com/tuyennhv",
      "followers_url": "https://api.github.com/users/tuyennhv/followers",
      "following_url": "https://api.github.com/users/tuyennhv/following{/other_user}",
      "gists_url": "https://api.github.com/users/tuyennhv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tuyennhv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tuyennhv/subscriptions",
      "organizations_url": "https://api.github.com/users/tuyennhv/orgs",
      "repos_url": "https://api.github.com/users/tuyennhv/repos",
      "events_url": "https://api.github.com/users/tuyennhv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tuyennhv/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-21T09:26:59Z",
    "updated_at": "2020-08-21T09:26:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "with the latest master, we do emit `processedBlock` event when a block existed so this should not be an issue anymore",
    "reactions": {
      "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/678140008/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
