{
  "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/6050",
  "repository_url": "https://api.github.com/repos/ChainSafe/lodestar",
  "labels_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/6050/labels{/name}",
  "comments_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/6050/comments",
  "events_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/6050/events",
  "html_url": "https://github.com/ChainSafe/lodestar/issues/6050",
  "id": 1951303354,
  "node_id": "I_kwDOCD5_Gc50Toa6",
  "number": 6050,
  "title": "Ephemery Testnet Configs",
  "user": {
    "login": "atkinsonholly",
    "id": 32036223,
    "node_id": "MDQ6VXNlcjMyMDM2MjIz",
    "avatar_url": "https://avatars.githubusercontent.com/u/32036223?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/atkinsonholly",
    "html_url": "https://github.com/atkinsonholly",
    "followers_url": "https://api.github.com/users/atkinsonholly/followers",
    "following_url": "https://api.github.com/users/atkinsonholly/following{/other_user}",
    "gists_url": "https://api.github.com/users/atkinsonholly/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/atkinsonholly/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/atkinsonholly/subscriptions",
    "organizations_url": "https://api.github.com/users/atkinsonholly/orgs",
    "repos_url": "https://api.github.com/users/atkinsonholly/repos",
    "events_url": "https://api.github.com/users/atkinsonholly/events{/privacy}",
    "received_events_url": "https://api.github.com/users/atkinsonholly/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 4754137758,
      "node_id": "LA_kwDOCD5_Gc8AAAABG15ing",
      "url": "https://api.github.com/repos/ChainSafe/lodestar/labels/meta-feature-request",
      "name": "meta-feature-request",
      "color": "B5CF5F",
      "default": false,
      "description": "Issues to track feature requests."
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 13,
  "created_at": "2023-10-19T05:36:39Z",
  "updated_at": "2023-10-25T11:34:00Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "### Problem description\r\n\r\nInclude configs to easily connect to the ephemeral testnet, \"ephemery\".\r\n\r\nDescription of Ephemery, its behaviour and the integration plans by @taxmeifyoucan :\r\n[Ephemery](https://ephemery.dev/) is a new kind of testnet which is intended for short term testing use cases. It automatically resets back to genesis after every given period which enables reclaiming faucet funds, clearing validator set and keeping small state.\r\n\r\nEphemery runs since December 2022 but is mostly run by external tooling. There is ongoing effort to implement specs also within clients, not only externally. All resources for using the testnet are here: https://github.com/ephemery-testnet/ephemery-resources.\r\n\r\nCurrent specs for client requirements can be found in [the draft EIP](https://github.com/taxmeifyoucan/EIPs/blob/d298cdd8eaf47a21e7770e5c6efef870587c924d/EIPS/eip-6916.md).\r\n\r\n### Solution description\r\n\r\nAdd the `--ephemery` config. \r\nAdd additional flags for developer options related to downloading / generating genesis (see below).\r\n\r\n### Additional context\r\n\r\n**Add Ephemery to the Lodestar network options (cli and config packages)**\r\n- [x] Add ephemery flag\r\n\r\n**Additional genesis options**\r\nDefault: load genesis from a URL (checkpointz server). Additional [developer] options currently envisaged:\r\n\r\n- [x] Use backup download URL (ephemery.dev)\r\n- [x] Use flag to override with custom path to a `genesis.ssz` file provided by user\r\n- [ ] Use flag to generate genesis with script at `packages/ephemery`. Note: user dependency [eth2-testnet-genesis](https://github.com/protolambda/eth2-testnet-genesis). \r\n\r\n**Reset**\r\n- [ ] Research phase ongoing for ephemery reset.",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/6050/reactions",
    "total_count": 5,
    "+1": 4,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 1,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/6050/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/1770131841",
    "html_url": "https://github.com/ChainSafe/lodestar/issues/6050#issuecomment-1770131841",
    "issue_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/6050",
    "id": 1770131841,
    "node_id": "IC_kwDOCD5_Gc5pghGB",
    "user": {
      "login": "atkinsonholly",
      "id": 32036223,
      "node_id": "MDQ6VXNlcjMyMDM2MjIz",
      "avatar_url": "https://avatars.githubusercontent.com/u/32036223?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/atkinsonholly",
      "html_url": "https://github.com/atkinsonholly",
      "followers_url": "https://api.github.com/users/atkinsonholly/followers",
      "following_url": "https://api.github.com/users/atkinsonholly/following{/other_user}",
      "gists_url": "https://api.github.com/users/atkinsonholly/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/atkinsonholly/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/atkinsonholly/subscriptions",
      "organizations_url": "https://api.github.com/users/atkinsonholly/orgs",
      "repos_url": "https://api.github.com/users/atkinsonholly/repos",
      "events_url": "https://api.github.com/users/atkinsonholly/events{/privacy}",
      "received_events_url": "https://api.github.com/users/atkinsonholly/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-10-19T06:16:35Z",
    "updated_at": "2023-10-19T06:16:35Z",
    "author_association": "NONE",
    "body": "I'll link my draft PRs here shortly",
    "reactions": {
      "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/1770131841/reactions",
      "total_count": 2,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 2,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/1770462381",
    "html_url": "https://github.com/ChainSafe/lodestar/issues/6050#issuecomment-1770462381",
    "issue_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/6050",
    "id": 1770462381,
    "node_id": "IC_kwDOCD5_Gc5phxyt",
    "user": {
      "login": "nflaig",
      "id": 38436224,
      "node_id": "MDQ6VXNlcjM4NDM2MjI0",
      "avatar_url": "https://avatars.githubusercontent.com/u/38436224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nflaig",
      "html_url": "https://github.com/nflaig",
      "followers_url": "https://api.github.com/users/nflaig/followers",
      "following_url": "https://api.github.com/users/nflaig/following{/other_user}",
      "gists_url": "https://api.github.com/users/nflaig/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nflaig/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nflaig/subscriptions",
      "organizations_url": "https://api.github.com/users/nflaig/orgs",
      "repos_url": "https://api.github.com/users/nflaig/repos",
      "events_url": "https://api.github.com/users/nflaig/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nflaig/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-10-19T09:50:30Z",
    "updated_at": "2023-10-19T09:50:30Z",
    "author_association": "MEMBER",
    "body": "That's a great idea to add first-class support for Ephemery, I quickly looked at this before and I think the ideal solution would be that you only have to set `--network ephemery` and that's it.\r\n\r\nMy general understanding of how this would work is\r\n- pull genesis data / network config from github ([ephemery-testnet/ephemery-genesis](https://github.com/ephemery-testnet/ephemery-genesis))\r\n- dynamically load network config in Lodestar\r\n- periodically check if there is a new geneses ([check_testnet](https://github.com/ephemery-testnet/ephemery-scripts/blob/9f93fc04ea15d19560445769014fd80043042393/retention.sh#L72-L100))\r\n- restart Lodestar if new genesis is detected ([node-js-process-restart](https://stackoverflow.com/questions/40835187/node-js-process-restart))\r\n\r\nI have just quickly looked at this and haven't used Ephemery myself yet. mostly got my ideas from [Ephemery using geth and lodestar](https://github.com/ephemery-testnet/ephemery-scripts/blob/9f93fc04ea15d19560445769014fd80043042393/manual/setup-geth-lodestar.md) and [Retention script](https://github.com/ephemery-testnet/ephemery-scripts/blob/9f93fc04ea15d19560445769014fd80043042393/retention.sh).\r\n\r\nOne difficulty I see right now is that both the EL and CL need to be coordinated, if only Lodestar supports this it is not gonna be that useful, you would still have to run a separate script in a cronjob to manage the EL. But either way someone has to start pushing this. For initial testing, could use `--execution.engineMock` to not rely on the EL for now.\r\n\r\nWould love to hear your thoughts on how this should work in the end from a users point of view",
    "reactions": {
      "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/1770462381/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/1771092071",
    "html_url": "https://github.com/ChainSafe/lodestar/issues/6050#issuecomment-1771092071",
    "issue_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/6050",
    "id": 1771092071,
    "node_id": "IC_kwDOCD5_Gc5pkLhn",
    "user": {
      "login": "atkinsonholly",
      "id": 32036223,
      "node_id": "MDQ6VXNlcjMyMDM2MjIz",
      "avatar_url": "https://avatars.githubusercontent.com/u/32036223?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/atkinsonholly",
      "html_url": "https://github.com/atkinsonholly",
      "followers_url": "https://api.github.com/users/atkinsonholly/followers",
      "following_url": "https://api.github.com/users/atkinsonholly/following{/other_user}",
      "gists_url": "https://api.github.com/users/atkinsonholly/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/atkinsonholly/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/atkinsonholly/subscriptions",
      "organizations_url": "https://api.github.com/users/atkinsonholly/orgs",
      "repos_url": "https://api.github.com/users/atkinsonholly/repos",
      "events_url": "https://api.github.com/users/atkinsonholly/events{/privacy}",
      "received_events_url": "https://api.github.com/users/atkinsonholly/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-10-19T14:19:53Z",
    "updated_at": "2023-10-19T14:20:54Z",
    "author_association": "NONE",
    "body": "Hi @nflaig that's right, there's other work happening to integrate ephemery into more clients. Geth is next up, and there is also WIP for Lighthouse + Reth. Thanks for the heads up on how to do the initial testing. \r\nI've now linked my [draft PR](https://github.com/ChainSafe/lodestar/pull/6054) for adding the ephemery network which should address your first bullet - let me know what you think! \r\nI'm working on a second PR relating to more dynamic genesis options (your second bullet) which will probably mainly be useful for developer users. \r\nWork on reset is in the early stages (your third + fourth bullets) - draft typescript version of retention script [here](https://github.com/atkinsonholly/lodestar/pull/1/files) (WIP). ",
    "reactions": {
      "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/1771092071/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/1771190653",
    "html_url": "https://github.com/ChainSafe/lodestar/issues/6050#issuecomment-1771190653",
    "issue_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/6050",
    "id": 1771190653,
    "node_id": "IC_kwDOCD5_Gc5pkjl9",
    "user": {
      "login": "nflaig",
      "id": 38436224,
      "node_id": "MDQ6VXNlcjM4NDM2MjI0",
      "avatar_url": "https://avatars.githubusercontent.com/u/38436224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nflaig",
      "html_url": "https://github.com/nflaig",
      "followers_url": "https://api.github.com/users/nflaig/followers",
      "following_url": "https://api.github.com/users/nflaig/following{/other_user}",
      "gists_url": "https://api.github.com/users/nflaig/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nflaig/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nflaig/subscriptions",
      "organizations_url": "https://api.github.com/users/nflaig/orgs",
      "repos_url": "https://api.github.com/users/nflaig/repos",
      "events_url": "https://api.github.com/users/nflaig/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nflaig/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-10-19T15:11:04Z",
    "updated_at": "2023-10-19T15:11:04Z",
    "author_association": "MEMBER",
    "body": "> I've now linked my https://github.com/ChainSafe/lodestar/pull/6054 for adding the ephemery network which should address your first bullet - let me know what you think!\r\n\r\nLooks good on first glance, will give it more detailed review later. Mostly need to understand the requirements that Ephemery has a bit better to know if this goes in the right direction.\r\n\r\n> Work on reset is in the early stages (your third + fourth bullets) - draft typescript version of retention script [here](https://github.com/atkinsonholly/lodestar/pull/1/files) (WIP).\r\n\r\nIt's a good first PoC but I feel like an ideal solution for this needs to be inherent to Lodestar and not just written in Typescript that in the end just does system calls\r\n\r\nThis would give us a few advantages\r\n- Lodestar knows where it's data dirs are, no need to have predefined values for this\r\n- Platform agnostic, should work in docker, ideally also windows and not have any dependency on system level tooling like `systemctl`\r\n- Does not rely on any system level permissions (`sudo`)\r\n\r\n> restart Lodestar if new genesis is detected ([node-js-process-restart](https://stackoverflow.com/questions/40835187/node-js-process-restart))\r\n\r\nI am also still not sure how this would look like, the CLI could act like a process manager by starting the beacon node and validator client in a child process.\r\n\r\nFor me mostly the question is what the UX of this should look like, if you have a single script which manages all three clients (el + bn + vc) then coordination is easy between clients but a user would have to run another script which possibly requires additional configuration based on client combinations.\r\n\r\nOn the other hand, if each clients implement an inherent solution it requires more coordination effort, all three clients need to detect a new genesis at around the same time, clean their data dirs and restart. Technically, this should work fine, I think the validator client for example would just restart if there is a config mismatch with then beacon node and at some point, both would be on the same network with new genesis. The implementation effort for this is considerably higher as each client has to implement a native solution but from a user point of view, if we get this right, it would be seamless.\r\n\r\n> I'm working on a second PR relating to more dynamic genesis options (your second bullet) which will probably mainly be useful for developer users.\r\n\r\nActually this might already be the case, if the process starts and the database is empty it will pull the genesis state from github and/or checkpoint sync. Another option is to provide a custom genesis file via CLI `--genesisStateFile` flag.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/1771190653/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/1773437625",
    "html_url": "https://github.com/ChainSafe/lodestar/issues/6050#issuecomment-1773437625",
    "issue_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/6050",
    "id": 1773437625,
    "node_id": "IC_kwDOCD5_Gc5ptIK5",
    "user": {
      "login": "philknows",
      "id": 58080811,
      "node_id": "MDQ6VXNlcjU4MDgwODEx",
      "avatar_url": "https://avatars.githubusercontent.com/u/58080811?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/philknows",
      "html_url": "https://github.com/philknows",
      "followers_url": "https://api.github.com/users/philknows/followers",
      "following_url": "https://api.github.com/users/philknows/following{/other_user}",
      "gists_url": "https://api.github.com/users/philknows/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/philknows/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/philknows/subscriptions",
      "organizations_url": "https://api.github.com/users/philknows/orgs",
      "repos_url": "https://api.github.com/users/philknows/repos",
      "events_url": "https://api.github.com/users/philknows/events{/privacy}",
      "received_events_url": "https://api.github.com/users/philknows/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-10-20T21:51:09Z",
    "updated_at": "2023-10-20T21:51:09Z",
    "author_association": "MEMBER",
    "body": "> For me mostly the question is what the UX of this should look like, if you have a single script which manages all three clients (el + bn + vc) then coordination is easy between clients but a user would have to run another script which possibly requires additional configuration based on client combinations.\r\n\r\nThis might a good idea for our https://github.com/ChainSafe/lodestar-quickstart scripts @g11tech since we can hard restart both Lodestar and the selected EL when a new genesis is detected. ",
    "reactions": {
      "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/1773437625/reactions",
      "total_count": 3,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 2
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/1774047077",
    "html_url": "https://github.com/ChainSafe/lodestar/issues/6050#issuecomment-1774047077",
    "issue_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/6050",
    "id": 1774047077,
    "node_id": "IC_kwDOCD5_Gc5pvc9l",
    "user": {
      "login": "atkinsonholly",
      "id": 32036223,
      "node_id": "MDQ6VXNlcjMyMDM2MjIz",
      "avatar_url": "https://avatars.githubusercontent.com/u/32036223?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/atkinsonholly",
      "html_url": "https://github.com/atkinsonholly",
      "followers_url": "https://api.github.com/users/atkinsonholly/followers",
      "following_url": "https://api.github.com/users/atkinsonholly/following{/other_user}",
      "gists_url": "https://api.github.com/users/atkinsonholly/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/atkinsonholly/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/atkinsonholly/subscriptions",
      "organizations_url": "https://api.github.com/users/atkinsonholly/orgs",
      "repos_url": "https://api.github.com/users/atkinsonholly/repos",
      "events_url": "https://api.github.com/users/atkinsonholly/events{/privacy}",
      "received_events_url": "https://api.github.com/users/atkinsonholly/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-10-22T09:42:58Z",
    "updated_at": "2023-10-22T09:42:58Z",
    "author_association": "NONE",
    "body": "Thanks for all the comments, I really appreciate the input!\r\n\r\nI've seen the feedback on the PR and I will do a thorough review to make sure I'm being consistent throughout, as well as capturing recent changes to the ephemery specs and adding sufficiently detailed comments.\r\n\r\n> Actually this might already be the case, if the process starts and the database is empty it will pull the genesis state from github and/or checkpoint sync. Another option is to provide a custom genesis file via CLI --genesisStateFile flag.\r\n\r\nSounds good. With the addition of a `--genesisStateFile` flag I believe this would address these three checkboxes from my initial description above:\r\n- Add ephemery flag\r\n- Use backup download URL (ephemery.dev)\r\n- Use flag to override with custom path to a genesis.ssz file provided by user\r\n\r\n> It's a good first PoC but I feel like an ideal solution for this needs to be inherent to Lodestar and not just written in Typescript that in the end just does system calls\r\n\r\nAbsolutely, that's understood.  \r\n\r\nThe single script approach (lodestar-quickstart) could be a useful first step while investigating how clients can integrate their native approach. Would love to ultimately have the benefit of a seamless UX from an inherent solution, but understand this will take more implementation effort as a longer-term goal. It may take a few iterations to get this right. ",
    "reactions": {
      "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/1774047077/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/1774089397",
    "html_url": "https://github.com/ChainSafe/lodestar/issues/6050#issuecomment-1774089397",
    "issue_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/6050",
    "id": 1774089397,
    "node_id": "IC_kwDOCD5_Gc5pvnS1",
    "user": {
      "login": "nflaig",
      "id": 38436224,
      "node_id": "MDQ6VXNlcjM4NDM2MjI0",
      "avatar_url": "https://avatars.githubusercontent.com/u/38436224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nflaig",
      "html_url": "https://github.com/nflaig",
      "followers_url": "https://api.github.com/users/nflaig/followers",
      "following_url": "https://api.github.com/users/nflaig/following{/other_user}",
      "gists_url": "https://api.github.com/users/nflaig/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nflaig/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nflaig/subscriptions",
      "organizations_url": "https://api.github.com/users/nflaig/orgs",
      "repos_url": "https://api.github.com/users/nflaig/repos",
      "events_url": "https://api.github.com/users/nflaig/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nflaig/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-10-22T13:00:36Z",
    "updated_at": "2023-10-22T13:00:36Z",
    "author_association": "MEMBER",
    "body": "> I believe this would address these three checkboxes from my initial description above\r\n\r\nYes, I think the initial solution each client has to implement is to make joining the Ephemery as easy as for other networks, just by adding the `--network` flag\r\n\r\n> The single script approach (lodestar-quickstart) could be a useful first step while investigating how clients can integrate their native approach. Would love to ultimately have the benefit of a seamless UX from an inherent solution, but understand this will take more implementation effort as a longer-term goal. It may take a few iterations to get this right.\r\n\r\nThe more I am thinking about this the more I see this solution implemented in tooling that manages the EL / CL, like dappnode, rocketpool, eth-docker etc., as the client acting as a process manager to restart itself might not be a practical for all client implementations.",
    "reactions": {
      "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/1774089397/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/1775383179",
    "html_url": "https://github.com/ChainSafe/lodestar/issues/6050#issuecomment-1775383179",
    "issue_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/6050",
    "id": 1775383179,
    "node_id": "IC_kwDOCD5_Gc5p0jKL",
    "user": {
      "login": "AdedamolaXL",
      "id": 66562380,
      "node_id": "MDQ6VXNlcjY2NTYyMzgw",
      "avatar_url": "https://avatars.githubusercontent.com/u/66562380?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AdedamolaXL",
      "html_url": "https://github.com/AdedamolaXL",
      "followers_url": "https://api.github.com/users/AdedamolaXL/followers",
      "following_url": "https://api.github.com/users/AdedamolaXL/following{/other_user}",
      "gists_url": "https://api.github.com/users/AdedamolaXL/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AdedamolaXL/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AdedamolaXL/subscriptions",
      "organizations_url": "https://api.github.com/users/AdedamolaXL/orgs",
      "repos_url": "https://api.github.com/users/AdedamolaXL/repos",
      "events_url": "https://api.github.com/users/AdedamolaXL/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AdedamolaXL/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-10-23T14:51:28Z",
    "updated_at": "2023-10-23T15:45:41Z",
    "author_association": "NONE",
    "body": "Heyy guys, im working on the reset implementation side of this problem. So far, I have done some preliminary work and will like to know if am going about it correctly?\r\n\r\nHere is how i have been approaching a native reset within Lodestar: \r\n\r\n- The most important part of the reset is stopping transactions without stopping node operations and then restarting transactions once a new genesis has been downloaded.\r\n- This is done manually with `sudo systemctl`, which is a bad fit as pointed out in this conversation.\r\n- The analogous function responsible for starting and stopping the beacon node is the `beaconHandler`.  \r\n- I think the reset can be carried out using a function similar to `onGracefulShutdown()` from the `beaconHandler`. Let's call it `gracefulSuspension()`.\r\n- While, `onGracefulShutdown()` receives a 'Ctrl + C' signal prior to shutting down node operations. Our function will receive a signal that a new genesis is available and then stop transactions on the beacon node with `db.close()`\r\n- This is what i think`gracefulSuspension()` will look like within the `beaconHandler()` and i will like to know if am approaching it correctly:\r\n```\r\n   gracefulSuspension(async () => {\r\n      abortController.abort();\r\n\r\n      if (pruneInvalidSSZObjectsInterval !== null) {\r\n        clearInterval(pruneInvalidSSZObjectsInterval);\r\n      }\r\n    }, logger.info.bind(logger));\r\n\r\n    abortController.signal.addEventListener(\r\n      \"abort\",\r\n      async () => {\r\n        try {\r\n         await db.close();\r\n          // Must explicitly exit process due to potential active handles\r\n          process.exit(1);\r\n        } catch (e) {\r\n          logger.error(\"Error closing beacon db\", {}, e as Error);\r\n        }\r\n      },\r\n      {once: true}\r\n    );\r\n```\r\n**some notes on the function above**: i don't think it's necessary to persist the network identity and enrs so i've removed it. im not sure if clearing the ssz objects is necessary or not (so am keeping it). i have rightfully removed the node.close() because we still need the node active while performing a genesis reset.\r\n\r\nIm still thinking about how the `gracefulSuspension()` will look like within the ephemery package:\r\n- It can simply wait for [checkTestnet](https://github.com/atkinsonholly/lodestar/pull/1/files) before executing.\r\n- Or `checkTestnet` can be readapted to be a process manager that sends a SIGTERM signal to `gracefulSuspension()`.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/1775383179/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/1775474587",
    "html_url": "https://github.com/ChainSafe/lodestar/issues/6050#issuecomment-1775474587",
    "issue_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/6050",
    "id": 1775474587,
    "node_id": "IC_kwDOCD5_Gc5p05eb",
    "user": {
      "login": "AdedamolaXL",
      "id": 66562380,
      "node_id": "MDQ6VXNlcjY2NTYyMzgw",
      "avatar_url": "https://avatars.githubusercontent.com/u/66562380?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AdedamolaXL",
      "html_url": "https://github.com/AdedamolaXL",
      "followers_url": "https://api.github.com/users/AdedamolaXL/followers",
      "following_url": "https://api.github.com/users/AdedamolaXL/following{/other_user}",
      "gists_url": "https://api.github.com/users/AdedamolaXL/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AdedamolaXL/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AdedamolaXL/subscriptions",
      "organizations_url": "https://api.github.com/users/AdedamolaXL/orgs",
      "repos_url": "https://api.github.com/users/AdedamolaXL/repos",
      "events_url": "https://api.github.com/users/AdedamolaXL/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AdedamolaXL/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-10-23T15:34:50Z",
    "updated_at": "2023-10-23T15:46:42Z",
    "author_association": "NONE",
    "body": "> The more I am thinking about this the more I see this solution implemented in tooling that manages the EL / CL, like dappnode, rocketpool, eth-docker etc., as the client acting as a process manager to restart itself might not be a practical for all client implementations.\r\n\r\nThis is intriguing and i haven't quite considered the prospect of external tooling for handling the reset. I will like to look into this, even as i consider the constraints of implementing a native reset within Lodestar.\r\n\r\n> This might a good idea for our https://github.com/ChainSafe/lodestar-quickstart scripts @g11tech since we can hard restart both Lodestar and the selected EL when a new genesis is detected.\r\n\r\nWill look into this as well.",
    "reactions": {
      "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/1775474587/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/1775639672",
    "html_url": "https://github.com/ChainSafe/lodestar/issues/6050#issuecomment-1775639672",
    "issue_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/6050",
    "id": 1775639672,
    "node_id": "IC_kwDOCD5_Gc5p1hx4",
    "user": {
      "login": "nflaig",
      "id": 38436224,
      "node_id": "MDQ6VXNlcjM4NDM2MjI0",
      "avatar_url": "https://avatars.githubusercontent.com/u/38436224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nflaig",
      "html_url": "https://github.com/nflaig",
      "followers_url": "https://api.github.com/users/nflaig/followers",
      "following_url": "https://api.github.com/users/nflaig/following{/other_user}",
      "gists_url": "https://api.github.com/users/nflaig/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nflaig/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nflaig/subscriptions",
      "organizations_url": "https://api.github.com/users/nflaig/orgs",
      "repos_url": "https://api.github.com/users/nflaig/repos",
      "events_url": "https://api.github.com/users/nflaig/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nflaig/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-10-23T17:07:34Z",
    "updated_at": "2023-10-23T17:07:34Z",
    "author_association": "MEMBER",
    "body": "Thanks for exploring this topic @AdedamolaXL\r\n\r\nRegarding your approach described in https://github.com/ChainSafe/lodestar/issues/6050#issuecomment-1775383179. I really don't think there needs to be any modification in the stop procedure that Lodestar implements.\r\n\r\nWhat you really want if there is a genesis reset is to just completely wipe out the current beacon node, that includes\r\n- shutting down the process to drop internal state, peers, chain state etc.\r\n- clean everything inside `dataDir`, which includes the chain-db, peerstore, and anything else the node might persist\r\n\r\nAfter that is done, the node just has to be restarted, and after https://github.com/ChainSafe/lodestar/pull/6054 is implemented the node will automatically load the new genesis data, connect to new peers and be on a completely new chain.\r\n\r\nThe main requirement is that you need to have another process that manages the Lodestar process and does the restart and cleanup once it detects the new genesis.\r\n\r\n\r\n> The most important part of the reset is stopping transactions without stopping node operations and then restarting transactions once a new genesis has been downloaded.\r\n\r\nMaybe you can elaborate a bit more on this \"stopping transactions without stopping node operations\"\r\n- what do you mean by transactions\r\n- and what's the difference to node operations\r\n\r\n I haven't looked into detail how a genesis reset on Ephemery works so my answers here might be based on wrong assumptions but since the genesis state changes, the only option I see is to do a hard reset.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/1775639672/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/1776058730",
    "html_url": "https://github.com/ChainSafe/lodestar/issues/6050#issuecomment-1776058730",
    "issue_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/6050",
    "id": 1776058730,
    "node_id": "IC_kwDOCD5_Gc5p3IFq",
    "user": {
      "login": "AdedamolaXL",
      "id": 66562380,
      "node_id": "MDQ6VXNlcjY2NTYyMzgw",
      "avatar_url": "https://avatars.githubusercontent.com/u/66562380?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AdedamolaXL",
      "html_url": "https://github.com/AdedamolaXL",
      "followers_url": "https://api.github.com/users/AdedamolaXL/followers",
      "following_url": "https://api.github.com/users/AdedamolaXL/following{/other_user}",
      "gists_url": "https://api.github.com/users/AdedamolaXL/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AdedamolaXL/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AdedamolaXL/subscriptions",
      "organizations_url": "https://api.github.com/users/AdedamolaXL/orgs",
      "repos_url": "https://api.github.com/users/AdedamolaXL/repos",
      "events_url": "https://api.github.com/users/AdedamolaXL/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AdedamolaXL/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-10-23T21:34:50Z",
    "updated_at": "2023-10-23T21:34:50Z",
    "author_association": "NONE",
    "body": "I am a bit clearer on what the requirements for a reset are now. From what you've said, i've deduced that, this is what is needed:\r\n\r\n- [ ] periodically check if there is a new genesis ([check_testnet](https://github.com/ephemery-testnet/ephemery-scripts/blob/9f93fc04ea15d19560445769014fd80043042393/retention.sh#L72-L100))\r\n- [ ] shut down the process (if a new genesis is detected) to drop internal state, peers, chain state etc.\r\n- [ ]  clean everything inside dataDir, which includes the chain-db, peerstore, and anything else the node might persist\r\n- [ ] restart Lodestar with new genesis ([node-js-process-restart](https://stackoverflow.com/questions/40835187/node-js-process-restart))\r\n\r\nI have a question about this: \r\n> shutting down the process to drop internal state, peers, chain state etc.\r\n\r\nI understand that this is the same as shutting down the beacon node ?\r\nIf yes, I'm not too clear on how to go about shutting down the beacon node without modifying the `beaconHandler` except if the user has to send a 'Ctrl + C' signal for a graceful shutdown in this case ?\r\n\r\n> The main requirement is that you need to have another process that manages the Lodestar process and does the restart and cleanup once it detects the new genesis.\r\n\r\nIf I get you correctly the process manager will then incorporate the aforementioned four tasks ?\r\n\r\n> Maybe you can elaborate a bit more on this \"stopping transactions without stopping node operations\"\r\n\r\nForgive me for this, im still a newbie and i tend to mix things up :)\r\nWhat i meant here was how to keep the node alive while somehow halting validator transactions like staking which seems out of place with this conversation now anyway.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/1776058730/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/1777688511",
    "html_url": "https://github.com/ChainSafe/lodestar/issues/6050#issuecomment-1777688511",
    "issue_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/6050",
    "id": 1777688511,
    "node_id": "IC_kwDOCD5_Gc5p9V-_",
    "user": {
      "login": "nflaig",
      "id": 38436224,
      "node_id": "MDQ6VXNlcjM4NDM2MjI0",
      "avatar_url": "https://avatars.githubusercontent.com/u/38436224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nflaig",
      "html_url": "https://github.com/nflaig",
      "followers_url": "https://api.github.com/users/nflaig/followers",
      "following_url": "https://api.github.com/users/nflaig/following{/other_user}",
      "gists_url": "https://api.github.com/users/nflaig/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nflaig/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nflaig/subscriptions",
      "organizations_url": "https://api.github.com/users/nflaig/orgs",
      "repos_url": "https://api.github.com/users/nflaig/repos",
      "events_url": "https://api.github.com/users/nflaig/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nflaig/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-10-24T17:21:56Z",
    "updated_at": "2023-10-24T17:21:56Z",
    "author_association": "MEMBER",
    "body": "> From what you've said, i've deduced that, this is what is needed:\r\n\r\nYes, those seem to be the major tasks that need to be done\r\n\r\n> I understand that this is the same as shutting down the beacon node ?\r\n\r\nMore or less it's the same\r\n\r\n> If yes, I'm not too clear on how to go about shutting down the beacon node without modifying the beaconHandler except if the user has to send a 'Ctrl + C' signal for a graceful shutdown in this case ?\r\n\r\nThis really depends how it is implemented in the end\r\n1. we could just start the beacon node in a child process as described [here](https://stackoverflow.com/questions/40835187/node-js-process-restart)\r\n2. or we could try do the restart, clean, etc. without restarting the process itself, more details below\r\n\r\nMight have to modify the `beaconHandler` in both cases or at least for option 2. It could be possible to handle it even earlier if option 1 is implemented, maybe similar to how we apply the preset\r\nhttps://github.com/ChainSafe/lodestar/blob/499fd09b0d1cad3ef395c6edaddd1f5e7df6cf55/packages/cli/src/index.ts#L4\r\n\r\n> If I get you correctly the process manager will then incorporate the aforementioned four tasks ?\r\n\r\nIf option 2 is implemented that has to be done in that handler that manages the child process, for option 1 would likely be in `beaconHandler`\r\n\r\n\r\n> What i meant here was how to keep the node alive while somehow halting validator transactions like staking which seems out of place with this conversation now anyway.\r\n\r\nOne thing to keep in mind is that you not only have to do this for the beacon node but also the validator client\r\nhttps://github.com/ChainSafe/lodestar/blob/499fd09b0d1cad3ef395c6edaddd1f5e7df6cf55/packages/cli/src/cmds/validator/handler.ts#L36\r\n\r\n\r\n> Forgive me for this, im still a newbie and i tend to mix things up :)\r\n\r\nNo worries, thanks for exploring this topic and happy to provide clarifications where needed\r\n\r\n---\r\n\r\n### Possible solution without process restart\r\n\r\nI was reading up on what is described in the [EIP 6916 reset section](https://github.com/taxmeifyoucan/EIPs/blob/d298cdd8eaf47a21e7770e5c6efef870587c924d/EIPS/eip-6916.md#reset) today. \r\n\r\nFew notes from the spec and how this could be achieved in Lodestar without restarting the whole process.\r\n\r\n> Shutdown client services running the network, e.g. p2p communication, beacon service, execution environment\r\n\r\nThis can be achieved by calling `node.close()`\r\nhttps://github.com/ChainSafe/lodestar/blob/499fd09b0d1cad3ef395c6edaddd1f5e7df6cf55/packages/cli/src/cmds/beacon/handler.ts#L132\r\n\r\n> Client calls a function which discards the current genesis, all chain or beacon data\r\nClients include feature for purging the db and it might be useful here\r\n\r\nHave to close db (which is already done when closing node) and remove all data, most important one is the database (chain-db)\r\nhttps://github.com/ChainSafe/lodestar/blob/499fd09b0d1cad3ef395c6edaddd1f5e7df6cf55/packages/cli/src/cmds/beacon/paths.ts#L32\r\n\r\n>Client triggers the Genesis function (as defined above):\r\nBehaves like a regular client startup when genesis is not present\r\nNew genesis is written into db and initialized\r\n\r\nThis could be achieved by just calling `beaconHandler` with same args and since the data has been cleaned up it will automatically load the new genesis (thanks to https://github.com/ChainSafe/lodestar/pull/6054)\r\nhttps://github.com/ChainSafe/lodestar/blob/499fd09b0d1cad3ef395c6edaddd1f5e7df6cf55/packages/cli/src/cmds/beacon/handler.ts#L35\r\n\r\n> Main network services are started again pointing to the updated genesis\r\n\r\nThat what happens if we call the beacon handler again which initializes a new beacon node\r\nhttps://github.com/ChainSafe/lodestar/blob/499fd09b0d1cad3ef395c6edaddd1f5e7df6cf55/packages/cli/src/cmds/beacon/handler.ts#L76\r\n\r\n\r\n**Potential issues**\r\n\r\nThe described approach is not really tested. Right now, we only close the beacon node if the process shuts down, restarting the beacon node means restarting the node process. There might be issues due to in-memory caches which are not cleared, or any other pre-calculated values.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/1777688511/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/1779068350",
    "html_url": "https://github.com/ChainSafe/lodestar/issues/6050#issuecomment-1779068350",
    "issue_url": "https://api.github.com/repos/ChainSafe/lodestar/issues/6050",
    "id": 1779068350,
    "node_id": "IC_kwDOCD5_Gc5qCm2-",
    "user": {
      "login": "taxmeifyoucan",
      "id": 61149543,
      "node_id": "MDQ6VXNlcjYxMTQ5NTQz",
      "avatar_url": "https://avatars.githubusercontent.com/u/61149543?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/taxmeifyoucan",
      "html_url": "https://github.com/taxmeifyoucan",
      "followers_url": "https://api.github.com/users/taxmeifyoucan/followers",
      "following_url": "https://api.github.com/users/taxmeifyoucan/following{/other_user}",
      "gists_url": "https://api.github.com/users/taxmeifyoucan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/taxmeifyoucan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/taxmeifyoucan/subscriptions",
      "organizations_url": "https://api.github.com/users/taxmeifyoucan/orgs",
      "repos_url": "https://api.github.com/users/taxmeifyoucan/repos",
      "events_url": "https://api.github.com/users/taxmeifyoucan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/taxmeifyoucan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-10-25T11:34:00Z",
    "updated_at": "2023-10-25T11:34:00Z",
    "author_association": "NONE",
    "body": "@nflaig \r\n> The more I am thinking about this the more I see this solution implemented in tooling that manages the EL / CL, like dappnode, rocketpool, eth-docker etc., as the client acting as a process manager to restart itself might not be a practical for all client implementations.\r\n\r\nThis would be a correct approach! The EIP defines 2 levels of support in clients - connecting to the network (obtaining genesis upon start) and retaining it (automatic reset). The former is needed for users to interact with the current iteration and the latter is useful mostly for people running infrastructure long term. The assumption is that such providers can solve it using external devops tool, especially if client architecture doesn't allow for a smooth internal restart. The retention script implements this and it becomes even easier with genesis automatically obtained by clients. \r\n\r\nPractically speaking, this means that the genesis and connecting to the network should be the main focus for initial Ephemery support. That's the main goal and PR to be merged. \r\nReset is rather a 'nice to have' feature and mostly depends on its feasibility which @AdedamolaXL researches now.  ",
    "reactions": {
      "url": "https://api.github.com/repos/ChainSafe/lodestar/issues/comments/1779068350/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
