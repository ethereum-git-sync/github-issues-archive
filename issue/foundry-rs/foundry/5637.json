{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/5637",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5637/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5637/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5637/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/5637",
  "id": 1851786489,
  "node_id": "I_kwDOGBlvNc5uYAT5",
  "number": 5637,
  "title": "Add cheat code to test if file exists",
  "user": {
    "login": "guidanoli",
    "id": 9125226,
    "node_id": "MDQ6VXNlcjkxMjUyMjY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/9125226?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/guidanoli",
    "html_url": "https://github.com/guidanoli",
    "followers_url": "https://api.github.com/users/guidanoli/followers",
    "following_url": "https://api.github.com/users/guidanoli/following{/other_user}",
    "gists_url": "https://api.github.com/users/guidanoli/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/guidanoli/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/guidanoli/subscriptions",
    "organizations_url": "https://api.github.com/users/guidanoli/orgs",
    "repos_url": "https://api.github.com/users/guidanoli/repos",
    "events_url": "https://api.github.com/users/guidanoli/events{/privacy}",
    "received_events_url": "https://api.github.com/users/guidanoli/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3334394235,
      "node_id": "MDU6TGFiZWwzMzM0Mzk0MjM1",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/good%20first%20issue",
      "name": "good first issue",
      "color": "0052CC",
      "default": true,
      "description": "Good for newcomers"
    },
    {
      "id": 3593644820,
      "node_id": "LA_kwDOGBlvNc7WMqsU",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-feature",
      "name": "T-feature",
      "color": "BFD4F2",
      "default": false,
      "description": "Type: feature"
    },
    {
      "id": 3703752960,
      "node_id": "LA_kwDOGBlvNc7cwskA",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/A-cheatcodes",
      "name": "A-cheatcodes",
      "color": "FBCA04",
      "default": false,
      "description": "Area: cheatcodes"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 9,
  "created_at": "2023-08-15T16:46:18Z",
  "updated_at": "2023-08-24T21:14:20Z",
  "closed_at": "2023-08-24T21:14:20Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "### Component\r\n\r\nForge\r\n\r\n### Describe the feature you would like\r\n\r\nThere would be a new function with the following signature:\r\n\r\n```solidity\r\n// Check whether a file in a given path exists\r\nfunction isFile(string calldata) external returns (bool);\r\n```\r\n\r\n### Additional context\r\n\r\nThis function would be useful to give a better error message to the user when some essential file is missing.",
  "closed_by": {
    "login": "Evalir",
    "id": 26014927,
    "node_id": "MDQ6VXNlcjI2MDE0OTI3",
    "avatar_url": "https://avatars.githubusercontent.com/u/26014927?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Evalir",
    "html_url": "https://github.com/Evalir",
    "followers_url": "https://api.github.com/users/Evalir/followers",
    "following_url": "https://api.github.com/users/Evalir/following{/other_user}",
    "gists_url": "https://api.github.com/users/Evalir/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Evalir/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Evalir/subscriptions",
    "organizations_url": "https://api.github.com/users/Evalir/orgs",
    "repos_url": "https://api.github.com/users/Evalir/repos",
    "events_url": "https://api.github.com/users/Evalir/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Evalir/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/5637/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5637/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1679374138",
    "html_url": "https://github.com/foundry-rs/foundry/issues/5637#issuecomment-1679374138",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5637",
    "id": 1679374138,
    "node_id": "IC_kwDOGBlvNc5kGTc6",
    "user": {
      "login": "mattsse",
      "id": 19890894,
      "node_id": "MDQ6VXNlcjE5ODkwODk0",
      "avatar_url": "https://avatars.githubusercontent.com/u/19890894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mattsse",
      "html_url": "https://github.com/mattsse",
      "followers_url": "https://api.github.com/users/mattsse/followers",
      "following_url": "https://api.github.com/users/mattsse/following{/other_user}",
      "gists_url": "https://api.github.com/users/mattsse/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mattsse/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mattsse/subscriptions",
      "organizations_url": "https://api.github.com/users/mattsse/orgs",
      "repos_url": "https://api.github.com/users/mattsse/repos",
      "events_url": "https://api.github.com/users/mattsse/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mattsse/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-08-15T18:06:19Z",
    "updated_at": "2023-08-15T18:06:19Z",
    "author_association": "MEMBER",
    "body": "supportive, but this should be three functions\r\n\r\nexists, isFile, isDir",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1679374138/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1679407787",
    "html_url": "https://github.com/foundry-rs/foundry/issues/5637#issuecomment-1679407787",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5637",
    "id": 1679407787,
    "node_id": "IC_kwDOGBlvNc5kGbqr",
    "user": {
      "login": "guidanoli",
      "id": 9125226,
      "node_id": "MDQ6VXNlcjkxMjUyMjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9125226?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/guidanoli",
      "html_url": "https://github.com/guidanoli",
      "followers_url": "https://api.github.com/users/guidanoli/followers",
      "following_url": "https://api.github.com/users/guidanoli/following{/other_user}",
      "gists_url": "https://api.github.com/users/guidanoli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/guidanoli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/guidanoli/subscriptions",
      "organizations_url": "https://api.github.com/users/guidanoli/orgs",
      "repos_url": "https://api.github.com/users/guidanoli/repos",
      "events_url": "https://api.github.com/users/guidanoli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/guidanoli/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-08-15T18:30:02Z",
    "updated_at": "2023-08-15T18:30:02Z",
    "author_association": "NONE",
    "body": "> supportive, but this should be three functions\r\n\r\nFor my use case, only `isFile` would suffice. But yes, these 3 functions would serve a more complete interface. :-)",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1679407787/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1679736900",
    "html_url": "https://github.com/foundry-rs/foundry/issues/5637#issuecomment-1679736900",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5637",
    "id": 1679736900,
    "node_id": "IC_kwDOGBlvNc5kHsBE",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-08-15T23:00:53Z",
    "updated_at": "2023-08-15T23:00:53Z",
    "author_association": "COLLABORATOR",
    "body": "We already have this cheat:\r\n```solidity\r\nstruct FsMetadata {\r\n    bool isDir;\r\n    bool isSymlink;\r\n    uint256 length;\r\n    bool readOnly;\r\n    uint256 modified;\r\n    uint256 accessed;\r\n    uint256 created;\r\n}\r\n\r\n// Given a path, query the file system to get information about a file, directory, etc.\r\nfunction fsMetadata(string calldata path) external view returns (FsMetadata memory metadata);\r\n```\r\nI'm not sure how it behaves if the file doesn't exist, but perhaps just adding `bool exists` to that return struct is the way to go?\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1679736900/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1680604499",
    "html_url": "https://github.com/foundry-rs/foundry/issues/5637#issuecomment-1680604499",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5637",
    "id": 1680604499,
    "node_id": "IC_kwDOGBlvNc5kK_1T",
    "user": {
      "login": "guidanoli",
      "id": 9125226,
      "node_id": "MDQ6VXNlcjkxMjUyMjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9125226?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/guidanoli",
      "html_url": "https://github.com/guidanoli",
      "followers_url": "https://api.github.com/users/guidanoli/followers",
      "following_url": "https://api.github.com/users/guidanoli/following{/other_user}",
      "gists_url": "https://api.github.com/users/guidanoli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/guidanoli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/guidanoli/subscriptions",
      "organizations_url": "https://api.github.com/users/guidanoli/orgs",
      "repos_url": "https://api.github.com/users/guidanoli/repos",
      "events_url": "https://api.github.com/users/guidanoli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/guidanoli/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-08-16T13:26:24Z",
    "updated_at": "2023-08-16T17:21:19Z",
    "author_association": "NONE",
    "body": "@mds1 It fails when there is no file in the given path.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1680604499/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1691791415",
    "html_url": "https://github.com/foundry-rs/foundry/issues/5637#issuecomment-1691791415",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5637",
    "id": 1691791415,
    "node_id": "IC_kwDOGBlvNc5k1rA3",
    "user": {
      "login": "ruvaag",
      "id": 81832128,
      "node_id": "MDQ6VXNlcjgxODMyMTI4",
      "avatar_url": "https://avatars.githubusercontent.com/u/81832128?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ruvaag",
      "html_url": "https://github.com/ruvaag",
      "followers_url": "https://api.github.com/users/ruvaag/followers",
      "following_url": "https://api.github.com/users/ruvaag/following{/other_user}",
      "gists_url": "https://api.github.com/users/ruvaag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ruvaag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ruvaag/subscriptions",
      "organizations_url": "https://api.github.com/users/ruvaag/orgs",
      "repos_url": "https://api.github.com/users/ruvaag/repos",
      "events_url": "https://api.github.com/users/ruvaag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ruvaag/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-08-24T14:27:39Z",
    "updated_at": "2023-08-24T14:27:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "I'd be happy to take this on. \r\n\r\nIs there consensus on the approach? Looks like there's two ways --\r\n\r\n1. From @mattsse - add three new cheats `isFile`, `isDir` and `exists` that return bools\r\n\r\n```\r\nfunction exists(string calldata path) external returns (bool);\r\nfunction isFile(string calldata path) external returns (bool);\r\nfunction isDir(string calldata path) external returns (bool);\r\n```\r\n\r\n2. From @mds1 - modify return struct of existing cheat `fsMetaData` to return `exists`\r\n\r\n```\r\nstruct FsMetadata {\r\n    bool isDir;\r\n    bool isSymlink;\r\n    uint256 length;\r\n    bool readOnly;\r\n    uint256 modified;\r\n    uint256 accessed;\r\n    uint256 created;\r\n    bool exists;\r\n}\r\n```\r\n\r\nPersonally inclined towards the former because it allows more generalised script ops along the lines of _If X [exists/is a file/is a directory] do Y_ that the latter could hinder, but more than happy to defer to existing contributors.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1691791415/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1691949039",
    "html_url": "https://github.com/foundry-rs/foundry/issues/5637#issuecomment-1691949039",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5637",
    "id": 1691949039,
    "node_id": "IC_kwDOGBlvNc5k2Rfv",
    "user": {
      "login": "mattsse",
      "id": 19890894,
      "node_id": "MDQ6VXNlcjE5ODkwODk0",
      "avatar_url": "https://avatars.githubusercontent.com/u/19890894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mattsse",
      "html_url": "https://github.com/mattsse",
      "followers_url": "https://api.github.com/users/mattsse/followers",
      "following_url": "https://api.github.com/users/mattsse/following{/other_user}",
      "gists_url": "https://api.github.com/users/mattsse/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mattsse/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mattsse/subscriptions",
      "organizations_url": "https://api.github.com/users/mattsse/orgs",
      "repos_url": "https://api.github.com/users/mattsse/repos",
      "events_url": "https://api.github.com/users/mattsse/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mattsse/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-08-24T15:48:03Z",
    "updated_at": "2023-08-24T15:48:03Z",
    "author_association": "MEMBER",
    "body": "nice, \r\nwe can add new impls for that and leverage `Path::{is_file,is_dir,exists}`",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1691949039/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1692049229",
    "html_url": "https://github.com/foundry-rs/foundry/issues/5637#issuecomment-1692049229",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5637",
    "id": 1692049229,
    "node_id": "IC_kwDOGBlvNc5k2p9N",
    "user": {
      "login": "guidanoli",
      "id": 9125226,
      "node_id": "MDQ6VXNlcjkxMjUyMjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9125226?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/guidanoli",
      "html_url": "https://github.com/guidanoli",
      "followers_url": "https://api.github.com/users/guidanoli/followers",
      "following_url": "https://api.github.com/users/guidanoli/following{/other_user}",
      "gists_url": "https://api.github.com/users/guidanoli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/guidanoli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/guidanoli/subscriptions",
      "organizations_url": "https://api.github.com/users/guidanoli/orgs",
      "repos_url": "https://api.github.com/users/guidanoli/repos",
      "events_url": "https://api.github.com/users/guidanoli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/guidanoli/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-08-24T16:42:20Z",
    "updated_at": "2023-08-24T16:42:20Z",
    "author_association": "NONE",
    "body": "But then what values will the other fields in `FsMetadata` have if the file doesn't exist?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1692049229/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1692104004",
    "html_url": "https://github.com/foundry-rs/foundry/issues/5637#issuecomment-1692104004",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5637",
    "id": 1692104004,
    "node_id": "IC_kwDOGBlvNc5k23VE",
    "user": {
      "login": "ruvaag",
      "id": 81832128,
      "node_id": "MDQ6VXNlcjgxODMyMTI4",
      "avatar_url": "https://avatars.githubusercontent.com/u/81832128?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ruvaag",
      "html_url": "https://github.com/ruvaag",
      "followers_url": "https://api.github.com/users/ruvaag/followers",
      "following_url": "https://api.github.com/users/ruvaag/following{/other_user}",
      "gists_url": "https://api.github.com/users/ruvaag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ruvaag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ruvaag/subscriptions",
      "organizations_url": "https://api.github.com/users/ruvaag/orgs",
      "repos_url": "https://api.github.com/users/ruvaag/repos",
      "events_url": "https://api.github.com/users/ruvaag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ruvaag/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-08-24T17:05:43Z",
    "updated_at": "2023-08-24T17:05:43Z",
    "author_association": "CONTRIBUTOR",
    "body": "Since they're standalone implementations, `isFile` is decoupled from the `FsMetadata` cheatcode and struct.\r\n\r\nIntended usage for your case could look like -\r\n\r\n```\r\nstring memory path = \"path/to/file\";\r\nif (vm.isFile(path)) {\r\n    Vm.FsMetadata memory metadata = vm.fsMetadata(path);\r\n    // do stuff with metadata\r\n}",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1692104004/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1692143786",
    "html_url": "https://github.com/foundry-rs/foundry/issues/5637#issuecomment-1692143786",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5637",
    "id": 1692143786,
    "node_id": "IC_kwDOGBlvNc5k3BCq",
    "user": {
      "login": "guidanoli",
      "id": 9125226,
      "node_id": "MDQ6VXNlcjkxMjUyMjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9125226?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/guidanoli",
      "html_url": "https://github.com/guidanoli",
      "followers_url": "https://api.github.com/users/guidanoli/followers",
      "following_url": "https://api.github.com/users/guidanoli/following{/other_user}",
      "gists_url": "https://api.github.com/users/guidanoli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/guidanoli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/guidanoli/subscriptions",
      "organizations_url": "https://api.github.com/users/guidanoli/orgs",
      "repos_url": "https://api.github.com/users/guidanoli/repos",
      "events_url": "https://api.github.com/users/guidanoli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/guidanoli/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-08-24T17:36:32Z",
    "updated_at": "2023-08-24T17:42:04Z",
    "author_association": "NONE",
    "body": "I think it doesn't make sense to ask for metadata of a file that doesn't even exist.\r\nAll the fields in `FsMetadata` (except `exists`) would be nonsense.\r\nI would change @ruvaag's solution and call the function `exists` instead of `isFile`, to take directories into consideration.\r\n\r\n```solidity\r\nerror FileNotFound(string path);\r\n\r\n// [...]\r\n\r\nif (vm.exists(path)) {\r\n  // read file in path, get metadata, etc\r\n} else {\r\n  revert FileNotFound(path);\r\n}\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1692143786/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
