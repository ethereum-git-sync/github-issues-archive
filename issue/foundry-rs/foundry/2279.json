{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/2279",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2279/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2279/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2279/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/2279",
  "id": 1302113486,
  "node_id": "I_kwDOGBlvNc5NnKzO",
  "number": 2279,
  "title": "Proxy deployments/ upgrates baked into foundry",
  "user": {
    "login": "FredCoen",
    "id": 43670554,
    "node_id": "MDQ6VXNlcjQzNjcwNTU0",
    "avatar_url": "https://avatars.githubusercontent.com/u/43670554?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/FredCoen",
    "html_url": "https://github.com/FredCoen",
    "followers_url": "https://api.github.com/users/FredCoen/followers",
    "following_url": "https://api.github.com/users/FredCoen/following{/other_user}",
    "gists_url": "https://api.github.com/users/FredCoen/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/FredCoen/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/FredCoen/subscriptions",
    "organizations_url": "https://api.github.com/users/FredCoen/orgs",
    "repos_url": "https://api.github.com/users/FredCoen/repos",
    "events_url": "https://api.github.com/users/FredCoen/events{/privacy}",
    "received_events_url": "https://api.github.com/users/FredCoen/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3593644820,
      "node_id": "LA_kwDOGBlvNc7WMqsU",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-feature",
      "name": "T-feature",
      "color": "BFD4F2",
      "default": false,
      "description": "Type: feature"
    },
    {
      "id": 3703752787,
      "node_id": "LA_kwDOGBlvNc7cwshT",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/C-forge",
      "name": "C-forge",
      "color": "5319E7",
      "default": false,
      "description": "Command: forge"
    },
    {
      "id": 3759719790,
      "node_id": "LA_kwDOGBlvNc7gGMVu",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/P-low",
      "name": "P-low",
      "color": "D93F0B",
      "default": false,
      "description": "Priority: low"
    },
    {
      "id": 3777109787,
      "node_id": "LA_kwDOGBlvNc7hIh8b",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/Cmd-forge-create",
      "name": "Cmd-forge-create",
      "color": "006B75",
      "default": false,
      "description": "Command: forge create"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 6,
  "created_at": "2022-07-12T14:03:17Z",
  "updated_at": "2022-09-07T16:39:58Z",
  "closed_at": "2022-07-17T23:02:09Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "### Component\n\nForge\n\n### Describe the feature you would like\n\nUpgradability is hard to safely manage with forge at the moment. I created a repo here that should help to show how to deploy/upgrade different proxy patterns correctly [here](https://github.com/FredCoen/Proxy_implementations_with_forge). It is WIP currently.\r\n\r\nIdeally forge would automate common proxy pattern deployment / upgrades similar to the OZ hardhat upgrades plugin. \r\n\r\nWhen deploying it should check:\r\n\r\n- Validate that the implementation is [upgrade safe](https://docs.openzeppelin.com/upgrades-plugins/faq#what-does-it-mean-for-a-contract-to-be-upgrade-safe)\r\n\r\n- Deploy a [proxy admin](https://docs.openzeppelin.com/upgrades-plugins/faq#what-is-a-proxy-admin) for your project (if needed)\r\n\r\n- Check if there is an [implementation contract](https://docs.openzeppelin.com/upgrades-plugins/faq#what-is-an-implementation-contract) deployed with the same bytecode, and deploy one if not\r\n\r\n- Create and initialize the proxy contract\r\n\r\nWhen upgrading it should check:\r\n\r\n- Validate that the new implementation is [upgrade safe](https://docs.openzeppelin.com/upgrades-plugins/faq#what-does-it-mean-for-a-contract-to-be-upgrade-safe) and is [compatible](https://docs.openzeppelin.com/upgrades-plugins/faq#what-does-it-mean-for-an-implementation-to-be-compatible) with the previous one\r\n\r\n- Check if there is an [implementation contract](https://docs.openzeppelin.com/upgrades-plugins/faq#what-is-an-implementation-contract) deployed with the same bytecode, and deploy one if not\r\n\n\n### Additional context\n\n_No response_",
  "closed_by": {
    "login": "gakonst",
    "id": 17802178,
    "node_id": "MDQ6VXNlcjE3ODAyMTc4",
    "avatar_url": "https://avatars.githubusercontent.com/u/17802178?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/gakonst",
    "html_url": "https://github.com/gakonst",
    "followers_url": "https://api.github.com/users/gakonst/followers",
    "following_url": "https://api.github.com/users/gakonst/following{/other_user}",
    "gists_url": "https://api.github.com/users/gakonst/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/gakonst/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gakonst/subscriptions",
    "organizations_url": "https://api.github.com/users/gakonst/orgs",
    "repos_url": "https://api.github.com/users/gakonst/repos",
    "events_url": "https://api.github.com/users/gakonst/events{/privacy}",
    "received_events_url": "https://api.github.com/users/gakonst/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/2279/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2279/timeline",
  "performed_via_github_app": null,
  "state_reason": "not_planned"
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1184064824",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2279#issuecomment-1184064824",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2279",
    "id": 1184064824,
    "node_id": "IC_kwDOGBlvNc5Gk2U4",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-14T06:52:23Z",
    "updated_at": "2022-07-14T06:52:23Z",
    "author_association": "MEMBER",
    "body": "Unsure about this feature, thoughts @gakonst?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1184064824/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1184275974",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2279#issuecomment-1184275974",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2279",
    "id": 1184275974,
    "node_id": "IC_kwDOGBlvNc5Glp4G",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-14T10:30:40Z",
    "updated_at": "2022-07-14T10:30:40Z",
    "author_association": "COLLABORATOR",
    "body": "I'm not too familiar with the OZ hardhat plugin, but from what I recall it seems very useful. I have a repo now where we have UUPS upgradeable contracts and Beacon contracts for factories, and it is tedious / a lot of work to get confidence in the setup. We've written some scripts to check storage layout, function sigs, etc. (repo is currently private otherwise I'd share). The checks and UX vary depending on how which upgrade pattern you use, and I think a lot of it can be put in forge-std.\r\n\r\nSome scattered thoughts around the UX I'm aiming for and what we could include to help with this:\r\n- All logic contracts should include `uint256 public constant VERSION = 0`, where of course 0 is then incremented by 1 with each version.\r\n- When running a deploy script, read in the latest addresses of all logic contracts from deploy logs using #2153 \r\n    - For each, check if the contract's ABI contains `VERSION`, and if so check if the deployed version matches the version in the local contracts. If so, that contract is up to date.\r\n    - If it doesn't match, there's an upgrade that needs to be applied, so deploy the logic and queue the upgrade tx (or log the upgrade tx calldata in some specified format for e.g. a gnosis safe or governance proposal).\r\n    - If there are no deploys found on the live network, deploy the current implementation (note the implied requirement that any implementation should be deployable directly, without requiring a previous implementation to be deployed first and then have the upgrade applied).\r\n- I'd like for deploys to a live network to also include the commit hash in the output JSON file. The goal here is to ensure there's clear traceability between commit hashes and deployed contract addresses. Open to other ideas on how to do this, such as git tags on `forge script` executions to live networks or something.\r\n- Detect if the proxy is UUPS, Transparent, Beacon, etc. and run the appropriate upgrade-safety checks, and revert if they fail.\r\n    - We'd need a new cheatcode here to access the ABI (to check function selector clashes / presence of e.g. an `upgradeTo` method). Currently I do this in a shell script.\r\n    - Implementation of #2056 would help with verifying storage layout, though we may want a way to trigger snapshot checks from within a forge script",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1184275974/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1184976533",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2279#issuecomment-1184976533",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2279",
    "id": 1184976533,
    "node_id": "IC_kwDOGBlvNc5GoU6V",
    "user": {
      "login": "gakonst",
      "id": 17802178,
      "node_id": "MDQ6VXNlcjE3ODAyMTc4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17802178?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gakonst",
      "html_url": "https://github.com/gakonst",
      "followers_url": "https://api.github.com/users/gakonst/followers",
      "following_url": "https://api.github.com/users/gakonst/following{/other_user}",
      "gists_url": "https://api.github.com/users/gakonst/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gakonst/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gakonst/subscriptions",
      "organizations_url": "https://api.github.com/users/gakonst/orgs",
      "repos_url": "https://api.github.com/users/gakonst/repos",
      "events_url": "https://api.github.com/users/gakonst/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gakonst/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-14T23:10:24Z",
    "updated_at": "2022-07-14T23:10:24Z",
    "author_association": "MEMBER",
    "body": "I think most of this should go to forge-std or something like forge-upgradeable which are ports of the JS logic which do \"deploy, call initialize, ensure initialize is called\".\r\n\r\nThere's some native logic which we could add around storage layout footguns etc, but I am not sure how that solution would look like.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1184976533/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1186295707",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2279#issuecomment-1186295707",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2279",
    "id": 1186295707,
    "node_id": "IC_kwDOGBlvNc5GtW-b",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-16T21:20:30Z",
    "updated_at": "2022-07-16T21:20:30Z",
    "author_association": "MEMBER",
    "body": "Deleted a bunch of duplicate comments :cowboy_hat_face: I also feel like this should be built outside of main Forge. We can add additional info into Forge that 3rd party tools could use, e.g. `forge inspect` for storage layouts etc., but I don't think adding this into Forge makes a lot of sense. I'd be worried that we end up having a bunch of these specialized vendor-tools that we would have to maintain",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1186295707/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1186623565",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2279#issuecomment-1186623565",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2279",
    "id": 1186623565,
    "node_id": "IC_kwDOGBlvNc5GunBN",
    "user": {
      "login": "gakonst",
      "id": 17802178,
      "node_id": "MDQ6VXNlcjE3ODAyMTc4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17802178?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gakonst",
      "html_url": "https://github.com/gakonst",
      "followers_url": "https://api.github.com/users/gakonst/followers",
      "following_url": "https://api.github.com/users/gakonst/following{/other_user}",
      "gists_url": "https://api.github.com/users/gakonst/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gakonst/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gakonst/subscriptions",
      "organizations_url": "https://api.github.com/users/gakonst/orgs",
      "repos_url": "https://api.github.com/users/gakonst/repos",
      "events_url": "https://api.github.com/users/gakonst/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gakonst/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-17T23:02:09Z",
    "updated_at": "2022-07-17T23:02:09Z",
    "author_association": "MEMBER",
    "body": "yeah - same page. ",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1186623565/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1239631534",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2279#issuecomment-1239631534",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2279",
    "id": 1239631534,
    "node_id": "IC_kwDOGBlvNc5J40au",
    "user": {
      "login": "HashHaran",
      "id": 106789241,
      "node_id": "U_kgDOBl15eQ",
      "avatar_url": "https://avatars.githubusercontent.com/u/106789241?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/HashHaran",
      "html_url": "https://github.com/HashHaran",
      "followers_url": "https://api.github.com/users/HashHaran/followers",
      "following_url": "https://api.github.com/users/HashHaran/following{/other_user}",
      "gists_url": "https://api.github.com/users/HashHaran/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/HashHaran/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/HashHaran/subscriptions",
      "organizations_url": "https://api.github.com/users/HashHaran/orgs",
      "repos_url": "https://api.github.com/users/HashHaran/repos",
      "events_url": "https://api.github.com/users/HashHaran/events{/privacy}",
      "received_events_url": "https://api.github.com/users/HashHaran/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-07T16:39:58Z",
    "updated_at": "2022-09-07T16:39:58Z",
    "author_association": "NONE",
    "body": "> I'm not too familiar with the OZ hardhat plugin, but from what I recall it seems very useful. I have a repo now where we have UUPS upgradeable contracts and Beacon contracts for factories, and it is tedious / a lot of work to get confidence in the setup. We've written some scripts to check storage layout, function sigs, etc. (repo is currently private otherwise I'd share). The checks and UX vary depending on how which upgrade pattern you use, and I think a lot of it can be put in forge-std.\r\n> \r\n> Some scattered thoughts around the UX I'm aiming for and what we could include to help with this:\r\n> \r\n> * All logic contracts should include `uint256 public constant VERSION = 0`, where of course 0 is then incremented by 1 with each version.\r\n> * When running a deploy script, read in the latest addresses of all logic contracts from deploy logs using [feat: JSON parsing cheatcodes #2153](https://github.com/foundry-rs/foundry/issues/2153)\r\n>   \r\n>   * For each, check if the contract's ABI contains `VERSION`, and if so check if the deployed version matches the version in the local contracts. If so, that contract is up to date.\r\n>   * If it doesn't match, there's an upgrade that needs to be applied, so deploy the logic and queue the upgrade tx (or log the upgrade tx calldata in some specified format for e.g. a gnosis safe or governance proposal).\r\n>   * If there are no deploys found on the live network, deploy the current implementation (note the implied requirement that any implementation should be deployable directly, without requiring a previous implementation to be deployed first and then have the upgrade applied).\r\n> * I'd like for deploys to a live network to also include the commit hash in the output JSON file. The goal here is to ensure there's clear traceability between commit hashes and deployed contract addresses. Open to other ideas on how to do this, such as git tags on `forge script` executions to live networks or something.\r\n> * Detect if the proxy is UUPS, Transparent, Beacon, etc. and run the appropriate upgrade-safety checks, and revert if they fail.\r\n>   \r\n>   * We'd need a new cheatcode here to access the ABI (to check function selector clashes / presence of e.g. an `upgradeTo` method). Currently I do this in a shell script.\r\n>   * Implementation of [feat: expand snapshot functionality #2056](https://github.com/foundry-rs/foundry/issues/2056) would help with verifying storage layout, though we may want a way to trigger snapshot checks from within a forge script\r\n\r\nTo me personally upgrade-safety checks and storage layout checks seem to be the most important of what you have said. Automatic deployment management based on version change seem like a good to have. Rest of the features that Open Zeppelin hardhat upgrades plugin provides can be written in a forge script and exposed as a library.\r\n\r\nAny progress on accessing the ABI from inside forge script to do this? Any other ideas to do such checks in the forge is also welcome.\r\n\r\nMay be some core functionalities required to do this can be done in forge while the checks and management of different proxy patterns can be done in a third party library. The third party library can evolve as proxy patterns and solidity evolves, while foundry sticks only to the core solidity development functionalities.\r\n\r\nIn the meanwhile I think the best option is to set up hardhat parallel to foundry and use the open zeppelin hardhat upgrades plugin. Take a look at this [repository ](https://github.com/HashHaran/foundry-upgrade-hardhat) if curious about this approach.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1239631534/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
