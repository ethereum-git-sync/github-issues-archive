{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/553",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/553/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/553/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/553/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/553",
  "id": 1111888630,
  "node_id": "I_kwDOGBlvNc5CRhL2",
  "number": 553,
  "title": "feat(forge): label addresses in traces",
  "user": {
    "login": "fubhy",
    "id": 1172528,
    "node_id": "MDQ6VXNlcjExNzI1Mjg=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1172528?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/fubhy",
    "html_url": "https://github.com/fubhy",
    "followers_url": "https://api.github.com/users/fubhy/followers",
    "following_url": "https://api.github.com/users/fubhy/following{/other_user}",
    "gists_url": "https://api.github.com/users/fubhy/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/fubhy/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/fubhy/subscriptions",
    "organizations_url": "https://api.github.com/users/fubhy/orgs",
    "repos_url": "https://api.github.com/users/fubhy/repos",
    "events_url": "https://api.github.com/users/fubhy/events{/privacy}",
    "received_events_url": "https://api.github.com/users/fubhy/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3593644820,
      "node_id": "LA_kwDOGBlvNc7WMqsU",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-feature",
      "name": "T-feature",
      "color": "BFD4F2",
      "default": false,
      "description": "Type: feature"
    },
    {
      "id": 3593644915,
      "node_id": "LA_kwDOGBlvNc7WMqtz",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/Cmd-forge-test",
      "name": "Cmd-forge-test",
      "color": "006B75",
      "default": false,
      "description": "Command: forge test"
    },
    {
      "id": 3703752787,
      "node_id": "LA_kwDOGBlvNc7cwshT",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/C-forge",
      "name": "C-forge",
      "color": "5319E7",
      "default": false,
      "description": "Command: forge"
    },
    {
      "id": 3703752960,
      "node_id": "LA_kwDOGBlvNc7cwskA",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/A-cheatcodes",
      "name": "A-cheatcodes",
      "color": "FBCA04",
      "default": false,
      "description": "Area: cheatcodes"
    },
    {
      "id": 3703753090,
      "node_id": "LA_kwDOGBlvNc7cwsmC",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/A-tracing",
      "name": "A-tracing",
      "color": "FBCA04",
      "default": false,
      "description": "Area: tracing"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 8,
  "created_at": "2022-01-23T14:36:57Z",
  "updated_at": "2022-01-30T18:47:17Z",
  "closed_at": "2022-01-30T18:47:17Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "I believe it would further improve readability of the traces output (`forge test -vvvv`) if addresses were labeled with the name of the contract at the address or a custom label for EOAs. For EOAs (and also assigning custom labels for contracts e.g. to differentiate between different instances of the same contract), it might be cool to add a cheatcode to manually assign custom labels.\r\n\r\n```\r\n[PASS] testHappyPath() (gas: 12520)\r\nTraces:\r\n  [25936] ClaimOwnershipTest::testHappyPath()\r\n    ├─ [24082] Dispatcher::setNominatedOwner(Alice [0x185a4dc360ce69bdccee33b3784b0282f7961aea])\r\n    │   ├─ emit NominatedOwnerSet(nominatedOwner: Alice [0x185a4dc360ce69bdccee33b3784b0282f7961aea])\r\n    │   └─ ← ()\r\n    ├─ [0] VM::expectEmit(true, true, true, true)\r\n    │   └─ ← ()\r\n    ├─ emit OwnershipTransferred(prevOwner: Bob [0xb4c79dab8f259c7aee6e5b2aa729821864227e84], nextOwner: Alice [0x185a4dc360ce69bdccee33b3784b0282f7961aea])\r\n    ├─ [0] VM::prank(Alice [0x185a4dc360ce69bdccee33b3784b0282f7961aea])\r\n    │   └─ ← ()\r\n    ├─ [1890] Dispatcher::claimOwnership()\r\n    │   ├─ emit OwnershipTransferred(prevOwner: Bob [0xb4c79dab8f259c7aee6e5b2aa729821864227e84], nextOwner: Alice [ 0x185a4dc360ce69bdccee33b3784b0282f7961aea])\r\n    │   └─ ← ()\r\n    ├─ [448] Dispatcher::getOwner()\r\n    │   └─ ← Alice [0x185a4dc360ce69bdccee33b3784b0282f7961aea]\r\n    ├─ [405] Dispatcher::getNominatedOwner()\r\n    │   └─ ← 0x0000000000000000000000000000000000000000\r\n    └─ ← ()\r\n```\r\n\r\nE.g. \r\n\r\n```solidity\r\nvm.setLabel(address(alice), \"Alice\")\r\nvm.setLabel(address(bob), \"Bob\")\r\n```\r\n\r\nFor fork tests, it might also be nice to try and do a reverse ENS lookup?",
  "closed_by": {
    "login": "gakonst",
    "id": 17802178,
    "node_id": "MDQ6VXNlcjE3ODAyMTc4",
    "avatar_url": "https://avatars.githubusercontent.com/u/17802178?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/gakonst",
    "html_url": "https://github.com/gakonst",
    "followers_url": "https://api.github.com/users/gakonst/followers",
    "following_url": "https://api.github.com/users/gakonst/following{/other_user}",
    "gists_url": "https://api.github.com/users/gakonst/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/gakonst/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gakonst/subscriptions",
    "organizations_url": "https://api.github.com/users/gakonst/orgs",
    "repos_url": "https://api.github.com/users/gakonst/repos",
    "events_url": "https://api.github.com/users/gakonst/events{/privacy}",
    "received_events_url": "https://api.github.com/users/gakonst/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/553/reactions",
    "total_count": 1,
    "+1": 1,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/553/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1019542330",
    "html_url": "https://github.com/foundry-rs/foundry/issues/553#issuecomment-1019542330",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/553",
    "id": 1019542330,
    "node_id": "IC_kwDOGBlvNc48xPs6",
    "user": {
      "login": "brockelmore",
      "id": 31553173,
      "node_id": "MDQ6VXNlcjMxNTUzMTcz",
      "avatar_url": "https://avatars.githubusercontent.com/u/31553173?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brockelmore",
      "html_url": "https://github.com/brockelmore",
      "followers_url": "https://api.github.com/users/brockelmore/followers",
      "following_url": "https://api.github.com/users/brockelmore/following{/other_user}",
      "gists_url": "https://api.github.com/users/brockelmore/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brockelmore/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brockelmore/subscriptions",
      "organizations_url": "https://api.github.com/users/brockelmore/orgs",
      "repos_url": "https://api.github.com/users/brockelmore/repos",
      "events_url": "https://api.github.com/users/brockelmore/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brockelmore/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-23T18:37:57Z",
    "updated_at": "2022-01-23T18:37:57Z",
    "author_association": "MEMBER",
    "body": "I am cautious to throw \"unneeded\" http calls to maintain speed. That being said, I'm all for labels, that's a great idea. Should be easy to implement - adding a tag field to a CallTraceNode, then in the pretty_print or update_identified function, build a mapping and populate all nodes tag field that have the tagged address. Should the tag take precedence over contract name, I assume?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1019542330/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1019582678",
    "html_url": "https://github.com/foundry-rs/foundry/issues/553#issuecomment-1019582678",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/553",
    "id": 1019582678,
    "node_id": "IC_kwDOGBlvNc48xZjW",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-23T22:41:48Z",
    "updated_at": "2022-01-23T22:41:48Z",
    "author_association": "COLLABORATOR",
    "body": ">  Should the tag take precedence over contract name, I assume?\r\n\r\nLove the idea, and agree tag should take precedence over contract name\r\n\r\nAlso relevant is that TrueBlocks has a large address book of mainnet addresses we could pull from, more info here: https://github.com/gakonst/ethers-rs/pull/769#issuecomment-1007427583. Could either include a copy with the binary, or it's just one extra HTTP call for that full list\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1019582678/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1019610804",
    "html_url": "https://github.com/foundry-rs/foundry/issues/553#issuecomment-1019610804",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/553",
    "id": 1019610804,
    "node_id": "IC_kwDOGBlvNc48xga0",
    "user": {
      "login": "brockelmore",
      "id": 31553173,
      "node_id": "MDQ6VXNlcjMxNTUzMTcz",
      "avatar_url": "https://avatars.githubusercontent.com/u/31553173?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brockelmore",
      "html_url": "https://github.com/brockelmore",
      "followers_url": "https://api.github.com/users/brockelmore/followers",
      "following_url": "https://api.github.com/users/brockelmore/following{/other_user}",
      "gists_url": "https://api.github.com/users/brockelmore/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brockelmore/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brockelmore/subscriptions",
      "organizations_url": "https://api.github.com/users/brockelmore/orgs",
      "repos_url": "https://api.github.com/users/brockelmore/repos",
      "events_url": "https://api.github.com/users/brockelmore/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brockelmore/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-24T00:41:18Z",
    "updated_at": "2022-01-24T00:41:18Z",
    "author_association": "MEMBER",
    "body": "Oh interesting - should tagging be cached to disk or only be dynamic? I can see cases for both",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1019610804/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1019617078",
    "html_url": "https://github.com/foundry-rs/foundry/issues/553#issuecomment-1019617078",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/553",
    "id": 1019617078,
    "node_id": "IC_kwDOGBlvNc48xh82",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-24T00:57:26Z",
    "updated_at": "2022-01-24T00:57:26Z",
    "author_association": "COLLABORATOR",
    "body": "Hmm, my current thinking is that `vm.label(address,string)` should be dynamic and only persist during that test run, but something like the TrueBlocks database could be cached and re-fetched for updates every few weeks (or allow updates on demand)",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1019617078/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1019805184",
    "html_url": "https://github.com/foundry-rs/foundry/issues/553#issuecomment-1019805184",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/553",
    "id": 1019805184,
    "node_id": "IC_kwDOGBlvNc48yP4A",
    "user": {
      "login": "fubhy",
      "id": 1172528,
      "node_id": "MDQ6VXNlcjExNzI1Mjg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1172528?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubhy",
      "html_url": "https://github.com/fubhy",
      "followers_url": "https://api.github.com/users/fubhy/followers",
      "following_url": "https://api.github.com/users/fubhy/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubhy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubhy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubhy/subscriptions",
      "organizations_url": "https://api.github.com/users/fubhy/orgs",
      "repos_url": "https://api.github.com/users/fubhy/repos",
      "events_url": "https://api.github.com/users/fubhy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubhy/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-24T07:45:19Z",
    "updated_at": "2022-01-24T07:45:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "Good point about the test performance. What about an optional test flag that pulls in these addresses when set and otherwise uses them from a cached database, possibly a plain file similar to .gas-snapshot? It could then even use TrueBlock as a fallback for ENS (or vica versa). Agreed about the persistence though:\r\n\r\nOrdered with increasing priority (higher overrides lower):\r\n\r\n1. Local contract names: Scoped to the test run [not cached]\r\n2. Address label registry: Global scope, cached (.address-labels?). Can be populated from ENS / TrueBlocks [optionally]\r\n3. Manually set labels: Scoped to test run [not cached]\r\n\r\nIt should be possible to manually add custom records to `.address-labels` too imho for things that are recorded on neither ENS / TrueBlocks but are repeated throughout your [fork] tests.\r\n\r\nMight be a good idea to start with just a manually maintained registry and consider TrueBlocks, etc. separately. We could provide an option to extract all unlabeled addresses at the end of a test run into the `.address-labels` file to allow the user to then manually refine that list with labels?\r\n ",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1019805184/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1020086525",
    "html_url": "https://github.com/foundry-rs/foundry/issues/553#issuecomment-1020086525",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/553",
    "id": 1020086525,
    "node_id": "IC_kwDOGBlvNc48zUj9",
    "user": {
      "login": "gakonst",
      "id": 17802178,
      "node_id": "MDQ6VXNlcjE3ODAyMTc4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17802178?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gakonst",
      "html_url": "https://github.com/gakonst",
      "followers_url": "https://api.github.com/users/gakonst/followers",
      "following_url": "https://api.github.com/users/gakonst/following{/other_user}",
      "gists_url": "https://api.github.com/users/gakonst/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gakonst/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gakonst/subscriptions",
      "organizations_url": "https://api.github.com/users/gakonst/orgs",
      "repos_url": "https://api.github.com/users/gakonst/repos",
      "events_url": "https://api.github.com/users/gakonst/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gakonst/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-24T13:12:51Z",
    "updated_at": "2022-01-24T13:12:58Z",
    "author_association": "MEMBER",
    "body": "Supportive. I'd recommend we go the MVP path here and add the cheatcode for labelling, and if manual labelling becomes too much of an issue we start adding more configs on forge. We could also have a bunch of pre-configured labels in forge-std that one could import in their tests instead.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1020086525/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1020092623",
    "html_url": "https://github.com/foundry-rs/foundry/issues/553#issuecomment-1020092623",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/553",
    "id": 1020092623,
    "node_id": "IC_kwDOGBlvNc48zWDP",
    "user": {
      "login": "fubhy",
      "id": 1172528,
      "node_id": "MDQ6VXNlcjExNzI1Mjg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1172528?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubhy",
      "html_url": "https://github.com/fubhy",
      "followers_url": "https://api.github.com/users/fubhy/followers",
      "following_url": "https://api.github.com/users/fubhy/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubhy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubhy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubhy/subscriptions",
      "organizations_url": "https://api.github.com/users/fubhy/orgs",
      "repos_url": "https://api.github.com/users/fubhy/repos",
      "events_url": "https://api.github.com/users/fubhy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubhy/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-24T13:18:59Z",
    "updated_at": "2022-01-24T13:18:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Supportive. I'd recommend we go the MVP path here and add the cheatcode for labelling ...\r\n\r\nAgreed. I assume by that you also mean automatically derived labels for instances of local contracts in addition to the cheatcode, right?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1020092623/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1020093891",
    "html_url": "https://github.com/foundry-rs/foundry/issues/553#issuecomment-1020093891",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/553",
    "id": 1020093891,
    "node_id": "IC_kwDOGBlvNc48zWXD",
    "user": {
      "login": "gakonst",
      "id": 17802178,
      "node_id": "MDQ6VXNlcjE3ODAyMTc4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17802178?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gakonst",
      "html_url": "https://github.com/gakonst",
      "followers_url": "https://api.github.com/users/gakonst/followers",
      "following_url": "https://api.github.com/users/gakonst/following{/other_user}",
      "gists_url": "https://api.github.com/users/gakonst/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gakonst/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gakonst/subscriptions",
      "organizations_url": "https://api.github.com/users/gakonst/orgs",
      "repos_url": "https://api.github.com/users/gakonst/repos",
      "events_url": "https://api.github.com/users/gakonst/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gakonst/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-24T13:20:17Z",
    "updated_at": "2022-01-24T13:20:17Z",
    "author_association": "MEMBER",
    "body": "If automatic derivation is easy, then yeah",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1020093891/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
