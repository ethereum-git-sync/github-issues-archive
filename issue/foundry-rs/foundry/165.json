{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/165",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/165/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/165/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/165/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/165",
  "id": 1060685212,
  "node_id": "I_kwDOGBlvNc4_OMWc",
  "number": 165,
  "title": "stdlib support",
  "user": {
    "login": "gakonst",
    "id": 17802178,
    "node_id": "MDQ6VXNlcjE3ODAyMTc4",
    "avatar_url": "https://avatars.githubusercontent.com/u/17802178?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/gakonst",
    "html_url": "https://github.com/gakonst",
    "followers_url": "https://api.github.com/users/gakonst/followers",
    "following_url": "https://api.github.com/users/gakonst/following{/other_user}",
    "gists_url": "https://api.github.com/users/gakonst/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/gakonst/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gakonst/subscriptions",
    "organizations_url": "https://api.github.com/users/gakonst/orgs",
    "repos_url": "https://api.github.com/users/gakonst/repos",
    "events_url": "https://api.github.com/users/gakonst/events{/privacy}",
    "received_events_url": "https://api.github.com/users/gakonst/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3593644820,
      "node_id": "LA_kwDOGBlvNc7WMqsU",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-feature",
      "name": "T-feature",
      "color": "BFD4F2",
      "default": false,
      "description": "Type: feature"
    },
    {
      "id": 3593644915,
      "node_id": "LA_kwDOGBlvNc7WMqtz",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/Cmd-forge-test",
      "name": "Cmd-forge-test",
      "color": "006B75",
      "default": false,
      "description": "Command: forge test"
    },
    {
      "id": 3703752787,
      "node_id": "LA_kwDOGBlvNc7cwshT",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/C-forge",
      "name": "C-forge",
      "color": "5319E7",
      "default": false,
      "description": "Command: forge"
    },
    {
      "id": 3776975605,
      "node_id": "LA_kwDOGBlvNc7hIBL1",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/Cmd-forge-debug",
      "name": "Cmd-forge-debug",
      "color": "006B75",
      "default": false,
      "description": "Command: forge run"
    },
    {
      "id": 3777098561,
      "node_id": "LA_kwDOGBlvNc7hIfNB",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/Cmd-forge-build",
      "name": "Cmd-forge-build",
      "color": "006B75",
      "default": false,
      "description": "Command: forge build"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 11,
  "created_at": "2021-11-22T23:22:07Z",
  "updated_at": "2022-05-06T15:51:01Z",
  "closed_at": "2022-05-06T15:51:01Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "# Requested feature\r\n\r\nIt'd be nice if we could import popular contracts in our Solidity without needing to install them as libraries. An example of that in the wild is Hardhat's console.sol being available as `import hardhat/console.sol`.\r\n\r\n# Suggested solution\r\n\r\nWe’d `include_str` the solidity for some contracts in the binary, and when parsing the solidity imports in ethers-solc, we’d see if any of these are imported as ``import ‘std/Vm.sol’` and inject them (cc @mattsse ). \r\n\r\nExample usage: Cheatcodes, maybe Solmate or some subset of it, ..?\r\n\r\nThat’d make it very easy to run forge test Foo.sol where inside it imports popular stuff, for writing quick testing ‘scripts’ effectively. It also saves you from having to maintain a ds-test submodule lib",
  "closed_by": {
    "login": "gakonst",
    "id": 17802178,
    "node_id": "MDQ6VXNlcjE3ODAyMTc4",
    "avatar_url": "https://avatars.githubusercontent.com/u/17802178?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/gakonst",
    "html_url": "https://github.com/gakonst",
    "followers_url": "https://api.github.com/users/gakonst/followers",
    "following_url": "https://api.github.com/users/gakonst/following{/other_user}",
    "gists_url": "https://api.github.com/users/gakonst/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/gakonst/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gakonst/subscriptions",
    "organizations_url": "https://api.github.com/users/gakonst/orgs",
    "repos_url": "https://api.github.com/users/gakonst/repos",
    "events_url": "https://api.github.com/users/gakonst/events{/privacy}",
    "received_events_url": "https://api.github.com/users/gakonst/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/165/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/165/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/976006116",
    "html_url": "https://github.com/foundry-rs/foundry/issues/165#issuecomment-976006116",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/165",
    "id": 976006116,
    "node_id": "IC_kwDOGBlvNc46LKvk",
    "user": {
      "login": "mattsse",
      "id": 19890894,
      "node_id": "MDQ6VXNlcjE5ODkwODk0",
      "avatar_url": "https://avatars.githubusercontent.com/u/19890894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mattsse",
      "html_url": "https://github.com/mattsse",
      "followers_url": "https://api.github.com/users/mattsse/followers",
      "following_url": "https://api.github.com/users/mattsse/following{/other_user}",
      "gists_url": "https://api.github.com/users/mattsse/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mattsse/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mattsse/subscriptions",
      "organizations_url": "https://api.github.com/users/mattsse/orgs",
      "repos_url": "https://api.github.com/users/mattsse/repos",
      "events_url": "https://api.github.com/users/mattsse/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mattsse/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-22T23:30:30Z",
    "updated_at": "2021-11-22T23:30:30Z",
    "author_association": "MEMBER",
    "body": "that should be doable, however, we should add some precautions, like comparing checksums, in the event a user imports a modified version of console.sol for example",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/976006116/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/997425249",
    "html_url": "https://github.com/foundry-rs/foundry/issues/165#issuecomment-997425249",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/165",
    "id": 997425249,
    "node_id": "IC_kwDOGBlvNc47c4Bh",
    "user": {
      "login": "laizy",
      "id": 4203231,
      "node_id": "MDQ6VXNlcjQyMDMyMzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4203231?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laizy",
      "html_url": "https://github.com/laizy",
      "followers_url": "https://api.github.com/users/laizy/followers",
      "following_url": "https://api.github.com/users/laizy/following{/other_user}",
      "gists_url": "https://api.github.com/users/laizy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laizy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laizy/subscriptions",
      "organizations_url": "https://api.github.com/users/laizy/orgs",
      "repos_url": "https://api.github.com/users/laizy/repos",
      "events_url": "https://api.github.com/users/laizy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laizy/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-12-19T16:57:45Z",
    "updated_at": "2021-12-19T16:58:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "1. From a contract developer's view, those are just some utility contracts provided by a test framework, used for testing and debug. So I prefer use `import \"forge/Vm.sol\"` to `import \"std/Vm.sol\"`.\r\n2. It will cause IDE autocomplete not working, so I prefer generating those files in `lib/forge` dir when calling `forge init`, or at least providing a subcomand to generate those files.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/997425249/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1000880062",
    "html_url": "https://github.com/foundry-rs/foundry/issues/165#issuecomment-1000880062",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/165",
    "id": 1000880062,
    "node_id": "IC_kwDOGBlvNc47qDe-",
    "user": {
      "login": "brockelmore",
      "id": 31553173,
      "node_id": "MDQ6VXNlcjMxNTUzMTcz",
      "avatar_url": "https://avatars.githubusercontent.com/u/31553173?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brockelmore",
      "html_url": "https://github.com/brockelmore",
      "followers_url": "https://api.github.com/users/brockelmore/followers",
      "following_url": "https://api.github.com/users/brockelmore/following{/other_user}",
      "gists_url": "https://api.github.com/users/brockelmore/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brockelmore/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brockelmore/subscriptions",
      "organizations_url": "https://api.github.com/users/brockelmore/orgs",
      "repos_url": "https://api.github.com/users/brockelmore/repos",
      "events_url": "https://api.github.com/users/brockelmore/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brockelmore/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-12-24T15:41:39Z",
    "updated_at": "2021-12-24T16:01:31Z",
    "author_association": "MEMBER",
    "body": "Some ideas for what to include:\r\n1. Vm interface\r\n2. builtin errors as bytes, i.e. `bytes public arithmeticError = abi.encodeWithSignature(\"Panic(uint256)\", 0x11)`, etc. for use in `vm.expectRevert`, i.e. `vm.expectRevert(stdlib.arithmeticError)`\r\n3. `stdlib.find(target, sig, inputs)` -> find the slot of a variable\r\n4. `stdlib.write(target, sig, inputs, value)` -> find the slot of a variable & write to it (see [HEVMHelpers](https://github.com/brockelmore/HEVMHelpers))\r\n\r\n\r\nI think best path forward is have another repo called forge-std, and on `forge init`, add the repo to `lib`, and in test contract do \r\n```solidity\r\nimport \"ds-test/test.sol\";\r\nimport \"forge-std/stdlib.sol\";\r\n\r\ncontract TestContract is DSTest { /* snip */ }\r\n```\r\n\r\nwill continue to brain dump as i think of more",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1000880062/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1000887524",
    "html_url": "https://github.com/foundry-rs/foundry/issues/165#issuecomment-1000887524",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/165",
    "id": 1000887524,
    "node_id": "IC_kwDOGBlvNc47qFTk",
    "user": {
      "login": "odyslam",
      "id": 13405632,
      "node_id": "MDQ6VXNlcjEzNDA1NjMy",
      "avatar_url": "https://avatars.githubusercontent.com/u/13405632?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/odyslam",
      "html_url": "https://github.com/odyslam",
      "followers_url": "https://api.github.com/users/odyslam/followers",
      "following_url": "https://api.github.com/users/odyslam/following{/other_user}",
      "gists_url": "https://api.github.com/users/odyslam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/odyslam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/odyslam/subscriptions",
      "organizations_url": "https://api.github.com/users/odyslam/orgs",
      "repos_url": "https://api.github.com/users/odyslam/repos",
      "events_url": "https://api.github.com/users/odyslam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/odyslam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-12-24T16:05:30Z",
    "updated_at": "2021-12-24T16:05:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "It would be very cool to be able to dynamically remove all elements of this lib from the contracts. Basically to be able to add testing/helper functions all around the place and then be certain that you will not leave something behind when deploying.\r\n\r\nFor example, I have personally deployed contract with `ds-test` included and I was reading that in total the deployed `console.sol` has accumulated around $56K in gas costs.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1000887524/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1000894820",
    "html_url": "https://github.com/foundry-rs/foundry/issues/165#issuecomment-1000894820",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/165",
    "id": 1000894820,
    "node_id": "IC_kwDOGBlvNc47qHFk",
    "user": {
      "login": "brockelmore",
      "id": 31553173,
      "node_id": "MDQ6VXNlcjMxNTUzMTcz",
      "avatar_url": "https://avatars.githubusercontent.com/u/31553173?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brockelmore",
      "html_url": "https://github.com/brockelmore",
      "followers_url": "https://api.github.com/users/brockelmore/followers",
      "following_url": "https://api.github.com/users/brockelmore/following{/other_user}",
      "gists_url": "https://api.github.com/users/brockelmore/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brockelmore/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brockelmore/subscriptions",
      "organizations_url": "https://api.github.com/users/brockelmore/orgs",
      "repos_url": "https://api.github.com/users/brockelmore/repos",
      "events_url": "https://api.github.com/users/brockelmore/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brockelmore/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-12-24T16:39:46Z",
    "updated_at": "2021-12-24T16:39:46Z",
    "author_association": "MEMBER",
    "body": "one cool hack i wanted a long time ago was being able to convert an internal function to public explicitly for a test. For example:\r\n```\r\nfunction complicatedMath(uint256 a, uint256 b) internal returns (uint256) {\r\n...\r\n}\r\n```\r\n\r\nand somehow we would convert it into public for a test contract without affecting the actual contract. maybe a cheatcode that would fiddle with the AST and deploy the new version",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1000894820/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1000895336",
    "html_url": "https://github.com/foundry-rs/foundry/issues/165#issuecomment-1000895336",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/165",
    "id": 1000895336,
    "node_id": "IC_kwDOGBlvNc47qHNo",
    "user": {
      "login": "odyslam",
      "id": 13405632,
      "node_id": "MDQ6VXNlcjEzNDA1NjMy",
      "avatar_url": "https://avatars.githubusercontent.com/u/13405632?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/odyslam",
      "html_url": "https://github.com/odyslam",
      "followers_url": "https://api.github.com/users/odyslam/followers",
      "following_url": "https://api.github.com/users/odyslam/following{/other_user}",
      "gists_url": "https://api.github.com/users/odyslam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/odyslam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/odyslam/subscriptions",
      "organizations_url": "https://api.github.com/users/odyslam/orgs",
      "repos_url": "https://api.github.com/users/odyslam/repos",
      "events_url": "https://api.github.com/users/odyslam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/odyslam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-12-24T16:43:07Z",
    "updated_at": "2021-12-24T16:43:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "@brockelmore This would be in place of having a \"user\" contract that inherits from that smart contract and exposes the function? \r\n\r\nso, basically, we want part of the std lib tooling to have a flexible AST modifier implementation",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1000895336/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1000895614",
    "html_url": "https://github.com/foundry-rs/foundry/issues/165#issuecomment-1000895614",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/165",
    "id": 1000895614,
    "node_id": "IC_kwDOGBlvNc47qHR-",
    "user": {
      "login": "brockelmore",
      "id": 31553173,
      "node_id": "MDQ6VXNlcjMxNTUzMTcz",
      "avatar_url": "https://avatars.githubusercontent.com/u/31553173?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brockelmore",
      "html_url": "https://github.com/brockelmore",
      "followers_url": "https://api.github.com/users/brockelmore/followers",
      "following_url": "https://api.github.com/users/brockelmore/following{/other_user}",
      "gists_url": "https://api.github.com/users/brockelmore/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brockelmore/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brockelmore/subscriptions",
      "organizations_url": "https://api.github.com/users/brockelmore/orgs",
      "repos_url": "https://api.github.com/users/brockelmore/repos",
      "events_url": "https://api.github.com/users/brockelmore/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brockelmore/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-12-24T16:44:53Z",
    "updated_at": "2021-12-24T16:44:53Z",
    "author_association": "MEMBER",
    "body": "eh not sure, just throwing out ideas 🤷 ",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1000895614/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1001245684",
    "html_url": "https://github.com/foundry-rs/foundry/issues/165#issuecomment-1001245684",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/165",
    "id": 1001245684,
    "node_id": "IC_kwDOGBlvNc47rcv0",
    "user": {
      "login": "lucas-manuel",
      "id": 44272939,
      "node_id": "MDQ6VXNlcjQ0MjcyOTM5",
      "avatar_url": "https://avatars.githubusercontent.com/u/44272939?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lucas-manuel",
      "html_url": "https://github.com/lucas-manuel",
      "followers_url": "https://api.github.com/users/lucas-manuel/followers",
      "following_url": "https://api.github.com/users/lucas-manuel/following{/other_user}",
      "gists_url": "https://api.github.com/users/lucas-manuel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lucas-manuel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lucas-manuel/subscriptions",
      "organizations_url": "https://api.github.com/users/lucas-manuel/orgs",
      "repos_url": "https://api.github.com/users/lucas-manuel/repos",
      "events_url": "https://api.github.com/users/lucas-manuel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lucas-manuel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-12-26T21:47:37Z",
    "updated_at": "2021-12-26T21:47:37Z",
    "author_association": "NONE",
    "body": "Some more ideas:\r\n- `erc20_mint` and other common `hevm.store` operations\r\n- `constrictToRange` functions for fuzzing/symbolic execution\r\n- [`startMeasuringGas/stopMeasuringGas`](https://github.com/Rari-Capital/solmate/blob/fab107565a51674f3a3b5bfdaacc67f6179b1a9b/src/test/utils/DSTestPlus.sol#L16) from Solmate",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1001245684/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1001272197",
    "html_url": "https://github.com/foundry-rs/foundry/issues/165#issuecomment-1001272197",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/165",
    "id": 1001272197,
    "node_id": "IC_kwDOGBlvNc47rjOF",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-12-27T01:03:57Z",
    "updated_at": "2021-12-27T01:03:57Z",
    "author_association": "COLLABORATOR",
    "body": "> `constrictToRange` functions for fuzzing/symbolic execution\r\n\r\nNot yet merged to main, but we added a [`bound`](https://github.com/Rari-Capital/solmate/blob/51b2a9e28bdbbf2ce1bfe22947cd2af6dd09d3b5/src/test/utils/DSTestPlus.sol#L102-L121) method to Solmate's `DSTestPlus` for this, where you specify the min and max (both inclusive) and it wraps the input to that range. Agreed it'd be nice to have that integrated directly though since it's a common need",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1001272197/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1001273175",
    "html_url": "https://github.com/foundry-rs/foundry/issues/165#issuecomment-1001273175",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/165",
    "id": 1001273175,
    "node_id": "IC_kwDOGBlvNc47rjdX",
    "user": {
      "login": "brockelmore",
      "id": 31553173,
      "node_id": "MDQ6VXNlcjMxNTUzMTcz",
      "avatar_url": "https://avatars.githubusercontent.com/u/31553173?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brockelmore",
      "html_url": "https://github.com/brockelmore",
      "followers_url": "https://api.github.com/users/brockelmore/followers",
      "following_url": "https://api.github.com/users/brockelmore/following{/other_user}",
      "gists_url": "https://api.github.com/users/brockelmore/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brockelmore/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brockelmore/subscriptions",
      "organizations_url": "https://api.github.com/users/brockelmore/orgs",
      "repos_url": "https://api.github.com/users/brockelmore/repos",
      "events_url": "https://api.github.com/users/brockelmore/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brockelmore/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-12-27T01:06:56Z",
    "updated_at": "2021-12-27T01:06:56Z",
    "author_association": "MEMBER",
    "body": "yall can check out some stuff im working on [here](https://github.com/brockelmore/forge-std/). Has compiler injected panics, and writing to arbitrary slots. check out tests for some examples. Not saying that repo should be used long term but is def my hacking on what a std lib may include",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1001273175/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1119178177",
    "html_url": "https://github.com/foundry-rs/foundry/issues/165#issuecomment-1119178177",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/165",
    "id": 1119178177,
    "node_id": "IC_kwDOGBlvNc5CtU3B",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-06T01:13:04Z",
    "updated_at": "2022-05-06T01:13:04Z",
    "author_association": "MEMBER",
    "body": "Should we close this since we now just install Forge Std as part of `forge init`?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1119178177/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
