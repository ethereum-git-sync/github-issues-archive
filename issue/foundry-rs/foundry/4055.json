{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/4055",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4055/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4055/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4055/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/4055",
  "id": 1524684450,
  "node_id": "I_kwDOGBlvNc5a4Nai",
  "number": 4055,
  "title": "Calls to etched code from contracts not deployed in test (pre-existing on-chain) don't reference the new etched logic.",
  "user": {
    "login": "ZrowGz",
    "id": 80988768,
    "node_id": "MDQ6VXNlcjgwOTg4NzY4",
    "avatar_url": "https://avatars.githubusercontent.com/u/80988768?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ZrowGz",
    "html_url": "https://github.com/ZrowGz",
    "followers_url": "https://api.github.com/users/ZrowGz/followers",
    "following_url": "https://api.github.com/users/ZrowGz/following{/other_user}",
    "gists_url": "https://api.github.com/users/ZrowGz/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ZrowGz/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ZrowGz/subscriptions",
    "organizations_url": "https://api.github.com/users/ZrowGz/orgs",
    "repos_url": "https://api.github.com/users/ZrowGz/repos",
    "events_url": "https://api.github.com/users/ZrowGz/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ZrowGz/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3334394228,
      "node_id": "MDU6TGFiZWwzMzM0Mzk0MjI4",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-bug",
      "name": "T-bug",
      "color": "d73a4a",
      "default": false,
      "description": "Type: bug"
    },
    {
      "id": 3703752787,
      "node_id": "LA_kwDOGBlvNc7cwshT",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/C-forge",
      "name": "C-forge",
      "color": "5319E7",
      "default": false,
      "description": "Command: forge"
    },
    {
      "id": 3703752960,
      "node_id": "LA_kwDOGBlvNc7cwskA",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/A-cheatcodes",
      "name": "A-cheatcodes",
      "color": "FBCA04",
      "default": false,
      "description": "Area: cheatcodes"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2023-01-08T21:19:42Z",
  "updated_at": "2023-01-12T01:03:20Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "### Component\n\nForge\n\n### Have you ensured that all of these are up to date?\n\n- [X] Foundry\n- [X] Foundryup\n\n### What version of Foundry are you on?\n\nforge 0.2.0 (a44aa13 2023-01-08T00:10:33.192637Z)\n\n### What command(s) is the bug in?\n\nforge test --fork-url https://eth-mainnet.g.alchemy.com/v2/<INSERT_ALCHEMY_KEY> -vvvv\n\n### Operating System\n\nmacOS (Apple Silicon)\n\n### Describe the bug\n\nWhen I `etch` my code to an existing contract address (to simulate using a new version of implementation logic for a clone factory), calls to that from existing clones & from existing contracts that aren't re-deployed in my test, do not reference the etched logic, instead using the actually deployed code.\r\n\r\nFor this, I'm etching an address with a new version & coopting existing clones, etching them  also. When initializing the new clone, it doesn't contain that new value. \r\n\r\nhttps://github.com/ZrowGz/foundry-etch-issue.git\r\n\r\nReadme from the attached repro repo:\r\n- This should deploy the contracts being tested & etch the code to overwrite the existing logic for those contracts. \r\n- It also mocks taking control of two pre-existing convex-frax vaults to be able to have their validity checked against the `vaultMap` variable stored in one of the convex contracts. \r\n- The implementation logic where the cloned vaults originates from is at eth mainnet address: 0x03fb8543E933624b45abdd31987548c0D9892F07\r\n- I etch some new logic to this address.\r\n- Calls from my test directly interact with this fine, but when the call comes from somewhere else, like the on-chain, pre-existing CloneFactory (Convex's Booster), then it uses the logic that is already actually on-chain & NOT the logic I etched to that address.\r\n\r\n- There's two hacky ways around this:\r\n    * First, I can just hardcode some values into the contracts before etching; ones that would have been set by the changed initializer function parameters (the last two params do not exist in real-time deployment).\r\n    * Second option, I can go through the process of re-deploying all other contracts that interact with these & rebuilding the state to have matching variable storage (where necessary), but things like `_pid` in the booster's call to the vault initializer.\r\n\r\n- Optimally, any logic executed at an address that was etched would be ran as if it were always that way.\r\n\r\n- Additionally, I noticed that the state of those & any contract that interacts with it's balances are wiped. It would be dope if etching code to a contract could instead have the option to treat every contract as upgradeable & I could slip the logic in without changing state. I know that's a way bigger lift than the main issue here tho.\r\n![Screenshot 2023-01-08 at 13 18 50](https://user-images.githubusercontent.com/80988768/211219557-8d9124a4-f513-40c3-aac6-145065fe6d53.png)\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/4055/reactions",
    "total_count": 1,
    "+1": 1,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4055/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1374930112",
    "html_url": "https://github.com/foundry-rs/foundry/issues/4055#issuecomment-1374930112",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4055",
    "id": 1374930112,
    "node_id": "IC_kwDOGBlvNc5R88TA",
    "user": {
      "login": "ZrowGz",
      "id": 80988768,
      "node_id": "MDQ6VXNlcjgwOTg4NzY4",
      "avatar_url": "https://avatars.githubusercontent.com/u/80988768?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ZrowGz",
      "html_url": "https://github.com/ZrowGz",
      "followers_url": "https://api.github.com/users/ZrowGz/followers",
      "following_url": "https://api.github.com/users/ZrowGz/following{/other_user}",
      "gists_url": "https://api.github.com/users/ZrowGz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ZrowGz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ZrowGz/subscriptions",
      "organizations_url": "https://api.github.com/users/ZrowGz/orgs",
      "repos_url": "https://api.github.com/users/ZrowGz/repos",
      "events_url": "https://api.github.com/users/ZrowGz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ZrowGz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-08T21:20:58Z",
    "updated_at": "2023-01-08T21:20:58Z",
    "author_association": "NONE",
    "body": "REPRO REPO: https://github.com/ZrowGz/foundry-etch-issue",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1374930112/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1379674941",
    "html_url": "https://github.com/foundry-rs/foundry/issues/4055#issuecomment-1379674941",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4055",
    "id": 1379674941,
    "node_id": "IC_kwDOGBlvNc5SPCs9",
    "user": {
      "login": "ZrowGz",
      "id": 80988768,
      "node_id": "MDQ6VXNlcjgwOTg4NzY4",
      "avatar_url": "https://avatars.githubusercontent.com/u/80988768?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ZrowGz",
      "html_url": "https://github.com/ZrowGz",
      "followers_url": "https://api.github.com/users/ZrowGz/followers",
      "following_url": "https://api.github.com/users/ZrowGz/following{/other_user}",
      "gists_url": "https://api.github.com/users/ZrowGz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ZrowGz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ZrowGz/subscriptions",
      "organizations_url": "https://api.github.com/users/ZrowGz/orgs",
      "repos_url": "https://api.github.com/users/ZrowGz/repos",
      "events_url": "https://api.github.com/users/ZrowGz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ZrowGz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-12T01:00:49Z",
    "updated_at": "2023-01-12T01:03:20Z",
    "author_association": "NONE",
    "body": "I came across something else that was happening. I wasn't getting this a couple weeks ago:\r\n- When I etch logic to an address, I was getting an error caused by the deletion (in the new code), which was causing it to have the classic proxy upgrade storage slot collision. \r\n\r\nIt was like this (I'll add that part of the code into the repro repo):\r\n\r\nold/on-chain logic:\r\n```\r\nstruct Stake {\r\n  bytes32 id;\r\n  uint256 startTime;\r\n  uint256 amount;\r\n  uint256 endTime;\r\n  uint256 bonus;\r\n}\r\n```\r\n\r\nnew etched logic:\r\n```\r\nstruct Stake {\r\n  uint256 startTime;\r\n  uint256 amount;\r\n  uint256 endTime;\r\n  uint256 bonus;\r\n}\r\n```\r\n\r\nMy hacky work around was to just put back that first value into the struct & not name it, to prevent the storage collisions so that it looked like this:\r\n```\r\nstruct Stake {\r\n  bytes32; // unused in the new version\r\n  uint256 startTime;\r\n  uint256 amount;\r\n  uint256 endTime;\r\n  uint256 bonus;\r\n}\r\n```\r\n\r\nWhen a function was accessing `Stake.endTime` in the new code, the value it was pulling out was actually the `amount` as everything had shifted up. These contracts weren't an upgrade, it was an etch. So the state of that address should have been wiped clean. \r\n\r\nA couple weeks ago, that did not happen. It also didn't preserve the state, with user balances as I had to create new balances in the testing setUp. This time, just like how it didn't overwrite the struct storage with the newly etched version, it also still retained existing user balances.\r\n\r\nPerhaps easier than this repro would be to look at the testing repository I had created [here](https://github.com/ZrowGz/frax-transfers-testing.git)\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1379674941/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
