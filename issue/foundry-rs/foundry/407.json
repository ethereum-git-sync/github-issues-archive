{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/407",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/407/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/407/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/407/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/407",
  "id": 1097155944,
  "node_id": "I_kwDOGBlvNc5BZUVo",
  "number": 407,
  "title": "forge: Reusable Test Suites",
  "user": {
    "login": "leeren",
    "id": 5714233,
    "node_id": "MDQ6VXNlcjU3MTQyMzM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5714233?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/leeren",
    "html_url": "https://github.com/leeren",
    "followers_url": "https://api.github.com/users/leeren/followers",
    "following_url": "https://api.github.com/users/leeren/following{/other_user}",
    "gists_url": "https://api.github.com/users/leeren/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/leeren/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/leeren/subscriptions",
    "organizations_url": "https://api.github.com/users/leeren/orgs",
    "repos_url": "https://api.github.com/users/leeren/repos",
    "events_url": "https://api.github.com/users/leeren/events{/privacy}",
    "received_events_url": "https://api.github.com/users/leeren/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 11,
  "created_at": "2022-01-09T10:11:11Z",
  "updated_at": "2022-01-12T20:12:42Z",
  "closed_at": "2022-01-11T11:33:23Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "Often it is helpful to run the same suite of tests across multiple contracts or fixtures. One primary example of this is testing public functions across multiple contracts sharing the same interface. \r\n\r\nWith tools like HardHat, this is easy to do using Mocha by plugging our fixture as a reusable input to our test suites:\r\n\r\n```typescript\r\n// EXAMPLE: Testing two contracts sharing the same interface `TestInterface`\r\nfunction shouldBehaveLikeTestInterface(): void {\r\n  describe(\"TestInterface functionality\", () => {  \r\n     // Testing expected TestInterface behavior\r\n  });\r\n}\r\n\r\ndescribe(\"ContractA\", () => {\r\n   this.contract = await loadFixture(contractAFixture);\r\n   shouldBehaveLikeTestInterface();\r\n});\r\n\r\ndescribe(\"ContractB\", () => {\r\n   this.contract = await loadFixture(contractBFixture);\r\n   shouldBehaveLikeTestInterface();\r\n});\r\n```\r\n\r\nHow should Foundry be used for similar invocations of reusable test suites?",
  "closed_by": {
    "login": "gakonst",
    "id": 17802178,
    "node_id": "MDQ6VXNlcjE3ODAyMTc4",
    "avatar_url": "https://avatars.githubusercontent.com/u/17802178?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/gakonst",
    "html_url": "https://github.com/gakonst",
    "followers_url": "https://api.github.com/users/gakonst/followers",
    "following_url": "https://api.github.com/users/gakonst/following{/other_user}",
    "gists_url": "https://api.github.com/users/gakonst/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/gakonst/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gakonst/subscriptions",
    "organizations_url": "https://api.github.com/users/gakonst/orgs",
    "repos_url": "https://api.github.com/users/gakonst/repos",
    "events_url": "https://api.github.com/users/gakonst/events{/privacy}",
    "received_events_url": "https://api.github.com/users/gakonst/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/407/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/407/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1008291455",
    "html_url": "https://github.com/foundry-rs/foundry/issues/407#issuecomment-1008291455",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/407",
    "id": 1008291455,
    "node_id": "IC_kwDOGBlvNc48GU5_",
    "user": {
      "login": "gakonst",
      "id": 17802178,
      "node_id": "MDQ6VXNlcjE3ODAyMTc4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17802178?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gakonst",
      "html_url": "https://github.com/gakonst",
      "followers_url": "https://api.github.com/users/gakonst/followers",
      "following_url": "https://api.github.com/users/gakonst/following{/other_user}",
      "gists_url": "https://api.github.com/users/gakonst/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gakonst/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gakonst/subscriptions",
      "organizations_url": "https://api.github.com/users/gakonst/orgs",
      "repos_url": "https://api.github.com/users/gakonst/repos",
      "events_url": "https://api.github.com/users/gakonst/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gakonst/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-09T12:48:11Z",
    "updated_at": "2022-01-11T11:22:43Z",
    "author_association": "MEMBER",
    "body": "Can the behavior you're describing be achieved with this pattern?\r\n\r\n```solidity\r\npragma solidity 0.8.10;\r\n\r\ninterface IContract { function foo() external; }\r\n\r\n// your 2 implementations\r\ncontract A is IContract { function foo() public {  } }\r\ncontract B is IContract { function foo() public {  } }\r\n\r\n// the shared test suite\r\nabstract contract Tests {\r\n          IContract myContract;\r\n          // this function is part of any contract that inherits `Tests`\r\n          function testFoo() public { myContract.foo(); }\r\n}\r\n\r\ncontract ATests is Tests {\r\n         function setUp() public {\r\n                  myContract = IContract(address(new A()));\r\n         }\r\n}\r\n\r\ncontract BTests is Tests {\r\n         function setUp() public {\r\n                  myContract = IContract(address(new B()));\r\n         }\r\n}\r\n\r\n```\r\n\r\nI think that this would execute testFoo() for both ATests and BTests, but with `A` for the one case and `B` for the other?\r\n\r\nYou effectively use the inheritance to re-expose shared test functions to other contracts, and you instantiate the shared test functions differently by having a different contract implementation that satisfies the interface",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1008291455/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1008427414",
    "html_url": "https://github.com/foundry-rs/foundry/issues/407#issuecomment-1008427414",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/407",
    "id": 1008427414,
    "node_id": "IC_kwDOGBlvNc48G2GW",
    "user": {
      "login": "leeren",
      "id": 5714233,
      "node_id": "MDQ6VXNlcjU3MTQyMzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5714233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/leeren",
      "html_url": "https://github.com/leeren",
      "followers_url": "https://api.github.com/users/leeren/followers",
      "following_url": "https://api.github.com/users/leeren/following{/other_user}",
      "gists_url": "https://api.github.com/users/leeren/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/leeren/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/leeren/subscriptions",
      "organizations_url": "https://api.github.com/users/leeren/orgs",
      "repos_url": "https://api.github.com/users/leeren/repos",
      "events_url": "https://api.github.com/users/leeren/events{/privacy}",
      "received_events_url": "https://api.github.com/users/leeren/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-09T21:28:52Z",
    "updated_at": "2022-01-09T21:29:52Z",
    "author_association": "NONE",
    "body": "@gakonst this works perfectly! Thank you. Can test output be constrained to that of implementing contracts under this inheritance-style testing approach? Running Forge with the above structure yields the following:\r\n\r\n```bash\r\nRunning 2 tests for \"ATest.json\":ATest\r\n[PASS] testX() (gas: 9453)\r\n[PASS] testY() (gas: 5500)\r\n\r\nRunning 2 tests for \"BTest.json\":BTest\r\n[PASS] testX() (gas: 9453)\r\n[PASS] testY() (gas: 5500)\r\n\r\nRunning 2 tests for \"Test.json\":Test\r\n[PASS] testX() (gas: 64)\r\n[PASS] testY() (gas: 64)\r\n```\r\n\r\nIdeally I'd like to constrain output to just the first two contracts, especially since `Test` is an abstract contract here (so `PASS` is sort of misleading too). ",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1008427414/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1008435094",
    "html_url": "https://github.com/foundry-rs/foundry/issues/407#issuecomment-1008435094",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/407",
    "id": 1008435094,
    "node_id": "IC_kwDOGBlvNc48G3-W",
    "user": {
      "login": "gakonst",
      "id": 17802178,
      "node_id": "MDQ6VXNlcjE3ODAyMTc4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17802178?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gakonst",
      "html_url": "https://github.com/gakonst",
      "followers_url": "https://api.github.com/users/gakonst/followers",
      "following_url": "https://api.github.com/users/gakonst/following{/other_user}",
      "gists_url": "https://api.github.com/users/gakonst/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gakonst/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gakonst/subscriptions",
      "organizations_url": "https://api.github.com/users/gakonst/orgs",
      "repos_url": "https://api.github.com/users/gakonst/repos",
      "events_url": "https://api.github.com/users/gakonst/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gakonst/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-09T22:19:57Z",
    "updated_at": "2022-01-09T22:20:04Z",
    "author_association": "MEMBER",
    "body": "Have you marked it as `abstract contract` in your tests? If not, then it seems like we should filter abstract contracts out in multi_runner.rs",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1008435094/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1008446185",
    "html_url": "https://github.com/foundry-rs/foundry/issues/407#issuecomment-1008446185",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/407",
    "id": 1008446185,
    "node_id": "IC_kwDOGBlvNc48G6rp",
    "user": {
      "login": "leeren",
      "id": 5714233,
      "node_id": "MDQ6VXNlcjU3MTQyMzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5714233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/leeren",
      "html_url": "https://github.com/leeren",
      "followers_url": "https://api.github.com/users/leeren/followers",
      "following_url": "https://api.github.com/users/leeren/following{/other_user}",
      "gists_url": "https://api.github.com/users/leeren/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/leeren/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/leeren/subscriptions",
      "organizations_url": "https://api.github.com/users/leeren/orgs",
      "repos_url": "https://api.github.com/users/leeren/repos",
      "events_url": "https://api.github.com/users/leeren/events{/privacy}",
      "received_events_url": "https://api.github.com/users/leeren/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-09T23:28:03Z",
    "updated_at": "2022-01-09T23:28:03Z",
    "author_association": "NONE",
    "body": "@gakonst Yes, I did. Seems like that's the right solution! Unfortunately I'm not familiar with Rust - hopefully it's an easy fix?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1008446185/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1008457526",
    "html_url": "https://github.com/foundry-rs/foundry/issues/407#issuecomment-1008457526",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/407",
    "id": 1008457526,
    "node_id": "IC_kwDOGBlvNc48G9c2",
    "user": {
      "login": "gakonst",
      "id": 17802178,
      "node_id": "MDQ6VXNlcjE3ODAyMTc4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17802178?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gakonst",
      "html_url": "https://github.com/gakonst",
      "followers_url": "https://api.github.com/users/gakonst/followers",
      "following_url": "https://api.github.com/users/gakonst/following{/other_user}",
      "gists_url": "https://api.github.com/users/gakonst/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gakonst/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gakonst/subscriptions",
      "organizations_url": "https://api.github.com/users/gakonst/orgs",
      "repos_url": "https://api.github.com/users/gakonst/repos",
      "events_url": "https://api.github.com/users/gakonst/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gakonst/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-10T00:30:37Z",
    "updated_at": "2022-01-10T00:30:37Z",
    "author_association": "MEMBER",
    "body": "I think we probably should skip deployment if the contract's bytecode is empty? Try adding a check on bytecode .is_empty / len!=0 [here](https://github.com/gakonst/foundry/blob/master/forge/src/multi_runner.rs#L67-L73)",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1008457526/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1008526177",
    "html_url": "https://github.com/foundry-rs/foundry/issues/407#issuecomment-1008526177",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/407",
    "id": 1008526177,
    "node_id": "IC_kwDOGBlvNc48HONh",
    "user": {
      "login": "leeren",
      "id": 5714233,
      "node_id": "MDQ6VXNlcjU3MTQyMzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5714233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/leeren",
      "html_url": "https://github.com/leeren",
      "followers_url": "https://api.github.com/users/leeren/followers",
      "following_url": "https://api.github.com/users/leeren/following{/other_user}",
      "gists_url": "https://api.github.com/users/leeren/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/leeren/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/leeren/subscriptions",
      "organizations_url": "https://api.github.com/users/leeren/orgs",
      "repos_url": "https://api.github.com/users/leeren/repos",
      "events_url": "https://api.github.com/users/leeren/events{/privacy}",
      "received_events_url": "https://api.github.com/users/leeren/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-10T04:06:28Z",
    "updated_at": "2022-01-10T04:06:28Z",
    "author_association": "NONE",
    "body": "That sounds right to me. Hopefully another maintainer can chime in.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1008526177/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1009267515",
    "html_url": "https://github.com/foundry-rs/foundry/issues/407#issuecomment-1009267515",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/407",
    "id": 1009267515,
    "node_id": "IC_kwDOGBlvNc48KDM7",
    "user": {
      "login": "wilsoncusack",
      "id": 6678357,
      "node_id": "MDQ6VXNlcjY2NzgzNTc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6678357?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wilsoncusack",
      "html_url": "https://github.com/wilsoncusack",
      "followers_url": "https://api.github.com/users/wilsoncusack/followers",
      "following_url": "https://api.github.com/users/wilsoncusack/following{/other_user}",
      "gists_url": "https://api.github.com/users/wilsoncusack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wilsoncusack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wilsoncusack/subscriptions",
      "organizations_url": "https://api.github.com/users/wilsoncusack/orgs",
      "repos_url": "https://api.github.com/users/wilsoncusack/repos",
      "events_url": "https://api.github.com/users/wilsoncusack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wilsoncusack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-10T19:24:27Z",
    "updated_at": "2022-01-10T19:24:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "> I think we probably should skip deployment if the contract's bytecode is empty? Try adding a check on bytecode .is_empty / len!=0 [here](https://github.com/gakonst/foundry/blob/master/forge/src/multi_runner.rs#L67-L73)\r\n\r\nSeems like kinda a blunt way to do this? I have created dummy empty contracts for test before. Can we not detect if it is marked abstract? ",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1009267515/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1009281324",
    "html_url": "https://github.com/foundry-rs/foundry/issues/407#issuecomment-1009281324",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/407",
    "id": 1009281324,
    "node_id": "IC_kwDOGBlvNc48KGks",
    "user": {
      "login": "gakonst",
      "id": 17802178,
      "node_id": "MDQ6VXNlcjE3ODAyMTc4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17802178?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gakonst",
      "html_url": "https://github.com/gakonst",
      "followers_url": "https://api.github.com/users/gakonst/followers",
      "following_url": "https://api.github.com/users/gakonst/following{/other_user}",
      "gists_url": "https://api.github.com/users/gakonst/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gakonst/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gakonst/subscriptions",
      "organizations_url": "https://api.github.com/users/gakonst/orgs",
      "repos_url": "https://api.github.com/users/gakonst/repos",
      "events_url": "https://api.github.com/users/gakonst/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gakonst/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-10T19:43:03Z",
    "updated_at": "2022-01-10T19:43:03Z",
    "author_association": "MEMBER",
    "body": "I think the dummy empty contracts still have non-empty bytecode, whereas an abstract contract actually has 0 bytecode? So it should be fine?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1009281324/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1009292441",
    "html_url": "https://github.com/foundry-rs/foundry/issues/407#issuecomment-1009292441",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/407",
    "id": 1009292441,
    "node_id": "IC_kwDOGBlvNc48KJSZ",
    "user": {
      "login": "wilsoncusack",
      "id": 6678357,
      "node_id": "MDQ6VXNlcjY2NzgzNTc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6678357?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wilsoncusack",
      "html_url": "https://github.com/wilsoncusack",
      "followers_url": "https://api.github.com/users/wilsoncusack/followers",
      "following_url": "https://api.github.com/users/wilsoncusack/following{/other_user}",
      "gists_url": "https://api.github.com/users/wilsoncusack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wilsoncusack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wilsoncusack/subscriptions",
      "organizations_url": "https://api.github.com/users/wilsoncusack/orgs",
      "repos_url": "https://api.github.com/users/wilsoncusack/repos",
      "events_url": "https://api.github.com/users/wilsoncusack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wilsoncusack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-10T19:59:13Z",
    "updated_at": "2022-01-10T19:59:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "ah ok, my lack of understanding ",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1009292441/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1009875192",
    "html_url": "https://github.com/foundry-rs/foundry/issues/407#issuecomment-1009875192",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/407",
    "id": 1009875192,
    "node_id": "IC_kwDOGBlvNc48MXj4",
    "user": {
      "login": "gakonst",
      "id": 17802178,
      "node_id": "MDQ6VXNlcjE3ODAyMTc4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17802178?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gakonst",
      "html_url": "https://github.com/gakonst",
      "followers_url": "https://api.github.com/users/gakonst/followers",
      "following_url": "https://api.github.com/users/gakonst/following{/other_user}",
      "gists_url": "https://api.github.com/users/gakonst/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gakonst/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gakonst/subscriptions",
      "organizations_url": "https://api.github.com/users/gakonst/orgs",
      "repos_url": "https://api.github.com/users/gakonst/repos",
      "events_url": "https://api.github.com/users/gakonst/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gakonst/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-11T11:33:38Z",
    "updated_at": "2022-01-11T11:33:45Z",
    "author_association": "MEMBER",
    "body": "@leeren should be fixed now in master - lmk if any problems arise",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1009875192/reactions",
      "total_count": 2,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 2,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1011412437",
    "html_url": "https://github.com/foundry-rs/foundry/issues/407#issuecomment-1011412437",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/407",
    "id": 1011412437,
    "node_id": "IC_kwDOGBlvNc48SO3V",
    "user": {
      "login": "leeren",
      "id": 5714233,
      "node_id": "MDQ6VXNlcjU3MTQyMzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5714233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/leeren",
      "html_url": "https://github.com/leeren",
      "followers_url": "https://api.github.com/users/leeren/followers",
      "following_url": "https://api.github.com/users/leeren/following{/other_user}",
      "gists_url": "https://api.github.com/users/leeren/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/leeren/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/leeren/subscriptions",
      "organizations_url": "https://api.github.com/users/leeren/orgs",
      "repos_url": "https://api.github.com/users/leeren/repos",
      "events_url": "https://api.github.com/users/leeren/events{/privacy}",
      "received_events_url": "https://api.github.com/users/leeren/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-12T20:12:42Z",
    "updated_at": "2022-01-12T20:12:42Z",
    "author_association": "NONE",
    "body": "Amazing, thank you!",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1011412437/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
