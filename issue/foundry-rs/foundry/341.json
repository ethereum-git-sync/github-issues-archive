{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/341",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/341/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/341/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/341/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/341",
  "id": 1091568968,
  "node_id": "I_kwDOGBlvNc5BEAVI",
  "number": 341,
  "title": "Fuzzing with uints smaller than `uint256` includes max-value + 1 as fuzzed value",
  "user": {
    "login": "LHerskind",
    "id": 16536249,
    "node_id": "MDQ6VXNlcjE2NTM2MjQ5",
    "avatar_url": "https://avatars.githubusercontent.com/u/16536249?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/LHerskind",
    "html_url": "https://github.com/LHerskind",
    "followers_url": "https://api.github.com/users/LHerskind/followers",
    "following_url": "https://api.github.com/users/LHerskind/following{/other_user}",
    "gists_url": "https://api.github.com/users/LHerskind/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/LHerskind/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/LHerskind/subscriptions",
    "organizations_url": "https://api.github.com/users/LHerskind/orgs",
    "repos_url": "https://api.github.com/users/LHerskind/repos",
    "events_url": "https://api.github.com/users/LHerskind/events{/privacy}",
    "received_events_url": "https://api.github.com/users/LHerskind/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3334394228,
      "node_id": "MDU6TGFiZWwzMzM0Mzk0MjI4",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-bug",
      "name": "T-bug",
      "color": "d73a4a",
      "default": false,
      "description": "Type: bug"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2021-12-31T13:19:22Z",
  "updated_at": "2022-01-02T19:04:28Z",
  "closed_at": "2022-01-02T19:04:28Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "When fuzzing with a `uint` smaller than `uint256`, the fuzzer seems to also include the `2**size` value, meaning that tests as below will return a counter-example with `type(uint40).max + 1 = 2**40 = 1099511627776` as input. The same test in DappTools runs as expected, with no counter examples. Similar is the case for `uint248` etc.\r\n\r\n```solidity\r\nfunction test_limits(uint40 a) public {\r\n    assertLe(a, type(uint40).max);\r\n}\r\n```",
  "closed_by": {
    "login": "gakonst",
    "id": 17802178,
    "node_id": "MDQ6VXNlcjE3ODAyMTc4",
    "avatar_url": "https://avatars.githubusercontent.com/u/17802178?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/gakonst",
    "html_url": "https://github.com/gakonst",
    "followers_url": "https://api.github.com/users/gakonst/followers",
    "following_url": "https://api.github.com/users/gakonst/following{/other_user}",
    "gists_url": "https://api.github.com/users/gakonst/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/gakonst/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gakonst/subscriptions",
    "organizations_url": "https://api.github.com/users/gakonst/orgs",
    "repos_url": "https://api.github.com/users/gakonst/repos",
    "events_url": "https://api.github.com/users/gakonst/events{/privacy}",
    "received_events_url": "https://api.github.com/users/gakonst/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/341/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/341/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1003425602",
    "html_url": "https://github.com/foundry-rs/foundry/issues/341#issuecomment-1003425602",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/341",
    "id": 1003425602,
    "node_id": "IC_kwDOGBlvNc47zw9C",
    "user": {
      "login": "gakonst",
      "id": 17802178,
      "node_id": "MDQ6VXNlcjE3ODAyMTc4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17802178?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gakonst",
      "html_url": "https://github.com/gakonst",
      "followers_url": "https://api.github.com/users/gakonst/followers",
      "following_url": "https://api.github.com/users/gakonst/following{/other_user}",
      "gists_url": "https://api.github.com/users/gakonst/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gakonst/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gakonst/subscriptions",
      "organizations_url": "https://api.github.com/users/gakonst/orgs",
      "repos_url": "https://api.github.com/users/gakonst/repos",
      "events_url": "https://api.github.com/users/gakonst/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gakonst/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-12-31T17:44:26Z",
    "updated_at": "2021-12-31T17:44:26Z",
    "author_association": "MEMBER",
    "body": "Ah this seems to be happening because of [this](https://github.com/gakonst/foundry/blob/master/evm-adapters/src/fuzz.rs#L244-L266):\r\n\r\n```\r\n3..=4 => any::<u32>().prop_map(|x| x.into_token()).boxed(),\r\n            5..=8 => any::<u64>().prop_map(|x| x.into_token()).boxed(),\r\n            9..=16 => any::<u128>().prop_map(|x| x.into_token()).boxed(),\r\n            17..=32 => any::<[u8; 32]>().prop_map(|x| U256::from(&x).into_token()).boxed(),\r\n```\r\n\r\nSo `uint40` falls in the `5..=8` branch but uses `u64` as its values, which may result in a larger raw value than 2**40.\r\n\r\nShould we be doing `5 => any::<u64>().prop_map(|x| (x % 2 ** 40).into_token()).boxed()` instead?\r\n\r\nI would've expected that Solidity generates code that masks out any hex data that maps to >=2**40 here?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1003425602/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1003439071",
    "html_url": "https://github.com/foundry-rs/foundry/issues/341#issuecomment-1003439071",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/341",
    "id": 1003439071,
    "node_id": "IC_kwDOGBlvNc47z0Pf",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-12-31T19:19:34Z",
    "updated_at": "2021-12-31T19:19:34Z",
    "author_association": "COLLABORATOR",
    "body": "> I would've expected that Solidity generates code that masks out any hex data that maps to >=2**40 here?\r\n\r\nYea, I'm surprised this failure case happens, I'd expect it to wrap the number to the correct range or revert with an out of bounds error. Maybe a bug somewhere? Probably worth investigating this\r\n\r\n> Should we be doing `5 => any::<u64>().prop_map(|x| (x % 2 ** 40).into_token()).boxed()` instead?\r\n\r\nThis will introduce a modulo bias where values of `0–2e29` are twice as likely to occur than values from `2e29–type(uint40).max` (the severity of the bias will of course changes as the values change). There's two better approaches you could use here:\r\n- The simplest approach—which minimizes, but doesn't remove, modulo bias—is to always generate the random number from the largest available range (uint256) and wrap it to the provided uint size with `x % 2 ** n`.\r\n- To remove all bias you'd want to use rejection sampling and re-sample when out of range. Good article [here](https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/) with sample code and info on how to minimize the number of rejections",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1003439071/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
