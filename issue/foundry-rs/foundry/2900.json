{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/2900",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2900/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2900/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2900/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/2900",
  "id": 1347986237,
  "node_id": "I_kwDOGBlvNc5QWKM9",
  "number": 2900,
  "title": "Ability to detect different \"environments\" in scripts/tests",
  "user": {
    "login": "0xPhaze",
    "id": 103113487,
    "node_id": "U_kgDOBiVjDw",
    "avatar_url": "https://avatars.githubusercontent.com/u/103113487?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/0xPhaze",
    "html_url": "https://github.com/0xPhaze",
    "followers_url": "https://api.github.com/users/0xPhaze/followers",
    "following_url": "https://api.github.com/users/0xPhaze/following{/other_user}",
    "gists_url": "https://api.github.com/users/0xPhaze/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/0xPhaze/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/0xPhaze/subscriptions",
    "organizations_url": "https://api.github.com/users/0xPhaze/orgs",
    "repos_url": "https://api.github.com/users/0xPhaze/repos",
    "events_url": "https://api.github.com/users/0xPhaze/events{/privacy}",
    "received_events_url": "https://api.github.com/users/0xPhaze/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3593644820,
      "node_id": "LA_kwDOGBlvNc7WMqsU",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-feature",
      "name": "T-feature",
      "color": "BFD4F2",
      "default": false,
      "description": "Type: feature"
    },
    {
      "id": 3593644915,
      "node_id": "LA_kwDOGBlvNc7WMqtz",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/Cmd-forge-test",
      "name": "Cmd-forge-test",
      "color": "006B75",
      "default": false,
      "description": "Command: forge test"
    },
    {
      "id": 3703752787,
      "node_id": "LA_kwDOGBlvNc7cwshT",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/C-forge",
      "name": "C-forge",
      "color": "5319E7",
      "default": false,
      "description": "Command: forge"
    },
    {
      "id": 3703752960,
      "node_id": "LA_kwDOGBlvNc7cwskA",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/A-cheatcodes",
      "name": "A-cheatcodes",
      "color": "FBCA04",
      "default": false,
      "description": "Area: cheatcodes"
    },
    {
      "id": 4182991461,
      "node_id": "LA_kwDOGBlvNc75U2Jl",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/Cmd-forge-script",
      "name": "Cmd-forge-script",
      "color": "006B75",
      "default": false,
      "description": "Command: forge script"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 13,
  "created_at": "2022-08-23T13:44:34Z",
  "updated_at": "2023-08-22T02:50:33Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "### Component\r\n\r\nForge\r\n\r\n### Describe the feature you would like\r\n\r\nI'm working on a more complex setup that includes a bunch of `ffi` sanity checks and post-deploy scripts. It would be great if I could somehow be able to detect when `--broadcast` is enabled so that I see the current script run as a \"dry-run\" and not actually overwrite my current deployments.\r\n\r\nOther use-cases include disabling a bunch of these sanity checks (which take up a lot of extra time) by passing in some user-argument.\r\n\r\nThere actually seems to be no easy way to discern different \"modes\", like (e.g. dry-run, or other user-defined parameters).\r\nRunning `DRY_RUN=true && forge script deploy` doesn't let me read `DRY_RUN` through `vm.getEnv`, because it's not in the default `.env` file. The closest I've gotten is to being able to detect `--ffi` through a `try vm.ffi() {} catch {}`, which somewhat works for my use-case for now, by always enforcing it to be set to true when broadcasting.\r\n\r\nSome things that would be helpful for me include:\r\n- being able to detect `--broadcast`\r\n- being able to read env vars passed in as `DRY_RUN=true && forge script deploy`\r\n- being able to pass in a different environment `--env .env-test`\r\n- being able to read additional .toml settings (and then running via `FOUNDRY_PROFILE=mainnet-dry-run && forge script deploy`)\r\n\r\nI think most helpful and straightforward would be nr2 or nr3.\r\nJust curious if anyone else has found the need for something like this.\r\n\r\n### Additional context\r\n\r\nEdit:\r\nDecided to add some additional context, because I'm not sure it's really clear what I'm asking for.\r\nBelow is my setup, and I'm basically using (abusing) `--ffi` as a way to determine `DRY_RUN=true`, since this has to be enabled anyway to run some of my sanity checks.\r\n\r\n```solidity\r\ncontract deploy is DeployScripts {\r\n    function isFFIEnabled() internal returns (bool) {\r\n        string[] memory script = new string[](1);\r\n        script[0] = \"echo\";\r\n        try vm.ffi(script) {\r\n            return true;\r\n        } catch {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function startBroadcastIfFFIEnabled() internal {\r\n        if (isFFIEnabled()) {\r\n            vm.startBroadcast();\r\n        } else {\r\n            console.log('FFI disabled: run again with `--ffi` to save deployments and run storage compatibility checks.');\r\n            console.log('Disabling `broadcast`, continuing as a \"dry-run\".\\n');\r\n\r\n            __DEPLOY_SCRIPTS_DRY_RUN = true;\r\n\r\n            // need to start prank instead now to be consistent in \"dry-run\"\r\n            vm.stopBroadcast();\r\n            vm.startPrank(msg.sender);\r\n        }\r\n    }\r\n\r\n    function run() external {\r\n        startBroadcastIfFFIEnabled();\r\n\r\n        setUpContracts();\r\n\r\n        if (isTestnet()) initContractsCITEST();\r\n        else initContractsCI();\r\n\r\n        vm.stopBroadcast();\r\n\r\n        logRegisteredContracts();\r\n\r\n        if (!__DEPLOY_SCRIPTS_DRY_RUN) {\r\n            string memory json = getRegisteredContractsJson();\r\n\r\n            vm.writeFile(getDeploymentsPath(string.concat(\"deploy-latest.json\")), json);\r\n            vm.writeFile(getDeploymentsPath(string.concat(\"deploy-\", vm.toString(block.timestamp), \".json\")), json);\r\n        }\r\n    }\r\n}\r\n```",
  "closed_by": {
    "login": "0xPhaze",
    "id": 103113487,
    "node_id": "U_kgDOBiVjDw",
    "avatar_url": "https://avatars.githubusercontent.com/u/103113487?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/0xPhaze",
    "html_url": "https://github.com/0xPhaze",
    "followers_url": "https://api.github.com/users/0xPhaze/followers",
    "following_url": "https://api.github.com/users/0xPhaze/following{/other_user}",
    "gists_url": "https://api.github.com/users/0xPhaze/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/0xPhaze/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/0xPhaze/subscriptions",
    "organizations_url": "https://api.github.com/users/0xPhaze/orgs",
    "repos_url": "https://api.github.com/users/0xPhaze/repos",
    "events_url": "https://api.github.com/users/0xPhaze/events{/privacy}",
    "received_events_url": "https://api.github.com/users/0xPhaze/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/2900/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2900/timeline",
  "performed_via_github_app": null,
  "state_reason": "reopened"
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1225696844",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2900#issuecomment-1225696844",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2900",
    "id": 1225696844,
    "node_id": "IC_kwDOGBlvNc5JDqZM",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-24T13:02:51Z",
    "updated_at": "2022-08-24T13:02:51Z",
    "author_association": "COLLABORATOR",
    "body": "What foundry version are you on? Reading env vars works as expected for me with the latest nightly, `forge 0.2.0 (4e11d1f 2022-08-24T00:12:55.883067Z)`, so I think you may just need to fix your setup a bit:\r\n\r\n> being able to detect --broadcast\r\n\r\nThis isn't natively supported, but you can work around with a command runner/script, e.g. if `DRY_RUN=true`, don't append `--broadcast` to the command, otherwise append it\r\n\r\n> being able to read env vars passed in as DRY_RUN=true && forge script <path>\r\n\r\nRemove the `&&` and it will read your env var: `DRY_RUN=true forge script <path>`\r\n\r\nAlternative, put the env var in a `.env` file and foundry picks it up automatically\r\n\r\n> being able to pass in a different environment --env .env-test\r\n\r\nadd `export DRY_RUN=true` to `.env-test` then run `source .env-test; forge script <path>` and it will pick up that env var\r\n\r\n> being able to read additional .toml settings (and then running via `FOUNDRY_PROFILE=mainnet-dry-run && forge script deploy`)\r\n\r\nI'm not sure I understand the use case here / what you're trying to do 😅",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1225696844/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1225994898",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2900#issuecomment-1225994898",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2900",
    "id": 1225994898,
    "node_id": "IC_kwDOGBlvNc5JEzKS",
    "user": {
      "login": "0xPhaze",
      "id": 103113487,
      "node_id": "U_kgDOBiVjDw",
      "avatar_url": "https://avatars.githubusercontent.com/u/103113487?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/0xPhaze",
      "html_url": "https://github.com/0xPhaze",
      "followers_url": "https://api.github.com/users/0xPhaze/followers",
      "following_url": "https://api.github.com/users/0xPhaze/following{/other_user}",
      "gists_url": "https://api.github.com/users/0xPhaze/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/0xPhaze/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/0xPhaze/subscriptions",
      "organizations_url": "https://api.github.com/users/0xPhaze/orgs",
      "repos_url": "https://api.github.com/users/0xPhaze/repos",
      "events_url": "https://api.github.com/users/0xPhaze/events{/privacy}",
      "received_events_url": "https://api.github.com/users/0xPhaze/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-24T17:01:50Z",
    "updated_at": "2022-08-24T17:01:50Z",
    "author_association": "NONE",
    "body": "Ok, I don't know when I started using the `&&` in the script. Yeah, you're right, like that reading the environment vars works as expected and that pretty much solves my main issue of being able to tell the script to have a different \"program\".\r\n\r\nI still think it would be great to be able to detect when `--broadcast` is on, because only then do I want to overwrite existing deployment data. Not sure if this is possible. And if not many others see value in this, I'll close this.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1225994898/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1252322661",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2900#issuecomment-1252322661",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2900",
    "id": 1252322661,
    "node_id": "IC_kwDOGBlvNc5KpO1l",
    "user": {
      "login": "adhusson",
      "id": 2977,
      "node_id": "MDQ6VXNlcjI5Nzc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2977?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adhusson",
      "html_url": "https://github.com/adhusson",
      "followers_url": "https://api.github.com/users/adhusson/followers",
      "following_url": "https://api.github.com/users/adhusson/following{/other_user}",
      "gists_url": "https://api.github.com/users/adhusson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adhusson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adhusson/subscriptions",
      "organizations_url": "https://api.github.com/users/adhusson/orgs",
      "repos_url": "https://api.github.com/users/adhusson/repos",
      "events_url": "https://api.github.com/users/adhusson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adhusson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-20T13:02:10Z",
    "updated_at": "2022-09-20T13:02:10Z",
    "author_association": "CONTRIBUTOR",
    "body": "I'd like to resurrect this issue, being able to detect '--broadcast' can be useful for choosing whether to write to a file or not.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1252322661/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1253835822",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2900#issuecomment-1253835822",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2900",
    "id": 1253835822,
    "node_id": "IC_kwDOGBlvNc5KvAQu",
    "user": {
      "login": "KholdStare",
      "id": 836110,
      "node_id": "MDQ6VXNlcjgzNjExMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/836110?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/KholdStare",
      "html_url": "https://github.com/KholdStare",
      "followers_url": "https://api.github.com/users/KholdStare/followers",
      "following_url": "https://api.github.com/users/KholdStare/following{/other_user}",
      "gists_url": "https://api.github.com/users/KholdStare/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/KholdStare/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/KholdStare/subscriptions",
      "organizations_url": "https://api.github.com/users/KholdStare/orgs",
      "repos_url": "https://api.github.com/users/KholdStare/repos",
      "events_url": "https://api.github.com/users/KholdStare/events{/privacy}",
      "received_events_url": "https://api.github.com/users/KholdStare/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-21T14:59:12Z",
    "updated_at": "2022-09-21T15:01:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "@mds1 I'd like to chime and say detecting whether `--broadcast` is enabled is useful.\r\n\r\nIf we take a step back and look at the big picture, we write scripts in foundry to automate some processes on the blockchain. As part of these processes we might have local side effects. For example, writing out the addresses of deployed contracts to a file. If `--broadcast` was off and we only did a simulation, then some local side effects are moot. `--broadcast` is a low-level lever for the high level goal of a \"simulation mode\", and _right now it's up to the user to coordinate \"simulation mode\" flags for their script, as well as \"simulation mode\" for forge itself. This is error prone._\r\n\r\nI would say there needs to be a \"holistic\" way of determining a simulation mode and scripts be aware of it. Presence of the `--broadcast` flag is the most direct way right now, but maybe there's other ways to coordinate this.\r\n\r\nAs an aside, my team is using the upgrade scripts written by @0xPhaze , and the very first thing we ran into was this issue. See https://github.com/0xPhaze/upgrade-scripts/issues/1 .",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1253835822/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1253885530",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2900#issuecomment-1253885530",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2900",
    "id": 1253885530,
    "node_id": "IC_kwDOGBlvNc5KvMZa",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-21T15:38:56Z",
    "updated_at": "2022-09-21T15:38:56Z",
    "author_association": "COLLABORATOR",
    "body": "This seems reasonable to me, I can see the use case. There's currently no script-only cheat codes so maybe setting an env var is the way to go?\r\n\r\nIs there value to generalizing this so this feature (whether a cheat code, env var that's set, etc.) reports the overall state, including:\r\n- Which `forge` command is being run, such as `forge snapshot`, `forge test`, or `forge script`\r\n- Any relevant options such as broadcast or not broadcast, are there others?\r\n\r\nI also don't want to overcomplicate it, so maybe just something like `FOUNDRY_MODE` is set which can be `test`, `snapshot`, `script-dry-run`, `script-broadcast`, etc.\r\n\r\n>  right now it's up to the user to coordinate \"simulation mode\" flags for their script, as well as \"simulation mode\" for forge itself. This is error prone.\r\n\r\nCan you expand on what you mean here, not sure I follow?\r\n\r\nOne last comment is there's also https://github.com/foundry-rs/foundry/issues/3298, which is interesting—if you can inject arbitrary output data into the broadcast logs, is there still a use case for writing your own custom output files? The dry runs are automatically nested into a dry-run folder that's gitignore'd, so maybe #3298 removes the need for this feature?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1253885530/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1254023184",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2900#issuecomment-1254023184",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2900",
    "id": 1254023184,
    "node_id": "IC_kwDOGBlvNc5KvuAQ",
    "user": {
      "login": "KholdStare",
      "id": 836110,
      "node_id": "MDQ6VXNlcjgzNjExMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/836110?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/KholdStare",
      "html_url": "https://github.com/KholdStare",
      "followers_url": "https://api.github.com/users/KholdStare/followers",
      "following_url": "https://api.github.com/users/KholdStare/following{/other_user}",
      "gists_url": "https://api.github.com/users/KholdStare/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/KholdStare/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/KholdStare/subscriptions",
      "organizations_url": "https://api.github.com/users/KholdStare/orgs",
      "repos_url": "https://api.github.com/users/KholdStare/repos",
      "events_url": "https://api.github.com/users/KholdStare/events{/privacy}",
      "received_events_url": "https://api.github.com/users/KholdStare/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-21T17:38:43Z",
    "updated_at": "2022-09-21T17:38:43Z",
    "author_association": "CONTRIBUTOR",
    "body": "\r\n> > right now it's up to the user to coordinate \"simulation mode\" flags for their script, as well as \"simulation mode\" for forge itself. This is error prone.\r\n> \r\n> Can you expand on what you mean here, not sure I follow?\r\n\r\nIf we think about the same situation of \"run script to deploy contracts, and write results to a file\". @0xPhaze mentioned this at the top:\r\n\r\n```\r\nif (!__DEPLOY_SCRIPTS_DRY_RUN) {\r\n    string memory json = getRegisteredContractsJson();\r\n\r\n    vm.writeFile(getDeploymentsPath(string.concat(\"deploy-latest.json\")), json);\r\n}\r\n```\r\n\r\nIf `__DEPLOY_SCRIPTS_DRY_RUN` depends on a user supplied environment variable, it is independent of the `--broadcast` flag. What can happen is, the user forgets to set `__DEPLOY_SCRIPTS_DRY_RUN`, but leaves off the `--broadcast` flag. In that case the deployment doesn't actually happen, but the \"results\" are written as if they did. There is no way for the script to know that.\r\n\r\nThis can be \"worked around\" by wrapping calls in a shell script or something else, but I think that introduces extra complexity on the usability of the tool.\r\n\r\nRegarding https://github.com/foundry-rs/foundry/issues/3298, I'll defer to @0xPhaze on the specifics, but my general feeling is that that is a \"low-level lever\". It gets the information written out somewhere, but may need further processing outside of forge to be useful. I.e. some other script or program that parses those outputs and creates the final \"report\" or script \"output\". IMHO in the longer term, if we want an ecosystem of tooling built with/around foundry, we need some higher-level solutions as well, otherwise we can have too many \"low-level levers\" that everyone has to make work together in their own way. Sorry if that's super vague - I think the those features are great, but there needs to be higher-level strategy to grow the ecosystem to go with them.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1254023184/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1254027299",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2900#issuecomment-1254027299",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2900",
    "id": 1254027299,
    "node_id": "IC_kwDOGBlvNc5KvvAj",
    "user": {
      "login": "0xPhaze",
      "id": 103113487,
      "node_id": "U_kgDOBiVjDw",
      "avatar_url": "https://avatars.githubusercontent.com/u/103113487?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/0xPhaze",
      "html_url": "https://github.com/0xPhaze",
      "followers_url": "https://api.github.com/users/0xPhaze/followers",
      "following_url": "https://api.github.com/users/0xPhaze/following{/other_user}",
      "gists_url": "https://api.github.com/users/0xPhaze/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/0xPhaze/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/0xPhaze/subscriptions",
      "organizations_url": "https://api.github.com/users/0xPhaze/orgs",
      "repos_url": "https://api.github.com/users/0xPhaze/repos",
      "events_url": "https://api.github.com/users/0xPhaze/events{/privacy}",
      "received_events_url": "https://api.github.com/users/0xPhaze/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-21T17:42:44Z",
    "updated_at": "2022-09-21T17:42:44Z",
    "author_association": "NONE",
    "body": "I did think that it could be useful to detect the difference in \"mode\" between test/script, but there are some workarounds to achieve this. Nonetheless, I think having a `FOUNDRY_MODE` env-variable would be great and wouldn't require adding any new cheat-codes. \r\n\r\nI also saw #3298 and thought it was very interesting. I can imagine this would be useful along with `vm.parseJson` being able to parse broadcast files.\r\n\r\nThe custom output files are there to keep an up-to-date list of all deployments. Say 3/4 contracts haven't changed, and only one needs to be re-deployed, I imagine this would be hard to keep track of over multiple files even with #3298.\r\nI also keep track of the contract's creation-code-hash instead of just a code-hash (because of contracts that use immutables) and the storage-layout. If there could be options to keep track and store of these by default, that would be amazing. Also, it would be great if there was a cheat-code to get the latest deployment/transaction data for a broadcasted transaction containing some arbitrary tag.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1254027299/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1256308837",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2900#issuecomment-1256308837",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2900",
    "id": 1256308837,
    "node_id": "IC_kwDOGBlvNc5K4cBl",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-23T14:44:54Z",
    "updated_at": "2022-09-23T14:44:54Z",
    "author_association": "COLLABORATOR",
    "body": "It sounds like we can summarize this issues feature request as adding:\r\n- A `FOUNDRY_MODE` env var that's set with any `forge` invocation (or just ones that run solidity code?) \r\n- IMO we should make it a 32 byte hex string with values like `keccack256(abi.encode(\"test\"))` (easier than strings for comparison purposes)\r\n- Then it can be accessed in tests/scripts with `vm.envBytes32(\"FOUNDRY_MODE\")`, and forge-std can have a `StdMode` library so you can just do things like this:\r\n\r\n```solidity\r\nbytes mode = vm.envBytes32(\"FOUNDRY_MODE\");\r\n\r\nif (mode == stdMode.Test) doSomething();\r\nelse if (mode == stdMode.ScriptDryRun) doSomethingElse();\r\nelse if (mode == stdMode.ScriptBroadcast) doAnotherThing();\r\n```\r\n\r\n@onbjerg @mattsse lmk what you think about this\r\n\r\nThere's a few other things discussed above, but @0xPhaze @KholdStare I'd suggest pulling them into separate issues to continue discussion to avoid mixing things here",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1256308837/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1256436988",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2900#issuecomment-1256436988",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2900",
    "id": 1256436988,
    "node_id": "IC_kwDOGBlvNc5K47T8",
    "user": {
      "login": "mattsse",
      "id": 19890894,
      "node_id": "MDQ6VXNlcjE5ODkwODk0",
      "avatar_url": "https://avatars.githubusercontent.com/u/19890894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mattsse",
      "html_url": "https://github.com/mattsse",
      "followers_url": "https://api.github.com/users/mattsse/followers",
      "following_url": "https://api.github.com/users/mattsse/following{/other_user}",
      "gists_url": "https://api.github.com/users/mattsse/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mattsse/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mattsse/subscriptions",
      "organizations_url": "https://api.github.com/users/mattsse/orgs",
      "repos_url": "https://api.github.com/users/mattsse/repos",
      "events_url": "https://api.github.com/users/mattsse/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mattsse/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-23T16:48:13Z",
    "updated_at": "2022-09-23T16:48:13Z",
    "author_association": "MEMBER",
    "body": "I can see how this would be useful.\r\n\r\nwhat if we introduce something like\r\n\r\n```solidity\r\n enum ForgeContext {\r\n     Test,ScriptDryRun,ScriptBroadcast\r\n}\r\n```\r\n\r\nand add cheatcodes `vm.context() returns (ForgeContext)` and `vm.is_ffi()`?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1256436988/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1256438702",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2900#issuecomment-1256438702",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2900",
    "id": 1256438702,
    "node_id": "IC_kwDOGBlvNc5K47uu",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-23T16:50:26Z",
    "updated_at": "2022-09-23T16:50:26Z",
    "author_association": "COLLABORATOR",
    "body": "That works for me, I think we'd also want `Snapshot` and `Coverage` as additional enum values?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1256438702/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1331280182",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2900#issuecomment-1331280182",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2900",
    "id": 1331280182,
    "node_id": "IC_kwDOGBlvNc5PWbk2",
    "user": {
      "login": "KholdStare",
      "id": 836110,
      "node_id": "MDQ6VXNlcjgzNjExMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/836110?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/KholdStare",
      "html_url": "https://github.com/KholdStare",
      "followers_url": "https://api.github.com/users/KholdStare/followers",
      "following_url": "https://api.github.com/users/KholdStare/following{/other_user}",
      "gists_url": "https://api.github.com/users/KholdStare/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/KholdStare/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/KholdStare/subscriptions",
      "organizations_url": "https://api.github.com/users/KholdStare/orgs",
      "repos_url": "https://api.github.com/users/KholdStare/repos",
      "events_url": "https://api.github.com/users/KholdStare/events{/privacy}",
      "received_events_url": "https://api.github.com/users/KholdStare/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-29T20:44:19Z",
    "updated_at": "2022-11-29T20:44:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "@mattsse Any update on this? Was also wondering if it should be more of a \"bitmask\" of enabled features rather than an enum. I.e. Could have `Script` bit and `Broadcast` bit. For things like Snapshot and Coverage those could also be independent bits from `Test`. Just food for thought",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1331280182/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1687175566",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2900#issuecomment-1687175566",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2900",
    "id": 1687175566,
    "node_id": "IC_kwDOGBlvNc5kkEGO",
    "user": {
      "login": "Evalir",
      "id": 26014927,
      "node_id": "MDQ6VXNlcjI2MDE0OTI3",
      "avatar_url": "https://avatars.githubusercontent.com/u/26014927?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Evalir",
      "html_url": "https://github.com/Evalir",
      "followers_url": "https://api.github.com/users/Evalir/followers",
      "following_url": "https://api.github.com/users/Evalir/following{/other_user}",
      "gists_url": "https://api.github.com/users/Evalir/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Evalir/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Evalir/subscriptions",
      "organizations_url": "https://api.github.com/users/Evalir/orgs",
      "repos_url": "https://api.github.com/users/Evalir/repos",
      "events_url": "https://api.github.com/users/Evalir/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Evalir/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-08-21T23:03:49Z",
    "updated_at": "2023-08-21T23:03:49Z",
    "author_association": "MEMBER",
    "body": "@mds1 closeable? i think #4884 was related to this",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1687175566/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1687334918",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2900#issuecomment-1687334918",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2900",
    "id": 1687334918,
    "node_id": "IC_kwDOGBlvNc5kkrAG",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-08-22T02:49:01Z",
    "updated_at": "2023-08-22T02:50:33Z",
    "author_association": "COLLABORATOR",
    "body": "This one is not yet closable, the idea is a cheatcode to let you determine what environment you're code is running in, such as:\r\n\r\n```solidity\r\nif (vm.forgeContext() == ForgeContext.Script) {\r\n  console.log(\"in a script\");\r\n} else if (vm.forgeContext() == ForgeContext.Test) {\r\n  console.log(\"in a test\");\r\n} else {\r\n  console.log(\"other\");\r\n}\r\n```\r\n\r\nWe do need some thought on UX here before implementing, e.g. returning an array of contexts, or a bitmask as suggested by @KholdStare above, would probably offer better UX. In these cases we'd probably also want helper cheats, such as:\r\n\r\n```solidity\r\n// Vm.sol\r\nenum ForgeContext {\r\n    Test,\r\n    Script,\r\n    Coverage,\r\n    Snapshot,\r\n    DryRun,\r\n    Broadcast\r\n}\r\n\r\nfunction forgeContext() external returns (ForgeContext[] memory contexts);\r\nfunction isTestContext() external returns (bool isTest);\r\nfunction isScriptContext() external returns (bool isScript);\r\n// etc.\r\n```\r\n\r\n#4844 is part of the way there, but a different goal. Not yet sure if they should be considered independent or if we should try to merge the two. Initial reaction is that they should be independent ",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1687334918/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
