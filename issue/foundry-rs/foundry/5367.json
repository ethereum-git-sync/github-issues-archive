{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/5367",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5367/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5367/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5367/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/5367",
  "id": 1800622539,
  "node_id": "I_kwDOGBlvNc5rU1HL",
  "number": 5367,
  "title": "[`expectRevert v1 changes`] expectRevert seems to cause a revert to not happen rather than asserting that it does",
  "user": {
    "login": "thedavidmeister",
    "id": 629710,
    "node_id": "MDQ6VXNlcjYyOTcxMA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/629710?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/thedavidmeister",
    "html_url": "https://github.com/thedavidmeister",
    "followers_url": "https://api.github.com/users/thedavidmeister/followers",
    "following_url": "https://api.github.com/users/thedavidmeister/following{/other_user}",
    "gists_url": "https://api.github.com/users/thedavidmeister/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/thedavidmeister/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/thedavidmeister/subscriptions",
    "organizations_url": "https://api.github.com/users/thedavidmeister/orgs",
    "repos_url": "https://api.github.com/users/thedavidmeister/repos",
    "events_url": "https://api.github.com/users/thedavidmeister/events{/privacy}",
    "received_events_url": "https://api.github.com/users/thedavidmeister/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3334394228,
      "node_id": "MDU6TGFiZWwzMzM0Mzk0MjI4",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-bug",
      "name": "T-bug",
      "color": "d73a4a",
      "default": false,
      "description": "Type: bug"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 5,
  "created_at": "2023-07-12T10:01:30Z",
  "updated_at": "2023-07-18T09:17:08Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "### Component\r\n\r\nForge\r\n\r\n### Have you ensured that all of these are up to date?\r\n\r\n- [X] Foundry\r\n- [ ] Foundryup\r\n\r\n### What version of Foundry are you on?\r\n\r\nforge 0.2.0 (e488e2b 2023-07-10T15:17:42.605282000Z)\r\n\r\n### What command(s) is the bug in?\r\n\r\nforge test\r\n\r\n### Operating System\r\n\r\nmacOS (Apple Silicon)\r\n\r\n### Describe the bug\r\n\r\nI wrote this test\r\n\r\n```solidity\r\n    function testEmptyOracleSimple() external {\r\n        vm.expectRevert(bytes(\"\"));\r\n        uint256 price = LibChainlink.price(address(0), type(uint256).max, 0);\r\n        (price);\r\n    }\r\n```\r\n\r\nfor this function\r\n\r\n```solidity\r\n    function price(address feed, uint256 staleAfter, uint256 scalingFlags) internal view returns (uint256) {\r\n        (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound) =\r\n            AggregatorV3Interface(feed).latestRoundData();\r\n        (roundId);\r\n        (startedAt);\r\n        (answeredInRound);\r\n\r\n        return roundDataToPrice(\r\n            block.timestamp, staleAfter, scalingFlags, answer, updatedAt, AggregatorV3Interface(feed).decimals()\r\n        );\r\n    }\r\n```\r\n\r\nso that `AggregatorV3Interface(feed).latestRoundData()` is called on `address(0)` which should revert.\r\n\r\nbut i get this\r\n\r\n```\r\nEncountered 1 failing test in test/lib/LibChainlink.badOracle.t.sol:LibChainlinkBadOracleTest\r\n[FAIL. Reason: Call did not revert as expected] testEmptyOracleSimple() (gas: 6186)\r\n```\r\n\r\nI get the same thing with `vm.expectRevert()` (without the bytes argument).\r\n\r\nthen removing `vm.expectRevert()` entirely gives\r\n\r\n```\r\nEncountered 1 failing test in test/lib/LibChainlink.badOracle.t.sol:LibChainlinkBadOracleTest\r\n[FAIL. Reason: EvmError: Revert] testEmptyOracleSimple() (gas: 3018)\r\n```\r\n\r\nSo it _does_ revert, and the debugger shows REVERT opcode.\r\n\r\nSomehow the expectRevert is not seeing the REVERT.\r\n\r\nhere is it reverting https://github.com/rainprotocol/rain.chainlink/actions/runs/5530236425/jobs/10089379218?pr=1\r\n\r\nhere it is failing to revert https://github.com/rainprotocol/rain.chainlink/actions/runs/5530261812/jobs/10089440012",
  "closed_by": {
    "login": "mds1",
    "id": 17163988,
    "node_id": "MDQ6VXNlcjE3MTYzOTg4",
    "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mds1",
    "html_url": "https://github.com/mds1",
    "followers_url": "https://api.github.com/users/mds1/followers",
    "following_url": "https://api.github.com/users/mds1/following{/other_user}",
    "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
    "organizations_url": "https://api.github.com/users/mds1/orgs",
    "repos_url": "https://api.github.com/users/mds1/repos",
    "events_url": "https://api.github.com/users/mds1/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mds1/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/5367/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5367/timeline",
  "performed_via_github_app": null,
  "state_reason": "reopened"
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1633151097",
    "html_url": "https://github.com/foundry-rs/foundry/issues/5367#issuecomment-1633151097",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5367",
    "id": 1633151097,
    "node_id": "IC_kwDOGBlvNc5hV-h5",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-07-12T20:18:13Z",
    "updated_at": "2023-07-12T20:18:13Z",
    "author_association": "COLLABORATOR",
    "body": "This is because of recent `expectRevert` changesâ€”you must refactor to only use `expectRevert` on calls.\r\n\r\nWhen you do `uint256 price = LibChainlink.price(address(0), type(uint256).max, 0);`, since `price` is an internal method, there is no CALL there, and instead you JUMP to the method. \r\n\r\nUpdated docs are still a WIP but you can find more info in the PR for them here: https://github.com/foundry-rs/book/pull/922",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1633151097/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1635643839",
    "html_url": "https://github.com/foundry-rs/foundry/issues/5367#issuecomment-1635643839",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5367",
    "id": 1635643839,
    "node_id": "IC_kwDOGBlvNc5hffG_",
    "user": {
      "login": "thedavidmeister",
      "id": 629710,
      "node_id": "MDQ6VXNlcjYyOTcxMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/629710?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/thedavidmeister",
      "html_url": "https://github.com/thedavidmeister",
      "followers_url": "https://api.github.com/users/thedavidmeister/followers",
      "following_url": "https://api.github.com/users/thedavidmeister/following{/other_user}",
      "gists_url": "https://api.github.com/users/thedavidmeister/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/thedavidmeister/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/thedavidmeister/subscriptions",
      "organizations_url": "https://api.github.com/users/thedavidmeister/orgs",
      "repos_url": "https://api.github.com/users/thedavidmeister/repos",
      "events_url": "https://api.github.com/users/thedavidmeister/events{/privacy}",
      "received_events_url": "https://api.github.com/users/thedavidmeister/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-07-14T10:20:28Z",
    "updated_at": "2023-07-14T10:20:28Z",
    "author_association": "NONE",
    "body": "@mds1 why would you change `expectRevert` to work that way?\r\n\r\nclearly the ability to revert internal functions needs testing, how can i do that?\r\n\r\nrefactoring code is not a good way to approach this, because the refactor you're suggesting would require putting an external interface between the test and the code being tested, which introduces risk in the testing process",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1635643839/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1635652489",
    "html_url": "https://github.com/foundry-rs/foundry/issues/5367#issuecomment-1635652489",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5367",
    "id": 1635652489,
    "node_id": "IC_kwDOGBlvNc5hfhOJ",
    "user": {
      "login": "thedavidmeister",
      "id": 629710,
      "node_id": "MDQ6VXNlcjYyOTcxMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/629710?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/thedavidmeister",
      "html_url": "https://github.com/thedavidmeister",
      "followers_url": "https://api.github.com/users/thedavidmeister/followers",
      "following_url": "https://api.github.com/users/thedavidmeister/following{/other_user}",
      "gists_url": "https://api.github.com/users/thedavidmeister/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/thedavidmeister/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/thedavidmeister/subscriptions",
      "organizations_url": "https://api.github.com/users/thedavidmeister/orgs",
      "repos_url": "https://api.github.com/users/thedavidmeister/repos",
      "events_url": "https://api.github.com/users/thedavidmeister/events{/privacy}",
      "received_events_url": "https://api.github.com/users/thedavidmeister/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-07-14T10:25:28Z",
    "updated_at": "2023-07-14T10:26:59Z",
    "author_association": "NONE",
    "body": "@thedavidmeister i read the linked docs and the fundamental idea of these changes precludes testing that code that calls other code (a.k.a \"an abstraction\") behaves the same way as the composition of the underlying code\r\n\r\nthis _is_ a bug in foundry, despite it being intentionally introduced and documented, and we should reopen this issue",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1635652489/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1635887313",
    "html_url": "https://github.com/foundry-rs/foundry/issues/5367#issuecomment-1635887313",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5367",
    "id": 1635887313,
    "node_id": "IC_kwDOGBlvNc5hgajR",
    "user": {
      "login": "gakonst",
      "id": 17802178,
      "node_id": "MDQ6VXNlcjE3ODAyMTc4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17802178?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gakonst",
      "html_url": "https://github.com/gakonst",
      "followers_url": "https://api.github.com/users/gakonst/followers",
      "following_url": "https://api.github.com/users/gakonst/following{/other_user}",
      "gists_url": "https://api.github.com/users/gakonst/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gakonst/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gakonst/subscriptions",
      "organizations_url": "https://api.github.com/users/gakonst/orgs",
      "repos_url": "https://api.github.com/users/gakonst/repos",
      "events_url": "https://api.github.com/users/gakonst/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gakonst/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-07-14T13:44:09Z",
    "updated_at": "2023-07-14T13:44:47Z",
    "author_association": "MEMBER",
    "body": "Hey @thedavidmeister thanks for the feedback. \r\n* Would love to have a productive conversation about this, while being open minded about what the right behavior moving forward is.\r\n* Would also strongly appreciate if we could keep the tone conversational vs strongly opinionated, as we're juggling a lot of balls, and user feedback doesn't always come in with the right timing - and we may miss some important use cases as we make changes.\r\n* We all want to keep the vibe nice and friendly vs mildly tilted (while acknowledging that this is very serious!), you know what I mean?\r\n\r\nNow on the actual problem...\r\n\r\nWe have asked some users about this before, and they reported a \"soundness issue\" around dangling expectReverts:\r\n* Issue discussion: https://github.com/foundry-rs/foundry/issues/3437, https://github.com/foundry-rs/foundry/issues/5159\r\n* Proposed Fix: https://github.com/foundry-rs/foundry/pull/3820 (this didn't make it in then, but we cleaned it up and added it later  \r\n\r\nFixing that soundness issue would require a breaking change, which indeed required a refactor to fix. We discussed (again) with users and people were OK with doing the refactor.\r\n\r\nClearly there's a soundness issue on the one hand. On the other hand there's downstream cost imposed on developers due to the breaking change. And _obviously_ you want to test internal functions on libraries.\r\n\r\nOur intent post-Foundry 1.0 is to be stable, and not have breaking changes like this. Pre 1.0 though we could not promise something around it, and we wanted to be open to making fixes that set us up for the long term.\r\n\r\n\r\nI understand that it is a PITA to have to do this. I would like to understand better what you mean by \"introduces risk in the testing process\". Could you also explain your concrete requirements from expectRevert, so we can try to meet them?\r\n\r\nDoes that make sense? Thanks for using Foundry, we take customer feedback very seriously :)",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1635887313/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1639848847",
    "html_url": "https://github.com/foundry-rs/foundry/issues/5367#issuecomment-1639848847",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5367",
    "id": 1639848847,
    "node_id": "IC_kwDOGBlvNc5hvhuP",
    "user": {
      "login": "thedavidmeister",
      "id": 629710,
      "node_id": "MDQ6VXNlcjYyOTcxMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/629710?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/thedavidmeister",
      "html_url": "https://github.com/thedavidmeister",
      "followers_url": "https://api.github.com/users/thedavidmeister/followers",
      "following_url": "https://api.github.com/users/thedavidmeister/following{/other_user}",
      "gists_url": "https://api.github.com/users/thedavidmeister/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/thedavidmeister/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/thedavidmeister/subscriptions",
      "organizations_url": "https://api.github.com/users/thedavidmeister/orgs",
      "repos_url": "https://api.github.com/users/thedavidmeister/repos",
      "events_url": "https://api.github.com/users/thedavidmeister/events{/privacy}",
      "received_events_url": "https://api.github.com/users/thedavidmeister/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-07-18T09:17:08Z",
    "updated_at": "2023-07-18T09:17:08Z",
    "author_association": "NONE",
    "body": "@gakonst i need to get a better idea of how the foundry team expects people to write tests\r\n\r\n> obviously you want to test internal functions on libraries.\r\n\r\nthis basically, so what's the plan?\r\n\r\nwhat would a canonical refactor to the snippet I posted in the issue description look like?\r\n\r\ni don't really care exactly how it is done, as long as it is not unreasonably clunky/boilerplatey\r\n\r\nThe risk that i'm talking about is adding layers of abstraction between the test and the thing being tested, each layer could itself harbour bugs\r\n\r\nFor the same reason that i want to test each abstraction in my production code its own right, i also don't want to introduce untestable abstractions in the testing code to make the test tooling work",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1639848847/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
