{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/1543",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1543/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1543/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1543/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/1543",
  "id": 1228507412,
  "node_id": "I_kwDOGBlvNc5JOYkU",
  "number": 1543,
  "title": "selfdestruct has no effect in test",
  "user": {
    "login": "sjkelleyjr",
    "id": 9563075,
    "node_id": "MDQ6VXNlcjk1NjMwNzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/9563075?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/sjkelleyjr",
    "html_url": "https://github.com/sjkelleyjr",
    "followers_url": "https://api.github.com/users/sjkelleyjr/followers",
    "following_url": "https://api.github.com/users/sjkelleyjr/following{/other_user}",
    "gists_url": "https://api.github.com/users/sjkelleyjr/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/sjkelleyjr/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/sjkelleyjr/subscriptions",
    "organizations_url": "https://api.github.com/users/sjkelleyjr/orgs",
    "repos_url": "https://api.github.com/users/sjkelleyjr/repos",
    "events_url": "https://api.github.com/users/sjkelleyjr/events{/privacy}",
    "received_events_url": "https://api.github.com/users/sjkelleyjr/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3334394237,
      "node_id": "MDU6TGFiZWwzMzM0Mzk0MjM3",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-question",
      "name": "T-question",
      "color": "BFD4F2",
      "default": false,
      "description": "Type: question"
    },
    {
      "id": 3593644915,
      "node_id": "LA_kwDOGBlvNc7WMqtz",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/Cmd-forge-test",
      "name": "Cmd-forge-test",
      "color": "006B75",
      "default": false,
      "description": "Command: forge test"
    },
    {
      "id": 3703752787,
      "node_id": "LA_kwDOGBlvNc7cwshT",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/C-forge",
      "name": "C-forge",
      "color": "5319E7",
      "default": false,
      "description": "Command: forge"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 14,
  "created_at": "2022-05-07T03:01:33Z",
  "updated_at": "2023-04-24T15:37:22Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "### Component\r\n\r\nForge\r\n\r\n### Have you ensured that all of these are up to date?\r\n\r\n- [X] Foundry\r\n- [X] Foundryup\r\n\r\n### What version of Foundry are you on?\r\n\r\nforge 0.2.0 (bab38d6 2022-05-06T00:04:42.708656+00:00)\r\n\r\n### What command(s) is the bug in?\r\n\r\nforge test\r\n\r\n### Operating System\r\n\r\nmacOS (M1)\r\n\r\n### Describe the bug\r\n\r\nI'm not sure if this is actually a bug, or I just can't figure out how to achieve what I want.\r\n\r\nI'm trying to test a very basic selfdestruct example, and it doesn't seem to be behaving as I expect:\r\n\r\n\r\nSelfDestructor.sol:\r\n```solidity\r\npragma solidity 0.8.10;\r\n\r\ncontract SelfDestructor {\r\n  function kill() external {\r\n      selfdestruct(payable(msg.sender)); // send the funds to msg.sender just to test\r\n  }\r\n}\r\n```\r\n\r\nSelfDestructor.t.sol:\r\n```solidity\r\npragma solidity 0.8.10;\r\n\r\nimport \"forge-std/Test.sol\";\r\nimport \"forge-std/console.sol\";\r\n\r\nimport \"../src/SelfDestructor.sol\";\r\n\r\ncontract SelfDestructorTest is Test {\r\n    \r\n    SelfDestructor killer;\r\n\r\n    function setUp() public {\r\n        killer = new SelfDestructor();\r\n    }\r\n\r\n    function testKill() public {\r\n        killer.kill();\r\n\r\n        vm.roll(block.number + 1);\r\n\r\n        uint32 killerSize = getSize(address(killer));\r\n        console.log(killerSize);\r\n\r\n        killer.kill();\r\n\r\n        vm.roll(block.number + 1);\r\n\r\n        killerSize = getSize(address(killer));\r\n        console.log(killerSize);\r\n    }\r\n\r\n    function getSize(address c) public view returns (uint32) {\r\n        uint32 size;\r\n        assembly {\r\n            size := extcodesize(c)\r\n        }\r\n        return size;\r\n    }\r\n```\r\n\r\nTwo things are confusing.  Firstly, the size isn't changing between `kill()` invocations, and second, I can call the contract's kill() twice in the same test, both indicating that the selfdestruct isn't doing anything when it's called.\r\n\r\nI've tried both with and without the `vm.roll` calls.  What am I missing?\r\n\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/1543/reactions",
    "total_count": 6,
    "+1": 6,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1543/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1120183660",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1543#issuecomment-1120183660",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1543",
    "id": 1120183660,
    "node_id": "IC_kwDOGBlvNc5CxKVs",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-07T10:32:53Z",
    "updated_at": "2022-05-07T10:32:53Z",
    "author_association": "MEMBER",
    "body": "`selfdestruct` doesn't take effect until the call is over, which it isn't until the test is over.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1120183660/reactions",
      "total_count": 5,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1120216599",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1543#issuecomment-1120216599",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1543",
    "id": 1120216599,
    "node_id": "IC_kwDOGBlvNc5CxSYX",
    "user": {
      "login": "sjkelleyjr",
      "id": 9563075,
      "node_id": "MDQ6VXNlcjk1NjMwNzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9563075?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sjkelleyjr",
      "html_url": "https://github.com/sjkelleyjr",
      "followers_url": "https://api.github.com/users/sjkelleyjr/followers",
      "following_url": "https://api.github.com/users/sjkelleyjr/following{/other_user}",
      "gists_url": "https://api.github.com/users/sjkelleyjr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sjkelleyjr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sjkelleyjr/subscriptions",
      "organizations_url": "https://api.github.com/users/sjkelleyjr/orgs",
      "repos_url": "https://api.github.com/users/sjkelleyjr/repos",
      "events_url": "https://api.github.com/users/sjkelleyjr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sjkelleyjr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-07T14:09:51Z",
    "updated_at": "2022-05-07T14:32:52Z",
    "author_association": "NONE",
    "body": "Good to know!  Is there any way to get around this limitation?  Can you make a test depend on the state of a previous test?  Also, is there a list of things that behave this way, so I know to look out for them in the future?\r\n\r\n(for anyone else who stumbles on this, I managed to learn this myself before @onbjerg's response, by putting the self destruct in the `setUp()`, so that's one way of getting around the limitation)",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1120216599/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1120228721",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1543#issuecomment-1120228721",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1543",
    "id": 1120228721,
    "node_id": "IC_kwDOGBlvNc5CxVVx",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-07T15:32:05Z",
    "updated_at": "2022-05-07T15:32:05Z",
    "author_association": "MEMBER",
    "body": ">Good to know! Is there any way to get around this limitation?\r\n\r\nNot currently... Is there any specific reason you need to test that the contract was self-destructed by checking the code size? I realize this may be an odd question.\r\n\r\nI think there was another issue on here where OP asked for a cheatcode to perform the state transitions mid-test, but I think there would be too many side effects, and the technical difficulty of implementing it is pretty high for a small use case.\r\n\r\n`selfdestruct` is (eventually, maybe, hopefully) going to be disabled at some point, so I wouldn't rely on it too much.\r\n\r\n>Can you make a test depend on the state of a previous test?\r\n\r\nNo, you can only use `setUp`\r\n\r\n>Also, is there a list of things that behave this way, so I know to look out for them in the future?\r\n\r\nThere isn't, I'm not sure yet whether or not there should be - some of these oddities are mostly \"odd\" because most people really haven't had the need to know. This `selfdestruct` behavior comes to mind, as well as a Solidity optimization regarding calls that might also be weird the first time you encounter it (but isn't necessarily true for all Solidity versions, so hard to document)\r\n\r\nWhat do you think, does your use case warrant a cheatcode, or is there some other feature/adjustment you feel would accomodate your use case?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1120228721/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1120233133",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1543#issuecomment-1120233133",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1543",
    "id": 1120233133,
    "node_id": "IC_kwDOGBlvNc5CxWat",
    "user": {
      "login": "sjkelleyjr",
      "id": 9563075,
      "node_id": "MDQ6VXNlcjk1NjMwNzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9563075?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sjkelleyjr",
      "html_url": "https://github.com/sjkelleyjr",
      "followers_url": "https://api.github.com/users/sjkelleyjr/followers",
      "following_url": "https://api.github.com/users/sjkelleyjr/following{/other_user}",
      "gists_url": "https://api.github.com/users/sjkelleyjr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sjkelleyjr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sjkelleyjr/subscriptions",
      "organizations_url": "https://api.github.com/users/sjkelleyjr/orgs",
      "repos_url": "https://api.github.com/users/sjkelleyjr/repos",
      "events_url": "https://api.github.com/users/sjkelleyjr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sjkelleyjr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-07T16:02:19Z",
    "updated_at": "2022-05-07T16:02:19Z",
    "author_association": "NONE",
    "body": ">Not currently... Is there any specific reason you need to test that the contract was self-destructed by checking the code size? I realize this may be an odd question.\r\n\r\nIt's not as odd a question as my use case 😅.  I'm an auditor, and I like to test my exploits out with unit tests when possible.  So in this case, I'm exploiting a contract and need to be able to selfdestruct it and assert things about the contracts that depend on the selfdestructed contract.\r\n\r\n>I think there was another issue on here where OP asked for a cheatcode to perform the state transitions mid-test, but I think there would be too many side effects, and the technical difficulty of implementing it is pretty high for a small use case.\r\n\r\nI was looking for this cheatcode in the docs and didn't find one, so that's why I created the issue in case I missed it.  I understand this is a niche use case though.  This is why I was asking about the list of things that behave this way, so I could gauge whether I should be asking for a cheatcode or if this is unique to selfdestruct (also so I know what to look out for in the future, as you could imagine, this was a head scratcher).\r\n\r\n>What do you think, does your use case warrant a cheatcode, or is there some other feature/adjustment you feel would accomodate your use case?\r\n\r\nI don't know enough about the roadmap or how others are using foundry to say.  I can give you my use case and I have faith that the foundry team will make the right decision for the long term success of the project 🙂.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1120233133/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1126781363",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1543#issuecomment-1126781363",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1543",
    "id": 1126781363,
    "node_id": "IC_kwDOGBlvNc5DKVGz",
    "user": {
      "login": "brockelmore",
      "id": 31553173,
      "node_id": "MDQ6VXNlcjMxNTUzMTcz",
      "avatar_url": "https://avatars.githubusercontent.com/u/31553173?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brockelmore",
      "html_url": "https://github.com/brockelmore",
      "followers_url": "https://api.github.com/users/brockelmore/followers",
      "following_url": "https://api.github.com/users/brockelmore/following{/other_user}",
      "gists_url": "https://api.github.com/users/brockelmore/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brockelmore/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brockelmore/subscriptions",
      "organizations_url": "https://api.github.com/users/brockelmore/orgs",
      "repos_url": "https://api.github.com/users/brockelmore/repos",
      "events_url": "https://api.github.com/users/brockelmore/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brockelmore/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-14T17:32:21Z",
    "updated_at": "2022-05-14T17:34:25Z",
    "author_association": "MEMBER",
    "body": "@onbjerg what if we add an inspector (or use existing inspector) and cheatcode and forge-std that:\r\n1. records selfdestructed addresses (in the selfdestruct callback)\r\n2. `vm.destructed(addr) -> bool` returns if a contract was selfdestructed\r\n3. forge-std `destroySelfDestructed(addr /* overload with another addr that would be eth recipient */)` which calls `vm.destructed(addr)` and if so, etches code(0) and sends eth to overloaded recipient?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1126781363/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1126887439",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1543#issuecomment-1126887439",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1543",
    "id": 1126887439,
    "node_id": "IC_kwDOGBlvNc5DKvAP",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-15T08:38:31Z",
    "updated_at": "2022-05-15T08:38:31Z",
    "author_association": "MEMBER",
    "body": "Unsure, I still think it is a bit niche, especially considering that selfdestruct is a candidate for removal. But if we do add it, having a forge-std helper makes sense.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1126887439/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1139736351",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1543#issuecomment-1139736351",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1543",
    "id": 1139736351,
    "node_id": "IC_kwDOGBlvNc5D7v8f",
    "user": {
      "login": "meetmangukiya",
      "id": 7620533,
      "node_id": "MDQ6VXNlcjc2MjA1MzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7620533?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meetmangukiya",
      "html_url": "https://github.com/meetmangukiya",
      "followers_url": "https://api.github.com/users/meetmangukiya/followers",
      "following_url": "https://api.github.com/users/meetmangukiya/following{/other_user}",
      "gists_url": "https://api.github.com/users/meetmangukiya/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meetmangukiya/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meetmangukiya/subscriptions",
      "organizations_url": "https://api.github.com/users/meetmangukiya/orgs",
      "repos_url": "https://api.github.com/users/meetmangukiya/repos",
      "events_url": "https://api.github.com/users/meetmangukiya/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meetmangukiya/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-27T15:43:17Z",
    "updated_at": "2022-05-27T15:43:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "Instead of committing state mid-execution, how about just clearing the code(`set_code`) whenever we detect a destruction from inspector?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1139736351/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1139745844",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1543#issuecomment-1139745844",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1543",
    "id": 1139745844,
    "node_id": "IC_kwDOGBlvNc5D7yQ0",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-27T15:55:08Z",
    "updated_at": "2022-05-27T15:55:08Z",
    "author_association": "MEMBER",
    "body": "We could, however that also breaks 1:1 EVM behavior which might not be desired.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1139745844/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1139758357",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1543#issuecomment-1139758357",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1543",
    "id": 1139758357,
    "node_id": "IC_kwDOGBlvNc5D71UV",
    "user": {
      "login": "meetmangukiya",
      "id": 7620533,
      "node_id": "MDQ6VXNlcjc2MjA1MzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7620533?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meetmangukiya",
      "html_url": "https://github.com/meetmangukiya",
      "followers_url": "https://api.github.com/users/meetmangukiya/followers",
      "following_url": "https://api.github.com/users/meetmangukiya/following{/other_user}",
      "gists_url": "https://api.github.com/users/meetmangukiya/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meetmangukiya/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meetmangukiya/subscriptions",
      "organizations_url": "https://api.github.com/users/meetmangukiya/orgs",
      "repos_url": "https://api.github.com/users/meetmangukiya/repos",
      "events_url": "https://api.github.com/users/meetmangukiya/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meetmangukiya/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-27T16:10:35Z",
    "updated_at": "2022-05-27T16:10:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "Maybe a cheatcode that proxies `finalize` can do too?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1139758357/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1208395961",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1543#issuecomment-1208395961",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1543",
    "id": 1208395961,
    "node_id": "IC_kwDOGBlvNc5IBqi5",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-08T17:20:04Z",
    "updated_at": "2022-08-08T17:20:04Z",
    "author_association": "MEMBER",
    "body": "https://github.com/foundry-rs/foundry/issues/2654 contradicts this issue - did this behavior change recently?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1208395961/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1427129820",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1543#issuecomment-1427129820",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1543",
    "id": 1427129820,
    "node_id": "IC_kwDOGBlvNc5VEEXc",
    "user": {
      "login": "PaulRBerg",
      "id": 8782666,
      "node_id": "MDQ6VXNlcjg3ODI2NjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8782666?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PaulRBerg",
      "html_url": "https://github.com/PaulRBerg",
      "followers_url": "https://api.github.com/users/PaulRBerg/followers",
      "following_url": "https://api.github.com/users/PaulRBerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/PaulRBerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PaulRBerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PaulRBerg/subscriptions",
      "organizations_url": "https://api.github.com/users/PaulRBerg/orgs",
      "repos_url": "https://api.github.com/users/PaulRBerg/repos",
      "events_url": "https://api.github.com/users/PaulRBerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PaulRBerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-02-12T20:52:57Z",
    "updated_at": "2023-02-12T20:52:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "> did this behavior change recently?\r\n\r\nNo, it didn't. `selfdestruct` still doesn't remove the code of the destructed code until the test execution finishes.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1427129820/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1427130534",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1543#issuecomment-1427130534",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1543",
    "id": 1427130534,
    "node_id": "IC_kwDOGBlvNc5VEEim",
    "user": {
      "login": "PaulRBerg",
      "id": 8782666,
      "node_id": "MDQ6VXNlcjg3ODI2NjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8782666?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PaulRBerg",
      "html_url": "https://github.com/PaulRBerg",
      "followers_url": "https://api.github.com/users/PaulRBerg/followers",
      "following_url": "https://api.github.com/users/PaulRBerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/PaulRBerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PaulRBerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PaulRBerg/subscriptions",
      "organizations_url": "https://api.github.com/users/PaulRBerg/orgs",
      "repos_url": "https://api.github.com/users/PaulRBerg/repos",
      "events_url": "https://api.github.com/users/PaulRBerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PaulRBerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-02-12T20:56:25Z",
    "updated_at": "2023-02-12T20:56:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Is there any specific reason you need to test that the contract was self-destructed by checking the code size? I realize this may be an odd question.\r\n\r\nI am using [`delegatecall`](https://github.com/PaulRBerg/prb-proxy/blob/483affa57607c91267a6339ec5674de15f5e0069/src/PRBProxy.sol#L83), and I want to check that the caller is destroyed, and not the callee.\r\n\r\nThis might be a bit overkill, since I'm technically testing compiler features, but delegate calling is a sensitive enough operation that warrants this kind of additional check.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1427130534/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1520392048",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1543#issuecomment-1520392048",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1543",
    "id": 1520392048,
    "node_id": "IC_kwDOGBlvNc5an1dw",
    "user": {
      "login": "oveddan",
      "id": 891755,
      "node_id": "MDQ6VXNlcjg5MTc1NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/891755?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/oveddan",
      "html_url": "https://github.com/oveddan",
      "followers_url": "https://api.github.com/users/oveddan/followers",
      "following_url": "https://api.github.com/users/oveddan/following{/other_user}",
      "gists_url": "https://api.github.com/users/oveddan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/oveddan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/oveddan/subscriptions",
      "organizations_url": "https://api.github.com/users/oveddan/orgs",
      "repos_url": "https://api.github.com/users/oveddan/repos",
      "events_url": "https://api.github.com/users/oveddan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/oveddan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-04-24T15:28:15Z",
    "updated_at": "2023-04-24T15:28:15Z",
    "author_association": "NONE",
    "body": "I'm running into something similar.  I want to create a test that:\r\n* creates a proxy contract with a deterministic address using create2\r\n* deletes it then `selfdestruct`'s it\r\n* creates another proxy contract at same address using create2\r\n\r\nIm not sure if it's a foundry issue or general limitation of creating contracts that way\r\nthis is what my test looks like:\r\n\r\n```solidity\r\npragma solidity ^0.8.13;\r\n\r\nimport \"forge-std/Test.sol\";\r\nimport {Clones} from \"openzeppelin/proxy/Clones.sol\";\r\n\r\ncontract ContractToClone {\r\n    address public owner;\r\n\r\n    function initialize(address _owner) external {\r\n        if (owner != address(0)) revert(\"Already initialied\");\r\n        owner = _owner;\r\n    }\r\n\r\n    function goodbye() external {\r\n        selfdestruct(payable(owner));\r\n    }\r\n}\r\n\r\n/// @notice Meant to test out determistic cloning techniques\r\ncontract DetermistingCloningTest is Test {\r\n    function test_cloneCanBeCreatedTwiceUsingSameAddressIfDeleted() external {\r\n        ContractToClone cloneableContract = new ContractToClone();\r\n\r\n        address owner = vm.addr(1);\r\n\r\n        bytes32 salt = bytes32(uint256(5));\r\n\r\n        address clonedAddress = Clones.cloneDeterministic(address(cloneableContract), salt);\r\n\r\n        ContractToClone clonedContract = ContractToClone(clonedAddress);\r\n        clonedContract.initialize(owner);\r\n\r\n        assertEq(clonedContract.owner(), owner);\r\n\r\n        // now delete it, then destroy it\r\n        delete clonedAddress;\r\n        clonedContract.goodbye();\r\n\r\n        Clones.cloneDeterministic(address(cloneableContract), salt);\r\n    }\r\n}\r\n```\r\n\r\nThe last line of the test results in an error: \"[FAIL. Reason: ERC1167: create2 failed]\"\r\n\r\nFor reference, here are the contents of the function `Clone.cloneDeterministic`:\r\n\r\n```solidity\r\n    /**\r\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\r\n     *\r\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\r\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\r\n     * the clones cannot be deployed twice at the same address.\r\n     */\r\n     \r\nlibrary Clones {\r\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\r\n            // of the `implementation` address with the bytecode before the address.\r\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\r\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\r\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\r\n            instance := create2(0, 0x09, 0x37, salt)\r\n        }\r\n        require(instance != address(0), \"ERC1167: create2 failed\");\r\n    }\r\n}\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1520392048/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1520405775",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1543#issuecomment-1520405775",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1543",
    "id": 1520405775,
    "node_id": "IC_kwDOGBlvNc5an40P",
    "user": {
      "login": "oveddan",
      "id": 891755,
      "node_id": "MDQ6VXNlcjg5MTc1NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/891755?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/oveddan",
      "html_url": "https://github.com/oveddan",
      "followers_url": "https://api.github.com/users/oveddan/followers",
      "following_url": "https://api.github.com/users/oveddan/following{/other_user}",
      "gists_url": "https://api.github.com/users/oveddan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/oveddan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/oveddan/subscriptions",
      "organizations_url": "https://api.github.com/users/oveddan/orgs",
      "repos_url": "https://api.github.com/users/oveddan/repos",
      "events_url": "https://api.github.com/users/oveddan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/oveddan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-04-24T15:37:21Z",
    "updated_at": "2023-04-24T15:37:21Z",
    "author_association": "NONE",
    "body": "thanks to @onbjerg suggestion the behavior works as expectedly if `selfdestruct` is called in `setUp`:\r\n\r\n```solidity\r\n/// @notice Meant to test out determistic cloning techniques\r\ncontract DetermistingCloningTest is Test {\r\n    ContractToClone cloneableContract;\r\n    address owner;\r\n    bytes32 salt;\r\n\r\n    function setUp() external {\r\n        cloneableContract = new ContractToClone();\r\n        owner = vm.addr(1);\r\n        salt = bytes32(uint256(5));\r\n\r\n        address clonedAddress = Clones.cloneDeterministic(address(cloneableContract), salt);\r\n        ContractToClone clonedContract = ContractToClone(clonedAddress);\r\n\r\n        // now destroy it\r\n        clonedContract.goodbye();\r\n    }\r\n\r\n    function test_succeedsWhen_cloneCreatedInSetup() external {\r\n        // we already created and self-destructed the cloned contract in setup.\r\n        // we should be able to succeed now.\r\n        address clonedAddress = Clones.cloneDeterministic(address(cloneableContract), salt);\r\n\r\n        ContractToClone clonedContract = ContractToClone(clonedAddress);\r\n        clonedContract.initialize(owner);\r\n\r\n        assertEq(clonedContract.owner(), owner);\r\n    }\r\n\r\n    function test_revertsWhen_cloneCreatedInSameTest() external {\r\n        // this test creates 2 cloned contracts at the same address, but destroys the first one\r\n        // before creating the second one.  it fails because foundry hasn't cleared the transaction in the same\r\n        // test.\r\n\r\n        bytes32 saltForTest = bytes32(uint256(6));\r\n        address clonedAddress = Clones.cloneDeterministic(address(cloneableContract), saltForTest);\r\n\r\n        ContractToClone clonedContract = ContractToClone(clonedAddress);\r\n        clonedContract.initialize(owner);\r\n\r\n        assertEq(clonedContract.owner(), owner);\r\n\r\n        // now delete it, then destroy it\r\n        clonedContract.goodbye();\r\n\r\n        // clone the contract again, using the same cloneable contract and salt - it should revert\r\n        vm.expectRevert();\r\n        Clones.cloneDeterministic(address(cloneableContract), saltForTest);\r\n    }\r\n}\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1520405775/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
