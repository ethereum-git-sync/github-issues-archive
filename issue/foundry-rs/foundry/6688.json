{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/6688",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/6688/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/6688/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/6688/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/6688",
  "id": 2060976453,
  "node_id": "I_kwDOGBlvNc562AFF",
  "number": 6688,
  "title": "Getting different hashes when generating hash in contract VS test file",
  "user": {
    "login": "alfheimrShiven",
    "id": 50408041,
    "node_id": "MDQ6VXNlcjUwNDA4MDQx",
    "avatar_url": "https://avatars.githubusercontent.com/u/50408041?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/alfheimrShiven",
    "html_url": "https://github.com/alfheimrShiven",
    "followers_url": "https://api.github.com/users/alfheimrShiven/followers",
    "following_url": "https://api.github.com/users/alfheimrShiven/following{/other_user}",
    "gists_url": "https://api.github.com/users/alfheimrShiven/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/alfheimrShiven/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/alfheimrShiven/subscriptions",
    "organizations_url": "https://api.github.com/users/alfheimrShiven/orgs",
    "repos_url": "https://api.github.com/users/alfheimrShiven/repos",
    "events_url": "https://api.github.com/users/alfheimrShiven/events{/privacy}",
    "received_events_url": "https://api.github.com/users/alfheimrShiven/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3334394228,
      "node_id": "MDU6TGFiZWwzMzM0Mzk0MjI4",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-bug",
      "name": "T-bug",
      "color": "d73a4a",
      "default": false,
      "description": "Type: bug"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2023-12-31T07:54:04Z",
  "updated_at": "2023-12-31T08:30:57Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "### Component\n\nFoundryup\n\n### Have you ensured that all of these are up to date?\n\n- [X] Foundry\n- [X] Foundryup\n\n### What version of Foundry are you on?\n\n0.8.18\n\n### What command(s) is the bug in?\n\n_No response_\n\n### Operating System\n\nmacOS (Apple Silicon)\n\n### Describe the bug\n\nI have a function in Solidity that is supposed to check if the recovery hash committed by the Email recovery service matches the hash generated through the token and nonce sent by the user (He receives this from his email). Here's how the code looks:\r\n```\r\n///@dev Called by the email service which commits the recovery hash\r\nfunction commitRecoveryHash(bytes32 recoveryHash) external onlyEmailVerificationService {\r\n        emailVerificationHash = recoveryHash;\r\n    }\r\n```\r\n    \r\nHere's how the email recovery service generates the recovery hash\r\n```\r\n address emailService = address(0xa0Ee7A142d267C1f36714E4a8F75612F20a79720); \r\n    string userEmail = \"shiven@gmail.com\";\r\n    uint64 nonce = 38;\r\n\r\nvm.startPrank(emailService);\r\n        bytes memory recoveryToken = (abi.encodePacked(userEmail, emailService));\r\n        emit EmailServiceGeneratingHashUsing(recoveryToken, nonce);\r\n    \r\n        bytes32 emailVerificationHash = keccak256(abi.encodePacked(recoveryToken, nonce));\r\n\r\n        accountRecovery.commitRecoveryHash(emailVerificationHash);\r\n        vm.stopPrank();\r\n```        \r\nNow I have a test that calls the function to check if the recovery hashes match.\r\n```\r\n address emailService = address(0xa0Ee7A142d267C1f36714E4a8F75612F20a79720); // TODO: To be updated with the wallet address of the actual email\r\n    string userEmail = \"shiven@gmail.com\";\r\n    uint64 nonce = 38;\r\n    \r\n function testUserVerification() external {\r\n        bytes memory recoveryToken = abi.encodePacked(userEmail, emailService);\r\n        // creating a new Embedded wallet for the user\r\n        address newWallet = makeAddr(\"newWallet\");\r\n\r\n        // Act/ Assert\r\n        vm.prank(newWallet); // using the new wallet to send recovery req.\r\n        vm.expectEmit();\r\n        emit AccountRecoveryRequestCreated();\r\n        accountRecovery.verifyUserAsOwnerOfTheAccount(userEmail, recoveryToken, nonce);\r\n    }\r\n```\r\nHere's the test calling the `verifyUserAsOwnerOfTheAccount()` using the same recovery token, email, and nonce:\r\n```\r\n function verifyUserAsOwnerOfTheAccount(\r\n        string memory email,\r\n        bytes calldata token,\r\n        uint256 nonce\r\n    ) internal returns (bool) {\r\n       \r\n        ///@dev Hashing strings to compare them.\r\n        emit AboutToGenerateHashUsing(token, nonce);\r\n\r\n        bytes32 generatedEmailVerificationHash = keccak256(abi.encodePacked(token, nonce));\r\n        emit RecoveryHash(emailVerificationHash);\r\n        emit GeneratedHash(generatedEmailVerificationHash);\r\n\r\n        console.log(\"Do the email hash match:\", (generatedEmailVerificationHash == emailVerificationHash));\r\n\r\n        if (generatedEmailVerificationHash != emailVerificationHash) {\r\n            revert EmailVerificationFailed();\r\n        }\r\n        return true;\r\n    }\r\n```\r\nPlease note the events `EmailServiceGeneratingHashUsing` & `AboutToGenerateHashUsing` prove that the same params went into creating the hashes and the same `keccak256(abi.encodePacked(recoveryToken, nonce))` method was used to create the hashes, but still the hashes don't match. Here are the logs:\r\n```\r\n VM::stopPrank() \r\n    │   └─ ← ()\r\n    ├─ [0] VM::startPrank(0xa0Ee7A142d267C1f36714E4a8F75612F20a79720) \r\n    │   └─ ← ()\r\n    ├─ emit EmailServiceGeneratingHashUsing(token: 0x73686976656e40676d61696c2e636f6da0ee7a142d267c1f36714e4a8f75612f20a79720, nonce: 38)\r\n    ├─ [22408] AccountRecovery::commitRecoveryHash(0x271f87acd2085f2e203d8d983e89f336274e0c2028ebc7340703b3b141b0b6dc) \r\n    │   └─ ← ()\r\n    ├─ [0] VM::stopPrank() \r\n    │   └─ ← ()\r\n    └─ ← ()\r\n\r\n  [32967] AccountRecoveryTest::testRecoveryRequestGeneration() \r\n    ├─ [0] VM::addr(<pk>) [staticcall]\r\n    │   └─ ← newWallet: [0xBc1Ce00634302d0DfDF22B8C2b8Dc81011bCA560]\r\n    ├─ [0] VM::label(newWallet: [0xBc1Ce00634302d0DfDF22B8C2b8Dc81011bCA560], newWallet) \r\n    │   └─ ← ()\r\n    ├─ [0] VM::prank(newWallet: [0xBc1Ce00634302d0DfDF22B8C2b8Dc81011bCA560]) \r\n    │   └─ ← ()\r\n    ├─ [0] VM::expectEmit() \r\n    │   └─ ← ()\r\n    ├─ emit AccountRecoveryRequestCreated()\r\n    ├─ [14330] AccountRecovery::verifyUserAsOwnerOfTheAccount(shiven@gmail.com, 0x73686976656e40676d61696c2e636f6da0ee7a142d267c1f36714e4a8f75612f20a79720, 38) \r\n    │   ├─ emit AboutToGenerateHashUsing(receivedToken: 0x73686976656e40676d61696c2e636f6da0ee7a142d267c1f36714e4a8f75612f20a79720, nonce: 38)\r\n    │   ├─ emit RecoveryHash(recoveryHash: 0x271f87acd2085f2e203d8d983e89f336274e0c2028ebc7340703b3b141b0b6dc)\r\n    │   ├─ emit GeneratedHash(generatedHash: 0x7c3438dd181130e624805b50265942f829f784fc1720b189431743713d7e826c)\r\n    │   ├─ [0] console::log(Do the email hash match:, false) [staticcall]\r\n    │   │   └─ ← ()\r\n    │   └─ ← \"EmailVerificationFailed()\"\r\n    └─ ← \"Log != expected log\"\r\n```\r\nI'm not able to figure out why the `emailVerificationHash` & `generatedEmailVerificationHash` don't match.\r\n```\r\nemit RecoveryHash(recoveryHash: 0x271f87acd2085f2e203d8d983e89f336274e0c2028ebc7340703b3b141b0b6dc)\r\nemit GeneratedHash(generatedHash: 0x7c3438dd181130e624805b50265942f829f784fc1720b189431743713d7e826c)\r\n```\r\n\r\n### **Solution:** \r\nThe hashes match when I created the `emailVerificationHash` in the contract's` commitRecoveryHash(...)` instead of sending the hash from the test suite directly.\r\n\r\nHere's how the commitRecoveryHash() is modified:\r\n```\r\nfunction commitRecoveryHash(\r\n        bytes calldata recoveryToken,\r\n        uint256 recoveryTokenNonce\r\n    ) external onlyEmailVerificationService {\r\n        emailVerificationHash = keccak256(abi.encodePacked(recoveryToken, recoveryTokenNonce)); // generating the hash instead of receiving it\r\n    }\r\n```\r\nYou will notice how the function signature has changed. Instead of receiving the `bytes32 recoveryHash` the `commitRecoveryHash(..)` will now receive `bytes calldata recoveryToken, uint256 recoveryTokenNonce` and will generate the `recoveryHash` in the contract itself.\r\n\r\nHere's how the test setup function will look:\r\n```\r\n // commiting the recovery params to create email verification hash (representing the email recovery service)\r\n        vm.startPrank(emailService);\r\n        emit EmailServiceGeneratingHashUsing(recoveryToken, nonce);\r\n\r\n        accountRecovery.commitRecoveryHash(recoveryToken, nonce); // sending hash generation params instead of the hash itself\r\n        vm.stopPrank();\r\n```\r\n\r\nWith the `emailRecoveryHash` being produced in the contract itself, the test passes.\r\nI still don't understand **why Foundry is resulting in different hashes in the test file vs the contract**, even when using exactly the same params. I even checked by freezing the solidity versions of both the contract and test file to 0.8.18, but still, different hashes were produced. Does anyone know why this could be happening?",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/6688/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/6688/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1872852485",
    "html_url": "https://github.com/foundry-rs/foundry/issues/6688#issuecomment-1872852485",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/6688",
    "id": 1872852485,
    "node_id": "IC_kwDOGBlvNc5voXYF",
    "user": {
      "login": "mattsse",
      "id": 19890894,
      "node_id": "MDQ6VXNlcjE5ODkwODk0",
      "avatar_url": "https://avatars.githubusercontent.com/u/19890894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mattsse",
      "html_url": "https://github.com/mattsse",
      "followers_url": "https://api.github.com/users/mattsse/followers",
      "following_url": "https://api.github.com/users/mattsse/following{/other_user}",
      "gists_url": "https://api.github.com/users/mattsse/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mattsse/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mattsse/subscriptions",
      "organizations_url": "https://api.github.com/users/mattsse/orgs",
      "repos_url": "https://api.github.com/users/mattsse/repos",
      "events_url": "https://api.github.com/users/mattsse/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mattsse/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-12-31T08:30:43Z",
    "updated_at": "2023-12-31T08:30:57Z",
    "author_association": "MEMBER",
    "body": "this looks like an ABI encode issue,\r\n\r\nnote that you're using different types for the nonce uint256 vs uint64",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1872852485/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
