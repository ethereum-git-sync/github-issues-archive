{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/3732",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3732/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3732/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3732/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/3732",
  "id": 1458537327,
  "node_id": "I_kwDOGBlvNc5W74Nv",
  "number": 3732,
  "title": "Add EnvExists cheatcode",
  "user": {
    "login": "vicnaum",
    "id": 5636644,
    "node_id": "MDQ6VXNlcjU2MzY2NDQ=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5636644?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vicnaum",
    "html_url": "https://github.com/vicnaum",
    "followers_url": "https://api.github.com/users/vicnaum/followers",
    "following_url": "https://api.github.com/users/vicnaum/following{/other_user}",
    "gists_url": "https://api.github.com/users/vicnaum/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vicnaum/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vicnaum/subscriptions",
    "organizations_url": "https://api.github.com/users/vicnaum/orgs",
    "repos_url": "https://api.github.com/users/vicnaum/repos",
    "events_url": "https://api.github.com/users/vicnaum/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vicnaum/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3334394235,
      "node_id": "MDU6TGFiZWwzMzM0Mzk0MjM1",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/good%20first%20issue",
      "name": "good first issue",
      "color": "0052CC",
      "default": true,
      "description": "Good for newcomers"
    },
    {
      "id": 3593644820,
      "node_id": "LA_kwDOGBlvNc7WMqsU",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-feature",
      "name": "T-feature",
      "color": "BFD4F2",
      "default": false,
      "description": "Type: feature"
    },
    {
      "id": 3703752787,
      "node_id": "LA_kwDOGBlvNc7cwshT",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/C-forge",
      "name": "C-forge",
      "color": "5319E7",
      "default": false,
      "description": "Command: forge"
    },
    {
      "id": 3703752960,
      "node_id": "LA_kwDOGBlvNc7cwskA",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/A-cheatcodes",
      "name": "A-cheatcodes",
      "color": "FBCA04",
      "default": false,
      "description": "Area: cheatcodes"
    },
    {
      "id": 3759720552,
      "node_id": "LA_kwDOGBlvNc7gGMho",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/D-easy",
      "name": "D-easy",
      "color": "0E8A16",
      "default": false,
      "description": "Difficulty: easy"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 15,
  "created_at": "2022-11-21T20:32:29Z",
  "updated_at": "2023-03-10T00:00:54Z",
  "closed_at": "2023-03-10T00:00:54Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "### Component\n\nForge\n\n### Describe the feature you would like\n\nProposing to add a cheatcode like `envExists(string calldata key) returns (bool)` that will return `true` if the ENV key exists, and `false` if it doesn't exist.\r\n\r\n**Reasoning:**\r\nRight now there is no way to check if a specific ENV variable was set, and the whole script just reverts. This doesn't allow to have optional ENV keys, and requires setting all ENVs explicitly, even if they're optional for some test cases.\r\n\r\n**Examples:**\r\n- Having a `FORK` key to test on a fork VS testing on a local deployment. Currently the `FORK=` ENV variable should be present for the tests to run at all, even if the FORK is not used. Things get complicated if there are many such optional variables.\r\n- Having a `MNEMONIC` or `PRIVATE_KEY` variables - there is no sense to have both of them - can use either. But with current behavior they both should be set (one left as an empty string) for the script to not revert.\n\n### Additional context\n\n_No response_",
  "closed_by": {
    "login": "mds1",
    "id": 17163988,
    "node_id": "MDQ6VXNlcjE3MTYzOTg4",
    "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mds1",
    "html_url": "https://github.com/mds1",
    "followers_url": "https://api.github.com/users/mds1/followers",
    "following_url": "https://api.github.com/users/mds1/following{/other_user}",
    "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
    "organizations_url": "https://api.github.com/users/mds1/orgs",
    "repos_url": "https://api.github.com/users/mds1/repos",
    "events_url": "https://api.github.com/users/mds1/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mds1/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/3732/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3732/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1322612043",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3732#issuecomment-1322612043",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3732",
    "id": 1322612043,
    "node_id": "IC_kwDOGBlvNc5O1XVL",
    "user": {
      "login": "mattsse",
      "id": 19890894,
      "node_id": "MDQ6VXNlcjE5ODkwODk0",
      "avatar_url": "https://avatars.githubusercontent.com/u/19890894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mattsse",
      "html_url": "https://github.com/mattsse",
      "followers_url": "https://api.github.com/users/mattsse/followers",
      "following_url": "https://api.github.com/users/mattsse/following{/other_user}",
      "gists_url": "https://api.github.com/users/mattsse/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mattsse/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mattsse/subscriptions",
      "organizations_url": "https://api.github.com/users/mattsse/orgs",
      "repos_url": "https://api.github.com/users/mattsse/repos",
      "events_url": "https://api.github.com/users/mattsse/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mattsse/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-21T20:37:12Z",
    "updated_at": "2022-11-21T20:37:12Z",
    "author_association": "MEMBER",
    "body": "I can see how having a `envIsSet()` code is useful.\r\n\r\na workaround for this is something like:\r\n\r\n```solidity\r\n  try vm.envBool(\"MYVAR\") returns (bool myVar) {\r\n            if (myVar) {...};\r\n        } catch {\r\n           \r\n        }\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1322612043/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1322800812",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3732#issuecomment-1322800812",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3732",
    "id": 1322800812,
    "node_id": "IC_kwDOGBlvNc5O2Fas",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-21T23:35:52Z",
    "updated_at": "2022-11-21T23:35:52Z",
    "author_association": "COLLABORATOR",
    "body": "Partly related to https://github.com/foundry-rs/forge-std/pull/226, where we discuss how `vm.parseJson` returns an empty string if the provided key isn't found, and we'll add a `keyExists` helper method to validate the result. One issue with doing the same here is then you can't support env vars that are actually empty.\r\n\r\nI've used the try/catch workaround in the past, and try/catch was introduced in solidity 0.6.2, so we can implement that workaround in forge-std too. Perhaps something like `tryEnvBool(string name, bool default)` where the second arg is the default return value if not found",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1322800812/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1322802006",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3732#issuecomment-1322802006",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3732",
    "id": 1322802006,
    "node_id": "IC_kwDOGBlvNc5O2FtW",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-21T23:37:24Z",
    "updated_at": "2022-11-21T23:37:24Z",
    "author_association": "COLLABORATOR",
    "body": "@mattsse if you think the forge-std solution is the preferable way to handle it / @vicnaum if you're ok with that solution lmk, and in that case can we transfer this issue to forge-std?\r\n\r\nI'm unsure whether the forge-std solution or an `envIsSet` cheatcode is preferable, curious to hear thoughts here",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1322802006/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1323356181",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3732#issuecomment-1323356181",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3732",
    "id": 1323356181,
    "node_id": "IC_kwDOGBlvNc5O4NAV",
    "user": {
      "login": "vicnaum",
      "id": 5636644,
      "node_id": "MDQ6VXNlcjU2MzY2NDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5636644?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vicnaum",
      "html_url": "https://github.com/vicnaum",
      "followers_url": "https://api.github.com/users/vicnaum/followers",
      "following_url": "https://api.github.com/users/vicnaum/following{/other_user}",
      "gists_url": "https://api.github.com/users/vicnaum/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vicnaum/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vicnaum/subscriptions",
      "organizations_url": "https://api.github.com/users/vicnaum/orgs",
      "repos_url": "https://api.github.com/users/vicnaum/repos",
      "events_url": "https://api.github.com/users/vicnaum/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vicnaum/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-22T09:24:46Z",
    "updated_at": "2022-11-22T09:25:35Z",
    "author_association": "NONE",
    "body": "@mattsse Oh, for some reason I remember try/catch not working for me before, but maybe I'm just confusing it with smth else (I definitely saw `Try can only be used with external function calls and contract creation calls.` when I was trying to parse non-existing JSON keys).\r\n\r\nBut in this case of ENVs - it works! So yes, as @mds1 says - we can go with `forge-std` solution with try/catch - that sounds perfectly fine (I just was mistakenly thinking that try/catch wouldn't work, but it does).\r\n\r\nI just have several questions I want to discuss before I start:\r\n\r\n- If we want universal `isEnvSet` helper - am I correct that `vm.envString` is the most universal solution that wouldn't fail on any key value, and only fails when the key doesn't exist?\r\n- Should it be `envIsSet` or `isEnvSet`? I'm leaning towards `isEnvSet` but would like to hear your opinions.\r\n- Are you ok with me creating `StdEnv.sol` and putting all the helper functions (like `tryEnvBool()` etc) there?\r\n- What's the best way to create an environment fixture for testing? Should I do `setEnv` in setUp, or better init from a file? If file - then how? My `forge test` doesn't automatically load `.env` for some reason, only if I `source` it beforehand (and use `export` keyword).",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1323356181/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1323433719",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3732#issuecomment-1323433719",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3732",
    "id": 1323433719,
    "node_id": "IC_kwDOGBlvNc5O4f73",
    "user": {
      "login": "mattsse",
      "id": 19890894,
      "node_id": "MDQ6VXNlcjE5ODkwODk0",
      "avatar_url": "https://avatars.githubusercontent.com/u/19890894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mattsse",
      "html_url": "https://github.com/mattsse",
      "followers_url": "https://api.github.com/users/mattsse/followers",
      "following_url": "https://api.github.com/users/mattsse/following{/other_user}",
      "gists_url": "https://api.github.com/users/mattsse/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mattsse/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mattsse/subscriptions",
      "organizations_url": "https://api.github.com/users/mattsse/orgs",
      "repos_url": "https://api.github.com/users/mattsse/repos",
      "events_url": "https://api.github.com/users/mattsse/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mattsse/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-22T10:25:12Z",
    "updated_at": "2022-11-22T10:25:12Z",
    "author_association": "MEMBER",
    "body": "> isEnvSet \r\n\r\nsgtm, let's add that\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1323433719/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1328084317",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3732#issuecomment-1328084317",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3732",
    "id": 1328084317,
    "node_id": "IC_kwDOGBlvNc5PKPVd",
    "user": {
      "login": "alcueca",
      "id": 38806121,
      "node_id": "MDQ6VXNlcjM4ODA2MTIx",
      "avatar_url": "https://avatars.githubusercontent.com/u/38806121?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alcueca",
      "html_url": "https://github.com/alcueca",
      "followers_url": "https://api.github.com/users/alcueca/followers",
      "following_url": "https://api.github.com/users/alcueca/following{/other_user}",
      "gists_url": "https://api.github.com/users/alcueca/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alcueca/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alcueca/subscriptions",
      "organizations_url": "https://api.github.com/users/alcueca/orgs",
      "repos_url": "https://api.github.com/users/alcueca/repos",
      "events_url": "https://api.github.com/users/alcueca/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alcueca/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-26T17:27:28Z",
    "updated_at": "2022-11-26T17:28:13Z",
    "author_association": "NONE",
    "body": "May I suggest a different implementation?\r\n\r\nInstead of `isEnvSet` (or maybe as an addition to it), the current `env*` functions should be overloaded to accept an extra parameter, and if the environment variable is not found, the extra parameter is returned.\r\n\r\nExample:\r\n`bool mock = vm.envBool(\"MOCK\", true)` would assign the contents of $MOCK to `mock`, or `true` if $MOCK is not set.\r\n`string memory network = vm.envString(\"NETWORK\", \"mainnet\")` would assign the contents of $NETWORK to `network`, or \"mainnet\" if $NETWORK is not set.\r\n\r\nThe existing `vm.env*` methods should of course stay, in case users prefer the call to revert if the variable is not set.\r\n\r\nJust a suggestion that would fit better my use case, feel free to ignore  it. I'll be happy if this is implemented in any way.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1328084317/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1328085795",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3732#issuecomment-1328085795",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3732",
    "id": 1328085795,
    "node_id": "IC_kwDOGBlvNc5PKPsj",
    "user": {
      "login": "mattsse",
      "id": 19890894,
      "node_id": "MDQ6VXNlcjE5ODkwODk0",
      "avatar_url": "https://avatars.githubusercontent.com/u/19890894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mattsse",
      "html_url": "https://github.com/mattsse",
      "followers_url": "https://api.github.com/users/mattsse/followers",
      "following_url": "https://api.github.com/users/mattsse/following{/other_user}",
      "gists_url": "https://api.github.com/users/mattsse/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mattsse/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mattsse/subscriptions",
      "organizations_url": "https://api.github.com/users/mattsse/orgs",
      "repos_url": "https://api.github.com/users/mattsse/repos",
      "events_url": "https://api.github.com/users/mattsse/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mattsse/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-26T17:37:50Z",
    "updated_at": "2022-11-26T17:38:06Z",
    "author_association": "MEMBER",
    "body": "this is pretty useful and could be added easily, don't think we'd run into issues with solidity here.\r\n\r\nBut I think `isEnvSet` is still useful on its own to check if a var is set, regardless of the type of value it holds.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1328085795/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1328086085",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3732#issuecomment-1328086085",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3732",
    "id": 1328086085,
    "node_id": "IC_kwDOGBlvNc5PKPxF",
    "user": {
      "login": "vicnaum",
      "id": 5636644,
      "node_id": "MDQ6VXNlcjU2MzY2NDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5636644?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vicnaum",
      "html_url": "https://github.com/vicnaum",
      "followers_url": "https://api.github.com/users/vicnaum/followers",
      "following_url": "https://api.github.com/users/vicnaum/following{/other_user}",
      "gists_url": "https://api.github.com/users/vicnaum/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vicnaum/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vicnaum/subscriptions",
      "organizations_url": "https://api.github.com/users/vicnaum/orgs",
      "repos_url": "https://api.github.com/users/vicnaum/repos",
      "events_url": "https://api.github.com/users/vicnaum/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vicnaum/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-26T17:40:00Z",
    "updated_at": "2022-11-26T17:40:00Z",
    "author_association": "NONE",
    "body": "> May I suggest a different implementation?\r\n> \r\n> Instead of `isEnvSet` (or maybe as an addition to it), the current `env*` functions should be overloaded to accept an extra parameter, and if the environment variable is not found, the extra parameter is returned.\r\n> \r\n> Example: `bool mock = vm.envBool(\"MOCK\", true)` would assign the contents of $MOCK to `mock`, or `true` if $MOCK is not set. `string memory network = vm.envString(\"NETWORK\", \"mainnet\")` would assign the contents of $NETWORK to `network`, or \"mainnet\" if $NETWORK is not set.\r\n> \r\n> The existing `vm.env*` methods should of course stay, in case users prefer the call to revert if the variable is not set.\r\n> \r\n> Just a suggestion that would fit better my use case, feel free to ignore it. I'll be happy if this is implemented in any way.\r\n\r\nThis sounds amazing! I like that.\r\nOk, will implement both.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1328086085/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1328401986",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3732#issuecomment-1328401986",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3732",
    "id": 1328401986,
    "node_id": "IC_kwDOGBlvNc5PLc5C",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-28T01:12:15Z",
    "updated_at": "2022-11-28T01:12:15Z",
    "author_association": "COLLABORATOR",
    "body": "+1 to @alcueca's suggestion, came to this issue to make the same comment in favor of the solution in https://github.com/foundry-rs/forge-std/pull/237\r\n\r\nThanks for implementing @vicnaum!",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1328401986/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1328785304",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3732#issuecomment-1328785304",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3732",
    "id": 1328785304,
    "node_id": "IC_kwDOGBlvNc5PM6eY",
    "user": {
      "login": "vicnaum",
      "id": 5636644,
      "node_id": "MDQ6VXNlcjU2MzY2NDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5636644?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vicnaum",
      "html_url": "https://github.com/vicnaum",
      "followers_url": "https://api.github.com/users/vicnaum/followers",
      "following_url": "https://api.github.com/users/vicnaum/following{/other_user}",
      "gists_url": "https://api.github.com/users/vicnaum/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vicnaum/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vicnaum/subscriptions",
      "organizations_url": "https://api.github.com/users/vicnaum/orgs",
      "repos_url": "https://api.github.com/users/vicnaum/repos",
      "events_url": "https://api.github.com/users/vicnaum/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vicnaum/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-28T09:35:32Z",
    "updated_at": "2022-11-28T09:36:57Z",
    "author_association": "NONE",
    "body": "> +1 to @alcueca's suggestion, came to this issue to make the same comment in favor of the solution in [foundry-rs/forge-std#237](https://github.com/foundry-rs/forge-std/pull/237)\r\n> \r\n> Thanks for implementing @vicnaum!\r\n\r\nOh wait, I've meant implementing that in Solidity, cause I don't know any Rust (yet). Now I see those are all native vm.cheatcodes (not solidity helpers like the JSON case) - so I won't be able to overload them in Rust, sorry :-/\r\n\r\nAnyways, when I looked at what's available, I have concerns about these array with delimiter functions, and especially envString one:\r\nhttps://github.com/foundry-rs/foundry/blob/54ec8e361fea2a9a32e9590d88c51342f8634e8f/testdata/cheats/Cheats.sol#L39\r\n\r\nIt's (string,string) - so it will clash with overloaded `(string key, string default)` one, I guess?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1328785304/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1332756886",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3732#issuecomment-1332756886",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3732",
    "id": 1332756886,
    "node_id": "IC_kwDOGBlvNc5PcEGW",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-30T21:29:45Z",
    "updated_at": "2022-11-30T21:29:45Z",
    "author_association": "COLLABORATOR",
    "body": "> It's (string,string) - so it will clash with overloaded `(string key, string default)` one, I guess?\r\n\r\nGood point, what if we call all the new functions here `vm.envWithDefault(string name, <defaultVal>)` instead? \r\n- Avoids the clash pointed out above\r\n- Since the default vals are all different types, the methods can have the same name with the overloads to distinguish them",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1332756886/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1334457475",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3732#issuecomment-1334457475",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3732",
    "id": 1334457475,
    "node_id": "IC_kwDOGBlvNc5PijSD",
    "user": {
      "login": "slvDev",
      "id": 15254847,
      "node_id": "MDQ6VXNlcjE1MjU0ODQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/15254847?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/slvDev",
      "html_url": "https://github.com/slvDev",
      "followers_url": "https://api.github.com/users/slvDev/followers",
      "following_url": "https://api.github.com/users/slvDev/following{/other_user}",
      "gists_url": "https://api.github.com/users/slvDev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/slvDev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/slvDev/subscriptions",
      "organizations_url": "https://api.github.com/users/slvDev/orgs",
      "repos_url": "https://api.github.com/users/slvDev/repos",
      "events_url": "https://api.github.com/users/slvDev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/slvDev/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-12-01T21:18:30Z",
    "updated_at": "2022-12-01T21:18:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Good point, what if we call all the new functions here `vm.envWithDefault(string name, <defaultVal>)` instead?\r\n\r\n@mds1 please take a look at my implementation - created a pull request here #3810\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1334457475/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1335116998",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3732#issuecomment-1335116998",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3732",
    "id": 1335116998,
    "node_id": "IC_kwDOGBlvNc5PlETG",
    "user": {
      "login": "vicnaum",
      "id": 5636644,
      "node_id": "MDQ6VXNlcjU2MzY2NDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5636644?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vicnaum",
      "html_url": "https://github.com/vicnaum",
      "followers_url": "https://api.github.com/users/vicnaum/followers",
      "following_url": "https://api.github.com/users/vicnaum/following{/other_user}",
      "gists_url": "https://api.github.com/users/vicnaum/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vicnaum/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vicnaum/subscriptions",
      "organizations_url": "https://api.github.com/users/vicnaum/orgs",
      "repos_url": "https://api.github.com/users/vicnaum/repos",
      "events_url": "https://api.github.com/users/vicnaum/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vicnaum/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-12-02T11:39:29Z",
    "updated_at": "2022-12-02T11:39:29Z",
    "author_association": "NONE",
    "body": "Should we also modify `Vm.sol` in `forge-std` repo to make it work?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1335116998/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1335433275",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3732#issuecomment-1335433275",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3732",
    "id": 1335433275,
    "node_id": "IC_kwDOGBlvNc5PmRg7",
    "user": {
      "login": "gakonst",
      "id": 17802178,
      "node_id": "MDQ6VXNlcjE3ODAyMTc4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17802178?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gakonst",
      "html_url": "https://github.com/gakonst",
      "followers_url": "https://api.github.com/users/gakonst/followers",
      "following_url": "https://api.github.com/users/gakonst/following{/other_user}",
      "gists_url": "https://api.github.com/users/gakonst/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gakonst/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gakonst/subscriptions",
      "organizations_url": "https://api.github.com/users/gakonst/orgs",
      "repos_url": "https://api.github.com/users/gakonst/repos",
      "events_url": "https://api.github.com/users/gakonst/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gakonst/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-12-02T15:38:12Z",
    "updated_at": "2022-12-02T15:38:12Z",
    "author_association": "MEMBER",
    "body": "Yep!",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1335433275/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1463011833",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3732#issuecomment-1463011833",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3732",
    "id": 1463011833,
    "node_id": "IC_kwDOGBlvNc5XM8n5",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-10T00:00:54Z",
    "updated_at": "2023-03-10T00:00:54Z",
    "author_association": "COLLABORATOR",
    "body": "We have `vm.envOr`, and I'm not sure of a use case for `vm.isEnvSet` where you strictly care about if it's set and don't care about it's value, so going to close this. However if someone does have a need for `isEnvSet` feel free to create a new issue",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1463011833/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
