{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/3723",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3723/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3723/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3723/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/3723",
  "id": 1457750848,
  "node_id": "I_kwDOGBlvNc5W44NA",
  "number": 3723,
  "title": "Forge doesn't work with multiple \"vm.expectRevert\" when testing free functions",
  "user": {
    "login": "PaulRBerg",
    "id": 8782666,
    "node_id": "MDQ6VXNlcjg3ODI2NjY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8782666?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/PaulRBerg",
    "html_url": "https://github.com/PaulRBerg",
    "followers_url": "https://api.github.com/users/PaulRBerg/followers",
    "following_url": "https://api.github.com/users/PaulRBerg/following{/other_user}",
    "gists_url": "https://api.github.com/users/PaulRBerg/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/PaulRBerg/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/PaulRBerg/subscriptions",
    "organizations_url": "https://api.github.com/users/PaulRBerg/orgs",
    "repos_url": "https://api.github.com/users/PaulRBerg/repos",
    "events_url": "https://api.github.com/users/PaulRBerg/events{/privacy}",
    "received_events_url": "https://api.github.com/users/PaulRBerg/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3334394228,
      "node_id": "MDU6TGFiZWwzMzM0Mzk0MjI4",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-bug",
      "name": "T-bug",
      "color": "d73a4a",
      "default": false,
      "description": "Type: bug"
    },
    {
      "id": 3593644915,
      "node_id": "LA_kwDOGBlvNc7WMqtz",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/Cmd-forge-test",
      "name": "Cmd-forge-test",
      "color": "006B75",
      "default": false,
      "description": "Command: forge test"
    },
    {
      "id": 3703752787,
      "node_id": "LA_kwDOGBlvNc7cwshT",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/C-forge",
      "name": "C-forge",
      "color": "5319E7",
      "default": false,
      "description": "Command: forge"
    },
    {
      "id": 3703752960,
      "node_id": "LA_kwDOGBlvNc7cwskA",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/A-cheatcodes",
      "name": "A-cheatcodes",
      "color": "FBCA04",
      "default": false,
      "description": "Area: cheatcodes"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 10,
  "created_at": "2022-11-21T11:09:18Z",
  "updated_at": "2023-03-10T00:03:43Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "### Component\n\nForge\n\n### Have you ensured that all of these are up to date?\n\n- [X] Foundry\n- [X] Foundryup\n\n### What version of Foundry are you on?\n\nforge 0.2.0 (cb925b1 2022-11-21T00:09:19.970948Z)\n\n### What command(s) is the bug in?\n\nforge test\n\n### Operating System\n\nmacOS (Apple Silicon)\n\n### Describe the bug\n\nGiven the following test:\r\n\r\n```solidity\r\nfunction testMultipleReverts() public {\r\n    vm.expectRevert();\r\n    revert();\r\n\r\n    vm.expectRevert();\r\n    console2.log(\"Do not revert\");\r\n}\r\n```\r\n\r\nForge will consider the test to be passed, even if it should be failed, because there is no second revert.",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/3723/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3723/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1323380467",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3723#issuecomment-1323380467",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3723",
    "id": 1323380467,
    "node_id": "IC_kwDOGBlvNc5O4S7z",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-22T09:43:51Z",
    "updated_at": "2022-11-22T09:43:51Z",
    "author_association": "COLLABORATOR",
    "body": "Forge does work with multiple `vm.expectReverts`, but it operates on external calls only. For example the below test will fail\r\n\r\n```solidity\r\ncontract X {\r\n  function foo(bool shouldRevert) public {\r\n    if (shouldRevert) revert();\r\n  }\r\n}\r\n\r\ncontract Test6 is Test {\r\n    function testMultipleReverts() public {\r\n      X x = new X();\r\n      \r\n      vm.expectRevert();\r\n      x.foo(true);\r\n\r\n      vm.expectRevert();\r\n      x.foo(false);\r\n  }\r\n}\r\n```\r\n\r\nThough there may still be a problem in your example, not certain so deferring to @mattsse for these questions:\r\n- `revert()` is not an external call so that should be ignored and cause the test to fail? Execution does stop after that line, but the test is marked passed, not failed\r\n- I believe `console.log` calls are intercepted and not considered for cheatcodes, which relates to the next item\r\n- Presumably a trailing `expectRevert` with no call following should cause a failure? Similarly for all `expect*` cheats, but not sure if this was previously discussed and decided to be this way for some reason",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1323380467/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1323530727",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3723#issuecomment-1323530727",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3723",
    "id": 1323530727,
    "node_id": "IC_kwDOGBlvNc5O43nn",
    "user": {
      "login": "PaulRBerg",
      "id": 8782666,
      "node_id": "MDQ6VXNlcjg3ODI2NjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8782666?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PaulRBerg",
      "html_url": "https://github.com/PaulRBerg",
      "followers_url": "https://api.github.com/users/PaulRBerg/followers",
      "following_url": "https://api.github.com/users/PaulRBerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/PaulRBerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PaulRBerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PaulRBerg/subscriptions",
      "organizations_url": "https://api.github.com/users/PaulRBerg/orgs",
      "repos_url": "https://api.github.com/users/PaulRBerg/repos",
      "events_url": "https://api.github.com/users/PaulRBerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PaulRBerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-22T11:34:57Z",
    "updated_at": "2022-11-22T11:37:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "## Context\r\n\r\nYou're right @mds1, thanks for explaining. You have helped me get to the bottom of this issue.\r\n\r\nMy problem situation is that I am using free functions that can revert, e.g. the [`ceil`][1] function which I defined like this:\r\n\r\n```solidity\r\nfunction ceil(SD59x18 x) pure returns (SD59x18 result) {\r\n    if (x.gt(MAX_WHOLE_SD59x18)) {\r\n        revert PRBMathSD59x18__CeilOverflow(x);\r\n    }\r\n    // ...\r\n}\r\n```\r\n\r\n## Sample Tests\r\n\r\nI played a little with Forge and I managed to identify two scenarios starting from the following free function:\r\n\r\n```solidity\r\nfunction doRevert(bool shouldRevert) pure {\r\n    if (shouldRevert) {\r\n        revert();\r\n    }\r\n}\r\n```\r\n\r\n### Simple Revert\r\n\r\nWorks well ✅\r\n\r\n```solidity\r\nfunction testExpectRevertPasses() external {\r\n    vm.expectRevert();\r\n    doRevert(true);\r\n}\r\n\r\nfunction testExpectRevertFails() external {\r\n    doRevert(false);\r\n}\r\n```\r\n\r\n### Multiple Reverts\r\n\r\nDoesn't fail when it should fail ❌\r\n\r\n```solidity\r\n// Doesn't fail!\r\nfunction testExpectRevertFails() external {\r\n    vm.expectRevert();\r\n    doRevert(true);\r\n\r\n    // The test execution doesn't reach this\r\n    vm.expectRevert();\r\n    doRevert(false);\r\n}\r\n```\r\n\r\n## Workarounds\r\n\r\nAs I see it, there are two immediate solutions to this:\r\n\r\n1. Wrap all of my free functions in an intermediary mock contract used for testing (adds maintenance costs though).\r\n2. Write one test function per revert case.\r\n\r\nI opted for the 2nd solution for the time being, since I do not have that many inputs for the revert cases. One input per revert suffices.\r\n\r\nHowever, I think that this is a big footgun when testing free functions with Forge. My expectation is that free functions will become more popular with time, thanks to the introduction of [global binding of `using for`](https://blog.soliditylang.org/2022/03/16/solidity-0.8.13-release-announcement/) introduced in Solidity v0.8.13.\r\n\r\nWhat was the rationale behind making Forge look only for reverts in external calls?\r\n\r\n[1]: https://github.com/paulrberg/prb-math/blob/7f6569d237fb04bd0cb0f405e501d4c7c34ba4ad/src/SD59x18.sol#L190",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1323530727/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1323696016",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3723#issuecomment-1323696016",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3723",
    "id": 1323696016,
    "node_id": "IC_kwDOGBlvNc5O5f-Q",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-22T13:40:42Z",
    "updated_at": "2022-11-22T14:57:33Z",
    "author_association": "COLLABORATOR",
    "body": "Hooking into CALLs is much easier than hooking into JUMPs, so this applies to many cheatcodes, more info in https://github.com/foundry-rs/foundry/issues/864 and https://github.com/foundry-rs/foundry/issues/432 and probably some other issues.\r\n\r\nFWIW I think there are a few EOF-related EIPs in consideration that should make this easier in the future. But until then unfortunately you'll have to use one of those workarounds unless @mattsse has other ideas.\r\n\r\nThough I do agree the current handling is not ideal, we probably should:\r\n1. Mark a test failed if the test method itself reverts, no matter what, since I _think_ the fact that your `testExpectRevertPasses` works is not intended behavior\r\n2. Fail whenever there is a dangling `expect*` cheat \r\n\r\n@paulrberg @mattsse lmk your thoughts on that\r\n\r\nMaybe also related to https://github.com/foundry-rs/foundry/issues/1745",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1323696016/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1323786319",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3723#issuecomment-1323786319",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3723",
    "id": 1323786319,
    "node_id": "IC_kwDOGBlvNc5O52BP",
    "user": {
      "login": "PaulRBerg",
      "id": 8782666,
      "node_id": "MDQ6VXNlcjg3ODI2NjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8782666?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PaulRBerg",
      "html_url": "https://github.com/PaulRBerg",
      "followers_url": "https://api.github.com/users/PaulRBerg/followers",
      "following_url": "https://api.github.com/users/PaulRBerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/PaulRBerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PaulRBerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PaulRBerg/subscriptions",
      "organizations_url": "https://api.github.com/users/PaulRBerg/orgs",
      "repos_url": "https://api.github.com/users/PaulRBerg/repos",
      "events_url": "https://api.github.com/users/PaulRBerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PaulRBerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-22T14:45:08Z",
    "updated_at": "2022-11-22T14:45:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Hooking into CALLs is much easier than hooking into JUMPs, so this applies to many cheatcodes\r\n\r\nOh, I see.\r\n\r\n> more info in https://github.com/foundry-rs/foundry/issues/3723\r\n\r\nA bit of infinite recursion referencing #3723 in #3723!\r\n\r\n> there are a few EOF-related EIPs in consideration\r\n\r\nYeah, looking forward to EOF. Seems like it's scheduled to be included in [Shanghai](https://twitter.com/lightclients/status/1593270266909450241).\r\n\r\n> Mark a test failed if the test method itself reverts\r\n\r\nThis would be a breaking change for many Forge users.\r\n\r\n> since I think the fact that your `testExpectRevertPasses` works is not intended behavior\r\n\r\nActually, it is. As I said, I am testing an external function. I want the test to pass when I expect a revert and the free function reverts.\r\n\r\n> Fail whenever there is a dangling `expect*` cheat\r\n\r\nThis would be useful.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1323786319/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1323818953",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3723#issuecomment-1323818953",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3723",
    "id": 1323818953,
    "node_id": "IC_kwDOGBlvNc5O59_J",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-22T15:04:03Z",
    "updated_at": "2022-11-22T15:04:03Z",
    "author_association": "COLLABORATOR",
    "body": "> A bit of infinite recursion referencing https://github.com/foundry-rs/foundry/issues/3723 in https://github.com/foundry-rs/foundry/issues/3723!\r\n\r\nOops, just updated to https://github.com/foundry-rs/foundry/issues/864\r\n\r\n> since I think the fact that your `testExpectRevertPasses` works is not intended behavior\r\n>\r\n> > Actually, it is. As I said, I am testing an external function. I want the test to pass when I expect a revert and the free function reverts.\r\n\r\nTo clarify I mean at the forge-level it's (afaik) not intended behavior, as shown in #864: expectRevert should only be changing the result when there are CALLs, but the above example shows that `expectRevert` changes a the pass/fail status of a test which reverts directly in the test function, with no external calls\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1323818953/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1323846376",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3723#issuecomment-1323846376",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3723",
    "id": 1323846376,
    "node_id": "IC_kwDOGBlvNc5O6Ero",
    "user": {
      "login": "PaulRBerg",
      "id": 8782666,
      "node_id": "MDQ6VXNlcjg3ODI2NjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8782666?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PaulRBerg",
      "html_url": "https://github.com/PaulRBerg",
      "followers_url": "https://api.github.com/users/PaulRBerg/followers",
      "following_url": "https://api.github.com/users/PaulRBerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/PaulRBerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PaulRBerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PaulRBerg/subscriptions",
      "organizations_url": "https://api.github.com/users/PaulRBerg/orgs",
      "repos_url": "https://api.github.com/users/PaulRBerg/repos",
      "events_url": "https://api.github.com/users/PaulRBerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PaulRBerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-22T15:22:46Z",
    "updated_at": "2022-11-22T15:22:46Z",
    "author_association": "CONTRIBUTOR",
    "body": "> at the forge-level it's (afaik) not intended behavior\r\n\r\nOh, I see.\r\n\r\nWhatever the case, if you do end up modifying the current behavior of `expectRevert`, that may warrant posting an update in the Telegram group chats, to notify everyone of the new behavior.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1323846376/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1333537806",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3723#issuecomment-1333537806",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3723",
    "id": 1333537806,
    "node_id": "IC_kwDOGBlvNc5PfCwO",
    "user": {
      "login": "0xbok",
      "id": 1689531,
      "node_id": "MDQ6VXNlcjE2ODk1MzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1689531?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/0xbok",
      "html_url": "https://github.com/0xbok",
      "followers_url": "https://api.github.com/users/0xbok/followers",
      "following_url": "https://api.github.com/users/0xbok/following{/other_user}",
      "gists_url": "https://api.github.com/users/0xbok/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/0xbok/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/0xbok/subscriptions",
      "organizations_url": "https://api.github.com/users/0xbok/orgs",
      "repos_url": "https://api.github.com/users/0xbok/repos",
      "events_url": "https://api.github.com/users/0xbok/events{/privacy}",
      "received_events_url": "https://api.github.com/users/0xbok/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-12-01T10:19:36Z",
    "updated_at": "2022-12-01T10:19:36Z",
    "author_association": "NONE",
    "body": "related issue: https://github.com/foundry-rs/foundry/issues/3437",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1333537806/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1335816478",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3723#issuecomment-1335816478",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3723",
    "id": 1335816478,
    "node_id": "IC_kwDOGBlvNc5PnvEe",
    "user": {
      "login": "brockelmore",
      "id": 31553173,
      "node_id": "MDQ6VXNlcjMxNTUzMTcz",
      "avatar_url": "https://avatars.githubusercontent.com/u/31553173?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brockelmore",
      "html_url": "https://github.com/brockelmore",
      "followers_url": "https://api.github.com/users/brockelmore/followers",
      "following_url": "https://api.github.com/users/brockelmore/following{/other_user}",
      "gists_url": "https://api.github.com/users/brockelmore/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brockelmore/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brockelmore/subscriptions",
      "organizations_url": "https://api.github.com/users/brockelmore/orgs",
      "repos_url": "https://api.github.com/users/brockelmore/repos",
      "events_url": "https://api.github.com/users/brockelmore/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brockelmore/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-12-02T20:35:14Z",
    "updated_at": "2022-12-02T20:35:14Z",
    "author_association": "MEMBER",
    "body": "This code:\r\n```solidity\r\nfunction testMultipleReverts() public {\r\n    vm.expectRevert();\r\n    revert();\r\n\r\n    vm.expectRevert();\r\n    console2.log(\"Do not revert\");\r\n}\r\n```\r\n\r\nMakes no sense because the optimizer will always optimize anything out that it *knows* is unreachable fwiw",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1335816478/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1335818382",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3723#issuecomment-1335818382",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3723",
    "id": 1335818382,
    "node_id": "IC_kwDOGBlvNc5PnviO",
    "user": {
      "login": "PaulRBerg",
      "id": 8782666,
      "node_id": "MDQ6VXNlcjg3ODI2NjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8782666?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PaulRBerg",
      "html_url": "https://github.com/PaulRBerg",
      "followers_url": "https://api.github.com/users/PaulRBerg/followers",
      "following_url": "https://api.github.com/users/PaulRBerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/PaulRBerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PaulRBerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PaulRBerg/subscriptions",
      "organizations_url": "https://api.github.com/users/PaulRBerg/orgs",
      "repos_url": "https://api.github.com/users/PaulRBerg/repos",
      "events_url": "https://api.github.com/users/PaulRBerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PaulRBerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-12-02T20:38:10Z",
    "updated_at": "2022-12-02T20:42:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "@brockelmore with that code snippet I have tried to simulate a real-world scenario in which multiple reverts are needed, e.g. the case of [table tests](https://github.com/foundry-rs/foundry/issues/858) for tests that expect a revert.\r\n\r\nSee this related issue in my PRBMath repository: https://github.com/paulrberg/prb-math/issues/129.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1335818382/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1336004577",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3723#issuecomment-1336004577",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3723",
    "id": 1336004577,
    "node_id": "IC_kwDOGBlvNc5Poc_h",
    "user": {
      "login": "brockelmore",
      "id": 31553173,
      "node_id": "MDQ6VXNlcjMxNTUzMTcz",
      "avatar_url": "https://avatars.githubusercontent.com/u/31553173?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brockelmore",
      "html_url": "https://github.com/brockelmore",
      "followers_url": "https://api.github.com/users/brockelmore/followers",
      "following_url": "https://api.github.com/users/brockelmore/following{/other_user}",
      "gists_url": "https://api.github.com/users/brockelmore/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brockelmore/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brockelmore/subscriptions",
      "organizations_url": "https://api.github.com/users/brockelmore/orgs",
      "repos_url": "https://api.github.com/users/brockelmore/repos",
      "events_url": "https://api.github.com/users/brockelmore/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brockelmore/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-12-03T01:37:51Z",
    "updated_at": "2022-12-03T01:38:11Z",
    "author_association": "MEMBER",
    "body": ">See this related issue in my PRBMath repository: https://github.com/paulrberg/prb-math/issues/129.\r\n\r\nFWIW, technically most of the test pattern usage here was actually not suppose to be allowed (i.e. `expectRevert` working at the same call depth & *without an external call*), but there was a bug in the code (see  #3820). We have generally decided that we will likely continue to support this due to how many people rely on this pattern now and try to make the footgun less painful by emitting a warning when you may try to do something you can't.\r\n\r\nThere is a non-zero chance we could eventually support multiple conditional reverts at the same call depth, but not promising anything as of now (I have an MVP but its not robust & is easily broken).",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1336004577/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
