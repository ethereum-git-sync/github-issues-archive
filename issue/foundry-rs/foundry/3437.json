{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/3437",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3437/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3437/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3437/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/3437",
  "id": 1394635096,
  "node_id": "I_kwDOGBlvNc5TIHFY",
  "number": 3437,
  "title": "Test function early returns after `vm.expectRevert`",
  "user": {
    "login": "0xbok",
    "id": 1689531,
    "node_id": "MDQ6VXNlcjE2ODk1MzE=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1689531?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/0xbok",
    "html_url": "https://github.com/0xbok",
    "followers_url": "https://api.github.com/users/0xbok/followers",
    "following_url": "https://api.github.com/users/0xbok/following{/other_user}",
    "gists_url": "https://api.github.com/users/0xbok/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/0xbok/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/0xbok/subscriptions",
    "organizations_url": "https://api.github.com/users/0xbok/orgs",
    "repos_url": "https://api.github.com/users/0xbok/repos",
    "events_url": "https://api.github.com/users/0xbok/events{/privacy}",
    "received_events_url": "https://api.github.com/users/0xbok/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3334394228,
      "node_id": "MDU6TGFiZWwzMzM0Mzk0MjI4",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-bug",
      "name": "T-bug",
      "color": "d73a4a",
      "default": false,
      "description": "Type: bug"
    },
    {
      "id": 3703752787,
      "node_id": "LA_kwDOGBlvNc7cwshT",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/C-forge",
      "name": "C-forge",
      "color": "5319E7",
      "default": false,
      "description": "Command: forge"
    },
    {
      "id": 3703752960,
      "node_id": "LA_kwDOGBlvNc7cwskA",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/A-cheatcodes",
      "name": "A-cheatcodes",
      "color": "FBCA04",
      "default": false,
      "description": "Area: cheatcodes"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 13,
  "created_at": "2022-10-03T12:16:28Z",
  "updated_at": "2023-04-10T20:48:46Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "### Component\n\nForge\n\n### Have you ensured that all of these are up to date?\n\n- [X] Foundry\n- [X] Foundryup\n\n### What version of Foundry are you on?\n\nforge 0.2.0 (d7733ee 2022-10-03T00:06:06.841223Z)\n\n### What command(s) is the bug in?\n\nforge test\n\n### Operating System\n\nmacOS (Apple Silicon)\n\n### Describe the bug\n\n```solidity\r\npragma solidity 0.8.4;\r\n\r\nimport \"forge-std/Test.sol\";\r\n\r\ncontract ContractTest is Test {\r\n    function setUp() public {}\r\n\r\n    function rever() internal {\r\n        revert();\r\n    }\r\n\r\n    function testExample() public {\r\n        vm.expectRevert();\r\n        rever();\r\n\r\n        rever();\r\n        console.log(\"Does not print\");\r\n    }\r\n}\r\n```\r\nRunning `forge test -vvv` passes this test and also doesn't print \"Does not print\" on console. In summary, after `vm.expectRevert()` the test just executes the call and does not run the remaining test.",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/3437/reactions",
    "total_count": 1,
    "+1": 1,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3437/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1265935218",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3437#issuecomment-1265935218",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3437",
    "id": 1265935218,
    "node_id": "IC_kwDOGBlvNc5LdKNy",
    "user": {
      "login": "mattsse",
      "id": 19890894,
      "node_id": "MDQ6VXNlcjE5ODkwODk0",
      "avatar_url": "https://avatars.githubusercontent.com/u/19890894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mattsse",
      "html_url": "https://github.com/mattsse",
      "followers_url": "https://api.github.com/users/mattsse/followers",
      "following_url": "https://api.github.com/users/mattsse/following{/other_user}",
      "gists_url": "https://api.github.com/users/mattsse/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mattsse/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mattsse/subscriptions",
      "organizations_url": "https://api.github.com/users/mattsse/orgs",
      "repos_url": "https://api.github.com/users/mattsse/repos",
      "events_url": "https://api.github.com/users/mattsse/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mattsse/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-10-03T19:32:20Z",
    "updated_at": "2022-10-03T19:32:20Z",
    "author_association": "MEMBER",
    "body": "@DaniPopes there's something off here, do you have the bandwidth to look into this?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1265935218/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1266290264",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3437#issuecomment-1266290264",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3437",
    "id": 1266290264,
    "node_id": "IC_kwDOGBlvNc5Leg5Y",
    "user": {
      "login": "DaniPopes",
      "id": 57450786,
      "node_id": "MDQ6VXNlcjU3NDUwNzg2",
      "avatar_url": "https://avatars.githubusercontent.com/u/57450786?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DaniPopes",
      "html_url": "https://github.com/DaniPopes",
      "followers_url": "https://api.github.com/users/DaniPopes/followers",
      "following_url": "https://api.github.com/users/DaniPopes/following{/other_user}",
      "gists_url": "https://api.github.com/users/DaniPopes/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DaniPopes/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DaniPopes/subscriptions",
      "organizations_url": "https://api.github.com/users/DaniPopes/orgs",
      "repos_url": "https://api.github.com/users/DaniPopes/repos",
      "events_url": "https://api.github.com/users/DaniPopes/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DaniPopes/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-10-04T01:41:45Z",
    "updated_at": "2022-10-04T01:41:45Z",
    "author_association": "CONTRIBUTOR",
    "body": "This has something to do with reverting and expecting on the test contract itself since this works as expected:\r\n```solidity\r\n// SPDX-License-Identifier: Unlicensed\r\npragma solidity ^0.8.4;\r\n\r\nimport \"forge-std/Test.sol\";\r\n\r\ncontract CustomContract {\r\n    error CustomError();\r\n\r\n    function rever() external {\r\n        revert CustomError();\r\n    }\r\n}\r\n\r\ncontract ContractTest is Test {\r\n    CustomContract internal c;\r\n\r\n    function setUp() public {\r\n        c = new CustomContract();\r\n    }\r\n\r\n    function testExample() public {\r\n        // vm.expectRevert(CustomContract.CustomError.selector);\r\n        vm.expectRevert();\r\n        c.rever();\r\n\r\n        c.rever();\r\n        console.log(\"Does not print\");\r\n    }\r\n}\r\n```\r\n\r\nOutputs:\r\n\r\n```sh\r\n$ forge test -vvv\r\n[...]\r\n[FAIL. Reason: CustomError()] testExample() (gas: 8795)\r\nTraces:\r\n  [8795] ContractTest::testExample() \r\n    ├─ [0] VM::expectRevert() \r\n    │   └─ ← ()\r\n    ├─ [158] CustomContract::rever() \r\n    │   └─ ← \"CustomError()\"\r\n    ├─ [158] CustomContract::rever() \r\n    │   └─ ← \"CustomError()\"\r\n    └─ ← \"CustomError()\"\r\n\r\nTest result: FAILED. 0 passed; 1 failed; finished in 244.88µs\r\n\r\nFailing tests:\r\nEncountered 1 failing test in test/a.t.sol:ContractTest\r\n[FAIL. Reason: CustomError()] testExample() (gas: 8795)\r\n\r\nEncountered a total of 1 failing tests, 0 tests succeeded\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1266290264/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1266416097",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3437#issuecomment-1266416097",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3437",
    "id": 1266416097,
    "node_id": "IC_kwDOGBlvNc5Le_nh",
    "user": {
      "login": "0xbok",
      "id": 1689531,
      "node_id": "MDQ6VXNlcjE2ODk1MzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1689531?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/0xbok",
      "html_url": "https://github.com/0xbok",
      "followers_url": "https://api.github.com/users/0xbok/followers",
      "following_url": "https://api.github.com/users/0xbok/following{/other_user}",
      "gists_url": "https://api.github.com/users/0xbok/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/0xbok/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/0xbok/subscriptions",
      "organizations_url": "https://api.github.com/users/0xbok/orgs",
      "repos_url": "https://api.github.com/users/0xbok/repos",
      "events_url": "https://api.github.com/users/0xbok/events{/privacy}",
      "received_events_url": "https://api.github.com/users/0xbok/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-10-04T05:29:44Z",
    "updated_at": "2022-10-04T05:29:44Z",
    "author_association": "NONE",
    "body": "> This has something to do with reverting and expecting on the test contract\r\n\r\nmakes sense as that’s how I discovered this bug. I have an abstract contract that I’m testing by inheriting it from my test contract. ",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1266416097/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1267029138",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3437#issuecomment-1267029138",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3437",
    "id": 1267029138,
    "node_id": "IC_kwDOGBlvNc5LhVSS",
    "user": {
      "login": "DaniPopes",
      "id": 57450786,
      "node_id": "MDQ6VXNlcjU3NDUwNzg2",
      "avatar_url": "https://avatars.githubusercontent.com/u/57450786?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DaniPopes",
      "html_url": "https://github.com/DaniPopes",
      "followers_url": "https://api.github.com/users/DaniPopes/followers",
      "following_url": "https://api.github.com/users/DaniPopes/following{/other_user}",
      "gists_url": "https://api.github.com/users/DaniPopes/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DaniPopes/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DaniPopes/subscriptions",
      "organizations_url": "https://api.github.com/users/DaniPopes/orgs",
      "repos_url": "https://api.github.com/users/DaniPopes/repos",
      "events_url": "https://api.github.com/users/DaniPopes/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DaniPopes/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-10-04T13:47:25Z",
    "updated_at": "2022-10-04T13:47:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think what's happening is that the `vm.expectRevert` call makes the test expect a revert, so when the test contract itself reverts,  stopping the execution of the test, it also succeeds since we expected a revert.\r\nYou can create a mock contract that just inherits the abstract contract and deploy and test with external calls on that",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1267029138/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1267093689",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3437#issuecomment-1267093689",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3437",
    "id": 1267093689,
    "node_id": "IC_kwDOGBlvNc5LhlC5",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-10-04T14:27:29Z",
    "updated_at": "2022-10-04T14:27:29Z",
    "author_association": "COLLABORATOR",
    "body": "Does this happen (i.e. the test erroneously passes) if the reason the test contract reverts is due to a solidity panic like overflow or divide by zero? I don't see why you'd intentionally revert in a test contract like this, but I can imagine unintentional reverts due to math errors and want to make sure that doesn't cause tests to incorrectly pass.\r\n\r\n> I think what's happening is that the `vm.expectRevert` call makes the test expect a revert, so when the test contract itself reverts, stopping the execution of the test, it also succeeds since we expected a revert.\r\n\r\nHmm this seems odd though because my understanding is that `expectRevert` only expects reverts for calls made from the test contract, I don't think it should count reverts within the test contract, that feels like a bug",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1267093689/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1267110825",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3437#issuecomment-1267110825",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3437",
    "id": 1267110825,
    "node_id": "IC_kwDOGBlvNc5LhpOp",
    "user": {
      "login": "0xbok",
      "id": 1689531,
      "node_id": "MDQ6VXNlcjE2ODk1MzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1689531?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/0xbok",
      "html_url": "https://github.com/0xbok",
      "followers_url": "https://api.github.com/users/0xbok/followers",
      "following_url": "https://api.github.com/users/0xbok/following{/other_user}",
      "gists_url": "https://api.github.com/users/0xbok/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/0xbok/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/0xbok/subscriptions",
      "organizations_url": "https://api.github.com/users/0xbok/orgs",
      "repos_url": "https://api.github.com/users/0xbok/repos",
      "events_url": "https://api.github.com/users/0xbok/events{/privacy}",
      "received_events_url": "https://api.github.com/users/0xbok/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-10-04T14:39:09Z",
    "updated_at": "2022-10-04T14:39:18Z",
    "author_association": "NONE",
    "body": "> I don't see why you'd intentionally revert in a test contract like this\r\n\r\nI have an abstract contract that I’m testing by inheriting it from my test contract. The abstract contract has a function that can revert. The PoC that I showed in this issue is just a toy example replicating this behavior. But I'll be moving to @DaniPopes's workaround by creating a mock contract which just calls the abstract contract.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1267110825/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1267113953",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3437#issuecomment-1267113953",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3437",
    "id": 1267113953,
    "node_id": "IC_kwDOGBlvNc5Lhp_h",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-10-04T14:41:16Z",
    "updated_at": "2022-10-04T14:41:16Z",
    "author_association": "COLLABORATOR",
    "body": "Got it, makes sense! I do still think we should verify the below, to make sure users can't have tests that are passing when you'd normally expect them to fail due to a revert in the test contract\r\n\r\n> Does this happen (i.e. the test erroneously passes) if the reason the test contract reverts is due to a solidity panic like overflow or divide by zero? I can imagine unintentional reverts due to math errors and want to make sure that doesn't cause tests to incorrectly pass.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1267113953/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1267130864",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3437#issuecomment-1267130864",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3437",
    "id": 1267130864,
    "node_id": "IC_kwDOGBlvNc5LhuHw",
    "user": {
      "login": "0xbok",
      "id": 1689531,
      "node_id": "MDQ6VXNlcjE2ODk1MzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1689531?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/0xbok",
      "html_url": "https://github.com/0xbok",
      "followers_url": "https://api.github.com/users/0xbok/followers",
      "following_url": "https://api.github.com/users/0xbok/following{/other_user}",
      "gists_url": "https://api.github.com/users/0xbok/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/0xbok/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/0xbok/subscriptions",
      "organizations_url": "https://api.github.com/users/0xbok/orgs",
      "repos_url": "https://api.github.com/users/0xbok/repos",
      "events_url": "https://api.github.com/users/0xbok/events{/privacy}",
      "received_events_url": "https://api.github.com/users/0xbok/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-10-04T14:52:39Z",
    "updated_at": "2022-10-04T14:52:39Z",
    "author_association": "NONE",
    "body": "Yes, overflow passes as well:\r\n```solidity\r\npragma solidity 0.8.4;\r\n\r\nimport \"forge-std/Test.sol\";\r\n\r\ncontract ContractTest is Test {\r\n    function setUp() public {}\r\n\r\n    function rever(uint8 a) internal returns (uint8) {\r\n        return a*2;\r\n    }\r\n\r\n    function testExample() public {\r\n        vm.expectRevert();\r\n        rever(254);\r\n\r\n        rever(254);\r\n        console.log(\"print\");\r\n    }\r\n}\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1267130864/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1267139317",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3437#issuecomment-1267139317",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3437",
    "id": 1267139317,
    "node_id": "IC_kwDOGBlvNc5LhwL1",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-10-04T14:58:01Z",
    "updated_at": "2022-10-04T14:58:01Z",
    "author_association": "COLLABORATOR",
    "body": "Thanks for testing! So IMO this is a bug that we should fix, cc @mattsse. According to the [docs](https://book.getfoundry.sh/cheatcodes/expect-revert#expectrevert), `expectRevert` looks for a revert in the next call. In that example, there is never a call (just jumps to internal functions), so that test should fail from the overflow in `rever(uint8)`\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1267139317/reactions",
      "total_count": 6,
      "+1": 6,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1335619166",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3437#issuecomment-1335619166",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3437",
    "id": 1335619166,
    "node_id": "IC_kwDOGBlvNc5Pm-5e",
    "user": {
      "login": "brockelmore",
      "id": 31553173,
      "node_id": "MDQ6VXNlcjMxNTUzMTcz",
      "avatar_url": "https://avatars.githubusercontent.com/u/31553173?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brockelmore",
      "html_url": "https://github.com/brockelmore",
      "followers_url": "https://api.github.com/users/brockelmore/followers",
      "following_url": "https://api.github.com/users/brockelmore/following{/other_user}",
      "gists_url": "https://api.github.com/users/brockelmore/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brockelmore/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brockelmore/subscriptions",
      "organizations_url": "https://api.github.com/users/brockelmore/orgs",
      "repos_url": "https://api.github.com/users/brockelmore/repos",
      "events_url": "https://api.github.com/users/brockelmore/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brockelmore/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-12-02T18:02:42Z",
    "updated_at": "2022-12-02T18:06:46Z",
    "author_association": "MEMBER",
    "body": "So I looked into this. It is due to this line: https://github.com/foundry-rs/foundry/blob/250cc85a5a3a796454aa6a16f553f58035b10c6f/evm/src/executor/inspector/cheatcodes/mod.rs#L468 (and the `create_end`).\r\n\r\nWe evaluate based on `<=`, I dont know *why* we do `<=` instead of `==`. I think the only possible case where `<=` is used is this exact case? So the answer may be just to switch to `==`. But it is sort of hard to reason about. Switching this line to `==` makes the following tests pass/fail as expected:\r\n\r\n```solidity\r\n// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.13;\r\n\r\nimport \"forge-std/Test.sol\";\r\n\r\n\r\ncontract ContractTest is Test {\r\n    function setUp() public {}\r\n\r\n    function rever() public {\r\n        revert();\r\n    }\r\n\r\n    function delayed_rever() public {\r\n        ContractTest(address(this)).rever();\r\n    }\r\n\r\n    function testExample() public {\r\n        vm.expectRevert();\r\n        rever();\r\n\r\n        rever();\r\n        console.log(\"Does not print\");\r\n    }\r\n\r\n    function testExample2() public {\r\n        vm.expectRevert();\r\n        ContractTest(address(this)).rever();\r\n    }\r\n\r\n    function testExample3() public {\r\n        vm.expectRevert();\r\n        ContractTest(address(this)).delayed_rever();\r\n    }\r\n}\r\n```\r\n\r\n```haskell\r\nRunning 3 tests for test/Counter.t.sol:ContractTest\r\n[FAIL. Reason: EvmError: Revert] testExample() (gas: 3068)\r\nTraces:\r\n  [121] ContractTest::setUp()\r\n    └─ ← ()\r\n\r\n  [3068] ContractTest::testExample()\r\n    ├─ [0] VM::expectRevert()\r\n    │   └─ ← ()\r\n    └─ ← \"EvmError: Revert\"\r\n\r\n[PASS] testExample2() (gas: 3541)\r\nTraces:\r\n  [3541] ContractTest::testExample2()\r\n    ├─ [0] VM::expectRevert()\r\n    │   └─ ← ()\r\n    ├─ [151] ContractTest::rever()\r\n    │   └─ ← \"EvmError: Revert\"\r\n    └─ ← ()\r\n\r\n[PASS] testExample3() (gas: 4011)\r\nTraces:\r\n  [4011] ContractTest::testExample3()\r\n    ├─ [0] VM::expectRevert()\r\n    │   └─ ← ()\r\n    ├─ [643] ContractTest::delayed_rever()\r\n    │   ├─ [151] ContractTest::rever()\r\n    │   │   └─ ← \"EvmError: Revert\"\r\n    │   └─ ← \"EvmError: Revert\"\r\n    └─ ← ()\r\n```\r\n\r\n\r\nThe early return is due to the way `expectRevert` works, it just changes the status code of the return, so any revert/return will *always* stop current call context.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1335619166/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1336120412",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3437#issuecomment-1336120412",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3437",
    "id": 1336120412,
    "node_id": "IC_kwDOGBlvNc5Po5Rc",
    "user": {
      "login": "0xbok",
      "id": 1689531,
      "node_id": "MDQ6VXNlcjE2ODk1MzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1689531?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/0xbok",
      "html_url": "https://github.com/0xbok",
      "followers_url": "https://api.github.com/users/0xbok/followers",
      "following_url": "https://api.github.com/users/0xbok/following{/other_user}",
      "gists_url": "https://api.github.com/users/0xbok/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/0xbok/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/0xbok/subscriptions",
      "organizations_url": "https://api.github.com/users/0xbok/orgs",
      "repos_url": "https://api.github.com/users/0xbok/repos",
      "events_url": "https://api.github.com/users/0xbok/events{/privacy}",
      "received_events_url": "https://api.github.com/users/0xbok/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-12-03T09:16:31Z",
    "updated_at": "2022-12-03T09:16:31Z",
    "author_association": "NONE",
    "body": "@brockelmore the PR has been closed, so is this an intended behaviour now, or is there a different fix being discussed?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1336120412/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1336178807",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3437#issuecomment-1336178807",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3437",
    "id": 1336178807,
    "node_id": "IC_kwDOGBlvNc5PpHh3",
    "user": {
      "login": "brockelmore",
      "id": 31553173,
      "node_id": "MDQ6VXNlcjMxNTUzMTcz",
      "avatar_url": "https://avatars.githubusercontent.com/u/31553173?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brockelmore",
      "html_url": "https://github.com/brockelmore",
      "followers_url": "https://api.github.com/users/brockelmore/followers",
      "following_url": "https://api.github.com/users/brockelmore/following{/other_user}",
      "gists_url": "https://api.github.com/users/brockelmore/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brockelmore/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brockelmore/subscriptions",
      "organizations_url": "https://api.github.com/users/brockelmore/orgs",
      "repos_url": "https://api.github.com/users/brockelmore/repos",
      "events_url": "https://api.github.com/users/brockelmore/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brockelmore/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-12-03T15:09:18Z",
    "updated_at": "2022-12-03T15:09:18Z",
    "author_association": "MEMBER",
    "body": "Leaving this issue open because I would like a better solution that what currently is happening:\r\n\r\n```solidity\r\npragma solidity 0.8.4;\r\n\r\nimport \"forge-std/Test.sol\";\r\n\r\ncontract ContractTest is Test {\r\n    function rever() internal {\r\n        revert();\r\n    }\r\n\r\n    // currently \"intended\" behavior (was not supposed to be supported but has been for too long on accident)\r\n    function testExample() public {\r\n        vm.expectRevert();\r\n        rever();\r\n        // anything after this will *NOT* execute. We cannot continue execution after a revert in the same call \r\n        // its a footgun that is probably just gonna be here for a little while until we can find a better solution\r\n    }\r\n    \r\n}\r\n```\r\n\r\nToo many people rely on the above pattern already that we probably need to have a broader discussion and if we break the above pattern we let people know its going to break ahead of time. If you can avoid the above pattern, I would\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1336178807/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1502302189",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3437#issuecomment-1502302189",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3437",
    "id": 1502302189,
    "node_id": "IC_kwDOGBlvNc5Zi0_t",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-04-10T20:48:46Z",
    "updated_at": "2023-04-10T20:48:46Z",
    "author_association": "NONE",
    "body": "The problem with using `vm.expectRevert` before an internall call is that, if the internal call does not revert, execution will continue and silently consume the next revert, which was not at all the developer intention. This seems highly problematic to me, I'd think it should be fixed as soon as possible.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1502302189/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
