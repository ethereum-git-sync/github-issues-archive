{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/5244",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5244/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5244/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5244/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/5244",
  "id": 1779683469,
  "node_id": "I_kwDOGBlvNc5qE9CN",
  "number": 5244,
  "title": "Allow cast to get function sig from local ABI",
  "user": {
    "login": "ryanio",
    "id": 22116,
    "node_id": "MDQ6VXNlcjIyMTE2",
    "avatar_url": "https://avatars.githubusercontent.com/u/22116?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ryanio",
    "html_url": "https://github.com/ryanio",
    "followers_url": "https://api.github.com/users/ryanio/followers",
    "following_url": "https://api.github.com/users/ryanio/following{/other_user}",
    "gists_url": "https://api.github.com/users/ryanio/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ryanio/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ryanio/subscriptions",
    "organizations_url": "https://api.github.com/users/ryanio/orgs",
    "repos_url": "https://api.github.com/users/ryanio/repos",
    "events_url": "https://api.github.com/users/ryanio/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ryanio/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3593644820,
      "node_id": "LA_kwDOGBlvNc7WMqsU",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-feature",
      "name": "T-feature",
      "color": "BFD4F2",
      "default": false,
      "description": "Type: feature"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": {
    "login": "Evalir",
    "id": 26014927,
    "node_id": "MDQ6VXNlcjI2MDE0OTI3",
    "avatar_url": "https://avatars.githubusercontent.com/u/26014927?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Evalir",
    "html_url": "https://github.com/Evalir",
    "followers_url": "https://api.github.com/users/Evalir/followers",
    "following_url": "https://api.github.com/users/Evalir/following{/other_user}",
    "gists_url": "https://api.github.com/users/Evalir/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Evalir/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Evalir/subscriptions",
    "organizations_url": "https://api.github.com/users/Evalir/orgs",
    "repos_url": "https://api.github.com/users/Evalir/repos",
    "events_url": "https://api.github.com/users/Evalir/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Evalir/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "Evalir",
      "id": 26014927,
      "node_id": "MDQ6VXNlcjI2MDE0OTI3",
      "avatar_url": "https://avatars.githubusercontent.com/u/26014927?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Evalir",
      "html_url": "https://github.com/Evalir",
      "followers_url": "https://api.github.com/users/Evalir/followers",
      "following_url": "https://api.github.com/users/Evalir/following{/other_user}",
      "gists_url": "https://api.github.com/users/Evalir/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Evalir/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Evalir/subscriptions",
      "organizations_url": "https://api.github.com/users/Evalir/orgs",
      "repos_url": "https://api.github.com/users/Evalir/repos",
      "events_url": "https://api.github.com/users/Evalir/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Evalir/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 5,
  "created_at": "2023-06-28T20:13:15Z",
  "updated_at": "2023-07-10T20:31:28Z",
  "closed_at": "2023-06-29T14:19:04Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "### Component\n\nCast\n\n### Describe the feature you would like\n\nI have a contract where I hid some functions from the public interface for brevity, but I do have defined in a separate interface (that is not inherited by the contract).\r\n\r\nI see that `cast` can get the fn sig from etherscan (which is very cool), but for my use case it'd be really powerful to also scan local ABI in `out/` or specify e.g. `--abi IHiddenInterface` to derive the fn sig locally. This would be really helpful for complex struct params that are not so easy to type out.\n\n### Additional context\n\n_No response_",
  "closed_by": {
    "login": "mds1",
    "id": 17163988,
    "node_id": "MDQ6VXNlcjE3MTYzOTg4",
    "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mds1",
    "html_url": "https://github.com/mds1",
    "followers_url": "https://api.github.com/users/mds1/followers",
    "following_url": "https://api.github.com/users/mds1/following{/other_user}",
    "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
    "organizations_url": "https://api.github.com/users/mds1/orgs",
    "repos_url": "https://api.github.com/users/mds1/repos",
    "events_url": "https://api.github.com/users/mds1/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mds1/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/5244/reactions",
    "total_count": 1,
    "+1": 1,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5244/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1612526743",
    "html_url": "https://github.com/foundry-rs/foundry/issues/5244#issuecomment-1612526743",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5244",
    "id": 1612526743,
    "node_id": "IC_kwDOGBlvNc5gHTSX",
    "user": {
      "login": "Sabnock01",
      "id": 24715302,
      "node_id": "MDQ6VXNlcjI0NzE1MzAy",
      "avatar_url": "https://avatars.githubusercontent.com/u/24715302?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sabnock01",
      "html_url": "https://github.com/Sabnock01",
      "followers_url": "https://api.github.com/users/Sabnock01/followers",
      "following_url": "https://api.github.com/users/Sabnock01/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sabnock01/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sabnock01/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sabnock01/subscriptions",
      "organizations_url": "https://api.github.com/users/Sabnock01/orgs",
      "repos_url": "https://api.github.com/users/Sabnock01/repos",
      "events_url": "https://api.github.com/users/Sabnock01/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sabnock01/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-06-29T07:04:54Z",
    "updated_at": "2023-06-29T07:06:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "Isn't this already possible under `forge inspect methodIdentifiers` or am I missing something?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1612526743/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1613266351",
    "html_url": "https://github.com/foundry-rs/foundry/issues/5244#issuecomment-1613266351",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5244",
    "id": 1613266351,
    "node_id": "IC_kwDOGBlvNc5gKH2v",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-06-29T14:19:04Z",
    "updated_at": "2023-06-29T14:19:04Z",
    "author_association": "COLLABORATOR",
    "body": "> Isn't this already possible under `forge inspect methodIdentifiers` or am I missing something?\r\n\r\nIIUC then yes. @ryanio Running `forge inspect IHiddenInterface methodIdentifiers` will do what you want, so going to close this, but let me know if I misunderstood",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1613266351/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1613513976",
    "html_url": "https://github.com/foundry-rs/foundry/issues/5244#issuecomment-1613513976",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5244",
    "id": 1613513976,
    "node_id": "IC_kwDOGBlvNc5gLET4",
    "user": {
      "login": "ryanio",
      "id": 22116,
      "node_id": "MDQ6VXNlcjIyMTE2",
      "avatar_url": "https://avatars.githubusercontent.com/u/22116?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanio",
      "html_url": "https://github.com/ryanio",
      "followers_url": "https://api.github.com/users/ryanio/followers",
      "following_url": "https://api.github.com/users/ryanio/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanio/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanio/orgs",
      "repos_url": "https://api.github.com/users/ryanio/repos",
      "events_url": "https://api.github.com/users/ryanio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-06-29T16:42:03Z",
    "updated_at": "2023-06-29T16:42:03Z",
    "author_association": "NONE",
    "body": "ah thank you, yes methodIdentifiers works great didn't know about that one. is there a way to get the return values it expects too though, for formatting the response properly?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1613513976/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1616672358",
    "html_url": "https://github.com/foundry-rs/foundry/issues/5244#issuecomment-1616672358",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5244",
    "id": 1616672358,
    "node_id": "IC_kwDOGBlvNc5gXHZm",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-07-02T13:58:50Z",
    "updated_at": "2023-07-02T13:58:50Z",
    "author_association": "COLLABORATOR",
    "body": "Can you expand on what you're trying to do? The return values are part of the ABI which can be found in the artifact or with `forge inspect IHiddenInterface abi`",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1616672358/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1629688642",
    "html_url": "https://github.com/foundry-rs/foundry/issues/5244#issuecomment-1629688642",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5244",
    "id": 1629688642,
    "node_id": "IC_kwDOGBlvNc5hIxNC",
    "user": {
      "login": "ryanio",
      "id": 22116,
      "node_id": "MDQ6VXNlcjIyMTE2",
      "avatar_url": "https://avatars.githubusercontent.com/u/22116?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanio",
      "html_url": "https://github.com/ryanio",
      "followers_url": "https://api.github.com/users/ryanio/followers",
      "following_url": "https://api.github.com/users/ryanio/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanio/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanio/orgs",
      "repos_url": "https://api.github.com/users/ryanio/repos",
      "events_url": "https://api.github.com/users/ryanio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-07-10T20:31:27Z",
    "updated_at": "2023-07-10T20:31:27Z",
    "author_association": "NONE",
    "body": "@mds1 yes for sure, primarily I am trying to call a getter that returns a complex struct:\r\n\r\n```bash\r\n➜  seadrop git:(v2) ✗ cast call 0x232e97b08266510de8f43f179fd0efbfe2910975 \"getPublicDrop(uint256)(uint80,uint80,uint40,uint40,bool,address,uint24,uint24,uint16,uint16,uint16)\" 0 --rpc-url $MAINNET_RPC_URL\r\n115000000000000000\r\n115000000000000000\r\n1688065200\r\n1688670000\r\ntrue\r\n0x0000000000000000000000000000000000000000\r\n1\r\n20\r\n10000\r\n10000\r\n500\r\n```\r\n\r\nI haven't found an easy way to get the formatted return value for the `(uint80,uint80,uint40,uint40,bool,address,uint24,uint24,uint16,uint16,uint16)` part, or something cool like:\r\n\r\n`cast call 0x232e97b08266510de8f43f179fd0efbfe2910975 $(forge inspect IERC1155SeaDrop methodIdentifiers getPublicDrop) 0 --rpc-url $MAINNET_RPC_URL`\r\n\r\nwhere the methodIdentifier would also contain the return values. Maybe something like this exists you can point me to? Regardless not a huge priority, moreso a unique challenge since my public interface on etherscan isn't exhaustive of everything it supports.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1629688642/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
