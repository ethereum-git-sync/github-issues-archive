{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/4517",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4517/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4517/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4517/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/4517",
  "id": 1617963316,
  "node_id": "I_kwDOGBlvNc5gcCk0",
  "number": 4517,
  "title": "Cannot run fuzzer for a fixed amount of time",
  "user": {
    "login": "wuestholz",
    "id": 51156,
    "node_id": "MDQ6VXNlcjUxMTU2",
    "avatar_url": "https://avatars.githubusercontent.com/u/51156?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/wuestholz",
    "html_url": "https://github.com/wuestholz",
    "followers_url": "https://api.github.com/users/wuestholz/followers",
    "following_url": "https://api.github.com/users/wuestholz/following{/other_user}",
    "gists_url": "https://api.github.com/users/wuestholz/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/wuestholz/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/wuestholz/subscriptions",
    "organizations_url": "https://api.github.com/users/wuestholz/orgs",
    "repos_url": "https://api.github.com/users/wuestholz/repos",
    "events_url": "https://api.github.com/users/wuestholz/events{/privacy}",
    "received_events_url": "https://api.github.com/users/wuestholz/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3593644820,
      "node_id": "LA_kwDOGBlvNc7WMqsU",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-feature",
      "name": "T-feature",
      "color": "BFD4F2",
      "default": false,
      "description": "Type: feature"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 8,
  "created_at": "2023-03-09T20:39:49Z",
  "updated_at": "2023-03-13T10:08:23Z",
  "closed_at": "2023-03-09T21:12:42Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "### Component\n\nForge\n\n### Describe the feature you would like\n\nI would like to run the fuzzer for a fixed amount of time (for instance, one hour). It would be great if this was possible (just like for Echidna or other fuzzers). Unfortunately, the `runs` configuration option results in different running times depending on the contracts that are tested and how much time is spent on executing inputs.\n\n### Additional context\n\n_No response_",
  "closed_by": {
    "login": "mds1",
    "id": 17163988,
    "node_id": "MDQ6VXNlcjE3MTYzOTg4",
    "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mds1",
    "html_url": "https://github.com/mds1",
    "followers_url": "https://api.github.com/users/mds1/followers",
    "following_url": "https://api.github.com/users/mds1/following{/other_user}",
    "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
    "organizations_url": "https://api.github.com/users/mds1/orgs",
    "repos_url": "https://api.github.com/users/mds1/repos",
    "events_url": "https://api.github.com/users/mds1/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mds1/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/4517/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4517/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1462831775",
    "html_url": "https://github.com/foundry-rs/foundry/issues/4517#issuecomment-1462831775",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4517",
    "id": 1462831775,
    "node_id": "IC_kwDOGBlvNc5XMQqf",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-09T21:12:42Z",
    "updated_at": "2023-03-09T21:12:42Z",
    "author_association": "COLLABORATOR",
    "body": "Closing this as a duplicate of https://github.com/foundry-rs/foundry/issues/990. Until implemented, you of course can work around this by setting `runs` to a very high value and just terminating the forge process after an hour\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1462831775/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1463939884",
    "html_url": "https://github.com/foundry-rs/foundry/issues/4517#issuecomment-1463939884",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4517",
    "id": 1463939884,
    "node_id": "IC_kwDOGBlvNc5XQfMs",
    "user": {
      "login": "wuestholz",
      "id": 51156,
      "node_id": "MDQ6VXNlcjUxMTU2",
      "avatar_url": "https://avatars.githubusercontent.com/u/51156?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wuestholz",
      "html_url": "https://github.com/wuestholz",
      "followers_url": "https://api.github.com/users/wuestholz/followers",
      "following_url": "https://api.github.com/users/wuestholz/following{/other_user}",
      "gists_url": "https://api.github.com/users/wuestholz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wuestholz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wuestholz/subscriptions",
      "organizations_url": "https://api.github.com/users/wuestholz/orgs",
      "repos_url": "https://api.github.com/users/wuestholz/repos",
      "events_url": "https://api.github.com/users/wuestholz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wuestholz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-10T15:08:07Z",
    "updated_at": "2023-03-10T15:08:07Z",
    "author_association": "NONE",
    "body": "@mds1 Thanks for the quick reply! I don't quite see how the workaround you describe would work. When I terminate the process early I won't see the output (incl. any property violations that were detected). Or am I missing something?\r\n\r\n(For context, I'm trying to compare Echidna and Foundry to see which fuzzer finds more bugs in a given amount of time. This feature would really help to ensure that the comparison is fair.)",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1463939884/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1463984368",
    "html_url": "https://github.com/foundry-rs/foundry/issues/4517#issuecomment-1463984368",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4517",
    "id": 1463984368,
    "node_id": "IC_kwDOGBlvNc5XQqDw",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-10T15:40:27Z",
    "updated_at": "2023-03-10T15:40:27Z",
    "author_association": "COLLABORATOR",
    "body": "I think implicit in this issue and #990 is: when the fuzzer is run for a duration, collect all violations found and report all of them at the end of the time.\r\n\r\nWhereas the current behavior of forge is is: As soon as a fuzz test has a failure, it gets printed to the terminal immediately and that test stops executing.\r\n\r\n In other words, if you set the fuzzer to a billion runs as a workaround for this feature request, and run 100 has a failure in the `test_Add` test, `test_Add` stops running and you only get told about that one failure. There is currently no way to collect multiple failures from the test, so to be fair that makes this a partial workaround.\r\n\r\nI'm not sure how you plan to structure the benchmark (or how fuzzers are typically benchmarked 😅), but one way to structure a benchmark to work around this limitation is: come up with `n` different contracts/test cases, run the echidna and foundry test suites across all contracts/tests multiple times, and report the median time to find each/all bugs. That way you only need to find a single failure in each test case",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1463984368/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1464038431",
    "html_url": "https://github.com/foundry-rs/foundry/issues/4517#issuecomment-1464038431",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4517",
    "id": 1464038431,
    "node_id": "IC_kwDOGBlvNc5XQ3Qf",
    "user": {
      "login": "wuestholz",
      "id": 51156,
      "node_id": "MDQ6VXNlcjUxMTU2",
      "avatar_url": "https://avatars.githubusercontent.com/u/51156?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wuestholz",
      "html_url": "https://github.com/wuestholz",
      "followers_url": "https://api.github.com/users/wuestholz/followers",
      "following_url": "https://api.github.com/users/wuestholz/following{/other_user}",
      "gists_url": "https://api.github.com/users/wuestholz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wuestholz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wuestholz/subscriptions",
      "organizations_url": "https://api.github.com/users/wuestholz/orgs",
      "repos_url": "https://api.github.com/users/wuestholz/repos",
      "events_url": "https://api.github.com/users/wuestholz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wuestholz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-10T16:13:05Z",
    "updated_at": "2023-03-10T16:13:05Z",
    "author_association": "NONE",
    "body": "@mds1 Thanks! Unfortunately, I can't observe the behavior that you describe. Perhaps it's because I'm using the invariant testing (i.e., stateful fuzzing) mode. Here's a simple repro:\r\n\r\n- `test/bug.t.sol`:\r\n```solidity\r\npragma solidity ^0.8.19;\r\ncontract X {\r\n  function foo() external {}\r\n}\r\nimport \"forge-std/Test.sol\";\r\ncontract TestX is Test {\r\n  X x;\r\n  function setUp() external {\r\n    x = new X();\r\n  }\r\n  function invariant_0() external { fail(\"0\"); }\r\n  function invariant_1() external { }\r\n}\r\n```\r\n\r\n- `foundry.toml`:\r\n```\r\n[fuzz]\r\nruns = 10000\r\nmax_test_rejects = 1000000000\r\nseed = 0x00\r\ndictionary_weight = 40\r\ninclude_storage = true\r\ninclude_push_bytes = true\r\n\r\n[invariant]\r\nruns = 10000\r\ndepth = 30\r\nfail_on_revert = false\r\ncall_override = false\r\ndictionary_weight = 80\r\ninclude_storage = true\r\ninclude_push_bytes = true\r\n```\r\n\r\nI use the following command to run the fuzzer:\r\n\r\n```\r\n$ forge test --match-path test/bug.t.sol --fuzz-seed 0x00\r\n```\r\n\r\nIt should find the violation immediately, but nothing is shown when I abort the process early.\r\n\r\nThe current benchmarks contain several invariants just like the contract above. Some of them can be violated. I'm happy to share an example if you're interested.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1464038431/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1464459101",
    "html_url": "https://github.com/foundry-rs/foundry/issues/4517#issuecomment-1464459101",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4517",
    "id": 1464459101,
    "node_id": "IC_kwDOGBlvNc5XSd9d",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-10T20:54:01Z",
    "updated_at": "2023-03-10T20:54:01Z",
    "author_association": "COLLABORATOR",
    "body": "Ah, interesting. What if you change that to a fuzz test, e.g. `function test_0(uint256 x) external { fail(\"0\"); }`, does it find and log the violation immediately in that case? I think it should, so I assumed invariant tests do also (if fuzz tests do and invariant tests don't, I'd consider that a bug for the current architecture)",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1464459101/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1464902204",
    "html_url": "https://github.com/foundry-rs/foundry/issues/4517#issuecomment-1464902204",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4517",
    "id": 1464902204,
    "node_id": "IC_kwDOGBlvNc5XUKI8",
    "user": {
      "login": "wuestholz",
      "id": 51156,
      "node_id": "MDQ6VXNlcjUxMTU2",
      "avatar_url": "https://avatars.githubusercontent.com/u/51156?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wuestholz",
      "html_url": "https://github.com/wuestholz",
      "followers_url": "https://api.github.com/users/wuestholz/followers",
      "following_url": "https://api.github.com/users/wuestholz/following{/other_user}",
      "gists_url": "https://api.github.com/users/wuestholz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wuestholz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wuestholz/subscriptions",
      "organizations_url": "https://api.github.com/users/wuestholz/orgs",
      "repos_url": "https://api.github.com/users/wuestholz/repos",
      "events_url": "https://api.github.com/users/wuestholz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wuestholz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-11T12:31:53Z",
    "updated_at": "2023-03-11T12:31:53Z",
    "author_association": "NONE",
    "body": "@mds1 Thanks! I tried what you suggested with the following files:\r\n\r\n- `test/bug.t.sol`:\r\n```solidity\r\npragma solidity ^0.8.19;\r\ncontract X {\r\n  function foo() external {}\r\n}\r\nimport \"forge-std/Test.sol\";\r\ncontract TestX is Test {\r\n  X x;\r\n  function setUp() external {\r\n    x = new X();\r\n  }\r\n  function test_0(uint256 y) external { fail(\"0\"); }\r\n  function test_1(uint256 y) external { }\r\n}\r\n```\r\n\r\n- `foundry.toml`:\r\n```\r\n[fuzz]\r\nruns = 1000000\r\nmax_test_rejects = 1000000000\r\nseed = 0x00\r\ndictionary_weight = 40\r\ninclude_storage = true\r\ninclude_push_bytes = true\r\n\r\n[invariant]\r\nruns = 10000\r\ndepth = 30\r\nfail_on_revert = false\r\ncall_override = false\r\ndictionary_weight = 80\r\ninclude_storage = true\r\ninclude_push_bytes = true\r\n```\r\n\r\nNote that I increase `runs` from 10000 to 1000000 to make sure it doesn't terminate too quickly.\r\n\r\nWhen I abort the process early, nothing is shown either. So, the behavior for the two modes seems to be consistent. However, this means the suggested workaround doesn't work for either mode.\r\n\r\nIs there a chance that you could change the behavior to report violations as soon as they are found (provided that this is easier than adding support for the time limit)?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1464902204/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1465222224",
    "html_url": "https://github.com/foundry-rs/foundry/issues/4517#issuecomment-1465222224",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4517",
    "id": 1465222224,
    "node_id": "IC_kwDOGBlvNc5XVYRQ",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-12T15:03:32Z",
    "updated_at": "2023-03-12T15:03:32Z",
    "author_association": "COLLABORATOR",
    "body": "Adding support for time based fuzzing requires a decent amount of changes since proptest doesn’t support it, more discussion in #990 \r\n\r\nDeferring to @mattsse on if it’s easy to report/save failures right away, so we can support using very high runs as a workaround. Potentially could implement #2551 as an easy  solution here by just saving failures to a file \r\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1465222224/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1465851560",
    "html_url": "https://github.com/foundry-rs/foundry/issues/4517#issuecomment-1465851560",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4517",
    "id": 1465851560,
    "node_id": "IC_kwDOGBlvNc5XXx6o",
    "user": {
      "login": "wuestholz",
      "id": 51156,
      "node_id": "MDQ6VXNlcjUxMTU2",
      "avatar_url": "https://avatars.githubusercontent.com/u/51156?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wuestholz",
      "html_url": "https://github.com/wuestholz",
      "followers_url": "https://api.github.com/users/wuestholz/followers",
      "following_url": "https://api.github.com/users/wuestholz/following{/other_user}",
      "gists_url": "https://api.github.com/users/wuestholz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wuestholz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wuestholz/subscriptions",
      "organizations_url": "https://api.github.com/users/wuestholz/orgs",
      "repos_url": "https://api.github.com/users/wuestholz/repos",
      "events_url": "https://api.github.com/users/wuestholz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wuestholz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-13T10:08:22Z",
    "updated_at": "2023-03-13T10:08:22Z",
    "author_association": "NONE",
    "body": "@mds1 Thanks! I had a idea for how to work around some of the issues with proptest. I shared it in that thread (https://github.com/foundry-rs/foundry/issues/990#issuecomment-1465830696), but I'm not familiar with the Forge implementation.\r\n\r\nFor my purposes, it would also be sufficient to have some log output when a failure is reported, but reporting the failure immeditately seems like a nice usability improvement.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1465851560/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
