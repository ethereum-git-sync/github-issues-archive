{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/6564",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/6564/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/6564/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/6564/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/6564",
  "id": 2034660480,
  "node_id": "I_kwDOGBlvNc55RnSA",
  "number": 6564,
  "title": "Smart Contract Wallet Simulation",
  "user": {
    "login": "RPate97",
    "id": 25066232,
    "node_id": "MDQ6VXNlcjI1MDY2MjMy",
    "avatar_url": "https://avatars.githubusercontent.com/u/25066232?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/RPate97",
    "html_url": "https://github.com/RPate97",
    "followers_url": "https://api.github.com/users/RPate97/followers",
    "following_url": "https://api.github.com/users/RPate97/following{/other_user}",
    "gists_url": "https://api.github.com/users/RPate97/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/RPate97/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/RPate97/subscriptions",
    "organizations_url": "https://api.github.com/users/RPate97/orgs",
    "repos_url": "https://api.github.com/users/RPate97/repos",
    "events_url": "https://api.github.com/users/RPate97/events{/privacy}",
    "received_events_url": "https://api.github.com/users/RPate97/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3593644820,
      "node_id": "LA_kwDOGBlvNc7WMqsU",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-feature",
      "name": "T-feature",
      "color": "BFD4F2",
      "default": false,
      "description": "Type: feature"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 0,
  "created_at": "2023-12-11T01:31:24Z",
  "updated_at": "2023-12-19T07:34:39Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "### Component\r\n\r\nForge\r\n\r\n### Describe the feature you would like\r\n\r\n## Rationale\r\nCurrently, forge scripts only support broadcasting transactions from externally owned accounts. However, many teams use smart contract wallets such as Gnosis Safe to manage their contracts which Foundry does not natively support. If teams want to use Foundry with their Gnosis Safe, they often need to write complex scripts that simulate interacting with their Safe wallet [like Optimism does](https://github.com/ethereum-optimism/optimism/blob/develop/packages/contracts-bedrock/scripts/Deploy.s.sol#L60) and use FFI to initiate transactions in production.\r\n\r\nHowever, it is possible that Foundry could natively support broadcasting via Gnosis Safe or any other smart contract wallet in the future. Native support for Gnosis Safe would enable teams to write standard forge scripts, which could then be broadcast via their Gnosis Safe in production with minimal modifications to their scripts. Instead, Foundry would handle that work under the hood, similar to how it handles sending transactions via hardware wallets with the `--ledger` option, Gnosis Safe would simply be another sender type, i.e. `--safe-multisig`. This would avoid developers needing to write low-level scripts to simulate interacting with their safe or using FFI to send transactions in production. See #1232 for a more comprehensive discussion on this topic. \r\n\r\nThere are two things required for Foundry to natively support Gnosis Safe:\r\n1. Accurate local simulation of scripts executed via a smart contract wallet.\r\n2. A new broadcasting mode that takes transactions collected during the above simulation and handles batching and initiating their execution via the Gnosis Safe.\r\n\r\nWe'd like to clear the way for Foundry to support Gnosis Safe by addressing the first point, accurate local simulation of forge scripts executed via a smart contract wallet. There are several cases where transactions sent from a smart contract wallet differ from those sent from an EOA. \r\n \r\n## Example \r\nFor example, [due to EIP-161](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-161.md#specification), smart contract wallets have nonces that start at 1 and increment by 1 for every new contract deployed. Their nonces **do not** increment for every transaction. \r\n\r\nTake a look at the following script:\r\n```\r\ncontract CounterScript is Script {\r\n    function run() public {\r\n        Counter counter = new Counter(0);\r\n        counter.increment();\r\n        counter.increment();\r\n        Counter secondCounter = new Counter(0);\r\n    }\r\n}\r\n```\r\n\r\nIf this script were to be executed via an EOA with an initial nonce of 0, then the address of `counter` would be a function of their address and the nonce `0`. Their nonce would be incremented once when deploying `counter` and twice when calling `counter.increment()`. So the address of `secondCounter` would be a function of the nonce `3` and their address. \r\n\r\nHowever, if this script were executed from a smart contract wallet the nonces would be different, and therefore, the contract addresses would also be different. Since contract nonces start at `1`, the address of `counter` would be a function of `1` and the wallet's address. Since contract nonces are **only** incremented when deploying other contracts, the address of `secondContract` would be a function of `2` and the wallet's address. \r\n\r\nCurrently, Foundry cannot accurately simulate this without the script including bespoke logic for interacting with the Gnosis Safe. So to natively Gnosis Safe, it's necessary to implement a mechanism that can properly simulate this type of operation. \r\n\r\n## Scope\r\nThe initial scope would just be a new cheat code, `vm.startContractBroadcast` intended to house functionality related to simulating transactions sent from smart contract wallets. This cheat code could initially be used by third-party wallet developers to accurately simulate forge scripts being executed via their smart contract wallet. It is expected that the third-party developer would implement their own logic to handle broadcasting the transactions. \r\n\r\nIn the long term, the scope would increase to include natively supporting Gnosis Safe and potentially other smart contract wallets.\r\n\r\n## Why we think this is useful\r\nThere are a lot of cases where transactions sent from smart contract wallets are different from those sent by an EOA. In the short term, having a better way to simulate transactions sent from smart contract wallets would enable third-party wallet developers to provide better integrations with Foundry. In the long term, it opens the door for natively supporting Gnosis Safe and other smart contract wallets.\r\n\r\n### Additional context\r\n\r\nI am the CTO of Sphinx which is developing a DevOps platform that is designed to be tightly integrated with Foundry. Our platform uses a Gnosis Safe wallet with a custom module to enable trustless deployments via our platform. We provide a Foundry plugin that enables teams to take their existing forge scripts and execute them via our wallet and platform. You can learn more about what we do [in our documentation](https://github.com/sphinx-labs/sphinx/tree/develop). While developing our plugin, we noticed a variety of cases where Foundry does not accurately simulate transactions that are expected to come from a smart contract wallet. These issues both limit what scripts are compatible with our tool and also make it difficult for Foundry to natively support Gnosis Safe or other wallets.\r\n\r\nRather than just fixing these issues within our plugin, we'd like to contribute back to Foundry by spearheading an effort to make Foundry more compatible with smart contract wallets in general with the goal of eventually natively supporting Gnosis Safe. Obviously, this is helpful to us because it improves the UX of our wallet and platform. But we also think this benefits the Foundry community at large. \r\n\r\n> Note: This is a request for feedback. We'd love to make contributions to enable better simulation of smart contract wallets within Foundry, but we wanted to gauge community interest before doing so. Please let us know if you think contributions like this would be beneficial to the project. ",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/6564/reactions",
    "total_count": 1,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 1,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/6564/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[

]
