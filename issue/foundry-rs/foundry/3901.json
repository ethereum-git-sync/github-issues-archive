{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/3901",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3901/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3901/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3901/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/3901",
  "id": 1501303672,
  "node_id": "I_kwDOGBlvNc5ZfBN4",
  "number": 3901,
  "title": "vm.expectRevert changes the returned value of a non-existent function",
  "user": {
    "login": "xana-rahmani",
    "id": 24272917,
    "node_id": "MDQ6VXNlcjI0MjcyOTE3",
    "avatar_url": "https://avatars.githubusercontent.com/u/24272917?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/xana-rahmani",
    "html_url": "https://github.com/xana-rahmani",
    "followers_url": "https://api.github.com/users/xana-rahmani/followers",
    "following_url": "https://api.github.com/users/xana-rahmani/following{/other_user}",
    "gists_url": "https://api.github.com/users/xana-rahmani/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/xana-rahmani/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/xana-rahmani/subscriptions",
    "organizations_url": "https://api.github.com/users/xana-rahmani/orgs",
    "repos_url": "https://api.github.com/users/xana-rahmani/repos",
    "events_url": "https://api.github.com/users/xana-rahmani/events{/privacy}",
    "received_events_url": "https://api.github.com/users/xana-rahmani/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3334394228,
      "node_id": "MDU6TGFiZWwzMzM0Mzk0MjI4",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-bug",
      "name": "T-bug",
      "color": "d73a4a",
      "default": false,
      "description": "Type: bug"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2022-12-17T09:55:55Z",
  "updated_at": "2022-12-17T23:50:04Z",
  "closed_at": "2022-12-17T23:50:04Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "### Component\n\nForge\n\n### Have you ensured that all of these are up to date?\n\n- [X] Foundry\n- [X] Foundryup\n\n### What version of Foundry are you on?\n\nforge 0.2.0 (95bbad6 2022-12-17T00:03:24.80383791Z)\n\n### What command(s) is the bug in?\n\nforge test -vvvv\n\n### Operating System\n\nLinux\n\n### Describe the bug\n\nHello.\r\n\r\nI was writing tests for my project and I noticed something weird. I called a function that does not exist with `call` and expected to get a revert because when the function does not exists, The `fallback` function will be executed and it reverts. But I got nothing!\r\n\r\nFor simplicity, I changed my code to explain more clearly. This is my `A.sol` contract:\r\n```Solidity\r\n// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.13;\r\n\r\ncontract A {\r\n    event Description(string d);\r\n    /**\r\n     * @dev Revert fallback calls\r\n     */\r\n    fallback() external payable {\r\n        emit Description('** this is fallback **');\r\n        revert('Fallback not allowed');\r\n    }\r\n}\r\n```\r\n\r\n\r\nAs you see, It just has the `fallback` function and it reverts anything. Also, This is my test file `A.t.sol`:\r\n```Solidity\r\n// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.13;\r\n\r\nimport \"forge-std/Test.sol\";\r\nimport \"../src/A.sol\";\r\n\r\ncontract FallbackTest is Test {\r\n    A public a;\r\n\r\n    function setUp() public {\r\n        a = new A();\r\n    }\r\n\r\n    event Response(bool success, bytes data);\r\n\r\n    function testRevert() public {\r\n        vm.deal(address(this), 5 ether);\r\n        vm.expectRevert(bytes(\"Fallback not allowed\"));\r\n        (bool success, bytes memory data) = address(a).call{value: 1 ether}(abi.encodeWithSignature(\"wantToCallFallback()\"));\r\n        emit Response(success, data);\r\n        console2.log(\"success:\", success);\r\n        console2.log(\"data:\", string(data));\r\n    }\r\n}\r\n\r\n```\r\n\r\nI executed the `forge test -vvvv` command and this the logs:\r\n```\r\nRunning 1 test for test/A.t.sol:FallbackTest\r\n[PASS] testRevert() (gas: 29671)\r\nLogs:\r\n  success: true\r\n  data: \r\n\r\nTraces:\r\n  [29671] FallbackTest::testRevert() \r\n    ├─ [0] VM::deal(FallbackTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 5000000000000000000) \r\n    │   └─ ← ()\r\n    ├─ [0] VM::expectRevert(Fallback not allowed) \r\n    │   └─ ← ()\r\n    ├─ [1698] A::b14544c3{value: 1000000000000000000}() \r\n    │   ├─ emit Description(d: ** this is fallback **)\r\n    │   └─ ← 0x08c379a00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000001446616c6c6261636b206e6f7420616c6c6f776564000000000000000000000000\r\n    ├─ emit Response(success: true, data: 0xr\n    ├─ [0] console::log(success:, true) [staticcall]\r\n    │   └─ ← ()\r\n    ├─ [0] console::log(data:, ) [staticcall]\r\n    │   └─ ← ()\r\n    └─ ← ()\r\n\r\nTest result: ok. 1 passed; 0 failed; finished in 1.66ms\r\n```\r\n\r\nIn the next step, I removed the `vm.expectRevert(bytes(\"Fallback not allowed\"));` line from the `A.t.sol` and run test again. The new logs are as below:\r\n```\r\nRunning 1 test for test/A.t.sol:FallbackTest\r\n[PASS] testRevert() (gas: 24179)\r\nLogs:\r\n  success: false\r\n  data:�y� Fallback not allowed\r\n\r\nTraces:\r\n  [24179] FallbackTest::testRevert() \r\n    ├─ [0] VM::deal(FallbackTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 5000000000000000000) \r\n    │   └─ ← ()\r\n    ├─ [1698] A::b14544c3{value: 1000000000000000000}() \r\n    │   ├─ emit Description(d: ** this is fallback **)\r\n    │   └─ ← 0x08c379a00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000001446616c6c6261636b206e6f7420616c6c6f776564000000000000000000000000\r\n    ├─ emit Response(success: false, data: 0x08c379a00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000001446616c6c6261636b206e6f7420616c6c6f776564000000000000000000000000)\r\n    ├─ [0] console::log(success:, false) [staticcall]\r\n    │   └─ ← ()\r\n    ├─ [0] console::log(data:,�y� Fallback not allowed) [staticcall]\r\n    │   └─ ← ()\r\n    └─ ← ()\r\n\r\nTest result: ok. 1 passed; 0 failed; finished in 2.44ms\r\n```\r\n\r\nThe only difference between the two scenarios is the `vm.expectRevert` function and it affects on the values of `success` and `data` variables. The tx failed in the second scenario, But the `�y�` at the beginning of the data is unnecessary and should be removed.\r\n\r\nThanks.",
  "closed_by": {
    "login": "brockelmore",
    "id": 31553173,
    "node_id": "MDQ6VXNlcjMxNTUzMTcz",
    "avatar_url": "https://avatars.githubusercontent.com/u/31553173?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/brockelmore",
    "html_url": "https://github.com/brockelmore",
    "followers_url": "https://api.github.com/users/brockelmore/followers",
    "following_url": "https://api.github.com/users/brockelmore/following{/other_user}",
    "gists_url": "https://api.github.com/users/brockelmore/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/brockelmore/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/brockelmore/subscriptions",
    "organizations_url": "https://api.github.com/users/brockelmore/orgs",
    "repos_url": "https://api.github.com/users/brockelmore/repos",
    "events_url": "https://api.github.com/users/brockelmore/events{/privacy}",
    "received_events_url": "https://api.github.com/users/brockelmore/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/3901/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3901/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1356230193",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3901#issuecomment-1356230193",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3901",
    "id": 1356230193,
    "node_id": "IC_kwDOGBlvNc5Q1m4x",
    "user": {
      "login": "0xPhaze",
      "id": 103113487,
      "node_id": "U_kgDOBiVjDw",
      "avatar_url": "https://avatars.githubusercontent.com/u/103113487?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/0xPhaze",
      "html_url": "https://github.com/0xPhaze",
      "followers_url": "https://api.github.com/users/0xPhaze/followers",
      "following_url": "https://api.github.com/users/0xPhaze/following{/other_user}",
      "gists_url": "https://api.github.com/users/0xPhaze/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/0xPhaze/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/0xPhaze/subscriptions",
      "organizations_url": "https://api.github.com/users/0xPhaze/orgs",
      "repos_url": "https://api.github.com/users/0xPhaze/repos",
      "events_url": "https://api.github.com/users/0xPhaze/events{/privacy}",
      "received_events_url": "https://api.github.com/users/0xPhaze/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-12-17T12:14:59Z",
    "updated_at": "2022-12-17T12:20:17Z",
    "author_association": "NONE",
    "body": "This doesn't seem to be a forge/foundry bug. The revert in contract A abi-encodes the revert message with the signature \"Error(string)\" and selector [0x08c379a](https://www.4byte.directory/signatures/?bytes4_signature=0x08c379a). You can see this selector in the beginning of your `data` bytes which causes invalid ASCII characters when interpreting the bytes as a string.\r\n\r\nTo correctly decode the returndata into the underlying message, you'll have to cut off that 4 bytes selector + the positional encoding of the string.\r\nYour current `data` bytes is\r\n```\r\n[selector]    08c379a0\r\n[string pos]  0000000000000000000000000000000000000000000000000000000000000020\r\n[string len]  0000000000000000000000000000000000000000000000000000000000000014\r\n[string data] 46616c6c6261636b206e6f7420616c6c6f776564000000000000000000000000\r\n```\r\n which is invalid when directly converting to a string.\r\n\r\nCorrect string data would be \r\n```\r\n[string len]   0000000000000000000000000000000000000000000000000000000000000014\r\n[string data]  46616c6c6261636b206e6f7420616c6c6f776564000000000000000000000000\r\n```\r\n\r\nTo cut off that extra data, I think there's no way around using some assembly.\r\n\r\nAn example:\r\n```solidity\r\nimport \"forge-std/Test.sol\";\r\n\r\ncontract ABC {\r\n    function func() public {\r\n        revert(\"123msg\");\r\n    }\r\n}\r\n\r\ncontract TestContract is Test {\r\n    function test() public {\r\n        ABC abc = new ABC();\r\n\r\n        (bool success, bytes memory returndata) = address(abc).call(abi.encodeCall(ABC.func, ()));\r\n\r\n        console.log(\"incorrect revert msg:\", string(returndata));\r\n\r\n        assembly {\r\n            let returndataLen := mload(returndata) // load bytes length at returndata pointer location\r\n            let revertMsgLen := sub(returndataLen, 0x24) // subtract the 4 bytes selector + 32 bytes positional encoding\r\n            returndata := add(returndata, 0x24) // make pointer skip those bytes, since we'll be modifying the bytes in-place\r\n            mstore(returndata, revertMsgLen) // store the new bytes/string length in the new returndata location\r\n        }\r\n\r\n        console.log(\"correct revert msg:\", string(returndata));\r\n    }\r\n}\r\n\r\n```\r\n\r\n```\r\n[PASS] test() (gas: 70714)\r\nLogs:\r\n  incorrect revert msg:�y� 123msg\r\n  correct revert msg: 123msg\r\n```\r\n\r\nIf you wanted to make this more robust, you would also need to add a check on the `returndata.length`.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1356230193/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1356270159",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3901#issuecomment-1356270159",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3901",
    "id": 1356270159,
    "node_id": "IC_kwDOGBlvNc5Q1wpP",
    "user": {
      "login": "SEMSOFT",
      "id": 36734830,
      "node_id": "MDQ6VXNlcjM2NzM0ODMw",
      "avatar_url": "https://avatars.githubusercontent.com/u/36734830?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SEMSOFT",
      "html_url": "https://github.com/SEMSOFT",
      "followers_url": "https://api.github.com/users/SEMSOFT/followers",
      "following_url": "https://api.github.com/users/SEMSOFT/following{/other_user}",
      "gists_url": "https://api.github.com/users/SEMSOFT/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SEMSOFT/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SEMSOFT/subscriptions",
      "organizations_url": "https://api.github.com/users/SEMSOFT/orgs",
      "repos_url": "https://api.github.com/users/SEMSOFT/repos",
      "events_url": "https://api.github.com/users/SEMSOFT/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SEMSOFT/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-12-17T13:51:50Z",
    "updated_at": "2022-12-17T13:51:50Z",
    "author_association": "NONE",
    "body": "Hi.\r\n\r\nThanks for your attention.\r\n\r\nI still don't know why the `success` value has changed by `vm.expectRevert`. On the first try, The value of `success` is True, But on the second try, It is False.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1356270159/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1356273317",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3901#issuecomment-1356273317",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3901",
    "id": 1356273317,
    "node_id": "IC_kwDOGBlvNc5Q1xal",
    "user": {
      "login": "0xPhaze",
      "id": 103113487,
      "node_id": "U_kgDOBiVjDw",
      "avatar_url": "https://avatars.githubusercontent.com/u/103113487?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/0xPhaze",
      "html_url": "https://github.com/0xPhaze",
      "followers_url": "https://api.github.com/users/0xPhaze/followers",
      "following_url": "https://api.github.com/users/0xPhaze/following{/other_user}",
      "gists_url": "https://api.github.com/users/0xPhaze/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/0xPhaze/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/0xPhaze/subscriptions",
      "organizations_url": "https://api.github.com/users/0xPhaze/orgs",
      "repos_url": "https://api.github.com/users/0xPhaze/repos",
      "events_url": "https://api.github.com/users/0xPhaze/events{/privacy}",
      "received_events_url": "https://api.github.com/users/0xPhaze/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-12-17T14:07:32Z",
    "updated_at": "2022-12-17T14:07:32Z",
    "author_association": "NONE",
    "body": "ah, I don't know the exact reasoning behind that. Perhaps it's necessary, for `vm.expectRevert` to work internally. Good question though.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1356273317/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1356501651",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3901#issuecomment-1356501651",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3901",
    "id": 1356501651,
    "node_id": "IC_kwDOGBlvNc5Q2pKT",
    "user": {
      "login": "brockelmore",
      "id": 31553173,
      "node_id": "MDQ6VXNlcjMxNTUzMTcz",
      "avatar_url": "https://avatars.githubusercontent.com/u/31553173?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brockelmore",
      "html_url": "https://github.com/brockelmore",
      "followers_url": "https://api.github.com/users/brockelmore/followers",
      "following_url": "https://api.github.com/users/brockelmore/following{/other_user}",
      "gists_url": "https://api.github.com/users/brockelmore/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brockelmore/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brockelmore/subscriptions",
      "organizations_url": "https://api.github.com/users/brockelmore/orgs",
      "repos_url": "https://api.github.com/users/brockelmore/repos",
      "events_url": "https://api.github.com/users/brockelmore/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brockelmore/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-12-17T23:50:04Z",
    "updated_at": "2022-12-17T23:50:04Z",
    "author_association": "MEMBER",
    "body": "@SEMSOFT if you use a low level call, there is no need for an `expectRevert` call. We do change the data returned because most of the time a `revert` wont be decodeable into the bytes that solidity expects. Take a call to `transfer` in an erc20, that should return a boolean. If we leave the return/revert data as-is, the contract will revert because it will try to decode a failure into the boolean (i.e. `08c379a0...` into a boolean). So to get around that, we adjust the value to a vector of 0 bytes to ensure the contract that made the call doesnt revert when it tries to decode.\r\n\r\nClosing for now",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1356501651/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
