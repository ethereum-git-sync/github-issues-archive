{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/927",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/927/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/927/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/927/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/927",
  "id": 1167750173,
  "node_id": "I_kwDOGBlvNc5FmnQd",
  "number": 927,
  "title": "Meta: Debugger improvements",
  "user": {
    "login": "onbjerg",
    "id": 8862627,
    "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/onbjerg",
    "html_url": "https://github.com/onbjerg",
    "followers_url": "https://api.github.com/users/onbjerg/followers",
    "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
    "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
    "organizations_url": "https://api.github.com/users/onbjerg/orgs",
    "repos_url": "https://api.github.com/users/onbjerg/repos",
    "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
    "received_events_url": "https://api.github.com/users/onbjerg/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3703752787,
      "node_id": "LA_kwDOGBlvNc7cwshT",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/C-forge",
      "name": "C-forge",
      "color": "5319E7",
      "default": false,
      "description": "Command: forge"
    },
    {
      "id": 3703753247,
      "node_id": "LA_kwDOGBlvNc7cwsof",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/A-debugger",
      "name": "A-debugger",
      "color": "FBCA04",
      "default": false,
      "description": "Area: debugger"
    },
    {
      "id": 3746533612,
      "node_id": "LA_kwDOGBlvNc7fT5Ds",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-meta",
      "name": "T-meta",
      "color": "BFD4F2",
      "default": false,
      "description": "Type: meta"
    },
    {
      "id": 3776975605,
      "node_id": "LA_kwDOGBlvNc7hIBL1",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/Cmd-forge-debug",
      "name": "Cmd-forge-debug",
      "color": "006B75",
      "default": false,
      "description": "Command: forge run"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 5,
  "created_at": "2022-03-14T00:49:04Z",
  "updated_at": "2023-08-20T09:08:05Z",
  "closed_at": null,
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "**Decoding/display**\r\n- [ ] Guidance on how to debug failed tests in the CLI output\r\n- [ ] Visual clues that a precompile is being called (requires more thought, see #916)\r\n- [ ] Showing current values of variables (https://github.com/gakonst/foundry/issues/410)\r\n\r\n**Quality of life**\r\n- [ ] Greying out of zero values in memory (https://github.com/gakonst/foundry/issues/902), being solved in #920 \r\n- [ ] If the debugger is started with no arguments, it would be cool if we could display a list of contracts (further broken down by functions) that the user can interactively select\r\n\r\n**Control flow**\r\n- [ ] Breakpoints\r\n\r\n**Capabilities**\r\n- [ ] Debugging functions with parameters (e.g. fuzz tests), being solved in #920 \r\n- [ ] Debugging of constructors\r\n- [ ] Debugging calls to external contracts (i.e., no local contract is deployed, but a fake call to a live contract is debugged)\r\n- [ ] Storage view\r\n\r\n**Big ticket items**\r\n- [ ] Have an actual interactive debugger. We currently record what happens and play it back to the user, but this can lead to situations where we run out of memory",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/927/reactions",
    "total_count": 2,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 2,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/927/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1079046549",
    "html_url": "https://github.com/foundry-rs/foundry/issues/927#issuecomment-1079046549",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/927",
    "id": 1079046549,
    "node_id": "IC_kwDOGBlvNc5AUPGV",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-25T13:48:53Z",
    "updated_at": "2022-03-25T13:48:53Z",
    "author_association": "MEMBER",
    "body": "Idea for an interactive debugger: some `Debugger` struct that handles state/displays UI. Messages are passed between the `Debugger` and the debug inspector. Contracts are identified on the fly when the EVM switches context using any number of identifiers",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1079046549/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1600843719",
    "html_url": "https://github.com/foundry-rs/foundry/issues/927#issuecomment-1600843719",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/927",
    "id": 1600843719,
    "node_id": "IC_kwDOGBlvNc5fau_H",
    "user": {
      "login": "henry-hz",
      "id": 1010008,
      "node_id": "MDQ6VXNlcjEwMTAwMDg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1010008?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/henry-hz",
      "html_url": "https://github.com/henry-hz",
      "followers_url": "https://api.github.com/users/henry-hz/followers",
      "following_url": "https://api.github.com/users/henry-hz/following{/other_user}",
      "gists_url": "https://api.github.com/users/henry-hz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/henry-hz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/henry-hz/subscriptions",
      "organizations_url": "https://api.github.com/users/henry-hz/orgs",
      "repos_url": "https://api.github.com/users/henry-hz/repos",
      "events_url": "https://api.github.com/users/henry-hz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/henry-hz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-06-21T13:32:29Z",
    "updated_at": "2023-06-21T13:32:29Z",
    "author_association": "NONE",
    "body": "@onbjerg supose I want to debug the function in the test below called `symbol()`. Using the `forge test --debug symbol` I have to jump a looootttt until I find it. What would be needed to jump directly to my function using the debugger ? I have the impression that using the function signature `0x95d89b41` as an input we could just search it and jump the counter to there. Makes sense ? Is there anyone writing it ?\r\n\r\n(I am using the [foundry-huff](https://github.com/huff-language/foundry-huff))\r\n\r\n```solidity\r\n    function testSymbol() public {\r\n        string memory r = token.symbol();\r\n        string memory n = 'JHX';\r\n        assertEq(n,r);\r\n    }\r\n```\r\n\r\n```assembly\r\n#define macro SYMBOL() = takes (0) returns (0) {\r\n    0x20 0x00 mstore\r\n    [META_SYMBOL_LENGTH] 0x20 mstore\r\n    [META_SYMBOL] 0x40 mstore\r\n    0x60 0x00 return\r\n}\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1600843719/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1606044870",
    "html_url": "https://github.com/foundry-rs/foundry/issues/927#issuecomment-1606044870",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/927",
    "id": 1606044870,
    "node_id": "IC_kwDOGBlvNc5fukzG",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-06-25T11:21:29Z",
    "updated_at": "2023-06-25T11:21:34Z",
    "author_association": "COLLABORATOR",
    "body": "@henry-hz You can use [`vm.breakpoint`](https://book.getfoundry.sh/cheatcodes/breakpoint#breakpoint)",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1606044870/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1670429567",
    "html_url": "https://github.com/foundry-rs/foundry/issues/927#issuecomment-1670429567",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/927",
    "id": 1670429567,
    "node_id": "IC_kwDOGBlvNc5jkLt_",
    "user": {
      "login": "Inphi",
      "id": 3516807,
      "node_id": "MDQ6VXNlcjM1MTY4MDc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3516807?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Inphi",
      "html_url": "https://github.com/Inphi",
      "followers_url": "https://api.github.com/users/Inphi/followers",
      "following_url": "https://api.github.com/users/Inphi/following{/other_user}",
      "gists_url": "https://api.github.com/users/Inphi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Inphi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Inphi/subscriptions",
      "organizations_url": "https://api.github.com/users/Inphi/orgs",
      "repos_url": "https://api.github.com/users/Inphi/repos",
      "events_url": "https://api.github.com/users/Inphi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Inphi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-08-08T23:08:10Z",
    "updated_at": "2023-08-08T23:08:10Z",
    "author_association": "CONTRIBUTOR",
    "body": "To add to this, it'll be awesome to have a vim-styled \"command mode\" that supercedes navigation shortcuts. Though it'll be nice to have a full-blown lua scripting engine to interface with during debugging, it'll be a huge improvement to simply have basic commands;\r\n- `:mem <pos>`, `mems <slot>` given either a slot position or index, print or snap to and highlight that specific memory location\r\n- `:store <addr>` similar operations to inspect specific storage slots\r\n- `:continue <pc>` - fast-forward until execution reaches a specific pc on the current contract. More ergonomic than using `vm.breakpoint` imo as you don't need to rebuild contracts to add new breakpoints.\r\n- A way to scroll the source map display so users can easily see the pc that maps to a given line number in code.\r\n\r\nA command-based debug flow would be a good way to introduce feature experiments without cluttering the existing interface.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1670429567/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1685220067",
    "html_url": "https://github.com/foundry-rs/foundry/issues/927#issuecomment-1685220067",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/927",
    "id": 1685220067,
    "node_id": "IC_kwDOGBlvNc5kcmrj",
    "user": {
      "login": "iFrostizz",
      "id": 51274081,
      "node_id": "MDQ6VXNlcjUxMjc0MDgx",
      "avatar_url": "https://avatars.githubusercontent.com/u/51274081?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/iFrostizz",
      "html_url": "https://github.com/iFrostizz",
      "followers_url": "https://api.github.com/users/iFrostizz/followers",
      "following_url": "https://api.github.com/users/iFrostizz/following{/other_user}",
      "gists_url": "https://api.github.com/users/iFrostizz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/iFrostizz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iFrostizz/subscriptions",
      "organizations_url": "https://api.github.com/users/iFrostizz/orgs",
      "repos_url": "https://api.github.com/users/iFrostizz/repos",
      "events_url": "https://api.github.com/users/iFrostizz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/iFrostizz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-08-20T08:09:45Z",
    "updated_at": "2023-08-20T09:08:05Z",
    "author_association": "CONTRIBUTOR",
    "body": "@Inphi Agree, but why would we need to write a lua interface if it can be integrated in the `Tui` directly ?\r\nThough we could use `/` to search for opcode",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1685220067/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
