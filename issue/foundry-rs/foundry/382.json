{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/382",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/382/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/382/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/382/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/382",
  "id": 1094648451,
  "node_id": "I_kwDOGBlvNc5BPwKD",
  "number": 382,
  "title": "feat: expectCall and mockCall",
  "user": {
    "login": "tarrencev",
    "id": 4740651,
    "node_id": "MDQ6VXNlcjQ3NDA2NTE=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4740651?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tarrencev",
    "html_url": "https://github.com/tarrencev",
    "followers_url": "https://api.github.com/users/tarrencev/followers",
    "following_url": "https://api.github.com/users/tarrencev/following{/other_user}",
    "gists_url": "https://api.github.com/users/tarrencev/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tarrencev/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tarrencev/subscriptions",
    "organizations_url": "https://api.github.com/users/tarrencev/orgs",
    "repos_url": "https://api.github.com/users/tarrencev/repos",
    "events_url": "https://api.github.com/users/tarrencev/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tarrencev/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3394555740,
      "node_id": "LA_kwDOGBlvNc7KVM9c",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/A-evm",
      "name": "A-evm",
      "color": "FBCA04",
      "default": false,
      "description": "Area: EVM"
    },
    {
      "id": 3593644820,
      "node_id": "LA_kwDOGBlvNc7WMqsU",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-feature",
      "name": "T-feature",
      "color": "BFD4F2",
      "default": false,
      "description": "Type: feature"
    },
    {
      "id": 3703752960,
      "node_id": "LA_kwDOGBlvNc7cwskA",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/A-cheatcodes",
      "name": "A-cheatcodes",
      "color": "FBCA04",
      "default": false,
      "description": "Area: cheatcodes"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 0,
  "created_at": "2022-01-05T18:48:56Z",
  "updated_at": "2022-01-11T14:22:58Z",
  "closed_at": "2022-01-11T14:22:58Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "following up on a telegram convo here to track:\r\n\r\nWould it be possible to implement a cheat code like this, that reverts if the condition is not met before the end of the test:\r\n\r\n```solidity\r\n// Asserts that a call was made, doesn't modify the execution\r\nfunction expectCall(address contract, bytes memory call) external;\r\n\r\nexpectCall(bridge, abi.encodeWithSelector(\r\n    IRollCallBridge.queue.selector,\r\n    governor,\r\n    ...\r\n))\r\n\r\n// Mocks a call, asserting it was called and returning the provided return value\r\nfunction mockCall(address contract, bytes memory call, bytes memory return) external;\r\n\r\nmockCall(bridge, abi.encodeWithSelector(\r\n    IRollCallBridge.queue.selector,\r\n    governor,\r\n    ...\r\n), abi.encode(uint256(420)))\r\n```\r\n\r\nRe: mock\r\n\r\n```solidity\r\nMy thought was I often have fakes like:\r\n\r\n\r\ncontract OVM_FakeL1BlockNumber is iOVM_L1BlockNumber {\r\n    uint256 private blocknumber;\r\n\r\n    function setL1BlockNumber(uint256 n) external {\r\n        blocknumber = n;\r\n    }\r\n\r\n    function getL1BlockNumber() external view override returns (uint256) {\r\n        return blocknumber;\r\n    }\r\n}\r\n\r\n\r\nUsed like\r\n\r\n\r\n// setup\r\nblocknumber = OVM_FakeL1BlockNumber(\r\n    Lib_PredeployAddresses.L1_BLOCK_NUMBER\r\n);\r\nvm.etch(\r\n    Lib_PredeployAddresses.L1_BLOCK_NUMBER,\r\n    type(OVM_FakeL1BlockNumber).runtimeCode\r\n);\r\n...\r\nblocknumber.setL1BlockNumber(5);\r\n// call that uses `getL1BlockNumber()\r\n\r\n\r\nWhich could be replaced with:\r\n\r\n\r\nvm.mockCall(Lib_PredeployAddresses.L1_BLOCK_NUMBER, abi.encodeWithSelector(iOVM_L1BlockNumber.getL1BlockNumber.selector), abi.encode(5));\r\n```",
  "closed_by": {
    "login": "gakonst",
    "id": 17802178,
    "node_id": "MDQ6VXNlcjE3ODAyMTc4",
    "avatar_url": "https://avatars.githubusercontent.com/u/17802178?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/gakonst",
    "html_url": "https://github.com/gakonst",
    "followers_url": "https://api.github.com/users/gakonst/followers",
    "following_url": "https://api.github.com/users/gakonst/following{/other_user}",
    "gists_url": "https://api.github.com/users/gakonst/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/gakonst/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gakonst/subscriptions",
    "organizations_url": "https://api.github.com/users/gakonst/orgs",
    "repos_url": "https://api.github.com/users/gakonst/repos",
    "events_url": "https://api.github.com/users/gakonst/events{/privacy}",
    "received_events_url": "https://api.github.com/users/gakonst/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/382/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/382/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[

]
