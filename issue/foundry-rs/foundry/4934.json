{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/4934",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4934/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4934/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4934/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/4934",
  "id": 1708270619,
  "node_id": "I_kwDOGBlvNc5l0iQb",
  "number": 4934,
  "title": "vm.roll() effect delayed when via_ir = true in solidity >=0.8.15",
  "user": {
    "login": "hananbeer",
    "id": 63053861,
    "node_id": "MDQ6VXNlcjYzMDUzODYx",
    "avatar_url": "https://avatars.githubusercontent.com/u/63053861?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hananbeer",
    "html_url": "https://github.com/hananbeer",
    "followers_url": "https://api.github.com/users/hananbeer/followers",
    "following_url": "https://api.github.com/users/hananbeer/following{/other_user}",
    "gists_url": "https://api.github.com/users/hananbeer/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hananbeer/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hananbeer/subscriptions",
    "organizations_url": "https://api.github.com/users/hananbeer/orgs",
    "repos_url": "https://api.github.com/users/hananbeer/repos",
    "events_url": "https://api.github.com/users/hananbeer/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hananbeer/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3334394228,
      "node_id": "MDU6TGFiZWwzMzM0Mzk0MjI4",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-bug",
      "name": "T-bug",
      "color": "d73a4a",
      "default": false,
      "description": "Type: bug"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 5,
  "created_at": "2023-05-12T22:06:42Z",
  "updated_at": "2023-05-13T20:23:48Z",
  "closed_at": "2023-05-13T20:23:12Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "### Component\n\nForge\n\n### Have you ensured that all of these are up to date?\n\n- [X] Foundry\n- [X] Foundryup\n\n### What version of Foundry are you on?\n\nWindows: forge 0.2.0 (bb62e3c 2023-03-15T09:18:40.7502879Z), Linux: forge 0.2.0 (f3c20d5 2023-05-12T00:06:03.466532062Z)\n\n### What command(s) is the bug in?\n\nforge test\n\n### Operating System\n\nWindows\n\n### Describe the bug\n\nvm.roll() is expected to set the block number such that subsequent reads of block.number are immediately updated.\r\n\r\nhowever, strangely only with via_ir = true AND only for solidity >=0.8.15, the effect takes place only after calling a contract.\r\n\r\nPoC:\r\n```solidity\r\n// SPDX-License-Identifier: UNLICENSED\r\npragma solidity >=0.8.15;\r\n\r\nimport \"forge-std/Test.sol\";\r\n\r\ncontract Bug {\r\n    function check() public {\r\n        console.log(\"[contract   ] block: %d, time: %d, hash: %x\", block.number, block.timestamp, uint256(blockhash(block.number - 1)));\r\n    }\r\n}\r\n\r\ncontract BugTest is Test {\r\n    function testBug() public {\r\n        Bug bug = new Bug();\r\n\r\n        console.log(\"[before roll] block: %d, time: %d, hash: %x\", block.number, block.timestamp, uint256(blockhash(block.number - 1)));\r\n        vm.roll(block.number + 5);\r\n        console.log(\"[after  roll] block: %d, time: %d, hash: %x\", block.number, block.timestamp, uint256(blockhash(block.number - 1)));\r\n        bug.check();\r\n    }\r\n}\r\n```\r\n\r\nOutput:\r\n```\r\n  [before roll] block: 1, time: 1, hash: 0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563\r\n  [after  roll] block: 6, time: 1, hash: 0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563 <-- wrong\r\n  [contract   ] block: 6, time: 1, hash: 0x36b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db0 <-- somehow this is correct\r\n```\r\n\r\nnotice block 6 returns two different hashes in different contexts.\r\n\r\nExpected output:\r\n```\r\n  [before roll] block: 1, time: 1, hash: 0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563\r\n  [after  roll] block: 6, time: 1, hash: 0x36b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db0\r\n  [contract   ] block: 6, time: 1, hash: 0x36b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db0\r\n```\r\n\r\nI have tested this on Windows and on Linux with fresh forge install.\r\n\r\nvery strange bug indeed.\r\n",
  "closed_by": {
    "login": "hananbeer",
    "id": 63053861,
    "node_id": "MDQ6VXNlcjYzMDUzODYx",
    "avatar_url": "https://avatars.githubusercontent.com/u/63053861?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hananbeer",
    "html_url": "https://github.com/hananbeer",
    "followers_url": "https://api.github.com/users/hananbeer/followers",
    "following_url": "https://api.github.com/users/hananbeer/following{/other_user}",
    "gists_url": "https://api.github.com/users/hananbeer/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hananbeer/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hananbeer/subscriptions",
    "organizations_url": "https://api.github.com/users/hananbeer/orgs",
    "repos_url": "https://api.github.com/users/hananbeer/repos",
    "events_url": "https://api.github.com/users/hananbeer/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hananbeer/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/4934/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4934/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1546405062",
    "html_url": "https://github.com/foundry-rs/foundry/issues/4934#issuecomment-1546405062",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4934",
    "id": 1546405062,
    "node_id": "IC_kwDOGBlvNc5cLETG",
    "user": {
      "login": "hrkrshnn",
      "id": 13174375,
      "node_id": "MDQ6VXNlcjEzMTc0Mzc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/13174375?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hrkrshnn",
      "html_url": "https://github.com/hrkrshnn",
      "followers_url": "https://api.github.com/users/hrkrshnn/followers",
      "following_url": "https://api.github.com/users/hrkrshnn/following{/other_user}",
      "gists_url": "https://api.github.com/users/hrkrshnn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hrkrshnn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hrkrshnn/subscriptions",
      "organizations_url": "https://api.github.com/users/hrkrshnn/orgs",
      "repos_url": "https://api.github.com/users/hrkrshnn/repos",
      "events_url": "https://api.github.com/users/hrkrshnn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hrkrshnn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-12T22:50:47Z",
    "updated_at": "2023-05-12T22:53:51Z",
    "author_association": "NONE",
    "body": "I believe this is a known issue. The problem is that according to Solidity, block.number is a constant across the transaction. So a new reference to it can just dup the value instead of calling the same opcode. Does that explain the issue?\n\nBut there should be a way to fix these issues without creating further restrictions in the compiler. I'll make an issue in solidity on it ",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1546405062/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1546521536",
    "html_url": "https://github.com/foundry-rs/foundry/issues/4934#issuecomment-1546521536",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4934",
    "id": 1546521536,
    "node_id": "IC_kwDOGBlvNc5cLgvA",
    "user": {
      "login": "hananbeer",
      "id": 63053861,
      "node_id": "MDQ6VXNlcjYzMDUzODYx",
      "avatar_url": "https://avatars.githubusercontent.com/u/63053861?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hananbeer",
      "html_url": "https://github.com/hananbeer",
      "followers_url": "https://api.github.com/users/hananbeer/followers",
      "following_url": "https://api.github.com/users/hananbeer/following{/other_user}",
      "gists_url": "https://api.github.com/users/hananbeer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hananbeer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hananbeer/subscriptions",
      "organizations_url": "https://api.github.com/users/hananbeer/orgs",
      "repos_url": "https://api.github.com/users/hananbeer/repos",
      "events_url": "https://api.github.com/users/hananbeer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hananbeer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-13T04:20:18Z",
    "updated_at": "2023-05-13T04:23:08Z",
    "author_association": "NONE",
    "body": "hmm. so it's technically not a bug in neither forge nor solc and yet my code reverts.\r\nI thought it might be related to solc but it roll the block eventually so I was thrown off, but honestly I should've thought it just dups from the stack or something like that...\r\n\r\nI think the best move would be if forge test could somehow detect vm.roll + via_ir (assuming that only happens in via_ir?) if that's possible. probably for timestamp and the likes as well. but I understand if that's not trivially achievable and just wallow in my misery and that some poor soul will encounter this in the future.\r\n\r\nedit: come to think about it, I think it could make most sense to create a cheatcode such as vm.blockhash. just the call to this contract would be enough to workaround this stack dup thing.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1546521536/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1546667682",
    "html_url": "https://github.com/foundry-rs/foundry/issues/4934#issuecomment-1546667682",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4934",
    "id": 1546667682,
    "node_id": "IC_kwDOGBlvNc5cMEai",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-13T14:41:18Z",
    "updated_at": "2023-05-13T14:41:18Z",
    "author_association": "COLLABORATOR",
    "body": "Just linking some relevant issues here since this has come up before around block timestamp:\r\n- Initial forge issue where this happened with timestamp: https://github.com/foundry-rs/foundry/issues/1373\r\n- A workaround that's been used for timestamp: https://github.com/foundry-rs/foundry/issues/3806#issuecomment-1361665604\r\n- Related solidity issue (issue title is wrong per @hrkrshnn's last comment there): https://github.com/ethereum/solidity/issues/12963\r\n- Another related solidity issue https://github.com/ethereum/solidity/issues/12951 \r\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1546667682/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1546742374",
    "html_url": "https://github.com/foundry-rs/foundry/issues/4934#issuecomment-1546742374",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4934",
    "id": 1546742374,
    "node_id": "IC_kwDOGBlvNc5cMWpm",
    "user": {
      "login": "hrkrshnn",
      "id": 13174375,
      "node_id": "MDQ6VXNlcjEzMTc0Mzc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/13174375?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hrkrshnn",
      "html_url": "https://github.com/hrkrshnn",
      "followers_url": "https://api.github.com/users/hrkrshnn/followers",
      "following_url": "https://api.github.com/users/hrkrshnn/following{/other_user}",
      "gists_url": "https://api.github.com/users/hrkrshnn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hrkrshnn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hrkrshnn/subscriptions",
      "organizations_url": "https://api.github.com/users/hrkrshnn/orgs",
      "repos_url": "https://api.github.com/users/hrkrshnn/repos",
      "events_url": "https://api.github.com/users/hrkrshnn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hrkrshnn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-13T20:13:00Z",
    "updated_at": "2023-05-13T20:13:00Z",
    "author_association": "NONE",
    "body": "Initially I thought the compiler was `dup`-ing `block.number` twice (which is bad since `duping` is 1 gas more expensive). But turns out it was actually duping the bigger expression. Which is cheaper.\r\n\r\n```solidity\r\n  contract Test {\r\n      function f() external {\r\n      }\r\n  }\r\n  contract C {\r\n      bytes32 x;\r\n      bytes32 y;\r\n      Test immutable test = new Test();\r\n      function f() external {\r\n          x = blockhash(block.number - 1);\r\n          test.f();\r\n          y = blockhash(block.number - 1);\r\n      }\r\n  }\r\n```\r\n\r\nIf you look at the optimized IR for this, `--ir-optimized --optimize --debug-info none`, you can see that the compiler will just cache the first expression `blockhash(block.number - 1)` and then dup it for the second `sstore`.\r\n\r\nIf you change this to\r\n```solidity\r\ncontract Test {\r\n    function f() external {\r\n    }\r\n}\r\ncontract C {\r\n    uint x;\r\n    uint y;\r\n    Test immutable test = new Test();\r\n    function f() external {\r\n        x = block.number;\r\n        test.f();\r\n        y = block.number;\r\n    }\r\n}\r\n```\r\nYou'll see that there are no `dup`s, and each `sstore` is has `number` as the second argument. (`dup` is 1 gas more expensive).",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1546742374/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1546743842",
    "html_url": "https://github.com/foundry-rs/foundry/issues/4934#issuecomment-1546743842",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4934",
    "id": 1546743842,
    "node_id": "IC_kwDOGBlvNc5cMXAi",
    "user": {
      "login": "hananbeer",
      "id": 63053861,
      "node_id": "MDQ6VXNlcjYzMDUzODYx",
      "avatar_url": "https://avatars.githubusercontent.com/u/63053861?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hananbeer",
      "html_url": "https://github.com/hananbeer",
      "followers_url": "https://api.github.com/users/hananbeer/followers",
      "following_url": "https://api.github.com/users/hananbeer/following{/other_user}",
      "gists_url": "https://api.github.com/users/hananbeer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hananbeer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hananbeer/subscriptions",
      "organizations_url": "https://api.github.com/users/hananbeer/orgs",
      "repos_url": "https://api.github.com/users/hananbeer/repos",
      "events_url": "https://api.github.com/users/hananbeer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hananbeer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-13T20:23:12Z",
    "updated_at": "2023-05-13T20:23:48Z",
    "author_association": "NONE",
    "body": "that's right. thanks for the info.\r\nI also tried scoping the first blockhash() with { } but it leaks outside the scope. I wonder if that might be a problem elsewhere... but it is not technically a bug still.\r\n\r\nfor now I just workaround it with the external call, but I think foundry should consider adding this to Cheatcodes.sol and the docs to warn people.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1546743842/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
