{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/3005",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3005/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3005/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3005/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/3005",
  "id": 1354418459,
  "node_id": "I_kwDOGBlvNc5Quskb",
  "number": 3005,
  "title": "feat: commit state changes to test contract during invariant/fuzz tests",
  "user": {
    "login": "mds1",
    "id": 17163988,
    "node_id": "MDQ6VXNlcjE3MTYzOTg4",
    "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mds1",
    "html_url": "https://github.com/mds1",
    "followers_url": "https://api.github.com/users/mds1/followers",
    "following_url": "https://api.github.com/users/mds1/following{/other_user}",
    "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
    "organizations_url": "https://api.github.com/users/mds1/orgs",
    "repos_url": "https://api.github.com/users/mds1/repos",
    "events_url": "https://api.github.com/users/mds1/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mds1/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3394554570,
      "node_id": "LA_kwDOGBlvNc7KVMrK",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/A-fuzzing",
      "name": "A-fuzzing",
      "color": "FBCA04",
      "default": false,
      "description": "Area: fuzzing"
    },
    {
      "id": 3593644820,
      "node_id": "LA_kwDOGBlvNc7WMqsU",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-feature",
      "name": "T-feature",
      "color": "BFD4F2",
      "default": false,
      "description": "Type: feature"
    },
    {
      "id": 3703752787,
      "node_id": "LA_kwDOGBlvNc7cwshT",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/C-forge",
      "name": "C-forge",
      "color": "5319E7",
      "default": false,
      "description": "Command: forge"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 14,
  "created_at": "2022-08-29T14:40:03Z",
  "updated_at": "2023-06-26T03:36:32Z",
  "closed_at": null,
  "author_association": "COLLABORATOR",
  "active_lock_reason": null,
  "body": "### Component\r\n\r\nForge\r\n\r\n### Describe the feature you would like\r\n\r\nRight now, the state changes made by an invariant test (i.e. the state changes within the test contract itself, timestamp changes, and presumably other `block.*` changes) are not committed to the test contract after each call (for invariant tests) or after the run (at the end of a fuzz test). Without this, there is no way to test time-series types of invariants, such as \"contract nonce should only ever increase\" or \"compound ctoken exchange only ever increases\".\r\n\r\nCommitting state changes within a test should have no downside, and will enable testing these types of scenarios.\r\n\r\nThis feature pairs nicely with #2962 and #2985, to allow devs to get visibility into the intermediate state of the test contract. For example, it would be great to be able to have console.logs such as the ones below (below is annotated with comments for clarity):\r\n\r\n```\r\n// No calls have executed yet, invariant test runs\r\nDEPTH: 0\r\nlastNonce: 0\r\ncurrent Nonce: 0\r\n\r\n// First call is made\r\nDEPTH: 1\r\nlastNonce: 0\r\ncurrent Nonce: 1\r\n\r\n// Second call is made\r\nDEPTH: 2\r\nlastNonce: 1\r\ncurrent Nonce: 2\r\n```\r\n\r\nCommitting state for fuzz tests seems useful too, helpful for avoiding stack too deep to save data to storage and then write a bunch of stuff to a file",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/3005/reactions",
    "total_count": 3,
    "+1": 2,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 1,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3005/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1302613550",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3005#issuecomment-1302613550",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3005",
    "id": 1302613550,
    "node_id": "IC_kwDOGBlvNc5NpE4u",
    "user": {
      "login": "gakonst",
      "id": 17802178,
      "node_id": "MDQ6VXNlcjE3ODAyMTc4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17802178?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gakonst",
      "html_url": "https://github.com/gakonst",
      "followers_url": "https://api.github.com/users/gakonst/followers",
      "following_url": "https://api.github.com/users/gakonst/following{/other_user}",
      "gists_url": "https://api.github.com/users/gakonst/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gakonst/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gakonst/subscriptions",
      "organizations_url": "https://api.github.com/users/gakonst/orgs",
      "repos_url": "https://api.github.com/users/gakonst/repos",
      "events_url": "https://api.github.com/users/gakonst/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gakonst/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-03T20:11:54Z",
    "updated_at": "2022-11-03T20:11:54Z",
    "author_association": "MEMBER",
    "body": "@joshieDo PTAL it seems to be we're missing some context across steps, the timestamp etc isn't persisted from call 1 to call 2",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1302613550/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1400449918",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3005#issuecomment-1400449918",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3005",
    "id": 1400449918,
    "node_id": "IC_kwDOGBlvNc5TeSt-",
    "user": {
      "login": "PaulRBerg",
      "id": 8782666,
      "node_id": "MDQ6VXNlcjg3ODI2NjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8782666?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PaulRBerg",
      "html_url": "https://github.com/PaulRBerg",
      "followers_url": "https://api.github.com/users/PaulRBerg/followers",
      "following_url": "https://api.github.com/users/PaulRBerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/PaulRBerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PaulRBerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PaulRBerg/subscriptions",
      "organizations_url": "https://api.github.com/users/PaulRBerg/orgs",
      "repos_url": "https://api.github.com/users/PaulRBerg/repos",
      "events_url": "https://api.github.com/users/PaulRBerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PaulRBerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-23T14:36:17Z",
    "updated_at": "2023-01-23T14:36:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Without this, there is no way to test time-series types of invariants, such as \"contract nonce should only ever increase\" or \"compound ctoken exchange only ever increases\".\r\n\r\nTo test the cToken exchange rate, you would have to inherit from the cToken contract in your test contract, no?\r\n\r\nOtherwise, I don't see how this feature proposal could help with asserting time-series invariants.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1400449918/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1400531510",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3005#issuecomment-1400531510",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3005",
    "id": 1400531510,
    "node_id": "IC_kwDOGBlvNc5Temo2",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-23T15:23:15Z",
    "updated_at": "2023-01-23T15:23:15Z",
    "author_association": "COLLABORATOR",
    "body": "You would not need to inherit from the cToken contract. The invariant test contract would store the last exchange rate after each call.  Here's an example that might help convey the idea using a nonce counter: https://github.com/mds1/solidity-sandbox/blob/main/test/4_InvariantNonceGoUp.t.sol",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1400531510/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1400597499",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3005#issuecomment-1400597499",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3005",
    "id": 1400597499,
    "node_id": "IC_kwDOGBlvNc5Te2v7",
    "user": {
      "login": "PaulRBerg",
      "id": 8782666,
      "node_id": "MDQ6VXNlcjg3ODI2NjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8782666?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PaulRBerg",
      "html_url": "https://github.com/PaulRBerg",
      "followers_url": "https://api.github.com/users/PaulRBerg/followers",
      "following_url": "https://api.github.com/users/PaulRBerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/PaulRBerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PaulRBerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PaulRBerg/subscriptions",
      "organizations_url": "https://api.github.com/users/PaulRBerg/orgs",
      "repos_url": "https://api.github.com/users/PaulRBerg/repos",
      "events_url": "https://api.github.com/users/PaulRBerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PaulRBerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-23T16:06:10Z",
    "updated_at": "2023-01-23T16:06:10Z",
    "author_association": "CONTRIBUTOR",
    "body": "ooh, I see. Thanks for linking to that example, makes sense now.\r\n\r\nAm I understanding correctly that in your example, the maximum value that `nonce` can have is 16, because the `depth` config option is set to 15, and Forge doesn't currently commit the state changes?\r\n\r\nhttps://github.com/mds1/solidity-sandbox/blob/f139dca6163a6cc1ede5db5c81f4e5df40e8ee44/test/4_InvariantNonceGoUp.t.sol#LL65C15-L65C20\r\n\r\nIf it had done that, the `nonce` could get much higher, as you would get a \"time-series\" of runs that all monotonically bump the `nonce`. Which is what you want, since in the real world, state is indeed committed. ",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1400597499/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1400612444",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3005#issuecomment-1400612444",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3005",
    "id": 1400612444,
    "node_id": "IC_kwDOGBlvNc5Te6Zc",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-23T16:15:04Z",
    "updated_at": "2023-01-23T16:15:04Z",
    "author_association": "COLLABORATOR",
    "body": "> Am I understanding correctly that in your example, the maximum value that nonce can have is 16, because the depth config option is set to 15\r\n\r\nCorrect!\r\n\r\n> If it had done that, the `nonce` could get much higher, as you would get a \"time-series\" of runs that all monotonically bump the `nonce`. Which is what you want, since in the real world, state is indeed committed.\r\n\r\nBy \"that\" do you mean \"commit state changes\"? If so, the max nonce value in this example is only a function of `depth`. Committing state changes to the invariant test contract makes that easier to test, but you can work around it with an \"actor contract\" that tracks the nonce instead, as @lucas-manuel / Maple do in their repos\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1400612444/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1400629876",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3005#issuecomment-1400629876",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3005",
    "id": 1400629876,
    "node_id": "IC_kwDOGBlvNc5Te-p0",
    "user": {
      "login": "PaulRBerg",
      "id": 8782666,
      "node_id": "MDQ6VXNlcjg3ODI2NjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8782666?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PaulRBerg",
      "html_url": "https://github.com/PaulRBerg",
      "followers_url": "https://api.github.com/users/PaulRBerg/followers",
      "following_url": "https://api.github.com/users/PaulRBerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/PaulRBerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PaulRBerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PaulRBerg/subscriptions",
      "organizations_url": "https://api.github.com/users/PaulRBerg/orgs",
      "repos_url": "https://api.github.com/users/PaulRBerg/repos",
      "events_url": "https://api.github.com/users/PaulRBerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PaulRBerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-23T16:26:28Z",
    "updated_at": "2023-01-23T16:26:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Correct!\r\n\r\nUnderstanding things is nice.\r\n\r\n> By \"that\" do you mean \"commit state changes\"?\r\n\r\nYes.\r\n\r\n>  the max nonce value in this example is only a function of `depth`\r\n\r\nI don't see why this is the case if the state between calls was committed by Forge. Couldn't `nonce` go bigger than 15? Specifically in this example, it should be able to go to 1+256*15= 3841.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1400629876/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1400681582",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3005#issuecomment-1400681582",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3005",
    "id": 1400681582,
    "node_id": "IC_kwDOGBlvNc5TfLRu",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-23T17:04:44Z",
    "updated_at": "2023-01-23T17:04:44Z",
    "author_association": "COLLABORATOR",
    "body": "In this nonce example, there are only two functions the fuzzer can call\r\n- `increment` the nonce by 1\r\n- `decrement` the nonce by 1\r\n\r\nAn invariant test behaves as follows:\r\n- Initialize test from post-`setUp` state\r\n- Call `invariant_NonceGoUp` and make sure it passes\r\n- Call a random method, in this case `increment` or `decrement`. Say we called `increment`, nonce went from 1 to 2\r\n- Call `invariant_NonceGoUp` and make sure it passes\r\n- Call a random method, in this case `increment` or `decrement`. Say we called `increment`, nonce went from 2 to 3\r\n- etc.\r\n\r\nThe number of times we \"call a random method\" is given by the invariant `depth` setting, which defaults to 15. So at most in this example you can't call a method more than 15 times\r\n\r\nOnce those 15 calls are made, run number 1 is completed. The state now resets, and we begin run number 2 from the same post-`setUp` state",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1400681582/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1400750780",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3005#issuecomment-1400750780",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3005",
    "id": 1400750780,
    "node_id": "IC_kwDOGBlvNc5TfcK8",
    "user": {
      "login": "PaulRBerg",
      "id": 8782666,
      "node_id": "MDQ6VXNlcjg3ODI2NjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8782666?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PaulRBerg",
      "html_url": "https://github.com/PaulRBerg",
      "followers_url": "https://api.github.com/users/PaulRBerg/followers",
      "following_url": "https://api.github.com/users/PaulRBerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/PaulRBerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PaulRBerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PaulRBerg/subscriptions",
      "organizations_url": "https://api.github.com/users/PaulRBerg/orgs",
      "repos_url": "https://api.github.com/users/PaulRBerg/repos",
      "events_url": "https://api.github.com/users/PaulRBerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PaulRBerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-23T17:57:14Z",
    "updated_at": "2023-01-24T09:06:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks for the explainer but I think we're still talking past one another?\r\n\r\n> **The state now resets**, and we begin run number 2 from the same post-`setUp` state\r\n\r\nIsn't the very purpose of the feature proposal in this issue to not reset the state? This is what I was getting at with the question from my two comments above.\r\n\r\n- Nonce becomes 15 at the end of run 1\r\n- State is *not* reset\r\n- Run number 2 commences\r\n- Nonce is increased to 16, then 17, etc. (assuming calls are made only to `increment`)",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1400750780/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1400933814",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3005#issuecomment-1400933814",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3005",
    "id": 1400933814,
    "node_id": "IC_kwDOGBlvNc5TgI22",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-23T20:25:20Z",
    "updated_at": "2023-01-23T20:25:20Z",
    "author_association": "COLLABORATOR",
    "body": "> Isn't the very purpose of the feature proposal in this issue to not reset the state?\r\n\r\nRight, and the state is preserved _within the context of a run_. Once a run ends, the state is reset to start the next run. A \"run\" in invariant testing is defined as above, i.e. alternating calls between \"check the invariant\" and \"execute a random call\", until `depth` random calls have been executed.\r\n\r\nI think the confusion is the definition of a \"run\". In a standard fuzz test, a run is just \"a single execution of all the code within your test method\". In invariant tests, a run is defined differently.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1400933814/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1401594556",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3005#issuecomment-1401594556",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3005",
    "id": 1401594556,
    "node_id": "IC_kwDOGBlvNc5TiqK8",
    "user": {
      "login": "PaulRBerg",
      "id": 8782666,
      "node_id": "MDQ6VXNlcjg3ODI2NjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8782666?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PaulRBerg",
      "html_url": "https://github.com/PaulRBerg",
      "followers_url": "https://api.github.com/users/PaulRBerg/followers",
      "following_url": "https://api.github.com/users/PaulRBerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/PaulRBerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PaulRBerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PaulRBerg/subscriptions",
      "organizations_url": "https://api.github.com/users/PaulRBerg/orgs",
      "repos_url": "https://api.github.com/users/PaulRBerg/repos",
      "events_url": "https://api.github.com/users/PaulRBerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PaulRBerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-24T09:09:39Z",
    "updated_at": "2023-01-24T09:09:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "> the state is preserved *within the context of a run*\r\n\r\nI see. It should then follow that the maximum value that the nonce in your example can have given the current version of Forge is 1, because state is not preserved between calls.\r\n\r\nIn your example the maximum nonce would be 15 only after the feature proposal in this issue gets implemented in Forge.\r\n\r\n> I think the confusion is the definition of a \"run\"\r\n\r\nYeah, that was one bit of confusion, so thanks for the additional color.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1401594556/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1402265168",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3005#issuecomment-1402265168",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3005",
    "id": 1402265168,
    "node_id": "IC_kwDOGBlvNc5TlN5Q",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-24T16:51:08Z",
    "updated_at": "2023-01-24T16:51:08Z",
    "author_association": "COLLABORATOR",
    "body": "> I see. It should then follow that the maximum value that the nonce in your example can have given the current version of Forge is 1, because state is not preserved between calls.\r\n\r\nDepends which `nonce` var you are referring to:\r\n- The one in the storage of contract-under-test does increase and is preserved.\r\n- The one in the storage our test contract is not preserved, which is the scope of this issue\r\n- If you create a \"test data\" contract and tracked the nonce there instead of in the test contract itself that would also be preserved\r\n\r\nIt's only the test contracts themselves which don't preserve state between calls of an invariant run",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1402265168/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1403438313",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3005#issuecomment-1403438313",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3005",
    "id": 1403438313,
    "node_id": "IC_kwDOGBlvNc5TpsTp",
    "user": {
      "login": "PaulRBerg",
      "id": 8782666,
      "node_id": "MDQ6VXNlcjg3ODI2NjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8782666?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PaulRBerg",
      "html_url": "https://github.com/PaulRBerg",
      "followers_url": "https://api.github.com/users/PaulRBerg/followers",
      "following_url": "https://api.github.com/users/PaulRBerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/PaulRBerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PaulRBerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PaulRBerg/subscriptions",
      "organizations_url": "https://api.github.com/users/PaulRBerg/orgs",
      "repos_url": "https://api.github.com/users/PaulRBerg/repos",
      "events_url": "https://api.github.com/users/PaulRBerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PaulRBerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-25T11:04:40Z",
    "updated_at": "2023-01-25T11:04:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "I was always referring to the storage of the test contract in my comments above, but I see that my wording was ambiguous - thanks for clearing this up.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1403438313/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1556141136",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3005#issuecomment-1556141136",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3005",
    "id": 1556141136,
    "node_id": "IC_kwDOGBlvNc5cwNRQ",
    "user": {
      "login": "PaulRBerg",
      "id": 8782666,
      "node_id": "MDQ6VXNlcjg3ODI2NjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8782666?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PaulRBerg",
      "html_url": "https://github.com/PaulRBerg",
      "followers_url": "https://api.github.com/users/PaulRBerg/followers",
      "following_url": "https://api.github.com/users/PaulRBerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/PaulRBerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PaulRBerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PaulRBerg/subscriptions",
      "organizations_url": "https://api.github.com/users/PaulRBerg/orgs",
      "repos_url": "https://api.github.com/users/PaulRBerg/repos",
      "events_url": "https://api.github.com/users/PaulRBerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PaulRBerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-21T10:21:24Z",
    "updated_at": "2023-05-21T10:21:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "After spending a few hours debugging a bug related to this issue, I want to add a few clarificatory remarks to what has been said in this thread.\r\n\r\n> It's only the test contracts themselves which don't preserve state between calls of an invariant run\r\n\r\nActually, _any_ state change brought about in an invariant test (a function that starts with `invariant_`) will be discarded by Foundry. It doesn't matter if the state change is in a separate contract; that will be discarded, too.\r\n\r\n> * If you create a \"test data\" contract and tracked the nonce there instead of in the test contract itself that would also be preserved\r\n\r\nThis works only if the test data is recorded via a targeted contract (e.g. a handler). If you attempt to update the state of this test data contract in an `invariant_` test function, nothing will be preserved.\r\n\r\nNote: this might have been obvious to you, but it wasn't for me, and I wanted to explain how this works in case others end up in my shoes.\r\n\r\n---\r\n\r\nThe following code snippet shows what I mean above:\r\n\r\n<details><summary>See code snippet</summary>\r\n<p>\r\n\r\n```solidity\r\nimport { Test } from \"forge-std/Test.sol\";\r\nimport { console2 } from \"forge-std/console2.sol\";\r\n\r\ncontract Handler {\r\n    uint256 public counter;\r\n\r\n    function increment() external {\r\n        counter++;\r\n    }\r\n}\r\n\r\ncontract Store {\r\n    uint256 public counter;\r\n\r\n    function increment() external {\r\n        counter++;\r\n    }\r\n}\r\n\r\n/*\r\n * Run this test with the following settings:\r\n *\r\n * [profile.default.invariant]\r\n * depth = 5\r\n * runs = 1\r\n */\r\ncontract FooTest is Test {\r\n    Handler internal handler = new Handler();\r\n    Store internal store = new Store();\r\n\r\n    function setUp() public virtual {\r\n        targetContract(address(handler));\r\n    }\r\n\r\n    function invariant_Foo() external {\r\n        // This has a value of 5\r\n        console2.log(\"handler.counter()\", vm.toString(handler.counter()));\r\n        // This always has a value of 0\r\n        console2.log(\"store.counter()  \", vm.toString(store.counter()));\r\n        store.increment();\r\n        assertTrue(true);\r\n    }\r\n}\r\n\r\n```\r\n\r\n</p>\r\n</details> ",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1556141136/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1606542729",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3005#issuecomment-1606542729",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3005",
    "id": 1606542729,
    "node_id": "IC_kwDOGBlvNc5fweWJ",
    "user": {
      "login": "simplyoptimistic",
      "id": 111120814,
      "node_id": "U_kgDOBp-Rrg",
      "avatar_url": "https://avatars.githubusercontent.com/u/111120814?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/simplyoptimistic",
      "html_url": "https://github.com/simplyoptimistic",
      "followers_url": "https://api.github.com/users/simplyoptimistic/followers",
      "following_url": "https://api.github.com/users/simplyoptimistic/following{/other_user}",
      "gists_url": "https://api.github.com/users/simplyoptimistic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/simplyoptimistic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/simplyoptimistic/subscriptions",
      "organizations_url": "https://api.github.com/users/simplyoptimistic/orgs",
      "repos_url": "https://api.github.com/users/simplyoptimistic/repos",
      "events_url": "https://api.github.com/users/simplyoptimistic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/simplyoptimistic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-06-26T03:36:32Z",
    "updated_at": "2023-06-26T03:36:32Z",
    "author_association": "NONE",
    "body": "+1 I would also like this feature, think it would help a lot with examining state of invariant test runs. \r\n\r\nI think while this feature is not yet implemented, it might be worthwhile updating the documentation to make this behavior explicit as it may confuse developers who might be expecting state to persist in the invariant test contract. ",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1606542729/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
