{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/5305",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5305/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5305/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5305/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/5305",
  "id": 1790242560,
  "node_id": "I_kwDOGBlvNc5qtO8A",
  "number": 5305,
  "title": "`vm.mockCall` with only strict calldata matching",
  "user": {
    "login": "Zer0dot",
    "id": 8608880,
    "node_id": "MDQ6VXNlcjg2MDg4ODA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8608880?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Zer0dot",
    "html_url": "https://github.com/Zer0dot",
    "followers_url": "https://api.github.com/users/Zer0dot/followers",
    "following_url": "https://api.github.com/users/Zer0dot/following{/other_user}",
    "gists_url": "https://api.github.com/users/Zer0dot/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Zer0dot/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Zer0dot/subscriptions",
    "organizations_url": "https://api.github.com/users/Zer0dot/orgs",
    "repos_url": "https://api.github.com/users/Zer0dot/repos",
    "events_url": "https://api.github.com/users/Zer0dot/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Zer0dot/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3593644820,
      "node_id": "LA_kwDOGBlvNc7WMqsU",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-feature",
      "name": "T-feature",
      "color": "BFD4F2",
      "default": false,
      "description": "Type: feature"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2023-07-05T20:22:12Z",
  "updated_at": "2023-07-05T22:50:58Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "### Component\n\nForge\n\n### Describe the feature you would like\n\nAt the moment, [`vm.mockCall()`](https://book.getfoundry.sh/cheatcodes/mock-call?highlight=mockcall#mockcall) checks for loosely matching calldata, without an option to force a strict match.\r\n\r\nThis could lead to certain issues where a call that shouldn't be mocked gets mocked, and calldata that you think is matching actually isn't.\r\n\r\nIt would be great to have either a `vm.mockCallStrict()` or a flag that makes `vm.mockCall()` enforce strict calldata matching.\r\n\r\nWhat do you folks think?\n\n### Additional context\n\n_No response_",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/5305/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5305/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1622638602",
    "html_url": "https://github.com/foundry-rs/foundry/issues/5305#issuecomment-1622638602",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5305",
    "id": 1622638602,
    "node_id": "IC_kwDOGBlvNc5gt4AK",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-07-05T22:50:58Z",
    "updated_at": "2023-07-05T22:50:58Z",
    "author_association": "COLLABORATOR",
    "body": "Can you expand on your use case and give an example? Here's my guess:\r\n\r\n```solidity\r\ncontract A {\r\n  function foo() external {\r\n    if (msg.data.length > 4) {\r\n      // Do something with the extra calldata\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nIn the above example we have a function that takes no args so typically you'd have 4 bytes of calldata (for the function selector). But solidity lets you pass extra data, so sometimes the calldata may be longer than 4 bytes. Currently, we cannot configure `vm.mockCall` to only mock a response when the calldata is exactly 4 bytes, because the extra data version also gets mocked, since the function selectors match.\r\n\r\nIs that correct? ",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1622638602/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
