{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/5407",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5407/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5407/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5407/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/5407",
  "id": 1806538727,
  "node_id": "I_kwDOGBlvNc5rrZfn",
  "number": 5407,
  "title": "Add `randomUint`/`randomInt` cheatcodes",
  "user": {
    "login": "LilaRest",
    "id": 48853371,
    "node_id": "MDQ6VXNlcjQ4ODUzMzcx",
    "avatar_url": "https://avatars.githubusercontent.com/u/48853371?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/LilaRest",
    "html_url": "https://github.com/LilaRest",
    "followers_url": "https://api.github.com/users/LilaRest/followers",
    "following_url": "https://api.github.com/users/LilaRest/following{/other_user}",
    "gists_url": "https://api.github.com/users/LilaRest/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/LilaRest/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/LilaRest/subscriptions",
    "organizations_url": "https://api.github.com/users/LilaRest/orgs",
    "repos_url": "https://api.github.com/users/LilaRest/repos",
    "events_url": "https://api.github.com/users/LilaRest/events{/privacy}",
    "received_events_url": "https://api.github.com/users/LilaRest/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3593644820,
      "node_id": "LA_kwDOGBlvNc7WMqsU",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-feature",
      "name": "T-feature",
      "color": "BFD4F2",
      "default": false,
      "description": "Type: feature"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 12,
  "created_at": "2023-07-16T11:01:29Z",
  "updated_at": "2023-11-14T15:24:17Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "### Component\r\n\r\nForge\r\n\r\n### Describe the feature you would like\r\n\r\nWhile property-based testing (fuzz) should fit for most case of general testing, there are some other cases where a test function would require generating random values dynamically.\r\n\r\nAs an example, here is a function that ensures rewards of a staking contract are properly applied no matter the number of time the APR has changed after an investment, as well as no matter the intervals between each pair of APRs changes.\r\n\r\n```solidity\r\nfunction test_rewardsOf_1(\r\n    uint256 initialInvestment,\r\n    uint256 numberOfAPRChanges\r\n) public {\r\n    // Initially invest random amount of tokens\r\n    deal(investedToken, address(1234), initialInvestment);\r\n    vm.prank(address(1234));\r\n    testedContract.stake(initialInvestment);\r\n\r\n    // Bound numberOfAPRChanges to [0,200]\r\n    numberOfAPRChanges = bound(numberOfAPRChanges, 0, 200);\r\n\r\n    // Create random number of APR change after investment\r\n    for (uint256 i = 0; i < numberOfCheckpoints; i++) {\r\n        testedContract.setAPR(randomNumber(0, type(uint16).max));\r\n\r\n        // Move forward a random amount of time until next APR\r\n        skip(randomNumber(0, type(uint40).max));\r\n    }\r\n\r\n    // ... Verify that rewards are properly calculated\r\n}\r\n```\r\n\r\nIn this example using `randomNumber()` would be better than using static values as it would potentially reveal more complex errors scenarios.\r\n\r\nHowever, I think those random values wouldn't offer the same trust than random values received through functions parameters (as they are simple random values and don't use any shrinking/resolve mechanism).\r\n\r\nMaybe a solution could be to implement shrinking/resolve on those too, but its seems complex.\r\n\r\nSo I'm a bit mixed on this idea, but I'd be happy to read your thoughts on it :) \r\n\r\n### Additional context\r\n\r\n_No response_",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/5407/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5407/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1637054502",
    "html_url": "https://github.com/foundry-rs/foundry/issues/5407#issuecomment-1637054502",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5407",
    "id": 1637054502,
    "node_id": "IC_kwDOGBlvNc5hk3gm",
    "user": {
      "login": "LilaRest",
      "id": 48853371,
      "node_id": "MDQ6VXNlcjQ4ODUzMzcx",
      "avatar_url": "https://avatars.githubusercontent.com/u/48853371?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/LilaRest",
      "html_url": "https://github.com/LilaRest",
      "followers_url": "https://api.github.com/users/LilaRest/followers",
      "following_url": "https://api.github.com/users/LilaRest/following{/other_user}",
      "gists_url": "https://api.github.com/users/LilaRest/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/LilaRest/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/LilaRest/subscriptions",
      "organizations_url": "https://api.github.com/users/LilaRest/orgs",
      "repos_url": "https://api.github.com/users/LilaRest/repos",
      "events_url": "https://api.github.com/users/LilaRest/events{/privacy}",
      "received_events_url": "https://api.github.com/users/LilaRest/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-07-16T11:07:58Z",
    "updated_at": "2023-07-16T11:07:58Z",
    "author_association": "NONE",
    "body": "Note that I've already tried [this library](https://github.com/joejordan/foundry-random) but it slows my tests run by ~200x.\r\n\r\nI also tried to implement my own helper contract relying on ffi to retrieve `$RANDOM` environment variable, but it also slows so much my tests runs and may produce inaccurate results on numbers that don't fit in 64 bits.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1637054502/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1638642765",
    "html_url": "https://github.com/foundry-rs/foundry/issues/5407#issuecomment-1638642765",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5407",
    "id": 1638642765,
    "node_id": "IC_kwDOGBlvNc5hq7RN",
    "user": {
      "login": "Evalir",
      "id": 26014927,
      "node_id": "MDQ6VXNlcjI2MDE0OTI3",
      "avatar_url": "https://avatars.githubusercontent.com/u/26014927?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Evalir",
      "html_url": "https://github.com/Evalir",
      "followers_url": "https://api.github.com/users/Evalir/followers",
      "following_url": "https://api.github.com/users/Evalir/following{/other_user}",
      "gists_url": "https://api.github.com/users/Evalir/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Evalir/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Evalir/subscriptions",
      "organizations_url": "https://api.github.com/users/Evalir/orgs",
      "repos_url": "https://api.github.com/users/Evalir/repos",
      "events_url": "https://api.github.com/users/Evalir/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Evalir/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-07-17T18:17:52Z",
    "updated_at": "2023-07-17T18:17:52Z",
    "author_association": "MEMBER",
    "body": "imho @mds1 this sounds like a good idea to build this in. wdyt?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1638642765/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1639002652",
    "html_url": "https://github.com/foundry-rs/foundry/issues/5407#issuecomment-1639002652",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5407",
    "id": 1639002652,
    "node_id": "IC_kwDOGBlvNc5hsTIc",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-07-17T23:00:50Z",
    "updated_at": "2023-07-17T23:00:50Z",
    "author_association": "COLLABORATOR",
    "body": "> In this example using `randomNumber()` would be better than using static values as it would potentially reveal more complex errors scenarios.\r\n\r\nYou can also achieve this with a new fuzz parameter that you hash in each iteration of the loop:\r\n\r\n```solidity\r\nfunction test_rewardsOf_1(\r\n    uint256 initialInvestment,\r\n    uint256 numberOfAPRChanges,\r\n    uint256 entropy // <-- new param\r\n) public {\r\n    // --- snip ---\r\n    for (uint256 i = 0; i < numberOfCheckpoints; i++) {\r\n        testedContract.setAPR(randomNumber(0, type(uint16).max));\r\n\r\n        // Move forward a random amount of time until next APR\r\n        uint256 randomNumber = uint256(keccak256(entropy, i));\r\n        skip(bound(randomNumber, 0, type(uint40).max));\r\n    }\r\n\r\n    // ... Verify that rewards are properly calculated\r\n}\r\n```\r\n\r\nOr if you don't want to introduce a fuzz param because you want determinism, you can deterministically generate a pseudo-random value:\r\n```solidity\r\nfunction test_rewardsOf_1(\r\n    uint256 initialInvestment,\r\n    uint256 numberOfAPRChanges\r\n) public {\r\n    // --- snip ---\r\n    for (uint256 i = 0; i < numberOfCheckpoints; i++) {\r\n        testedContract.setAPR(randomNumber(0, type(uint16).max));\r\n\r\n        // Move forward a random amount of time until next APR\r\n        uint256 randomNumber = uint256(keccak256(\"entropy\", i));\r\n        skip(bound(randomNumber, 0, type(uint40).max));\r\n    }\r\n\r\n    // ... Verify that rewards are properly calculated\r\n}\r\n```\r\n\r\n> Note that I've already tried [this library](https://github.com/joejordan/foundry-random) but it slows my tests run by ~200x.\r\n> \r\n> I also tried to implement my own helper contract relying on ffi to retrieve `$RANDOM` environment variable, but it also slows so much my tests runs and may produce inaccurate results on numbers that don't fit in 64 bits.\r\n\r\nYea ffi is very slow and I wouldn't recommend using it for this purpose. A much better/more performant approach to use `$RANDOM` would be to just use `vm.envUint(\"RANDOM\")` \r\n\r\n> imho @mds1 this sounds like a good idea to build this in. wdyt?\r\n\r\nThis feature has been requested a few times, but I'm not sure of the use case. There's also some decisions to make before it's implemented, namely around how it should behave, e.g. should it be uniformly random, or deterministic, or act like a fuzz value (e.g. leverage strategies and the dictionary).\r\n\r\n- If purely random, we need to introduce a seed for this cheat (it could just be an input), or we could leverage the existing seed param. This is required for when you need reproducibility. But if you're doing that, what benefit does the cheat add over a fuzz param or `$RANDOM`?\r\n- If deterministic, you can do this already by hashing some block/context properties (like timestamp, etc), or by hashing an arbitrary string. You can continually generate deterministic but pseudo-random values this way with a loop index, or by storing the last result in storage then hashing that to get the next result, like [this](https://github.com/FrankieIsLost/forge-template/blob/cdea5d32c03a4c29030ed851830c55c82300b1ed/src/test/utils/Utilities.sol#L10-L17) (the example is for generating addresses, but same idea)",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1639002652/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1749101387",
    "html_url": "https://github.com/foundry-rs/foundry/issues/5407#issuecomment-1749101387",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5407",
    "id": 1749101387,
    "node_id": "IC_kwDOGBlvNc5oQStL",
    "user": {
      "login": "Tudmotu",
      "id": 506487,
      "node_id": "MDQ6VXNlcjUwNjQ4Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/506487?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Tudmotu",
      "html_url": "https://github.com/Tudmotu",
      "followers_url": "https://api.github.com/users/Tudmotu/followers",
      "following_url": "https://api.github.com/users/Tudmotu/following{/other_user}",
      "gists_url": "https://api.github.com/users/Tudmotu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Tudmotu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Tudmotu/subscriptions",
      "organizations_url": "https://api.github.com/users/Tudmotu/orgs",
      "repos_url": "https://api.github.com/users/Tudmotu/repos",
      "events_url": "https://api.github.com/users/Tudmotu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Tudmotu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-10-05T15:09:37Z",
    "updated_at": "2023-10-05T15:09:37Z",
    "author_association": "CONTRIBUTOR",
    "body": "I would also like this feature.\r\n\r\nUsing `envUint('RANDOM')` is an option, but it would be much nicer and more intuitive IMO if we had `vm.random(uint from, uint to)` which returns an evenly-distributed number in the given range using `rand::thread_rng().gen_range(from..to)`.\r\n\r\n@mattsse and others, WDYT?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1749101387/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1749173615",
    "html_url": "https://github.com/foundry-rs/foundry/issues/5407#issuecomment-1749173615",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5407",
    "id": 1749173615,
    "node_id": "IC_kwDOGBlvNc5oQkVv",
    "user": {
      "login": "mattsse",
      "id": 19890894,
      "node_id": "MDQ6VXNlcjE5ODkwODk0",
      "avatar_url": "https://avatars.githubusercontent.com/u/19890894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mattsse",
      "html_url": "https://github.com/mattsse",
      "followers_url": "https://api.github.com/users/mattsse/followers",
      "following_url": "https://api.github.com/users/mattsse/following{/other_user}",
      "gists_url": "https://api.github.com/users/mattsse/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mattsse/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mattsse/subscriptions",
      "organizations_url": "https://api.github.com/users/mattsse/orgs",
      "repos_url": "https://api.github.com/users/mattsse/repos",
      "events_url": "https://api.github.com/users/mattsse/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mattsse/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-10-05T15:48:59Z",
    "updated_at": "2023-10-05T15:48:59Z",
    "author_association": "MEMBER",
    "body": "I actually think we can easily add this\r\n`randmon()`\r\n`random(from, to)`\r\n\r\nI believe thread_rng is perfectly fine here\r\n\r\nadding this isn't much work or complex and having a simple cheatcode for this could be useful",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1749173615/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1749621802",
    "html_url": "https://github.com/foundry-rs/foundry/issues/5407#issuecomment-1749621802",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5407",
    "id": 1749621802,
    "node_id": "IC_kwDOGBlvNc5oSRwq",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-10-05T20:50:09Z",
    "updated_at": "2023-10-05T20:50:09Z",
    "author_association": "COLLABORATOR",
    "body": "@Tudmotu what is your use case for this that you can't do with a fuzz parameter or `vm.envUint(\"RANDOM\")` + forge-std's `bound` method to get your randomness within a range? I hear this feature requested a lot but honestly haven't heard a compelling use case for a dedicated randomness feature\r\n\r\nMy main hesitation about adding it is (1) I'm not clear on the use case, and (2) it's another thing that needs a seed config option, so consequently needs some way to be reproduced when a fuzz run fails, so reproducing test failures gets a bit more complex",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1749621802/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1749662031",
    "html_url": "https://github.com/foundry-rs/foundry/issues/5407#issuecomment-1749662031",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5407",
    "id": 1749662031,
    "node_id": "IC_kwDOGBlvNc5oSblP",
    "user": {
      "login": "Tudmotu",
      "id": 506487,
      "node_id": "MDQ6VXNlcjUwNjQ4Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/506487?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Tudmotu",
      "html_url": "https://github.com/Tudmotu",
      "followers_url": "https://api.github.com/users/Tudmotu/followers",
      "following_url": "https://api.github.com/users/Tudmotu/following{/other_user}",
      "gists_url": "https://api.github.com/users/Tudmotu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Tudmotu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Tudmotu/subscriptions",
      "organizations_url": "https://api.github.com/users/Tudmotu/orgs",
      "repos_url": "https://api.github.com/users/Tudmotu/repos",
      "events_url": "https://api.github.com/users/Tudmotu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Tudmotu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-10-05T21:20:59Z",
    "updated_at": "2023-10-05T21:20:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "Up till now I've been using `ffi` + python for random.\r\nTesting `envUint('RANDOM')` now, I get an error trying to access `RANDOM`:\r\n```\r\nFailed to get environment variable `RANDOM` as type `uint256`: environment variable not found\r\n```\r\nI'm running Linux. So possibly `RANDOM` is not injected into the Foundry process?\r\n\r\nNot sure my personal use case is applicable to many people:\r\nIn my scripts (not tests) I write temporary files and I need their names to be random so that I don't accidentally overwrite them. ",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1749662031/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1749687309",
    "html_url": "https://github.com/foundry-rs/foundry/issues/5407#issuecomment-1749687309",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5407",
    "id": 1749687309,
    "node_id": "IC_kwDOGBlvNc5oShwN",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-10-05T21:39:21Z",
    "updated_at": "2023-10-05T21:39:21Z",
    "author_association": "COLLABORATOR",
    "body": "Are you running a fuzz test? If so you can just add an extra fuzz parameter, or use `msg.data` as your entropy. Can also use `vm.unixTime` which might help",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1749687309/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1749697427",
    "html_url": "https://github.com/foundry-rs/foundry/issues/5407#issuecomment-1749697427",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5407",
    "id": 1749697427,
    "node_id": "IC_kwDOGBlvNc5oSkOT",
    "user": {
      "login": "Tudmotu",
      "id": 506487,
      "node_id": "MDQ6VXNlcjUwNjQ4Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/506487?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Tudmotu",
      "html_url": "https://github.com/Tudmotu",
      "followers_url": "https://api.github.com/users/Tudmotu/followers",
      "following_url": "https://api.github.com/users/Tudmotu/following{/other_user}",
      "gists_url": "https://api.github.com/users/Tudmotu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Tudmotu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Tudmotu/subscriptions",
      "organizations_url": "https://api.github.com/users/Tudmotu/orgs",
      "repos_url": "https://api.github.com/users/Tudmotu/repos",
      "events_url": "https://api.github.com/users/Tudmotu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Tudmotu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-10-05T21:46:03Z",
    "updated_at": "2023-10-05T21:46:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "Personally I need it in a script, not a test. But again, I have a very specific use-case. The idea of using `unixTime` might actually be good enough for me. Thanks, didn't think about that!\r\n\r\nSo unless someone else has a more common use case, I agree it might not be necessary :slightly_smiling_face: ",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1749697427/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1808856504",
    "html_url": "https://github.com/foundry-rs/foundry/issues/5407#issuecomment-1808856504",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5407",
    "id": 1808856504,
    "node_id": "IC_kwDOGBlvNc5r0PW4",
    "user": {
      "login": "mathewmeconry",
      "id": 4057473,
      "node_id": "MDQ6VXNlcjQwNTc0NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4057473?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mathewmeconry",
      "html_url": "https://github.com/mathewmeconry",
      "followers_url": "https://api.github.com/users/mathewmeconry/followers",
      "following_url": "https://api.github.com/users/mathewmeconry/following{/other_user}",
      "gists_url": "https://api.github.com/users/mathewmeconry/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mathewmeconry/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mathewmeconry/subscriptions",
      "organizations_url": "https://api.github.com/users/mathewmeconry/orgs",
      "repos_url": "https://api.github.com/users/mathewmeconry/repos",
      "events_url": "https://api.github.com/users/mathewmeconry/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mathewmeconry/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-11-13T19:14:40Z",
    "updated_at": "2023-11-13T19:14:40Z",
    "author_association": "NONE",
    "body": "> Up till now I've been using `ffi` + python for random. Testing `envUint('RANDOM')` now, I get an error trying to access `RANDOM`:\r\n> \r\n> ```\r\n> Failed to get environment variable `RANDOM` as type `uint256`: environment variable not found\r\n> ```\r\n> \r\n> I'm running Linux. So possibly `RANDOM` is not injected into the Foundry process?\r\n> \r\n> Not sure my personal use case is applicable to many people: In my scripts (not tests) I write temporary files and I need their names to be random so that I don't accidentally overwrite them.\r\n\r\nthis is because `$RANDOM` is not an env variable in Linux but rather a script injected by shells like bash. This is why it isn't visible with the `env` command.\r\n\r\nI would need this random feature too. I would like to simulate some market transactions.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1808856504/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1809171956",
    "html_url": "https://github.com/foundry-rs/foundry/issues/5407#issuecomment-1809171956",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5407",
    "id": 1809171956,
    "node_id": "IC_kwDOGBlvNc5r1cX0",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-11-13T21:40:29Z",
    "updated_at": "2023-11-13T21:40:29Z",
    "author_association": "COLLABORATOR",
    "body": "Some questions that need to be answered before a `vm.random()` cheat is introduced, namely around how to guarantee users can always reproduce failed tests when the cheat is used:\r\n- Should it be reliant on the calldata, like the [solady method](https://github.com/Vectorized/solady/blob/23cb3cb13ea32bc94d9d136666090b36d0485e1c/test/utils/TestPlus.sol#L65-L119), that way the approach to reproducing failed cases doesn't change? If not, what does the UX look like there to ensure you can always reproduce failures? (Consider that users will want to run both with and without specifying a seed for the rng).\r\n- Should it leverage the same strategies as fuzzer inputs for generating values, or should it use some other distribution? ",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1809171956/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1810448489",
    "html_url": "https://github.com/foundry-rs/foundry/issues/5407#issuecomment-1810448489",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5407",
    "id": 1810448489,
    "node_id": "IC_kwDOGBlvNc5r6UBp",
    "user": {
      "login": "Tudmotu",
      "id": 506487,
      "node_id": "MDQ6VXNlcjUwNjQ4Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/506487?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Tudmotu",
      "html_url": "https://github.com/Tudmotu",
      "followers_url": "https://api.github.com/users/Tudmotu/followers",
      "following_url": "https://api.github.com/users/Tudmotu/following{/other_user}",
      "gists_url": "https://api.github.com/users/Tudmotu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Tudmotu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Tudmotu/subscriptions",
      "organizations_url": "https://api.github.com/users/Tudmotu/orgs",
      "repos_url": "https://api.github.com/users/Tudmotu/repos",
      "events_url": "https://api.github.com/users/Tudmotu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Tudmotu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-11-14T15:24:16Z",
    "updated_at": "2023-11-14T15:24:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "I'll share my extended personal opinion:\r\nI view Forge as something beyond a testing framework. Don't know about any of you, but I use Forge scripts extensively & practically have replaced all my JS scripts with Solidity scripts by now, including stuff like automatically updating our Notion docs whenever we deploy. Forge is to Solidity what Node was to Javascript — and I believe we will start seeing more and more libraries built specifically for Forge (e.g. Surl). Therefore I think it is reasonable to include a cheatcode even if it is not suitable for writing tests, as long as it caters to script & library authors.\r\n\r\nI also think test authors should know what they are doing to some degree. Jest does not prevent me from using `Math.random()`, for example. And there are many other ways in which tests can become flaky.\r\n\r\nThat said, while I don't hold the same view, I do understand your position regarding reproducibility.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1810448489/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
