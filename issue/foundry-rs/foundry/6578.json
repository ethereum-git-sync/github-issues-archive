{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/6578",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/6578/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/6578/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/6578/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/6578",
  "id": 2037132192,
  "node_id": "I_kwDOGBlvNc55bCug",
  "number": 6578,
  "title": "Forge gas reporting is misleading due to obfuscation of transaction overhead",
  "user": {
    "login": "emo-eth",
    "id": 6371847,
    "node_id": "MDQ6VXNlcjYzNzE4NDc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6371847?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/emo-eth",
    "html_url": "https://github.com/emo-eth",
    "followers_url": "https://api.github.com/users/emo-eth/followers",
    "following_url": "https://api.github.com/users/emo-eth/following{/other_user}",
    "gists_url": "https://api.github.com/users/emo-eth/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/emo-eth/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/emo-eth/subscriptions",
    "organizations_url": "https://api.github.com/users/emo-eth/orgs",
    "repos_url": "https://api.github.com/users/emo-eth/repos",
    "events_url": "https://api.github.com/users/emo-eth/events{/privacy}",
    "received_events_url": "https://api.github.com/users/emo-eth/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3334394228,
      "node_id": "MDU6TGFiZWwzMzM0Mzk0MjI4",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-bug",
      "name": "T-bug",
      "color": "d73a4a",
      "default": false,
      "description": "Type: bug"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2023-12-12T07:15:44Z",
  "updated_at": "2023-12-12T07:27:25Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "### Component\n\nForge\n\n### Have you ensured that all of these are up to date?\n\n- [X] Foundry\n- [ ] Foundryup\n\n### What version of Foundry are you on?\n\nforge 0.2.0 (0ae39ea 2023-12-11T00:27:32.487222000Z)\n\n### What command(s) is the bug in?\n\nforge test\n\n### Operating System\n\nmacOS (Apple Silicon)\n\n### Describe the bug\n\nForge incorrectly (or, depending on your point of view, inconsistently) reports gas usage whenever the EVM incurs a gas refund. \r\n\r\nThis is due to the fact that **gas refunds are capped at 1/5 of total transaction gas usage** and credited at the end of the transaction. However, Forge simply subtracts the 21000+calldata fee overhead from the total gas usage (post-refund) when reporting.\r\n\r\nFor complicated tests that incur gas refunds (ie, tests that use a lot of gas compared to the tx overhead), reported numbers should be ~accurate. Simpler tests, however, can see very \"inaccurate\" reported numbers. See the comments in the included examples.\r\n\r\nMy recommendation: Forge should subtract the tx overhead from the `Gas` context **before** calculating the total refund, or else completely rethink how gas is reported. IMHO, using the tx-level gas usage for refund calculations, when Forge tests may contain many logical \"transactions\" is extremely confusing. Quietly including tx-overhead in refund calculations also makes manual gas accounting much more confusing.\r\n\r\n```solidity\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\nimport {Test} from \"forge-std/Test.sol\";\r\n\r\ncontract RefundTest is Test {\r\n    uint256 i;\r\n    // use low-level calls to avoid solc-injected EXTCODESIZE checks\r\n    uint256 constant pauseSelector = 0xd1a5b36f;\r\n    uint256 constant resumeSelector = 0x2bcd50e0;\r\n\r\n    function testNoRefundWithPause() public {\r\n        address VM = VM_ADDRESS;\r\n        assembly {\r\n            mstore(0, pauseSelector)\r\n            pop(staticcall(gas(), VM, 0x1c, 4, 0, 0))\r\n            sstore(i.slot, 5)\r\n            mstore(0, resumeSelector)\r\n            pop(staticcall(gas(), VM, 0x1c, 4, 0, 0))\r\n        }\r\n        burnGas(10000);\r\n        // reported: ~13000 (VM_ADDRESS is not warm, and two calls are made)\r\n    }\r\n\r\n    function testBadRefund() public {\r\n        address VM = VM_ADDRESS;\r\n        assembly {\r\n            mstore(0, pauseSelector)\r\n            pop(staticcall(gas(), VM, 0x1c, 4, 0, 0))\r\n            sstore(i.slot, 5)\r\n            mstore(0, resumeSelector)\r\n            pop(staticcall(gas(), VM, 0x1c, 4, 0, 0))\r\n        }\r\n        burnGas(10000);\r\n        assembly {\r\n            sstore(i.slot, 0)\r\n        }\r\n        // business logic: ~13000\r\n        // tx overhead: ~21000\r\n        // total: ~34000\r\n        // gas refund: 19900 > (34000 / 5 ) ? 34000 / 5 : 19900\r\n        // reported: ~6200 = ~13000 - ~34000 / 5\r\n    }\r\n\r\n    function testNormalRefund() public {\r\n        address VM = VM_ADDRESS;\r\n        assembly {\r\n            pop(staticcall(0, VM, 0, 0, 0, 0))\r\n            sstore(i.slot, 5)\r\n            pop(staticcall(0, VM, 0, 0, 0, 0))\r\n        }\r\n        burnGas(10000);\r\n        assembly {\r\n            sstore(i.slot, 0)\r\n        }\r\n        // business logic: ~35000\r\n        // tx overhead: ~21000\r\n        // total: ~56000\r\n        // gas refund: 19900 > (56000 / 5 ) ? 56000 / 5 : 19900\r\n        // reported: ~23800 = 35000 - (56000) / 5\r\n    }\r\n\r\n    function testNoRefund() public {\r\n        address VM = VM_ADDRESS;\r\n        assembly {\r\n            pop(staticcall(0, VM, 0, 0, 0, 0))\r\n            sstore(i.slot, 5)\r\n            pop(staticcall(0, VM, 0, 0, 0, 0))\r\n        }\r\n        burnGas(10000);\r\n        // reported: ~35000\r\n    }\r\n\r\n    function testOverhead() public {}\r\n\r\n    function burnGas(int256 amount) internal view {\r\n        unchecked {\r\n            uint256 start = gasleft();\r\n            uint256 x;\r\n            while (gasleft() > start - uint256(amount)) {\r\n                x += 1;\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n`foundry.toml`:\r\n```toml\r\n[profile.default]\r\nsrc = 'src'\r\nout = 'out'\r\nlibs = ['lib']\r\noptimizer = true\r\noptimizer_runs = 9_999_999\r\n# via_ir = true\r\nsolc_version = '0.8.22'\r\nbytecode_hash = 'none'\r\nevm_version = 'shanghai'\r\n```",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/6578/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/6578/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1851437216",
    "html_url": "https://github.com/foundry-rs/foundry/issues/6578#issuecomment-1851437216",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/6578",
    "id": 1851437216,
    "node_id": "IC_kwDOGBlvNc5uWrCg",
    "user": {
      "login": "Vectorized",
      "id": 5889274,
      "node_id": "MDQ6VXNlcjU4ODkyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5889274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Vectorized",
      "html_url": "https://github.com/Vectorized",
      "followers_url": "https://api.github.com/users/Vectorized/followers",
      "following_url": "https://api.github.com/users/Vectorized/following{/other_user}",
      "gists_url": "https://api.github.com/users/Vectorized/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Vectorized/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Vectorized/subscriptions",
      "organizations_url": "https://api.github.com/users/Vectorized/orgs",
      "repos_url": "https://api.github.com/users/Vectorized/repos",
      "events_url": "https://api.github.com/users/Vectorized/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Vectorized/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-12-12T07:27:24Z",
    "updated_at": "2023-12-12T07:27:24Z",
    "author_association": "NONE",
    "body": "Suggestion:\r\n\r\n```\r\nvm.startTxGasMetering(optionalAccessList);\r\n\r\nuint txGasUsed = vm.stopTxGasMetering();\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1851437216/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
