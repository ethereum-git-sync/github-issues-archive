{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/2459",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2459/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2459/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2459/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/2459",
  "id": 1315909248,
  "node_id": "I_kwDOGBlvNc5Oby6A",
  "number": 2459,
  "title": "`vm.expectRevert` doesn't work (or documentation is wrong)",
  "user": {
    "login": "duncancmt",
    "id": 1207590,
    "node_id": "MDQ6VXNlcjEyMDc1OTA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1207590?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/duncancmt",
    "html_url": "https://github.com/duncancmt",
    "followers_url": "https://api.github.com/users/duncancmt/followers",
    "following_url": "https://api.github.com/users/duncancmt/following{/other_user}",
    "gists_url": "https://api.github.com/users/duncancmt/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/duncancmt/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/duncancmt/subscriptions",
    "organizations_url": "https://api.github.com/users/duncancmt/orgs",
    "repos_url": "https://api.github.com/users/duncancmt/repos",
    "events_url": "https://api.github.com/users/duncancmt/events{/privacy}",
    "received_events_url": "https://api.github.com/users/duncancmt/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3334394228,
      "node_id": "MDU6TGFiZWwzMzM0Mzk0MjI4",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-bug",
      "name": "T-bug",
      "color": "d73a4a",
      "default": false,
      "description": "Type: bug"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 7,
  "created_at": "2022-07-24T13:33:53Z",
  "updated_at": "2022-07-24T19:43:36Z",
  "closed_at": "2022-07-24T19:10:37Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "### Component\n\nForge\n\n### Have you ensured that all of these are up to date?\n\n- [X] Foundry\n- [X] Foundryup\n\n### What version of Foundry are you on?\n\nforge 0.2.0 (60b1919 2022-07-24T00:07:17.540473656Z)\n\n### What command(s) is the bug in?\n\nforge test\n\n### Operating System\n\nLinux\n\n### Describe the bug\n\nAccording to [the docs](https://book.getfoundry.sh/forge/cheatcodes), writing a test with `vm.expectRevert()` and then a failing call is the correct way to assert failure under a certain condition. However, when I do that, the test always fails with the message of the failing call. I think it's quite likely that I'm doing something wrong here, but the documentation seems pretty clear to me that this is supposed to work.\r\n\r\n```solidity\r\n// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.15;\r\n\r\nimport \"forge-std/Test.sol\";\r\n\r\ncontract Mock {\r\n  function fail() external pure {\r\n    revert(\"fail\");\r\n  }\r\n}\r\n\r\ncontract TestTest is Test {\r\n  Mock internal mock;\r\n\r\n  function setUp() external {\r\n    mock = new Mock();\r\n  }\r\n\r\n  function test() external {\r\n    vm.expectRevert();\r\n    mock.fail();\r\n  }\r\n}\r\n```\r\n\r\n```\r\n[â ˜] Compiling...\r\nNo files changed, compilation skipped\r\n\r\nRunning 1 test for test/TestTest.t.sol:TestTest\r\n[FAIL. Reason: fail] test() (gas: 8576)\r\nTest result: FAILED. 0 passed; 1 failed; finished in 2.50ms\r\n\r\nFailed tests:\r\n[FAIL. Reason: fail] test() (gas: 8576)\r\n\r\nEncountered a total of 1 failing tests, 0 tests succeeded\r\n```\r\n\r\nAdding a `vm.prank` call as in the example changes nothing. Switching to `vm.expectRevert(abi.encodeWithSignature(\"Error(string)\", \"fail\"))` also changes nothing.",
  "closed_by": {
    "login": "onbjerg",
    "id": 8862627,
    "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/onbjerg",
    "html_url": "https://github.com/onbjerg",
    "followers_url": "https://api.github.com/users/onbjerg/followers",
    "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
    "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
    "organizations_url": "https://api.github.com/users/onbjerg/orgs",
    "repos_url": "https://api.github.com/users/onbjerg/repos",
    "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
    "received_events_url": "https://api.github.com/users/onbjerg/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/2459/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2459/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1193321055",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2459#issuecomment-1193321055",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2459",
    "id": 1193321055,
    "node_id": "IC_kwDOGBlvNc5HIKJf",
    "user": {
      "login": "duncancmt",
      "id": 1207590,
      "node_id": "MDQ6VXNlcjEyMDc1OTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1207590?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/duncancmt",
      "html_url": "https://github.com/duncancmt",
      "followers_url": "https://api.github.com/users/duncancmt/followers",
      "following_url": "https://api.github.com/users/duncancmt/following{/other_user}",
      "gists_url": "https://api.github.com/users/duncancmt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/duncancmt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/duncancmt/subscriptions",
      "organizations_url": "https://api.github.com/users/duncancmt/orgs",
      "repos_url": "https://api.github.com/users/duncancmt/repos",
      "events_url": "https://api.github.com/users/duncancmt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/duncancmt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-24T13:42:44Z",
    "updated_at": "2022-07-24T13:42:44Z",
    "author_association": "NONE",
    "body": "Ahh, I see now that `expectRevert(bytes calldata)` is looking for the error string, not the ABI encoded reason. I suggest that this be clarified in the documentation that `expectRevert()` is looking for an empty reason, `expectRevert(bytes4)` is looking for exactly a selector and nothing else, and that the signature be changed to `expectRevert(string calldata)` instead. ",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1193321055/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1193376929",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2459#issuecomment-1193376929",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2459",
    "id": 1193376929,
    "node_id": "IC_kwDOGBlvNc5HIXyh",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-24T19:10:37Z",
    "updated_at": "2022-07-24T19:11:12Z",
    "author_association": "MEMBER",
    "body": "This is already stated in the docs for expectRevert: https://book.getfoundry.sh/cheatcodes/expect-revert\r\n\r\n>There are 3 signatures:\r\n>\r\n>- **Without parameters**: Asserts that the next call reverts **without** a message.\r\n>- **With `bytes4`**: Asserts that the next call reverts with the specified 4 bytes.\r\n>- **With `bytes`**: Asserts that the next call reverts with the specified bytes.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1193376929/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1193378672",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2459#issuecomment-1193378672",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2459",
    "id": 1193378672,
    "node_id": "IC_kwDOGBlvNc5HIYNw",
    "user": {
      "login": "duncancmt",
      "id": 1207590,
      "node_id": "MDQ6VXNlcjEyMDc1OTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1207590?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/duncancmt",
      "html_url": "https://github.com/duncancmt",
      "followers_url": "https://api.github.com/users/duncancmt/followers",
      "following_url": "https://api.github.com/users/duncancmt/following{/other_user}",
      "gists_url": "https://api.github.com/users/duncancmt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/duncancmt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/duncancmt/subscriptions",
      "organizations_url": "https://api.github.com/users/duncancmt/orgs",
      "repos_url": "https://api.github.com/users/duncancmt/repos",
      "events_url": "https://api.github.com/users/duncancmt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/duncancmt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-24T19:21:54Z",
    "updated_at": "2022-07-24T19:21:54Z",
    "author_association": "NONE",
    "body": "Thanks for that. I do think that\r\n\r\n> **With `bytes`:** Asserts that the next call reverts with the specified bytes.\r\n\r\nis misleading because it's discarding the `Error(string)` selector and ABI decoding the string.\r\n\r\nThanks again for answering my question!",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1193378672/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1193378900",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2459#issuecomment-1193378900",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2459",
    "id": 1193378900,
    "node_id": "IC_kwDOGBlvNc5HIYRU",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-24T19:23:16Z",
    "updated_at": "2022-07-24T19:23:16Z",
    "author_association": "MEMBER",
    "body": "I'm not sure I follow, can you expand on that? `vm.expectRevert` works with strings and there is an example on how to do that later down the page",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1193378900/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1193381497",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2459#issuecomment-1193381497",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2459",
    "id": 1193381497,
    "node_id": "IC_kwDOGBlvNc5HIY55",
    "user": {
      "login": "duncancmt",
      "id": 1207590,
      "node_id": "MDQ6VXNlcjEyMDc1OTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1207590?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/duncancmt",
      "html_url": "https://github.com/duncancmt",
      "followers_url": "https://api.github.com/users/duncancmt/followers",
      "following_url": "https://api.github.com/users/duncancmt/following{/other_user}",
      "gists_url": "https://api.github.com/users/duncancmt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/duncancmt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/duncancmt/subscriptions",
      "organizations_url": "https://api.github.com/users/duncancmt/orgs",
      "repos_url": "https://api.github.com/users/duncancmt/repos",
      "events_url": "https://api.github.com/users/duncancmt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/duncancmt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-24T19:38:39Z",
    "updated_at": "2022-07-24T19:39:10Z",
    "author_association": "NONE",
    "body": "The doc states that to catch a custom error with arguments, one should:\r\n```solidity\r\nvm.expectRevert(\r\n    abi.encodeWithSelector(MyContract.CustomError.selector, 1, 2)\r\n);\r\n```\r\n\r\nHowever, it seems that selector 0x08c379a0 (`Error(string)`) is special-cased because the following fails:\r\n\r\n```solidity\r\n// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.15;\r\n\r\nimport \"forge-std/Test.sol\";\r\n\r\ncontract Mock {\r\n  function fail() external pure {\r\n    bytes memory reason = abi.encodeWithSignature(\"Error(string)\", string(\"fail\"));\r\n    assembly (\"memory-safe\") {\r\n      revert(add(0x20, reason), mload(reason))\r\n    }\r\n    // This could just as easily be `revert(\"fail\");`, but I wrote it out using\r\n    // `abi.encodeWithSignature` to demonstrate that even though the\r\n    // `vm.expectRevert` argument is identical, it is not caught.\r\n  }\r\n}\r\n\r\ncontract TestTest is Test {\r\n  Mock internal mock;\r\n\r\n  function setUp() external {\r\n    mock = new Mock();\r\n  }\r\n\r\n  function test() external {\r\n    vm.expectRevert(abi.encodeWithSignature(\"Error(string)\", string(\"fail\")));\r\n    mock.fail();\r\n  }\r\n}\r\n```\r\nBut if that signature is anything other than `Error(string)`, the test passes. Try substituting `\"AnotherError(string)\"` for `\"Error(string)\"` in both places to see what I mean.\r\n\r\n---\r\n\r\nIt seems logical that if\r\n```solidity\r\nvm.expectRevert(abi.encodeWithSignature(\"AnotherError(string)\", \"bar\"));\r\n```\r\nworks, then\r\n```solidity\r\nvm.expectRevert(abi.encodeWithSignature(\"Error(string)\", \"bar\"));\r\n```\r\nwould also work (assuming that the correct error is subsequently thrown). However, because 0x08c379a0 is special-cased, `Error(string)` cannot be caught the way you'd expect.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1193381497/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1193381841",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2459#issuecomment-1193381841",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2459",
    "id": 1193381841,
    "node_id": "IC_kwDOGBlvNc5HIY_R",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-24T19:40:53Z",
    "updated_at": "2022-07-24T19:41:38Z",
    "author_association": "MEMBER",
    "body": "Oh right, but that is not really a custom error if it's a Solidity built-in :smile: It's mostly DX-related IIRC (converting to bytes vs doing `abi.encodeWithSignature(\"Error(string)\", \"bar\")` every time)",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1193381841/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1193382286",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2459#issuecomment-1193382286",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2459",
    "id": 1193382286,
    "node_id": "IC_kwDOGBlvNc5HIZGO",
    "user": {
      "login": "duncancmt",
      "id": 1207590,
      "node_id": "MDQ6VXNlcjEyMDc1OTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1207590?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/duncancmt",
      "html_url": "https://github.com/duncancmt",
      "followers_url": "https://api.github.com/users/duncancmt/followers",
      "following_url": "https://api.github.com/users/duncancmt/following{/other_user}",
      "gists_url": "https://api.github.com/users/duncancmt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/duncancmt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/duncancmt/subscriptions",
      "organizations_url": "https://api.github.com/users/duncancmt/orgs",
      "repos_url": "https://api.github.com/users/duncancmt/repos",
      "events_url": "https://api.github.com/users/duncancmt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/duncancmt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-24T19:43:36Z",
    "updated_at": "2022-07-24T19:43:36Z",
    "author_association": "NONE",
    "body": "Yeah, I'm not saying that the behavior is wrong, just that it's surprising if you know how revert reasons are encoded. Likewise, Solidity's inability to catch custom errors or handle invalidly encoded data with `try {} catch` is surprising, so maybe it's just a bad time all around :P",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1193382286/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
