{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/5988",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5988/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5988/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5988/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/5988",
  "id": 1928320592,
  "node_id": "I_kwDOGBlvNc5y79ZQ",
  "number": 5988,
  "title": "feat(Forge): Add flag to `vm.ffi` indicating whether to hex-decode result",
  "user": {
    "login": "Tudmotu",
    "id": 506487,
    "node_id": "MDQ6VXNlcjUwNjQ4Nw==",
    "avatar_url": "https://avatars.githubusercontent.com/u/506487?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Tudmotu",
    "html_url": "https://github.com/Tudmotu",
    "followers_url": "https://api.github.com/users/Tudmotu/followers",
    "following_url": "https://api.github.com/users/Tudmotu/following{/other_user}",
    "gists_url": "https://api.github.com/users/Tudmotu/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Tudmotu/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Tudmotu/subscriptions",
    "organizations_url": "https://api.github.com/users/Tudmotu/orgs",
    "repos_url": "https://api.github.com/users/Tudmotu/repos",
    "events_url": "https://api.github.com/users/Tudmotu/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Tudmotu/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3593644820,
      "node_id": "LA_kwDOGBlvNc7WMqsU",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-feature",
      "name": "T-feature",
      "color": "BFD4F2",
      "default": false,
      "description": "Type: feature"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 5,
  "created_at": "2023-10-05T13:38:48Z",
  "updated_at": "2023-10-19T08:33:53Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "### Component\r\n\r\nForge\r\n\r\n### Describe the feature you would like\r\n\r\nToday `vm.ffi` automatically tries to decode output as hex.\r\n\r\nThis can cause some very sneaky bugs, such as with commands that output decimal numbers:\r\n- If the number is even-length, it will be interpreted as hex bytes\r\n- If it's odd-length, it will be converted into ASCII\r\n\r\nPersonally I've encountered this issue many times and while sometimes you can work around this, you have to be aware it's happening which is very difficult to figure out.\r\n\r\nThe change I propose is to add an overload of `vm.ffi` that accepts a `bool` argument indicating whether forge should try to auto-decode into hex bytes.\r\n\r\nI've made the change on my local fork and made sure it works for my use case.\r\n\r\nIf this is a desired feature, I will happily open a PR implementing it.\r\n\r\nThe gist of the change:\r\n```diff\r\n-fn ffi(state: &Cheatcodes, args: &[String]) -> Result {\r\n+fn ffi(state: &Cheatcodes, args: &[String], autohex: bool) -> Result {\r\n     if args.is_empty() || args[0].is_empty() {\r\n         bail!(\"Can't execute empty command\");\r\n     }\r\n@@ -91,13 +91,22 @@ fn ffi(state: &Cheatcodes, args: &[String]) -> Result {\r\n \r\n     let output = String::from_utf8(output.stdout)?;\r\n     let trimmed = output.trim();\r\n-    if let Ok(hex) = hex::decode(trimmed) {\r\n-        Ok(abi::encode(&[Token::Bytes(hex)]).into())\r\n-    } else {\r\n+    if autohex {\r\n+        if let Ok(hex) = hex::decode(trimmed) {\r\n+            Ok(abi::encode(&[Token::Bytes(hex)]).into())\r\n+        } else {\r\n+            Ok(trimmed.encode().into())\r\n+        }\r\n+    }\r\n+    else {\r\n         Ok(trimmed.encode().into())\r\n     }\r\n }\r\n \r\n+fn ffi_autohex(state: &Cheatcodes, args: &[String]) -> Result {\r\n+    ffi(state, args, true)\r\n+}\r\n+\r\n```",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/5988/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5988/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1749009771",
    "html_url": "https://github.com/foundry-rs/foundry/issues/5988#issuecomment-1749009771",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5988",
    "id": 1749009771,
    "node_id": "IC_kwDOGBlvNc5oP8Vr",
    "user": {
      "login": "mattsse",
      "id": 19890894,
      "node_id": "MDQ6VXNlcjE5ODkwODk0",
      "avatar_url": "https://avatars.githubusercontent.com/u/19890894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mattsse",
      "html_url": "https://github.com/mattsse",
      "followers_url": "https://api.github.com/users/mattsse/followers",
      "following_url": "https://api.github.com/users/mattsse/following{/other_user}",
      "gists_url": "https://api.github.com/users/mattsse/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mattsse/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mattsse/subscriptions",
      "organizations_url": "https://api.github.com/users/mattsse/orgs",
      "repos_url": "https://api.github.com/users/mattsse/repos",
      "events_url": "https://api.github.com/users/mattsse/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mattsse/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-10-05T14:21:08Z",
    "updated_at": "2023-10-05T14:21:08Z",
    "author_association": "MEMBER",
    "body": "wdyt @mds1 ?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1749009771/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1751443469",
    "html_url": "https://github.com/foundry-rs/foundry/issues/5988#issuecomment-1751443469",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5988",
    "id": 1751443469,
    "node_id": "IC_kwDOGBlvNc5oZOgN",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-10-06T21:56:13Z",
    "updated_at": "2023-10-06T21:56:13Z",
    "author_association": "COLLABORATOR",
    "body": "> This can cause some very sneaky bugs, such as with commands that output decimal numbers:\r\n> \r\n> - If the number is even-length, it will be interpreted as hex bytes\r\n> - If it's odd-length, it will be converted into ASCII\r\n\r\nCan you clarify what you mean here? Would appreciate a code snippet I can use to reproduce. It's been a while since I've used ffi so I'm a bit rusty on its behavior. \r\n\r\nI'm also unclear on what is returned back to solidity when you'd have autohex=false. All FFI cheats currently return bytes, with autohex=false what is the bytes representation of an ffi command that prints `1.23`?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1751443469/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1751490254",
    "html_url": "https://github.com/foundry-rs/foundry/issues/5988#issuecomment-1751490254",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5988",
    "id": 1751490254,
    "node_id": "IC_kwDOGBlvNc5oZZ7O",
    "user": {
      "login": "Tudmotu",
      "id": 506487,
      "node_id": "MDQ6VXNlcjUwNjQ4Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/506487?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Tudmotu",
      "html_url": "https://github.com/Tudmotu",
      "followers_url": "https://api.github.com/users/Tudmotu/followers",
      "following_url": "https://api.github.com/users/Tudmotu/following{/other_user}",
      "gists_url": "https://api.github.com/users/Tudmotu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Tudmotu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Tudmotu/subscriptions",
      "organizations_url": "https://api.github.com/users/Tudmotu/orgs",
      "repos_url": "https://api.github.com/users/Tudmotu/repos",
      "events_url": "https://api.github.com/users/Tudmotu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Tudmotu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-10-06T23:12:42Z",
    "updated_at": "2023-10-06T23:19:11Z",
    "author_association": "CONTRIBUTOR",
    "body": "@mds1 consider the following command:\r\n```console\r\n$ python -c 'import random; print(random.randomint(0, 200))'\r\n```\r\nThis will print a random number between 0 and 200.\r\nIt can be 1 character (0-9), 2 characters (10-99) or 3 characters (100-199).\r\n\r\nIf it returns a 2-character number, e.g. 42, `ffi` would decode it as a hex value, returning `hex\"42\"` as a result.\r\nIf it returns a 1/3-character number, e.g. 123, `ffi` would fail to decode it as a hex value, and will return `hex\"313233\"`, which is ASCII for \"123\". The decoding fails because a hex number has to have an even number of nibbles.\r\n\r\nNow if you try to `string(...)` it, you will get two very different results:\r\n1. `string(hex\"42\") == \"B\"`\r\n2. `string(hex\"313233\") == \"123\"`\r\n\r\nHere is a simple example test:\r\n```solidity\r\npragma solidity ^0.8.13;\r\n\r\nimport { Test, console2 } from 'forge-std/Test.sol';\r\n\r\ncontract FfiTest is Test {\r\n    function test_ffi () public {\r\n        string[] memory args = new string[](2);\r\n        args[0] = 'echo';\r\n        args[1] = '42';\r\n        bytes memory res1 = vm.ffi(args);\r\n        args[1] = '123';\r\n        bytes memory res2 = vm.ffi(args);\r\n\r\n        console2.log(string(res1));\r\n        console2.log(string(res2));\r\n    }\r\n}\r\n``` \r\n\r\nThe results:\r\n![image](https://github.com/foundry-rs/foundry/assets/506487/5d234611-b01c-48bc-b495-fce3beefdb25)\r\n\r\n\r\nThe `autohex` flag I added simply skips the decoding attempt altogether and returns an ASCII string (encoded as `bytes`).\r\n\r\nEdit: to make it clear why this is problematic, consider that if you want to use the return value from the `python -c` command as `uint`, you'd try to call `vm.parseUint(string(vm.ffi(...)))`. But this would fail randomly (e.g. \"B\" will cause a revert).",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1751490254/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1769590798",
    "html_url": "https://github.com/foundry-rs/foundry/issues/5988#issuecomment-1769590798",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5988",
    "id": 1769590798,
    "node_id": "IC_kwDOGBlvNc5pedAO",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-10-18T23:49:15Z",
    "updated_at": "2023-10-18T23:49:15Z",
    "author_association": "COLLABORATOR",
    "body": "This makes sense and is a great example, thanks.\r\n\r\nA brief counterargument here is that, given the documented behavior of `vm.ffi`, your original command should actually have been wrapped in `cast --to-hex`. Such as:\r\n\r\n```\r\ncast --to-hex $(python -c 'import random; print(random.randint(0, 200))')\r\n```\r\n\r\nSo your proposal here is:\r\n- When `autohex` is true, which is the default, maintain existing [behavior](https://book.getfoundry.sh/cheatcodes/ffi#ffi) of \"By default the ffi cheatcode assumes the output of the command is a hex encoded value (e.g. a hex string of an ABI encoded value). If hex decoding fails, it will return the output as UTF8 bytes that you can cast to a string.\"\r\n- When `autohex` is false, return the output as UTF8 bytes that you can cast to a string\r\n\r\nIs that correct? \r\n\r\nMy hesitation here is that `autohex` is too specific to this use case. I think if we are going to try improving the ffi UX, a better way might be to tell forge the expected output type to remove ambiguity altogther\r\n- `vm.ffiUint` is what you'd use because you're expecting a single uint to be returned\r\n- `vm.ffiString` would be used if you're expecting a string\r\n- `vm.ffiBytes` would match the current behavior, but would NOT return output as UTF8 bytes if hex decoding fails\r\n- etc. for all solidity types\r\n\r\nThis would be analogous to how JSON parsing works: `vm.parseJson` tries to infer the type where as `vm.parseJsonUint`, `vm.parseJsonString`, etc. all try decoding as the specified type and are stricter and safer",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1769590798/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1770326218",
    "html_url": "https://github.com/foundry-rs/foundry/issues/5988#issuecomment-1770326218",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5988",
    "id": 1770326218,
    "node_id": "IC_kwDOGBlvNc5phQjK",
    "user": {
      "login": "Tudmotu",
      "id": 506487,
      "node_id": "MDQ6VXNlcjUwNjQ4Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/506487?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Tudmotu",
      "html_url": "https://github.com/Tudmotu",
      "followers_url": "https://api.github.com/users/Tudmotu/followers",
      "following_url": "https://api.github.com/users/Tudmotu/following{/other_user}",
      "gists_url": "https://api.github.com/users/Tudmotu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Tudmotu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Tudmotu/subscriptions",
      "organizations_url": "https://api.github.com/users/Tudmotu/orgs",
      "repos_url": "https://api.github.com/users/Tudmotu/repos",
      "events_url": "https://api.github.com/users/Tudmotu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Tudmotu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-10-19T08:33:53Z",
    "updated_at": "2023-10-19T08:33:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think your suggestion makes sense and would indeed be better :slightly_smiling_face: ",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1770326218/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
