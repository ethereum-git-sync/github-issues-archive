{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/3788",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3788/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3788/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3788/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/3788",
  "id": 1468202525,
  "node_id": "I_kwDOGBlvNc5Xgv4d",
  "number": 3788,
  "title": "Feature request: chaos-anvil",
  "user": {
    "login": "prestwich",
    "id": 10149425,
    "node_id": "MDQ6VXNlcjEwMTQ5NDI1",
    "avatar_url": "https://avatars.githubusercontent.com/u/10149425?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/prestwich",
    "html_url": "https://github.com/prestwich",
    "followers_url": "https://api.github.com/users/prestwich/followers",
    "following_url": "https://api.github.com/users/prestwich/following{/other_user}",
    "gists_url": "https://api.github.com/users/prestwich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/prestwich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/prestwich/subscriptions",
    "organizations_url": "https://api.github.com/users/prestwich/orgs",
    "repos_url": "https://api.github.com/users/prestwich/repos",
    "events_url": "https://api.github.com/users/prestwich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/prestwich/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3593644820,
      "node_id": "LA_kwDOGBlvNc7WMqsU",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-feature",
      "name": "T-feature",
      "color": "BFD4F2",
      "default": false,
      "description": "Type: feature"
    },
    {
      "id": 4077188949,
      "node_id": "LA_kwDOGBlvNc7zBPdV",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/C-anvil",
      "name": "C-anvil",
      "color": "5319E7",
      "default": false,
      "description": "Command: anvil"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2022-11-29T14:53:03Z",
  "updated_at": "2022-11-29T17:43:16Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "### Component\n\nAnvil\n\n### Describe the feature you would like\n\n## Description\r\n\r\nAdd chaos modes to `anvil` to better simulate real network conditions.\r\n\r\n## Motivation\r\n\r\nRPC issues are common causes of bugs in foundry, script execution, and off-chain actors. Because mainnet nodes are consistently less reliable than testnet nodes and simulation nodes, it is difficult to test resilience to RPC issues in an application before production deployment\r\n\r\nTo support stress testing libs, applications, etc, we should add chaos features to anvil, to simulate faulty or weird behavior of mainnet RPC nodes\r\n\r\n## Details\r\n\r\nA `--chaos` flag for anvil that takes the following instructions each of which enables a specific feature:\r\n\r\n- `tx` - `getTransaction` may not fail return a known transaction\r\n- `send` - txns broadcast do not always confirm immediately. They may confirm after a delay (which should not block RPC), or not at all.\r\n- `getLog` - events are sometimes randomly deleted from `eth_getLogs` request responses\r\n- `streamLog` - events are sometimes randomly dropped from log streams\r\n\r\nExample invocation\r\n```anvil --chaos tx,send,getLog```\r\n\r\nBonus points if we can configure frequency at which each of these events occur :)\n\n### Additional context\n\n_No response_",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/3788/reactions",
    "total_count": 2,
    "+1": 0,
    "-1": 0,
    "laugh": 1,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 1,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3788/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1330776294",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3788#issuecomment-1330776294",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3788",
    "id": 1330776294,
    "node_id": "IC_kwDOGBlvNc5PUgjm",
    "user": {
      "login": "gakonst",
      "id": 17802178,
      "node_id": "MDQ6VXNlcjE3ODAyMTc4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17802178?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gakonst",
      "html_url": "https://github.com/gakonst",
      "followers_url": "https://api.github.com/users/gakonst/followers",
      "following_url": "https://api.github.com/users/gakonst/following{/other_user}",
      "gists_url": "https://api.github.com/users/gakonst/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gakonst/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gakonst/subscriptions",
      "organizations_url": "https://api.github.com/users/gakonst/orgs",
      "repos_url": "https://api.github.com/users/gakonst/repos",
      "events_url": "https://api.github.com/users/gakonst/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gakonst/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-29T14:56:03Z",
    "updated_at": "2022-11-29T14:56:03Z",
    "author_association": "MEMBER",
    "body": "@mattsse this would be really sick. fault injection effectively. it's possible we could add this feature cleanly by implementing it as a wrapper around our current anvil axum api? that would be minimally invasive while letting us Config everything that the user sees. \n\nI wonder if a generalized version of this is a proxy queueimplementation that sits in front of any node?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1330776294/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1330826464",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3788#issuecomment-1330826464",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3788",
    "id": 1330826464,
    "node_id": "IC_kwDOGBlvNc5PUszg",
    "user": {
      "login": "mattsse",
      "id": 19890894,
      "node_id": "MDQ6VXNlcjE5ODkwODk0",
      "avatar_url": "https://avatars.githubusercontent.com/u/19890894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mattsse",
      "html_url": "https://github.com/mattsse",
      "followers_url": "https://api.github.com/users/mattsse/followers",
      "following_url": "https://api.github.com/users/mattsse/following{/other_user}",
      "gists_url": "https://api.github.com/users/mattsse/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mattsse/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mattsse/subscriptions",
      "organizations_url": "https://api.github.com/users/mattsse/orgs",
      "repos_url": "https://api.github.com/users/mattsse/repos",
      "events_url": "https://api.github.com/users/mattsse/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mattsse/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-29T15:28:04Z",
    "updated_at": "2022-11-29T15:28:04Z",
    "author_association": "MEMBER",
    "body": "ye, we could easily intercept this here:\r\n\r\nhttps://github.com/foundry-rs/foundry/blob/07dccfd6ebac583ccd63bb818bf27e29b2a4005f/anvil/src/eth/api.rs#L138\r\n\r\nwith something like:\r\n\r\n```rust\r\nfn intercept(&self, req: EthRequest) -> Result<EthRequest, ResponseResult>;\r\n\r\n```\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1330826464/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
