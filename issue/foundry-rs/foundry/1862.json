{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/1862",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1862/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1862/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1862/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/1862",
  "id": 1263506944,
  "node_id": "I_kwDOGBlvNc5LT5YA",
  "number": 1862,
  "title": "getting missing implementation error in contract",
  "user": {
    "login": "SamShakespeare",
    "id": 85254282,
    "node_id": "MDQ6VXNlcjg1MjU0Mjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/85254282?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/SamShakespeare",
    "html_url": "https://github.com/SamShakespeare",
    "followers_url": "https://api.github.com/users/SamShakespeare/followers",
    "following_url": "https://api.github.com/users/SamShakespeare/following{/other_user}",
    "gists_url": "https://api.github.com/users/SamShakespeare/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/SamShakespeare/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/SamShakespeare/subscriptions",
    "organizations_url": "https://api.github.com/users/SamShakespeare/orgs",
    "repos_url": "https://api.github.com/users/SamShakespeare/repos",
    "events_url": "https://api.github.com/users/SamShakespeare/events{/privacy}",
    "received_events_url": "https://api.github.com/users/SamShakespeare/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3334394228,
      "node_id": "MDU6TGFiZWwzMzM0Mzk0MjI4",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-bug",
      "name": "T-bug",
      "color": "d73a4a",
      "default": false,
      "description": "Type: bug"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 15,
  "created_at": "2022-06-07T15:47:39Z",
  "updated_at": "2022-06-07T17:09:46Z",
  "closed_at": "2022-06-07T17:09:46Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "### Component\n\nForge\n\n### Have you ensured that all of these are up to date?\n\n- [X] Foundry\n- [X] Foundryup\n\n### What version of Foundry are you on?\n\nforge 0.2.0 (25241a6 2022-06-07T14:52:47.6081639Z)\n\n### What command(s) is the bug in?\n\nforge test\n\n### Operating System\n\n_No response_\n\n### Describe the bug\n\ngetting missing implementaion error, but all implementations are included in main contract\r\n![image](https://user-images.githubusercontent.com/85254282/172423980-797045af-6e8d-4f7c-a6b3-b79d1afe8bf2.png)\r\nhere is th contract implementation:\r\n![image](https://user-images.githubusercontent.com/85254282/172424226-f2e17d35-8b5a-4ae1-974a-e917f7e1340f.png)\r\n\r\nthe return variable ttlFYakuza is a private uint256\r\n\r\nany help on why i would be getting this error? it does not give me an error on remix, so confused. thank you",
  "closed_by": {
    "login": "SamShakespeare",
    "id": 85254282,
    "node_id": "MDQ6VXNlcjg1MjU0Mjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/85254282?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/SamShakespeare",
    "html_url": "https://github.com/SamShakespeare",
    "followers_url": "https://api.github.com/users/SamShakespeare/followers",
    "following_url": "https://api.github.com/users/SamShakespeare/following{/other_user}",
    "gists_url": "https://api.github.com/users/SamShakespeare/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/SamShakespeare/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/SamShakespeare/subscriptions",
    "organizations_url": "https://api.github.com/users/SamShakespeare/orgs",
    "repos_url": "https://api.github.com/users/SamShakespeare/repos",
    "events_url": "https://api.github.com/users/SamShakespeare/events{/privacy}",
    "received_events_url": "https://api.github.com/users/SamShakespeare/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/1862/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1862/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1148852629",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1862#issuecomment-1148852629",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1862",
    "id": 1148852629,
    "node_id": "IC_kwDOGBlvNc5EehmV",
    "user": {
      "login": "SamShakespeare",
      "id": 85254282,
      "node_id": "MDQ6VXNlcjg1MjU0Mjgy",
      "avatar_url": "https://avatars.githubusercontent.com/u/85254282?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SamShakespeare",
      "html_url": "https://github.com/SamShakespeare",
      "followers_url": "https://api.github.com/users/SamShakespeare/followers",
      "following_url": "https://api.github.com/users/SamShakespeare/following{/other_user}",
      "gists_url": "https://api.github.com/users/SamShakespeare/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SamShakespeare/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SamShakespeare/subscriptions",
      "organizations_url": "https://api.github.com/users/SamShakespeare/orgs",
      "repos_url": "https://api.github.com/users/SamShakespeare/repos",
      "events_url": "https://api.github.com/users/SamShakespeare/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SamShakespeare/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-07T15:49:56Z",
    "updated_at": "2022-06-07T15:49:56Z",
    "author_association": "NONE",
    "body": "also interface already contains many function signatures and and those are working fine\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1148852629/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1148861266",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1862#issuecomment-1148861266",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1862",
    "id": 1148861266,
    "node_id": "IC_kwDOGBlvNc5EejtS",
    "user": {
      "login": "mattsse",
      "id": 19890894,
      "node_id": "MDQ6VXNlcjE5ODkwODk0",
      "avatar_url": "https://avatars.githubusercontent.com/u/19890894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mattsse",
      "html_url": "https://github.com/mattsse",
      "followers_url": "https://api.github.com/users/mattsse/followers",
      "following_url": "https://api.github.com/users/mattsse/following{/other_user}",
      "gists_url": "https://api.github.com/users/mattsse/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mattsse/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mattsse/subscriptions",
      "organizations_url": "https://api.github.com/users/mattsse/orgs",
      "repos_url": "https://api.github.com/users/mattsse/repos",
      "events_url": "https://api.github.com/users/mattsse/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mattsse/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-07T15:57:39Z",
    "updated_at": "2022-06-07T15:57:39Z",
    "author_association": "MEMBER",
    "body": "hmm\r\n\r\ncan you provide a minimal example, like the UGNFT contract, and the interface with the function? so we can investigate this",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1148861266/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1148878346",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1862#issuecomment-1148878346",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1862",
    "id": 1148878346,
    "node_id": "IC_kwDOGBlvNc5Een4K",
    "user": {
      "login": "SamShakespeare",
      "id": 85254282,
      "node_id": "MDQ6VXNlcjg1MjU0Mjgy",
      "avatar_url": "https://avatars.githubusercontent.com/u/85254282?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SamShakespeare",
      "html_url": "https://github.com/SamShakespeare",
      "followers_url": "https://api.github.com/users/SamShakespeare/followers",
      "following_url": "https://api.github.com/users/SamShakespeare/following{/other_user}",
      "gists_url": "https://api.github.com/users/SamShakespeare/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SamShakespeare/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SamShakespeare/subscriptions",
      "organizations_url": "https://api.github.com/users/SamShakespeare/orgs",
      "repos_url": "https://api.github.com/users/SamShakespeare/repos",
      "events_url": "https://api.github.com/users/SamShakespeare/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SamShakespeare/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-07T16:12:34Z",
    "updated_at": "2022-06-07T16:12:34Z",
    "author_association": "NONE",
    "body": "interface:\r\n![image](https://user-images.githubusercontent.com/85254282/172430177-7d13e2b3-9dd1-4e18-ab8d-d3bd60b67730.png)\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1148878346/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1148879350",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1862#issuecomment-1148879350",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1862",
    "id": 1148879350,
    "node_id": "IC_kwDOGBlvNc5EeoH2",
    "user": {
      "login": "mattsse",
      "id": 19890894,
      "node_id": "MDQ6VXNlcjE5ODkwODk0",
      "avatar_url": "https://avatars.githubusercontent.com/u/19890894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mattsse",
      "html_url": "https://github.com/mattsse",
      "followers_url": "https://api.github.com/users/mattsse/followers",
      "following_url": "https://api.github.com/users/mattsse/following{/other_user}",
      "gists_url": "https://api.github.com/users/mattsse/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mattsse/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mattsse/subscriptions",
      "organizations_url": "https://api.github.com/users/mattsse/orgs",
      "repos_url": "https://api.github.com/users/mattsse/repos",
      "events_url": "https://api.github.com/users/mattsse/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mattsse/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-07T16:13:31Z",
    "updated_at": "2022-06-07T16:13:31Z",
    "author_association": "MEMBER",
    "body": "It would be helpful if I didn't have to type it from the picture lol",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1148879350/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1148879683",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1862#issuecomment-1148879683",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1862",
    "id": 1148879683,
    "node_id": "IC_kwDOGBlvNc5EeoND",
    "user": {
      "login": "SamShakespeare",
      "id": 85254282,
      "node_id": "MDQ6VXNlcjg1MjU0Mjgy",
      "avatar_url": "https://avatars.githubusercontent.com/u/85254282?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SamShakespeare",
      "html_url": "https://github.com/SamShakespeare",
      "followers_url": "https://api.github.com/users/SamShakespeare/followers",
      "following_url": "https://api.github.com/users/SamShakespeare/following{/other_user}",
      "gists_url": "https://api.github.com/users/SamShakespeare/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SamShakespeare/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SamShakespeare/subscriptions",
      "organizations_url": "https://api.github.com/users/SamShakespeare/orgs",
      "repos_url": "https://api.github.com/users/SamShakespeare/repos",
      "events_url": "https://api.github.com/users/SamShakespeare/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SamShakespeare/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-07T16:13:51Z",
    "updated_at": "2022-06-07T16:13:51Z",
    "author_association": "NONE",
    "body": "i know lol it wouldnt let me upload .sol file\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1148879683/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1148879868",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1862#issuecomment-1148879868",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1862",
    "id": 1148879868,
    "node_id": "IC_kwDOGBlvNc5EeoP8",
    "user": {
      "login": "SamShakespeare",
      "id": 85254282,
      "node_id": "MDQ6VXNlcjg1MjU0Mjgy",
      "avatar_url": "https://avatars.githubusercontent.com/u/85254282?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SamShakespeare",
      "html_url": "https://github.com/SamShakespeare",
      "followers_url": "https://api.github.com/users/SamShakespeare/followers",
      "following_url": "https://api.github.com/users/SamShakespeare/following{/other_user}",
      "gists_url": "https://api.github.com/users/SamShakespeare/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SamShakespeare/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SamShakespeare/subscriptions",
      "organizations_url": "https://api.github.com/users/SamShakespeare/orgs",
      "repos_url": "https://api.github.com/users/SamShakespeare/repos",
      "events_url": "https://api.github.com/users/SamShakespeare/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SamShakespeare/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-07T16:14:01Z",
    "updated_at": "2022-06-07T16:14:01Z",
    "author_association": "NONE",
    "body": "ill send as .txt",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1148879868/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1148880947",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1862#issuecomment-1148880947",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1862",
    "id": 1148880947,
    "node_id": "IC_kwDOGBlvNc5Eeogz",
    "user": {
      "login": "SamShakespeare",
      "id": 85254282,
      "node_id": "MDQ6VXNlcjg1MjU0Mjgy",
      "avatar_url": "https://avatars.githubusercontent.com/u/85254282?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SamShakespeare",
      "html_url": "https://github.com/SamShakespeare",
      "followers_url": "https://api.github.com/users/SamShakespeare/followers",
      "following_url": "https://api.github.com/users/SamShakespeare/following{/other_user}",
      "gists_url": "https://api.github.com/users/SamShakespeare/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SamShakespeare/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SamShakespeare/subscriptions",
      "organizations_url": "https://api.github.com/users/SamShakespeare/orgs",
      "repos_url": "https://api.github.com/users/SamShakespeare/repos",
      "events_url": "https://api.github.com/users/SamShakespeare/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SamShakespeare/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-07T16:15:06Z",
    "updated_at": "2022-06-07T16:15:06Z",
    "author_association": "NONE",
    "body": " // SPDX-License-Identifier: Apache-2.0\r\npragma solidity 0.8.13;\r\n\r\ninterface IUGNFTs {\r\n \r\n    struct FighterYakuza {\r\n        bool isFighter;\r\n        bool isGen0;\r\n        uint8 level;\r\n        uint8 rank;\r\n        uint8 courage;\r\n        uint8 cunning;\r\n        uint8 brutality;\r\n        uint8 knucks;\r\n        uint8 chains;\r\n        uint8 switchblade;\r\n        uint8 machete;\r\n        uint8 katana;\r\n        uint16 scars;\r\n        uint32 imageId;\r\n        uint32 lastLevelUpgradeTime;\r\n        uint32 lastRankUpgradeTime;\r\n        uint32 lastRaidTime;\r\n    }  \r\n    //weapons scores used to identify \"metal\"\r\n    // steel = 10, bronze = 20, gold = 30, platinum = 50 , titanium = 80, diamond = 100\r\n    \r\n    struct Weapon {\r\n        uint8 durability;\r\n        uint8 attack;\r\n    }\r\n\r\n    struct ForgeFightClub {\r\n        bool isRevealed;\r\n        uint8 boost;\r\n        uint8 size;\r\n        uint8 level;\r\n        uint16 id;\r\n        uint32 lastLevelUpgradeTime;\r\n        uint32 lastSizeUpgradeTime;\r\n        uint32 lastBoostTime;\r\n        uint128 mintedBlockNumber;\r\n        string name;\r\n        string yakuzaFamily;\r\n    }\r\n\r\n    struct RingAmulet {\r\n        uint8 level;\r\n        uint32 lastLevelUpgradeTime;\r\n        address owner;\r\n    }\r\n\r\n    function safeBatchTransferFrom(address _from, address _to, uint256[] calldata _ids, uint256[] calldata _amounts, bytes calldata _data) external;\r\n    function levelUpFighters(uint256[] calldata, uint256[] calldata) external; // onlyAdmin\r\n  //  function setTraitRank(uint16 , uint8 ) external; // onlyAdmin\r\n  //  function setTraitCourage(uint16 , uint8 ) external; // onlyAdmin\r\n  //  function setTraitCunning(uint16 , uint8 ) external; // onlyAdmin\r\n  //  function setTraitBrutality(uint16 , uint8 ) external; // onlyAdmin\r\n    function mintRingAmulet(address, bytes memory, uint256, bool ) external;//onlyAdmin  \r\n    function checkUserBatchBalance(address user, uint256[] calldata tokenIds) external view returns (bool);\r\n    function isFighter(uint256 tokenId) external view returns (bool);\r\n    function getRing(uint256 ) external view returns (RingAmulet memory);\r\n    function getAmulet(uint256 ) external view returns (RingAmulet memory);\r\n    function getFighters(uint256[] calldata) external view returns (FighterYakuza[] memory);\r\n    function levelUpRingAmulets(uint256[] calldata , uint256[] calldata ) external;\r\n    function addAdmin(address) external; // onlyOwner \r\n    function removeAdmin(address) external; // onlyOwner\r\n   // function getFighterIDsForUser(address) external view returns (uint256[] memory);\r\n    function getTotalFighterYakuza()  external view returns (uint256);\r\n}\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1148880947/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1148881990",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1862#issuecomment-1148881990",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1862",
    "id": 1148881990,
    "node_id": "IC_kwDOGBlvNc5EeoxG",
    "user": {
      "login": "SamShakespeare",
      "id": 85254282,
      "node_id": "MDQ6VXNlcjg1MjU0Mjgy",
      "avatar_url": "https://avatars.githubusercontent.com/u/85254282?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SamShakespeare",
      "html_url": "https://github.com/SamShakespeare",
      "followers_url": "https://api.github.com/users/SamShakespeare/followers",
      "following_url": "https://api.github.com/users/SamShakespeare/following{/other_user}",
      "gists_url": "https://api.github.com/users/SamShakespeare/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SamShakespeare/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SamShakespeare/subscriptions",
      "organizations_url": "https://api.github.com/users/SamShakespeare/orgs",
      "repos_url": "https://api.github.com/users/SamShakespeare/repos",
      "events_url": "https://api.github.com/users/SamShakespeare/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SamShakespeare/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-07T16:16:01Z",
    "updated_at": "2022-06-07T16:16:01Z",
    "author_association": "NONE",
    "body": "// SPDX-License-Identifier: Apache-2.0\r\npragma solidity 0.8.13;\r\n\r\nimport \"./ERC1155/tokens/UGPackedBalance/UGMintBurnPackedBalance.sol\";\r\n\r\nimport \"./ERC1155/utils/Ownable.sol\";\r\nimport \"./interfaces/IUGNFTs.sol\";\r\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\r\n//import \"./ERC1155/tokens/ERC1155/ERC1155Metadata.sol\";\r\n\r\n\r\n\r\ncontract UGNFTs is ERC1155MintBurnPackedBalance, IUGNFTs, Ownable {\r\n\r\n  //IUGame public uGame;\r\n  /*///////////////////////////////////////////////////////////////\r\n                            TOKEN BASE  IDS\r\n//////////////////////////////////////////////////////////////*/\r\n\r\n\r\nuint32 constant FIGHTER = 100000;\r\nuint16 constant RING = 5000;\r\nuint16 constant AMULET = 10000;\r\nuint16 constant FIGHT_CLUB = 20000;\r\nuint16 constant FORGE = 15000;\r\nuint8 constant GOLD = 5;\r\n\r\nuint128 constant RING_MAX_SUPPLY = 4000;\r\nuint128 constant AMULET_MAX_SUPPLY = 4000;\r\n\r\n/*///////////////////////////////////////////////////////////////\r\n                                YAKUZA FAMILIES\r\n//////////////////////////////////////////////////////////////*/\r\nstring constant YAKUZA_FAMILY_1 = \"YAMAGUCHI\";\r\nstring constant YAKUZA_FAMILY_2 = \"SUMIYOSHI\";\r\nstring constant YAKUZA_FAMILY_3 = \"INAGAWA\";\r\n\r\n  /*///////////////////////////////////////////////////////////////\r\n                                 FIGHTERS\r\n  //////////////////////////////////////////////////////////////*/  \r\n\r\n  mapping(uint256 => FighterYakuza) idToFYakuza;\r\n  mapping(uint256 => ForgeFightClub) idToFightClub;\r\n  mapping(uint256 => ForgeFightClub) idToForge;\r\n  mapping(uint256 => RingAmulet) idToRingAmulet;\r\n  //maps     user  =>     base Type  =>  linked list tokenId => tokenId\r\n  uint256 private constant GUARD = 1;\r\n\r\n  \r\n\r\n \r\n  uint16 private ttlRings;\r\n  uint16 private ttlAmulets;\r\n  uint256 private ttlFYakuzas;\r\n  uint16 private ttlFightClubs;\r\n  uint16 private ttlForges;\r\n  //holds user balances of steel, bronze and gold weapons\r\n  //mapping(address => uint256) private lowerWeaponsBalances;\r\n  //holds user balances of platinum, titanium and diamond weapons\r\n  //mapping(address => uint256) private upperWeaponsBalances;\r\n\r\n  //maps user  => [address][bin][packed weapons balance]\r\n  //mapping(address => mapping(uint256 => mapping(uint256 => uint256))) public weaponsBalances;\r\n  //mapping(address => mapping(uint256 => uint256)) public weaponsBalances;\r\n\r\n  /*///////////////////////////////////////////////////////////////\r\n                              PRIVATE VARIABLES\r\n  //////////////////////////////////////////////////////////////*/\r\n  mapping(address => bool) private _admins;\r\n  string private _tokenRevealedBaseURI;\r\n\r\n  /*///////////////////////////////////////////////////////////////\r\n                          FighterYakuza NAMES\r\n  //////////////////////////////////////////////////////////////*/\r\n\r\n  uint256 public nameFee;\r\n  mapping(uint256 => string) public idToFighterNames;\r\n\r\n  /*///////////////////////////////////////////////////////////////\r\n                                EVENTS\r\n   //////////////////////////////////////////////////////////////*/\r\n  event LevelUp(uint256 tokenId, uint256 timestamp);\r\n  event NameChange(uint256 tokenId);\r\n  event UpdatedNameFee(uint256 namefee);\r\n  event TokenMinted(address indexed owner, uint256 indexed tokenId);\r\n  event TokenBurned(address indexed owner, uint256 indexed tokenId);\r\n\r\n   /*///////////////////////////////////////////////////////////////\r\n                                ERRORS\r\n  //////////////////////////////////////////////////////////////*/\r\n  error Unauthorized();\r\n  error InvalidTokenID(uint256 tokenId);\r\n  error MismatchArrays();\r\n  error MaxSupplyReached();\r\n\r\n\r\n  // set the initial name and base URI\r\n // constructor(string memory _name, string memory _baseURI)  {\r\n  //  owner = msg.sender;\r\n  \r\n  //}\r\n\r\n\r\n  /*///////////////////////////////////////////////////////////////\r\n                    CONTRACT MANAGEMENT OPERATIONS\r\n  //////////////////////////////////////////////////////////////*/\r\n\r\n  modifier onlyAdmin() {\r\n    if(!_admins[msg.sender]) revert Unauthorized();\r\n    _;\r\n  }\r\n\r\n  modifier onlyFighter(uint32 tokenId) {\r\n    if(tokenId >= FIGHTER + ttlFYakuzas ||\r\n        tokenId <= FIGHTER) revert InvalidTokenID({tokenId: tokenId});\r\n    _;\r\n  }\r\n\r\n   function addAdmin(address addr) external onlyOwner {\r\n    _admins[addr] = true;\r\n  }\r\n\r\n  function removeAdmin(address addr) external onlyOwner {\r\n    delete _admins[addr];\r\n  }\r\n\r\n  /*///////////////////////////////////////////////////////////////\r\n                    MINT AND BURN FUNCTIONS\r\n  //////////////////////////////////////////////////////////////*/\r\n  function batchMintFYakuza(\r\n    address _to, \r\n    uint256[] calldata tokenIds,\r\n    FighterYakuza[] calldata oldFighters\r\n  ) external  {\r\n    if(tokenIds.length != oldFighters.length) revert MismatchArrays();\r\n\r\n    uint256[] memory _ids = new uint256[](oldFighters.length);\r\n    uint256[] memory _amounts = new uint256[](oldFighters.length);\r\n\r\n    FighterYakuza memory newFighter;\r\n    \r\n    for(uint i = 0; i< oldFighters.length; i++){\r\n      _ids[i] = tokenIds[i] + FIGHTER;\r\n      _amounts[i] = 1;\r\n      newFighter.isFighter = oldFighters[i].isFighter;\r\n      newFighter.rank = oldFighters[i].isFighter ? 0 : oldFighters[i].rank;\r\n      newFighter.courage = oldFighters[i].courage;\r\n      newFighter.cunning = oldFighters[i].cunning;\r\n      newFighter.brutality = oldFighters[i].brutality;\r\n      newFighter.level = oldFighters[i].level;\r\n      newFighter.scars = oldFighters[i].isGen0 ? 50 : 0 ;\r\n      newFighter.lastLevelUpgradeTime = uint32(block.timestamp);\r\n      newFighter.lastRaidTime =  uint32(block.timestamp);\r\n      newFighter.lastRankUpgradeTime =  uint32(block.timestamp);\r\n      newFighter.imageId = uint32(tokenIds[i]);\r\n\r\n      idToFYakuza[uint32(_ids[i])] = newFighter;\r\n      ttlFYakuzas ++;\r\n     // _addFighterToOwner(_to, _ids[i]);\r\n    }\r\n    ttlFYakuzas ++;\r\n    //update fighter balance for user\r\n    _updateIDUserTotalBalance(_to, FIGHTER_INDEX, tokenIds.length, Operations.Add); // Add amount to recipient\r\n    _batchMint( _to,  _ids, _amounts, \"\");\r\n  }\r\n\r\n  function mintRingAmulet(address _to, bytes memory _data, uint256 _level, bool isRing) external  {\r\n    uint16 _id;\r\n    //string memory name;\r\n    if(isRing){\r\n      if(ttlRings >= RING_MAX_SUPPLY) revert MaxSupplyReached();\r\n      _id = ++ttlRings + RING;\r\n      //update ring balance for user\r\n      _updateIDUserTotalBalance(_to, RING_INDEX, 1, Operations.Add);\r\n\r\n    } else {\r\n      if(ttlAmulets >= AMULET_MAX_SUPPLY) revert MaxSupplyReached();\r\n      _id = ++ttlAmulets + AMULET;\r\n      //update amulet balance for user\r\n      _updateIDUserTotalBalance(_to, AMULET_INDEX, 1, Operations.Add);\r\n    }\r\n    //string memory _name = string(abi.encodePacked(name,' ',Strings.toString(_id))) ;\r\n\r\n    RingAmulet memory traits;\r\n    traits.level = uint8(_level);\r\n    traits.lastLevelUpgradeTime = uint32(block.timestamp);\r\n    idToRingAmulet[_id] = traits;\r\n\r\n    _mint( _to,  _id, 1,  _data);\r\n\r\n    //if(isRing) _addRingToOwner(_to, _id);//add to linked list\r\n    //if(!isRing) _addAmuletToOwner(_to, _id);//add to linked list\r\n  }\r\n\r\n  function mint(address _to, uint256 _id, uint256 _amount, bytes memory _data) public onlyAdmin {\r\n   _mint( _to,  _id, _amount,  _data);\r\n  }\r\n\r\n  function batchMint(address _to, uint256[] memory _ids, uint256[] memory _amounts, bytes memory _data)\r\n    public onlyAdmin\r\n  {\r\n    _batchMint( _to,  _ids, _amounts,  _data);\r\n\r\n    //NEED TO UPDATE TOTAL SUPPLY BALANCES\r\n    \r\n  }\r\n\r\n  function levelUpRingAmulets(uint256[] calldata tokenIds, uint256[] calldata levels) external onlyAdmin {\r\n    if(tokenIds.length != levels.length) revert MismatchArrays();\r\n    RingAmulet memory traits;\r\n    for(uint i =0; i<tokenIds.length;i++){\r\n      //tokenId must be a Ring or Amulet\r\n      if(tokenIds[i] > AMULET + ttlAmulets ||\r\n        tokenIds[i] <= RING) revert InvalidTokenID({tokenId: tokenIds[i]});\r\n      traits = idToRingAmulet[tokenIds[i]];\r\n      traits.level += uint8(levels[i]);\r\n      traits.lastLevelUpgradeTime = uint32(block.timestamp);\r\n      idToRingAmulet[tokenIds[i]] = traits;\r\n      emit LevelUp(tokenIds[i], block.timestamp);\r\n    }\r\n  }\r\n\r\n  function levelUpFighters(uint256[] calldata tokenIds, uint256[] calldata levels) external onlyAdmin {\r\n    if(tokenIds.length != levels.length) revert MismatchArrays();\r\n    FighterYakuza memory fy;\r\n    for(uint i =0; i<tokenIds.length;i++){\r\n      if(tokenIds[i] >= FIGHTER + ttlFYakuzas ||\r\n        tokenIds[i] <= FIGHTER) revert InvalidTokenID({tokenId: tokenIds[i]});\r\n      fy = idToFYakuza[tokenIds[i]];\r\n      fy.level += uint8(levels[i]);\r\n      fy.lastLevelUpgradeTime = uint32(block.timestamp);\r\n      idToFYakuza[tokenIds[i]] = fy;\r\n      emit LevelUp(tokenIds[i], block.timestamp);\r\n    }\r\n  }\r\n\r\n  function setRaidTraits(uint32[] calldata tokenIds, uint16[] calldata _scars) external onlyAdmin {\r\n    if(tokenIds.length != _scars.length) revert MismatchArrays();\r\n    FighterYakuza memory FY;\r\n    for(uint i =0; i<tokenIds.length;i++){\r\n      if(tokenIds[i] >= FIGHTER + ttlFYakuzas ||\r\n        tokenIds[i] <= FIGHTER) revert InvalidTokenID({tokenId: tokenIds[i]});\r\n      FY = idToFYakuza[tokenIds[i]];\r\n      FY.scars = _scars[i];\r\n      FY.lastRaidTime = uint32(block.timestamp);\r\n      //need to handle broken weapons scores etc\r\n      idToFYakuza[tokenIds[i]] = FY;\r\n    }\r\n  }\r\n\r\n  function getFighterIDsForUser(address user) external view returns (uint256[] memory){\r\n    //get balance of fighters\r\n    uint256 numFighters = getValueInBin(userTotalBalances[user], USER_TOTAL_BALANCES_BITS_SIZE, FIGHTER_INDEX);\r\n    uint256[] memory _tokenIds = new uint256[](numFighters);\r\n    //loop through user balances until we find all the fighters\r\n    uint count;\r\n    for(uint i; count<numFighters && i<FIGHTER + ttlFYakuzas; i++){\r\n      if(balanceOf(user, FIGHTER + i) ==1){\r\n        _tokenIds[count] = FIGHTER + i;\r\n        count++;\r\n      }\r\n    }\r\n    return _tokenIds;\r\n  }\r\n\r\n  function getRingIDsForUser(address user) external view returns (uint256[] memory){\r\n    //get balance of fighters\r\n    uint256 num = getValueInBin(userTotalBalances[user], USER_TOTAL_BALANCES_BITS_SIZE, RING_INDEX);\r\n    uint256[] memory _tokenIds = new uint256[](num);\r\n    //loop through user balances until we find all the fighters\r\n    uint count;\r\n    for(uint i; count<num && i<RING + ttlRings; i++){\r\n      if(balanceOf(user, RING + i) ==1){\r\n        _tokenIds[count] = RING + i;\r\n        count++;\r\n      }\r\n    }\r\n    return _tokenIds;\r\n  }\r\n\r\n  function getAmuletIDsForUser(address user) external view returns (uint256[] memory){\r\n    //get balance of fighters\r\n    uint256 num = getValueInBin(userTotalBalances[user], USER_TOTAL_BALANCES_BITS_SIZE, AMULET_INDEX);\r\n    uint256[] memory _tokenIds = new uint256[](num);\r\n    //loop through user balances until we find all the fighters\r\n    uint count;\r\n    for(uint i; count<num && i<AMULET + ttlAmulets; i++){\r\n      if(balanceOf(user, AMULET + i) ==1){\r\n        _tokenIds[count] = AMULET + i;\r\n        count++;\r\n      }\r\n    }\r\n    return _tokenIds;\r\n  }\r\n\r\n   function getFighters(uint256[] calldata tokenIds) external view returns (FighterYakuza[] memory){\r\n    FighterYakuza[] memory FY = new FighterYakuza[](tokenIds.length);\r\n    for (uint i = 0; i < tokenIds.length; i++) {\r\n      FighterYakuza storage fighter = idToFYakuza[tokenIds[i]];\r\n      FY[i] = fighter;\r\n    }\r\n    return FY;\r\n  }\r\n\r\n  function setFighters(uint256[] calldata tokenIds, FighterYakuza[] calldata fighters) external onlyAdmin {\r\n    if(tokenIds.length != fighters.length) revert MismatchArrays();\r\n    for (uint i = 0; i < tokenIds.length; i++) {\r\n      idToFYakuza[tokenIds[i]] = fighters[i];\r\n    }\r\n  }\r\n\r\n  function isFighter(uint256 tokenId) external view returns (bool) {\r\n    if(tokenId > FIGHTER + ttlFYakuzas ||\r\n    tokenId < FIGHTER) revert InvalidTokenID({tokenId: tokenId});\r\n    FighterYakuza memory FY = idToFYakuza[tokenId];\r\n        \r\n    return FY.isFighter;\r\n  }\r\n\r\n\r\n  function getRing(uint256 tokenId) external view returns (RingAmulet memory) {\r\n    if(tokenId > RING + ttlRings || tokenId <= RING) revert InvalidTokenID({tokenId: tokenId});\r\n    RingAmulet memory ring = idToRingAmulet[tokenId];\r\n    return (ring);\r\n  }\r\n\r\n  function getAmulet(uint256 tokenId) external view returns ( RingAmulet memory) {\r\n    if(tokenId > AMULET + ttlAmulets || tokenId <= AMULET) revert InvalidTokenID({tokenId: tokenId});\r\n    RingAmulet memory amulet = idToRingAmulet[tokenId];\r\n    return ( amulet);\r\n  }\r\n\r\n  function getTotalFighterYakuza() external view returns (uint256){\r\n    return ttlFYakuzas;\r\n  }\r\n\r\n /*\r\n\r\n    // Take care with this one, as rank is used in the Arena - if the rank of the NFT changes while the NFT is in the Arena it's not good :-p\r\n  function setTraitRank(uint16 tokenId, uint8 rank) external onlyAdmin onlyFighter(tokenId) {\r\n    FighterYakuza memory traits = idToFYakuza[tokenId];\r\n    traits.rank = rank;\r\n    traits.lastRankUpgradeTime = uint32(block.timestamp);\r\n    idToFYakuza[tokenId] = traits;\r\n  }\r\n\r\n  function setTraitCourage(uint16 tokenId, uint8 courage) external onlyAdmin onlyFighter(tokenId) {\r\n    FighterYakuza memory traits = idToFYakuza[tokenId];\r\n    traits.courage = courage;\r\n    idToFYakuza[tokenId] = traits;\r\n  }\r\n\r\n  function setTraitCunning(uint16 tokenId, uint8 cunning) external onlyAdmin onlyFighter(tokenId) {\r\n    FighterYakuza memory traits = idToFYakuza[tokenId];        \r\n    traits.cunning = cunning;\r\n    idToFYakuza[tokenId] = traits;\r\n  }\r\n\r\n  function setTraitBrutality(uint16 tokenId, uint8 brutality) external onlyAdmin onlyFighter(tokenId) {\r\n    FighterYakuza memory traits = idToFYakuza[tokenId];\r\n    traits.brutality = brutality;\r\n    idToFYakuza[tokenId] = traits;\r\n  }\r\n*/\r\n\r\n  function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _amount, bytes memory _data)\r\n    public override\r\n  {\r\n    // Requirements\r\n    require((msg.sender == _from) || isApprovedForAll(_from, msg.sender), \" INVALID_OPERATOR\");\r\n    require(_to != address(0),\" INVALID_RECIPIENT\");\r\n    // require(_amount <= balances);  Not necessary since checked with _viewUpdateBinValue() checks\r\n\r\n    if(_id > RING && _id <= RING + ttlRings) {\r\n        _updateIDUserTotalBalance(_to, RING_INDEX, _amount, Operations.Add);\r\n        _updateIDUserTotalBalance(_from, RING_INDEX, _amount, Operations.Sub);\r\n        //_addRingToOwner(_to, _ids[i]);\r\n       // removeRingFromOwner(_from, _ids[i]);\r\n      }\r\n      if(_id > AMULET && _id <= AMULET + ttlAmulets){\r\n        _updateIDUserTotalBalance(_to, AMULET_INDEX, _amount, Operations.Add);\r\n        _updateIDUserTotalBalance(_from, AMULET_INDEX, _amount, Operations.Sub);\r\n      \r\n      }\r\n      if(_id > FIGHTER && _id < FIGHTER + ttlFYakuzas) {\r\n        _updateIDUserTotalBalance(_to, FIGHTER_INDEX, _amount, Operations.Add); // Add amount to recipient\r\n        _updateIDUserTotalBalance(_from, FIGHTER_INDEX, _amount, Operations.Sub); // Add amount to recipient\r\n    \r\n      }\r\n\r\n    _safeTransferFrom(_from, _to, _id, _amount);\r\n    _callonERC1155Received(_from, _to, _id, _amount, gasleft(), _data);\r\n  }\r\n\r\n  function safeBatchTransferFrom(address _from, address _to, uint256[] calldata _ids, uint256[] calldata _amounts, bytes memory _data)\r\n    public override (ERC1155PackedBalance, IUGNFTs)\r\n  {\r\n    // Requirements\r\n    require((msg.sender == _from) || isApprovedForAll(_from, msg.sender), \" INVALID_OPERATOR\");\r\n    require(_to != address(0),\" INVALID_RECIPIENT\");\r\n    for(uint i = 0; i < _ids.length; i++){\r\n      if(_ids[i] > RING && _ids[i] <= RING + ttlRings) {\r\n        _updateIDUserTotalBalance(_to, RING_INDEX, _amounts[i], Operations.Add);\r\n        _updateIDUserTotalBalance(_from, RING_INDEX, _amounts[i], Operations.Sub);\r\n        //_addRingToOwner(_to, _ids[i]);\r\n       // removeRingFromOwner(_from, _ids[i]);\r\n      }\r\n      if(_ids[i] > AMULET && _ids[i] <= AMULET + ttlAmulets){\r\n        _updateIDUserTotalBalance(_to, AMULET_INDEX, _amounts[i], Operations.Add);\r\n        _updateIDUserTotalBalance(_from, AMULET_INDEX, _amounts[i], Operations.Sub);\r\n      \r\n      }\r\n      if(_ids[i] > FIGHTER && _ids[i] < FIGHTER + ttlFYakuzas) {\r\n        _updateIDUserTotalBalance(_to, FIGHTER_INDEX, _amounts[i], Operations.Add); // Add amount to recipient\r\n        _updateIDUserTotalBalance(_from, FIGHTER_INDEX, _amounts[i], Operations.Sub); // Add amount to recipient\r\n    \r\n      }\r\n    }\r\n    _safeBatchTransferFrom(_from, _to, _ids, _amounts);\r\n    _callonERC1155BatchReceived(_from, _to, _ids, _amounts, gasleft(), _data);\r\n  }\r\n\r\n  function checkUserBatchBalance(address user, uint256[] calldata tokenIds) external view returns (bool){\r\n    for (uint i = 0; i < tokenIds.length;i++){\r\n      uint256 bal = balanceOf(user, tokenIds[i]);\r\n      if(bal == 0) return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n \r\n/*\r\n  function tokenURIs(uint256[] tokenIds) public view override blockIfTokenJustMinted(tokenId) blockIfChangingAddress blockIfChangingToken(tokenId) returns (string memory) {\r\n    string memory jsonString;\r\n\r\n    FighterYakuza memory traits = idToFYakuza[tokenId];\r\n    if (_exists(tokenId)) {\r\n      jsonString = string(abi.encodePacked(\r\n      jsonString,\r\n      Strings.toString(traits.imageId),',',\r\n      Strings.toString((traits.isFighter)? 1 : 0),',',\r\n      Strings.toString((traits.isGen0)? 0 : 1),',',\r\n      Strings.toString(traits.cunning),',',\r\n      Strings.toString(traits.brutality),','\r\n      ));\r\n\r\n      jsonString = string(abi.encodePacked(\r\n      jsonString,\r\n      Strings.toString(traits.courage),',',\r\n      Strings.toString(traits.level),',',\r\n      Strings.toString(traits.lastLevelUpgradeTime),',',\r\n      Strings.toString(traits.rank),',',\r\n      Strings.toString(traits.lastRankUpgradeTime)\r\n      ));\r\n    }\r\n\r\n    return string(abi.encodePacked(\r\n      _tokenRevealedBaseURI,\r\n      \"?traits=\",\r\n      jsonString\r\n    ));\r\n  }\r\n*/\r\n  /*///////////////////////////////////////////////////////////////\r\n                       ERC165 FUNCTIONS\r\n  //////////////////////////////////////////////////////////////*/\r\n\r\n  /**\r\n   * @notice Query if a contract implements an interface\r\n   * @param _interfaceID  The interface identifier, as specified in ERC-165\r\n   * @return `true` if the contract implements `_interfaceID` and\r\n   */\r\n  function supportsInterface(bytes4 _interfaceID) public override(ERC1155PackedBalance) virtual pure returns (bool) {\r\n    if (_interfaceID == 0xd9b67a26 ||\r\n        _interfaceID == 0x0e89341c) {\r\n      return true;\r\n    }\r\n    return super.supportsInterface(_interfaceID);\r\n  }\r\n\r\n  \r\n  /***********************************|\r\n  |       Unsupported Functions       |\r\n  |__________________________________*/\r\n\r\n  fallback () external {\r\n    revert(\"UGNFTs: INVALID_METHOD\");\r\n  }\r\n}\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1148881990/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1148883548",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1862#issuecomment-1148883548",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1862",
    "id": 1148883548,
    "node_id": "IC_kwDOGBlvNc5EepJc",
    "user": {
      "login": "SamShakespeare",
      "id": 85254282,
      "node_id": "MDQ6VXNlcjg1MjU0Mjgy",
      "avatar_url": "https://avatars.githubusercontent.com/u/85254282?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SamShakespeare",
      "html_url": "https://github.com/SamShakespeare",
      "followers_url": "https://api.github.com/users/SamShakespeare/followers",
      "following_url": "https://api.github.com/users/SamShakespeare/following{/other_user}",
      "gists_url": "https://api.github.com/users/SamShakespeare/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SamShakespeare/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SamShakespeare/subscriptions",
      "organizations_url": "https://api.github.com/users/SamShakespeare/orgs",
      "repos_url": "https://api.github.com/users/SamShakespeare/repos",
      "events_url": "https://api.github.com/users/SamShakespeare/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SamShakespeare/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-07T16:16:38Z",
    "updated_at": "2022-06-07T16:16:38Z",
    "author_association": "NONE",
    "body": "sorry i put up whole contract, i hope its not too much, and i appreciate your help\r\na",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1148883548/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1148901170",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1862#issuecomment-1148901170",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1862",
    "id": 1148901170,
    "node_id": "IC_kwDOGBlvNc5Eetcy",
    "user": {
      "login": "SamShakespeare",
      "id": 85254282,
      "node_id": "MDQ6VXNlcjg1MjU0Mjgy",
      "avatar_url": "https://avatars.githubusercontent.com/u/85254282?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SamShakespeare",
      "html_url": "https://github.com/SamShakespeare",
      "followers_url": "https://api.github.com/users/SamShakespeare/followers",
      "following_url": "https://api.github.com/users/SamShakespeare/following{/other_user}",
      "gists_url": "https://api.github.com/users/SamShakespeare/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SamShakespeare/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SamShakespeare/subscriptions",
      "organizations_url": "https://api.github.com/users/SamShakespeare/orgs",
      "repos_url": "https://api.github.com/users/SamShakespeare/repos",
      "events_url": "https://api.github.com/users/SamShakespeare/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SamShakespeare/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-07T16:29:46Z",
    "updated_at": "2022-06-07T16:29:46Z",
    "author_association": "NONE",
    "body": "just for record, i have found a workaround. if i make the ttlFYakuzas variable 'public' then add this line to interfface it works: \r\nfunction ttlFYakuzas() external view returns (uint256);\r\n\r\n (just overriding getter function in interface i guess)\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1148901170/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1148902373",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1862#issuecomment-1148902373",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1862",
    "id": 1148902373,
    "node_id": "IC_kwDOGBlvNc5Eetvl",
    "user": {
      "login": "SamShakespeare",
      "id": 85254282,
      "node_id": "MDQ6VXNlcjg1MjU0Mjgy",
      "avatar_url": "https://avatars.githubusercontent.com/u/85254282?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SamShakespeare",
      "html_url": "https://github.com/SamShakespeare",
      "followers_url": "https://api.github.com/users/SamShakespeare/followers",
      "following_url": "https://api.github.com/users/SamShakespeare/following{/other_user}",
      "gists_url": "https://api.github.com/users/SamShakespeare/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SamShakespeare/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SamShakespeare/subscriptions",
      "organizations_url": "https://api.github.com/users/SamShakespeare/orgs",
      "repos_url": "https://api.github.com/users/SamShakespeare/repos",
      "events_url": "https://api.github.com/users/SamShakespeare/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SamShakespeare/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-07T16:31:00Z",
    "updated_at": "2022-06-07T16:31:00Z",
    "author_association": "NONE",
    "body": "that being said thats only one of my 2 errors, the other is the same and i cant figure out a fix\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1148902373/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1148903464",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1862#issuecomment-1148903464",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1862",
    "id": 1148903464,
    "node_id": "IC_kwDOGBlvNc5EeuAo",
    "user": {
      "login": "SamShakespeare",
      "id": 85254282,
      "node_id": "MDQ6VXNlcjg1MjU0Mjgy",
      "avatar_url": "https://avatars.githubusercontent.com/u/85254282?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SamShakespeare",
      "html_url": "https://github.com/SamShakespeare",
      "followers_url": "https://api.github.com/users/SamShakespeare/followers",
      "following_url": "https://api.github.com/users/SamShakespeare/following{/other_user}",
      "gists_url": "https://api.github.com/users/SamShakespeare/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SamShakespeare/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SamShakespeare/subscriptions",
      "organizations_url": "https://api.github.com/users/SamShakespeare/orgs",
      "repos_url": "https://api.github.com/users/SamShakespeare/repos",
      "events_url": "https://api.github.com/users/SamShakespeare/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SamShakespeare/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-07T16:32:02Z",
    "updated_at": "2022-06-07T16:32:02Z",
    "author_association": "NONE",
    "body": "i commented out in the interface i sent you, can you uncomment this: \r\n// function getFighterIDsForUser(address) external view returns (uint256[] memory);\r\nin interface?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1148903464/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1148917062",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1862#issuecomment-1148917062",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1862",
    "id": 1148917062,
    "node_id": "IC_kwDOGBlvNc5EexVG",
    "user": {
      "login": "SamShakespeare",
      "id": 85254282,
      "node_id": "MDQ6VXNlcjg1MjU0Mjgy",
      "avatar_url": "https://avatars.githubusercontent.com/u/85254282?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SamShakespeare",
      "html_url": "https://github.com/SamShakespeare",
      "followers_url": "https://api.github.com/users/SamShakespeare/followers",
      "following_url": "https://api.github.com/users/SamShakespeare/following{/other_user}",
      "gists_url": "https://api.github.com/users/SamShakespeare/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SamShakespeare/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SamShakespeare/subscriptions",
      "organizations_url": "https://api.github.com/users/SamShakespeare/orgs",
      "repos_url": "https://api.github.com/users/SamShakespeare/repos",
      "events_url": "https://api.github.com/users/SamShakespeare/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SamShakespeare/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-07T16:44:50Z",
    "updated_at": "2022-06-07T16:44:50Z",
    "author_association": "NONE",
    "body": "I have reduced the contract function to this and still getting implementation error:\r\n\r\n function getFighterIDsForUser(address user) external view returns (uint256){\r\n    //get balance of fighters\r\n    uint256 numFighters =100;     return numFighters;\r\n  }",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1148917062/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1148934366",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1862#issuecomment-1148934366",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1862",
    "id": 1148934366,
    "node_id": "IC_kwDOGBlvNc5Ee1je",
    "user": {
      "login": "SamShakespeare",
      "id": 85254282,
      "node_id": "MDQ6VXNlcjg1MjU0Mjgy",
      "avatar_url": "https://avatars.githubusercontent.com/u/85254282?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SamShakespeare",
      "html_url": "https://github.com/SamShakespeare",
      "followers_url": "https://api.github.com/users/SamShakespeare/followers",
      "following_url": "https://api.github.com/users/SamShakespeare/following{/other_user}",
      "gists_url": "https://api.github.com/users/SamShakespeare/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SamShakespeare/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SamShakespeare/subscriptions",
      "organizations_url": "https://api.github.com/users/SamShakespeare/orgs",
      "repos_url": "https://api.github.com/users/SamShakespeare/repos",
      "events_url": "https://api.github.com/users/SamShakespeare/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SamShakespeare/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-07T17:02:42Z",
    "updated_at": "2022-06-07T17:02:42Z",
    "author_association": "NONE",
    "body": "sorry to be clear: interface signature: \r\n\r\n    function getFighterIDsForUser(address) external view returns (uint256);\r\n\r\nand contract implementation:\r\n\r\nfunction getFighterIDsForUser(address user) external view returns (uint256){\r\n   \r\n   if (user != address(0x00)) return 100;\r\n  }\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1148934366/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1148942448",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1862#issuecomment-1148942448",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1862",
    "id": 1148942448,
    "node_id": "IC_kwDOGBlvNc5Ee3hw",
    "user": {
      "login": "SamShakespeare",
      "id": 85254282,
      "node_id": "MDQ6VXNlcjg1MjU0Mjgy",
      "avatar_url": "https://avatars.githubusercontent.com/u/85254282?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SamShakespeare",
      "html_url": "https://github.com/SamShakespeare",
      "followers_url": "https://api.github.com/users/SamShakespeare/followers",
      "following_url": "https://api.github.com/users/SamShakespeare/following{/other_user}",
      "gists_url": "https://api.github.com/users/SamShakespeare/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SamShakespeare/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SamShakespeare/subscriptions",
      "organizations_url": "https://api.github.com/users/SamShakespeare/orgs",
      "repos_url": "https://api.github.com/users/SamShakespeare/repos",
      "events_url": "https://api.github.com/users/SamShakespeare/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SamShakespeare/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-07T17:09:46Z",
    "updated_at": "2022-06-07T17:09:46Z",
    "author_association": "NONE",
    "body": "brooooooo my baaaad!! I had another copy of the contract in the src folder it was referring to that.. sorry and I hope i didnt waste too much of your time!!",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1148942448/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
