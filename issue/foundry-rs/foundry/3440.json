{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/3440",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3440/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3440/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3440/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/3440",
  "id": 1395107771,
  "node_id": "I_kwDOGBlvNc5TJ6e7",
  "number": 3440,
  "title": "bug (config): file paths not resolved if submodule specifies root path remappings",
  "user": {
    "login": "mds1",
    "id": 17163988,
    "node_id": "MDQ6VXNlcjE3MTYzOTg4",
    "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mds1",
    "html_url": "https://github.com/mds1",
    "followers_url": "https://api.github.com/users/mds1/followers",
    "following_url": "https://api.github.com/users/mds1/following{/other_user}",
    "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
    "organizations_url": "https://api.github.com/users/mds1/orgs",
    "repos_url": "https://api.github.com/users/mds1/repos",
    "events_url": "https://api.github.com/users/mds1/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mds1/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3593644820,
      "node_id": "LA_kwDOGBlvNc7WMqsU",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-feature",
      "name": "T-feature",
      "color": "BFD4F2",
      "default": false,
      "description": "Type: feature"
    },
    {
      "id": 3703752787,
      "node_id": "LA_kwDOGBlvNc7cwshT",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/C-forge",
      "name": "C-forge",
      "color": "5319E7",
      "default": false,
      "description": "Command: forge"
    },
    {
      "id": 4450020906,
      "node_id": "LA_kwDOGBlvNc8AAAABCT3uKg",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/A-config",
      "name": "A-config",
      "color": "FBCA04",
      "default": false,
      "description": "Area: config"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": {
    "login": "onbjerg",
    "id": 8862627,
    "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/onbjerg",
    "html_url": "https://github.com/onbjerg",
    "followers_url": "https://api.github.com/users/onbjerg/followers",
    "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
    "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
    "organizations_url": "https://api.github.com/users/onbjerg/orgs",
    "repos_url": "https://api.github.com/users/onbjerg/repos",
    "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
    "received_events_url": "https://api.github.com/users/onbjerg/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/milestones/1",
    "html_url": "https://github.com/foundry-rs/foundry/milestone/1",
    "labels_url": "https://api.github.com/repos/foundry-rs/foundry/milestones/1/labels",
    "id": 8140456,
    "node_id": "MI_kwDOGBlvNc4AfDao",
    "number": 1,
    "title": "v1.0.0",
    "description": "",
    "creator": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 26,
    "closed_issues": 131,
    "state": "open",
    "created_at": "2022-06-28T08:15:32Z",
    "updated_at": "2023-07-18T13:06:56Z",
    "due_on": null,
    "closed_at": null
  },
  "comments": 21,
  "created_at": "2022-10-03T17:54:24Z",
  "updated_at": "2023-07-18T13:07:02Z",
  "closed_at": "2023-07-17T21:56:37Z",
  "author_association": "COLLABORATOR",
  "active_lock_reason": null,
  "body": "### Component\r\n\r\nForge\r\n\r\n### Describe the feature you would like\r\n\r\nSteps to reproduce:\r\n1. Clone [this repo](https://github.com/mds1/forge-test-my-proj) and run `forge install`\r\n2. Run `forge build`, it fails with the below error\r\n3. In `lib/forge-test-my-dep`, open `foundry.toml` and comment out the remappings\r\n4. Run `forge build`, it passes\r\n\r\n```\r\n[⠊] Compiling...\r\nError: \r\nFailed to resolve file: \"/Users/mds/Documents/projects/forge-test-my-proj/lib/forge-test-my-dep/script/BaseScript.sol\": No such file or directory (os error 2).\r\n    --> \"/Users/mds/Documents/projects/forge-test-my-proj/script/Counter.s.sol\"\r\n        \"script/BaseScript.sol\"\r\n    Check configured remappings.\r\n```\r\n\r\n\r\n### Additional context\r\n\r\n_No response_",
  "closed_by": {
    "login": "Evalir",
    "id": 26014927,
    "node_id": "MDQ6VXNlcjI2MDE0OTI3",
    "avatar_url": "https://avatars.githubusercontent.com/u/26014927?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Evalir",
    "html_url": "https://github.com/Evalir",
    "followers_url": "https://api.github.com/users/Evalir/followers",
    "following_url": "https://api.github.com/users/Evalir/following{/other_user}",
    "gists_url": "https://api.github.com/users/Evalir/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Evalir/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Evalir/subscriptions",
    "organizations_url": "https://api.github.com/users/Evalir/orgs",
    "repos_url": "https://api.github.com/users/Evalir/repos",
    "events_url": "https://api.github.com/users/Evalir/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Evalir/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/3440/reactions",
    "total_count": 5,
    "+1": 5,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3440/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1304218485",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3440#issuecomment-1304218485",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3440",
    "id": 1304218485,
    "node_id": "IC_kwDOGBlvNc5NvMt1",
    "user": {
      "login": "h0tw4t3r",
      "id": 35642018,
      "node_id": "MDQ6VXNlcjM1NjQyMDE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/35642018?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/h0tw4t3r",
      "html_url": "https://github.com/h0tw4t3r",
      "followers_url": "https://api.github.com/users/h0tw4t3r/followers",
      "following_url": "https://api.github.com/users/h0tw4t3r/following{/other_user}",
      "gists_url": "https://api.github.com/users/h0tw4t3r/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/h0tw4t3r/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/h0tw4t3r/subscriptions",
      "organizations_url": "https://api.github.com/users/h0tw4t3r/orgs",
      "repos_url": "https://api.github.com/users/h0tw4t3r/repos",
      "events_url": "https://api.github.com/users/h0tw4t3r/events{/privacy}",
      "received_events_url": "https://api.github.com/users/h0tw4t3r/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-04T20:42:55Z",
    "updated_at": "2022-11-04T20:42:55Z",
    "author_association": "NONE",
    "body": "suffering from the same exact issue.\r\nimporting @thirdweb contracts and OZ in the project breaks remappings.\r\nI have the latest foundry and foundry-std versions",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1304218485/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1304430512",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3440#issuecomment-1304430512",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3440",
    "id": 1304430512,
    "node_id": "IC_kwDOGBlvNc5NwAew",
    "user": {
      "login": "mattsse",
      "id": 19890894,
      "node_id": "MDQ6VXNlcjE5ODkwODk0",
      "avatar_url": "https://avatars.githubusercontent.com/u/19890894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mattsse",
      "html_url": "https://github.com/mattsse",
      "followers_url": "https://api.github.com/users/mattsse/followers",
      "following_url": "https://api.github.com/users/mattsse/following{/other_user}",
      "gists_url": "https://api.github.com/users/mattsse/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mattsse/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mattsse/subscriptions",
      "organizations_url": "https://api.github.com/users/mattsse/orgs",
      "repos_url": "https://api.github.com/users/mattsse/repos",
      "events_url": "https://api.github.com/users/mattsse/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mattsse/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-05T07:28:33Z",
    "updated_at": "2022-11-05T07:28:33Z",
    "author_association": "MEMBER",
    "body": "this is a general problem with absolute import paths.\r\n\r\nyou can fix this by using relative paths for contracts you import from folders like script or test, or simply overwrite the remapping.\r\n\r\nI'd recommend against remappings for folders in the same project.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1304430512/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1304430579",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3440#issuecomment-1304430579",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3440",
    "id": 1304430579,
    "node_id": "IC_kwDOGBlvNc5NwAfz",
    "user": {
      "login": "mattsse",
      "id": 19890894,
      "node_id": "MDQ6VXNlcjE5ODkwODk0",
      "avatar_url": "https://avatars.githubusercontent.com/u/19890894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mattsse",
      "html_url": "https://github.com/mattsse",
      "followers_url": "https://api.github.com/users/mattsse/followers",
      "following_url": "https://api.github.com/users/mattsse/following{/other_user}",
      "gists_url": "https://api.github.com/users/mattsse/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mattsse/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mattsse/subscriptions",
      "organizations_url": "https://api.github.com/users/mattsse/orgs",
      "repos_url": "https://api.github.com/users/mattsse/repos",
      "events_url": "https://api.github.com/users/mattsse/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mattsse/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-05T07:29:04Z",
    "updated_at": "2022-11-05T07:29:04Z",
    "author_association": "MEMBER",
    "body": "ref #1855 ",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1304430579/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1413690983",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3440#issuecomment-1413690983",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3440",
    "id": 1413690983,
    "node_id": "IC_kwDOGBlvNc5UQzZn",
    "user": {
      "login": "PaulRBerg",
      "id": 8782666,
      "node_id": "MDQ6VXNlcjg3ODI2NjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8782666?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PaulRBerg",
      "html_url": "https://github.com/PaulRBerg",
      "followers_url": "https://api.github.com/users/PaulRBerg/followers",
      "following_url": "https://api.github.com/users/PaulRBerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/PaulRBerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PaulRBerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PaulRBerg/subscriptions",
      "organizations_url": "https://api.github.com/users/PaulRBerg/orgs",
      "repos_url": "https://api.github.com/users/PaulRBerg/repos",
      "events_url": "https://api.github.com/users/PaulRBerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PaulRBerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-02-02T12:47:14Z",
    "updated_at": "2023-02-02T12:54:37Z",
    "author_association": "CONTRIBUTOR",
    "body": "Just bumped into this issue while installing @mds1's library [solidity-generators](https://github.com/mds1/solidity-generators).\r\n\r\nI also have absolute import paths, and I want to counter @mattsse's suggestion from above that we should simply use relative paths.\r\n\r\nRelative paths can get really ugly and hard to maintain in complex projects; [several Foundry users](https://twitter.com/jtriley_eth/status/1594047400057921536) use absolute paths because of the aforementioned reason.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1413690983/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1413974061",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3440#issuecomment-1413974061",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3440",
    "id": 1413974061,
    "node_id": "IC_kwDOGBlvNc5UR4gt",
    "user": {
      "login": "h0tw4t3r",
      "id": 35642018,
      "node_id": "MDQ6VXNlcjM1NjQyMDE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/35642018?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/h0tw4t3r",
      "html_url": "https://github.com/h0tw4t3r",
      "followers_url": "https://api.github.com/users/h0tw4t3r/followers",
      "following_url": "https://api.github.com/users/h0tw4t3r/following{/other_user}",
      "gists_url": "https://api.github.com/users/h0tw4t3r/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/h0tw4t3r/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/h0tw4t3r/subscriptions",
      "organizations_url": "https://api.github.com/users/h0tw4t3r/orgs",
      "repos_url": "https://api.github.com/users/h0tw4t3r/repos",
      "events_url": "https://api.github.com/users/h0tw4t3r/events{/privacy}",
      "received_events_url": "https://api.github.com/users/h0tw4t3r/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-02-02T15:58:48Z",
    "updated_at": "2023-02-02T15:58:48Z",
    "author_association": "NONE",
    "body": "@PaulRBerg 🤝🤝🤝\r\nAbsolutely agree on this.\r\n\r\n@mattsse, I can't really help atm with the MR, but many devs that come from TypeScript environment are used to path aliases and I cannot find any con in using them in the smart contracts as well.\r\nHuge smart contract repos are seeking for usable remappings inside themselves.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1413974061/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1416361969",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3440#issuecomment-1416361969",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3440",
    "id": 1416361969,
    "node_id": "IC_kwDOGBlvNc5Ua_fx",
    "user": {
      "login": "PaulRBerg",
      "id": 8782666,
      "node_id": "MDQ6VXNlcjg3ODI2NjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8782666?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PaulRBerg",
      "html_url": "https://github.com/PaulRBerg",
      "followers_url": "https://api.github.com/users/PaulRBerg/followers",
      "following_url": "https://api.github.com/users/PaulRBerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/PaulRBerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PaulRBerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PaulRBerg/subscriptions",
      "organizations_url": "https://api.github.com/users/PaulRBerg/orgs",
      "repos_url": "https://api.github.com/users/PaulRBerg/repos",
      "events_url": "https://api.github.com/users/PaulRBerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PaulRBerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-02-03T20:21:53Z",
    "updated_at": "2023-02-03T20:21:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "Don't think this issue should have been closed?\r\n\r\nhttps://github.com/mds1/solidity-generators/pull/2 was related but it didn't fix the issue with Foundry itself.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1416361969/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1416364204",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3440#issuecomment-1416364204",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3440",
    "id": 1416364204,
    "node_id": "IC_kwDOGBlvNc5UbACs",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-02-03T20:24:36Z",
    "updated_at": "2023-02-03T20:24:36Z",
    "author_association": "COLLABORATOR",
    "body": "Huh interesting. I guess because I opened this issue originally, a PR from a repo in my namespace was able to close it? Either way, re-opening it now",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1416364204/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1433333360",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3440#issuecomment-1433333360",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3440",
    "id": 1433333360,
    "node_id": "IC_kwDOGBlvNc5Vbu5w",
    "user": {
      "login": "0xGabi",
      "id": 9082013,
      "node_id": "MDQ6VXNlcjkwODIwMTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9082013?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/0xGabi",
      "html_url": "https://github.com/0xGabi",
      "followers_url": "https://api.github.com/users/0xGabi/followers",
      "following_url": "https://api.github.com/users/0xGabi/following{/other_user}",
      "gists_url": "https://api.github.com/users/0xGabi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/0xGabi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/0xGabi/subscriptions",
      "organizations_url": "https://api.github.com/users/0xGabi/orgs",
      "repos_url": "https://api.github.com/users/0xGabi/repos",
      "events_url": "https://api.github.com/users/0xGabi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/0xGabi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-02-16T16:09:16Z",
    "updated_at": "2023-02-16T16:09:16Z",
    "author_association": "NONE",
    "body": "I started experiencing the same issue when I upgrade `foundry` to the latest nightly for the submodule https://github.com/0xPhaze/upgrade-scripts.\r\n\r\nIn my particular case everything was working fine with foundry commit https://github.com/foundry-rs/foundry/commit/3d5f038.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1433333360/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1472396987",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3440#issuecomment-1472396987",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3440",
    "id": 1472396987,
    "node_id": "IC_kwDOGBlvNc5Xwv67",
    "user": {
      "login": "PaulRBerg",
      "id": 8782666,
      "node_id": "MDQ6VXNlcjg3ODI2NjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8782666?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PaulRBerg",
      "html_url": "https://github.com/PaulRBerg",
      "followers_url": "https://api.github.com/users/PaulRBerg/followers",
      "following_url": "https://api.github.com/users/PaulRBerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/PaulRBerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PaulRBerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PaulRBerg/subscriptions",
      "organizations_url": "https://api.github.com/users/PaulRBerg/orgs",
      "repos_url": "https://api.github.com/users/PaulRBerg/repos",
      "events_url": "https://api.github.com/users/PaulRBerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PaulRBerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-16T17:24:07Z",
    "updated_at": "2023-03-16T17:24:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "For future reference: when @mattsse said this:\r\n\r\n> simply overwrite the remapping.\r\n\r\nHe was referring to set one or more of the following remappings in your project:\r\n\r\n```txt\r\nscript/=script/\r\nsrc/=src/\r\ntest/=test/\r\n```\r\n\r\nYou only have to do this for those remappings that are overwritten by your dependencies.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1472396987/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1478062234",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3440#issuecomment-1478062234",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3440",
    "id": 1478062234,
    "node_id": "IC_kwDOGBlvNc5YGXCa",
    "user": {
      "login": "aathan",
      "id": 24279435,
      "node_id": "MDQ6VXNlcjI0Mjc5NDM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/24279435?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aathan",
      "html_url": "https://github.com/aathan",
      "followers_url": "https://api.github.com/users/aathan/followers",
      "following_url": "https://api.github.com/users/aathan/following{/other_user}",
      "gists_url": "https://api.github.com/users/aathan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aathan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aathan/subscriptions",
      "organizations_url": "https://api.github.com/users/aathan/orgs",
      "repos_url": "https://api.github.com/users/aathan/repos",
      "events_url": "https://api.github.com/users/aathan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aathan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-21T15:37:15Z",
    "updated_at": "2023-03-21T15:37:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "I guess my #4597 is this same issue. I just want to add that relative imports in the dependent project suffer from this problem (which seems to contradict some earlier suggestions in this thread). I believe solc resolves those relative paths into relative paths, relative to the project root. Thus `import \"./SomeOtherFile.sol\";` in the dependent project resolves to `src/SomeOtherFile.sol` and then this matches `src/=src/`, which is remapped into the dependency.\r\n\r\nIt seems to me that relative remappings.txt in `lib/...` should be prepended with `lib/...` as they're loaded into foundry's vfs or solc command-line builder?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1478062234/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1636404366",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3440#issuecomment-1636404366",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3440",
    "id": 1636404366,
    "node_id": "IC_kwDOGBlvNc5hiYyO",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-07-14T20:32:19Z",
    "updated_at": "2023-07-14T20:32:19Z",
    "author_association": "MEMBER",
    "body": "Related to https://github.com/foundry-rs/foundry/issues/1855",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1636404366/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1637471928",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3440#issuecomment-1637471928",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3440",
    "id": 1637471928,
    "node_id": "IC_kwDOGBlvNc5hmda4",
    "user": {
      "login": "thedavidmeister",
      "id": 629710,
      "node_id": "MDQ6VXNlcjYyOTcxMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/629710?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/thedavidmeister",
      "html_url": "https://github.com/thedavidmeister",
      "followers_url": "https://api.github.com/users/thedavidmeister/followers",
      "following_url": "https://api.github.com/users/thedavidmeister/following{/other_user}",
      "gists_url": "https://api.github.com/users/thedavidmeister/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/thedavidmeister/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/thedavidmeister/subscriptions",
      "organizations_url": "https://api.github.com/users/thedavidmeister/orgs",
      "repos_url": "https://api.github.com/users/thedavidmeister/repos",
      "events_url": "https://api.github.com/users/thedavidmeister/events{/privacy}",
      "received_events_url": "https://api.github.com/users/thedavidmeister/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-07-17T06:49:20Z",
    "updated_at": "2023-07-17T06:50:19Z",
    "author_association": "NONE",
    "body": "it seems like remappings are not compatible with code that might ever be used as a dependency elsewhere, which is probably most code if you consider that people often like to test their smart contracts against external protocols without needing to always work from mainnet forks.\r\n\r\nmaybe the docs could explain this better\r\n\r\nexamples like\r\n\r\n```\r\nimport \"forge-std/Test.sol\";\r\n```\r\n\r\nshould really be \r\n\r\n```\r\nimport \"../lib/forge-std/src/Test.sol\";\r\n```\r\n\r\nfor a project with a flat `./src/*.sol` structure.\r\n\r\nThe issue I see is that the former promotes/allows unsafe behaviours because, if i understand correctly what foundry is doing, it seems that the version of libs compiled into contracts is whatever version is in the root `lib/*` NOT the version in `lib/somedep/lib`.\r\n\r\nIt would be very easy for some subtle change to be made in a lib that would break the functionality of the dependency, but still compile, and not necessarily show up in testing because the SUT is the current repo, not the dependency.\r\n\r\nI'm still a bit confused as to how this works, but it seems to me like the only way for code to be sure that consumers get the same code including its dependencies is to always use relative paths for everything, including dependency libs.\r\n\r\ni.e. `forge install` recursively checks out dependencies but then `forge build` always remaps every lib to whatever is in the root `lib/` rather than the recursive libs.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1637471928/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1638065289",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3440#issuecomment-1638065289",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3440",
    "id": 1638065289,
    "node_id": "IC_kwDOGBlvNc5houSJ",
    "user": {
      "login": "aathan",
      "id": 24279435,
      "node_id": "MDQ6VXNlcjI0Mjc5NDM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/24279435?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aathan",
      "html_url": "https://github.com/aathan",
      "followers_url": "https://api.github.com/users/aathan/followers",
      "following_url": "https://api.github.com/users/aathan/following{/other_user}",
      "gists_url": "https://api.github.com/users/aathan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aathan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aathan/subscriptions",
      "organizations_url": "https://api.github.com/users/aathan/orgs",
      "repos_url": "https://api.github.com/users/aathan/repos",
      "events_url": "https://api.github.com/users/aathan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aathan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-07-17T12:45:18Z",
    "updated_at": "2023-07-17T12:45:18Z",
    "author_association": "CONTRIBUTOR",
    "body": "The fundamental issue is that *using* a solidity project as a dependency does not mean using its build artifacts, it means using its source code, and therefore its source files, while being built, must resolve *their* dependencies based on that project's own dependencies. When this is combined with the fact that many projects have similar dependencies (e.g., on openzep), import resolution conflicts become likely. We can look to other languages for inspiration so as not to reinvent the wheel (e.g., c's include file search paths, rust toml's [patch...], etc.\r\n\r\nIt seems that a necessary/baseline feature would be for solc to be able to resolve imports based on the context of the instant file being parsed. I think this may NOT be a current feature of solc. What I mean by this is that the imports for a file in a/b/c/d should be resolved based on the fact that that file is in a/b/c/d not based on the fact that the file is in a. Then, if a dev wants to globally override what `lib/openzep` means, there would be some mechanism to explicitly override that resolution everywhere (.e.g., like the toml [patch] or a command line argument to NOT use local context for certain prefixes).\r\n\r\nThe additional problem here is that what a dev has chosen to specify in the import statement, in the source files of a project, plays a big role. As noted in other comments, whether they've chosen to use relative import paths in the source and whether those relative import paths state simply `lib/` or `../[whatever]/lib` can matter.\r\n\r\nAt least some of the above I think can be achieved even without explicit compiler support by re-writing of files, and by clever use or remappings. E.g., all dependencies (recursively) could have the imports that match *their locally specified remappings* re-written to `import \"dep1/lib/...\";` and the remappings specified to the top level compiler would then contains a `dep1/lib` remapping. This would mean foundry is essentially pre-processing the source files and compiling the pre-processed output, not the original files.\r\n\r\npre-processing of solidity is another topic. I almost always find it necessary to use a (custom) python based pre-processor to generate deployment vs dev versions of solidity files for anything but trivial projects. E.g., to strip out console2.log() calls, and/or restructure source files so that contracts deployed to public chains, vs those deployed to anvil or hardhat nodes for testing, are lean and clean.\r\n\r\nThe solidity language devs, IMHO, are not spending enough effort on these issues and need to do an iteration on some of the language features that relate to devops.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1638065289/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1638108427",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3440#issuecomment-1638108427",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3440",
    "id": 1638108427,
    "node_id": "IC_kwDOGBlvNc5ho40L",
    "user": {
      "login": "thedavidmeister",
      "id": 629710,
      "node_id": "MDQ6VXNlcjYyOTcxMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/629710?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/thedavidmeister",
      "html_url": "https://github.com/thedavidmeister",
      "followers_url": "https://api.github.com/users/thedavidmeister/followers",
      "following_url": "https://api.github.com/users/thedavidmeister/following{/other_user}",
      "gists_url": "https://api.github.com/users/thedavidmeister/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/thedavidmeister/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/thedavidmeister/subscriptions",
      "organizations_url": "https://api.github.com/users/thedavidmeister/orgs",
      "repos_url": "https://api.github.com/users/thedavidmeister/repos",
      "events_url": "https://api.github.com/users/thedavidmeister/events{/privacy}",
      "received_events_url": "https://api.github.com/users/thedavidmeister/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-07-17T13:08:13Z",
    "updated_at": "2023-07-17T13:08:13Z",
    "author_association": "NONE",
    "body": "@aathan FWIW i just went down the road of switching to relative imports and it looks like a bit of a dead end actually\r\n\r\nthe problem is if you have two deps with the _same_ dependency as a relative path in their respective `lib` directories\r\n\r\nany types that exist in this _same_ dependency (i.e. exact commit same) are treated as different types by the compiler\r\n\r\ni've had this experience in rust as it is strict about types only being the same type if the dep is exactly the same, but rust is aware of git revisions so treats identical deps as identical, however they are imported\r\n\r\ni'm now wondering, in lieu of what sound like large low level upstream changes, if it would be possible to have some kind of warning/error if foundry detects a discrepency between the ?unavoidable? root level dep commit/version and the same dependency used somewhere in the tree of submodules",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1638108427/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1638143772",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3440#issuecomment-1638143772",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3440",
    "id": 1638143772,
    "node_id": "IC_kwDOGBlvNc5hpBcc",
    "user": {
      "login": "thedavidmeister",
      "id": 629710,
      "node_id": "MDQ6VXNlcjYyOTcxMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/629710?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/thedavidmeister",
      "html_url": "https://github.com/thedavidmeister",
      "followers_url": "https://api.github.com/users/thedavidmeister/followers",
      "following_url": "https://api.github.com/users/thedavidmeister/following{/other_user}",
      "gists_url": "https://api.github.com/users/thedavidmeister/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/thedavidmeister/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/thedavidmeister/subscriptions",
      "organizations_url": "https://api.github.com/users/thedavidmeister/orgs",
      "repos_url": "https://api.github.com/users/thedavidmeister/repos",
      "events_url": "https://api.github.com/users/thedavidmeister/events{/privacy}",
      "received_events_url": "https://api.github.com/users/thedavidmeister/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-07-17T13:27:30Z",
    "updated_at": "2023-07-17T13:27:30Z",
    "author_association": "NONE",
    "body": "or alternatively, if same-commit identical submodules are found, perhaps there's a way for forge to normalize/dedupe them to avoid the type issues",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1638143772/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1638261282",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3440#issuecomment-1638261282",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3440",
    "id": 1638261282,
    "node_id": "IC_kwDOGBlvNc5hpeIi",
    "user": {
      "login": "aathan",
      "id": 24279435,
      "node_id": "MDQ6VXNlcjI0Mjc5NDM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/24279435?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aathan",
      "html_url": "https://github.com/aathan",
      "followers_url": "https://api.github.com/users/aathan/followers",
      "following_url": "https://api.github.com/users/aathan/following{/other_user}",
      "gists_url": "https://api.github.com/users/aathan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aathan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aathan/subscriptions",
      "organizations_url": "https://api.github.com/users/aathan/orgs",
      "repos_url": "https://api.github.com/users/aathan/repos",
      "events_url": "https://api.github.com/users/aathan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aathan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-07-17T14:25:59Z",
    "updated_at": "2023-07-17T14:25:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "Oh ya, I forgot about the type names. solc would need to \"namespace\" the type names based on which source files are referencing the type name, such that the types are matched vs those defined only in the imports of that source file; and, if a type reference in a file outside said project resolves to a type in that project, e.g., via a qualified name, that has to resolve correctly too.\r\n\r\nFor example, if some global `struct Foo` is defined in an import inside a `lib/` project, but is also defined in the top level project, should that be an error? Or should the source files inside `lib/` find that struct, and the source files at the top level should find the other one? It's a mess, but that sounds about right.\r\n\r\nThe foregoing paragraph was written before I read https://github.com/foundry-rs/foundry/issues/3440#issuecomment-1638108427 which seems to imply solc *does* distinguish types based on import source. I've simply not done any careful observation of this issue. Are you sure about that? My assumption would have been than a global scope struct is resolved irrespective of it's import source, and any conflicts have more to do with the import ordering of a particular compilation unit, than the namespace or type annotations made by solc when traversing a type def. Some experiments are in order, and/or I am going to reference this conversation to the solc devs.\r\n\r\n@thedavidmeister as far as the relative imports go, that is precisely the issue I was addressing in the prior comment. To clarify, what I was suggesting is that foundry's build strategy should change to a \"preprocess then compile the preprocessed output dir\", and all imports in the output (i.e., preprocessor output) would be rewritten such that relative imports in subprojects are prepended with a unique id (`lib/...` --> `projA/lib/...`) such that they become distinguishable, and (possibly *generated*) top-level remappings can specify `projA/lib/...` `projB/lib/...` in a completely disambiguated fashion.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1638261282/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1638426973",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3440#issuecomment-1638426973",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3440",
    "id": 1638426973,
    "node_id": "IC_kwDOGBlvNc5hqGld",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-07-17T15:58:01Z",
    "updated_at": "2023-07-17T15:58:11Z",
    "author_association": "MEMBER",
    "body": "> The issue I see is that the former promotes/allows unsafe behaviours because, if i understand correctly what foundry is doing, it seems that the version of libs compiled into contracts is whatever version is in the root lib/* NOT the version in lib/somedep/lib.\r\n\r\nThis is exactly what #5397 fixes, PTAL. It scopes remappings in e.g. `lib/some-lib` to that folder, so imports in `lib/some-lib` will resolve to `lib/some-lib/lib`.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1638426973/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1638646577",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3440#issuecomment-1638646577",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3440",
    "id": 1638646577,
    "node_id": "IC_kwDOGBlvNc5hq8Mx",
    "user": {
      "login": "thedavidmeister",
      "id": 629710,
      "node_id": "MDQ6VXNlcjYyOTcxMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/629710?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/thedavidmeister",
      "html_url": "https://github.com/thedavidmeister",
      "followers_url": "https://api.github.com/users/thedavidmeister/followers",
      "following_url": "https://api.github.com/users/thedavidmeister/following{/other_user}",
      "gists_url": "https://api.github.com/users/thedavidmeister/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/thedavidmeister/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/thedavidmeister/subscriptions",
      "organizations_url": "https://api.github.com/users/thedavidmeister/orgs",
      "repos_url": "https://api.github.com/users/thedavidmeister/repos",
      "events_url": "https://api.github.com/users/thedavidmeister/events{/privacy}",
      "received_events_url": "https://api.github.com/users/thedavidmeister/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-07-17T18:20:47Z",
    "updated_at": "2023-07-17T18:20:47Z",
    "author_association": "NONE",
    "body": "@onbjerg that sounds basically perfect to me, does it introduce the issue i saw with relative paths though?\r\n\r\nnamely that some type can be defined in two commit-identical dependencies and treated by solidity as different types?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1638646577/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1639906147",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3440#issuecomment-1639906147",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3440",
    "id": 1639906147,
    "node_id": "IC_kwDOGBlvNc5hvvtj",
    "user": {
      "login": "thedavidmeister",
      "id": 629710,
      "node_id": "MDQ6VXNlcjYyOTcxMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/629710?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/thedavidmeister",
      "html_url": "https://github.com/thedavidmeister",
      "followers_url": "https://api.github.com/users/thedavidmeister/followers",
      "following_url": "https://api.github.com/users/thedavidmeister/following{/other_user}",
      "gists_url": "https://api.github.com/users/thedavidmeister/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/thedavidmeister/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/thedavidmeister/subscriptions",
      "organizations_url": "https://api.github.com/users/thedavidmeister/orgs",
      "repos_url": "https://api.github.com/users/thedavidmeister/repos",
      "events_url": "https://api.github.com/users/thedavidmeister/events{/privacy}",
      "received_events_url": "https://api.github.com/users/thedavidmeister/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-07-18T09:52:51Z",
    "updated_at": "2023-07-18T09:52:51Z",
    "author_association": "NONE",
    "body": "@Evalir @onbjerg  actually i'm still getting quite a lot of errors that mean i can't compile based on import resolving\r\n\r\n```\r\nthedavidmeister@davids-iMac rain.orderbook % forge build\r\n[⠊] Compiling...\r\n[⠒] Unable to resolve imports:\r\n      \"rain.datacontract/lib/LibDataContract.sol\" in \"/Users/thedavidmeister/Code/rain.orderbook/lib/rain.interpreter/src/concrete/RainterpreterExpressionDeployerNP.sol\"\r\n      \"rain.datacontract/lib/LibDataContract.sol\" in \"/Users/thedavidmeister/Code/rain.orderbook/lib/rain.interpreter/src/concrete/RainterpreterNP.sol\"\r\n      \"rain.solmem/lib/LibStackPointer.sol\" in \"/Users/thedavidmeister/Code/rain.orderbook/lib/rain.interpreter/src/lib/op/evm/LibOpTimestamp.sol\"\r\n      \"rain.solmem/lib/LibMemCpy.sol\" in \"/Users/thedavidmeister/Code/rain.orderbook/lib/rain.interpreter/src/lib/op/LibOp.sol\"\r\n      \"rain.solmem/lib/LibPointer.sol\" in \"/Users/thedavidmeister/Code/rain.orderbook/lib/rain.interpreter/src/lib/state/LibInterpreterState.sol\"\r\n      \"rain.lib.memkv/lib/LibMemoryKV.sol\" in \"/Users/thedavidmeister/Code/rain.orderbook/lib/rain.interpreter/src/lib/state/LibInterpreterState.sol\"\r\n      \"rain.solmem/lib/LibUint256Array.sol\" in \"/Users/thedavidmeister/Code/rain.orderbook/lib/rain.interpreter/src/lib/caller/LibContext.sol\"\r\n      \"rain.solmem/lib/LibPointer.sol\" in \"/Users/thedavidmeister/Code/rain.orderbook/lib/rain.interpreter/src/lib/integrity/LibIntegrityCheck.sol\"\r\n      \"rain.solmem/lib/LibMemCpy.sol\" in \"/Users/thedavidmeister/Code/rain.orderbook/lib/rain.interpreter/src/lib/state/LibInterpreterStateDataContract.sol\"\r\n      \"rain.solmem/lib/LibStackPointer.sol\" in \"/Users/thedavidmeister/Code/rain.orderbook/lib/rain.interpreter/src/lib/integrity/LibIntegrityCheck.sol\"\r\n      \"rain.solmem/src/lib/LibPointer.sol\" in \"/Users/thedavidmeister/Code/rain.orderbook/lib/rain.interpreter/src/concrete/RainterpreterExpressionDeployerNP.sol\"\r\n      \"rain.solmem/lib/LibStackPointer.sol\" in \"/Users/thedavidmeister/Code/rain.orderbook/lib/rain.interpreter/src/concrete/RainterpreterExpressionDeployerNP.sol\"\r\n      \"rain.solmem/lib/LibUint256Array.sol\" in \"/Users/thedavidmeister/Code/rain.orderbook/lib/rain.interpreter/src/lib/op/LibOp.sol\"\r\n      \"rain.solmem/lib/LibPointer.sol\" in \"/Users/thedavidmeister/Code/rain.orderbook/lib/rain.interpreter/src/lib/op/LibOp.sol\"\r\n      \"rain.solmem/lib/LibBytes.sol\" in \"/Users/thedavidmeister/Code/rain.orderbook/lib/rain.interpreter/src/lib/state/LibInterpreterStateDataContract.sol\"\r\n      \"rain.solmem/lib/LibStackPointer.sol\" in \"/Users/thedavidmeister/Code/rain.orderbook/lib/rain.interpreter/src/lib/op/evm/LibOpBlockNumber.sol\"\r\n      \"rain.solmem/lib/LibPointer.sol\" in \"/Users/thedavidmeister/Code/rain.orderbook/lib/rain.interpreter/src/lib/state/LibInterpreterStateDataContract.sol\"\r\n      \"rain.solmem/lib/LibStackPointer.sol\" in \"/Users/thedavidmeister/Code/rain.orderbook/lib/rain.interpreter/src/lib/op/evm/LibOpChainId.sol\"\r\n      \"rain.solmem/lib/LibStackPointer.sol\" in \"/Users/thedavidmeister/Code/rain.orderbook/lib/rain.interpreter/src/lib/op/LibOp.sol\"\r\n      \"rain.solmem/lib/LibPointer.sol\" in \"/Users/thedavidmeister/Code/rain.orderbook/lib/rain.interpreter/src/lib/parse/LibParse.sol\"\r\nwith remappings:\r\n      caller/=/Users/thedavidmeister/Code/rain.orderbook/lib/rain.interpreter/src/lib/caller/\r\n      compile/=/Users/thedavidmeister/Code/rain.orderbook/lib/rain.interpreter/src/lib/compile/\r\n      ds-test/=/Users/thedavidmeister/Code/rain.orderbook/lib/forge-std/lib/ds-test/src/\r\n      erc4626-tests/=/Users/thedavidmeister/Code/rain.orderbook/lib/openzeppelin-contracts/lib/erc4626-tests/\r\n      eval/=/Users/thedavidmeister/Code/rain.orderbook/lib/rain.interpreter/src/lib/eval/\r\n      extern/=/Users/thedavidmeister/Code/rain.orderbook/lib/rain.interpreter/src/lib/extern/\r\n      forge-std/=/Users/thedavidmeister/Code/rain.orderbook/lib/forge-std/src/\r\n      integrity/=/Users/thedavidmeister/Code/rain.orderbook/lib/rain.interpreter/src/lib/integrity/\r\n      ns/=/Users/thedavidmeister/Code/rain.orderbook/lib/rain.interpreter/src/lib/ns/\r\n      op/=/Users/thedavidmeister/Code/rain.orderbook/lib/rain.interpreter/src/lib/op/\r\n      openzeppelin-contracts/=/Users/thedavidmeister/Code/rain.orderbook/lib/openzeppelin-contracts/\r\n      parse/=/Users/thedavidmeister/Code/rain.orderbook/lib/rain.interpreter/src/lib/parse/\r\n      rain.chainlink/=/Users/thedavidmeister/Code/rain.orderbook/lib/rain.interpreter/lib/rain.chainlink/src/\r\n      rain.erc1820/=/Users/thedavidmeister/Code/rain.orderbook/lib/rain.erc1820/src/\r\n      rain.extrospection/=/Users/thedavidmeister/Code/rain.orderbook/lib/rain.factory/lib/rain.extrospection/\r\n      rain.factory/=/Users/thedavidmeister/Code/rain.orderbook/lib/rain.factory/\r\n      rain.interpreter/=/Users/thedavidmeister/Code/rain.orderbook/lib/rain.interpreter/src/\r\n      rain.lib.hash/=/Users/thedavidmeister/Code/rain.orderbook/lib/rain.interpreter/lib/rain.lib.memkv/lib/rain.lib.hash/src/\r\n      rain.lib.typecast/=/Users/thedavidmeister/Code/rain.orderbook/lib/rain.interpreter/lib/rain.lib.typecast/src/\r\n      rain.math.fixedpoint/=/Users/thedavidmeister/Code/rain.orderbook/lib/rain.math.fixedpoint/src/\r\n      rain.math.saturating/=/Users/thedavidmeister/Code/rain.orderbook/lib/rain.math.fixedpoint/lib/rain.math.saturating/src/\r\n      rain.metadata/=/Users/thedavidmeister/Code/rain.orderbook/lib/rain.metadata/src/\r\n      state/=/Users/thedavidmeister/Code/rain.orderbook/lib/rain.interpreter/src/lib/state/\r\n      lib/openzeppelin-contracts:openzeppelin/=/Users/thedavidmeister/Code/rain.orderbook/lib/openzeppelin-contracts/contracts/\r\n      lib/rain.factory:rain.datacontract/=/Users/thedavidmeister/Code/rain.orderbook/lib/rain.factory/lib/rain.interpreter/lib/rain.datacontract/src/\r\n      lib/rain.factory:rain.lib.memkv/=/Users/thedavidmeister/Code/rain.orderbook/lib/rain.factory/lib/rain.interpreter/lib/rain.lib.memkv/src/\r\n      lib/rain.factory:rain.solmem/=/Users/thedavidmeister/Code/rain.orderbook/lib/rain.factory/lib/rain.extrospection/lib/rain.solmem/src/\r\n```\r\n\r\nThe only way I can see to fix these is to install the deps globally in the root of the project, they aren't being picked up by the submodule as the submodule's own deps\r\n\r\nI think this issue is still unresolved (i ran foundryup just now)\r\n\r\n```\r\nthedavidmeister@davids-iMac rain.orderbook % forge --version\r\nforge 0.2.0 (8e365be 2023-07-18T00:32:55.929185000Z)\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1639906147/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1639916970",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3440#issuecomment-1639916970",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3440",
    "id": 1639916970,
    "node_id": "IC_kwDOGBlvNc5hvyWq",
    "user": {
      "login": "thedavidmeister",
      "id": 629710,
      "node_id": "MDQ6VXNlcjYyOTcxMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/629710?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/thedavidmeister",
      "html_url": "https://github.com/thedavidmeister",
      "followers_url": "https://api.github.com/users/thedavidmeister/followers",
      "following_url": "https://api.github.com/users/thedavidmeister/following{/other_user}",
      "gists_url": "https://api.github.com/users/thedavidmeister/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/thedavidmeister/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/thedavidmeister/subscriptions",
      "organizations_url": "https://api.github.com/users/thedavidmeister/orgs",
      "repos_url": "https://api.github.com/users/thedavidmeister/repos",
      "events_url": "https://api.github.com/users/thedavidmeister/events{/privacy}",
      "received_events_url": "https://api.github.com/users/thedavidmeister/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-07-18T10:00:22Z",
    "updated_at": "2023-07-18T10:02:13Z",
    "author_association": "NONE",
    "body": "It also looks like the same issue as relative paths has now been introduced for remapped paths @onbjerg \r\n\r\ntypes from deps on the same git commit are treated as different types\r\n\r\n```\r\nthedavidmeister@davids-iMac rain.orderbook % forge test\r\n[⠊] Compiling...\r\n[⠑] Compiling 115 files with 0.8.19\r\n[⠘] Solc 0.8.19 finished in 2.71s\r\nError: \r\nCompiler run failed:\r\nError (2333): Identifier already declared.\r\n --> lib/rain.interpreter/src/concrete/RainterpreterExpressionDeployerNP.sol:8:1:\r\n  |\r\n8 | import \"rain.datacontract/lib/LibDataContract.sol\";\r\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\nNote: The previous declaration is here:\r\n  --> lib/rain.solmem/src/lib/LibPointer.sol:16:1:\r\n   |\r\n16 | library LibPointer {\r\n   | ^ (Relevant source part starts here and spans across multiple lines).\r\n\r\nError (2333): Identifier already declared.\r\n --> lib/rain.interpreter/src/concrete/RainterpreterExpressionDeployerNP.sol:8:1:\r\n  |\r\n8 | import \"rain.datacontract/lib/LibDataContract.sol\";\r\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\nNote: The previous declaration is here:\r\n --> lib/rain.solmem/src/lib/LibPointer.sol:8:1:\r\n  |\r\n8 | type Pointer is uint256;\r\n  | ^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nthedavidmeister@davids-iMac rain.orderbook % cd lib/rain.interpreter/lib/rain.datacontract/lib/rain.solmem/\r\nthedavidmeister@davids-iMac rain.solmem % git log\r\ncommit 7b2f04d6e0d7d4573e6b0a17bd9c7b84a7fde05f (grafted, HEAD, origin/main, origin/HEAD, main)\r\nAuthor: David Meister <thedavidmeister@gmail.com>\r\nDate:   Mon Jul 10 14:26:49 2023 +0400\r\n\r\n    Merge pull request #4 from rainprotocol/2023-07-10-index-signed\r\n    \r\n    toIndexSigned\r\nthedavidmeister@davids-iMac rain.solmem % cd ../../../rain.solmem \r\nthedavidmeister@davids-iMac rain.solmem % git log\r\ncommit 7b2f04d6e0d7d4573e6b0a17bd9c7b84a7fde05f (grafted, HEAD, origin/main, origin/HEAD, main)\r\nAuthor: David Meister <thedavidmeister@gmail.com>\r\nDate:   Mon Jul 10 14:26:49 2023 +0400\r\n\r\n    Merge pull request #4 from rainprotocol/2023-07-10-index-signed\r\n    \r\n    toIndexSigned\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1639916970/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1640197137",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3440#issuecomment-1640197137",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3440",
    "id": 1640197137,
    "node_id": "IC_kwDOGBlvNc5hw2wR",
    "user": {
      "login": "thedavidmeister",
      "id": 629710,
      "node_id": "MDQ6VXNlcjYyOTcxMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/629710?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/thedavidmeister",
      "html_url": "https://github.com/thedavidmeister",
      "followers_url": "https://api.github.com/users/thedavidmeister/followers",
      "following_url": "https://api.github.com/users/thedavidmeister/following{/other_user}",
      "gists_url": "https://api.github.com/users/thedavidmeister/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/thedavidmeister/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/thedavidmeister/subscriptions",
      "organizations_url": "https://api.github.com/users/thedavidmeister/orgs",
      "repos_url": "https://api.github.com/users/thedavidmeister/repos",
      "events_url": "https://api.github.com/users/thedavidmeister/events{/privacy}",
      "received_events_url": "https://api.github.com/users/thedavidmeister/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-07-18T13:07:01Z",
    "updated_at": "2023-07-18T13:07:01Z",
    "author_association": "NONE",
    "body": "@aathan the problem with just saying that types should be different if they are in different folders, is that sometimes they _are_ the same\r\n\r\nin the example i'm running into now ^^ i did start going down the road of manually differentiating between `Pointer` depending on where it comes from, like `import { Pointer as DataContractPointer } from ...`\r\n\r\nthen what you run into is \"can't automatically convert between types\" which involves wrapping and unwrapping every type at every function boundary. If you write some library that wants its type as an input/output then you can't use that library in two places in a single repo.\r\n\r\nnow, if these `Pointer` types were from different source code, no matter how \"minor\" the difference, then sure I agree that the correct thing to do is treat them differently (that's what rust does)\r\n\r\nin this case though, the exact same commit of a dependency is being treated as \"already declared\" simply because two different deps use it\r\n\r\nperhaps if we were to use the preprocessing idea that you are suggesting, all the nested deps could be \"hoisted\" to the root\r\nlib and have a few bytes of their commit appended like `openzeppelin-contracts@01234567` which would have the effect of \"deduping\" while preserving the ability to \"mess around\" manually for debugging if the need arises.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1640197137/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
