{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/693",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/693/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/693/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/693/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/693",
  "id": 1126287037,
  "node_id": "I_kwDOGBlvNc5DIca9",
  "number": 693,
  "title": "Using OpenZeppelin upgradable smart contracts with forge",
  "user": {
    "login": "Ignacio-Freire",
    "id": 13722088,
    "node_id": "MDQ6VXNlcjEzNzIyMDg4",
    "avatar_url": "https://avatars.githubusercontent.com/u/13722088?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Ignacio-Freire",
    "html_url": "https://github.com/Ignacio-Freire",
    "followers_url": "https://api.github.com/users/Ignacio-Freire/followers",
    "following_url": "https://api.github.com/users/Ignacio-Freire/following{/other_user}",
    "gists_url": "https://api.github.com/users/Ignacio-Freire/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Ignacio-Freire/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Ignacio-Freire/subscriptions",
    "organizations_url": "https://api.github.com/users/Ignacio-Freire/orgs",
    "repos_url": "https://api.github.com/users/Ignacio-Freire/repos",
    "events_url": "https://api.github.com/users/Ignacio-Freire/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Ignacio-Freire/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3593644820,
      "node_id": "LA_kwDOGBlvNc7WMqsU",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-feature",
      "name": "T-feature",
      "color": "BFD4F2",
      "default": false,
      "description": "Type: feature"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 6,
  "created_at": "2022-02-07T17:27:54Z",
  "updated_at": "2023-05-01T15:22:05Z",
  "closed_at": "2022-02-11T15:09:30Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "### Discussed in https://github.com/gakonst/foundry/discussions/692\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **Ignacio-Freire** February  7, 2022</sup>\r\nHello everyone,\r\n\r\nI've been searching on the docs, issues and discussions for the last 2 days but I haven't been able to find anything related to this. So I decided to start a discussion and check if anyone was able to overcome this issue.\r\n\r\nThe project I'm working at has a central \"controller\" smart contract that is upgradable, so far we have 3 versions. While using hardhat in addition to the OpenZeppelin `test-helpers`, it's really easy to deploy the version 1 with all the parameters and then upgrade to version 3 while keeping all the data.                           \r\n\r\nThis is done by using `deployProxy `and then `upgradeProxy`. \r\n\r\nI'm guessing the way to do this on Foundry could also be deploying the ProxyAdmin, the Proxy and the SC manually to later upgrade it.\r\n\r\nI was wondering if there's anything similar to the `test-helpers` implemented with Foundry or if anyone has an example on how to do it.\r\n\r\nThanks a lot!\r\n\r\n</div>",
  "closed_by": {
    "login": "Ignacio-Freire",
    "id": 13722088,
    "node_id": "MDQ6VXNlcjEzNzIyMDg4",
    "avatar_url": "https://avatars.githubusercontent.com/u/13722088?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Ignacio-Freire",
    "html_url": "https://github.com/Ignacio-Freire",
    "followers_url": "https://api.github.com/users/Ignacio-Freire/followers",
    "following_url": "https://api.github.com/users/Ignacio-Freire/following{/other_user}",
    "gists_url": "https://api.github.com/users/Ignacio-Freire/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Ignacio-Freire/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Ignacio-Freire/subscriptions",
    "organizations_url": "https://api.github.com/users/Ignacio-Freire/orgs",
    "repos_url": "https://api.github.com/users/Ignacio-Freire/repos",
    "events_url": "https://api.github.com/users/Ignacio-Freire/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Ignacio-Freire/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/693/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/693/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1031817581",
    "html_url": "https://github.com/foundry-rs/foundry/issues/693#issuecomment-1031817581",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/693",
    "id": 1031817581,
    "node_id": "IC_kwDOGBlvNc49gElt",
    "user": {
      "login": "gakonst",
      "id": 17802178,
      "node_id": "MDQ6VXNlcjE3ODAyMTc4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17802178?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gakonst",
      "html_url": "https://github.com/gakonst",
      "followers_url": "https://api.github.com/users/gakonst/followers",
      "following_url": "https://api.github.com/users/gakonst/following{/other_user}",
      "gists_url": "https://api.github.com/users/gakonst/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gakonst/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gakonst/subscriptions",
      "organizations_url": "https://api.github.com/users/gakonst/orgs",
      "repos_url": "https://api.github.com/users/gakonst/repos",
      "events_url": "https://api.github.com/users/gakonst/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gakonst/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-07T19:08:39Z",
    "updated_at": "2022-02-07T19:08:39Z",
    "author_association": "MEMBER",
    "body": "Could you add a strawman proposal of your ideal UX for this feature in Foundry?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1031817581/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1032408844",
    "html_url": "https://github.com/foundry-rs/foundry/issues/693#issuecomment-1032408844",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/693",
    "id": 1032408844,
    "node_id": "IC_kwDOGBlvNc49iU8M",
    "user": {
      "login": "Ignacio-Freire",
      "id": 13722088,
      "node_id": "MDQ6VXNlcjEzNzIyMDg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/13722088?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Ignacio-Freire",
      "html_url": "https://github.com/Ignacio-Freire",
      "followers_url": "https://api.github.com/users/Ignacio-Freire/followers",
      "following_url": "https://api.github.com/users/Ignacio-Freire/following{/other_user}",
      "gists_url": "https://api.github.com/users/Ignacio-Freire/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Ignacio-Freire/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Ignacio-Freire/subscriptions",
      "organizations_url": "https://api.github.com/users/Ignacio-Freire/orgs",
      "repos_url": "https://api.github.com/users/Ignacio-Freire/repos",
      "events_url": "https://api.github.com/users/Ignacio-Freire/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Ignacio-Freire/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-08T09:44:41Z",
    "updated_at": "2022-02-08T09:44:41Z",
    "author_association": "NONE",
    "body": "Hello!\r\n\r\nThanks for the response. \r\n\r\nSo in the end not many lines were needed to implement the upgradable contracts with Foundry. It might not be worthy to add as an extra feature.\r\n\r\nNonetheless, here's the code I'm using to deploy a ControllerV1 contract and then upgrade straight to a V4. You can check if it's worth it to look into it a little bit more.\r\n\r\n\r\n**Test File**\r\n\r\n```\r\n// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol\";\r\nimport \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\r\nimport \"./ControllerV1.sol\";\r\nimport \"./ControllerV4.sol\";\r\nimport \"ds-test/test.sol\";\r\n\r\ncontract OZUpgradeTest is DSTest {\r\n    ControllerV1 controllerV1;\r\n    ControllerV4 controllerV4;\r\n    TransparentUpgradeableProxy transparentProxy;\r\n    ProxyAdmin proxyAdmin;\r\n\r\n    ControllerV4 latestController;\r\n\r\n    function setUp() public {\r\n      \r\n      controllerV1 = new ControllerV1();\r\n\r\n      controllerV4 = new ControllerV4();\r\n\r\n      transparentProxy = new TransparentUpgradeableProxy(address(controllerV1), address(this), \"\");\r\n\r\n      proxyAdmin = new ProxyAdmin();\r\n      \r\n      transparentProxy.changeAdmin(address(proxyAdmin));\r\n\r\n      ControllerV1(address(transparentProxy)).initialize(\r\n        address(this), \r\n        address(this), \r\n        address(this));\r\n\r\n      proxyAdmin.upgrade(transparentProxy, address(controllerV4));\r\n\r\n      latestController = ControllerV4(address(transparentProxy));\r\n     }\r\n\r\n    function testControllerDeploy() public {\r\n      address admin = latestController.admin(); \r\n      uint version = latestController.getVersion();\r\n      assertEq(version , 4);\r\n      assertEq(admin, address(this));\r\n    }\r\n}\r\n```\r\n\r\n**ControllerV1** \r\n\r\n```\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\r\n\r\ninterface IController {\r\n    function admin() external view returns (address);\r\n}\r\n\r\ncontract ControllerV1 is IController, Initializable, ContextUpgradeable, PausableUpgradeable {\r\n    \r\n    // IMPORTANT!: For future reference, when adding new variables for following versions of the controller. \r\n    // All the previous ones should be kept in place and not change locations, types or names.\r\n    // If thye're modified this would cause issues with the memory slots.\r\n\r\n    address override public pauseAdmin;\r\n    address override public admin;\r\n    address override public recoveryAdmin;\r\n\r\n    function getVersion() external pure returns (uint256) {\r\n        return 1;\r\n    }\r\n}\r\n```\r\n\r\n**ControllerV4** \r\n\r\n```\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\r\n\r\ninterface IController {\r\n    function admin() external view returns (address);\r\n}\r\n\r\ncontract ControllerV4 is IController, Initializable, ContextUpgradeable, PausableUpgradeable {\r\n    \r\n    // IMPORTANT!: For future reference, when adding new variables for following versions of the controller. \r\n    // All the previous ones should be kept in place and not change locations, types or names.\r\n    // If thye're modified this would cause issues with the memory slots.\r\n\r\n    address override public pauseAdmin;\r\n    address override public admin;\r\n    address override public recoveryAdmin;\r\n\r\n    function getVersion() external pure returns (uint256) {\r\n        return 4;\r\n    }\r\n}\r\n```\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1032408844/reactions",
      "total_count": 9,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 2,
      "rocket": 0,
      "eyes": 5
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1122014755",
    "html_url": "https://github.com/foundry-rs/foundry/issues/693#issuecomment-1122014755",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/693",
    "id": 1122014755,
    "node_id": "IC_kwDOGBlvNc5C4JYj",
    "user": {
      "login": "wdv4758h",
      "id": 2716047,
      "node_id": "MDQ6VXNlcjI3MTYwNDc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2716047?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wdv4758h",
      "html_url": "https://github.com/wdv4758h",
      "followers_url": "https://api.github.com/users/wdv4758h/followers",
      "following_url": "https://api.github.com/users/wdv4758h/following{/other_user}",
      "gists_url": "https://api.github.com/users/wdv4758h/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wdv4758h/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wdv4758h/subscriptions",
      "organizations_url": "https://api.github.com/users/wdv4758h/orgs",
      "repos_url": "https://api.github.com/users/wdv4758h/repos",
      "events_url": "https://api.github.com/users/wdv4758h/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wdv4758h/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-10T07:12:33Z",
    "updated_at": "2022-06-13T05:38:58Z",
    "author_association": "NONE",
    "body": "I have a sort of related question.\r\n\r\nI got OpenZeppelin upgradable smart contracts, and I used to deploy/upgrade via their `upgrades.deployProxy` and `upgrades.upgradeProxy` in with Hardhat.\r\n\r\nI know that I can use my existing JavaScript to keep deploying the contract. But I'm wondering if there is a convenient way to do it with `forge create`? When I use `forge create`, the `initialize` function in the contract seems not be executed. I guess that was handled in the [upgrades](https://github.com/OpenZeppelin/openzeppelin-upgrades) tool.\r\n\r\nSomething like a `--openzeppelin-upgrades` flag will be great. But I'm not sure if it's feasible.\r\n\r\n---\r\n**UPDATE**\r\n\r\nI get things work now, I have a small shell script to help doing it.\r\n\r\nIn case it helps other people, here is what I'm doing:\r\n1. have env files to config the proxy address I'm using\r\n2. check the contract proxy address via `cast storage`\r\n3. if it does not looks like the proxy contract I want, deploy a ERC1967Proxy contract with `forge create` and pass the `--constructor-args` with result of `cast calldata initialize()()`\r\n4. If the new proxy contract is deployed, write back the address to env file I'm using\r\n5. deploy the real contract I have with `forge create`\r\n6. use `cast send` to call `upgradeTo(address)` on proxy contract address to update",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1122014755/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1397842690",
    "html_url": "https://github.com/foundry-rs/foundry/issues/693#issuecomment-1397842690",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/693",
    "id": 1397842690,
    "node_id": "IC_kwDOGBlvNc5TUWMC",
    "user": {
      "login": "tonisives",
      "id": 1083534,
      "node_id": "MDQ6VXNlcjEwODM1MzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1083534?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tonisives",
      "html_url": "https://github.com/tonisives",
      "followers_url": "https://api.github.com/users/tonisives/followers",
      "following_url": "https://api.github.com/users/tonisives/following{/other_user}",
      "gists_url": "https://api.github.com/users/tonisives/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tonisives/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tonisives/subscriptions",
      "organizations_url": "https://api.github.com/users/tonisives/orgs",
      "repos_url": "https://api.github.com/users/tonisives/repos",
      "events_url": "https://api.github.com/users/tonisives/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tonisives/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-20T02:13:08Z",
    "updated_at": "2023-01-20T02:13:08Z",
    "author_association": "NONE",
    "body": "I used a simple script to deploy UUPS impementation, and then the proxy with this implementation address and initialize call:\r\n\r\n### the deploy script\r\n```solidity\r\n// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.17;\r\n\r\nimport \"forge-std/Script.sol\";\r\nimport {ERC1967Proxy} from \"../../src/lib/proxy/ERC1967Proxy.sol\";\r\nimport {AuditPurchase} from \"../../src/AuditPurchase.sol\";\r\n\r\ncontract AuditPurchaseScript is Script {\r\n  function setUp() public {}\r\n\r\n  function run() public {\r\n    // read private from env variable\r\n    uint256 privateKey = vm.envUint(\"TEST_DEPLOYMENT_KEY\");\r\n    vm.startBroadcast(privateKey);\r\n\r\n    AuditPurchase auditPurchaseImp = new AuditPurchase();\r\n\r\n    ERC1967Proxy auditPurchaseProxy = new ERC1967Proxy(\r\n      address(auditPurchaseImp),\r\n      abi.encodeWithSignature(\"initialize(uint256)\", 0.001 ether)\r\n    );\r\n\r\n    vm.stopBroadcast();\r\n  }\r\n}\r\n```\r\n\r\n### the implementation\r\n```solidity\r\ncontract AuditPurchase is OwnableUpgradeable, UUPSUpgradeable, AuditPurchaseStorageV1 {\r\n  function initialize(uint256 price_) public initializer {\r\n    __Ownable_init();\r\n    __UUPSUpgradeable_init();\r\n    price = price_;\r\n  }\r\n}\r\n```\r\n\r\n### the proxy contract\r\n```solidity\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\nimport {ERC1967UpgradeUpgradeable} from \"@openzeppelin-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\";\r\nimport {Proxy} from \"@openzeppelin/proxy/Proxy.sol\";\r\n\r\ncontract ERC1967Proxy is Proxy, ERC1967UpgradeUpgradeable {\r\n    constructor(address _logic, bytes memory _data) payable {\r\n        _upgradeToAndCall(_logic, _data, false);\r\n    }\r\n\r\n    /// @dev The address of the current implementation\r\n    function _implementation() internal view override returns (address) {\r\n        return ERC1967UpgradeUpgradeable._getImplementation();\r\n    }\r\n}\r\n```\r\n\r\n\r\n\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1397842690/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1528973011",
    "html_url": "https://github.com/foundry-rs/foundry/issues/693#issuecomment-1528973011",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/693",
    "id": 1528973011,
    "node_id": "IC_kwDOGBlvNc5bIkbT",
    "user": {
      "login": "itsabinashb",
      "id": 101852693,
      "node_id": "U_kgDOBhImFQ",
      "avatar_url": "https://avatars.githubusercontent.com/u/101852693?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/itsabinashb",
      "html_url": "https://github.com/itsabinashb",
      "followers_url": "https://api.github.com/users/itsabinashb/followers",
      "following_url": "https://api.github.com/users/itsabinashb/following{/other_user}",
      "gists_url": "https://api.github.com/users/itsabinashb/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/itsabinashb/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/itsabinashb/subscriptions",
      "organizations_url": "https://api.github.com/users/itsabinashb/orgs",
      "repos_url": "https://api.github.com/users/itsabinashb/repos",
      "events_url": "https://api.github.com/users/itsabinashb/events{/privacy}",
      "received_events_url": "https://api.github.com/users/itsabinashb/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-04-30T08:49:44Z",
    "updated_at": "2023-04-30T08:49:44Z",
    "author_association": "NONE",
    "body": "Can i do something like this:\r\nThere should be 2 contract,1. implementation and 2. proxy contract. implementation contract will hold all the main logic of my dapp where proxy contract will hold just function of changing implementation contract's address. First i will have to deploy the implementation contract.Now, proxy contract, should be inherited from UUPSUpgradeable, must have _authorizeUpgrade(address implementation). Then i will have to deploy the proxy contract. Now whenever i will have to change the code i change it and redeploy it with new code, then pass the implementation contract address to the authorizeUpgrade() to update the contract. After upgrading only the contract code will change, the state and record for every user will remain unchanged.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1528973011/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1529829458",
    "html_url": "https://github.com/foundry-rs/foundry/issues/693#issuecomment-1529829458",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/693",
    "id": 1529829458,
    "node_id": "IC_kwDOGBlvNc5bL1hS",
    "user": {
      "login": "itsabinashb",
      "id": 101852693,
      "node_id": "U_kgDOBhImFQ",
      "avatar_url": "https://avatars.githubusercontent.com/u/101852693?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/itsabinashb",
      "html_url": "https://github.com/itsabinashb",
      "followers_url": "https://api.github.com/users/itsabinashb/followers",
      "following_url": "https://api.github.com/users/itsabinashb/following{/other_user}",
      "gists_url": "https://api.github.com/users/itsabinashb/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/itsabinashb/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/itsabinashb/subscriptions",
      "organizations_url": "https://api.github.com/users/itsabinashb/orgs",
      "repos_url": "https://api.github.com/users/itsabinashb/repos",
      "events_url": "https://api.github.com/users/itsabinashb/events{/privacy}",
      "received_events_url": "https://api.github.com/users/itsabinashb/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-01T15:22:04Z",
    "updated_at": "2023-05-01T15:22:04Z",
    "author_association": "NONE",
    "body": "My proxy contract looks like this: \r\n```\r\npragma solidity ^0.8.10;\r\n\r\nimport \"openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol\";\r\nimport \"openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\";\r\nimport \"openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\";\r\n\r\ncontract Proxy is Initializable, UUPSUpgradeable, OwnableUpgradeable {\r\n    address implemented;\r\n\r\n    function initialize(address _newImplementation) public initializer {\r\n        __UUPSUpgradeable_init();\r\n        __Ownable_init();\r\n        implemented = _newImplementation;\r\n    }\r\n\r\n    function upgradeTo(\r\n        address newImplementation\r\n    ) external virtual override onlyProxy {\r\n        _authorizeUpgrade(newImplementation);\r\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\r\n    }\r\n\r\n    function _authorizeUpgrade(\r\n        address newImplementation\r\n    ) internal virtual override {}\r\n\r\n    function getImplementedAddress() public view returns (address) {\r\n        return implemented;\r\n    }\r\n}\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1529829458/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
