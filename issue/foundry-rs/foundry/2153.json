{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/2153",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2153/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2153/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2153/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/2153",
  "id": 1288667513,
  "node_id": "I_kwDOGBlvNc5Mz4F5",
  "number": 2153,
  "title": "feat: JSON parsing cheatcodes",
  "user": {
    "login": "mds1",
    "id": 17163988,
    "node_id": "MDQ6VXNlcjE3MTYzOTg4",
    "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mds1",
    "html_url": "https://github.com/mds1",
    "followers_url": "https://api.github.com/users/mds1/followers",
    "following_url": "https://api.github.com/users/mds1/following{/other_user}",
    "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
    "organizations_url": "https://api.github.com/users/mds1/orgs",
    "repos_url": "https://api.github.com/users/mds1/repos",
    "events_url": "https://api.github.com/users/mds1/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mds1/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3593644820,
      "node_id": "LA_kwDOGBlvNc7WMqsU",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-feature",
      "name": "T-feature",
      "color": "BFD4F2",
      "default": false,
      "description": "Type: feature"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 15,
  "created_at": "2022-06-29T12:41:54Z",
  "updated_at": "2022-08-11T13:51:31Z",
  "closed_at": "2022-08-11T13:51:31Z",
  "author_association": "COLLABORATOR",
  "active_lock_reason": null,
  "body": "### Component\n\nForge\n\n### Describe the feature you would like\n\nThe ability to easily parse JSON files within Solidity is very useful for things like reading deploy script outputs, config files, etc. Here is a proposed spec on how this should be implemented:\r\n\r\n## Cheatcodes\r\n\r\nThe `readFile` cheatcode already exists, and we just add a `parseJson` cheatcode which takes a string of JSON and `key`, specified using the same syntax as [`jq`](https://stedolan.github.io/jq/manual/). It returns the data of each key as ABI-encoded `bytes`.\r\n\r\nThis implies `parseJson` will need to infer data types from the JSON to ABI-encode them appropriately. In particular, we need to distinguish between a hex string that's `bytes` (bytes get right-padded) vs. a hex string that's a number (numbers get left-padded). I think ethers.js has a convention for distinguishing these, we should check that convention, use the same one, document it, and make sure it's followed when the JSON output files from scripts are written. I think the convention is `0x1234` for a number and `[0x12, 0x34]` for a bytes but am not certain.\r\n\r\n```solidity\r\ninterface Vm {\r\n  // Reads the entire content of file to string, (path) => (data)\r\n  function readFile(string calldata) external returns (string memory);\r\n\r\n  // Given a string of JSON, find the provided key, (stringified json) => (ABI-encoded data)\r\n  function parseJson(string calldata json, string calldata key) external view returns (bytes memory);\r\n}\r\n```\n\r\n## forge-std\r\n\r\nWe'll also add new forge-std helpers to `Test.sol`, as shown below.\r\n\r\n```solidity\r\n// Everything shown here is new and not yet present in Test\r\ncontract Test {\r\n  // Reading in deployment logs will be common, so let's include helpers for\r\n  // them in forge-std.\r\n  // NOTE: Not all of the below data types are correct, we need to verify them,\r\n  // e.g. I think nonce is really a uint64.\r\n  struct Transaction {\r\n    uint256 txType;\r\n    address from;\r\n    address to;\r\n    uint256 gas;\r\n    uint256 value;\r\n    bytes data;\r\n    uint256 nonce;\r\n  }\r\n\r\n  struct TransactionDetail {\r\n    bytes32 hash;\r\n    // e.g. F0 for CREATE, this is called `type` in the output but that's a solidity keyword.\r\n    // We should consider changing that for consistency.\r\n    bytes1 opcode;\r\n    string contractName;\r\n    address contractAddress;\r\n    Transaction transaction;\r\n  }\r\n\r\n  struct Receipt {\r\n    bytes32 transactionHash;\r\n    // --- snip, you get the idea ---\r\n  }\r\n\r\n  // Read in all deployments transactions.\r\n  function readTransactions(string memory path) internal view returns (TransactionDetail[] memory) {\r\n    string memory deployData = vm.readFile(path);\r\n    bytes memory parsedDeployData = vm.parseJson(deployData, \".transactions[]\");\r\n    return abi.decode(parsedDeployData, (TransactionDetail[]));\r\n  }\r\n\r\n  // Analogous to readTransactions, but for receipts.\r\n  function readReceipts(string memory path) internal view returns (Receipt[] memory) {\r\n    // --- snip, you get the idea ---\r\n  }\r\n\r\n  // Helpers for parsing keys into types. We'd include these for all value types\r\n  // as well as `bytes`, `string`, `uint256[]`, and `int256[]`. Only two are shown below.\r\n  function readUint256(string memory json, string memory key) internal view returns (uint256) {\r\n      return abi.decode(vm.parseJson(json, key), (uint256));\r\n  }\r\n  function readBytes32(string memory json, string memory key) internal view returns (bytes32) {\r\n      return abi.decode(vm.parseJson(json, key), (bytes32));\r\n  }\r\n}\r\n```\r\n\r\n## Example Usage\r\n\r\nThe above would result in the following sample usage.\r\n\r\n```solidity\r\ncontract MyTest is Test {\r\n  string internal constant deployFile = \"broadcast/Deploy.s.sol/10/run-latest.json\";\r\n\r\n  function myFunction() public {\r\n    // Get all deployment transactions.\r\n    TransactionDetail[] memory transactions = readTransactions(deployFile);\r\n\r\n    // Get the name of the first contract deployed.\r\n    string memory deployData = vm.readJson(deployFile);\r\n    string memory contractName = abi.decode(vm.parseJson(deployData, \".transactions[0].contractName\"), (string));\r\n\r\n    // Get the nonce and transaction hash of the first contract deployed.\r\n    uint256 nonce = readUint256(deployData, \".transactions[0].tx.nonce\");\r\n    bytes32 txHash = readBytes32(deployData, \".transactions[0].hash\");\r\n  }\r\n}\r\n```\n\n### Additional context\n\n_No response_",
  "closed_by": {
    "login": "mattsse",
    "id": 19890894,
    "node_id": "MDQ6VXNlcjE5ODkwODk0",
    "avatar_url": "https://avatars.githubusercontent.com/u/19890894?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mattsse",
    "html_url": "https://github.com/mattsse",
    "followers_url": "https://api.github.com/users/mattsse/followers",
    "following_url": "https://api.github.com/users/mattsse/following{/other_user}",
    "gists_url": "https://api.github.com/users/mattsse/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mattsse/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mattsse/subscriptions",
    "organizations_url": "https://api.github.com/users/mattsse/orgs",
    "repos_url": "https://api.github.com/users/mattsse/repos",
    "events_url": "https://api.github.com/users/mattsse/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mattsse/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/2153/reactions",
    "total_count": 8,
    "+1": 4,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 4
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2153/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1169980059",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2153#issuecomment-1169980059",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2153",
    "id": 1169980059,
    "node_id": "IC_kwDOGBlvNc5FvHqb",
    "user": {
      "login": "mattsse",
      "id": 19890894,
      "node_id": "MDQ6VXNlcjE5ODkwODk0",
      "avatar_url": "https://avatars.githubusercontent.com/u/19890894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mattsse",
      "html_url": "https://github.com/mattsse",
      "followers_url": "https://api.github.com/users/mattsse/followers",
      "following_url": "https://api.github.com/users/mattsse/following{/other_user}",
      "gists_url": "https://api.github.com/users/mattsse/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mattsse/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mattsse/subscriptions",
      "organizations_url": "https://api.github.com/users/mattsse/orgs",
      "repos_url": "https://api.github.com/users/mattsse/repos",
      "events_url": "https://api.github.com/users/mattsse/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mattsse/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-29T13:27:07Z",
    "updated_at": "2022-06-29T13:27:07Z",
    "author_association": "MEMBER",
    "body": "returning it as abi-coded bytes is quite clever and probably the simplest solution to the problem that we do not know how to encode the json value.\r\n\r\nalso providing types for transactions (receipts) etc. out of the box is probably a good idea.\r\n\r\n\r\nA more advanced solution would be to apply some preprocessing akin to rust macros that generates the necessary solidity glue code for custom data types first",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1169980059/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1170469958",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2153#issuecomment-1170469958",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2153",
    "id": 1170469958,
    "node_id": "IC_kwDOGBlvNc5Fw_RG",
    "user": {
      "login": "maurelian",
      "id": 23033765,
      "node_id": "MDQ6VXNlcjIzMDMzNzY1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23033765?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/maurelian",
      "html_url": "https://github.com/maurelian",
      "followers_url": "https://api.github.com/users/maurelian/followers",
      "following_url": "https://api.github.com/users/maurelian/following{/other_user}",
      "gists_url": "https://api.github.com/users/maurelian/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/maurelian/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/maurelian/subscriptions",
      "organizations_url": "https://api.github.com/users/maurelian/orgs",
      "repos_url": "https://api.github.com/users/maurelian/repos",
      "events_url": "https://api.github.com/users/maurelian/events{/privacy}",
      "received_events_url": "https://api.github.com/users/maurelian/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-29T20:37:02Z",
    "updated_at": "2022-06-29T21:09:57Z",
    "author_association": "NONE",
    "body": "Where I think this would be interesting/helpful is in working with [deployment artifacts](https://github.com/ethereum-optimism/optimism/tree/develop/packages/contracts-bedrock/deployments/goerli). We could then write **integration tests**(!) and interact with both L1 and L2 nodes using the scripting functionality (AFAIUI). ",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1170469958/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1171613882",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2153#issuecomment-1171613882",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2153",
    "id": 1171613882,
    "node_id": "IC_kwDOGBlvNc5F1Wi6",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-30T19:49:34Z",
    "updated_at": "2022-06-30T19:49:34Z",
    "author_association": "MEMBER",
    "body": "Bonus if the ABI-coder stuff for JSON can be re-used for https://github.com/foundry-rs/foundry/issues/858 as well (similar thoughts on ABI encoding and passing that)",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1171613882/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1172881326",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2153#issuecomment-1172881326",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2153",
    "id": 1172881326,
    "node_id": "IC_kwDOGBlvNc5F6L-u",
    "user": {
      "login": "odyslam",
      "id": 13405632,
      "node_id": "MDQ6VXNlcjEzNDA1NjMy",
      "avatar_url": "https://avatars.githubusercontent.com/u/13405632?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/odyslam",
      "html_url": "https://github.com/odyslam",
      "followers_url": "https://api.github.com/users/odyslam/followers",
      "following_url": "https://api.github.com/users/odyslam/following{/other_user}",
      "gists_url": "https://api.github.com/users/odyslam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/odyslam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/odyslam/subscriptions",
      "organizations_url": "https://api.github.com/users/odyslam/orgs",
      "repos_url": "https://api.github.com/users/odyslam/repos",
      "events_url": "https://api.github.com/users/odyslam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/odyslam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-02T11:15:36Z",
    "updated_at": "2022-07-02T11:15:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "For implementation, I found this [crate](https://docs.rs/json-query/latest/json_query/index.html) that uses C bindings from jq to parse the syntax natively. Is it a dependency we are ok with or do we prefer to implement the parsing natively?\r\n\r\ncc @onbjerg @mattsse \r\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1172881326/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1172911602",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2153#issuecomment-1172911602",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2153",
    "id": 1172911602,
    "node_id": "IC_kwDOGBlvNc5F6TXy",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-02T14:55:40Z",
    "updated_at": "2022-07-02T14:55:40Z",
    "author_association": "MEMBER",
    "body": "There are a number of JSON path crates in Rust as well, e.g. https://docs.rs/jsonpath-rust/latest/jsonpath_rust/\r\n\r\nI'd prefer we don't use C bindings as it might complicate our cross platform builds",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1172911602/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1175357021",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2153#issuecomment-1175357021",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2153",
    "id": 1175357021,
    "node_id": "IC_kwDOGBlvNc5GDoZd",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-05T18:19:17Z",
    "updated_at": "2022-07-05T18:19:17Z",
    "author_association": "COLLABORATOR",
    "body": "Note that part of the scope of this issue involves changing broadcast artifacts such that txs/receipts are saved with the correct types to facilitate type inference when reading JSON. For example, gas and nonce should be numbers instead of hex strings, etc.\r\n\r\nfrom @mattsse in https://github.com/foundry-rs/foundry/pull/2217#issuecomment-1175354247\r\n> we'd need to do `Value -> Abi types` anyway, I guess",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1175357021/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1176085821",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2153#issuecomment-1176085821",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2153",
    "id": 1176085821,
    "node_id": "IC_kwDOGBlvNc5GGaU9",
    "user": {
      "login": "odyslam",
      "id": 13405632,
      "node_id": "MDQ6VXNlcjEzNDA1NjMy",
      "avatar_url": "https://avatars.githubusercontent.com/u/13405632?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/odyslam",
      "html_url": "https://github.com/odyslam",
      "followers_url": "https://api.github.com/users/odyslam/followers",
      "following_url": "https://api.github.com/users/odyslam/following{/other_user}",
      "gists_url": "https://api.github.com/users/odyslam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/odyslam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/odyslam/subscriptions",
      "organizations_url": "https://api.github.com/users/odyslam/orgs",
      "repos_url": "https://api.github.com/users/odyslam/repos",
      "events_url": "https://api.github.com/users/odyslam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/odyslam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-06T11:01:58Z",
    "updated_at": "2022-07-06T11:01:58Z",
    "author_association": "CONTRIBUTOR",
    "body": "That's a good note @mds1. \r\n\r\nI used the crate mentioned by @onbjerg and it seems to be working well. I want to see how to deal with abi encoding complex structures e.g an array of arrays. \r\n\r\nHad some personal matters, but should resume dev from tomorrow.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1176085821/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1188778330",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2153#issuecomment-1188778330",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2153",
    "id": 1188778330,
    "node_id": "IC_kwDOGBlvNc5G21Fa",
    "user": {
      "login": "tynes",
      "id": 6626818,
      "node_id": "MDQ6VXNlcjY2MjY4MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6626818?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tynes",
      "html_url": "https://github.com/tynes",
      "followers_url": "https://api.github.com/users/tynes/followers",
      "following_url": "https://api.github.com/users/tynes/following{/other_user}",
      "gists_url": "https://api.github.com/users/tynes/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tynes/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tynes/subscriptions",
      "organizations_url": "https://api.github.com/users/tynes/orgs",
      "repos_url": "https://api.github.com/users/tynes/repos",
      "events_url": "https://api.github.com/users/tynes/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tynes/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-19T08:49:45Z",
    "updated_at": "2022-07-19T08:49:45Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think that this would be very useful for parsing addresses out of deployment artifacts for chainops. A network could be configured and then the corresponding addresses could be read from json files and then pulled into a script. This is one of the nicer features of hardhat scripts.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1188778330/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1196390020",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2153#issuecomment-1196390020",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2153",
    "id": 1196390020,
    "node_id": "IC_kwDOGBlvNc5HT3aE",
    "user": {
      "login": "odyslam",
      "id": 13405632,
      "node_id": "MDQ6VXNlcjEzNDA1NjMy",
      "avatar_url": "https://avatars.githubusercontent.com/u/13405632?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/odyslam",
      "html_url": "https://github.com/odyslam",
      "followers_url": "https://api.github.com/users/odyslam/followers",
      "following_url": "https://api.github.com/users/odyslam/following{/other_user}",
      "gists_url": "https://api.github.com/users/odyslam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/odyslam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/odyslam/subscriptions",
      "organizations_url": "https://api.github.com/users/odyslam/orgs",
      "repos_url": "https://api.github.com/users/odyslam/repos",
      "events_url": "https://api.github.com/users/odyslam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/odyslam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-27T07:58:55Z",
    "updated_at": "2022-07-28T10:11:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "As part of this workstream, I consider the ability to write JSON files as well. \r\n\r\nI am considering the following API:\r\n\r\n- Define `string` path to file\r\n- Define `string[]` array of keys\r\n- Define `string[]` array of values (user can use `vm.toString()`)\r\n- Define `bool` overwrite to select append (false) or overwrite (true) if filename exists\r\n- Pass them to `vm.writeJson(path, keys, values, overwrite)`\r\n\r\nAnother way to go about it would be to use `vm.writeFile()` and make a forge-std library to do that. Could be tricky on how to append though. \r\n\r\nThoughts? @mds1 @onbjerg \r\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1196390020/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1200310597",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2153#issuecomment-1200310597",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2153",
    "id": 1200310597,
    "node_id": "IC_kwDOGBlvNc5Hi0lF",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-30T23:13:09Z",
    "updated_at": "2022-07-30T23:13:20Z",
    "author_association": "MEMBER",
    "body": "So keys would be something like `[\".foo.bar\"]` and values would be `[\"baz\"]`, resulting in `{ foo: { bar: \"baz\" } }`? Seems ok, but not entirely sure how that would work w/ things like arrays and numbers :thinking: ",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1200310597/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1200389118",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2153#issuecomment-1200389118",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2153",
    "id": 1200389118,
    "node_id": "IC_kwDOGBlvNc5HjHv-",
    "user": {
      "login": "odyslam",
      "id": 13405632,
      "node_id": "MDQ6VXNlcjEzNDA1NjMy",
      "avatar_url": "https://avatars.githubusercontent.com/u/13405632?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/odyslam",
      "html_url": "https://github.com/odyslam",
      "followers_url": "https://api.github.com/users/odyslam/followers",
      "following_url": "https://api.github.com/users/odyslam/following{/other_user}",
      "gists_url": "https://api.github.com/users/odyslam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/odyslam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/odyslam/subscriptions",
      "organizations_url": "https://api.github.com/users/odyslam/orgs",
      "repos_url": "https://api.github.com/users/odyslam/repos",
      "events_url": "https://api.github.com/users/odyslam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/odyslam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-31T09:43:49Z",
    "updated_at": "2022-07-31T09:43:49Z",
    "author_association": "CONTRIBUTOR",
    "body": "@onbjerg you are right. It wouldn't work for arbitrary objects and paths, only if you want to add a value at the top level of the json object.\r\n\r\nAnother idea is the following:\r\n- Append to existing json object\r\n\t- read object with `vm.readFile` and `vm.parseJson` into a struct\r\n\t-  modify struct\r\n\t- Define `string[]` array of key names, ordered the same way as the values are ordered in the struct\r\n\t- Define `string[]` array of types, ordered the same way as the values are ordered in the struct\r\n- Write new json object\r\n\t- Same as above, without first reading a json file into the struct \r\n\r\nExample:\r\n```\r\nstruct StoreToJson{\r\n\t  address receiver;\r\n\t  uint256 amount;\r\n\t  Transaction transaction; // transaction object from a forge script deployment\r\n}\r\n\r\nstruct Transaction {\r\n\tstring sender;\r\n\tuint256 nonce;\r\n}\r\n\r\nstring[] memory keys = [ \"receiver\", \"amount\", \"passphrase\"];\r\nstring[] memory types = [ \"address\", \"uint256\", \"tuple(\\\"string\\\", \\\"uint256\\\")\" ];\r\n\r\nvm.writeJson(abi.encode(StoreToJson), keys, types);\r\n```\r\n\r\nI don't love it, but I can't think of something better",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1200389118/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1200389140",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2153#issuecomment-1200389140",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2153",
    "id": 1200389140,
    "node_id": "IC_kwDOGBlvNc5HjHwU",
    "user": {
      "login": "odyslam",
      "id": 13405632,
      "node_id": "MDQ6VXNlcjEzNDA1NjMy",
      "avatar_url": "https://avatars.githubusercontent.com/u/13405632?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/odyslam",
      "html_url": "https://github.com/odyslam",
      "followers_url": "https://api.github.com/users/odyslam/followers",
      "following_url": "https://api.github.com/users/odyslam/following{/other_user}",
      "gists_url": "https://api.github.com/users/odyslam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/odyslam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/odyslam/subscriptions",
      "organizations_url": "https://api.github.com/users/odyslam/orgs",
      "repos_url": "https://api.github.com/users/odyslam/repos",
      "events_url": "https://api.github.com/users/odyslam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/odyslam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-31T09:44:00Z",
    "updated_at": "2022-07-31T09:44:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "> @onbjerg you are right. It wouldn't work for arbitrary objects and paths, only if you want to add a value at the top level of the json object.\r\n> \r\n> Another idea is the following:\r\n> \r\n> * Append to existing json object\r\n>   \r\n>   * read object with `vm.readFile` and `vm.parseJson` into a struct\r\n>   * modify struct\r\n>   * Define `string[]` array of key names, ordered the same way as the values are ordered in the struct\r\n>   * Define `string[]` array of types, ordered the same way as the values are ordered in the struct\r\n> * Write new json object\r\n>   \r\n>   * Same as above, without first reading a json file into the struct\r\n> \r\n> Example:\r\n> \r\n> ```\r\n> struct StoreToJson{\r\n> \t  address receiver;\r\n> \t  uint256 amount;\r\n> \t  Transaction transaction; // transaction object from a forge script deployment\r\n> }\r\n> \r\n> struct Transaction {\r\n> \tstring sender;\r\n> \tuint256 nonce;\r\n> }\r\n> \r\n> string[] memory keys = [ \"receiver\", \"amount\", \"passphrase\"];\r\n> string[] memory types = [ \"address\", \"uint256\", \"tuple(\\\"string\\\", \\\"uint256\\\")\" ];\r\n> \r\n> vm.writeJson(abi.encode(StoreToJson), keys, types);\r\n> ```\r\n> \r\n> I don't love it, but I can't think of something better\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1200389140/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1200426222",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2153#issuecomment-1200426222",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2153",
    "id": 1200426222,
    "node_id": "IC_kwDOGBlvNc5HjQzu",
    "user": {
      "login": "mattsse",
      "id": 19890894,
      "node_id": "MDQ6VXNlcjE5ODkwODk0",
      "avatar_url": "https://avatars.githubusercontent.com/u/19890894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mattsse",
      "html_url": "https://github.com/mattsse",
      "followers_url": "https://api.github.com/users/mattsse/followers",
      "following_url": "https://api.github.com/users/mattsse/following{/other_user}",
      "gists_url": "https://api.github.com/users/mattsse/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mattsse/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mattsse/subscriptions",
      "organizations_url": "https://api.github.com/users/mattsse/orgs",
      "repos_url": "https://api.github.com/users/mattsse/repos",
      "events_url": "https://api.github.com/users/mattsse/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mattsse/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-31T13:31:38Z",
    "updated_at": "2022-07-31T13:31:38Z",
    "author_association": "MEMBER",
    "body": "the core problem is that we need to find a way to map fields to (name+type), there's no way around this.\r\n\r\none way to solve this would be with helper methods, for example:\r\n\r\n![telegram-cloud-photo-size-2-5399978758703790781-y](https://user-images.githubusercontent.com/19890894/182028548-f2ebf664-9eea-4b9b-b51a-09abdb4842f7.jpg)\r\n\r\n\r\nthen you'd need one function per type:\r\n\r\n\r\n```solidity\r\nfunction serialize(MyStruct m, Serializer s) returns bytes {\r\n  SerliazeMap map = s.serialize_map();\r\n  \r\n  map.serialize_entry(\"value\", m.value);\r\n  ...\r\n   \r\n  return map.end()\r\n}\r\n\r\n```\r\n\r\nwith a custom json serializer we can then simplify this to\r\n\r\n```solidity\r\nfunction toJson(MyStruct m) {\r\n   return serialize(m, cheats.jsonSerializer());\r\n}\r\n```\r\n\r\nwhere `jsonSerializer` returns a cheat code contract that has bindings for all the serializer calls and creates the JSON object ",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1200426222/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1207375709",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2153#issuecomment-1207375709",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2153",
    "id": 1207375709,
    "node_id": "IC_kwDOGBlvNc5H9xdd",
    "user": {
      "login": "odyslam",
      "id": 13405632,
      "node_id": "MDQ6VXNlcjEzNDA1NjMy",
      "avatar_url": "https://avatars.githubusercontent.com/u/13405632?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/odyslam",
      "html_url": "https://github.com/odyslam",
      "followers_url": "https://api.github.com/users/odyslam/followers",
      "following_url": "https://api.github.com/users/odyslam/following{/other_user}",
      "gists_url": "https://api.github.com/users/odyslam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/odyslam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/odyslam/subscriptions",
      "organizations_url": "https://api.github.com/users/odyslam/orgs",
      "repos_url": "https://api.github.com/users/odyslam/repos",
      "events_url": "https://api.github.com/users/odyslam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/odyslam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-07T10:20:04Z",
    "updated_at": "2022-08-07T10:20:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "Last week was quite eventful, so didn't have the time to work on this. @mattsse thanks for the spec. I will riff on that in code and report back.e",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1207375709/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1210889105",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2153#issuecomment-1210889105",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2153",
    "id": 1210889105,
    "node_id": "IC_kwDOGBlvNc5ILLOR",
    "user": {
      "login": "Oighty",
      "id": 90539730,
      "node_id": "MDQ6VXNlcjkwNTM5NzMw",
      "avatar_url": "https://avatars.githubusercontent.com/u/90539730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Oighty",
      "html_url": "https://github.com/Oighty",
      "followers_url": "https://api.github.com/users/Oighty/followers",
      "following_url": "https://api.github.com/users/Oighty/following{/other_user}",
      "gists_url": "https://api.github.com/users/Oighty/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Oighty/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Oighty/subscriptions",
      "organizations_url": "https://api.github.com/users/Oighty/orgs",
      "repos_url": "https://api.github.com/users/Oighty/repos",
      "events_url": "https://api.github.com/users/Oighty/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Oighty/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-10T15:41:34Z",
    "updated_at": "2022-08-10T15:44:50Z",
    "author_association": "CONTRIBUTOR",
    "body": "I recently wrote a small Solidity library ([quabi](https://github.com/Oighty/quabi/blob/master/src/Quabi.sol)) using `jq` with `vm.ffi` to parse specific data from contract ABI files. I think the approach here is superior. However, additional helper functions in forge-std would be useful to abstract common parses such as the transaction data or, for example, lists of function selectors from a contract ABI.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1210889105/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
