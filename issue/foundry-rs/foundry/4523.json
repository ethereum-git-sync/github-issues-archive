{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/4523",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4523/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4523/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4523/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/4523",
  "id": 1619659546,
  "node_id": "I_kwDOGBlvNc5gigsa",
  "number": 4523,
  "title": "GasMetering generates different results compared to gasleft() diff",
  "user": {
    "login": "Tudmotu",
    "id": 506487,
    "node_id": "MDQ6VXNlcjUwNjQ4Nw==",
    "avatar_url": "https://avatars.githubusercontent.com/u/506487?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Tudmotu",
    "html_url": "https://github.com/Tudmotu",
    "followers_url": "https://api.github.com/users/Tudmotu/followers",
    "following_url": "https://api.github.com/users/Tudmotu/following{/other_user}",
    "gists_url": "https://api.github.com/users/Tudmotu/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Tudmotu/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Tudmotu/subscriptions",
    "organizations_url": "https://api.github.com/users/Tudmotu/orgs",
    "repos_url": "https://api.github.com/users/Tudmotu/repos",
    "events_url": "https://api.github.com/users/Tudmotu/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Tudmotu/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3334394228,
      "node_id": "MDU6TGFiZWwzMzM0Mzk0MjI4",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-bug",
      "name": "T-bug",
      "color": "d73a4a",
      "default": false,
      "description": "Type: bug"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2023-03-10T21:47:11Z",
  "updated_at": "2023-03-13T14:43:52Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "### Component\r\n\r\nForge\r\n\r\n### Have you ensured that all of these are up to date?\r\n\r\n- [X] Foundry\r\n- [X] Foundryup\r\n\r\n### What version of Foundry are you on?\r\n\r\nforge 0.2.0 (ed9298d 2023-03-09T00:04:28.809303436Z)\r\n\r\n### What command(s) is the bug in?\r\n\r\nforge test\r\n\r\n### Operating System\r\n\r\nLinux\r\n\r\n### Describe the bug\r\n\r\nIn certain scenarios, using `vm.pause/resumeGasMetering()` will yield results that differ from what `gasleft()` would yield.\r\n\r\nBelow is a simplified reproducible example:\r\n```solidity\r\npragma solidity ^0.8.18;\r\n\r\nimport 'forge-std/Test.sol';\r\n\r\ncontract GasMeterTest is Test {\r\n    mapping(uint => bytes32) map;\r\n\r\n    function test_GasMeter () public {\r\n        vm.pauseGasMetering();\r\n\r\n        for (uint i = 0; i < 10000; i++) {\r\n            map[i] = keccak256(abi.encode(i));\r\n        }\r\n\r\n        vm.resumeGasMetering();\r\n\r\n        for (uint i = 0; i < 10000; i++) {\r\n            map[i] = keccak256(abi.encode(i));\r\n        }\r\n    }\r\n\r\n    function test_GasLeft () public {\r\n        for (uint i = 0; i < 10000; i++) {\r\n            map[i] = keccak256(abi.encode(i));\r\n        }\r\n\r\n        uint start = gasleft();\r\n        for (uint i = 0; i < 10000; i++) {\r\n            map[i] = keccak256(abi.encode(i));\r\n        }\r\n        console2.log(\"Gas cost:\", start - gasleft());\r\n    }\r\n}\r\n```\r\n\r\nThe output shows the difference:\r\n```\r\nRunning 2 tests for test/GasMeterTest.sol:GasMeterTest\r\n[PASS] test_GasLeft() (gas: 231370361)\r\nLogs:\r\n  Gas cost: 6464479\r\n\r\n[PASS] test_GasMeter() (gas: 7308777)\r\nTest result: ok. 2 passed; 0 failed; finished in 38.05ms\r\n```\r\n\r\nWe can see that when calculating the gas used by diffing `gasleft()`, we get `6464479` while using the `vm.pause/resumeGasMetering` cheatcode, we get `7308777`.\r\n\r\nI've seen more complex scenarios (that are too long to share) where the difference is considerably larger.",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/4523/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4523/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1464907673",
    "html_url": "https://github.com/foundry-rs/foundry/issues/4523#issuecomment-1464907673",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4523",
    "id": 1464907673,
    "node_id": "IC_kwDOGBlvNc5XULeZ",
    "user": {
      "login": "mattsse",
      "id": 19890894,
      "node_id": "MDQ6VXNlcjE5ODkwODk0",
      "avatar_url": "https://avatars.githubusercontent.com/u/19890894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mattsse",
      "html_url": "https://github.com/mattsse",
      "followers_url": "https://api.github.com/users/mattsse/followers",
      "following_url": "https://api.github.com/users/mattsse/following{/other_user}",
      "gists_url": "https://api.github.com/users/mattsse/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mattsse/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mattsse/subscriptions",
      "organizations_url": "https://api.github.com/users/mattsse/orgs",
      "repos_url": "https://api.github.com/users/mattsse/repos",
      "events_url": "https://api.github.com/users/mattsse/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mattsse/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-11T13:01:42Z",
    "updated_at": "2023-03-11T13:01:42Z",
    "author_association": "MEMBER",
    "body": "tbh am lacking some details on how this is implemented \r\n\r\nMaybe @ArtificialPB can shed some light on this?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1464907673/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1466216916",
    "html_url": "https://github.com/foundry-rs/foundry/issues/4523#issuecomment-1466216916",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4523",
    "id": 1466216916,
    "node_id": "IC_kwDOGBlvNc5XZLHU",
    "user": {
      "login": "ArtificialPB",
      "id": 4672155,
      "node_id": "MDQ6VXNlcjQ2NzIxNTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4672155?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ArtificialPB",
      "html_url": "https://github.com/ArtificialPB",
      "followers_url": "https://api.github.com/users/ArtificialPB/followers",
      "following_url": "https://api.github.com/users/ArtificialPB/following{/other_user}",
      "gists_url": "https://api.github.com/users/ArtificialPB/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ArtificialPB/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ArtificialPB/subscriptions",
      "organizations_url": "https://api.github.com/users/ArtificialPB/orgs",
      "repos_url": "https://api.github.com/users/ArtificialPB/repos",
      "events_url": "https://api.github.com/users/ArtificialPB/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ArtificialPB/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-13T14:10:36Z",
    "updated_at": "2023-03-13T14:43:52Z",
    "author_association": "CONTRIBUTOR",
    "body": "@mattsse had a quick look, it seems that `memory` gas is being used twice. Using `gasleft` in `vm.pause/resumeGasMetering` case also produces the wrong result.\r\n\r\nThe following seems to be happening:\r\n1. we pause gas metering,\r\n2. lots of memory is expanded while in the first loop,\r\n3. we resume gas metering, overriding the actual gas used with cached `gas` from before we expanded the memory. The memory stays expanded, but the costs related to it are gone.\r\n4. in the second loop, we start expanding the memory again. Memory gas cost is always set to current number of used words, regardless by how much it was expanded. When metering memory expansion costs, we don't increment by the `words expanded delta * gas cost of word expansion`, but rather set memory gas used to `total words expanded * gas cost of word expansion` . Check `record_memory` function in revm: https://github.com/bluealloy/revm/blob/afc30663270f77df9b4399ad9d4cfb0ad2b814ec/crates/interpreter/src/gas.rs#L74-L84\r\n5. on first memory expansion in second loop, the gas costs are recorded as if we just expanded the memory up to total size. E.g. if we expanded memory from `3200` bits to `3232`, the `gas_memory` cost is as if we just expanded `101` words (`3232 / 32`) of memory.\r\n\r\nThis means that in the second loop, after we resume gas metering, the total cost of memory expansion is accounted for as soon as we expand the memory again. Need to find a way to ignore/discard the memory expansion costs while metering is paused.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1466216916/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 1
    },
    "performed_via_github_app": null
  }
]
