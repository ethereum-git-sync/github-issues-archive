{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/5840",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5840/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5840/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5840/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/5840",
  "id": 1899452531,
  "node_id": "I_kwDOGBlvNc5xN1hz",
  "number": 5840,
  "title": "Discrepancy in block.number during on-chain deployement in Forge script",
  "user": {
    "login": "Maroutis",
    "id": 118286466,
    "node_id": "U_kgDOBwzogg",
    "avatar_url": "https://avatars.githubusercontent.com/u/118286466?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Maroutis",
    "html_url": "https://github.com/Maroutis",
    "followers_url": "https://api.github.com/users/Maroutis/followers",
    "following_url": "https://api.github.com/users/Maroutis/following{/other_user}",
    "gists_url": "https://api.github.com/users/Maroutis/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Maroutis/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Maroutis/subscriptions",
    "organizations_url": "https://api.github.com/users/Maroutis/orgs",
    "repos_url": "https://api.github.com/users/Maroutis/repos",
    "events_url": "https://api.github.com/users/Maroutis/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Maroutis/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3334394228,
      "node_id": "MDU6TGFiZWwzMzM0Mzk0MjI4",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-bug",
      "name": "T-bug",
      "color": "d73a4a",
      "default": false,
      "description": "Type: bug"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2023-09-16T14:20:13Z",
  "updated_at": "2023-09-19T10:25:38Z",
  "closed_at": "2023-09-18T18:46:11Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "### Component\r\n\r\nForge\r\n\r\n### Have you ensured that all of these are up to date?\r\n\r\n- [X] Foundry\r\n- [X] Foundryup\r\n\r\n### What version of Foundry are you on?\r\n\r\nforge 0.2.0 (75836a7 2023-09-09T00:28:38.542568580Z)\r\n\r\n### What command(s) is the bug in?\r\n\r\n_No response_\r\n\r\n### Operating System\r\n\r\nNone\r\n\r\n### Describe the bug\r\n\r\n## Component\r\n**Forge**\r\n\r\n## Related Issue\r\nThis issue is somewhat related to #1902 but discusses a distinct concern.\r\n\r\n## Issue Description\r\nI'm trying to automate the deployment process of the [Ethernaut #3](https://ethernaut.openzeppelin.com/level/0xA62fE5344FE62AdC1F356447B669E9E6D10abaaF) challenge on-chain using a Forge script. The challenge's resolution necessitates the execution of specific transactions depending on the block's hash. \r\nRight now, I've given up on using a loop to resolve the challenge as this won't work since the block.number is not changing which causes the transaction to revert. I've now adopted the strategy of manually executing the script provided below ten times:\r\n\r\n```solidity\r\nvm.startBroadcast(deployerKey);\r\nuint256 blockValue;\r\nuint256 coinFlip;\r\nblockValue = uint256(blockhash(block.number - 1));\r\ncoinFlip = blockValue / 57896044618658097711785492504343953926634992332820282019728792003956564819968;\r\nrequire(CoinFlip(instance).flip(coinFlip == 1), \"guess failed\");\r\nconsole.log(\"Consecutive wins : \", CoinFlip(instance).consecutiveWins());\r\nvm.stopBroadcast();\r\n```\r\n\r\nHowever, I've noticed that a discrepancy has emerged between the simulation logs and the actual on-chain results:\r\n```plaintext\r\n[29877] CoinFlip::flip(true) \r\n    │   └─ ← true\r\n    ├─ [295] CoinFlip::consecutiveWins() [staticcall]\r\n    │   └─ ← 1\r\n    ├─ [0] console::f5b1bba9(0000000000000000000000000000000000000000000000000000000000000001) [staticcall]\r\n    │   └─ ← ()\r\n    ├─ [295] CoinFlip::consecutiveWins() [staticcall]\r\n    │   └─ ← 1\r\n    ├─ [0] VM::stopBroadcast() \r\n    │   └─ ← ()\r\n    └─ ← ()\r\nScript ran successfully.\r\n\r\n== Logs ==\r\n  Using same instance\r\n  Consecutive wins : 1\r\n\r\nSKIPPING ON CHAIN SIMULATION.\r\n\r\n###\r\nFinding wallets for all the necessary addresses...\r\n##\r\nSending transactions [0 - 0].\r\n```\r\n\r\nThe logs say that consecutive wins = 1 but on sepolia.etherscan it says 0 (which mean the guess was wrong):\r\n![](https://github.com/foundry-rs/foundry/assets/118286466/2a82d41b-bf25-4019-b275-c44f80678fd0)\r\n\r\n\r\nThis doesn't always happen, but still do often.\r\n\r\nHere's my guess, I believe that foundry fails to simulate block.number. Reasons :\r\n1. When executing the exact same piece of code on remix, everything works as expected.\r\n2. When executing the script in foundry in --slow slow mode, the result will be different from the actual chain results 100% of the time.\r\n\r\n## Desired Feature\r\nA tool or feature that accurately simulates the mining of a new block in Foundry, or ensuring that the --slow mode genuinely and consistently simulates increments in block.number.",
  "closed_by": {
    "login": "Evalir",
    "id": 26014927,
    "node_id": "MDQ6VXNlcjI2MDE0OTI3",
    "avatar_url": "https://avatars.githubusercontent.com/u/26014927?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Evalir",
    "html_url": "https://github.com/Evalir",
    "followers_url": "https://api.github.com/users/Evalir/followers",
    "following_url": "https://api.github.com/users/Evalir/following{/other_user}",
    "gists_url": "https://api.github.com/users/Evalir/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Evalir/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Evalir/subscriptions",
    "organizations_url": "https://api.github.com/users/Evalir/orgs",
    "repos_url": "https://api.github.com/users/Evalir/repos",
    "events_url": "https://api.github.com/users/Evalir/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Evalir/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/5840/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5840/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1724183505",
    "html_url": "https://github.com/foundry-rs/foundry/issues/5840#issuecomment-1724183505",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5840",
    "id": 1724183505,
    "node_id": "IC_kwDOGBlvNc5mxPPR",
    "user": {
      "login": "Evalir",
      "id": 26014927,
      "node_id": "MDQ6VXNlcjI2MDE0OTI3",
      "avatar_url": "https://avatars.githubusercontent.com/u/26014927?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Evalir",
      "html_url": "https://github.com/Evalir",
      "followers_url": "https://api.github.com/users/Evalir/followers",
      "following_url": "https://api.github.com/users/Evalir/following{/other_user}",
      "gists_url": "https://api.github.com/users/Evalir/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Evalir/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Evalir/subscriptions",
      "organizations_url": "https://api.github.com/users/Evalir/orgs",
      "repos_url": "https://api.github.com/users/Evalir/repos",
      "events_url": "https://api.github.com/users/Evalir/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Evalir/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-09-18T18:46:11Z",
    "updated_at": "2023-09-18T18:46:11Z",
    "author_association": "MEMBER",
    "body": "The thing is, there's a few things here:\r\n- Even if we perform the simulation correctly (right now we only have atomic simulations), you still have network delays to get over, which could cause your tx to not be included in the block you intended it to be, therefore making your guess possibly fail.\r\n- If you do this on a test (which I'd recommend rather than a script), you have cheatcodes to manipulate the block number. See the book: https://book.getfoundry.sh/cheatcodes/roll\r\n- Are you forking as well?\r\n\r\nIn general, I'd say this is more of a user thing. I'd consider looking at how different ethernaut x foundry impls work: https://github.com/ciaranmcveigh5/ethernaut-x-foundry",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1724183505/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1725236284",
    "html_url": "https://github.com/foundry-rs/foundry/issues/5840#issuecomment-1725236284",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5840",
    "id": 1725236284,
    "node_id": "IC_kwDOGBlvNc5m1QQ8",
    "user": {
      "login": "Maroutis",
      "id": 118286466,
      "node_id": "U_kgDOBwzogg",
      "avatar_url": "https://avatars.githubusercontent.com/u/118286466?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Maroutis",
      "html_url": "https://github.com/Maroutis",
      "followers_url": "https://api.github.com/users/Maroutis/followers",
      "following_url": "https://api.github.com/users/Maroutis/following{/other_user}",
      "gists_url": "https://api.github.com/users/Maroutis/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Maroutis/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Maroutis/subscriptions",
      "organizations_url": "https://api.github.com/users/Maroutis/orgs",
      "repos_url": "https://api.github.com/users/Maroutis/repos",
      "events_url": "https://api.github.com/users/Maroutis/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Maroutis/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-09-19T10:25:37Z",
    "updated_at": "2023-09-19T10:25:37Z",
    "author_association": "NONE",
    "body": "@Evalir \r\n\r\n> The thing is, there's a few things here:\r\n> \r\n> * Even if we perform the simulation correctly (right now we only have atomic simulations), you still have network delays to get over, which could cause your tx to not be included in the block you intended it to be, therefore making your guess possibly fail.\r\n> * If you do this on a test (which I'd recommend rather than a script), you have cheatcodes to manipulate the block number. See the book: https://book.getfoundry.sh/cheatcodes/roll\r\n> * Are you forking as well?\r\n> \r\n> In general, I'd say this is more of a user thing. I'd consider looking at how different ethernaut x foundry impls work: https://github.com/ciaranmcveigh5/ethernaut-x-foundry\r\n\r\nThank you for the feedback. Actually, I've already done this on a local test (no forking) using the cheatcodes and it works as expected. I wanted to fully automate the scripting part to validate the solution on a testnet without having to go through the ethernaut platform or using another tool for deployement. But, I understand that this will not be possible due to the reasons that you mentioned. \r\nAlso I have a last question, is it conceivable to add functions (or cheatcodes) in foundry to mine and wait for blocks using scripts ?\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1725236284/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
