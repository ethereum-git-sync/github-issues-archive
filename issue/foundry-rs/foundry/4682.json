{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/4682",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4682/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4682/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4682/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/4682",
  "id": 1650681540,
  "node_id": "I_kwDOGBlvNc5iY2bE",
  "number": 4682,
  "title": "Gas Profiling",
  "user": {
    "login": "Fiddlekins",
    "id": 11947488,
    "node_id": "MDQ6VXNlcjExOTQ3NDg4",
    "avatar_url": "https://avatars.githubusercontent.com/u/11947488?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Fiddlekins",
    "html_url": "https://github.com/Fiddlekins",
    "followers_url": "https://api.github.com/users/Fiddlekins/followers",
    "following_url": "https://api.github.com/users/Fiddlekins/following{/other_user}",
    "gists_url": "https://api.github.com/users/Fiddlekins/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Fiddlekins/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Fiddlekins/subscriptions",
    "organizations_url": "https://api.github.com/users/Fiddlekins/orgs",
    "repos_url": "https://api.github.com/users/Fiddlekins/repos",
    "events_url": "https://api.github.com/users/Fiddlekins/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Fiddlekins/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3593644820,
      "node_id": "LA_kwDOGBlvNc7WMqsU",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-feature",
      "name": "T-feature",
      "color": "BFD4F2",
      "default": false,
      "description": "Type: feature"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 0,
  "created_at": "2023-04-01T22:08:53Z",
  "updated_at": "2023-04-01T22:08:53Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "### Component\n\nForge\n\n### Describe the feature you would like\n\nHey everyone, first off thank you for the work on foundry so far, I've been enjoying working with it.\r\n\r\nI'd like to ask about gas metering though - what dev workflows do people use/recommend for profiling functions at the moment, and what's the current general plans for future work on this aspect.\r\n\r\nHere's the methods I'm presently aware of:\r\n\r\n1. There's `forge snapshot` which gives you gas costs for test functions. This suffers from not giving per function breakdown, and whilst you can structure your tests to minimise the code running that isn't the function you're trying to profile that's pretty messy.\r\n\r\n2. There's `forge test --gas-report` which summarises gas costs for function calls as well. At a glance this looks just like what I'm after, but re-running it a few times reveals that the min,avg,max values can differ by significant margins from run to run. It seems that it only tallies the gas cost for a function once per test function, even if the test is fuzzed? In doing so it would appear that it's perhaps inadvertently often using threshold fuzzed input that makes the function behave more drastically different, perhaps. I think I read in passing that only profiling a single run from a fuzzed test was a deliberate decision to keep execution times short, but I think it would benefit from a cli flag that enabled the slower but more representative profiling every run.\r\n\r\n3. Then there's the vm cheatcodes to pause and resume gas consumption. In theory you can use these to ignore the gas cost for the code that sets up test scenarios, only metering the gas consumed by the function call that the test is testing. Unfortunately, judging by several other issues (https://github.com/foundry-rs/foundry/issues/4523, https://github.com/foundry-rs/foundry/issues/4370, etc) this doesn't always work as expected.\r\n\r\n4. There's also the `gasleft()` approach where end users can manually keep track of gas consumed between two arbitrary points in a test function. This is perhaps the most reliable approach I know of right now, but even that isn't flawless unfortunately. Warm/cold access, memory expansion, and probably some other EVM details mean that even if you're ignoring the gas cost of the test setup code, it's still impacting the execution cost of the function you're trying to profile.\r\n\r\nIn order to address the shortcomings with approach 4 it seems to me that it requires fairly extensive work: some sort of cheatcode that can be used to tell forge to run the subsequent code as if it were a new transaction, giving it fresh state to work with. I'm not remotely familiar with forge internal working so no idea how practical attempting that even is, alas.\r\n\r\nSo to recap:\r\n- what approach do people find works best currently?\r\n- what are the general plans for how forge should do gas profiling in the future?\r\n- is forge ever likely to support more accurate function profiling, or would it be recommended to use other tools (eg. hardhat) if that extra accuracy is important?\n\n### Additional context\n\n_No response_",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/4682/reactions",
    "total_count": 1,
    "+1": 1,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4682/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[

]
