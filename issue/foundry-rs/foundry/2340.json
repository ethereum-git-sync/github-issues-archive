{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/2340",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2340/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2340/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2340/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/2340",
  "id": 1306417116,
  "node_id": "I_kwDOGBlvNc5N3lfc",
  "number": 2340,
  "title": "feat(cast): cast events [txHash]",
  "user": {
    "login": "zobront",
    "id": 5749292,
    "node_id": "MDQ6VXNlcjU3NDkyOTI=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5749292?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/zobront",
    "html_url": "https://github.com/zobront",
    "followers_url": "https://api.github.com/users/zobront/followers",
    "following_url": "https://api.github.com/users/zobront/following{/other_user}",
    "gists_url": "https://api.github.com/users/zobront/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/zobront/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/zobront/subscriptions",
    "organizations_url": "https://api.github.com/users/zobront/orgs",
    "repos_url": "https://api.github.com/users/zobront/repos",
    "events_url": "https://api.github.com/users/zobront/events{/privacy}",
    "received_events_url": "https://api.github.com/users/zobront/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3593644820,
      "node_id": "LA_kwDOGBlvNc7WMqsU",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-feature",
      "name": "T-feature",
      "color": "BFD4F2",
      "default": false,
      "description": "Type: feature"
    },
    {
      "id": 3703752609,
      "node_id": "LA_kwDOGBlvNc7cwseh",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/C-cast",
      "name": "C-cast",
      "color": "5319E7",
      "default": false,
      "description": "Command: cast"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 5,
  "created_at": "2022-07-15T19:40:41Z",
  "updated_at": "2022-07-19T18:20:29Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "### Component\r\n\r\nCast\r\n\r\n### Describe the feature you would like\r\n\r\nI'm able to call `cast receipt [txHash] logs` to get the full logs of a transaction, but it's time consuming to manually parse the logs into legible events.\r\n\r\nSeems helpful to be able to call `cast events [txHash]` to get a nicely formatted view of the events.\r\n\r\nI'd love to build this out, as soon as we have agreement on the plan below.\r\n\r\n## Rough Plan\r\n\r\n1) Grab the logs using cast.receipt() with field set to logs.\r\n\r\n2) For each, grab topic[0] and run it against 4byte. If that fails, try pulling interface and comparing to event signatures from abi. If neither works, error out.\r\n\r\n3) Convert topics & data into types defined by the event.\r\n\r\n4) Print pretty output with event signature and correct data.\r\n\r\n### Additional context\r\n\r\n_No response_",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/2340/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2340/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1186641116",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2340#issuecomment-1186641116",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2340",
    "id": 1186641116,
    "node_id": "IC_kwDOGBlvNc5GurTc",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-18T00:23:29Z",
    "updated_at": "2022-07-18T00:23:29Z",
    "author_association": "COLLABORATOR",
    "body": "Just noting this is similar to [`seth events`](https://github.com/dapphub/dapptools/blob/master/src/seth/libexec/seth/seth-events), though that requires specifying an address, and optionally a block or `--follow` mode, instead of a transaction hash. I think supporting all of that would be great if feasible, but ok to split it over multiple PRs too. cc'ing @tynes here in case you've used `seth events` (I haven't) and have any thoughts.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1186641116/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1187839562",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2340#issuecomment-1187839562",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2340",
    "id": 1187839562,
    "node_id": "IC_kwDOGBlvNc5GzP5K",
    "user": {
      "login": "zobront",
      "id": 5749292,
      "node_id": "MDQ6VXNlcjU3NDkyOTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5749292?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zobront",
      "html_url": "https://github.com/zobront",
      "followers_url": "https://api.github.com/users/zobront/followers",
      "following_url": "https://api.github.com/users/zobront/following{/other_user}",
      "gists_url": "https://api.github.com/users/zobront/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zobront/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zobront/subscriptions",
      "organizations_url": "https://api.github.com/users/zobront/orgs",
      "repos_url": "https://api.github.com/users/zobront/repos",
      "events_url": "https://api.github.com/users/zobront/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zobront/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-18T17:22:42Z",
    "updated_at": "2022-07-18T17:23:00Z",
    "author_association": "NONE",
    "body": "Thanks @mds1 â€” that's a great point. Pulling from address & block or address & contract would be useful too. I'll look into the seth interface to see how they organized it.\r\n\r\nSeems reasonable to include it all in this PR, except maybe the follow mode.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1187839562/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1188786892",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2340#issuecomment-1188786892",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2340",
    "id": 1188786892,
    "node_id": "IC_kwDOGBlvNc5G23LM",
    "user": {
      "login": "tynes",
      "id": 6626818,
      "node_id": "MDQ6VXNlcjY2MjY4MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6626818?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tynes",
      "html_url": "https://github.com/tynes",
      "followers_url": "https://api.github.com/users/tynes/followers",
      "following_url": "https://api.github.com/users/tynes/following{/other_user}",
      "gists_url": "https://api.github.com/users/tynes/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tynes/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tynes/subscriptions",
      "organizations_url": "https://api.github.com/users/tynes/orgs",
      "repos_url": "https://api.github.com/users/tynes/repos",
      "events_url": "https://api.github.com/users/tynes/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tynes/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-19T08:57:50Z",
    "updated_at": "2022-07-19T08:57:50Z",
    "author_association": "CONTRIBUTOR",
    "body": "I haven't ever had luck with `seth events` actually working as expected. I do think that there is a good opportunity for creating a `cast events` command. There are times when I want to find an event by topic and want to see the abi decoded event data. There are other times when I want to see all of the events that a transaction logged. I also would find it useful to be able to get all events that match a boolean expression in a block range",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1188786892/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1189251431",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2340#issuecomment-1189251431",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2340",
    "id": 1189251431,
    "node_id": "IC_kwDOGBlvNc5G4oln",
    "user": {
      "login": "zobront",
      "id": 5749292,
      "node_id": "MDQ6VXNlcjU3NDkyOTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5749292?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zobront",
      "html_url": "https://github.com/zobront",
      "followers_url": "https://api.github.com/users/zobront/followers",
      "following_url": "https://api.github.com/users/zobront/following{/other_user}",
      "gists_url": "https://api.github.com/users/zobront/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zobront/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zobront/subscriptions",
      "organizations_url": "https://api.github.com/users/zobront/orgs",
      "repos_url": "https://api.github.com/users/zobront/repos",
      "events_url": "https://api.github.com/users/zobront/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zobront/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-19T16:04:55Z",
    "updated_at": "2022-07-19T16:04:55Z",
    "author_association": "NONE",
    "body": "It sounds like the ways we'd like to be able to filter are:\r\n- tx hash \r\n- contract\r\n- boolean expressions on resulting event\r\n- block range\r\n\r\nMy instinct is with 4 inputs but no one that's required, the best option is to just have them all as options, and build validation for valid combinations into the function. For example:\r\n\r\n`cast events --txhash 0xd420fab45481f6337e06d0e0f503edc69e49781feee1062f33bd901a6981cdd5`\r\n\r\n`cast events --contract 0x78D72E60BaE892F97b97fEBAE5886DaB2eF0cbC8 --start-block \r\n15135280 --end-block 15135300`\r\n\r\n`cast events --contract 0x78D72E60BaE892F97b97fEBAE5886DaB2eF0cbC8 --filter topic0=0x9d9af8e38d66c62e2c12f0225249fd9d721c54b83f48d9352c97c6cacdcb6f31`\r\n\r\n`cast events --contract 0x78D72E60BaE892F97b97fEBAE5886DaB2eF0cbC8 --filter sig=\"Transfer(address,address,uint256)\" --start-block 15135280 --end-block 15135300`\r\n\r\nThoughts?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1189251431/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1189336578",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2340#issuecomment-1189336578",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2340",
    "id": 1189336578,
    "node_id": "IC_kwDOGBlvNc5G49YC",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-19T17:00:40Z",
    "updated_at": "2022-07-19T17:00:40Z",
    "author_association": "COLLABORATOR",
    "body": "That seems good to me!\r\n\r\n> I also would find it useful to be able to get all events that match a boolean expression in a block range\r\n\r\n@tynes Do you have an example of what you mean here?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1189336578/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
