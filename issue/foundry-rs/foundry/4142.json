{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/4142",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4142/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4142/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4142/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/4142",
  "id": 1551123568,
  "node_id": "I_kwDOGBlvNc5cdERw",
  "number": 4142,
  "title": "[BUG] Code coverage",
  "user": {
    "login": "0xAurelou",
    "id": 63618058,
    "node_id": "MDQ6VXNlcjYzNjE4MDU4",
    "avatar_url": "https://avatars.githubusercontent.com/u/63618058?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/0xAurelou",
    "html_url": "https://github.com/0xAurelou",
    "followers_url": "https://api.github.com/users/0xAurelou/followers",
    "following_url": "https://api.github.com/users/0xAurelou/following{/other_user}",
    "gists_url": "https://api.github.com/users/0xAurelou/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/0xAurelou/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/0xAurelou/subscriptions",
    "organizations_url": "https://api.github.com/users/0xAurelou/orgs",
    "repos_url": "https://api.github.com/users/0xAurelou/repos",
    "events_url": "https://api.github.com/users/0xAurelou/events{/privacy}",
    "received_events_url": "https://api.github.com/users/0xAurelou/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3334394228,
      "node_id": "MDU6TGFiZWwzMzM0Mzk0MjI4",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-bug",
      "name": "T-bug",
      "color": "d73a4a",
      "default": false,
      "description": "Type: bug"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 6,
  "created_at": "2023-01-20T16:18:49Z",
  "updated_at": "2023-04-21T19:31:57Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "### Component\r\n\r\nForge\r\n\r\n### Have you ensured that all of these are up to date?\r\n\r\n- [ ] Foundry\r\n- [X] Foundryup\r\n\r\n### What version of Foundry are you on?\r\n\r\nforge 0.2.0 (d8f2434 2023-01-20T00:09:17.907613959Z)\r\n\r\n### What command(s) is the bug in?\r\n\r\nforge coverage\r\n\r\n### Operating System\r\n\r\nLinux\r\n\r\n### Describe the bug\r\n\r\nWhen I am doing some code coverage the same code can get me a 0% code coverage while it should be 100% (Both compile)\r\n<details>\r\n  <summary>Source Code</summary>\r\n  \r\n\r\nmock/USDC.sol\r\n\r\n```solidity\r\n//  SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.16;\r\n\r\nimport \"openzeppelin-contracts/token/ERC20/IERC20.sol\";\r\nimport \"openzeppelin-contracts/token/ERC20/ERC20.sol\";\r\nimport \"openzeppelin-contracts/token/ERC20/utils/SafeERC20.sol\";\r\n\r\n// @notice: Really basic USDC token just an ERC20 token mocked\r\n// @dev: Need to define\r\ncontract USDC is ERC20 {\r\n    using SafeERC20 for IERC20;\r\n\r\n    constructor() ERC20(\"Circle Token\", \"USDC\") {}\r\n\r\n    function mint(address account, uint256 amount) public {\r\n        _mint(account, amount);\r\n    }\r\n\r\n    function burn(address account, uint256 amount) public {\r\n        _burn(account, amount);\r\n    }\r\n}\r\n```\r\n\r\nmock/USDT.sol\r\n\r\n```solidity\r\n//  SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.16;\r\n\r\nimport \"openzeppelin-contracts/token/ERC20/IERC20.sol\";\r\nimport \"openzeppelin-contracts/token/ERC20/ERC20.sol\";\r\nimport \"openzeppelin-contracts/token/ERC20/utils/SafeERC20.sol\";\r\n\r\n// @notice: Really basic USDT token just an ERC20 token mocked\r\ncontract USDT is ERC20 {\r\n    using SafeERC20 for IERC20;\r\n\r\n    constructor() ERC20(\"Tether Token\", \"USDT\") {}\r\n\r\n    function mint(address account, uint256 amount) public {\r\n        _mint(account, amount);\r\n    }\r\n\r\n    function burn(address account, uint256 amount) public {\r\n        _burn(account, amount);\r\n    }\r\n}\r\n```\r\ntest/USDC.t.sol\r\n\r\n```solidity\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.16;\r\n\r\nimport \"forge-std/Test.sol\";\r\nimport \"../mock/USDC.sol\";\r\n\r\ncontract USDCTest is Test {\r\n    USDC public usdc;\r\n\r\n    // hardhat getSigner() -> vm.addr()\r\n    address public alice = vm.addr(0x1);\r\n    address public bob = vm.addr(0x2);\r\n\r\n    function setUp() public {\r\n        usdc = new USDC();\r\n    }\r\n\r\n    function testName() external {\r\n        assertEq(\"Circle Token\", usdc.name());\r\n    }\r\n\r\n    function testSymbol() external {\r\n        assertEq(\"USDC\", usdc.symbol());\r\n    }\r\n\r\n    function testMint() public {\r\n        usdc.mint(alice, 2e18);\r\n        assertEq(usdc.totalSupply(), usdc.balanceOf(alice));\r\n    }\r\n\r\n    function testBurn() public {\r\n        usdc.mint(alice, 10e18);\r\n        assertEq(usdc.balanceOf(alice), 10e18);\r\n\r\n        usdc.burn(alice, 8e18);\r\n\r\n        assertEq(usdc.totalSupply(), 2e18);\r\n        assertEq(usdc.balanceOf(alice), 2e18);\r\n    }\r\n\r\n    function testApprove() public {\r\n        assertTrue(usdc.approve(alice, 1e18));\r\n        assertEq(usdc.allowance(address(this), alice), 1e18);\r\n    }\r\n\r\n    function testIncreaseAllowance() external {\r\n        assertEq(usdc.allowance(address(this), alice), 0);\r\n        assertTrue(usdc.increaseAllowance(alice, 2e18));\r\n        assertEq(usdc.allowance(address(this), alice), 2e18);\r\n    }\r\n\r\n    function testDescreaseAllowance() external {\r\n        testApprove();\r\n        assertTrue(usdc.decreaseAllowance(alice, 0.5e18));\r\n        assertEq(usdc.allowance(address(this), alice), 0.5e18);\r\n    }\r\n\r\n    function testTransfer() external {\r\n        testMint();\r\n        vm.startPrank(alice);\r\n        usdc.transfer(bob, 0.5e18);\r\n        assertEq(usdc.balanceOf(bob), 0.5e18);\r\n        assertEq(usdc.balanceOf(alice), 1.5e18);\r\n        vm.stopPrank();\r\n    }\r\n\r\n    function testTransferFrom() external {\r\n        testMint();\r\n        vm.prank(alice);\r\n        usdc.approve(address(this), 1e18);\r\n        assertTrue(usdc.transferFrom(alice, bob, 0.7e18));\r\n        assertEq(usdc.allowance(alice, address(this)), 1e18 - 0.7e18);\r\n        assertEq(usdc.balanceOf(alice), 2e18 - 0.7e18);\r\n        assertEq(usdc.balanceOf(bob), 0.7e18);\r\n    }\r\n\r\n    function testMintZero() public {\r\n        vm.expectRevert(\"ERC20: mint to the zero address\");\r\n        usdc.mint(address(0), 2e18);\r\n    }\r\n\r\n    function testFailMintToZero() external {\r\n        usdc.mint(address(0), 1e18);\r\n    }\r\n\r\n    function testFailBurnFromZero() external {\r\n        usdc.burn(address(0), 1e18);\r\n    }\r\n\r\n    function testFailBurnInsufficientBalance() external {\r\n        testMint();\r\n        vm.prank(alice);\r\n        usdc.burn(alice, 3e18);\r\n    }\r\n\r\n    function testFailApproveToZeroAddress() external {\r\n        usdc.approve(address(0), 1e18);\r\n    }\r\n\r\n    function testFailApproveFromZeroAddress() external {\r\n        vm.prank(address(0));\r\n        usdc.approve(alice, 1e18);\r\n    }\r\n\r\n    function testFailTransferToZeroAddress() external {\r\n        testMint();\r\n        vm.prank(alice);\r\n        usdc.transfer(address(0), 1e18);\r\n    }\r\n\r\n    function testFailTransferFromZeroAddress() external {\r\n        testBurn();\r\n        vm.prank(address(0));\r\n        usdc.transfer(alice, 1e18);\r\n    }\r\n\r\n    function testFailTransferInsufficientBalance() external {\r\n        testMint();\r\n        vm.prank(alice);\r\n        usdc.transfer(bob, 3e18);\r\n    }\r\n\r\n    function testFailTransferFromInsufficientApprove() external {\r\n        testMint();\r\n        vm.prank(alice);\r\n        usdc.approve(address(this), 1e18);\r\n        usdc.transferFrom(alice, bob, 2e18);\r\n    }\r\n\r\n    function testFailTransferFromInsufficientBalance() external {\r\n        testMint();\r\n        vm.prank(alice);\r\n        usdc.approve(address(this), type(uint256).max);\r\n\r\n        usdc.transferFrom(alice, bob, 3e18);\r\n    }\r\n\r\n    function testMint(uint256 amount) public {\r\n        usdc.mint(alice, amount);\r\n        assertEq(usdc.totalSupply(), usdc.balanceOf(alice));\r\n    }\r\n\r\n    function testBurn(uint256 amount) public {\r\n        usdc.mint(alice, 10e18);\r\n        if (amount > usdc.balanceOf(alice)) {\r\n            vm.expectRevert(\"ERC20: burn amount exceeds balance\");\r\n            usdc.burn(alice, amount);\r\n            return;\r\n        } else {\r\n            usdc.burn(alice, amount);\r\n        }\r\n        assertEq(usdc.balanceOf(alice), 10e18 - amount);\r\n        assertEq(usdc.totalSupply(), 10e18 - amount);\r\n    }\r\n\r\n    function testApprove(uint256 amount) public {\r\n        assertTrue(usdc.approve(alice, amount));\r\n        assertEq(usdc.allowance(address(this), alice), amount);\r\n    }\r\n\r\n    function testIncreaseAllowance(uint256 amount) external {\r\n        assertEq(usdc.allowance(address(this), alice), 0);\r\n        assertTrue(usdc.increaseAllowance(alice, amount));\r\n        assertEq(usdc.allowance(address(this), alice), amount);\r\n    }\r\n\r\n    function testDecreaseAllowance(uint256 amount) external {\r\n        testApprove(0.5e18);\r\n        if (amount > 0.5e18) {\r\n            vm.expectRevert(\"ERC20: decreased allowance below zero\");\r\n            usdc.decreaseAllowance(alice, amount);\r\n            return ();\r\n        }\r\n        assertTrue(usdc.decreaseAllowance(alice, amount));\r\n        assertEq(usdc.allowance(address(this), alice), 0.5e18 - amount);\r\n    }\r\n\r\n    function testTransfer(uint256 amount) external {\r\n        testMint(10e18);\r\n        if (amount > 10e18) {\r\n            vm.startPrank(alice);\r\n            vm.expectRevert(\"ERC20: transfer amount exceeds balance\");\r\n            usdc.transfer(bob, amount);\r\n            return;\r\n        } else {\r\n            vm.prank(alice);\r\n            usdc.transfer(bob, amount);\r\n        }\r\n        assertEq(usdc.balanceOf(bob), amount);\r\n        vm.stopPrank();\r\n    }\r\n}\r\n```\r\n\r\n```solidity\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.16;\r\n\r\nimport \"forge-std/Test.sol\";\r\nimport \"../mock/USDT.sol\";\r\n\r\ncontract USDTTest is Test {\r\n    USDT public usdt;\r\n\r\n    // hardhat getSigner() -> vm.addr()\r\n    address public alice = vm.addr(0x1);\r\n    address public bob = vm.addr(0x2);\r\n\r\n    function setUp() public {\r\n        usdt = new USDT();\r\n    }\r\n\r\n    function testName() external {\r\n        assertEq(\"Tether Token\", usdt.name());\r\n    }\r\n\r\n    function testSymbol() external {\r\n        assertEq(\"USDT\", usdt.symbol());\r\n    }\r\n\r\n    function testMint() public {\r\n        usdt.mint(alice, 2e18);\r\n        assertEq(usdt.totalSupply(), usdt.balanceOf(alice));\r\n    }\r\n\r\n    function testMint2() public {\r\n        usdt.mint(bob, 2e18);\r\n        assertEq(2e18, usdt.balanceOf(bob));\r\n    }\r\n\r\n    function testBurn() public {\r\n        usdt.mint(alice, 10e18);\r\n        assertEq(usdt.balanceOf(alice), 10e18);\r\n\r\n        usdt.burn(alice, 8e18);\r\n\r\n        assertEq(usdt.totalSupply(), 2e18);\r\n        assertEq(usdt.balanceOf(alice), 2e18);\r\n    }\r\n\r\n    function testBurn2() public {\r\n        usdt.mint(bob, 10e18);\r\n        assertEq(usdt.balanceOf(bob), 10e18);\r\n\r\n        usdt.burn(bob, 8e18);\r\n\r\n        assertEq(usdt.totalSupply(), 2e18);\r\n        assertEq(usdt.balanceOf(bob), 2e18);\r\n    }\r\n\r\n    function testApprove() public {\r\n        assertTrue(usdt.approve(alice, 1e18));\r\n        assertEq(usdt.allowance(address(this), alice), 1e18);\r\n    }\r\n\r\n    function testIncreaseAllowance() external {\r\n        assertEq(usdt.allowance(address(this), alice), 0);\r\n        assertTrue(usdt.increaseAllowance(alice, 2e18));\r\n        assertEq(usdt.allowance(address(this), alice), 2e18);\r\n    }\r\n\r\n    function testDescreaseAllowance() external {\r\n        testApprove();\r\n        assertTrue(usdt.decreaseAllowance(alice, 0.5e18));\r\n        assertEq(usdt.allowance(address(this), alice), 0.5e18);\r\n    }\r\n\r\n    function testTransfer() external {\r\n        testMint();\r\n        vm.startPrank(alice);\r\n        usdt.transfer(bob, 0.5e18);\r\n        assertEq(usdt.balanceOf(bob), 0.5e18);\r\n        assertEq(usdt.balanceOf(alice), 1.5e18);\r\n        vm.stopPrank();\r\n    }\r\n\r\n    function testTransferFrom() external {\r\n        testMint();\r\n        vm.prank(alice);\r\n        usdt.approve(address(this), 1e18);\r\n        assertTrue(usdt.transferFrom(alice, bob, 0.7e18));\r\n        assertEq(usdt.allowance(alice, address(this)), 1e18 - 0.7e18);\r\n        assertEq(usdt.balanceOf(alice), 2e18 - 0.7e18);\r\n        assertEq(usdt.balanceOf(bob), 0.7e18);\r\n    }\r\n\r\n    function testMintZero() public {\r\n        vm.expectRevert(\"ERC20: mint to the zero address\");\r\n        usdt.mint(address(0), 2e18);\r\n    }\r\n\r\n    function testFailMintToZero() external {\r\n        usdt.mint(address(0), 1e18);\r\n    }\r\n\r\n    function testFailBurnFromZero() external {\r\n        usdt.burn(address(0), 1e18);\r\n    }\r\n\r\n    function testFailBurnInsufficientBalance() external {\r\n        testMint();\r\n        vm.prank(alice);\r\n        usdt.burn(alice, 3e18);\r\n    }\r\n\r\n    function testFailApproveToZeroAddress() external {\r\n        usdt.approve(address(0), 1e18);\r\n    }\r\n\r\n    function testFailApproveFromZeroAddress() external {\r\n        vm.prank(address(0));\r\n        usdt.approve(alice, 1e18);\r\n    }\r\n\r\n    function testFailTransferToZeroAddress() external {\r\n        testMint();\r\n        vm.prank(alice);\r\n        usdt.transfer(address(0), 1e18);\r\n    }\r\n\r\n    function testFailTransferFromZeroAddress() external {\r\n        testBurn();\r\n        vm.prank(address(0));\r\n        usdt.transfer(alice, 1e18);\r\n    }\r\n\r\n    function testFailTransferInsufficientBalance() external {\r\n        testMint();\r\n        vm.prank(alice);\r\n        usdt.transfer(bob, 3e18);\r\n    }\r\n\r\n    function testFailTransferFromInsufficientApprove() external {\r\n        testMint();\r\n        vm.prank(alice);\r\n        usdt.approve(address(this), 1e18);\r\n        usdt.transferFrom(alice, bob, 2e18);\r\n    }\r\n\r\n    function testFailTransferFromInsufficientBalance() external {\r\n        testMint();\r\n        vm.prank(alice);\r\n        usdt.approve(address(this), type(uint256).max);\r\n\r\n        usdt.transferFrom(alice, bob, 3e18);\r\n    }\r\n\r\n    function testMint(uint256 amount) public {\r\n        usdt.mint(alice, amount);\r\n        assertEq(usdt.totalSupply(), usdt.balanceOf(alice));\r\n    }\r\n\r\n    function testBurn(uint256 amount) public {\r\n        usdt.mint(alice, 10e18);\r\n        if (amount > usdt.balanceOf(alice)) {\r\n            vm.expectRevert(\"ERC20: burn amount exceeds balance\");\r\n            usdt.burn(alice, amount);\r\n            return;\r\n        } else {\r\n            usdt.burn(alice, amount);\r\n        }\r\n        assertEq(usdt.balanceOf(alice), 10e18 - amount);\r\n        assertEq(usdt.totalSupply(), 10e18 - amount);\r\n    }\r\n\r\n    function testApprove(uint256 amount) public {\r\n        assertTrue(usdt.approve(alice, amount));\r\n        assertEq(usdt.allowance(address(this), alice), amount);\r\n    }\r\n\r\n    function testIncreaseAllowance(uint256 amount) external {\r\n        assertEq(usdt.allowance(address(this), alice), 0);\r\n        assertTrue(usdt.increaseAllowance(alice, amount));\r\n        assertEq(usdt.allowance(address(this), alice), amount);\r\n    }\r\n\r\n    function testDecreaseAllowance(uint256 amount) external {\r\n        testApprove(0.5e18);\r\n        if (amount > 0.5e18) {\r\n            vm.expectRevert(\"ERC20: decreased allowance below zero\");\r\n            usdt.decreaseAllowance(alice, amount);\r\n            return ();\r\n        }\r\n        assertTrue(usdt.decreaseAllowance(alice, amount));\r\n        assertEq(usdt.allowance(address(this), alice), 0.5e18 - amount);\r\n    }\r\n\r\n    function testTransfer(uint256 amount) external {\r\n        testMint(10e18);\r\n        if (amount > 10e18) {\r\n            vm.startPrank(alice);\r\n            vm.expectRevert(\"ERC20: transfer amount exceeds balance\");\r\n            usdt.transfer(bob, amount);\r\n            return;\r\n        } else {\r\n            vm.prank(alice);\r\n            usdt.transfer(bob, amount);\r\n        }\r\n        assertEq(usdt.balanceOf(bob), amount);\r\n        vm.stopPrank();\r\n    }\r\n}\r\n```\r\n</details>\r\n\r\n### Output\r\n\r\n![image](https://user-images.githubusercontent.com/63618058/213749273-b3f33c7b-dd76-4381-9e29-61f2c9024a51.png)\r\n\r\n![image](https://user-images.githubusercontent.com/63618058/213749390-cfdaac3f-07ef-4e26-a680-803b81bf2859.png)\r\n\r\n![image](https://user-images.githubusercontent.com/63618058/213749487-d24e453d-ebcd-4d66-8013-da4c3784ff31.png)\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/4142/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4142/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1399248614",
    "html_url": "https://github.com/foundry-rs/foundry/issues/4142#issuecomment-1399248614",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4142",
    "id": 1399248614,
    "node_id": "IC_kwDOGBlvNc5TZtbm",
    "user": {
      "login": "PaulRBerg",
      "id": 8782666,
      "node_id": "MDQ6VXNlcjg3ODI2NjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8782666?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PaulRBerg",
      "html_url": "https://github.com/PaulRBerg",
      "followers_url": "https://api.github.com/users/PaulRBerg/followers",
      "following_url": "https://api.github.com/users/PaulRBerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/PaulRBerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PaulRBerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PaulRBerg/subscriptions",
      "organizations_url": "https://api.github.com/users/PaulRBerg/orgs",
      "repos_url": "https://api.github.com/users/PaulRBerg/repos",
      "events_url": "https://api.github.com/users/PaulRBerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PaulRBerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-21T13:07:23Z",
    "updated_at": "2023-01-21T13:19:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hey @0xAurelou, a friendly suggestion - your issue would be more readable if you put the code in a [collapsible Markdown section](https://gist.github.com/pierrejoubert73/902cc94d79424356a8d20be2b382e1ab).",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1399248614/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1399336583",
    "html_url": "https://github.com/foundry-rs/foundry/issues/4142#issuecomment-1399336583",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4142",
    "id": 1399336583,
    "node_id": "IC_kwDOGBlvNc5TaC6H",
    "user": {
      "login": "0xAurelou",
      "id": 63618058,
      "node_id": "MDQ6VXNlcjYzNjE4MDU4",
      "avatar_url": "https://avatars.githubusercontent.com/u/63618058?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/0xAurelou",
      "html_url": "https://github.com/0xAurelou",
      "followers_url": "https://api.github.com/users/0xAurelou/followers",
      "following_url": "https://api.github.com/users/0xAurelou/following{/other_user}",
      "gists_url": "https://api.github.com/users/0xAurelou/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/0xAurelou/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/0xAurelou/subscriptions",
      "organizations_url": "https://api.github.com/users/0xAurelou/orgs",
      "repos_url": "https://api.github.com/users/0xAurelou/repos",
      "events_url": "https://api.github.com/users/0xAurelou/events{/privacy}",
      "received_events_url": "https://api.github.com/users/0xAurelou/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-21T21:31:49Z",
    "updated_at": "2023-01-21T21:31:49Z",
    "author_association": "NONE",
    "body": "Hello @PaulRBerg,\r\nMy issue have been updated hope it's better in this way :+1: ",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1399336583/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1405445203",
    "html_url": "https://github.com/foundry-rs/foundry/issues/4142#issuecomment-1405445203",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4142",
    "id": 1405445203,
    "node_id": "IC_kwDOGBlvNc5TxWRT",
    "user": {
      "login": "0xAurelou",
      "id": 63618058,
      "node_id": "MDQ6VXNlcjYzNjE4MDU4",
      "avatar_url": "https://avatars.githubusercontent.com/u/63618058?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/0xAurelou",
      "html_url": "https://github.com/0xAurelou",
      "followers_url": "https://api.github.com/users/0xAurelou/followers",
      "following_url": "https://api.github.com/users/0xAurelou/following{/other_user}",
      "gists_url": "https://api.github.com/users/0xAurelou/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/0xAurelou/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/0xAurelou/subscriptions",
      "organizations_url": "https://api.github.com/users/0xAurelou/orgs",
      "repos_url": "https://api.github.com/users/0xAurelou/repos",
      "events_url": "https://api.github.com/users/0xAurelou/events{/privacy}",
      "received_events_url": "https://api.github.com/users/0xAurelou/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-26T18:45:52Z",
    "updated_at": "2023-01-26T18:45:52Z",
    "author_association": "NONE",
    "body": "@PaulRBerg No Update or ETA on this issue ? ",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1405445203/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1405460189",
    "html_url": "https://github.com/foundry-rs/foundry/issues/4142#issuecomment-1405460189",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4142",
    "id": 1405460189,
    "node_id": "IC_kwDOGBlvNc5TxZ7d",
    "user": {
      "login": "PaulRBerg",
      "id": 8782666,
      "node_id": "MDQ6VXNlcjg3ODI2NjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8782666?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PaulRBerg",
      "html_url": "https://github.com/PaulRBerg",
      "followers_url": "https://api.github.com/users/PaulRBerg/followers",
      "following_url": "https://api.github.com/users/PaulRBerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/PaulRBerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PaulRBerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PaulRBerg/subscriptions",
      "organizations_url": "https://api.github.com/users/PaulRBerg/orgs",
      "repos_url": "https://api.github.com/users/PaulRBerg/repos",
      "events_url": "https://api.github.com/users/PaulRBerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PaulRBerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-26T18:57:48Z",
    "updated_at": "2023-01-26T18:57:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "@0xAurelou I am not an active Foundry maintainer.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1405460189/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1405478512",
    "html_url": "https://github.com/foundry-rs/foundry/issues/4142#issuecomment-1405478512",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4142",
    "id": 1405478512,
    "node_id": "IC_kwDOGBlvNc5TxeZw",
    "user": {
      "login": "0xAurelou",
      "id": 63618058,
      "node_id": "MDQ6VXNlcjYzNjE4MDU4",
      "avatar_url": "https://avatars.githubusercontent.com/u/63618058?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/0xAurelou",
      "html_url": "https://github.com/0xAurelou",
      "followers_url": "https://api.github.com/users/0xAurelou/followers",
      "following_url": "https://api.github.com/users/0xAurelou/following{/other_user}",
      "gists_url": "https://api.github.com/users/0xAurelou/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/0xAurelou/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/0xAurelou/subscriptions",
      "organizations_url": "https://api.github.com/users/0xAurelou/orgs",
      "repos_url": "https://api.github.com/users/0xAurelou/repos",
      "events_url": "https://api.github.com/users/0xAurelou/events{/privacy}",
      "received_events_url": "https://api.github.com/users/0xAurelou/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-26T19:12:32Z",
    "updated_at": "2023-01-26T19:12:32Z",
    "author_association": "NONE",
    "body": "Sorry my Bad I thought you were.\nCheers ",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1405478512/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1518254833",
    "html_url": "https://github.com/foundry-rs/foundry/issues/4142#issuecomment-1518254833",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4142",
    "id": 1518254833,
    "node_id": "IC_kwDOGBlvNc5afrrx",
    "user": {
      "login": "KholdStare",
      "id": 836110,
      "node_id": "MDQ6VXNlcjgzNjExMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/836110?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/KholdStare",
      "html_url": "https://github.com/KholdStare",
      "followers_url": "https://api.github.com/users/KholdStare/followers",
      "following_url": "https://api.github.com/users/KholdStare/following{/other_user}",
      "gists_url": "https://api.github.com/users/KholdStare/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/KholdStare/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/KholdStare/subscriptions",
      "organizations_url": "https://api.github.com/users/KholdStare/orgs",
      "repos_url": "https://api.github.com/users/KholdStare/repos",
      "events_url": "https://api.github.com/users/KholdStare/events{/privacy}",
      "received_events_url": "https://api.github.com/users/KholdStare/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-04-21T19:31:57Z",
    "updated_at": "2023-04-21T19:31:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "@onbjerg Seems like a few code coverage bugs are related to more than one contract having a similar interface. I think code coverage gets attributed to the wrong function/contract if they share bytecode or naming? Not sure what it is, but I've seen several issues with very similar symptoms. Any insight?\r\n\r\nThank you",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1518254833/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 1
    },
    "performed_via_github_app": null
  }
]
