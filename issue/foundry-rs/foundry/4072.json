{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/4072",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4072/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4072/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4072/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/4072",
  "id": 1529736556,
  "node_id": "I_kwDOGBlvNc5bLe1s",
  "number": 4072,
  "title": "Add KEVM cheatcodes",
  "user": {
    "login": "JuanCoRo",
    "id": 38925412,
    "node_id": "MDQ6VXNlcjM4OTI1NDEy",
    "avatar_url": "https://avatars.githubusercontent.com/u/38925412?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/JuanCoRo",
    "html_url": "https://github.com/JuanCoRo",
    "followers_url": "https://api.github.com/users/JuanCoRo/followers",
    "following_url": "https://api.github.com/users/JuanCoRo/following{/other_user}",
    "gists_url": "https://api.github.com/users/JuanCoRo/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/JuanCoRo/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/JuanCoRo/subscriptions",
    "organizations_url": "https://api.github.com/users/JuanCoRo/orgs",
    "repos_url": "https://api.github.com/users/JuanCoRo/repos",
    "events_url": "https://api.github.com/users/JuanCoRo/events{/privacy}",
    "received_events_url": "https://api.github.com/users/JuanCoRo/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3593644820,
      "node_id": "LA_kwDOGBlvNc7WMqsU",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-feature",
      "name": "T-feature",
      "color": "BFD4F2",
      "default": false,
      "description": "Type: feature"
    },
    {
      "id": 3703752960,
      "node_id": "LA_kwDOGBlvNc7cwskA",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/A-cheatcodes",
      "name": "A-cheatcodes",
      "color": "FBCA04",
      "default": false,
      "description": "Area: cheatcodes"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 7,
  "created_at": "2023-01-11T21:40:43Z",
  "updated_at": "2023-04-09T18:59:18Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "### Component\n\nForge\n\n### Describe the feature you would like\n\nWhile integrating Foundry with [KEVM](https://github.com/runtimeverification/evm-semantics), we have implemented/renamed the following cheatcodes on the KEVM side, which could be useful to also have on the Foundry side. For details of the signatures we're using, you can look at [this file](https://github.com/runtimeverification/evm-semantics/blob/master/tests/foundry/src/KEVMCheats.sol).\r\n\r\n- `expectRegularCall`: Expect a call using the `CALL` opcode and specified parameters\r\n- `expectStaticCall`: Expect a call using the `STATICCALL` opcode and specified parameters\r\n- `expectDelegateCall`: Expect a call using the `DELEGATECALL` opcode and specified parameters\r\n- `expectNoCall`: Expect no calls to be made after this cheat code\r\n- `expectCreate`: Expects the deployment of the specified bytecode by the specified address using the `CREATE` opcode\r\n- `expectCreate2`: Expects the deployment of the specified bytecode by the specified address using the `CREATE2` opcode\r\n- `symbolicStorage`: Make the storage of a given address \"symbolic.\" Any subsequent `SLOAD` reads a random value, and then the random value that was read is memorized (so if you `SLOAD` the same slot again, you get the same result)\r\n\r\nFor `expect` cheatcodes other than `expectRegularCall` and `expectStaticCall`, we don't have tests showing their behavior, but they should be similar to the [call tests](https://github.com/runtimeverification/evm-semantics/blob/master/tests/foundry/test/ExpectCallTest.t.sol). For `symbolicStorage` we have this [test](https://github.com/runtimeverification/evm-semantics/blob/master/tests/foundry/test/SymbolicStorageTest.t.sol).\n\n### Additional context\n\n_No response_",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/4072/reactions",
    "total_count": 5,
    "+1": 5,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4072/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1439228482",
    "html_url": "https://github.com/foundry-rs/foundry/issues/4072#issuecomment-1439228482",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4072",
    "id": 1439228482,
    "node_id": "IC_kwDOGBlvNc5VyOJC",
    "user": {
      "login": "ehildenb",
      "id": 12721972,
      "node_id": "MDQ6VXNlcjEyNzIxOTcy",
      "avatar_url": "https://avatars.githubusercontent.com/u/12721972?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ehildenb",
      "html_url": "https://github.com/ehildenb",
      "followers_url": "https://api.github.com/users/ehildenb/followers",
      "following_url": "https://api.github.com/users/ehildenb/following{/other_user}",
      "gists_url": "https://api.github.com/users/ehildenb/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ehildenb/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ehildenb/subscriptions",
      "organizations_url": "https://api.github.com/users/ehildenb/orgs",
      "repos_url": "https://api.github.com/users/ehildenb/repos",
      "events_url": "https://api.github.com/users/ehildenb/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ehildenb/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-02-21T23:34:39Z",
    "updated_at": "2023-02-21T23:34:39Z",
    "author_association": "NONE",
    "body": "Another one we're adding is `infiniteGas()`: https://github.com/runtimeverification/evm-semantics/pull/1524\r\n\r\nThis can probably be a no-op on the Foundry side, as I doubt that it will exercise many cases where infinite gas is actually called for. But for symbolic reasoning it's needed.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1439228482/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1440033948",
    "html_url": "https://github.com/foundry-rs/foundry/issues/4072#issuecomment-1440033948",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4072",
    "id": 1440033948,
    "node_id": "IC_kwDOGBlvNc5V1Syc",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-02-22T13:39:12Z",
    "updated_at": "2023-02-22T13:39:12Z",
    "author_association": "COLLABORATOR",
    "body": "forge does [have](https://github.com/foundry-rs/forge-std/blob/5bbb2aa82d86456dbf03305c3704cbd4fa93473f/src/Vm.sol#L290-L293) `pauseGasMetering` and `resumeGasMetering` cheats which effectively give the same behavior, perhaps you could use those cheat names on the KEVM side to prevent needing an `infiniteGas` cheat also?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1440033948/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1454849713",
    "html_url": "https://github.com/foundry-rs/foundry/issues/4072#issuecomment-1454849713",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4072",
    "id": 1454849713,
    "node_id": "IC_kwDOGBlvNc5Wtz6x",
    "user": {
      "login": "ehildenb",
      "id": 12721972,
      "node_id": "MDQ6VXNlcjEyNzIxOTcy",
      "avatar_url": "https://avatars.githubusercontent.com/u/12721972?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ehildenb",
      "html_url": "https://github.com/ehildenb",
      "followers_url": "https://api.github.com/users/ehildenb/followers",
      "following_url": "https://api.github.com/users/ehildenb/following{/other_user}",
      "gists_url": "https://api.github.com/users/ehildenb/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ehildenb/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ehildenb/subscriptions",
      "organizations_url": "https://api.github.com/users/ehildenb/orgs",
      "repos_url": "https://api.github.com/users/ehildenb/repos",
      "events_url": "https://api.github.com/users/ehildenb/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ehildenb/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-04T19:27:34Z",
    "updated_at": "2023-03-04T19:27:34Z",
    "author_association": "NONE",
    "body": "Well, it's different semantics really, infinite gas means you still get gas metering but it won't run out, so you can still tell how much gas something used. Maybe you also mean that? We'll take a look. But would also be nice to have the `setSymbolicStorage` (or `setArbitraryStorage`), whcih I think should not be too hard for Foundry. It's really by far the most useful one we use.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1454849713/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1456844543",
    "html_url": "https://github.com/foundry-rs/foundry/issues/4072#issuecomment-1456844543",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4072",
    "id": 1456844543,
    "node_id": "IC_kwDOGBlvNc5W1a7_",
    "user": {
      "login": "ehildenb",
      "id": 12721972,
      "node_id": "MDQ6VXNlcjEyNzIxOTcy",
      "avatar_url": "https://avatars.githubusercontent.com/u/12721972?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ehildenb",
      "html_url": "https://github.com/ehildenb",
      "followers_url": "https://api.github.com/users/ehildenb/followers",
      "following_url": "https://api.github.com/users/ehildenb/following{/other_user}",
      "gists_url": "https://api.github.com/users/ehildenb/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ehildenb/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ehildenb/subscriptions",
      "organizations_url": "https://api.github.com/users/ehildenb/orgs",
      "repos_url": "https://api.github.com/users/ehildenb/repos",
      "events_url": "https://api.github.com/users/ehildenb/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ehildenb/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-06T19:39:26Z",
    "updated_at": "2023-03-07T06:40:27Z",
    "author_association": "NONE",
    "body": "@gakonst , I had a conversation with @mds1 about this at EthDenver, and I tried to emphasize that `symbolicStorage` (or `arbitraryStorage`) is really a massive leap in expressive power both for us and for Foundry.\r\n\r\nWhen you are testing against contract state, Foundry is currently verifying that \"against an initial deployment of the contract, the given property holds\". Being able to fuzz against storage makes it instead that \"against an arbitrary intermediate state, the given property holds\", it is a massive generalization. For verification, it honestly does not even make much benefit to verify _without_ this extra expressive power.\r\n\r\nCheatcode `vm.setArbitraryStorage(address)` and `vm.setArbitraryStorage()` (which uses current address or prank address), can operate in the fuzzing setting as following:\r\n\r\n- Mark that accounts storage as arbitrary (boolean flag?)\r\n- Every `sstore` that comes through, you do a normal write.\r\n- On `sload`, you first check: Has that storage slot already been written?\r\n  - If so, you return the written value.\r\n  - If not, you generate a random uint256, and write it to the storage.\r\n\r\nThat way, every storage slot is being fuzzed over, and you can still do `vm.assume(...)` on read storage slots to enforce certain contract invariants. But subsequent reads from the same slot should give back the same value as before.\r\n\r\nNote this is more general than just being able to say that some particular value is arbitrary, which can already be achieved by passing in a random `uint256` to the test function and writing it to the storage slot you want to be arbitrary.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1456844543/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1458637402",
    "html_url": "https://github.com/foundry-rs/foundry/issues/4072#issuecomment-1458637402",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4072",
    "id": 1458637402,
    "node_id": "IC_kwDOGBlvNc5W8Qpa",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-07T18:30:12Z",
    "updated_at": "2023-03-07T18:30:12Z",
    "author_association": "COLLABORATOR",
    "body": "Agreed, I do think these would be generically useful and they all seem pretty straightforward to implement, cc @mattsse.\r\n\r\n@ehildenb I think 1 or 2 examples of how usage would look in practice would be valuable. Would this be a good example demonstrating the use of `setArbitraryStorage`? \r\n\r\n```solidity\r\ncontract ERC20Burn is Test {\r\n  ERC20 token;\r\n\r\n  function setUp() public {\r\n    token = new ERC20(\"Token\", \"TKN\");\r\n    vm.setArbitraryStorage(address(token));\r\n  }\r\n\r\n  // QUESTION: Is this supposed to be structured as a fuzz test? Or maybe we need another\r\n  // way to specify how many runs to execute since it is different than a regular fuzz test\r\n  function test_BurnsTheUsersFullTokenBalance() {\r\n    // Owner should be able to burn all of the user's tokens. When the burn\r\n    // method checks the user's balance, the `setArbitraryStorage` tells forge\r\n    // to put a random value there since it has not yet been accessed.\r\n    vm.prank(owner);\r\n    token.burn(user); \r\n    assertEq(token.balanceOf(user), 0);\r\n  }\r\n}\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1458637402/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1458693535",
    "html_url": "https://github.com/foundry-rs/foundry/issues/4072#issuecomment-1458693535",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4072",
    "id": 1458693535,
    "node_id": "IC_kwDOGBlvNc5W8eWf",
    "user": {
      "login": "ehildenb",
      "id": 12721972,
      "node_id": "MDQ6VXNlcjEyNzIxOTcy",
      "avatar_url": "https://avatars.githubusercontent.com/u/12721972?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ehildenb",
      "html_url": "https://github.com/ehildenb",
      "followers_url": "https://api.github.com/users/ehildenb/followers",
      "following_url": "https://api.github.com/users/ehildenb/following{/other_user}",
      "gists_url": "https://api.github.com/users/ehildenb/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ehildenb/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ehildenb/subscriptions",
      "organizations_url": "https://api.github.com/users/ehildenb/orgs",
      "repos_url": "https://api.github.com/users/ehildenb/repos",
      "events_url": "https://api.github.com/users/ehildenb/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ehildenb/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-07T19:17:11Z",
    "updated_at": "2023-03-07T19:17:11Z",
    "author_association": "NONE",
    "body": "That looks like an excellent test! If you had a token which just implemented the `burn` as a no-op, this test would pass without `setArbitraryStorage` every time. But with that, it would fail correctly.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1458693535/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1501192382",
    "html_url": "https://github.com/foundry-rs/foundry/issues/4072#issuecomment-1501192382",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4072",
    "id": 1501192382,
    "node_id": "IC_kwDOGBlvNc5ZemC-",
    "user": {
      "login": "sambacha",
      "id": 32783916,
      "node_id": "MDQ6VXNlcjMyNzgzOTE2",
      "avatar_url": "https://avatars.githubusercontent.com/u/32783916?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sambacha",
      "html_url": "https://github.com/sambacha",
      "followers_url": "https://api.github.com/users/sambacha/followers",
      "following_url": "https://api.github.com/users/sambacha/following{/other_user}",
      "gists_url": "https://api.github.com/users/sambacha/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sambacha/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sambacha/subscriptions",
      "organizations_url": "https://api.github.com/users/sambacha/orgs",
      "repos_url": "https://api.github.com/users/sambacha/repos",
      "events_url": "https://api.github.com/users/sambacha/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sambacha/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-04-09T18:59:18Z",
    "updated_at": "2023-04-09T18:59:18Z",
    "author_association": "CONTRIBUTOR",
    "body": "wen `symbolicStorage` ",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1501192382/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
