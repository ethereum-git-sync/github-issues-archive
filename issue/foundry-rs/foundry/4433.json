{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/4433",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4433/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4433/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4433/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/4433",
  "id": 1600230025,
  "node_id": "I_kwDOGBlvNc5fYZKJ",
  "number": 4433,
  "title": "meta(fuzzer): tracking issue for improvements to property tests and invariant tests",
  "user": {
    "login": "mds1",
    "id": 17163988,
    "node_id": "MDQ6VXNlcjE3MTYzOTg4",
    "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mds1",
    "html_url": "https://github.com/mds1",
    "followers_url": "https://api.github.com/users/mds1/followers",
    "following_url": "https://api.github.com/users/mds1/following{/other_user}",
    "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
    "organizations_url": "https://api.github.com/users/mds1/orgs",
    "repos_url": "https://api.github.com/users/mds1/repos",
    "events_url": "https://api.github.com/users/mds1/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mds1/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3394554570,
      "node_id": "LA_kwDOGBlvNc7KVMrK",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/A-fuzzing",
      "name": "A-fuzzing",
      "color": "FBCA04",
      "default": false,
      "description": "Area: fuzzing"
    },
    {
      "id": 3593644915,
      "node_id": "LA_kwDOGBlvNc7WMqtz",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/Cmd-forge-test",
      "name": "Cmd-forge-test",
      "color": "006B75",
      "default": false,
      "description": "Command: forge test"
    },
    {
      "id": 3703752787,
      "node_id": "LA_kwDOGBlvNc7cwshT",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/C-forge",
      "name": "C-forge",
      "color": "5319E7",
      "default": false,
      "description": "Command: forge"
    },
    {
      "id": 3746533612,
      "node_id": "LA_kwDOGBlvNc7fT5Ds",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-meta",
      "name": "T-meta",
      "color": "BFD4F2",
      "default": false,
      "description": "Type: meta"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 0,
  "created_at": "2023-02-26T22:43:36Z",
  "updated_at": "2023-05-02T15:16:05Z",
  "closed_at": null,
  "author_association": "COLLABORATOR",
  "active_lock_reason": null,
  "body": "### Component\r\n\r\nForge\r\n\r\n### Describe the feature you would like\r\n\r\nThis issue tracks general fuzzer improvements that improve both property tests and invariant tests. (There will be a separate tracking issue for things that are strictly invariant test related).\r\n\r\nItems are roughly ordered by my opinion of priority, both at the header-level and the bullet-level. I say \"roughly ordered\" because some items are much bigger scope than others so having a strict ordering doesn't make much sense.\r\n\r\n## Fuzzer Benchmark/Tests\r\n\r\nFirst priority is some tests and benchmarks. to verify behavior of the fuzzer has not regressed as it's changed. Potential test cases:\r\n\r\n- https://github.com/foundry-rs/foundry/issues/2851\r\n- https://github.com/crytic/echidna/tree/master/tests/solidity\r\n- https://blog.trailofbits.com/2023/02/27/reusable-properties-ethereum-contracts-echidna/ \r\n\r\nThis is tracked in a separate issue here: https://github.com/foundry-rs/foundry/issues/3411\r\n\r\n## Refactor / Tech Debt / Cleanup\r\n\r\n- Remove proptest? It has some limitations and isn't currently maintained (ref discussions in https://github.com/foundry-rs/foundry/issues/990 and https://github.com/proptest-rs/proptest/issues/268). This would be a big change so shouldn't be done until we have tests/benchmarks in place.\r\n- https://github.com/foundry-rs/foundry/issues/3153\r\n\r\n## Features / Performance\r\n\r\nHigh Priority\r\n- https://github.com/foundry-rs/foundry/issues/3062 OR https://github.com/foundry-rs/foundry/issues/4085 — Before implementing, need to decide if we like the config file approach or a comment-based approach, then finalize UX, then implement. Comment approach does add flexibility and allows future expansion to things like #4097\r\n- https://github.com/foundry-rs/foundry/issues/3521\r\n- https://github.com/foundry-rs/foundry/issues/585\r\n\r\nLow priority:\r\n- https://github.com/foundry-rs/foundry/issues/4867\r\n- https://github.com/foundry-rs/foundry/issues/990 — Not supported by proptest so currently hard, but may be easy after a refactor. Low priority because it can be replicated by setting runs to max uint\r\n- https://github.com/foundry-rs/foundry/issues/4090\r\n- https://github.com/foundry-rs/foundry/issues/4097 — If we go with the comment approach for [#3062](https://github.com/foundry-rs/foundry/issues/3062), this is doable\r\n- https://github.com/foundry-rs/foundry/issues/3844 — I think this would be hard to implement with the current architecture since things run in parallel, and you can accomplish the same thing with `vm.writeLine`, so this isn't necessary IMO. May be worth closing\r\n- https://github.com/foundry-rs/foundry/issues/4091 — This flag would conflict with the existing `max_test_rejects` flag, so one needs to take precedence and we need warn if the both exist. Personally this feels like the complexity/config growth isn't worth it since the same functionality can already be accomplished, so may be worth closing\r\n\r\n## Failure Persistence and Replay\r\n\r\nI have this last because the functionality can be replicated a bit tediously by copying failed tests into concrete tests. \r\n\r\n- https://github.com/foundry-rs/foundry/issues/2551\r\n- https://github.com/foundry-rs/foundry/issues/2552\r\n\r\n## Long Term Fuzz Techniques\r\n\r\nSome more advanced techniques to consider down the road:\r\n- Using outputs from symbolic execution to seed the fuzzer\r\n- Techniques described in the discussion in https://github.com/foundry-rs/foundry/issues/3277\r\n\r\n\r\n### Additional context\r\n\r\n_No response_",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/4433/reactions",
    "total_count": 1,
    "+1": 1,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4433/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[

]
