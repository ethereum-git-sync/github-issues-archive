{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/759",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/759/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/759/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/759/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/759",
  "id": 1140363989,
  "node_id": "I_kwDOGBlvNc5D-JLV",
  "number": 759,
  "title": "Yul Compilation",
  "user": {
    "login": "ControlCplusControlV",
    "id": 44706811,
    "node_id": "MDQ6VXNlcjQ0NzA2ODEx",
    "avatar_url": "https://avatars.githubusercontent.com/u/44706811?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ControlCplusControlV",
    "html_url": "https://github.com/ControlCplusControlV",
    "followers_url": "https://api.github.com/users/ControlCplusControlV/followers",
    "following_url": "https://api.github.com/users/ControlCplusControlV/following{/other_user}",
    "gists_url": "https://api.github.com/users/ControlCplusControlV/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ControlCplusControlV/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ControlCplusControlV/subscriptions",
    "organizations_url": "https://api.github.com/users/ControlCplusControlV/orgs",
    "repos_url": "https://api.github.com/users/ControlCplusControlV/repos",
    "events_url": "https://api.github.com/users/ControlCplusControlV/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ControlCplusControlV/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3593644820,
      "node_id": "LA_kwDOGBlvNc7WMqsU",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-feature",
      "name": "T-feature",
      "color": "BFD4F2",
      "default": false,
      "description": "Type: feature"
    },
    {
      "id": 3703752787,
      "node_id": "LA_kwDOGBlvNc7cwshT",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/C-forge",
      "name": "C-forge",
      "color": "5319E7",
      "default": false,
      "description": "Command: forge"
    },
    {
      "id": 3759719580,
      "node_id": "LA_kwDOGBlvNc7gGMSc",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/P-normal",
      "name": "P-normal",
      "color": "D93F0B",
      "default": false,
      "description": "Priority: normal"
    },
    {
      "id": 3777098561,
      "node_id": "LA_kwDOGBlvNc7hIfNB",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/Cmd-forge-build",
      "name": "Cmd-forge-build",
      "color": "006B75",
      "default": false,
      "description": "Command: forge build"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2022-02-16T17:48:15Z",
  "updated_at": "2022-02-17T11:55:58Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "### Component\n\nForge\n\n### Describe the feature you would like\n\nAllow the compilation of Yul Files and the ability to run tests against them. In essence just adding support for compiling and testing .yul Files.\r\n\r\nUsing a Solidity File containing an interface whose ABI can be specified to be used for a Yul file\n\n### Additional context\n\nThe Solc compiler has a language option which can be changed to \"Yul\" to compile the yul files themselves, as far as ABI I've only done it with the Yul+ js package, but if you parse the match case statement in most Yul files and it may make more sense to target Yul+ support first (because sig\"\" statements can be used to identify Solidity compatible functions) or maybe require a Solidity interface that pairs with each Yul file, whose ABI will be cast on top of said Yul file (akin to YulContract.sol.yul)\r\n\r\nHappy to help and talk on Yul support, but my toolchain only works on truffle and want to help bring Yul to foundry, and felt cramming in Yul via FFI would be sloppy vs a direct Yul compilation, especially as if Yul is compile able by foundry, then I can easily add Yul+ support on top.",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/759/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/759/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1041930004",
    "html_url": "https://github.com/foundry-rs/foundry/issues/759#issuecomment-1041930004",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/759",
    "id": 1041930004,
    "node_id": "IC_kwDOGBlvNc4-GpcU",
    "user": {
      "login": "ControlCplusControlV",
      "id": 44706811,
      "node_id": "MDQ6VXNlcjQ0NzA2ODEx",
      "avatar_url": "https://avatars.githubusercontent.com/u/44706811?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ControlCplusControlV",
      "html_url": "https://github.com/ControlCplusControlV",
      "followers_url": "https://api.github.com/users/ControlCplusControlV/followers",
      "following_url": "https://api.github.com/users/ControlCplusControlV/following{/other_user}",
      "gists_url": "https://api.github.com/users/ControlCplusControlV/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ControlCplusControlV/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ControlCplusControlV/subscriptions",
      "organizations_url": "https://api.github.com/users/ControlCplusControlV/orgs",
      "repos_url": "https://api.github.com/users/ControlCplusControlV/repos",
      "events_url": "https://api.github.com/users/ControlCplusControlV/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ControlCplusControlV/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-16T17:49:24Z",
    "updated_at": "2022-02-16T17:49:24Z",
    "author_association": "NONE",
    "body": "I am learning rust still, but can provide insight on working with Solc + Yul, and depending on part I can also help with writing rust, but not too familiar with Foundry's codebase so wasn't sure where to start with implementing Yul Support",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1041930004/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1042872646",
    "html_url": "https://github.com/foundry-rs/foundry/issues/759#issuecomment-1042872646",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/759",
    "id": 1042872646,
    "node_id": "IC_kwDOGBlvNc4-KPlG",
    "user": {
      "login": "mattsse",
      "id": 19890894,
      "node_id": "MDQ6VXNlcjE5ODkwODk0",
      "avatar_url": "https://avatars.githubusercontent.com/u/19890894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mattsse",
      "html_url": "https://github.com/mattsse",
      "followers_url": "https://api.github.com/users/mattsse/followers",
      "following_url": "https://api.github.com/users/mattsse/following{/other_user}",
      "gists_url": "https://api.github.com/users/mattsse/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mattsse/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mattsse/subscriptions",
      "organizations_url": "https://api.github.com/users/mattsse/orgs",
      "repos_url": "https://api.github.com/users/mattsse/repos",
      "events_url": "https://api.github.com/users/mattsse/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mattsse/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-17T11:55:58Z",
    "updated_at": "2022-02-17T11:55:58Z",
    "author_association": "MEMBER",
    "body": "foundry uses `ethers-solc`'s solc bindings \r\n\r\nhttps://github.com/gakonst/ethers-rs/blob/f97a8ca5410331145cb742d40ebfe4a816dd3190/ethers-solc/src/compile/mod.rs#L117-L131\r\n\r\nRight now we're only supporting solidity and hence only looking for `*.sol` files.\r\n\r\nwe're using the [standard json input](https://docs.soliditylang.org/en/latest/using-the-compiler.html#compiler-api) which means that we pipe the `CompilerInput` as json string to solc's std input:\r\n\r\nhttps://github.com/gakonst/ethers-rs/blob/master/ethers-solc/src/compile/mod.rs#L410-L413\r\n\r\nI guess we should start with figuring out how to modify the `CompilerInput` to support yul, perhaps changing the language is already enough\r\n\r\n```json\r\n// Required: Source code language. Currently supported are \"Solidity\" and \"Yul\".\r\n  \"language\": \"Solidity\",\r\n```\r\n\r\nwould you like to try experimenting with that?\r\nbasically start with adding additional functions for creating a `CompilerInput` with \"Yul\" as language:\r\nhttps://github.com/gakonst/ethers-rs/blob/master/ethers-solc/src/artifacts/mod.rs#L53-L61\r\n\r\nthen try to compile it via `solc.compile`\r\n\r\nhttps://github.com/gakonst/ethers-rs/blob/master/ethers-solc/src/compile/mod.rs#L438-L452",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1042872646/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
