{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/6125",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/6125/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/6125/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/6125/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/6125",
  "id": 1963848441,
  "node_id": "I_kwDOGBlvNc51DfL5",
  "number": 6125,
  "title": "feat(cheatcodes): Record Account + Storage Access Cheatcode",
  "user": {
    "login": "refcell",
    "id": 21288394,
    "node_id": "MDQ6VXNlcjIxMjg4Mzk0",
    "avatar_url": "https://avatars.githubusercontent.com/u/21288394?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/refcell",
    "html_url": "https://github.com/refcell",
    "followers_url": "https://api.github.com/users/refcell/followers",
    "following_url": "https://api.github.com/users/refcell/following{/other_user}",
    "gists_url": "https://api.github.com/users/refcell/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/refcell/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/refcell/subscriptions",
    "organizations_url": "https://api.github.com/users/refcell/orgs",
    "repos_url": "https://api.github.com/users/refcell/repos",
    "events_url": "https://api.github.com/users/refcell/events{/privacy}",
    "received_events_url": "https://api.github.com/users/refcell/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3593644820,
      "node_id": "LA_kwDOGBlvNc7WMqsU",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-feature",
      "name": "T-feature",
      "color": "BFD4F2",
      "default": false,
      "description": "Type: feature"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2023-10-26T15:39:41Z",
  "updated_at": "2023-10-26T17:40:24Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "### Component\r\n\r\nForge\r\n\r\n### Describe the feature you would like\r\n\r\n**Background Context**\r\n\r\nDuring test and script execution, it is currently not possible to get an ordered list of account/storage accesses. For account accesses, cheats such as `vm.expectCall` requires knowing the exact destination and parameters of calls ahead of time. For storage, `vm.record` and `vm.accesses` cheats are not enumerated or ordered. It also requires knowing ahead of time which accounts to check for storage accesses.\r\n\r\n**Feature Proposal**\r\n\r\nIntroduce a new `vm.recordStateDiff()` cheatcode that records all account and storage accesses in an ordered, chronological (for scripts, parallelized testing may be more tricky).\r\n\r\n```solidity\r\nstruct AccountAccess {\r\n    address account;\r\n    bool isCreate;\r\n    bool initialized;\r\n    uint64 prevNonce;\r\n    uint64 nonce;\r\n    uint256 prevValue;\r\n    uint256 value;\r\n    bytes prevCode;\r\n    bytes code;\r\n    bytes data;\r\n    bool reverted;\r\n    StorageAccess[] storageAccesses;\r\n}\r\n\r\nstruct StorageAccess {\r\n    address account;\r\n    bytes32 slot;\r\n    bool isWrite;\r\n    bytes32 previousValue;\r\n    bytes32 newValue;\r\n    bool reverted;\r\n}\r\n\r\n/// Record all account and storage accesses.\r\n/// CREATE or CALL opcodes produce an AccountAccess.\r\n/// Storage accesses produce a StorageAccess object.\r\nfunction recordStateDiff() external;\r\n\r\n// Returns an ordered array of all account and storage accesses\r\nfunction getStateDiff() external returns (AccountAccess[] memory);\r\n```\r\n\r\n**Implementation**\r\n\r\nInternally, Forge maintains a `Vec<Vec<RecordedAccountAccess>>`. The vector is 2-dimensional to allow for grouping account accesses by relative call depth, so they can be updated with the eventual failure status of that callframe before being merged with the previous `Vec` to preserve absolute ordering.\r\n\r\nOn each call or create, a single-element `Vec<RecordedAccountAccess>` is appended to the state with the context of the `CALL` or `CREATE` opcode.\r\n\r\nOn `call_end` or `create_end`, the last `Vec<RecordedAccountAccess>` is `pop()`'d off and the accesses therein are updated with the failure status of the `CREATE` or `CALL` opcode. This `Vec<RecordedAccountAccess>` is then merged with the previous in the `Vec<Vec<...>>`, or else re-appended to the empty `Vec<Vec<...>>`.\r\n\r\nWithin `RecordedAccountAccess`, there is a `Vec<RecordedStorageAccess>` containing a list of storage accesses pertaining to that account. On each `SLOAD` or `SSTORE`, a `RecordedStorageAccess` is appended to the last `RecordedAccountAccess`.\r\n\r\n**Reasoning**\r\n\r\nOrdering is important when manually calculating account or storage-slot \"warm-ness,\" as is the eventual reverted status of a callframe in which an account or storage access happened.\r\n\r\nOpcodes have different costs depending on whether or not a storage slot is \"warm,\" \"cold,\" or going from zero-to-non-zero value, or when sending value to an empty/uninitialized account. [On an even lower-level, the EVM does not mark \"cold\" accounts or slots as \"warm\" if the context from which they were accessed reverts (with the exception of the counterfactual create address)](https://twitter.com/emo_eth/status/1696281639201259677).\r\n\r\nThus, context like `previousValue`, `newValue`, `isCreate`, `initialized`, and `reverted` are important for understanding and evaluating the (hypothetical) behavior of the EVM.",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/6125/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/6125/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1781427505",
    "html_url": "https://github.com/foundry-rs/foundry/issues/6125#issuecomment-1781427505",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/6125",
    "id": 1781427505,
    "node_id": "IC_kwDOGBlvNc5qLm0x",
    "user": {
      "login": "refcell",
      "id": 21288394,
      "node_id": "MDQ6VXNlcjIxMjg4Mzk0",
      "avatar_url": "https://avatars.githubusercontent.com/u/21288394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/refcell",
      "html_url": "https://github.com/refcell",
      "followers_url": "https://api.github.com/users/refcell/followers",
      "following_url": "https://api.github.com/users/refcell/following{/other_user}",
      "gists_url": "https://api.github.com/users/refcell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/refcell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/refcell/subscriptions",
      "organizations_url": "https://api.github.com/users/refcell/orgs",
      "repos_url": "https://api.github.com/users/refcell/repos",
      "events_url": "https://api.github.com/users/refcell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/refcell/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-10-26T16:10:46Z",
    "updated_at": "2023-10-26T16:10:46Z",
    "author_association": "CONTRIBUTOR",
    "body": "This issue replaces the following PRs:\r\n- https://github.com/foundry-rs/foundry/pull/6087\r\n- https://github.com/foundry-rs/foundry/pull/5794\r\n\r\nA new pr should introduce this cheatcode following the alloy port.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1781427505/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
