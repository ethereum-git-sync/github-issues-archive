{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/748",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/748/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/748/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/748/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/748",
  "id": 1140137173,
  "node_id": "I_kwDOGBlvNc5D9RzV",
  "number": 748,
  "title": "meta: handle EVM Semantic differences across chains",
  "user": {
    "login": "mds1",
    "id": 17163988,
    "node_id": "MDQ6VXNlcjE3MTYzOTg4",
    "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mds1",
    "html_url": "https://github.com/mds1",
    "followers_url": "https://api.github.com/users/mds1/followers",
    "following_url": "https://api.github.com/users/mds1/following{/other_user}",
    "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
    "organizations_url": "https://api.github.com/users/mds1/orgs",
    "repos_url": "https://api.github.com/users/mds1/repos",
    "events_url": "https://api.github.com/users/mds1/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mds1/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3703752787,
      "node_id": "LA_kwDOGBlvNc7cwshT",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/C-forge",
      "name": "C-forge",
      "color": "5319E7",
      "default": false,
      "description": "Command: forge"
    },
    {
      "id": 3746533612,
      "node_id": "LA_kwDOGBlvNc7fT5Ds",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-meta",
      "name": "T-meta",
      "color": "BFD4F2",
      "default": false,
      "description": "Type: meta"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2022-02-16T15:03:34Z",
  "updated_at": "2023-05-24T20:43:33Z",
  "closed_at": null,
  "author_association": "COLLABORATOR",
  "active_lock_reason": null,
  "body": "### Component\r\n\r\nForge\r\n\r\n### Describe the feature you would like\r\n\r\nAs L2s grow in popularity, developers will run into issues due to the fact that not all EVM compatible networks have the same semantics as L1. For example, if you want to develop and test against a forked Arbitrum:\r\n- On Arbitrum, `block.number` returns the most recent L1 block. But forge doesn't know this.\r\n- If I fork Arbitrum mainnet for my tests and rely on a contract with a `lastBlockNumber` storage variable, that variable will have L1 block numbers\r\n- If my contracts rely on block delta between the current block and the `lastBlockNumber` stored, forge's `block.number` will return the provider's block number, which is about 6M, but the last L1 block is about 14M\r\n- Therefore by default my tests will fail due to underflow when computing block delta, because `currentBlock - lastBlock` would evaluate to `6M - 14M`\r\n- One other issue with Arbitrum is that is has different gas accounting than the L1 EVM implementation\r\n\r\nIn forge, we can use the `vm.roll` cheatcode to simply move the block number forward or back as required and work around this. And maybe that's ok, but:\r\n1. It still feels a bit dirty, clunky, and potentially risky to have to hack around differing semantics in this way\r\n2. I can no longer easily run the same test suite on both arbitrum and mainnet, because I need to execute `vm.roll` conditionally based on network, and I don't think there's currently an easy way to do that\r\n3. Other networks might not have such a straightforward workaround\r\n4. There's still the gas accounting issue\r\n\r\nSo the scope of this issue is: how should forge handle this? Some possibilities:\r\n1. Don't handle it: if running tests and the chain ID doesn't correspond to L1 mainnet or testnet, show a warning as the very last thing before tests execute, such as \"WARNING: This network may have different EVM semantics than mainnet, and therefore behavior of your contracts and tests may not represent what you'd see in production\"\r\n2. Handle each network's differences: For example, update the VM logic to handle pulling timestamps from a different RPC than the fork RPC. Then if forge detect's the RPC is an Arbitrum network, it can ensure there's also a mainnet RPC also and use that to mirror production behavior.\r\n3. Push the behavior of 2 into some plugin layer as part of #706 \r\n\r\nThe three ideas above a ll have their pros and cons, and there may be other ideas. \r\n\r\nPersonally I lean away from option 1, and would prefer options 2 or 3. As a developer, those would give me more confidence that my system does behave as intended, whereas with option 1 it's much harder to get that confidence.\r\n\r\nAnother question is how many networks have differing semantics, and how many differences are there? If it's just Arbitrum's `block.number` different, option 2 is much more feasible than if there's multiple networks and multiple other differences, that gets much more complex. \r\n\r\n### Additional context\r\n\r\n_No response_",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/748/reactions",
    "total_count": 5,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 5,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/748/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1172640326",
    "html_url": "https://github.com/foundry-rs/foundry/issues/748#issuecomment-1172640326",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/748",
    "id": 1172640326,
    "node_id": "IC_kwDOGBlvNc5F5RJG",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-01T19:06:37Z",
    "updated_at": "2022-07-01T19:06:37Z",
    "author_association": "MEMBER",
    "body": "Is this being solved by #1715? cc @mattsse ",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1172640326/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1178841381",
    "html_url": "https://github.com/foundry-rs/foundry/issues/748#issuecomment-1178841381",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/748",
    "id": 1178841381,
    "node_id": "IC_kwDOGBlvNc5GQ7El",
    "user": {
      "login": "mattsse",
      "id": 19890894,
      "node_id": "MDQ6VXNlcjE5ODkwODk0",
      "avatar_url": "https://avatars.githubusercontent.com/u/19890894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mattsse",
      "html_url": "https://github.com/mattsse",
      "followers_url": "https://api.github.com/users/mattsse/followers",
      "following_url": "https://api.github.com/users/mattsse/following{/other_user}",
      "gists_url": "https://api.github.com/users/mattsse/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mattsse/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mattsse/subscriptions",
      "organizations_url": "https://api.github.com/users/mattsse/orgs",
      "repos_url": "https://api.github.com/users/mattsse/repos",
      "events_url": "https://api.github.com/users/mattsse/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mattsse/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-08T10:46:53Z",
    "updated_at": "2022-07-08T10:48:20Z",
    "author_association": "MEMBER",
    "body": "@mds1 with #1715 \r\nthis would be possible to implement now, but I'm not sure about the ergonomics yet.\r\n\r\nhow should we handle it when we're forking arbitrum for example?\r\n\r\nanother `forkL2(l1Rpc, l2Rpc, l2Block)(l1Id,l2Id)` cheatcode for forking L2s? because we need two endpoints.\r\n\r\nthen we'd:\r\n1. setup L2 fork\r\n2. get l1block\r\n3. setup L1 fork\r\n4. pin `block.*` to L1 env\r\n5. return fork Ids\r\n\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1178841381/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1178906548",
    "html_url": "https://github.com/foundry-rs/foundry/issues/748#issuecomment-1178906548",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/748",
    "id": 1178906548,
    "node_id": "IC_kwDOGBlvNc5GRK-0",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-08T11:59:30Z",
    "updated_at": "2022-07-08T11:59:30Z",
    "author_association": "COLLABORATOR",
    "body": "Hmm, something like that would work, however it only solves that one difference and there are many other differences, so it's probably worth thinking of a more generalized approach first before implementing that. \n\nHowever, both Arbitrum and Optimism have major upgrades coming soon ™️ (Nitro and Bedrock, respectively), which will change some of those semantics. They'll both still be a bit different than L1, but they will get more similar to L1 AFAIK, so some of the above differences go away and some other changes arise. (I only mention those two L2s since they're the most popular, but there are others I'm less familiar with).\n\nPerhaps a good path forward here is to:\n- Enumerate the current differences from L1 semantics for Arbitrum/Optimism\n- Enumerate the future differences from L1 semantics for Arbitrum/Optimism after the upcoming upgrades\n- Get an estimate from their teams about time to release the upgrade (and maybe they can provide us with both of the above also)\n- Use the above to gauge if we should punt until the upgrades, figure out an approach now, etc.\n\nIMO this particular block number difference is easy enough to work around at the moment thanks `vm.roll` + checking the current chain ID for any conditional test logic, so I don't think we have an urgent need for a `forkL2` type of cheatcode. However, @odyslam and @hexonaut do more cross-chain work/testing than I do so I'd love to get their thoughts too.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1178906548/reactions",
      "total_count": 2,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 2,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1561900377",
    "html_url": "https://github.com/foundry-rs/foundry/issues/748#issuecomment-1561900377",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/748",
    "id": 1561900377,
    "node_id": "IC_kwDOGBlvNc5dGLVZ",
    "user": {
      "login": "Evalir",
      "id": 26014927,
      "node_id": "MDQ6VXNlcjI2MDE0OTI3",
      "avatar_url": "https://avatars.githubusercontent.com/u/26014927?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Evalir",
      "html_url": "https://github.com/Evalir",
      "followers_url": "https://api.github.com/users/Evalir/followers",
      "following_url": "https://api.github.com/users/Evalir/following{/other_user}",
      "gists_url": "https://api.github.com/users/Evalir/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Evalir/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Evalir/subscriptions",
      "organizations_url": "https://api.github.com/users/Evalir/orgs",
      "repos_url": "https://api.github.com/users/Evalir/repos",
      "events_url": "https://api.github.com/users/Evalir/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Evalir/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-24T20:43:10Z",
    "updated_at": "2023-05-24T20:43:33Z",
    "author_association": "MEMBER",
    "body": "Adding to this issue an issue encountered while fixing an unrelated problem:\r\n\r\n- Deployment to pre-`Paris` EVM versions to L2s can fail silently unless the EVM Version is downgraded to `london` (https://github.com/foundry-rs/foundry/issues/4909#issuecomment-1558096388)",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1561900377/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
