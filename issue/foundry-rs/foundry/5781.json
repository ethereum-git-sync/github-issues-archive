{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/5781",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5781/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5781/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5781/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/5781",
  "id": 1882189976,
  "node_id": "I_kwDOGBlvNc5wL_CY",
  "number": 5781,
  "title": "`extcodesize` reports value greater than zero after `selfdestruct`",
  "user": {
    "login": "Bobface",
    "id": 10945014,
    "node_id": "MDQ6VXNlcjEwOTQ1MDE0",
    "avatar_url": "https://avatars.githubusercontent.com/u/10945014?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Bobface",
    "html_url": "https://github.com/Bobface",
    "followers_url": "https://api.github.com/users/Bobface/followers",
    "following_url": "https://api.github.com/users/Bobface/following{/other_user}",
    "gists_url": "https://api.github.com/users/Bobface/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Bobface/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Bobface/subscriptions",
    "organizations_url": "https://api.github.com/users/Bobface/orgs",
    "repos_url": "https://api.github.com/users/Bobface/repos",
    "events_url": "https://api.github.com/users/Bobface/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Bobface/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3334394228,
      "node_id": "MDU6TGFiZWwzMzM0Mzk0MjI4",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-bug",
      "name": "T-bug",
      "color": "d73a4a",
      "default": false,
      "description": "Type: bug"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2023-09-05T15:18:19Z",
  "updated_at": "2023-09-06T06:53:38Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "### Component\n\nForge, Anvil\n\n### Have you ensured that all of these are up to date?\n\n- [X] Foundry\n- [X] Foundryup\n\n### What version of Foundry are you on?\n\nforge 0.2.0 (dea5405 2023-08-17T00:25:19.368594453Z)\n\n### What command(s) is the bug in?\n\nscript\n\n### Operating System\n\nLinux\n\n### Describe the bug\n\nCalling `extcodesize` on a `selfdestruct`ed contract after the transaction is confirmed returns a value greater than zero.\r\n\r\nExample script:\r\n```\r\npragma solidity ^0.8.20;\r\n\r\nimport {Script} from \"forge-std/Script.sol\";\r\nimport {console} from \"forge-std/console.sol\";\r\n\r\ncontract Example is Script {\r\n    function run() external {\r\n        // Create a contract that selfdestructs\r\n        Destruct destruct = new Destruct();\r\n\r\n        // Call the selfdestruct function\r\n        destruct.destruct();\r\n\r\n        // This is only here to absolutely make sure that the line\r\n        // below it is executed after the selfdestruct tx is confirmed\r\n        payable(address(0)).transfer(0);\r\n\r\n        // This does not output 0, but 107\r\n        console.log(\"codesize\", address(destruct).code.length);\r\n    }\r\n}\r\n\r\ncontract Destruct {\r\n    function destruct() external {\r\n        selfdestruct(payable(0));\r\n    }\r\n}\r\n```\r\n\r\nExecuting it with\r\n```\r\nforge script \\\r\n    --broadcast \\\r\n    --slow \\\r\n    --rpc-url http://localhost:3000 \\\r\n    --with-gas-price 0 \\\r\n    -vvvv \\\r\n    Example\r\n```\r\n\r\nagainst a local `anvil` node running on `localhost:3000` results in\r\n```\r\nTraces:\r\n  [86293] Example::run() \r\n    ├─ [21475] → new Destruct@0xC7f2Cf4845C6db0e1a1e91ED41Bcd0FcC1b0E141\r\n    │   └─ ← 107 bytes of code\r\n    ├─ [7704] Destruct::destruct() \r\n    │   └─ ← ()\r\n    ├─ [0] 0x0000000000000000000000000000000000000000::fallback() \r\n    │   └─ ← ()\r\n    ├─ [0] console::9710a9d0(0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000006b0000000000000000000000000000000000000000000000000000000000000008636f646573697a65000000000000000000000000000000000000000000000000) [staticcall]\r\n    │   └─ ← ()\r\n    └─ ← ()\r\n\r\n\r\nScript ran successfully.\r\n\r\n== Logs ==\r\n  codesize 107\r\n```",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/5781/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5781/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1707007717",
    "html_url": "https://github.com/foundry-rs/foundry/issues/5781#issuecomment-1707007717",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5781",
    "id": 1707007717,
    "node_id": "IC_kwDOGBlvNc5lvt7l",
    "user": {
      "login": "klkvr",
      "id": 62447812,
      "node_id": "MDQ6VXNlcjYyNDQ3ODEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/62447812?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/klkvr",
      "html_url": "https://github.com/klkvr",
      "followers_url": "https://api.github.com/users/klkvr/followers",
      "following_url": "https://api.github.com/users/klkvr/following{/other_user}",
      "gists_url": "https://api.github.com/users/klkvr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/klkvr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/klkvr/subscriptions",
      "organizations_url": "https://api.github.com/users/klkvr/orgs",
      "repos_url": "https://api.github.com/users/klkvr/repos",
      "events_url": "https://api.github.com/users/klkvr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/klkvr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-09-05T17:17:32Z",
    "updated_at": "2023-09-05T17:17:32Z",
    "author_association": "CONTRIBUTOR",
    "body": "https://ethereum.stackexchange.com/questions/113861/q-extcodesize-is-non-zero-after-selfdestruct\r\n\r\nThis seems to be expected",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1707007717/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1707018286",
    "html_url": "https://github.com/foundry-rs/foundry/issues/5781#issuecomment-1707018286",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5781",
    "id": 1707018286,
    "node_id": "IC_kwDOGBlvNc5lvwgu",
    "user": {
      "login": "Bobface",
      "id": 10945014,
      "node_id": "MDQ6VXNlcjEwOTQ1MDE0",
      "avatar_url": "https://avatars.githubusercontent.com/u/10945014?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Bobface",
      "html_url": "https://github.com/Bobface",
      "followers_url": "https://api.github.com/users/Bobface/followers",
      "following_url": "https://api.github.com/users/Bobface/following{/other_user}",
      "gists_url": "https://api.github.com/users/Bobface/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Bobface/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Bobface/subscriptions",
      "organizations_url": "https://api.github.com/users/Bobface/orgs",
      "repos_url": "https://api.github.com/users/Bobface/repos",
      "events_url": "https://api.github.com/users/Bobface/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Bobface/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-09-05T17:25:20Z",
    "updated_at": "2023-09-05T17:25:20Z",
    "author_association": "CONTRIBUTOR",
    "body": "@klkvr The post you have linked to describes the case when calling `selfdestruct` and `extcodesize` in the same transaction. In that case it is indeed expected, as the contract is only destroyed at the end of the transaction.\r\n\r\nWhat I ran into is the issue that even after the transaction is confirmed, the `extcodesize` is still greater than zero.:\r\n- Transaction A: Calls `selfdestruct`\r\n- Transaction B (after A is confirmed): Calls `extcodesize` which returns >0 although it should be zero.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1707018286/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1707047765",
    "html_url": "https://github.com/foundry-rs/foundry/issues/5781#issuecomment-1707047765",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5781",
    "id": 1707047765,
    "node_id": "IC_kwDOGBlvNc5lv3tV",
    "user": {
      "login": "klkvr",
      "id": 62447812,
      "node_id": "MDQ6VXNlcjYyNDQ3ODEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/62447812?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/klkvr",
      "html_url": "https://github.com/klkvr",
      "followers_url": "https://api.github.com/users/klkvr/followers",
      "following_url": "https://api.github.com/users/klkvr/following{/other_user}",
      "gists_url": "https://api.github.com/users/klkvr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/klkvr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/klkvr/subscriptions",
      "organizations_url": "https://api.github.com/users/klkvr/orgs",
      "repos_url": "https://api.github.com/users/klkvr/repos",
      "events_url": "https://api.github.com/users/klkvr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/klkvr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-09-05T17:48:29Z",
    "updated_at": "2023-09-05T17:48:29Z",
    "author_association": "CONTRIBUTOR",
    "body": "The script simulation is executed as a single call to script's `run()` method. After that, it collects all external calls, and broadcasts them as separate transactions. The logs you are seeing are from this atomic simulation. \r\n\r\nThis seems to be a case when executing calls atomically and in separate transaction may cause different results. I am not even sure if there are any other EVM scenarios when such behavior may happen :)\r\n\r\nIt seems that fixing this is not possible without much changes to script execution logic, as the only way to collect external-calls is to firstly simulate transaction atomically\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1707047765/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1707773188",
    "html_url": "https://github.com/foundry-rs/foundry/issues/5781#issuecomment-1707773188",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5781",
    "id": 1707773188,
    "node_id": "IC_kwDOGBlvNc5lyo0E",
    "user": {
      "login": "Bobface",
      "id": 10945014,
      "node_id": "MDQ6VXNlcjEwOTQ1MDE0",
      "avatar_url": "https://avatars.githubusercontent.com/u/10945014?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Bobface",
      "html_url": "https://github.com/Bobface",
      "followers_url": "https://api.github.com/users/Bobface/followers",
      "following_url": "https://api.github.com/users/Bobface/following{/other_user}",
      "gists_url": "https://api.github.com/users/Bobface/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Bobface/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Bobface/subscriptions",
      "organizations_url": "https://api.github.com/users/Bobface/orgs",
      "repos_url": "https://api.github.com/users/Bobface/repos",
      "events_url": "https://api.github.com/users/Bobface/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Bobface/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-09-06T06:53:38Z",
    "updated_at": "2023-09-06T06:53:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "@klkvr Ahh, I see. Thanks for the clarification of the internal workings of `forge script`. That explains why this happens.\r\n\r\nI wonder if this should still be addressed somehow. The above example is of course made up, but `selfdestruct`ing a contract can be a real-world use case, and the different behaviour between simulation and on-chain execution could cause bugs here. ",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1707773188/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
