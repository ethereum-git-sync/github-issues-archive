{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/2359",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2359/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2359/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2359/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/2359",
  "id": 1307269367,
  "node_id": "I_kwDOGBlvNc5N61j3",
  "number": 2359,
  "title": "feat: `vm.mineSalt` cheat code",
  "user": {
    "login": "mds1",
    "id": 17163988,
    "node_id": "MDQ6VXNlcjE3MTYzOTg4",
    "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mds1",
    "html_url": "https://github.com/mds1",
    "followers_url": "https://api.github.com/users/mds1/followers",
    "following_url": "https://api.github.com/users/mds1/following{/other_user}",
    "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
    "organizations_url": "https://api.github.com/users/mds1/orgs",
    "repos_url": "https://api.github.com/users/mds1/repos",
    "events_url": "https://api.github.com/users/mds1/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mds1/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3593644820,
      "node_id": "LA_kwDOGBlvNc7WMqsU",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-feature",
      "name": "T-feature",
      "color": "BFD4F2",
      "default": false,
      "description": "Type: feature"
    },
    {
      "id": 3593644915,
      "node_id": "LA_kwDOGBlvNc7WMqtz",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/Cmd-forge-test",
      "name": "Cmd-forge-test",
      "color": "006B75",
      "default": false,
      "description": "Command: forge test"
    },
    {
      "id": 3703752787,
      "node_id": "LA_kwDOGBlvNc7cwshT",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/C-forge",
      "name": "C-forge",
      "color": "5319E7",
      "default": false,
      "description": "Command: forge"
    },
    {
      "id": 3703752960,
      "node_id": "LA_kwDOGBlvNc7cwskA",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/A-cheatcodes",
      "name": "A-cheatcodes",
      "color": "FBCA04",
      "default": false,
      "description": "Area: cheatcodes"
    },
    {
      "id": 4182991461,
      "node_id": "LA_kwDOGBlvNc75U2Jl",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/Cmd-forge-script",
      "name": "Cmd-forge-script",
      "color": "006B75",
      "default": false,
      "description": "Command: forge script"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": {
    "login": "iFrostizz",
    "id": 51274081,
    "node_id": "MDQ6VXNlcjUxMjc0MDgx",
    "avatar_url": "https://avatars.githubusercontent.com/u/51274081?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/iFrostizz",
    "html_url": "https://github.com/iFrostizz",
    "followers_url": "https://api.github.com/users/iFrostizz/followers",
    "following_url": "https://api.github.com/users/iFrostizz/following{/other_user}",
    "gists_url": "https://api.github.com/users/iFrostizz/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/iFrostizz/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/iFrostizz/subscriptions",
    "organizations_url": "https://api.github.com/users/iFrostizz/orgs",
    "repos_url": "https://api.github.com/users/iFrostizz/repos",
    "events_url": "https://api.github.com/users/iFrostizz/events{/privacy}",
    "received_events_url": "https://api.github.com/users/iFrostizz/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "iFrostizz",
      "id": 51274081,
      "node_id": "MDQ6VXNlcjUxMjc0MDgx",
      "avatar_url": "https://avatars.githubusercontent.com/u/51274081?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/iFrostizz",
      "html_url": "https://github.com/iFrostizz",
      "followers_url": "https://api.github.com/users/iFrostizz/followers",
      "following_url": "https://api.github.com/users/iFrostizz/following{/other_user}",
      "gists_url": "https://api.github.com/users/iFrostizz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/iFrostizz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iFrostizz/subscriptions",
      "organizations_url": "https://api.github.com/users/iFrostizz/orgs",
      "repos_url": "https://api.github.com/users/iFrostizz/repos",
      "events_url": "https://api.github.com/users/iFrostizz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/iFrostizz/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 19,
  "created_at": "2022-07-18T01:04:49Z",
  "updated_at": "2023-01-22T23:09:41Z",
  "closed_at": null,
  "author_association": "COLLABORATOR",
  "active_lock_reason": null,
  "body": "### Component\r\n\r\nForge\r\n\r\n### Describe the feature you would like\r\n\r\nIt's common to want to deploy with vanity addresses, which can be done two ways:\r\n1. Mine a private key that results in a contract with the right vanity pattern when deployed with some nonce\r\n2. Mine a salt for create2 that results in a contract with the right vanity  pattern\r\n\r\nRight now with approach 2 it's easy to mine a 4 character salt in a solidity script with a simple `for` loop, however you run out of gas (exceeds the u64 limit) if you try e.g. 8 characters. A cheat code for approach 1 isn't in consideration here since you'd need to fund the address mid-script and that feels clunky.\r\n\r\nWhile of course you can do all the mining outside of the script, for short vanity addresses it's convenient to do this in the script, and without needing to rely on `ffi` or worry about the gas limit.\r\n\r\nProposed UX:\r\n\r\n```solidity\r\n// Mine a salt for the given initcode hash and deployer that matches the provided\r\n// pattern, specified as \"0xXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\", with the\r\n// X's replaced by the desired pattern, (initcodeHash, deployer, pattern, caseSensitive) => (salt, contractAddress)\r\nfunction mineSalt(bytes32 initcodeHash, address deployer, string calldata pattern, bool exact) external returns (bytes32 salt, address contractAddress) \r\n```\r\n\r\nAbove, the user provides:\r\n- The standard initcode hash and deployer address used for create2 address computation\r\n- The pattern to match, using the syntax that [profanity's](https://github.com/johguse/profanity) `--matching` flag uses\r\n- A boolean to indicate if the match must be exact (case-sensitive)\r\n\r\nAnd it returns the computed salt and the resulting address.\r\n\r\n\r\n\r\n### Additional context\r\n\r\n_No response_",
  "closed_by": {
    "login": "mattsse",
    "id": 19890894,
    "node_id": "MDQ6VXNlcjE5ODkwODk0",
    "avatar_url": "https://avatars.githubusercontent.com/u/19890894?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mattsse",
    "html_url": "https://github.com/mattsse",
    "followers_url": "https://api.github.com/users/mattsse/followers",
    "following_url": "https://api.github.com/users/mattsse/following{/other_user}",
    "gists_url": "https://api.github.com/users/mattsse/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mattsse/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mattsse/subscriptions",
    "organizations_url": "https://api.github.com/users/mattsse/orgs",
    "repos_url": "https://api.github.com/users/mattsse/repos",
    "events_url": "https://api.github.com/users/mattsse/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mattsse/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/2359/reactions",
    "total_count": 12,
    "+1": 8,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 4,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2359/timeline",
  "performed_via_github_app": null,
  "state_reason": "reopened"
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1189836155",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2359#issuecomment-1189836155",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2359",
    "id": 1189836155,
    "node_id": "IC_kwDOGBlvNc5G63V7",
    "user": {
      "login": "iFrostizz",
      "id": 51274081,
      "node_id": "MDQ6VXNlcjUxMjc0MDgx",
      "avatar_url": "https://avatars.githubusercontent.com/u/51274081?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/iFrostizz",
      "html_url": "https://github.com/iFrostizz",
      "followers_url": "https://api.github.com/users/iFrostizz/followers",
      "following_url": "https://api.github.com/users/iFrostizz/following{/other_user}",
      "gists_url": "https://api.github.com/users/iFrostizz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/iFrostizz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iFrostizz/subscriptions",
      "organizations_url": "https://api.github.com/users/iFrostizz/orgs",
      "repos_url": "https://api.github.com/users/iFrostizz/repos",
      "events_url": "https://api.github.com/users/iFrostizz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/iFrostizz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-20T05:11:09Z",
    "updated_at": "2022-07-20T05:11:20Z",
    "author_association": "CONTRIBUTOR",
    "body": "I would like to work on this one please.\r\nJust a question, what would this cheat add from `cast wallet vanity` ?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1189836155/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1189838626",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2359#issuecomment-1189838626",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2359",
    "id": 1189838626,
    "node_id": "IC_kwDOGBlvNc5G638i",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-20T05:16:10Z",
    "updated_at": "2022-07-20T05:16:10Z",
    "author_association": "COLLABORATOR",
    "body": "Right now `cast wallet vanity` is for vanity EOAs, or for contracts deployed with CREATE (contracts created with CREATE are a function of deployer address and nonce). `cast` currently has no create2 helper, but it should (contracts created with CREATE2 are a function of the contract bytecode, deployer address, and a salt).\r\n\r\nSo this issue is separate from cast and would allow for mining the salt create2 contracts directly in a `forge script` file. I've personally wanted this for a little while, and have seen others request something similar in the foundry telegram.\r\n\r\nTo your point, we could add this directly to cast and then use ffi to access in a script, but personally I prefer a dedicated cheatcode (and eventually cast support also) because ffi can be dangerous since it executes arbitrary commands.\r\n\r\n@onbjerg @mattsse let me know if you have any thoughts/objections here 🙂",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1189838626/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1189841906",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2359#issuecomment-1189841906",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2359",
    "id": 1189841906,
    "node_id": "IC_kwDOGBlvNc5G64vy",
    "user": {
      "login": "iFrostizz",
      "id": 51274081,
      "node_id": "MDQ6VXNlcjUxMjc0MDgx",
      "avatar_url": "https://avatars.githubusercontent.com/u/51274081?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/iFrostizz",
      "html_url": "https://github.com/iFrostizz",
      "followers_url": "https://api.github.com/users/iFrostizz/followers",
      "following_url": "https://api.github.com/users/iFrostizz/following{/other_user}",
      "gists_url": "https://api.github.com/users/iFrostizz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/iFrostizz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iFrostizz/subscriptions",
      "organizations_url": "https://api.github.com/users/iFrostizz/orgs",
      "repos_url": "https://api.github.com/users/iFrostizz/repos",
      "events_url": "https://api.github.com/users/iFrostizz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/iFrostizz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-20T05:22:47Z",
    "updated_at": "2022-07-20T05:22:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "I see your point, and didn't knew that `cast wallet vanity` was computing the contract address with CREATE.\r\n\r\nMaybe we could add a `cast wallet vanity2` or something, and then make the `mineSalt` cheatcode to avoid using `ffi` which is totally understandable, what do you think ?\r\n\r\nAlso, if we add the `mineSalt` cheatcode, maybe it should also be done for `vanity` with CREATE (not 2).",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1189841906/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1189846202",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2359#issuecomment-1189846202",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2359",
    "id": 1189846202,
    "node_id": "IC_kwDOGBlvNc5G65y6",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-20T05:31:20Z",
    "updated_at": "2022-07-20T05:31:55Z",
    "author_association": "COLLABORATOR",
    "body": "I think `cast wallet vanity --create2 <initcodeHash> <deployer> <pattern> <case-sensitive>`, and prints the salt and resulting contract address, could be a good syntax. That way it matches the cheat code, and both can use the same underlying rust method.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1189846202/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1194305284",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2359#issuecomment-1194305284",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2359",
    "id": 1194305284,
    "node_id": "IC_kwDOGBlvNc5HL6cE",
    "user": {
      "login": "tynes",
      "id": 6626818,
      "node_id": "MDQ6VXNlcjY2MjY4MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6626818?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tynes",
      "html_url": "https://github.com/tynes",
      "followers_url": "https://api.github.com/users/tynes/followers",
      "following_url": "https://api.github.com/users/tynes/following{/other_user}",
      "gists_url": "https://api.github.com/users/tynes/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tynes/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tynes/subscriptions",
      "organizations_url": "https://api.github.com/users/tynes/orgs",
      "repos_url": "https://api.github.com/users/tynes/repos",
      "events_url": "https://api.github.com/users/tynes/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tynes/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-25T16:16:20Z",
    "updated_at": "2022-07-25T16:16:20Z",
    "author_association": "CONTRIBUTOR",
    "body": "I have a slight preference of this being implemented in `cast` and then writing a simple solidity library that wraps `cast` with `ffi` instead of adding an additional cheatcode here",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1194305284/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1194767655",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2359#issuecomment-1194767655",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2359",
    "id": 1194767655,
    "node_id": "IC_kwDOGBlvNc5HNrUn",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-25T23:29:45Z",
    "updated_at": "2022-07-25T23:29:45Z",
    "author_association": "COLLABORATOR",
    "body": "Just curious as to why you prefer a wrapper method that uses ffi? IMO a cheatcode is preferable for common actions like this to avoid introducing the security risks of ffi.\n\nAssuming the wrapper method would be part of forge-std, I believe it would also be the first method in forge-std that uses ffi which i dont love for the same reason.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1194767655/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1195113275",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2359#issuecomment-1195113275",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2359",
    "id": 1195113275,
    "node_id": "IC_kwDOGBlvNc5HO_s7",
    "user": {
      "login": "iFrostizz",
      "id": 51274081,
      "node_id": "MDQ6VXNlcjUxMjc0MDgx",
      "avatar_url": "https://avatars.githubusercontent.com/u/51274081?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/iFrostizz",
      "html_url": "https://github.com/iFrostizz",
      "followers_url": "https://api.github.com/users/iFrostizz/followers",
      "following_url": "https://api.github.com/users/iFrostizz/following{/other_user}",
      "gists_url": "https://api.github.com/users/iFrostizz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/iFrostizz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iFrostizz/subscriptions",
      "organizations_url": "https://api.github.com/users/iFrostizz/orgs",
      "repos_url": "https://api.github.com/users/iFrostizz/repos",
      "events_url": "https://api.github.com/users/iFrostizz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/iFrostizz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-26T07:31:09Z",
    "updated_at": "2022-07-26T09:18:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "What about adding a feature to manually choose which directory has the right to run ffi to mitigate security issues ?\nI don't know what's the wish of the others from the team but maybe we shouldn't create a new cheatcode if it's not really necessary, but I agree that it would be better",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1195113275/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1198104052",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2359#issuecomment-1198104052",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2359",
    "id": 1198104052,
    "node_id": "IC_kwDOGBlvNc5HaZ30",
    "user": {
      "login": "mattsse",
      "id": 19890894,
      "node_id": "MDQ6VXNlcjE5ODkwODk0",
      "avatar_url": "https://avatars.githubusercontent.com/u/19890894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mattsse",
      "html_url": "https://github.com/mattsse",
      "followers_url": "https://api.github.com/users/mattsse/followers",
      "following_url": "https://api.github.com/users/mattsse/following{/other_user}",
      "gists_url": "https://api.github.com/users/mattsse/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mattsse/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mattsse/subscriptions",
      "organizations_url": "https://api.github.com/users/mattsse/orgs",
      "repos_url": "https://api.github.com/users/mattsse/repos",
      "events_url": "https://api.github.com/users/mattsse/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mattsse/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-28T12:55:32Z",
    "updated_at": "2022-07-28T12:55:32Z",
    "author_association": "MEMBER",
    "body": "> I have a slight preference of this being implemented in `cast` and then writing a simple solidity library that wraps `cast` with `ffi` instead of adding an additional cheatcode here\r\n\r\n+1, that's the most straightforward solution\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1198104052/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1198299116",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2359#issuecomment-1198299116",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2359",
    "id": 1198299116,
    "node_id": "IC_kwDOGBlvNc5HbJfs",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-28T15:18:33Z",
    "updated_at": "2022-07-28T15:18:33Z",
    "author_association": "COLLABORATOR",
    "body": "> +1, that's the most straightforward solution\r\n\r\nHappy to concede and go with that approach, but do want to understand why it's preferable given https://github.com/foundry-rs/foundry/issues/2359#issuecomment-1194767655 😅\r\n\r\nBoth the cast command and cheatcode should be able to use the same underlying method + not needing `ffi` seems like a big positive IMO",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1198299116/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1204480283",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2359#issuecomment-1204480283",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2359",
    "id": 1204480283,
    "node_id": "IC_kwDOGBlvNc5Hyukb",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-03T21:02:48Z",
    "updated_at": "2022-08-03T21:02:48Z",
    "author_association": "COLLABORATOR",
    "body": "Another idea here if people don't like the idea of a `vm.mineSalt` cheatcode is `vm.stopMeteringGas()` and vm.resumeMeteringGas()` cheatcodes. That way you can then do gas-intensive things like mine a salt in solidity without burning through the gas limit. This would still be slower to execute than a cheatcode due to the added EVM overhead, but is another option to consider (not sure what other use cases there would be for these cheatcodes)",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1204480283/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1204506057",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2359#issuecomment-1204506057",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2359",
    "id": 1204506057,
    "node_id": "IC_kwDOGBlvNc5Hy03J",
    "user": {
      "login": "apbendi",
      "id": 1479802,
      "node_id": "MDQ6VXNlcjE0Nzk4MDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1479802?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/apbendi",
      "html_url": "https://github.com/apbendi",
      "followers_url": "https://api.github.com/users/apbendi/followers",
      "following_url": "https://api.github.com/users/apbendi/following{/other_user}",
      "gists_url": "https://api.github.com/users/apbendi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/apbendi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apbendi/subscriptions",
      "organizations_url": "https://api.github.com/users/apbendi/orgs",
      "repos_url": "https://api.github.com/users/apbendi/repos",
      "events_url": "https://api.github.com/users/apbendi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/apbendi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-03T21:32:29Z",
    "updated_at": "2022-08-03T21:32:29Z",
    "author_association": "NONE",
    "body": "> IMO a cheatcode is preferable for common actions like this to avoid introducing the security risks of ffi.\r\n\r\nStrongly agree here! Would be nice to avoid having to ffi unless absolutely needed. Is there a lot of overhead involved with adding as a cheatcode if the code is already there for cast?\r\n\r\n> Another idea here if people don't like the idea of a vm.mineSalt cheatcode is vm.stopMeteringGas() and vm.resumeMeteringGas() cheatcodes\r\n\r\nI really like this idea and I think it would be a valuable addition to Foundry for scripting. There are plenty of use cases where \"slower execution, but we can keep our dev environment simple and all in Solidity\" is a good tradeoff.\r\n\r\nI will say that mining salts is an extremely common use case, so a rust-based cheat code specifically for it would be nice, as would a cast command. But I think the ability to stop/start gas metering is broadly useful as well. I guess what I'm saying is, I want both 😅 ",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1204506057/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1205449369",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2359#issuecomment-1205449369",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2359",
    "id": 1205449369,
    "node_id": "IC_kwDOGBlvNc5H2bKZ",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-04T15:59:35Z",
    "updated_at": "2022-08-04T15:59:35Z",
    "author_association": "MEMBER",
    "body": "@mds1 It is a lot more complex to do `vm.stopMeteringGas`/`vm.resumeMeteringGas` especially since code inside those blocks may still affect state that affects overall gas consumption (sload/sstore etc.)",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1205449369/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1212231698",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2359#issuecomment-1212231698",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2359",
    "id": 1212231698,
    "node_id": "IC_kwDOGBlvNc5IQTAS",
    "user": {
      "login": "gakonst",
      "id": 17802178,
      "node_id": "MDQ6VXNlcjE3ODAyMTc4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17802178?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gakonst",
      "html_url": "https://github.com/gakonst",
      "followers_url": "https://api.github.com/users/gakonst/followers",
      "following_url": "https://api.github.com/users/gakonst/following{/other_user}",
      "gists_url": "https://api.github.com/users/gakonst/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gakonst/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gakonst/subscriptions",
      "organizations_url": "https://api.github.com/users/gakonst/orgs",
      "repos_url": "https://api.github.com/users/gakonst/repos",
      "events_url": "https://api.github.com/users/gakonst/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gakonst/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-11T16:46:30Z",
    "updated_at": "2022-08-11T16:46:30Z",
    "author_association": "MEMBER",
    "body": "People are already doing this wiht FFI at this point FWIW e.g. https://github.com/antoncoding/grappa/blob/master/script/Deploy.sol#L70-L98\r\n\r\nLet's do a cheatcode, the gas metering stuff seems like a big pain.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1212231698/reactions",
      "total_count": 2,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1256978978",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2359#issuecomment-1256978978",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2359",
    "id": 1256978978,
    "node_id": "IC_kwDOGBlvNc5K6_oi",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-24T14:17:31Z",
    "updated_at": "2022-09-24T14:17:31Z",
    "author_association": "COLLABORATOR",
    "body": "@mattsse Mind reopening this? We now have create2 support in cast, but don't actually have a forge cheatcode yet",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1256978978/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1274180972",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2359#issuecomment-1274180972",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2359",
    "id": 1274180972,
    "node_id": "IC_kwDOGBlvNc5L8nVs",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-10-11T07:03:23Z",
    "updated_at": "2022-10-11T07:03:23Z",
    "author_association": "COLLABORATOR",
    "body": "Just curious as to why you prefer a wrapper method that uses ffi? IMO a\ncheatcode is preferable for common actions like this to avoid introducing\nthe security risks of ffi.\n\nAssuming the wrapper method would be part of forge-std, I believe it would\nalso be the first method in forge-std that uses ffi which i dont love for\nthe same reason.\n\nOn Mon, Jul 25, 2022 at 9:16 AM Mark Tyneway ***@***.***>\nwrote:\n\n> I have a slight preference of this being implemented in cast and then\n> writing a simple solidity library that wraps cast with ffi instead of\n> adding an additional cheatcode here\n>\n> —\n> Reply to this email directly, view it on GitHub\n> <https://github.com/foundry-rs/foundry/issues/2359#issuecomment-1194305284>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AEC6NVFMZSUWY5TMCJDJVBTVV24V5ANCNFSM532UEIXQ>\n> .\n> You are receiving this because you authored the thread.Message ID:\n> ***@***.***>\n>\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1274180972/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1275124334",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2359#issuecomment-1275124334",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2359",
    "id": 1275124334,
    "node_id": "IC_kwDOGBlvNc5MANpu",
    "user": {
      "login": "gakonst",
      "id": 17802178,
      "node_id": "MDQ6VXNlcjE3ODAyMTc4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17802178?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gakonst",
      "html_url": "https://github.com/gakonst",
      "followers_url": "https://api.github.com/users/gakonst/followers",
      "following_url": "https://api.github.com/users/gakonst/following{/other_user}",
      "gists_url": "https://api.github.com/users/gakonst/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gakonst/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gakonst/subscriptions",
      "organizations_url": "https://api.github.com/users/gakonst/orgs",
      "repos_url": "https://api.github.com/users/gakonst/repos",
      "events_url": "https://api.github.com/users/gakonst/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gakonst/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-10-11T18:44:44Z",
    "updated_at": "2022-10-11T18:44:44Z",
    "author_association": "MEMBER",
    "body": "Cheatcode :+1: ",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1275124334/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1279447452",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2359#issuecomment-1279447452",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2359",
    "id": 1279447452,
    "node_id": "IC_kwDOGBlvNc5MQtGc",
    "user": {
      "login": "sambacha",
      "id": 32783916,
      "node_id": "MDQ6VXNlcjMyNzgzOTE2",
      "avatar_url": "https://avatars.githubusercontent.com/u/32783916?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sambacha",
      "html_url": "https://github.com/sambacha",
      "followers_url": "https://api.github.com/users/sambacha/followers",
      "following_url": "https://api.github.com/users/sambacha/following{/other_user}",
      "gists_url": "https://api.github.com/users/sambacha/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sambacha/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sambacha/subscriptions",
      "organizations_url": "https://api.github.com/users/sambacha/orgs",
      "repos_url": "https://api.github.com/users/sambacha/repos",
      "events_url": "https://api.github.com/users/sambacha/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sambacha/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-10-14T20:44:16Z",
    "updated_at": "2022-10-14T20:44:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "> I think `cast wallet vanity --create2 <initcodeHash> <deployer> <pattern> <case-sensitive>`, and prints the salt and resulting contract address, could be a good syntax. That way it matches the cheat code, and both can use the same underlying rust method.\r\n\r\nThis",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1279447452/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1399109240",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2359#issuecomment-1399109240",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2359",
    "id": 1399109240,
    "node_id": "IC_kwDOGBlvNc5TZLZ4",
    "user": {
      "login": "karmacoma-eth",
      "id": 85039585,
      "node_id": "MDQ6VXNlcjg1MDM5NTg1",
      "avatar_url": "https://avatars.githubusercontent.com/u/85039585?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/karmacoma-eth",
      "html_url": "https://github.com/karmacoma-eth",
      "followers_url": "https://api.github.com/users/karmacoma-eth/followers",
      "following_url": "https://api.github.com/users/karmacoma-eth/following{/other_user}",
      "gists_url": "https://api.github.com/users/karmacoma-eth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/karmacoma-eth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/karmacoma-eth/subscriptions",
      "organizations_url": "https://api.github.com/users/karmacoma-eth/orgs",
      "repos_url": "https://api.github.com/users/karmacoma-eth/repos",
      "events_url": "https://api.github.com/users/karmacoma-eth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/karmacoma-eth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-21T00:59:19Z",
    "updated_at": "2023-01-21T00:59:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "Another script to mine salts by calling `cast create2` over ffi: https://github.com/karmacoma-eth/foundry-playground/blob/main/script/MineSaltScript.sol\r\n\r\nIt feels a little odd to call cast over ffi and to parse the string output, I would much rather use a cheatcode ",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1399109240/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1399635123",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2359#issuecomment-1399635123",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2359",
    "id": 1399635123,
    "node_id": "IC_kwDOGBlvNc5TbLyz",
    "user": {
      "login": "iFrostizz",
      "id": 51274081,
      "node_id": "MDQ6VXNlcjUxMjc0MDgx",
      "avatar_url": "https://avatars.githubusercontent.com/u/51274081?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/iFrostizz",
      "html_url": "https://github.com/iFrostizz",
      "followers_url": "https://api.github.com/users/iFrostizz/followers",
      "following_url": "https://api.github.com/users/iFrostizz/following{/other_user}",
      "gists_url": "https://api.github.com/users/iFrostizz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/iFrostizz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iFrostizz/subscriptions",
      "organizations_url": "https://api.github.com/users/iFrostizz/orgs",
      "repos_url": "https://api.github.com/users/iFrostizz/repos",
      "events_url": "https://api.github.com/users/iFrostizz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/iFrostizz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-22T23:09:41Z",
    "updated_at": "2023-01-22T23:09:41Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Another script to mine salts by calling `cast create2` over ffi: https://github.com/karmacoma-eth/foundry-playground/blob/main/script/MineSaltScript.sol\n> \n> It feels a little odd to call cast over ffi and to parse the string output, I would much rather use a cheatcode \n\nWhen I wanted to implement the cheatcode, I was limited by a circular dependency issue. Can eventually give it another go.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1399635123/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
