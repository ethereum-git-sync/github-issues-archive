{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/478",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/478/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/478/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/478/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/478",
  "id": 1105406482,
  "node_id": "I_kwDOGBlvNc5B4yoS",
  "number": 478,
  "title": "Mutation testing",
  "user": {
    "login": "onbjerg",
    "id": 8862627,
    "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/onbjerg",
    "html_url": "https://github.com/onbjerg",
    "followers_url": "https://api.github.com/users/onbjerg/followers",
    "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
    "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
    "organizations_url": "https://api.github.com/users/onbjerg/orgs",
    "repos_url": "https://api.github.com/users/onbjerg/repos",
    "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
    "received_events_url": "https://api.github.com/users/onbjerg/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3394554570,
      "node_id": "LA_kwDOGBlvNc7KVMrK",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/A-fuzzing",
      "name": "A-fuzzing",
      "color": "FBCA04",
      "default": false,
      "description": "Area: fuzzing"
    },
    {
      "id": 3593644820,
      "node_id": "LA_kwDOGBlvNc7WMqsU",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-feature",
      "name": "T-feature",
      "color": "BFD4F2",
      "default": false,
      "description": "Type: feature"
    },
    {
      "id": 3703752787,
      "node_id": "LA_kwDOGBlvNc7cwshT",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/C-forge",
      "name": "C-forge",
      "color": "5319E7",
      "default": false,
      "description": "Command: forge"
    },
    {
      "id": 3759720129,
      "node_id": "LA_kwDOGBlvNc7gGMbB",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/D-hard",
      "name": "D-hard",
      "color": "0E8A16",
      "default": false,
      "description": "Difficulty: hard"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 23,
  "created_at": "2022-01-17T05:50:10Z",
  "updated_at": "2023-11-27T03:28:02Z",
  "closed_at": null,
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "Mutation testing is used to design new tests and evaluate the quality of an existing test suite. In other words, it can tell you about the quality of your tests, where coverage only tells you about how much code you have not yet written a test for.\r\n\r\nIt works by changing the behavior of a program by changing parts of the code (\"mutating it\"), running the test suite with this new mutation and checking if the test suite passed. If the test suite passed, the mutation is considered to have survived - if not, it is considered to have died.\r\n\r\nIf `dead / total` is below some threshold, then there is room for improvement in the test suite. In other words, the more dead mutations you have, the better.\r\n\r\nI think this would be a pretty cool tool to have in Foundry - and I think it is somewhat trivial to implement as well (simplified strategy):\r\n\r\n- Have a list of mutations we can do\r\n- Parse the source contracts\r\n- Insert mutation somewhere\r\n- Run tests\r\n- Repeat until we're satisfied\r\n\r\nHere's a paper on mutation testing for Solidity that I found interesting: https://arxiv.org/pdf/2105.03626.pdf",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/478/reactions",
    "total_count": 3,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 3
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/478/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1014166317",
    "html_url": "https://github.com/foundry-rs/foundry/issues/478#issuecomment-1014166317",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/478",
    "id": 1014166317,
    "node_id": "IC_kwDOGBlvNc48cvMt",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-17T05:57:29Z",
    "updated_at": "2022-01-17T05:57:54Z",
    "author_association": "MEMBER",
    "body": "More notes:\r\n\r\n- You can identify weakly tested pieces of code: mutations are not killed for these snippets\r\n- You can identify weak tests: they never kill mutants\r\n\r\nPaper has a handy list of mutations we could implement",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1014166317/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1014457159",
    "html_url": "https://github.com/foundry-rs/foundry/issues/478#issuecomment-1014457159",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/478",
    "id": 1014457159,
    "node_id": "IC_kwDOGBlvNc48d2NH",
    "user": {
      "login": "gakonst",
      "id": 17802178,
      "node_id": "MDQ6VXNlcjE3ODAyMTc4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17802178?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gakonst",
      "html_url": "https://github.com/gakonst",
      "followers_url": "https://api.github.com/users/gakonst/followers",
      "following_url": "https://api.github.com/users/gakonst/following{/other_user}",
      "gists_url": "https://api.github.com/users/gakonst/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gakonst/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gakonst/subscriptions",
      "organizations_url": "https://api.github.com/users/gakonst/orgs",
      "repos_url": "https://api.github.com/users/gakonst/repos",
      "events_url": "https://api.github.com/users/gakonst/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gakonst/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-17T12:14:22Z",
    "updated_at": "2022-01-17T12:14:22Z",
    "author_association": "MEMBER",
    "body": "Related DappTools PRs/Issues:\r\n* https://github.com/dapphub/dapptools/pull/829\r\n* https://github.com/dapphub/dapptools/pull/687",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1014457159/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1014645226",
    "html_url": "https://github.com/foundry-rs/foundry/issues/478#issuecomment-1014645226",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/478",
    "id": 1014645226,
    "node_id": "IC_kwDOGBlvNc48ekHq",
    "user": {
      "login": "brockelmore",
      "id": 31553173,
      "node_id": "MDQ6VXNlcjMxNTUzMTcz",
      "avatar_url": "https://avatars.githubusercontent.com/u/31553173?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brockelmore",
      "html_url": "https://github.com/brockelmore",
      "followers_url": "https://api.github.com/users/brockelmore/followers",
      "following_url": "https://api.github.com/users/brockelmore/following{/other_user}",
      "gists_url": "https://api.github.com/users/brockelmore/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brockelmore/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brockelmore/subscriptions",
      "organizations_url": "https://api.github.com/users/brockelmore/orgs",
      "repos_url": "https://api.github.com/users/brockelmore/repos",
      "events_url": "https://api.github.com/users/brockelmore/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brockelmore/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-17T15:08:56Z",
    "updated_at": "2022-01-17T15:08:56Z",
    "author_association": "MEMBER",
    "body": "potential inspiration: https://github.com/JoranHonig/vertigo\r\nthe paper: https://sci-hub.ru/downloads/2019-09-21/f6/10.1007@978-3-030-31500-9.pdf#chapter.19\r\n\r\nhas some good tips in it like knowing what test hits a particular mutation\r\n\r\nwe could do this by: \r\n1. running all tests, build up a mapping of op -> Vec<test>\r\n2. perform mutation\r\n3. run all tests for a mutated op\r\n\r\n\r\nVertigo works on solidity, but we may want to do part solidity, part raw opcodes so we can be faster and not have to recompile for all mutation types",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1014645226/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1014648889",
    "html_url": "https://github.com/foundry-rs/foundry/issues/478#issuecomment-1014648889",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/478",
    "id": 1014648889,
    "node_id": "IC_kwDOGBlvNc48elA5",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-17T15:12:48Z",
    "updated_at": "2022-01-17T15:12:48Z",
    "author_association": "MEMBER",
    "body": "alternatively we could sacrifice some disk space by copying the source of the project into `cache/tmp/mutation-{1,2,3,n}`, performing the mutation and in parallel spawn `forge test --src ./cache/tmp/mutation-{1,2,3,n}` (you get the idea).\r\n\r\nif the command exits with status 0 the tests passed, otherwise they failed. afterwards we clean up by deleting those directories (or keep them around for diffing). if our cache works on hashes we theoretically(?) would only recompile the mutated contract anyway",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1014648889/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1064303581",
    "html_url": "https://github.com/foundry-rs/foundry/issues/478#issuecomment-1064303581",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/478",
    "id": 1064303581,
    "node_id": "IC_kwDOGBlvNc4_b_vd",
    "user": {
      "login": "JoranHonig",
      "id": 8710366,
      "node_id": "MDQ6VXNlcjg3MTAzNjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8710366?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JoranHonig",
      "html_url": "https://github.com/JoranHonig",
      "followers_url": "https://api.github.com/users/JoranHonig/followers",
      "following_url": "https://api.github.com/users/JoranHonig/following{/other_user}",
      "gists_url": "https://api.github.com/users/JoranHonig/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JoranHonig/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JoranHonig/subscriptions",
      "organizations_url": "https://api.github.com/users/JoranHonig/orgs",
      "repos_url": "https://api.github.com/users/JoranHonig/repos",
      "events_url": "https://api.github.com/users/JoranHonig/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JoranHonig/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-10T17:15:36Z",
    "updated_at": "2022-03-10T17:15:36Z",
    "author_association": "NONE",
    "body": "Yoyoyo, just seeing this thread now.\r\n\r\nNot sure if this is possible already but if foundry could include the solc json ast in the compilation artifacts then it'll be relatively straightforward to create a Vertigo adapter for foundry.\r\n\r\n> alternatively we could sacrifice some disk space by copying the source of the project into cache/tmp/mutation-{1,2,3,n}, performing the mutation and in parallel spawn forge test --src ./cache/tmp/mutation-{1,2,3,n} (you get the idea).\r\n> \r\n> if the command exits with status 0 the tests passed, otherwise they failed. afterwards we clean up by deleting those directories (or keep them around for diffing). if our cache works on hashes we theoretically(?) would only recompile the mutated contract anyway\r\n\r\nThat is close how Vertigo works right now (except that it doesn't create all of the mutations up front), and how the integration would work 👍 \r\n\r\n---\r\n\r\n>  Vertigo works on solidity, but we may want to do part solidity, part raw opcodes so we can be faster and not have to recompile for all mutation types\r\n\r\nThere are some papers that evaluate this approach. From the top of my head there are two benefits to doing source code mutation:\r\n1. Trivial Compiler Equivalence (basically free equivalent mutant detection)\r\n2. Easier manual inspection of mutants (specifically equivalent mutations)\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1064303581/reactions",
      "total_count": 7,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 7,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1376595313",
    "html_url": "https://github.com/foundry-rs/foundry/issues/478#issuecomment-1376595313",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/478",
    "id": 1376595313,
    "node_id": "IC_kwDOGBlvNc5SDS1x",
    "user": {
      "login": "chandrakananandi",
      "id": 7932269,
      "node_id": "MDQ6VXNlcjc5MzIyNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7932269?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chandrakananandi",
      "html_url": "https://github.com/chandrakananandi",
      "followers_url": "https://api.github.com/users/chandrakananandi/followers",
      "following_url": "https://api.github.com/users/chandrakananandi/following{/other_user}",
      "gists_url": "https://api.github.com/users/chandrakananandi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chandrakananandi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chandrakananandi/subscriptions",
      "organizations_url": "https://api.github.com/users/chandrakananandi/orgs",
      "repos_url": "https://api.github.com/users/chandrakananandi/repos",
      "events_url": "https://api.github.com/users/chandrakananandi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chandrakananandi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-10T01:27:46Z",
    "updated_at": "2023-01-10T01:27:46Z",
    "author_association": "NONE",
    "body": "Hey all,\r\n\r\nWe have been working on a mutation generator called [Gambit](https://github.com/Certora/gambit). It is implemented in Rust so it _might_ be possible to integrate it with Forge easily.\r\n\r\nGambit is a mutation generator only and it works by traversing the Solidity AST to identify where to perform the mutations, then performs the mutations directly at the source level, and dumps them in a designated directory.\r\n\r\nWe are actively working on adding more functionality and better mutation generation when possible so let us know if you have any suggestions. PRs are also welcome :) \r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1376595313/reactions",
      "total_count": 2,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 2,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1376715567",
    "html_url": "https://github.com/foundry-rs/foundry/issues/478#issuecomment-1376715567",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/478",
    "id": 1376715567,
    "node_id": "IC_kwDOGBlvNc5SDwMv",
    "user": {
      "login": "gakonst",
      "id": 17802178,
      "node_id": "MDQ6VXNlcjE3ODAyMTc4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17802178?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gakonst",
      "html_url": "https://github.com/gakonst",
      "followers_url": "https://api.github.com/users/gakonst/followers",
      "following_url": "https://api.github.com/users/gakonst/following{/other_user}",
      "gists_url": "https://api.github.com/users/gakonst/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gakonst/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gakonst/subscriptions",
      "organizations_url": "https://api.github.com/users/gakonst/orgs",
      "repos_url": "https://api.github.com/users/gakonst/repos",
      "events_url": "https://api.github.com/users/gakonst/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gakonst/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-10T04:22:24Z",
    "updated_at": "2023-01-10T04:22:54Z",
    "author_association": "MEMBER",
    "body": "This is great @chandrakananandi  thank you for sharing!\n\nThe AST modification logic makes sense - cc @mattsse we could add that a mutate fn to the Project struct in ethers solc? Which would traverse all the tests and perform a random mutation? And we would run the the tests against the mutation inside of forge mutate?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1376715567/reactions",
      "total_count": 2,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 1,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 1
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1379420082",
    "html_url": "https://github.com/foundry-rs/foundry/issues/478#issuecomment-1379420082",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/478",
    "id": 1379420082,
    "node_id": "IC_kwDOGBlvNc5SOEey",
    "user": {
      "login": "sambacha",
      "id": 32783916,
      "node_id": "MDQ6VXNlcjMyNzgzOTE2",
      "avatar_url": "https://avatars.githubusercontent.com/u/32783916?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sambacha",
      "html_url": "https://github.com/sambacha",
      "followers_url": "https://api.github.com/users/sambacha/followers",
      "following_url": "https://api.github.com/users/sambacha/following{/other_user}",
      "gists_url": "https://api.github.com/users/sambacha/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sambacha/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sambacha/subscriptions",
      "organizations_url": "https://api.github.com/users/sambacha/orgs",
      "repos_url": "https://api.github.com/users/sambacha/repos",
      "events_url": "https://api.github.com/users/sambacha/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sambacha/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-11T20:06:43Z",
    "updated_at": "2023-01-11T20:06:43Z",
    "author_association": "CONTRIBUTOR",
    "body": "There is also Universal Simulator, one of the engineers from Trail of Bits maintains it -\r\n\r\nhere is some usage:\r\n https://github.com/sambacha/universalmutator/tree/new-solidity-rules\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1379420082/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1379438408",
    "html_url": "https://github.com/foundry-rs/foundry/issues/478#issuecomment-1379438408",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/478",
    "id": 1379438408,
    "node_id": "IC_kwDOGBlvNc5SOI9I",
    "user": {
      "login": "chandrakananandi",
      "id": 7932269,
      "node_id": "MDQ6VXNlcjc5MzIyNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7932269?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chandrakananandi",
      "html_url": "https://github.com/chandrakananandi",
      "followers_url": "https://api.github.com/users/chandrakananandi/followers",
      "following_url": "https://api.github.com/users/chandrakananandi/following{/other_user}",
      "gists_url": "https://api.github.com/users/chandrakananandi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chandrakananandi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chandrakananandi/subscriptions",
      "organizations_url": "https://api.github.com/users/chandrakananandi/orgs",
      "repos_url": "https://api.github.com/users/chandrakananandi/repos",
      "events_url": "https://api.github.com/users/chandrakananandi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chandrakananandi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-11T20:21:36Z",
    "updated_at": "2023-01-11T20:24:23Z",
    "author_association": "NONE",
    "body": "> There is also Universal Simulator, one of the engineers from Trail of Bits maintains it -\r\n> \r\n> here is some usage: https://github.com/sambacha/universalmutator/tree/new-solidity-rules\r\n\r\nIndeed, it's very cool! The difference between Gambit and the universalmutator is that they are regex based whereas Gambit is guided by the AST and also runs the compiler to filter out any invalid mutants. On the other hand, universalmutator supports many more languages since their technqiue relies on regexes and they don't need any additional AST information! There is a cool [paper](https://agroce.github.io/icse18t.pdf) on it too.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1379438408/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1382491834",
    "html_url": "https://github.com/foundry-rs/foundry/issues/478#issuecomment-1382491834",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/478",
    "id": 1382491834,
    "node_id": "IC_kwDOGBlvNc5SZya6",
    "user": {
      "login": "gakonst",
      "id": 17802178,
      "node_id": "MDQ6VXNlcjE3ODAyMTc4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17802178?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gakonst",
      "html_url": "https://github.com/gakonst",
      "followers_url": "https://api.github.com/users/gakonst/followers",
      "following_url": "https://api.github.com/users/gakonst/following{/other_user}",
      "gists_url": "https://api.github.com/users/gakonst/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gakonst/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gakonst/subscriptions",
      "organizations_url": "https://api.github.com/users/gakonst/orgs",
      "repos_url": "https://api.github.com/users/gakonst/repos",
      "events_url": "https://api.github.com/users/gakonst/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gakonst/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-13T22:37:40Z",
    "updated_at": "2023-01-13T22:37:40Z",
    "author_association": "MEMBER",
    "body": "Would be supportive of a draft PR or some kind of RFC proposing exactly how we'd integrate the two together, if you'd want to give it a shot @chandrakananandi!",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1382491834/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1489378897",
    "html_url": "https://github.com/foundry-rs/foundry/issues/478#issuecomment-1489378897",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/478",
    "id": 1489378897,
    "node_id": "IC_kwDOGBlvNc5Yxh5R",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-29T21:54:13Z",
    "updated_at": "2023-03-29T21:54:13Z",
    "author_association": "COLLABORATOR",
    "body": "Hey @chandrakananandi, congrats on the [announcement](https://medium.com/certora/gambit-23ef5cab02f5) today!\r\n\r\nFigured this might be a good time to revisit what the UX for what an MVP forge integration might look like. Previously we came up something like this:\r\n- `forge test --mutate` first runs all regular tests and makes sure they pass \r\n    - `forge test --mutate skip-regular` could skip regular tests for quicker iteration during development\r\n- If tests all pass, forge passes the remappings / config info to gambit, runs gambit against all `src/` contracts, and saves mutation to a temp dir\r\n- For each mutation file in the tmp dir:\r\n    - Apply the change then run all tests\r\n        - Maybe run tests with a hardcoded small amount of fuzz runs for now to prevent runtime from blowing up, and skip invariant tests? In general mutating solidity and having to recompile feels like it might be slow anyway, perhaps better suited as a CI-only type of integration\r\n    - We expect at least one test to fail for each applied mutation, so if a test failure happens the run is considered successful, if all tests still pass it's marked failed\r\n        - Question here: What's the best way to handle benign mutations that are equivalent to the original?\r\n- For each failed run, print the mutation to the console, then delete the tmp dir\r\n- Like usual, exit with an error if tests fail (i.e. mutations were not detected by test suite)\r\n- None of gambit's config options are exposed to user, for simplicity\r\n\r\nFollow up versions could:\r\n- Respect the `[fuzz]` seed like invariant tests do\r\n- Generate/link to the certora UI for visualizing results\r\n- Integrate better failure persistence (https://github.com/foundry-rs/foundry/issues/2551 and https://github.com/foundry-rs/foundry/issues/2552)\r\n- Expose gambit config options to user, perhaps via a `[mutation]` section the foundry.toml file so you can have different profile configs, like you can with `[fuzz]` and `[invariant]` sections",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1489378897/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1489503475",
    "html_url": "https://github.com/foundry-rs/foundry/issues/478#issuecomment-1489503475",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/478",
    "id": 1489503475,
    "node_id": "IC_kwDOGBlvNc5YyATz",
    "user": {
      "login": "chandrakananandi",
      "id": 7932269,
      "node_id": "MDQ6VXNlcjc5MzIyNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7932269?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chandrakananandi",
      "html_url": "https://github.com/chandrakananandi",
      "followers_url": "https://api.github.com/users/chandrakananandi/followers",
      "following_url": "https://api.github.com/users/chandrakananandi/following{/other_user}",
      "gists_url": "https://api.github.com/users/chandrakananandi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chandrakananandi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chandrakananandi/subscriptions",
      "organizations_url": "https://api.github.com/users/chandrakananandi/orgs",
      "repos_url": "https://api.github.com/users/chandrakananandi/repos",
      "events_url": "https://api.github.com/users/chandrakananandi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chandrakananandi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-30T00:07:06Z",
    "updated_at": "2023-03-30T00:07:06Z",
    "author_association": "NONE",
    "body": "> Hey @chandrakananandi, congrats on the [announcement](https://medium.com/certora/gambit-23ef5cab02f5) today!\r\n> \r\n> Figured this might be a good time to revisit what the UX for what an MVP forge integration might look like. Previously we came up something like this:\r\n> \r\n>     * `forge test --mutate` first runs all regular tests and makes sure they pass\r\n>       \r\n>       * `forge test --mutate skip-regular` could skip regular tests for quicker iteration during development\r\n> \r\n>     * If tests all pass, forge passes the remappings / config info to gambit, runs gambit against all `src/` contracts, and saves mutation to a temp dir\r\n> \r\n>     * For each mutation file in the tmp dir:\r\n>       \r\n>       * Apply the change then run all tests\r\n>         \r\n>         * Maybe run tests with a hardcoded small amount of fuzz runs for now to prevent runtime from blowing up, and skip invariant tests? In general mutating solidity and having to recompile feels like it might be slow anyway, perhaps better suited as a CI-only type of integration\r\n>       * We expect at least one test to fail for each applied mutation, so if a test failure happens the run is considered successful, if all tests still pass it's marked failed\r\n>         \r\n>         * Question here: What's the best way to handle benign mutations that are equivalent to the original?\r\n> \r\n>     * For each failed run, print the mutation to the console, then delete the tmp dir\r\n> \r\n>     * Like usual, exit with an error if tests fail (i.e. mutations were not detected by test suite)\r\n> \r\n>     * None of gambit's config options are exposed to user, for simplicity\r\n> \r\n> \r\n> Follow up versions could:\r\n> \r\n>     * Respect the `[fuzz]` seed like invariant tests do\r\n> \r\n>     * Generate/link to the certora UI for visualizing results\r\n> \r\n>     * Integrate better failure persistence ([feat: fuzz failure persistence #2551](https://github.com/foundry-rs/foundry/issues/2551) and [feat: fuzz corpus saving and replay #2552](https://github.com/foundry-rs/foundry/issues/2552))\r\n> \r\n>     * Expose gambit config options to user, perhaps via a `[mutation]` section the foundry.toml file so you can have different profile configs, like you can with `[fuzz]` and `[invariant]` sections\r\n\r\nHi Matt @mds1!\r\n\r\nThanks for writing this out. The flow makes sense! One quick note: at the moment, Gambit actually already compiles the mutants to ensure that they are all valid. So the `tmp` directory you mentioned will only have mutants that compile.  It is definitely slower but since we have been using the mutants in the context of verification so far, it's not a bottleneck yet. But in any case, we do have ongoing work right now as part of which are trying to use type information from the AST to generate mutants that are more likely valid. \r\n\r\nAs for the benign / equivalent mutant question: this is a very interesting problem and full on equivalence checking for mutants is yet another undecidable verification task. So our current thinking is that we should _avoid_ generating benign mutants in the first place. For now, Gambit allows the user to specify what functions and contracts to mutate which is an easy way to avoid _some_ useless mutants because hopefully the user has knowledge about the codebase we can leverage. We are actively working on other light weight strategies as well. There is also TCE (Trivial Compiler Equivalence) which people have used for this. The Certora Prover itself can be used here too but like I said, that's yet another verification task on its own.\r\n\r\nFor now, I am most interested in gathering data (lots of mutants, the result of running tests on them, some potentially manual analysis of mutants to understand how often we get equivalent mutants) and guiding our strategy for equivalence detection based on that. For the scale of data we will need for this, I think integrating with a testing framework like foundry would be really great!\r\n\r\nIs there any dataset of solidity contracts together with foundry tests that you could point me to?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1489503475/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1491122711",
    "html_url": "https://github.com/foundry-rs/foundry/issues/478#issuecomment-1491122711",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/478",
    "id": 1491122711,
    "node_id": "IC_kwDOGBlvNc5Y4LoX",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-31T00:13:38Z",
    "updated_at": "2023-03-31T00:13:38Z",
    "author_association": "COLLABORATOR",
    "body": "> at the moment, Gambit actually already compiles the mutants to ensure that they are all valid. So the tmp directory you mentioned will only have mutants that compile.\r\n\r\nAh interesting, wonder if there should be an option to disable that, since otherwise we'll be compiling twice (once for gambit to verify, then the forge compilation)? Then instead forge would need to discard a mutation that doesn't compile\r\n\r\n> Is there any dataset of solidity contracts together with foundry tests that you could point me to?\r\n\r\nAre you just looking for repos that use foundry for building/testing? If so, the forge [integration tests](https://github.com/foundry-rs/foundry/blob/master/cli/tests/it/integration.rs) run against some external repos which could be a good starting point (some of those repos use dapptools, which foundry should be backwards compatible with). Then some other repos that use foundry include [seaport](https://github.com/ProjectOpenSea/seaport/), [maple](https://github.com/maple-labs/maple-core-v2), [alchemix](https://github.com/alchemix-finance/v2-foundry), [uniswap universal router](https://github.com/Uniswap/universal-router), [optimism's bedrock contracts](https://github.com/ethereum-optimism/optimism/tree/develop/packages/contracts-bedrock), and a bunch of my own repos including [multicall](https://github.com/mds1/multicall/), [solidity-generators](https://github.com/mds1/solidity-generators), [solidity-trigonometry](https://github.com/mds1/solidity-trigonometry), [umbra](https://github.com/ScopeLift/umbra-protocol/tree/master/contracts-periphery). There's also a bunch in the [awesome-foundry](https://github.com/crisgarner/awesome-foundry#libraries--templates) repo. But let me know if I misunderstood! 😅",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1491122711/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1491273958",
    "html_url": "https://github.com/foundry-rs/foundry/issues/478#issuecomment-1491273958",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/478",
    "id": 1491273958,
    "node_id": "IC_kwDOGBlvNc5Y4wjm",
    "user": {
      "login": "chandrakananandi",
      "id": 7932269,
      "node_id": "MDQ6VXNlcjc5MzIyNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7932269?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chandrakananandi",
      "html_url": "https://github.com/chandrakananandi",
      "followers_url": "https://api.github.com/users/chandrakananandi/followers",
      "following_url": "https://api.github.com/users/chandrakananandi/following{/other_user}",
      "gists_url": "https://api.github.com/users/chandrakananandi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chandrakananandi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chandrakananandi/subscriptions",
      "organizations_url": "https://api.github.com/users/chandrakananandi/orgs",
      "repos_url": "https://api.github.com/users/chandrakananandi/repos",
      "events_url": "https://api.github.com/users/chandrakananandi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chandrakananandi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-31T04:33:49Z",
    "updated_at": "2023-03-31T04:33:49Z",
    "author_association": "NONE",
    "body": "\r\n> Ah interesting, wonder if there should be an option to disable that, since otherwise we'll be compiling twice (once for gambit to verify, then the forge compilation)? Then instead forge would need to discard a mutation that doesn't compile\r\n\r\nYes this is definitely possible and in fact something we might do in an upcoming PR.\r\n\r\n> \r\n> Are you just looking for repos that use foundry for building/testing? If so, the forge [integration tests](https://github.com/foundry-rs/foundry/blob/master/cli/tests/it/integration.rs) run against some external repos which could be a good starting point (some of those repos use dapptools, which foundry should be backwards compatible with). Then some other repos that use foundry include [seaport](https://github.com/ProjectOpenSea/seaport/), [maple](https://github.com/maple-labs/maple-core-v2), [alchemix](https://github.com/alchemix-finance/v2-foundry), [uniswap universal router](https://github.com/Uniswap/universal-router), [optimism's bedrock contracts](https://github.com/ethereum-optimism/optimism/tree/develop/packages/contracts-bedrock), and a bunch of my own repos including [multicall](https://github.com/mds1/multicall/), [solidity-generators](https://github.com/mds1/solidity-generators), [solidity-trigonometry](https://github.com/mds1/solidity-trigonometry), [umbra](https://github.com/ScopeLift/umbra-protocol/tree/master/contracts-periphery). There's also a bunch in the [awesome-foundry](https://github.com/crisgarner/awesome-foundry#libraries--templates) repo. But let me know if I misunderstood! 😅\r\n\r\nThis is wonderful, and exactly what I was looking for. I wanted to gather some benchmarks so that we can see how Gambit helps them.  Thanks very much!\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1491273958/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1492911809",
    "html_url": "https://github.com/foundry-rs/foundry/issues/478#issuecomment-1492911809",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/478",
    "id": 1492911809,
    "node_id": "IC_kwDOGBlvNc5Y_AbB",
    "user": {
      "login": "BenTheKush",
      "id": 128326394,
      "node_id": "U_kgDOB6Ya-g",
      "avatar_url": "https://avatars.githubusercontent.com/u/128326394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/BenTheKush",
      "html_url": "https://github.com/BenTheKush",
      "followers_url": "https://api.github.com/users/BenTheKush/followers",
      "following_url": "https://api.github.com/users/BenTheKush/following{/other_user}",
      "gists_url": "https://api.github.com/users/BenTheKush/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/BenTheKush/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BenTheKush/subscriptions",
      "organizations_url": "https://api.github.com/users/BenTheKush/orgs",
      "repos_url": "https://api.github.com/users/BenTheKush/repos",
      "events_url": "https://api.github.com/users/BenTheKush/events{/privacy}",
      "received_events_url": "https://api.github.com/users/BenTheKush/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-04-01T10:06:51Z",
    "updated_at": "2023-04-01T21:51:21Z",
    "author_association": "NONE",
    "body": "Hey @mds1, thought I'd jump in! I'm currently working on Gambit PR that I'm hoping to land some time next week/the following Monday. After that I can look at integrating w/ Foundry.\r\n\r\nWRT equivalent mutants: these are just hard! There are a few ways to handle them:\r\n1. **don't generate equivalent mutants begin with!** This can be done a few ways:\r\n    - _mutation operator selection:_ For instance, don't mutate `a` to `a++` because if `a` is going out of scope the infected state cause by the post increment will never propagate to a test-visible location\r\n    - _suppression rules:_ there are common patterns of equivalent mutants (e.g., `int i = 0; if (cond) { i = 1; } else {i = 2;}` where mutating the initialization value `0` will result in an unreadable write). These patterns depend on the language, coding styles within the language, and a number of other factors. I'm pretty new to solidity (I've mainly been researching in Java land), so I don't know what the best suppression rules are just yet!\r\n\r\n2. **detect equivalent mutants with an optimizing compiler:** trivial compiler equivalence is a technique that just runs optimizing compilers on all the mutants and checks them for equality with the original program. Optimizing compilers tend to _normalize_ or _canonicalize_ programs, so that syntactically distinct programs with the same semantics often end up being written as the same binary. Depending on workload/if you are already compiling this can be feasible, but it blows up at scale.\r\n\r\nThere is also the problem of _mutant redundancy_. For instance, consider the boolean condition `c` and the following three mutants:\r\n\r\n| `c` | `!c` | `true` | `false` |\r\n|----|-----|--------|--------|\r\n|`true`|`false` (**X**)|`true` (**X**)|`false`|\r\n|`false`|`true` (**X**)|`true` (**X**)|`false`|\r\n\r\nI've marked all cells where the mutant differs from the original value with an (**X**). Note that `!c` is _always_ different from `c`: this means that any test that can kill the 2nd mutant `c -> true` will also kill the first mutant `c -> !c`; however, the reverse is not true. This makes the second mutant strictly harder to kill than the first mutant, we say that `true` _dominates_ `!c`, or that `!c` is _redundant to_ the original program `c`.\r\n\r\n**Redundancy is bad:** the more redundant the mutant is (that is, the easier it is to kill), the less utility it has for things like mutation score (killed/total) or as a testing goal for a developer.\r\n\r\nAs a trivial example, if a mutant always causes a crash it is _very_ easy to detect: all tests that execute this mutant kill it! This is called a _trivial_ mutant.\r\n\r\nSo avoiding equivalent mutants is really important, but trying to minimize redundancies is also critical.\r\n\r\nAll this to say, I'm hoping to improve Gambit's mutation routine to avoid many common patterns of equivalent mutants and to try to start reasoning about common mutant redundancies.\r\n\r\nThis brings me to Foundry! If we are able to integrate Gambit with Foundry we can use test data to compute the **kill matrix** (pretty badass, no?). This is just a binary matrix of \"does test T kill mutant M?\". We can use this data to approximate redundancy information and help to detect equivalent mutants. This is of course very expensive to compute, so I'd be using this to inspect manually to improve Gambit for future uses.\r\n\r\nAnyway, that's my brain dump...excited to chat more once I land this PR!\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1492911809/reactions",
      "total_count": 3,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 3,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1544732327",
    "html_url": "https://github.com/foundry-rs/foundry/issues/478#issuecomment-1544732327",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/478",
    "id": 1544732327,
    "node_id": "IC_kwDOGBlvNc5cEr6n",
    "user": {
      "login": "BenTheKush",
      "id": 128326394,
      "node_id": "U_kgDOB6Ya-g",
      "avatar_url": "https://avatars.githubusercontent.com/u/128326394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/BenTheKush",
      "html_url": "https://github.com/BenTheKush",
      "followers_url": "https://api.github.com/users/BenTheKush/followers",
      "following_url": "https://api.github.com/users/BenTheKush/following{/other_user}",
      "gists_url": "https://api.github.com/users/BenTheKush/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/BenTheKush/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BenTheKush/subscriptions",
      "organizations_url": "https://api.github.com/users/BenTheKush/orgs",
      "repos_url": "https://api.github.com/users/BenTheKush/repos",
      "events_url": "https://api.github.com/users/BenTheKush/events{/privacy}",
      "received_events_url": "https://api.github.com/users/BenTheKush/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-11T21:51:32Z",
    "updated_at": "2023-05-11T21:51:32Z",
    "author_association": "NONE",
    "body": "Hey all, poking around a bit in `forge test` related code to see how easy it would be to add a `--mutate` arg. Here is a quick overview of my understanding of how this should work, as well as a few questions that maybe I can get some guidance on.\r\n\r\n1. **Run Tests On Project:** Ensure we have a passing test suite before mutation; abort otherwise.\r\n\r\n2. **Mutate Code:** Apply mutation operators, resulting a mutated file set.\r\n  - **Question:**  In my opinion mutation should be configurable (e.g., which files/contracts/functions to mutate, which mutation operators to apply). Using `forge test --mutate` makes this a little weird because the `test` subcommand now needs conf arguments that only apply in the presence of the `--mutate` option (e.g., `--mutation-operators ...`). Is it better to create a new `forge mutation-test` subcommand to encapsulate this functionality?\r\n  \r\n3. **Run Tests On Mutants:** The mutants are AST mutants, and are written to disk as source files. We will need to swap the mutated source in for the project source for each mutant, run testing infra, and then restore the original file for the next mutation run. This means we probably just want to copy the entire project structure to a temp directory and clean it up afterwards (this seems like the approach folks are suggesting above). And as is suggested, we could even make a few copies of the project to run in parallel:\r\n\r\n  - **Question:** Is it sufficient to recursively copy the directory tree rooted at `project.paths.root` to copy a project and point a new `Project` struct at it?\r\n\r\n4. **Report Mutation Run:** There are various statistics we can report. The basic one is mutation score (detected mutants / generated mutants). The _detection matrix_ is also useful for research purposes, and is just a _T x M_ boolean matrix representation of the predicate _test `t` detected mutant `m`_\r\n\r\n**Test Coverage Data**\r\n\r\nRunning tests is expensive, so avoiding test runs that don't ever touch mutated code is desirable.  To do this I'd want coverage information.\r\n\r\n1. Is test coverage data collected during `execute_tests()`?\r\n2. If not, how hard would this be to gather?\r\n3. Can we get per test coverage information?\r\n\r\nI'm not sure if it's worth using test coverage in the initial PR, maybe I'll just get a proof of concept going. But I think incorporating coverage will be worth it in the medium to long term.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1544732327/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 1
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1548228528",
    "html_url": "https://github.com/foundry-rs/foundry/issues/478#issuecomment-1548228528",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/478",
    "id": 1548228528,
    "node_id": "IC_kwDOGBlvNc5cSBew",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-15T17:03:29Z",
    "updated_at": "2023-05-15T17:03:29Z",
    "author_association": "COLLABORATOR",
    "body": "Hey @BenTheKush! Here's some answers to your questions:\r\n\r\n2: I think we might already have some conditional args like that and I believe clap supports that, so it should be ok. Deferring to @Evalir @mattsse to confirm. Note that we'll also need to support those options via the CLI and via the config file, I don't think they currently sync automatically (i.e. options need to be added in two places)\r\n\r\n3: One downside here is that copying the whole directory might get costly (i.e. slow) because some deps can be quite large with a lot of unrelated files (e.g. when installing chainlink as a dep for their interfaces, you get tons of non-solidity code from the rest of the system). Since I don't think we need to generate mutants for deps, we might want to try only copying the src dir (i.e. set of files that may be mutated) and symlink to the rest. Not sure offhand if this will cause issues with remappings though, another @mattsse or @Evalir question. But otherwise yea I think that should be sufficient\r\n\r\nTest coverage: Coverage data is only generated when running `forge coverage`, not when running `forge test`. Note that it also has some limitations right now (notably, requires no optimizer and no via-ir) and some bugs (can search the repo issues to learn more here), so ideally for now we'd leave mutant improvements due to coverage as an optional feature",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1548228528/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1548649478",
    "html_url": "https://github.com/foundry-rs/foundry/issues/478#issuecomment-1548649478",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/478",
    "id": 1548649478,
    "node_id": "IC_kwDOGBlvNc5cToQG",
    "user": {
      "login": "BenTheKush",
      "id": 128326394,
      "node_id": "U_kgDOB6Ya-g",
      "avatar_url": "https://avatars.githubusercontent.com/u/128326394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/BenTheKush",
      "html_url": "https://github.com/BenTheKush",
      "followers_url": "https://api.github.com/users/BenTheKush/followers",
      "following_url": "https://api.github.com/users/BenTheKush/following{/other_user}",
      "gists_url": "https://api.github.com/users/BenTheKush/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/BenTheKush/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BenTheKush/subscriptions",
      "organizations_url": "https://api.github.com/users/BenTheKush/orgs",
      "repos_url": "https://api.github.com/users/BenTheKush/repos",
      "events_url": "https://api.github.com/users/BenTheKush/events{/privacy}",
      "received_events_url": "https://api.github.com/users/BenTheKush/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-15T21:54:49Z",
    "updated_at": "2023-05-15T21:54:49Z",
    "author_association": "NONE",
    "body": "Thanks @mds1, yeah this all makes sense. Having conditional args would be perfect. And I agree, copying an entire directory over for mutation is not ideal. I might start there for a proof of concept/MVP and then see if there is something clever we can do to not have to copy everything. There's probably some clever manipulation of the `Project` struct I can do to get away with some stuff?\r\n\r\nI'm not super familiar with the Solidity ecosystem so not sure what the stumbling blocks are...but I guess this is a great way to learn :)\r\n\r\nWRT Coverage: happy to make it conditional! And again, I probably won't be implementing any optimizations in the first pass.\r\n\r\nI'm going to do some requirements engineering this week and try to come up with a design. I think a lot of the changes will be happening on the Gambit side anyway, and I'll set up an API that `forge test --mutate` can call into.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1548649478/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1822668717",
    "html_url": "https://github.com/foundry-rs/foundry/issues/478#issuecomment-1822668717",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/478",
    "id": 1822668717,
    "node_id": "IC_kwDOGBlvNc5so7et",
    "user": {
      "login": "MerlinEgalite",
      "id": 44097430,
      "node_id": "MDQ6VXNlcjQ0MDk3NDMw",
      "avatar_url": "https://avatars.githubusercontent.com/u/44097430?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MerlinEgalite",
      "html_url": "https://github.com/MerlinEgalite",
      "followers_url": "https://api.github.com/users/MerlinEgalite/followers",
      "following_url": "https://api.github.com/users/MerlinEgalite/following{/other_user}",
      "gists_url": "https://api.github.com/users/MerlinEgalite/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MerlinEgalite/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MerlinEgalite/subscriptions",
      "organizations_url": "https://api.github.com/users/MerlinEgalite/orgs",
      "repos_url": "https://api.github.com/users/MerlinEgalite/repos",
      "events_url": "https://api.github.com/users/MerlinEgalite/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MerlinEgalite/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-11-22T12:19:53Z",
    "updated_at": "2023-11-22T12:19:53Z",
    "author_association": "NONE",
    "body": "Hi there! I think mutation testing would be very useful to enhance testing suites. Did someone make progress on this topic since May?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1822668717/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1822961129",
    "html_url": "https://github.com/foundry-rs/foundry/issues/478#issuecomment-1822961129",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/478",
    "id": 1822961129,
    "node_id": "IC_kwDOGBlvNc5sqC3p",
    "user": {
      "login": "chandrakananandi",
      "id": 7932269,
      "node_id": "MDQ6VXNlcjc5MzIyNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7932269?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chandrakananandi",
      "html_url": "https://github.com/chandrakananandi",
      "followers_url": "https://api.github.com/users/chandrakananandi/followers",
      "following_url": "https://api.github.com/users/chandrakananandi/following{/other_user}",
      "gists_url": "https://api.github.com/users/chandrakananandi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chandrakananandi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chandrakananandi/subscriptions",
      "organizations_url": "https://api.github.com/users/chandrakananandi/orgs",
      "repos_url": "https://api.github.com/users/chandrakananandi/repos",
      "events_url": "https://api.github.com/users/chandrakananandi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chandrakananandi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-11-22T15:13:21Z",
    "updated_at": "2023-11-22T15:13:21Z",
    "author_association": "NONE",
    "body": "@MerlinEgalite we had started investigating gambit + foundry but had other things come up. We have plans to resume this in early 2024. Will keep you posted.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1822961129/reactions",
      "total_count": 3,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 3,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1823432139",
    "html_url": "https://github.com/foundry-rs/foundry/issues/478#issuecomment-1823432139",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/478",
    "id": 1823432139,
    "node_id": "IC_kwDOGBlvNc5sr13L",
    "user": {
      "login": "samparsky",
      "id": 8148384,
      "node_id": "MDQ6VXNlcjgxNDgzODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8148384?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/samparsky",
      "html_url": "https://github.com/samparsky",
      "followers_url": "https://api.github.com/users/samparsky/followers",
      "following_url": "https://api.github.com/users/samparsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/samparsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/samparsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/samparsky/subscriptions",
      "organizations_url": "https://api.github.com/users/samparsky/orgs",
      "repos_url": "https://api.github.com/users/samparsky/repos",
      "events_url": "https://api.github.com/users/samparsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/samparsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-11-22T19:58:47Z",
    "updated_at": "2023-11-22T19:58:47Z",
    "author_association": "NONE",
    "body": "Hi @chandrakananandi, I'd like to work on integrating Gambit and Foundry",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1823432139/reactions",
      "total_count": 4,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 4,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1826724670",
    "html_url": "https://github.com/foundry-rs/foundry/issues/478#issuecomment-1826724670",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/478",
    "id": 1826724670,
    "node_id": "IC_kwDOGBlvNc5s4Zs-",
    "user": {
      "login": "samparsky",
      "id": 8148384,
      "node_id": "MDQ6VXNlcjgxNDgzODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8148384?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/samparsky",
      "html_url": "https://github.com/samparsky",
      "followers_url": "https://api.github.com/users/samparsky/followers",
      "following_url": "https://api.github.com/users/samparsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/samparsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/samparsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/samparsky/subscriptions",
      "organizations_url": "https://api.github.com/users/samparsky/orgs",
      "repos_url": "https://api.github.com/users/samparsky/repos",
      "events_url": "https://api.github.com/users/samparsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/samparsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-11-26T08:43:44Z",
    "updated_at": "2023-11-26T08:43:56Z",
    "author_association": "NONE",
    "body": "This is the doc about integrating Foundry and Gambit. Please feel free to drop your comments\r\n\r\nhttps://hackmd.io/@tICezjHsSaiehIn9jbcUAA/rJXZb_JS6\r\n\r\n@chandrakananandi Does Certora have any plans on open-sourcing the UI you demoed at your talk at SoliditySummit?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1826724670/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1827070362",
    "html_url": "https://github.com/foundry-rs/foundry/issues/478#issuecomment-1827070362",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/478",
    "id": 1827070362,
    "node_id": "IC_kwDOGBlvNc5s5uGa",
    "user": {
      "login": "chandrakananandi",
      "id": 7932269,
      "node_id": "MDQ6VXNlcjc5MzIyNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7932269?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chandrakananandi",
      "html_url": "https://github.com/chandrakananandi",
      "followers_url": "https://api.github.com/users/chandrakananandi/followers",
      "following_url": "https://api.github.com/users/chandrakananandi/following{/other_user}",
      "gists_url": "https://api.github.com/users/chandrakananandi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chandrakananandi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chandrakananandi/subscriptions",
      "organizations_url": "https://api.github.com/users/chandrakananandi/orgs",
      "repos_url": "https://api.github.com/users/chandrakananandi/repos",
      "events_url": "https://api.github.com/users/chandrakananandi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chandrakananandi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-11-27T03:28:01Z",
    "updated_at": "2023-11-27T03:28:01Z",
    "author_association": "NONE",
    "body": "The UI source is actually open-source: https://github.com/Certora/gambit-report-viewer but note that it was not implemented by Certora and isn't really regularly maintained at the moment. We have plenty of ideas for how to improve it but we don't have resources to invest in it right now.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1827070362/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
