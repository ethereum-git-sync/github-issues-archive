{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/3607",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3607/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3607/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3607/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/3607",
  "id": 1435249602,
  "node_id": "I_kwDOGBlvNc5VjCvC",
  "number": 3607,
  "title": "feat(forge): Add internal metrics capability",
  "user": {
    "login": "lucas-manuel",
    "id": 44272939,
    "node_id": "MDQ6VXNlcjQ0MjcyOTM5",
    "avatar_url": "https://avatars.githubusercontent.com/u/44272939?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/lucas-manuel",
    "html_url": "https://github.com/lucas-manuel",
    "followers_url": "https://api.github.com/users/lucas-manuel/followers",
    "following_url": "https://api.github.com/users/lucas-manuel/following{/other_user}",
    "gists_url": "https://api.github.com/users/lucas-manuel/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/lucas-manuel/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/lucas-manuel/subscriptions",
    "organizations_url": "https://api.github.com/users/lucas-manuel/orgs",
    "repos_url": "https://api.github.com/users/lucas-manuel/repos",
    "events_url": "https://api.github.com/users/lucas-manuel/events{/privacy}",
    "received_events_url": "https://api.github.com/users/lucas-manuel/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3593644820,
      "node_id": "LA_kwDOGBlvNc7WMqsU",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-feature",
      "name": "T-feature",
      "color": "BFD4F2",
      "default": false,
      "description": "Type: feature"
    },
    {
      "id": 3703752787,
      "node_id": "LA_kwDOGBlvNc7cwshT",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/C-forge",
      "name": "C-forge",
      "color": "5319E7",
      "default": false,
      "description": "Command: forge"
    },
    {
      "id": 3703752960,
      "node_id": "LA_kwDOGBlvNc7cwskA",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/A-cheatcodes",
      "name": "A-cheatcodes",
      "color": "FBCA04",
      "default": false,
      "description": "Area: cheatcodes"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 11,
  "created_at": "2022-11-03T20:57:49Z",
  "updated_at": "2023-01-28T10:15:50Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "### Component\r\n\r\nForge\r\n\r\n### Describe the feature you would like\r\n\r\nWhen running invariant tests with an actor-based pattern, there is currently a lack of visibility for:\r\n\r\n1. How many times a function is called\r\n2. What code paths within the function are reached\r\n3. Other general metrics (e.g., how many LPs deposit total)\r\n\r\nHaving a cheatcode that would allow storing this information with arbitrary keys would be useful to be able to render this info in a summary table at the end of a fuzzing campaign.\r\n\r\n@gakonst mentioned [prometheus] metrics as a good reference for this.\r\n\r\nExamples:\r\n\r\n```solidity\r\nvm.counter(\"numberOfLps\", numberOfLps++);\r\n\r\nvm.counter(string.concat(\"loan_\", vm.toString(loanNumber), \"_payments\"), payments[loan]);\r\n```\r\n\r\n### Additional context\r\n\r\n_No response_",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/3607/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3607/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1302839585",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3607#issuecomment-1302839585",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3607",
    "id": 1302839585,
    "node_id": "IC_kwDOGBlvNc5Np8Eh",
    "user": {
      "login": "gakonst",
      "id": 17802178,
      "node_id": "MDQ6VXNlcjE3ODAyMTc4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17802178?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gakonst",
      "html_url": "https://github.com/gakonst",
      "followers_url": "https://api.github.com/users/gakonst/followers",
      "following_url": "https://api.github.com/users/gakonst/following{/other_user}",
      "gists_url": "https://api.github.com/users/gakonst/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gakonst/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gakonst/subscriptions",
      "organizations_url": "https://api.github.com/users/gakonst/orgs",
      "repos_url": "https://api.github.com/users/gakonst/repos",
      "events_url": "https://api.github.com/users/gakonst/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gakonst/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-04T01:07:25Z",
    "updated_at": "2022-11-04T01:07:25Z",
    "author_association": "MEMBER",
    "body": "cc @onbjerg @mattsse I'm still a bit abstract on this but I was thinking of exposing an API via cheatcodes similar to https://docs.rs/metrics/latest/metrics/, and on the CLI we would collect all these metrics and custom log them in a table",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1302839585/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1302840466",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3607#issuecomment-1302840466",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3607",
    "id": 1302840466,
    "node_id": "IC_kwDOGBlvNc5Np8SS",
    "user": {
      "login": "gakonst",
      "id": 17802178,
      "node_id": "MDQ6VXNlcjE3ODAyMTc4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17802178?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gakonst",
      "html_url": "https://github.com/gakonst",
      "followers_url": "https://api.github.com/users/gakonst/followers",
      "following_url": "https://api.github.com/users/gakonst/following{/other_user}",
      "gists_url": "https://api.github.com/users/gakonst/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gakonst/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gakonst/subscriptions",
      "organizations_url": "https://api.github.com/users/gakonst/orgs",
      "repos_url": "https://api.github.com/users/gakonst/repos",
      "events_url": "https://api.github.com/users/gakonst/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gakonst/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-04T01:09:25Z",
    "updated_at": "2022-11-04T01:09:52Z",
    "author_association": "MEMBER",
    "body": "@lucas-manuel can you give an example of how your ideal reporting would look like? a table? something else? maybe there should be plots like this https://docs.rs/tui/latest/tui/widgets/struct.Chart.html for stuff on how it evolves over time (e.g. price as volatility happens)? makes me think that this may allow creating automatic simulation / stress test reports like Gauntlet Network does.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1302840466/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1302886968",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3607#issuecomment-1302886968",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3607",
    "id": 1302886968,
    "node_id": "IC_kwDOGBlvNc5NqHo4",
    "user": {
      "login": "lucas-manuel",
      "id": 44272939,
      "node_id": "MDQ6VXNlcjQ0MjcyOTM5",
      "avatar_url": "https://avatars.githubusercontent.com/u/44272939?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lucas-manuel",
      "html_url": "https://github.com/lucas-manuel",
      "followers_url": "https://api.github.com/users/lucas-manuel/followers",
      "following_url": "https://api.github.com/users/lucas-manuel/following{/other_user}",
      "gists_url": "https://api.github.com/users/lucas-manuel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lucas-manuel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lucas-manuel/subscriptions",
      "organizations_url": "https://api.github.com/users/lucas-manuel/orgs",
      "repos_url": "https://api.github.com/users/lucas-manuel/repos",
      "events_url": "https://api.github.com/users/lucas-manuel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lucas-manuel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-04T02:47:01Z",
    "updated_at": "2022-11-04T02:47:14Z",
    "author_association": "NONE",
    "body": "@gakonst Yeah personally I think the lowest hanging fruit would be to log in a table similar to `--gas-report`. I'd mainly be using this for debugging purposes so it'd be useful as a numerical log output. \r\n\r\nGoing forward though for the more sophisticated use cases we discussed it would be interesting to export to some sort of JSON that could be used to generate more visual reporting (could be added to CI as an artifact for example).",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1302886968/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1304070468",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3607#issuecomment-1304070468",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3607",
    "id": 1304070468,
    "node_id": "IC_kwDOGBlvNc5NuolE",
    "user": {
      "login": "gakonst",
      "id": 17802178,
      "node_id": "MDQ6VXNlcjE3ODAyMTc4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17802178?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gakonst",
      "html_url": "https://github.com/gakonst",
      "followers_url": "https://api.github.com/users/gakonst/followers",
      "following_url": "https://api.github.com/users/gakonst/following{/other_user}",
      "gists_url": "https://api.github.com/users/gakonst/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gakonst/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gakonst/subscriptions",
      "organizations_url": "https://api.github.com/users/gakonst/orgs",
      "repos_url": "https://api.github.com/users/gakonst/repos",
      "events_url": "https://api.github.com/users/gakonst/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gakonst/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-04T19:34:31Z",
    "updated_at": "2022-11-04T19:34:31Z",
    "author_association": "MEMBER",
    "body": "@FrankieIsLost @transmissions11 had some thoughts on this which I'd love if they shared in the thread :) ",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1304070468/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1304400405",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3607#issuecomment-1304400405",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3607",
    "id": 1304400405,
    "node_id": "IC_kwDOGBlvNc5Nv5IV",
    "user": {
      "login": "transmissions11",
      "id": 26209401,
      "node_id": "MDQ6VXNlcjI2MjA5NDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/26209401?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/transmissions11",
      "html_url": "https://github.com/transmissions11",
      "followers_url": "https://api.github.com/users/transmissions11/followers",
      "following_url": "https://api.github.com/users/transmissions11/following{/other_user}",
      "gists_url": "https://api.github.com/users/transmissions11/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/transmissions11/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/transmissions11/subscriptions",
      "organizations_url": "https://api.github.com/users/transmissions11/orgs",
      "repos_url": "https://api.github.com/users/transmissions11/repos",
      "events_url": "https://api.github.com/users/transmissions11/events{/privacy}",
      "received_events_url": "https://api.github.com/users/transmissions11/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-05T04:25:50Z",
    "updated_at": "2022-11-05T04:39:29Z",
    "author_association": "CONTRIBUTOR",
    "body": "Great idea to give users programmable insight into their invariant campaigns, been a big advocate of this for a small while now.\r\n\r\nIMO giving devs a better understanding of the coverage of their invariant tests and tools to effectively debug them is far more valuable than building smarter fuzzers after a certain point, because once a weakness is identified its not too hard to guide the fuzzer towards it, as opposed to a genius fuzzer thats a total black box from a dev's perspective, which offers little insight into how secure a piece of code is and whether a dev can be confident in the coverage of the run. Humans and fuzzers should work tandem!\r\n\r\n### In terms of actual design:\r\n\r\n- A cheatcode to enter data into basically a time series database a la prometheus seems like a great way to go\r\n- Ideally we export tables by default, but also provide the option for timestamped JSON, etc. \r\n\t- Timestampped JSON export would enable auditors and such to generate charts like this (ref: [Gearbox Fuzzing](https://github.com/Gearbox-protocol/security/blob/main/audits/2021%20Dec%20-%20ConsensysDiligence%20_Fuzzing_report.pdf)): <img width=\"743\" alt=\"Screen Shot 2022-11-04 at 9 12 42 PM\" src=\"https://user-images.githubusercontent.com/26209401/200100257-fa9cf1e8-cbfe-4a75-adef-5490066723ef.png\">\r\n- Would be nice to have metric types beyond just counter. For inspiration, prometheus offers [3 core types](https://prometheus.io/docs/concepts/metric_types/):\r\n\t- Gauge\r\n\t- Counter\r\n\t- Histogram\r\n- For tracking things like number of lps, I think it would be easiest on devs if we added a `postCall` hook of sorts (imagine `setUp` but called after every random call in an invariant run), where devs can just bulk query and update all their storage variables\r\n- However, there are still situations where calling the cheatcode dynamically in a test would be preferred (like tracking details about a specific mapping key which is hard to identify retroactively), so good to have the option to call dynamically in tests and contracts as well\r\n- One other thing we might do to make it easier on devs to track a bunch of data on their invariant runs would be some sort of cheatcode or flag to auto assign a counter/gauge/histogram to a function, state variable, etc\r\n\t- That way if you wanted to check how many times a loan was originated, etc, you wouldn't necessarily have to write a separate contract instrumented will calls to vm.counter()\r\n\t- Maybe we should just pass the address called on and the calldata passed to the `postCall` hook and that would enable something like this? I think there's some interesting design space here\r\n\t- Some will certainly still choose to instrument, or do echinda style wrappers, but I think its nice to provide the quick and dirty option for devs who dont require such granularity \r\n- Finally, for the use case where devs want to instrument their contracts with calls to these counters and cannot read storage vars from test files:\r\n   - We need to provide a way to get the current value of a guage/counter/etc\r\n   - API could look something like this:\r\n     - `vm.incrementCounter(\"numberOfLps\", 1)` \r\n     - `vm.setCounter(\"numberOfLps\", vm.readCounter(\"numberOfLps\") + 1)`\r\n  - IMO this API is also just generally less of a PITA than maintaining your own storage variables.\r\n  - Furthermore, isn't test state wiped from time to time during invariant campaigns? This has the benefit of enabling persistent state throughout a long campaign.  \r\n\r\nWDYT?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1304400405/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1312847714",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3607#issuecomment-1312847714",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3607",
    "id": 1312847714,
    "node_id": "IC_kwDOGBlvNc5OQHdi",
    "user": {
      "login": "horsefacts",
      "id": 109845214,
      "node_id": "U_kgDOBowa3g",
      "avatar_url": "https://avatars.githubusercontent.com/u/109845214?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/horsefacts",
      "html_url": "https://github.com/horsefacts",
      "followers_url": "https://api.github.com/users/horsefacts/followers",
      "following_url": "https://api.github.com/users/horsefacts/following{/other_user}",
      "gists_url": "https://api.github.com/users/horsefacts/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/horsefacts/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/horsefacts/subscriptions",
      "organizations_url": "https://api.github.com/users/horsefacts/orgs",
      "repos_url": "https://api.github.com/users/horsefacts/repos",
      "events_url": "https://api.github.com/users/horsefacts/events{/privacy}",
      "received_events_url": "https://api.github.com/users/horsefacts/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-13T23:07:46Z",
    "updated_at": "2022-11-13T23:07:46Z",
    "author_association": "NONE",
    "body": "In addition to these more complex metrics, it would be very helpful to see a breakdown of calls/reverts by target contract + selector. For example, something like:\r\n\r\n```\r\n╭───────────────────────────────────────────┬─────────╮─────────╮\r\n│ test/actors/Swapper.sol:Swapper contract  ┆         │         │\r\n╞═══════════════════════════════════════════╪═════════╡═════════╡\r\n│ Function Name                             ┆ calls   │ reverts │\r\n├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤╌╌╌╌╌╌╌╌╌┤\r\n│ swapGooForGobblers                        ┆ 1024    │ 612     │\r\n├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤╌╌╌╌╌╌╌╌╌┤\r\n│ swapGobblersForGoo                        ┆ 1024    │ 12      │\r\n├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤╌╌╌╌╌╌╌╌╌┤\r\n│ swapGobblersForGobblers                   ┆ 1024    │ 64      │\r\n╰───────────────────────────────────────────┴─────────╯─────────╯\r\n```\r\n\r\nThis would be very helpful for writing and debugging new actor contracts. ",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1312847714/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1315852442",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3607#issuecomment-1315852442",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3607",
    "id": 1315852442,
    "node_id": "IC_kwDOGBlvNc5OblCa",
    "user": {
      "login": "lucas-manuel",
      "id": 44272939,
      "node_id": "MDQ6VXNlcjQ0MjcyOTM5",
      "avatar_url": "https://avatars.githubusercontent.com/u/44272939?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lucas-manuel",
      "html_url": "https://github.com/lucas-manuel",
      "followers_url": "https://api.github.com/users/lucas-manuel/followers",
      "following_url": "https://api.github.com/users/lucas-manuel/following{/other_user}",
      "gists_url": "https://api.github.com/users/lucas-manuel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lucas-manuel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lucas-manuel/subscriptions",
      "organizations_url": "https://api.github.com/users/lucas-manuel/orgs",
      "repos_url": "https://api.github.com/users/lucas-manuel/repos",
      "events_url": "https://api.github.com/users/lucas-manuel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lucas-manuel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-15T20:55:03Z",
    "updated_at": "2022-11-15T20:55:27Z",
    "author_association": "NONE",
    "body": "@transmissions11 \r\n\r\nLove that Gearbox chart 👀 \r\n\r\nYeah I agree that it would be better to design this without the need to persist storage within the contracts anywhere for this purpose. I like the suggestions of `incrementCounter` and `setCounter`. I also like the idea of a `postCall` hook, we've been hacking that together with modifiers inside the actors contracts but would definitely be better to have an official framework for it haha.\r\n\r\nWhat are our next steps here?\r\n\r\nI also completely agree with the summary table idea @horsefacts ",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1315852442/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1317456047",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3607#issuecomment-1317456047",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3607",
    "id": 1317456047,
    "node_id": "IC_kwDOGBlvNc5Ohsiv",
    "user": {
      "login": "odyslam",
      "id": 13405632,
      "node_id": "MDQ6VXNlcjEzNDA1NjMy",
      "avatar_url": "https://avatars.githubusercontent.com/u/13405632?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/odyslam",
      "html_url": "https://github.com/odyslam",
      "followers_url": "https://api.github.com/users/odyslam/followers",
      "following_url": "https://api.github.com/users/odyslam/following{/other_user}",
      "gists_url": "https://api.github.com/users/odyslam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/odyslam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/odyslam/subscriptions",
      "organizations_url": "https://api.github.com/users/odyslam/orgs",
      "repos_url": "https://api.github.com/users/odyslam/repos",
      "events_url": "https://api.github.com/users/odyslam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/odyslam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-16T18:17:18Z",
    "updated_at": "2022-11-16T18:17:18Z",
    "author_association": "CONTRIBUTOR",
    "body": "Second gakonst for using Prometheus as the engine/standard and then we can either:\r\n- output charts using some charting library\r\n- serve them via an endpoint that can be scraped by Prometheus and visualize them/analyze them in Grafana.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1317456047/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1405556269",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3607#issuecomment-1405556269",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3607",
    "id": 1405556269,
    "node_id": "IC_kwDOGBlvNc5TxxYt",
    "user": {
      "login": "PaulRBerg",
      "id": 8782666,
      "node_id": "MDQ6VXNlcjg3ODI2NjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8782666?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PaulRBerg",
      "html_url": "https://github.com/PaulRBerg",
      "followers_url": "https://api.github.com/users/PaulRBerg/followers",
      "following_url": "https://api.github.com/users/PaulRBerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/PaulRBerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PaulRBerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PaulRBerg/subscriptions",
      "organizations_url": "https://api.github.com/users/PaulRBerg/orgs",
      "repos_url": "https://api.github.com/users/PaulRBerg/repos",
      "events_url": "https://api.github.com/users/PaulRBerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PaulRBerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-26T19:55:53Z",
    "updated_at": "2023-01-26T19:55:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "@lucas-manuel Until this issue gets implemented, do you know any way to output the call summary only at the end of the invariant tests run?\r\n\r\nI saw that in your [`invariants-example`](https://github.com/lucas-manuel/invariant-examples/blob/d6b4f06d7ebe0bbaebcfd666fb00433d30ab28da/test/WrappedTests.t.sol#L126-L140) repo, you have defined this function:\r\n\r\n```solidity\r\nfunction invariant_call_summary() external view {\r\n    console.log(\"\\nCall Summary\\n\");\r\n    ///\r\n}\r\n```\r\n\r\nBut, if I understand this correctly, this test function will be executed at the end of each run, which will slow down test runs.\r\n\r\nIs there any way to output the call summary at the end of the invariant tests run? As ar as I know, there is no \"after all\" hook in Foundry (a function opposite to `setUp`), but maybe there is another way?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1405556269/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1407160480",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3607#issuecomment-1407160480",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3607",
    "id": 1407160480,
    "node_id": "IC_kwDOGBlvNc5T35Cg",
    "user": {
      "login": "gakonst",
      "id": 17802178,
      "node_id": "MDQ6VXNlcjE3ODAyMTc4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17802178?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gakonst",
      "html_url": "https://github.com/gakonst",
      "followers_url": "https://api.github.com/users/gakonst/followers",
      "following_url": "https://api.github.com/users/gakonst/following{/other_user}",
      "gists_url": "https://api.github.com/users/gakonst/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gakonst/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gakonst/subscriptions",
      "organizations_url": "https://api.github.com/users/gakonst/orgs",
      "repos_url": "https://api.github.com/users/gakonst/repos",
      "events_url": "https://api.github.com/users/gakonst/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gakonst/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-27T22:44:34Z",
    "updated_at": "2023-01-27T22:44:34Z",
    "author_association": "MEMBER",
    "body": "> But, if I understand this correctly, this test function will be executed at the end of each run, which will slow down test runs.\r\n\r\nYeah it'll slow it down, but a bit only I would assume. We should probably add that kind of `function invariant_summary()` hook as an \"after all\".",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1407160480/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1407366588",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3607#issuecomment-1407366588",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3607",
    "id": 1407366588,
    "node_id": "IC_kwDOGBlvNc5T4rW8",
    "user": {
      "login": "PaulRBerg",
      "id": 8782666,
      "node_id": "MDQ6VXNlcjg3ODI2NjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8782666?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PaulRBerg",
      "html_url": "https://github.com/PaulRBerg",
      "followers_url": "https://api.github.com/users/PaulRBerg/followers",
      "following_url": "https://api.github.com/users/PaulRBerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/PaulRBerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PaulRBerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PaulRBerg/subscriptions",
      "organizations_url": "https://api.github.com/users/PaulRBerg/orgs",
      "repos_url": "https://api.github.com/users/PaulRBerg/repos",
      "events_url": "https://api.github.com/users/PaulRBerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PaulRBerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-28T10:15:50Z",
    "updated_at": "2023-01-28T10:15:50Z",
    "author_association": "CONTRIBUTOR",
    "body": "It depends on how many `console.log` statements there are .. we have quite a few and the run time is noticeably slower with the invariant summary function defined. Ended up renaming it to start with something other than `invariant_` so that we can selectively activate it when we want to get a report.\r\n\r\n> hook as an \"after all\"\r\n\r\nWould be super helpful.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1407366588/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
