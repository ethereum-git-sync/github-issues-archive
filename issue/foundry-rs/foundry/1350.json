{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/1350",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1350/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1350/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1350/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/1350",
  "id": 1206931449,
  "node_id": "I_kwDOGBlvNc5H8E_5",
  "number": 1350,
  "title": "feature: `assumeRange(uint lower, uint upper)` in `Vm.sol`",
  "user": {
    "login": "n1punp",
    "id": 16180590,
    "node_id": "MDQ6VXNlcjE2MTgwNTkw",
    "avatar_url": "https://avatars.githubusercontent.com/u/16180590?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/n1punp",
    "html_url": "https://github.com/n1punp",
    "followers_url": "https://api.github.com/users/n1punp/followers",
    "following_url": "https://api.github.com/users/n1punp/following{/other_user}",
    "gists_url": "https://api.github.com/users/n1punp/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/n1punp/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/n1punp/subscriptions",
    "organizations_url": "https://api.github.com/users/n1punp/orgs",
    "repos_url": "https://api.github.com/users/n1punp/repos",
    "events_url": "https://api.github.com/users/n1punp/events{/privacy}",
    "received_events_url": "https://api.github.com/users/n1punp/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3593644820,
      "node_id": "LA_kwDOGBlvNc7WMqsU",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-feature",
      "name": "T-feature",
      "color": "BFD4F2",
      "default": false,
      "description": "Type: feature"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 16,
  "created_at": "2022-04-18T10:59:08Z",
  "updated_at": "2022-11-03T20:54:27Z",
  "closed_at": "2022-11-03T20:54:27Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "### Component\n\nForge\n\n### Describe the feature you would like\n\n`Vm.assumeRange(uint lower, uint upper)` to randomly fuzz numbers only within the specified range.\r\n\r\nCurrent fuzz testing for token balances is almost impossible. The desirable range is too small for `uint256`, so the current `Vm.assume` doesn't work.\r\n\r\n\n\n### Additional context\n\nMy current workaround is to random a `ratio` variable instead, then scale down to any desired range. (see https://github.com/n1punp/solidly-zap/blob/master/contracts/tests/TestSwap.sol#L44 ), so it could be as simple as this logic, but would love to see this built-in to the cheatcode as well!",
  "closed_by": {
    "login": "gakonst",
    "id": 17802178,
    "node_id": "MDQ6VXNlcjE3ODAyMTc4",
    "avatar_url": "https://avatars.githubusercontent.com/u/17802178?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/gakonst",
    "html_url": "https://github.com/gakonst",
    "followers_url": "https://api.github.com/users/gakonst/followers",
    "following_url": "https://api.github.com/users/gakonst/following{/other_user}",
    "gists_url": "https://api.github.com/users/gakonst/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/gakonst/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gakonst/subscriptions",
    "organizations_url": "https://api.github.com/users/gakonst/orgs",
    "repos_url": "https://api.github.com/users/gakonst/repos",
    "events_url": "https://api.github.com/users/gakonst/events{/privacy}",
    "received_events_url": "https://api.github.com/users/gakonst/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/1350/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1350/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1101321653",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1350#issuecomment-1101321653",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1350",
    "id": 1101321653,
    "node_id": "IC_kwDOGBlvNc5BpNW1",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-18T11:15:17Z",
    "updated_at": "2022-04-18T11:15:17Z",
    "author_association": "MEMBER",
    "body": "If the range is too small for uint256, consider using a smaller uint (e.g. uint128 and so on) and then converting that to a uint256 later. Does that fit your use case?\r\n\r\nI'm not entirely sure what the fuzzer can do/can't do, but my immediate feeling is that we don't have an `assumeRange` because we can't have one. Maybe @mds1 or @brockelmore knows?\r\n\r\nAlso, take a look at Solmate's `bound` function that does something similar: https://github.com/Rari-Capital/solmate/blob/fb582d2edfc4ec42981cb371c6692a25dd54b98d/src/test/utils/DSTestPlus.sol#L115-L119",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1101321653/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1101353035",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1350#issuecomment-1101353035",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1350",
    "id": 1101353035,
    "node_id": "IC_kwDOGBlvNc5BpVBL",
    "user": {
      "login": "n1punp",
      "id": 16180590,
      "node_id": "MDQ6VXNlcjE2MTgwNTkw",
      "avatar_url": "https://avatars.githubusercontent.com/u/16180590?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/n1punp",
      "html_url": "https://github.com/n1punp",
      "followers_url": "https://api.github.com/users/n1punp/followers",
      "following_url": "https://api.github.com/users/n1punp/following{/other_user}",
      "gists_url": "https://api.github.com/users/n1punp/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/n1punp/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/n1punp/subscriptions",
      "organizations_url": "https://api.github.com/users/n1punp/orgs",
      "repos_url": "https://api.github.com/users/n1punp/repos",
      "events_url": "https://api.github.com/users/n1punp/events{/privacy}",
      "received_events_url": "https://api.github.com/users/n1punp/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-18T12:15:01Z",
    "updated_at": "2022-04-18T12:15:01Z",
    "author_association": "NONE",
    "body": "`uint128` still wouldn't work. The probability is like 10^27 / 2^128 which is still close to 0. \r\n\r\nAs I've mentioned above, i think there's a possible workaround by:\r\n- random a ratio variable, then scale down to any desired range (so scale from 0 - MAX_INT to lower - upper instead). See https://github.com/n1punp/solidly-zap/blob/master/contracts/tests/TestSwap.sol#L44 for example",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1101353035/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1101363457",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1350#issuecomment-1101363457",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1350",
    "id": 1101363457,
    "node_id": "IC_kwDOGBlvNc5BpXkB",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-18T12:33:02Z",
    "updated_at": "2022-04-18T12:33:02Z",
    "author_association": "MEMBER",
    "body": "uint128 was just an example - if you need integers in the uint28 range, then you could use a uint32?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1101363457/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1101402930",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1350#issuecomment-1101402930",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1350",
    "id": 1101402930,
    "node_id": "IC_kwDOGBlvNc5BphMy",
    "user": {
      "login": "brockelmore",
      "id": 31553173,
      "node_id": "MDQ6VXNlcjMxNTUzMTcz",
      "avatar_url": "https://avatars.githubusercontent.com/u/31553173?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brockelmore",
      "html_url": "https://github.com/brockelmore",
      "followers_url": "https://api.github.com/users/brockelmore/followers",
      "following_url": "https://api.github.com/users/brockelmore/following{/other_user}",
      "gists_url": "https://api.github.com/users/brockelmore/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brockelmore/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brockelmore/subscriptions",
      "organizations_url": "https://api.github.com/users/brockelmore/orgs",
      "repos_url": "https://api.github.com/users/brockelmore/repos",
      "events_url": "https://api.github.com/users/brockelmore/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brockelmore/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-18T13:19:16Z",
    "updated_at": "2022-04-18T13:19:16Z",
    "author_association": "MEMBER",
    "body": "For small ranges you are better off with a bound function. I would be open to a bound cheatcode that is conceptually similar to the above but just returns the bounded input instead of skipping the run like assume does.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1101402930/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1101409982",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1350#issuecomment-1101409982",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1350",
    "id": 1101409982,
    "node_id": "IC_kwDOGBlvNc5Bpi6-",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-18T13:29:17Z",
    "updated_at": "2022-04-18T13:29:17Z",
    "author_association": "MEMBER",
    "body": "Yeah, bounding would wrap the range so the probability is basically 100% that you would always be within a specific range. See the solmate snippet I linked",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1101409982/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1101427486",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1350#issuecomment-1101427486",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1350",
    "id": 1101427486,
    "node_id": "IC_kwDOGBlvNc5BpnMe",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-18T13:56:01Z",
    "updated_at": "2022-04-18T13:56:01Z",
    "author_association": "COLLABORATOR",
    "body": "I believe proptest does have a way to tell it \"generate numbers in the range 5 through 100\" (or whatever range), but the problem is figuring out the best UX to specify that. With a cheatcode, we'd have to preprocess the solidity to find the ranges to pass to proptest. \r\n\r\nSo +1 that `bound` is the way to go here\r\n\r\n>  instead of skipping the run like assume does.\r\n\r\nJust noting that assumed doesn't skip the run, but instead generates new values and retries the run",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1101427486/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1101962063",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1350#issuecomment-1101962063",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1350",
    "id": 1101962063,
    "node_id": "IC_kwDOGBlvNc5BrptP",
    "user": {
      "login": "n1punp",
      "id": 16180590,
      "node_id": "MDQ6VXNlcjE2MTgwNTkw",
      "avatar_url": "https://avatars.githubusercontent.com/u/16180590?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/n1punp",
      "html_url": "https://github.com/n1punp",
      "followers_url": "https://api.github.com/users/n1punp/followers",
      "following_url": "https://api.github.com/users/n1punp/following{/other_user}",
      "gists_url": "https://api.github.com/users/n1punp/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/n1punp/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/n1punp/subscriptions",
      "organizations_url": "https://api.github.com/users/n1punp/orgs",
      "repos_url": "https://api.github.com/users/n1punp/repos",
      "events_url": "https://api.github.com/users/n1punp/events{/privacy}",
      "received_events_url": "https://api.github.com/users/n1punp/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-19T03:42:26Z",
    "updated_at": "2022-04-19T03:42:26Z",
    "author_association": "NONE",
    "body": "Yea, solmate snippet is similar to what my workaround was, which should be enough.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1101962063/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1105668671",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1350#issuecomment-1105668671",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1350",
    "id": 1105668671,
    "node_id": "IC_kwDOGBlvNc5B5yo_",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-21T19:27:00Z",
    "updated_at": "2022-04-21T19:27:28Z",
    "author_association": "MEMBER",
    "body": "Cool, I'm going to close this since `bound` should work and does not discard any inputs (since the input is wrapped to a range). We can explore fuzzer cheatcodes that can support this behaviour natively, but there are some challenges e.g. specifying what parameter should be in the range, which might be poor UX/be easy to mistype/hard to read, e.g.:\r\n\r\n```solidity\r\nfunction testFuzz(uint256 a, uint256 b) {\r\n  vm.bound(1, 0, 10); // bounds b to the range 0-10 inclusive, but not super readable\r\n}\r\n```\r\n\r\nIf you want this as a utility function in forge-std I'd recommend opening an issue there :blush: ",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1105668671/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1256639421",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1350#issuecomment-1256639421",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1350",
    "id": 1256639421,
    "node_id": "IC_kwDOGBlvNc5K5su9",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-23T20:24:21Z",
    "updated_at": "2022-09-23T20:24:21Z",
    "author_association": "NONE",
    "body": "Have you considered using NatSpec, as in:\r\n\r\n```\r\n/// @param x range(1, 10)\r\nfunction test(uint x) public {\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1256639421/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1256647092",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1350#issuecomment-1256647092",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1350",
    "id": 1256647092,
    "node_id": "IC_kwDOGBlvNc5K5um0",
    "user": {
      "login": "nventuro",
      "id": 2530770,
      "node_id": "MDQ6VXNlcjI1MzA3NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2530770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nventuro",
      "html_url": "https://github.com/nventuro",
      "followers_url": "https://api.github.com/users/nventuro/followers",
      "following_url": "https://api.github.com/users/nventuro/following{/other_user}",
      "gists_url": "https://api.github.com/users/nventuro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nventuro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nventuro/subscriptions",
      "organizations_url": "https://api.github.com/users/nventuro/orgs",
      "repos_url": "https://api.github.com/users/nventuro/repos",
      "events_url": "https://api.github.com/users/nventuro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nventuro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-23T20:34:44Z",
    "updated_at": "2022-09-23T20:39:40Z",
    "author_association": "NONE",
    "body": "It'd be great if we could have feed the desired range into the rng instead of using `bound`, as otherwise most of the value gained from the RNG being smart is completely lost.\r\n\r\nFor example, even though the RNG checks edge values, the following test passes since my value for `max` is not divisor of `2^255 - 1`:\r\n\r\n```\r\nfunction testUpperEdge(uint256 x) external {\r\n    x = bound(x, 0, 70000);\r\n    assertTrue(x != 70000);\r\n}\r\n```\r\n\r\nWe also lose the fact that bytecode is analyzed to look for the `PUSH` opcode, a feature that is responsible for finding a counterexample for the following test, while an RNG with a uniform distribution would not catch it:\r\n```\r\nfunction testRandom(uint256 x) external {\r\n    assertTrue(x != uint256(0xdeadbeef));\r\n}\r\n```\r\n\r\nUsing `bound` this is lost - the following test does not fail because `min` not being zero means all input values get some additional bias:\r\n\r\n```\r\nfunction testRandom(uint256 x) external {\r\n    x = bound(x, 1, type(uint256).max);\r\n    assertTrue(x != uint256(0xdeadbeef));\r\n}\r\n```\r\n\r\n---\r\n\r\nGiven that both the ABI and bytecode are already being processed and used to feed the RNG, also processing natspec as per @frangio's suggestion above doesn't seem like a stretch.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1256647092/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1256741327",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1350#issuecomment-1256741327",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1350",
    "id": 1256741327,
    "node_id": "IC_kwDOGBlvNc5K6FnP",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-23T22:29:01Z",
    "updated_at": "2022-09-23T22:29:01Z",
    "author_association": "COLLABORATOR",
    "body": "Yea +1 I agree with the above and think should reopen this issue and consider prioritizing it (as well as a few other fuzz/invariant test features).\r\n\r\nUsing natspec is probably the way to go, since I don't think we have any great alternative syntax ideas. IIRC originally we wanted to find a solution other than using comments for two reasons:\r\n\r\n1. Some people just don't like using comments to dictate behavior for various reasons.\r\n2. I think we'd want to use `/// @custom:something` style tags to make parsing easier (not confident in this and can't remember details) but custom tags were only introduced in 0.8.2, so that excludes some users. Though I've tried to gauge how many projects use <0.8 and it seems to be _roughly_ 3%, so even if this has to be >=0.8.2 only I think that's ok.\r\n\r\n(These are the same reasons I didn't use comments in the proposal in https://github.com/foundry-rs/foundry/issues/3062, though in that case comments have one more downside of potentially becoming unwieldy and adding a lot of clutter to your tests given the number of config options).\r\n\r\nHowever, I do think this issue is important enough that we should move forward with comment-based ranges if that's the best syntax we have",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1256741327/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 1,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1256810083",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1350#issuecomment-1256810083",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1350",
    "id": 1256810083,
    "node_id": "IC_kwDOGBlvNc5K6WZj",
    "user": {
      "login": "nventuro",
      "id": 2530770,
      "node_id": "MDQ6VXNlcjI1MzA3NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2530770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nventuro",
      "html_url": "https://github.com/nventuro",
      "followers_url": "https://api.github.com/users/nventuro/followers",
      "following_url": "https://api.github.com/users/nventuro/following{/other_user}",
      "gists_url": "https://api.github.com/users/nventuro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nventuro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nventuro/subscriptions",
      "organizations_url": "https://api.github.com/users/nventuro/orgs",
      "repos_url": "https://api.github.com/users/nventuro/repos",
      "events_url": "https://api.github.com/users/nventuro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nventuro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-24T00:12:21Z",
    "updated_at": "2022-09-24T00:12:28Z",
    "author_association": "NONE",
    "body": "As one of the few that have not yet migrated to 0.8, we'd appreciate support for 0.7 :upside_down_face: ",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1256810083/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1258856786",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1350#issuecomment-1258856786",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1350",
    "id": 1258856786,
    "node_id": "IC_kwDOGBlvNc5LCKFS",
    "user": {
      "login": "gakonst",
      "id": 17802178,
      "node_id": "MDQ6VXNlcjE3ODAyMTc4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17802178?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gakonst",
      "html_url": "https://github.com/gakonst",
      "followers_url": "https://api.github.com/users/gakonst/followers",
      "following_url": "https://api.github.com/users/gakonst/following{/other_user}",
      "gists_url": "https://api.github.com/users/gakonst/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gakonst/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gakonst/subscriptions",
      "organizations_url": "https://api.github.com/users/gakonst/orgs",
      "repos_url": "https://api.github.com/users/gakonst/repos",
      "events_url": "https://api.github.com/users/gakonst/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gakonst/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-27T01:40:31Z",
    "updated_at": "2022-09-27T01:40:31Z",
    "author_association": "MEMBER",
    "body": "Open minded to somehow supporting this. Maybe via Natspec. Might require usage of solang/our visitor code for fmt/doc.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1258856786/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1262324004",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1350#issuecomment-1262324004",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1350",
    "id": 1262324004,
    "node_id": "IC_kwDOGBlvNc5LPYkk",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-29T13:57:01Z",
    "updated_at": "2022-09-29T13:57:01Z",
    "author_association": "COLLABORATOR",
    "body": "@nventuro @frangio just opened https://github.com/foundry-rs/forge-std/issues/188 which I think might be a suitable + simpler replacement, even if just temporary. Let me know your thoughts",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1262324004/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1262396123",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1350#issuecomment-1262396123",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1350",
    "id": 1262396123,
    "node_id": "IC_kwDOGBlvNc5LPqLb",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-29T14:51:09Z",
    "updated_at": "2022-09-29T14:51:09Z",
    "author_association": "COLLABORATOR",
    "body": "One thing to call out explicitly here: We'd also want to change to the edge-biasing strategy to factor in the user-provided upper limit, since currently it's based on the `(u)intN` type provided",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1262396123/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1302641894",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1350#issuecomment-1302641894",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1350",
    "id": 1302641894,
    "node_id": "IC_kwDOGBlvNc5NpLzm",
    "user": {
      "login": "gakonst",
      "id": 17802178,
      "node_id": "MDQ6VXNlcjE3ODAyMTc4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17802178?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gakonst",
      "html_url": "https://github.com/gakonst",
      "followers_url": "https://api.github.com/users/gakonst/followers",
      "following_url": "https://api.github.com/users/gakonst/following{/other_user}",
      "gists_url": "https://api.github.com/users/gakonst/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gakonst/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gakonst/subscriptions",
      "organizations_url": "https://api.github.com/users/gakonst/orgs",
      "repos_url": "https://api.github.com/users/gakonst/repos",
      "events_url": "https://api.github.com/users/gakonst/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gakonst/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-03T20:43:18Z",
    "updated_at": "2022-11-03T20:43:18Z",
    "author_association": "MEMBER",
    "body": "@mds1 mentioned that the new `bound` from forge-std addresses this, should we close?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1302641894/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
