{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/5784",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5784/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5784/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5784/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/5784",
  "id": 1882704192,
  "node_id": "I_kwDOGBlvNc5wN8lA",
  "number": 5784,
  "title": "feat(debugger): Debug Adapter Protocol",
  "user": {
    "login": "llllvvuu",
    "id": 5601392,
    "node_id": "MDQ6VXNlcjU2MDEzOTI=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5601392?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/llllvvuu",
    "html_url": "https://github.com/llllvvuu",
    "followers_url": "https://api.github.com/users/llllvvuu/followers",
    "following_url": "https://api.github.com/users/llllvvuu/following{/other_user}",
    "gists_url": "https://api.github.com/users/llllvvuu/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/llllvvuu/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/llllvvuu/subscriptions",
    "organizations_url": "https://api.github.com/users/llllvvuu/orgs",
    "repos_url": "https://api.github.com/users/llllvvuu/repos",
    "events_url": "https://api.github.com/users/llllvvuu/events{/privacy}",
    "received_events_url": "https://api.github.com/users/llllvvuu/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3593644820,
      "node_id": "LA_kwDOGBlvNc7WMqsU",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-feature",
      "name": "T-feature",
      "color": "BFD4F2",
      "default": false,
      "description": "Type: feature"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 0,
  "created_at": "2023-09-05T20:55:48Z",
  "updated_at": "2023-09-06T06:39:55Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "### Component\r\n\r\nForge\r\n\r\n### Describe the feature you would like\r\n\r\nSupport [Microsoft's Debug Adapter Protocol (DAP)](https://microsoft.github.io/debug-adapter-protocol//), so that folks can use the debuggers built into VSCode / Neovim / Emacs / Helix / etc.\r\n\r\nThey handle all of the same UI stuff (e.g. [Disassembly View](https://devblogs.microsoft.com/cppblog/visual-studio-code-c-july-2021-update-disassembly-view-macro-expansion-and-windows-arm64-debugging/#disassembly-view), [memory hex view](https://code.visualstudio.com/updates/v1_64#_viewing-and-editing-binary-data)) and more, without having to leave your IDE (can put launch commands for the play button, set breakpoints interactively in the code editor, etc). Actually every feature of the current debugger can be expressed in DAP, e.g. [`type SteppingGranularity = 'statement' | 'line' | 'instruction';`](https://microsoft.github.io/debug-adapter-protocol/specification#Types_SteppingGranularity).\r\n\r\n### Additional context\r\n\r\nI mentioned this in a comment somewhere, but it could be good to track it as its own issue.\r\n\r\nI could take a look when the debugger is in a more stable state. It probably involves exposing library bindings so that a headless executable could be built (but who knows, maybe communicating with a subprocess via stdin could be viable). Ideally it could serve over TCP (`vscode.DebugAdapterServer`) or stdio (`vscode.DebugAdapterExecutable`).\r\n\r\nHere's an explanation of how it works: https://microsoft.github.io/debug-adapter-protocol//overview.html\r\nA tutorial implementation: https://github.com/microsoft/vscode-mock-debug\r\nA real implementation: https://github.com/microsoft/vscode-debugadapter-node/blob/main/adapter/src/runDebugAdapter.ts\r\nTruffle's [VSCode extension seems to use DAP](https://github.com/trufflesuite/vscode-ext/blob/5fd3e5454776215a9296bdc3818e9f30116667d9/src/debugAdapter/configuration/debugAdapterDescriptorFactory.ts#L4-L11) with [these capabilities](https://github.com/trufflesuite/vscode-ext/blob/5fd3e5454776215a9296bdc3818e9f30116667d9/src/debugAdapter/debugSession.ts#L80-L89) (I'll try it in Neovim to make sure).\r\n\r\nNot many DAP are implemented in Rust. But:\r\n* [`debug_types`](https://github.com/hirosystems/debug_types) could probably be used to check the DAP implementation.\r\n* [`dap` crate](https://lib.rs/crates/dap) goes a bit further and actually implements some of the boilerplate like parsing/sending Content-Length, serializing from/to BufReader/BufWriter, etc.\r\n* [Here](https://github.com/pileghoff/retread/blob/main/Cargo.toml)'s a project using the above crate. It's a pretty simple setup, they just use a 3-state machine: https://github.com/pileghoff/retread/blob/main/src/app_state.rs . Each command handler is only a few lines.\r\n\r\n### Further investigation\r\nBased on the latest state ([`iFrostizz:franfran/debugger-args`](https://github.com/iFrostizz/foundry/tree/franfran/debugger-args)), it seems that:\r\n* The debugger does not actually run the debuggee, but rather replays a trace. This is not an issue, as only 2/41 methods make use of dynamic execution: SetExecution and SetVariable. The plus side is that this makes `StepBack` supported.\r\n* It looks like the implementation is actually not modular; there is no client-server or frontend/backend distinction, querying is coupled with rendering (also, it is hardcoded TUI, there is no option for stdio). This might make it a bit harder to support alternative interfaces to the debugger.\r\n  * Actually, coupled implementation seems like a lot more work IMO. You have to do all the UI stuff for like browsing the source code yourself, instead of just having headless state transition functions (functional core), which can be driven by a UI (imperative shell).\r\n* [Source mappings](https://docs.soliditylang.org/en/v0.4.24/miscellaneous.html#source-mappings) are not passed to the [`DebuggerArgs`](https://github.com/iFrostizz/foundry/blob/b513de33a604ea0b6a46102d8fa1a4cf8b83aa67/crates/ui/src/debugger.rs#L9-L18). This means breakpoints in source code (DAP `SetBreakpoints`; instruction-level breakpoint is `SetInstructionBreakpoints`) won't work, nor inlay hints / hover of variable values (DAP `Variables`), nor scopes (DAP `Scopes`), nor source-based navigation (DAP `StepIn`, `StepOut`, `StepOver`). Solidity [exports source mappings](https://docs.soliditylang.org/en/v0.4.24/miscellaneous.html#source-mappings), but I'm [not sure about memory mappings](https://github.com/NomicFoundation/solidity-debugging-symbols-pocs) (for `Variables`) (technically you could generate them from ContractSources, but not sure that's the easiest way)\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/5784/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5784/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[

]
