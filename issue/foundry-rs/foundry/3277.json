{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/3277",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3277/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3277/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3277/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/3277",
  "id": 1378467837,
  "node_id": "I_kwDOGBlvNc5SKb_9",
  "number": 3277,
  "title": "Progress on Invariant Tests",
  "user": {
    "login": "nine-december",
    "id": 108370058,
    "node_id": "U_kgDOBnWYig",
    "avatar_url": "https://avatars.githubusercontent.com/u/108370058?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nine-december",
    "html_url": "https://github.com/nine-december",
    "followers_url": "https://api.github.com/users/nine-december/followers",
    "following_url": "https://api.github.com/users/nine-december/following{/other_user}",
    "gists_url": "https://api.github.com/users/nine-december/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nine-december/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nine-december/subscriptions",
    "organizations_url": "https://api.github.com/users/nine-december/orgs",
    "repos_url": "https://api.github.com/users/nine-december/repos",
    "events_url": "https://api.github.com/users/nine-december/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nine-december/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3593644820,
      "node_id": "LA_kwDOGBlvNc7WMqsU",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-feature",
      "name": "T-feature",
      "color": "BFD4F2",
      "default": false,
      "description": "Type: feature"
    },
    {
      "id": 3593644915,
      "node_id": "LA_kwDOGBlvNc7WMqtz",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/Cmd-forge-test",
      "name": "Cmd-forge-test",
      "color": "006B75",
      "default": false,
      "description": "Command: forge test"
    },
    {
      "id": 3703752787,
      "node_id": "LA_kwDOGBlvNc7cwshT",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/C-forge",
      "name": "C-forge",
      "color": "5319E7",
      "default": false,
      "description": "Command: forge"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 5,
  "created_at": "2022-09-19T20:08:01Z",
  "updated_at": "2022-09-29T17:02:51Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "### Component\n\nForge\n\n### Describe the feature you would like\n\nCurrently the invariant testing goes blind while running.\r\n\r\nIt would be nice to have a dynamic progress on-run like Echidna (where it shows a counter of the current runs / total runs).\n\n### Additional context\n\n_No response_",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/3277/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3277/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1252220373",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3277#issuecomment-1252220373",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3277",
    "id": 1252220373,
    "node_id": "IC_kwDOGBlvNc5Ko13V",
    "user": {
      "login": "nine-december",
      "id": 108370058,
      "node_id": "U_kgDOBnWYig",
      "avatar_url": "https://avatars.githubusercontent.com/u/108370058?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nine-december",
      "html_url": "https://github.com/nine-december",
      "followers_url": "https://api.github.com/users/nine-december/followers",
      "following_url": "https://api.github.com/users/nine-december/following{/other_user}",
      "gists_url": "https://api.github.com/users/nine-december/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nine-december/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nine-december/subscriptions",
      "organizations_url": "https://api.github.com/users/nine-december/orgs",
      "repos_url": "https://api.github.com/users/nine-december/repos",
      "events_url": "https://api.github.com/users/nine-december/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nine-december/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-20T11:31:52Z",
    "updated_at": "2022-09-20T11:31:52Z",
    "author_association": "NONE",
    "body": "I am currently testing the invariant testing feature by solving `Damn Vulnerable Defi` using only invariants.\r\n\r\nAnother thing that could be improved is how is the sequence logged. \r\n\r\nFor example, with the Naive-Receiver level **(spoiler alert):**\r\n\r\n> 10 subsequent calls are needed to crack this level in order to drain the receiver. \r\n\r\nTrying to get 10 calls within the same run was pretty impossible (needed to tune the invariant up to 7 ether). When the logs are shown, the whole stack of failed `txs` is shown.\r\n\r\nMaybe it is pretty complicated by it would be great to show only those calls who differentially modify the invariant (thinking of this as a slope of a function a.k.a derivative). Also, that idea could be used as a feedback seed to the invariant engine as another path to check if the invariant could be broken (for example, when a recently performed call approaches the invariant to be broken, try to do it again). This could be a `config` parameter.\r\n\r\n<img width=\"1060\" alt=\"image\" src=\"https://user-images.githubusercontent.com/108370058/191245826-704944d6-662f-48fc-afc4-3d8d946e82ba.png\">\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1252220373/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1252644421",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3277#issuecomment-1252644421",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3277",
    "id": 1252644421,
    "node_id": "IC_kwDOGBlvNc5KqdZF",
    "user": {
      "login": "gakonst",
      "id": 17802178,
      "node_id": "MDQ6VXNlcjE3ODAyMTc4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17802178?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gakonst",
      "html_url": "https://github.com/gakonst",
      "followers_url": "https://api.github.com/users/gakonst/followers",
      "following_url": "https://api.github.com/users/gakonst/following{/other_user}",
      "gists_url": "https://api.github.com/users/gakonst/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gakonst/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gakonst/subscriptions",
      "organizations_url": "https://api.github.com/users/gakonst/orgs",
      "repos_url": "https://api.github.com/users/gakonst/repos",
      "events_url": "https://api.github.com/users/gakonst/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gakonst/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-20T17:02:20Z",
    "updated_at": "2022-09-20T17:02:20Z",
    "author_association": "MEMBER",
    "body": "> Maybe it is pretty complicated by it would be great to show only those calls who differentially modify the invariant (thinking of this as a slope of a function a.k.a derivative). Also, that idea could be used as a feedback seed to the invariant engine as another path to check if the invariant could be broken (for example, when a recently performed call approaches the invariant to be broken, try to do it again). This could be a config parameter.\r\n\r\ncc @mds1 @transmissions11 have we thought about this before?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1252644421/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1256766725",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3277#issuecomment-1256766725",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3277",
    "id": 1256766725,
    "node_id": "IC_kwDOGBlvNc5K6L0F",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-23T22:46:43Z",
    "updated_at": "2022-09-23T22:46:43Z",
    "author_association": "COLLABORATOR",
    "body": "I haven't thought of that idea before in this context. It's interesting, sounds like converting the process of breaking invariants into solving an optimization problem with gradient descent, where the function you're \"optimizing\" is the invariant. My initial guess is that this may not be practical to implement, because (1) invariant expressions are not necessarily mathematical functions / differentiable curves, but boolean expressions, and (2) a single test may look for more than one related invariants, so which do we analyze? However I don't want to dismiss this too quickly, and would love for someone to tell me this is feasible. Because I believe Harvey does covert code into cost functions that it tries to minimize (see figure 1 [here](https://mariachris.github.io/Pubs/FSE-2020-Harvey.pdf)), so maybe this is more doable than I think.\r\n\r\nIn general, Harvey has a couple of nice ideas (all described in that same paper) that we should consider implementing, though I haven't looked at that paper recently so am hazy on the details.\r\n\r\nAnd I do agree progress bars or counters for fuzz/invariant runs would be nice, see also https://github.com/foundry-rs/foundry/issues/585",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1256766725/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1259839465",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3277#issuecomment-1259839465",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3277",
    "id": 1259839465,
    "node_id": "IC_kwDOGBlvNc5LF5_p",
    "user": {
      "login": "nine-december",
      "id": 108370058,
      "node_id": "U_kgDOBnWYig",
      "avatar_url": "https://avatars.githubusercontent.com/u/108370058?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nine-december",
      "html_url": "https://github.com/nine-december",
      "followers_url": "https://api.github.com/users/nine-december/followers",
      "following_url": "https://api.github.com/users/nine-december/following{/other_user}",
      "gists_url": "https://api.github.com/users/nine-december/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nine-december/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nine-december/subscriptions",
      "organizations_url": "https://api.github.com/users/nine-december/orgs",
      "repos_url": "https://api.github.com/users/nine-december/repos",
      "events_url": "https://api.github.com/users/nine-december/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nine-december/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-27T17:39:12Z",
    "updated_at": "2022-09-27T17:39:30Z",
    "author_association": "NONE",
    "body": "Will dig into that paper today so I can brainstorm in here with the same theory.\r\n\r\nI come from a more scientific field (chemical process engineer). It could sound pretty odd and maybe it could be impossible to implement but how compounds are made and the thermodynamics behind the transformation of matter could help as an approach.\r\n\r\nThe feasible and most common reaction within a system is the one that happens through the \"minimum energy path\" (MEP). The way it is modeled is in the vectorial field due to the fact that each variable is modified whenever another one suffers from a change. That's why the math behind the solution of finding the MEP conveys an optimization of a vectorial field using partial derivatives yielding to the best compromise between feasibility in time (compared to the other \"feasible\" times of the same system) and also energy minimization. A quick overview of this could be seen on the [following paper](https://theory.cm.utexas.edu/henkelman/pubs/sheppard08_134106.pdf).\r\n\r\nThe idea of having a vectorial field of solutions where the objectives need to converge could be also applied to the idea we are speaking in order to build a game-changing coverage/corpus  feedback engine.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1259839465/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 1
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1262557263",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3277#issuecomment-1262557263",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3277",
    "id": 1262557263,
    "node_id": "IC_kwDOGBlvNc5LQRhP",
    "user": {
      "login": "nine-december",
      "id": 108370058,
      "node_id": "U_kgDOBnWYig",
      "avatar_url": "https://avatars.githubusercontent.com/u/108370058?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nine-december",
      "html_url": "https://github.com/nine-december",
      "followers_url": "https://api.github.com/users/nine-december/followers",
      "following_url": "https://api.github.com/users/nine-december/following{/other_user}",
      "gists_url": "https://api.github.com/users/nine-december/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nine-december/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nine-december/subscriptions",
      "organizations_url": "https://api.github.com/users/nine-december/orgs",
      "repos_url": "https://api.github.com/users/nine-december/repos",
      "events_url": "https://api.github.com/users/nine-december/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nine-december/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-29T17:02:51Z",
    "updated_at": "2022-09-29T17:02:51Z",
    "author_association": "NONE",
    "body": "Read the paper about **Harvey**, it mixes the idea of a typical grey-boxed fuzzer with the concept of optimization by leveraging from the _cost optimization_. It could be a nice approach IMO that mixes the idea of minimizing the cost (the same way a material system tries to reduce its energy towards a more stable state) with an _energy factor_ to each instruction as a strategy of weighting the alternatives in order to maximize the amount of paths explored minimizing the effort.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1262557263/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
