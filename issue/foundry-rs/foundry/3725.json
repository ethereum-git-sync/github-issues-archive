{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/3725",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3725/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3725/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3725/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/3725",
  "id": 1457771816,
  "node_id": "I_kwDOGBlvNc5W49Uo",
  "number": 3725,
  "title": "Partial matching of custom errors in reverts",
  "user": {
    "login": "PaulRBerg",
    "id": 8782666,
    "node_id": "MDQ6VXNlcjg3ODI2NjY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8782666?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/PaulRBerg",
    "html_url": "https://github.com/PaulRBerg",
    "followers_url": "https://api.github.com/users/PaulRBerg/followers",
    "following_url": "https://api.github.com/users/PaulRBerg/following{/other_user}",
    "gists_url": "https://api.github.com/users/PaulRBerg/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/PaulRBerg/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/PaulRBerg/subscriptions",
    "organizations_url": "https://api.github.com/users/PaulRBerg/orgs",
    "repos_url": "https://api.github.com/users/PaulRBerg/repos",
    "events_url": "https://api.github.com/users/PaulRBerg/events{/privacy}",
    "received_events_url": "https://api.github.com/users/PaulRBerg/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3593644820,
      "node_id": "LA_kwDOGBlvNc7WMqsU",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-feature",
      "name": "T-feature",
      "color": "BFD4F2",
      "default": false,
      "description": "Type: feature"
    },
    {
      "id": 3593644915,
      "node_id": "LA_kwDOGBlvNc7WMqtz",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/Cmd-forge-test",
      "name": "Cmd-forge-test",
      "color": "006B75",
      "default": false,
      "description": "Command: forge test"
    },
    {
      "id": 3703752787,
      "node_id": "LA_kwDOGBlvNc7cwshT",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/C-forge",
      "name": "C-forge",
      "color": "5319E7",
      "default": false,
      "description": "Command: forge"
    },
    {
      "id": 3703752960,
      "node_id": "LA_kwDOGBlvNc7cwskA",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/A-cheatcodes",
      "name": "A-cheatcodes",
      "color": "FBCA04",
      "default": false,
      "description": "Area: cheatcodes"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 8,
  "created_at": "2022-11-21T11:23:24Z",
  "updated_at": "2022-12-19T19:49:23Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "### Component\r\n\r\nForge\r\n\r\n### Describe the feature you would like\r\n\r\nCustom errors can have arguments, and sometimes these arguments are difficult to calculate in a testing environment, and they may be unrelated to the test at hand (e.g. a value computed in the internal function of a third-party contract).\r\n\r\nIt would be nice if we could expect a revert with a partial matching of custom errors, like this:\r\n\r\n```solidity\r\nerror MyError(uint256 arg);\r\n\r\nfunction testFoo() {\r\n    // only checks that revert starts with \"0x30b1b565\", the 4-byte signature of \"MyError(uint256)\"\r\n    vm.expectPartialRevert(MyError.selector);\r\n}\r\n```\r\n\r\nThis may warrant a new VM cheatcode, to ensure backwards compatibility and avoid triggering false positives for people who assume the current `vm.expectRevert` cheatcode to look for an exact ABI match.\r\n\r\nNaming ideas: `vm.expectPartialRevert` or `vm.expectCustomError` or `vm.expectRevertStartsWith`.",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/3725/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3725/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1323366961",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3725#issuecomment-1323366961",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3725",
    "id": 1323366961,
    "node_id": "IC_kwDOGBlvNc5O4Pox",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-22T09:33:07Z",
    "updated_at": "2022-11-22T09:33:07Z",
    "author_association": "COLLABORATOR",
    "body": "Some questions to flesh out the spec here more:\r\n- What would be the behavior if you pass in empty bytes? Presumably everything would match, so I think this cheat should throw in that case.\r\n- What if there is a full match? Should that cause the test to fail since this cheat expects a partial match only?\r\n- Is there a use case for partial matching the end of the revert data, or the middle, or should this only consider the start?\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1323366961/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1323468667",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3725#issuecomment-1323468667",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3725",
    "id": 1323468667,
    "node_id": "IC_kwDOGBlvNc5O4od7",
    "user": {
      "login": "PaulRBerg",
      "id": 8782666,
      "node_id": "MDQ6VXNlcjg3ODI2NjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8782666?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PaulRBerg",
      "html_url": "https://github.com/PaulRBerg",
      "followers_url": "https://api.github.com/users/PaulRBerg/followers",
      "following_url": "https://api.github.com/users/PaulRBerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/PaulRBerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PaulRBerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PaulRBerg/subscriptions",
      "organizations_url": "https://api.github.com/users/PaulRBerg/orgs",
      "repos_url": "https://api.github.com/users/PaulRBerg/repos",
      "events_url": "https://api.github.com/users/PaulRBerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PaulRBerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-22T10:42:09Z",
    "updated_at": "2022-11-22T10:42:09Z",
    "author_association": "CONTRIBUTOR",
    "body": "1. I agree that the cheat should throw if the user provides empty bytes. It's more likely that that is a typo rather an intended value.\r\n2. No I don't think a full match should cause the test to fail. I was thinking about this along the lines of the [`startsWith`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith) function in JavaScript. Even if you pass the full string, that string technically still starts with the full string, so `startsWith` returns true.\r\n3. As per the answer to point 2, I was personally thinking about this as a Forge-enabled flavor of `startsWith`. I need this only for checking the first 4 bytes in a custom error revert. Others can chime in if they think middle or end-matching would be useful for their use cases.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1323468667/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1356832518",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3725#issuecomment-1356832518",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3725",
    "id": 1356832518,
    "node_id": "IC_kwDOGBlvNc5Q358G",
    "user": {
      "login": "nidhhoggr",
      "id": 650443,
      "node_id": "MDQ6VXNlcjY1MDQ0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/650443?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nidhhoggr",
      "html_url": "https://github.com/nidhhoggr",
      "followers_url": "https://api.github.com/users/nidhhoggr/followers",
      "following_url": "https://api.github.com/users/nidhhoggr/following{/other_user}",
      "gists_url": "https://api.github.com/users/nidhhoggr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nidhhoggr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nidhhoggr/subscriptions",
      "organizations_url": "https://api.github.com/users/nidhhoggr/orgs",
      "repos_url": "https://api.github.com/users/nidhhoggr/repos",
      "events_url": "https://api.github.com/users/nidhhoggr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nidhhoggr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-12-18T16:31:09Z",
    "updated_at": "2022-12-18T16:31:27Z",
    "author_association": "NONE",
    "body": "I'm wondering myself how to do this. The following happens when using `vm.expectRevert` for a matching error with an argument provided.\r\n\r\n```solidity\r\n        vm.expectRevert(SamBankmanPlayingCards.MaxTokenAllotment.selector);\r\n        bankmanCardzInstance.mint{value: 0.1 ether}(1);\r\n```\r\n\r\n\r\n[FAIL. Reason: Error != expected error: 0xa12804b00000000000000000000000000000000000000000000000000000000000000002 != 0xa12804b0]\r\n\r\n\r\nSo I must catch the reason and then unpack the arguments. In my case the argument is uint8 and I expect it to be 2.\r\n\r\n```solidity\r\n        try bankmanCardzInstance.mint{value: 0.1 ether}(1) {}\r\n        catch(bytes memory reason) {\r\n            //assert selector equality\r\n            bytes4 expectedSelector = SamBankmanPlayingCards.MaxTokenAllotment.selector;\r\n            bytes4 receivedSelector = bytes4(reason);\r\n            assertEq(expectedSelector, receivedSelector);\r\n            //assert argument equality\r\n            bytes32 parsed; \r\n            assembly {parsed := mload(add(reason, 36))}\r\n            assertEq(parsed, bytes32(uint(2)));\r\n        }\r\n```\r\n\r\nBefore this feature gets added, is there a more intuitive way to do this?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1356832518/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1356836015",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3725#issuecomment-1356836015",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3725",
    "id": 1356836015,
    "node_id": "IC_kwDOGBlvNc5Q36yv",
    "user": {
      "login": "PaulRBerg",
      "id": 8782666,
      "node_id": "MDQ6VXNlcjg3ODI2NjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8782666?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PaulRBerg",
      "html_url": "https://github.com/PaulRBerg",
      "followers_url": "https://api.github.com/users/PaulRBerg/followers",
      "following_url": "https://api.github.com/users/PaulRBerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/PaulRBerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PaulRBerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PaulRBerg/subscriptions",
      "organizations_url": "https://api.github.com/users/PaulRBerg/orgs",
      "repos_url": "https://api.github.com/users/PaulRBerg/repos",
      "events_url": "https://api.github.com/users/PaulRBerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PaulRBerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-12-18T16:56:18Z",
    "updated_at": "2022-12-18T16:56:18Z",
    "author_association": "CONTRIBUTOR",
    "body": "> is there a more intuitive way to do this?\r\n\r\nWhat I did was to refactor my custom errors to not include values computed during the function execution, which are difficult to re-compute in a testing environment. These dynamic values are also not that useful for end users, who should care more about the inputs that triggered that custom errors. Therefore, I changed the dynamic values with the input values.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1356836015/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1356838580",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3725#issuecomment-1356838580",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3725",
    "id": 1356838580,
    "node_id": "IC_kwDOGBlvNc5Q37a0",
    "user": {
      "login": "nidhhoggr",
      "id": 650443,
      "node_id": "MDQ6VXNlcjY1MDQ0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/650443?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nidhhoggr",
      "html_url": "https://github.com/nidhhoggr",
      "followers_url": "https://api.github.com/users/nidhhoggr/followers",
      "following_url": "https://api.github.com/users/nidhhoggr/following{/other_user}",
      "gists_url": "https://api.github.com/users/nidhhoggr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nidhhoggr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nidhhoggr/subscriptions",
      "organizations_url": "https://api.github.com/users/nidhhoggr/orgs",
      "repos_url": "https://api.github.com/users/nidhhoggr/repos",
      "events_url": "https://api.github.com/users/nidhhoggr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nidhhoggr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-12-18T17:08:20Z",
    "updated_at": "2022-12-18T17:08:20Z",
    "author_association": "NONE",
    "body": "@paulrberg I appreciate your explanation, however, in my scenario I don't use the Error arguments for the end user, nor for dynamic values. Instead, I use them in areas of the code that essentially utilize the same error. I want a way to debug which line of code or function the custom error was triggered from. This sort of reflection isn't available in solidity so I use `uint8 _from` as the error argument. This way there are several areas of the code that can use the same error e.g. MaxTokenAllotment without having to create two separate errors to account any specific scenario. With all that being said, my use case spans beyond the scope of the question regarding how to adequately capture custom Error arguments. \r\n\r\nTo provide a method to capture beginsWith as such that it's useful for your scenario, the following is adequate:\r\n\r\n```solidity\r\n            bytes4 expectedSelector = SamBankmanPlayingCards.MaxTokenAllotment.selector;\r\n            bytes4 receivedSelector = bytes4(reason);\r\n            assertEq(expectedSelector, receivedSelector);\r\n```\r\n\r\nHowever, there could be a scenario even if I'd like to assert that the custom error argument is within a generally expected range using comparison operators. e.g. `>`,`<` which would still be practical to test against unpredictable dynamic values. ",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1356838580/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1357173778",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3725#issuecomment-1357173778",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3725",
    "id": 1357173778,
    "node_id": "IC_kwDOGBlvNc5Q5NQS",
    "user": {
      "login": "PaulRBerg",
      "id": 8782666,
      "node_id": "MDQ6VXNlcjg3ODI2NjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8782666?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PaulRBerg",
      "html_url": "https://github.com/PaulRBerg",
      "followers_url": "https://api.github.com/users/PaulRBerg/followers",
      "following_url": "https://api.github.com/users/PaulRBerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/PaulRBerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PaulRBerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PaulRBerg/subscriptions",
      "organizations_url": "https://api.github.com/users/PaulRBerg/orgs",
      "repos_url": "https://api.github.com/users/PaulRBerg/repos",
      "events_url": "https://api.github.com/users/PaulRBerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PaulRBerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-12-19T06:50:01Z",
    "updated_at": "2022-12-19T06:50:29Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks also for explaining your use case, @nidhhoggr.\r\n\r\nInteresting idea with the `receivedSelector`, but I suppose you would need to perform a low-level call to catch the revert reason yourself.\r\n\r\nRegarding your need - are you aware of [`forge debug`](https://book.getfoundry.sh/reference/forge/forge-debug.html?highlight=Debug#forge-debug)?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1357173778/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1358098198",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3725#issuecomment-1358098198",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3725",
    "id": 1358098198,
    "node_id": "IC_kwDOGBlvNc5Q8u8W",
    "user": {
      "login": "nidhhoggr",
      "id": 650443,
      "node_id": "MDQ6VXNlcjY1MDQ0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/650443?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nidhhoggr",
      "html_url": "https://github.com/nidhhoggr",
      "followers_url": "https://api.github.com/users/nidhhoggr/followers",
      "following_url": "https://api.github.com/users/nidhhoggr/following{/other_user}",
      "gists_url": "https://api.github.com/users/nidhhoggr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nidhhoggr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nidhhoggr/subscriptions",
      "organizations_url": "https://api.github.com/users/nidhhoggr/orgs",
      "repos_url": "https://api.github.com/users/nidhhoggr/repos",
      "events_url": "https://api.github.com/users/nidhhoggr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nidhhoggr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-12-19T18:51:29Z",
    "updated_at": "2022-12-19T18:58:54Z",
    "author_association": "NONE",
    "body": "@paulrberg Yes I'm familiar with debug but I need unit testing to check that the error was throw from a specific conditional and/or line in the code. This isn't possibly by checking the error alone because there could be multiple spots in the function that throw the same error. While I could just create another custom error to distinguish the two, if the custom error explains a particular scenario like MaxTokenAllotment then providing a from parameter (instead of creating a different error) solves the issue:\r\nExample Function:\r\nhttps://github.com/nidhhoggr/foundry-error-handling/blob/094e232479dc1897a1a3eeba45187873cc3c8cde/src/ErrorThrowingContract.sol#L26\r\n\r\nExample Testing:\r\nhttps://github.com/nidhhoggr/foundry-error-handling/blob/094e232479dc1897a1a3eeba45187873cc3c8cde/test/ETCTesting.t.sol#L59\r\n\r\nLast, I was just thinking about how the selector get computed, it's from the first four bytes of the function signatures keccack256 hash\r\n```solidity\r\n   /**\r\n     _funcSig example:  \"transferFrom(address,address,uint256)\"\r\n     */\r\n    function getSelector(string calldata _funcSig) external pure returns (bytes4) {\r\n        return bytes4(keccak256(bytes(_funcSig)));\r\n    }\r\n```\r\n\r\nFor this reason I think the method your proposing being name startsWith could be misleading because it might make people think they can derive the same assertion results from functions with similar names. For that reason I would simply use assertExpectedSelector. \r\nhttps://github.com/nidhhoggr/foundry-error-handling/blob/094e232479dc1897a1a3eeba45187873cc3c8cde/test/ETCTesting.t.sol#L16\r\n\r\nNotice the difference in signatures even through the methods names are similar and both startsWith the word transfer:\r\n```\r\n    \"transfer(address,uint256)\"\r\n    0xa9059cbb\r\n    \"transferFrom(address,address,uint256)\"\r\n    0x23b872dd\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1358098198/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1358175892",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3725#issuecomment-1358175892",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3725",
    "id": 1358175892,
    "node_id": "IC_kwDOGBlvNc5Q9B6U",
    "user": {
      "login": "nidhhoggr",
      "id": 650443,
      "node_id": "MDQ6VXNlcjY1MDQ0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/650443?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nidhhoggr",
      "html_url": "https://github.com/nidhhoggr",
      "followers_url": "https://api.github.com/users/nidhhoggr/followers",
      "following_url": "https://api.github.com/users/nidhhoggr/following{/other_user}",
      "gists_url": "https://api.github.com/users/nidhhoggr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nidhhoggr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nidhhoggr/subscriptions",
      "organizations_url": "https://api.github.com/users/nidhhoggr/orgs",
      "repos_url": "https://api.github.com/users/nidhhoggr/repos",
      "events_url": "https://api.github.com/users/nidhhoggr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nidhhoggr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-12-19T19:49:23Z",
    "updated_at": "2022-12-19T19:49:23Z",
    "author_association": "NONE",
    "body": "Last but not least, the following answers my own question on a more \"intuitive\" way to use `expectRevert` for custom errors with parameters without the need for try/catch blocks with error parsing.\r\n\r\n```solidity\r\nerror MaxTokenAllotment(uint8 _from);\r\n```\r\n\r\n#### Where \r\n1) `MaxTokenAllotment` is the expected custom error\r\n2) `uint(2)` is the expected MaxTokenAllotment parameter\r\n\r\n### From\r\n\r\n```solidity\r\nfunction testExpectCustomErrorWithParam() public {\r\n    try contractInstance.mint{value: 0.1 ether}(1) {}\r\n    catch(bytes memory reason) {\r\n        //assert selector equality\r\n        bytes4 expectedSelector = MaxTokenAllotment.selector;\r\n        bytes4 receivedSelector = bytes4(reason);\r\n        assertEq(expectedSelector, receivedSelector);\r\n        //assert argument equality\r\n        bytes32 parsed; \r\n        assembly {parsed := mload(add(reason, 36))}\r\n        assertEq(parsed, bytes32(uint(2)));\r\n    }\r\n}   \r\n```\r\n\r\n### To\r\n```solidity\r\nfunction testExpectCustomErrorWithParam() public {\r\n     vm.expectRevert(abi.encodePacked(MaxTokenAllotment.selector, uint(2)));\r\n     contractInstance.mint{value: 0.1 ether}(1);\r\n}\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1358175892/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
