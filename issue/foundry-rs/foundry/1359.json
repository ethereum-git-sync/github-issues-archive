{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/1359",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1359/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1359/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1359/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/1359",
  "id": 1207517832,
  "node_id": "I_kwDOGBlvNc5H-UKI",
  "number": 1359,
  "title": "Cheatcodes to write to CSV",
  "user": {
    "login": "lucas-manuel",
    "id": 44272939,
    "node_id": "MDQ6VXNlcjQ0MjcyOTM5",
    "avatar_url": "https://avatars.githubusercontent.com/u/44272939?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/lucas-manuel",
    "html_url": "https://github.com/lucas-manuel",
    "followers_url": "https://api.github.com/users/lucas-manuel/followers",
    "following_url": "https://api.github.com/users/lucas-manuel/following{/other_user}",
    "gists_url": "https://api.github.com/users/lucas-manuel/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/lucas-manuel/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/lucas-manuel/subscriptions",
    "organizations_url": "https://api.github.com/users/lucas-manuel/orgs",
    "repos_url": "https://api.github.com/users/lucas-manuel/repos",
    "events_url": "https://api.github.com/users/lucas-manuel/events{/privacy}",
    "received_events_url": "https://api.github.com/users/lucas-manuel/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3593644820,
      "node_id": "LA_kwDOGBlvNc7WMqsU",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-feature",
      "name": "T-feature",
      "color": "BFD4F2",
      "default": false,
      "description": "Type: feature"
    },
    {
      "id": 3593644915,
      "node_id": "LA_kwDOGBlvNc7WMqtz",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/Cmd-forge-test",
      "name": "Cmd-forge-test",
      "color": "006B75",
      "default": false,
      "description": "Command: forge test"
    },
    {
      "id": 3703752787,
      "node_id": "LA_kwDOGBlvNc7cwshT",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/C-forge",
      "name": "C-forge",
      "color": "5319E7",
      "default": false,
      "description": "Command: forge"
    },
    {
      "id": 3703752960,
      "node_id": "LA_kwDOGBlvNc7cwskA",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/A-cheatcodes",
      "name": "A-cheatcodes",
      "color": "FBCA04",
      "default": false,
      "description": "Area: cheatcodes"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 7,
  "created_at": "2022-04-18T22:33:52Z",
  "updated_at": "2022-06-23T00:40:42Z",
  "closed_at": "2022-06-23T00:40:42Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "### Component\n\nForge\n\n### Describe the feature you would like\n\nWhen running mainnet simulations it is often useful to log state to files, specifically CSVs. It would be great to have cheatcodes to do the following actions:\r\n\r\n- Add column with label and multiple values\r\n- Write CSV to path\r\n- Append values to column (potentially)\r\n\r\n```solidity\r\nfor (uint  i; i < 100; i++) {\r\n    inputs.push(i);\r\n    values.push(someFunction(i));\r\n}\r\nvm.csv_add_column(\"someFunctionInput\", inputs);\r\nvm.csv_add_column(\"someFunctionOutput\", values);\r\nvm.write_csv(path);\r\n```\n\n### Additional context\n\n_No response_",
  "closed_by": {
    "login": "mattsse",
    "id": 19890894,
    "node_id": "MDQ6VXNlcjE5ODkwODk0",
    "avatar_url": "https://avatars.githubusercontent.com/u/19890894?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mattsse",
    "html_url": "https://github.com/mattsse",
    "followers_url": "https://api.github.com/users/mattsse/followers",
    "following_url": "https://api.github.com/users/mattsse/following{/other_user}",
    "gists_url": "https://api.github.com/users/mattsse/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mattsse/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mattsse/subscriptions",
    "organizations_url": "https://api.github.com/users/mattsse/orgs",
    "repos_url": "https://api.github.com/users/mattsse/repos",
    "events_url": "https://api.github.com/users/mattsse/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mattsse/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/1359/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1359/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1101822314",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1359#issuecomment-1101822314",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1359",
    "id": 1101822314,
    "node_id": "IC_kwDOGBlvNc5BrHlq",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-18T22:36:22Z",
    "updated_at": "2022-04-18T22:39:18Z",
    "author_association": "MEMBER",
    "body": "Any reason you can't use FFI for this use case? :thinking: \r\n\r\nI'm generally wary that we're going to end up adding a bunch of cheatcodes that are somewhat niche, not sure what the general stance is on this. The primary issue is that the more cheatcodes we add, the higher the maintenance burden, so imo limiting what cheatcodes we add/don't add or trying to add the more \"general\" version of the cheatcode is preferred",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1101822314/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1101826658",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1359#issuecomment-1101826658",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1359",
    "id": 1101826658,
    "node_id": "IC_kwDOGBlvNc5BrIpi",
    "user": {
      "login": "brockelmore",
      "id": 31553173,
      "node_id": "MDQ6VXNlcjMxNTUzMTcz",
      "avatar_url": "https://avatars.githubusercontent.com/u/31553173?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brockelmore",
      "html_url": "https://github.com/brockelmore",
      "followers_url": "https://api.github.com/users/brockelmore/followers",
      "following_url": "https://api.github.com/users/brockelmore/following{/other_user}",
      "gists_url": "https://api.github.com/users/brockelmore/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brockelmore/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brockelmore/subscriptions",
      "organizations_url": "https://api.github.com/users/brockelmore/orgs",
      "repos_url": "https://api.github.com/users/brockelmore/repos",
      "events_url": "https://api.github.com/users/brockelmore/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brockelmore/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-18T22:42:58Z",
    "updated_at": "2022-04-18T22:42:58Z",
    "author_association": "MEMBER",
    "body": "yea i lean towards a csv writer in solidity + a `write_file` cheatcode actually",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1101826658/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1101833454",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1359#issuecomment-1101833454",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1359",
    "id": 1101833454,
    "node_id": "IC_kwDOGBlvNc5BrKTu",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-18T22:54:17Z",
    "updated_at": "2022-04-18T22:54:29Z",
    "author_association": "MEMBER",
    "body": "I guess a `write_file` makes more sense, but I still wonder if this is not covered by the FFI cheatcode or if we can make it be covered by FFI? I can already see someone requesting `vm.write_json` :smile: ",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1101833454/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1101861415",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1359#issuecomment-1101861415",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1359",
    "id": 1101861415,
    "node_id": "IC_kwDOGBlvNc5BrRIn",
    "user": {
      "login": "lucas-manuel",
      "id": 44272939,
      "node_id": "MDQ6VXNlcjQ0MjcyOTM5",
      "avatar_url": "https://avatars.githubusercontent.com/u/44272939?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lucas-manuel",
      "html_url": "https://github.com/lucas-manuel",
      "followers_url": "https://api.github.com/users/lucas-manuel/followers",
      "following_url": "https://api.github.com/users/lucas-manuel/following{/other_user}",
      "gists_url": "https://api.github.com/users/lucas-manuel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lucas-manuel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lucas-manuel/subscriptions",
      "organizations_url": "https://api.github.com/users/lucas-manuel/orgs",
      "repos_url": "https://api.github.com/users/lucas-manuel/repos",
      "events_url": "https://api.github.com/users/lucas-manuel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lucas-manuel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-18T23:47:53Z",
    "updated_at": "2022-04-18T23:53:43Z",
    "author_association": "NONE",
    "body": "I got it what I needed from ffi here:\r\n\r\n```solidity\r\n    function _writeToFile(string memory line, string memory filePath) internal {\r\n        string[] memory inputs = new string[](5);\r\n        inputs[0] = \"scripts/write-to-file.sh\";\r\n        inputs[1] = \"-f\";\r\n        inputs[2] = filePath;\r\n        inputs[3] = \"-i\";\r\n        inputs[4] = line;\r\n\r\n        vm.ffi(inputs);\r\n    }\r\n\r\n    function _writeToFile(string memory key, uint256 value, string memory filePath) internal {\r\n        string memory line = string(abi.encodePacked(key, _convertUintToString(value)));\r\n\r\n        _writeToFile(line, filePath);\r\n    }\r\n```\r\n\r\nwrite-to-file.sh\r\n\r\n```\r\n#!/usr/bin/env bash\r\nset -e\r\n\r\nwhile getopts f:i: flag\r\ndo\r\n    case \"${flag}\" in\r\n        f) file=${OPTARG};;\r\n        i) input=${OPTARG};;\r\n    esac\r\ndone\r\n\r\necho $input >> $file\r\n\r\necho \"0x\"\r\n```\r\n\r\nBut itd be much harder to handle csv columns this way. Was able to get this output:\r\n\r\n```\r\n--------------\r\nMonth 1\r\n--------------\r\nExchange Rate: 25101\r\nTotal Supply-: 598449\r\nTotal Assets-: 1502219\r\n\r\n--------------\r\nMonth 2\r\n--------------\r\nExchange Rate: 25146\r\nTotal Supply-: 598449\r\nTotal Assets-: 1504891\r\n\r\n--------------\r\nMonth 3\r\n--------------\r\nExchange Rate: 25197\r\nTotal Supply-: 598449\r\nTotal Assets-: 1507920\r\n\r\n--------------\r\nMonth 4\r\n--------------\r\nExchange Rate: 25252\r\nTotal Supply-: 598449\r\nTotal Assets-: 1511246\r\n\r\n--------------\r\nMonth 5\r\n--------------\r\nExchange Rate: 25312\r\nTotal Supply-: 598449\r\nTotal Assets-: 1514832\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1101861415/reactions",
      "total_count": 2,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 2,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1101875095",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1359#issuecomment-1101875095",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1359",
    "id": 1101875095,
    "node_id": "IC_kwDOGBlvNc5BrUeX",
    "user": {
      "login": "transmissions11",
      "id": 26209401,
      "node_id": "MDQ6VXNlcjI2MjA5NDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/26209401?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/transmissions11",
      "html_url": "https://github.com/transmissions11",
      "followers_url": "https://api.github.com/users/transmissions11/followers",
      "following_url": "https://api.github.com/users/transmissions11/following{/other_user}",
      "gists_url": "https://api.github.com/users/transmissions11/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/transmissions11/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/transmissions11/subscriptions",
      "organizations_url": "https://api.github.com/users/transmissions11/orgs",
      "repos_url": "https://api.github.com/users/transmissions11/repos",
      "events_url": "https://api.github.com/users/transmissions11/events{/privacy}",
      "received_events_url": "https://api.github.com/users/transmissions11/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-19T00:19:03Z",
    "updated_at": "2022-04-19T00:19:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "somewhat a dupe of https://github.com/foundry-rs/foundry/issues/1022",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1101875095/reactions",
      "total_count": 2,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 2
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1102026462",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1359#issuecomment-1102026462",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1359",
    "id": 1102026462,
    "node_id": "IC_kwDOGBlvNc5Br5be",
    "user": {
      "login": "brockelmore",
      "id": 31553173,
      "node_id": "MDQ6VXNlcjMxNTUzMTcz",
      "avatar_url": "https://avatars.githubusercontent.com/u/31553173?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brockelmore",
      "html_url": "https://github.com/brockelmore",
      "followers_url": "https://api.github.com/users/brockelmore/followers",
      "following_url": "https://api.github.com/users/brockelmore/following{/other_user}",
      "gists_url": "https://api.github.com/users/brockelmore/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brockelmore/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brockelmore/subscriptions",
      "organizations_url": "https://api.github.com/users/brockelmore/orgs",
      "repos_url": "https://api.github.com/users/brockelmore/repos",
      "events_url": "https://api.github.com/users/brockelmore/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brockelmore/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-19T04:49:36Z",
    "updated_at": "2022-04-19T04:49:36Z",
    "author_association": "MEMBER",
    "body": "> I guess a `write_file` makes more sense, but I still wonder if this is not covered by the FFI cheatcode or if we can make it be covered by FFI? I can already see someone requesting `vm.write_json` :smile: \n\nthe plan is to do any formatting you want in solidity and pass it up to rust. ffi is slow & cumbersome for simply writing a file (having to enable it just to write a file is overkill imo)",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1102026462/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1124179478",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1359#issuecomment-1124179478",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1359",
    "id": 1124179478,
    "node_id": "IC_kwDOGBlvNc5DAZ4W",
    "user": {
      "login": "sambacha",
      "id": 32783916,
      "node_id": "MDQ6VXNlcjMyNzgzOTE2",
      "avatar_url": "https://avatars.githubusercontent.com/u/32783916?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sambacha",
      "html_url": "https://github.com/sambacha",
      "followers_url": "https://api.github.com/users/sambacha/followers",
      "following_url": "https://api.github.com/users/sambacha/following{/other_user}",
      "gists_url": "https://api.github.com/users/sambacha/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sambacha/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sambacha/subscriptions",
      "organizations_url": "https://api.github.com/users/sambacha/orgs",
      "repos_url": "https://api.github.com/users/sambacha/repos",
      "events_url": "https://api.github.com/users/sambacha/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sambacha/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-11T18:56:13Z",
    "updated_at": "2022-05-11T18:56:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Any reason you can't use FFI for this use case? :thinking: \n> \n> \n> \n> I'm generally wary that we're going to end up adding a bunch of cheatcodes that are somewhat niche, not sure what the general stance is on this. The primary issue is that the more cheatcodes we add, the higher the maintenance burden, so imo limiting what cheatcodes we add/don't add or trying to add the more \"general\" version of the cheatcode is preferred\n\nThe riches are in the niches ",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1124179478/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
