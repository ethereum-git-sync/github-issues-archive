{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/1232",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1232/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1232/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1232/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/1232",
  "id": 1196921917,
  "node_id": "I_kwDOGBlvNc5HV5Q9",
  "number": 1232,
  "title": "Feature request: preview, batch, and execute Gnosis Safe transactions (ape-safe)",
  "user": {
    "login": "Anish-Agnihotri",
    "id": 4398624,
    "node_id": "MDQ6VXNlcjQzOTg2MjQ=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4398624?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Anish-Agnihotri",
    "html_url": "https://github.com/Anish-Agnihotri",
    "followers_url": "https://api.github.com/users/Anish-Agnihotri/followers",
    "following_url": "https://api.github.com/users/Anish-Agnihotri/following{/other_user}",
    "gists_url": "https://api.github.com/users/Anish-Agnihotri/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Anish-Agnihotri/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Anish-Agnihotri/subscriptions",
    "organizations_url": "https://api.github.com/users/Anish-Agnihotri/orgs",
    "repos_url": "https://api.github.com/users/Anish-Agnihotri/repos",
    "events_url": "https://api.github.com/users/Anish-Agnihotri/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Anish-Agnihotri/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3593644820,
      "node_id": "LA_kwDOGBlvNc7WMqsU",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-feature",
      "name": "T-feature",
      "color": "BFD4F2",
      "default": false,
      "description": "Type: feature"
    },
    {
      "id": 3703752787,
      "node_id": "LA_kwDOGBlvNc7cwshT",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/C-forge",
      "name": "C-forge",
      "color": "5319E7",
      "default": false,
      "description": "Command: forge"
    },
    {
      "id": 3759719580,
      "node_id": "LA_kwDOGBlvNc7gGMSc",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/P-normal",
      "name": "P-normal",
      "color": "D93F0B",
      "default": false,
      "description": "Priority: normal"
    },
    {
      "id": 3777109787,
      "node_id": "LA_kwDOGBlvNc7hIh8b",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/Cmd-forge-create",
      "name": "Cmd-forge-create",
      "color": "006B75",
      "default": false,
      "description": "Command: forge create"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 22,
  "created_at": "2022-04-08T07:10:18Z",
  "updated_at": "2023-09-26T00:00:46Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "### Component\n\nForge\n\n### Describe the feature you would like\n\n**Description:**\r\n\r\nMy favorite tool from the Brownie/Vyper ecosystem is [ape-safe](https://github.com/banteg/ape-safe). It lets you:\r\n\r\n1. Setup some actions (calling various functions, piping data together in Python)\r\n2. Preview the side effects, running those actions via a Brownie mainnet fork\r\n3. Once everything looks good, batch all the actions via [MultiSend](https://help.gnosis-safe.io/en/articles/4680071-transaction-builder) and send as one transaction for signers to approve\r\n\r\nNow that Foundry is adding support for a [local node](https://github.com/gakonst/foundry/pull/1037) and [deploy scripts](https://twitter.com/brockjelmore/status/1511485530554445829?s=20&t=8YW1tvu1RUiyv4f9x93cww), it would be useful to have similar functionality out of the box.\r\n\r\n**Example:**\r\n\r\nI'm not sure what this looks like practically yet, but it might just be an executable Solidity script (transcribing the [ape-safe Python example](https://github.com/banteg/ape-safe)):\r\n\r\n```solidity\r\nfunction script() public {\r\n  Safe gnosis = Safe(0xfeb4acf3df3cdea7399794d0869ef76a6efaff52);\r\n\r\n  ERC20 public dai = ERC20(0x6B175474E89094C44Da98b954EedeAC495271d0F);\r\n  yVault public vault = yVault(0x19D3364A399d251E894aC732651be8B0E4e85001);\r\n\r\n  uint256 amount = dai.balanceOf(address(gnosis));\r\n  dai.approve(vault, amount);\r\n  vault.deposit(amount);\r\n\r\n  // Generate preview transaction\r\n  cheats.preview();\r\n  // Batch transaction\r\n  cheats.batch();\r\n  // Broadcast transaction\r\n  cheats.broadcast(address(gnosis));\r\n}\r\n```\r\n\r\n**Potential use-cases:**\r\n\r\nSome potential applications:\r\n- Automating contract setups or common governance actions\r\n- Using like [Hardhat tasks](https://hardhat.org/guides/create-task.html), see example in [dYdX repo](https://github.com/dydxfoundation/governance-contracts/blob/master/tasks/deployment/safety-module-fix-proposal.ts)\r\n- Using like optimism's [chug-splash](https://github.com/ethereum-optimism/chug-splash) as a mass-deployment system\r\n\r\n\n\n### Additional context\n\n_No response_",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/1232/reactions",
    "total_count": 20,
    "+1": 9,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 9,
    "rocket": 0,
    "eyes": 2
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1232/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1092813208",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1232#issuecomment-1092813208",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1232",
    "id": 1092813208,
    "node_id": "IC_kwDOGBlvNc5BIwGY",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-08T12:33:56Z",
    "updated_at": "2022-04-08T12:33:56Z",
    "author_association": "MEMBER",
    "body": "Can you expand on `cheats.preview`/`cheats.batch`?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1092813208/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1101568767",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1232#issuecomment-1101568767",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1232",
    "id": 1101568767,
    "node_id": "IC_kwDOGBlvNc5BqJr_",
    "user": {
      "login": "gakonst",
      "id": 17802178,
      "node_id": "MDQ6VXNlcjE3ODAyMTc4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17802178?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gakonst",
      "html_url": "https://github.com/gakonst",
      "followers_url": "https://api.github.com/users/gakonst/followers",
      "following_url": "https://api.github.com/users/gakonst/following{/other_user}",
      "gists_url": "https://api.github.com/users/gakonst/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gakonst/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gakonst/subscriptions",
      "organizations_url": "https://api.github.com/users/gakonst/orgs",
      "repos_url": "https://api.github.com/users/gakonst/repos",
      "events_url": "https://api.github.com/users/gakonst/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gakonst/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-18T17:03:23Z",
    "updated_at": "2022-04-18T17:03:23Z",
    "author_association": "MEMBER",
    "body": ">  Can you expand on cheats.preview/cheats.batch?\r\n\r\nI think `cheats.preview()` is unneeded given we have traces?\r\n\r\n`cheats.batch()` would probably convert all transactions into a gnosis safe `execTransaction`? might need a better name\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1101568767/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1102637596",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1232#issuecomment-1102637596",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1232",
    "id": 1102637596,
    "node_id": "IC_kwDOGBlvNc5BuOoc",
    "user": {
      "login": "Anish-Agnihotri",
      "id": 4398624,
      "node_id": "MDQ6VXNlcjQzOTg2MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4398624?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Anish-Agnihotri",
      "html_url": "https://github.com/Anish-Agnihotri",
      "followers_url": "https://api.github.com/users/Anish-Agnihotri/followers",
      "following_url": "https://api.github.com/users/Anish-Agnihotri/following{/other_user}",
      "gists_url": "https://api.github.com/users/Anish-Agnihotri/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Anish-Agnihotri/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Anish-Agnihotri/subscriptions",
      "organizations_url": "https://api.github.com/users/Anish-Agnihotri/orgs",
      "repos_url": "https://api.github.com/users/Anish-Agnihotri/repos",
      "events_url": "https://api.github.com/users/Anish-Agnihotri/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Anish-Agnihotri/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-19T13:14:55Z",
    "updated_at": "2022-04-19T13:15:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks for bump—yes, `cheats.batch()` is just generating a multi-call transaction.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1102637596/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1105665977",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1232#issuecomment-1105665977",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1232",
    "id": 1105665977,
    "node_id": "IC_kwDOGBlvNc5B5x-5",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-21T19:24:18Z",
    "updated_at": "2022-04-21T19:24:18Z",
    "author_association": "MEMBER",
    "body": "Is there a standard for that we can use? @gakonst mentioned Gnosis Safe, but I wonder if `cheats.batch` would be general enough. Alternatively, this *should*(?) be solveable using utility libraries (perhaps we can add it in forge-std) by encoding the transactions into e.g. a Gnosis Safe transaction and broadcasting that",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1105665977/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1260293274",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1232#issuecomment-1260293274",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1232",
    "id": 1260293274,
    "node_id": "IC_kwDOGBlvNc5LHoya",
    "user": {
      "login": "Oighty",
      "id": 90539730,
      "node_id": "MDQ6VXNlcjkwNTM5NzMw",
      "avatar_url": "https://avatars.githubusercontent.com/u/90539730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Oighty",
      "html_url": "https://github.com/Oighty",
      "followers_url": "https://api.github.com/users/Oighty/followers",
      "following_url": "https://api.github.com/users/Oighty/following{/other_user}",
      "gists_url": "https://api.github.com/users/Oighty/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Oighty/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Oighty/subscriptions",
      "organizations_url": "https://api.github.com/users/Oighty/orgs",
      "repos_url": "https://api.github.com/users/Oighty/repos",
      "events_url": "https://api.github.com/users/Oighty/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Oighty/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-28T02:03:07Z",
    "updated_at": "2022-09-28T02:03:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "Is there interest in supporting this feature? I think it's a natural extension to scripting and would help teams avoid manual Gnosis Transaction Builder inputs or relying on another tech stack (e.g. python with ape-safe) for setting up MS transactions. `forge script` currently is good for deployment and setup, but breaks down if you change over the admin address to a MS contract (which you can't send txns from with `vm.broadcast()`).\r\n\r\nAn initial version could be similar to the first iteration of CREATE2, hardcode the [MultiSend contract](https://etherscan.io/address/0x8d29be29923b68abfdd21e541b9374737b49cdad#code) from Gnosis and use their format for encoding transactions. The user would provide their safe address and a API call could be sent to the [Gnosis Transaction Service](https://safe-transaction.gnosis.io/) to initiate the transaction. \r\n\r\nAPI could mirror broadcasting with something like `vm.startBatch()` and `vm.stopBatch()`. The CLI could reuse the `--broadcast` flag and call the script in the same manner as existing ones.\r\n\r\nI looked through the codebase a bit to see where it could naturally fit in, but I don't have a strong grasp of the existing scripting architecture. I am willing to work on this, but am not very experienced with Rust so I would need some pointers.\r\n\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1260293274/reactions",
      "total_count": 3,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 3,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1260312060",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1232#issuecomment-1260312060",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1232",
    "id": 1260312060,
    "node_id": "IC_kwDOGBlvNc5LHtX8",
    "user": {
      "login": "gakonst",
      "id": 17802178,
      "node_id": "MDQ6VXNlcjE3ODAyMTc4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17802178?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gakonst",
      "html_url": "https://github.com/gakonst",
      "followers_url": "https://api.github.com/users/gakonst/followers",
      "following_url": "https://api.github.com/users/gakonst/following{/other_user}",
      "gists_url": "https://api.github.com/users/gakonst/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gakonst/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gakonst/subscriptions",
      "organizations_url": "https://api.github.com/users/gakonst/orgs",
      "repos_url": "https://api.github.com/users/gakonst/repos",
      "events_url": "https://api.github.com/users/gakonst/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gakonst/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-28T02:37:54Z",
    "updated_at": "2022-09-28T02:38:26Z",
    "author_association": "MEMBER",
    "body": "Yep I think that's valuable. Motivation makes sense.\r\n\r\nCan you give a description of how you imagine the API working and then how a list of transactions would get encoded internally into a gnosis safe TX?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1260312060/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1260878029",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1232#issuecomment-1260878029",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1232",
    "id": 1260878029,
    "node_id": "IC_kwDOGBlvNc5LJ3jN",
    "user": {
      "login": "eboadom",
      "id": 22181752,
      "node_id": "MDQ6VXNlcjIyMTgxNzUy",
      "avatar_url": "https://avatars.githubusercontent.com/u/22181752?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/eboadom",
      "html_url": "https://github.com/eboadom",
      "followers_url": "https://api.github.com/users/eboadom/followers",
      "following_url": "https://api.github.com/users/eboadom/following{/other_user}",
      "gists_url": "https://api.github.com/users/eboadom/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/eboadom/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/eboadom/subscriptions",
      "organizations_url": "https://api.github.com/users/eboadom/orgs",
      "repos_url": "https://api.github.com/users/eboadom/repos",
      "events_url": "https://api.github.com/users/eboadom/events{/privacy}",
      "received_events_url": "https://api.github.com/users/eboadom/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-28T13:01:52Z",
    "updated_at": "2022-09-28T13:01:52Z",
    "author_association": "NONE",
    "body": "+1 on this, would really improve the developers' experience of interacting with Safe, without going out of Solidity code, which is a quite typical use case.\r\n\r\nRegarding the API, maybe following the approach of other tx sender types like `--ledger`. So something like `--safe-multisig` and setting `--sender` as the specific Safe instance.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1260878029/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1260942268",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1232#issuecomment-1260942268",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1232",
    "id": 1260942268,
    "node_id": "IC_kwDOGBlvNc5LKHO8",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-28T13:46:56Z",
    "updated_at": "2022-09-28T13:48:28Z",
    "author_association": "COLLABORATOR",
    "body": "Here's a potential UX: First, we add logic to scripting so that it can take the gas estimates and split all broadcasted txs into chunks of 30M (or whatever the gas limit is per-chain). This has two use cases: (1) batching multi-sig txs into a single tx, and (2) batching flashbots txs into a single bundle.\r\n\r\nFor (2), we use that logic when the flashbots RPC (or `--flashbots`?) is passed, and automatically split the script broadcast into as few bundles as possible\r\n\r\nFor (1), if you pass `--sender <address>`, use the RPC to check if that's a known contract wallet (gnosis safe being the main one we should support first, maybe expanding to argent and DSProxy later). If so, bundle the txs into as few txs as possible. Then for each, either:\r\n1. Print the tx calldata so it can be copy/pasted into the UI\r\n2. Not sure if this is doable, but open the UI to the gnosis safe tx page with the multisig loaded and calldata automatically prefilled\r\n3. Use the [Safe tx service](https://safe-transaction.gnosis.io/) @Oighty mentioned above. I'm not familiar with this but it sounds like it might be the best option if it lets you initiate the tx\r\n\r\nFor dry runs, you might not have an RPC provided which means you can't infer that it's a multisig tx that needs bundling, so perhaps there's also a `--multisig <walletType>` to force this instead of relying on inference\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1260942268/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1260976944",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1232#issuecomment-1260976944",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1232",
    "id": 1260976944,
    "node_id": "IC_kwDOGBlvNc5LKPsw",
    "user": {
      "login": "Oighty",
      "id": 90539730,
      "node_id": "MDQ6VXNlcjkwNTM5NzMw",
      "avatar_url": "https://avatars.githubusercontent.com/u/90539730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Oighty",
      "html_url": "https://github.com/Oighty",
      "followers_url": "https://api.github.com/users/Oighty/followers",
      "following_url": "https://api.github.com/users/Oighty/following{/other_user}",
      "gists_url": "https://api.github.com/users/Oighty/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Oighty/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Oighty/subscriptions",
      "organizations_url": "https://api.github.com/users/Oighty/orgs",
      "repos_url": "https://api.github.com/users/Oighty/repos",
      "events_url": "https://api.github.com/users/Oighty/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Oighty/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-28T14:11:56Z",
    "updated_at": "2022-09-28T14:11:56Z",
    "author_association": "CONTRIBUTOR",
    "body": "### API\r\nAn alternative to passing the safe address to `--sender` or another CLI param could be to include it in the `forge-std` API,  e.g. `vm.startBatch(safeAddress)`. My thoughts on the Solidity API were to be able to create different batches in one function with blocks of `vm.startBatch()` and `vm.stopBatch()` bounding them. @mds1 makes a good point about the transaction gas limit which should be checked for each batch.\r\n\r\nA rough example would be:\r\n```\r\nfunction swap(uint256 amountIn) public {\r\n  address safe = vm.envAddress(\"MS_ADDRESS\");\r\n\r\n  // Get amount out for swap\r\n  uint256 minAmountOut = router.getAmountOut(path, amountIn);\r\n\r\n  // Start batch\r\n  vm.startBatch(safe);\r\n\r\n  // Approve the router for the swap token\r\n  token1.approve(router, amountIn);\r\n  \r\n  // Execute swap\r\n  uint256 amountReceived = router.swap(...);\r\n  \r\n  // Stake tokens received in a contract\r\n  token2.approve(staking);\r\n  staking.stake(amountReceived);\r\n\r\n  vm.stopBatch();\r\n}\r\n```\r\n\r\n### Transaction Encoding\r\nThe MultiSend contract expects the transaction batch to be encoded as follows:\r\n```\r\n    /// @dev Sends multiple transactions and reverts all if one fails.\r\n    /// @param transactions Encoded transactions. Each transaction is encoded as a packed bytes of\r\n    ///                     operation as a uint8 with 0 for a call or 1 for a delegatecall (=> 1 byte),\r\n    ///                     to as a address (=> 20 bytes),\r\n    ///                     value as a uint256 (=> 32 bytes),\r\n    ///                     data length as a uint256 (=> 32 bytes),\r\n    ///                     data as bytes.\r\n    ///                     see abi.encodePacked for more information on packed encoding\r\n ```\r\n\r\nGnosis has [implemented](https://github.com/gnosis/ethers-multisend/blob/main/src/encodeMulti.ts) logic to batch transactions in this format in [ethers-multisend](https://github.com/gnosis/ethers-multisend), which should provide a good starting point.\r\n \r\n### Transaction Submission\r\nThe Safe Transaction Service allows Safe owners and their delegates to [initiate transactions](https://docs.gnosis-safe.io/tutorials/tutorial_tx_service_initiate_sign), which will appear in Safe app for signers to execute. In this context, `--broadcast` or another flag could be used to designate whether the batch is sent to the service for execution. \r\n ",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1260976944/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1261229815",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1232#issuecomment-1261229815",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1232",
    "id": 1261229815,
    "node_id": "IC_kwDOGBlvNc5LLNb3",
    "user": {
      "login": "eboadom",
      "id": 22181752,
      "node_id": "MDQ6VXNlcjIyMTgxNzUy",
      "avatar_url": "https://avatars.githubusercontent.com/u/22181752?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/eboadom",
      "html_url": "https://github.com/eboadom",
      "followers_url": "https://api.github.com/users/eboadom/followers",
      "following_url": "https://api.github.com/users/eboadom/following{/other_user}",
      "gists_url": "https://api.github.com/users/eboadom/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/eboadom/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/eboadom/subscriptions",
      "organizations_url": "https://api.github.com/users/eboadom/orgs",
      "repos_url": "https://api.github.com/users/eboadom/repos",
      "events_url": "https://api.github.com/users/eboadom/events{/privacy}",
      "received_events_url": "https://api.github.com/users/eboadom/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-28T17:26:28Z",
    "updated_at": "2022-09-28T17:26:28Z",
    "author_association": "NONE",
    "body": "Something important to have is the possibility of creating the Safe tx with DELEGATE_CALL (1) `operation` type when communicating with the Safe tx Service (params [here](https://docs.gnosis-safe.io/tutorials/tutorial_tx_service_initiate_sign#fields-required-for-a-safe-transaction)). Basically to indicate that the tx, once signed, will be executed by the Safe contract via DELEGATECALL, as an alternative to batch CALL.\r\n\r\nWe use this pattern for clarify-sake of what is executed: doing 1 single tx calling 1 single function in a contract, via DELEGATECALL.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1261229815/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1262432086",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1232#issuecomment-1262432086",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1232",
    "id": 1262432086,
    "node_id": "IC_kwDOGBlvNc5LPy9W",
    "user": {
      "login": "gakonst",
      "id": 17802178,
      "node_id": "MDQ6VXNlcjE3ODAyMTc4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17802178?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gakonst",
      "html_url": "https://github.com/gakonst",
      "followers_url": "https://api.github.com/users/gakonst/followers",
      "following_url": "https://api.github.com/users/gakonst/following{/other_user}",
      "gists_url": "https://api.github.com/users/gakonst/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gakonst/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gakonst/subscriptions",
      "organizations_url": "https://api.github.com/users/gakonst/orgs",
      "repos_url": "https://api.github.com/users/gakonst/repos",
      "events_url": "https://api.github.com/users/gakonst/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gakonst/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-29T15:18:26Z",
    "updated_at": "2022-09-29T15:18:26Z",
    "author_association": "MEMBER",
    "body": "@eboadom what are all the ways that you configure the safe tx beyond the `operation`?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1262432086/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1265616613",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1232#issuecomment-1265616613",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1232",
    "id": 1265616613,
    "node_id": "IC_kwDOGBlvNc5Lb8bl",
    "user": {
      "login": "eboadom",
      "id": 22181752,
      "node_id": "MDQ6VXNlcjIyMTgxNzUy",
      "avatar_url": "https://avatars.githubusercontent.com/u/22181752?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/eboadom",
      "html_url": "https://github.com/eboadom",
      "followers_url": "https://api.github.com/users/eboadom/followers",
      "following_url": "https://api.github.com/users/eboadom/following{/other_user}",
      "gists_url": "https://api.github.com/users/eboadom/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/eboadom/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/eboadom/subscriptions",
      "organizations_url": "https://api.github.com/users/eboadom/orgs",
      "repos_url": "https://api.github.com/users/eboadom/repos",
      "events_url": "https://api.github.com/users/eboadom/events{/privacy}",
      "received_events_url": "https://api.github.com/users/eboadom/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-10-03T15:11:58Z",
    "updated_at": "2022-10-03T15:11:58Z",
    "author_association": "NONE",
    "body": "Currently, we are not doing this programmatically, basically because we can achieve something similar with a \"push pattern\" of permissions to a smart contract, instead of DELEGATECALL.\r\nAnd the reason for this is to not really have many dependencies outside of the Solidity setup (Foundry).\r\nSo in terms of which params to send to the API, I think pretty default in our case, just the `operation`",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1265616613/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1295296016",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1232#issuecomment-1295296016",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1232",
    "id": 1295296016,
    "node_id": "IC_kwDOGBlvNc5NNKYQ",
    "user": {
      "login": "Oighty",
      "id": 90539730,
      "node_id": "MDQ6VXNlcjkwNTM5NzMw",
      "avatar_url": "https://avatars.githubusercontent.com/u/90539730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Oighty",
      "html_url": "https://github.com/Oighty",
      "followers_url": "https://api.github.com/users/Oighty/followers",
      "following_url": "https://api.github.com/users/Oighty/following{/other_user}",
      "gists_url": "https://api.github.com/users/Oighty/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Oighty/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Oighty/subscriptions",
      "organizations_url": "https://api.github.com/users/Oighty/orgs",
      "repos_url": "https://api.github.com/users/Oighty/repos",
      "events_url": "https://api.github.com/users/Oighty/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Oighty/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-10-28T17:56:42Z",
    "updated_at": "2022-10-28T19:49:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "I've been thinking about a more minimalist way to implement this. The current Solidity API with `vm.startBroadcast(address)` can support these features if some additional options are added to the CLI.\r\n\r\nTaking a step back, I believe there are two separate features here.\r\n\r\n1. Ability to batch broadcasted transactions into a single MultiSend transaction (likely useful outside of Safe txns - users could send multiple txns at once instead of waiting on several in a long script).\r\n2. Ability to submit transactions to an offline service instead of broadcasting to the network (e.g. Gnosis Transaction Service).\r\n\r\nIf you do both of those, then you could batch broadcasted transactions and submit to the the service.\r\n\r\nFor 1, a CLI flag `--batch` could be added that encodes the `VecDeque<TypedTransaction>` of broadcastable transactions into a single MultiSend transaction per the required format above. One place to insert this logic could be `cmd/forge/script/broadcast.rs::ScriptArgs::handle_broadcastable_transactions()`. These have the benefit of behaving like single transactions vs. RPC batch transactions.\r\n\r\nIn regards to @eboadom's comments on the Operation type (CALL vs. DELEGATECALL), ape-safe assumes all the batched transactions are CALLs and then makes the single txn from the Safe contract to the MultiSend contract a DELEGATECALL (https://github.com/banteg/ape-safe/blob/66ab8fefbb0edd4a892e18b26a92fedc4f65ed84/ape_safe.py#L117). If more nuanced control is needed, a cheatcode could be added to make individual batched calls into delegate calls (e.g. `vm.delegatecall()`).\r\n\r\nFor 2, I'm less sure of a good UX. One option could be to update the `--broadcast` flag to a different variable type and condition how the transaction is sent based on the provided parameter, e.g. `--broadcast safe_transaction`. A default value could be used to keep the existing behavior the same (submitting the transactions to the provided blockchain network).\r\n\r\nRegardless of the CLI flag used, a new function in `broadcast.rs` could send the transaction to a default or provided endpoint for the safe transaction service. Additional branching logic at the bottom of `handle_broadcastable_transactions` can handle whether the txns are broadcast to the network or another service.\r\n\r\nLooking for feedback on this framing and implementation approach.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1295296016/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1295528712",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1232#issuecomment-1295528712",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1232",
    "id": 1295528712,
    "node_id": "IC_kwDOGBlvNc5NODMI",
    "user": {
      "login": "gakonst",
      "id": 17802178,
      "node_id": "MDQ6VXNlcjE3ODAyMTc4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17802178?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gakonst",
      "html_url": "https://github.com/gakonst",
      "followers_url": "https://api.github.com/users/gakonst/followers",
      "following_url": "https://api.github.com/users/gakonst/following{/other_user}",
      "gists_url": "https://api.github.com/users/gakonst/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gakonst/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gakonst/subscriptions",
      "organizations_url": "https://api.github.com/users/gakonst/orgs",
      "repos_url": "https://api.github.com/users/gakonst/repos",
      "events_url": "https://api.github.com/users/gakonst/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gakonst/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-10-28T22:15:16Z",
    "updated_at": "2022-10-28T22:15:16Z",
    "author_association": "MEMBER",
    "body": "I see your point. Having a \"mode\" for `broadcast` makes sense, as sometimes I may want to execute the script from a Safe and sometimes from an EOA.\r\n\r\nSo this might be simpler than we thought:\r\n1. introduce --broadcast <mode>\r\n2.  if <mode = safe> is passed, then do surgery on the Vec<TypedTRansaction> and convert to a single safe tx",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1295528712/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1330881437",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1232#issuecomment-1330881437",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1232",
    "id": 1330881437,
    "node_id": "IC_kwDOGBlvNc5PU6Od",
    "user": {
      "login": "prestwich",
      "id": 10149425,
      "node_id": "MDQ6VXNlcjEwMTQ5NDI1",
      "avatar_url": "https://avatars.githubusercontent.com/u/10149425?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/prestwich",
      "html_url": "https://github.com/prestwich",
      "followers_url": "https://api.github.com/users/prestwich/followers",
      "following_url": "https://api.github.com/users/prestwich/following{/other_user}",
      "gists_url": "https://api.github.com/users/prestwich/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/prestwich/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/prestwich/subscriptions",
      "organizations_url": "https://api.github.com/users/prestwich/orgs",
      "repos_url": "https://api.github.com/users/prestwich/repos",
      "events_url": "https://api.github.com/users/prestwich/events{/privacy}",
      "received_events_url": "https://api.github.com/users/prestwich/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-29T16:06:02Z",
    "updated_at": "2022-11-29T16:06:02Z",
    "author_association": "CONTRIBUTOR",
    "body": "> convert to a single safe tx\r\n\r\nconverting to a single safe TX is likely undesirable. This is a power user feature, and we should have a relatively powerful interface to it.\r\n\r\nWe want to switch back and forth within the context of a script. E.g. broadcast all unpermissioned actions, and queue any permissioned actions for execution in a later batch. \r\n\r\nWe also don't want to assume that only 1 batch will be produced in the script, so we need a batch identifier.\r\n\r\nthe right api is probably more like:\r\n\r\n- `vm.sendViaSafe(address safe)` - decorator for submitting a single txn\r\n- `vm.newSafe(address safe) returns (uint identifier)` - should check that the address is a safe, we have a signer for an owner of that safe\r\n- `vm.inSafe(identifier)` decorator above a transaction\r\n- `vm.startSafe(identifer)` for a region of code\r\n- `vm.stopSafe(identifier)` \r\n\r\nScripts that produce safe batches should sign and submit to the API, and print a link to the relevant safe UI after execution\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1330881437/reactions",
      "total_count": 2,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 2,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1330896774",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1232#issuecomment-1330896774",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1232",
    "id": 1330896774,
    "node_id": "IC_kwDOGBlvNc5PU9-G",
    "user": {
      "login": "gakonst",
      "id": 17802178,
      "node_id": "MDQ6VXNlcjE3ODAyMTc4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17802178?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gakonst",
      "html_url": "https://github.com/gakonst",
      "followers_url": "https://api.github.com/users/gakonst/followers",
      "following_url": "https://api.github.com/users/gakonst/following{/other_user}",
      "gists_url": "https://api.github.com/users/gakonst/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gakonst/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gakonst/subscriptions",
      "organizations_url": "https://api.github.com/users/gakonst/orgs",
      "repos_url": "https://api.github.com/users/gakonst/repos",
      "events_url": "https://api.github.com/users/gakonst/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gakonst/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-29T16:15:31Z",
    "updated_at": "2022-11-29T16:15:56Z",
    "author_association": "MEMBER",
    "body": "This might sound super scary, but it may be worth rewriting the script feature in the coming months (cc @joshieDo FYI/Not a Request) if we're thinking about how to support use cases like that. Need to noodle on it. Might be a nice X-mas refactoring project for me...",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1330896774/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1350737530",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1232#issuecomment-1350737530",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1232",
    "id": 1350737530,
    "node_id": "IC_kwDOGBlvNc5Qgp56",
    "user": {
      "login": "adhusson",
      "id": 2977,
      "node_id": "MDQ6VXNlcjI5Nzc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2977?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adhusson",
      "html_url": "https://github.com/adhusson",
      "followers_url": "https://api.github.com/users/adhusson/followers",
      "following_url": "https://api.github.com/users/adhusson/following{/other_user}",
      "gists_url": "https://api.github.com/users/adhusson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adhusson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adhusson/subscriptions",
      "organizations_url": "https://api.github.com/users/adhusson/orgs",
      "repos_url": "https://api.github.com/users/adhusson/repos",
      "events_url": "https://api.github.com/users/adhusson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adhusson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-12-14T09:40:29Z",
    "updated_at": "2022-12-14T09:40:29Z",
    "author_association": "CONTRIBUTOR",
    "body": "@prestwich If non-permissioned and permissioned actions are interleaved during script execution, but actual execution is not interleaved and happens a completely different times, it will be impossible to test the script. That seems like a source of hard to understand errors.\r\n\r\nAt least in my case, the following would be enough and I'm guessing quicker to be ready for use:\r\n* Add a `--contract-sender` CLI option. \r\n  * If set, the script&simulation let broadcasts originate from a contract.\r\n  * Also if set, the `--broadcast` flag submits a tx package to the `--sender` safe directly.\r\n\r\nDelegatecalls can be manually initiated from the script.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1350737530/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1352220065",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1232#issuecomment-1352220065",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1232",
    "id": 1352220065,
    "node_id": "IC_kwDOGBlvNc5QmT2h",
    "user": {
      "login": "prestwich",
      "id": 10149425,
      "node_id": "MDQ6VXNlcjEwMTQ5NDI1",
      "avatar_url": "https://avatars.githubusercontent.com/u/10149425?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/prestwich",
      "html_url": "https://github.com/prestwich",
      "followers_url": "https://api.github.com/users/prestwich/followers",
      "following_url": "https://api.github.com/users/prestwich/following{/other_user}",
      "gists_url": "https://api.github.com/users/prestwich/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/prestwich/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/prestwich/subscriptions",
      "organizations_url": "https://api.github.com/users/prestwich/orgs",
      "repos_url": "https://api.github.com/users/prestwich/repos",
      "events_url": "https://api.github.com/users/prestwich/events{/privacy}",
      "received_events_url": "https://api.github.com/users/prestwich/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-12-14T21:20:30Z",
    "updated_at": "2022-12-14T21:20:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "> If non-permissioned and permissioned actions are interleaved during script execution, but actual execution is not interleaved and happens a completely different times, it will be impossible to test the script.\r\n\r\nThis really depends on what is being done, and users sophisticated enough to design a system that does that should be allowed to manage their own rough edges. It's not an average use case, so we should allow it but without guard rails\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1352220065/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1577434823",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1232#issuecomment-1577434823",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1232",
    "id": 1577434823,
    "node_id": "IC_kwDOGBlvNc5eBb7H",
    "user": {
      "login": "KholdStare",
      "id": 836110,
      "node_id": "MDQ6VXNlcjgzNjExMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/836110?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/KholdStare",
      "html_url": "https://github.com/KholdStare",
      "followers_url": "https://api.github.com/users/KholdStare/followers",
      "following_url": "https://api.github.com/users/KholdStare/following{/other_user}",
      "gists_url": "https://api.github.com/users/KholdStare/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/KholdStare/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/KholdStare/subscriptions",
      "organizations_url": "https://api.github.com/users/KholdStare/orgs",
      "repos_url": "https://api.github.com/users/KholdStare/repos",
      "events_url": "https://api.github.com/users/KholdStare/events{/privacy}",
      "received_events_url": "https://api.github.com/users/KholdStare/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-06-05T20:31:53Z",
    "updated_at": "2023-06-05T20:37:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "@Oighty @gakonst Currently going through deployments using Gnosis Safe and stumbled upon this issue. Still trying to figure out the best way to glue everything together, and where to jump from forge scripts into typescript and the Gnosis Safe Transactions API.\r\n\r\nAnything new since this thread has been updated? I see https://github.com/foundry-rs/foundry/pull/4878 was added, but looks like it requires building the typed data manually in scripts as opposed to just broadcasting? Let me know if I am misunderstanding.\r\n\r\nAnother observation regarding the above APIs. If it will be possible to have multiple batches I suggest having each batch have an `id`, similar to snapshots. So\r\n\r\n```solidity\r\nuint256 batchId = vm.startBatch();\r\n\r\n// do some stuff\r\n\r\nvm.stopBatch(batchId); // sanity check that we are starting/stopping the correct batch\r\n\r\n// customize how batch is sent\r\naddress safe;\r\nuint256 GNOSIS_SAFE; // some constant for the batch \"method\" or \"mode\"\r\nvm.broadcastBatch(batchId, safe, GNOSIS_SAFE);\r\n```\r\n\r\nSome more thoughts:\r\n\r\n- I think having the batch \"method\" be runtime customizable is important - I think having tons of explicit cheats like `sendViaSafe` hardcodes too much and pollutes the namespace. I could see e.g. falling back to a Ledger for certain deployments with the same script, so the method can be switched from GNOSIS_SAFE to something else depending on the chainId or something else.\r\n- Not sure whether this customization should be possible within the script itself (like in the example above), or whether it should be controllable from the commandline. My gut instinct is to have it customizable from the script, because it is more general - I could have several batches, each of them sent through a different method, and it would be hard to expose that through a CLI option.\r\n- There should be a method that is an \"escape hatch\" that just dumps the broadcast in some standard format so it can be adapted by other external tools. So that if `forge` doesn't already have the method available for some new multi-sig standard, it can be extended outside of forge.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1577434823/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1577823467",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1232#issuecomment-1577823467",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1232",
    "id": 1577823467,
    "node_id": "IC_kwDOGBlvNc5eC6zr",
    "user": {
      "login": "Oighty",
      "id": 90539730,
      "node_id": "MDQ6VXNlcjkwNTM5NzMw",
      "avatar_url": "https://avatars.githubusercontent.com/u/90539730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Oighty",
      "html_url": "https://github.com/Oighty",
      "followers_url": "https://api.github.com/users/Oighty/followers",
      "following_url": "https://api.github.com/users/Oighty/following{/other_user}",
      "gists_url": "https://api.github.com/users/Oighty/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Oighty/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Oighty/subscriptions",
      "organizations_url": "https://api.github.com/users/Oighty/orgs",
      "repos_url": "https://api.github.com/users/Oighty/repos",
      "events_url": "https://api.github.com/users/Oighty/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Oighty/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-06-06T03:00:36Z",
    "updated_at": "2023-06-06T03:00:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Anything new since this thread has been updated? I see #4878 was added, but looks like it requires building the typed data manually in scripts as opposed to just broadcasting? Let me know if I am misunderstanding.\r\n\r\nI don't believe a built-in solution is currently being worked on. \r\n\r\n> I think having the batch \"method\" be runtime customizable is important - I think having tons of explicit cheats like sendViaSafe hardcodes too much and pollutes the namespace. I could see e.g. falling back to a Ledger for certain deployments with the same script, so the method can be switched from GNOSIS_SAFE to something else depending on the chainId or something else.\r\n\r\nI generally agree with this, especially in the context of ERC-4337 and future contract wallet designs. I think it might make sense to have the routing of transactions be handled based on wallet config. More specifically, be able to \"send\" transactions to RPCs (e.g. traditional mempool) or alternative destinations (e.g. Safe Transaction Service or AA Alt Mempools). The options here depend on the wallet type. Therefore, it may make sense to add a `Wallet` variation for contract wallets and configure the txn destination as part of the wallet. GnosisSafe + Safe Transaction Service could be one wallet + destination config. A signer would need to be configured for a contract wallet and adds some complexity.\r\n\r\nOnce you have the above, transactions batches could be defined in a script via something like the API you referenced. The type of \"batch\" is dependent on the destination and what it supports. Some chains support sending batches of txns to RPCs. STS supports MultiSend type batches.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1577823467/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1734369626",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1232#issuecomment-1734369626",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1232",
    "id": 1734369626,
    "node_id": "IC_kwDOGBlvNc5nYGFa",
    "user": {
      "login": "junhohong",
      "id": 12927159,
      "node_id": "MDQ6VXNlcjEyOTI3MTU5",
      "avatar_url": "https://avatars.githubusercontent.com/u/12927159?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/junhohong",
      "html_url": "https://github.com/junhohong",
      "followers_url": "https://api.github.com/users/junhohong/followers",
      "following_url": "https://api.github.com/users/junhohong/following{/other_user}",
      "gists_url": "https://api.github.com/users/junhohong/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/junhohong/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/junhohong/subscriptions",
      "organizations_url": "https://api.github.com/users/junhohong/orgs",
      "repos_url": "https://api.github.com/users/junhohong/repos",
      "events_url": "https://api.github.com/users/junhohong/events{/privacy}",
      "received_events_url": "https://api.github.com/users/junhohong/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-09-25T19:51:47Z",
    "updated_at": "2023-09-25T19:51:47Z",
    "author_association": "NONE",
    "body": "Hi guys, just stumbled upon this need and wanted to offer my 2c on how I resolved it in case it is helpful to anyone else running into this use case. \r\n\r\nThe motivation was to generate and test a gnosis safe bundle for an existing multisig on mainnet. We could then submit the bundle using `cast`, or the Gnosis Safe Transaction Builder UI. For simulation, it required manipulation of the `threshold` and `owners` storage slots forcefully set threshold to 1 and set a known address as an owner. The following snippet achieves the bundle generation and simulation entirely in Foundry tests: \r\n\r\n`Gnosis.sol` \r\n```\r\npragma solidity =0.8.15;\r\n\r\nimport \"forge-std/Test.sol\";\r\nimport {MULTISIG} from \"src/scripts/Config.sol\";\r\n\r\nstruct GnosisTransaction {\r\n    address to;\r\n    uint256 value;\r\n    bytes data;\r\n}\r\n\r\ninterface IGnosisSafe {\r\n    function getThreshold() external view returns (uint256);\r\n\r\n    function isOwner(address owner) external view returns (bool);\r\n\r\n    function getOwners() external view returns (address[] memory);\r\n\r\n    function execTransaction(\r\n        address to,\r\n        uint256 value,\r\n        bytes memory data,\r\n        uint8 operation,\r\n        uint256 safeTxGas,\r\n        uint256 baseGas,\r\n        uint256 gasPrice,\r\n        address gasToken,\r\n        address refundReceiver,\r\n        bytes memory signatures\r\n    ) external payable returns (bool success);\r\n\r\n    function encodeTransactionData(\r\n        address to,\r\n        uint256 value,\r\n        bytes memory data,\r\n        uint8 operation,\r\n        uint256 safeTxGas,\r\n        uint256 baseGas,\r\n        uint256 gasPrice,\r\n        address gasToken,\r\n        address refundReceiver,\r\n        uint256 _nonce\r\n    ) external view returns (bytes memory);\r\n\r\n    function nonce() external view returns (uint256);\r\n}\r\n\r\ninterface IMultiSendCallOnly {\r\n    /// Each transaction is encoded as a packed bytes of\r\n    /// operation has to be uint8(0) in this version (=> 1 byte),\r\n    /// to as a address (=> 20 bytes),\r\n    /// value as a uint256 (=> 32 bytes),\r\n    /// data length as a uint256 (=> 32 bytes),\r\n    /// data as bytes.\r\n    function multiSend(bytes memory transactions) external payable;\r\n}\r\n\r\ncontract GnosisTest is Test {\r\n    using stdStorage for StdStorage;\r\n    IGnosisSafe safe = IGnosisSafe(MULTISIG);\r\n    IMultiSendCallOnly multiSendCallOnly =\r\n        IMultiSendCallOnly(0x40A2aCCbd92BCA938b02010E17A5b8929b49130D);\r\n\r\n    function enableSimulation() public {\r\n        address newOwner = vm.addr(0xB0B);\r\n        vm.store(MULTISIG, bytes32(uint256(4)), bytes32(uint256(1))); // slot for threshold is 4\r\n        assertEq(safe.getThreshold(), 1);\r\n        address[] memory owners = safe.getOwners();\r\n        bytes32 ownerData = vm.load(\r\n            MULTISIG,\r\n            keccak256(abi.encode(owners[0], 2)) // slot for owners is 2\r\n        );\r\n        // zero out previous owner\r\n        vm.store(MULTISIG, keccak256(abi.encode(owners[0], 2)), bytes32(0));\r\n        // swap in new owner\r\n        vm.store(MULTISIG, keccak256(abi.encode(newOwner, 2)), ownerData);\r\n        assertEq(safe.isOwner(newOwner), true);\r\n    }\r\n\r\n    function getSignature(\r\n        address to,\r\n        uint256 value,\r\n        bytes memory data,\r\n        uint8 operation,\r\n        uint256 safeTxGas,\r\n        uint256 baseGas,\r\n        uint256 gasPrice,\r\n        address gasToken,\r\n        address refundReceiver,\r\n        uint256 nonce\r\n    ) public returns (bytes memory) {\r\n        bytes memory txHashData = safe.encodeTransactionData(\r\n            to,\r\n            value,\r\n            data,\r\n            operation,\r\n            safeTxGas,\r\n            baseGas,\r\n            gasPrice,\r\n            gasToken,\r\n            refundReceiver,\r\n            nonce\r\n        );\r\n\r\n        (uint8 v, bytes32 r, bytes32 s) = vm.sign(0xB0B, keccak256(txHashData));\r\n        bytes memory signature = abi.encodePacked(r, s, v);\r\n        return signature;\r\n    }\r\n\r\n    function executeBatch(GnosisTransaction[] memory batch) public {\r\n        bytes memory data = getBatchExecutionData(batch);\r\n        executeData(address(multiSendCallOnly), 1, data);\r\n    }\r\n\r\n    function getBatchExecutionData(\r\n        GnosisTransaction[] memory batch\r\n    ) public returns (bytes memory) {\r\n        bytes memory transactions = new bytes(0);\r\n        for (uint256 i = 0; i < batch.length; i++) {\r\n            transactions = abi.encodePacked(\r\n                transactions,\r\n                uint8(0),\r\n                batch[i].to,\r\n                batch[i].value,\r\n                batch[i].data.length,\r\n                batch[i].data\r\n            );\r\n        }\r\n        // calldata for calling multiSend with transactions\r\n        bytes memory data = abi.encodeWithSelector(\r\n            multiSendCallOnly.multiSend.selector,\r\n            transactions\r\n        );\r\n        return data;\r\n    }\r\n\r\n    function executeData(\r\n        address to,\r\n        uint8 operation,\r\n        bytes memory data\r\n    ) public {\r\n        uint256 value = 0;\r\n        uint256 safeTxGas = 0;\r\n        uint256 baseGas = 0;\r\n        uint256 gasPrice = 0;\r\n        address gasToken = address(0);\r\n        address refundReceiver = address(0);\r\n        uint256 nonce = safe.nonce();\r\n        bytes memory signature = getSignature(\r\n            to,\r\n            value,\r\n            data,\r\n            operation,\r\n            safeTxGas,\r\n            baseGas,\r\n            gasPrice,\r\n            gasToken,\r\n            refundReceiver,\r\n            nonce\r\n        );\r\n        vm.prank(vm.addr(0xB0B));\r\n        safe.execTransaction(\r\n            to,\r\n            value,\r\n            data,\r\n            operation,\r\n            safeTxGas,\r\n            baseGas,\r\n            gasPrice,\r\n            gasToken,\r\n            refundReceiver,\r\n            signature\r\n        );\r\n    }\r\n}\r\n```\r\n\r\n`BatchTest.t.sol`\r\n```\r\npragma solidity =0.8.15;\r\n\r\nimport \"forge-std/Test.sol\";\r\nimport {console} from \"forge-std/console.sol\";\r\nimport {GnosisTest, GnosisTransaction} from \"./Gnosis.sol\";\r\n\r\ncontract BatchTest is GnosisTest {\r\n    function testForkUpgrade() public {\r\n        vm.createSelectFork(vm.envString(\"MAINNET_RPC\"));\r\n        enableSimulation();\r\n        executeBatch(createTestBatch());\r\n    }\r\n\r\n    function createTestBatch() public returns (GnosisTransaction[] memory) {\r\n        GnosisTransaction[] memory batch = new GnosisTransaction[](2);\r\n        address guyToApprove = address(0xdeadbabe);\r\n        address token = 0xF17A3fE536F8F7847F1385ec1bC967b2Ca9caE8D;\r\n\r\n        // Sample transaction 1\r\n        bytes4 approveFunctionSignature = bytes4(\r\n            keccak256(\"approve(address,uint256)\")\r\n        );\r\n        uint256 wad1 = 100;\r\n        bytes memory approveData1 = abi.encodeWithSelector(\r\n            approveFunctionSignature,\r\n            guyToApprove,\r\n            wad1\r\n        );\r\n        batch[0] = GnosisTransaction({to: token, value: 0, data: approveData1});\r\n\r\n        // Sample transaction 2\r\n        uint256 wad2 = 200;\r\n        bytes memory approveData2 = abi.encodeWithSelector(\r\n            approveFunctionSignature,\r\n            guyToApprove,\r\n            wad2\r\n        );\r\n        batch[1] = GnosisTransaction({to: token, value: 0, data: approveData2});\r\n\r\n        return batch;\r\n    }\r\n}\r\n\r\n```\r\n\r\n \r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1734369626/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1734625114",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1232#issuecomment-1734625114",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1232",
    "id": 1734625114,
    "node_id": "IC_kwDOGBlvNc5nZEda",
    "user": {
      "login": "Oighty",
      "id": 90539730,
      "node_id": "MDQ6VXNlcjkwNTM5NzMw",
      "avatar_url": "https://avatars.githubusercontent.com/u/90539730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Oighty",
      "html_url": "https://github.com/Oighty",
      "followers_url": "https://api.github.com/users/Oighty/followers",
      "following_url": "https://api.github.com/users/Oighty/following{/other_user}",
      "gists_url": "https://api.github.com/users/Oighty/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Oighty/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Oighty/subscriptions",
      "organizations_url": "https://api.github.com/users/Oighty/orgs",
      "repos_url": "https://api.github.com/users/Oighty/repos",
      "events_url": "https://api.github.com/users/Oighty/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Oighty/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-09-26T00:00:10Z",
    "updated_at": "2023-09-26T00:00:46Z",
    "author_association": "CONTRIBUTOR",
    "body": "@junhohong yep, that's the approach I ended up pursuing in lieu of native support for this. With #4878 , you can send payloads to be signed from the Solidity script via FFI. @ind-igo and I built out a library to do this called [forge-safe](https://github.com/ind-igo/forge-safe). It also interacts with the safe-transaction-service API via Surl. I have a minor update to push that allows you to get values back from simulated calls and use them in the scripts.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1734625114/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
