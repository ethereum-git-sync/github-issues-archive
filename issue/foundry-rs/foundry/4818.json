{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/4818",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4818/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4818/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4818/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/4818",
  "id": 1681734464,
  "node_id": "I_kwDOGBlvNc5kPTtA",
  "number": 4818,
  "title": "Cheatcode: EIP712 canonical hashing",
  "user": {
    "login": "marktoda",
    "id": 40770586,
    "node_id": "MDQ6VXNlcjQwNzcwNTg2",
    "avatar_url": "https://avatars.githubusercontent.com/u/40770586?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/marktoda",
    "html_url": "https://github.com/marktoda",
    "followers_url": "https://api.github.com/users/marktoda/followers",
    "following_url": "https://api.github.com/users/marktoda/following{/other_user}",
    "gists_url": "https://api.github.com/users/marktoda/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/marktoda/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/marktoda/subscriptions",
    "organizations_url": "https://api.github.com/users/marktoda/orgs",
    "repos_url": "https://api.github.com/users/marktoda/repos",
    "events_url": "https://api.github.com/users/marktoda/events{/privacy}",
    "received_events_url": "https://api.github.com/users/marktoda/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3593644820,
      "node_id": "LA_kwDOGBlvNc7WMqsU",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-feature",
      "name": "T-feature",
      "color": "BFD4F2",
      "default": false,
      "description": "Type: feature"
    },
    {
      "id": 3703752960,
      "node_id": "LA_kwDOGBlvNc7cwskA",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/A-cheatcodes",
      "name": "A-cheatcodes",
      "color": "FBCA04",
      "default": false,
      "description": "Area: cheatcodes"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2023-04-24T17:33:08Z",
  "updated_at": "2023-04-24T18:42:27Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "### Component\n\nForge\n\n### Describe the feature you would like\n\n# Motivation\r\nOne of the hardest things to properly test in Foundry is EIP-712 encoding and hashing. Efficiently encoding EIP-712 in Solidity generally requires manual declaration of string types and abi encoding of values. In testing, there is no way to double-check that this encoding is actually consistent with the EIP-712 spec. Some catches and edge cases of EIP-712 spec are especially easy to accidentally mess up, i.e. alphabetic ordering of sub-types. This is especially important as signed messages become more widely used, i.e. for EIP-4337.\r\n\r\nCurrently the best approach for this afaik is to write typescript tests using ethers' TypedDataEncoder to verify \r\n\r\n# Feature\r\nA cheatcode that creates canonical encodings / typehashes for EIP-712 objects.\r\nIdeal API:\r\n```\r\nvm.hashType(MyStruct) => bytes32 typeHash\r\nvm.hashStruct(MyStruct struct) => bytes32 hash\r\n```\r\n\r\nI'm not sure how easy the introspection will be, but this would be an invaluable feature to cover one of the last un-testable cases in Foundry\n\n### Additional context\n\n_No response_",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/4818/reactions",
    "total_count": 4,
    "+1": 4,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4818/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1520627834",
    "html_url": "https://github.com/foundry-rs/foundry/issues/4818#issuecomment-1520627834",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4818",
    "id": 1520627834,
    "node_id": "IC_kwDOGBlvNc5aovB6",
    "user": {
      "login": "marktoda",
      "id": 40770586,
      "node_id": "MDQ6VXNlcjQwNzcwNTg2",
      "avatar_url": "https://avatars.githubusercontent.com/u/40770586?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/marktoda",
      "html_url": "https://github.com/marktoda",
      "followers_url": "https://api.github.com/users/marktoda/followers",
      "following_url": "https://api.github.com/users/marktoda/following{/other_user}",
      "gists_url": "https://api.github.com/users/marktoda/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/marktoda/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/marktoda/subscriptions",
      "organizations_url": "https://api.github.com/users/marktoda/orgs",
      "repos_url": "https://api.github.com/users/marktoda/repos",
      "events_url": "https://api.github.com/users/marktoda/events{/privacy}",
      "received_events_url": "https://api.github.com/users/marktoda/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-04-24T18:20:16Z",
    "updated_at": "2023-04-24T18:20:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "Example encoding library https://github.com/Uniswap/permit2/blob/main/src/libraries/PermitHash.sol - you could switch around the string typings and tests would still pass. Instead we rely on separate tests from our typescript SDK https://github.com/Uniswap/permit2-sdk/blob/cb84da1accf9f475d11e96fff7e5b255d55dcc14/src/allowanceTransfer.ts#L103 to ensure the solidity-generated hashes match canonical hashes",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1520627834/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1520633984",
    "html_url": "https://github.com/foundry-rs/foundry/issues/4818#issuecomment-1520633984",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4818",
    "id": 1520633984,
    "node_id": "IC_kwDOGBlvNc5aowiA",
    "user": {
      "login": "prestwich",
      "id": 10149425,
      "node_id": "MDQ6VXNlcjEwMTQ5NDI1",
      "avatar_url": "https://avatars.githubusercontent.com/u/10149425?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/prestwich",
      "html_url": "https://github.com/prestwich",
      "followers_url": "https://api.github.com/users/prestwich/followers",
      "following_url": "https://api.github.com/users/prestwich/following{/other_user}",
      "gists_url": "https://api.github.com/users/prestwich/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/prestwich/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/prestwich/subscriptions",
      "organizations_url": "https://api.github.com/users/prestwich/orgs",
      "repos_url": "https://api.github.com/users/prestwich/repos",
      "events_url": "https://api.github.com/users/prestwich/events{/privacy}",
      "received_events_url": "https://api.github.com/users/prestwich/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-04-24T18:25:44Z",
    "updated_at": "2023-04-24T18:25:44Z",
    "author_association": "CONTRIBUTOR",
    "body": ">  vm.hashType(MyStruct) => bytes32 typeHash\r\n\r\nThis cannot compile in Solidity, as there is no polymorphism. Therefore we can't make a function that accepts any struct trpe\r\n\r\nIt's hard for me to see a good way to inject type-level information into foundry ðŸ¤” \r\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1520633984/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1520651226",
    "html_url": "https://github.com/foundry-rs/foundry/issues/4818#issuecomment-1520651226",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4818",
    "id": 1520651226,
    "node_id": "IC_kwDOGBlvNc5ao0va",
    "user": {
      "login": "marktoda",
      "id": 40770586,
      "node_id": "MDQ6VXNlcjQwNzcwNTg2",
      "avatar_url": "https://avatars.githubusercontent.com/u/40770586?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/marktoda",
      "html_url": "https://github.com/marktoda",
      "followers_url": "https://api.github.com/users/marktoda/followers",
      "following_url": "https://api.github.com/users/marktoda/following{/other_user}",
      "gists_url": "https://api.github.com/users/marktoda/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/marktoda/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/marktoda/subscriptions",
      "organizations_url": "https://api.github.com/users/marktoda/orgs",
      "repos_url": "https://api.github.com/users/marktoda/repos",
      "events_url": "https://api.github.com/users/marktoda/events{/privacy}",
      "received_events_url": "https://api.github.com/users/marktoda/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-04-24T18:41:15Z",
    "updated_at": "2023-04-24T18:41:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "yeah i was thinking it would need some kind of introspection.. maybe like `vm.hashType(\"MyStruct\")` and the cheatcode like looks up the struct def in the abi? its a bit wonky though for sure",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1520651226/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1520652534",
    "html_url": "https://github.com/foundry-rs/foundry/issues/4818#issuecomment-1520652534",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4818",
    "id": 1520652534,
    "node_id": "IC_kwDOGBlvNc5ao1D2",
    "user": {
      "login": "prestwich",
      "id": 10149425,
      "node_id": "MDQ6VXNlcjEwMTQ5NDI1",
      "avatar_url": "https://avatars.githubusercontent.com/u/10149425?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/prestwich",
      "html_url": "https://github.com/prestwich",
      "followers_url": "https://api.github.com/users/prestwich/followers",
      "following_url": "https://api.github.com/users/prestwich/following{/other_user}",
      "gists_url": "https://api.github.com/users/prestwich/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/prestwich/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/prestwich/subscriptions",
      "organizations_url": "https://api.github.com/users/prestwich/orgs",
      "repos_url": "https://api.github.com/users/prestwich/repos",
      "events_url": "https://api.github.com/users/prestwich/events{/privacy}",
      "received_events_url": "https://api.github.com/users/prestwich/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-04-24T18:42:27Z",
    "updated_at": "2023-04-24T18:42:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "> yeah i was thinking it would need some kind of introspection.. maybe like vm.hashType(\"MyStruct\") and the cheatcode like looks up the struct def in the abi? its a bit wonky though for sure\r\n\r\nyeah, that could work ðŸ¤”",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1520652534/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
