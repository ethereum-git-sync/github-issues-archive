{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/975",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/975/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/975/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/975/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/975",
  "id": 1173027238,
  "node_id": "I_kwDOGBlvNc5F6vmm",
  "number": 975,
  "title": "Clean up linking pass",
  "user": {
    "login": "onbjerg",
    "id": 8862627,
    "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/onbjerg",
    "html_url": "https://github.com/onbjerg",
    "followers_url": "https://api.github.com/users/onbjerg/followers",
    "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
    "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
    "organizations_url": "https://api.github.com/users/onbjerg/orgs",
    "repos_url": "https://api.github.com/users/onbjerg/repos",
    "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
    "received_events_url": "https://api.github.com/users/onbjerg/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3759720129,
      "node_id": "LA_kwDOGBlvNc7gGMbB",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/D-hard",
      "name": "D-hard",
      "color": "0E8A16",
      "default": false,
      "description": "Difficulty: hard"
    },
    {
      "id": 3777098561,
      "node_id": "LA_kwDOGBlvNc7hIfNB",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/Cmd-forge-build",
      "name": "Cmd-forge-build",
      "color": "006B75",
      "default": false,
      "description": "Command: forge build"
    },
    {
      "id": 3904002822,
      "node_id": "LA_kwDOGBlvNc7oslsG",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-debt",
      "name": "T-debt",
      "color": "BFD4F2",
      "default": false,
      "description": "Type: code debt"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 6,
  "created_at": "2022-03-17T23:37:04Z",
  "updated_at": "2022-06-08T12:14:14Z",
  "closed_at": null,
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "The linking function in `foundry-utils` is very hard to parse ([here](https://github.com/gakonst/foundry/blob/db909f286715ad5e4e045aae99fd6388a4a4b2b3/utils/src/lib.rs#L903-L992) and [here](https://github.com/gakonst/foundry/blob/db909f286715ad5e4e045aae99fd6388a4a4b2b3/utils/src/lib.rs#L89-L150)), we should investigate if there is already better parts in `ethers-solc` or make some",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/975/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/975/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1105888772",
    "html_url": "https://github.com/foundry-rs/foundry/issues/975#issuecomment-1105888772",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/975",
    "id": 1105888772,
    "node_id": "IC_kwDOGBlvNc5B6oYE",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-22T00:40:58Z",
    "updated_at": "2022-04-22T00:46:21Z",
    "author_association": "MEMBER",
    "body": "Here is a draft I've thought about.\r\n\r\nWe introduce two new traits in `ethers-solc`. The first one is `Linkable`:\r\n\r\n```rs\r\n/// A linkable object\r\ntrait Linkable {\r\n    /// Tries to link the bytecode object with the `file` and `library` name.\r\n    /// Replaces all library placeholders with the given address.\r\n    ///\r\n    /// Returns true if the bytecode object is fully linked, false otherwise\r\n    /// This is a noop if the bytecode object is already fully linked.\r\n   fn link(\r\n        &mut self,\r\n        file: impl AsRef<str>,\r\n        library: impl AsRef<str>,\r\n        address: Address,\r\n    ) -> bool;\r\n    /// Links the bytecode object with all provided `(file, lib, addr)`\r\n    fn link_all<I, S, T>(&mut self, libs: I) -> bool\r\n    where\r\n        I: IntoIterator<Item = (S, T, Address)>,\r\n        S: AsRef<str>,\r\n        T: AsRef<str>;\r\n\r\n    /// Same as `Bytecode::link` but with fully qualified name (`file.sol:Math`)\r\n    fn link_fully_qualified(&mut self, name: impl AsRef<str>, addr: Address) -> bool;\r\n    /// Links the bytecode object with all provided `(fully_qualified, addr)`\r\n    fn link_all_fully_qualified<I, S>(&mut self, libs: I) -> bool\r\n    where\r\n        I: IntoIterator<Item = (S, Address)>,\r\n        S: AsRef<str>;\r\n\r\n    /// Whether the object is fully linked or not.\r\n    fn is_linked(&self) -> bool;\r\n    /// Whether the object is fully linked or not.\r\n    fn is_unlinked(&self) -> bool;\r\n}\r\n```\r\n\r\n`Linkable` is implemented for:\r\n\r\n- `Artifact`: A proxy for linking the artifact's bytecodes\r\n- `Bytecode`: Links the bytecode directly\r\n- `CompactBytecode`: Links the bytecode directly\r\n- `BytecodeObject`: Links the bytecode if it's unlinked\r\n- `Contract`: A proxy for linking the contract's bytecodes\r\n- `CompactContract`: A proxy for linking the contract's bytecodes\r\n- `ProjectCompileOutput`: A proxy for linking many artifacts at the same time\r\n- `Artifacts`: A proxy for linking many artifacts at the same time\r\n\r\nThese work the same as what we have now for `Bytecode`.\r\n\r\nNext, we have the `DynamicallyLinkable` trait, and some helper types:\r\n\r\n```rs\r\n/// A map of library bytecode to the address it was deployed to\r\ntype Dependencies = Vec<(Address, Bytecode)>;\r\n\r\n/// A map of artifact IDs to their [Dependencies].\r\ntype LinkerOutput = BTreeMap<ArtifactId, Dependencies>;\r\n\r\n/// A linker function that is provided an [Artifact], a library's [Artifact],\r\n/// the `index` of the library denoting the deployment order\r\n/// for the library in respect to the provided contract.\r\n///\r\n/// The function should return the address at which the library is deployed.\r\ntype LinkerFn = FnMut(\r\n    contract: (&ArtifactId, &Artifact),\r\n    library: (&ArtifactId, &Artifact),\r\n    index: usize\r\n) -> Option<Address>;\r\n\r\ntrait DynamicallyLinkable: Linkable {\r\n    /// Links all contracts using the provided [LinkerFn].\r\n    fn link_all_dynamic<F>(&mut self, f: F) -> LinkerOutput\r\n        where F: LinkerFn;\r\n}\r\n```\r\n\r\nThis trait is implemented *only* for objects that have the required info, i.e.\r\n\r\n- `Artifacts` (possibly?)\r\n- `ProjectCompileOutput`\r\n\r\nCalling `link_all` *should* try to link all contracts and their dependencies, taking nested libraries into account, using local artifacts.\r\n\r\nThe output of the function, `LinkerOutput`, should map every contract by `ArtifactId` to *every dependency* that contract and *its dependencies* would need, in order.\r\n\r\nFor example:\r\n\r\n- Contract\r\n  - Library\r\n    - SecondLibrary\r\n  - ThirdLibrary\r\n- SecondContract\r\n  - Library\r\n    - SecondLibrary\r\n- ThirdContract\r\n  - ThirdLibrary\r\n  - FourthLibrary\r\n    - Library\r\n      - SecondLibrary\r\n\r\nWould call the linker function in this order (approximately)\r\n\r\n- Contract\r\n  - SecondLibrary, 0\r\n  - Library, 1\r\n  - ThirdLibrary, 2\r\n- SecondContract\r\n  - SecondLibrary, 0\r\n  - Library, 1\r\n- ThirdContract \r\n  - ThirdLibrary, 0\r\n  - SecondLibrary, 1\r\n  - Library, 2\r\n  - FourthLibrary, 3\r\n\r\n(*The format is (library, index)*)\r\n\r\nThe ordering matters, since this is the order Forge will deploy them in.\r\n\r\nFor `forge test`, the linking flow could then be something like:\r\n\r\n```rs\r\n/// Precompute all the library addresses\r\nlet mut linker_output = output.link_all_dynamic(|_, (_, library), index| {\r\n    library\r\n        .get_bytecode_bytes()\r\n        .map(|bytes| ethers_core::utils::get_contract_address(sender, index + bytes.len()))\r\n});\r\n\r\n/// All of these should now be linked - if they're not, we get an error\r\nlet contracts: BTreeMap<ArtifactId, CompactContractSome> = output\r\n  .with_stripped_file_prefixes(root)\r\n  .into_artifacts()\r\n  .map(|(id, artifact)| {\r\n    Ok((id, artifact.into_compact_contract().try_into()?))\r\n  })\r\n  .collect()?;\r\n\r\n/// We filter and clone the contracts that we should deploy (tests)\r\n/// `contracts` now represents `known_contracts`\r\nlet tests: BTreeMap<ArtifactId, (CompactContractSome, Dependencies)> = self.contracts.iter()\r\n  .filter(|(_, contract)| {\r\n    contract\r\n      .abi\r\n      .constructor\r\n      .map_or(true, |c| c.inputs.is_empty())\r\n      && abi\r\n        .functions()\r\n        .any(|func| func.name.starts_with(\"test\"))\r\n  })\r\n  .map(|(id, contract)| {\r\n    Ok((id.clone(), (contract.clone(), linker_output.remove(id)?)))\r\n  })\r\n  .collect()?;\r\n```\r\n\r\nIn the runner we would then just deploy the `Dependencies` of each contract in order.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1105888772/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1106329348",
    "html_url": "https://github.com/foundry-rs/foundry/issues/975#issuecomment-1106329348",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/975",
    "id": 1106329348,
    "node_id": "IC_kwDOGBlvNc5B8T8E",
    "user": {
      "login": "mattsse",
      "id": 19890894,
      "node_id": "MDQ6VXNlcjE5ODkwODk0",
      "avatar_url": "https://avatars.githubusercontent.com/u/19890894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mattsse",
      "html_url": "https://github.com/mattsse",
      "followers_url": "https://api.github.com/users/mattsse/followers",
      "following_url": "https://api.github.com/users/mattsse/following{/other_user}",
      "gists_url": "https://api.github.com/users/mattsse/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mattsse/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mattsse/subscriptions",
      "organizations_url": "https://api.github.com/users/mattsse/orgs",
      "repos_url": "https://api.github.com/users/mattsse/repos",
      "events_url": "https://api.github.com/users/mattsse/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mattsse/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-22T10:07:03Z",
    "updated_at": "2022-04-22T10:07:03Z",
    "author_association": "MEMBER",
    "body": "that looks great!\r\nwe definitely need this also for the compiler abstraction anyway",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1106329348/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1126617376",
    "html_url": "https://github.com/foundry-rs/foundry/issues/975#issuecomment-1126617376",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/975",
    "id": 1126617376,
    "node_id": "IC_kwDOGBlvNc5DJtEg",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-14T02:35:21Z",
    "updated_at": "2022-05-14T02:35:21Z",
    "author_association": "MEMBER",
    "body": "@meetmangukiya if you have some time on your hands feel free to take a stab at this (most of it is in ethers-rs) 😊 Let me know what you think",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1126617376/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1126662573",
    "html_url": "https://github.com/foundry-rs/foundry/issues/975#issuecomment-1126662573",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/975",
    "id": 1126662573,
    "node_id": "IC_kwDOGBlvNc5DJ4Gt",
    "user": {
      "login": "meetmangukiya",
      "id": 7620533,
      "node_id": "MDQ6VXNlcjc2MjA1MzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7620533?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meetmangukiya",
      "html_url": "https://github.com/meetmangukiya",
      "followers_url": "https://api.github.com/users/meetmangukiya/followers",
      "following_url": "https://api.github.com/users/meetmangukiya/following{/other_user}",
      "gists_url": "https://api.github.com/users/meetmangukiya/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meetmangukiya/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meetmangukiya/subscriptions",
      "organizations_url": "https://api.github.com/users/meetmangukiya/orgs",
      "repos_url": "https://api.github.com/users/meetmangukiya/repos",
      "events_url": "https://api.github.com/users/meetmangukiya/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meetmangukiya/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-14T07:27:56Z",
    "updated_at": "2022-05-14T07:27:56Z",
    "author_association": "CONTRIBUTOR",
    "body": "yep, I will take a look at this and the other one you mentioned, thanks",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1126662573/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1147364442",
    "html_url": "https://github.com/foundry-rs/foundry/issues/975#issuecomment-1147364442",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/975",
    "id": 1147364442,
    "node_id": "IC_kwDOGBlvNc5EY2Ra",
    "user": {
      "login": "mattsse",
      "id": 19890894,
      "node_id": "MDQ6VXNlcjE5ODkwODk0",
      "avatar_url": "https://avatars.githubusercontent.com/u/19890894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mattsse",
      "html_url": "https://github.com/mattsse",
      "followers_url": "https://api.github.com/users/mattsse/followers",
      "following_url": "https://api.github.com/users/mattsse/following{/other_user}",
      "gists_url": "https://api.github.com/users/mattsse/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mattsse/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mattsse/subscriptions",
      "organizations_url": "https://api.github.com/users/mattsse/orgs",
      "repos_url": "https://api.github.com/users/mattsse/repos",
      "events_url": "https://api.github.com/users/mattsse/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mattsse/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-06T11:50:51Z",
    "updated_at": "2022-06-06T11:50:51Z",
    "author_association": "MEMBER",
    "body": "@joshieDo fyi I had to refactor some related code here #1715 not sure if all if it will be merged with #1715 but the general idea to clean up `link_with...` function is to refactor how the Contract runners are constructed and add more helper types like this\r\n\r\nhttps://github.com/foundry-rs/foundry/pull/1715/files#diff-32873586f91a77d6d9ece12276b6cad64781b711062bf77834623ff6379f251fR7-R24\r\n\r\nand eventually, move the utils link functions into the `MultiContractRunner` which basically represents the whole project and knows all contracts",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1147364442/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1149836457",
    "html_url": "https://github.com/foundry-rs/foundry/issues/975#issuecomment-1149836457",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/975",
    "id": 1149836457,
    "node_id": "IC_kwDOGBlvNc5EiRyp",
    "user": {
      "login": "gakonst",
      "id": 17802178,
      "node_id": "MDQ6VXNlcjE3ODAyMTc4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17802178?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gakonst",
      "html_url": "https://github.com/gakonst",
      "followers_url": "https://api.github.com/users/gakonst/followers",
      "following_url": "https://api.github.com/users/gakonst/following{/other_user}",
      "gists_url": "https://api.github.com/users/gakonst/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gakonst/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gakonst/subscriptions",
      "organizations_url": "https://api.github.com/users/gakonst/orgs",
      "repos_url": "https://api.github.com/users/gakonst/repos",
      "events_url": "https://api.github.com/users/gakonst/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gakonst/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-08T12:14:13Z",
    "updated_at": "2022-06-08T12:14:13Z",
    "author_association": "MEMBER",
    "body": "@mattsse see the approach in https://github.com/gakonst/ethers-rs/pull/1293 for the current candidate refactor for how to do this, based on bjerg's design",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1149836457/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
