{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/1291",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1291/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1291/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1291/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/1291",
  "id": 1203264562,
  "node_id": "I_kwDOGBlvNc5HuFwy",
  "number": 1291,
  "title": "failed assertions in `setUp` do not fail the test, even if the test fails",
  "user": {
    "login": "mds1",
    "id": 17163988,
    "node_id": "MDQ6VXNlcjE3MTYzOTg4",
    "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mds1",
    "html_url": "https://github.com/mds1",
    "followers_url": "https://api.github.com/users/mds1/followers",
    "following_url": "https://api.github.com/users/mds1/following{/other_user}",
    "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
    "organizations_url": "https://api.github.com/users/mds1/orgs",
    "repos_url": "https://api.github.com/users/mds1/repos",
    "events_url": "https://api.github.com/users/mds1/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mds1/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3334394228,
      "node_id": "MDU6TGFiZWwzMzM0Mzk0MjI4",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-bug",
      "name": "T-bug",
      "color": "d73a4a",
      "default": false,
      "description": "Type: bug"
    },
    {
      "id": 3394555740,
      "node_id": "LA_kwDOGBlvNc7KVM9c",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/A-evm",
      "name": "A-evm",
      "color": "FBCA04",
      "default": false,
      "description": "Area: EVM"
    },
    {
      "id": 3593644915,
      "node_id": "LA_kwDOGBlvNc7WMqtz",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/Cmd-forge-test",
      "name": "Cmd-forge-test",
      "color": "006B75",
      "default": false,
      "description": "Command: forge test"
    },
    {
      "id": 3703752787,
      "node_id": "LA_kwDOGBlvNc7cwshT",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/C-forge",
      "name": "C-forge",
      "color": "5319E7",
      "default": false,
      "description": "Command: forge"
    },
    {
      "id": 3759719790,
      "node_id": "LA_kwDOGBlvNc7gGMVu",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/P-low",
      "name": "P-low",
      "color": "D93F0B",
      "default": false,
      "description": "Priority: low"
    },
    {
      "id": 3759720362,
      "node_id": "LA_kwDOGBlvNc7gGMeq",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/D-average",
      "name": "D-average",
      "color": "0E8A16",
      "default": false,
      "description": "Difficulty: average"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": {
    "login": "rkrasiuk",
    "id": 25429261,
    "node_id": "MDQ6VXNlcjI1NDI5MjYx",
    "avatar_url": "https://avatars.githubusercontent.com/u/25429261?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/rkrasiuk",
    "html_url": "https://github.com/rkrasiuk",
    "followers_url": "https://api.github.com/users/rkrasiuk/followers",
    "following_url": "https://api.github.com/users/rkrasiuk/following{/other_user}",
    "gists_url": "https://api.github.com/users/rkrasiuk/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/rkrasiuk/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/rkrasiuk/subscriptions",
    "organizations_url": "https://api.github.com/users/rkrasiuk/orgs",
    "repos_url": "https://api.github.com/users/rkrasiuk/repos",
    "events_url": "https://api.github.com/users/rkrasiuk/events{/privacy}",
    "received_events_url": "https://api.github.com/users/rkrasiuk/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "rkrasiuk",
      "id": 25429261,
      "node_id": "MDQ6VXNlcjI1NDI5MjYx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25429261?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rkrasiuk",
      "html_url": "https://github.com/rkrasiuk",
      "followers_url": "https://api.github.com/users/rkrasiuk/followers",
      "following_url": "https://api.github.com/users/rkrasiuk/following{/other_user}",
      "gists_url": "https://api.github.com/users/rkrasiuk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rkrasiuk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rkrasiuk/subscriptions",
      "organizations_url": "https://api.github.com/users/rkrasiuk/orgs",
      "repos_url": "https://api.github.com/users/rkrasiuk/repos",
      "events_url": "https://api.github.com/users/rkrasiuk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rkrasiuk/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/milestones/1",
    "html_url": "https://github.com/foundry-rs/foundry/milestone/1",
    "labels_url": "https://api.github.com/repos/foundry-rs/foundry/milestones/1/labels",
    "id": 8140456,
    "node_id": "MI_kwDOGBlvNc4AfDao",
    "number": 1,
    "title": "v1.0.0",
    "description": "",
    "creator": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 10,
    "closed_issues": 125,
    "state": "open",
    "created_at": "2022-06-28T08:15:32Z",
    "updated_at": "2023-05-12T14:44:03Z",
    "due_on": null,
    "closed_at": null
  },
  "comments": 13,
  "created_at": "2022-04-13T12:56:27Z",
  "updated_at": "2022-09-18T21:30:36Z",
  "closed_at": "2022-09-18T21:30:36Z",
  "author_association": "COLLABORATOR",
  "active_lock_reason": null,
  "body": "### Component\n\nForge\n\n### Have you ensured that all of these are up to date?\n\n- [X] Foundry\n- [X] Foundryup\n\n### What version of Foundry are you on?\n\nforge 0.2.0 (64087b5 2022-04-13T00:05:01.629608+00:00)\n\n### What command(s) is the bug in?\n\nforge test\n\n### Operating System\n\nmacOS (amd)\n\n### Describe the bug\n\nThe below test should fail for two reasons: First because the assertions in setup fail, and again because the assertion in `testSetUpFailure` fails. However `forge test -m testSetUpFailure` shows this test as passing\r\n\r\n```solidity\r\ncontract SetUpFailureTest is DSTest {\r\n  function setUp() public {\r\n    assertTrue(false);\r\n  }\r\n\r\n  function testSetUpFailure() public {\r\n    assertTrue(false);\r\n  }\r\n}\r\n\r\n```\r\n\r\nBelow is a table of what currently happens for the four combinations you can have above, vs. what I'd expect to happen. You can see the problems are from when assertions in `setUp` fail. \r\n\r\n| setUp             | testSetUpFailure  | Current Test Result | Expected Test Result | Summary |\r\n| ----------------- | ----------------- | ------------------- | -------------------- | ------- |\r\n| `assertTrue(true)`  | `assertTrue(true) ` | PASS                | PASS                 | ✅       |\r\n| `assertTrue(true)`  | `assertTrue(false)` | FAIL                | FAIL                 | ✅       |\r\n| `assertTrue(false)` | `assertTrue(true)`  | PASS                | FAIL                 | ❌       |\r\n| `assertTrue(false)` | `assertTrue(false)` | PASS                | FAIL                 | ❌       |\r\n\r\n\r\n\r\n",
  "closed_by": {
    "login": "gakonst",
    "id": 17802178,
    "node_id": "MDQ6VXNlcjE3ODAyMTc4",
    "avatar_url": "https://avatars.githubusercontent.com/u/17802178?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/gakonst",
    "html_url": "https://github.com/gakonst",
    "followers_url": "https://api.github.com/users/gakonst/followers",
    "following_url": "https://api.github.com/users/gakonst/following{/other_user}",
    "gists_url": "https://api.github.com/users/gakonst/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/gakonst/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gakonst/subscriptions",
    "organizations_url": "https://api.github.com/users/gakonst/orgs",
    "repos_url": "https://api.github.com/users/gakonst/repos",
    "events_url": "https://api.github.com/users/gakonst/events{/privacy}",
    "received_events_url": "https://api.github.com/users/gakonst/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/1291/reactions",
    "total_count": 1,
    "+1": 1,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1291/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1098082490",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1291#issuecomment-1098082490",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1291",
    "id": 1098082490,
    "node_id": "IC_kwDOGBlvNc5Bc2i6",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-13T13:56:20Z",
    "updated_at": "2022-04-13T13:57:12Z",
    "author_association": "MEMBER",
    "body": "I don't think this was the behavior pre-REVM as well. The issue is that we don't call `Executor::is_success` after calling `setUp`.\r\n\r\nI'm not entirely sure it makes sense to have assertions in `setUp`, but I don't have a strong opinion here - I just wonder if the same should be true for constructors as well, then.\r\n\r\nCurrently `Executor::is_success` requires a state changeset, but we don't have one since both deploying (which runs the constructor) and calling `setUp` commit that changeset directly to the underlying database. So, three paths forward:\r\n\r\n- We can refactor `Executor` such that we only really have the `call_raw/call` variants that return state changesets - `call_committing/call_raw_committing` would then just be very thin wrappers around these that also call `db.commit(changeset)`. This cleans up the executor code a bit, and seems like the right path forward. I think I did attempt this at some point, but there was some annoyances in some other parts of the code so I shelved it to get REVM over the line.\r\n- We can create a new `Executor::is_success` variant that calls the db directly.. This seems like double work and I'd not prefer this solution\r\n- We can try to disallow this behavior somehow, but it's non-trivial. I'm not sure why you would perform assertions in `setUp` tho",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1098082490/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1098120140",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1291#issuecomment-1098120140",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1291",
    "id": 1098120140,
    "node_id": "IC_kwDOGBlvNc5Bc_vM",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-13T14:28:10Z",
    "updated_at": "2022-04-13T14:28:10Z",
    "author_association": "COLLABORATOR",
    "body": "> I don't think this was the behavior pre-REVM as well. \r\n\r\nThis very well may be the case, I don't have anything specific that broke post-REVM here.\r\n\r\n> I just wonder if the same should be true for constructors as well, then.\r\n\r\nHow to handle constructors in test contracts is probably something worth discussing in a separate issue, e.g. should it be better supported or should we warn if they are used, etc. Currently when you try using them, if the constructor fails it doesn't behave nicely: you get a rust panic saying deployment reverted with no trace. Only use case for constructors in test contracts afaik is sharing `setUp` logic between foundry and Echidna, since Echidna uses the constructor. Anyway, I'm getting a bit off topic...\r\n\r\n>  I'm not sure why you would perform assertions in `setUp` tho\r\n\r\nThe use case I've had for `setUp` assertions is just that setup can get complex, and you want confidence you did it correctly. If all assertions are at the end of setup, the obvious workaround here is to move those assertions into a `function testPostSetupState()` method. But you may want intermediate assertions too, which this workaround would not support. Though you can use `require` there instead.\r\n\r\nThe ideal solution would be: Having assertions in `setUp` run, and if they fail, all subsequent tests fail with a failure reason indicating the failure was in `setUp`. It sounds like this would be the way the first bullet works IIUC?\r\n\r\nI think a warning or disallowing it would be totally fine, but I agree that seems difficult, given that assertions can have arbitrary function signatures and we won't know they're assertions until they call `fail()`. \r\n\r\nOne other solution is to lazily warn users: if we detect a call with fail's selector in `setUp`, only then do we display a warning that says \"Assertions in setUp do not behave properly, please move them into a unit test or use `require` statements instead\".",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1098120140/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1098125000",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1291#issuecomment-1098125000",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1291",
    "id": 1098125000,
    "node_id": "IC_kwDOGBlvNc5BdA7I",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-13T14:32:12Z",
    "updated_at": "2022-04-13T14:32:12Z",
    "author_association": "MEMBER",
    "body": ">I think a warning or disallowing it would be totally fine, but I agree that seems difficult, given that assertions can have arbitrary function signatures and we won't know they're assertions until they call fail().\r\n>\r\n>One other solution is to lazily warn users: if we detect a call with fail's selector in setUp, only then do we display a warning that says \"Assertions in setUp do not behave properly, please move them into a unit test or use require statements instead\".\r\n\r\nThe primary issue with this is that we can only really know if we implement one of the other solutions I outlined *or* require that tests always run with tracing on, so not super nice.\r\n\r\nI think your use for assertions in `setUp` makes sense now that you outline it - I guess I would recommend that we go the first route. If we go that route, then we can always return a state changeset, regardless of if we committed it to DB or not, and it also (as a bonus) cleans up the code.\r\n\r\nI still think it's worth considering constructors here, since we do support calling cheatcodes in constructors, so at the very least we should consider if a failing assertion in the constructor causes a panic or something :sweat_smile: ",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1098125000/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1098130721",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1291#issuecomment-1098130721",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1291",
    "id": 1098130721,
    "node_id": "IC_kwDOGBlvNc5BdCUh",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-13T14:36:55Z",
    "updated_at": "2022-04-13T14:36:55Z",
    "author_association": "COLLABORATOR",
    "body": "> The primary issue with this is that we can only really know if we implement one of the other solutions I outlined or require that tests always run with tracing on, so not super nice.\r\n\r\nAh, did not realize that, so agreed that does not sound ideal. The first route sounds good to me then, pending the constructor decision below\r\n\r\n> I still think it's worth considering constructors here, since we do support calling cheatcodes in constructors, so at the very least we should consider if a failing assertion in the constructor causes a panic or something 😅\r\n\r\nI'm not sure I follow this suggestion. Are you saying migrate away from `setUp` entirely and use constructors instead? Or call `setUp()` in your constructor then run the assertions in the constructor?\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1098130721/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1098139782",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1291#issuecomment-1098139782",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1291",
    "id": 1098139782,
    "node_id": "IC_kwDOGBlvNc5BdEiG",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-13T14:44:14Z",
    "updated_at": "2022-04-13T14:44:14Z",
    "author_association": "MEMBER",
    "body": "No - I'm suggesting we should probably treat the constructor as we do `setUp` in the sense that if an assertion fails in the constructor, then the test fails, just as with `setUp`. Currently, `setUp` and the constructor work exactly the same (minus the fact that the constructor reverting causes Forge to panic)",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1098139782/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1098149818",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1291#issuecomment-1098149818",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1291",
    "id": 1098149818,
    "node_id": "IC_kwDOGBlvNc5BdG-6",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-13T14:52:11Z",
    "updated_at": "2022-04-13T14:52:11Z",
    "author_association": "COLLABORATOR",
    "body": "I see, yes I agree with that!",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1098149818/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1230561668",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1291#issuecomment-1230561668",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1291",
    "id": 1230561668,
    "node_id": "IC_kwDOGBlvNc5JWOGE",
    "user": {
      "login": "gakonst",
      "id": 17802178,
      "node_id": "MDQ6VXNlcjE3ODAyMTc4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17802178?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gakonst",
      "html_url": "https://github.com/gakonst",
      "followers_url": "https://api.github.com/users/gakonst/followers",
      "following_url": "https://api.github.com/users/gakonst/following{/other_user}",
      "gists_url": "https://api.github.com/users/gakonst/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gakonst/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gakonst/subscriptions",
      "organizations_url": "https://api.github.com/users/gakonst/orgs",
      "repos_url": "https://api.github.com/users/gakonst/repos",
      "events_url": "https://api.github.com/users/gakonst/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gakonst/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-29T16:43:04Z",
    "updated_at": "2022-08-29T16:43:04Z",
    "author_association": "MEMBER",
    "body": "There's also a world where we just #wontfix this and give a 'best practice' of not including assertions in setUp?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1230561668/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1230572663",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1291#issuecomment-1230572663",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1291",
    "id": 1230572663,
    "node_id": "IC_kwDOGBlvNc5JWQx3",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-29T16:52:04Z",
    "updated_at": "2022-08-29T16:52:04Z",
    "author_association": "COLLABORATOR",
    "body": "Yea I'm ok with that, I don't think this is a big issue. \r\n\r\nA bit tangential, but wonder if we should also just get rid of `setUp` for 1.0.0 and just use the constructor directly? Right now both are supported I believe, and afaik the only reason we `setUp` is legacy leftover from dapptools",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1230572663/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1230581523",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1291#issuecomment-1230581523",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1291",
    "id": 1230581523,
    "node_id": "IC_kwDOGBlvNc5JWS8T",
    "user": {
      "login": "gakonst",
      "id": 17802178,
      "node_id": "MDQ6VXNlcjE3ODAyMTc4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17802178?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gakonst",
      "html_url": "https://github.com/gakonst",
      "followers_url": "https://api.github.com/users/gakonst/followers",
      "following_url": "https://api.github.com/users/gakonst/following{/other_user}",
      "gists_url": "https://api.github.com/users/gakonst/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gakonst/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gakonst/subscriptions",
      "organizations_url": "https://api.github.com/users/gakonst/orgs",
      "repos_url": "https://api.github.com/users/gakonst/repos",
      "events_url": "https://api.github.com/users/gakonst/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gakonst/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-29T17:01:05Z",
    "updated_at": "2022-08-29T17:01:05Z",
    "author_association": "MEMBER",
    "body": "> A bit tangential, but wonder if we should also just get rid of setUp for 1.0.0 and just use the constructor directly? Right now both are supported I believe, and afaik the only reason we setUp is legacy leftover from dapptools\r\n\r\nSupportive of this. Probably will simplify our codebase too.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1230581523/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1231571204",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1291#issuecomment-1231571204",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1291",
    "id": 1231571204,
    "node_id": "IC_kwDOGBlvNc5JaEkE",
    "user": {
      "login": "mattsse",
      "id": 19890894,
      "node_id": "MDQ6VXNlcjE5ODkwODk0",
      "avatar_url": "https://avatars.githubusercontent.com/u/19890894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mattsse",
      "html_url": "https://github.com/mattsse",
      "followers_url": "https://api.github.com/users/mattsse/followers",
      "following_url": "https://api.github.com/users/mattsse/following{/other_user}",
      "gists_url": "https://api.github.com/users/mattsse/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mattsse/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mattsse/subscriptions",
      "organizations_url": "https://api.github.com/users/mattsse/orgs",
      "repos_url": "https://api.github.com/users/mattsse/repos",
      "events_url": "https://api.github.com/users/mattsse/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mattsse/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-30T12:02:54Z",
    "updated_at": "2022-08-30T12:02:54Z",
    "author_association": "MEMBER",
    "body": "supportive of this as well!",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1231571204/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1250135891",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1291#issuecomment-1250135891",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1291",
    "id": 1250135891,
    "node_id": "IC_kwDOGBlvNc5Kg49T",
    "user": {
      "login": "rkrasiuk",
      "id": 25429261,
      "node_id": "MDQ6VXNlcjI1NDI5MjYx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25429261?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rkrasiuk",
      "html_url": "https://github.com/rkrasiuk",
      "followers_url": "https://api.github.com/users/rkrasiuk/followers",
      "following_url": "https://api.github.com/users/rkrasiuk/following{/other_user}",
      "gists_url": "https://api.github.com/users/rkrasiuk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rkrasiuk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rkrasiuk/subscriptions",
      "organizations_url": "https://api.github.com/users/rkrasiuk/orgs",
      "repos_url": "https://api.github.com/users/rkrasiuk/repos",
      "events_url": "https://api.github.com/users/rkrasiuk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rkrasiuk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-17T20:28:16Z",
    "updated_at": "2022-09-17T20:28:16Z",
    "author_association": "COLLABORATOR",
    "body": "fyi, picked this up & started refactoring executor today",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1250135891/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1250171172",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1291#issuecomment-1250171172",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1291",
    "id": 1250171172,
    "node_id": "IC_kwDOGBlvNc5KhBkk",
    "user": {
      "login": "gakonst",
      "id": 17802178,
      "node_id": "MDQ6VXNlcjE3ODAyMTc4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17802178?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gakonst",
      "html_url": "https://github.com/gakonst",
      "followers_url": "https://api.github.com/users/gakonst/followers",
      "following_url": "https://api.github.com/users/gakonst/following{/other_user}",
      "gists_url": "https://api.github.com/users/gakonst/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gakonst/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gakonst/subscriptions",
      "organizations_url": "https://api.github.com/users/gakonst/orgs",
      "repos_url": "https://api.github.com/users/gakonst/repos",
      "events_url": "https://api.github.com/users/gakonst/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gakonst/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-18T01:31:30Z",
    "updated_at": "2022-09-18T01:31:37Z",
    "author_association": "MEMBER",
    "body": "Ugh I think we discussed this separately and decided that it'd be too big of a breaking change for no clear benefit? @mds1 @mattsse ",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1250171172/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1250186673",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1291#issuecomment-1250186673",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1291",
    "id": 1250186673,
    "node_id": "IC_kwDOGBlvNc5KhFWx",
    "user": {
      "login": "rkrasiuk",
      "id": 25429261,
      "node_id": "MDQ6VXNlcjI1NDI5MjYx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25429261?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rkrasiuk",
      "html_url": "https://github.com/rkrasiuk",
      "followers_url": "https://api.github.com/users/rkrasiuk/followers",
      "following_url": "https://api.github.com/users/rkrasiuk/following{/other_user}",
      "gists_url": "https://api.github.com/users/rkrasiuk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rkrasiuk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rkrasiuk/subscriptions",
      "organizations_url": "https://api.github.com/users/rkrasiuk/orgs",
      "repos_url": "https://api.github.com/users/rkrasiuk/repos",
      "events_url": "https://api.github.com/users/rkrasiuk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rkrasiuk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-18T04:09:56Z",
    "updated_at": "2022-09-18T04:09:56Z",
    "author_association": "COLLABORATOR",
    "body": "@gakonst to be clear - i've started refactoring & cleaning up the executor according to @onbjerg's original comment about returning changesets in call_raw/call_raw_committing",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1250186673/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
