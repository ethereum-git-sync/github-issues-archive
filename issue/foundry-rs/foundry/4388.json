{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/4388",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4388/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4388/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4388/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/4388",
  "id": 1590683928,
  "node_id": "I_kwDOGBlvNc5ez-kY",
  "number": 4388,
  "title": "Anvil as drop-in replacement for hardhat node",
  "user": {
    "login": "PhilippLgh",
    "id": 4280481,
    "node_id": "MDQ6VXNlcjQyODA0ODE=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4280481?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/PhilippLgh",
    "html_url": "https://github.com/PhilippLgh",
    "followers_url": "https://api.github.com/users/PhilippLgh/followers",
    "following_url": "https://api.github.com/users/PhilippLgh/following{/other_user}",
    "gists_url": "https://api.github.com/users/PhilippLgh/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/PhilippLgh/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/PhilippLgh/subscriptions",
    "organizations_url": "https://api.github.com/users/PhilippLgh/orgs",
    "repos_url": "https://api.github.com/users/PhilippLgh/repos",
    "events_url": "https://api.github.com/users/PhilippLgh/events{/privacy}",
    "received_events_url": "https://api.github.com/users/PhilippLgh/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3334394228,
      "node_id": "MDU6TGFiZWwzMzM0Mzk0MjI4",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-bug",
      "name": "T-bug",
      "color": "d73a4a",
      "default": false,
      "description": "Type: bug"
    },
    {
      "id": 4077188949,
      "node_id": "LA_kwDOGBlvNc7zBPdV",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/C-anvil",
      "name": "C-anvil",
      "color": "5319E7",
      "default": false,
      "description": "Command: anvil"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2023-02-19T13:14:38Z",
  "updated_at": "2023-02-27T13:12:34Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "### Component\r\n\r\nAnvil\r\n\r\n### Have you ensured that all of these are up to date?\r\n\r\n- [X] Foundry\r\n- [X] Foundryup\r\n\r\n### What version of Foundry are you on?\r\n\r\nforge 0.2.0 (e2fa2b5 2023-02-19T00:05:02.282096Z)\r\n\r\n### What command(s) is the bug in?\r\n\r\n_No response_\r\n\r\n### Operating System\r\n\r\nNone\r\n\r\n### Describe the bug\r\n\r\nWhen using anvil with hardhat/ethers.js it seems like there are a few incompatibility issues that I could report here while testing it.\r\nI'm not sure if it makes sense to group issues here because I just got started and found a few already. Let me know if it is preferred to have them as separate issues.\r\n\r\nContract function used for testing\r\n```solidity\r\n  struct Token {\r\n    uint tokenId;\r\n  }\r\n\r\n  function impossibleMethod(uint limit) public view returns(Token[] memory ret) {\r\n    ret = new Token[](limit);\r\n    for (uint256 index = 0; index < limit; index++) {\r\n      ret[index] = Token(index);\r\n    }\r\n    return ret;\r\n  }\r\n```\r\n\r\n**1.) Default `gasLimit` seems to be different:**\r\nThe above function when called with 20k iterations fails in anvil and succeeds in hardhat\r\n\r\n**2.) handling of `gasLimit` for `eth_estimateGas` and `eth_call`**\r\n\r\n```typescript\r\n  const result = await contract.impossibleMethod(cycles, {\r\n    // The gas parameter of eth_call and eth_estimateGas is limited to 500_000_000 Gwei for EVM elastic nodes.\r\n    // gas limit on call should get ignored though\r\n    // gasLimit: 500_000_000\r\n  })\r\n```\r\nsending `gasLimit` on a read (especially larger than block limit) is ignored by hardhat but failing in anvil: \r\n\r\n`error: { code: -32603, message: 'EVM error CallerGasLimitMoreThenBlock' }`\r\n(Just noticed it seems there is also a typo: \"CallerGasLimitMoreThanBlock\")\r\n\r\nI know that Infura supports up to 10x block gas on reads so maybe the default setting should not be capped like this?\r\n\r\n**3.) Transaction failing when not enough gas provided**\r\n\r\na) First, the logs are not helpful when the above read transaction runs out of gas:\r\n<img width=\"546\" alt=\"image\" src=\"https://user-images.githubusercontent.com/4280481/219947962-0a0e224f-5806-4148-a32b-8edc6d662fff.png\">\r\n\r\nIt would be great (and maybe is already possible) to also log the errors - now it is just displayed as \"pending\".\r\n\r\nb) Hardhat/Ethers fails with generic `ProviderError: HttpProviderError` \r\nThere is no additional information displayed, making it very hard to understand what happened.\r\n\r\nAfter digging a bit it seems that ethers v5 handles errors with string matching\r\n```typescript\r\n    if (errorGas.indexOf(method) >= 0 && message.match(/gas required exceeds allowance|always failing transaction|execution reverted|revert/)) {\r\n        logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\r\n            error, method, transaction\r\n        });\r\n    }\r\n```\r\nhttps://github.com/ethers-io/ethers.js/blob/v5/packages/providers/src.ts/json-rpc-provider.ts#L124\r\n\r\nI assume looking at other matched strings in the file will result in more conflicts.\r\n\r\nChanging the error message in hardhat from\r\n```typescript\r\n    const jsonRpcResponse = await this._fetchJsonRpcResponse(jsonRpcRequest);\r\n    // console.log(\"===> response\", args, jsonRpcResponse);\r\n    if (isErrorResponse(jsonRpcResponse)) {\r\n      // anvil: 'Out of gas: required gas exceeds allowance: 30000000'\r\n      error.message = jsonRpcResponse.error.message;\r\n      // what ethers string matches:\r\n      error.message = `gas required exceeds allowance: 30000000`;\r\n      error.code = jsonRpcResponse.error.code;\r\n      error.data = jsonRpcResponse.error.data;\r\n      // eslint-disable-next-line @nomiclabs/hardhat-internal-rules/only-hardhat-error\r\n      throw error;\r\n    }\r\n```\r\nresults in the expected error being propagated.\r\n\r\nHopefully, there is a way to avoid the string matching while still producing visible user errors instead of generic HttpProvderErrors.\r\n\r\n**4.) Different gas estimations**\r\n\r\nCode:\r\n\r\n```\r\nconst iterations = 5_000\r\nconst gasEstimate = await token.estimateGas.impossibleMethod(iterations)\r\n```\r\n\r\nResult:\r\n```shell\r\nhardhat node / ethereumjs evm:\r\n5k: 10_328_330  // 5 seconds\r\n\r\nanvil:\r\n5k: 4_545_126  // 147 ms\r\n```\r\n\r\nI will continue some of these tests & benchmarks and can either comment here or use a different preferable approach.\r\n\r\nThanks for the amazing work on anvil based on first tests it is extremely fast and I would like to use it for more tests.\r\n\r\n\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/4388/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4388/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1435993393",
    "html_url": "https://github.com/foundry-rs/foundry/issues/4388#issuecomment-1435993393",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4388",
    "id": 1435993393,
    "node_id": "IC_kwDOGBlvNc5Vl4Ux",
    "user": {
      "login": "mattsse",
      "id": 19890894,
      "node_id": "MDQ6VXNlcjE5ODkwODk0",
      "avatar_url": "https://avatars.githubusercontent.com/u/19890894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mattsse",
      "html_url": "https://github.com/mattsse",
      "followers_url": "https://api.github.com/users/mattsse/followers",
      "following_url": "https://api.github.com/users/mattsse/following{/other_user}",
      "gists_url": "https://api.github.com/users/mattsse/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mattsse/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mattsse/subscriptions",
      "organizations_url": "https://api.github.com/users/mattsse/orgs",
      "repos_url": "https://api.github.com/users/mattsse/repos",
      "events_url": "https://api.github.com/users/mattsse/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mattsse/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-02-19T13:44:50Z",
    "updated_at": "2023-02-19T13:47:53Z",
    "author_association": "MEMBER",
    "body": "~~> Out of gas: required gas exceeds allowance: 30000000'~~\r\n\r\n~~should we change this to just~~\r\n\r\n~~> required gas exceeds allowance: 30000000'~~\r\n\r\n~~would this match?~~\r\n\r\noh nvm the wording is actually different, fixing.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1435993393/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1436276084",
    "html_url": "https://github.com/foundry-rs/foundry/issues/4388#issuecomment-1436276084",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4388",
    "id": 1436276084,
    "node_id": "IC_kwDOGBlvNc5Vm9V0",
    "user": {
      "login": "ckoopmann",
      "id": 15629702,
      "node_id": "MDQ6VXNlcjE1NjI5NzAy",
      "avatar_url": "https://avatars.githubusercontent.com/u/15629702?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ckoopmann",
      "html_url": "https://github.com/ckoopmann",
      "followers_url": "https://api.github.com/users/ckoopmann/followers",
      "following_url": "https://api.github.com/users/ckoopmann/following{/other_user}",
      "gists_url": "https://api.github.com/users/ckoopmann/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ckoopmann/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ckoopmann/subscriptions",
      "organizations_url": "https://api.github.com/users/ckoopmann/orgs",
      "repos_url": "https://api.github.com/users/ckoopmann/repos",
      "events_url": "https://api.github.com/users/ckoopmann/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ckoopmann/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-02-20T03:39:09Z",
    "updated_at": "2023-02-20T03:39:09Z",
    "author_association": "CONTRIBUTOR",
    "body": "Another difference between hardhat and anvil that I found, is the fact that the `hardhat node` will reject creating a contract with empty bytecode whereas anvil does not. \r\nI.e. if you send `cast send --create \"0x\"` to the anvil rpc it accepts the transaction whereas hardhat will error with `(code: -32000, message: contract creation without any data provided, data: Some(Object {\"message\": String(\"contract creation without any data provided\")}))`\r\n\r\nNot sure if this is to be considered an actual compatibility problem, but it might be a difference worth noting. ( This tripped me up in the past when using the `hardhat-deploy` package to deploy contracts on an anvil). ",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1436276084/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
