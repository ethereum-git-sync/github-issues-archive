{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/5352",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5352/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5352/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5352/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/5352",
  "id": 1797473288,
  "node_id": "I_kwDOGBlvNc5rI0QI",
  "number": 5352,
  "title": "anvil inline logging of hardhat/forge test style console.sol logs",
  "user": {
    "login": "aathan",
    "id": 24279435,
    "node_id": "MDQ6VXNlcjI0Mjc5NDM1",
    "avatar_url": "https://avatars.githubusercontent.com/u/24279435?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/aathan",
    "html_url": "https://github.com/aathan",
    "followers_url": "https://api.github.com/users/aathan/followers",
    "following_url": "https://api.github.com/users/aathan/following{/other_user}",
    "gists_url": "https://api.github.com/users/aathan/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/aathan/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/aathan/subscriptions",
    "organizations_url": "https://api.github.com/users/aathan/orgs",
    "repos_url": "https://api.github.com/users/aathan/repos",
    "events_url": "https://api.github.com/users/aathan/events{/privacy}",
    "received_events_url": "https://api.github.com/users/aathan/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3593644820,
      "node_id": "LA_kwDOGBlvNc7WMqsU",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-feature",
      "name": "T-feature",
      "color": "BFD4F2",
      "default": false,
      "description": "Type: feature"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2023-07-10T19:52:50Z",
  "updated_at": "2023-07-12T04:59:39Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "### Component\r\n\r\nAnvil\r\n\r\n### Describe the feature you would like\r\n\r\nSupport for console2/console.log logging in Anvil is somewhat limited and works differently than in a hardhat node, in that the logs are apparently collected in LogCollector but not available for output \"inline\" with other output sent to the terminal while Anvil executes contract code. This make it challenging to debug timing issues between Anvil and connected programs by observing what parts of which contracts have executed via instrumenting those contracts with `console.log()` calls in Solidity.\r\n\r\nI've already implemented the necessary changes in sketch form. I'm just now picking up Rust, and am quite unfamiliar with the internals of Anvil/Foundry/Revm. The implementation I came up with may therefore be quite bad, but please have a look. I took this approach, vs collecting all of the logs on a per `spawn()` or `TransactionExecutor` / `next()` (I'm speaking loosely) basis so that the output from Anvil is happening in \"real time\"\r\n\r\nAmong other things there may be a better name than `inline-logs` for this option. Anyway, by supplying `--inline-logs` Anvil sets up a callback in the revm `Inspector` via `with_inline_logs()`, which I did that way to avoid breaking encapsulation relative to the availability of the `decode_console_log()` function. Again, there may be better ways, please educate me/suggest and I can re-implement.\r\n\r\nAlso, I'm trying to figure out why `decode_console_log()` is failing to decode the logs passed to it.\r\n\r\nSee https://github.com/aathan/foundry/tree/inline_logs\r\n\r\nEDIT: Looking even further into this, I think the eventual \"correct\" implementation may be to use the trace crate, and/or follow the same output mechanisms that currently emit the rest of what's going to the terminal/console. The main point here is to cause these logs to become available \"inline\" with other status output of the EVM execution environment, and in \"real time.\"\r\n\r\n### Additional context\r\n\r\n_No response_",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/5352/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5352/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1629908176",
    "html_url": "https://github.com/foundry-rs/foundry/issues/5352#issuecomment-1629908176",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5352",
    "id": 1629908176,
    "node_id": "IC_kwDOGBlvNc5hJmzQ",
    "user": {
      "login": "aathan",
      "id": 24279435,
      "node_id": "MDQ6VXNlcjI0Mjc5NDM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/24279435?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aathan",
      "html_url": "https://github.com/aathan",
      "followers_url": "https://api.github.com/users/aathan/followers",
      "following_url": "https://api.github.com/users/aathan/following{/other_user}",
      "gists_url": "https://api.github.com/users/aathan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aathan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aathan/subscriptions",
      "organizations_url": "https://api.github.com/users/aathan/orgs",
      "repos_url": "https://api.github.com/users/aathan/repos",
      "events_url": "https://api.github.com/users/aathan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aathan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-07-11T00:18:11Z",
    "updated_at": "2023-07-11T00:18:11Z",
    "author_association": "CONTRIBUTOR",
    "body": "In further developing this feature I'm finding that certain places where anvil's `Inspector` may be created, including for example `Backend::inspect_tx()` do not do various setups that are done in other places where `Inspector` is instantiated. For example, `self.enable_steps_tracing` is not consistently checked at all instantiation points.\r\n\r\nShouldn't the code have a centralized function to create an Inspector, that sets it up consistently and completely, rather than the current pattern?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1629908176/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
