{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/2014",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2014/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2014/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2014/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/2014",
  "id": 1275279694,
  "node_id": "I_kwDOGBlvNc5MAzlO",
  "number": 2014,
  "title": "More versatile `expectRevert`",
  "user": {
    "login": "adhusson",
    "id": 2977,
    "node_id": "MDQ6VXNlcjI5Nzc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2977?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/adhusson",
    "html_url": "https://github.com/adhusson",
    "followers_url": "https://api.github.com/users/adhusson/followers",
    "following_url": "https://api.github.com/users/adhusson/following{/other_user}",
    "gists_url": "https://api.github.com/users/adhusson/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/adhusson/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/adhusson/subscriptions",
    "organizations_url": "https://api.github.com/users/adhusson/orgs",
    "repos_url": "https://api.github.com/users/adhusson/repos",
    "events_url": "https://api.github.com/users/adhusson/events{/privacy}",
    "received_events_url": "https://api.github.com/users/adhusson/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3593644820,
      "node_id": "LA_kwDOGBlvNc7WMqsU",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-feature",
      "name": "T-feature",
      "color": "BFD4F2",
      "default": false,
      "description": "Type: feature"
    },
    {
      "id": 3593644915,
      "node_id": "LA_kwDOGBlvNc7WMqtz",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/Cmd-forge-test",
      "name": "Cmd-forge-test",
      "color": "006B75",
      "default": false,
      "description": "Command: forge test"
    },
    {
      "id": 3703752787,
      "node_id": "LA_kwDOGBlvNc7cwshT",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/C-forge",
      "name": "C-forge",
      "color": "5319E7",
      "default": false,
      "description": "Command: forge"
    },
    {
      "id": 3703752960,
      "node_id": "LA_kwDOGBlvNc7cwskA",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/A-cheatcodes",
      "name": "A-cheatcodes",
      "color": "FBCA04",
      "default": false,
      "description": "Area: cheatcodes"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 14,
  "created_at": "2022-06-17T17:08:25Z",
  "updated_at": "2023-03-10T14:23:56Z",
  "closed_at": "2023-03-09T23:03:46Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "### Component\n\nForge\n\n### Describe the feature you would like\n\nIt would be useful to have more control over which call `expectRevert` applies to. Sometimes I don't want to expect the _next_ call to revert but one a little later. And it's not that simple to insert my `expectRevert` between the upcoming call and the call I expect to revert.\r\n\r\n## Possible solutions\r\n\r\n1. New cheat code: `vm.wontRevert()`, which tells forge to ignore the next call for the purpose of `expectRevert`.\r\n\r\n2. Enrich `expectRevert`: `vm.expectRevert(bytes|bytes4 input, msg)` where you expect a revert on the next call where the first argument matches the calldata, eg `vm.expectRevert(ERC20.transferFrom.selector,\"lowAllowance\")`.\n\n### Additional context\n\n_No response_",
  "closed_by": {
    "login": "mds1",
    "id": 17163988,
    "node_id": "MDQ6VXNlcjE3MTYzOTg4",
    "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mds1",
    "html_url": "https://github.com/mds1",
    "followers_url": "https://api.github.com/users/mds1/followers",
    "following_url": "https://api.github.com/users/mds1/following{/other_user}",
    "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
    "organizations_url": "https://api.github.com/users/mds1/orgs",
    "repos_url": "https://api.github.com/users/mds1/repos",
    "events_url": "https://api.github.com/users/mds1/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mds1/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/2014/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2014/timeline",
  "performed_via_github_app": null,
  "state_reason": "not_planned"
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1159145992",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2014#issuecomment-1159145992",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2014",
    "id": 1159145992,
    "node_id": "IC_kwDOGBlvNc5FFyoI",
    "user": {
      "login": "gakonst",
      "id": 17802178,
      "node_id": "MDQ6VXNlcjE3ODAyMTc4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17802178?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gakonst",
      "html_url": "https://github.com/gakonst",
      "followers_url": "https://api.github.com/users/gakonst/followers",
      "following_url": "https://api.github.com/users/gakonst/following{/other_user}",
      "gists_url": "https://api.github.com/users/gakonst/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gakonst/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gakonst/subscriptions",
      "organizations_url": "https://api.github.com/users/gakonst/orgs",
      "repos_url": "https://api.github.com/users/gakonst/repos",
      "events_url": "https://api.github.com/users/gakonst/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gakonst/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-17T18:47:20Z",
    "updated_at": "2022-06-17T18:47:20Z",
    "author_association": "MEMBER",
    "body": "> It would be useful to have more control over which call expectRevert applies to. Sometimes I don't want to expect the next call to revert but one a little later. And it's not that simple to insert my expectRevert between the upcoming call and the call I expect to revert.\r\n\r\nCan you give a specific example of the scenario?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1159145992/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1174896998",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2014#issuecomment-1174896998",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2014",
    "id": 1174896998,
    "node_id": "IC_kwDOGBlvNc5GB4Fm",
    "user": {
      "login": "adhusson",
      "id": 2977,
      "node_id": "MDQ6VXNlcjI5Nzc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2977?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adhusson",
      "html_url": "https://github.com/adhusson",
      "followers_url": "https://api.github.com/users/adhusson/followers",
      "following_url": "https://api.github.com/users/adhusson/following{/other_user}",
      "gists_url": "https://api.github.com/users/adhusson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adhusson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adhusson/subscriptions",
      "organizations_url": "https://api.github.com/users/adhusson/orgs",
      "repos_url": "https://api.github.com/users/adhusson/repos",
      "events_url": "https://api.github.com/users/adhusson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adhusson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-05T10:27:38Z",
    "updated_at": "2022-07-05T10:27:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "Sure, in my case I have a contract that self-calls at some point. I'd like to see that self-call fail.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1174896998/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1174905764",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2014#issuecomment-1174905764",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2014",
    "id": 1174905764,
    "node_id": "IC_kwDOGBlvNc5GB6Ok",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-05T10:36:49Z",
    "updated_at": "2022-07-05T10:36:49Z",
    "author_association": "MEMBER",
    "body": "I don't understand - you have something like:\r\n\r\n`A -> (1) B -> (2) B` and you would like to test if (2) reverts?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1174905764/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1174913692",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2014#issuecomment-1174913692",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2014",
    "id": 1174913692,
    "node_id": "IC_kwDOGBlvNc5GB8Kc",
    "user": {
      "login": "adhusson",
      "id": 2977,
      "node_id": "MDQ6VXNlcjI5Nzc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2977?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adhusson",
      "html_url": "https://github.com/adhusson",
      "followers_url": "https://api.github.com/users/adhusson/followers",
      "following_url": "https://api.github.com/users/adhusson/following{/other_user}",
      "gists_url": "https://api.github.com/users/adhusson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adhusson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adhusson/subscriptions",
      "organizations_url": "https://api.github.com/users/adhusson/orgs",
      "repos_url": "https://api.github.com/users/adhusson/repos",
      "events_url": "https://api.github.com/users/adhusson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adhusson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-05T10:45:21Z",
    "updated_at": "2022-07-05T10:45:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "Sorry I don't think I get your diagram. I have something like\r\n```\r\ncontract A is Something { \r\n  function f() public { \r\n    try this.g() { ... } catch { ... } \r\n  } \r\n}\r\ncontract ATest is Test { \r\n  function test_f() public {\r\n    // here I'd like to expect a revert from the g() call\r\n    (new A()).f();\r\n  }\r\n}\r\n```\r\n\r\nI ended up testing other behaviors around the revert, and you could even say I shouldn't test a nested revert, but it would be nice.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1174913692/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1174925073",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2014#issuecomment-1174925073",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2014",
    "id": 1174925073,
    "node_id": "IC_kwDOGBlvNc5GB-8R",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-05T10:58:01Z",
    "updated_at": "2022-07-05T11:01:20Z",
    "author_association": "MEMBER",
    "body": "Yeah that's essentially what I meant - I don't think this is super feasible because of e.g. #864 (which this is sort of a dupe of?) and #432. Both of them are really hard to implement, and likely to break in many situations for very opaque reasons. Imo, since you catch the revert, it should be sufficient to test the state/output in the case it doesn't revert, and test the opposite as well (in the case it does revert)\r\n\r\nAnother thing is that under the hood `expectRevert` actually \"inverts\" the status of the call in order to allow for the test to continue execution. That is, when you perform a call (static, delegate, normal etc.) it returns a status of either 0 or 1, which Forge inverts. For internal calls, there is no status, so it's unclear how this would work - we'd essentially need to coax the execution to jump out to another point in the code, which might not be feasible with static analysis alone",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1174925073/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1174930239",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2014#issuecomment-1174930239",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2014",
    "id": 1174930239,
    "node_id": "IC_kwDOGBlvNc5GCAM_",
    "user": {
      "login": "adhusson",
      "id": 2977,
      "node_id": "MDQ6VXNlcjI5Nzc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2977?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adhusson",
      "html_url": "https://github.com/adhusson",
      "followers_url": "https://api.github.com/users/adhusson/followers",
      "following_url": "https://api.github.com/users/adhusson/following{/other_user}",
      "gists_url": "https://api.github.com/users/adhusson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adhusson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adhusson/subscriptions",
      "organizations_url": "https://api.github.com/users/adhusson/orgs",
      "repos_url": "https://api.github.com/users/adhusson/repos",
      "events_url": "https://api.github.com/users/adhusson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adhusson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-05T11:03:39Z",
    "updated_at": "2022-07-05T11:03:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "AFAICT my use case does not involve \"internal calls\" but actual `CALL` opcodes -- `this.g()` compiles to a `CALL`, not a `JUMP`. So implementation-wise it should just be a matter of waiting until the CALL meets some conditions about (from, to, calldata) before inverting the status. It may not be wise to implement it though :p",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1174930239/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1174939106",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2014#issuecomment-1174939106",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2014",
    "id": 1174939106,
    "node_id": "IC_kwDOGBlvNc5GCCXi",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-05T11:13:29Z",
    "updated_at": "2022-07-05T11:13:29Z",
    "author_association": "MEMBER",
    "body": "Yeah, as mentioned it works in some cases, but I have definitely seen cases where jumps were used, and it's not entirely clear when that happens and the support (bug fixing, answering questions/helping people) would probably be a lot since the error isn't necessarily immediately clear :)",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1174939106/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1174943955",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2014#issuecomment-1174943955",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2014",
    "id": 1174943955,
    "node_id": "IC_kwDOGBlvNc5GCDjT",
    "user": {
      "login": "adhusson",
      "id": 2977,
      "node_id": "MDQ6VXNlcjI5Nzc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2977?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adhusson",
      "html_url": "https://github.com/adhusson",
      "followers_url": "https://api.github.com/users/adhusson/followers",
      "following_url": "https://api.github.com/users/adhusson/following{/other_user}",
      "gists_url": "https://api.github.com/users/adhusson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adhusson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adhusson/subscriptions",
      "organizations_url": "https://api.github.com/users/adhusson/orgs",
      "repos_url": "https://api.github.com/users/adhusson/repos",
      "events_url": "https://api.github.com/users/adhusson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adhusson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-05T11:19:40Z",
    "updated_at": "2022-07-05T11:19:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "I don't think a `this.(...)` ever compiles to a jump per [this](https://docs.soliditylang.org/en/v0.8.15/control-structures.html#external-function-calls) but I may be misreading.\r\n\r\nRegardless, the feature I'm talking about here would strictly be about being able to qualify _which_ next CALL to invert. For instance `vm.expectRevert(bytes4 sig)` would invert the result of the next CALL where the first 4 bytes of calldata match `sig`.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1174943955/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1174978887",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2014#issuecomment-1174978887",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2014",
    "id": 1174978887,
    "node_id": "IC_kwDOGBlvNc5GCMFH",
    "user": {
      "login": "adhusson",
      "id": 2977,
      "node_id": "MDQ6VXNlcjI5Nzc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2977?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adhusson",
      "html_url": "https://github.com/adhusson",
      "followers_url": "https://api.github.com/users/adhusson/followers",
      "following_url": "https://api.github.com/users/adhusson/following{/other_user}",
      "gists_url": "https://api.github.com/users/adhusson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adhusson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adhusson/subscriptions",
      "organizations_url": "https://api.github.com/users/adhusson/orgs",
      "repos_url": "https://api.github.com/users/adhusson/repos",
      "events_url": "https://api.github.com/users/adhusson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adhusson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-05T12:02:19Z",
    "updated_at": "2022-07-05T12:02:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "I have another use case right now. I'm testing contract `Callee`. The context is that `Callee` will be called (after a sequence of state-changing operations) by a contract `Caller` (which I'm not testing). So the order is `tx.origin -> Caller -> Callee`.\r\n\r\nI'd like to check that some transaction makes `Callee` revert, and I'd rather test that directly than test it through `Caller`'s behavior. So something like this would be useful:\r\n```\r\nvm.expectRevert(address(callee),\"revert reason\");\r\ncaller.fn();\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1174978887/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1174980950",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2014#issuecomment-1174980950",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2014",
    "id": 1174980950,
    "node_id": "IC_kwDOGBlvNc5GCMlW",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-05T12:04:45Z",
    "updated_at": "2022-07-05T12:05:22Z",
    "author_association": "MEMBER",
    "body": "That's true, however the important bit is `this` - if you just do `g()` (which is valid), this is no longer always the case, ref #432 about `mockCall` which works similarly (structurally) to `expectRevert`. Same for internal calls",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1174980950/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1175246559",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2014#issuecomment-1175246559",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2014",
    "id": 1175246559,
    "node_id": "IC_kwDOGBlvNc5GDNbf",
    "user": {
      "login": "adhusson",
      "id": 2977,
      "node_id": "MDQ6VXNlcjI5Nzc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2977?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adhusson",
      "html_url": "https://github.com/adhusson",
      "followers_url": "https://api.github.com/users/adhusson/followers",
      "following_url": "https://api.github.com/users/adhusson/following{/other_user}",
      "gists_url": "https://api.github.com/users/adhusson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adhusson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adhusson/subscriptions",
      "organizations_url": "https://api.github.com/users/adhusson/orgs",
      "repos_url": "https://api.github.com/users/adhusson/repos",
      "events_url": "https://api.github.com/users/adhusson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adhusson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-05T16:21:22Z",
    "updated_at": "2022-07-05T16:21:32Z",
    "author_association": "CONTRIBUTOR",
    "body": "Agreed, managing internal calls seems difficult. Doing something similar to `expectEmit` but for the sequence of CALLs that follow an `expectRevert` seems less hard?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1175246559/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1462945154",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2014#issuecomment-1462945154",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2014",
    "id": 1462945154,
    "node_id": "IC_kwDOGBlvNc5XMsWC",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-09T23:03:46Z",
    "updated_at": "2023-03-09T23:03:46Z",
    "author_association": "COLLABORATOR",
    "body": "A lot has been discussed, and I think:\r\n- Some pars of the discussion have workarounds\r\n- Others are covered by supporting `JUMP`s which will be tracked in #4439\r\n\r\nSo going to close this optimistically, but if there's a feature request here we still want to track feel free to create a new issue describing the scope + sample UX",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1462945154/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1463528492",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2014#issuecomment-1463528492",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2014",
    "id": 1463528492,
    "node_id": "IC_kwDOGBlvNc5XO6ws",
    "user": {
      "login": "adhusson",
      "id": 2977,
      "node_id": "MDQ6VXNlcjI5Nzc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2977?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adhusson",
      "html_url": "https://github.com/adhusson",
      "followers_url": "https://api.github.com/users/adhusson/followers",
      "following_url": "https://api.github.com/users/adhusson/following{/other_user}",
      "gists_url": "https://api.github.com/users/adhusson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adhusson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adhusson/subscriptions",
      "organizations_url": "https://api.github.com/users/adhusson/orgs",
      "repos_url": "https://api.github.com/users/adhusson/repos",
      "events_url": "https://api.github.com/users/adhusson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adhusson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-10T09:36:18Z",
    "updated_at": "2023-03-10T09:36:18Z",
    "author_association": "CONTRIBUTOR",
    "body": "I'm not sure how this PR is addressed by supporting `JUMP`s nor what workarounds there are are the moment. I'll try to clarify: for regular reverts, from call frame to call frame, you sometimes want to specify that a revert happens deep in the call frame stack.\r\n\r\nFor instance :\r\n```\r\n// test contract would like to expect a revert from c2\r\n| test contract\r\n| - c1.fun(); \r\n     | - ...<code>...   \r\n     | - c2.fun();\r\n         | - revert(\"reason\");\r\n```\r\n\r\nThe only potential workaround here is to do `vm.prank(address(c1)); c2.fun();`, but this stops working very quickly if the `c2.fun()` call inside `c1` is surrounded by state-changing context that you'd have to replicate in the test code. \r\n\r\nThe simplest UX I can think of (it doesn't handle all use cases but a lot) is to enrich `expectRevert`: \r\n\r\n```solidity\r\n// expect next call with given calldata input to revert, optionally with reason\r\nvm.expectRevert(bytes|bytes4 input, [reason])\r\n// expect next call to address to revert, optionally with calldata input, optionally with reason\r\nvm.expectRevert(address,[bytes|bytes4 input, [reason]])\r\n```\r\n\r\nThis is useful to pseudo-integration tests where you are testing either `c1` or `c2`, and you want to check that their interaction results in a revert under some conditions.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1463528492/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1463876853",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2014#issuecomment-1463876853",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2014",
    "id": 1463876853,
    "node_id": "IC_kwDOGBlvNc5XQPz1",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-10T14:23:56Z",
    "updated_at": "2023-03-10T14:23:56Z",
    "author_association": "COLLABORATOR",
    "body": "> I'm not sure how this PR is addressed by supporting JUMPs \r\n\r\nSorry, saw some discussion above about reverts for internal function calls (which are JUMPs), but I see that's not the idea here\r\n\r\n> nor what workarounds there are are the moment.\r\n\r\nOne I had in mind was the `vm.prank(address(c1)); c2.fun();` workaround which you mentioned. Additionally, you can already catch reverts in cases like that:\r\n\r\n```solidity\r\nimport \"forge-std/Test.sol\";\r\n\r\ncontract Foo {\r\n  function foo() public {\r\n    revert(\"oops\");\r\n  }\r\n}\r\n\r\ncontract Bar {\r\n  Foo foo;\r\n  constructor() {\r\n    foo = new Foo();\r\n  }\r\n\r\n  function bar() public {\r\n    foo.foo();\r\n  }\r\n}\r\n\r\ncontract MyTest is Test {\r\n  // This test passes.\r\n  function testCounter() public {\r\n    Bar bar = new Bar();\r\n    vm.expectRevert(bytes(\"oops\"));\r\n    bar.bar();\r\n  }\r\n}\r\n```\r\n\r\n> This is useful to pseudo-integration tests where you are testing either `c1` or `c2`, and you want to check that their interaction results in a revert under some conditions.\r\n\r\nI think I'm not following the use case and what you can't do currently. What does the above example—where a call to `bar` results in a revert in `foo`, which we test for and catch—not handle? Based on your cheat syntaxes, it seems you can just move the `expectRevert` call later in your test method, so it expects the revert on the next call, instead of having `expectRevert` earlier in the test and waiting for the target or calldata conditions to be met\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1463876853/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
