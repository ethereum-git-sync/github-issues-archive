{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/749",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/749/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/749/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/749/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/749",
  "id": 1140143380,
  "node_id": "I_kwDOGBlvNc5D9TUU",
  "number": 749,
  "title": "Auto creating 'User Contracts' to abstract VM cheatcodes and avoiding boilerplate",
  "user": {
    "login": "pbshgthm",
    "id": 24489964,
    "node_id": "MDQ6VXNlcjI0NDg5OTY0",
    "avatar_url": "https://avatars.githubusercontent.com/u/24489964?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/pbshgthm",
    "html_url": "https://github.com/pbshgthm",
    "followers_url": "https://api.github.com/users/pbshgthm/followers",
    "following_url": "https://api.github.com/users/pbshgthm/following{/other_user}",
    "gists_url": "https://api.github.com/users/pbshgthm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/pbshgthm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/pbshgthm/subscriptions",
    "organizations_url": "https://api.github.com/users/pbshgthm/orgs",
    "repos_url": "https://api.github.com/users/pbshgthm/repos",
    "events_url": "https://api.github.com/users/pbshgthm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/pbshgthm/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3394555740,
      "node_id": "LA_kwDOGBlvNc7KVM9c",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/A-evm",
      "name": "A-evm",
      "color": "FBCA04",
      "default": false,
      "description": "Area: EVM"
    },
    {
      "id": 3593644820,
      "node_id": "LA_kwDOGBlvNc7WMqsU",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-feature",
      "name": "T-feature",
      "color": "BFD4F2",
      "default": false,
      "description": "Type: feature"
    },
    {
      "id": 3593644915,
      "node_id": "LA_kwDOGBlvNc7WMqtz",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/Cmd-forge-test",
      "name": "Cmd-forge-test",
      "color": "006B75",
      "default": false,
      "description": "Command: forge test"
    },
    {
      "id": 3703752787,
      "node_id": "LA_kwDOGBlvNc7cwshT",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/C-forge",
      "name": "C-forge",
      "color": "5319E7",
      "default": false,
      "description": "Command: forge"
    },
    {
      "id": 3703752960,
      "node_id": "LA_kwDOGBlvNc7cwskA",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/A-cheatcodes",
      "name": "A-cheatcodes",
      "color": "FBCA04",
      "default": false,
      "description": "Area: cheatcodes"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 7,
  "created_at": "2022-02-16T15:08:36Z",
  "updated_at": "2023-03-12T20:26:58Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "# User based testing pattern\r\nA common pattern used in dapptools and foundry projects is a 'User Contract'. It is an abstraction over the contract interaction that looks something like this (from [DSToken](https://github.com/dapphub/ds-token/blob/16f187acc15dd839589be60173ad1ebd0716eb82/src/token.t.sol#L24))\r\n\r\n```solidity\r\ncontract TokenUser {\r\n    DSToken  token;\r\n\r\n    constructor(DSToken token_) public {\r\n        token = token_;\r\n    }\r\n\r\n    function doApprove(address spender, uint amount)\r\n        public\r\n        returns (bool)\r\n    {\r\n        return token.approve(spender, amount);\r\n    }\r\n    //...\r\n}\r\n```\r\nAnd in the test contract, we can use it like this\r\n\r\n```solidity\r\nuser1 = new TokenUser(token);\r\nuser1.doApprove(user2);\r\n```\r\n\r\nThis is an interesting pattern as it lets you wrap contracts and test them like how a user would interact with them. Its advantage shines really well when you need to test with multiple user addresses.\r\n\r\n# Blacksmiths to use the foundry\r\nI took this pattern a step further and created a full-fledged contract generator that will create these 'User Contracts', along with a bunch of UX niceties. You can create a user with a particular address or private key and it can perform all operations an EOA can.  All this can be automated by running the [blacksmith.js](https://github.com/pbshgthm/blacksmith) script (sorry, not in rust yet). It automatically creates User contracts for all contracts in your foundry project directory.\r\n\r\n## Features\r\n\r\n### Wrap multiple target contracts\r\n```solidity\r\nuser1.dex.swap(100);\r\nuser1.factory.pause(true);\r\nuser1.token.transfer(user2.addr, 100);\r\n```\r\n\r\n### Sign using private key\r\n```solidity\r\n(uint8 v, bytes32 r, bytes32 s) = user1.sign(\"blacksmith\");\r\n```\r\n\r\n### Call arbiraty contracts\r\n```solidity\r\nuser1.call{value:10}(contract_address, \"calldata\");\r\n```\r\n\r\n### Set user address's balance\r\n```solidity\r\nuser1.deal(100);\r\n```\r\n\r\n### Zero code size at address\r\n```solidity\r\nuser1.addr.code.length // is zero\r\n```\r\n\r\nThe blacksmith.js script creates the base`Blacksmith.sol` that contains basic functions like `call`, `sign` and `deal`. It also creates `TargetBS.sol` for all `Target` contracts in the project directory.  To Base User contract (Blacksmith) takes in an address and a private key as constructor params. If the private key is zero, the provided address is used as the user's address, else the address is calculated from the private key. \r\n\r\n```solidity\r\nconstructor( address _addr, uint256 _privateKey, address _target) {\r\n    addr = _privateKey == 0 ? _addr : bsvm.addr(_privateKey);\r\n    privateKey = _privateKey;\r\n    target = payable(_target);\r\n}\r\n```\r\n\r\nTo create a User contract to interact with a `Target` contract, you import `TargetBS` contract. Along with the address and private key, it also takes in the target contract's address\r\n\r\n```solidity\r\nconstructor( address _addr, uint256 _privateKey, address _target) {\r\n    addr = _privateKey == 0 ? _addr : bsvm.addr(_privateKey);\r\n    privateKey = _privateKey;\r\n    target = payable(_target);\r\n}\r\n```\r\n\r\nTo create a user object, you can create a struct and add the required interface. The below code is all you'll need to write to get started with testing. Rest is taken care of by blacksmith script. \r\n\r\n```solidity\r\nstruct User {\r\n    address addr;  // to avoid external call, we save it in the struct\r\n    Blacksmith base;  // contains call(), sign(), deal()\r\n    FooTokenBS foo;  // interacts with FooToken contract\r\n    BarTokenBS bar;  // interacts with BarToken contract\r\n}\r\n\r\nfunction createUser(address _addr, uint256 _privateKey) public returns (User memory) {\r\n    Blacksmith base = new Blacksmith(_addr, _privateKey);\r\n    FooTokenBS _foo = new FooTokenBS(_addr, _privateKey, address(foo));\r\n    BarTokenBS _bar = new BarTokenBS(_addr, _privateKey, address(bar));\r\n    base.deal(100);\r\n    return User(base.addr(), base, _foo, _bar);\r\n}\r\n\r\nfunction setUp() public {\r\n    foo = new FooToken();\r\n    bar = new BarToken();\r\n    alice = createUser(address(0), 111);  // addrss will be 0x052b91ad9732d1bce0ddae15a4545e5c65d02443\r\n    bob = createUser(address(111), 0);  // address will be 0x000000000000000000000000000000000000006f\r\n    eve = createUser(address(123), 0);  // address will be 0x000000000000000000000000000000000000006f\r\n}\r\n```\r\n\r\nNow you can use it directly in your test functions\r\n\r\n```solidity\r\nfunction testSomething() public {\r\n    bob.foo.approve(alice.addr, 10);\r\n    alice.foo.transferFrom(bob.addr, alice.addr, 10);\r\n    alice.bar.approve(eve.addr, 100);\r\n    eve.transferFrom(bob.addr, eve.addr, 50);\r\n    eve.call{value:10}(alice.ddr, \"\");\r\n   (uint8 v, bytes32 r, bytes32 s) = alice.sign(\"blacksmith\");\r\n}\r\n```\r\n\r\n# Usage\r\n\r\nTo get started with blacksmith, download blacksmith.js to the *foundry projectâ€™s root directory*.\r\n```bash\r\ncurl -O https://raw.githubusercontent.com/pbshgthm/blacksmith/main/blacksmith.js\r\nnode blacksmith.js create #in foundry project's root directory\r\n```\r\nThis will run `forge build` and then create `/src/test/blacksmith` directory with user contracts in `Target.bs.sol`.\r\n\r\nWould love to know what folks think about this pattern. Might be interesting to add it as a feature to forge as it would help avoid a ton of boilerplate code and prove UX improvements to testing contracts in an OOP like way. \r\n\r\n[Blacksmith Repo](https://github.com/pbshgthm/blacksmith)\r\n\r\n\r\n\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/749/reactions",
    "total_count": 3,
    "+1": 2,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 1,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/749/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1041595612",
    "html_url": "https://github.com/foundry-rs/foundry/issues/749#issuecomment-1041595612",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/749",
    "id": 1041595612,
    "node_id": "IC_kwDOGBlvNc4-FXzc",
    "user": {
      "login": "gakonst",
      "id": 17802178,
      "node_id": "MDQ6VXNlcjE3ODAyMTc4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17802178?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gakonst",
      "html_url": "https://github.com/gakonst",
      "followers_url": "https://api.github.com/users/gakonst/followers",
      "following_url": "https://api.github.com/users/gakonst/following{/other_user}",
      "gists_url": "https://api.github.com/users/gakonst/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gakonst/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gakonst/subscriptions",
      "organizations_url": "https://api.github.com/users/gakonst/orgs",
      "repos_url": "https://api.github.com/users/gakonst/repos",
      "events_url": "https://api.github.com/users/gakonst/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gakonst/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-16T15:12:12Z",
    "updated_at": "2022-02-16T15:12:44Z",
    "author_association": "MEMBER",
    "body": "+1 on this being a great addition. I think that it might make sense that we start supporting the following structure:\r\n\r\n```\r\nsrc/ <-- all source contracts, no tests\r\ntest/ <-- test contracts\r\ncodegen/ <-- user contract bindings\r\nlib/ <-- our deps\r\n```\r\n\r\nwhereas now both blacksmith bindings and tests fall under src\r\n\r\nthis would prevent fatigue from having a src directory with \"too many\" things\r\n\r\nsupporting this kind of codegen in Rust is no prob",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1041595612/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1041619547",
    "html_url": "https://github.com/foundry-rs/foundry/issues/749#issuecomment-1041619547",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/749",
    "id": 1041619547,
    "node_id": "IC_kwDOGBlvNc4-Fdpb",
    "user": {
      "login": "pbshgthm",
      "id": 24489964,
      "node_id": "MDQ6VXNlcjI0NDg5OTY0",
      "avatar_url": "https://avatars.githubusercontent.com/u/24489964?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pbshgthm",
      "html_url": "https://github.com/pbshgthm",
      "followers_url": "https://api.github.com/users/pbshgthm/followers",
      "following_url": "https://api.github.com/users/pbshgthm/following{/other_user}",
      "gists_url": "https://api.github.com/users/pbshgthm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pbshgthm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pbshgthm/subscriptions",
      "organizations_url": "https://api.github.com/users/pbshgthm/orgs",
      "repos_url": "https://api.github.com/users/pbshgthm/repos",
      "events_url": "https://api.github.com/users/pbshgthm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pbshgthm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-16T15:21:05Z",
    "updated_at": "2022-02-16T15:21:05Z",
    "author_association": "CONTRIBUTOR",
    "body": "Yes, this directory structure makes sense. Currently, any changes in the function signatures of the contract will result in compile error on `forge build` in the Blacksmith contracts, as they inherit from the target contract and function signatures won't' match. But this isn't a functional issue, as `forge build` compiles the rest of the contracts and the error can be fixed by running `blacksmith.js`. Still, it's something that can be improved. We can probably look at building only the `src` directory with `forge build` and other directories like `test` as required. So taking `test` out of `src` definitely seems like a good direction. ",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1041619547/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1041648503",
    "html_url": "https://github.com/foundry-rs/foundry/issues/749#issuecomment-1041648503",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/749",
    "id": 1041648503,
    "node_id": "IC_kwDOGBlvNc4-Fkt3",
    "user": {
      "login": "gakonst",
      "id": 17802178,
      "node_id": "MDQ6VXNlcjE3ODAyMTc4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17802178?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gakonst",
      "html_url": "https://github.com/gakonst",
      "followers_url": "https://api.github.com/users/gakonst/followers",
      "following_url": "https://api.github.com/users/gakonst/following{/other_user}",
      "gists_url": "https://api.github.com/users/gakonst/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gakonst/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gakonst/subscriptions",
      "organizations_url": "https://api.github.com/users/gakonst/orgs",
      "repos_url": "https://api.github.com/users/gakonst/repos",
      "events_url": "https://api.github.com/users/gakonst/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gakonst/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-16T15:24:52Z",
    "updated_at": "2022-02-16T15:25:46Z",
    "author_association": "MEMBER",
    "body": "Yeah we could do it in 2-steps with this separation: Build source -> run codegen -> build codegen.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1041648503/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1041699866",
    "html_url": "https://github.com/foundry-rs/foundry/issues/749#issuecomment-1041699866",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/749",
    "id": 1041699866,
    "node_id": "IC_kwDOGBlvNc4-FxQa",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-16T15:31:49Z",
    "updated_at": "2022-02-16T15:31:49Z",
    "author_association": "COLLABORATOR",
    "body": "+1 on both this feature and the directory structure suggested by @gakonst \r\n\r\nWith native integration of this feature, compatibility with https://github.com/gakonst/foundry/issues/402 could be valuable. For example:\r\n- define a top level `deploy()` method that deploys your full protocol\r\n- each contract deployed in that method is automatically added to each blacksmith user object you create\r\n- that same `deploy()` method can be used for production deployments\r\n- that same `deploy()` method can be called during the `setUp()` method to run tests against that state",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1041699866/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1445181592",
    "html_url": "https://github.com/foundry-rs/foundry/issues/749#issuecomment-1445181592",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/749",
    "id": 1445181592,
    "node_id": "IC_kwDOGBlvNc5WI7iY",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-02-25T18:55:03Z",
    "updated_at": "2023-02-25T18:55:03Z",
    "author_association": "COLLABORATOR",
    "body": "Revisiting this issue, I don't find myself ever using user contracts for testing, except when creating handler contracts during invariant testing. So maybe the best use of codegen contracts like this might be to simplify setup for invariant testing, to automatically generate handler contracts.\r\n\r\n`forge build` could automatically write one handler contract for each contract in the `src/` dir to a `codegen` directory, and a combined handler for everything. You can also imagine additional args to customize the handlers created in the config file. For example:\r\n\r\n```toml\r\n[handlers]\r\n# Generates a contract called Handler A that can call all mutable methods on\r\n# MyContract1 and MyContract2. `warp = true` means it will have a public\r\n# method to skip forward in time, `roll = false` means it will *not* have a public\r\n# method to skip forward in time. If both were true, it's a single method to modify both.\r\n# Can also include things like tracking for call summaries and actors automaticallt\r\nHandlerA = { contracts = [\"MyContract1, MyContract2\"], warp = true, roll = false }\r\n```\r\n\r\nMight need to think on it more, but I think this could very useful and more flexible than a `Handler` template in forge-std. cc @lucas-manuel",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1445181592/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1449192089",
    "html_url": "https://github.com/foundry-rs/foundry/issues/749#issuecomment-1449192089",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/749",
    "id": 1449192089,
    "node_id": "IC_kwDOGBlvNc5WYOqZ",
    "user": {
      "login": "gakonst",
      "id": 17802178,
      "node_id": "MDQ6VXNlcjE3ODAyMTc4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17802178?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gakonst",
      "html_url": "https://github.com/gakonst",
      "followers_url": "https://api.github.com/users/gakonst/followers",
      "following_url": "https://api.github.com/users/gakonst/following{/other_user}",
      "gists_url": "https://api.github.com/users/gakonst/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gakonst/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gakonst/subscriptions",
      "organizations_url": "https://api.github.com/users/gakonst/orgs",
      "repos_url": "https://api.github.com/users/gakonst/repos",
      "events_url": "https://api.github.com/users/gakonst/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gakonst/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-01T01:46:17Z",
    "updated_at": "2023-03-01T01:46:17Z",
    "author_association": "MEMBER",
    "body": "The codegen idea is really interesting. I think in practice handlers will want to have extra customized assertions in them, so probably hard to create a general enough solution.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1449192089/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1465292024",
    "html_url": "https://github.com/foundry-rs/foundry/issues/749#issuecomment-1465292024",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/749",
    "id": 1465292024,
    "node_id": "IC_kwDOGBlvNc5XVpT4",
    "user": {
      "login": "lucas-manuel",
      "id": 44272939,
      "node_id": "MDQ6VXNlcjQ0MjcyOTM5",
      "avatar_url": "https://avatars.githubusercontent.com/u/44272939?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lucas-manuel",
      "html_url": "https://github.com/lucas-manuel",
      "followers_url": "https://api.github.com/users/lucas-manuel/followers",
      "following_url": "https://api.github.com/users/lucas-manuel/following{/other_user}",
      "gists_url": "https://api.github.com/users/lucas-manuel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lucas-manuel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lucas-manuel/subscriptions",
      "organizations_url": "https://api.github.com/users/lucas-manuel/orgs",
      "repos_url": "https://api.github.com/users/lucas-manuel/repos",
      "events_url": "https://api.github.com/users/lucas-manuel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lucas-manuel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-12T20:26:57Z",
    "updated_at": "2023-03-12T20:26:57Z",
    "author_association": "NONE",
    "body": "Ooh this could be cool. Have a codegen handler that imports from forge-std to use the `useRandomActor` modifier and has a wrapper that includes the fuzzed index and all the necessary params for wrapping the call. After that just calls function and leaves logic up to user. \r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1465292024/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
