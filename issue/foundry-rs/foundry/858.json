{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/858",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/858/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/858/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/858/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/858",
  "id": 1161848352,
  "node_id": "I_kwDOGBlvNc5FQGYg",
  "number": 858,
  "title": "Table tests",
  "user": {
    "login": "onbjerg",
    "id": 8862627,
    "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/onbjerg",
    "html_url": "https://github.com/onbjerg",
    "followers_url": "https://api.github.com/users/onbjerg/followers",
    "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
    "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
    "organizations_url": "https://api.github.com/users/onbjerg/orgs",
    "repos_url": "https://api.github.com/users/onbjerg/repos",
    "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
    "received_events_url": "https://api.github.com/users/onbjerg/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3593644820,
      "node_id": "LA_kwDOGBlvNc7WMqsU",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-feature",
      "name": "T-feature",
      "color": "BFD4F2",
      "default": false,
      "description": "Type: feature"
    },
    {
      "id": 3593644915,
      "node_id": "LA_kwDOGBlvNc7WMqtz",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/Cmd-forge-test",
      "name": "Cmd-forge-test",
      "color": "006B75",
      "default": false,
      "description": "Command: forge test"
    },
    {
      "id": 3703752787,
      "node_id": "LA_kwDOGBlvNc7cwshT",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/C-forge",
      "name": "C-forge",
      "color": "5319E7",
      "default": false,
      "description": "Command: forge"
    },
    {
      "id": 3759719790,
      "node_id": "LA_kwDOGBlvNc7gGMVu",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/P-low",
      "name": "P-low",
      "color": "D93F0B",
      "default": false,
      "description": "Priority: low"
    },
    {
      "id": 3759720362,
      "node_id": "LA_kwDOGBlvNc7gGMeq",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/D-average",
      "name": "D-average",
      "color": "0E8A16",
      "default": false,
      "description": "Difficulty: average"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 24,
  "created_at": "2022-03-07T19:45:50Z",
  "updated_at": "2023-01-30T06:51:37Z",
  "closed_at": null,
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "### Component\r\n\r\nForge\r\n\r\n### Describe the feature you would like\r\n\r\nTable tests are a way to generate test cases based on a dataset of parameters (the table), enabling code reuse in tests that use the same assertions but with predefined data. An example of a table test can be [found here](https://github.com/Uniswap/v3-core/blob/main/test/UniswapV3Pool.swaps.spec.ts).\r\n\r\nThere are a few ways to go about this (after brainstorming with @gakonst) these seem like the most viable options:\r\n\r\n## Setup/run functions\r\n\r\nThis approach uses a `setUpTable*` function that returns the table with testdata and a `testTable*` that runs assertions on each entry in the table. Due to constraints with Solidity (again) the UX is going to suck a bit:\r\n\r\n```solidity\r\nfunction setUpTableSums() public returns (bytes[] memory) {\r\n  bytes[] memory entries = new bytes[](2);\r\n  entries[0] = abi.encode(1, 2, 3);\r\n  entries[1] = abi.encode(4, 5, 9);\r\n}\r\n\r\nfunction testTableSums(uint256 a, uint256 b, uint256 expected) public {\r\n  assertEq(a + b, expected);\r\n}\r\n```\r\n\r\nThe `setUpTable` functions are called once during setup and the table is stored in-memory. The `testTable` function is then called in parallel with each entry in the table. If an entry fails we should mark the table test as a failure and provide some info on what entries failed.\r\n\r\nThe `setUpTable` functions returns an array of bytes: each entry in this array is calldata we pass directly to the table test function by prepending the signature of the table test function.\r\n\r\nPros:\r\n\r\n- Solidity-only\r\n\r\nCons:\r\n\r\n- Uses ABI encode\r\n\r\n## External files\r\n\r\nSame as above, but the table is in a file named after some convention. Each entry is ABI encoded and then passed to the table test function\r\n\r\nPros:\r\n\r\n- No ABI encode\r\n\r\nCons:\r\n\r\n- Uses external files\r\n\r\n### Additional context\r\n\r\n_No response_",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/858/reactions",
    "total_count": 3,
    "+1": 3,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/858/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1061114176",
    "html_url": "https://github.com/foundry-rs/foundry/issues/858#issuecomment-1061114176",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/858",
    "id": 1061114176,
    "node_id": "IC_kwDOGBlvNc4_P1FA",
    "user": {
      "login": "gakonst",
      "id": 17802178,
      "node_id": "MDQ6VXNlcjE3ODAyMTc4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17802178?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gakonst",
      "html_url": "https://github.com/gakonst",
      "followers_url": "https://api.github.com/users/gakonst/followers",
      "following_url": "https://api.github.com/users/gakonst/following{/other_user}",
      "gists_url": "https://api.github.com/users/gakonst/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gakonst/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gakonst/subscriptions",
      "organizations_url": "https://api.github.com/users/gakonst/orgs",
      "repos_url": "https://api.github.com/users/gakonst/repos",
      "events_url": "https://api.github.com/users/gakonst/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gakonst/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-07T20:38:58Z",
    "updated_at": "2022-03-07T20:38:58Z",
    "author_association": "MEMBER",
    "body": "Any reason why we cannot avoid the abi encode like this?\r\n\r\n```solidity\r\nstruct Case {\r\n   uint256 a;\r\n   uint256 b;\r\n   uint256 expected;\r\n}\r\n\r\nfunction setUpTableSums() public returns (Case[] memory) {\r\n  Case[] memory entries = new Case[](2);\r\n  entries[0] = Case(1, 2, 3);\r\n  entries[1] = Case(4, 5, 9);\r\n}\r\n\r\nfunction testTableSums(Case memory case) public {\r\n  assertEq(case.a + case.b, case.expected);\r\n}\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1061114176/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1061166231",
    "html_url": "https://github.com/foundry-rs/foundry/issues/858#issuecomment-1061166231",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/858",
    "id": 1061166231,
    "node_id": "IC_kwDOGBlvNc4_QByX",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-07T21:42:40Z",
    "updated_at": "2022-03-07T21:42:40Z",
    "author_association": "MEMBER",
    "body": "Hmm, thinking about it, you're right. Since we have the ABI we would know how to serialize/deserialize the return data",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1061166231/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1077713725",
    "html_url": "https://github.com/foundry-rs/foundry/issues/858#issuecomment-1077713725",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/858",
    "id": 1077713725,
    "node_id": "IC_kwDOGBlvNc5APJs9",
    "user": {
      "login": "d-xo",
      "id": 6689924,
      "node_id": "MDQ6VXNlcjY2ODk5MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6689924?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/d-xo",
      "html_url": "https://github.com/d-xo",
      "followers_url": "https://api.github.com/users/d-xo/followers",
      "following_url": "https://api.github.com/users/d-xo/following{/other_user}",
      "gists_url": "https://api.github.com/users/d-xo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/d-xo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/d-xo/subscriptions",
      "organizations_url": "https://api.github.com/users/d-xo/orgs",
      "repos_url": "https://api.github.com/users/d-xo/repos",
      "events_url": "https://api.github.com/users/d-xo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/d-xo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-24T14:50:53Z",
    "updated_at": "2022-03-24T14:50:53Z",
    "author_association": "NONE",
    "body": "Maybe you could use some magic modifiers that you pull out of the solidity AST at test time? The following could be interpreted as \"fuzz `testTableSums`, always using the provided concrete inputs as a part of the fuzzing campaign\".\r\n\r\n```solidity\r\nmodifier inputSums(uint a, uint b, uint expected) { _; }\r\n\r\nfunction testTableSums(uint a, uint b, uint expected) \r\n  public\r\n  inputSums(1, 2, 3)\r\n  inputSums(4, 5, 9)\r\n{\r\n  assertEq(a + b, expected);\r\n}\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1077713725/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1077716703",
    "html_url": "https://github.com/foundry-rs/foundry/issues/858#issuecomment-1077716703",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/858",
    "id": 1077716703,
    "node_id": "IC_kwDOGBlvNc5APKbf",
    "user": {
      "login": "d-xo",
      "id": 6689924,
      "node_id": "MDQ6VXNlcjY2ODk5MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6689924?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/d-xo",
      "html_url": "https://github.com/d-xo",
      "followers_url": "https://api.github.com/users/d-xo/followers",
      "following_url": "https://api.github.com/users/d-xo/following{/other_user}",
      "gists_url": "https://api.github.com/users/d-xo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/d-xo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/d-xo/subscriptions",
      "organizations_url": "https://api.github.com/users/d-xo/orgs",
      "repos_url": "https://api.github.com/users/d-xo/repos",
      "events_url": "https://api.github.com/users/d-xo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/d-xo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-24T14:53:25Z",
    "updated_at": "2022-03-24T14:53:25Z",
    "author_association": "NONE",
    "body": "I guess it should also be possible to parse some custom natspec comments with a list of inputs?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1077716703/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1078427963",
    "html_url": "https://github.com/foundry-rs/foundry/issues/858#issuecomment-1078427963",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/858",
    "id": 1078427963,
    "node_id": "IC_kwDOGBlvNc5AR4E7",
    "user": {
      "login": "emilianobonassi",
      "id": 8052911,
      "node_id": "MDQ6VXNlcjgwNTI5MTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8052911?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/emilianobonassi",
      "html_url": "https://github.com/emilianobonassi",
      "followers_url": "https://api.github.com/users/emilianobonassi/followers",
      "following_url": "https://api.github.com/users/emilianobonassi/following{/other_user}",
      "gists_url": "https://api.github.com/users/emilianobonassi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/emilianobonassi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/emilianobonassi/subscriptions",
      "organizations_url": "https://api.github.com/users/emilianobonassi/orgs",
      "repos_url": "https://api.github.com/users/emilianobonassi/repos",
      "events_url": "https://api.github.com/users/emilianobonassi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/emilianobonassi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-24T22:05:49Z",
    "updated_at": "2022-03-24T22:06:01Z",
    "author_association": "NONE",
    "body": "+1 to this feature\r\n\r\nas a workaround i am actually using a modifier iterating over cases\r\n\r\n```solidity\r\nstruct Case {\r\n  uint256 a;\r\n  uint256 b;\r\n  uint256 expected;\r\n}\r\n\r\nCase[] entries;\r\n\r\nCase c;\r\n\r\nmodifier parametrizedTest() {\r\n  for (uint256 i = 0; i < entries.length; i++) {\r\n    c = entries[i];\r\n    _;\r\n  }\r\n}\r\n\r\nfunction setUp() public override {\r\n  entries.push(Case(1, 2, 3));\r\n  entries.push(Case(4, 5, 9));\r\n}\r\n\r\nfunction testTableSums() public parametrizedTest {\r\n  assertEq(c.a + c.b, c.expected);\r\n}\r\n\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1078427963/reactions",
      "total_count": 7,
      "+1": 6,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 1,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1081628565",
    "html_url": "https://github.com/foundry-rs/foundry/issues/858#issuecomment-1081628565",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/858",
    "id": 1081628565,
    "node_id": "IC_kwDOGBlvNc5AeFeV",
    "user": {
      "login": "sambacha",
      "id": 32783916,
      "node_id": "MDQ6VXNlcjMyNzgzOTE2",
      "avatar_url": "https://avatars.githubusercontent.com/u/32783916?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sambacha",
      "html_url": "https://github.com/sambacha",
      "followers_url": "https://api.github.com/users/sambacha/followers",
      "following_url": "https://api.github.com/users/sambacha/following{/other_user}",
      "gists_url": "https://api.github.com/users/sambacha/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sambacha/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sambacha/subscriptions",
      "organizations_url": "https://api.github.com/users/sambacha/orgs",
      "repos_url": "https://api.github.com/users/sambacha/repos",
      "events_url": "https://api.github.com/users/sambacha/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sambacha/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-29T09:15:37Z",
    "updated_at": "2022-03-29T09:15:37Z",
    "author_association": "CONTRIBUTOR",
    "body": "> I guess it should also be possible to parse some custom natspec comments with a list of inputs?\r\n\r\n0.8.13 supports the natspec directive of custom now\r\n\r\n```jsonc\r\n// from https://github.com/contractshark/vscode-solidity-extenstion/pull/7/files#diff-9b75242a14d24953968395cc5a946df5d3bdda1043d761a91e8d3f10157aa016R117-R120\r\n\r\n// https://docs.soliditylang.org/en/latest/natspec-format.html#tags\r\n  \"natspec-tag-custom\": {\r\n            \"match\": \"(@custom:)\\\\b\",\r\n            \"name\": \"storage.type.custom.natspec\"\r\n        },\r\n```\r\n\r\nsomething like `@custom:requires $TEST_ACCOUNT` etc etc  see https://github.com/gakonst/foundry/issues/979\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1081628565/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1236683350",
    "html_url": "https://github.com/foundry-rs/foundry/issues/858#issuecomment-1236683350",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/858",
    "id": 1236683350,
    "node_id": "IC_kwDOGBlvNc5JtkpW",
    "user": {
      "login": "PaulRBerg",
      "id": 8782666,
      "node_id": "MDQ6VXNlcjg3ODI2NjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8782666?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PaulRBerg",
      "html_url": "https://github.com/PaulRBerg",
      "followers_url": "https://api.github.com/users/PaulRBerg/followers",
      "following_url": "https://api.github.com/users/PaulRBerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/PaulRBerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PaulRBerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PaulRBerg/subscriptions",
      "organizations_url": "https://api.github.com/users/PaulRBerg/orgs",
      "repos_url": "https://api.github.com/users/PaulRBerg/repos",
      "events_url": "https://api.github.com/users/PaulRBerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PaulRBerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-05T08:19:06Z",
    "updated_at": "2022-09-05T08:19:06Z",
    "author_association": "CONTRIBUTOR",
    "body": "+1 for this feature. I'm porting my math library to Foundry and there are lots and lots of situations where table tests would be useful.\r\n\r\nPossibly dumb question, but couldn't we abstract away the ABI encoding in the case of integers? I imagine that the most needed variable type for table tests will be `uint256`.\r\n\r\n```solidity\r\nfunction setUpTableSums() public returns (uint256[] memory) {\r\n    uint256[] memory entries = new uint256[](2);\r\n    entries[0] = 4;\r\n    entries[1] = 5;\r\n}\r\n```\r\n\r\nCouldn't Foundry ABI encode and decode these, under the hood?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1236683350/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1236870228",
    "html_url": "https://github.com/foundry-rs/foundry/issues/858#issuecomment-1236870228",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/858",
    "id": 1236870228,
    "node_id": "IC_kwDOGBlvNc5JuSRU",
    "user": {
      "login": "PaulRBerg",
      "id": 8782666,
      "node_id": "MDQ6VXNlcjg3ODI2NjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8782666?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PaulRBerg",
      "html_url": "https://github.com/PaulRBerg",
      "followers_url": "https://api.github.com/users/PaulRBerg/followers",
      "following_url": "https://api.github.com/users/PaulRBerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/PaulRBerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PaulRBerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PaulRBerg/subscriptions",
      "organizations_url": "https://api.github.com/users/PaulRBerg/orgs",
      "repos_url": "https://api.github.com/users/PaulRBerg/repos",
      "events_url": "https://api.github.com/users/PaulRBerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PaulRBerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-05T11:23:39Z",
    "updated_at": "2022-09-05T11:23:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "In the meantime, if you're using @emilianobonassi's solution (which is great!) and compiling with Solidity v0.8, consider wrapping the increment in an `unchecked` block:\r\n\r\n```solidity\r\nmodifier parametrizedTest() {\r\n    for (uint256 i = 0; i < entries.length) {\r\n        c = entries[i];\r\n        _;\r\n        unchecked {\r\n            i += 1;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nThis should make the execution slightly faster, especially if you have lots of test cases.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1236870228/reactions",
      "total_count": 3,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 1
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1259989973",
    "html_url": "https://github.com/foundry-rs/foundry/issues/858#issuecomment-1259989973",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/858",
    "id": 1259989973,
    "node_id": "IC_kwDOGBlvNc5LGevV",
    "user": {
      "login": "ChainsightLabs",
      "id": 97004363,
      "node_id": "U_kgDOBcgrSw",
      "avatar_url": "https://avatars.githubusercontent.com/u/97004363?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ChainsightLabs",
      "html_url": "https://github.com/ChainsightLabs",
      "followers_url": "https://api.github.com/users/ChainsightLabs/followers",
      "following_url": "https://api.github.com/users/ChainsightLabs/following{/other_user}",
      "gists_url": "https://api.github.com/users/ChainsightLabs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ChainsightLabs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ChainsightLabs/subscriptions",
      "organizations_url": "https://api.github.com/users/ChainsightLabs/orgs",
      "repos_url": "https://api.github.com/users/ChainsightLabs/repos",
      "events_url": "https://api.github.com/users/ChainsightLabs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ChainsightLabs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-27T20:05:37Z",
    "updated_at": "2022-09-27T20:05:37Z",
    "author_association": "NONE",
    "body": "> Any reason why we cannot avoid the abi encode like this?\r\n> \r\n> ```solidity\r\n> struct Case {\r\n>    uint256 a;\r\n>    uint256 b;\r\n>    uint256 expected;\r\n> }\r\n> \r\n> function setUpTableSums() public returns (Case[] memory) {\r\n>   Case[] memory entries = new Case[](2);\r\n>   entries[0] = Case(1, 2, 3);\r\n>   entries[1] = Case(4, 5, 9);\r\n> }\r\n> \r\n> function testTableSums(Case memory case) public {\r\n>   assertEq(case.a + case.b, case.expected);\r\n> }\r\n> ```\r\n\r\nThis pattern looks good.  It lets the user define their own table entry structure as fancy or dumbed down as they like.\r\n\r\nWe would definitely use table tests to set up test inputs that reside inside .csv files or json tables.  You can do it now, but it is hard to parallelize and can take quite some time if you are forking on many blocks with the parallelization. ",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1259989973/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1261033249",
    "html_url": "https://github.com/foundry-rs/foundry/issues/858#issuecomment-1261033249",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/858",
    "id": 1261033249,
    "node_id": "IC_kwDOGBlvNc5LKdch",
    "user": {
      "login": "ChainsightLabs",
      "id": 97004363,
      "node_id": "U_kgDOBcgrSw",
      "avatar_url": "https://avatars.githubusercontent.com/u/97004363?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ChainsightLabs",
      "html_url": "https://github.com/ChainsightLabs",
      "followers_url": "https://api.github.com/users/ChainsightLabs/followers",
      "following_url": "https://api.github.com/users/ChainsightLabs/following{/other_user}",
      "gists_url": "https://api.github.com/users/ChainsightLabs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ChainsightLabs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ChainsightLabs/subscriptions",
      "organizations_url": "https://api.github.com/users/ChainsightLabs/orgs",
      "repos_url": "https://api.github.com/users/ChainsightLabs/repos",
      "events_url": "https://api.github.com/users/ChainsightLabs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ChainsightLabs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-28T14:52:10Z",
    "updated_at": "2022-09-28T14:52:10Z",
    "author_association": "NONE",
    "body": "> In the meantime, if you're using @emilianobonassi's solution (which is great!) and compiling with Solidity v0.8, consider wrapping the increment in an `unchecked` block:\r\n> \r\n> ```solidity\r\n> modifier parametrizedTest() {\r\n>     for (uint256 i = 0; i < entries.length) {\r\n>         c = entries[i];\r\n>         _;\r\n>         unchecked {\r\n>             i += 1;\r\n>         }\r\n>     }\r\n> }\r\n> ```\r\n> \r\n> This should make the execution slightly faster, especially if you have lots of test cases.\r\n\r\nUnfortunately, I think this solution does not parallelize each entry in the evm test runner, right?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1261033249/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1261036372",
    "html_url": "https://github.com/foundry-rs/foundry/issues/858#issuecomment-1261036372",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/858",
    "id": 1261036372,
    "node_id": "IC_kwDOGBlvNc5LKeNU",
    "user": {
      "login": "PaulRBerg",
      "id": 8782666,
      "node_id": "MDQ6VXNlcjg3ODI2NjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8782666?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PaulRBerg",
      "html_url": "https://github.com/PaulRBerg",
      "followers_url": "https://api.github.com/users/PaulRBerg/followers",
      "following_url": "https://api.github.com/users/PaulRBerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/PaulRBerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PaulRBerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PaulRBerg/subscriptions",
      "organizations_url": "https://api.github.com/users/PaulRBerg/orgs",
      "repos_url": "https://api.github.com/users/PaulRBerg/repos",
      "events_url": "https://api.github.com/users/PaulRBerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PaulRBerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-28T14:54:25Z",
    "updated_at": "2022-09-28T14:54:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "@ChainsightLabs it doesn't, but it's fast enough for my needs.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1261036372/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1318543549",
    "html_url": "https://github.com/foundry-rs/foundry/issues/858#issuecomment-1318543549",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/858",
    "id": 1318543549,
    "node_id": "IC_kwDOGBlvNc5Ol2C9",
    "user": {
      "login": "PaulRBerg",
      "id": 8782666,
      "node_id": "MDQ6VXNlcjg3ODI2NjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8782666?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PaulRBerg",
      "html_url": "https://github.com/PaulRBerg",
      "followers_url": "https://api.github.com/users/PaulRBerg/followers",
      "following_url": "https://api.github.com/users/PaulRBerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/PaulRBerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PaulRBerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PaulRBerg/subscriptions",
      "organizations_url": "https://api.github.com/users/PaulRBerg/orgs",
      "repos_url": "https://api.github.com/users/PaulRBerg/repos",
      "events_url": "https://api.github.com/users/PaulRBerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PaulRBerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-17T12:09:44Z",
    "updated_at": "2022-11-17T12:09:56Z",
    "author_association": "CONTRIBUTOR",
    "body": "One downside to @emilianobonassi's solution is that it fudges the gas reports. Extra gas has to be spent on pushing the entries in the storage array.\r\n\r\nUnfortunately I can't think of any workaround to this issue .. except for Foundry supporting native table tests and handling the gas metering for us.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1318543549/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1318553101",
    "html_url": "https://github.com/foundry-rs/foundry/issues/858#issuecomment-1318553101",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/858",
    "id": 1318553101,
    "node_id": "IC_kwDOGBlvNc5Ol4YN",
    "user": {
      "login": "emilianobonassi",
      "id": 8052911,
      "node_id": "MDQ6VXNlcjgwNTI5MTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8052911?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/emilianobonassi",
      "html_url": "https://github.com/emilianobonassi",
      "followers_url": "https://api.github.com/users/emilianobonassi/followers",
      "following_url": "https://api.github.com/users/emilianobonassi/following{/other_user}",
      "gists_url": "https://api.github.com/users/emilianobonassi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/emilianobonassi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/emilianobonassi/subscriptions",
      "organizations_url": "https://api.github.com/users/emilianobonassi/orgs",
      "repos_url": "https://api.github.com/users/emilianobonassi/repos",
      "events_url": "https://api.github.com/users/emilianobonassi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/emilianobonassi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-17T12:17:57Z",
    "updated_at": "2022-11-17T12:17:57Z",
    "author_association": "NONE",
    "body": "> One downside to @emilianobonassi's solution is that it fudges the gas reports. Extra gas has to be spent on pushing the entries in the storage array.\r\n> \r\n> Unfortunately I can't think of any workaround to this issue .. except for Foundry supporting native table tests and handling the gas metering for us.\r\n\r\nyep @paulrberg \r\n\r\nnot sure how much will save but you can delete the array entries after the execution in the modifier\r\n\r\nanother proposal would be do a smoketest which print how much gas a noop test will need for your cases so you can offset from the real tests (this is what i actually use)\r\n\r\nanother one, but we need to await for eip inclusion, is to support transient storage tload/tstore",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1318553101/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1318566181",
    "html_url": "https://github.com/foundry-rs/foundry/issues/858#issuecomment-1318566181",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/858",
    "id": 1318566181,
    "node_id": "IC_kwDOGBlvNc5Ol7kl",
    "user": {
      "login": "PaulRBerg",
      "id": 8782666,
      "node_id": "MDQ6VXNlcjg3ODI2NjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8782666?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PaulRBerg",
      "html_url": "https://github.com/PaulRBerg",
      "followers_url": "https://api.github.com/users/PaulRBerg/followers",
      "following_url": "https://api.github.com/users/PaulRBerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/PaulRBerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PaulRBerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PaulRBerg/subscriptions",
      "organizations_url": "https://api.github.com/users/PaulRBerg/orgs",
      "repos_url": "https://api.github.com/users/PaulRBerg/repos",
      "events_url": "https://api.github.com/users/PaulRBerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PaulRBerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-17T12:28:49Z",
    "updated_at": "2022-11-17T12:32:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "Deleting the array doesn't reduce the gas cost significantly (due to EIP-3529).\r\n\r\nTransient storage will be great when it is finally available.\r\n\r\nInteresting idea with the smoketest but it wouldn't work in my case because I have many different numbers of array entries per test. There's no baseline \"noop test\".",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1318566181/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1318569275",
    "html_url": "https://github.com/foundry-rs/foundry/issues/858#issuecomment-1318569275",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/858",
    "id": 1318569275,
    "node_id": "IC_kwDOGBlvNc5Ol8U7",
    "user": {
      "login": "emilianobonassi",
      "id": 8052911,
      "node_id": "MDQ6VXNlcjgwNTI5MTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8052911?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/emilianobonassi",
      "html_url": "https://github.com/emilianobonassi",
      "followers_url": "https://api.github.com/users/emilianobonassi/followers",
      "following_url": "https://api.github.com/users/emilianobonassi/following{/other_user}",
      "gists_url": "https://api.github.com/users/emilianobonassi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/emilianobonassi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/emilianobonassi/subscriptions",
      "organizations_url": "https://api.github.com/users/emilianobonassi/orgs",
      "repos_url": "https://api.github.com/users/emilianobonassi/repos",
      "events_url": "https://api.github.com/users/emilianobonassi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/emilianobonassi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-17T12:31:33Z",
    "updated_at": "2022-11-17T12:31:33Z",
    "author_association": "NONE",
    "body": "not sure yet possible in foundry but a cheatcode to change gasleft offsetting in the modifier will make it\r\n\r\nthe cheatcode will be useful too to test gas-dependant logics",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1318569275/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 1
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1318569956",
    "html_url": "https://github.com/foundry-rs/foundry/issues/858#issuecomment-1318569956",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/858",
    "id": 1318569956,
    "node_id": "IC_kwDOGBlvNc5Ol8fk",
    "user": {
      "login": "PaulRBerg",
      "id": 8782666,
      "node_id": "MDQ6VXNlcjg3ODI2NjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8782666?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PaulRBerg",
      "html_url": "https://github.com/PaulRBerg",
      "followers_url": "https://api.github.com/users/PaulRBerg/followers",
      "following_url": "https://api.github.com/users/PaulRBerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/PaulRBerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PaulRBerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PaulRBerg/subscriptions",
      "organizations_url": "https://api.github.com/users/PaulRBerg/orgs",
      "repos_url": "https://api.github.com/users/PaulRBerg/repos",
      "events_url": "https://api.github.com/users/PaulRBerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PaulRBerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-17T12:32:14Z",
    "updated_at": "2022-11-17T12:32:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "Big brain idea.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1318569956/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1318742150",
    "html_url": "https://github.com/foundry-rs/foundry/issues/858#issuecomment-1318742150",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/858",
    "id": 1318742150,
    "node_id": "IC_kwDOGBlvNc5OmmiG",
    "user": {
      "login": "emilianobonassi",
      "id": 8052911,
      "node_id": "MDQ6VXNlcjgwNTI5MTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8052911?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/emilianobonassi",
      "html_url": "https://github.com/emilianobonassi",
      "followers_url": "https://api.github.com/users/emilianobonassi/followers",
      "following_url": "https://api.github.com/users/emilianobonassi/following{/other_user}",
      "gists_url": "https://api.github.com/users/emilianobonassi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/emilianobonassi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/emilianobonassi/subscriptions",
      "organizations_url": "https://api.github.com/users/emilianobonassi/orgs",
      "repos_url": "https://api.github.com/users/emilianobonassi/repos",
      "events_url": "https://api.github.com/users/emilianobonassi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/emilianobonassi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-17T14:44:00Z",
    "updated_at": "2022-11-17T14:44:00Z",
    "author_association": "NONE",
    "body": "should not be hard\r\n\r\nunderlying evm supports gas reset\r\n\r\nhttps://github.com/bluealloy/revm/blob/main/crates/revm/src/gas.rs#L45\r\n\r\nshould be properly exposed as cheatcode \r\n\r\nhttps://github.com/foundry-rs/foundry/blob/master/evm/src/executor/inspector/cheatcodes/mod.rs#L177",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1318742150/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 1,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1318745138",
    "html_url": "https://github.com/foundry-rs/foundry/issues/858#issuecomment-1318745138",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/858",
    "id": 1318745138,
    "node_id": "IC_kwDOGBlvNc5OmnQy",
    "user": {
      "login": "emilianobonassi",
      "id": 8052911,
      "node_id": "MDQ6VXNlcjgwNTI5MTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8052911?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/emilianobonassi",
      "html_url": "https://github.com/emilianobonassi",
      "followers_url": "https://api.github.com/users/emilianobonassi/followers",
      "following_url": "https://api.github.com/users/emilianobonassi/following{/other_user}",
      "gists_url": "https://api.github.com/users/emilianobonassi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/emilianobonassi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/emilianobonassi/subscriptions",
      "organizations_url": "https://api.github.com/users/emilianobonassi/orgs",
      "repos_url": "https://api.github.com/users/emilianobonassi/repos",
      "events_url": "https://api.github.com/users/emilianobonassi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/emilianobonassi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-17T14:46:10Z",
    "updated_at": "2022-11-17T14:46:10Z",
    "author_association": "NONE",
    "body": "related to #2429",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1318745138/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1319054077",
    "html_url": "https://github.com/foundry-rs/foundry/issues/858#issuecomment-1319054077",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/858",
    "id": 1319054077,
    "node_id": "IC_kwDOGBlvNc5Onyr9",
    "user": {
      "login": "gakonst",
      "id": 17802178,
      "node_id": "MDQ6VXNlcjE3ODAyMTc4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17802178?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gakonst",
      "html_url": "https://github.com/gakonst",
      "followers_url": "https://api.github.com/users/gakonst/followers",
      "following_url": "https://api.github.com/users/gakonst/following{/other_user}",
      "gists_url": "https://api.github.com/users/gakonst/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gakonst/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gakonst/subscriptions",
      "organizations_url": "https://api.github.com/users/gakonst/orgs",
      "repos_url": "https://api.github.com/users/gakonst/repos",
      "events_url": "https://api.github.com/users/gakonst/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gakonst/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-17T18:42:35Z",
    "updated_at": "2022-11-17T18:42:44Z",
    "author_association": "MEMBER",
    "body": "> Any reason why we cannot avoid the abi encode like this?\r\n> \r\n> ```solidity\r\n> struct Case {\r\n>    uint256 a;\r\n>    uint256 b;\r\n>    uint256 expected;\r\n> }\r\n> \r\n> function setUpTableSums() public returns (Case[] memory) {\r\n>   Case[] memory entries = new Case[](2);\r\n>   entries[0] = Case(1, 2, 3);\r\n>   entries[1] = Case(4, 5, 9);\r\n> }\r\n> \r\n> function testTableSums(Case memory case) public {\r\n>   assertEq(case.a + case.b, case.expected);\r\n> }\r\n> ```\r\n\r\nFeeling strongly about this being the \"right\" solution here but open minded to alternatives.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1319054077/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1320418136",
    "html_url": "https://github.com/foundry-rs/foundry/issues/858#issuecomment-1320418136",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/858",
    "id": 1320418136,
    "node_id": "IC_kwDOGBlvNc5Os_tY",
    "user": {
      "login": "ChainsightLabs",
      "id": 97004363,
      "node_id": "U_kgDOBcgrSw",
      "avatar_url": "https://avatars.githubusercontent.com/u/97004363?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ChainsightLabs",
      "html_url": "https://github.com/ChainsightLabs",
      "followers_url": "https://api.github.com/users/ChainsightLabs/followers",
      "following_url": "https://api.github.com/users/ChainsightLabs/following{/other_user}",
      "gists_url": "https://api.github.com/users/ChainsightLabs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ChainsightLabs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ChainsightLabs/subscriptions",
      "organizations_url": "https://api.github.com/users/ChainsightLabs/orgs",
      "repos_url": "https://api.github.com/users/ChainsightLabs/repos",
      "events_url": "https://api.github.com/users/ChainsightLabs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ChainsightLabs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-18T19:03:32Z",
    "updated_at": "2022-11-18T19:03:32Z",
    "author_association": "NONE",
    "body": "I keep coming upon use cases for this feature, does anyone else agree that the priority could be bumped up from Low to something higher?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1320418136/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1320805457",
    "html_url": "https://github.com/foundry-rs/foundry/issues/858#issuecomment-1320805457",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/858",
    "id": 1320805457,
    "node_id": "IC_kwDOGBlvNc5OueRR",
    "user": {
      "login": "gakonst",
      "id": 17802178,
      "node_id": "MDQ6VXNlcjE3ODAyMTc4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17802178?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gakonst",
      "html_url": "https://github.com/gakonst",
      "followers_url": "https://api.github.com/users/gakonst/followers",
      "following_url": "https://api.github.com/users/gakonst/following{/other_user}",
      "gists_url": "https://api.github.com/users/gakonst/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gakonst/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gakonst/subscriptions",
      "organizations_url": "https://api.github.com/users/gakonst/orgs",
      "repos_url": "https://api.github.com/users/gakonst/repos",
      "events_url": "https://api.github.com/users/gakonst/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gakonst/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-19T05:16:47Z",
    "updated_at": "2022-11-19T05:16:47Z",
    "author_association": "MEMBER",
    "body": "Sounds good - happy to provide resources for reviewing the PR if somebody would be up for taking a first stab at it. Need to think about if we can actually prioritize this - please give me some time on that.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1320805457/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1321886457",
    "html_url": "https://github.com/foundry-rs/foundry/issues/858#issuecomment-1321886457",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/858",
    "id": 1321886457,
    "node_id": "IC_kwDOGBlvNc5OymL5",
    "user": {
      "login": "PaulRBerg",
      "id": 8782666,
      "node_id": "MDQ6VXNlcjg3ODI2NjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8782666?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PaulRBerg",
      "html_url": "https://github.com/PaulRBerg",
      "followers_url": "https://api.github.com/users/PaulRBerg/followers",
      "following_url": "https://api.github.com/users/PaulRBerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/PaulRBerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PaulRBerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PaulRBerg/subscriptions",
      "organizations_url": "https://api.github.com/users/PaulRBerg/orgs",
      "repos_url": "https://api.github.com/users/PaulRBerg/repos",
      "events_url": "https://api.github.com/users/PaulRBerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PaulRBerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-21T11:10:03Z",
    "updated_at": "2022-11-25T14:38:49Z",
    "author_association": "CONTRIBUTOR",
    "body": "Just bumped into another limitation of the `parametrizedTest` modifier solution proposed above - it doesn't work for tests that expect reverts!\r\n\r\n```solidity\r\nfunction testTableSums() public parametrizedTest {\r\n    vm.expectRevert();\r\n    callSomeFunction(c.a, c.b);\r\n}\r\n```\r\n\r\nThe test will show as passed, but it will stop looking for additional reverts once it reaches the first revert.\r\n\r\nThis is probably related to https://github.com/foundry-rs/foundry/issues/3723.\r\n\r\n**Update**: yes, can confirm that this problem is related to #3723, albeit in a very specific circumstance. When you are testing free functions, you cannot have multiple `vm.expectRevert` statements for multiple calls to free functions.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1321886457/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1407958844",
    "html_url": "https://github.com/foundry-rs/foundry/issues/858#issuecomment-1407958844",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/858",
    "id": 1407958844,
    "node_id": "IC_kwDOGBlvNc5T6788",
    "user": {
      "login": "ChainsightLabs",
      "id": 97004363,
      "node_id": "U_kgDOBcgrSw",
      "avatar_url": "https://avatars.githubusercontent.com/u/97004363?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ChainsightLabs",
      "html_url": "https://github.com/ChainsightLabs",
      "followers_url": "https://api.github.com/users/ChainsightLabs/followers",
      "following_url": "https://api.github.com/users/ChainsightLabs/following{/other_user}",
      "gists_url": "https://api.github.com/users/ChainsightLabs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ChainsightLabs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ChainsightLabs/subscriptions",
      "organizations_url": "https://api.github.com/users/ChainsightLabs/orgs",
      "repos_url": "https://api.github.com/users/ChainsightLabs/repos",
      "events_url": "https://api.github.com/users/ChainsightLabs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ChainsightLabs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-30T04:01:12Z",
    "updated_at": "2023-01-30T04:01:12Z",
    "author_association": "NONE",
    "body": "bump",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1407958844/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1408081528",
    "html_url": "https://github.com/foundry-rs/foundry/issues/858#issuecomment-1408081528",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/858",
    "id": 1408081528,
    "node_id": "IC_kwDOGBlvNc5T7Z54",
    "user": {
      "login": "PaulRBerg",
      "id": 8782666,
      "node_id": "MDQ6VXNlcjg3ODI2NjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8782666?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PaulRBerg",
      "html_url": "https://github.com/PaulRBerg",
      "followers_url": "https://api.github.com/users/PaulRBerg/followers",
      "following_url": "https://api.github.com/users/PaulRBerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/PaulRBerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PaulRBerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PaulRBerg/subscriptions",
      "organizations_url": "https://api.github.com/users/PaulRBerg/orgs",
      "repos_url": "https://api.github.com/users/PaulRBerg/repos",
      "events_url": "https://api.github.com/users/PaulRBerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PaulRBerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-30T06:51:37Z",
    "updated_at": "2023-01-30T06:51:37Z",
    "author_association": "CONTRIBUTOR",
    "body": "@ChainsightLabs in the meantime, take a look at how I implemented parameterized tests in my math library PRBMath:\r\n\r\n- https://github.com/PaulRBerg/prb-math/blob/c7f76a7179afecefc0df3819e9bc4d2f8a20230c/test/ud60x18/UD60x18.t.sol\r\n- https://github.com/PaulRBerg/prb-math/blob/c7f76a7179afecefc0df3819e9bc4d2f8a20230c/test/ud60x18/math/avg/avg.t.sol\r\n\r\nI have extensively used the `parameterizedTest` approach suggested above.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1408081528/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
