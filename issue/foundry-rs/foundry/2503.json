{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/2503",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2503/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2503/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2503/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/2503",
  "id": 1321029994,
  "node_id": "I_kwDOGBlvNc5OvVFq",
  "number": 2503,
  "title": "Gas cost discrepancies when testing calls through a proxy",
  "user": {
    "login": "elenadimitrova",
    "id": 703848,
    "node_id": "MDQ6VXNlcjcwMzg0OA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/703848?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/elenadimitrova",
    "html_url": "https://github.com/elenadimitrova",
    "followers_url": "https://api.github.com/users/elenadimitrova/followers",
    "following_url": "https://api.github.com/users/elenadimitrova/following{/other_user}",
    "gists_url": "https://api.github.com/users/elenadimitrova/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/elenadimitrova/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/elenadimitrova/subscriptions",
    "organizations_url": "https://api.github.com/users/elenadimitrova/orgs",
    "repos_url": "https://api.github.com/users/elenadimitrova/repos",
    "events_url": "https://api.github.com/users/elenadimitrova/events{/privacy}",
    "received_events_url": "https://api.github.com/users/elenadimitrova/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3334394228,
      "node_id": "MDU6TGFiZWwzMzM0Mzk0MjI4",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-bug",
      "name": "T-bug",
      "color": "d73a4a",
      "default": false,
      "description": "Type: bug"
    },
    {
      "id": 3593644915,
      "node_id": "LA_kwDOGBlvNc7WMqtz",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/Cmd-forge-test",
      "name": "Cmd-forge-test",
      "color": "006B75",
      "default": false,
      "description": "Command: forge test"
    },
    {
      "id": 3703752787,
      "node_id": "LA_kwDOGBlvNc7cwshT",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/C-forge",
      "name": "C-forge",
      "color": "5319E7",
      "default": false,
      "description": "Command: forge"
    },
    {
      "id": 3759773804,
      "node_id": "LA_kwDOGBlvNc7gGZhs",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/A-gas-snapshots",
      "name": "A-gas-snapshots",
      "color": "FBCA04",
      "default": false,
      "description": "Area: gas snapshotting/reporting"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 7,
  "created_at": "2022-07-28T14:34:57Z",
  "updated_at": "2022-08-01T17:06:30Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "### Component\n\nForge\n\n### Have you ensured that all of these are up to date?\n\n- [X] Foundry\n- [X] Foundryup\n\n### What version of Foundry are you on?\n\nforge 0.2.0 (33dbaa5 2022-07-23T00:04:10.615195Z)\n\n### What command(s) is the bug in?\n\nforge test --gas-report\n\n### Operating System\n\nmacOS (Apple Silicon)\n\n### Describe the bug\n\nWhen comparing the gas cost test results between `hardhat-gas-reporter` and `foundry` they significantly differ for the following sample test cases:\r\na) ContractA.mint() calling external contract ContractB.mint() where ContractB is the implementation of a Minimal Proxy \r\n\r\nfoundry reports 68,530 gas\r\nhardhat reports 105,796 gas\r\n\r\nb) ContractB.mint() getting called on top of an implementation Proxy (where ContractB is the implementation set on Proxy)\r\n\r\nfoundry reports 68,992 gas\r\nhardhat reports 93,040 gas\r\n\r\nI would normally expect test case a) to be more expensive than test case b) as it is doing a cross contract call (even if in test case B the proxy does an extra read from storage to get implementation address). \r\n\r\nAdditionally (as this maybe related symptom), when measuring gas costs for calls routed through a proxy referencing an implementation contract, there are two sets of gas costs `foundry` reports, one for the Proxy itself and another for the implementation contract as seen in screenshot below\r\n\r\n<img width=\"1223\" alt=\"Screenshot 2022-07-27 at 20 47 32\" src=\"https://user-images.githubusercontent.com/703848/181529050-1f36fa29-1cd7-4a48-874a-df4754895efc.png\">\r\n\r\nHowever when a different proxy is used that does no local storage reads (e.g. a minimal proxy or the same as above but with immutable implementation instantiated in the proxy constructor) the Proxy gas cost table is no longer displayed and only implementation costs show.\r\n ",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/2503/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2503/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1198320829",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2503#issuecomment-1198320829",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2503",
    "id": 1198320829,
    "node_id": "IC_kwDOGBlvNc5HbOy9",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-28T15:37:35Z",
    "updated_at": "2022-07-28T15:38:31Z",
    "author_association": "MEMBER",
    "body": "Are the first gas numbers from `forge test` or from `forge test --gas-report`? Also, it is expected that there are two sets of reports (one for proxy, one for implementation) as we do not give special treatment to proxies (and probably won't). I would expect the gas to differ somewhat since Forge still obeys cold/warm account and storage slots, so given everything is in the context of one call, you may end up in situations where the gas cost is lower because the slot or account is already warm when called\r\n\r\nAnother thing to note is that the gas report from `forge test --gas-report` does not include the 21000 gas stipend which seems to make up most of the difference.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1198320829/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1198469886",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2503#issuecomment-1198469886",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2503",
    "id": 1198469886,
    "node_id": "IC_kwDOGBlvNc5HbzL-",
    "user": {
      "login": "elenadimitrova",
      "id": 703848,
      "node_id": "MDQ6VXNlcjcwMzg0OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/703848?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/elenadimitrova",
      "html_url": "https://github.com/elenadimitrova",
      "followers_url": "https://api.github.com/users/elenadimitrova/followers",
      "following_url": "https://api.github.com/users/elenadimitrova/following{/other_user}",
      "gists_url": "https://api.github.com/users/elenadimitrova/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/elenadimitrova/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/elenadimitrova/subscriptions",
      "organizations_url": "https://api.github.com/users/elenadimitrova/orgs",
      "repos_url": "https://api.github.com/users/elenadimitrova/repos",
      "events_url": "https://api.github.com/users/elenadimitrova/events{/privacy}",
      "received_events_url": "https://api.github.com/users/elenadimitrova/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-28T18:08:02Z",
    "updated_at": "2022-07-28T18:24:13Z",
    "author_association": "NONE",
    "body": "First gas numbers are from `forge test --gas-report`\r\n\r\nI still don't understand the separate reports you have for the proxy and the implementation, what are you saying is the difference for example for the call to `mint` function which is only ever called once in the test but is reported under both the Proxy and the implementation?\r\n\r\nAs for the cold/warm storage costs, that cannot explain the gas cost difference as I am executing the exact same single unit test on `foundry` and `hardhat` and executing both on a clean slate of contracts as you would expect in a unit test.\r\n\r\nThere is 37,266 gas difference in the first call and 24,048 gas difference in the second call so still a lot unaccounted for.\r\n\r\nEDIT: And also why the Proxy gas costs are only shown sometimes?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1198469886/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1198494083",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2503#issuecomment-1198494083",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2503",
    "id": 1198494083,
    "node_id": "IC_kwDOGBlvNc5Hb5GD",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-28T18:26:56Z",
    "updated_at": "2022-07-28T18:41:45Z",
    "author_association": "MEMBER",
    "body": "> still don't understand the separate reports you have for the proxy and the implementation, what are you saying is the difference for example for the call to mint function which is only ever called once in the test but is reported under both the Proxy and the implementation?\r\n\r\nI would assume that the proxy points to `MockSoundEditionV1`? If so, because we are constructing the gas reports using traces, the calldata will hit the proxy and the implementation, so it will show up as two calls. The gas used for the proxy accounts for all gas of the proxy itself + the call to the underlying implementation, whereas the gas usage of the second contract is just the gas usage for the logic in that contract. If we had to filter it out, we would need to give special treatment to proxies, and there are so many implementations it could prove to be somewhat unmaintainable.\r\n\r\nI think Hardhat only produces 1 report because it looks at the transaction you directly send to the RPC. We don't have an RPC, so we decode *all* calls between the contracts.\r\n\r\n>As for the cold/warm storage costs, that cannot explain the gas cost difference as I am executing the exact same single unit test on foundry and hardhat and executing both on a clean slate of contracts as you would expect in a unit test.\r\n\r\nIt can still explain some of the difference - Hardhat does RPC calls, so 100% clean slate, where a call to a test function in Foundry necessarily is already not a 100% clean slate, since there is some setup involved with calling and executing the test function itself in the first place. It might not make up for the entire difference, but I was just noting that this is something that I expect to have an impact.\r\n\r\n>There is 37,266 gas difference in the first call and 24,048 gas difference in the second call so still a lot unaccounted for.\r\n\r\nThe gas reports Forge produces is *without* the 21000 tx gas stipend, whereas I assume Hardhat includes it - that accounts for 21000 of the difference, so we have ~16k and ~3k left to account for, I assume. I'm not entirely sure how the two scenarios differ - is there a chance you could expand a bit on it?\r\n\r\n>EDIT: And also why the Proxy gas costs are only shown sometimes?\r\n\r\nNo that sounds pretty weird :thinking: Do you have some pointers on how I could maybe reproduce?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1198494083/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1199179994",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2503#issuecomment-1199179994",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2503",
    "id": 1199179994,
    "node_id": "IC_kwDOGBlvNc5Hegja",
    "user": {
      "login": "elenadimitrova",
      "id": 703848,
      "node_id": "MDQ6VXNlcjcwMzg0OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/703848?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/elenadimitrova",
      "html_url": "https://github.com/elenadimitrova",
      "followers_url": "https://api.github.com/users/elenadimitrova/followers",
      "following_url": "https://api.github.com/users/elenadimitrova/following{/other_user}",
      "gists_url": "https://api.github.com/users/elenadimitrova/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/elenadimitrova/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/elenadimitrova/subscriptions",
      "organizations_url": "https://api.github.com/users/elenadimitrova/orgs",
      "repos_url": "https://api.github.com/users/elenadimitrova/repos",
      "events_url": "https://api.github.com/users/elenadimitrova/events{/privacy}",
      "received_events_url": "https://api.github.com/users/elenadimitrova/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-29T11:40:47Z",
    "updated_at": "2022-07-29T11:40:47Z",
    "author_association": "NONE",
    "body": "I've reproduced the issue in an MVP in https://github.com/elenadimitrova/foundry-hardhat-gas-compare where you can run the two identical set of tests and see the difference between `foundry`\r\n\r\n<img width=\"1004\" alt=\"Screenshot 2022-07-29 at 14 31 31\" src=\"https://user-images.githubusercontent.com/703848/181751172-c815d926-1378-455d-a153-4d56c14d803e.png\">\r\n\r\nvs `hardhat`\r\n<img width=\"1280\" alt=\"Screenshot 2022-07-29 at 14 30 31\" src=\"https://user-images.githubusercontent.com/703848/181751184-76241456-240d-4c06-86f2-885734735c09.png\">",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1199179994/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1200304890",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2503#issuecomment-1200304890",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2503",
    "id": 1200304890,
    "node_id": "IC_kwDOGBlvNc5HizL6",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-30T22:28:32Z",
    "updated_at": "2022-07-30T22:29:25Z",
    "author_association": "MEMBER",
    "body": "1. The difference for `MinimalProxyFactory` is accounted for as explained above; Foundry's output does not include the 21000 gas stipend. There is a small difference of about 400 gas outside of that which is probably explained by the fact that the account is hot as you are not deploying the factory in `setUp`\r\n2. I would *assume* it is a similar story for the mint call on `MintModule` - both the implementation and the `MintModule` contract are hot\r\n3. The `RouterProxy` contract shows up because we analyze gas usage based on EVM traces, not individual start-to-end transactions like Hardhat does. It's not really possible for us to do it like Hardhat does, since each test is executed within the context of a single transaction\r\n\r\nI don't have a lot of time currently to go in and individually dissect each opcode to find out if there is some larger thing unaccounted for, but the EVM implementation we use conforms to the Ethereum tests that all nodes use, so I am fairly confident we are not far off\r\n\r\nWe've also investigated the smaller gas discrepancies more closely before, where we did account for it: https://github.com/mds1/convex-shutdown-simulation (see the note about Foundry)\r\n\r\nI'd love to hear some input/ideas from anyone who has suggestions on how we can improve the accuracy of the reports, but it does not seem like a trivial problem to solve due to how Forge executes tests vs other frameworks",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1200304890/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1200915276",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2503#issuecomment-1200915276",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2503",
    "id": 1200915276,
    "node_id": "IC_kwDOGBlvNc5HlINM",
    "user": {
      "login": "elenadimitrova",
      "id": 703848,
      "node_id": "MDQ6VXNlcjcwMzg0OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/703848?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/elenadimitrova",
      "html_url": "https://github.com/elenadimitrova",
      "followers_url": "https://api.github.com/users/elenadimitrova/followers",
      "following_url": "https://api.github.com/users/elenadimitrova/following{/other_user}",
      "gists_url": "https://api.github.com/users/elenadimitrova/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/elenadimitrova/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/elenadimitrova/subscriptions",
      "organizations_url": "https://api.github.com/users/elenadimitrova/orgs",
      "repos_url": "https://api.github.com/users/elenadimitrova/repos",
      "events_url": "https://api.github.com/users/elenadimitrova/events{/privacy}",
      "received_events_url": "https://api.github.com/users/elenadimitrova/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-01T08:57:20Z",
    "updated_at": "2022-08-01T08:57:20Z",
    "author_association": "NONE",
    "body": "@onbjerg I have confirmed the storage slots aren't \"hot\" as you explain, with [this commit](https://github.com/elenadimitrova/foundry-hardhat-gas-compare/commit/fc83e3b0fd953c21411ceca6de95febf3acbdda9) which is testing storage slots are \"cold\" before writing.\r\n\r\nThere is effectively around 5200-5500 unexplained gas difference in the `mint` functions in both types of proxies used. I think this is non negligible considering I am testing a minimal repro scenario, with potentially this gas difference being more significant in more complex cases.\r\n\r\n|                         | foundry                | hardhat | diff  |\r\n|-------------------------|------------------------|---------|-------|\r\n| MintImplementation.mint | 22425 + 210000 = 43425 | 48660   | -5235 |\r\n| MintModule.mint         | 23236 + 21000 = 44236  | 49808   | -5572 |\r\n\r\nThis is quite critical considering the importance of gas cost analysis in smart contracts for decision making, i.e. we are currently trying to weigh in the costs of the two different proxy patters and finding it difficult to trust what foundry reports.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1200915276/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1201475307",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2503#issuecomment-1201475307",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2503",
    "id": 1201475307,
    "node_id": "IC_kwDOGBlvNc5HnQ7r",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-01T17:05:41Z",
    "updated_at": "2022-08-01T17:06:30Z",
    "author_association": "MEMBER",
    "body": "The account is still hot, though. For more information on what that means: https://eips.ethereum.org/EIPS/eip-2929\r\n\r\nSpecifically:\r\n\r\n>When an address is either the target of a (EXTCODESIZE (0x3B), EXTCODECOPY (0x3C), EXTCODEHASH (0x3F) or BALANCE (0x31)) opcode or the target of a (CALL (0xF1), CALLCODE (0xF2), DELEGATECALL (0xF4), STATICCALL (0xFA)) opcode, the gas costs are computed as follows:\r\n>\r\n>- If the target is not in `accessed_addresses`, charge `COLD_ACCOUNT_ACCESS_COST` gas, and add the address to `accessed_addresses`.\r\n>- Otherwise, charge `WARM_STORAGE_READ_COST` gas.\r\n\r\n\r\nSince the contract is created in the same transaction as you are calling mint on it, the account itself is considered to be hot. I'm sure there are other such cases here that explain the discrepancy, since it is not only SLOAD/SSTORE that is affected by EIP 2929.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1201475307/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
