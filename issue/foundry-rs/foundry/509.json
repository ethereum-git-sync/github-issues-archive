{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/509",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/509/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/509/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/509/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/509",
  "id": 1107924964,
  "node_id": "I_kwDOGBlvNc5CCZfk",
  "number": 509,
  "title": "negative assertions",
  "user": {
    "login": "fubhy",
    "id": 1172528,
    "node_id": "MDQ6VXNlcjExNzI1Mjg=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1172528?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/fubhy",
    "html_url": "https://github.com/fubhy",
    "followers_url": "https://api.github.com/users/fubhy/followers",
    "following_url": "https://api.github.com/users/fubhy/following{/other_user}",
    "gists_url": "https://api.github.com/users/fubhy/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/fubhy/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/fubhy/subscriptions",
    "organizations_url": "https://api.github.com/users/fubhy/orgs",
    "repos_url": "https://api.github.com/users/fubhy/repos",
    "events_url": "https://api.github.com/users/fubhy/events{/privacy}",
    "received_events_url": "https://api.github.com/users/fubhy/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3593644820,
      "node_id": "LA_kwDOGBlvNc7WMqsU",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-feature",
      "name": "T-feature",
      "color": "BFD4F2",
      "default": false,
      "description": "Type: feature"
    },
    {
      "id": 3593644915,
      "node_id": "LA_kwDOGBlvNc7WMqtz",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/Cmd-forge-test",
      "name": "Cmd-forge-test",
      "color": "006B75",
      "default": false,
      "description": "Command: forge test"
    },
    {
      "id": 3703752787,
      "node_id": "LA_kwDOGBlvNc7cwshT",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/C-forge",
      "name": "C-forge",
      "color": "5319E7",
      "default": false,
      "description": "Command: forge"
    },
    {
      "id": 3703752960,
      "node_id": "LA_kwDOGBlvNc7cwskA",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/A-cheatcodes",
      "name": "A-cheatcodes",
      "color": "FBCA04",
      "default": false,
      "description": "Area: cheatcodes"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": {
    "login": "reubenr0d",
    "id": 63185771,
    "node_id": "MDQ6VXNlcjYzMTg1Nzcx",
    "avatar_url": "https://avatars.githubusercontent.com/u/63185771?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/reubenr0d",
    "html_url": "https://github.com/reubenr0d",
    "followers_url": "https://api.github.com/users/reubenr0d/followers",
    "following_url": "https://api.github.com/users/reubenr0d/following{/other_user}",
    "gists_url": "https://api.github.com/users/reubenr0d/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/reubenr0d/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/reubenr0d/subscriptions",
    "organizations_url": "https://api.github.com/users/reubenr0d/orgs",
    "repos_url": "https://api.github.com/users/reubenr0d/repos",
    "events_url": "https://api.github.com/users/reubenr0d/events{/privacy}",
    "received_events_url": "https://api.github.com/users/reubenr0d/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "reubenr0d",
      "id": 63185771,
      "node_id": "MDQ6VXNlcjYzMTg1Nzcx",
      "avatar_url": "https://avatars.githubusercontent.com/u/63185771?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/reubenr0d",
      "html_url": "https://github.com/reubenr0d",
      "followers_url": "https://api.github.com/users/reubenr0d/followers",
      "following_url": "https://api.github.com/users/reubenr0d/following{/other_user}",
      "gists_url": "https://api.github.com/users/reubenr0d/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/reubenr0d/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/reubenr0d/subscriptions",
      "organizations_url": "https://api.github.com/users/reubenr0d/orgs",
      "repos_url": "https://api.github.com/users/reubenr0d/repos",
      "events_url": "https://api.github.com/users/reubenr0d/events{/privacy}",
      "received_events_url": "https://api.github.com/users/reubenr0d/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 15,
  "created_at": "2022-01-19T10:28:24Z",
  "updated_at": "2023-05-09T15:01:37Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "Negative assertions, e.g. asserting that a certain `call` was not performed or a certain event was not `emit`ed are not very useful on their own (because they might pass for the wrong reasons, e.g. a negative assertion always passes if you simply don't do anything of course).\r\n\r\nHowever, when paired with positive assertions (e.g. asserting that the tested functionality actually performed the desired state mutation), they can be very useful to assert that a certain code path was skipped in doing so. This can be useful to test e.g. that a certain conditional was skipped.\r\n\r\nI realize that this can already be achieved at the test level with the `testFail` prefix, but that comes with different ergonomics vs. negating individual assertions.",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/509/reactions",
    "total_count": 1,
    "+1": 1,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/509/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1016369030",
    "html_url": "https://github.com/foundry-rs/foundry/issues/509#issuecomment-1016369030",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/509",
    "id": 1016369030,
    "node_id": "IC_kwDOGBlvNc48lI-G",
    "user": {
      "login": "gakonst",
      "id": 17802178,
      "node_id": "MDQ6VXNlcjE3ODAyMTc4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17802178?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gakonst",
      "html_url": "https://github.com/gakonst",
      "followers_url": "https://api.github.com/users/gakonst/followers",
      "following_url": "https://api.github.com/users/gakonst/following{/other_user}",
      "gists_url": "https://api.github.com/users/gakonst/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gakonst/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gakonst/subscriptions",
      "organizations_url": "https://api.github.com/users/gakonst/orgs",
      "repos_url": "https://api.github.com/users/gakonst/repos",
      "events_url": "https://api.github.com/users/gakonst/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gakonst/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-19T11:29:58Z",
    "updated_at": "2022-01-19T11:29:58Z",
    "author_association": "MEMBER",
    "body": "Good idea. Does any other project do it, so that we can have some example? What would be your ideal syntax?\r\n\r\n(cc @brockelmore @mds1 @transmissions11)",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1016369030/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1016534314",
    "html_url": "https://github.com/foundry-rs/foundry/issues/509#issuecomment-1016534314",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/509",
    "id": 1016534314,
    "node_id": "IC_kwDOGBlvNc48lxUq",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-19T14:43:59Z",
    "updated_at": "2022-01-19T14:43:59Z",
    "author_association": "COLLABORATOR",
    "body": "I like this idea, agreed it'd be useful, but I don't have any examples offhand. It's easy to extend DSTest to add an `assertNeq` method so I think we can ignore that for the scope of this issue. Then we have `expectEmit`, `expectCall`, and `expectRevert`. Inverting `expectRevert` isn't necessary, so we're down to just calls and events, but let me know if there's anything we might be missing here.\r\n\r\nIt would also be useful to test that you don't jump to a certain function within your contract (and similarly have an `expectJump`), though I'd guess this is currently difficult for the same reasons as #432 \r\n\r\nSome syntax ideas:\r\n1. a `vm.expectInverse()` cheat code that watches for the next `vm.expect*()` and inverts it. With an approach like this I worry we're cluttering up tests a bit, e.g. you now need 4 lines to test an event is not emitted, and because of the order required you can't wrap these into a helper method\r\n2. similar to 1 but instead called as `vm.expectInverse(vm.expect*())`, which saves a line, but I think we'd have to abi encode this without a preprocessor—also this then becomes the only cheatcode that takes another cheat code as input, but maybe that's ok\r\n\r\nThere's probably another question of how topics should be considered when expecting an event not to be emitted. I'd guess most or all use cases only are really interested in only ensuring that topic0 is not found, as opposed to ensuring topic0 is emitted but that topic1/data does not have some value. The easiest behavior is to just invert the result of `expectEmit`, but then everyone would be calling `vm.expectEmit()` with 4 unused input args every time they want to assert an event isn't emitted which feels a bit gross",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1016534314/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1016560537",
    "html_url": "https://github.com/foundry-rs/foundry/issues/509#issuecomment-1016560537",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/509",
    "id": 1016560537,
    "node_id": "IC_kwDOGBlvNc48l3uZ",
    "user": {
      "login": "fubhy",
      "id": 1172528,
      "node_id": "MDQ6VXNlcjExNzI1Mjg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1172528?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubhy",
      "html_url": "https://github.com/fubhy",
      "followers_url": "https://api.github.com/users/fubhy/followers",
      "following_url": "https://api.github.com/users/fubhy/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubhy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubhy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubhy/subscriptions",
      "organizations_url": "https://api.github.com/users/fubhy/orgs",
      "repos_url": "https://api.github.com/users/fubhy/repos",
      "events_url": "https://api.github.com/users/fubhy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubhy/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-19T15:08:01Z",
    "updated_at": "2022-01-19T15:08:01Z",
    "author_association": "CONTRIBUTOR",
    "body": "@mds1 Agreed wrt `1` being a bit verbose / cluttered. I like `2`, but maybe we can make that a bit shorter: What about `vm.not(vm.expectCall(...))` ?\r\n\r\nSlightly off topic, but for events in particular, wouldn't it make sense to also have a more ergonomic version that just tests for topic0 via `vm.expectEmit(\"Transfer(address, address, uint)\")`.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1016560537/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1016568737",
    "html_url": "https://github.com/foundry-rs/foundry/issues/509#issuecomment-1016568737",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/509",
    "id": 1016568737,
    "node_id": "IC_kwDOGBlvNc48l5uh",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-19T15:16:25Z",
    "updated_at": "2022-01-19T15:16:25Z",
    "author_association": "COLLABORATOR",
    "body": "> Slightly off topic, but for events in particular, wouldn't it make sense to also have a more ergonomic version that just tests for topic0 via vm.expectEmit(\"Transfer(address, address, uint)\")\r\n\r\nThat'd be a useful overload here, because then we can shorten it to s single line `vm.not(vm.expectEmit(\"Transfer(address, address, uint)\"))`. IIRC we discussed an `expectEmit` syntax like that but didn't implement it since it doesn't extend nicely to taking input args of the expected params, though I may be misremembering / @brockelmore might recall",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1016568737/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1262244493",
    "html_url": "https://github.com/foundry-rs/foundry/issues/509#issuecomment-1262244493",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/509",
    "id": 1262244493,
    "node_id": "IC_kwDOGBlvNc5LPFKN",
    "user": {
      "login": "odyslam",
      "id": 13405632,
      "node_id": "MDQ6VXNlcjEzNDA1NjMy",
      "avatar_url": "https://avatars.githubusercontent.com/u/13405632?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/odyslam",
      "html_url": "https://github.com/odyslam",
      "followers_url": "https://api.github.com/users/odyslam/followers",
      "following_url": "https://api.github.com/users/odyslam/following{/other_user}",
      "gists_url": "https://api.github.com/users/odyslam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/odyslam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/odyslam/subscriptions",
      "organizations_url": "https://api.github.com/users/odyslam/orgs",
      "repos_url": "https://api.github.com/users/odyslam/repos",
      "events_url": "https://api.github.com/users/odyslam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/odyslam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-29T13:00:36Z",
    "updated_at": "2022-09-29T13:00:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "+1 for vm.not before expectNotEmit. For some protocols (like Nomad), where the functionality is heavily based on event emission, some times there are no other signals (or variables to be read) that can verify that something did NOT happen, except the NOT emission of an event.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1262244493/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1262272747",
    "html_url": "https://github.com/foundry-rs/foundry/issues/509#issuecomment-1262272747",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/509",
    "id": 1262272747,
    "node_id": "IC_kwDOGBlvNc5LPMDr",
    "user": {
      "login": "mattsse",
      "id": 19890894,
      "node_id": "MDQ6VXNlcjE5ODkwODk0",
      "avatar_url": "https://avatars.githubusercontent.com/u/19890894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mattsse",
      "html_url": "https://github.com/mattsse",
      "followers_url": "https://api.github.com/users/mattsse/followers",
      "following_url": "https://api.github.com/users/mattsse/following{/other_user}",
      "gists_url": "https://api.github.com/users/mattsse/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mattsse/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mattsse/subscriptions",
      "organizations_url": "https://api.github.com/users/mattsse/orgs",
      "repos_url": "https://api.github.com/users/mattsse/repos",
      "events_url": "https://api.github.com/users/mattsse/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mattsse/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-29T13:20:52Z",
    "updated_at": "2022-09-29T13:20:52Z",
    "author_association": "MEMBER",
    "body": "this is definitely useful and we should add this imo.\r\n\r\notherwise, you can't test the inverse of expectEmit.\r\n\r\nflipping the impl and adding `expectNotEmit` should be easy.\r\n\r\nwill try to squeeze this in",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1262272747/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1262517115",
    "html_url": "https://github.com/foundry-rs/foundry/issues/509#issuecomment-1262517115",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/509",
    "id": 1262517115,
    "node_id": "IC_kwDOGBlvNc5LQHt7",
    "user": {
      "login": "ChainsightLabs",
      "id": 97004363,
      "node_id": "U_kgDOBcgrSw",
      "avatar_url": "https://avatars.githubusercontent.com/u/97004363?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ChainsightLabs",
      "html_url": "https://github.com/ChainsightLabs",
      "followers_url": "https://api.github.com/users/ChainsightLabs/followers",
      "following_url": "https://api.github.com/users/ChainsightLabs/following{/other_user}",
      "gists_url": "https://api.github.com/users/ChainsightLabs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ChainsightLabs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ChainsightLabs/subscriptions",
      "organizations_url": "https://api.github.com/users/ChainsightLabs/orgs",
      "repos_url": "https://api.github.com/users/ChainsightLabs/repos",
      "events_url": "https://api.github.com/users/ChainsightLabs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ChainsightLabs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-29T16:25:54Z",
    "updated_at": "2022-09-29T16:25:54Z",
    "author_association": "NONE",
    "body": "+1",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1262517115/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1301746172",
    "html_url": "https://github.com/foundry-rs/foundry/issues/509#issuecomment-1301746172",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/509",
    "id": 1301746172,
    "node_id": "IC_kwDOGBlvNc5NlxH8",
    "user": {
      "login": "DanTheDev-il",
      "id": 93611247,
      "node_id": "U_kgDOBZRk7w",
      "avatar_url": "https://avatars.githubusercontent.com/u/93611247?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DanTheDev-il",
      "html_url": "https://github.com/DanTheDev-il",
      "followers_url": "https://api.github.com/users/DanTheDev-il/followers",
      "following_url": "https://api.github.com/users/DanTheDev-il/following{/other_user}",
      "gists_url": "https://api.github.com/users/DanTheDev-il/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DanTheDev-il/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DanTheDev-il/subscriptions",
      "organizations_url": "https://api.github.com/users/DanTheDev-il/orgs",
      "repos_url": "https://api.github.com/users/DanTheDev-il/repos",
      "events_url": "https://api.github.com/users/DanTheDev-il/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DanTheDev-il/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-03T07:50:45Z",
    "updated_at": "2022-11-03T07:50:45Z",
    "author_association": "NONE",
    "body": "def a +1 from my side for this change, too.\r\n\r\nHardhat has a similar functionality that I found really easy and handy to use:\r\n\r\nexpect(<call).to.not.emit(<contract>, <eventName>).withArgs(....)\r\n\r\nthe \".withArgs\" part is optional. So either I check only if an event was emitted or not or I can also check if the args match (or dont).",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1301746172/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1301748629",
    "html_url": "https://github.com/foundry-rs/foundry/issues/509#issuecomment-1301748629",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/509",
    "id": 1301748629,
    "node_id": "IC_kwDOGBlvNc5NlxuV",
    "user": {
      "login": "0xDEnYO",
      "id": 77058885,
      "node_id": "MDQ6VXNlcjc3MDU4ODg1",
      "avatar_url": "https://avatars.githubusercontent.com/u/77058885?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/0xDEnYO",
      "html_url": "https://github.com/0xDEnYO",
      "followers_url": "https://api.github.com/users/0xDEnYO/followers",
      "following_url": "https://api.github.com/users/0xDEnYO/following{/other_user}",
      "gists_url": "https://api.github.com/users/0xDEnYO/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/0xDEnYO/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/0xDEnYO/subscriptions",
      "organizations_url": "https://api.github.com/users/0xDEnYO/orgs",
      "repos_url": "https://api.github.com/users/0xDEnYO/repos",
      "events_url": "https://api.github.com/users/0xDEnYO/events{/privacy}",
      "received_events_url": "https://api.github.com/users/0xDEnYO/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-03T07:54:15Z",
    "updated_at": "2022-11-03T07:54:15Z",
    "author_association": "NONE",
    "body": "+1",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1301748629/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1478719558",
    "html_url": "https://github.com/foundry-rs/foundry/issues/509#issuecomment-1478719558",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/509",
    "id": 1478719558,
    "node_id": "IC_kwDOGBlvNc5YI3hG",
    "user": {
      "login": "reubenr0d",
      "id": 63185771,
      "node_id": "MDQ6VXNlcjYzMTg1Nzcx",
      "avatar_url": "https://avatars.githubusercontent.com/u/63185771?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/reubenr0d",
      "html_url": "https://github.com/reubenr0d",
      "followers_url": "https://api.github.com/users/reubenr0d/followers",
      "following_url": "https://api.github.com/users/reubenr0d/following{/other_user}",
      "gists_url": "https://api.github.com/users/reubenr0d/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/reubenr0d/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/reubenr0d/subscriptions",
      "organizations_url": "https://api.github.com/users/reubenr0d/orgs",
      "repos_url": "https://api.github.com/users/reubenr0d/repos",
      "events_url": "https://api.github.com/users/reubenr0d/events{/privacy}",
      "received_events_url": "https://api.github.com/users/reubenr0d/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-21T23:21:33Z",
    "updated_at": "2023-03-21T23:21:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "+1\r\n\r\nAnother way to go about this would be with cheatcodes that count the number of times a function is called or event emitted. That way we can not only assert that call/emit was made multiple times, but also if it was not made at all using the same cheat.\r\n\r\nThere is an issue for `expectCallCount` (https://github.com/foundry-rs/foundry/issues/4513), but we could also do something similar for events as well.\r\nEg. `expectEmit(bool,bool,bool,bool, uint256 count)`",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1478719558/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1488912530",
    "html_url": "https://github.com/foundry-rs/foundry/issues/509#issuecomment-1488912530",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/509",
    "id": 1488912530,
    "node_id": "IC_kwDOGBlvNc5YvwCS",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-29T16:17:39Z",
    "updated_at": "2023-03-29T16:17:39Z",
    "author_association": "COLLABORATOR",
    "body": "I'm supportive of adding overloads with a `count` arg for both the `expectEmit` and `expectCall` cheats, since that accomplishes both this issue and #4513 with the same UX/set of cheats. I saw in the support telegram that you'd be interested in working on this, should I assign to you?\r\n\r\nAlso if anyone has objections to that syntax and has a reason to prefer e.g. `expectNoEmit` please share 🙂",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1488912530/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1489660432",
    "html_url": "https://github.com/foundry-rs/foundry/issues/509#issuecomment-1489660432",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/509",
    "id": 1489660432,
    "node_id": "IC_kwDOGBlvNc5YymoQ",
    "user": {
      "login": "reubenr0d",
      "id": 63185771,
      "node_id": "MDQ6VXNlcjYzMTg1Nzcx",
      "avatar_url": "https://avatars.githubusercontent.com/u/63185771?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/reubenr0d",
      "html_url": "https://github.com/reubenr0d",
      "followers_url": "https://api.github.com/users/reubenr0d/followers",
      "following_url": "https://api.github.com/users/reubenr0d/following{/other_user}",
      "gists_url": "https://api.github.com/users/reubenr0d/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/reubenr0d/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/reubenr0d/subscriptions",
      "organizations_url": "https://api.github.com/users/reubenr0d/orgs",
      "repos_url": "https://api.github.com/users/reubenr0d/repos",
      "events_url": "https://api.github.com/users/reubenr0d/events{/privacy}",
      "received_events_url": "https://api.github.com/users/reubenr0d/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-30T04:08:01Z",
    "updated_at": "2023-03-30T04:08:01Z",
    "author_association": "CONTRIBUTOR",
    "body": "Yep, you can assign it to me @mds1 ",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1489660432/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1490092803",
    "html_url": "https://github.com/foundry-rs/foundry/issues/509#issuecomment-1490092803",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/509",
    "id": 1490092803,
    "node_id": "IC_kwDOGBlvNc5Y0QMD",
    "user": {
      "login": "mattsse",
      "id": 19890894,
      "node_id": "MDQ6VXNlcjE5ODkwODk0",
      "avatar_url": "https://avatars.githubusercontent.com/u/19890894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mattsse",
      "html_url": "https://github.com/mattsse",
      "followers_url": "https://api.github.com/users/mattsse/followers",
      "following_url": "https://api.github.com/users/mattsse/following{/other_user}",
      "gists_url": "https://api.github.com/users/mattsse/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mattsse/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mattsse/subscriptions",
      "organizations_url": "https://api.github.com/users/mattsse/orgs",
      "repos_url": "https://api.github.com/users/mattsse/repos",
      "events_url": "https://api.github.com/users/mattsse/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mattsse/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-30T10:51:56Z",
    "updated_at": "2023-03-30T10:51:56Z",
    "author_association": "MEMBER",
    "body": "woops this one slipped through... sorry about that\r\n\r\nnice @reubenr0d !\r\n\r\nlmk if you have questions/need some pointers",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1490092803/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1539032787",
    "html_url": "https://github.com/foundry-rs/foundry/issues/509#issuecomment-1539032787",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/509",
    "id": 1539032787,
    "node_id": "IC_kwDOGBlvNc5bu8bT",
    "user": {
      "login": "Evalir",
      "id": 26014927,
      "node_id": "MDQ6VXNlcjI2MDE0OTI3",
      "avatar_url": "https://avatars.githubusercontent.com/u/26014927?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Evalir",
      "html_url": "https://github.com/Evalir",
      "followers_url": "https://api.github.com/users/Evalir/followers",
      "following_url": "https://api.github.com/users/Evalir/following{/other_user}",
      "gists_url": "https://api.github.com/users/Evalir/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Evalir/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Evalir/subscriptions",
      "organizations_url": "https://api.github.com/users/Evalir/orgs",
      "repos_url": "https://api.github.com/users/Evalir/repos",
      "events_url": "https://api.github.com/users/Evalir/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Evalir/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-08T20:51:50Z",
    "updated_at": "2023-05-08T20:51:50Z",
    "author_association": "COLLABORATOR",
    "body": "cc @mds1 i guess we went for the `count` syntax arg (which needs to be fixed)—do we still wanna implement negative assertions?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1539032787/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1540316656",
    "html_url": "https://github.com/foundry-rs/foundry/issues/509#issuecomment-1540316656",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/509",
    "id": 1540316656,
    "node_id": "IC_kwDOGBlvNc5bz13w",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-09T15:01:37Z",
    "updated_at": "2023-05-09T15:01:37Z",
    "author_association": "COLLABORATOR",
    "body": "Yea the count approach is how we'll implement negative assertions. We have it for `expectCall` but still need it for `expectEmit` and `expectRevert`",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1540316656/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
