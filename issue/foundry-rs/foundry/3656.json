{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/3656",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3656/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3656/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3656/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/3656",
  "id": 1443619971,
  "node_id": "I_kwDOGBlvNc5WC-SD",
  "number": 3656,
  "title": "Support of custom-errors on ABI",
  "user": {
    "login": "gagiuntoli",
    "id": 25662036,
    "node_id": "MDQ6VXNlcjI1NjYyMDM2",
    "avatar_url": "https://avatars.githubusercontent.com/u/25662036?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/gagiuntoli",
    "html_url": "https://github.com/gagiuntoli",
    "followers_url": "https://api.github.com/users/gagiuntoli/followers",
    "following_url": "https://api.github.com/users/gagiuntoli/following{/other_user}",
    "gists_url": "https://api.github.com/users/gagiuntoli/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/gagiuntoli/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gagiuntoli/subscriptions",
    "organizations_url": "https://api.github.com/users/gagiuntoli/orgs",
    "repos_url": "https://api.github.com/users/gagiuntoli/repos",
    "events_url": "https://api.github.com/users/gagiuntoli/events{/privacy}",
    "received_events_url": "https://api.github.com/users/gagiuntoli/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3593644820,
      "node_id": "LA_kwDOGBlvNc7WMqsU",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-feature",
      "name": "T-feature",
      "color": "BFD4F2",
      "default": false,
      "description": "Type: feature"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 3,
  "created_at": "2022-11-10T10:15:12Z",
  "updated_at": "2022-11-11T20:59:14Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "### Component\r\n\r\nForge\r\n\r\n### Describe the feature you would like\r\n\r\nI would like to have in the ABI of my contracts all the possible errors that are thrown through reverts on the called contracts.\r\n\r\nFor example:\r\n\r\n```solidity\r\nerror customErrorA();\r\nerror customErrorB();\r\n\r\ncontract A {\r\n    function foo() {\r\n         revert customErrorA();\r\n    }\r\n\r\n    function callB(address _addressB) {\r\n         B(_addressB).bar()\r\n    }\r\n}\r\n\r\ncontract B {\r\n    function bar() {\r\n         revert customErrorB();\r\n    }\r\n}\r\n```\r\nI would like that the ABI of contract `A` knows about `customErrorB()`.\r\n\r\nI think this is [the responsibility of the Solidity compiler](https://github.com/ethereum/solidity/issues/13683) rather than Foundry, even though, in the meantime, is there something implemented on Foundry to enable this support on the ABIs?  \r\n\r\n### Additional context\r\n\r\n_No response_",
  "closed_by": {
    "login": "rkrasiuk",
    "id": 25429261,
    "node_id": "MDQ6VXNlcjI1NDI5MjYx",
    "avatar_url": "https://avatars.githubusercontent.com/u/25429261?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/rkrasiuk",
    "html_url": "https://github.com/rkrasiuk",
    "followers_url": "https://api.github.com/users/rkrasiuk/followers",
    "following_url": "https://api.github.com/users/rkrasiuk/following{/other_user}",
    "gists_url": "https://api.github.com/users/rkrasiuk/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/rkrasiuk/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/rkrasiuk/subscriptions",
    "organizations_url": "https://api.github.com/users/rkrasiuk/orgs",
    "repos_url": "https://api.github.com/users/rkrasiuk/repos",
    "events_url": "https://api.github.com/users/rkrasiuk/events{/privacy}",
    "received_events_url": "https://api.github.com/users/rkrasiuk/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/3656/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3656/timeline",
  "performed_via_github_app": null,
  "state_reason": "reopened"
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1311502208",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3656#issuecomment-1311502208",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3656",
    "id": 1311502208,
    "node_id": "IC_kwDOGBlvNc5OK--A",
    "user": {
      "login": "rkrasiuk",
      "id": 25429261,
      "node_id": "MDQ6VXNlcjI1NDI5MjYx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25429261?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rkrasiuk",
      "html_url": "https://github.com/rkrasiuk",
      "followers_url": "https://api.github.com/users/rkrasiuk/followers",
      "following_url": "https://api.github.com/users/rkrasiuk/following{/other_user}",
      "gists_url": "https://api.github.com/users/rkrasiuk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rkrasiuk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rkrasiuk/subscriptions",
      "organizations_url": "https://api.github.com/users/rkrasiuk/orgs",
      "repos_url": "https://api.github.com/users/rkrasiuk/repos",
      "events_url": "https://api.github.com/users/rkrasiuk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rkrasiuk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-11T10:16:57Z",
    "updated_at": "2022-11-11T10:16:57Z",
    "author_association": "COLLABORATOR",
    "body": "there are probably ways to traverse the ast to get all possible errors, however that still would not become a part of the ABI. if anything, that would be an auxiliary output.\r\nimo, the best way to think about this is that `customErrorB` is never instantiated in the context of `contract A`. when you are doing an external call, you are essentially agreeing that the transaction might revert with any error that might bubble up in the process. this description is similar to the edge case when contracts can emit the event that's not a part of their ABI (through preserved context during delegatecall). \r\n\r\nclosing this issue as won't do",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1311502208/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1311783699",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3656#issuecomment-1311783699",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3656",
    "id": 1311783699,
    "node_id": "IC_kwDOGBlvNc5OMDsT",
    "user": {
      "login": "KholdStare",
      "id": 836110,
      "node_id": "MDQ6VXNlcjgzNjExMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/836110?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/KholdStare",
      "html_url": "https://github.com/KholdStare",
      "followers_url": "https://api.github.com/users/KholdStare/followers",
      "following_url": "https://api.github.com/users/KholdStare/following{/other_user}",
      "gists_url": "https://api.github.com/users/KholdStare/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/KholdStare/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/KholdStare/subscriptions",
      "organizations_url": "https://api.github.com/users/KholdStare/orgs",
      "repos_url": "https://api.github.com/users/KholdStare/repos",
      "events_url": "https://api.github.com/users/KholdStare/events{/privacy}",
      "received_events_url": "https://api.github.com/users/KholdStare/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-11T14:50:02Z",
    "updated_at": "2022-11-11T14:50:02Z",
    "author_association": "CONTRIBUTOR",
    "body": "@rkrasiuk I think I agree with you about \"auxiliary output\". It doesn't have to be the ABI itself, but an \"ABI-like\" file that describes all of the errors accessible by calling a contract.\r\n\r\nI think events are easier to deal with because a user has to actively \"subscribe\" to an event - pick something of interest and filter for it in the log, ignoring things they don't care about. With errors, there's no \"subscribing\" - you just get an error and you are forced to parse it, even if you have no clue where it came from.\r\n\r\nWould you be open to an auxiliary output for that? Something like `forge inspect <contract> errors`?\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1311783699/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1312186415",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3656#issuecomment-1312186415",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3656",
    "id": 1312186415,
    "node_id": "IC_kwDOGBlvNc5ONmAv",
    "user": {
      "login": "rkrasiuk",
      "id": 25429261,
      "node_id": "MDQ6VXNlcjI1NDI5MjYx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25429261?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rkrasiuk",
      "html_url": "https://github.com/rkrasiuk",
      "followers_url": "https://api.github.com/users/rkrasiuk/followers",
      "following_url": "https://api.github.com/users/rkrasiuk/following{/other_user}",
      "gists_url": "https://api.github.com/users/rkrasiuk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rkrasiuk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rkrasiuk/subscriptions",
      "organizations_url": "https://api.github.com/users/rkrasiuk/orgs",
      "repos_url": "https://api.github.com/users/rkrasiuk/repos",
      "events_url": "https://api.github.com/users/rkrasiuk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rkrasiuk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-11T20:58:04Z",
    "updated_at": "2022-11-11T20:59:14Z",
    "author_association": "COLLABORATOR",
    "body": "@KholdStare agreed that it's a candidate for forge inspect. reopened this issue, but we'll prob keep it as a low prio. always appreciate contributions if anyone wants to pick it up!",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1312186415/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 1,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
