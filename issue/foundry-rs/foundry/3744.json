{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/3744",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3744/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3744/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3744/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/3744",
  "id": 1460944955,
  "node_id": "I_kwDOGBlvNc5XFEA7",
  "number": 3744,
  "title": "Proxy patten failed with sending ether",
  "user": {
    "login": "qiwihui",
    "id": 3297411,
    "node_id": "MDQ6VXNlcjMyOTc0MTE=",
    "avatar_url": "https://avatars.githubusercontent.com/u/3297411?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/qiwihui",
    "html_url": "https://github.com/qiwihui",
    "followers_url": "https://api.github.com/users/qiwihui/followers",
    "following_url": "https://api.github.com/users/qiwihui/following{/other_user}",
    "gists_url": "https://api.github.com/users/qiwihui/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/qiwihui/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/qiwihui/subscriptions",
    "organizations_url": "https://api.github.com/users/qiwihui/orgs",
    "repos_url": "https://api.github.com/users/qiwihui/repos",
    "events_url": "https://api.github.com/users/qiwihui/events{/privacy}",
    "received_events_url": "https://api.github.com/users/qiwihui/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3334394228,
      "node_id": "MDU6TGFiZWwzMzM0Mzk0MjI4",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-bug",
      "name": "T-bug",
      "color": "d73a4a",
      "default": false,
      "description": "Type: bug"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 7,
  "created_at": "2022-11-23T03:45:58Z",
  "updated_at": "2023-03-08T17:51:40Z",
  "closed_at": "2023-02-25T01:42:55Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "### Component\r\n\r\nForge\r\n\r\n### Have you ensured that all of these are up to date?\r\n\r\n- [X] Foundry\r\n- [X] Foundryup\r\n\r\n### What version of Foundry are you on?\r\n\r\nforge 0.2.0 (b28119b 2022-11-23T00:17:21.324951Z)\r\n\r\n### What command(s) is the bug in?\r\n\r\nforge test\r\n\r\n### Operating System\r\n\r\nmacOS (Apple Silicon)\r\n\r\n### Describe the bug\r\n\r\nI tried to test proxy patten to receive ether but some of the situations failed while they should not. I tested these cases on testnet, they behaves as expected. Here is the test files:\r\n\r\nproxy.sol\r\n\r\n```solidity\r\n// SPDX-License-Identifier: MIT\r\n// solhint-disable const-name-snakecase\r\npragma solidity 0.6.10;\r\n\r\n/**\r\n * @title OwnedUpgradeabilityProxy\r\n * @dev This contract combines an upgradeability proxy with basic authorization control functionalities\r\n */\r\ncontract OwnedUpgradeabilityProxy {\r\n\r\n    /**\r\n     * @dev Allows the proxy owner to upgrade the current version of the proxy.\r\n     * @param implementation representing the address of the new implementation to be set.\r\n     */\r\n    function upgradeTo(address implementation) public virtual {\r\n        address currentImplementation;\r\n        bytes32 position = implementationPosition;\r\n        assembly {\r\n            currentImplementation := sload(position)\r\n        }\r\n        require(currentImplementation != implementation);\r\n        assembly {\r\n            sstore(position, implementation)\r\n        }\r\n        emit Upgraded(implementation);\r\n    }\r\n\r\n    /**\r\n     * @dev This event will be emitted every time the implementation gets upgraded\r\n     * @param implementation representing the address of the upgraded implementation\r\n     */\r\n    event Upgraded(address indexed implementation);\r\n\r\n    // Storage position of the address of the current implementation\r\n    bytes32 private constant implementationPosition = 0x6e41e0fbe643dfdb6043698bf865aada82dc46b953f754a3468eaa272a362dc7;\r\n\r\n    function implementation() public view returns (address impl) {\r\n        bytes32 position = implementationPosition;\r\n        assembly {\r\n            impl := sload(position)\r\n        }\r\n    }\r\n\r\n    event CallFallback(uint256);\r\n    event CallReceive(uint256);\r\n\r\n    /**\r\n     * @dev Fallback functions allowing to perform a delegatecall to the given implementation.\r\n     * This function will return whatever the implementation call returns\r\n     */\r\n    fallback() external {\r\n        emit CallFallback(1);\r\n        proxyCall();\r\n    }\r\n\r\n    receive() external payable {\r\n        emit CallReceive(2);\r\n        proxyCall();\r\n    }\r\n\r\n    function proxyCall() internal {\r\n        bytes32 position = implementationPosition;\r\n\r\n        assembly {\r\n            let ptr := mload(0x40)\r\n            calldatacopy(ptr, 0, calldatasize())\r\n            let result := delegatecall(gas(), sload(position), ptr, calldatasize(), 0, 0)\r\n            let size := returndatasize()\r\n            returndatacopy(ptr, 0, size)\r\n\r\n            switch result\r\n            case 0 { revert(ptr, size) }\r\n            default { return(ptr, size) }\r\n        }\r\n    }\r\n}\r\n\r\n```\r\n\r\ntestTransfer.sol\r\n\r\n```solidity\r\n// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.10;\r\n\r\nimport \"forge-std/Test.sol\";\r\nimport {OwnedUpgradeabilityProxy} from \"./proxy.sol\";\r\n\r\ncontract Implementation0 {}\r\n\r\ncontract Implementation1 {\r\n    event CallFallback();\r\n    event CallReceive();\r\n\r\n    fallback() external {\r\n        emit CallFallback();\r\n    }\r\n\r\n    receive() external payable {\r\n        emit CallReceive();\r\n    }\r\n}\r\n\r\ncontract Implementation2 {\r\n    event CallFallback();\r\n\r\n    fallback() external {\r\n        emit CallFallback();\r\n    }\r\n}\r\n\r\ncontract Implementation3 {\r\n    event CallFallback();\r\n\r\n    fallback() external payable {\r\n        emit CallFallback();\r\n    }\r\n}\r\n\r\ncontract Implementation4 {\r\n    event CallFallback();\r\n    event CallReceive();\r\n\r\n    fallback() external payable {\r\n        emit CallFallback();\r\n    }\r\n\r\n    receive() external payable {\r\n        emit CallReceive();\r\n    }\r\n}\r\n\r\ncontract ContractTest is Test {\r\n    OwnedUpgradeabilityProxy proxy;\r\n    Implementation0 impl0;\r\n    Implementation1 impl1;\r\n    Implementation2 impl2;\r\n    Implementation3 impl3;\r\n    Implementation4 impl4;\r\n\r\n    function setUp() public {\r\n        proxy = new OwnedUpgradeabilityProxy();\r\n        impl0 = new Implementation0();\r\n        impl1 = new Implementation1();\r\n        impl2 = new Implementation2();\r\n        impl3 = new Implementation3();\r\n        impl4 = new Implementation4();\r\n    }\r\n\r\n    function proxyUpgradeTo(address impl) internal {\r\n        proxy.upgradeTo(impl);\r\n        assert(proxy.implementation() == impl);\r\n    }\r\n\r\n    function testImplNoReceiveNoFallback() public {\r\n        proxyUpgradeTo(address(impl0));\r\n\r\n        vm.expectRevert();\r\n        payable(address(proxy)).transfer(1 ether);\r\n    }\r\n\r\n    function testImplReceiveFallbackNoPayable() public {\r\n        proxyUpgradeTo(address(impl1));\r\n        \r\n        payable(address(proxy)).transfer(1 ether);\r\n    }\r\n\r\n    function testImplNoReceiveFallbackNoPayable() public {\r\n        proxyUpgradeTo(address(impl2));\r\n        \r\n        vm.expectRevert();\r\n        payable(address(proxy)).transfer(1 ether);\r\n    }\r\n\r\n    function testImplNoReceiveFallbackWithPayable() public {\r\n        proxyUpgradeTo(address(impl3));\r\n        \r\n        payable(address(proxy)).transfer(1 ether);\r\n    }\r\n\r\n    function testImplReceiveFallbackWithPayable() public {\r\n        proxyUpgradeTo(address(impl4));\r\n        \r\n        payable(address(proxy)).transfer(1 ether);\r\n    }\r\n}\r\n\r\n```\r\n\r\nAnd here is the result\r\n\r\n```shell\r\n$ forge test -vvv\r\n[⠒] Compiling...\r\nNo files changed, compilation skipped\r\n\r\nRunning 5 tests for test/testCallback.sol:ContractTest\r\n[PASS] testImplNoReceiveFallbackNoPayable() (gas: 42840)\r\n[FAIL. Reason: EvmError: Revert] testImplNoReceiveFallbackWithPayable() (gas: 40945)\r\nTraces:\r\n  [40945] ContractTest::testImplNoReceiveFallbackWithPayable() \r\n    ├─ [23487] OwnedUpgradeabilityProxy::upgradeTo(Implementation3: [0xc7183455a4C133Ae270771860664b6B7ec320bB1]) \r\n    │   ├─ emit Upgraded(implementation: Implementation3: [0xc7183455a4C133Ae270771860664b6B7ec320bB1])\r\n    │   └─ ← ()\r\n    ├─ [307] OwnedUpgradeabilityProxy::implementation() [staticcall]\r\n    │   └─ ← Implementation3: [0xc7183455a4C133Ae270771860664b6B7ec320bB1]\r\n    ├─ [1269] OwnedUpgradeabilityProxy::receive{value: 1000000000000000000}() \r\n    │   ├─ emit CallReceive(: 2)\r\n    │   └─ ← \"EvmError: OutOfGas\"\r\n    └─ ← \"EvmError: Revert\"\r\n\r\n[PASS] testImplNoReceiveNoFallback() (gas: 42817)\r\n[FAIL. Reason: EvmError: Revert] testImplReceiveFallbackNoPayable() (gas: 40945)\r\nTraces:\r\n  [40945] ContractTest::testImplReceiveFallbackNoPayable() \r\n    ├─ [23487] OwnedUpgradeabilityProxy::upgradeTo(Implementation1: [0xF62849F9A0B5Bf2913b396098F7c7019b51A820a]) \r\n    │   ├─ emit Upgraded(implementation: Implementation1: [0xF62849F9A0B5Bf2913b396098F7c7019b51A820a])\r\n    │   └─ ← ()\r\n    ├─ [307] OwnedUpgradeabilityProxy::implementation() [staticcall]\r\n    │   └─ ← Implementation1: [0xF62849F9A0B5Bf2913b396098F7c7019b51A820a]\r\n    ├─ [1269] OwnedUpgradeabilityProxy::receive{value: 1000000000000000000}() \r\n    │   ├─ emit CallReceive(: 2)\r\n    │   └─ ← \"EvmError: OutOfGas\"\r\n    └─ ← \"EvmError: Revert\"\r\n\r\n[FAIL. Reason: EvmError: Revert] testImplReceiveFallbackWithPayable() (gas: 40967)\r\nTraces:\r\n  [40967] ContractTest::testImplReceiveFallbackWithPayable() \r\n    ├─ [23487] OwnedUpgradeabilityProxy::upgradeTo(Implementation4: [0xa0Cb889707d426A7A386870A03bc70d1b0697598]) \r\n    │   ├─ emit Upgraded(implementation: Implementation4: [0xa0Cb889707d426A7A386870A03bc70d1b0697598])\r\n    │   └─ ← ()\r\n    ├─ [307] OwnedUpgradeabilityProxy::implementation() [staticcall]\r\n    │   └─ ← Implementation4: [0xa0Cb889707d426A7A386870A03bc70d1b0697598]\r\n    ├─ [1269] OwnedUpgradeabilityProxy::receive{value: 1000000000000000000}() \r\n    │   ├─ emit CallReceive(: 2)\r\n    │   └─ ← \"EvmError: OutOfGas\"\r\n    └─ ← \"EvmError: Revert\"\r\n\r\nTest result: FAILED. 2 passed; 3 failed; finished in 439.17µs\r\n\r\nFailing tests:\r\nEncountered 3 failing tests in test/testCallback.sol:ContractTest\r\n[FAIL. Reason: EvmError: Revert] testImplNoReceiveFallbackWithPayable() (gas: 40945)\r\n[FAIL. Reason: EvmError: Revert] testImplReceiveFallbackNoPayable() (gas: 40945)\r\n[FAIL. Reason: EvmError: Revert] testImplReceiveFallbackWithPayable() (gas: 40967)\r\n\r\nEncountered a total of 3 failing tests, 2 tests succeeded\r\n```",
  "closed_by": {
    "login": "onbjerg",
    "id": 8862627,
    "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/onbjerg",
    "html_url": "https://github.com/onbjerg",
    "followers_url": "https://api.github.com/users/onbjerg/followers",
    "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
    "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
    "organizations_url": "https://api.github.com/users/onbjerg/orgs",
    "repos_url": "https://api.github.com/users/onbjerg/repos",
    "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
    "received_events_url": "https://api.github.com/users/onbjerg/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/3744/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3744/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1399537641",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3744#issuecomment-1399537641",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3744",
    "id": 1399537641,
    "node_id": "IC_kwDOGBlvNc5Taz_p",
    "user": {
      "login": "metmirr",
      "id": 11671753,
      "node_id": "MDQ6VXNlcjExNjcxNzUz",
      "avatar_url": "https://avatars.githubusercontent.com/u/11671753?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/metmirr",
      "html_url": "https://github.com/metmirr",
      "followers_url": "https://api.github.com/users/metmirr/followers",
      "following_url": "https://api.github.com/users/metmirr/following{/other_user}",
      "gists_url": "https://api.github.com/users/metmirr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/metmirr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/metmirr/subscriptions",
      "organizations_url": "https://api.github.com/users/metmirr/orgs",
      "repos_url": "https://api.github.com/users/metmirr/repos",
      "events_url": "https://api.github.com/users/metmirr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/metmirr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-22T16:34:29Z",
    "updated_at": "2023-01-22T16:34:29Z",
    "author_association": "NONE",
    "body": "The issue still persists, although I am not testing the proxy patter.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1399537641/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1423190882",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3744#issuecomment-1423190882",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3744",
    "id": 1423190882,
    "node_id": "IC_kwDOGBlvNc5U1Cti",
    "user": {
      "login": "burnto",
      "id": 15708,
      "node_id": "MDQ6VXNlcjE1NzA4",
      "avatar_url": "https://avatars.githubusercontent.com/u/15708?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/burnto",
      "html_url": "https://github.com/burnto",
      "followers_url": "https://api.github.com/users/burnto/followers",
      "following_url": "https://api.github.com/users/burnto/following{/other_user}",
      "gists_url": "https://api.github.com/users/burnto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/burnto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/burnto/subscriptions",
      "organizations_url": "https://api.github.com/users/burnto/orgs",
      "repos_url": "https://api.github.com/users/burnto/repos",
      "events_url": "https://api.github.com/users/burnto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/burnto/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-02-08T20:21:16Z",
    "updated_at": "2023-02-08T20:21:16Z",
    "author_association": "NONE",
    "body": "This came up for me with proxies (specifically OZ Clones) as well.\r\n\r\nSpecifically, clones could be created in `setup()`, but then when transferring eth with `transfer` in a test function, it reverts with the `OutOfGas` message.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1423190882/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1444890049",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3744#issuecomment-1444890049",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3744",
    "id": 1444890049,
    "node_id": "IC_kwDOGBlvNc5WH0XB",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-02-25T01:42:55Z",
    "updated_at": "2023-02-25T01:42:55Z",
    "author_association": "MEMBER",
    "body": "`.transfer` only grants the receiver 2300 gas to compute. You are running out of gas, logs are expensive to emit.\r\n\r\nhttps://docs.soliditylang.org/en/v0.8.19/units-and-global-variables.html#address-related",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1444890049/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1444903048",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3744#issuecomment-1444903048",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3744",
    "id": 1444903048,
    "node_id": "IC_kwDOGBlvNc5WH3iI",
    "user": {
      "login": "burnto",
      "id": 15708,
      "node_id": "MDQ6VXNlcjE1NzA4",
      "avatar_url": "https://avatars.githubusercontent.com/u/15708?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/burnto",
      "html_url": "https://github.com/burnto",
      "followers_url": "https://api.github.com/users/burnto/followers",
      "following_url": "https://api.github.com/users/burnto/following{/other_user}",
      "gists_url": "https://api.github.com/users/burnto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/burnto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/burnto/subscriptions",
      "organizations_url": "https://api.github.com/users/burnto/orgs",
      "repos_url": "https://api.github.com/users/burnto/repos",
      "events_url": "https://api.github.com/users/burnto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/burnto/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-02-25T01:53:49Z",
    "updated_at": "2023-02-25T01:53:49Z",
    "author_association": "NONE",
    "body": "> `.transfer` only grants the receiver 2300 gas to compute. You are running out of gas, logs are expensive to emit.\r\n> \r\n> https://docs.soliditylang.org/en/v0.8.19/units-and-global-variables.html#address-related\r\n\r\nThanks @onbjerg - yes, this was my hunch initially, but a `transfer()` in setup() succeeded, whereas a `transfer()` in the actual test failed. Is there something different about the gas budget in tests?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1444903048/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1444918311",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3744#issuecomment-1444918311",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3744",
    "id": 1444918311,
    "node_id": "IC_kwDOGBlvNc5WH7Qn",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-02-25T02:05:21Z",
    "updated_at": "2023-02-25T02:05:21Z",
    "author_association": "MEMBER",
    "body": "There should not be, this sounds like some edge case behavior of Solidity. The gas stipend of 2300 is set by Solidity, as far as I know - at the very least, it is not controlled by us.\r\n\r\nThe gas budget for both set up and the individual tests are the exact same (very high)",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1444918311/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1444969747",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3744#issuecomment-1444969747",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3744",
    "id": 1444969747,
    "node_id": "IC_kwDOGBlvNc5WIH0T",
    "user": {
      "login": "burnto",
      "id": 15708,
      "node_id": "MDQ6VXNlcjE1NzA4",
      "avatar_url": "https://avatars.githubusercontent.com/u/15708?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/burnto",
      "html_url": "https://github.com/burnto",
      "followers_url": "https://api.github.com/users/burnto/followers",
      "following_url": "https://api.github.com/users/burnto/following{/other_user}",
      "gists_url": "https://api.github.com/users/burnto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/burnto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/burnto/subscriptions",
      "organizations_url": "https://api.github.com/users/burnto/orgs",
      "repos_url": "https://api.github.com/users/burnto/repos",
      "events_url": "https://api.github.com/users/burnto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/burnto/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-02-25T03:04:47Z",
    "updated_at": "2023-02-25T03:04:47Z",
    "author_association": "NONE",
    "body": "Well, looks I can't isolate the issue I thought I was seeing, so it must have been caused by some error on my part. Thanks for weighing in.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1444969747/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1460587899",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3744#issuecomment-1460587899",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3744",
    "id": 1460587899,
    "node_id": "IC_kwDOGBlvNc5XDs17",
    "user": {
      "login": "burnto",
      "id": 15708,
      "node_id": "MDQ6VXNlcjE1NzA4",
      "avatar_url": "https://avatars.githubusercontent.com/u/15708?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/burnto",
      "html_url": "https://github.com/burnto",
      "followers_url": "https://api.github.com/users/burnto/followers",
      "following_url": "https://api.github.com/users/burnto/following{/other_user}",
      "gists_url": "https://api.github.com/users/burnto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/burnto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/burnto/subscriptions",
      "organizations_url": "https://api.github.com/users/burnto/orgs",
      "repos_url": "https://api.github.com/users/burnto/repos",
      "events_url": "https://api.github.com/users/burnto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/burnto/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-08T17:51:39Z",
    "updated_at": "2023-03-08T17:51:39Z",
    "author_association": "NONE",
    "body": "@onbjerg @qiwihui so looks like I'm still running into (what I think is) this issue, and I've now isolated it:\r\nhttps://github.com/foundry-rs/foundry/discussions/4508\r\n\r\nI'd really appreciate your quick peek, since this is unexpected behavior and I *think* this indicates a `forge test` limitation.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1460587899/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
