{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/99",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/99/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/99/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/99/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/99",
  "id": 1023730400,
  "node_id": "I_kwDOGBlvNc49BOLg",
  "number": 99,
  "title": "dapptools-style coverage",
  "user": {
    "login": "gakonst",
    "id": 17802178,
    "node_id": "MDQ6VXNlcjE3ODAyMTc4",
    "avatar_url": "https://avatars.githubusercontent.com/u/17802178?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/gakonst",
    "html_url": "https://github.com/gakonst",
    "followers_url": "https://api.github.com/users/gakonst/followers",
    "following_url": "https://api.github.com/users/gakonst/following{/other_user}",
    "gists_url": "https://api.github.com/users/gakonst/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/gakonst/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gakonst/subscriptions",
    "organizations_url": "https://api.github.com/users/gakonst/orgs",
    "repos_url": "https://api.github.com/users/gakonst/repos",
    "events_url": "https://api.github.com/users/gakonst/events{/privacy}",
    "received_events_url": "https://api.github.com/users/gakonst/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3593644820,
      "node_id": "LA_kwDOGBlvNc7WMqsU",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-feature",
      "name": "T-feature",
      "color": "BFD4F2",
      "default": false,
      "description": "Type: feature"
    },
    {
      "id": 3703752787,
      "node_id": "LA_kwDOGBlvNc7cwshT",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/C-forge",
      "name": "C-forge",
      "color": "5319E7",
      "default": false,
      "description": "Command: forge"
    },
    {
      "id": 4233058229,
      "node_id": "LA_kwDOGBlvNc78T1e1",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/Cmd-forge-coverage",
      "name": "Cmd-forge-coverage",
      "color": "006B75",
      "default": false,
      "description": "Command: forge coverage"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": {
    "login": "onbjerg",
    "id": 8862627,
    "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/onbjerg",
    "html_url": "https://github.com/onbjerg",
    "followers_url": "https://api.github.com/users/onbjerg/followers",
    "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
    "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
    "organizations_url": "https://api.github.com/users/onbjerg/orgs",
    "repos_url": "https://api.github.com/users/onbjerg/repos",
    "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
    "received_events_url": "https://api.github.com/users/onbjerg/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/milestones/1",
    "html_url": "https://github.com/foundry-rs/foundry/milestone/1",
    "labels_url": "https://api.github.com/repos/foundry-rs/foundry/milestones/1/labels",
    "id": 8140456,
    "node_id": "MI_kwDOGBlvNc4AfDao",
    "number": 1,
    "title": "v1.0.0",
    "description": "",
    "creator": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 10,
    "closed_issues": 125,
    "state": "open",
    "created_at": "2022-06-28T08:15:32Z",
    "updated_at": "2023-05-12T14:44:03Z",
    "due_on": null,
    "closed_at": null
  },
  "comments": 32,
  "created_at": "2021-10-12T11:54:37Z",
  "updated_at": "2023-05-19T15:30:57Z",
  "closed_at": null,
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "Implemented at: https://github.com/dapphub/dapptools/blob/728a9245fa5f78589b0cedec0ade2da5433ad792/src/hevm/src/EVM/UnitTest.hs#L251-L382\r\n\r\nExample: https://twitter.com/dapptools/status/1435973810545729536",
  "closed_by": {
    "login": "onbjerg",
    "id": 8862627,
    "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/onbjerg",
    "html_url": "https://github.com/onbjerg",
    "followers_url": "https://api.github.com/users/onbjerg/followers",
    "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
    "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
    "organizations_url": "https://api.github.com/users/onbjerg/orgs",
    "repos_url": "https://api.github.com/users/onbjerg/repos",
    "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
    "received_events_url": "https://api.github.com/users/onbjerg/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/99/reactions",
    "total_count": 3,
    "+1": 3,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/99/timeline",
  "performed_via_github_app": null,
  "state_reason": "reopened"
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/941162236",
    "html_url": "https://github.com/foundry-rs/foundry/issues/99#issuecomment-941162236",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/99",
    "id": 941162236,
    "node_id": "IC_kwDOGBlvNc44GP78",
    "user": {
      "login": "transmissions11",
      "id": 26209401,
      "node_id": "MDQ6VXNlcjI2MjA5NDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/26209401?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/transmissions11",
      "html_url": "https://github.com/transmissions11",
      "followers_url": "https://api.github.com/users/transmissions11/followers",
      "following_url": "https://api.github.com/users/transmissions11/following{/other_user}",
      "gists_url": "https://api.github.com/users/transmissions11/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/transmissions11/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/transmissions11/subscriptions",
      "organizations_url": "https://api.github.com/users/transmissions11/orgs",
      "repos_url": "https://api.github.com/users/transmissions11/repos",
      "events_url": "https://api.github.com/users/transmissions11/events{/privacy}",
      "received_events_url": "https://api.github.com/users/transmissions11/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-12T16:14:54Z",
    "updated_at": "2021-10-12T16:14:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "sadly theirs is pretty bad tbh, it doesn't have any branching info for == statements, etc",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/941162236/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/941185156",
    "html_url": "https://github.com/foundry-rs/foundry/issues/99#issuecomment-941185156",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/99",
    "id": 941185156,
    "node_id": "IC_kwDOGBlvNc44GViE",
    "user": {
      "login": "gakonst",
      "id": 17802178,
      "node_id": "MDQ6VXNlcjE3ODAyMTc4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17802178?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gakonst",
      "html_url": "https://github.com/gakonst",
      "followers_url": "https://api.github.com/users/gakonst/followers",
      "following_url": "https://api.github.com/users/gakonst/following{/other_user}",
      "gists_url": "https://api.github.com/users/gakonst/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gakonst/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gakonst/subscriptions",
      "organizations_url": "https://api.github.com/users/gakonst/orgs",
      "repos_url": "https://api.github.com/users/gakonst/repos",
      "events_url": "https://api.github.com/users/gakonst/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gakonst/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-12T16:43:14Z",
    "updated_at": "2021-10-12T16:43:14Z",
    "author_association": "MEMBER",
    "body": "can you recommend an algorithm, and we can start scoping it out along with how we'd utilize sourcemaps?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/941185156/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/941212181",
    "html_url": "https://github.com/foundry-rs/foundry/issues/99#issuecomment-941212181",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/99",
    "id": 941212181,
    "node_id": "IC_kwDOGBlvNc44GcIV",
    "user": {
      "login": "transmissions11",
      "id": 26209401,
      "node_id": "MDQ6VXNlcjI2MjA5NDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/26209401?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/transmissions11",
      "html_url": "https://github.com/transmissions11",
      "followers_url": "https://api.github.com/users/transmissions11/followers",
      "following_url": "https://api.github.com/users/transmissions11/following{/other_user}",
      "gists_url": "https://api.github.com/users/transmissions11/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/transmissions11/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/transmissions11/subscriptions",
      "organizations_url": "https://api.github.com/users/transmissions11/orgs",
      "repos_url": "https://api.github.com/users/transmissions11/repos",
      "events_url": "https://api.github.com/users/transmissions11/events{/privacy}",
      "received_events_url": "https://api.github.com/users/transmissions11/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-12T17:18:31Z",
    "updated_at": "2021-10-12T17:18:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "only good one i know is solidity-coverage's but it works by instrumenting the solidity whereas we'd probably want to do it at the VM level? ",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/941212181/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/941236002",
    "html_url": "https://github.com/foundry-rs/foundry/issues/99#issuecomment-941236002",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/99",
    "id": 941236002,
    "node_id": "IC_kwDOGBlvNc44Gh8i",
    "user": {
      "login": "gakonst",
      "id": 17802178,
      "node_id": "MDQ6VXNlcjE3ODAyMTc4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17802178?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gakonst",
      "html_url": "https://github.com/gakonst",
      "followers_url": "https://api.github.com/users/gakonst/followers",
      "following_url": "https://api.github.com/users/gakonst/following{/other_user}",
      "gists_url": "https://api.github.com/users/gakonst/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gakonst/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gakonst/subscriptions",
      "organizations_url": "https://api.github.com/users/gakonst/orgs",
      "repos_url": "https://api.github.com/users/gakonst/repos",
      "events_url": "https://api.github.com/users/gakonst/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gakonst/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-12T17:50:26Z",
    "updated_at": "2021-10-12T17:50:26Z",
    "author_association": "MEMBER",
    "body": "Yes, I didn't love the injected events approach...what is the hevm approach missing? is it hard?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/941236002/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1014460363",
    "html_url": "https://github.com/foundry-rs/foundry/issues/99#issuecomment-1014460363",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/99",
    "id": 1014460363,
    "node_id": "IC_kwDOGBlvNc48d2_L",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-17T12:17:45Z",
    "updated_at": "2022-01-17T12:17:45Z",
    "author_association": "MEMBER",
    "body": "More notes:\r\n\r\n- What's missing: HEVM approach does not account for branching in logical statements (||, <, &&, >, ==, etc) in requires (and in other places?)\r\n- HEVM approach is this: On each step, look up where we are in the bytecode, then map that onto the relevant line in the source code and increment the \"visited\" counter on that line by 1. Any line that has been visited at least once is considered covered\r\n- Solidity Coverage approach: Parsing the contract into an AST, walking the AST and finding points of interest and then injecting function calls or events they can hook into later\r\n- We should generate the coverage report in two formats: in-line text report for the CLI and an LCOV file for CI purposes/additional tooling\r\n- We should probably investigate doing the HEVM approach but making up for their shortcomings (i.e. only do the solidity-coverage emit-events approach as a last resort)",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1014460363/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1015963080",
    "html_url": "https://github.com/foundry-rs/foundry/issues/99#issuecomment-1015963080",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/99",
    "id": 1015963080,
    "node_id": "IC_kwDOGBlvNc48jl3I",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-19T00:37:57Z",
    "updated_at": "2022-01-19T00:44:01Z",
    "author_association": "MEMBER",
    "body": "Notes on how we can achieve coverage:\r\n\r\n- We parse the source files using `solang-parser` and take a note of where we want to check for coverage in three buckets: branches, functions and lines. These ranges are saved somewhere so we can reference them later (`solidity-coverage` has a file with the relevant AST nodes in it we can reference)\r\n- We hook into [`Handler::pre_validate`](https://github.com/gakonst/foundry/blob/27c84f943bfc16cccf0bda00af35a7c5a983566a/evm-adapters/src/sputnik/cheatcodes/cheatcode_handler.rs#L1750-L1757) in Sputnik, lookup where we are in the source and check if that is a range we are watching. If it is we increment the visited count for that piece of code by 1 (regardless of if it's a branch, function or line).\r\n- Each test generates its own coverage report. At the end of testing, we merge them\r\n- This coverage report should be easily converted into at least the lcov format, since we can use that to either: dump it in a file, generate a HTML report or print status on the CLI.\r\n\r\nPoints where I'm stuck:\r\n\r\n- I'm not sure how to get the source map in the `MultiContractRunnerBuilder`. It seems like I somehow need to switch the artifact output type?\r\n- Generally, is there any real reason we have different representations of the artifacts as a consumer of the `ethers-solc` package as opposed to a generalized struct?\r\n- It seems like the debugger used a manual compile step and I think if we need to do that for coverage too we should consider at least some sort of refactoring so we don't end up having a lot of different compile pipelines scattered around as it is hard to maintain",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1015963080/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1016544033",
    "html_url": "https://github.com/foundry-rs/foundry/issues/99#issuecomment-1016544033",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/99",
    "id": 1016544033,
    "node_id": "IC_kwDOGBlvNc48lzsh",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-19T14:54:10Z",
    "updated_at": "2022-01-19T14:54:10Z",
    "author_association": "COLLABORATOR",
    "body": "One thing to note is when improving fuzzing as part of #387, we may want to hook into the coverage results to enable coverage-guided fuzzing, i.e. the fuzzer would know what parts of code have or have not been covered and use that to guide input mutations. I'm not familiar enough with the internals to know if the above plan enables that but just wanted to mention it in case it affects coverage implementation",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1016544033/reactions",
      "total_count": 8,
      "+1": 8,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1089252857",
    "html_url": "https://github.com/foundry-rs/foundry/issues/99#issuecomment-1089252857",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/99",
    "id": 1089252857,
    "node_id": "IC_kwDOGBlvNc5A7K35",
    "user": {
      "login": "maurelian",
      "id": 23033765,
      "node_id": "MDQ6VXNlcjIzMDMzNzY1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23033765?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/maurelian",
      "html_url": "https://github.com/maurelian",
      "followers_url": "https://api.github.com/users/maurelian/followers",
      "following_url": "https://api.github.com/users/maurelian/following{/other_user}",
      "gists_url": "https://api.github.com/users/maurelian/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/maurelian/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/maurelian/subscriptions",
      "organizations_url": "https://api.github.com/users/maurelian/orgs",
      "repos_url": "https://api.github.com/users/maurelian/repos",
      "events_url": "https://api.github.com/users/maurelian/events{/privacy}",
      "received_events_url": "https://api.github.com/users/maurelian/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-05T19:47:41Z",
    "updated_at": "2022-04-05T19:50:24Z",
    "author_association": "NONE",
    "body": "Just want to add a strong vote for this feature. For context, our [monorepo](https://github.com/ethereum-optimism/optimism) relies heavily on solidity coverage, and CI checks will fail when a change would reduce coverage below a certain threshold. \r\n\r\n\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1089252857/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1089255788",
    "html_url": "https://github.com/foundry-rs/foundry/issues/99#issuecomment-1089255788",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/99",
    "id": 1089255788,
    "node_id": "IC_kwDOGBlvNc5A7Lls",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-05T19:50:19Z",
    "updated_at": "2022-04-05T19:50:19Z",
    "author_association": "COLLABORATOR",
    "body": "@maurelian I'm planning to post an initial UX proposal for coverage later today (though deferring to @gakonst on actual implementation timelines), which will be based on my experience with dapptools + Instanbul style coverage reports, since those are the main coverage tools I've used. If you have any UX suggestions or tools who's reports/workflows you like/can link to, that would be great!",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1089255788/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1089402362",
    "html_url": "https://github.com/foundry-rs/foundry/issues/99#issuecomment-1089402362",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/99",
    "id": 1089402362,
    "node_id": "IC_kwDOGBlvNc5A7vX6",
    "user": {
      "login": "gakonst",
      "id": 17802178,
      "node_id": "MDQ6VXNlcjE3ODAyMTc4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17802178?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gakonst",
      "html_url": "https://github.com/gakonst",
      "followers_url": "https://api.github.com/users/gakonst/followers",
      "following_url": "https://api.github.com/users/gakonst/following{/other_user}",
      "gists_url": "https://api.github.com/users/gakonst/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gakonst/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gakonst/subscriptions",
      "organizations_url": "https://api.github.com/users/gakonst/orgs",
      "repos_url": "https://api.github.com/users/gakonst/repos",
      "events_url": "https://api.github.com/users/gakonst/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gakonst/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-05T21:49:12Z",
    "updated_at": "2022-04-05T21:49:12Z",
    "author_association": "MEMBER",
    "body": "ACK - coverage is next up on our prio list.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1089402362/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1089443787",
    "html_url": "https://github.com/foundry-rs/foundry/issues/99#issuecomment-1089443787",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/99",
    "id": 1089443787,
    "node_id": "IC_kwDOGBlvNc5A75fL",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-05T22:25:33Z",
    "updated_at": "2022-04-05T22:25:33Z",
    "author_association": "COLLABORATOR",
    "body": "## UX Proposal\r\n\r\nThis is largely based on how [Istanbul](https://istanbul.js.org/)'s JS coverage reports work, since that's what I've used the most and haven't had any big issues with it's approach/formatting (whereas the dapptools format is clunky and not great IMO). Istanbul is what Hardhat's coverage tool uses to generate output data/reports.\r\n\r\nAs a result, this initial proposal pretty much just describes how Istanbul works, but happy to iterate and change things based on feedback.\r\n\r\n### Standard Syntax\r\n\r\nCoverage should not be the default since the added instrumentation will likely significantly slow down tests, so instead we should run coverage with:\r\n\r\n```\r\nforge test --coverage\r\n```\r\n\r\nIt would be great if this also supported watch mode and the various match flags, so you can do \r\n```\r\nforge test --coverage -w --match-contract ContractWereIncreasingCoverageFor\r\n```\r\n\r\n### CI Syntax\r\n\r\nI'd be curious to hear more from @maurelian about how this should work, but a CI mode would be great so you can configure your CI to fail if aggregate coverage drops below some threshold. One possible syntax is instead of running the above command you'd run:\r\n\r\n```\r\nforge test --coverage-threshold 95\r\n```\r\n\r\nThis will cause the process to exit with an error if coverage is < 95%\r\n\r\n### Terminal Output\r\n\r\nAt the bottom of the terminal output, append a table summary of coverage to the standard test  output. Something like the below code block, where >= 80% coverage is colored green, 65% <= x < 80% coverage is yellow, and < 65% coverage is red (I believe these are the thresholds used by Istanbul).\r\n\r\n```sh\r\n$ forge test --coverage\r\n\r\n[⠆] Compiling...\r\nNo files changed, compilation skipped\r\n\r\nRunning 1 test for src/test/MyContract.t.sol:MyContractConstructor\r\n[PASS] testConstructor() (gas: 31072)\r\nTest result: ok. 1 passed; 0 failed; finished in 10.32ms\r\n\r\n-------------------|-----------|-----------|-----------|-----------|\r\nFile               |   % Stmts |% Branches |   % Funcs |   % Lines |\r\n-------------------|-----------|-----------|-----------|-----------|\r\nsrc/               |      100  |     100   |     100   |      100  |\r\n  MyContract.sol   |      100  |     100   |     100   |      100  |\r\n-------------------|-----------|-----------|-----------|-----------|\r\nAll files          |      100  |     100   |     100   |      100  |\r\n-------------------|-----------|-----------|-----------|-----------|\r\n\r\n=============================== Coverage summary ===============================\r\nStatements   : 100% ( 350/350 )\r\nBranches     : 100% ( 176/176 )\r\nFunctions    : 100% ( 81/81 )\r\nLines        : 100% ( 317/317 )\r\n================================================================================\r\n```\r\n\r\n### File Output\r\n\r\nIn addition to the terminal output, output files containing more details should be saved to a `coverage` folder. Istanbul saves this as HTML/JS/CSS files where:\r\n- The top level HTML file is a similar summary to the terminal output\r\n- You can click into each file to see summary tables for each folder/subfolder, then can click on specific files for coverage details about that file.\r\n- The JS files are so you can sort tables and navigate the pages more easily.\r\n- The CSS files are unsurprisingly for styling the report.\r\n\r\nThe syntax used by Istanbul in these reports can be found [here](https://stackoverflow.com/questions/26618243/how-do-i-read-an-istanbul-coverage-report). To summarize:\r\n- The following coverage criteria are reported: function coverage, statement coverage, branch coverage, and line coverage.\r\n- When viewing source code in an HTML file, the lines are marked with `E` or `I` to specify whether the else path or if path was not taken.\r\n- A number such as 291x indicates the line was executed 291x times.\r\n- Statements, functions, branches, and lines that were not covered are colored pink, orange, yellow, and red, respectively\r\n\r\nScreenshots from random reports I found online are below:\r\n\r\n![image](https://user-images.githubusercontent.com/17163988/161858995-50e02a28-a8ea-400a-bcea-72eb8747c409.png)\r\n![image](https://user-images.githubusercontent.com/17163988/161860553-8334f3cb-b5f7-4a50-a0f6-e504abea151d.png)\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1089443787/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1089460680",
    "html_url": "https://github.com/foundry-rs/foundry/issues/99#issuecomment-1089460680",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/99",
    "id": 1089460680,
    "node_id": "IC_kwDOGBlvNc5A79nI",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-05T22:41:53Z",
    "updated_at": "2022-04-05T22:41:53Z",
    "author_association": "MEMBER",
    "body": "Coverage should generate LCOV files at the very least so it is uploadable to tools like CodeCov. The LCOV file can also be used to generate the HTML reports and so on, so really, we \"only\" need the LCOV file and the rest can be built on top.\r\n\r\nFor coverage thresholds, I think people mostly defer to other tools that also take LCOV?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1089460680/reactions",
      "total_count": 7,
      "+1": 7,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1089486836",
    "html_url": "https://github.com/foundry-rs/foundry/issues/99#issuecomment-1089486836",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/99",
    "id": 1089486836,
    "node_id": "IC_kwDOGBlvNc5A8D_0",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-05T22:56:48Z",
    "updated_at": "2022-04-05T22:56:48Z",
    "author_association": "COLLABORATOR",
    "body": "> Coverage should generate LCOV files at the very least so it is uploadable to tools like CodeCov. The LCOV file can also be used to generate the HTML reports and so on, so really, we \"only\" need the LCOV file and the rest can be built on top.\r\n\r\nAh perfect that makes sense, thanks.\r\n\r\n> For coverage thresholds, I think people mostly defer to other tools that also take LCOV?\r\n\r\nSeems this is what [Optimism does](https://github.com/ethereum-optimism/optimism/pull/2373#issuecomment-1079799544). Though is there a reason we wouldn't want to integrate at least a simple coverage threshold natively so it can be used to trigger a CI failure? Seems nice to not need a third-party tool, and it'd facilitate having a [better `forge init`](https://github.com/gakonst/foundry/issues/1132) out of the box. But I haven't used Codecov or other similar tools, so I'm not sure what nice-to-have features they may have that a native approach won't have.\r\n\r\n------------------------\r\n\r\nOne thing I forgot to mention is how fuzz/invariant tests should affect coverage reports. I think there's a few ways we can handle this:\r\n\r\n1. Ignore fuzz/invariant tests from coverage reports so reports are deterministic.\r\n2. Include them, and settle for non-deterministic coverage. This is arguably ok since it means you may be relying too heavily on broad fuzz tests and not enough targeted unit tests?\r\n3. Include fuzz runs, but only after implementing https://github.com/gakonst/foundry/issues/991 so coverage can be deterministic.\r\n4. Add a flag so the user can determine whether or not fuzz test runs should be included in coverage reports.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1089486836/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1089762947",
    "html_url": "https://github.com/foundry-rs/foundry/issues/99#issuecomment-1089762947",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/99",
    "id": 1089762947,
    "node_id": "IC_kwDOGBlvNc5A9HaD",
    "user": {
      "login": "maurelian",
      "id": 23033765,
      "node_id": "MDQ6VXNlcjIzMDMzNzY1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23033765?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/maurelian",
      "html_url": "https://github.com/maurelian",
      "followers_url": "https://api.github.com/users/maurelian/followers",
      "following_url": "https://api.github.com/users/maurelian/following{/other_user}",
      "gists_url": "https://api.github.com/users/maurelian/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/maurelian/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/maurelian/subscriptions",
      "organizations_url": "https://api.github.com/users/maurelian/orgs",
      "repos_url": "https://api.github.com/users/maurelian/repos",
      "events_url": "https://api.github.com/users/maurelian/events{/privacy}",
      "received_events_url": "https://api.github.com/users/maurelian/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-06T03:47:38Z",
    "updated_at": "2022-04-06T03:51:36Z",
    "author_association": "NONE",
    "body": "@mds1:\r\n> I'd be curious to hear more from @maurelian about how this should work, but a CI mode would be great so you can configure your CI to fail if aggregate coverage drops below some threshold.\r\n\r\nYeah, I can't find it now that we've migrated from GHA to Circle CI, but we [previously depended](https://github.com/ethereum-optimism/optimism/pull/1971/files#diff-c598514493fcf9134893c343861bd43d553d91fcf8423b389a9638c34540e385L104-L110)on tooling from CodeCov to cause the CI failure.\r\n\r\n> One thing I forgot to mention is how fuzz/invariant tests should affect coverage reports. I think there's a few ways we can handle this. \r\n\r\nWhen I think of coverage I think of unit tests, and I'd want to be able to use the report to direct me to where further tests are needed. So, my default is to not mix the two kinds of coverage up, at most have a separate report for each. \r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1089762947/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1101017181",
    "html_url": "https://github.com/foundry-rs/foundry/issues/99#issuecomment-1101017181",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/99",
    "id": 1101017181,
    "node_id": "IC_kwDOGBlvNc5BoDBd",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-18T01:48:53Z",
    "updated_at": "2022-04-18T01:48:53Z",
    "author_association": "COLLABORATOR",
    "body": "> When I think of coverage I think of unit tests, and I'd want to be able to use the report to direct me to where further tests are needed. So, my default is to not mix the two kinds of coverage up, at most have a separate report for each.\r\n\r\nHmm, interesting! I find sometimes I only write fuzz tests for certain portions of code, since having a separate concrete test for the same code is redundant. But I see your use case, so perhaps an `--include-fuzz` flag is the best option here. And if you always run `forge coverage --include-fuzz`, but see a regression in coverage, that's an indication you probably should e.g. add a concrete test to ensure consistent coverage.\r\n\r\n(Side note: Above I suggested `forge test --coverage`, but when writing this I naturally went to `forge coverage`. I think either is fine fwiw)",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1101017181/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1101437826",
    "html_url": "https://github.com/foundry-rs/foundry/issues/99#issuecomment-1101437826",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/99",
    "id": 1101437826,
    "node_id": "IC_kwDOGBlvNc5BppuC",
    "user": {
      "login": "Willyham",
      "id": 169475,
      "node_id": "MDQ6VXNlcjE2OTQ3NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/169475?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Willyham",
      "html_url": "https://github.com/Willyham",
      "followers_url": "https://api.github.com/users/Willyham/followers",
      "following_url": "https://api.github.com/users/Willyham/following{/other_user}",
      "gists_url": "https://api.github.com/users/Willyham/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Willyham/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Willyham/subscriptions",
      "organizations_url": "https://api.github.com/users/Willyham/orgs",
      "repos_url": "https://api.github.com/users/Willyham/repos",
      "events_url": "https://api.github.com/users/Willyham/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Willyham/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-18T14:09:53Z",
    "updated_at": "2022-04-18T14:09:53Z",
    "author_association": "NONE",
    "body": "Hello, I'm very interested in helping out with this feature! I posted some discussion here https://github.com/foundry-rs/foundry/discussions/1348 before I realised this issue existed.\r\n\r\nInitial thoughts after catching up:\r\n\r\n1. Are we settled on the implementation at the solidity level via AST manipulation rather than at the VM level?\r\n1. I'm definitely in favour of the tooling just producing a standardised format and leaving the reporting/html generation/etc to other tools. There are many of them which already exist. Does rust have a native coverage format? Ideally using a format which doesn't require another package manager (e.g. npm) to install dev tooling would be nice.\r\n1. I would personally include fuzzing in the coverage but I can see the argument for a flag. Would prefer if the flag was opt-out though.\r\n1. I would lean towards `forge test --cover[age]` because all the same options (e.g. `--match`) will be useful/needed as well. `forge cover` could be an alias for `forge test --cover`.\r\n\r\nAnd finally, the gold standard here would be to integrate the coverage report with the solidity plugins for editors, so that you can see the coverage results directly in your editor every time you save. This massively plays to `forge`'s strength as tests are feasible to run on save, which isn't really possible with other environments.\r\n\r\nThe Go plugin does this and it makes the feedback loop for tests incredibly fast\r\n\r\n<img width=\"603\" alt=\"image\" src=\"https://user-images.githubusercontent.com/169475/163819989-c58ecec2-b816-4619-92fe-1b9d1a98135f.png\">\r\n\r\nI am completely new to the codebase but keen to help out. I think the best way to parallelise would be to try and understand any dependencies or refactors needed and possibly try to create some distinct issues 🙏 \r\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1101437826/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1101461071",
    "html_url": "https://github.com/foundry-rs/foundry/issues/99#issuecomment-1101461071",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/99",
    "id": 1101461071,
    "node_id": "IC_kwDOGBlvNc5BpvZP",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-18T14:39:43Z",
    "updated_at": "2022-04-18T14:39:43Z",
    "author_association": "MEMBER",
    "body": ">Are we settled on the implementation at the solidity level via AST manipulation rather than at the VM level?\r\n\r\nI think the current thinking is that we would not use the AST. We would instead on a VM-level check jump instructions and map those to the source code using source maps, but the approach hasn't been validated so that might change.\r\n\r\n>And finally, the gold standard here would be to integrate the coverage report with the solidity plugins for editors, so that you can see the coverage results directly in your editor every time you save. This massively plays to forge's strength as tests are feasible to run on save, which isn't really possible with other environments.\r\n\r\nDo you have any additional info on how this works? I'd assume it uses LCOV - if that's the case, then integration should be simple. We probably just need a way to output the raw LCOV to stdout",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1101461071/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1101501858",
    "html_url": "https://github.com/foundry-rs/foundry/issues/99#issuecomment-1101501858",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/99",
    "id": 1101501858,
    "node_id": "IC_kwDOGBlvNc5Bp5Wi",
    "user": {
      "login": "Willyham",
      "id": 169475,
      "node_id": "MDQ6VXNlcjE2OTQ3NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/169475?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Willyham",
      "html_url": "https://github.com/Willyham",
      "followers_url": "https://api.github.com/users/Willyham/followers",
      "following_url": "https://api.github.com/users/Willyham/following{/other_user}",
      "gists_url": "https://api.github.com/users/Willyham/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Willyham/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Willyham/subscriptions",
      "organizations_url": "https://api.github.com/users/Willyham/orgs",
      "repos_url": "https://api.github.com/users/Willyham/repos",
      "events_url": "https://api.github.com/users/Willyham/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Willyham/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-18T15:32:11Z",
    "updated_at": "2022-04-18T15:32:11Z",
    "author_association": "NONE",
    "body": "> I think the current thinking is that we would not use the AST. We would instead on a VM-level check jump instructions and map those to the source code using source maps, but the approach hasn't been validated so that might change.\r\n\r\nAh right, thanks. I had a question on this; if the compiler makes optimisations like removing branches, can we still map the bytecode back to source lines? Users clearly operate on the source-line level, so seeing missing coverage on a line because of something the compiler does would be confusing. I've seen that some languages seem to implement coverage with LLVM so I assume this is a solved problem, but not sure how it works.\r\n\r\n> Do you have any additional info on how this works? I'd assume it uses LCOV - if that's the case, then integration should be simple. We probably just need a way to output the raw LCOV to stdout\r\n\r\nGo has its own native coverage format (which is an extremely simple text file). The editor runs the tests and the file is output to a tmp directory, which is then read, parsed and rendered in the editor. I'd be happy to try and take this part on because I might be more use there, as I'm very unfamiliar with the vm code and rust.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1101501858/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1101516688",
    "html_url": "https://github.com/foundry-rs/foundry/issues/99#issuecomment-1101516688",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/99",
    "id": 1101516688,
    "node_id": "IC_kwDOGBlvNc5Bp8-Q",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-18T15:52:10Z",
    "updated_at": "2022-04-18T15:52:10Z",
    "author_association": "MEMBER",
    "body": ">Ah right, thanks. I had a question on this; if the compiler makes optimisations like removing branches, can we still map the bytecode back to source lines? Users clearly operate on the source-line level, so seeing missing coverage on a line because of something the compiler does would be confusing. I've seen that some languages seem to implement coverage with LLVM so I assume this is a solved problem, but not sure how it works.\r\n\r\nProbably not. The source maps in Solidity are really flaky when you turn the optimizer on, so we would probably need the optimizer to be off. I'm not sure, though, I'll figure that out as I implement the feature\r\n\r\n>Go has its own native coverage format (which is an extremely simple text file). The editor runs the tests and the file is output to a tmp directory, which is then read, parsed and rendered in the editor. I'd be happy to try and take this part on because I might be more use there, as I'm very unfamiliar with the vm code and rust.\r\n\r\nAh, I misunderstood as well - you don't want Forge to necessarily support Go's coverage format, just a coverage format that can be used in editors? If so, I think most editors should be able to support LCOV (used by C and others), or at least something proximal to it",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1101516688/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1101547315",
    "html_url": "https://github.com/foundry-rs/foundry/issues/99#issuecomment-1101547315",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/99",
    "id": 1101547315,
    "node_id": "IC_kwDOGBlvNc5BqEcz",
    "user": {
      "login": "Willyham",
      "id": 169475,
      "node_id": "MDQ6VXNlcjE2OTQ3NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/169475?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Willyham",
      "html_url": "https://github.com/Willyham",
      "followers_url": "https://api.github.com/users/Willyham/followers",
      "following_url": "https://api.github.com/users/Willyham/following{/other_user}",
      "gists_url": "https://api.github.com/users/Willyham/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Willyham/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Willyham/subscriptions",
      "organizations_url": "https://api.github.com/users/Willyham/orgs",
      "repos_url": "https://api.github.com/users/Willyham/repos",
      "events_url": "https://api.github.com/users/Willyham/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Willyham/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-18T16:32:02Z",
    "updated_at": "2022-04-18T16:32:02Z",
    "author_association": "NONE",
    "body": "Running it with the optimizer off makes sense 👍 \r\n\r\nFor the coverage; yes LCOV format would be good. The Go description was just an example of the how the output might be used in editors. As long as `forge` can output the LCOV file to a specified location, I should be able to integrate it with editor plugins relatively easily.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1101547315/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1105231203",
    "html_url": "https://github.com/foundry-rs/foundry/issues/99#issuecomment-1105231203",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/99",
    "id": 1105231203,
    "node_id": "IC_kwDOGBlvNc5B4H1j",
    "user": {
      "login": "maurelian",
      "id": 23033765,
      "node_id": "MDQ6VXNlcjIzMDMzNzY1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23033765?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/maurelian",
      "html_url": "https://github.com/maurelian",
      "followers_url": "https://api.github.com/users/maurelian/followers",
      "following_url": "https://api.github.com/users/maurelian/following{/other_user}",
      "gists_url": "https://api.github.com/users/maurelian/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/maurelian/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/maurelian/subscriptions",
      "organizations_url": "https://api.github.com/users/maurelian/orgs",
      "repos_url": "https://api.github.com/users/maurelian/repos",
      "events_url": "https://api.github.com/users/maurelian/events{/privacy}",
      "received_events_url": "https://api.github.com/users/maurelian/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-21T13:46:42Z",
    "updated_at": "2022-04-21T13:46:42Z",
    "author_association": "NONE",
    "body": "`forge coverage` feels more consistent to me with the existence of `forge snapshot`.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1105231203/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1105642473",
    "html_url": "https://github.com/foundry-rs/foundry/issues/99#issuecomment-1105642473",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/99",
    "id": 1105642473,
    "node_id": "IC_kwDOGBlvNc5B5sPp",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-21T18:59:26Z",
    "updated_at": "2022-04-21T19:00:16Z",
    "author_association": "MEMBER",
    "body": "I also think `forge coverage` makes more sense to not clutter the interface of `forge test` with even more options. For example, we want at least `--coverage-threshold` (or just `--threshold` if on `forge coverage`), report types (`--report <type>`) and more.\r\n\r\nThere are also some clashes between `forge test` and the coverage behaviour; for example, we can't run coverage with optimizations turned on, but since you could conceivably do `forge test --gas-report --coverage` this may lead to \"bug reports\" even though it is intentional, since it might be unexpected behavior",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1105642473/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1112851174",
    "html_url": "https://github.com/foundry-rs/foundry/issues/99#issuecomment-1112851174",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/99",
    "id": 1112851174,
    "node_id": "IC_kwDOGBlvNc5CVMLm",
    "user": {
      "login": "gitcoinbot",
      "id": 27903976,
      "node_id": "MDQ6VXNlcjI3OTAzOTc2",
      "avatar_url": "https://avatars.githubusercontent.com/u/27903976?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gitcoinbot",
      "html_url": "https://github.com/gitcoinbot",
      "followers_url": "https://api.github.com/users/gitcoinbot/followers",
      "following_url": "https://api.github.com/users/gitcoinbot/following{/other_user}",
      "gists_url": "https://api.github.com/users/gitcoinbot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gitcoinbot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gitcoinbot/subscriptions",
      "organizations_url": "https://api.github.com/users/gitcoinbot/orgs",
      "repos_url": "https://api.github.com/users/gitcoinbot/repos",
      "events_url": "https://api.github.com/users/gitcoinbot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gitcoinbot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-29T03:49:00Z",
    "updated_at": "2022-04-29T03:49:00Z",
    "author_association": "NONE",
    "body": "Issue Status: 1. **Open** 2. Started 3. Submitted 4. Done \n\n<hr>\n\n__This issue now has a funding of 20000.0 DAI (20000.0 USD @ $1.0/DAI)  attached to it as part of the synapsecns fund.__\n\n * If you would like to work on this issue you can 'start work' [on the Gitcoin Issue Details page](https://gitcoin.co/issue/foundry-rs/foundry/99/100028810).\n* Want to chip in? Add your own contribution [here](https://gitcoin.co/issue/foundry-rs/foundry/99/100028810).\n* Questions? Checkout <a href='https://gitcoin.co/help'>Gitcoin Help</a> or the <a href='https://discord.gg/gitcoin/'>Gitcoin's Discord</a>\n* $4,415,122.51 more funded OSS Work available on the [Gitcoin Issue Explorer](https://gitcoin.co/explorer)\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1112851174/reactions",
      "total_count": 10,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 10
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1113152177",
    "html_url": "https://github.com/foundry-rs/foundry/issues/99#issuecomment-1113152177",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/99",
    "id": 1113152177,
    "node_id": "IC_kwDOGBlvNc5CWVqx",
    "user": {
      "login": "0xvv",
      "id": 104269768,
      "node_id": "U_kgDOBjcHyA",
      "avatar_url": "https://avatars.githubusercontent.com/u/104269768?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/0xvv",
      "html_url": "https://github.com/0xvv",
      "followers_url": "https://api.github.com/users/0xvv/followers",
      "following_url": "https://api.github.com/users/0xvv/following{/other_user}",
      "gists_url": "https://api.github.com/users/0xvv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/0xvv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/0xvv/subscriptions",
      "organizations_url": "https://api.github.com/users/0xvv/orgs",
      "repos_url": "https://api.github.com/users/0xvv/repos",
      "events_url": "https://api.github.com/users/0xvv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/0xvv/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-29T10:28:09Z",
    "updated_at": "2022-04-29T10:28:09Z",
    "author_association": "CONTRIBUTOR",
    "body": "Trying to summarize the TODOs\r\n\r\n- [ ] add `forge coverage` \r\n- [ ] add `--threshold` to `coverage` to enforce minimal coverage\r\n- [ ] add `--include-fuzz` to `coverage` (or --exclude-fuzz if we chose opt-out)\r\n- [ ] parse sources with `solang-parser` and creates buckets\r\n- [ ] hook into Sputnik `Handler::pre_validate` and increment visited count\r\n- [ ] generate each test coverage report\r\n- [ ] merge all tests reports\r\n- [ ] generate LCOV file\r\n- [ ] generate terminal output (from LCOV ?)\r\n\r\nAnyone already started working on this ? \r\nI'm down to work on it but may lack some knowledge on the VM side",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1113152177/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1113536129",
    "html_url": "https://github.com/foundry-rs/foundry/issues/99#issuecomment-1113536129",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/99",
    "id": 1113536129,
    "node_id": "IC_kwDOGBlvNc5CXzaB",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-29T17:07:38Z",
    "updated_at": "2022-04-29T17:08:21Z",
    "author_association": "MEMBER",
    "body": "Yes, I am actively working on it. Will post a status update tomorrow (I am not home)\n\nThe todo list is no longer valid since that was based on Sputnik, and we've since moved to REVM :)",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1113536129/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1113903481",
    "html_url": "https://github.com/foundry-rs/foundry/issues/99#issuecomment-1113903481",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/99",
    "id": 1113903481,
    "node_id": "IC_kwDOGBlvNc5CZNF5",
    "user": {
      "login": "gitcoinbot",
      "id": 27903976,
      "node_id": "MDQ6VXNlcjI3OTAzOTc2",
      "avatar_url": "https://avatars.githubusercontent.com/u/27903976?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gitcoinbot",
      "html_url": "https://github.com/gitcoinbot",
      "followers_url": "https://api.github.com/users/gitcoinbot/followers",
      "following_url": "https://api.github.com/users/gitcoinbot/following{/other_user}",
      "gists_url": "https://api.github.com/users/gitcoinbot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gitcoinbot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gitcoinbot/subscriptions",
      "organizations_url": "https://api.github.com/users/gitcoinbot/orgs",
      "repos_url": "https://api.github.com/users/gitcoinbot/repos",
      "events_url": "https://api.github.com/users/gitcoinbot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gitcoinbot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-30T03:31:56Z",
    "updated_at": "2022-05-01T17:54:51Z",
    "author_association": "NONE",
    "body": "Issue Status: 1. Open 2. **Started** 3. Submitted 4. Done \n\n<hr>\n\n__Work has been started__.\n\n\nThese users each claimed they can complete the work by 264 years, 6 months from now.\nPlease review their action plans below:\n\n\n**1) [bastek8](https://gitcoin.co/bastek8) has applied to start work _(Funders only: [approve worker](https://gitcoin.co/issue/foundry-rs/foundry/99/100028810?mutate_worker_action=approve&worker=bastek8) | [reject worker](https://gitcoin.co/issue/foundry-rs/foundry/99/100028810?mutate_worker_action=reject&worker=bastek8))_.**\n\nProgram i wszystlo z hun zwiazane\n**2) [onbjerg](https://gitcoin.co/onbjerg) has been approved to start work.**\n\nI was already working on this feature before the bounty was added\n**3) [malavekevin36](https://gitcoin.co/malavekevin36) has applied to start work _(Funders only: [approve worker](https://gitcoin.co/issue/foundry-rs/foundry/99/100028810?mutate_worker_action=approve&worker=malavekevin36) | [reject worker](https://gitcoin.co/issue/foundry-rs/foundry/99/100028810?mutate_worker_action=reject&worker=malavekevin36))_.**\n\nI work plan and whoever don’t want to come back to work they can find a new job\n\nLearn more [on the Gitcoin Issue Details page](https://gitcoin.co/issue/foundry-rs/foundry/99/100028810).\n\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1113903481/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1114013860",
    "html_url": "https://github.com/foundry-rs/foundry/issues/99#issuecomment-1114013860",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/99",
    "id": 1114013860,
    "node_id": "IC_kwDOGBlvNc5CZoCk",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-30T16:16:32Z",
    "updated_at": "2022-04-30T16:16:43Z",
    "author_association": "MEMBER",
    "body": "So, as promised, here is a status update.\r\n\r\nI was already working on this issue prior to the bounty (which is why I am assigned).\r\n\r\nInitially, the thought was to analyse `JUMPI` and `JUMPDEST`s to find branches (i.e. `require`, `assert`, `if` etc.), however it would not get us all the way in terms of the information we want - we want functions, branches, executable lines and statements.\r\n\r\n### Background\r\n\r\nThe primary mode of operation for the coverage tool will be to collect the following pieces of information:\r\n\r\n- **Functions**\r\n- **Executable lines**: lines, excluding lines that do nothing (whitespace, comments, brackets on single lines etc.)\r\n- **Branches**: If statements, calls to require and asserts\r\n- **Statements**: executable statements, which differ from lines in that you can have multiple statements per executable line.\r\n\r\nThis information will be collected from the AST of the Solidity files. Then the tests are run with a special coverage collector that marks opcodes as hit as they are executed, which we later use (along with source maps) to map back to the coverage items.\r\n\r\n### Report types\r\n\r\nThe above information will be output either to stdout as a simple report, or as an LCOV file that you can upload to services like CodeCov. A stretch goal would be to add a HTML report as well, but since tools already exist for converting LCOV to HTML, it isn't a deal breaker if it is not in the first version.\r\n\r\n### Compared to other coverage tools\r\n\r\n- DappTools's coverage tool is not super great (see comments above) as it does not support outputting to standard reporting formats like LCOV, and it does not treat `require` and `assert` as branches.\r\n- Hardhat Coverage is closer to what we want, but it's slow and it distorts gas since it instruments the code of the contracts\r\n\r\n### Current status\r\n\r\nI went with the jump analysis first, but as I found it insufficient, I had to scrap most of my work and start over with the method described above. The coverage collector is done, but I am currently having some issues constructing the higher level coverage data that the reports will use (see below)\r\n\r\n### Current issues\r\n\r\n- The AST implementation in `ethers-solc` is not entirely complete yet, so I am implementing nodes as I go\r\n- The AST implementation in `ethers-solc` only works for Solidity >=0.8.0 currently since the AST had a breaking change there, so we need to add support for <=0.8.0 but it is not a blocker since this work can be done in parallel\r\n- Source maps in Solidity identify source files with a source ID. This source ID is required to be unique, and it is if you compile all files in one go, but `ethers-solc` currently tries to compile multiple files in parallel, leading to source ID clashes. This is a blocker, since we need to be able to map bytecode of any contract to the coverage items using the source map.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1114013860/reactions",
      "total_count": 8,
      "+1": 8,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1122611353",
    "html_url": "https://github.com/foundry-rs/foundry/issues/99#issuecomment-1122611353",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/99",
    "id": 1122611353,
    "node_id": "IC_kwDOGBlvNc5C6bCZ",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-10T16:21:21Z",
    "updated_at": "2022-05-10T16:21:21Z",
    "author_association": "MEMBER",
    "body": "Sorry guys, this is taking longer than expected. I've opened up a draft PR with a status update, and I intend to update that PR as I go with new status updates if relevant. https://github.com/foundry-rs/foundry/pull/1576",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1122611353/reactions",
      "total_count": 6,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 6,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1163426835",
    "html_url": "https://github.com/foundry-rs/foundry/issues/99#issuecomment-1163426835",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/99",
    "id": 1163426835,
    "node_id": "IC_kwDOGBlvNc5FWHwT",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-22T17:43:01Z",
    "updated_at": "2022-06-22T17:43:01Z",
    "author_association": "MEMBER",
    "body": "Reopening this - still some edge cases and missing stuff. See this label: https://github.com/foundry-rs/foundry/labels/Cmd-forge-coverage",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1163426835/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1262239628",
    "html_url": "https://github.com/foundry-rs/foundry/issues/99#issuecomment-1262239628",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/99",
    "id": 1262239628,
    "node_id": "IC_kwDOGBlvNc5LPD-M",
    "user": {
      "login": "maurelian",
      "id": 23033765,
      "node_id": "MDQ6VXNlcjIzMDMzNzY1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23033765?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/maurelian",
      "html_url": "https://github.com/maurelian",
      "followers_url": "https://api.github.com/users/maurelian/followers",
      "following_url": "https://api.github.com/users/maurelian/following{/other_user}",
      "gists_url": "https://api.github.com/users/maurelian/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/maurelian/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/maurelian/subscriptions",
      "organizations_url": "https://api.github.com/users/maurelian/orgs",
      "repos_url": "https://api.github.com/users/maurelian/repos",
      "events_url": "https://api.github.com/users/maurelian/events{/privacy}",
      "received_events_url": "https://api.github.com/users/maurelian/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-29T12:56:56Z",
    "updated_at": "2022-09-29T12:56:56Z",
    "author_association": "NONE",
    "body": "May I ask what the status is with coverage generation of fuzz tests? It looks to me as though they are not yet included and I don't yet see an `--include-fuzz` flag as discussed above. ",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1262239628/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
