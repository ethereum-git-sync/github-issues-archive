{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/834",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/834/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/834/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/834/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/834",
  "id": 1156314439,
  "node_id": "I_kwDOGBlvNc5E6_VH",
  "number": 834,
  "title": "Allow forking from different RPCs/block numbers when testing",
  "user": {
    "login": "0xTomoyo",
    "id": 93022570,
    "node_id": "U_kgDOBYtpag",
    "avatar_url": "https://avatars.githubusercontent.com/u/93022570?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/0xTomoyo",
    "html_url": "https://github.com/0xTomoyo",
    "followers_url": "https://api.github.com/users/0xTomoyo/followers",
    "following_url": "https://api.github.com/users/0xTomoyo/following{/other_user}",
    "gists_url": "https://api.github.com/users/0xTomoyo/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/0xTomoyo/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/0xTomoyo/subscriptions",
    "organizations_url": "https://api.github.com/users/0xTomoyo/orgs",
    "repos_url": "https://api.github.com/users/0xTomoyo/repos",
    "events_url": "https://api.github.com/users/0xTomoyo/events{/privacy}",
    "received_events_url": "https://api.github.com/users/0xTomoyo/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3394555740,
      "node_id": "LA_kwDOGBlvNc7KVM9c",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/A-evm",
      "name": "A-evm",
      "color": "FBCA04",
      "default": false,
      "description": "Area: EVM"
    },
    {
      "id": 3593644820,
      "node_id": "LA_kwDOGBlvNc7WMqsU",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-feature",
      "name": "T-feature",
      "color": "BFD4F2",
      "default": false,
      "description": "Type: feature"
    },
    {
      "id": 3593644915,
      "node_id": "LA_kwDOGBlvNc7WMqtz",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/Cmd-forge-test",
      "name": "Cmd-forge-test",
      "color": "006B75",
      "default": false,
      "description": "Command: forge test"
    },
    {
      "id": 3703752787,
      "node_id": "LA_kwDOGBlvNc7cwshT",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/C-forge",
      "name": "C-forge",
      "color": "5319E7",
      "default": false,
      "description": "Command: forge"
    },
    {
      "id": 3776975605,
      "node_id": "LA_kwDOGBlvNc7hIBL1",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/Cmd-forge-debug",
      "name": "Cmd-forge-debug",
      "color": "006B75",
      "default": false,
      "description": "Command: forge run"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 18,
  "created_at": "2022-03-02T03:52:17Z",
  "updated_at": "2022-07-12T10:23:18Z",
  "closed_at": "2022-07-12T10:23:18Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "### Component\n\nForge\n\n### Describe the feature you would like\n\nCurrently if you want to test against mainnet state, you can pass in an RPC url and block number to fork from. However it isn't possible to run tests on multiple networks or fork from different block numbers.\r\n\r\nFor example, you might want 1 test to run against the state at block number 10000, and another at block number 20000.\r\n\r\nHardhat has a method called `hardhat_reset` which allows you to change the RPC url/block number mainnet state is forked from: https://hardhat.org/hardhat-network/guides/mainnet-forking.html#resetting-the-fork\r\n\r\nA cheatcode similar to that would be useful. It could look like this:\r\n\r\n```solidity\r\nhevm.reset(\"https://infura.io/....\", 12345);\r\n```\n\n### Additional context\n\n_No response_",
  "closed_by": {
    "login": "mattsse",
    "id": 19890894,
    "node_id": "MDQ6VXNlcjE5ODkwODk0",
    "avatar_url": "https://avatars.githubusercontent.com/u/19890894?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mattsse",
    "html_url": "https://github.com/mattsse",
    "followers_url": "https://api.github.com/users/mattsse/followers",
    "following_url": "https://api.github.com/users/mattsse/following{/other_user}",
    "gists_url": "https://api.github.com/users/mattsse/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mattsse/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mattsse/subscriptions",
    "organizations_url": "https://api.github.com/users/mattsse/orgs",
    "repos_url": "https://api.github.com/users/mattsse/repos",
    "events_url": "https://api.github.com/users/mattsse/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mattsse/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/834/reactions",
    "total_count": 4,
    "+1": 4,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/834/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1056167527",
    "html_url": "https://github.com/foundry-rs/foundry/issues/834#issuecomment-1056167527",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/834",
    "id": 1056167527,
    "node_id": "IC_kwDOGBlvNc4-89Zn",
    "user": {
      "login": "tynes",
      "id": 6626818,
      "node_id": "MDQ6VXNlcjY2MjY4MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6626818?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tynes",
      "html_url": "https://github.com/tynes",
      "followers_url": "https://api.github.com/users/tynes/followers",
      "following_url": "https://api.github.com/users/tynes/following{/other_user}",
      "gists_url": "https://api.github.com/users/tynes/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tynes/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tynes/subscriptions",
      "organizations_url": "https://api.github.com/users/tynes/orgs",
      "repos_url": "https://api.github.com/users/tynes/repos",
      "events_url": "https://api.github.com/users/tynes/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tynes/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-02T04:17:11Z",
    "updated_at": "2022-03-02T04:17:11Z",
    "author_association": "CONTRIBUTOR",
    "body": "This would also allow for testing of apps that run across multiple chains which would be useful",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1056167527/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1056234835",
    "html_url": "https://github.com/foundry-rs/foundry/issues/834#issuecomment-1056234835",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/834",
    "id": 1056234835,
    "node_id": "IC_kwDOGBlvNc4-9N1T",
    "user": {
      "login": "tynes",
      "id": 6626818,
      "node_id": "MDQ6VXNlcjY2MjY4MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6626818?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tynes",
      "html_url": "https://github.com/tynes",
      "followers_url": "https://api.github.com/users/tynes/followers",
      "following_url": "https://api.github.com/users/tynes/following{/other_user}",
      "gists_url": "https://api.github.com/users/tynes/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tynes/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tynes/subscriptions",
      "organizations_url": "https://api.github.com/users/tynes/orgs",
      "repos_url": "https://api.github.com/users/tynes/repos",
      "events_url": "https://api.github.com/users/tynes/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tynes/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-02T05:07:13Z",
    "updated_at": "2022-03-02T05:07:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "Another thought - perhaps it would be better to have named urls in the config file and then use the name as the first arg to `hevm.reset`, then you wouldn't need to commit secrets into tests",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1056234835/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1056281036",
    "html_url": "https://github.com/foundry-rs/foundry/issues/834#issuecomment-1056281036",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/834",
    "id": 1056281036,
    "node_id": "IC_kwDOGBlvNc4-9ZHM",
    "user": {
      "login": "gakonst",
      "id": 17802178,
      "node_id": "MDQ6VXNlcjE3ODAyMTc4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17802178?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gakonst",
      "html_url": "https://github.com/gakonst",
      "followers_url": "https://api.github.com/users/gakonst/followers",
      "following_url": "https://api.github.com/users/gakonst/following{/other_user}",
      "gists_url": "https://api.github.com/users/gakonst/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gakonst/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gakonst/subscriptions",
      "organizations_url": "https://api.github.com/users/gakonst/orgs",
      "repos_url": "https://api.github.com/users/gakonst/repos",
      "events_url": "https://api.github.com/users/gakonst/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gakonst/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-02T05:39:21Z",
    "updated_at": "2022-03-02T05:40:49Z",
    "author_association": "MEMBER",
    "body": "> Another thought - perhaps it would be better to have named urls in the config file and then use the name as the first arg to hevm.reset, then you wouldn't need to commit secrets into tests\r\n\r\nMaybe we can add a `vm.env(string)(string)` cheatcode which loads an environment variable?\r\n\r\nNeed to think about how to make the cheatcode work. Seems doable. cc @onbjerg, we'd want a way to modify the forked provider's pinned block inside a cheatcode.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1056281036/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1057181982",
    "html_url": "https://github.com/foundry-rs/foundry/issues/834#issuecomment-1057181982",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/834",
    "id": 1057181982,
    "node_id": "IC_kwDOGBlvNc4_A1Ee",
    "user": {
      "login": "tynes",
      "id": 6626818,
      "node_id": "MDQ6VXNlcjY2MjY4MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6626818?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tynes",
      "html_url": "https://github.com/tynes",
      "followers_url": "https://api.github.com/users/tynes/followers",
      "following_url": "https://api.github.com/users/tynes/following{/other_user}",
      "gists_url": "https://api.github.com/users/tynes/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tynes/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tynes/subscriptions",
      "organizations_url": "https://api.github.com/users/tynes/orgs",
      "repos_url": "https://api.github.com/users/tynes/repos",
      "events_url": "https://api.github.com/users/tynes/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tynes/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-02T17:20:50Z",
    "updated_at": "2022-03-02T17:20:50Z",
    "author_association": "CONTRIBUTOR",
    "body": "`vm.env(string)(string)` could be generally useful in different ways, could the env vars be automatically injected from `.dapprc` or something like that at runtime? Also just wondering about the case where the largest possible env var is pulled in, I feel like its an unlikely edge case and should be fine. I also think similar functionality could be achieved with `hevm.ffi` if you read an env var, use `cast` to abi encode the data and then pass it to `echo -n`",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1057181982/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1101466598",
    "html_url": "https://github.com/foundry-rs/foundry/issues/834#issuecomment-1101466598",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/834",
    "id": 1101466598,
    "node_id": "IC_kwDOGBlvNc5Bpwvm",
    "user": {
      "login": "cantbeevil",
      "id": 100425732,
      "node_id": "U_kgDOBfxgBA",
      "avatar_url": "https://avatars.githubusercontent.com/u/100425732?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cantbeevil",
      "html_url": "https://github.com/cantbeevil",
      "followers_url": "https://api.github.com/users/cantbeevil/followers",
      "following_url": "https://api.github.com/users/cantbeevil/following{/other_user}",
      "gists_url": "https://api.github.com/users/cantbeevil/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cantbeevil/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cantbeevil/subscriptions",
      "organizations_url": "https://api.github.com/users/cantbeevil/orgs",
      "repos_url": "https://api.github.com/users/cantbeevil/repos",
      "events_url": "https://api.github.com/users/cantbeevil/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cantbeevil/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-18T14:48:00Z",
    "updated_at": "2022-04-18T14:51:01Z",
    "author_association": "NONE",
    "body": "any status update for this? cc: @gakonst ",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1101466598/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1101517393",
    "html_url": "https://github.com/foundry-rs/foundry/issues/834#issuecomment-1101517393",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/834",
    "id": 1101517393,
    "node_id": "IC_kwDOGBlvNc5Bp9JR",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-18T15:53:16Z",
    "updated_at": "2022-04-18T15:53:16Z",
    "author_association": "MEMBER",
    "body": "I don't think this is being worked on actively - @mattsse might be working on something similar for #1037 that can be ported to Forge as well, but I'm not sure",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1101517393/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1106568960",
    "html_url": "https://github.com/foundry-rs/foundry/issues/834#issuecomment-1106568960",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/834",
    "id": 1106568960,
    "node_id": "IC_kwDOGBlvNc5B9OcA",
    "user": {
      "login": "mattsse",
      "id": 19890894,
      "node_id": "MDQ6VXNlcjE5ODkwODk0",
      "avatar_url": "https://avatars.githubusercontent.com/u/19890894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mattsse",
      "html_url": "https://github.com/mattsse",
      "followers_url": "https://api.github.com/users/mattsse/followers",
      "following_url": "https://api.github.com/users/mattsse/following{/other_user}",
      "gists_url": "https://api.github.com/users/mattsse/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mattsse/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mattsse/subscriptions",
      "organizations_url": "https://api.github.com/users/mattsse/orgs",
      "repos_url": "https://api.github.com/users/mattsse/repos",
      "events_url": "https://api.github.com/users/mattsse/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mattsse/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-22T14:23:58Z",
    "updated_at": "2022-04-22T14:23:58Z",
    "author_association": "MEMBER",
    "body": "yes there'll be an option to reset/ and change this on the fly, but since this concerns forge, lets keep this open",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1106568960/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1121046256",
    "html_url": "https://github.com/foundry-rs/foundry/issues/834#issuecomment-1121046256",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/834",
    "id": 1121046256,
    "node_id": "IC_kwDOGBlvNc5C0c7w",
    "user": {
      "login": "hexonaut",
      "id": 588921,
      "node_id": "MDQ6VXNlcjU4ODkyMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/588921?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hexonaut",
      "html_url": "https://github.com/hexonaut",
      "followers_url": "https://api.github.com/users/hexonaut/followers",
      "following_url": "https://api.github.com/users/hexonaut/following{/other_user}",
      "gists_url": "https://api.github.com/users/hexonaut/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hexonaut/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hexonaut/subscriptions",
      "organizations_url": "https://api.github.com/users/hexonaut/orgs",
      "repos_url": "https://api.github.com/users/hexonaut/repos",
      "events_url": "https://api.github.com/users/hexonaut/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hexonaut/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-09T12:39:21Z",
    "updated_at": "2022-05-09T12:39:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "+1ing this from MakerDAO as we are very focused on cross-chain support for MCD.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1121046256/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1121139128",
    "html_url": "https://github.com/foundry-rs/foundry/issues/834#issuecomment-1121139128",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/834",
    "id": 1121139128,
    "node_id": "IC_kwDOGBlvNc5C0zm4",
    "user": {
      "login": "mattsse",
      "id": 19890894,
      "node_id": "MDQ6VXNlcjE5ODkwODk0",
      "avatar_url": "https://avatars.githubusercontent.com/u/19890894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mattsse",
      "html_url": "https://github.com/mattsse",
      "followers_url": "https://api.github.com/users/mattsse/followers",
      "following_url": "https://api.github.com/users/mattsse/following{/other_user}",
      "gists_url": "https://api.github.com/users/mattsse/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mattsse/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mattsse/subscriptions",
      "organizations_url": "https://api.github.com/users/mattsse/orgs",
      "repos_url": "https://api.github.com/users/mattsse/repos",
      "events_url": "https://api.github.com/users/mattsse/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mattsse/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-09T13:59:21Z",
    "updated_at": "2022-05-09T13:59:21Z",
    "author_association": "MEMBER",
    "body": "Support for this has landed in Anvil PR, but has not yet been incorporated into testing,\r\n\r\nwe'd need some cheatcodes first for that @onbjerg ?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1121139128/reactions",
      "total_count": 3,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 3,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1121232999",
    "html_url": "https://github.com/foundry-rs/foundry/issues/834#issuecomment-1121232999",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/834",
    "id": 1121232999,
    "node_id": "IC_kwDOGBlvNc5C1Khn",
    "user": {
      "login": "odyslam",
      "id": 13405632,
      "node_id": "MDQ6VXNlcjEzNDA1NjMy",
      "avatar_url": "https://avatars.githubusercontent.com/u/13405632?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/odyslam",
      "html_url": "https://github.com/odyslam",
      "followers_url": "https://api.github.com/users/odyslam/followers",
      "following_url": "https://api.github.com/users/odyslam/following{/other_user}",
      "gists_url": "https://api.github.com/users/odyslam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/odyslam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/odyslam/subscriptions",
      "organizations_url": "https://api.github.com/users/odyslam/orgs",
      "repos_url": "https://api.github.com/users/odyslam/repos",
      "events_url": "https://api.github.com/users/odyslam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/odyslam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-09T15:13:18Z",
    "updated_at": "2022-05-09T15:13:18Z",
    "author_association": "CONTRIBUTOR",
    "body": "+ 1 from Nomad.xyz as well. Being a cross-chain communication protocol, this is going to be a central piece of our testing harness, that I am currently migrating to Foundry.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1121232999/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1122349907",
    "html_url": "https://github.com/foundry-rs/foundry/issues/834#issuecomment-1122349907",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/834",
    "id": 1122349907,
    "node_id": "IC_kwDOGBlvNc5C5bNT",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-10T12:51:00Z",
    "updated_at": "2022-05-10T12:52:05Z",
    "author_association": "MEMBER",
    "body": "> Support for this has landed in Anvil PR, but has not yet been incorporated into testing,\r\n> \r\n> we'd need some cheatcodes first for that @onbjerg ?\r\n\r\nYes! We'd need two things:\r\n\r\n1. A cheatcode to read config *or* environment variables so people don't paste RPC URLs directly into tests\r\n2. A channel between the cheatcodes handler and the backend handler where we can pass messages like `connect`/`disconnect`/`swap` etc.\r\n\r\nFor 1. we can either add `vm.env(string) returns (string)` as @gakonst suggested or we can do something like `vm.chain(uint256)` that then reads the relevant config from `foundry.toml` and checks that the chain ID matches what we expect.\r\n\r\nAlso: bonus points if we can make some easy-to-understand or reusable inspector <-> channel abstraction since it is useful for more things. For example, we could use it for a better debugging experience that doesn't crash on big contracts",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1122349907/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1122373149",
    "html_url": "https://github.com/foundry-rs/foundry/issues/834#issuecomment-1122373149",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/834",
    "id": 1122373149,
    "node_id": "IC_kwDOGBlvNc5C5g4d",
    "user": {
      "login": "odyslam",
      "id": 13405632,
      "node_id": "MDQ6VXNlcjEzNDA1NjMy",
      "avatar_url": "https://avatars.githubusercontent.com/u/13405632?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/odyslam",
      "html_url": "https://github.com/odyslam",
      "followers_url": "https://api.github.com/users/odyslam/followers",
      "following_url": "https://api.github.com/users/odyslam/following{/other_user}",
      "gists_url": "https://api.github.com/users/odyslam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/odyslam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/odyslam/subscriptions",
      "organizations_url": "https://api.github.com/users/odyslam/orgs",
      "repos_url": "https://api.github.com/users/odyslam/repos",
      "events_url": "https://api.github.com/users/odyslam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/odyslam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-10T13:13:52Z",
    "updated_at": "2022-05-10T13:13:52Z",
    "author_association": "CONTRIBUTOR",
    "body": "@onbjerg I like the generality of `vm.env`. \r\n\r\nI sense that this is somewhat relevant to the efforts of @brockelmore to read/write data from files. is there a formula to kill 2 birds with one stone here? ",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1122373149/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1122498221",
    "html_url": "https://github.com/foundry-rs/foundry/issues/834#issuecomment-1122498221",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/834",
    "id": 1122498221,
    "node_id": "IC_kwDOGBlvNc5C5_at",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-10T14:49:04Z",
    "updated_at": "2022-05-10T14:49:27Z",
    "author_association": "MEMBER",
    "body": "Not really. My only concern about only `vm.env` for this is that it's easy to set the wrong RPC URL in an environment variable, so to be safe you'd have to check that the chain ID matches what you expect, which some people may want yet another cheatcode for instead of using `block.chainid`. So, either we use `vm.env` for this + some helper in Forge Std, or we use `vm.chain` (or something with a better name) for this feature and add `vm.env` in a separate task.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1122498221/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1122823000",
    "html_url": "https://github.com/foundry-rs/foundry/issues/834#issuecomment-1122823000",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/834",
    "id": 1122823000,
    "node_id": "IC_kwDOGBlvNc5C7OtY",
    "user": {
      "login": "gakonst",
      "id": 17802178,
      "node_id": "MDQ6VXNlcjE3ODAyMTc4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17802178?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gakonst",
      "html_url": "https://github.com/gakonst",
      "followers_url": "https://api.github.com/users/gakonst/followers",
      "following_url": "https://api.github.com/users/gakonst/following{/other_user}",
      "gists_url": "https://api.github.com/users/gakonst/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gakonst/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gakonst/subscriptions",
      "organizations_url": "https://api.github.com/users/gakonst/orgs",
      "repos_url": "https://api.github.com/users/gakonst/repos",
      "events_url": "https://api.github.com/users/gakonst/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gakonst/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-10T20:20:27Z",
    "updated_at": "2022-05-10T20:21:45Z",
    "author_association": "MEMBER",
    "body": "One idea in the middle:\r\n1. Adding a chainId -> RPC url mapping to Foundry toml\r\n2. Vm.setFork (h/t @brockelmore) which would reset the url in the backend handler\r\n\r\nMain thing to keep in mind imo is how do you maintain the in memory cache as you switch forks.\r\n\r\nI'd say vm.env is a little out of scope as a cheatcode , but we want IMO to be able to read env vars into foundry toml so we can have shared prefix urls and only appending the api key cc @mattsse ",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1122823000/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1122830336",
    "html_url": "https://github.com/foundry-rs/foundry/issues/834#issuecomment-1122830336",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/834",
    "id": 1122830336,
    "node_id": "IC_kwDOGBlvNc5C7QgA",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-10T20:29:14Z",
    "updated_at": "2022-05-10T20:29:14Z",
    "author_association": "COLLABORATOR",
    "body": "FWIW this is also relevant to https://github.com/foundry-rs/foundry/issues/939. We'll need a block number anyway, so perhaps we can use `vm.setFork(string rpcUrl, uint256 blockNumber)` to solve both of these",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1122830336/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1123799032",
    "html_url": "https://github.com/foundry-rs/foundry/issues/834#issuecomment-1123799032",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/834",
    "id": 1123799032,
    "node_id": "IC_kwDOGBlvNc5C-8_4",
    "user": {
      "login": "mattsse",
      "id": 19890894,
      "node_id": "MDQ6VXNlcjE5ODkwODk0",
      "avatar_url": "https://avatars.githubusercontent.com/u/19890894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mattsse",
      "html_url": "https://github.com/mattsse",
      "followers_url": "https://api.github.com/users/mattsse/followers",
      "following_url": "https://api.github.com/users/mattsse/following{/other_user}",
      "gists_url": "https://api.github.com/users/mattsse/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mattsse/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mattsse/subscriptions",
      "organizations_url": "https://api.github.com/users/mattsse/orgs",
      "repos_url": "https://api.github.com/users/mattsse/repos",
      "events_url": "https://api.github.com/users/mattsse/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mattsse/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-11T13:58:27Z",
    "updated_at": "2022-05-11T13:58:51Z",
    "author_association": "MEMBER",
    "body": "`vm.setFork(string rpcUrl, uint256 blockNumber)` would either set or, change the fork for the remainder for the test or until the next `vm.setFork` is called, right?\r\n\r\nthe rules regarding what state is kept when switching forks are not clear yet.\r\n\r\nBasically a fork DB consists of two halves: read, write:\r\n* everything fetched from the remote is stored in the `read` part, \r\n* All modifications are stored in the `write` part\r\n\r\nwhen the executor needs a specific storage value then it does this check essentially:\r\n\r\n```rust\r\nlet value = write.get(addr, slot).unwrap_or(read.get(addr, slot))\r\n```\r\n\r\nwhich reads: \"if the value exists in the write halve return this, otherwise return from the read halve and fetch from remote if missing\"\r\n\r\n\r\nso a possible solution would be to switch out the `read` halve when switching fork\r\n\r\n\r\n\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1123799032/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1123896936",
    "html_url": "https://github.com/foundry-rs/foundry/issues/834#issuecomment-1123896936",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/834",
    "id": 1123896936,
    "node_id": "IC_kwDOGBlvNc5C_U5o",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-11T15:01:47Z",
    "updated_at": "2022-05-11T15:06:30Z",
    "author_association": "COLLABORATOR",
    "body": "> `vm.setFork(string rpcUrl, uint256 blockNumber)` would either set or, change the fork for the remainder for the test or until the next `vm.setFork` is called, right?\r\n\r\nThis sounds right to me, but worth considering `fork` / `startFork` / `stopFork` semantics to be consistent with other cheatcodes + enable switching to no fork if needed.\r\n\r\n> so a possible solution would be to switch out the `read` halve when switching fork\r\n\r\nHmm, do we also need to switch out the `write` half? I'm imagining a case where a contract exists at the same address on two chains, but with different state. If I update that contract's state while forking from chain 1, we should ensure that we don't read the new chain 1 state after switching to chain 2\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1123896936/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1123930916",
    "html_url": "https://github.com/foundry-rs/foundry/issues/834#issuecomment-1123930916",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/834",
    "id": 1123930916,
    "node_id": "IC_kwDOGBlvNc5C_dMk",
    "user": {
      "login": "mattsse",
      "id": 19890894,
      "node_id": "MDQ6VXNlcjE5ODkwODk0",
      "avatar_url": "https://avatars.githubusercontent.com/u/19890894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mattsse",
      "html_url": "https://github.com/mattsse",
      "followers_url": "https://api.github.com/users/mattsse/followers",
      "following_url": "https://api.github.com/users/mattsse/following{/other_user}",
      "gists_url": "https://api.github.com/users/mattsse/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mattsse/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mattsse/subscriptions",
      "organizations_url": "https://api.github.com/users/mattsse/orgs",
      "repos_url": "https://api.github.com/users/mattsse/repos",
      "events_url": "https://api.github.com/users/mattsse/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mattsse/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-11T15:28:03Z",
    "updated_at": "2022-05-11T15:28:03Z",
    "author_association": "MEMBER",
    "body": "so each fork has its own state, which you can load into the current context (`setFork`)\r\n\r\nHow would we handle the state of the test contract that we're currently in? clone when changing fork?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1123930916/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
