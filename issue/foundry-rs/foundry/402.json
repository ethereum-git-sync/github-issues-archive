{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/402",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/402/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/402/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/402/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/402",
  "id": 1096824877,
  "node_id": "I_kwDOGBlvNc5BYDgt",
  "number": 402,
  "title": "feat(forge): Better deployment",
  "user": {
    "login": "brockelmore",
    "id": 31553173,
    "node_id": "MDQ6VXNlcjMxNTUzMTcz",
    "avatar_url": "https://avatars.githubusercontent.com/u/31553173?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/brockelmore",
    "html_url": "https://github.com/brockelmore",
    "followers_url": "https://api.github.com/users/brockelmore/followers",
    "following_url": "https://api.github.com/users/brockelmore/following{/other_user}",
    "gists_url": "https://api.github.com/users/brockelmore/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/brockelmore/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/brockelmore/subscriptions",
    "organizations_url": "https://api.github.com/users/brockelmore/orgs",
    "repos_url": "https://api.github.com/users/brockelmore/repos",
    "events_url": "https://api.github.com/users/brockelmore/events{/privacy}",
    "received_events_url": "https://api.github.com/users/brockelmore/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3593644820,
      "node_id": "LA_kwDOGBlvNc7WMqsU",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-feature",
      "name": "T-feature",
      "color": "BFD4F2",
      "default": false,
      "description": "Type: feature"
    },
    {
      "id": 3703752787,
      "node_id": "LA_kwDOGBlvNc7cwshT",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/C-forge",
      "name": "C-forge",
      "color": "5319E7",
      "default": false,
      "description": "Command: forge"
    },
    {
      "id": 3759720129,
      "node_id": "LA_kwDOGBlvNc7gGMbB",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/D-hard",
      "name": "D-hard",
      "color": "0E8A16",
      "default": false,
      "description": "Difficulty: hard"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": {
    "login": "brockelmore",
    "id": 31553173,
    "node_id": "MDQ6VXNlcjMxNTUzMTcz",
    "avatar_url": "https://avatars.githubusercontent.com/u/31553173?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/brockelmore",
    "html_url": "https://github.com/brockelmore",
    "followers_url": "https://api.github.com/users/brockelmore/followers",
    "following_url": "https://api.github.com/users/brockelmore/following{/other_user}",
    "gists_url": "https://api.github.com/users/brockelmore/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/brockelmore/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/brockelmore/subscriptions",
    "organizations_url": "https://api.github.com/users/brockelmore/orgs",
    "repos_url": "https://api.github.com/users/brockelmore/repos",
    "events_url": "https://api.github.com/users/brockelmore/events{/privacy}",
    "received_events_url": "https://api.github.com/users/brockelmore/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "brockelmore",
      "id": 31553173,
      "node_id": "MDQ6VXNlcjMxNTUzMTcz",
      "avatar_url": "https://avatars.githubusercontent.com/u/31553173?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brockelmore",
      "html_url": "https://github.com/brockelmore",
      "followers_url": "https://api.github.com/users/brockelmore/followers",
      "following_url": "https://api.github.com/users/brockelmore/following{/other_user}",
      "gists_url": "https://api.github.com/users/brockelmore/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brockelmore/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brockelmore/subscriptions",
      "organizations_url": "https://api.github.com/users/brockelmore/orgs",
      "repos_url": "https://api.github.com/users/brockelmore/repos",
      "events_url": "https://api.github.com/users/brockelmore/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brockelmore/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 38,
  "created_at": "2022-01-08T03:52:43Z",
  "updated_at": "2022-06-05T16:55:55Z",
  "closed_at": "2022-05-29T02:04:06Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "Add the ability for forge to use a solidity file to create a contract on mainnet and arbitrary deploy scripts by adding a cheatcode. You could do something like:\n\n```solidity\ncontract t {\n    function deployMyContract() {\n        uint256 input1 = dep.someFunc();\n        vm.mainnetDeploy();\n        MyContract t = new MyContract(input1);\n    }\n}",
  "closed_by": {
    "login": "gakonst",
    "id": 17802178,
    "node_id": "MDQ6VXNlcjE3ODAyMTc4",
    "avatar_url": "https://avatars.githubusercontent.com/u/17802178?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/gakonst",
    "html_url": "https://github.com/gakonst",
    "followers_url": "https://api.github.com/users/gakonst/followers",
    "following_url": "https://api.github.com/users/gakonst/following{/other_user}",
    "gists_url": "https://api.github.com/users/gakonst/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/gakonst/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gakonst/subscriptions",
    "organizations_url": "https://api.github.com/users/gakonst/orgs",
    "repos_url": "https://api.github.com/users/gakonst/repos",
    "events_url": "https://api.github.com/users/gakonst/events{/privacy}",
    "received_events_url": "https://api.github.com/users/gakonst/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/402/reactions",
    "total_count": 8,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 8
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/402/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1007950288",
    "html_url": "https://github.com/foundry-rs/foundry/issues/402#issuecomment-1007950288",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/402",
    "id": 1007950288,
    "node_id": "IC_kwDOGBlvNc48FBnQ",
    "user": {
      "login": "gakonst",
      "id": 17802178,
      "node_id": "MDQ6VXNlcjE3ODAyMTc4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17802178?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gakonst",
      "html_url": "https://github.com/gakonst",
      "followers_url": "https://api.github.com/users/gakonst/followers",
      "following_url": "https://api.github.com/users/gakonst/following{/other_user}",
      "gists_url": "https://api.github.com/users/gakonst/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gakonst/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gakonst/subscriptions",
      "organizations_url": "https://api.github.com/users/gakonst/orgs",
      "repos_url": "https://api.github.com/users/gakonst/repos",
      "events_url": "https://api.github.com/users/gakonst/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gakonst/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-08T10:30:33Z",
    "updated_at": "2022-01-08T10:30:33Z",
    "author_association": "MEMBER",
    "body": "Would `vm.mainnetDeploy()` broadcast the next call as a transaction? So it'd require having instantiated a signer and an RPC connection? Maybe it could be configured in a 2-step process, one which generates the transactions, and another one which fires them all? (brainstorming)",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1007950288/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1008437288",
    "html_url": "https://github.com/foundry-rs/foundry/issues/402#issuecomment-1008437288",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/402",
    "id": 1008437288,
    "node_id": "IC_kwDOGBlvNc48G4go",
    "user": {
      "login": "Melvillian",
      "id": 1884338,
      "node_id": "MDQ6VXNlcjE4ODQzMzg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1884338?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Melvillian",
      "html_url": "https://github.com/Melvillian",
      "followers_url": "https://api.github.com/users/Melvillian/followers",
      "following_url": "https://api.github.com/users/Melvillian/following{/other_user}",
      "gists_url": "https://api.github.com/users/Melvillian/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Melvillian/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Melvillian/subscriptions",
      "organizations_url": "https://api.github.com/users/Melvillian/orgs",
      "repos_url": "https://api.github.com/users/Melvillian/repos",
      "events_url": "https://api.github.com/users/Melvillian/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Melvillian/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-09T22:34:45Z",
    "updated_at": "2022-01-09T22:34:45Z",
    "author_association": "NONE",
    "body": "Along with `vm.mainnetDeploy()`, we could specify `FOUNDRY_*` env vars in the `foundry.toml` and then these scripts would implicitly use the `FOUNDRY_RPC_URL` and `FOUNDRY_PRIVATE_KEY` or `MNEMONIC` + `PATH` env vars to setup RPC connection and signers.\r\n\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1008437288/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1008901639",
    "html_url": "https://github.com/foundry-rs/foundry/issues/402#issuecomment-1008901639",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/402",
    "id": 1008901639,
    "node_id": "IC_kwDOGBlvNc48Ip4H",
    "user": {
      "login": "gakonst",
      "id": 17802178,
      "node_id": "MDQ6VXNlcjE3ODAyMTc4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17802178?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gakonst",
      "html_url": "https://github.com/gakonst",
      "followers_url": "https://api.github.com/users/gakonst/followers",
      "following_url": "https://api.github.com/users/gakonst/following{/other_user}",
      "gists_url": "https://api.github.com/users/gakonst/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gakonst/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gakonst/subscriptions",
      "organizations_url": "https://api.github.com/users/gakonst/orgs",
      "repos_url": "https://api.github.com/users/gakonst/repos",
      "events_url": "https://api.github.com/users/gakonst/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gakonst/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-10T14:02:49Z",
    "updated_at": "2022-01-10T14:02:49Z",
    "author_association": "MEMBER",
    "body": "Another idea from @moodysalem: \r\n\r\n```yaml\r\n\r\nname: Deploy\r\n\r\non:\r\n  workflow_dispatch:\r\n    inputs:\r\n      rpc_url:\r\n        description: URL of the endpoint against which to deploy\r\n        required: true\r\n        type: string\r\n      gas_price:\r\n        description: The gas price in GWEI of the native currency of the chain\r\n        required: false\r\n        default: '50'\r\n        type: string\r\n\r\njobs:\r\n  tests:\r\n    name: Deploy\r\n\r\n    runs-on: ubuntu-latest\r\n\r\n    steps:\r\n      - name: Deploy V3 Factory\r\n        id: deploy-v3-factory\r\n        uses: ethdeploy/deploy-contract@v1\r\n        with:\r\n          private-key: ${{ secrets.V3_FACTORY_DEPLOY_KEY }}\r\n          object-uri: 'npm:@uniswap/v3-core@1.0.0:artifacts/contracts/UniswapV3Factory.sol/UniswapV3Factory.json'\r\n\r\n      - name: Verify V3 Factory\r\n        uses: ethdeploy/verify-contract@v1\r\n        with:\r\n          source-uri: 'git@github.com:Uniswap/v3-core.git/contracts/UniswapV3Factory.sol'\r\n\r\n      - name: Set V3 Factory Owner\r\n        uses: ethdeploy/call-contract@v1\r\n        with:\r\n          private-key: ${{ secrets.V3_FACTORY_DEPLOY_KEY }}\r\n          address: ${{ steps.deploy-v3-factory.outputs.address }}\r\n          methodSignature: 'setOwner(address newOwner)'\r\n          arguments: '0x........'\r\n```\r\n\r\nAnd the deployment state would be saved in GHA via upload-artifacts / download-artifacts, so that you can run the workflow multiple times to resume it.\r\n\r\nI think I prefer the Solidity only way still, just adding for context",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1008901639/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1012277777",
    "html_url": "https://github.com/foundry-rs/foundry/issues/402#issuecomment-1012277777",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/402",
    "id": 1012277777,
    "node_id": "IC_kwDOGBlvNc48ViIR",
    "user": {
      "login": "crisgarner",
      "id": 578688,
      "node_id": "MDQ6VXNlcjU3ODY4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/578688?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/crisgarner",
      "html_url": "https://github.com/crisgarner",
      "followers_url": "https://api.github.com/users/crisgarner/followers",
      "following_url": "https://api.github.com/users/crisgarner/following{/other_user}",
      "gists_url": "https://api.github.com/users/crisgarner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/crisgarner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/crisgarner/subscriptions",
      "organizations_url": "https://api.github.com/users/crisgarner/orgs",
      "repos_url": "https://api.github.com/users/crisgarner/repos",
      "events_url": "https://api.github.com/users/crisgarner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/crisgarner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-13T16:05:43Z",
    "updated_at": "2022-01-13T16:07:49Z",
    "author_association": "CONTRIBUTOR",
    "body": "I would rename it to `vm.deploy();` and select network like: \r\n\r\n```console\r\nforge deploy --network rinkeby\r\n```\r\n\r\nenv variables for keys and .toml for paths, rpcs, and some configurations.\r\n\r\nWhat I like about hardhat deploy plugin, is that you can deploy and run additional commands, like initial calls for setups or stuff like that. It also generates you and .json abi file with the deployed address used for frontend stuff and can generate you a single file with all contracts abis and addresses.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1012277777/reactions",
      "total_count": 13,
      "+1": 13,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1012345605",
    "html_url": "https://github.com/foundry-rs/foundry/issues/402#issuecomment-1012345605",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/402",
    "id": 1012345605,
    "node_id": "IC_kwDOGBlvNc48VysF",
    "user": {
      "login": "brockelmore",
      "id": 31553173,
      "node_id": "MDQ6VXNlcjMxNTUzMTcz",
      "avatar_url": "https://avatars.githubusercontent.com/u/31553173?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brockelmore",
      "html_url": "https://github.com/brockelmore",
      "followers_url": "https://api.github.com/users/brockelmore/followers",
      "following_url": "https://api.github.com/users/brockelmore/following{/other_user}",
      "gists_url": "https://api.github.com/users/brockelmore/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brockelmore/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brockelmore/subscriptions",
      "organizations_url": "https://api.github.com/users/brockelmore/orgs",
      "repos_url": "https://api.github.com/users/brockelmore/repos",
      "events_url": "https://api.github.com/users/brockelmore/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brockelmore/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-13T17:21:17Z",
    "updated_at": "2022-01-13T17:21:17Z",
    "author_association": "MEMBER",
    "body": "we should be able to just deduce where you want to deploy to based on the RPC you provide",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1012345605/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1012409102",
    "html_url": "https://github.com/foundry-rs/foundry/issues/402#issuecomment-1012409102",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/402",
    "id": 1012409102,
    "node_id": "IC_kwDOGBlvNc48WCMO",
    "user": {
      "login": "crisgarner",
      "id": 578688,
      "node_id": "MDQ6VXNlcjU3ODY4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/578688?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/crisgarner",
      "html_url": "https://github.com/crisgarner",
      "followers_url": "https://api.github.com/users/crisgarner/followers",
      "following_url": "https://api.github.com/users/crisgarner/following{/other_user}",
      "gists_url": "https://api.github.com/users/crisgarner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/crisgarner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/crisgarner/subscriptions",
      "organizations_url": "https://api.github.com/users/crisgarner/orgs",
      "repos_url": "https://api.github.com/users/crisgarner/repos",
      "events_url": "https://api.github.com/users/crisgarner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/crisgarner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-13T18:43:31Z",
    "updated_at": "2022-01-13T18:43:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "> we should be able to just deduce where you want to deploy to based on the RPC you provide\r\n\r\nUsually we reuse deploy scripts for different networks\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1012409102/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1012415046",
    "html_url": "https://github.com/foundry-rs/foundry/issues/402#issuecomment-1012415046",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/402",
    "id": 1012415046,
    "node_id": "IC_kwDOGBlvNc48WDpG",
    "user": {
      "login": "brockelmore",
      "id": 31553173,
      "node_id": "MDQ6VXNlcjMxNTUzMTcz",
      "avatar_url": "https://avatars.githubusercontent.com/u/31553173?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brockelmore",
      "html_url": "https://github.com/brockelmore",
      "followers_url": "https://api.github.com/users/brockelmore/followers",
      "following_url": "https://api.github.com/users/brockelmore/following{/other_user}",
      "gists_url": "https://api.github.com/users/brockelmore/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brockelmore/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brockelmore/subscriptions",
      "organizations_url": "https://api.github.com/users/brockelmore/orgs",
      "repos_url": "https://api.github.com/users/brockelmore/repos",
      "events_url": "https://api.github.com/users/brockelmore/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brockelmore/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-13T18:51:50Z",
    "updated_at": "2022-01-13T18:51:50Z",
    "author_association": "MEMBER",
    "body": "> Usually we reuse deploy scripts for different networks\r\n\r\nThats my point - when someone does `forge create ./deploy/* --rpc-url <xxxxx>`, we leverage the rpc url to deploy. if there is a config file and no rpc provided, we can force them to specify the network",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1012415046/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1012418498",
    "html_url": "https://github.com/foundry-rs/foundry/issues/402#issuecomment-1012418498",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/402",
    "id": 1012418498,
    "node_id": "IC_kwDOGBlvNc48WEfC",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-13T18:56:32Z",
    "updated_at": "2022-01-13T18:56:32Z",
    "author_association": "COLLABORATOR",
    "body": "Might already have this and I'm not seeing it, but we also would want a flag to specify when you want to deploy on a local fork of that RPC vs. actually deploying to the live network, e.g\r\n- `forge create ./deploy/* --rpc-url <xxxxx> --fork` to deploy to a local fork\r\n- `forge create ./deploy/* --rpc-url <xxxxx> --live` to deploy to the live network\r\n\r\nwith `--fork` being the default if unspecified to prevent accidental deploys",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1012418498/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1012554695",
    "html_url": "https://github.com/foundry-rs/foundry/issues/402#issuecomment-1012554695",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/402",
    "id": 1012554695,
    "node_id": "IC_kwDOGBlvNc48WlvH",
    "user": {
      "login": "d-xo",
      "id": 6689924,
      "node_id": "MDQ6VXNlcjY2ODk5MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6689924?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/d-xo",
      "html_url": "https://github.com/d-xo",
      "followers_url": "https://api.github.com/users/d-xo/followers",
      "following_url": "https://api.github.com/users/d-xo/following{/other_user}",
      "gists_url": "https://api.github.com/users/d-xo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/d-xo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/d-xo/subscriptions",
      "organizations_url": "https://api.github.com/users/d-xo/orgs",
      "repos_url": "https://api.github.com/users/d-xo/repos",
      "events_url": "https://api.github.com/users/d-xo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/d-xo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-13T22:08:01Z",
    "updated_at": "2022-01-13T22:08:01Z",
    "author_association": "NONE",
    "body": "Would you be able to reuse the deployment contract as a test fixture if it contains calls to `vm.mainnetDeploy`?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1012554695/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1012577276",
    "html_url": "https://github.com/foundry-rs/foundry/issues/402#issuecomment-1012577276",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/402",
    "id": 1012577276,
    "node_id": "IC_kwDOGBlvNc48WrP8",
    "user": {
      "login": "crisgarner",
      "id": 578688,
      "node_id": "MDQ6VXNlcjU3ODY4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/578688?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/crisgarner",
      "html_url": "https://github.com/crisgarner",
      "followers_url": "https://api.github.com/users/crisgarner/followers",
      "following_url": "https://api.github.com/users/crisgarner/following{/other_user}",
      "gists_url": "https://api.github.com/users/crisgarner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/crisgarner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/crisgarner/subscriptions",
      "organizations_url": "https://api.github.com/users/crisgarner/orgs",
      "repos_url": "https://api.github.com/users/crisgarner/repos",
      "events_url": "https://api.github.com/users/crisgarner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/crisgarner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-13T22:30:40Z",
    "updated_at": "2022-01-13T22:30:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "> > Usually we reuse deploy scripts for different networks\r\n> \r\n> Thats my point - when someone does `forge create ./deploy/* --rpc-url <xxxxx>`, we leverage the rpc url to deploy. if there is a config file and no rpc provided, we can force them to specify the network\r\n\r\nSounds good, but might me confusing doing `forge create ./deploy/* --rpc-url <rinkeby.xxx>` and in the contract `vm.deployMainnet();`",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1012577276/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1013879595",
    "html_url": "https://github.com/foundry-rs/foundry/issues/402#issuecomment-1013879595",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/402",
    "id": 1013879595,
    "node_id": "IC_kwDOGBlvNc48bpMr",
    "user": {
      "login": "gakonst",
      "id": 17802178,
      "node_id": "MDQ6VXNlcjE3ODAyMTc4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17802178?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gakonst",
      "html_url": "https://github.com/gakonst",
      "followers_url": "https://api.github.com/users/gakonst/followers",
      "following_url": "https://api.github.com/users/gakonst/following{/other_user}",
      "gists_url": "https://api.github.com/users/gakonst/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gakonst/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gakonst/subscriptions",
      "organizations_url": "https://api.github.com/users/gakonst/orgs",
      "repos_url": "https://api.github.com/users/gakonst/repos",
      "events_url": "https://api.github.com/users/gakonst/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gakonst/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-16T13:47:48Z",
    "updated_at": "2022-01-16T13:47:48Z",
    "author_association": "MEMBER",
    "body": "We can just call it vm.deploy() to avoid the confusion I think?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1013879595/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1013928386",
    "html_url": "https://github.com/foundry-rs/foundry/issues/402#issuecomment-1013928386",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/402",
    "id": 1013928386,
    "node_id": "IC_kwDOGBlvNc48b1HC",
    "user": {
      "login": "brockelmore",
      "id": 31553173,
      "node_id": "MDQ6VXNlcjMxNTUzMTcz",
      "avatar_url": "https://avatars.githubusercontent.com/u/31553173?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brockelmore",
      "html_url": "https://github.com/brockelmore",
      "followers_url": "https://api.github.com/users/brockelmore/followers",
      "following_url": "https://api.github.com/users/brockelmore/following{/other_user}",
      "gists_url": "https://api.github.com/users/brockelmore/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brockelmore/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brockelmore/subscriptions",
      "organizations_url": "https://api.github.com/users/brockelmore/orgs",
      "repos_url": "https://api.github.com/users/brockelmore/repos",
      "events_url": "https://api.github.com/users/brockelmore/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brockelmore/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-16T18:33:20Z",
    "updated_at": "2022-01-16T18:46:02Z",
    "author_association": "MEMBER",
    "body": "What do people think about `vm.broadcast` as the cheatcode? it makes it agnostic to create/call style transactions, as well as what network youre sending to.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1013928386/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1013930576",
    "html_url": "https://github.com/foundry-rs/foundry/issues/402#issuecomment-1013930576",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/402",
    "id": 1013930576,
    "node_id": "IC_kwDOGBlvNc48b1pQ",
    "user": {
      "login": "gakonst",
      "id": 17802178,
      "node_id": "MDQ6VXNlcjE3ODAyMTc4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17802178?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gakonst",
      "html_url": "https://github.com/gakonst",
      "followers_url": "https://api.github.com/users/gakonst/followers",
      "following_url": "https://api.github.com/users/gakonst/following{/other_user}",
      "gists_url": "https://api.github.com/users/gakonst/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gakonst/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gakonst/subscriptions",
      "organizations_url": "https://api.github.com/users/gakonst/orgs",
      "repos_url": "https://api.github.com/users/gakonst/repos",
      "events_url": "https://api.github.com/users/gakonst/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gakonst/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-16T18:47:36Z",
    "updated_at": "2022-01-16T18:55:42Z",
    "author_association": "MEMBER",
    "body": "Good point^\r\n\r\nSo maybe\r\n\r\n```solidity\r\ncontract Deployer {\r\n    function deploy() external { \r\n        vm.startBroadcast()\r\n        Foo foo = new Foo();\r\n        foo.set(5);\r\n        vm.stopBroadcast()\r\n        uint256 y = foo.bar() * 2;\r\n        vm.broadcast()\r\n        foo.setY(y);\r\n    }\r\n}\r\n```\r\n\r\n(`vm.broadcast()` would apply only to the next call)\r\n\r\nIn the above case, `forge deploy` would produce 3 ethers-rs `TypedTransaction` (EIP1559 by default, with legacy option to switch to old tx style) which would be broadcast to the network of choice via `--rpc-url` or `ETH_RPC_URL`.\r\n\r\nAnd maybe `forge deploy --offline` would serialize the transactions to some JSON blob usable by other tools?\r\n\r\nIn an ideal world, we're also able to test these deploy scripts. I now wonder if we should add the assertions in line, e.g. as `require` statements above, or if they should be executed as part of a `forge test`-like workflow with a `contract DeployerTest { function testDeploy() } ` type function?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1013930576/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1013931209",
    "html_url": "https://github.com/foundry-rs/foundry/issues/402#issuecomment-1013931209",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/402",
    "id": 1013931209,
    "node_id": "IC_kwDOGBlvNc48b1zJ",
    "user": {
      "login": "brockelmore",
      "id": 31553173,
      "node_id": "MDQ6VXNlcjMxNTUzMTcz",
      "avatar_url": "https://avatars.githubusercontent.com/u/31553173?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brockelmore",
      "html_url": "https://github.com/brockelmore",
      "followers_url": "https://api.github.com/users/brockelmore/followers",
      "following_url": "https://api.github.com/users/brockelmore/following{/other_user}",
      "gists_url": "https://api.github.com/users/brockelmore/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brockelmore/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brockelmore/subscriptions",
      "organizations_url": "https://api.github.com/users/brockelmore/orgs",
      "repos_url": "https://api.github.com/users/brockelmore/repos",
      "events_url": "https://api.github.com/users/brockelmore/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brockelmore/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-16T18:51:46Z",
    "updated_at": "2022-01-16T18:51:46Z",
    "author_association": "MEMBER",
    "body": "we also need to simulate it and make sure it doesnt fail - also would be good to give the gas costs",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1013931209/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1013931395",
    "html_url": "https://github.com/foundry-rs/foundry/issues/402#issuecomment-1013931395",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/402",
    "id": 1013931395,
    "node_id": "IC_kwDOGBlvNc48b12D",
    "user": {
      "login": "gakonst",
      "id": 17802178,
      "node_id": "MDQ6VXNlcjE3ODAyMTc4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17802178?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gakonst",
      "html_url": "https://github.com/gakonst",
      "followers_url": "https://api.github.com/users/gakonst/followers",
      "following_url": "https://api.github.com/users/gakonst/following{/other_user}",
      "gists_url": "https://api.github.com/users/gakonst/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gakonst/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gakonst/subscriptions",
      "organizations_url": "https://api.github.com/users/gakonst/orgs",
      "repos_url": "https://api.github.com/users/gakonst/repos",
      "events_url": "https://api.github.com/users/gakonst/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gakonst/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-16T18:53:01Z",
    "updated_at": "2022-01-16T18:53:01Z",
    "author_association": "MEMBER",
    "body": "Wonder how we'd handle idempotency, e.g. if for whatever reason it fails at the first call, how does it know to resume from the second one? @moodysalem any thoughts here (cf the v3 deployer from some time ago)",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1013931395/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1013931834",
    "html_url": "https://github.com/foundry-rs/foundry/issues/402#issuecomment-1013931834",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/402",
    "id": 1013931834,
    "node_id": "IC_kwDOGBlvNc48b186",
    "user": {
      "login": "brockelmore",
      "id": 31553173,
      "node_id": "MDQ6VXNlcjMxNTUzMTcz",
      "avatar_url": "https://avatars.githubusercontent.com/u/31553173?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brockelmore",
      "html_url": "https://github.com/brockelmore",
      "followers_url": "https://api.github.com/users/brockelmore/followers",
      "following_url": "https://api.github.com/users/brockelmore/following{/other_user}",
      "gists_url": "https://api.github.com/users/brockelmore/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brockelmore/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brockelmore/subscriptions",
      "organizations_url": "https://api.github.com/users/brockelmore/orgs",
      "repos_url": "https://api.github.com/users/brockelmore/repos",
      "events_url": "https://api.github.com/users/brockelmore/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brockelmore/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-16T18:55:42Z",
    "updated_at": "2022-01-16T18:55:42Z",
    "author_association": "MEMBER",
    "body": "one option is that when we send a tx, we record it in a cache file - with deployed addresses and what not. I think hardhat does something similar. and if we have a cache, we pickup where we left off unless they pass a flag to restart the deployment (we would need to include the chain it was deployed to tho for multichain deployments, like local node vs mainnet)",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1013931834/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1013935704",
    "html_url": "https://github.com/foundry-rs/foundry/issues/402#issuecomment-1013935704",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/402",
    "id": 1013935704,
    "node_id": "IC_kwDOGBlvNc48b25Y",
    "user": {
      "login": "lucas-manuel",
      "id": 44272939,
      "node_id": "MDQ6VXNlcjQ0MjcyOTM5",
      "avatar_url": "https://avatars.githubusercontent.com/u/44272939?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lucas-manuel",
      "html_url": "https://github.com/lucas-manuel",
      "followers_url": "https://api.github.com/users/lucas-manuel/followers",
      "following_url": "https://api.github.com/users/lucas-manuel/following{/other_user}",
      "gists_url": "https://api.github.com/users/lucas-manuel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lucas-manuel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lucas-manuel/subscriptions",
      "organizations_url": "https://api.github.com/users/lucas-manuel/orgs",
      "repos_url": "https://api.github.com/users/lucas-manuel/repos",
      "events_url": "https://api.github.com/users/lucas-manuel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lucas-manuel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-16T19:19:34Z",
    "updated_at": "2022-01-16T19:19:34Z",
    "author_association": "NONE",
    "body": "Yeah I think this is a great idea and would definitely use it. \r\n\r\nA couple of ideas (echoing some that are above but wanted to have a comprehensive list):\r\n- \"Dry-run\" deployments on mainnet forks\r\n- Gas cost summaries of deployments\r\n- Some sort of artifact that gets generated with all deployed addresses (and tx hashes maybe)\r\n- Being able to ensure auto-verification of all deployed contracts (single file verification)\r\n- Being able to run assertions against newly deployed contracts to ensure complete deployment",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1013935704/reactions",
      "total_count": 8,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 8,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1013956892",
    "html_url": "https://github.com/foundry-rs/foundry/issues/402#issuecomment-1013956892",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/402",
    "id": 1013956892,
    "node_id": "IC_kwDOGBlvNc48b8Ec",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-16T21:35:06Z",
    "updated_at": "2022-01-16T21:35:06Z",
    "author_association": "COLLABORATOR",
    "body": "I like all the ideas on @lucas-manuel's list, and would like to add two more:\r\n- A way to specify expected deployer account and nonce, or alternatively perhaps a way to specify expected contract address \r\n- Ensure deploy scripts are easily reusable as `setUp()` logic, to easily run tests against deployed state",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1013956892/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1013958501",
    "html_url": "https://github.com/foundry-rs/foundry/issues/402#issuecomment-1013958501",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/402",
    "id": 1013958501,
    "node_id": "IC_kwDOGBlvNc48b8dl",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-16T21:46:14Z",
    "updated_at": "2022-01-16T21:46:14Z",
    "author_association": "MEMBER",
    "body": "Putting this here: https://github.com/EthWorks/Mars\r\n\r\nMars has dry-runs, gas cost summaries, automatic deployment of only parts of your code that changed etc. We could probably borrow some ideas from there",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1013958501/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1020225923",
    "html_url": "https://github.com/foundry-rs/foundry/issues/402#issuecomment-1020225923",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/402",
    "id": 1020225923,
    "node_id": "IC_kwDOGBlvNc48z2mD",
    "user": {
      "login": "fubhy",
      "id": 1172528,
      "node_id": "MDQ6VXNlcjExNzI1Mjg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1172528?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubhy",
      "html_url": "https://github.com/fubhy",
      "followers_url": "https://api.github.com/users/fubhy/followers",
      "following_url": "https://api.github.com/users/fubhy/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubhy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubhy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubhy/subscriptions",
      "organizations_url": "https://api.github.com/users/fubhy/orgs",
      "repos_url": "https://api.github.com/users/fubhy/repos",
      "events_url": "https://api.github.com/users/fubhy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubhy/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-24T15:32:35Z",
    "updated_at": "2022-01-24T15:32:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "I love this ...\r\n\r\nSome random thoughts (copied from chat):\r\n\r\nI wonder how well this would work for necessariliy moduralized deployments of larger projects and/or maintaining an idempotent deployment over a longer time span with different parts of the project having different lifespans & different solidity versions.\r\n\r\nI already ran into a similar problem in my integration tests where one of the core contracts (persistent contract in an otherwise upgradable protocol) is on solidity 0.6.12 so I can't directly use it, and inlining and bumping it to 0.8.11 just for the sake of the test would be weird. Sure, a fork test would work fine but comes with its own downsides (mainly performance). \r\n\r\nAnyways ...\r\n\r\nI'd imagine that problems of a similar nature might arise for long-lived, upgradable protocols that wish to deploy & configure their contracts in an idempotent IAC fashion.\r\n\r\nIt feels like a layered approach could work well where deployment artifacts shared between these layers/steps in sequence could also be used as a starting point for integration tests (by etching the deployed bytecode as recorded in the deployment artifacts of the previous layers), thus not needing a fork.\r\n\r\nThis could also be a fine approach for Acceptance Tests prior to a protocol upgrade.\r\n\r\n... And a nice way to share deployment artifacts between repositories (just like `lib`) possibly including state.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1020225923/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1020929883",
    "html_url": "https://github.com/foundry-rs/foundry/issues/402#issuecomment-1020929883",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/402",
    "id": 1020929883,
    "node_id": "IC_kwDOGBlvNc482idb",
    "user": {
      "login": "fubhy",
      "id": 1172528,
      "node_id": "MDQ6VXNlcjExNzI1Mjg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1172528?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubhy",
      "html_url": "https://github.com/fubhy",
      "followers_url": "https://api.github.com/users/fubhy/followers",
      "following_url": "https://api.github.com/users/fubhy/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubhy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubhy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubhy/subscriptions",
      "organizations_url": "https://api.github.com/users/fubhy/orgs",
      "repos_url": "https://api.github.com/users/fubhy/repos",
      "events_url": "https://api.github.com/users/fubhy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubhy/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-25T08:33:04Z",
    "updated_at": "2022-01-25T08:33:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "Imho, this is related because integration testing on top of the actual deployment can be quite useful: https://github.com/gakonst/foundry/issues/326\r\n\r\nI might be overthinking this, but here's a possible solution that could work also for types of projects as described in my previous comments without sacrificing DX/UX:\r\n\r\nWe might be able to structure this with \"modularized\" deployment files that define their I/O interface using shared structs that live in an \"interface\" contract in a separate `.sol` file without a version constraint. Thus, these interfaces could be shared between different deployment modules (and tests) with different solidity versions. This interface contract would feature serialization & deserialization (SerDe) a.k.a encode/decode functions for the I/O structs of the corresponding deployment contract.\r\n\r\nA cheatcode could be used to then utilize these interfaces, both to share I/O between deployment modules and to enable integration tests to use a deployment (and its output) e.g. in `setUp` without juggling abi encode/decode manually.\r\n\r\nWhen running actual production deployments, these structs could be serialized into artifacts and written to disk.\r\n\r\nDoes this make any sense at all? Is it worth a shot?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1020929883/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1022530001",
    "html_url": "https://github.com/foundry-rs/foundry/issues/402#issuecomment-1022530001",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/402",
    "id": 1022530001,
    "node_id": "IC_kwDOGBlvNc488pHR",
    "user": {
      "login": "brockelmore",
      "id": 31553173,
      "node_id": "MDQ6VXNlcjMxNTUzMTcz",
      "avatar_url": "https://avatars.githubusercontent.com/u/31553173?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brockelmore",
      "html_url": "https://github.com/brockelmore",
      "followers_url": "https://api.github.com/users/brockelmore/followers",
      "following_url": "https://api.github.com/users/brockelmore/following{/other_user}",
      "gists_url": "https://api.github.com/users/brockelmore/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brockelmore/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brockelmore/subscriptions",
      "organizations_url": "https://api.github.com/users/brockelmore/orgs",
      "repos_url": "https://api.github.com/users/brockelmore/repos",
      "events_url": "https://api.github.com/users/brockelmore/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brockelmore/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-26T19:30:31Z",
    "updated_at": "2022-01-26T19:30:59Z",
    "author_association": "MEMBER",
    "body": "I am just attacking this based on intuition first. I have started development of this but thought id outline current plan.\r\n\r\nBasic plan is to:\r\n1. support contracts that have `IS_DEPLOY` - similar to `IS_TEST`,\r\n2. run functions that have deploy in the name, with support for numbers, i.e. deploy1, deploy2, etc.\r\n3. Support `broadcast`, `startBroadcast` and `stopBroadcast`, which has similar semantics to `prank`\r\n4. we will execute in the vm and craft the needed `TransactionRequest` based on the broadcast cheatcode state\r\n5. by default, `forge deploy` dry runs (i.e. doesn’t actually send transactions). you specifically pass a flag to actually broadcast\r\n6. we will print out a report of the deployments (and actually broadcast them). more details on what this entails likely to arise later\r\n7. we will cache results, and maybe full txs even, via json based on deploy function number\r\n8. you will be able to pass in a selection of deployment stages like 1 3 6 which would run deploy1, deploy3 and deploy6\r\n\r\ni already have the cheatcodes written and tx crafting done. now it’s the hard part of actually building the interaction with the VM\r\n\r\naddressing comments:\r\n> I wonder how well this would work for necessariliy moduralized deployments of larger projects and/or maintaining an idempotent deployment over a longer time span with different parts of the project having different lifespans & different solidity versions.\r\n\r\nhaving multiple `deploy1` `deploy2`, etc, as well as separate `deploy` contracts should make this trivial to upgrade and manage larger repos & varying lifetimes & versionings because you can simply have a contract that is `UpgradeA` that has a new pragma `0.8.11` for example, which would import `UpgradedA` that also used that version. So the compiler pipeline would just take care of the versioning for you. \r\n\r\n> Imho, this is related because integration testing on top of the actual deployment can be quite useful: #326\r\n\r\nAgree, stdlib will have a helper function for getting code that isnt compatible with a particular version that leverages the `getCode` cheatcode.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1022530001/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1022544852",
    "html_url": "https://github.com/foundry-rs/foundry/issues/402#issuecomment-1022544852",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/402",
    "id": 1022544852,
    "node_id": "IC_kwDOGBlvNc488svU",
    "user": {
      "login": "wilsoncusack",
      "id": 6678357,
      "node_id": "MDQ6VXNlcjY2NzgzNTc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6678357?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wilsoncusack",
      "html_url": "https://github.com/wilsoncusack",
      "followers_url": "https://api.github.com/users/wilsoncusack/followers",
      "following_url": "https://api.github.com/users/wilsoncusack/following{/other_user}",
      "gists_url": "https://api.github.com/users/wilsoncusack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wilsoncusack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wilsoncusack/subscriptions",
      "organizations_url": "https://api.github.com/users/wilsoncusack/orgs",
      "repos_url": "https://api.github.com/users/wilsoncusack/repos",
      "events_url": "https://api.github.com/users/wilsoncusack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wilsoncusack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-26T19:48:34Z",
    "updated_at": "2022-01-26T19:48:34Z",
    "author_association": "CONTRIBUTOR",
    "body": "awesome. Thoughts on renaming IS_DEPLOY to something like IS_LIVE_REQUESTS to indicate that this could also be used for making live txs and not just deploys?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1022544852/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1022549006",
    "html_url": "https://github.com/foundry-rs/foundry/issues/402#issuecomment-1022549006",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/402",
    "id": 1022549006,
    "node_id": "IC_kwDOGBlvNc488twO",
    "user": {
      "login": "brockelmore",
      "id": 31553173,
      "node_id": "MDQ6VXNlcjMxNTUzMTcz",
      "avatar_url": "https://avatars.githubusercontent.com/u/31553173?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brockelmore",
      "html_url": "https://github.com/brockelmore",
      "followers_url": "https://api.github.com/users/brockelmore/followers",
      "following_url": "https://api.github.com/users/brockelmore/following{/other_user}",
      "gists_url": "https://api.github.com/users/brockelmore/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brockelmore/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brockelmore/subscriptions",
      "organizations_url": "https://api.github.com/users/brockelmore/orgs",
      "repos_url": "https://api.github.com/users/brockelmore/repos",
      "events_url": "https://api.github.com/users/brockelmore/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brockelmore/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-26T19:54:01Z",
    "updated_at": "2022-01-26T19:54:01Z",
    "author_association": "MEMBER",
    "body": "ye good thought - we should make all naming agnostic to deploy vs normal txs",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1022549006/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1022616307",
    "html_url": "https://github.com/foundry-rs/foundry/issues/402#issuecomment-1022616307",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/402",
    "id": 1022616307,
    "node_id": "IC_kwDOGBlvNc488-Lz",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-26T21:24:29Z",
    "updated_at": "2022-01-26T21:24:29Z",
    "author_association": "COLLABORATOR",
    "body": "> support contracts that have `IS_DEPLOY` - similar to `IS_TEST`\r\n\r\nafaik we don't actually use `IS_TEST`, and just use the `test` prefix to identify test functions—just mentioning since it'd be nice to have consistent behavior between how the special prefixes behave, especially since we'll likely have more prefixes in the future too, like `invariant` and `prove`\r\n\r\nalso, how would it work with reusing the `deploy()` methods so you can run tests against post-deploy state? would you just call the `deploy` methods within `setUp()` and have `deploy` assign the deployed contracts to your test contract state variables?\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1022616307/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1025667819",
    "html_url": "https://github.com/foundry-rs/foundry/issues/402#issuecomment-1025667819",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/402",
    "id": 1025667819,
    "node_id": "IC_kwDOGBlvNc49InLr",
    "user": {
      "login": "wighawag",
      "id": 790580,
      "node_id": "MDQ6VXNlcjc5MDU4MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/790580?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wighawag",
      "html_url": "https://github.com/wighawag",
      "followers_url": "https://api.github.com/users/wighawag/followers",
      "following_url": "https://api.github.com/users/wighawag/following{/other_user}",
      "gists_url": "https://api.github.com/users/wighawag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wighawag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wighawag/subscriptions",
      "organizations_url": "https://api.github.com/users/wighawag/orgs",
      "repos_url": "https://api.github.com/users/wighawag/repos",
      "events_url": "https://api.github.com/users/wighawag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wighawag/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-31T12:03:59Z",
    "updated_at": "2022-01-31T12:03:59Z",
    "author_association": "NONE",
    "body": "Hi, just found about this discussion after @onbjerg mentioned it to me here: https://github.com/gakonst/foundry/discussions/634 where I basically mention the lack of mechanism to replicate deployment procedure in tests and allude to a potential mechanism to solve it.\r\n\r\nI see that here you are discussing an approach where you start from the solidity test and imagine thus a mechanism where such test solidity code would perform the deployment themselves, making these deployment setup available in test as a matter of fact.\r\n\r\nI have been thinking of a different approach, where the deployment procedure would be free to use whatever programming language suits them.\r\n\r\nThis has several benefit compared to a solidity approach:\r\n - full flexibility, reading file, managing proxy upgrade and check like storage layout changes, etc...\r\n - no bottleneck on the availability of specific cheatcode (with the approach discussed here, I can easily imagine request for specific cheatcode not thought of initially)\r\n - no need to learn a new DSL (cheatcode) \r\n - can reuse existing library to deal with all the intricacies of deployments, including L2 like zksync that require different transaction mechanism.\r\n\r\nThe way I see that alternative approach is as follow :\r\n\r\n`forge` would let the user setup the EVM state before running the tests by invoking some scripts.\r\n\r\nBasically such script would be given a RPC endpoint (FOUNDRY_RPC_URL) and can perform any action on it, including but not limited to contract deployment. The only requirement for these scripts would be to save the contract data in a specific location / format so that the solidity tests can reuse them. \r\n\r\nThinking of something like:\r\n\r\n`forge test --before \"deploy.py\"` or `forge test --before \"node deploy.js\"` or whatever\r\n\r\nwhere forge would execute whatever command is passed to it, here \"deploy.py\" or \"node deploy.js\", but this can be anything.\r\n\r\nThat execution would have a specific environment variable set to be the RPC endpoint to talk to (FOUNDRY_RPC_URL) and maybe other env variavkes too. Here, since we are dealing with the test command, the rpc endpoint would simply be the in-memory EVM against which the tests are run. \r\n\r\n`deploy.py` or `deploy.js` would then do whatever it want to with that rpc end point (Deploying new contracts, making calls, constructing merkle trees, making proxy upgrades, including checking storage layout conflict, etcc...). the only thing it needs to do is to save the result of the deployment in specific location / format.\r\n\r\nOnce the script finishes, forge can then execute the tests and provide cheatcode for the tests to access the deployment data (like addresses, argument used or more). forge should also snapshot the state of the EVM before the tests are executed so that it reset to it before every test, (instead of having to re-execute the deployments). (evm_snapsnot)\r\n\r\n\r\nThen when it is time to deploy on a network, the script would not even need forge, but forge could have a command to facilitate the setting of the environment variable described above. something like :\r\n\r\n`forge deploy --network rinkeby \"deploy.py\"` or a more generic term might be `forge execute --network rinkeby \"node deploy.js\"` (because after all these does not need to be about deployments of new contracts)\r\n\r\n\r\na js script could look like this\r\n\r\n```js\r\n...\r\nconst provider = new JsonRPCProvider(process.env.FOUNDRY_RPC_URL);\r\n...\r\nasync main() {\r\n  ...\r\n  const factory = new ContractFactory(abi, bytecode, signer);\r\n  const contract = await factory.deploy();\r\n  fs.writeFileSync(`${process.env.FOUNDRY_DATA_FOLDER}/MyDeployedContract.json`, {address: contract.address, abi, bytecode, ...});\r\n}\r\n```\r\n\r\nAs for the solidity test, these would look something like the following:\r\n\r\n```solidity\r\n...\r\n  function setUp() {\r\n    MyDeployedContract myContract = MyDeployedContract(vm.getData(\"MyDeployedContract01\").address); \r\n  }\r\n...\r\n```\r\n\r\nWhat do you think ?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1025667819/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1026578918",
    "html_url": "https://github.com/foundry-rs/foundry/issues/402#issuecomment-1026578918",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/402",
    "id": 1026578918,
    "node_id": "IC_kwDOGBlvNc49MFnm",
    "user": {
      "login": "fubhy",
      "id": 1172528,
      "node_id": "MDQ6VXNlcjExNzI1Mjg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1172528?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubhy",
      "html_url": "https://github.com/fubhy",
      "followers_url": "https://api.github.com/users/fubhy/followers",
      "following_url": "https://api.github.com/users/fubhy/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubhy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubhy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubhy/subscriptions",
      "organizations_url": "https://api.github.com/users/fubhy/orgs",
      "repos_url": "https://api.github.com/users/fubhy/repos",
      "events_url": "https://api.github.com/users/fubhy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubhy/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-01T08:17:42Z",
    "updated_at": "2022-02-01T09:23:49Z",
    "author_association": "CONTRIBUTOR",
    "body": "@wighawag I think that in this discussion we've already reached consensus that deployments should absolutely be available to tests. It's clear that we need to be able to verify the integrity of a deployment. Handling deployment artifacts & I/O of some kind is definitely necessary too.\r\n\r\n> full flexibility, reading file, managing proxy upgrade and check like storage layout changes, etc...\r\n\r\nThis can be achieved with cheatcodes (handling deployment artifact / config I/O, etc.) too and particularly storage layout changes, etc. are more easily tested directly in solidiity rather than through the JSON RPC indirection.\r\n\r\n> no bottleneck on the availability of specific cheatcode (with the approach discussed here, I can easily imagine request for specific cheatcode not thought of initially)\r\n\r\nCheatcodes are great and are simply the equivalent of e.g. `hardhat_impersonateAccount` or other custom JSON RPC methods. Missing cheatcodes can be worked around with `ffi` or  by possibly making cheatcodes pluggable through other means in the future. Not sure if this has been discussed yet.\r\n\r\n> no need to learn a new DSL (cheatcode)\r\n\r\nWhat's the difference between learning cheatcodes vs. custom rpc calls & other stubbing / mocking / artifact loading etc. utils in a less native environment. Personally, I think the benefit of using solidity code for deploying contracts is much more intuitive than going via multiple layers of indirection & abstraction in a foreign language.\r\n\r\n> can reuse existing library to deal with all the intricacies of deployments, including L2 like zksync that require different transaction mechanism.\r\n\r\nThere are definitely certain (arguably less common) use-cases that might not be covered initially. I think that's fine. Personally, I am absolutely positive that solidity-native deployments are going to offer a far superior developer experience for the majority of cases. Let's not discard this attempt just because it might not cover all cases right off the bat.\r\n\r\nAll that said, nothing is stopping you from building a deployment framework around JSON RPC & the build artifacts produced by the compiler. You could load the deployment artifacts into a fork test (e.g. with a custom cheatcode or ffi) and proceed to verify the deployment there.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1026578918/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1026623491",
    "html_url": "https://github.com/foundry-rs/foundry/issues/402#issuecomment-1026623491",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/402",
    "id": 1026623491,
    "node_id": "IC_kwDOGBlvNc49MQgD",
    "user": {
      "login": "wighawag",
      "id": 790580,
      "node_id": "MDQ6VXNlcjc5MDU4MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/790580?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wighawag",
      "html_url": "https://github.com/wighawag",
      "followers_url": "https://api.github.com/users/wighawag/followers",
      "following_url": "https://api.github.com/users/wighawag/following{/other_user}",
      "gists_url": "https://api.github.com/users/wighawag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wighawag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wighawag/subscriptions",
      "organizations_url": "https://api.github.com/users/wighawag/orgs",
      "repos_url": "https://api.github.com/users/wighawag/repos",
      "events_url": "https://api.github.com/users/wighawag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wighawag/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-01T09:13:37Z",
    "updated_at": "2022-02-01T09:17:25Z",
    "author_association": "NONE",
    "body": "@fubhy thanks for the reply\r\n\r\nLooking forward to see such solidity-based deployment implemented :)\r\n\r\n> All that said, nothing is stopping you from building a deployment framework around JSON RPC & the build artifacts produced by the compiler. You could load the deployment artifacts into a fork test (e.g. with a custom cheatcode or iif) and proceed to verify the deployment there.\r\n\r\nOne benefit of the approach I mentioned, is that I would actually have to do nothing and could reuse existing framework.\r\n\r\nfrom what you said here, it seems I can already do it. Where could I learn more ?\r\n\r\nFeel free to reply here : https://github.com/gakonst/foundry/discussions/634 to keep that discussion on solidity-based deployments",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1026623491/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1026714392",
    "html_url": "https://github.com/foundry-rs/foundry/issues/402#issuecomment-1026714392",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/402",
    "id": 1026714392,
    "node_id": "IC_kwDOGBlvNc49MmsY",
    "user": {
      "login": "gakonst",
      "id": 17802178,
      "node_id": "MDQ6VXNlcjE3ODAyMTc4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17802178?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gakonst",
      "html_url": "https://github.com/gakonst",
      "followers_url": "https://api.github.com/users/gakonst/followers",
      "following_url": "https://api.github.com/users/gakonst/following{/other_user}",
      "gists_url": "https://api.github.com/users/gakonst/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gakonst/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gakonst/subscriptions",
      "organizations_url": "https://api.github.com/users/gakonst/orgs",
      "repos_url": "https://api.github.com/users/gakonst/repos",
      "events_url": "https://api.github.com/users/gakonst/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gakonst/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-01T10:55:46Z",
    "updated_at": "2022-02-01T10:55:58Z",
    "author_association": "MEMBER",
    "body": "Current plan is for @brockelmore to handle the cheatcode / TX creator, and I'll write the \"driver\" code which executes each migration to completion idempotently, with gas escalation/rebroadcast for reliable inclusion etc. We'll update you all - thx for all the feedback ",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1026714392/reactions",
      "total_count": 13,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 13,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1037802793",
    "html_url": "https://github.com/foundry-rs/foundry/issues/402#issuecomment-1037802793",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/402",
    "id": 1037802793,
    "node_id": "IC_kwDOGBlvNc49250p",
    "user": {
      "login": "sambacha",
      "id": 32783916,
      "node_id": "MDQ6VXNlcjMyNzgzOTE2",
      "avatar_url": "https://avatars.githubusercontent.com/u/32783916?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sambacha",
      "html_url": "https://github.com/sambacha",
      "followers_url": "https://api.github.com/users/sambacha/followers",
      "following_url": "https://api.github.com/users/sambacha/following{/other_user}",
      "gists_url": "https://api.github.com/users/sambacha/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sambacha/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sambacha/subscriptions",
      "organizations_url": "https://api.github.com/users/sambacha/orgs",
      "repos_url": "https://api.github.com/users/sambacha/repos",
      "events_url": "https://api.github.com/users/sambacha/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sambacha/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-13T05:41:16Z",
    "updated_at": "2022-02-13T05:41:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "Just making a note: this is a feature most people will not really leverage in the sense that they do not typically have overly complicated deployments. \n\nI have used this before \nhttps://github.com/icetan/abi-to-dhall\n\nIt generates a bash script for deploying, it cam handle doing the entire DSS. I think the autogenerated deployment scripts should be a feature especially in large deployments: who wants to waste time doing that. \n\nAs for persistence of compiled and deployed output , we need it for verification and for downstream distribution. We could solve both at once and provision a service that offers that, I had explored this idea a few months ago with https://abi.storage \n\nCheers",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1037802793/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
