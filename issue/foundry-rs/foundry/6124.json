{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/6124",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/6124/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/6124/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/6124/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/6124",
  "id": 1963729756,
  "node_id": "I_kwDOGBlvNc51DCNc",
  "number": 6124,
  "title": "Execution Time per Transaction Increases with Number of Transactions",
  "user": {
    "login": "09tangriro",
    "id": 47002898,
    "node_id": "MDQ6VXNlcjQ3MDAyODk4",
    "avatar_url": "https://avatars.githubusercontent.com/u/47002898?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/09tangriro",
    "html_url": "https://github.com/09tangriro",
    "followers_url": "https://api.github.com/users/09tangriro/followers",
    "following_url": "https://api.github.com/users/09tangriro/following{/other_user}",
    "gists_url": "https://api.github.com/users/09tangriro/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/09tangriro/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/09tangriro/subscriptions",
    "organizations_url": "https://api.github.com/users/09tangriro/orgs",
    "repos_url": "https://api.github.com/users/09tangriro/repos",
    "events_url": "https://api.github.com/users/09tangriro/events{/privacy}",
    "received_events_url": "https://api.github.com/users/09tangriro/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3334394228,
      "node_id": "MDU6TGFiZWwzMzM0Mzk0MjI4",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-bug",
      "name": "T-bug",
      "color": "d73a4a",
      "default": false,
      "description": "Type: bug"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2023-10-26T14:38:46Z",
  "updated_at": "2023-10-26T15:55:32Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "### Component\n\nAnvil\n\n### Have you ensured that all of these are up to date?\n\n- [X] Foundry\n- [X] Foundryup\n\n### What version of Foundry are you on?\n\nforge 0.2.0 (dbfd8d9 2023-09-06T13:18:18.344860000Z)\n\n### What command(s) is the bug in?\n\n_No response_\n\n### Operating System\n\nmacOS (Apple Silicon)\n\n### Describe the bug\n\nHi everyone ðŸ‘‹\r\n\r\nWe're building a smart contract simulation platform on top of `anvil` and we noticed that the time to process a transaction increases linearly with the number of transactions processed (seems to be roughly O(n)). This only happens with strict transactions that change the state of the blockchain, so is not an issue for read-only contract calls. I am running the following command to create a local development network (no forking):\r\n```\r\nanvil --accounts 1 --balance 10000000000000000000 --chain-id 31337 --port {port} --base-fee 0 --disable-block-gas-limit --ipc /tmp/anvil_{port}.ipc --prune-history --order fifo --transaction-block-keeper 64\r\n```\r\nPlease see the graphs below for proof and issue #6017 for more discussion on a parallel issue.\r\n![timing_contract_transact_exactInputSingle](https://github.com/foundry-rs/foundry/assets/47002898/95f6692d-dac8-4772-90c1-3a7ae275468c)\r\n![timing_contract_transact_increaseLiquidity](https://github.com/foundry-rs/foundry/assets/47002898/a3c73057-8bd3-4b9f-8baf-52f14a90532f)\r\n![timing_contract_transact_burn](https://github.com/foundry-rs/foundry/assets/47002898/cfea9842-d0e6-43e8-aca7-344e91305757)\r\n\r\nIdeally, I think it would be better if this was O(1) constant transaction time. Let me know what you think, I suspect there must be an O(n) lookup datastructure somewhere in the transact code ðŸ¤”",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/6124/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/6124/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1781403017",
    "html_url": "https://github.com/foundry-rs/foundry/issues/6124#issuecomment-1781403017",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/6124",
    "id": 1781403017,
    "node_id": "IC_kwDOGBlvNc5qLg2J",
    "user": {
      "login": "mattsse",
      "id": 19890894,
      "node_id": "MDQ6VXNlcjE5ODkwODk0",
      "avatar_url": "https://avatars.githubusercontent.com/u/19890894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mattsse",
      "html_url": "https://github.com/mattsse",
      "followers_url": "https://api.github.com/users/mattsse/followers",
      "following_url": "https://api.github.com/users/mattsse/following{/other_user}",
      "gists_url": "https://api.github.com/users/mattsse/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mattsse/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mattsse/subscriptions",
      "organizations_url": "https://api.github.com/users/mattsse/orgs",
      "repos_url": "https://api.github.com/users/mattsse/repos",
      "events_url": "https://api.github.com/users/mattsse/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mattsse/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-10-26T15:55:31Z",
    "updated_at": "2023-10-26T15:55:31Z",
    "author_association": "MEMBER",
    "body": "> (seems to be roughly O(n))\r\n\r\nthis makes sense, ref #6017\r\n\r\nbecause the historic state is solved by simply cloning the entire state which is likely responsible for this, because we only have in memory state and no DB\r\n\r\nI need to check how --prune-history is implemented and if we can add an option to prevent the expensive clones entirely ",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1781403017/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
