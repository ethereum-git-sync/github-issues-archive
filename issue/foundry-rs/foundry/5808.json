{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/5808",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5808/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5808/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5808/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/5808",
  "id": 1889023329,
  "node_id": "I_kwDOGBlvNc5wmDVh",
  "number": 5808,
  "title": "readInt automatic base detection is a footgun",
  "user": {
    "login": "dcposch",
    "id": 169280,
    "node_id": "MDQ6VXNlcjE2OTI4MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/169280?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/dcposch",
    "html_url": "https://github.com/dcposch",
    "followers_url": "https://api.github.com/users/dcposch/followers",
    "following_url": "https://api.github.com/users/dcposch/following{/other_user}",
    "gists_url": "https://api.github.com/users/dcposch/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/dcposch/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/dcposch/subscriptions",
    "organizations_url": "https://api.github.com/users/dcposch/orgs",
    "repos_url": "https://api.github.com/users/dcposch/repos",
    "events_url": "https://api.github.com/users/dcposch/events{/privacy}",
    "received_events_url": "https://api.github.com/users/dcposch/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3334394228,
      "node_id": "MDU6TGFiZWwzMzM0Mzk0MjI4",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-bug",
      "name": "T-bug",
      "color": "d73a4a",
      "default": false,
      "description": "Type: bug"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2023-09-10T07:15:55Z",
  "updated_at": "2023-09-10T18:25:09Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "### Component\r\n\r\nForge\r\n\r\n### Have you ensured that all of these are up to date?\r\n\r\n- [X] Foundry\r\n- [X] Foundryup\r\n\r\n### What version of Foundry are you on?\r\n\r\nforge 0.2.0 (75836a7 2023-09-09T00:31:54.458033000Z)\r\n\r\n### What command(s) is the bug in?\r\n\r\nforge test\r\n\r\n### Operating System\r\n\r\nmacOS (Apple Silicon)\r\n\r\n### Describe the bug\r\n\r\nJSON reading functions `readInt`/`readUint`/`readIntArray` etc automatically detect the base of the string.\r\n\r\nThis leads to unpleasant surprises... in our case we had a P256 verifier working on all but four of ~300 Wycheproof test vectors, and the last four were due to `readUint` switching to decimal.\r\n\r\n## Minimal reproducible example\r\n\r\n```solidity\r\nimport {stdJson} from \"forge-std/StdJson.sol\";\r\nimport {Test, console2} from \"forge-std/Test.sol\";\r\n\r\nusing stdJson for string;\r\n\r\ncontract ReadIntTest is Test {\r\n    function testReadInt() public {\r\n        string memory json = '[\"ffffffff\",\"00000010\"]';\r\n        int256[] memory ints = json.readIntArray(\"\");\r\n        console2.log(ints[0]);\r\n        console2.log(ints[1]);\r\n    }\r\n}\r\n```\r\n\r\n<img width=\"610\" alt=\"image\" src=\"https://github.com/foundry-rs/foundry/assets/169280/93d3db1e-1865-4c2f-a8b9-c0f5af2bdf63\">\r\n\r\n## Proposed fix\r\n\r\n- Parse decimal only\r\n- (If there's demand for it, you could parse hex when there is an `0x` prefix)\r\n\r\nLess is more. If people pass a bare hex string to readInt, better to error right away (then they can easily `uint256(json.readBytes32(...))`) than sneakily, later, once some input lacks letters.\r\n\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/5808/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5808/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1712767941",
    "html_url": "https://github.com/foundry-rs/foundry/issues/5808#issuecomment-1712767941",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5808",
    "id": 1712767941,
    "node_id": "IC_kwDOGBlvNc5mFsPF",
    "user": {
      "login": "mattsse",
      "id": 19890894,
      "node_id": "MDQ6VXNlcjE5ODkwODk0",
      "avatar_url": "https://avatars.githubusercontent.com/u/19890894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mattsse",
      "html_url": "https://github.com/mattsse",
      "followers_url": "https://api.github.com/users/mattsse/followers",
      "following_url": "https://api.github.com/users/mattsse/following{/other_user}",
      "gists_url": "https://api.github.com/users/mattsse/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mattsse/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mattsse/subscriptions",
      "organizations_url": "https://api.github.com/users/mattsse/orgs",
      "repos_url": "https://api.github.com/users/mattsse/repos",
      "events_url": "https://api.github.com/users/mattsse/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mattsse/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-09-10T09:43:10Z",
    "updated_at": "2023-09-10T09:53:27Z",
    "author_association": "MEMBER",
    "body": "> This leads to unpleasant surprises... in our case we had a P256 verifier working on all but four of ~300 Wycheproof test vectors, and the last four were due to readUint switching to decimal.\r\n\r\nsorry, can you elaborate on this, not entirely sure what this means.\r\n\r\nwhat's the issue?\r\n\r\nEDIT:\r\nah so parsing is correct, but support for various formats is unexpected? what would have been the expected behaviour for a hex or bin here? an error?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1712767941/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1712905199",
    "html_url": "https://github.com/foundry-rs/foundry/issues/5808#issuecomment-1712905199",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5808",
    "id": 1712905199,
    "node_id": "IC_kwDOGBlvNc5mGNvv",
    "user": {
      "login": "dcposch",
      "id": 169280,
      "node_id": "MDQ6VXNlcjE2OTI4MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/169280?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dcposch",
      "html_url": "https://github.com/dcposch",
      "followers_url": "https://api.github.com/users/dcposch/followers",
      "following_url": "https://api.github.com/users/dcposch/following{/other_user}",
      "gists_url": "https://api.github.com/users/dcposch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dcposch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dcposch/subscriptions",
      "organizations_url": "https://api.github.com/users/dcposch/orgs",
      "repos_url": "https://api.github.com/users/dcposch/repos",
      "events_url": "https://api.github.com/users/dcposch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dcposch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-09-10T18:25:08Z",
    "updated_at": "2023-09-10T18:25:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "Yes, exactly. In all modern standard libraries I know (Rust, Go, etc) `parseInt(\"10\")` or similar returns 10, `parseInt(\"ff\")` throws an error. Runtime heuristics are bad especially in this context (smart contract testing).",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1712905199/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
