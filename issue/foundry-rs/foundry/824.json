{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/824",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/824/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/824/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/824/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/824",
  "id": 1154899572,
  "node_id": "I_kwDOGBlvNc5E1l50",
  "number": 824,
  "title": "Prank does not work with delegate call",
  "user": {
    "login": "ncitron",
    "id": 16858330,
    "node_id": "MDQ6VXNlcjE2ODU4MzMw",
    "avatar_url": "https://avatars.githubusercontent.com/u/16858330?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ncitron",
    "html_url": "https://github.com/ncitron",
    "followers_url": "https://api.github.com/users/ncitron/followers",
    "following_url": "https://api.github.com/users/ncitron/following{/other_user}",
    "gists_url": "https://api.github.com/users/ncitron/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ncitron/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ncitron/subscriptions",
    "organizations_url": "https://api.github.com/users/ncitron/orgs",
    "repos_url": "https://api.github.com/users/ncitron/repos",
    "events_url": "https://api.github.com/users/ncitron/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ncitron/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3334394228,
      "node_id": "MDU6TGFiZWwzMzM0Mzk0MjI4",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-bug",
      "name": "T-bug",
      "color": "d73a4a",
      "default": false,
      "description": "Type: bug"
    },
    {
      "id": 3593644915,
      "node_id": "LA_kwDOGBlvNc7WMqtz",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/Cmd-forge-test",
      "name": "Cmd-forge-test",
      "color": "006B75",
      "default": false,
      "description": "Command: forge test"
    },
    {
      "id": 3703752787,
      "node_id": "LA_kwDOGBlvNc7cwshT",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/C-forge",
      "name": "C-forge",
      "color": "5319E7",
      "default": false,
      "description": "Command: forge"
    },
    {
      "id": 3703752960,
      "node_id": "LA_kwDOGBlvNc7cwskA",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/A-cheatcodes",
      "name": "A-cheatcodes",
      "color": "FBCA04",
      "default": false,
      "description": "Area: cheatcodes"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/milestones/1",
    "html_url": "https://github.com/foundry-rs/foundry/milestone/1",
    "labels_url": "https://api.github.com/repos/foundry-rs/foundry/milestones/1/labels",
    "id": 8140456,
    "node_id": "MI_kwDOGBlvNc4AfDao",
    "number": 1,
    "title": "v1.0.0",
    "description": "",
    "creator": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 24,
    "closed_issues": 125,
    "state": "open",
    "created_at": "2022-06-28T08:15:32Z",
    "updated_at": "2023-07-13T04:54:32Z",
    "due_on": null,
    "closed_at": null
  },
  "comments": 9,
  "created_at": "2022-03-01T05:48:25Z",
  "updated_at": "2023-07-13T04:46:57Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "### Component\n\nForge\n\n### Have you ensured that all of these are up to date?\n\n- [X] Foundry\n- [X] Foundryup\n\n### What version of Foundry are you on?\n\nforge 0.1.0 (d08a59e 2022-03-01T00:28:36.621137610+00:00)\n\n### What command(s) is the bug in?\n\nforge test\n\n### Operating System\n\nLinux\n\n### Describe the bug\n\nWhen attempting to perform a delegate call from a test while a prank is enabled, it does not execute in the context of the pranked address. This likely is not the expected behavior for users. ",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/824/reactions",
    "total_count": 1,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 1,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/824/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1065919521",
    "html_url": "https://github.com/foundry-rs/foundry/issues/824#issuecomment-1065919521",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/824",
    "id": 1065919521,
    "node_id": "IC_kwDOGBlvNc4_iKQh",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-12T17:01:48Z",
    "updated_at": "2022-03-12T17:01:48Z",
    "author_association": "COLLABORATOR",
    "body": "This current behavior should probably be the expected behavior, right? If you call `vm.prank(user)` followed by `address(x).delegatecall(...)`, and the delegatecall executes in the context of `user`, this enables delegatecalling from an EOA which is probably not something we should support since it's not valid EVM behavior.\r\n\r\nYou could workaround this by having the cheatcode throw an error if the next call after `prank` is a delegatecall and the specified `user` has no code. But could you expand on the use case for delegatecalling from the test contract? That might help figure out the best way to resolve this issue",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1065919521/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1066251729",
    "html_url": "https://github.com/foundry-rs/foundry/issues/824#issuecomment-1066251729",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/824",
    "id": 1066251729,
    "node_id": "IC_kwDOGBlvNc4_jbXR",
    "user": {
      "login": "ncitron",
      "id": 16858330,
      "node_id": "MDQ6VXNlcjE2ODU4MzMw",
      "avatar_url": "https://avatars.githubusercontent.com/u/16858330?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ncitron",
      "html_url": "https://github.com/ncitron",
      "followers_url": "https://api.github.com/users/ncitron/followers",
      "following_url": "https://api.github.com/users/ncitron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ncitron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ncitron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ncitron/subscriptions",
      "organizations_url": "https://api.github.com/users/ncitron/orgs",
      "repos_url": "https://api.github.com/users/ncitron/repos",
      "events_url": "https://api.github.com/users/ncitron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ncitron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-14T01:39:44Z",
    "updated_at": "2022-03-14T01:39:44Z",
    "author_association": "CONTRIBUTOR",
    "body": "So actually the usecase I had in mind was for mocking the behavior of a smart contract on a mainnet fork.\r\n\r\nI was recently working on the payloads for a governance proposal on Aave, and was coming up with a testing plan. The obvious choice was to spin up a mainnet fork, prank an account that has a lot of AAVE, and go through the normal process of making a proposal, voting on it, and warping to a time where I can execute it. However, I wanted a bit of a simpler process, and since my proposal was simply going to have the Aave governance smart contract delegatecall into a custom \"payload\" contract which then handles all the proposal logic (this is a common pattern in on-chain governance). I was hoping to prank into the aave governance contract address, and delegatecall into my payload contract myself so I didn't have to walk through the entire proposal process.\r\n\r\nThis obviously isn't too big of a deal. The first method of walking through the governance process normally still works (and is probably safer since its closer to what will really happen), and I could also just use the etch cheatcode to overwrite the aave gov contracts code and replace it with a contract that just delegatecalls into my payload.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1066251729/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1066902699",
    "html_url": "https://github.com/foundry-rs/foundry/issues/824#issuecomment-1066902699",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/824",
    "id": 1066902699,
    "node_id": "IC_kwDOGBlvNc4_l6Sr",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-14T14:55:38Z",
    "updated_at": "2022-03-14T14:55:38Z",
    "author_association": "COLLABORATOR",
    "body": "Ah, I think I misunderstood what you were trying to do. Let me know if this is the correct explanation of the issue:\r\n- `MyTestContract is DSTest` has a test which calls `vm.prank(aaveGovernor)`, where `aaveGovernor` is a proxy that delegates to an arbitrary `aavePayload` contract specified later\r\n- After `prank`, the test then calls `aaveGovernor.execute(proposalId, aavePayload)` which delegatecalls to `aavePayload`\r\n- `msg.sender` in that delegatecall is not `aaveGovernor` but is actually `MyTestContract`\r\n\r\nI don't know if that function sig / flow is exactly correct, but if that is representative of the problem then I agree that seems like a bug (contrary to my previous comment where I thought you were calling delegatecall directly from the test contract)",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1066902699/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1066954143",
    "html_url": "https://github.com/foundry-rs/foundry/issues/824#issuecomment-1066954143",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/824",
    "id": 1066954143,
    "node_id": "IC_kwDOGBlvNc4_mG2f",
    "user": {
      "login": "ncitron",
      "id": 16858330,
      "node_id": "MDQ6VXNlcjE2ODU4MzMw",
      "avatar_url": "https://avatars.githubusercontent.com/u/16858330?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ncitron",
      "html_url": "https://github.com/ncitron",
      "followers_url": "https://api.github.com/users/ncitron/followers",
      "following_url": "https://api.github.com/users/ncitron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ncitron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ncitron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ncitron/subscriptions",
      "organizations_url": "https://api.github.com/users/ncitron/orgs",
      "repos_url": "https://api.github.com/users/ncitron/repos",
      "events_url": "https://api.github.com/users/ncitron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ncitron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-14T15:32:20Z",
    "updated_at": "2022-03-14T15:32:20Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hmm this is not quite the flow I was using. It looks more like this:\r\n\r\n- MyTestContract is DSTest has a test which calls `vm.prank(aaveGovernor)`, where aaveGovernor is a proxy that delegates to an arbitrary aavePayload contract specified later\r\n- After prank, the test then calls `address(aavePayload).delegatecall(abi.encodeWithSig(\"execute()\"))`\r\n- `address(this)` inside of `aavePayload` is still the test contract, instead of `aaveGovernor`\r\n\r\nThe expectation I had was that calling `prank(aaveGovernor)` then delegatecalling to `aavePayload` immediately after in my test would allow me to mock a delegatecall from `aaveGovernor` to `aavePayload`",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1066954143/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1067033316",
    "html_url": "https://github.com/foundry-rs/foundry/issues/824#issuecomment-1067033316",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/824",
    "id": 1067033316,
    "node_id": "IC_kwDOGBlvNc4_maLk",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-14T16:30:04Z",
    "updated_at": "2022-03-14T16:30:04Z",
    "author_association": "COLLABORATOR",
    "body": "Got it, makes sense. Agreed the current behavior is confusing, so I think there's two ways to improve it, let me know if you have other ideas:\r\n1. Leave behavior as is, but throw an error if the next call after `vm.prank` is a delegatecall instead of a regular call. In this case a workaround would be your suggestion to use `vm.etch`  to overwrite the aave governor with a contract that just delegatecalls\r\n2. Update `prank` so that you can use it for delegatecalling from a test contract, but throw an error if the address passed to `vm.prank(addr)` before a delegatecall has no code (to ensure you can't delegatecall from an EOA). Is there any related change to how pranking `tx.origin` is impacted? I don't think anything around `tx.origin` needs to change, but just making sure\r\n\r\nIMO your use case is valid and potentially common so I'd support the second option",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1067033316/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1286714056",
    "html_url": "https://github.com/foundry-rs/foundry/issues/824#issuecomment-1286714056",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/824",
    "id": 1286714056,
    "node_id": "IC_kwDOGBlvNc5MsbLI",
    "user": {
      "login": "adhusson",
      "id": 2977,
      "node_id": "MDQ6VXNlcjI5Nzc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2977?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adhusson",
      "html_url": "https://github.com/adhusson",
      "followers_url": "https://api.github.com/users/adhusson/followers",
      "following_url": "https://api.github.com/users/adhusson/following{/other_user}",
      "gists_url": "https://api.github.com/users/adhusson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adhusson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adhusson/subscriptions",
      "organizations_url": "https://api.github.com/users/adhusson/orgs",
      "repos_url": "https://api.github.com/users/adhusson/repos",
      "events_url": "https://api.github.com/users/adhusson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adhusson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-10-21T09:41:09Z",
    "updated_at": "2022-10-21T09:41:09Z",
    "author_association": "CONTRIBUTOR",
    "body": "+1, would also be useful to me, the general case seems to be:\r\n* gov-like contract wants to delegatecall a proposal/spell/whatever you call it\r\n* to test this, prank a delegatecall from gov-contract to proposal contract\r\n* run tests",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1286714056/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1430991249",
    "html_url": "https://github.com/foundry-rs/foundry/issues/824#issuecomment-1430991249",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/824",
    "id": 1430991249,
    "node_id": "IC_kwDOGBlvNc5VSzGR",
    "user": {
      "login": "adhusson",
      "id": 2977,
      "node_id": "MDQ6VXNlcjI5Nzc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2977?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adhusson",
      "html_url": "https://github.com/adhusson",
      "followers_url": "https://api.github.com/users/adhusson/followers",
      "following_url": "https://api.github.com/users/adhusson/following{/other_user}",
      "gists_url": "https://api.github.com/users/adhusson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adhusson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adhusson/subscriptions",
      "organizations_url": "https://api.github.com/users/adhusson/orgs",
      "repos_url": "https://api.github.com/users/adhusson/repos",
      "events_url": "https://api.github.com/users/adhusson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adhusson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-02-15T09:14:10Z",
    "updated_at": "2023-04-04T17:27:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "There's now a delegate-prank tool available here: https://github.com/adhusson/delegate-prank \r\n\r\nedit: updated interface\r\n```solidity\r\n// c will delegatecall dest.fn(args)\r\ndelegatePrank(c,address(dest),abi.encodeCall(fn,(args)));\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1430991249/reactions",
      "total_count": 2,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 1,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1490860555",
    "html_url": "https://github.com/foundry-rs/foundry/issues/824#issuecomment-1490860555",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/824",
    "id": 1490860555,
    "node_id": "IC_kwDOGBlvNc5Y3LoL",
    "user": {
      "login": "ckksec",
      "id": 85028981,
      "node_id": "MDQ6VXNlcjg1MDI4OTgx",
      "avatar_url": "https://avatars.githubusercontent.com/u/85028981?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ckksec",
      "html_url": "https://github.com/ckksec",
      "followers_url": "https://api.github.com/users/ckksec/followers",
      "following_url": "https://api.github.com/users/ckksec/following{/other_user}",
      "gists_url": "https://api.github.com/users/ckksec/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ckksec/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ckksec/subscriptions",
      "organizations_url": "https://api.github.com/users/ckksec/orgs",
      "repos_url": "https://api.github.com/users/ckksec/repos",
      "events_url": "https://api.github.com/users/ckksec/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ckksec/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-30T19:55:06Z",
    "updated_at": "2023-03-30T19:57:09Z",
    "author_association": "NONE",
    "body": "Actually the idea of pranking delegatecall() can be super helpful, especially when you easily (atleast easier) want to overwrite storage. From what I know, this had to be done by getting the storage slot. It got even more complicated when you wanted to overwrite structs etc. I made an example which overwrites the owner that is stored as a value mapped to a random number in a mapping of numbers => address (to show how it can make possible complex things easier). If there was an easier way to manipulate storage other than by getting the slots please let me know haha.\r\nMy example was inspired by [adhusson](https://github.com/adhusson).\r\n\r\n> There's now a delegate-prank tool available here: https://github.com/adhusson/delegate-prank\r\n> \r\n> For any contract just do\r\n> \r\n> ```solidity\r\n> Delegator d = addDelegation(address(myContract));\r\n> d.delegatecall(dest,abi.encodeCall(...));\r\n> ```\r\n> \r\n> (warning: it will replace your contract bytecode with a proxy + a delegator)\r\n\r\nYour code pretty much does what's needed, however, it should also change back the contract code to the original. Here's an example on how I did that and how a ``prankDelegate()`` cheatcode might look like based on inspiration from your code (I don't know how exactly they're implemented though). It temporarily changes the code of the to be pranked contract to a proxy (as you did) but once the delegation is done, it changes it back to the source. Therefore the storage of the contract will be changed after the delegatecall but not the code. Also there's no need to create multiple proxies then.\r\n\r\n```solidity\r\n// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.13;\r\n\r\nimport \"forge-std/Test.sol\";\r\n\r\n/**\r\n    This contract is deployed by the user.\r\n    It has to have the exact same storage structure than the original.\r\n    In this simple example we want to change the variable `owner[0]` in `AAveGovernor`.\r\n    Previously, as far as I know, we'd have to get the storage slot and overwrite it.\r\n    By delegatecalling it temporarily as a proxy to our copy, we can easily do this without the previous step.\r\n */\r\ncontract AaveGovernorCopy {\r\n    mapping(uint => address) public owners;\r\n\r\n    // This function does not exist on AaveGovernor\r\n    function changeOwner(address _newOwner) external {\r\n        owners[19193984145157575157191571358] = _newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n    This contract is the \"main\" contract where we want to overwrite the ownership.\r\n    Our goal is to easily (or easier) change the owner even though `AaveGovernor` doesn't have a function to do that.\r\n    To make things more complicated, the owner isn't stored in a simple address state variable, but a nice mapping.\r\n    And to make it more complicated, it's assigned to an annoying number.\r\n */\r\ncontract AaveGovernor {\r\n    mapping(uint => address) public owners;\r\n    \r\n    constructor() {\r\n        owners[19193984145157575157191571358] = address(1);\r\n    }\r\n}\r\n\r\n/**\r\n    This is the temporary proxy contract that will replace the main contract (`AAveGovernor`) temporarily.\r\n */\r\ncontract PrankDelegator {\r\n    function prankDelegate(address _to, bytes memory _data) external returns(bool _success, bytes memory _returnData) {\r\n        return _to.delegatecall(_data);\r\n    }\r\n}\r\n\r\n// Our test contract\r\ncontract ContractTest is Test {\r\n    AaveGovernor aaveGovernor = new AaveGovernor();\r\n    AaveGovernorCopy aaveGovernorCopy = new AaveGovernorCopy();\r\n    PrankDelegator prankDelegator;\r\n\r\n    // @dev Temporarily changes `_from` into a proxy which then delegatecalls to `_to` with `_data`.\r\n    // @param _from The address to delegate from\r\n    // @param _to The address to delegate to\r\n    // @param _data The data to delegate with to `_to`\r\n    function prankDelegate(address _from, address _to, bytes memory _data) internal returns(bool _success, bytes memory _returnData) {\r\n        bytes memory sourceCode;\r\n        sourceCode = _from.code; // Temporarily store the current code of `_from`.\r\n        \r\n        vm.etch(_from, address(prankDelegator).code); // \"Turn\" `_from` into a temporary proxy `PrankDelegator` by replacing its code.\r\n        (_success, _returnData) = _from.call(abi.encodeWithSignature(\"prankDelegate(address,bytes)\",_to,_data)); // Make `_from` delegate to `_to`.\r\n        vm.etch(_from, sourceCode); // Restore the code of `_from` to its previous code before turning it into a proxy.\r\n    }\r\n\r\n    function setUp() public {\r\n\r\n        // Create our three contracts.\r\n        // Theoretically you could store the bytecode of `PrankDelegator` and replace the to be delegated contract with that so\r\n        // that there's no need to deploy a new contract when doing tests or when a new cheatcode should be implemented.\r\n        aaveGovernor = new AaveGovernor();\r\n        aaveGovernorCopy = new AaveGovernorCopy();\r\n        prankDelegator = new PrankDelegator();\r\n        \r\n        // No need to label the delegator as we won't call it but only delegatecall to it but from the main contract.\r\n        vm.label(address(aaveGovernor), \"Aave\");\r\n        vm.label(address(aaveGovernorCopy), \"Fake Aave\");\r\n    }\r\n\r\n    // Test changing the owner in `AaveGovernor` without using a prank but instead turning it into a temporary proxy.\r\n    function testChangeOwner() public {\r\n        // Check and log the current owner.\r\n        require(aaveGovernor.owners(19193984145157575157191571358) == address(1), \"Owner is not 1\");\r\n        console.logAddress(aaveGovernor.owners(19193984145157575157191571358));\r\n\r\n        // Now do the `prankDelegate()` call.\r\n        prankDelegate(address(aaveGovernor), address(aaveGovernorCopy), abi.encodeWithSignature(\"changeOwner(address)\",0xDeaDbeefdEAdbeefdEadbEEFdeadbeEFdEaDbeeF));\r\n        \r\n        // Check and log the new owner.\r\n        require(aaveGovernor.owners(19193984145157575157191571358) == 0xDeaDbeefdEAdbeefdEadbEEFdeadbeEFdEaDbeeF, \"Owner is not 0xDeaDbeefdEAdbeefdEadbEEFdeadbeEFdEaDbeeF\");\r\n        console.logAddress(aaveGovernor.owners(19193984145157575157191571358));\r\n    }\r\n}\r\n\r\n```\r\n\r\nSimple result:\r\n<img width=\"323\" alt=\"result\" src=\"https://user-images.githubusercontent.com/85028981/228943177-526d724d-6ece-4232-a798-4a681be7c8b8.png\">\r\n\r\nMore complex result with proof that `AAveGovernor` did the delegatecall:\r\n<img width=\"1905\" alt=\"result2\" src=\"https://user-images.githubusercontent.com/85028981/228943846-3dcc93d9-da4b-42b3-afe5-e370ba18ee1b.png\">\r\n<img width=\"520\" alt=\"result3\" src=\"https://user-images.githubusercontent.com/85028981/228943853-39edffe1-f3a0-4294-83a6-e576dc178128.png\">",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1490860555/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1496340304",
    "html_url": "https://github.com/foundry-rs/foundry/issues/824#issuecomment-1496340304",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/824",
    "id": 1496340304,
    "node_id": "IC_kwDOGBlvNc5ZMFdQ",
    "user": {
      "login": "adhusson",
      "id": 2977,
      "node_id": "MDQ6VXNlcjI5Nzc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2977?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adhusson",
      "html_url": "https://github.com/adhusson",
      "followers_url": "https://api.github.com/users/adhusson/followers",
      "following_url": "https://api.github.com/users/adhusson/following{/other_user}",
      "gists_url": "https://api.github.com/users/adhusson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adhusson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adhusson/subscriptions",
      "organizations_url": "https://api.github.com/users/adhusson/orgs",
      "repos_url": "https://api.github.com/users/adhusson/repos",
      "events_url": "https://api.github.com/users/adhusson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adhusson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-04-04T17:26:13Z",
    "updated_at": "2023-04-04T17:26:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "@ckksec Nice, I went a step further and now the bytecode is [swapped back](https://github.com/adhusson/delegate-prank/blob/1f5a5813bcad90ab3cc5be23600d78f69f7f2ba7/src/DelegatePrank.sol#L37) right before the contract does the delegatecall.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1496340304/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
