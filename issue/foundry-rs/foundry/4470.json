{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/4470",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4470/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4470/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4470/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/4470",
  "id": 1607919511,
  "node_id": "I_kwDOGBlvNc5f1ueX",
  "number": 4470,
  "title": "bug(forge): invariant test fails with [FAIL. Reason: Arithmetic over/underflow], same sequence passes with unit test",
  "user": {
    "login": "prateek105",
    "id": 10460861,
    "node_id": "MDQ6VXNlcjEwNDYwODYx",
    "avatar_url": "https://avatars.githubusercontent.com/u/10460861?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/prateek105",
    "html_url": "https://github.com/prateek105",
    "followers_url": "https://api.github.com/users/prateek105/followers",
    "following_url": "https://api.github.com/users/prateek105/following{/other_user}",
    "gists_url": "https://api.github.com/users/prateek105/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/prateek105/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/prateek105/subscriptions",
    "organizations_url": "https://api.github.com/users/prateek105/orgs",
    "repos_url": "https://api.github.com/users/prateek105/repos",
    "events_url": "https://api.github.com/users/prateek105/events{/privacy}",
    "received_events_url": "https://api.github.com/users/prateek105/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3334394228,
      "node_id": "MDU6TGFiZWwzMzM0Mzk0MjI4",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-bug",
      "name": "T-bug",
      "color": "d73a4a",
      "default": false,
      "description": "Type: bug"
    },
    {
      "id": 3394554570,
      "node_id": "LA_kwDOGBlvNc7KVMrK",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/A-fuzzing",
      "name": "A-fuzzing",
      "color": "FBCA04",
      "default": false,
      "description": "Area: fuzzing"
    },
    {
      "id": 3593644915,
      "node_id": "LA_kwDOGBlvNc7WMqtz",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/Cmd-forge-test",
      "name": "Cmd-forge-test",
      "color": "006B75",
      "default": false,
      "description": "Command: forge test"
    },
    {
      "id": 3703752787,
      "node_id": "LA_kwDOGBlvNc7cwshT",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/C-forge",
      "name": "C-forge",
      "color": "5319E7",
      "default": false,
      "description": "Command: forge"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2023-03-03T04:25:25Z",
  "updated_at": "2023-03-07T18:17:24Z",
  "closed_at": "2023-03-07T18:17:24Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "### Component\n\nForge\n\n### Have you ensured that all of these are up to date?\n\n- [X] Foundry\n- [X] Foundryup\n\n### What version of Foundry are you on?\n\nforge 0.2.0 (f96e0ba 2023-03-03T01:47:26.815053Z)\n\n### What command(s) is the bug in?\n\nforge test\n\n### Operating System\n\nmacOS (Apple Silicon)\n\n### Describe the bug\n\nRunning an invariant test using forge gives `[FAIL. Reason: Arithmetic over/underflow]` error when `fail_on_revert = true` in `foundry.toml`. \r\n\r\nWhen the same sequence is run in a unit test(regression test) it shows no such error. The traces for both the invariant test and the regression test are exactly similar, but invariant fails while regression test passes.\r\n\r\nI am adding sample test contract, test handler and test invariant that replicates the bug. The test contract is a simple contract that increments and decrements a counter with a few conditions. Also increment is called before every decrement. This means that counter can never be less than zero, which is our invariant.\r\n\r\n### TestContract\r\n```\r\ncontract TestContract {\r\n    uint256 public counter;\r\n    uint256 internal previousUpdate;\r\n    constructor(uint256 counter_) {\r\n        counter = counter_;\r\n        previousUpdate = block.timestamp;\r\n    }\r\n\r\n    function increment() external {\r\n        counter += 1;\r\n\r\n        if(block.timestamp - previousUpdate > 2 hours) {\r\n            previousUpdate = block.timestamp;\r\n        }\r\n    }\r\n\r\n    function decrement() external {\r\n        counter -= 1;\r\n\r\n        if(block.timestamp - previousUpdate > 2 hours) {\r\n            previousUpdate = block.timestamp;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n### TestHandler\r\n```\r\nimport \"forge-std/Test.sol\";\r\n\r\ncontract TestHandler is Test {\r\n\r\n    TestContract _test;\r\n    \r\n    constructor(address testContract_) {\r\n        _test = TestContract(testContract_);\r\n    }\r\n\r\n    function increment() public {\r\n        _test.increment();\r\n        vm.warp(block.timestamp + 3 hours);\r\n    }\r\n\r\n    function decrement() public {\r\n        increment();\r\n        _test.decrement();\r\n    }\r\n}\r\n```\r\n\r\n### Invariants\r\n\r\n```\r\nimport \"forge-std/Test.sol\";\r\n\r\ncontract TestInvariants is Test {\r\n\r\n    TestContract internal _testContract;\r\n    TestHandler internal _testHandler;\r\n\r\n    function setUp() public virtual {\r\n        _testContract = new TestContract(1);\r\n        excludeContract(address(_testContract));\r\n        _testHandler = new TestHandler(address(_testContract));\r\n\r\n        targetSender(address(0x1234));\r\n    }\r\n\r\n    // an invariant that should always hold \r\n    function invariant_counter() public {\r\n        require(_testContract.counter() > 0, \"Incorrect counter\");\r\n    }\r\n}\r\n```\r\n### Regression Tests for failing invariant sequences\r\n#### This is the unit test with exact same failing sequence, but passes here.\r\n```\r\n// tests failing invariant sequence\r\ncontract TestRegression is TestInvariants {\r\n\r\n    // the failing invariant sequence passes this regression test without any Arithmetic over/underflow revert\r\n    function test_overflow_error() external {\r\n        invariant_counter();\r\n        _testHandler.decrement();\r\n        invariant_counter();\r\n        _testHandler.decrement();\r\n        invariant_counter();\r\n    }\r\n}\r\n```\r\n\r\n### foundry.toml\r\n```\r\n[invariant]\r\nruns           = 1000  # The number of calls to make in the invariant tests\r\ndepth          = 2     # The number of times to run the invariant tests\r\ncall_override  = false # Override calls\r\nfail_on_revert = true  # Fail the test if the contract reverts\r\n```\r\n\r\nAlso I found that the invariant runs if I make either of these changes:\r\n1. time is not skipped\r\n2. `if(block.timestamp - previousUpdate > 2 hours)` changed to `(block.timestamp >= previousUpdate && block.timestamp - previousUpdate > 2 hours) `",
  "closed_by": {
    "login": "mds1",
    "id": 17163988,
    "node_id": "MDQ6VXNlcjE3MTYzOTg4",
    "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mds1",
    "html_url": "https://github.com/mds1",
    "followers_url": "https://api.github.com/users/mds1/followers",
    "following_url": "https://api.github.com/users/mds1/following{/other_user}",
    "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
    "organizations_url": "https://api.github.com/users/mds1/orgs",
    "repos_url": "https://api.github.com/users/mds1/repos",
    "events_url": "https://api.github.com/users/mds1/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mds1/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/4470/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4470/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1458242076",
    "html_url": "https://github.com/foundry-rs/foundry/issues/4470#issuecomment-1458242076",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4470",
    "id": 1458242076,
    "node_id": "IC_kwDOGBlvNc5W6wIc",
    "user": {
      "login": "prateek105",
      "id": 10460861,
      "node_id": "MDQ6VXNlcjEwNDYwODYx",
      "avatar_url": "https://avatars.githubusercontent.com/u/10460861?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/prateek105",
      "html_url": "https://github.com/prateek105",
      "followers_url": "https://api.github.com/users/prateek105/followers",
      "following_url": "https://api.github.com/users/prateek105/following{/other_user}",
      "gists_url": "https://api.github.com/users/prateek105/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/prateek105/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/prateek105/subscriptions",
      "organizations_url": "https://api.github.com/users/prateek105/orgs",
      "repos_url": "https://api.github.com/users/prateek105/repos",
      "events_url": "https://api.github.com/users/prateek105/events{/privacy}",
      "received_events_url": "https://api.github.com/users/prateek105/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-07T14:11:02Z",
    "updated_at": "2023-03-07T14:12:01Z",
    "author_association": "NONE",
    "body": "Found a workaround for this issue in [maple-core-v2](https://github.com/maple-labs/maple-core-v2) repository invariant testing.\r\nMaple are using these two modifiers to get things working:\r\n- [useCurrentTimestamp](https://github.com/maple-labs/maple-core-v2/blob/main/tests/invariants/BaseInvariants.t.sol#L34) for invariants\r\n- [useTimestamps](https://github.com/maple-labs/maple-core-v2/blob/main/tests/invariants/actors/LpHandler.sol#L62) for handlers",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1458242076/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1458621973",
    "html_url": "https://github.com/foundry-rs/foundry/issues/4470#issuecomment-1458621973",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4470",
    "id": 1458621973,
    "node_id": "IC_kwDOGBlvNc5W8M4V",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-07T18:17:23Z",
    "updated_at": "2023-03-07T18:17:23Z",
    "author_association": "COLLABORATOR",
    "body": "IIUC the issue is that the state/timestamp changes are not committed between calls within an invariant run, in which case I'll close this as a duplicate of https://github.com/foundry-rs/foundry/issues/3005. Please feel free to reopen if I misunderstood",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1458621973/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
