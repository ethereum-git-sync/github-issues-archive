{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/512",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/512/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/512/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/512/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/512",
  "id": 1108221458,
  "node_id": "I_kwDOGBlvNc5CDh4S",
  "number": 512,
  "title": "inline / asymmetric matchers",
  "user": {
    "login": "fubhy",
    "id": 1172528,
    "node_id": "MDQ6VXNlcjExNzI1Mjg=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1172528?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/fubhy",
    "html_url": "https://github.com/fubhy",
    "followers_url": "https://api.github.com/users/fubhy/followers",
    "following_url": "https://api.github.com/users/fubhy/following{/other_user}",
    "gists_url": "https://api.github.com/users/fubhy/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/fubhy/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/fubhy/subscriptions",
    "organizations_url": "https://api.github.com/users/fubhy/orgs",
    "repos_url": "https://api.github.com/users/fubhy/repos",
    "events_url": "https://api.github.com/users/fubhy/events{/privacy}",
    "received_events_url": "https://api.github.com/users/fubhy/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3593644820,
      "node_id": "LA_kwDOGBlvNc7WMqsU",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-feature",
      "name": "T-feature",
      "color": "BFD4F2",
      "default": false,
      "description": "Type: feature"
    },
    {
      "id": 3703752787,
      "node_id": "LA_kwDOGBlvNc7cwshT",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/C-forge",
      "name": "C-forge",
      "color": "5319E7",
      "default": false,
      "description": "Command: forge"
    },
    {
      "id": 3703752960,
      "node_id": "LA_kwDOGBlvNc7cwskA",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/A-cheatcodes",
      "name": "A-cheatcodes",
      "color": "FBCA04",
      "default": false,
      "description": "Area: cheatcodes"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 7,
  "created_at": "2022-01-19T15:12:39Z",
  "updated_at": "2023-03-09T23:39:54Z",
  "closed_at": "2023-03-09T23:39:54Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "For comparing concrete values as part of an assertion, sometimes you'll not be able to reasonably predict the exact value in which case a concept like \"asymmetric matchers\" (Jest / Jasmine) would come in handy. This can be a concern particularly in integration tests and/or if a value depends on external factors like e.g. block time (rebasing tokens come to mind).\r\n\r\nWould it make sense to attempt something along the lines of:\r\n\r\n```\r\nvm.expectEmit();\r\nemit Transfer(address(0xbeef), address(0), vm.lowerThan(12345));\r\n``` \r\n\r\n?",
  "closed_by": {
    "login": "mds1",
    "id": 17163988,
    "node_id": "MDQ6VXNlcjE3MTYzOTg4",
    "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mds1",
    "html_url": "https://github.com/mds1",
    "followers_url": "https://api.github.com/users/mds1/followers",
    "following_url": "https://api.github.com/users/mds1/following{/other_user}",
    "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
    "organizations_url": "https://api.github.com/users/mds1/orgs",
    "repos_url": "https://api.github.com/users/mds1/repos",
    "events_url": "https://api.github.com/users/mds1/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mds1/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/512/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/512/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1016577046",
    "html_url": "https://github.com/foundry-rs/foundry/issues/512#issuecomment-1016577046",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/512",
    "id": 1016577046,
    "node_id": "IC_kwDOGBlvNc48l7wW",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-19T15:24:37Z",
    "updated_at": "2022-01-19T15:24:37Z",
    "author_association": "COLLABORATOR",
    "body": "I've had similar issues, but would prefer to solve it by enabling event emission to come anytime after the call, that way you can just read/compute the expected event data from the new state. For example:\r\n\r\nCurrently, with the below snippet, I must either (1) implement interest accrual calculations so I know what `newInterestRate` should be, or (2) just don't test values\r\n\r\n```solidity\r\nvm.expectEmit(false,false,false,false);\r\nemit AccrueInterest(newInterestRate);\r\ncontract.accrueInterest();\r\n```\r\n\r\nInstead it'd be nice to do something like:\r\n```solidity\r\nvm.expectEmit(true,true,true,true);\r\ncontract.accrueInterest();\r\nuint256 newInterestRate = contract.interestRate();\r\nemit AccrueInterest(newInterestRate);\r\n```\r\n\r\nAre there cases you can think of where that wouldn't work, and you'd still want to test approximate values instead of exact ones?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1016577046/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1017437216",
    "html_url": "https://github.com/foundry-rs/foundry/issues/512#issuecomment-1017437216",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/512",
    "id": 1017437216,
    "node_id": "IC_kwDOGBlvNc48pNwg",
    "user": {
      "login": "fubhy",
      "id": 1172528,
      "node_id": "MDQ6VXNlcjExNzI1Mjg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1172528?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubhy",
      "html_url": "https://github.com/fubhy",
      "followers_url": "https://api.github.com/users/fubhy/followers",
      "following_url": "https://api.github.com/users/fubhy/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubhy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubhy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubhy/subscriptions",
      "organizations_url": "https://api.github.com/users/fubhy/orgs",
      "repos_url": "https://api.github.com/users/fubhy/repos",
      "events_url": "https://api.github.com/users/fubhy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubhy/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-20T12:15:54Z",
    "updated_at": "2022-01-20T12:25:06Z",
    "author_association": "CONTRIBUTOR",
    "body": "`I've had similar issues, but would prefer to solve it by enabling event emission to come anytime after the call, that way you can just read/compute the expected event data from the new state.`\r\n\r\n@mds1 That's a good idea and would indeed likely solve the this particular case.\r\n\r\nSlightly off-topic (not relating to inline / asymmetric matchers): What about e.g obscure rounding / off-by-one errors where you want to assert the result of a view function based on previously set fixed input values / fixtures or values obtained from other view functions. Would you then just do something like this:\r\n\r\n```solc\r\nuint expectedValue = 123;\r\nassertLt(returnedValue, expectedValue + 1);\r\nassertGt(returnedValue, expectedValue - 1);\r\n```\r\n\r\nOr should there be specialized assertion functions like e.g.\r\n\r\n```solc\r\nassertAround(int a, int b, int margin)\r\n```\r\n\r\n(Just wondering about ergonomics around asserting less deterministic values in tests)",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1017437216/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1017445237",
    "html_url": "https://github.com/foundry-rs/foundry/issues/512#issuecomment-1017445237",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/512",
    "id": 1017445237,
    "node_id": "IC_kwDOGBlvNc48pPt1",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-20T12:26:00Z",
    "updated_at": "2022-01-20T12:26:00Z",
    "author_association": "MEMBER",
    "body": "@fubhy The assertions are in https://github.com/dapphub/ds-test but really you can use whatever you like: if the test reverts, it fails. If the test does not revert, it passes. So, you can implement more assertions if you want, and even publish a library with the extra ones added if you think it would be useful :slightly_smiling_face: ",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1017445237/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1017446401",
    "html_url": "https://github.com/foundry-rs/foundry/issues/512#issuecomment-1017446401",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/512",
    "id": 1017446401,
    "node_id": "IC_kwDOGBlvNc48pQAB",
    "user": {
      "login": "fubhy",
      "id": 1172528,
      "node_id": "MDQ6VXNlcjExNzI1Mjg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1172528?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubhy",
      "html_url": "https://github.com/fubhy",
      "followers_url": "https://api.github.com/users/fubhy/followers",
      "following_url": "https://api.github.com/users/fubhy/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubhy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubhy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubhy/subscriptions",
      "organizations_url": "https://api.github.com/users/fubhy/orgs",
      "repos_url": "https://api.github.com/users/fubhy/repos",
      "events_url": "https://api.github.com/users/fubhy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubhy/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-20T12:27:23Z",
    "updated_at": "2022-01-20T12:29:46Z",
    "author_association": "CONTRIBUTOR",
    "body": "> @fubhy The assertions are in https://github.com/dapphub/ds-test but really you can use whatever you like: if the test reverts, it fails. If the test does not revert, it passes. So, you can implement more assertions if you want, and even publish a library with the extra ones added if you think it would be useful slightly_smiling_face\r\n\r\nYeah I know. I also looked at https://github.com/brockelmore/forge-std already. Just wondering about ergonomics here and what such a std-library should maybe / maybe not contain :-)\r\n\r\n(@mds1's suggestion fixes the problem I raised initially in this issue)",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1017446401/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1017502111",
    "html_url": "https://github.com/foundry-rs/foundry/issues/512#issuecomment-1017502111",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/512",
    "id": 1017502111,
    "node_id": "IC_kwDOGBlvNc48pdmf",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-20T13:25:24Z",
    "updated_at": "2022-01-20T13:25:24Z",
    "author_association": "COLLABORATOR",
    "body": "@fubhy Solmate has [`assertApproxEq`](https://github.com/Rari-Capital/solmate/blob/ffb7a90297e7c2b8a17abe05af3a1712926a700b/src/test/utils/DSTestPlus.sol#L60) and [`assertRelApproxEq`](https://github.com/Rari-Capital/solmate/blob/ffb7a90297e7c2b8a17abe05af3a1712926a700b/src/test/utils/DSTestPlus.sol#L77) for comparing values within an absolute or relative tolerance, respectively. These and Solmate's `bound` method feel like good candidates to add to `forge-std` if @transmissions11 and @brockelmore have no objections\r\n\r\n\r\nAnd regarding the original issue scope:\r\n> by enabling event emission to come anytime after the call, that way you can just read/compute the expected event data from the new state\r\n\r\n@brockelmore IIRC you mentioned this would be hard to implement, but personally I keep finding myself wanting this, so perhaps worth revisiting?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1017502111/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1017557854",
    "html_url": "https://github.com/foundry-rs/foundry/issues/512#issuecomment-1017557854",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/512",
    "id": 1017557854,
    "node_id": "IC_kwDOGBlvNc48prNe",
    "user": {
      "login": "fubhy",
      "id": 1172528,
      "node_id": "MDQ6VXNlcjExNzI1Mjg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1172528?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubhy",
      "html_url": "https://github.com/fubhy",
      "followers_url": "https://api.github.com/users/fubhy/followers",
      "following_url": "https://api.github.com/users/fubhy/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubhy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubhy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubhy/subscriptions",
      "organizations_url": "https://api.github.com/users/fubhy/orgs",
      "repos_url": "https://api.github.com/users/fubhy/repos",
      "events_url": "https://api.github.com/users/fubhy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubhy/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-20T14:23:57Z",
    "updated_at": "2022-01-20T14:27:02Z",
    "author_association": "CONTRIBUTOR",
    "body": "> @fubhy Solmate has [`assertApproxEq`](https://github.com/Rari-Capital/solmate/blob/ffb7a90297e7c2b8a17abe05af3a1712926a700b/src/test/utils/DSTestPlus.sol#L60) and [`assertRelApproxEq`](https://github.com/Rari-Capital/solmate/blob/ffb7a90297e7c2b8a17abe05af3a1712926a700b/src/test/utils/DSTestPlus.sol#L77) for comparing values within an absolute or relative tolerance, respectively. These and Solmate's `bound` method feel like good candidates to add to `forge-std` if @transmissions11 and @brockelmore have no objections\r\n\r\nAh nice. I wasn't aware of `DSTestPlus`. Thanks for the link :-).\r\n\r\nAnyways, sorry for going off-topic, back on track: I haven't had a chance to dive deeper into the code base yet so I cannot judge how hard it would be to implement your suggestion @mds1 but I also keep finding myself wanting this. I've migrated a couple of tests over the past few days and ran into this several times. So far, the solution for us has been to just not test the emitted values (only `topic0`), but that's obviously not ideal.\r\n\r\nWhat about enabling this in two steps? ​\r\n\r\n```solidity\r\nvm.expectEmit(\"AccrueInterest(uint)\");\r\ncontract.accrueInterest();\r\n\r\nvm.expectPreviousEmit();\r\nemit AccrueInterest(contract.interestRate());\r\n```\r\n\r\nWhere `expectEmit` would store all matching events (just via `topic0`) emitted in the subsequent call and then `expectPreviousEmit` would re-check that list of emitted events for its concrete values?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1017557854/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1462997980",
    "html_url": "https://github.com/foundry-rs/foundry/issues/512#issuecomment-1462997980",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/512",
    "id": 1462997980,
    "node_id": "IC_kwDOGBlvNc5XM5Pc",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-09T23:39:54Z",
    "updated_at": "2023-03-09T23:39:54Z",
    "author_association": "COLLABORATOR",
    "body": "Going to close this since there are approximate assertion helpers in forge-std, and you can use `vm.snapshot` along with `vm.revertTo` if you can't precompute values so need to extract values from the tx result, revert to a prior state, then expect an emit with those value",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1462997980/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
