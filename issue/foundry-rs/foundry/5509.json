{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/5509",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5509/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5509/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5509/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/5509",
  "id": 1829695674,
  "node_id": "I_kwDOGBlvNc5tDvC6",
  "number": 5509,
  "title": "Feat(forge): `vm.prompt*` cheatcodes",
  "user": {
    "login": "klkvr",
    "id": 62447812,
    "node_id": "MDQ6VXNlcjYyNDQ3ODEy",
    "avatar_url": "https://avatars.githubusercontent.com/u/62447812?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/klkvr",
    "html_url": "https://github.com/klkvr",
    "followers_url": "https://api.github.com/users/klkvr/followers",
    "following_url": "https://api.github.com/users/klkvr/following{/other_user}",
    "gists_url": "https://api.github.com/users/klkvr/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/klkvr/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/klkvr/subscriptions",
    "organizations_url": "https://api.github.com/users/klkvr/orgs",
    "repos_url": "https://api.github.com/users/klkvr/repos",
    "events_url": "https://api.github.com/users/klkvr/events{/privacy}",
    "received_events_url": "https://api.github.com/users/klkvr/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3593644820,
      "node_id": "LA_kwDOGBlvNc7WMqsU",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-feature",
      "name": "T-feature",
      "color": "BFD4F2",
      "default": false,
      "description": "Type: feature"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 15,
  "created_at": "2023-07-31T17:20:03Z",
  "updated_at": "2023-10-22T18:10:20Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "### Component\r\n\r\nForge\r\n\r\n### Describe the feature you would like\r\n\r\nAdd `vm.promptAddress(string prompt)`, `vm.promptUint(string prompt)`, etc. cheatcodes which would prompt user for some input. This could be used as an alternative of script function args.\r\n\r\nReasons why I think this could be useful:\r\n1. When working on a new external project it would be handy if user could just run the script and follow the instructions after it rather than checking certain function parameters and signatures in random .sol script files to enter them in cli. Also, prompt string would allow to specify more details on what needs to be provided\r\n2. This would allow more straightforward UI because scripts relying on some arguments will not require explicit specification of them in `--sig` argument\r\n\r\nExpected behavior:\r\n\r\n```solidity\r\ncontract Deploy is Script {\r\n    function deployFoo() public {\r\n        address bar = vm.promptAddress(\"Enter bar address: \");\r\n        new Foo(bar);\r\n    }\r\n}\r\n```\r\n\r\n### Additional context\r\n\r\n_No response_",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/5509/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5509/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1749109755",
    "html_url": "https://github.com/foundry-rs/foundry/issues/5509#issuecomment-1749109755",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5509",
    "id": 1749109755,
    "node_id": "IC_kwDOGBlvNc5oQUv7",
    "user": {
      "login": "Tudmotu",
      "id": 506487,
      "node_id": "MDQ6VXNlcjUwNjQ4Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/506487?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Tudmotu",
      "html_url": "https://github.com/Tudmotu",
      "followers_url": "https://api.github.com/users/Tudmotu/followers",
      "following_url": "https://api.github.com/users/Tudmotu/following{/other_user}",
      "gists_url": "https://api.github.com/users/Tudmotu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Tudmotu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Tudmotu/subscriptions",
      "organizations_url": "https://api.github.com/users/Tudmotu/orgs",
      "repos_url": "https://api.github.com/users/Tudmotu/repos",
      "events_url": "https://api.github.com/users/Tudmotu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Tudmotu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-10-05T15:14:20Z",
    "updated_at": "2023-10-05T15:14:20Z",
    "author_association": "CONTRIBUTOR",
    "body": "I would also like this feature.\r\n\r\nPersonally I would find this useful also for things like choosing the chain (by passing it to `vm.createSelectFork`). I would also like to propose a `vm.promptPassword` which would present an invisible input for the user.\r\n\r\n@mattsse WDYT about this feature request?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1749109755/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1749179703",
    "html_url": "https://github.com/foundry-rs/foundry/issues/5509#issuecomment-1749179703",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5509",
    "id": 1749179703,
    "node_id": "IC_kwDOGBlvNc5oQl03",
    "user": {
      "login": "mattsse",
      "id": 19890894,
      "node_id": "MDQ6VXNlcjE5ODkwODk0",
      "avatar_url": "https://avatars.githubusercontent.com/u/19890894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mattsse",
      "html_url": "https://github.com/mattsse",
      "followers_url": "https://api.github.com/users/mattsse/followers",
      "following_url": "https://api.github.com/users/mattsse/following{/other_user}",
      "gists_url": "https://api.github.com/users/mattsse/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mattsse/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mattsse/subscriptions",
      "organizations_url": "https://api.github.com/users/mattsse/orgs",
      "repos_url": "https://api.github.com/users/mattsse/repos",
      "events_url": "https://api.github.com/users/mattsse/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mattsse/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-10-05T15:52:16Z",
    "updated_at": "2023-10-05T15:52:16Z",
    "author_association": "MEMBER",
    "body": "I think useful, however, this could lead to issues in CI.\r\n\r\nso this definitely should use some timeout so it doesn't hang indefinitely\r\n\r\nbut I think this is nice to have, any concerns @mds1 ?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1749179703/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1749614995",
    "html_url": "https://github.com/foundry-rs/foundry/issues/5509#issuecomment-1749614995",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5509",
    "id": 1749614995,
    "node_id": "IC_kwDOGBlvNc5oSQGT",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-10-05T20:44:18Z",
    "updated_at": "2023-10-05T20:44:18Z",
    "author_association": "COLLABORATOR",
    "body": "Partly related to https://github.com/foundry-rs/foundry/issues/2399#issuecomment-1212485018 and https://github.com/foundry-rs/foundry/issues/2900 in that we currently have no script-only cheatcodes. Currently all cheatcodes can be used in both script and test environments.\r\n\r\nI am supportive of this idea though, and you can more broadly imagine `forge script` interactively prompting you to choose a method and provide inputs if not provided from the CLI invocation\r\n\r\nWe should have `vm.prompt*` cheats for all standard types as singular values and arrays, so bool, uint, int, address, bytes32, string, bytes. The input to the cheat should be a string telling the user what to enter, for example:\r\n- `vm.promptUint(string calldata)` invoked as `vm.promptUint(\"enter your favorite number\")`\r\n- `vm.promptUintArray(string calldata)` invoked as `vm.promptUintArray(\"enter your favorite number\")`\r\n\r\nLet me know if that spec sounds right to everyone",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1749614995/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1749635192",
    "html_url": "https://github.com/foundry-rs/foundry/issues/5509#issuecomment-1749635192",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5509",
    "id": 1749635192,
    "node_id": "IC_kwDOGBlvNc5oSVB4",
    "user": {
      "login": "klkvr",
      "id": 62447812,
      "node_id": "MDQ6VXNlcjYyNDQ3ODEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/62447812?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/klkvr",
      "html_url": "https://github.com/klkvr",
      "followers_url": "https://api.github.com/users/klkvr/followers",
      "following_url": "https://api.github.com/users/klkvr/following{/other_user}",
      "gists_url": "https://api.github.com/users/klkvr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/klkvr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/klkvr/subscriptions",
      "organizations_url": "https://api.github.com/users/klkvr/orgs",
      "repos_url": "https://api.github.com/users/klkvr/repos",
      "events_url": "https://api.github.com/users/klkvr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/klkvr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-10-05T21:00:39Z",
    "updated_at": "2023-10-05T21:00:58Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think it makes sense to keep the format same as it's done for `vm.env*` cheatcodes\r\n\r\nSuch spec would look like this:\r\n\r\n- `vm.promptUint(string calldata) returns (uint256)` invoked as `vm.promptUint(\"enter your favorite number\")`\r\n- `vm.promptUint(string calldata, string delim) returns (uint256[])` invoked as `vm.promptUint(\"enter your favorite numbers\", \",\")`\r\n\r\nAlso, should we consider `promt*` cheatcodes with default values?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1749635192/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1749662178",
    "html_url": "https://github.com/foundry-rs/foundry/issues/5509#issuecomment-1749662178",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5509",
    "id": 1749662178,
    "node_id": "IC_kwDOGBlvNc5oSbni",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-10-05T21:21:06Z",
    "updated_at": "2023-10-05T21:21:06Z",
    "author_association": "COLLABORATOR",
    "body": "How does the `delim` arg work for string arrays in the existing method? If I have a delimiter of `, ` and enter two strings as `ab, cd`, then are my two strings:\r\n- `ab` and `cd`, or\r\n- `ab` and ` cd`?\r\n\r\nMy thinking was just always use comma separated and trim whitespace for strings if there's no quotes, but matching the existing env cheats is reasonable to me also.\r\n\r\n> Also, should we consider `promt*` cheatcodes with default values?\r\n\r\nThis seems reasonable",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1749662178/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1749664548",
    "html_url": "https://github.com/foundry-rs/foundry/issues/5509#issuecomment-1749664548",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5509",
    "id": 1749664548,
    "node_id": "IC_kwDOGBlvNc5oScMk",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-10-05T21:23:04Z",
    "updated_at": "2023-10-05T21:23:04Z",
    "author_association": "COLLABORATOR",
    "body": "So the full spec then is:\r\n- `vm.promptUint(string calldata) returns (uint256)` invoked as `vm.promptUint(\"enter your favorite number\")`\r\n- `vm.promptUintOr(string calldata, uint defaultValue) returns (uint256)` invoked as `vm.promptUint(\"enter your favorite number\")`\r\n- `vm.promptUint(string calldata, string delim) returns (uint256[])` invoked as `vm.promptUint(\"enter your favorite numbers\", \",\")`\r\n- `vm.promptUintOr(string calldata, string delim, uint defaultValue) returns (uint256[])` invoked as `vm.promptUint(\"enter your favorite numbers\", \",\")`\r\n\r\nfor each of the aforementioned types?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1749664548/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1749670051",
    "html_url": "https://github.com/foundry-rs/foundry/issues/5509#issuecomment-1749670051",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5509",
    "id": 1749670051,
    "node_id": "IC_kwDOGBlvNc5oSdij",
    "user": {
      "login": "Tudmotu",
      "id": 506487,
      "node_id": "MDQ6VXNlcjUwNjQ4Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/506487?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Tudmotu",
      "html_url": "https://github.com/Tudmotu",
      "followers_url": "https://api.github.com/users/Tudmotu/followers",
      "following_url": "https://api.github.com/users/Tudmotu/following{/other_user}",
      "gists_url": "https://api.github.com/users/Tudmotu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Tudmotu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Tudmotu/subscriptions",
      "organizations_url": "https://api.github.com/users/Tudmotu/orgs",
      "repos_url": "https://api.github.com/users/Tudmotu/repos",
      "events_url": "https://api.github.com/users/Tudmotu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Tudmotu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-10-05T21:27:31Z",
    "updated_at": "2023-10-05T21:27:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "I was actually thinking we can go the simpler route and only allow strings, since we have a complete arsenal for parsing strings (`vm.parse*`, `vm.parseJson*`). I think the processing could be left to the author.\r\n\r\nSo basically expose two methods:\r\n```solidity\r\nfunction prompt(string memory prompt) returns (string memory input);\r\nfunction promptSecret(string memory prompt) returns (string memory input);\r\n```\r\n\r\nIf needed, we could parse arrays using `vm.jsonParse*Array`.\r\n\r\nWe could also start from supporting string-only, and if we see it's not enough we can add all the overloads.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1749670051/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1749686013",
    "html_url": "https://github.com/foundry-rs/foundry/issues/5509#issuecomment-1749686013",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5509",
    "id": 1749686013,
    "node_id": "IC_kwDOGBlvNc5oShb9",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-10-05T21:37:57Z",
    "updated_at": "2023-10-05T21:37:57Z",
    "author_association": "COLLABORATOR",
    "body": "Hmm interesting idea, ok I'm onboard with that newest proposal. It helps keep the API clean, and if it ends up cluttering code too much (having to manually parse the string with e.g. `vm.parseUint` (no json parsing cheats needed)) we can add more overloads",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1749686013/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1749691947",
    "html_url": "https://github.com/foundry-rs/foundry/issues/5509#issuecomment-1749691947",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5509",
    "id": 1749691947,
    "node_id": "IC_kwDOGBlvNc5oSi4r",
    "user": {
      "login": "klkvr",
      "id": 62447812,
      "node_id": "MDQ6VXNlcjYyNDQ3ODEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/62447812?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/klkvr",
      "html_url": "https://github.com/klkvr",
      "followers_url": "https://api.github.com/users/klkvr/followers",
      "following_url": "https://api.github.com/users/klkvr/following{/other_user}",
      "gists_url": "https://api.github.com/users/klkvr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/klkvr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/klkvr/subscriptions",
      "organizations_url": "https://api.github.com/users/klkvr/orgs",
      "repos_url": "https://api.github.com/users/klkvr/repos",
      "events_url": "https://api.github.com/users/klkvr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/klkvr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-10-05T21:42:18Z",
    "updated_at": "2023-10-05T21:43:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "If there will be need in more overloads this should be possible to be done with just some new forge-std library which will look like this (or maybe we can add it from the beginning)\r\n\r\n```solidity\r\nlibrary StdPrompts {\r\n     VmSafe private constant vm = VmSafe(address(uint160(uint256(keccak256(\"hevm cheat code\")))));\r\n\r\n     function promptUint(string memory prompt) internal pure returns (uint256) {\r\n        return vm.parseUint(vm.prompt(prompt));\r\n     }\r\n    ...\r\n}\r\n```\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1749691947/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1749699048",
    "html_url": "https://github.com/foundry-rs/foundry/issues/5509#issuecomment-1749699048",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5509",
    "id": 1749699048,
    "node_id": "IC_kwDOGBlvNc5oSkno",
    "user": {
      "login": "Tudmotu",
      "id": 506487,
      "node_id": "MDQ6VXNlcjUwNjQ4Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/506487?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Tudmotu",
      "html_url": "https://github.com/Tudmotu",
      "followers_url": "https://api.github.com/users/Tudmotu/followers",
      "following_url": "https://api.github.com/users/Tudmotu/following{/other_user}",
      "gists_url": "https://api.github.com/users/Tudmotu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Tudmotu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Tudmotu/subscriptions",
      "organizations_url": "https://api.github.com/users/Tudmotu/orgs",
      "repos_url": "https://api.github.com/users/Tudmotu/repos",
      "events_url": "https://api.github.com/users/Tudmotu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Tudmotu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-10-05T21:47:36Z",
    "updated_at": "2023-10-05T21:47:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "> If there will be need in more overloads this should be possible to be done with just some new forge-std library which will look like this (or maybe we can add it from the beginning)\r\n> \r\n> ```solidity\r\n> library StdPrompts {\r\n>      VmSafe private constant vm = VmSafe(address(uint160(uint256(keccak256(\"hevm cheat code\")))));\r\n> \r\n>      function promptUint(string memory prompt) internal pure returns (uint256) {\r\n>         return vm.parseUint(vm.prompt(prompt));\r\n>      }\r\n>     ...\r\n> }\r\n> ```\r\n\r\nI like this idea a lot.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1749699048/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1749699333",
    "html_url": "https://github.com/foundry-rs/foundry/issues/5509#issuecomment-1749699333",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5509",
    "id": 1749699333,
    "node_id": "IC_kwDOGBlvNc5oSksF",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-10-05T21:47:51Z",
    "updated_at": "2023-10-05T21:48:02Z",
    "author_association": "COLLABORATOR",
    "body": "Instead of adding things like that to forge-std, we should just make them native cheats :) see https://github.com/foundry-rs/foundry/issues/3782",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1749699333/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1749701505",
    "html_url": "https://github.com/foundry-rs/foundry/issues/5509#issuecomment-1749701505",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5509",
    "id": 1749701505,
    "node_id": "IC_kwDOGBlvNc5oSlOB",
    "user": {
      "login": "Tudmotu",
      "id": 506487,
      "node_id": "MDQ6VXNlcjUwNjQ4Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/506487?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Tudmotu",
      "html_url": "https://github.com/Tudmotu",
      "followers_url": "https://api.github.com/users/Tudmotu/followers",
      "following_url": "https://api.github.com/users/Tudmotu/following{/other_user}",
      "gists_url": "https://api.github.com/users/Tudmotu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Tudmotu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Tudmotu/subscriptions",
      "organizations_url": "https://api.github.com/users/Tudmotu/orgs",
      "repos_url": "https://api.github.com/users/Tudmotu/repos",
      "events_url": "https://api.github.com/users/Tudmotu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Tudmotu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-10-05T21:50:13Z",
    "updated_at": "2023-10-05T21:50:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "Oh interesting, I didn't consider compilation time :sweat_smile: ",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1749701505/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1749710642",
    "html_url": "https://github.com/foundry-rs/foundry/issues/5509#issuecomment-1749710642",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5509",
    "id": 1749710642,
    "node_id": "IC_kwDOGBlvNc5oSncy",
    "user": {
      "login": "klkvr",
      "id": 62447812,
      "node_id": "MDQ6VXNlcjYyNDQ3ODEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/62447812?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/klkvr",
      "html_url": "https://github.com/klkvr",
      "followers_url": "https://api.github.com/users/klkvr/followers",
      "following_url": "https://api.github.com/users/klkvr/following{/other_user}",
      "gists_url": "https://api.github.com/users/klkvr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/klkvr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/klkvr/subscriptions",
      "organizations_url": "https://api.github.com/users/klkvr/orgs",
      "repos_url": "https://api.github.com/users/klkvr/repos",
      "events_url": "https://api.github.com/users/klkvr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/klkvr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-10-05T21:58:46Z",
    "updated_at": "2023-10-05T21:58:46Z",
    "author_association": "CONTRIBUTOR",
    "body": "Yeah, #3782 seems reasonable\r\n\r\nAdding just `prompt` and `promptSecret` seems to be enough for now. I don't think that we will need any more overloads as wrapping `prompt`'s in `parse*` shouldn't clutter code too much",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1749710642/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1750120634",
    "html_url": "https://github.com/foundry-rs/foundry/issues/5509#issuecomment-1750120634",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5509",
    "id": 1750120634,
    "node_id": "IC_kwDOGBlvNc5oULi6",
    "user": {
      "login": "Tudmotu",
      "id": 506487,
      "node_id": "MDQ6VXNlcjUwNjQ4Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/506487?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Tudmotu",
      "html_url": "https://github.com/Tudmotu",
      "followers_url": "https://api.github.com/users/Tudmotu/followers",
      "following_url": "https://api.github.com/users/Tudmotu/following{/other_user}",
      "gists_url": "https://api.github.com/users/Tudmotu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Tudmotu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Tudmotu/subscriptions",
      "organizations_url": "https://api.github.com/users/Tudmotu/orgs",
      "repos_url": "https://api.github.com/users/Tudmotu/repos",
      "events_url": "https://api.github.com/users/Tudmotu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Tudmotu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-10-06T07:33:47Z",
    "updated_at": "2023-10-06T07:33:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "So if everyone is onboard, I will gladly implement this.\r\n\r\nI will say I decided last minute to participate in ETHOnline so I will probably start working on it after the hackathon (It ends Oct 22nd I believe).",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1750120634/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1774161195",
    "html_url": "https://github.com/foundry-rs/foundry/issues/5509#issuecomment-1774161195",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5509",
    "id": 1774161195,
    "node_id": "IC_kwDOGBlvNc5pv40r",
    "user": {
      "login": "Tudmotu",
      "id": 506487,
      "node_id": "MDQ6VXNlcjUwNjQ4Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/506487?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Tudmotu",
      "html_url": "https://github.com/Tudmotu",
      "followers_url": "https://api.github.com/users/Tudmotu/followers",
      "following_url": "https://api.github.com/users/Tudmotu/following{/other_user}",
      "gists_url": "https://api.github.com/users/Tudmotu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Tudmotu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Tudmotu/subscriptions",
      "organizations_url": "https://api.github.com/users/Tudmotu/orgs",
      "repos_url": "https://api.github.com/users/Tudmotu/repos",
      "events_url": "https://api.github.com/users/Tudmotu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Tudmotu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-10-22T18:10:20Z",
    "updated_at": "2023-10-22T18:10:20Z",
    "author_association": "CONTRIBUTOR",
    "body": "Ok I'm \"back\" from ETHOnline.\r\nThree questions:\r\n\r\n1. Going over the thread again I recalled @mattsse's  comment regarding CI hangups. If we implement a timeout, should we also implement a \"default value\", in case the timeout is reached (or user doesn't input anything)?\r\n```solidity\r\nfunction prompt(string memory prompt, string memory default) returns (string memory input);\r\nfunction promptSecret(string memory prompt, string memory default) returns (string memory input);\r\n```\r\n\r\n2. Where would be most appropriate to add this, `ext.rs`?\r\n\r\n3. I see Cast is using [`dialoguer`](https://docs.rs/dialoguer/latest/dialoguer/) crate for prompts, I will use the same, unless anyone has any objections?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1774161195/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
