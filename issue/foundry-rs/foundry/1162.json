{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/1162",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1162/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1162/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1162/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/1162",
  "id": 1189287896,
  "node_id": "I_kwDOGBlvNc5G4xfY",
  "number": 1162,
  "title": "feat: snapshot and revert cheatcodes",
  "user": {
    "login": "jparklev",
    "id": 24902242,
    "node_id": "MDQ6VXNlcjI0OTAyMjQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/24902242?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jparklev",
    "html_url": "https://github.com/jparklev",
    "followers_url": "https://api.github.com/users/jparklev/followers",
    "following_url": "https://api.github.com/users/jparklev/following{/other_user}",
    "gists_url": "https://api.github.com/users/jparklev/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jparklev/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jparklev/subscriptions",
    "organizations_url": "https://api.github.com/users/jparklev/orgs",
    "repos_url": "https://api.github.com/users/jparklev/repos",
    "events_url": "https://api.github.com/users/jparklev/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jparklev/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3593644820,
      "node_id": "LA_kwDOGBlvNc7WMqsU",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-feature",
      "name": "T-feature",
      "color": "BFD4F2",
      "default": false,
      "description": "Type: feature"
    },
    {
      "id": 3593644915,
      "node_id": "LA_kwDOGBlvNc7WMqtz",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/Cmd-forge-test",
      "name": "Cmd-forge-test",
      "color": "006B75",
      "default": false,
      "description": "Command: forge test"
    },
    {
      "id": 3703752787,
      "node_id": "LA_kwDOGBlvNc7cwshT",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/C-forge",
      "name": "C-forge",
      "color": "5319E7",
      "default": false,
      "description": "Command: forge"
    },
    {
      "id": 3703752960,
      "node_id": "LA_kwDOGBlvNc7cwskA",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/A-cheatcodes",
      "name": "A-cheatcodes",
      "color": "FBCA04",
      "default": false,
      "description": "Area: cheatcodes"
    },
    {
      "id": 3759719790,
      "node_id": "LA_kwDOGBlvNc7gGMVu",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/P-low",
      "name": "P-low",
      "color": "D93F0B",
      "default": false,
      "description": "Priority: low"
    },
    {
      "id": 3759720129,
      "node_id": "LA_kwDOGBlvNc7gGMbB",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/D-hard",
      "name": "D-hard",
      "color": "0E8A16",
      "default": false,
      "description": "Difficulty: hard"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": {
    "login": "mattsse",
    "id": 19890894,
    "node_id": "MDQ6VXNlcjE5ODkwODk0",
    "avatar_url": "https://avatars.githubusercontent.com/u/19890894?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mattsse",
    "html_url": "https://github.com/mattsse",
    "followers_url": "https://api.github.com/users/mattsse/followers",
    "following_url": "https://api.github.com/users/mattsse/following{/other_user}",
    "gists_url": "https://api.github.com/users/mattsse/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mattsse/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mattsse/subscriptions",
    "organizations_url": "https://api.github.com/users/mattsse/orgs",
    "repos_url": "https://api.github.com/users/mattsse/repos",
    "events_url": "https://api.github.com/users/mattsse/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mattsse/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "mattsse",
      "id": 19890894,
      "node_id": "MDQ6VXNlcjE5ODkwODk0",
      "avatar_url": "https://avatars.githubusercontent.com/u/19890894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mattsse",
      "html_url": "https://github.com/mattsse",
      "followers_url": "https://api.github.com/users/mattsse/followers",
      "following_url": "https://api.github.com/users/mattsse/following{/other_user}",
      "gists_url": "https://api.github.com/users/mattsse/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mattsse/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mattsse/subscriptions",
      "organizations_url": "https://api.github.com/users/mattsse/orgs",
      "repos_url": "https://api.github.com/users/mattsse/repos",
      "events_url": "https://api.github.com/users/mattsse/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mattsse/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/milestones/1",
    "html_url": "https://github.com/foundry-rs/foundry/milestone/1",
    "labels_url": "https://api.github.com/repos/foundry-rs/foundry/milestones/1/labels",
    "id": 8140456,
    "node_id": "MI_kwDOGBlvNc4AfDao",
    "number": 1,
    "title": "v1.0.0",
    "description": "",
    "creator": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 10,
    "closed_issues": 125,
    "state": "open",
    "created_at": "2022-06-28T08:15:32Z",
    "updated_at": "2023-05-12T14:44:03Z",
    "due_on": null,
    "closed_at": null
  },
  "comments": 16,
  "created_at": "2022-04-01T06:07:42Z",
  "updated_at": "2022-07-12T10:23:19Z",
  "closed_at": "2022-07-12T10:23:19Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "### Component\r\n\r\nForge\r\n\r\n### Describe the feature you would like\r\n\r\nCheatcodes that allow you to take a snapshot, then revert the executer's state back to the snapshot. One possible API is:\r\n```solidity\r\nbytes32 id = vm.snapshot();\r\n\r\n// do something\r\n\r\nvm.revertTo(id);\r\n```\r\nwhich would be similar to Ganache's `evm_snapshot`/`evm_revert`\r\n\r\nThe use case is to do some state changing operation(s), derive a value, then revert the changes (similar to using `callStatic` using ethers). It feels like the tricky part might be to revert state while preserving values assigned in the test contract before the reversion, but it's been a while since I looked through foundry's codebase ~\r\n\r\n@hexonaut I think you mentioned this in chat a while ago as well?\r\n\r\n### Additional context\r\n\r\nExample uses include:\r\n* AMM effective price \"pseudo swaps\" (determine the price from a swap before doing it)\r\n* Seeing how much interest would be collected w.o actually collecting it\r\n* Check the effects of a gov proposal on a mainnet fork w.o executing it\r\n\r\n\r\nI know some people have achieved the same effect by passing a value in as a revert message and catching it, a bit like uni's [quoter v2](https://github.com/Uniswap/v3-periphery/blob/main/contracts/lens/QuoterV2.sol) does, but this feature would enable a cleaner pattern",
  "closed_by": {
    "login": "mattsse",
    "id": 19890894,
    "node_id": "MDQ6VXNlcjE5ODkwODk0",
    "avatar_url": "https://avatars.githubusercontent.com/u/19890894?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mattsse",
    "html_url": "https://github.com/mattsse",
    "followers_url": "https://api.github.com/users/mattsse/followers",
    "following_url": "https://api.github.com/users/mattsse/following{/other_user}",
    "gists_url": "https://api.github.com/users/mattsse/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mattsse/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mattsse/subscriptions",
    "organizations_url": "https://api.github.com/users/mattsse/orgs",
    "repos_url": "https://api.github.com/users/mattsse/repos",
    "events_url": "https://api.github.com/users/mattsse/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mattsse/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/1162/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1162/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1085904420",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1162#issuecomment-1085904420",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1162",
    "id": 1085904420,
    "node_id": "IC_kwDOGBlvNc5AuZYk",
    "user": {
      "login": "hexonaut",
      "id": 588921,
      "node_id": "MDQ6VXNlcjU4ODkyMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/588921?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hexonaut",
      "html_url": "https://github.com/hexonaut",
      "followers_url": "https://api.github.com/users/hexonaut/followers",
      "following_url": "https://api.github.com/users/hexonaut/following{/other_user}",
      "gists_url": "https://api.github.com/users/hexonaut/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hexonaut/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hexonaut/subscriptions",
      "organizations_url": "https://api.github.com/users/hexonaut/orgs",
      "repos_url": "https://api.github.com/users/hexonaut/repos",
      "events_url": "https://api.github.com/users/hexonaut/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hexonaut/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-01T13:32:21Z",
    "updated_at": "2022-04-01T13:32:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "Yes I mentioned this. You can do this without cheatcodes via a revert though.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1085904420/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1086337803",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1162#issuecomment-1086337803",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1162",
    "id": 1086337803,
    "node_id": "IC_kwDOGBlvNc5AwDML",
    "user": {
      "login": "jparklev",
      "id": 24902242,
      "node_id": "MDQ6VXNlcjI0OTAyMjQy",
      "avatar_url": "https://avatars.githubusercontent.com/u/24902242?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jparklev",
      "html_url": "https://github.com/jparklev",
      "followers_url": "https://api.github.com/users/jparklev/followers",
      "following_url": "https://api.github.com/users/jparklev/following{/other_user}",
      "gists_url": "https://api.github.com/users/jparklev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jparklev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jparklev/subscriptions",
      "organizations_url": "https://api.github.com/users/jparklev/orgs",
      "repos_url": "https://api.github.com/users/jparklev/repos",
      "events_url": "https://api.github.com/users/jparklev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jparklev/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-01T21:24:55Z",
    "updated_at": "2022-04-01T21:24:55Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Yes I mentioned this. You can do this without cheatcodes via a revert though.\r\n\r\nYea, think it's not the best pattern, but certainly could be that it serves ppl's needs well enough for the moment. Out of curiosity, what's the use case you have?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1086337803/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1086352390",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1162#issuecomment-1086352390",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1162",
    "id": 1086352390,
    "node_id": "IC_kwDOGBlvNc5AwGwG",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-01T21:43:26Z",
    "updated_at": "2022-04-01T21:43:26Z",
    "author_association": "MEMBER",
    "body": "This is pretty hard to do, and if it's solveable without cheatcodes, I'm not sure it's a good idea for us to implement it given the complexity. It might be better to publish a package that has helpers for this instead. cc @gakonst on thoughts on this\r\n\r\nIn terms of your two first examples as well, is there any reason you would not expose information like that in a view function? And for the third, I'm not sure I completely understand - can you elaborate?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1086352390/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1086370081",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1162#issuecomment-1086370081",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1162",
    "id": 1086370081,
    "node_id": "IC_kwDOGBlvNc5AwLEh",
    "user": {
      "login": "jparklev",
      "id": 24902242,
      "node_id": "MDQ6VXNlcjI0OTAyMjQy",
      "avatar_url": "https://avatars.githubusercontent.com/u/24902242?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jparklev",
      "html_url": "https://github.com/jparklev",
      "followers_url": "https://api.github.com/users/jparklev/followers",
      "following_url": "https://api.github.com/users/jparklev/following{/other_user}",
      "gists_url": "https://api.github.com/users/jparklev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jparklev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jparklev/subscriptions",
      "organizations_url": "https://api.github.com/users/jparklev/orgs",
      "repos_url": "https://api.github.com/users/jparklev/repos",
      "events_url": "https://api.github.com/users/jparklev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jparklev/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-01T22:06:54Z",
    "updated_at": "2022-04-01T22:09:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "> This is pretty hard to do, and if it's solveable without cheatcodes, I'm not sure it's a good idea for us to implement it given the complexity. It might be better to publish a package that has helpers for this instead\r\n\r\nFair, tbh if we can solve it with a helper function then agreed that meets the need and feels better\r\n\r\n> In terms of your two first examples as well, is there any reason you would not expose information like that in a view function?\r\n\r\nYea, some projects choose not to add a second path for view-only. I know uni v3 requires you to do the revert to get the price ([zefram tweet](https://twitter.com/boredGenius/status/1503914415933952002)), whereas balancer has a parallel view path\r\n\r\n> And for the third, I'm not sure I completely understand - can you elaborate?\r\n\r\nyea, was thinking: fork mainnet -> execute maker gov proposal e.g. (which changes parameters) -> take some action (pay back dai debt) and read the resulting state -> revert back and use this value for some check. In fairness, this example is more contrived than the others and I haven't run into it personally\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1086370081/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1086644373",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1162#issuecomment-1086644373",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1162",
    "id": 1086644373,
    "node_id": "IC_kwDOGBlvNc5AxOCV",
    "user": {
      "login": "emilianobonassi",
      "id": 8052911,
      "node_id": "MDQ6VXNlcjgwNTI5MTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8052911?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/emilianobonassi",
      "html_url": "https://github.com/emilianobonassi",
      "followers_url": "https://api.github.com/users/emilianobonassi/followers",
      "following_url": "https://api.github.com/users/emilianobonassi/following{/other_user}",
      "gists_url": "https://api.github.com/users/emilianobonassi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/emilianobonassi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/emilianobonassi/subscriptions",
      "organizations_url": "https://api.github.com/users/emilianobonassi/orgs",
      "repos_url": "https://api.github.com/users/emilianobonassi/repos",
      "events_url": "https://api.github.com/users/emilianobonassi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/emilianobonassi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-02T13:42:57Z",
    "updated_at": "2022-04-02T13:42:57Z",
    "author_association": "NONE",
    "body": "+1 for this, missing too when migrated from brownie\r\n\r\nI am actually using the following workaround based on `try/catch` and external contracts (contexts)\r\n\r\nIt leverages an ancillary contract where you have to write (test) block statements where you revert\r\n\r\nFully solidity no cheat codes\r\n\r\n```solidity\r\npragma solidity ^0.8.0;\r\n\r\nimport {DSTest} from \"ds-test/test.sol\";\r\n\r\ncontract SimpleContext {\r\n    uint256 public number;\r\n\r\n    function setAndRevert(uint256 num) external {\r\n        number = num;\r\n        revert(\"ouch\");\r\n    }\r\n}\r\n\r\ncontract SharedSetup is DSTest {\r\n    SimpleContext context;\r\n\r\n    function setUp() public {\r\n        context = new SimpleContext();\r\n    }\r\n\r\n    function testSnapshot() external {\r\n        uint256 preNum = context.number();\r\n        uint256 num = 5;\r\n        try context.setAndRevert(num) {} catch {\r\n            assertEq(context.number(), preNum);\r\n        }\r\n    }\r\n}\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1086644373/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1086651785",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1162#issuecomment-1086651785",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1162",
    "id": 1086651785,
    "node_id": "IC_kwDOGBlvNc5AxP2J",
    "user": {
      "login": "hexonaut",
      "id": 588921,
      "node_id": "MDQ6VXNlcjU4ODkyMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/588921?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hexonaut",
      "html_url": "https://github.com/hexonaut",
      "followers_url": "https://api.github.com/users/hexonaut/followers",
      "following_url": "https://api.github.com/users/hexonaut/following{/other_user}",
      "gists_url": "https://api.github.com/users/hexonaut/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hexonaut/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hexonaut/subscriptions",
      "organizations_url": "https://api.github.com/users/hexonaut/orgs",
      "repos_url": "https://api.github.com/users/hexonaut/repos",
      "events_url": "https://api.github.com/users/hexonaut/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hexonaut/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-02T14:26:41Z",
    "updated_at": "2022-04-02T14:26:41Z",
    "author_association": "CONTRIBUTOR",
    "body": "Here is a use case: https://github.com/makerdao/dss-cron/blob/add-oracle-mom/src/ClipperMomJob.sol#L73\r\n\r\nBasically when you have to run something to see if it will succeed or not and you don't want it to actually execute in the tests. In the example above `workable` is expected to be called as a view by the keeper to see if this job is executable or not.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1086651785/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1086819554",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1162#issuecomment-1086819554",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1162",
    "id": 1086819554,
    "node_id": "IC_kwDOGBlvNc5Ax4zi",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-03T09:15:50Z",
    "updated_at": "2022-04-03T09:19:29Z",
    "author_association": "MEMBER",
    "body": "This is extremely hard. I'm not sure how we would revert mid-execution and then start a new execution from a specific point. No real way to do that in REVM right now, so we'd have to figure out a way to add that upstream as well. I'm leaning heavily towards keeping this as a community utility contract instead of adding the cheatcodes.\r\n\r\nWe'd need to:\r\n\r\n- Snapshot the memory\r\n- Snapshot the stack\r\n- Snapshot all addresses + storage\r\n- When reverting, check if we reverted because of this cheatcode, get the snapshot, start a new execution but set the state to what we saved + the program counter to after the revert\r\n\r\nWe have a way to snapshot the memory and the stack, no real way to snapshot all the addresses and storage, and no real way to resume execution at some program counter\r\n\r\nIt would add a lot of complexity both in REVM and Foundry, so again, really hesitant - I understand the use case, but since this can be solved using try/catch, I don't see a good reason to add it given the complexity.\r\n\r\nIt would also not work well with DSTest, which could lead to a lot of confusion. For example, if you make a DSTest assertion that fails, and then call `vm.revertTo(id)`, then that assertion is effectively ignored.\r\n\r\ncc @gakonst and @mattsse for thoughts on this",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1086819554/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1086824748",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1162#issuecomment-1086824748",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1162",
    "id": 1086824748,
    "node_id": "IC_kwDOGBlvNc5Ax6Es",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-03T09:46:06Z",
    "updated_at": "2022-04-03T09:46:06Z",
    "author_association": "MEMBER",
    "body": "Also cc @rakita if there is a non-complicated way to implement this with how REVM currently is - maybe you have some ideas :)",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1086824748/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1132212006",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1162#issuecomment-1132212006",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1162",
    "id": 1132212006,
    "node_id": "IC_kwDOGBlvNc5DfC8m",
    "user": {
      "login": "jameswenzel",
      "id": 6371847,
      "node_id": "MDQ6VXNlcjYzNzE4NDc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6371847?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jameswenzel",
      "html_url": "https://github.com/jameswenzel",
      "followers_url": "https://api.github.com/users/jameswenzel/followers",
      "following_url": "https://api.github.com/users/jameswenzel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jameswenzel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jameswenzel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jameswenzel/subscriptions",
      "organizations_url": "https://api.github.com/users/jameswenzel/orgs",
      "repos_url": "https://api.github.com/users/jameswenzel/repos",
      "events_url": "https://api.github.com/users/jameswenzel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jameswenzel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-19T21:11:35Z",
    "updated_at": "2022-05-19T21:11:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks for linking this existing issue @onbjerg.\r\nWould like to add that try/catch isn't currently suitable replacement when running differential tests, because assertions made within a try block that reverts don't count as failures.\r\n\r\n```\r\n// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.13;\r\nimport { Test } from \"forge-std/Test.sol\";\r\n\r\ninterface Impl {\r\n    function fn() external;\r\n}\r\n\r\ncontract ImplA is Impl {\r\n    function fn() external {\r\n        // do something\r\n    }\r\n}\r\n\r\ncontract ImplB is Impl {\r\n    function fn() external {\r\n        // do something similar\r\n    }\r\n}\r\n\r\ncontract DifferentialTest is Test {\r\n    bytes32 PASS_HASH =\r\n        0x092ff997991b7da0fc51f1dcc2bf12ccc1e998582e69bdc4232e5b6115713272;\r\n    Impl implA;\r\n    Impl implB;\r\n\r\n    function setUp() public {\r\n        implA = new ImplA();\r\n        implB = new ImplB();\r\n    }\r\n\r\n    function testDifferential() public {\r\n        try this.differentialLogic(implA) {} catch (bytes memory reason) {\r\n            assertEq(keccak256(reason), PASS_HASH);\r\n        }\r\n        try this.differentialLogic(implB) {} catch (bytes memory reason) {\r\n            assertEq(keccak256(reason), PASS_HASH);\r\n        }\r\n    }\r\n\r\n    function differentialLogic(Impl impl) public {\r\n        impl.fn();\r\n        assertTrue(false);\r\n        revert(\"PASS\");\r\n    }\r\n}\r\n```\r\n\r\n```\r\nRunning 1 test for test/foundry/DifferentialTest.sol:DifferentialTest\r\n[PASS] testDifferential() (gas: 35700)\r\nLogs:\r\n  Error: Assertion Failed\r\n  Error: Assertion Failed\r\n```\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1132212006/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1132219390",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1162#issuecomment-1132219390",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1162",
    "id": 1132219390,
    "node_id": "IC_kwDOGBlvNc5DfEv-",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-19T21:22:31Z",
    "updated_at": "2022-05-19T21:22:31Z",
    "author_association": "MEMBER",
    "body": "Are you sure? They should - does the reason actually match?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1132219390/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1132339207",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1162#issuecomment-1132339207",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1162",
    "id": 1132339207,
    "node_id": "IC_kwDOGBlvNc5DfiAH",
    "user": {
      "login": "jameswenzel",
      "id": 6371847,
      "node_id": "MDQ6VXNlcjYzNzE4NDc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6371847?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jameswenzel",
      "html_url": "https://github.com/jameswenzel",
      "followers_url": "https://api.github.com/users/jameswenzel/followers",
      "following_url": "https://api.github.com/users/jameswenzel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jameswenzel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jameswenzel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jameswenzel/subscriptions",
      "organizations_url": "https://api.github.com/users/jameswenzel/orgs",
      "repos_url": "https://api.github.com/users/jameswenzel/repos",
      "events_url": "https://api.github.com/users/jameswenzel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jameswenzel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-20T00:58:04Z",
    "updated_at": "2022-05-20T01:43:46Z",
    "author_association": "CONTRIBUTOR",
    "body": "```\r\n[PASS] testDifferential() (gas: 35700)\r\nLogs:\r\n  Error: Assertion Failed\r\n  Error: Assertion Failed\r\n\r\nTraces:\r\n  [35700] DifferentialTest::testDifferential() \r\n    ├─ [13937] DifferentialTest::differentialLogic(ImplA: [0xce71065d4017f316ec606fe4422e11eb2c47c246]) \r\n    │   ├─ [98] ImplA::fn() \r\n    │   │   └─ ← ()\r\n    │   ├─ emit log(: \"Error: Assertion Failed\")\r\n    │   ├─ [0] VM::store(VM: [0x7109709ecfa91a80626ff3989d68f67f5b1dd12d], 0x6661696c65640000000000000000000000000000000000000000000000000000, 0x0000000000000000000000000000000000000000000000000000000000000001) \r\n    │   │   └─ ← ()\r\n    │   └─ ← \"PASS\"\r\n    ├─ [13937] DifferentialTest::differentialLogic(ImplB: [0x185a4dc360ce69bdccee33b3784b0282f7961aea]) \r\n    │   ├─ [98] ImplB::fn() \r\n    │   │   └─ ← ()\r\n    │   ├─ emit log(: \"Error: Assertion Failed\")\r\n    │   ├─ [0] VM::store(VM: [0x7109709ecfa91a80626ff3989d68f67f5b1dd12d], 0x6661696c65640000000000000000000000000000000000000000000000000000, 0x0000000000000000000000000000000000000000000000000000000000000001) \r\n    │   │   └─ ← ()\r\n    │   └─ ← \"PASS\"\r\n    └─ ← ()\r\n\r\nTest result: ok. 1 passed; 0 failed; finished in 971.38µs\r\n```\r\n@onbjerg Yes, test passes fine even though the assertions in `differentialLogic` are logged as failing. Think this is a bug?\r\n\r\nEdit: Looks like this is because the failure is getting stored to the HEVM address, which will also be reverted. Can probably revert with the value at that slot instead and check if it's true.\r\n\r\nEdit 2: Reverting with HEVM storage slot and checking that the value isn't true seems to work nicely, actually!",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1132339207/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1132696585",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1162#issuecomment-1132696585",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1162",
    "id": 1132696585,
    "node_id": "IC_kwDOGBlvNc5Dg5QJ",
    "user": {
      "login": "rakita",
      "id": 13179220,
      "node_id": "MDQ6VXNlcjEzMTc5MjIw",
      "avatar_url": "https://avatars.githubusercontent.com/u/13179220?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rakita",
      "html_url": "https://github.com/rakita",
      "followers_url": "https://api.github.com/users/rakita/followers",
      "following_url": "https://api.github.com/users/rakita/following{/other_user}",
      "gists_url": "https://api.github.com/users/rakita/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rakita/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rakita/subscriptions",
      "organizations_url": "https://api.github.com/users/rakita/orgs",
      "repos_url": "https://api.github.com/users/rakita/repos",
      "events_url": "https://api.github.com/users/rakita/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rakita/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-20T09:41:54Z",
    "updated_at": "2022-05-20T09:43:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "> This is extremely hard. I'm not sure how we would revert mid-execution and then start a new execution from a specific point. No real way to do that in REVM right now, so we'd have to figure out a way to add that upstream as well. I'm leaning heavily towards keeping this as a community utility contract instead of adding the cheatcodes.\r\n> \r\n> We'd need to:\r\n> \r\n> * Snapshot the memory\r\n> * Snapshot the stack\r\n> * Snapshot all addresses + storage\r\n> * When reverting, check if we reverted because of this cheatcode, get the snapshot, start a new execution but set the state to what we saved + the program counter to after the revert\r\n> \r\n> We have a way to snapshot the memory and the stack, no real way to snapshot all the addresses and storage, and no real way to resume execution at some program counter\r\n> \r\n> It would add a lot of complexity both in REVM and Foundry, so again, really hesitant - I understand the use case, but since this can be solved using try/catch, I don't see a good reason to add it given the complexity.\r\n> \r\n> It would also not work well with DSTest, which could lead to a lot of confusion. For example, if you make a DSTest assertion that fails, and then call `vm.revertTo(id)`, then that assertion is effectively ignored.\r\n> \r\n> cc @gakonst and @mattsse for thoughts on this\r\n\r\nJust saw this. :)\r\n\r\nI see, this seems tricky to do and covers all edge cases, for account+storage you could 'just' clone SubRoutine that is where storage changes are, but you will need to be aware of where snapshot is called, it is hard to jump from one contract subroutine to another, selfdestruct is one more thing you need to be aware.\r\n\r\nMaybe we can do it in another way to leverage EVM revert mechanism,  do something as breakpoint system:\r\n* Set \"breakpoint\" on `vm.snapshot();` and on `vm.revertTo(id)`\r\n* with `vm.revertTo(id)` trigger the revert of a call and do some magic to catch that revert and recall the contract again. Basically in `step_end` check if returned from call/create or not, decrease program counter to one item before so that it is executed again, but you will need to push input arguments again on stack :D\r\n* Reexecute all contracts until breakpoint on `vm.snapshot()` and then jump to the breaking point of `revertTo` by setting PC to it.\r\n* It needs to be available only in same contract call\r\n* Yeah, this is getting complicated :D \r\n  \r\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1132696585/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1134147607",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1162#issuecomment-1134147607",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1162",
    "id": 1134147607,
    "node_id": "IC_kwDOGBlvNc5DmbgX",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-23T03:59:51Z",
    "updated_at": "2022-05-23T03:59:51Z",
    "author_association": "MEMBER",
    "body": "@jameswenzel I think you want `catch Error(string memory reason)`, going by the Solidity docs?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1134147607/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1149160525",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1162#issuecomment-1149160525",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1162",
    "id": 1149160525,
    "node_id": "IC_kwDOGBlvNc5EfsxN",
    "user": {
      "login": "tynes",
      "id": 6626818,
      "node_id": "MDQ6VXNlcjY2MjY4MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6626818?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tynes",
      "html_url": "https://github.com/tynes",
      "followers_url": "https://api.github.com/users/tynes/followers",
      "following_url": "https://api.github.com/users/tynes/following{/other_user}",
      "gists_url": "https://api.github.com/users/tynes/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tynes/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tynes/subscriptions",
      "organizations_url": "https://api.github.com/users/tynes/orgs",
      "repos_url": "https://api.github.com/users/tynes/repos",
      "events_url": "https://api.github.com/users/tynes/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tynes/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-07T20:58:06Z",
    "updated_at": "2022-06-07T20:58:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "It would be amazing to be able to access the state diff since the last snapshot. The UX that I'm thinking of:\r\n- spin up an anvil fork\r\n- take a snapshot\r\n- deploy upgrades\r\n- access state diff\r\n\r\nThen the state diff could be looked at line by line to ensure that the upgrade is exactly what is desired",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1149160525/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1149775103",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1162#issuecomment-1149775103",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1162",
    "id": 1149775103,
    "node_id": "IC_kwDOGBlvNc5EiCz_",
    "user": {
      "login": "gakonst",
      "id": 17802178,
      "node_id": "MDQ6VXNlcjE3ODAyMTc4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17802178?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gakonst",
      "html_url": "https://github.com/gakonst",
      "followers_url": "https://api.github.com/users/gakonst/followers",
      "following_url": "https://api.github.com/users/gakonst/following{/other_user}",
      "gists_url": "https://api.github.com/users/gakonst/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gakonst/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gakonst/subscriptions",
      "organizations_url": "https://api.github.com/users/gakonst/orgs",
      "repos_url": "https://api.github.com/users/gakonst/repos",
      "events_url": "https://api.github.com/users/gakonst/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gakonst/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-08T11:06:03Z",
    "updated_at": "2022-06-08T11:06:03Z",
    "author_association": "MEMBER",
    "body": "@tynes you can already do that with the `vm.record` & `vm.accesses` cheat codes https://twitter.com/devtooligan/status/1532763122259271681",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1149775103/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1151172565",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1162#issuecomment-1151172565",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1162",
    "id": 1151172565,
    "node_id": "IC_kwDOGBlvNc5EnX_V",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-09T14:11:43Z",
    "updated_at": "2022-06-09T14:11:43Z",
    "author_association": "MEMBER",
    "body": "As a note here the foundational work for this feature is being worked on by @mattsse in #1715 ",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1151172565/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
