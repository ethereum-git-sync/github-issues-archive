{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/4732",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4732/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4732/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4732/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/4732",
  "id": 1666476387,
  "node_id": "I_kwDOGBlvNc5jVGlj",
  "number": 4732,
  "title": "feat: cheatcode to get recent deployments by contract name",
  "user": {
    "login": "mds1",
    "id": 17163988,
    "node_id": "MDQ6VXNlcjE3MTYzOTg4",
    "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mds1",
    "html_url": "https://github.com/mds1",
    "followers_url": "https://api.github.com/users/mds1/followers",
    "following_url": "https://api.github.com/users/mds1/following{/other_user}",
    "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
    "organizations_url": "https://api.github.com/users/mds1/orgs",
    "repos_url": "https://api.github.com/users/mds1/repos",
    "events_url": "https://api.github.com/users/mds1/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mds1/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3593644820,
      "node_id": "LA_kwDOGBlvNc7WMqsU",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-feature",
      "name": "T-feature",
      "color": "BFD4F2",
      "default": false,
      "description": "Type: feature"
    },
    {
      "id": 3703752960,
      "node_id": "LA_kwDOGBlvNc7cwskA",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/A-cheatcodes",
      "name": "A-cheatcodes",
      "color": "FBCA04",
      "default": false,
      "description": "Area: cheatcodes"
    },
    {
      "id": 4182991461,
      "node_id": "LA_kwDOGBlvNc75U2Jl",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/Cmd-forge-script",
      "name": "Cmd-forge-script",
      "color": "006B75",
      "default": false,
      "description": "Command: forge script"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 5,
  "created_at": "2023-04-13T13:56:53Z",
  "updated_at": "2023-05-12T19:16:01Z",
  "closed_at": null,
  "author_association": "COLLABORATOR",
  "active_lock_reason": null,
  "body": "### Component\n\nForge\n\n### Describe the feature you would like\n\nAdd new methods that parse JSON files in the `broadcast` folder to find contract addresses.\r\n```solidity\r\n// Returns the most recent deployment for the given contract on `chainId`\r\nfunction getDeployment(string memory contractName, uint256 chainId) external returns (address);\r\n\r\n// Returns the deployment given by `index` for the given contract on `chainId`,\r\n// where index=0 is the first (oldest) deploy, index=1 is the second deploy,\r\n// and index=`type(uint256).max` is the most recent deploy\r\nfunction getDeployment(string memory contractName, uint256 chainId, uint256 index) external returns (address);\r\n\r\n// Returns all deployments for the given contract on `chainId`\r\nfunction getDeployments(string memory contractName, uint256 chainId) external returns (address[] memory);\r\n\r\n// Returns deployments by index for the given contract on `chainId`.\r\n// If the start index is `type(uint256).max`, the end index counts\r\n// backwards to return the most recent contracts. End index is exclusive,\r\n// similar to how most slice methods behave\r\nfunction getDeployments(string memory contractName, uint256 chainId, uint256 startIndex, uint256 endIndex) external returns (address[] memory);\r\n```\r\n\r\ncc @PatrickAlphaC @karmacoma-eth for thoughts on syntax/UX/cheat names/etc\n\n### Additional context\n\n_No response_",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/4732/reactions",
    "total_count": 3,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 3,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4732/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1507019643",
    "html_url": "https://github.com/foundry-rs/foundry/issues/4732#issuecomment-1507019643",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4732",
    "id": 1507019643,
    "node_id": "IC_kwDOGBlvNc5Z00t7",
    "user": {
      "login": "PatrickAlphaC",
      "id": 54278053,
      "node_id": "MDQ6VXNlcjU0Mjc4MDUz",
      "avatar_url": "https://avatars.githubusercontent.com/u/54278053?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PatrickAlphaC",
      "html_url": "https://github.com/PatrickAlphaC",
      "followers_url": "https://api.github.com/users/PatrickAlphaC/followers",
      "following_url": "https://api.github.com/users/PatrickAlphaC/following{/other_user}",
      "gists_url": "https://api.github.com/users/PatrickAlphaC/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PatrickAlphaC/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PatrickAlphaC/subscriptions",
      "organizations_url": "https://api.github.com/users/PatrickAlphaC/orgs",
      "repos_url": "https://api.github.com/users/PatrickAlphaC/repos",
      "events_url": "https://api.github.com/users/PatrickAlphaC/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PatrickAlphaC/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-04-13T14:00:00Z",
    "updated_at": "2023-04-13T14:00:00Z",
    "author_association": "NONE",
    "body": "Would be cool to also add something like `hardhat-deploy` where I can run:\r\n\r\n```\r\nanvil --deploy\r\n```\r\n\r\nand it runs through a deploy script when you start up anvil. Much easier than having to roll your own `makefile` for UI stuff\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1507019643/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1507042763",
    "html_url": "https://github.com/foundry-rs/foundry/issues/4732#issuecomment-1507042763",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4732",
    "id": 1507042763,
    "node_id": "IC_kwDOGBlvNc5Z06XL",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-04-13T14:11:29Z",
    "updated_at": "2023-04-13T14:11:29Z",
    "author_association": "COLLABORATOR",
    "body": "I'm not sure if we have an issue for this, but a related idea I've had was: when running a forge script, if the RPC URL is localhost, instead of treating cheatcode calls like normal (i.e. they won't work, since they're forge vm specific) automatically change them to be the special RPC calls to the anvil node",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1507042763/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1544511834",
    "html_url": "https://github.com/foundry-rs/foundry/issues/4732#issuecomment-1544511834",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4732",
    "id": 1544511834,
    "node_id": "IC_kwDOGBlvNc5cD2Fa",
    "user": {
      "login": "devanoneth",
      "id": 89424366,
      "node_id": "MDQ6VXNlcjg5NDI0MzY2",
      "avatar_url": "https://avatars.githubusercontent.com/u/89424366?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/devanoneth",
      "html_url": "https://github.com/devanoneth",
      "followers_url": "https://api.github.com/users/devanoneth/followers",
      "following_url": "https://api.github.com/users/devanoneth/following{/other_user}",
      "gists_url": "https://api.github.com/users/devanoneth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/devanoneth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/devanoneth/subscriptions",
      "organizations_url": "https://api.github.com/users/devanoneth/orgs",
      "repos_url": "https://api.github.com/users/devanoneth/repos",
      "events_url": "https://api.github.com/users/devanoneth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/devanoneth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-11T18:49:19Z",
    "updated_at": "2023-05-11T18:51:46Z",
    "author_association": "CONTRIBUTOR",
    "body": "As mentioned in this twitter thread: https://twitter.com/jj_ranalli/status/1656384664020434949\r\n\r\nIt would be nice to be able to pull in known deployments, as contract instances, from dependencies so we can easily interact with them in scripts.\r\n\r\nFor example, assuming we have run `forge install someproject/somecoin`, we can then easily access the deployed \"somecoin\" on chain 1 with scripts in our own project as follows:\r\n\r\n```solidity\r\nimport \"forge-std/Script.sol\";\r\nimport {Deployments} from \"somecoin/deployed/1/Deployments.sol\";\r\n\r\ncontract MyScript is Script {\r\n    function run() public {\r\n        vm.startBroadcast(me);\r\n\r\n        Deployments.somecoin.transfer(to, 1 ether);\r\n\r\n        vm.stopBroadcast();\r\n    }\r\n}\r\n```\r\n\r\nor maybe this is better?\r\n\r\n```solidity\r\nimport \"forge-std/Script.sol\";\r\nimport {Deployments} from \"somecoin/deployed/1/Deployments.sol\";\r\n\r\ncontract MyScript is Script, Deployments {\r\n    function run() public {\r\n        vm.startBroadcast(me);\r\n\r\n        somecoin.transfer(to, 1 ether);\r\n\r\n        vm.stopBroadcast();\r\n    }\r\n}\r\n```\r\n\r\nMy proposal would be that we add a new command e.g. `forge bind-sol` (and then maybe rename `forge bind` to `forge bind-rs`) or maybe a flag on `forge script`? Or a better name altogether? :D \r\n\r\nRegardless, this command would create a file such as `src/deployed/<chainId>/Deployments.sol` based on the most recent broadcast run, exposing contract instances ready to be invoked by scripts.\r\n\r\nHappy to hear thoughts on this as an alternative to this design, or as a separate feature completely (because I also like the general idea here from @mds1).",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1544511834/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1546042525",
    "html_url": "https://github.com/foundry-rs/foundry/issues/4732#issuecomment-1546042525",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4732",
    "id": 1546042525,
    "node_id": "IC_kwDOGBlvNc5cJryd",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-12T17:08:23Z",
    "updated_at": "2023-05-12T17:08:23Z",
    "author_association": "COLLABORATOR",
    "body": "That's also a nice UX, I. like the idea. It does feel like being able to pull in deployments/ABIs from dependencies like that is very related to package management ideas that @fubuloubu and @brockelmore have discussed (which I'm not too familiar with, so I have no summary or other info to share)",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1546042525/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1546170758",
    "html_url": "https://github.com/foundry-rs/foundry/issues/4732#issuecomment-1546170758",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4732",
    "id": 1546170758,
    "node_id": "IC_kwDOGBlvNc5cKLGG",
    "user": {
      "login": "jjranalli",
      "id": 39241410,
      "node_id": "MDQ6VXNlcjM5MjQxNDEw",
      "avatar_url": "https://avatars.githubusercontent.com/u/39241410?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jjranalli",
      "html_url": "https://github.com/jjranalli",
      "followers_url": "https://api.github.com/users/jjranalli/followers",
      "following_url": "https://api.github.com/users/jjranalli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jjranalli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jjranalli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jjranalli/subscriptions",
      "organizations_url": "https://api.github.com/users/jjranalli/orgs",
      "repos_url": "https://api.github.com/users/jjranalli/repos",
      "events_url": "https://api.github.com/users/jjranalli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jjranalli/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-12T19:14:51Z",
    "updated_at": "2023-05-12T19:16:01Z",
    "author_association": "NONE",
    "body": "Chiming in here to add some thoughts on @devanoneth suggestion, originally shared in the twitter post.\r\n\r\nI think it would be desirable to have deployments auto-generation:\r\n- opt-in (for example with a `forge script` flag as suggested)\r\n- configurable on a folder/contract basis (to pick which contracts to store deployments for)\r\n- so that scripts and tests can easily import them based on chain\r\n  - ideally even allow leaving a script unchanged regardless of chain used, by picking correct deployments based on `--chain-id` and reverting if they don't exist. \r\n\r\nI also like @mds1 proposed feature btw. Would be nice to have both, as they can be useful in different circumstances.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1546170758/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
