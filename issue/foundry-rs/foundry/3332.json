{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/3332",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3332/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3332/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3332/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/3332",
  "id": 1384425597,
  "node_id": "I_kwDOGBlvNc5ShKh9",
  "number": 3332,
  "title": "feat: `cast storage` modifications to print all state for an address",
  "user": {
    "login": "mds1",
    "id": 17163988,
    "node_id": "MDQ6VXNlcjE3MTYzOTg4",
    "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mds1",
    "html_url": "https://github.com/mds1",
    "followers_url": "https://api.github.com/users/mds1/followers",
    "following_url": "https://api.github.com/users/mds1/following{/other_user}",
    "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
    "organizations_url": "https://api.github.com/users/mds1/orgs",
    "repos_url": "https://api.github.com/users/mds1/repos",
    "events_url": "https://api.github.com/users/mds1/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mds1/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3593644820,
      "node_id": "LA_kwDOGBlvNc7WMqsU",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-feature",
      "name": "T-feature",
      "color": "BFD4F2",
      "default": false,
      "description": "Type: feature"
    },
    {
      "id": 3703752609,
      "node_id": "LA_kwDOGBlvNc7cwseh",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/C-cast",
      "name": "C-cast",
      "color": "5319E7",
      "default": false,
      "description": "Command: cast"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 0,
  "created_at": "2022-09-23T23:06:18Z",
  "updated_at": "2022-12-18T16:11:22Z",
  "closed_at": "2022-12-18T16:11:22Z",
  "author_association": "COLLABORATOR",
  "active_lock_reason": null,
  "body": "### Component\n\nCast\n\n### Describe the feature you would like\n\nMoving the discussion from https://github.com/foundry-rs/foundry/pull/2494 here\r\n\r\n> Right now `cast storage <address> <slot>` prints the the specified slot. Expanding on @onbjerg's suggestion, I'd propose `cast storage <address>` (i.e. when no slot is specified) to behave as follows:\r\n> \r\n> 1. Fetch the bytecode of the provided address.\r\n> 2. If we're in a foundry project, check artifacts for matching bytecode + recompile if needed to get storage layout.\r\n> 3. Otherwise, fetch source from etherscan and compile it with the specified settings to get storage layout (this is also useful for debugging txs against a live network where we'd recompile to get source maps).\r\n> 4. Print variable names, slots, sizes, offsets, and decoded values in a table similar to the existing one that you get with `forge inspect MyContract storage-layout --pretty`.\r\n> \r\n> Note this PR does not properly handle dynamic types. It will print the length of an array for array types, and zero for mappings because it doesn't know the keys. I think that's ok for the first version, but I'd love for the next iteration to figure out array lengths and all mapping keys to print the all storage. @banteg has a POC for doing this here: https://github.com/banteg/storage-layout\r\n\r\n_Originally posted by @mds1 in https://github.com/foundry-rs/foundry/issues/2494#issuecomment-1198773042_\r\n\r\n> Definitely +1 for @mds1 `cast storage <address>` proposal, I think it would also be cool to have a `--blocknumber` param that lets you do historical queries so that you can write a script that can see how state changes in a contract over a range of blocks\r\n\r\n_Originally posted by @tynes in https://github.com/foundry-rs/foundry/issues/2494#issuecomment-1202966354_\r\n\r\n> Agreed, `--block <blockNumber/earliest/latest/pending>` is the syntax used elsewhere in cast which we should support here too\r\n\r\n_Originally posted by @mds1 in https://github.com/foundry-rs/foundry/issues/2494#issuecomment-1203479612_\r\n      \n\n### Additional context\n\n_No response_",
  "closed_by": {
    "login": "gakonst",
    "id": 17802178,
    "node_id": "MDQ6VXNlcjE3ODAyMTc4",
    "avatar_url": "https://avatars.githubusercontent.com/u/17802178?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/gakonst",
    "html_url": "https://github.com/gakonst",
    "followers_url": "https://api.github.com/users/gakonst/followers",
    "following_url": "https://api.github.com/users/gakonst/following{/other_user}",
    "gists_url": "https://api.github.com/users/gakonst/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/gakonst/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gakonst/subscriptions",
    "organizations_url": "https://api.github.com/users/gakonst/orgs",
    "repos_url": "https://api.github.com/users/gakonst/repos",
    "events_url": "https://api.github.com/users/gakonst/events{/privacy}",
    "received_events_url": "https://api.github.com/users/gakonst/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/3332/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3332/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[

]
