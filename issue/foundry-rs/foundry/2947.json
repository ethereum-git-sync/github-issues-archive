{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/2947",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2947/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2947/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2947/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/2947",
  "id": 1351611332,
  "node_id": "I_kwDOGBlvNc5Qj_PE",
  "number": 2947,
  "title": "Unknown Contract at address <address>\" inside the debugger",
  "user": {
    "login": "asharma13524",
    "id": 28710772,
    "node_id": "MDQ6VXNlcjI4NzEwNzcy",
    "avatar_url": "https://avatars.githubusercontent.com/u/28710772?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/asharma13524",
    "html_url": "https://github.com/asharma13524",
    "followers_url": "https://api.github.com/users/asharma13524/followers",
    "following_url": "https://api.github.com/users/asharma13524/following{/other_user}",
    "gists_url": "https://api.github.com/users/asharma13524/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/asharma13524/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/asharma13524/subscriptions",
    "organizations_url": "https://api.github.com/users/asharma13524/orgs",
    "repos_url": "https://api.github.com/users/asharma13524/repos",
    "events_url": "https://api.github.com/users/asharma13524/events{/privacy}",
    "received_events_url": "https://api.github.com/users/asharma13524/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3334394228,
      "node_id": "MDU6TGFiZWwzMzM0Mzk0MjI4",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-bug",
      "name": "T-bug",
      "color": "d73a4a",
      "default": false,
      "description": "Type: bug"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2022-08-26T01:17:28Z",
  "updated_at": "2022-08-26T16:47:31Z",
  "closed_at": "2022-08-26T05:14:33Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "### Component\r\n\r\nForge\r\n\r\n### Have you ensured that all of these are up to date?\r\n\r\n- [X] Foundry\r\n- [X] Foundryup\r\n\r\n### What version of Foundry are you on?\r\n\r\n0.2.0\r\n\r\n### What command(s) is the bug in?\r\n\r\nforge test --match-contract GmxBridge -vvv -f\r\n\r\n### Operating System\r\n\r\n_No response_\r\n\r\n### Describe the bug\r\n\r\nHere is my code:\r\n\r\nI am getting the following, similar to https://github.com/foundry-rs/foundry/issues/2348 when running \r\n```forge test --match-contract GmxBridge -vvv -f <rpc_url> --debug \"testExampleBridge\"```.\r\n\r\nI'm expecting to reach the Arbitrum Inbox on ETH Mainnet, is there anything I might be missing? \r\n\r\n<img width=\"1073\" alt=\"Screen Shot 2022-08-25 at 9 09 30 PM\" src=\"https://user-images.githubusercontent.com/28710772/186795182-5da3c5f1-fe93-454e-9ca7-146fee4e9716.png\">\r\n\r\nRelevant Contracts:\r\n\r\n```\r\n// SPDX-License-Identifier: GPL-2.0-only\r\n// Copyright 2022 Spilsbury Holdings Ltd\r\npragma solidity >=0.8.4;\r\n\r\nimport {RollupProcessor} from \"src/test/bridges/element/aztecmocks/RollupProcessor.sol\";\r\nimport {AztecTypes} from \"../../../aztec/libraries/AztecTypes.sol\";\r\nimport {Test} from \"forge-std/Test.sol\";\r\nimport {IArbitrumInbox} from \"src/interfaces/arbitrum/IInbox.sol\";\r\n\r\n// Example-specific imports\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport {GmxBridge} from \"../../../bridges/gmx/GmxBridge.sol\";\r\nimport {ErrorLib} from \"../../../bridges/base/ErrorLib.sol\";\r\nimport \"forge-std/console.sol\";\r\n\r\n\r\ncontract GmxBridgeUnitTest is Test {\r\n    IArbitrumInbox public constant ARBITRUM_INBOX = IArbitrumInbox(0x4c6f947Ae67F572afa4ae0730947DE7C874F95Ef);\r\n    IERC20 public constant DAI = IERC20(0x6B175474E89094C44Da98b954EedeAC495271d0F);\r\n    // USDC address for deposits\r\n    address public constant USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\r\n    address public constant GMX_ROUTER = 0xaBBc5F99639c9B6bCb58544ddf04EFA6802F4064;\r\n    address public constant ARBINBOX = 0x9685e7281Fb1507B6f141758d80B08752faF0c43;\r\n    address public constant ARBSYS = 0x0000000000000000000000000000000000000064;\r\n    address public constant ARBOUTBOX = 0x667e23ABd27E623c11d4CC00ca3EC4d0bD63337a;\r\n\r\n    AztecTypes.AztecAsset internal emptyAsset;\r\n\r\n    // DefiBridgeProxy internal defiBridgeProxy;\r\n    address private rollupProcessor;\r\n    GmxBridge private bridge;\r\n\r\n    function setUp() public {\r\n        rollupProcessor = address(this);\r\n\r\n        bridge = new GmxBridge(rollupProcessor, GMX_ROUTER, ARBINBOX, ARBSYS, ARBOUTBOX);\r\n        vm.label(address(bridge), \"GMX_BRIDGE\");\r\n        vm.deal(address(bridge), 0);\r\n\r\n        // rollupProcessor.setBridgeGasLimit(address(bridge), 100000);\r\n    }\r\n\r\n    function testExampleBridge() public {\r\n        uint256 depositAmount = 4 ether;\r\n        // Mint the depositAmount of Dai to rollupProcessor\r\n        AztecTypes.AztecAsset memory empty;\r\n        // TODO: Function reverting because not sending msg.value, do that now.\r\n        // will have to bound\r\n\r\n        AztecTypes.AztecAsset memory inputAssetA = AztecTypes.AztecAsset({\r\n            id: 1,\r\n            erc20Address: address(USDC),\r\n            assetType: AztecTypes.AztecAssetType.ERC20\r\n        });\r\n        AztecTypes.AztecAsset memory inputAssetB = AztecTypes.AztecAsset({\r\n            id: 1,\r\n            erc20Address: address(DAI),\r\n            assetType: AztecTypes.AztecAssetType.ERC20\r\n        });\r\n        AztecTypes.AztecAsset memory outputAsset = AztecTypes.AztecAsset({\r\n            id: 1,\r\n            erc20Address: address(DAI),\r\n            assetType: AztecTypes.AztecAssetType.ERC20\r\n        });\r\n\r\n        // Disabling linting errors here to show return variables\r\n        // solhint-disable-next-line\r\n        (uint256 outputValueA, uint256 outputValueB, bool isAsync) = bridge.convert{value: depositAmount}(\r\n            inputAssetA,\r\n            inputAssetB,\r\n            outputAsset,\r\n            empty,\r\n            depositAmount,\r\n            0,\r\n            0,\r\n            address(0)\r\n        );\r\n    }\r\n}\r\n```\r\n\r\n```\r\n// SPDX-License-Identifier: GPL-2.0-only\r\n// Copyright 2022 Spilsbury Holdings Ltd\r\npragma solidity >=0.8.4;\r\n\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport {IWETH} from \"../../interfaces/IWETH.sol\";\r\nimport {AztecTypes} from \"../../aztec/libraries/AztecTypes.sol\";\r\nimport {BridgeBase} from \"../base/BridgeBase.sol\";\r\nimport {IRollupProcessor} from \"../../aztec/interfaces/IRollupProcessor.sol\";\r\n\r\nimport {ErrorLib} from \"../base/ErrorLib.sol\";\r\n\r\nimport {IArbitrumInbox} from \"src/interfaces/arbitrum/IInbox.sol\";\r\nimport {IGmxRouter} from \"src/interfaces/gmx/IRouter.sol\";\r\nimport {IGmxVault} from \"src/interfaces/gmx/IVault.sol\";\r\n\r\nimport {IArbitrumOutbox} from \"src/interfaces/arbitrum/IOutbox.sol\";\r\nimport {ArbSys} from \"src/interfaces/arbitrum/IArbSys.sol\";\r\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"forge-std/console.sol\";\r\n\r\ncontract GmxBridge is BridgeBase {\r\n    using SafeERC20 for IERC20;\r\n\r\n    error InvalidCaller();\r\n    error AsyncModeDisabled();\r\n\r\n    // GMX Router address for opening/closing positions\r\n    IGmxRouter public constant GMX_ROUTER = IGmxRouter(0xaBBc5F99639c9B6bCb58544ddf04EFA6802F4064);\r\n\r\n    // Vault for additional functionality, contains whitelisted tokens\r\n    IGmxVault public constant GMX_VAULT = IGmxVault(0x489ee077994B6658eAfA855C308275EAd8097C4A);\r\n\r\n    // Arbitrum Inbox address for sending messages to Arbitrum L2\r\n    IArbitrumInbox public constant ARBITRUM_INBOX = IArbitrumInbox(0x4c6f947Ae67F572afa4ae0730947DE7C874F95Ef);\r\n\r\n    // Arbitrum Outbox Address for executing messages back on L1\r\n    IArbitrumOutbox public constant ARBITRUM_OUTBOX = IArbitrumOutbox(0x4c6f947Ae67F572afa4ae0730947DE7C874F95Ef);\r\n\r\n    // ArbSys Address for publishing messages on Arbitrum L2\r\n    ArbSys public constant ARBSYS = ArbSys(0x0000000000000000000000000000000000000064);\r\n\r\n    // USDC address for deposits\r\n    address public constant USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\r\n\r\n    constructor(\r\n        address _rollupProcessor,\r\n        address _gmxRouter,\r\n        address _inbox,\r\n        address _arbSys,\r\n        address _outbox\r\n    ) BridgeBase(_rollupProcessor) {}\r\n\r\n    receive() external payable {}\r\n\r\n    /**\r\n     * @notice Set all the necessary approvals for all the latests vaults for the tokens supported by Yearn\r\n     */\r\n    function preApproveAll() external {\r\n        uint256 numTokens = GMX_VAULT.whitelistedTokenCount();\r\n        for (uint256 i; i < numTokens; ) {\r\n            address token = GMX_VAULT.allWhitelistedTokens(i);\r\n            _preApprove(address(GMX_ROUTER), token);\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Perform all the necessary approvals for a given vault and its underlying.\r\n     * @param _token - address of the token to approve\r\n     */\r\n    function _preApprove(address _gmxRouter, address _token) private {\r\n        // Using safeApprove(...) instead of approve(...) here because underlying can be Tether;\r\n        uint256 allowance = IERC20(_token).allowance(address(this), _gmxRouter);\r\n        if (allowance != type(uint256).max) {\r\n            // Resetting allowance to 0 in order to avoid issues with USDT\r\n            IERC20(_token).safeApprove(_gmxRouter, 0);\r\n            IERC20(_token).safeApprove(_gmxRouter, type(uint256).max);\r\n        }\r\n\r\n        allowance = IERC20(_token).allowance(address(this), ROLLUP_PROCESSOR);\r\n        if (allowance != type(uint256).max) {\r\n            // Resetting allowance to 0 in order to avoid issues with USDT\r\n            IERC20(_token).safeApprove(ROLLUP_PROCESSOR, 0);\r\n            IERC20(_token).safeApprove(ROLLUP_PROCESSOR, type(uint256).max);\r\n        }\r\n\r\n        IERC20(_gmxRouter).approve(ROLLUP_PROCESSOR, type(uint256).max);\r\n    }\r\n\r\n\r\n    function convert(\r\n        AztecTypes.AztecAsset memory _inputAssetA,\r\n        AztecTypes.AztecAsset memory _inputAssetB,\r\n        AztecTypes.AztecAsset memory _outputAssetA,\r\n        AztecTypes.AztecAsset memory,\r\n        uint256 _inputValue,\r\n        uint256 _interactionNonce,\r\n        uint64 _auxData,\r\n        address\r\n    )\r\n        external\r\n        payable\r\n        override(BridgeBase)\r\n        onlyRollup\r\n        returns (\r\n            uint256 outputValueA,\r\n            uint256 outputValueB,\r\n            bool isAsync\r\n        )\r\n    {\r\n        // open position\r\n        if (_auxData == 0) {\r\n            // collateral provided in either USDC || ETH\r\n            if (_inputAssetA.erc20Address != address(USDC) && _inputAssetA.assetType != AztecTypes.AztecAssetType.ETH){\r\n                revert ErrorLib.InvalidInputA();\r\n            }\r\n\r\n            isAsync = true;\r\n            outputValueA = 0;\r\n            outputValueB = 0;\r\n\r\n            uint256 ticketId = sendTxnToL2(_inputAssetA.erc20Address, _inputAssetB.erc20Address, _inputValue, true, 2000, 20000, 5000);\r\n        }\r\n        return (outputValueA, outputValueB, isAsync);\r\n    }\r\n\r\n\r\n    function sendTxnToL2 (address _collateralAsset, address _indexAsset, uint256 _sizeDelta, bool _isLong, uint256 maxSubmissionCost, uint256 maxGas, uint256 gasPriceBid) public payable returns (uint256) {\r\n        bytes memory callData = abi.encodeWithSignature(\"pluginIncreasePosition((address, address, address, uint256, bool))\",\r\n            address(this),\r\n            _collateralAsset,\r\n            _indexAsset,\r\n            _sizeDelta,\r\n            _isLong);\r\n        uint256 ticketId = ARBITRUM_INBOX.createRetryableTicket{ value: msg.value }(address(GMX_ROUTER), 0, 1000, msg.sender, msg.sender, 20000, 10000, callData);\r\n        return ticketId;\r\n    }\r\n}\r\n\r\n```\r\n\r\nPlease let me know if I can provide any more detail here, thanks.",
  "closed_by": {
    "login": "onbjerg",
    "id": 8862627,
    "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/onbjerg",
    "html_url": "https://github.com/onbjerg",
    "followers_url": "https://api.github.com/users/onbjerg/followers",
    "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
    "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
    "organizations_url": "https://api.github.com/users/onbjerg/orgs",
    "repos_url": "https://api.github.com/users/onbjerg/repos",
    "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
    "received_events_url": "https://api.github.com/users/onbjerg/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/2947/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2947/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1228062134",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2947#issuecomment-1228062134",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2947",
    "id": 1228062134,
    "node_id": "IC_kwDOGBlvNc5JMr22",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-26T05:14:33Z",
    "updated_at": "2022-08-26T05:14:33Z",
    "author_association": "MEMBER",
    "body": "The debugger shows the address of the Arbitrum inbox on mainnet - we cannot show source code in the debugger from external contracts, only contracts you have in your project. ",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1228062134/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1228685703",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2947#issuecomment-1228685703",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2947",
    "id": 1228685703,
    "node_id": "IC_kwDOGBlvNc5JPEGH",
    "user": {
      "login": "asharma13524",
      "id": 28710772,
      "node_id": "MDQ6VXNlcjI4NzEwNzcy",
      "avatar_url": "https://avatars.githubusercontent.com/u/28710772?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/asharma13524",
      "html_url": "https://github.com/asharma13524",
      "followers_url": "https://api.github.com/users/asharma13524/followers",
      "following_url": "https://api.github.com/users/asharma13524/following{/other_user}",
      "gists_url": "https://api.github.com/users/asharma13524/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/asharma13524/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/asharma13524/subscriptions",
      "organizations_url": "https://api.github.com/users/asharma13524/orgs",
      "repos_url": "https://api.github.com/users/asharma13524/repos",
      "events_url": "https://api.github.com/users/asharma13524/events{/privacy}",
      "received_events_url": "https://api.github.com/users/asharma13524/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-26T16:15:55Z",
    "updated_at": "2022-08-26T16:23:16Z",
    "author_association": "NONE",
    "body": "@onbjerg right, I suppose I was confused on the messaging as I initially thought my call perhaps wasn't making it to Arbitrum. When running ```forge test --match-contract GmxBridge -vvv```, I am simply getting\r\n```\r\n[7367] 0x4c6f…95ef::createRetryableTicket{value: 4000000000000000000}(0xabbc5f99639c9b6bcb58544ddf04efa6802f4064, 0, 100000, GmxBridgeUnitTest: [0xb4c79dab8f259c7aee6e5b2aa729821864227e84], GmxBridgeUnitTest: [0xb4c79dab8f259c7aee6e5b2aa729821864227e84], 200000, 100000, 0x0674ef6d000000000000000000000000ce71065d4017f316ec606fe4422e11eb2c47c246000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000006b175474e89094c44da98b954eedeac495271d0f0000000000000000000000000000000000000000000000003782dace9d9000000000000000000000000000000000000000000000000000000000000000000001)\r\n    │   │   ├─ [45] 0x9685…0c43::createRetryableTicket(0xabbc5f99639c9b6bcb58544ddf04efa6802f4064, 0, 100000, GmxBridgeUnitTest: [0xb4c79dab8f259c7aee6e5b2aa729821864227e84], GmxBridgeUnitTest: [0xb4c79dab8f259c7aee6e5b2aa729821864227e84], 200000, 100000, 0x0674ef6d000000000000000000000000ce71065d4017f316ec606fe4422e11eb2c47c246000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000006b175474e89094c44da98b954eedeac495271d0f0000000000000000000000000000000000000000000000003782dace9d9000000000000000000000000000000000000000000000000000000000000000000001) [delegatecall]\r\n    │   │   │   └─ ← \"EvmError: Revert\"\r\n    │   │   └─ ← \"EvmError: Revert\"\r\n    │   └─ ← \"EvmError: Revert\"\r\n    └─ ← \"EvmError: Revert\"\r\n\r\nTest result: FAILED. 0 passed; 1 failed; finished in 3.52s\r\n\r\nFailing tests:\r\nEncountered 1 failing test in src/test/bridges/gmx/GmxBridgeUnit.t.sol:GmxBridgeUnitTest\r\n[FAIL. Reason: EvmError: Revert] testExampleBridge() (gas: 39420)\r\n```\r\n\r\nany thoughts on how I may be able to obtain some more helpful error messaging? Thanks again.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1228685703/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1228708687",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2947#issuecomment-1228708687",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2947",
    "id": 1228708687,
    "node_id": "IC_kwDOGBlvNc5JPJtP",
    "user": {
      "login": "joshieDo",
      "id": 93316087,
      "node_id": "U_kgDOBY_j9w",
      "avatar_url": "https://avatars.githubusercontent.com/u/93316087?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/joshieDo",
      "html_url": "https://github.com/joshieDo",
      "followers_url": "https://api.github.com/users/joshieDo/followers",
      "following_url": "https://api.github.com/users/joshieDo/following{/other_user}",
      "gists_url": "https://api.github.com/users/joshieDo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/joshieDo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/joshieDo/subscriptions",
      "organizations_url": "https://api.github.com/users/joshieDo/orgs",
      "repos_url": "https://api.github.com/users/joshieDo/repos",
      "events_url": "https://api.github.com/users/joshieDo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/joshieDo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-26T16:41:10Z",
    "updated_at": "2022-08-26T16:41:10Z",
    "author_association": "COLLABORATOR",
    "body": "I'm not too familiar with the contract suite, but a quick look on etherscan revealed that neither of those addresses have that method available ?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1228708687/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1228710660",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2947#issuecomment-1228710660",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2947",
    "id": 1228710660,
    "node_id": "IC_kwDOGBlvNc5JPKME",
    "user": {
      "login": "asharma13524",
      "id": 28710772,
      "node_id": "MDQ6VXNlcjI4NzEwNzcy",
      "avatar_url": "https://avatars.githubusercontent.com/u/28710772?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/asharma13524",
      "html_url": "https://github.com/asharma13524",
      "followers_url": "https://api.github.com/users/asharma13524/followers",
      "following_url": "https://api.github.com/users/asharma13524/following{/other_user}",
      "gists_url": "https://api.github.com/users/asharma13524/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/asharma13524/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/asharma13524/subscriptions",
      "organizations_url": "https://api.github.com/users/asharma13524/orgs",
      "repos_url": "https://api.github.com/users/asharma13524/repos",
      "events_url": "https://api.github.com/users/asharma13524/events{/privacy}",
      "received_events_url": "https://api.github.com/users/asharma13524/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-26T16:43:34Z",
    "updated_at": "2022-08-26T16:47:31Z",
    "author_association": "NONE",
    "body": "nevermind, resolved. Wasn't adequately providing gas costs to make it up to L2 looks like. Thanks. Perhaps would be helpful to have some better error messaging here if possible.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1228710660/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
