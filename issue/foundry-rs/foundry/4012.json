{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/4012",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4012/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4012/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4012/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/4012",
  "id": 1517335452,
  "node_id": "I_kwDOGBlvNc5acLOc",
  "number": 4012,
  "title": "More specific error messages for \"EvmError\"",
  "user": {
    "login": "PaulRBerg",
    "id": 8782666,
    "node_id": "MDQ6VXNlcjg3ODI2NjY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8782666?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/PaulRBerg",
    "html_url": "https://github.com/PaulRBerg",
    "followers_url": "https://api.github.com/users/PaulRBerg/followers",
    "following_url": "https://api.github.com/users/PaulRBerg/following{/other_user}",
    "gists_url": "https://api.github.com/users/PaulRBerg/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/PaulRBerg/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/PaulRBerg/subscriptions",
    "organizations_url": "https://api.github.com/users/PaulRBerg/orgs",
    "repos_url": "https://api.github.com/users/PaulRBerg/repos",
    "events_url": "https://api.github.com/users/PaulRBerg/events{/privacy}",
    "received_events_url": "https://api.github.com/users/PaulRBerg/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3394555740,
      "node_id": "LA_kwDOGBlvNc7KVM9c",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/A-evm",
      "name": "A-evm",
      "color": "FBCA04",
      "default": false,
      "description": "Area: EVM"
    },
    {
      "id": 3593644820,
      "node_id": "LA_kwDOGBlvNc7WMqsU",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-feature",
      "name": "T-feature",
      "color": "BFD4F2",
      "default": false,
      "description": "Type: feature"
    },
    {
      "id": 3703752787,
      "node_id": "LA_kwDOGBlvNc7cwshT",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/C-forge",
      "name": "C-forge",
      "color": "5319E7",
      "default": false,
      "description": "Command: forge"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2023-01-03T12:37:41Z",
  "updated_at": "2023-01-04T08:47:27Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "### Component\n\nForge\n\n### Describe the feature you would like\n\nTo test certain EVM errors such as block gas limit overflows, we have to expect an empty revert like this:\r\n\r\n```solidity\r\nvm.expectRevert(bytes(\"\"));\r\n```\r\n\r\nThis is also documented in the [Foundry Book](https://book.getfoundry.sh/cheatcodes/expect-revert?highlight=expectRevert#expectrevert), so it's all clear from a user documentation perspective. But this is not cool from a user experience point of view.\r\n\r\nIdeally, Foundry would catch such EVM errors and throw a more specific error message, so that:\r\n\r\n- Users have better guarantees that their tests are passing for the right reason\r\n- Debugging is easier\n\n### Additional context\n\nI can see the following logs in the traces if I pass the `-vvvv` flag:\r\n\r\n```text\r\nTraces:\r\n  [2157781646] CreateWithDeltas__ProTest::testCannotCreateWithDeltas__LoopCalculationOverflowsBlockGasLimit()\r\n    ├─ [0] VM::expectRevert(0x)\r\n    │   └─ ← ()\r\n    └─ ← \"EvmError: OutOfGas\r\n```\r\n\r\nTherefore, it should be in principle possible to catch this error and relay it to end users, so that tests could be written like this:\r\n\r\n```solidity\r\nvm.expectRevert(bytes(\"EvmError: OutOfGas\"));\r\n```",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/4012/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4012/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1369769371",
    "html_url": "https://github.com/foundry-rs/foundry/issues/4012#issuecomment-1369769371",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4012",
    "id": 1369769371,
    "node_id": "IC_kwDOGBlvNc5RpQWb",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-03T13:25:46Z",
    "updated_at": "2023-01-03T13:25:46Z",
    "author_association": "COLLABORATOR",
    "body": "IIUC there's two things being requested here:\r\n1. More specific error messages thrown. In https://github.com/foundry-rs/foundry/issues/1387 we aggregated most/all EVM errors to handle and I'm not sure where that left off.  @gakonst are we tracking all the possible errors to handle somewhere?\r\n2. Being able to specify/catch all those errors with `vm.expectRevert`\r\n\r\nI agree both of these are worth implementing",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1369769371/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1369869287",
    "html_url": "https://github.com/foundry-rs/foundry/issues/4012#issuecomment-1369869287",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4012",
    "id": 1369869287,
    "node_id": "IC_kwDOGBlvNc5Rpovn",
    "user": {
      "login": "PaulRBerg",
      "id": 8782666,
      "node_id": "MDQ6VXNlcjg3ODI2NjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8782666?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PaulRBerg",
      "html_url": "https://github.com/PaulRBerg",
      "followers_url": "https://api.github.com/users/PaulRBerg/followers",
      "following_url": "https://api.github.com/users/PaulRBerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/PaulRBerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PaulRBerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PaulRBerg/subscriptions",
      "organizations_url": "https://api.github.com/users/PaulRBerg/orgs",
      "repos_url": "https://api.github.com/users/PaulRBerg/repos",
      "events_url": "https://api.github.com/users/PaulRBerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PaulRBerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-03T15:02:15Z",
    "updated_at": "2023-01-03T15:02:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "I wasn't strictly requesting your point 1 as a feature - I have sort of taken it as an assumption that Foundry already aggregates most/ all EVM errors internally.\r\n\r\nIt's point 2 that I was mainly interested in - to be able to catch all of those errors with `vm.expectRevert`.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1369869287/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
