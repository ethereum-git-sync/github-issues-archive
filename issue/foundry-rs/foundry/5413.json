{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/5413",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5413/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5413/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5413/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/5413",
  "id": 1806687472,
  "node_id": "I_kwDOGBlvNc5rr9zw",
  "number": 5413,
  "title": "EXTCODESIZE returns 0 in fork mode of forge test",
  "user": {
    "login": "zayg",
    "id": 3822934,
    "node_id": "MDQ6VXNlcjM4MjI5MzQ=",
    "avatar_url": "https://avatars.githubusercontent.com/u/3822934?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/zayg",
    "html_url": "https://github.com/zayg",
    "followers_url": "https://api.github.com/users/zayg/followers",
    "following_url": "https://api.github.com/users/zayg/following{/other_user}",
    "gists_url": "https://api.github.com/users/zayg/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/zayg/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/zayg/subscriptions",
    "organizations_url": "https://api.github.com/users/zayg/orgs",
    "repos_url": "https://api.github.com/users/zayg/repos",
    "events_url": "https://api.github.com/users/zayg/events{/privacy}",
    "received_events_url": "https://api.github.com/users/zayg/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3334394228,
      "node_id": "MDU6TGFiZWwzMzM0Mzk0MjI4",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-bug",
      "name": "T-bug",
      "color": "d73a4a",
      "default": false,
      "description": "Type: bug"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 0,
  "created_at": "2023-07-16T19:05:45Z",
  "updated_at": "2023-07-16T19:05:45Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "### Component\n\nForge\n\n### Have you ensured that all of these are up to date?\n\n- [ ] Foundry\n- [ ] Foundryup\n\n### What version of Foundry are you on?\n\nforge 0.2.0 (50756e5 2023-06-21T04:23:43.365086000Z)\n\n### What command(s) is the bug in?\n\nforge test -vvvvvv --mt testDepositWithdraw\n\n### Operating System\n\nmacOS (Apple Silicon)\n\n### Describe the bug\n\ncode:\r\n```\r\n// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.13;\r\n\r\nimport \"forge-std/interfaces/IERC20.sol\";\r\n\r\ncontract BasicVault {\r\n    mapping (address => uint) user_to_balance_;\r\n    IERC20 immutable token_;\r\n\r\n    event Deposit(address indexed user, uint amount);\r\n    event Withdraw(address indexed user, uint amount);\r\n\r\n    constructor(address addr) {\r\n        token_ = IERC20(addr);\r\n    }\r\n\r\n    function deposit(uint amount) external {\r\n        user_to_balance_[msg.sender] += amount;\r\n        // Note: in the front end, user has to call IERC20::allowance() to allow the amount\r\n        // to be transfered.\r\n        require(token_.transferFrom(msg.sender, address(this), amount));\r\n        emit Deposit(msg.sender, amount);\r\n    }\r\n\r\n    function withdraw(uint amount) external {\r\n        user_to_balance_[msg.sender] -= amount;\r\n        require(token_.transfer(msg.sender, amount));\r\n        emit Withdraw(msg.sender, amount);\r\n    }\r\n}\r\n```\r\ntest code:\r\n```\r\n// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.13;\r\n\r\nimport \"forge-std/Test.sol\";\r\nimport \"../src/BasicVault.sol\";\r\n\r\ncontract BasicVaultTest is Test {\r\n    BasicVault public counter;\r\n    IERC20 public WETH;\r\n\r\n    function setUp() public {\r\n\r\n        WETH = IERC20(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n        counter = new BasicVault(address(WETH));\r\n\r\n        string memory rpc = \"https://api.bitstack.com/v1/wNFxbiJyQsSeLrX8RRCHi7NpRxrlErZk/DjShIqLishPCTB9HiMkPHXjUM9CNM9Na/ETH/mainnet\";\r\n        uint forkId = vm.createFork(rpc);\r\n        vm.selectFork(forkId);\r\n\r\n        vm.label(address(counter), \"Vault\");\r\n        vm.label(address(this), \"Caller\");\r\n        vm.label(address(WETH), \"WETH\");\r\n    }\r\n\r\n    function testDepositWithdraw(uint amount) public {\r\n        if (amount == 0) return;\r\n        WETH.approve(address(counter), amount);\r\n        (bool sent, ) = payable(address(WETH)).call{value: amount}(\"\");\r\n        counter.deposit(amount);\r\n    }\r\n}\r\n```\r\nIn the test **function testDepositWithdraw(uint amount) public**, REVERT always happens at **counter.deposit(amount)**. In the debug mode, the code size of ** counter** is always 0 which likely causes the REVERT behavior.\r\n\r\nCould any one help identify if it is a bug or if I did something wrong?\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/5413/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5413/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[

]
