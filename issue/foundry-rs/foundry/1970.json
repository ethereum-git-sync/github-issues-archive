{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/1970",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1970/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1970/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1970/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/1970",
  "id": 1271388863,
  "node_id": "I_kwDOGBlvNc5Lx9q_",
  "number": 1970,
  "title": "`forge lint` feature list / investigation",
  "user": {
    "login": "jpopesculian",
    "id": 3604901,
    "node_id": "MDQ6VXNlcjM2MDQ5MDE=",
    "avatar_url": "https://avatars.githubusercontent.com/u/3604901?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jpopesculian",
    "html_url": "https://github.com/jpopesculian",
    "followers_url": "https://api.github.com/users/jpopesculian/followers",
    "following_url": "https://api.github.com/users/jpopesculian/following{/other_user}",
    "gists_url": "https://api.github.com/users/jpopesculian/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jpopesculian/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jpopesculian/subscriptions",
    "organizations_url": "https://api.github.com/users/jpopesculian/orgs",
    "repos_url": "https://api.github.com/users/jpopesculian/repos",
    "events_url": "https://api.github.com/users/jpopesculian/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jpopesculian/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3703752787,
      "node_id": "LA_kwDOGBlvNc7cwshT",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/C-forge",
      "name": "C-forge",
      "color": "5319E7",
      "default": false,
      "description": "Command: forge"
    },
    {
      "id": 3746533612,
      "node_id": "LA_kwDOGBlvNc7fT5Ds",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-meta",
      "name": "T-meta",
      "color": "BFD4F2",
      "default": false,
      "description": "Type: meta"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 8,
  "created_at": "2022-06-14T21:33:31Z",
  "updated_at": "2022-12-08T23:21:48Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "This is a tracker for additional static analysis beyond what `solc` outputs. Static analysis can apply to things like safety, optimization and code style. Currently a few projects implement different components and aspects\r\n\r\n* https://github.com/crytic/slither\r\n* https://github.com/eth-sri/securify2\r\n* https://github.com/trailofbits/manticore\r\n* https://github.com/ConsenSys/mythril\r\n\r\nMost of these tools seem to focus on security. For example `securify2` tries to tackle the [SWC registry](https://swcregistry.io/) where the solidity compiler fails\r\n\r\nI took a brief look at Slither to see the complexity of implementing their [Detector list](https://github.com/crytic/slither/wiki/Detector-Documentation). Each detector loops through the nodes in Slither's own intermediate representation known as [SlithIR](https://github.com/crytic/slither/wiki/SlithIR). SlithIR gets built by visiting the AST output given by [crytic-compile](https://github.com/crytic/crytic-compile). The IR attempts to provide additional data to the AST by adding variable references, scopes and the type information for builtin functions and variables. Internally, the Slither uses a visitor pattern for converting the AST to the IR, which seems to translate fairly nicely to the visitor exposed for `solang-parser` Parse Tree. I think the real challenge will be to create an incremental IR representation from the Parse Tree ignoring completeness but offering correctness so that we may build the static analysis tool over time. Luckily, the simplicity of Solidity scopes, as well as the strong typing of solidity, should make this a lot easier.",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/1970/reactions",
    "total_count": 4,
    "+1": 4,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1970/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1176324894",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1970#issuecomment-1176324894",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1970",
    "id": 1176324894,
    "node_id": "IC_kwDOGBlvNc5GHUse",
    "user": {
      "login": "jpopesculian",
      "id": 3604901,
      "node_id": "MDQ6VXNlcjM2MDQ5MDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3604901?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jpopesculian",
      "html_url": "https://github.com/jpopesculian",
      "followers_url": "https://api.github.com/users/jpopesculian/followers",
      "following_url": "https://api.github.com/users/jpopesculian/following{/other_user}",
      "gists_url": "https://api.github.com/users/jpopesculian/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jpopesculian/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jpopesculian/subscriptions",
      "organizations_url": "https://api.github.com/users/jpopesculian/orgs",
      "repos_url": "https://api.github.com/users/jpopesculian/repos",
      "events_url": "https://api.github.com/users/jpopesculian/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jpopesculian/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-06T14:55:23Z",
    "updated_at": "2022-07-06T14:55:23Z",
    "author_association": "CONTRIBUTOR",
    "body": "I forgot to add the obvious `solhint` as well which splits up rules into \"Security\", \"Best Practices\", \"Style Guide\" and \"Miscellaneous\" [found here](https://github.com/protofire/solhint/blob/master/docs/rules.md). It seems to me by briefly looking through their codebase and the rule-set, that these are pretty much directly applied to the AST and don't even require another IR",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1176324894/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1178131199",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1970#issuecomment-1178131199",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1970",
    "id": 1178131199,
    "node_id": "IC_kwDOGBlvNc5GONr_",
    "user": {
      "login": "jpopesculian",
      "id": 3604901,
      "node_id": "MDQ6VXNlcjM2MDQ5MDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3604901?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jpopesculian",
      "html_url": "https://github.com/jpopesculian",
      "followers_url": "https://api.github.com/users/jpopesculian/followers",
      "following_url": "https://api.github.com/users/jpopesculian/following{/other_user}",
      "gists_url": "https://api.github.com/users/jpopesculian/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jpopesculian/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jpopesculian/subscriptions",
      "organizations_url": "https://api.github.com/users/jpopesculian/orgs",
      "repos_url": "https://api.github.com/users/jpopesculian/repos",
      "events_url": "https://api.github.com/users/jpopesculian/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jpopesculian/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-07T19:35:49Z",
    "updated_at": "2022-07-07T19:35:49Z",
    "author_association": "CONTRIBUTOR",
    "body": "I started compiling a list of possible rule sets to implement here https://www.notion.so/3f9a35e6262746c18dd263fa01ddf0bd?v=ce13246b8bf545abb8e1886d14ebeff2 and I think it would be super simple with just the AST to implement the solhint rules which aren't covered by solc. And then we can work on the higher impact low-hanging fruit from slither and start augmenting the parse tree with references where needed",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1178131199/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1195473547",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1970#issuecomment-1195473547",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1970",
    "id": 1195473547,
    "node_id": "IC_kwDOGBlvNc5HQXqL",
    "user": {
      "login": "montyly",
      "id": 13798342,
      "node_id": "MDQ6VXNlcjEzNzk4MzQy",
      "avatar_url": "https://avatars.githubusercontent.com/u/13798342?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/montyly",
      "html_url": "https://github.com/montyly",
      "followers_url": "https://api.github.com/users/montyly/followers",
      "following_url": "https://api.github.com/users/montyly/following{/other_user}",
      "gists_url": "https://api.github.com/users/montyly/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/montyly/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/montyly/subscriptions",
      "organizations_url": "https://api.github.com/users/montyly/orgs",
      "repos_url": "https://api.github.com/users/montyly/repos",
      "events_url": "https://api.github.com/users/montyly/events{/privacy}",
      "received_events_url": "https://api.github.com/users/montyly/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-26T13:18:12Z",
    "updated_at": "2022-07-26T13:18:12Z",
    "author_association": "NONE",
    "body": "Hey. I am the author of Slither.\r\n\r\nThis looks interesting, however I am curious about the motivations behind rewriting what is already existing, versus contributing directly to Slither.\r\n\r\nBuilding a static analysis framework is a large amount of work. Slither has support for all Solidity versions from 0.4, is maintained, has its own intermediate representation allowing precise and fast analyses. Building an IR is difficult, and we are at the frontier of the academic research with SlithIR (which is an IR with SSA dedicated for smart contracts). We also have a lot of advanced features that are already developed (including introspection for upgradeability, data dependencies, code mutation, …) \r\n\r\nRewriting all its logic and core seems counterproductive for the community, and fragmenting the security tools will not help developers and auditors in the long term. \r\n\r\nIf there are things that are missing in Slither, we can add them. I believe that the space would benefit from collaboration instead of competitive work. I am more than happy to discuss this here or over a call.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1195473547/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1196419431",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1970#issuecomment-1196419431",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1970",
    "id": 1196419431,
    "node_id": "IC_kwDOGBlvNc5HT-ln",
    "user": {
      "login": "jpopesculian",
      "id": 3604901,
      "node_id": "MDQ6VXNlcjM2MDQ5MDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3604901?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jpopesculian",
      "html_url": "https://github.com/jpopesculian",
      "followers_url": "https://api.github.com/users/jpopesculian/followers",
      "following_url": "https://api.github.com/users/jpopesculian/following{/other_user}",
      "gists_url": "https://api.github.com/users/jpopesculian/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jpopesculian/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jpopesculian/subscriptions",
      "organizations_url": "https://api.github.com/users/jpopesculian/orgs",
      "repos_url": "https://api.github.com/users/jpopesculian/repos",
      "events_url": "https://api.github.com/users/jpopesculian/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jpopesculian/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-27T08:28:36Z",
    "updated_at": "2022-07-27T08:28:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hi @montyly! I think @gakonst would be the best at answering this question, as my opinion here does not necessarily reflect the opinion of the project. That being said, I think the goal here is NOT to replace Slither. This was just an investigation of possible features for a possible tool. The goal of foundry as I have understood it, is to deliver a unified toolkit with a single binary. The power of having linting here in combination with a formatter for example would be able to do easy things such as automatically fixing things like non-underscored locally-scoped variables and such. This may contribute to other things in the toolkit down the road like maybe an LSP or the like. And of course we would like to expand the usefulness of that tool as much as possible, but I don't think we would have the time or resources to expand that scope to where Slither is. I think we just want to reach as many people as possible with easy tools for best practices and security",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1196419431/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1200311677",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1970#issuecomment-1200311677",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1970",
    "id": 1200311677,
    "node_id": "IC_kwDOGBlvNc5Hi019",
    "user": {
      "login": "gakonst",
      "id": 17802178,
      "node_id": "MDQ6VXNlcjE3ODAyMTc4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17802178?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gakonst",
      "html_url": "https://github.com/gakonst",
      "followers_url": "https://api.github.com/users/gakonst/followers",
      "following_url": "https://api.github.com/users/gakonst/following{/other_user}",
      "gists_url": "https://api.github.com/users/gakonst/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gakonst/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gakonst/subscriptions",
      "organizations_url": "https://api.github.com/users/gakonst/orgs",
      "repos_url": "https://api.github.com/users/gakonst/repos",
      "events_url": "https://api.github.com/users/gakonst/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gakonst/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-30T23:22:18Z",
    "updated_at": "2022-07-30T23:22:42Z",
    "author_association": "MEMBER",
    "body": "+1 on not trying to redo all of Slither/SlithIR's work, but if we can get a reasonable set of features just by parsing with solang parser it'd be quite nice. And agree that this has downstream implications on exposing over LSP, auto-fixing etc.\r\n\r\nAt the limit we could also start detecting if Slither is present on the system and run it on each `forge build` maybe",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1200311677/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1260921648",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1970#issuecomment-1260921648",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1970",
    "id": 1260921648,
    "node_id": "IC_kwDOGBlvNc5LKCMw",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-28T13:31:52Z",
    "updated_at": "2022-09-28T13:31:52Z",
    "author_association": "COLLABORATOR",
    "body": "One feature request to add to `forge lint` is an option for named imports, e.g. preferring `import {X} from \"A.sol\"` over `import \"A.sol\"`",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1260921648/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1343315711",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1970#issuecomment-1343315711",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1970",
    "id": 1343315711,
    "node_id": "IC_kwDOGBlvNc5QEV7_",
    "user": {
      "login": "gakonst",
      "id": 17802178,
      "node_id": "MDQ6VXNlcjE3ODAyMTc4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17802178?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gakonst",
      "html_url": "https://github.com/gakonst",
      "followers_url": "https://api.github.com/users/gakonst/followers",
      "following_url": "https://api.github.com/users/gakonst/following{/other_user}",
      "gists_url": "https://api.github.com/users/gakonst/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gakonst/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gakonst/subscriptions",
      "organizations_url": "https://api.github.com/users/gakonst/orgs",
      "repos_url": "https://api.github.com/users/gakonst/repos",
      "events_url": "https://api.github.com/users/gakonst/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gakonst/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-12-08T20:29:42Z",
    "updated_at": "2022-12-08T20:29:42Z",
    "author_association": "MEMBER",
    "body": "cc @0xkitsune re: using https://github.com/0xKitsune/solstat/ perhaps",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1343315711/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1343502754",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1970#issuecomment-1343502754",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1970",
    "id": 1343502754,
    "node_id": "IC_kwDOGBlvNc5QFDmi",
    "user": {
      "login": "0xKitsune",
      "id": 77890308,
      "node_id": "MDQ6VXNlcjc3ODkwMzA4",
      "avatar_url": "https://avatars.githubusercontent.com/u/77890308?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/0xKitsune",
      "html_url": "https://github.com/0xKitsune",
      "followers_url": "https://api.github.com/users/0xKitsune/followers",
      "following_url": "https://api.github.com/users/0xKitsune/following{/other_user}",
      "gists_url": "https://api.github.com/users/0xKitsune/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/0xKitsune/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/0xKitsune/subscriptions",
      "organizations_url": "https://api.github.com/users/0xKitsune/orgs",
      "repos_url": "https://api.github.com/users/0xKitsune/repos",
      "events_url": "https://api.github.com/users/0xKitsune/events{/privacy}",
      "received_events_url": "https://api.github.com/users/0xKitsune/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-12-08T23:21:48Z",
    "updated_at": "2022-12-08T23:21:48Z",
    "author_association": "NONE",
    "body": "Hey, yeah I would be happy to integrate solstat into Foundry's build pipeline. Solstat uses the `solang-parser` to parse solidity contracts and then runs static analysis on the AST to look for various optimizations, QA and exploits. Right now, there is an emphasis on optimizations and QA, with only a few very low severity exploits being identified. There are quite a few new patterns that are queued up to be integrated into the next version, which range from a variety of optimizations, QA and vulns. \r\n\r\nIt would be really helpful to hear what solstat would need for a smooth integration. For example, is there a preferred way to output the identified patterns that would integrate nicely into Foundry? Right now the build is modular and flexible, so it shouldn't be too hard to adjust to what is needed. \r\n\r\nIm also open to any thoughts/ideas that might be useful for a Foundry integration. With all this info, I can prioritize getting the updates integrated and a new version pushed. ",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1343502754/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
