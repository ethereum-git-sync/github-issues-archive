{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/5363",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5363/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5363/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5363/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/5363",
  "id": 1799951755,
  "node_id": "I_kwDOGBlvNc5rSRWL",
  "number": 5363,
  "title": "feat(perf): batch `eth_call` requests in tests/scripts",
  "user": {
    "login": "mds1",
    "id": 17163988,
    "node_id": "MDQ6VXNlcjE3MTYzOTg4",
    "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mds1",
    "html_url": "https://github.com/mds1",
    "followers_url": "https://api.github.com/users/mds1/followers",
    "following_url": "https://api.github.com/users/mds1/following{/other_user}",
    "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
    "organizations_url": "https://api.github.com/users/mds1/orgs",
    "repos_url": "https://api.github.com/users/mds1/repos",
    "events_url": "https://api.github.com/users/mds1/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mds1/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3593644820,
      "node_id": "LA_kwDOGBlvNc7WMqsU",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-feature",
      "name": "T-feature",
      "color": "BFD4F2",
      "default": false,
      "description": "Type: feature"
    },
    {
      "id": 3904003152,
      "node_id": "LA_kwDOGBlvNc7oslxQ",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-perf",
      "name": "T-perf",
      "color": "BFD4F2",
      "default": false,
      "description": "Type: performance"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2023-07-12T00:20:38Z",
  "updated_at": "2023-09-20T14:20:28Z",
  "closed_at": null,
  "author_association": "COLLABORATOR",
  "active_lock_reason": null,
  "body": "### Component\r\n\r\nForge\r\n\r\n### Describe the feature you would like\r\n\r\nSee https://github.com/gakonst/ethers-rs/issues/2508 for details/rationale on the request here\r\n\r\nforge batching is not necessarily dependent on that ethers-rs feature, as even without it forge could presumably convert batches calls into multicalls. This could result in significant performance improvements for RPC-heavy scripts and fork tests\r\n\r\nCurrently instead of `eth_call` we simulate the call and use `eth_getStorageAt` as needed. This is suboptimal than just using `eth_call` directly because:\r\n- Alchemy prices `eth_getStorageAt` at 17 CUPS but `eth_call` is 26, so any tx reading 2+ slots is currently paying more (and running slower due to multiple requests) than necessary, especially when you consider that we can batch `eth_call`s but can't batch `eth_getStorageAt`\r\n- Simulating might not give the right result for chains where some opcodes behave differently than on mainnet  (e.g. NUMBER returns L2 block number on optimism but L1 block number on arbitrum)\r\n\r\nSo I think the best path forward is:\r\n1. Replace the current behavior to use `eth_call` instead\r\n2. Then, batch `eth_call`s. The approach here would be:\r\n  - Collect all consecutive staticcalls, stop collecting when there's a state changing operation\r\n  - If Multicall3 is available on the chain, batch calls with it. If Multicall3 is not available on the chain, either use `eth_call` state overrides to place it there as part of the call, or just send normal requests without Multicall3 \r\n\r\n\r\n### Additional context\r\n\r\n_No response_",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/5363/reactions",
    "total_count": 2,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 2
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5363/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1701780996",
    "html_url": "https://github.com/foundry-rs/foundry/issues/5363#issuecomment-1701780996",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5363",
    "id": 1701780996,
    "node_id": "IC_kwDOGBlvNc5lbx4E",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-08-31T21:05:13Z",
    "updated_at": "2023-08-31T21:05:13Z",
    "author_association": "COLLABORATOR",
    "body": "Another approach to this could be to use the standard JSON RPC batching—not all providers support this, and it also doesn’t result in reduced RPC usage, but it can still be useful for users using their own node or a provider that supports it. This would probably have to be opt-in as a result, whereas the approach described above can be abstracted from the user as the default ",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1701780996/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
