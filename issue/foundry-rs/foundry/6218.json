{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/6218",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/6218/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/6218/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/6218/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/6218",
  "id": 1977891019,
  "node_id": "I_kwDOGBlvNc515DjL",
  "number": 6218,
  "title": "feat(cast): Storage slot computation for variable names / expressions in `cast storage`",
  "user": {
    "login": "ckoopmann",
    "id": 15629702,
    "node_id": "MDQ6VXNlcjE1NjI5NzAy",
    "avatar_url": "https://avatars.githubusercontent.com/u/15629702?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ckoopmann",
    "html_url": "https://github.com/ckoopmann",
    "followers_url": "https://api.github.com/users/ckoopmann/followers",
    "following_url": "https://api.github.com/users/ckoopmann/following{/other_user}",
    "gists_url": "https://api.github.com/users/ckoopmann/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ckoopmann/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ckoopmann/subscriptions",
    "organizations_url": "https://api.github.com/users/ckoopmann/orgs",
    "repos_url": "https://api.github.com/users/ckoopmann/repos",
    "events_url": "https://api.github.com/users/ckoopmann/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ckoopmann/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3593644820,
      "node_id": "LA_kwDOGBlvNc7WMqsU",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-feature",
      "name": "T-feature",
      "color": "BFD4F2",
      "default": false,
      "description": "Type: feature"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 0,
  "created_at": "2023-11-05T17:46:43Z",
  "updated_at": "2023-11-05T17:48:35Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "### Component\n\nCast\n\n### Describe the feature you would like\n\nI use `cast storage` to get the value of a private storage variable on a smart contract.\r\nCurrently this requires me to calculate the storage slot separately which can be quite complex. \r\nIt'd be great if there was a way to automate this and query a variables value by name.\r\n\r\nFor example for the following contract\r\n```\r\ncontract PrivateStorage {\r\n       uint256 private myUint;\r\n       uint256[] private myArray;\r\n       mapping(uint256 => mapping(uint256 => uint256)) private myMapping;\r\n}\r\n```\r\n\r\nIt would be nice to be able to query `cast storage <ADDRESS> \"myUint\"`\r\nIn addition it would be nice to query also more complex nested expressions such as:\r\n- `myArray[0]`\r\n- `myMapping[0][1]`\r\n- `myMapping[myUint][myArray[0]]`\r\n\r\nAlternatively one could introduce a new command `cast storage-slot` that just calculate the slot for such an expression which the user could then chain with the `cast storage` command to get the value.\r\nFor this to work, the contract source code needs to be available, for example for verified contracts on etherscan. \n\n### Additional context\n\n_No response_",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/6218/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/6218/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[

]
