{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/4762",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4762/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4762/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4762/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/4762",
  "id": 1673137512,
  "node_id": "I_kwDOGBlvNc5jug1o",
  "number": 4762,
  "title": "feat(forge): exclude certain contracts from being eavesdropped on by `vm.expectRevert`",
  "user": {
    "login": "PaulRBerg",
    "id": 8782666,
    "node_id": "MDQ6VXNlcjg3ODI2NjY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8782666?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/PaulRBerg",
    "html_url": "https://github.com/PaulRBerg",
    "followers_url": "https://api.github.com/users/PaulRBerg/followers",
    "following_url": "https://api.github.com/users/PaulRBerg/following{/other_user}",
    "gists_url": "https://api.github.com/users/PaulRBerg/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/PaulRBerg/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/PaulRBerg/subscriptions",
    "organizations_url": "https://api.github.com/users/PaulRBerg/orgs",
    "repos_url": "https://api.github.com/users/PaulRBerg/repos",
    "events_url": "https://api.github.com/users/PaulRBerg/events{/privacy}",
    "received_events_url": "https://api.github.com/users/PaulRBerg/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3593644820,
      "node_id": "LA_kwDOGBlvNc7WMqsU",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-feature",
      "name": "T-feature",
      "color": "BFD4F2",
      "default": false,
      "description": "Type: feature"
    },
    {
      "id": 3703752960,
      "node_id": "LA_kwDOGBlvNc7cwskA",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/A-cheatcodes",
      "name": "A-cheatcodes",
      "color": "FBCA04",
      "default": false,
      "description": "Area: cheatcodes"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 5,
  "created_at": "2023-04-18T13:27:35Z",
  "updated_at": "2023-11-28T09:40:35Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "### Component\r\n\r\nForge\r\n\r\n### Describe the feature you would like\r\n\r\nTake the following test:\r\n\r\n```solidity\r\nfunction test_RevertWhen_BatchSizeZero() external {\r\n    Batch.CancelMultiple[] memory batch = new Batch.CancelMultiple[](0);\r\n    vm.expectRevert(Errors.SablierV2ProxyTarget_BatchSizeZero.selector);\r\n    bytes memory data = abi.encodeCall(target.batchCancelMultiple, (batch, defaults.assets()));\r\n    proxy.execute(address(target), data);\r\n}\r\n```\r\n\r\nThe test does not pass because Forge expects a revert in the `defaults.assets()` call, which precedes the `proxy.execute` call. The catch is that `defaults` is a testing-only contract containing default values used throughout the tests.\r\n\r\n```solidity\r\ncontract Defaults {\r\n    uint256 public constant BATCH_SIZE = 10;\r\n    UD60x18 public constant BROKER_FEE = UD60x18.wrap(0);\r\n    uint40 public constant CLIFF_DURATION = 2500 seconds;\r\n    \r\n    // --- snip --- //\r\n}\r\n```\r\n\r\nThis has to be a contract (rather than a library) because I need to calculate certain values dynamically in the constructor.\r\n\r\nI know I could easily address the problem in my code above by flipping the order of operations. Still, I wanted to open this issue to suggest a feature to improve the developer experience when this scenario occurs.\r\n\r\nIt would be nice to have the ability to exclude certain contracts from being eavesdropped on by `vm.expectRevert`. This functionality would be analogous to [`excludeContract`](https://github.com/foundry-rs/forge-std/blob/f06ad8/src/StdInvariant.sol#L26) for invariants.",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/4762/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4762/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1534806822",
    "html_url": "https://github.com/foundry-rs/foundry/issues/4762#issuecomment-1534806822",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4762",
    "id": 1534806822,
    "node_id": "IC_kwDOGBlvNc5be0sm",
    "user": {
      "login": "PaulRBerg",
      "id": 8782666,
      "node_id": "MDQ6VXNlcjg3ODI2NjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8782666?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PaulRBerg",
      "html_url": "https://github.com/PaulRBerg",
      "followers_url": "https://api.github.com/users/PaulRBerg/followers",
      "following_url": "https://api.github.com/users/PaulRBerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/PaulRBerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PaulRBerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PaulRBerg/subscriptions",
      "organizations_url": "https://api.github.com/users/PaulRBerg/orgs",
      "repos_url": "https://api.github.com/users/PaulRBerg/repos",
      "events_url": "https://api.github.com/users/PaulRBerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PaulRBerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-04T13:42:58Z",
    "updated_at": "2023-05-04T13:42:58Z",
    "author_association": "CONTRIBUTOR",
    "body": "I offer a $200 bounty for implementing this feature. DM me on [Telegram](https://t.me/PaulRBerg) once you have the PR.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1534806822/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1534947894",
    "html_url": "https://github.com/foundry-rs/foundry/issues/4762#issuecomment-1534947894",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4762",
    "id": 1534947894,
    "node_id": "IC_kwDOGBlvNc5bfXI2",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-04T15:06:30Z",
    "updated_at": "2023-05-04T15:06:30Z",
    "author_association": "COLLABORATOR",
    "body": "I think this needs to be spec'd out before a PR is opened :) \r\n\r\nFirst it's worth noting this concept can apply to all `expect*` cheats, not just `expectRevert`, so we should consider that when deciding on behavior/UX/syntax.\r\n\r\nThen there are a lot of questions about the behavior/UX/syntax:\r\n- Should all `expect*` cheats have their own overloads that take arrays of addresses? This greatly increases the size of the cheatcode interface by adding 13 cheats\r\n- Or instead of arrays, for better UX there can be overloads for between e.g. 1 and 10 addresses, which further increases the size of the cheatcode interface\r\n- Maybe a generic `vm.excludeFromExpectations` method that takes an array of addresses (or many overloads, again) and excludes those from all `expect*` checks\r\n- Should the exclusion apply just to the next `expect*` call, or to all calls until a `vm.stopExclusionFromExpectations` method is called?\r\n- Should subsequent calls to the cheat be additive (i.e. append to the array of addresses), overwrite prior calls, or cause a revert?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1534947894/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1535022559",
    "html_url": "https://github.com/foundry-rs/foundry/issues/4762#issuecomment-1535022559",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4762",
    "id": 1535022559,
    "node_id": "IC_kwDOGBlvNc5bfpXf",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-04T16:04:37Z",
    "updated_at": "2023-05-04T16:04:37Z",
    "author_association": "COLLABORATOR",
    "body": "Another idea is a cheat to enable disable `expect*` checks for staticcalls, because really the use case here most of the time is going to be skipping staticcalls (h/t @brockelmore)",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1535022559/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1535047646",
    "html_url": "https://github.com/foundry-rs/foundry/issues/4762#issuecomment-1535047646",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4762",
    "id": 1535047646,
    "node_id": "IC_kwDOGBlvNc5bfvfe",
    "user": {
      "login": "PaulRBerg",
      "id": 8782666,
      "node_id": "MDQ6VXNlcjg3ODI2NjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8782666?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PaulRBerg",
      "html_url": "https://github.com/PaulRBerg",
      "followers_url": "https://api.github.com/users/PaulRBerg/followers",
      "following_url": "https://api.github.com/users/PaulRBerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/PaulRBerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PaulRBerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PaulRBerg/subscriptions",
      "organizations_url": "https://api.github.com/users/PaulRBerg/orgs",
      "repos_url": "https://api.github.com/users/PaulRBerg/repos",
      "events_url": "https://api.github.com/users/PaulRBerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PaulRBerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-04T16:30:23Z",
    "updated_at": "2023-05-04T16:30:23Z",
    "author_association": "CONTRIBUTOR",
    "body": "All good points/ questions, thanks @mds1.\r\n\r\n> Should all `expect*` cheats have their own overloads that take arrays of addresses? \r\n\r\nNo. The contracts meant to be excluded are (at least in my projects) dummy testing contracts that are *never* meant to be tested, for anything.\r\n\r\n> take arrays of addresses?\r\n\r\nThat + a single address would be a good starting point.\r\n\r\n> for better UX there can be overloads for between e.g. 1 and 10 addresses\r\n\r\nThis is an optimization we can consider in future iterations of the feature/ PR.\r\n\r\n> Maybe a generic `vm.excludeFromExpectations` method\r\n\r\nSounds great!\r\n\r\n> Should the exclusion apply just to the next `expect*` call\r\n\r\nAll calls, as per my explanation in two paragraphs above.\r\n\r\n> Should subsequent calls to the cheat be additive\r\n\r\nAdditive, yes.\r\n\r\n---\r\n\r\nTwo final notes:\r\n\r\n- I think that the behavior of this exclusion functionality should mimic that of [`excludeContract`](https://github.com/foundry-rs/forge-std/blob/73d44ec7d124e3831bc5f832267889ffb6f9bc3f/src/StdInvariant.sol#L26-L28) in `StdInvariant`.\r\n- As you pointed out, @brockelmore suggested an alternative way of implementing this feature (that would cover some use cases, at least) by providing a `vm.expectRevert(data,skipStatic)` overload that disregards all static calls in `expectRevert`.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1535047646/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1829444021",
    "html_url": "https://github.com/foundry-rs/foundry/issues/4762#issuecomment-1829444021",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4762",
    "id": 1829444021,
    "node_id": "IC_kwDOGBlvNc5tCxm1",
    "user": {
      "login": "PaulRBerg",
      "id": 8782666,
      "node_id": "MDQ6VXNlcjg3ODI2NjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8782666?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PaulRBerg",
      "html_url": "https://github.com/PaulRBerg",
      "followers_url": "https://api.github.com/users/PaulRBerg/followers",
      "following_url": "https://api.github.com/users/PaulRBerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/PaulRBerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PaulRBerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PaulRBerg/subscriptions",
      "organizations_url": "https://api.github.com/users/PaulRBerg/orgs",
      "repos_url": "https://api.github.com/users/PaulRBerg/repos",
      "events_url": "https://api.github.com/users/PaulRBerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PaulRBerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-11-28T09:40:34Z",
    "updated_at": "2023-11-28T09:40:34Z",
    "author_association": "CONTRIBUTOR",
    "body": "The lack of this functionality has continued to be a pain.\r\n\r\nCC @mattsse, @gakonst ",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1829444021/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
