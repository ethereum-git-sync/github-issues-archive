{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/1753",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1753/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1753/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1753/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/1753",
  "id": 1251199085,
  "node_id": "I_kwDOGBlvNc5Kk8ht",
  "number": 1753,
  "title": "Updating foundry decreased pseudo-randomness?",
  "user": {
    "login": "0xBeans",
    "id": 103160460,
    "node_id": "U_kgDOBiYajA",
    "avatar_url": "https://avatars.githubusercontent.com/u/103160460?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/0xBeans",
    "html_url": "https://github.com/0xBeans",
    "followers_url": "https://api.github.com/users/0xBeans/followers",
    "following_url": "https://api.github.com/users/0xBeans/following{/other_user}",
    "gists_url": "https://api.github.com/users/0xBeans/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/0xBeans/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/0xBeans/subscriptions",
    "organizations_url": "https://api.github.com/users/0xBeans/orgs",
    "repos_url": "https://api.github.com/users/0xBeans/repos",
    "events_url": "https://api.github.com/users/0xBeans/events{/privacy}",
    "received_events_url": "https://api.github.com/users/0xBeans/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3334394228,
      "node_id": "MDU6TGFiZWwzMzM0Mzk0MjI4",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-bug",
      "name": "T-bug",
      "color": "d73a4a",
      "default": false,
      "description": "Type: bug"
    },
    {
      "id": 3593644915,
      "node_id": "LA_kwDOGBlvNc7WMqtz",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/Cmd-forge-test",
      "name": "Cmd-forge-test",
      "color": "006B75",
      "default": false,
      "description": "Command: forge test"
    },
    {
      "id": 3703752787,
      "node_id": "LA_kwDOGBlvNc7cwshT",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/C-forge",
      "name": "C-forge",
      "color": "5319E7",
      "default": false,
      "description": "Command: forge"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2022-05-27T19:44:33Z",
  "updated_at": "2022-05-30T21:11:50Z",
  "closed_at": "2022-05-30T21:11:50Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "### Component\r\n\r\nForge\r\n\r\n### Have you ensured that all of these are up to date?\r\n\r\n- [x] Foundry\r\n- [x] Foundryup\r\n\r\n### What version of Foundry are you on?\r\n\r\nforge 0.2.0 (4fcd7e0 2022-05-27T00:04:39.67082Z)\r\n\r\n### What command(s) is the bug in?\r\n\r\nforge test --gas-report -vvv\r\n\r\n### Operating System\r\n\r\nmacOS (Apple Silicon)\r\n\r\n### Describe the bug\r\n\r\nI used to be on fairly old version of foundry (probably at least a month old) and updated it yesterday - this caused a couple tests to fail.\r\n\r\nI have this function which essentially takes a `uint256 dna` and replaces 14 bits of it with pseudo-random bits at a specific 'slot'. Essentially every 14 bits of the dna is associated with a certain 'trait' (a 'slot') and this function rerolls that certain slot.\r\n\r\n```\r\n    function rerollTrait(uint256 tokenId, uint256 traitBitShiftMultiplier)\r\n        external\r\n    {\r\n        uint256 currDna = dna[tokenId];\r\n\r\n        unchecked {\r\n            uint256 newTraitDna = (uint256(\r\n                keccak256(\r\n                    abi.encodePacked(\r\n                        msg.sender,\r\n                        block.difficulty,\r\n                        block.timestamp,\r\n                        _seed++,\r\n                        tokenId\r\n                    )\r\n                )\r\n            ) % 10000) << (14 * traitBitShiftMultiplier);\r\n\r\n            uint256 newBitMask = ~(BIT_MASK << (14 * traitBitShiftMultiplier));\r\n\r\n            currDna &= newBitMask;\r\n            currDna |= newTraitDna;\r\n        }\r\n\r\n        dna[tokenId] = currDna;\r\n    }\r\n```\r\n\r\nThis function splits the dna into its slots and returns an array of the traits that correspond to the dna.\r\n\r\n```\r\n    function getTraitIndexes(uint256 dna)\r\n        external\r\n        view\r\n        returns (uint256[NUM_TRAITS] memory traitIndexes)\r\n    {\r\n        // splits the dna into 14 bit slots\r\n        uint256[NUM_TRAITS] memory traitDnas = splitDna(dna);\r\n\r\n        for (uint256 i = 0; i < NUM_TRAITS; i++) {\r\n            // from the 14 bit slots, grab the trait it refers to\r\n            uint256 traitIndex = getTraitIndex(traitDnas[i], i);\r\n            traitIndexes[i] = traitIndex;\r\n        }\r\n    }\r\n```\r\n\r\nThis is my test\r\n\r\n```\r\n    function testRerollTrait() public {\r\n        // mint a few tokens first \r\n\r\n        uint256 tokenid = 0;\r\n        uint256 traitBitshift = 2;\r\n\r\n        uint256[9] memory oldDnaIndexes = contract.getTraitIndexes(\r\n            contract.dna(tokenid)\r\n        );\r\n\r\n        contract.rerollTrait(tokenid, traitBitshift);\r\n  \r\n        // dna should be different after we rolled traits\r\n        uint256[9] memory newDnaIndexes = contract.getTraitIndexes(\r\n            contract.dna(tokenid)\r\n        );\r\n\r\n        assertEq(oldDnaIndexes[0], newDnaIndexes[0]);\r\n        assertEq(oldDnaIndexes[1], newDnaIndexes[1]);\r\n        require(oldDnaIndexes[2] != newDnaIndexes[2]); // make sure proper slot got rerolled, THIS FAILS IN TEST\r\n        assertEq(oldDnaIndexes[3], newDnaIndexes[3]);\r\n        assertEq(oldDnaIndexes[4], newDnaIndexes[4]);\r\n        assertEq(oldDnaIndexes[5], newDnaIndexes[5]);\r\n        assertEq(oldDnaIndexes[6], newDnaIndexes[6]);\r\n        assertEq(oldDnaIndexes[7], newDnaIndexes[7]);\r\n        assertEq(oldDnaIndexes[8], newDnaIndexes[8]);\r\n    }\r\n```\r\n\r\nWhen running this test, `oldDnaIndexes` should return something like `[1,2,0,0,5,6,7,2]` and  `newDnaIndexes` should return  `[1,2,3,0,5,6,7,2]` where the 3rd index shouldve changed.\r\n\r\nThis test passed on the older version of foundry I was running but when I updated it, it failed (both arrays returned are the exact same). I rewrote the test in hardhat and it passes, so the discrepancy was confusing.\r\n\r\nIt turns out, if I `vm.warp()` to random large timestamps before I `rerollTrait()`, the test begins passing. This is strange since `_seed` used in `keccak256()` is incremented every time a trait is rerolled (or a mint happens) and this should add enough entropy for the hash to be completely different (it works in hardhat). However, now, the newest version of foundry doesnt behave the same unless I add more randomness via `vm.warp()`\r\n\r\nNot sure exactly what changed or if this is expected behavior?\r\n\r\nThanks :)  ",
  "closed_by": {
    "login": "0xBeans",
    "id": 103160460,
    "node_id": "U_kgDOBiYajA",
    "avatar_url": "https://avatars.githubusercontent.com/u/103160460?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/0xBeans",
    "html_url": "https://github.com/0xBeans",
    "followers_url": "https://api.github.com/users/0xBeans/followers",
    "following_url": "https://api.github.com/users/0xBeans/following{/other_user}",
    "gists_url": "https://api.github.com/users/0xBeans/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/0xBeans/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/0xBeans/subscriptions",
    "organizations_url": "https://api.github.com/users/0xBeans/orgs",
    "repos_url": "https://api.github.com/users/0xBeans/repos",
    "events_url": "https://api.github.com/users/0xBeans/events{/privacy}",
    "received_events_url": "https://api.github.com/users/0xBeans/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/1753/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1753/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1141254809",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1753#issuecomment-1141254809",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1753",
    "id": 1141254809,
    "node_id": "IC_kwDOGBlvNc5EBiqZ",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-30T15:01:09Z",
    "updated_at": "2022-05-30T15:01:09Z",
    "author_association": "MEMBER",
    "body": "I don't think the pseudo-randomness was decreased, but `block.difficulty` (I think), `block.timestamp` and `block.number` now default to 1 instead of 0, which may be the reason it fails?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1141254809/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1141479131",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1753#issuecomment-1141479131",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1753",
    "id": 1141479131,
    "node_id": "IC_kwDOGBlvNc5ECZbb",
    "user": {
      "login": "0xBeans",
      "id": 103160460,
      "node_id": "U_kgDOBiYajA",
      "avatar_url": "https://avatars.githubusercontent.com/u/103160460?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/0xBeans",
      "html_url": "https://github.com/0xBeans",
      "followers_url": "https://api.github.com/users/0xBeans/followers",
      "following_url": "https://api.github.com/users/0xBeans/following{/other_user}",
      "gists_url": "https://api.github.com/users/0xBeans/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/0xBeans/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/0xBeans/subscriptions",
      "organizations_url": "https://api.github.com/users/0xBeans/orgs",
      "repos_url": "https://api.github.com/users/0xBeans/repos",
      "events_url": "https://api.github.com/users/0xBeans/events{/privacy}",
      "received_events_url": "https://api.github.com/users/0xBeans/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-30T21:11:41Z",
    "updated_at": "2022-05-30T21:11:41Z",
    "author_association": "NONE",
    "body": "Quite possibly, but it is strange though since `_seed` is constantly incremented... keccack256() should still be quite different with that small change\r\n\r\nvm.warp() makes my test pass though, so Ill close the issue. Just found it quite strange",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1141479131/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
