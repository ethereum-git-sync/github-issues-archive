{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/3848",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3848/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3848/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3848/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/3848",
  "id": 1482207621,
  "node_id": "I_kwDOGBlvNc5YWLGF",
  "number": 3848,
  "title": "Non-issue: --Asserts don't fail the first time they should during fuzzing-- (actually test case minimization)",
  "user": {
    "login": "webthethird",
    "id": 6509209,
    "node_id": "MDQ6VXNlcjY1MDkyMDk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6509209?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/webthethird",
    "html_url": "https://github.com/webthethird",
    "followers_url": "https://api.github.com/users/webthethird/followers",
    "following_url": "https://api.github.com/users/webthethird/following{/other_user}",
    "gists_url": "https://api.github.com/users/webthethird/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/webthethird/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/webthethird/subscriptions",
    "organizations_url": "https://api.github.com/users/webthethird/orgs",
    "repos_url": "https://api.github.com/users/webthethird/repos",
    "events_url": "https://api.github.com/users/webthethird/events{/privacy}",
    "received_events_url": "https://api.github.com/users/webthethird/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3334394228,
      "node_id": "MDU6TGFiZWwzMzM0Mzk0MjI4",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-bug",
      "name": "T-bug",
      "color": "d73a4a",
      "default": false,
      "description": "Type: bug"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 9,
  "created_at": "2022-12-07T15:35:06Z",
  "updated_at": "2022-12-12T17:39:17Z",
  "closed_at": "2022-12-12T17:26:14Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "### Component\n\nForge\n\n### Have you ensured that all of these are up to date?\n\n- [X] Foundry\n- [X] Foundryup\n\n### What version of Foundry are you on?\n\nforge 0.2.0 (427c1b5 2022-12-07T00:03:33.121971646Z)\n\n### What command(s) is the bug in?\n\nforge test\n\n### Operating System\n\nLinux\n\n### Describe the bug\n\nI have a [differential fuzzing project](https://github.com/webthethird/solidity-diff-fuzz-upgrades/) in which I am randomly selecting addresses from a pre-defined list, checking the delta in their token balances before and after calling a function on two forks, and asserting that the deltas should be equal. Strangely, the tests only seem to realize there is a difference and trigger the assertion failure after the second time they test a given address (which is possible because I am using a modulo to reduce a uint8 down to the range of valid list indexes). This behavior seems to be consistent across many fuzz campaigns, with the assertions failing only the second time it tests a given pair of values. Here is a snippet of the file I'm logging to, in which you can see that the first and second runs should have failed the assertion but only the fourth one (with the same address as the second) fails:\r\n```\r\nIndex: 3\r\n0xbFB31966dCfdf3787649bFEe5266F1D0d634aB47\r\nDelta before:\r\n0\r\nDelta after:\r\n7610855283937821\r\n\r\nIndex: 1\r\n0xFe4443CF2e6D1b6C2cc48aFBA89961dA935A6b61\r\nDelta before:\r\n0\r\nDelta after:\r\n1489517144731\r\n\r\nIndex: 0\r\n0xC0Bc7bBc9AFA9B0577D10bd3eb636C8D3AB841d3\r\nDelta before:\r\n0\r\nDelta after:\r\n0\r\n\r\nIndex: 1\r\n0xFe4443CF2e6D1b6C2cc48aFBA89961dA935A6b61\r\nDelta before:\r\n0\r\nDelta after:\r\n1489517144731\r\n```\r\nAnd here's the final output logs:\r\n```\r\nRunning 1 test for src/test/compound/Comptroller-fork-diff.sol:TestComptroller\r\n[FAIL. Reason: Assertion failed. Counterexample: calldata=0xe1b8622c0000000000000000000000000000000000000000000000000000000000000001, args=[1]] test_claimComp_diff_cheat_upgrade(uint8) (runs: 0, Î¼: 0, ~: 0)\r\nLogs:\r\n  Number of addresses: 611\r\n  Index 1\r\n  Address 0xFe4443CF2e6D1b6C2cc48aFBA89961dA935A6b61\r\n  Delta before = 0\r\n  Delta after = 1489517144731\r\n  Error: a == b not satisfied [uint]\r\n    Expected: 1489517144731\r\n      Actual: 0\r\n```\r\nI managed to reproduce this behavior in a minimized test contract w/o a fork or any RPC requests. See [test_assert.sol](https://github.com/webthethird/solidity-diff-fuzz-upgrades/blob/main/src/test/test_assert.sol) in my differential fuzzing project to reproduce this. Here is the minimized output from testing `AssertEq` (there is also a function for testing `AssertApproxEqRel` - both have the same issue).\r\n```\r\ni:\r\n0\r\nj:\r\n0\r\n\r\ni:\r\n224\r\nj:\r\n448000\r\n\r\ni:\r\n2\r\nj:\r\n4000\r\n\r\ni:\r\n1\r\nj:\r\n2000\r\n\r\ni:\r\n0\r\nj:\r\n0\r\n\r\ni:\r\n1\r\nj:\r\n2000\r\n```",
  "closed_by": {
    "login": "webthethird",
    "id": 6509209,
    "node_id": "MDQ6VXNlcjY1MDkyMDk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6509209?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/webthethird",
    "html_url": "https://github.com/webthethird",
    "followers_url": "https://api.github.com/users/webthethird/followers",
    "following_url": "https://api.github.com/users/webthethird/following{/other_user}",
    "gists_url": "https://api.github.com/users/webthethird/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/webthethird/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/webthethird/subscriptions",
    "organizations_url": "https://api.github.com/users/webthethird/orgs",
    "repos_url": "https://api.github.com/users/webthethird/repos",
    "events_url": "https://api.github.com/users/webthethird/events{/privacy}",
    "received_events_url": "https://api.github.com/users/webthethird/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/3848/reactions",
    "total_count": 1,
    "+1": 1,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3848/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1342269640",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3848#issuecomment-1342269640",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3848",
    "id": 1342269640,
    "node_id": "IC_kwDOGBlvNc5QAWjI",
    "user": {
      "login": "gakonst",
      "id": 17802178,
      "node_id": "MDQ6VXNlcjE3ODAyMTc4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17802178?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gakonst",
      "html_url": "https://github.com/gakonst",
      "followers_url": "https://api.github.com/users/gakonst/followers",
      "following_url": "https://api.github.com/users/gakonst/following{/other_user}",
      "gists_url": "https://api.github.com/users/gakonst/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gakonst/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gakonst/subscriptions",
      "organizations_url": "https://api.github.com/users/gakonst/orgs",
      "repos_url": "https://api.github.com/users/gakonst/repos",
      "events_url": "https://api.github.com/users/gakonst/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gakonst/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-12-08T08:35:35Z",
    "updated_at": "2022-12-08T08:35:35Z",
    "author_association": "MEMBER",
    "body": "cc @mds1 have you seen this before?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1342269640/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1343551665",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3848#issuecomment-1343551665",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3848",
    "id": 1343551665,
    "node_id": "IC_kwDOGBlvNc5QFPix",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-12-08T23:50:01Z",
    "updated_at": "2022-12-08T23:53:28Z",
    "author_association": "COLLABORATOR",
    "body": "I have not seen this before. I modified the `test_assert.sol` file a bit (constructors aren't well supported in tests, and I was able to simplify things even more) to this:\r\n\r\n```solidity\r\nfunction setUp() public {\r\n    vm.writeFile(LOG_FILE, \"\");\r\n}\r\n\r\nfunction test_assert_eq(uint256 i) public {\r\n    vm.assume(i > 0);\r\n    vm.writeLine(LOG_FILE, string.concat(\"i:\", vm.toString(i)));\r\n    assertEq(0, i, \"assert failed!\"); // should always fail on first run due to `vm.assume`\r\n}\r\n```\r\n\r\n\r\nRunning that, something definitely seems odd. I ran this a bunch of times, and:\r\n- The `runs` counter is the terminal is always 0, which makes sense, because it should fail immediately on the first run\r\n- Given that `runs` counter, you'd expect the output file to have a single entry, but this is not true. I've seen it have anywhere between 2 and ~200 rows\r\n- The test is never reported as failed until the fuzzer chooses the smallest value that meets the `assume` condition. So the file writes values until `i = 1` using the above. If I change it to `vm.assume(i > 5)`, it doesn't fail until `i = 6`. \r\n- So the above stuff is weird, and `runs` counter in the terminal is inconsistent with the actual amount of runs seen from the log file\r\n- BUT If I comment out `vm.writeLine`, the log file is empty (because write an empty file in `setUp`, and it fails immediately, i.e. everything seems normal and consistent.\r\n\r\nSo the culprit here seems be that `vm.writeLine` is interfering with things somehow",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1343551665/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1344757596",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3848#issuecomment-1344757596",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3848",
    "id": 1344757596,
    "node_id": "IC_kwDOGBlvNc5QJ19c",
    "user": {
      "login": "webthethird",
      "id": 6509209,
      "node_id": "MDQ6VXNlcjY1MDkyMDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6509209?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/webthethird",
      "html_url": "https://github.com/webthethird",
      "followers_url": "https://api.github.com/users/webthethird/followers",
      "following_url": "https://api.github.com/users/webthethird/following{/other_user}",
      "gists_url": "https://api.github.com/users/webthethird/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/webthethird/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/webthethird/subscriptions",
      "organizations_url": "https://api.github.com/users/webthethird/orgs",
      "repos_url": "https://api.github.com/users/webthethird/repos",
      "events_url": "https://api.github.com/users/webthethird/events{/privacy}",
      "received_events_url": "https://api.github.com/users/webthethird/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-12-09T20:37:17Z",
    "updated_at": "2022-12-09T20:37:17Z",
    "author_association": "NONE",
    "body": "> BUT If I comment out vm.writeLine, the log file is empty (because write an empty file in setUp, and it fails immediately, i.e. everything seems normal and consistent.\r\n\r\nHow do you know that it fails immediately though, without printing logs for runs that don't fail? This is why I opened issue #3843 \r\n\r\nI copied the simplifications you made to `test_assert.sol` and ran it myself, with the `vm.writeLine` commented out, and in the \"Logs:\" section of the test output I see this:\r\n```\r\nRunning 1 test for src/test/test_assert.sol:TestAssert\r\n[FAIL. Reason: Assertion failed. Counterexample: calldata=0xe1f135f60000000000000000000000000000000000000000000000000000000000000001, args=[1]] test_assert_eq(uint256) (runs: 0, Î¼: 0, ~: 0)\r\nLogs:\r\n  Error: assert failed!\r\n  Error: a == b not satisfied [uint]\r\n    Expected: 1\r\n      Actual: 0\r\n```\r\nNote that it says `Expected: 1`, yet if you run it without commenting out `vm.writeLine` the logs show that it never seems to start with `i = 1`, but rather some arbitrarily high `uint256`. So it must be running many times before getting to that.\r\n\r\n> The test is never reported as failed until the fuzzer chooses the smallest value that meets the assume condition. So the file writes values until `i = 1` using the above. If I change it to `vm.assume(i > 5)`, it doesn't fail until `i = 6`.\r\n\r\nI also commented out the `vm.assume(i > 0)` as well as every `vm.writeLine` in the test (including the one in `setUp`), since I thought maybe you meant that this is the intended behavior of `vm.assume`, i.e., the fuzzer is _supposed to_ keep running until it chooses the smallest value that meets the condition. But even without the `assume`, the logs still show `Expected: 1`, so it is still going through many runs before the assertion fails. If it were really failing immediately, shouldn't we see something like `Expected: 41480654723919678011142148823...`?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1344757596/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1344838243",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3848#issuecomment-1344838243",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3848",
    "id": 1344838243,
    "node_id": "IC_kwDOGBlvNc5QKJpj",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-12-09T22:17:46Z",
    "updated_at": "2022-12-09T22:17:46Z",
    "author_association": "COLLABORATOR",
    "body": "Ah true, if you run `RUST_LOG=trace forge test` you'll see the input values (the rows that say `input=[Uint(...`), you're right that even when removing `writeLine` there are still many runs ð",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1344838243/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1344845708",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3848#issuecomment-1344845708",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3848",
    "id": 1344845708,
    "node_id": "IC_kwDOGBlvNc5QKLeM",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-12-09T22:23:49Z",
    "updated_at": "2022-12-09T22:24:02Z",
    "author_association": "COLLABORATOR",
    "body": "Pinging @mattsse here, I'm not sure if each `foundry_evm::fuzz::strategies::calldata: input=[Uint...` line corresponds to one run, or something else, so I'm not yet certain if there's a bug here or just some non-intuitive behavior",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1344845708/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1346898093",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3848#issuecomment-1346898093",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3848",
    "id": 1346898093,
    "node_id": "IC_kwDOGBlvNc5QSAit",
    "user": {
      "login": "webthethird",
      "id": 6509209,
      "node_id": "MDQ6VXNlcjY1MDkyMDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6509209?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/webthethird",
      "html_url": "https://github.com/webthethird",
      "followers_url": "https://api.github.com/users/webthethird/followers",
      "following_url": "https://api.github.com/users/webthethird/following{/other_user}",
      "gists_url": "https://api.github.com/users/webthethird/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/webthethird/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/webthethird/subscriptions",
      "organizations_url": "https://api.github.com/users/webthethird/orgs",
      "repos_url": "https://api.github.com/users/webthethird/repos",
      "events_url": "https://api.github.com/users/webthethird/events{/privacy}",
      "received_events_url": "https://api.github.com/users/webthethird/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-12-12T17:09:49Z",
    "updated_at": "2022-12-12T17:09:49Z",
    "author_association": "NONE",
    "body": "@mds1 @mattsse For what it's worth, it seems like I am not having the same issue when using an address as the fuzzing input and comparing its change in token balance between two forks in my Comptroller differential fuzz testing contract, `Comptroller-fork-diff.sol`. But I am still seeing the same pattern in `test_assert.sol` when comparing the random address input to a literal value, like `address(0)` or some address from a previous run. In that minimized test contract, the fuzzer still keeps running until it finds the minimal input that triggers the assertion failure, and tests that input a second time before the test fails. \r\n\r\nI am almost convinced that it is doing this on purpose, i.e., finding the minimal case that fails the test, at least when the fuzzer knows that it can find such a case by repeatedly cutting the input value in half. In fact, perhaps this is also what it has been trying to do with the Comptroller test functions I had been using, which took an index into a predefined list of addresses as input - it always seemed to stop the test on the lowest index corresponding to an address that can trigger the bug. Yet when I added a new test function which takes an address as input instead, it seems as though the fuzzer might know that the variables being compared in the assertion (i.e., balance deltas) depend on the state of the forked chains, so it doesn't bother trying to minimize the input.\r\n\r\nIf you guys know that the fuzzer does indeed try to find the minimal failing input when it knows something about the comparison being made in the assertion (I believe Echidna may do something similar, i.e., \"automatic test case minimization\"), then I will close this as a non-issue!",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1346898093/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1346913994",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3848#issuecomment-1346913994",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3848",
    "id": 1346913994,
    "node_id": "IC_kwDOGBlvNc5QSEbK",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-12-12T17:19:45Z",
    "updated_at": "2022-12-12T17:19:45Z",
    "author_association": "COLLABORATOR",
    "body": "Oh yes, you are 100% right, this is the shrinking. I should have realized that sooner. For a numeric types, the fuzzer tries to shrink failures to find the smallest possible failing value ",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1346913994/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1346922355",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3848#issuecomment-1346922355",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3848",
    "id": 1346922355,
    "node_id": "IC_kwDOGBlvNc5QSGdz",
    "user": {
      "login": "webthethird",
      "id": 6509209,
      "node_id": "MDQ6VXNlcjY1MDkyMDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6509209?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/webthethird",
      "html_url": "https://github.com/webthethird",
      "followers_url": "https://api.github.com/users/webthethird/followers",
      "following_url": "https://api.github.com/users/webthethird/following{/other_user}",
      "gists_url": "https://api.github.com/users/webthethird/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/webthethird/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/webthethird/subscriptions",
      "organizations_url": "https://api.github.com/users/webthethird/orgs",
      "repos_url": "https://api.github.com/users/webthethird/repos",
      "events_url": "https://api.github.com/users/webthethird/events{/privacy}",
      "received_events_url": "https://api.github.com/users/webthethird/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-12-12T17:26:14Z",
    "updated_at": "2022-12-12T17:26:14Z",
    "author_association": "NONE",
    "body": "Great! There still might be some small issue with the `runs` counter, but that's not really related to this, so consider this case closed!",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1346922355/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1346938527",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3848#issuecomment-1346938527",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3848",
    "id": 1346938527,
    "node_id": "IC_kwDOGBlvNc5QSKaf",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-12-12T17:39:16Z",
    "updated_at": "2022-12-12T17:39:16Z",
    "author_association": "COLLABORATOR",
    "body": "Awesome, thanks @webthethird!",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1346938527/reactions",
      "total_count": 2,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 1,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
