{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/1578",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1578/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1578/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1578/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/1578",
  "id": 1231896235,
  "node_id": "I_kwDOGBlvNc5JbT6r",
  "number": 1578,
  "title": "feat: test for reentrancy in invariant tests",
  "user": {
    "login": "mds1",
    "id": 17163988,
    "node_id": "MDQ6VXNlcjE3MTYzOTg4",
    "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mds1",
    "html_url": "https://github.com/mds1",
    "followers_url": "https://api.github.com/users/mds1/followers",
    "following_url": "https://api.github.com/users/mds1/following{/other_user}",
    "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
    "organizations_url": "https://api.github.com/users/mds1/orgs",
    "repos_url": "https://api.github.com/users/mds1/repos",
    "events_url": "https://api.github.com/users/mds1/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mds1/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3394554570,
      "node_id": "LA_kwDOGBlvNc7KVMrK",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/A-fuzzing",
      "name": "A-fuzzing",
      "color": "FBCA04",
      "default": false,
      "description": "Area: fuzzing"
    },
    {
      "id": 3593644820,
      "node_id": "LA_kwDOGBlvNc7WMqsU",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-feature",
      "name": "T-feature",
      "color": "BFD4F2",
      "default": false,
      "description": "Type: feature"
    },
    {
      "id": 3593644915,
      "node_id": "LA_kwDOGBlvNc7WMqtz",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/Cmd-forge-test",
      "name": "Cmd-forge-test",
      "color": "006B75",
      "default": false,
      "description": "Command: forge test"
    },
    {
      "id": 3703752787,
      "node_id": "LA_kwDOGBlvNc7cwshT",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/C-forge",
      "name": "C-forge",
      "color": "5319E7",
      "default": false,
      "description": "Command: forge"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2022-05-11T01:50:50Z",
  "updated_at": "2022-08-11T20:04:02Z",
  "closed_at": null,
  "author_association": "COLLABORATOR",
  "active_lock_reason": null,
  "body": "### Component\n\nForge\n\n### Describe the feature you would like\n\nIn #1572 invariant testing will be added to forge. This basically executes a sequence of random calls in attempt to break some invariant.\r\n\r\nThis is really valuable but it can't test reentrancy, which is common class of vulnerabilities. @brockelmore had an idea for testing this, which is:\r\n- For each state mutating function, generate a contract that has a fallback method which calls that method.\r\n- Add each of these contracts to the list of potential callers.\r\n- If one of your contracts ever transfers control back to the caller, this contract will reenter when it's the caller and hopefully break your invariant.\r\n\r\nOne downside is that each of these contracts would have no state in the system until its first call, which isn't always ideal. One way to resolve this is to generate a single contract that can call all methods with any calldata, and randomly choose which it will reenter. That contract will more frequently be the caller and likely to have state in the system than if we generated many contracts.\r\n\r\nIn general, there's many variants of reentrancy vulns and the above won't cover all of them. This is very much a work-in-progress idea that we'd need to spec out more before implementing, but wanted to open this issue so we don't lose track of it. Ideas welcome ðŸ™‚\n\n### Additional context\n\n_No response_",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/1578/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1578/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1212426393",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1578#issuecomment-1212426393",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1578",
    "id": 1212426393,
    "node_id": "IC_kwDOGBlvNc5IRCiZ",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-11T19:55:37Z",
    "updated_at": "2022-08-11T19:55:37Z",
    "author_association": "MEMBER",
    "body": "Was this solved?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1212426393/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1212433837",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1578#issuecomment-1212433837",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1578",
    "id": 1212433837,
    "node_id": "IC_kwDOGBlvNc5IREWt",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-11T20:04:02Z",
    "updated_at": "2022-08-11T20:04:02Z",
    "author_association": "COLLABORATOR",
    "body": "There's a simple version of reentrancy invariant testing that @joshieDo added and is currently off by default, but the approach isn't perfect (not sure any approach will be though). IMO worth keeping this open just to track the idea / as a place to drop any ideas on the best way(s) to do this",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1212433837/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
