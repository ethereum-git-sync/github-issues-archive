{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/4403",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4403/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4403/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4403/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/4403",
  "id": 1592358564,
  "node_id": "I_kwDOGBlvNc5e6Xak",
  "number": 4403,
  "title": "Forge fmt Bug",
  "user": {
    "login": "karmabadger",
    "id": 83666608,
    "node_id": "MDQ6VXNlcjgzNjY2NjA4",
    "avatar_url": "https://avatars.githubusercontent.com/u/83666608?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/karmabadger",
    "html_url": "https://github.com/karmabadger",
    "followers_url": "https://api.github.com/users/karmabadger/followers",
    "following_url": "https://api.github.com/users/karmabadger/following{/other_user}",
    "gists_url": "https://api.github.com/users/karmabadger/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/karmabadger/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/karmabadger/subscriptions",
    "organizations_url": "https://api.github.com/users/karmabadger/orgs",
    "repos_url": "https://api.github.com/users/karmabadger/repos",
    "events_url": "https://api.github.com/users/karmabadger/events{/privacy}",
    "received_events_url": "https://api.github.com/users/karmabadger/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3334394228,
      "node_id": "MDU6TGFiZWwzMzM0Mzk0MjI4",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-bug",
      "name": "T-bug",
      "color": "d73a4a",
      "default": false,
      "description": "Type: bug"
    },
    {
      "id": 3703752787,
      "node_id": "LA_kwDOGBlvNc7cwshT",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/C-forge",
      "name": "C-forge",
      "color": "5319E7",
      "default": false,
      "description": "Command: forge"
    },
    {
      "id": 3854691308,
      "node_id": "LA_kwDOGBlvNc7lwevs",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/Cmd-forge-fmt",
      "name": "Cmd-forge-fmt",
      "color": "006B75",
      "default": false,
      "description": "Command: forge fmt"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2023-02-20T19:34:00Z",
  "updated_at": "2023-03-06T10:37:52Z",
  "closed_at": "2023-03-06T10:37:52Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "### Component\r\n\r\nForge\r\n\r\n### Have you ensured that all of these are up to date?\r\n\r\n- [X] Foundry\r\n- [X] Foundryup\r\n\r\n### What version of Foundry are you on?\r\n\r\nforge 0.2.0 (624797e 2023-02-20T00:07:44.723592254Z)\r\n\r\n### What command(s) is the bug in?\r\n\r\nforge fmt, forge doc\r\n\r\n### Operating System\r\n\r\nLinux\r\n\r\n### Describe the bug\r\n\r\nforge fmt and forge doc fails to parse solidity code even tho forge build compiles it correctly\r\n\r\nError:\r\n```forge fmt\r\nError: \r\nFailed to parse Solidity code for /home/wenxuan27/projects/hamachi/contracts-v2/src/contracts/hamachi/libraries/LibDiamond.sol. Leaving source unchanged.\r\nDebug info: [Diagnostic { loc: File(0, 8064, 8065), level: Error, ty: ParserError, message: \"unrecognised token '.', expected \\\"!=\\\", \\\"%\\\", \\\"%=\\\", \\\"&\\\", \\\"&&\\\", \\\"&=\\\", \\\")\\\", \\\"*\\\", \\\"**\\\", \\\"*=\\\", \\\"+\\\", \\\"+=\\\", \\\",\\\", \\\"-\\\", \\\"-=\\\", \\\"/\\\", \\\"/=\\\", \\\":\\\", \\\";\\\", \\\"<\\\", \\\"<<\\\", \\\"<<=\\\", \\\"<=\\\", \\\"=\\\", \\\"==\\\", \\\">\\\", \\\">=\\\", \\\">>\\\", \\\">>=\\\", \\\"?\\\", \\\"]\\\", \\\"^\\\", \\\"^=\\\", \\\"calldata\\\", \\\"case\\\", \\\"default\\\", \\\"error\\\", \\\"leave\\\", \\\"memory\\\", \\\"revert\\\", \\\"storage\\\", \\\"switch\\\", \\\"|\\\", \\\"|=\\\", \\\"||\\\", \\\"}\\\", identifier\", notes: [] }, Diagnostic { loc: File(0, 8075, 8076), level: Error, ty: ParserError, message: \"unrecognised token ')', expected \\\";\\\"\", notes: [] }, Diagnostic { loc: File(0, 8155, 8159), level: Error, ty: ParserError, message: \"unrecognised token 'else', expected \\\"!\\\", \\\"(\\\", \\\"+\\\", \\\"++\\\", \\\"-\\\", \\\"--\\\", \\\"[\\\", \\\"address\\\", \\\"assembly\\\", \\\"bool\\\", \\\"break\\\", \\\"byte\\\", \\\"bytes\\\", \\\"case\\\", \\\"continue\\\", \\\"default\\\", \\\"delete\\\", \\\"do\\\", \\\"emit\\\", \\\"error\\\", \\\"false\\\", \\\"for\\\", \\\"function\\\", \\\"if\\\", \\\"leave\\\", \\\"mapping\\\", \\\"new\\\", \\\"payable\\\", \\\"return\\\", \\\"revert\\\", \\\"string\\\", \\\"switch\\\", \\\"this\\\", \\\"true\\\", \\\"try\\\", \\\"type\\\", \\\"unchecked\\\", \\\"while\\\", \\\"{\\\", \\\"}\\\", \\\"~\\\", Bytes, Int, Uint, address, hexnumber, hexstring, identifier, number, rational, string\", notes: [] }]\r\n```\r\n\r\n\r\nfile:\r\n```\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n/******************************************************************************\\\r\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\r\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\r\n/******************************************************************************/\r\nimport {IDiamondCut} from \"../interfaces/IDiamondCut.sol\";\r\nimport {FacetCut, FacetCutAction} from \"../types/diamond/Facet.sol\";\r\nimport {DiamondStorage} from \"../types/diamond/DiamondStorage.sol\";\r\n\r\nlibrary LibDiamond {\r\n  error InValidFacetCutAction();\r\n  error NoSelectorsInFacet();\r\n  error NoZeroAddress();\r\n  error SelectorExists(bytes4 selector);\r\n  error SameSelectorReplacement(bytes4 selector);\r\n  error MustBeZeroAddress();\r\n  error NoCode();\r\n  error NonExistentSelector(bytes4 selector);\r\n  error ImmutableFunction(bytes4 selector);\r\n  error NonEmptyCalldata();\r\n  error EmptyCalldata();\r\n  error InitCallFailed();\r\n\r\n  bytes32 internal constant DIAMOND_STORAGE_POSITION =\r\n    keccak256(\"diamond.standard.diamond.storage\");\r\n\r\n  function DS() internal pure returns (DiamondStorage storage ds) {\r\n    bytes32 position = DIAMOND_STORAGE_POSITION;\r\n    assembly {\r\n      ds.slot := position\r\n    }\r\n  }\r\n\r\n  event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\r\n\r\n  // Internal function version of diamondCut\r\n  function diamondCut(\r\n    FacetCut[] memory _diamondCut,\r\n    address _init,\r\n    bytes memory _calldata\r\n  ) internal {\r\n    for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\r\n      FacetCutAction action = _diamondCut[facetIndex].action;\r\n      if (action == FacetCutAction.Add) {\r\n        addFunctions(\r\n          _diamondCut[facetIndex].facetAddress,\r\n          _diamondCut[facetIndex].functionSelectors\r\n        );\r\n      } else if (action == FacetCutAction.Replace) {\r\n        replaceFunctions(\r\n          _diamondCut[facetIndex].facetAddress,\r\n          _diamondCut[facetIndex].functionSelectors\r\n        );\r\n      } else if (action == FacetCutAction.Remove) {\r\n        removeFunctions(\r\n          _diamondCut[facetIndex].facetAddress,\r\n          _diamondCut[facetIndex].functionSelectors\r\n        );\r\n      } else {\r\n        revert InValidFacetCutAction();\r\n      }\r\n    }\r\n    emit DiamondCut(_diamondCut, _init, _calldata);\r\n    initializeDiamondCut(_init, _calldata);\r\n  }\r\n\r\n  function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\r\n    if (_functionSelectors.length <= 0) revert NoSelectorsInFacet();\r\n    DiamondStorage storage ds = DS();\r\n    if (_facetAddress == address(0)) revert NoZeroAddress();\r\n    uint96 selectorPosition = uint96(\r\n      ds.facetFunctionSelectors[_facetAddress].functionSelectors.length\r\n    );\r\n    // add new facet address if it does not exist\r\n    if (selectorPosition == 0) {\r\n      addFacet(ds, _facetAddress);\r\n    }\r\n    for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\r\n      bytes4 selector = _functionSelectors[selectorIndex];\r\n      address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\r\n      if (oldFacetAddress != address(0)) revert SelectorExists(selector);\r\n      addFunction(ds, selector, selectorPosition, _facetAddress);\r\n      selectorPosition++;\r\n    }\r\n  }\r\n\r\n  function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\r\n    if (_functionSelectors.length <= 0) revert NoSelectorsInFacet();\r\n    DiamondStorage storage ds = DS();\r\n    if (_facetAddress == address(0)) revert NoZeroAddress();\r\n    uint96 selectorPosition = uint96(\r\n      ds.facetFunctionSelectors[_facetAddress].functionSelectors.length\r\n    );\r\n    // add new facet address if it does not exist\r\n    if (selectorPosition == 0) {\r\n      addFacet(ds, _facetAddress);\r\n    }\r\n    for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\r\n      bytes4 selector = _functionSelectors[selectorIndex];\r\n      address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\r\n      if (oldFacetAddress == _facetAddress) revert SameSelectorReplacement(selector);\r\n      removeFunction(ds, oldFacetAddress, selector);\r\n      addFunction(ds, selector, selectorPosition, _facetAddress);\r\n      selectorPosition++;\r\n    }\r\n  }\r\n\r\n  function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\r\n    if (_functionSelectors.length <= 0) revert NoSelectorsInFacet();\r\n    DiamondStorage storage ds = DS();\r\n    // if function does not exist then do nothing and return\r\n    if (_facetAddress != address(0)) revert MustBeZeroAddress();\r\n    for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\r\n      bytes4 selector = _functionSelectors[selectorIndex];\r\n      address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\r\n      removeFunction(ds, oldFacetAddress, selector);\r\n    }\r\n  }\r\n\r\n  function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\r\n    enforceHasContractCode(_facetAddress);\r\n    ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\r\n    ds.facetAddresses.push(_facetAddress);\r\n  }\r\n\r\n  function addFunction(\r\n    DiamondStorage storage ds,\r\n    bytes4 _selector,\r\n    uint96 _selectorPosition,\r\n    address _facetAddress\r\n  ) internal {\r\n    ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\r\n    ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\r\n    ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\r\n  }\r\n\r\n  function removeFunction(\r\n    DiamondStorage storage ds,\r\n    address _facetAddress,\r\n    bytes4 _selector\r\n  ) internal {\r\n    if (_facetAddress == address(0)) revert NonExistentSelector(_selector);\r\n    // an immutable function is a function defined directly in a diamond\r\n    if (_facetAddress == address(this)) revert ImmutableFunction(_selector);\r\n    // replace selector with last selector, then delete last selector\r\n    uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\r\n    uint256 lastSelectorPosition = ds\r\n      .facetFunctionSelectors[_facetAddress]\r\n      .functionSelectors\r\n      .length - 1;\r\n    // if not the same then replace _selector with lastSelector\r\n    if (selectorPosition != lastSelectorPosition) {\r\n      bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[\r\n        lastSelectorPosition\r\n      ];\r\n      ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\r\n      ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(\r\n        selectorPosition\r\n      );\r\n    }\r\n    // delete the last selector\r\n    ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\r\n    delete ds.selectorToFacetAndPosition[_selector];\r\n\r\n    // if no more selectors for facet address then delete the facet address\r\n    if (lastSelectorPosition == 0) {\r\n      // replace facet address with last facet address and delete last facet address\r\n      uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\r\n      uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\r\n      if (facetAddressPosition != lastFacetAddressPosition) {\r\n        address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\r\n        ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\r\n        ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\r\n      }\r\n      ds.facetAddresses.pop();\r\n      delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\r\n    }\r\n  }\r\n\r\n  function initializeDiamondCut(address _init, bytes memory _calldata) internal {\r\n    if (_init == address(0)) {\r\n      if (_calldata.length > 0) revert NonEmptyCalldata();\r\n    } else {\r\n      if (_calldata.length == 0) revert EmptyCalldata();\r\n      if (_init != address(this)) {\r\n        enforceHasContractCode(_init);\r\n      }\r\n      (bool success, bytes memory error) = _init.delegatecall(_calldata);\r\n      if (!success) {\r\n        if (error.length > 0) {\r\n          // bubble up the error\r\n          revert(string(error));\r\n        } else {\r\n          revert InitCallFailed();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  function enforceHasContractCode(address _contract) internal view {\r\n    uint256 contractSize;\r\n    assembly {\r\n      contractSize := extcodesize(_contract)\r\n    }\r\n    if (contractSize <= 0) revert NoCode();\r\n  }\r\n}```",
  "closed_by": {
    "login": "rkrasiuk",
    "id": 25429261,
    "node_id": "MDQ6VXNlcjI1NDI5MjYx",
    "avatar_url": "https://avatars.githubusercontent.com/u/25429261?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/rkrasiuk",
    "html_url": "https://github.com/rkrasiuk",
    "followers_url": "https://api.github.com/users/rkrasiuk/followers",
    "following_url": "https://api.github.com/users/rkrasiuk/following{/other_user}",
    "gists_url": "https://api.github.com/users/rkrasiuk/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/rkrasiuk/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/rkrasiuk/subscriptions",
    "organizations_url": "https://api.github.com/users/rkrasiuk/orgs",
    "repos_url": "https://api.github.com/users/rkrasiuk/repos",
    "events_url": "https://api.github.com/users/rkrasiuk/events{/privacy}",
    "received_events_url": "https://api.github.com/users/rkrasiuk/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/4403/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4403/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1437469600",
    "html_url": "https://github.com/foundry-rs/foundry/issues/4403#issuecomment-1437469600",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4403",
    "id": 1437469600,
    "node_id": "IC_kwDOGBlvNc5Vrgug",
    "user": {
      "login": "karmabadger",
      "id": 83666608,
      "node_id": "MDQ6VXNlcjgzNjY2NjA4",
      "avatar_url": "https://avatars.githubusercontent.com/u/83666608?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/karmabadger",
      "html_url": "https://github.com/karmabadger",
      "followers_url": "https://api.github.com/users/karmabadger/followers",
      "following_url": "https://api.github.com/users/karmabadger/following{/other_user}",
      "gists_url": "https://api.github.com/users/karmabadger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/karmabadger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/karmabadger/subscriptions",
      "organizations_url": "https://api.github.com/users/karmabadger/orgs",
      "repos_url": "https://api.github.com/users/karmabadger/repos",
      "events_url": "https://api.github.com/users/karmabadger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/karmabadger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-02-20T19:35:57Z",
    "updated_at": "2023-02-20T19:35:57Z",
    "author_association": "NONE",
    "body": "are you guys using a custom lexer? I think it might have some issues? perhaps you could use the solc AST output instead?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1437469600/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1448673739",
    "html_url": "https://github.com/foundry-rs/foundry/issues/4403#issuecomment-1448673739",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4403",
    "id": 1448673739,
    "node_id": "IC_kwDOGBlvNc5WWQHL",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-02-28T18:35:50Z",
    "updated_at": "2023-02-28T18:37:46Z",
    "author_association": "COLLABORATOR",
    "body": "@rkrasiuk do we need a solang bump to resolve this, now the the error is fixed upstream?\r\n\r\nEdit: ah nevermind I don't think there's been a new release yet",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1448673739/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1448730487",
    "html_url": "https://github.com/foundry-rs/foundry/issues/4403#issuecomment-1448730487",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4403",
    "id": 1448730487,
    "node_id": "IC_kwDOGBlvNc5WWd93",
    "user": {
      "login": "rkrasiuk",
      "id": 25429261,
      "node_id": "MDQ6VXNlcjI1NDI5MjYx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25429261?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rkrasiuk",
      "html_url": "https://github.com/rkrasiuk",
      "followers_url": "https://api.github.com/users/rkrasiuk/followers",
      "following_url": "https://api.github.com/users/rkrasiuk/following{/other_user}",
      "gists_url": "https://api.github.com/users/rkrasiuk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rkrasiuk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rkrasiuk/subscriptions",
      "organizations_url": "https://api.github.com/users/rkrasiuk/orgs",
      "repos_url": "https://api.github.com/users/rkrasiuk/repos",
      "events_url": "https://api.github.com/users/rkrasiuk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rkrasiuk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-02-28T19:19:39Z",
    "updated_at": "2023-02-28T19:19:39Z",
    "author_association": "COLLABORATOR",
    "body": "@mds1 that's right, i didn't want to fall back to master branch just for this + I am waiting for https://github.com/hyperledger/solang/pull/1203 \r\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1448730487/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1451453306",
    "html_url": "https://github.com/foundry-rs/foundry/issues/4403#issuecomment-1451453306",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4403",
    "id": 1451453306,
    "node_id": "IC_kwDOGBlvNc5Wg2t6",
    "user": {
      "login": "karmabadger",
      "id": 83666608,
      "node_id": "MDQ6VXNlcjgzNjY2NjA4",
      "avatar_url": "https://avatars.githubusercontent.com/u/83666608?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/karmabadger",
      "html_url": "https://github.com/karmabadger",
      "followers_url": "https://api.github.com/users/karmabadger/followers",
      "following_url": "https://api.github.com/users/karmabadger/following{/other_user}",
      "gists_url": "https://api.github.com/users/karmabadger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/karmabadger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/karmabadger/subscriptions",
      "organizations_url": "https://api.github.com/users/karmabadger/orgs",
      "repos_url": "https://api.github.com/users/karmabadger/repos",
      "events_url": "https://api.github.com/users/karmabadger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/karmabadger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-02T08:05:17Z",
    "updated_at": "2023-03-02T08:05:17Z",
    "author_association": "NONE",
    "body": "why not just use the solc AST?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1451453306/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
