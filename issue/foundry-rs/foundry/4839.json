{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/4839",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4839/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4839/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4839/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/4839",
  "id": 1686651180,
  "node_id": "I_kwDOGBlvNc5kiEEs",
  "number": 4839,
  "title": "feat(forge): new cheatcode for running simple tests with multiple `msg.sender` values",
  "user": {
    "login": "PaulRBerg",
    "id": 8782666,
    "node_id": "MDQ6VXNlcjg3ODI2NjY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8782666?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/PaulRBerg",
    "html_url": "https://github.com/PaulRBerg",
    "followers_url": "https://api.github.com/users/PaulRBerg/followers",
    "following_url": "https://api.github.com/users/PaulRBerg/following{/other_user}",
    "gists_url": "https://api.github.com/users/PaulRBerg/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/PaulRBerg/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/PaulRBerg/subscriptions",
    "organizations_url": "https://api.github.com/users/PaulRBerg/orgs",
    "repos_url": "https://api.github.com/users/PaulRBerg/repos",
    "events_url": "https://api.github.com/users/PaulRBerg/events{/privacy}",
    "received_events_url": "https://api.github.com/users/PaulRBerg/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3593644820,
      "node_id": "LA_kwDOGBlvNc7WMqsU",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-feature",
      "name": "T-feature",
      "color": "BFD4F2",
      "default": false,
      "description": "Type: feature"
    },
    {
      "id": 3593644915,
      "node_id": "LA_kwDOGBlvNc7WMqtz",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/Cmd-forge-test",
      "name": "Cmd-forge-test",
      "color": "006B75",
      "default": false,
      "description": "Command: forge test"
    },
    {
      "id": 3703752787,
      "node_id": "LA_kwDOGBlvNc7cwshT",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/C-forge",
      "name": "C-forge",
      "color": "5319E7",
      "default": false,
      "description": "Command: forge"
    },
    {
      "id": 3703752960,
      "node_id": "LA_kwDOGBlvNc7cwskA",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/A-cheatcodes",
      "name": "A-cheatcodes",
      "color": "FBCA04",
      "default": false,
      "description": "Area: cheatcodes"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2023-04-27T11:25:20Z",
  "updated_at": "2023-05-11T11:30:52Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "### Component\r\n\r\nForge\r\n\r\n### Describe the feature you would like\r\n\r\nScenario: a contract function allows the caller to be one of two special accounts:\r\n\r\n```solidity\r\nfunction foo() external onlyAliceOrBob {\r\n    // <--- snip --- >\r\n}\r\n```\r\n\r\nTesting this sort of function is annoying because I have to duplicate logic in my tests, e.g.\r\n\r\n```solidity\r\nfunction testFoo_Alice() external {\r\n    assertEq(A, B);\r\n    assertEq(C, D);\r\n    assertEq(E, F);\r\n}\r\n\r\nfunction testFoo_Bob() external {\r\n    assertEq(A, B);\r\n    assertEq(C, D);\r\n    assertEq(E, F);\r\n}\r\n```\r\n\r\nNow, I know I could de-dup the assertions in a subroutine, like this:\r\n\r\n```solidity\r\nfunction testFoo_Common() internal {\r\n    // <--- snip --->\r\n}\r\n```\r\n\r\nBut I wouldn't say I like this approach because it (i) hurts the readability of the tests and (ii) doesn't scale super well (e.g. in realistic scenarios, Bob has specific permissions that Alice doesn't have, which requires branching, which in turn complicates the subroutine).\r\n\r\nIt would be helpful if Forge lent a hand for this use case. I imagine that a new cheatcode could be implemented, e.g. `vm.consider`, which would be similar to `vm.assume` and would work something like this:\r\n\r\n- Takes one, two, three, four, or a dynamic array of addresses\r\n- When Forge sees `vm.consider` in a test, it runs the test with all provided addresses, one test run for each address. Basically, `vm.consider` would run a batch of `changePrank` under the hood (related: https://github.com/foundry-rs/foundry/issues/4779)\r\n- Forge overrides any prank started before the test (e.g. in `setUp`), but it lets the user change the prank during the test\r\n- Using this cheat in a fuzz test would result in an error\r\n\r\nWith this hypothetical `vm.consider`, I could write my test like this:\r\n\r\n```solidity\r\nfunction testFoo() external {\r\n    vm.consider(users.alice, users.bob); // succinct and declarative\r\n    assertEq(A, B);\r\n    assertEq(C, D);\r\n    assertEq(E, F);\r\n}\r\n```\r\n\r\nSide notes:\r\n\r\n- `vm.consider` is just a suggestion. I don't think it's a great name. Alternatives: `vm.regard,` `vm.rollPrank`, `vm.testPrank`.\r\n- What I'm referring to in this feature request is not fuzzing. I want to run the test once with Alice as the caller, and once with Bob. I don't want to run the tests hundreds of times - these are unit tests I refer to.",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/4839/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4839/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1529926895",
    "html_url": "https://github.com/foundry-rs/foundry/issues/4839#issuecomment-1529926895",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4839",
    "id": 1529926895,
    "node_id": "IC_kwDOGBlvNc5bMNTv",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-01T16:34:15Z",
    "updated_at": "2023-05-01T16:34:15Z",
    "author_association": "COLLABORATOR",
    "body": "Is this a duplicate of https://github.com/foundry-rs/foundry/issues/858? It sounds like a more narrow version that issue ",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1529926895/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1529932103",
    "html_url": "https://github.com/foundry-rs/foundry/issues/4839#issuecomment-1529932103",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4839",
    "id": 1529932103,
    "node_id": "IC_kwDOGBlvNc5bMOlH",
    "user": {
      "login": "PaulRBerg",
      "id": 8782666,
      "node_id": "MDQ6VXNlcjg3ODI2NjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8782666?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PaulRBerg",
      "html_url": "https://github.com/PaulRBerg",
      "followers_url": "https://api.github.com/users/PaulRBerg/followers",
      "following_url": "https://api.github.com/users/PaulRBerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/PaulRBerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PaulRBerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PaulRBerg/subscriptions",
      "organizations_url": "https://api.github.com/users/PaulRBerg/orgs",
      "repos_url": "https://api.github.com/users/PaulRBerg/repos",
      "events_url": "https://api.github.com/users/PaulRBerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PaulRBerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-01T16:40:40Z",
    "updated_at": "2023-05-11T11:30:52Z",
    "author_association": "CONTRIBUTOR",
    "body": "This is not quite the same as #858 (table tests).\r\n\r\nA table test is an explicit set of input(s) + output(s).\r\n\r\nWhereas in this issue, I suggested implementing a new mode of unit testing, a mode specifically meant for unit testing a range of callers. There's no notion of outputs in my proposal.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1529932103/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
