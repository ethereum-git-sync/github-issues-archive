{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/4310",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4310/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4310/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4310/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/4310",
  "id": 1576463811,
  "node_id": "I_kwDOGBlvNc5d9u3D",
  "number": 4310,
  "title": "bug(forge): accessing array elements breaks coverage for if statements",
  "user": {
    "login": "PaulRBerg",
    "id": 8782666,
    "node_id": "MDQ6VXNlcjg3ODI2NjY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8782666?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/PaulRBerg",
    "html_url": "https://github.com/PaulRBerg",
    "followers_url": "https://api.github.com/users/PaulRBerg/followers",
    "following_url": "https://api.github.com/users/PaulRBerg/following{/other_user}",
    "gists_url": "https://api.github.com/users/PaulRBerg/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/PaulRBerg/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/PaulRBerg/subscriptions",
    "organizations_url": "https://api.github.com/users/PaulRBerg/orgs",
    "repos_url": "https://api.github.com/users/PaulRBerg/repos",
    "events_url": "https://api.github.com/users/PaulRBerg/events{/privacy}",
    "received_events_url": "https://api.github.com/users/PaulRBerg/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3334394228,
      "node_id": "MDU6TGFiZWwzMzM0Mzk0MjI4",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-bug",
      "name": "T-bug",
      "color": "d73a4a",
      "default": false,
      "description": "Type: bug"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2023-02-08T16:47:34Z",
  "updated_at": "2023-12-11T00:42:51Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "### Component\r\n\r\nForge\r\n\r\n### Have you ensured that all of these are up to date?\r\n\r\n- [X] Foundry\r\n- [X] Foundryup\r\n\r\n### What version of Foundry are you on?\r\n\r\nforge 0.2.0 (249538f 2023-02-08T00:12:05.805004Z)\r\n\r\n### What command(s) is the bug in?\r\n\r\nforge coverage\r\n\r\n### Operating System\r\n\r\nmacOS (Apple Silicon)\r\n\r\n### Describe the bug\r\n\r\nThe mere existence of an array accessor within an if statement breaks the coverage for the said if.\r\n\r\nI think that the priority for this issue should be set very high, because it may affect lot of Foundry users.\r\n\r\n### Reproduction Steps\r\n\r\nTake the following unsuspecting contract:\r\n\r\n```solidity\r\ncontract Foo {\r\n    function countOdd(uint256[] memory arr) external pure returns (uint256 count) {\r\n        uint256 length = arr.length;\r\n        for (uint256 i = 0; i < length; ++i) {\r\n            if (arr[i] % 2 == 1) {\r\n                count++;\r\n                arr[0];\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nAnd the following test file (hidden by default for brevity reasons, click the toggle below to collapse it):\r\n\r\n<details>\r\n<summary>Click me to toggle the tests</summary>\r\n\r\n```solidity\r\nimport { Test } from \"forge-std/Test.sol\";\r\n\r\ncontract FooTest is Test {\r\n    Foo internal foo = new Foo();\r\n\r\n    function test_CountOdd_1() external {\r\n        uint256[] memory arr = new uint256[](3);\r\n        arr[0] = 78;\r\n        arr[1] = 493;\r\n        arr[2] = 700;\r\n        uint256 count = foo.countOdd(arr);\r\n        assertEq(count, 1);\r\n    }\r\n\r\n    function test_CountOdd_2() external {\r\n        uint256[] memory arr = new uint256[](4);\r\n        arr[0] = 78;\r\n        arr[1] = 493;\r\n        arr[2] = 700;\r\n        arr[3] = 1729;\r\n        uint256 count = foo.countOdd(arr);\r\n        assertEq(count, 2);\r\n    }\r\n}\r\n\r\n```\r\n\r\n</details>\r\n\r\nNow, run `forge coverage`. You will get this report:\r\n\r\n```text\r\n| File        | % Lines       | % Statements  | % Branches   | % Funcs       |\r\n|-------------|---------------|---------------|--------------|---------------|\r\n| src/Foo.sol | 100.00% (4/4) | 100.00% (6/6) | 50.00% (1/2) | 100.00% (1/1) |\r\n| Total       | 100.00% (4/4) | 100.00% (6/6) | 50.00% (1/2) | 100.00% (1/1) |\r\n```\r\n\r\nNotice that the branch coverage is 50% instead of 100%, even if we have tests that account for the full gamut of possibilities (`arr[i]` odd and even).\r\n\r\nNow, do this - comment the `arr[0]` expression, and the branch coverage will magically increase to 100%:\r\n\r\n```text\r\n| File        | % Lines       | % Statements  | % Branches    | % Funcs       |\r\n|-------------|---------------|---------------|---------------|---------------|\r\n| src/Foo.sol | 100.00% (4/4) | 100.00% (6/6) | 100.00% (2/2) | 100.00% (1/1) |\r\n| Total       | 100.00% (4/4) | 100.00% (6/6) | 100.00% (2/2) | 100.00% (1/1) |\r\n\r\n```\r\n\r\nFinally, here's an even juicier example:\r\n\r\n```solidity\r\ncontract Foo {\r\n    function isOdd(uint256 number) external view returns (bool odd) {\r\n        uint256[] memory arr = new uint256[](1);\r\n        arr[0] = block.timestamp;\r\n\r\n        if (number % 2 == 1) {\r\n            odd = true;\r\n            arr[0];\r\n        } else {\r\n            odd = false;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nYet again, the mere existence of the `arr[0]` expression breaks the coverage for the `if (number % 2 == 1)` line. This example is even more surprising, because the `arr` array has nothing to do with the actual logic of the function.\r\n\r\n### Related Issues\r\n\r\n- This bug may be the same as #4309 (that is, #4309 may be a special case of the bug explained in this issue).\r\n- This bug may have also played a role in #3600 (specifically, the second incorrectly reported line in KittyFu307's code).",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/4310/reactions",
    "total_count": 1,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 1
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4310/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1423213798",
    "html_url": "https://github.com/foundry-rs/foundry/issues/4310#issuecomment-1423213798",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4310",
    "id": 1423213798,
    "node_id": "IC_kwDOGBlvNc5U1ITm",
    "user": {
      "login": "frontier159",
      "id": 103474701,
      "node_id": "U_kgDOBirmDQ",
      "avatar_url": "https://avatars.githubusercontent.com/u/103474701?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frontier159",
      "html_url": "https://github.com/frontier159",
      "followers_url": "https://api.github.com/users/frontier159/followers",
      "following_url": "https://api.github.com/users/frontier159/following{/other_user}",
      "gists_url": "https://api.github.com/users/frontier159/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frontier159/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frontier159/subscriptions",
      "organizations_url": "https://api.github.com/users/frontier159/orgs",
      "repos_url": "https://api.github.com/users/frontier159/repos",
      "events_url": "https://api.github.com/users/frontier159/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frontier159/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-02-08T20:41:28Z",
    "updated_at": "2023-02-08T20:41:28Z",
    "author_association": "NONE",
    "body": "Fantastic sleuthing @PaulRBerg, much appreciated ",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1423213798/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1423222811",
    "html_url": "https://github.com/foundry-rs/foundry/issues/4310#issuecomment-1423222811",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4310",
    "id": 1423222811,
    "node_id": "IC_kwDOGBlvNc5U1Kgb",
    "user": {
      "login": "PaulRBerg",
      "id": 8782666,
      "node_id": "MDQ6VXNlcjg3ODI2NjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8782666?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PaulRBerg",
      "html_url": "https://github.com/PaulRBerg",
      "followers_url": "https://api.github.com/users/PaulRBerg/followers",
      "following_url": "https://api.github.com/users/PaulRBerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/PaulRBerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PaulRBerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PaulRBerg/subscriptions",
      "organizations_url": "https://api.github.com/users/PaulRBerg/orgs",
      "repos_url": "https://api.github.com/users/PaulRBerg/repos",
      "events_url": "https://api.github.com/users/PaulRBerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PaulRBerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-02-08T20:51:01Z",
    "updated_at": "2023-02-08T20:51:01Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks, @frontier159.\r\n\r\nAfter a few hours of additional debugging, I now realize that this issue might be a special case of the other issue that I have just opened, i.e. https://github.com/foundry-rs/foundry/issues/4311.\r\n\r\nThough I am not sure - `arr[0]` loads from memory not from the stack 🤔",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1423222811/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1424508885",
    "html_url": "https://github.com/foundry-rs/foundry/issues/4310#issuecomment-1424508885",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4310",
    "id": 1424508885,
    "node_id": "IC_kwDOGBlvNc5U6EfV",
    "user": {
      "login": "PaulRBerg",
      "id": 8782666,
      "node_id": "MDQ6VXNlcjg3ODI2NjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8782666?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PaulRBerg",
      "html_url": "https://github.com/PaulRBerg",
      "followers_url": "https://api.github.com/users/PaulRBerg/followers",
      "following_url": "https://api.github.com/users/PaulRBerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/PaulRBerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PaulRBerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PaulRBerg/subscriptions",
      "organizations_url": "https://api.github.com/users/PaulRBerg/orgs",
      "repos_url": "https://api.github.com/users/PaulRBerg/repos",
      "events_url": "https://api.github.com/users/PaulRBerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PaulRBerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-02-09T16:55:28Z",
    "updated_at": "2023-02-09T16:55:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "Note: this bug happens even in cases when it is impossible to get an \"index out of bounds\" error. I have already shared an example in the OP above, but here's another from my real project:\r\n\r\n<img width=\"1049\" alt=\"Screenshot 2023-02-09 at 6 54 37 PM\" src=\"https://user-images.githubusercontent.com/8782666/217883428-2b5d21fb-825d-4e4b-ae0a-0ae6128614b1.png\">\r\n\r\nThe if statement checks if the `index` is at least 2, so the expression `index - 2` cannot possibly cause an error.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1424508885/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1849154950",
    "html_url": "https://github.com/foundry-rs/foundry/issues/4310#issuecomment-1849154950",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4310",
    "id": 1849154950,
    "node_id": "IC_kwDOGBlvNc5uN92G",
    "user": {
      "login": "mountainpath9",
      "id": 93360511,
      "node_id": "U_kgDOBZCRfw",
      "avatar_url": "https://avatars.githubusercontent.com/u/93360511?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mountainpath9",
      "html_url": "https://github.com/mountainpath9",
      "followers_url": "https://api.github.com/users/mountainpath9/followers",
      "following_url": "https://api.github.com/users/mountainpath9/following{/other_user}",
      "gists_url": "https://api.github.com/users/mountainpath9/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mountainpath9/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mountainpath9/subscriptions",
      "organizations_url": "https://api.github.com/users/mountainpath9/orgs",
      "repos_url": "https://api.github.com/users/mountainpath9/repos",
      "events_url": "https://api.github.com/users/mountainpath9/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mountainpath9/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-12-11T00:42:49Z",
    "updated_at": "2023-12-11T00:42:49Z",
    "author_association": "NONE",
    "body": "Based upon some analysis using the report implemented in #6563, I think this is due to assumptions in the heuristics used to establish which evm instructions correspond to which branch points. This heuristic is described here:\r\n\r\nhttps://github.com/foundry-rs/foundry/blob/0ae39ea8e43e629d67e9373d189f3730019b4bfc/crates/evm/coverage/src/anchors.rs#L72\r\n\r\nand, I suspect will only work in some cases.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1849154950/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
