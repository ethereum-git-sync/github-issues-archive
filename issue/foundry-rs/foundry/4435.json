{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/4435",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4435/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4435/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4435/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/4435",
  "id": 1600312348,
  "node_id": "I_kwDOGBlvNc5fYtQc",
  "number": 4435,
  "title": "Option to decode return data in `cast call`",
  "user": {
    "login": "ckoopmann",
    "id": 15629702,
    "node_id": "MDQ6VXNlcjE1NjI5NzAy",
    "avatar_url": "https://avatars.githubusercontent.com/u/15629702?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ckoopmann",
    "html_url": "https://github.com/ckoopmann",
    "followers_url": "https://api.github.com/users/ckoopmann/followers",
    "following_url": "https://api.github.com/users/ckoopmann/following{/other_user}",
    "gists_url": "https://api.github.com/users/ckoopmann/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ckoopmann/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ckoopmann/subscriptions",
    "organizations_url": "https://api.github.com/users/ckoopmann/orgs",
    "repos_url": "https://api.github.com/users/ckoopmann/repos",
    "events_url": "https://api.github.com/users/ckoopmann/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ckoopmann/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3593644820,
      "node_id": "LA_kwDOGBlvNc7WMqsU",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-feature",
      "name": "T-feature",
      "color": "BFD4F2",
      "default": false,
      "description": "Type: feature"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 3,
  "created_at": "2023-02-27T02:01:54Z",
  "updated_at": "2023-02-28T14:22:59Z",
  "closed_at": "2023-02-28T14:22:58Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "### Component\n\nCast\n\n### Describe the feature you would like\n\n# Current behaviour \r\n\r\nThe returned data is displayed in it's raw hex encoded form, making it hard to read. (See screenshot).\r\n<img width=\"1132\" alt=\"image\" src=\"https://user-images.githubusercontent.com/15629702/221453844-ca4c6580-f0cd-4d35-a6a2-330495aa6e49.png\">\r\n\r\n# Desired behaviour\r\n\r\nIt'd be great to give the user the option to have the returned data decoded if the contract abi is available (for example on etherscan). \r\nFor this purpose I'd suggest:\r\n1. Adding a `--decode` flag that results in the data being decoded if the abi is available.\r\n2. Optional: `--return-type` argument that lets the user manually specify the return type for decoding.\r\n\r\nIn the example given above the `cast call` command should return the decoded string \"WETH\" when passed the `--decode` flag.\n\n### Additional context\n\n_No response_",
  "closed_by": {
    "login": "mds1",
    "id": 17163988,
    "node_id": "MDQ6VXNlcjE3MTYzOTg4",
    "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mds1",
    "html_url": "https://github.com/mds1",
    "followers_url": "https://api.github.com/users/mds1/followers",
    "following_url": "https://api.github.com/users/mds1/following{/other_user}",
    "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
    "organizations_url": "https://api.github.com/users/mds1/orgs",
    "repos_url": "https://api.github.com/users/mds1/repos",
    "events_url": "https://api.github.com/users/mds1/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mds1/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/4435/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4435/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1445562123",
    "html_url": "https://github.com/foundry-rs/foundry/issues/4435#issuecomment-1445562123",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4435",
    "id": 1445562123,
    "node_id": "IC_kwDOGBlvNc5WKYcL",
    "user": {
      "login": "ckoopmann",
      "id": 15629702,
      "node_id": "MDQ6VXNlcjE1NjI5NzAy",
      "avatar_url": "https://avatars.githubusercontent.com/u/15629702?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ckoopmann",
      "html_url": "https://github.com/ckoopmann",
      "followers_url": "https://api.github.com/users/ckoopmann/followers",
      "following_url": "https://api.github.com/users/ckoopmann/following{/other_user}",
      "gists_url": "https://api.github.com/users/ckoopmann/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ckoopmann/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ckoopmann/subscriptions",
      "organizations_url": "https://api.github.com/users/ckoopmann/orgs",
      "repos_url": "https://api.github.com/users/ckoopmann/repos",
      "events_url": "https://api.github.com/users/ckoopmann/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ckoopmann/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-02-27T02:04:10Z",
    "updated_at": "2023-02-27T02:04:10Z",
    "author_association": "CONTRIBUTOR",
    "body": "I'd love to implement this if judged desirable. \r\nShould be rather straightforward to implement imo as we have similar decoding happening elsewhere already. (For example in the traces shown by `cast run`). ",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1445562123/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1447789123",
    "html_url": "https://github.com/foundry-rs/foundry/issues/4435#issuecomment-1447789123",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4435",
    "id": 1447789123,
    "node_id": "IC_kwDOGBlvNc5WS4JD",
    "user": {
      "login": "k1rill-fedoseev",
      "id": 29590423,
      "node_id": "MDQ6VXNlcjI5NTkwNDIz",
      "avatar_url": "https://avatars.githubusercontent.com/u/29590423?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/k1rill-fedoseev",
      "html_url": "https://github.com/k1rill-fedoseev",
      "followers_url": "https://api.github.com/users/k1rill-fedoseev/followers",
      "following_url": "https://api.github.com/users/k1rill-fedoseev/following{/other_user}",
      "gists_url": "https://api.github.com/users/k1rill-fedoseev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/k1rill-fedoseev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/k1rill-fedoseev/subscriptions",
      "organizations_url": "https://api.github.com/users/k1rill-fedoseev/orgs",
      "repos_url": "https://api.github.com/users/k1rill-fedoseev/repos",
      "events_url": "https://api.github.com/users/k1rill-fedoseev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/k1rill-fedoseev/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-02-28T08:47:03Z",
    "updated_at": "2023-02-28T08:47:03Z",
    "author_association": "NONE",
    "body": "Seems like the following already does what you want:\r\n```\r\n$ cast call --rpc-url https://cloudflare-eth.com 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2 \"symbol() (string)\"\r\nWETH\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1447789123/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1448268350",
    "html_url": "https://github.com/foundry-rs/foundry/issues/4435#issuecomment-1448268350",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4435",
    "id": 1448268350,
    "node_id": "IC_kwDOGBlvNc5WUtI-",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-02-28T14:22:58Z",
    "updated_at": "2023-02-28T14:22:58Z",
    "author_association": "COLLABORATOR",
    "body": "Yep exactly what @k1rill-fedoseev said! This is already supported. Another example is `cast call $weth \"balanceOf(address)(uint256)\" vitalik.eth`",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1448268350/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
