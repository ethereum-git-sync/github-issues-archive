{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/6875",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/6875/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/6875/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/6875/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/6875",
  "id": 2093817034,
  "node_id": "I_kwDOGBlvNc58zRzK",
  "number": 6875,
  "title": "forge coverage does not work for specific contract",
  "user": {
    "login": "ismailcanvardar",
    "id": 26247827,
    "node_id": "MDQ6VXNlcjI2MjQ3ODI3",
    "avatar_url": "https://avatars.githubusercontent.com/u/26247827?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ismailcanvardar",
    "html_url": "https://github.com/ismailcanvardar",
    "followers_url": "https://api.github.com/users/ismailcanvardar/followers",
    "following_url": "https://api.github.com/users/ismailcanvardar/following{/other_user}",
    "gists_url": "https://api.github.com/users/ismailcanvardar/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ismailcanvardar/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ismailcanvardar/subscriptions",
    "organizations_url": "https://api.github.com/users/ismailcanvardar/orgs",
    "repos_url": "https://api.github.com/users/ismailcanvardar/repos",
    "events_url": "https://api.github.com/users/ismailcanvardar/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ismailcanvardar/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3334394228,
      "node_id": "MDU6TGFiZWwzMzM0Mzk0MjI4",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-bug",
      "name": "T-bug",
      "color": "d73a4a",
      "default": false,
      "description": "Type: bug"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 3,
  "created_at": "2024-01-22T12:33:39Z",
  "updated_at": "2024-01-27T00:43:50Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "### Component\r\n\r\nForge\r\n\r\n### Have you ensured that all of these are up to date?\r\n\r\n- [X] Foundry\r\n- [X] Foundryup\r\n\r\n### What version of Foundry are you on?\r\n\r\nforge 0.2.0 (9e3ab9b 2024-01-04T00:18:01.892563000Z)\r\n\r\n### What command(s) is the bug in?\r\n\r\nforge coverage\r\n\r\n### Operating System\r\n\r\nmacOS (Apple Silicon)\r\n\r\n### Describe the bug\r\n\r\nHi there, I've upgraded Uniswap V2 contracts to solidity v0.8.21 & I added unit tests for each contract such as Router, Pair, Factory etc. So, my issue is even my test suites totally covers the contracts that i mentioned, Router contract's coverage does not increment. I tried to remove override tags, IRouter interface inheritance, and converted internal functions to public functions. Consequently, I did not get any solution by doing these methods.\r\n\r\n<details>\r\n<summary>Here's the Router.t.sol;</summary>\r\n\r\n```\r\n// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.8.21;\r\n\r\nimport { Test } from \"forge-std/Test.sol\";\r\nimport \"forge-std/console.sol\";\r\n\r\nimport { WETH } from \"vectorized/solady/tokens/WETH.sol\";\r\nimport \"openzeppelin-contracts/contracts/utils/math/Math.sol\";\r\n\r\nimport { Pair } from \"../../src/core/Pair.sol\";\r\nimport { Router } from \"../../src/helpers/Router.sol\";\r\nimport { PairFactory } from \"../../src/core/PairFactory.sol\";\r\nimport { RouterLib } from \"../../src/libraries/RouterLib.sol\";\r\n\r\nimport { MockERC20 } from \"../mocks/MockERC20.sol\";\r\n\r\ncontract RouterTest is Test {\r\n    uint256 public constant TOKEN_A_TOTAL_SUPPLY = 115_792_089_237_316_195_423_570_985e18;\r\n    uint256 public constant TOKEN_B_TOTAL_SUPPLY = 115_792_089_237_316_195_423_570_985e18;\r\n    bytes32 constant PERMIT_TYPEHASH =\r\n        keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\r\n\r\n    address public feeTo;\r\n    address public sender;\r\n    uint256 public deadline;\r\n    address public feeToSetter;\r\n\r\n    Pair pair;\r\n    WETH weth;\r\n    Router router;\r\n    MockERC20 tokenA;\r\n    MockERC20 tokenB;\r\n    PairFactory pairFactory;\r\n\r\n    //Ordered pair adress\r\n    MockERC20 public token0;\r\n    MockERC20 public token1;\r\n\r\n    receive() external payable { }\r\n\r\n    constructor() { }\r\n\r\n    function setUp() public {\r\n        sender = vm.addr(1);\r\n        feeTo = makeAddr(\"feeTo\");\r\n        deadline = block.timestamp + 1;\r\n        feeToSetter = makeAddr(\"feeToSetter\");\r\n\r\n        tokenA = new MockERC20(\"tokenA\", \"TA\");\r\n        tokenB = new MockERC20(\"tokenB\", \"TB\");\r\n        weth = new WETH();\r\n\r\n        weth.deposit{ value: 20e18 }();\r\n\r\n        pairFactory = new PairFactory(feeToSetter);\r\n        router = new Router(address(pairFactory), address(weth));\r\n\r\n        address createdPairAddress = pairFactory.createPair(address(tokenA), address(tokenB));\r\n        pair = Pair(createdPairAddress);\r\n\r\n        (address _token0, address _token1) = RouterLib.sortTokens(address(tokenA), address(tokenB));\r\n        token0 = MockERC20(_token0);\r\n        token1 = MockERC20(_token1);\r\n\r\n        assertEq(pair.token0(), _token0);\r\n        assertEq(pair.token1(), _token1);\r\n        assertEq(pairFactory.getPair(_token0, _token1), createdPairAddress);\r\n    }\r\n\r\n    function test_ShouldBeSuccess_initialize() public {\r\n        pairFactory = new PairFactory(feeToSetter);\r\n        router = new Router(address(pairFactory), address(weth));\r\n\r\n        assertEq(router.factory(), address(pairFactory));\r\n        assertEq(router.WETH(), address(weth));\r\n    }\r\n\r\n    function test_ShouldBeSuccess_createsPair_addLiquidity() public {\r\n        MockERC20 tokenC = new MockERC20(\"tokenC\", \"TC\");\r\n        MockERC20 tokenD = new MockERC20(\"tokenD\", \"TD\");\r\n\r\n        uint256 token0approveAmount = 1e18;\r\n        uint256 token1approveAmount = 1e18;\r\n\r\n        tokenC.approve(address(router), token0approveAmount);\r\n        tokenD.approve(address(router), token1approveAmount);\r\n\r\n        (uint256 amountA, uint256 amountB, uint256 liquidity) = router.addLiquidity(\r\n            address(tokenC),\r\n            address(tokenD),\r\n            token0approveAmount,\r\n            token1approveAmount,\r\n            token0approveAmount,\r\n            token1approveAmount,\r\n            address(this),\r\n            deadline\r\n        );\r\n\r\n        address pairAddress = pairFactory.getPair(address(tokenC), address(tokenD));\r\n        address createdPairAddress = RouterLib.pairFor(address(pairFactory), address(tokenC), address(tokenD));\r\n\r\n        assertEq(pairAddress, createdPairAddress);\r\n        assertEq(tokenC.balanceOf(address(pairAddress)), amountA);\r\n        assertEq(tokenD.balanceOf(address(pairAddress)), amountB);\r\n        assertEq(Pair(pairAddress).balanceOf(address(this)), liquidity);\r\n        assertEq(Pair(pairAddress).balanceOf(address(0)), Pair(pairAddress).MINIMUM_LIQUIDITY());\r\n        assertEq(Pair(pairAddress).totalSupply(), liquidity + Pair(pairAddress).MINIMUM_LIQUIDITY());\r\n    }\r\n\r\n    function test_ShouldBeSuccess_amountBOptimalIsOk_addLiquidity() public {\r\n        uint256 token0transferAmount = 1e18;\r\n        uint256 token1transferAmount = 1e18;\r\n        (,, uint256 firstLiquidity) = _addLiquidity(token0transferAmount, token1transferAmount);\r\n\r\n        uint256 token0approveAmount = 1e18;\r\n        uint256 token1approveAmount = 2e18;\r\n\r\n        token0.approve(address(router), token0approveAmount);\r\n        token1.approve(address(router), token1approveAmount);\r\n\r\n        (uint256 amountA, uint256 amountB, uint256 secondLiquidity) = router.addLiquidity(\r\n            address(token0),\r\n            address(token1),\r\n            token0approveAmount,\r\n            token1approveAmount,\r\n            1e18,\r\n            1e17,\r\n            address(this),\r\n            deadline\r\n        );\r\n\r\n        (uint112 _reserve0, uint112 _reserve1,) = pair.getReserves();\r\n        uint256 amountBOptimal = RouterLib.quote(token0approveAmount, _reserve0, _reserve1);\r\n\r\n        assertEq(amountA, token0approveAmount);\r\n        assertEq(amountB, amountBOptimal);\r\n        assertEq(pair.balanceOf(address(this)), firstLiquidity + secondLiquidity);\r\n    }\r\n\r\n    function test_ShouldBeSuccess_amountBOptimalIsTooHigh_addLiquidity() public {\r\n        uint256 token0transferAmount = 10e18;\r\n        uint256 token1transferAmount = 5e18;\r\n        (,, uint256 firstLiquidity) = _addLiquidity(token0transferAmount, token1transferAmount);\r\n\r\n        uint256 token0approveAmount = 2e18;\r\n        uint256 token1approveAmount = 1e18;\r\n\r\n        token0.approve(address(router), token0approveAmount);\r\n        token1.approve(address(router), token1approveAmount);\r\n\r\n        (uint112 _reserve0, uint112 _reserve1,) = pair.getReserves();\r\n        uint256 amountBOptimal = RouterLib.quote(token0approveAmount, _reserve0, _reserve1);\r\n\r\n        uint256 nonOptimal = amountBOptimal - 1e17;\r\n\r\n        uint256 amountAOptimal = RouterLib.quote(nonOptimal, _reserve1, _reserve0);\r\n\r\n        (uint256 amountA, uint256 amountB, uint256 secondLiquidity) = router.addLiquidity(\r\n            address(token0),\r\n            address(token1),\r\n            token0approveAmount,\r\n            nonOptimal,\r\n            amountAOptimal,\r\n            token1approveAmount,\r\n            address(this),\r\n            deadline\r\n        );\r\n\r\n        assertEq(amountA, amountAOptimal);\r\n        assertEq(amountB, nonOptimal);\r\n        assertEq(pair.balanceOf(address(this)), firstLiquidity + secondLiquidity);\r\n    }\r\n\r\n    function test_ShouldBeSuccess_noPair_addLiquidityETH() public {\r\n        uint256 token0approveAmount = 1e18;\r\n        uint256 WETHapproveAmount = 2e18;\r\n\r\n        token0.approve(address(router), token0approveAmount);\r\n        weth.approve(address(router), WETHapproveAmount);\r\n\r\n        (uint256 amountA, uint256 amountB, uint256 secondLiquidity) = router.addLiquidityETH{ value: 2e18 }(\r\n            address(token0), token0approveAmount, 1e18, 1e17, address(this), deadline\r\n        );\r\n\r\n        address pairAddress = pairFactory.getPair(address(token0), address(weth));\r\n\r\n        (uint112 _reserve0, uint112 _reserve1,) = Pair(pairAddress).getReserves();\r\n        uint256 amountBOptimal = RouterLib.quote(token0approveAmount, _reserve0, _reserve1);\r\n\r\n        assertEq(amountA, token0approveAmount);\r\n        assertEq(amountB, amountBOptimal);\r\n        assertEq(Pair(pairAddress).balanceOf(address(this)), secondLiquidity);\r\n    }\r\n\r\n    function test_ShouldBeSuccess_removeLiquidity() public {\r\n        uint256 token0TransferAmount = 1e18;\r\n        uint256 token1TransferAmount = 1e18;\r\n\r\n        (uint256 amountA, uint256 amountB, uint256 liquidity) =\r\n            _addLiquidity(token0TransferAmount, token1TransferAmount);\r\n\r\n        pair.approve(address(router), liquidity);\r\n\r\n        (uint256 _amountA, uint256 _amountB) = router.removeLiquidity(\r\n            address(token0),\r\n            address(token1),\r\n            liquidity,\r\n            token0TransferAmount - pair.MINIMUM_LIQUIDITY(),\r\n            token1TransferAmount - pair.MINIMUM_LIQUIDITY(),\r\n            address(this),\r\n            deadline\r\n        );\r\n\r\n        (uint256 reserve0, uint256 reserve1,) = pair.getReserves();\r\n        assertEq(uint112(token0.balanceOf(address(pair))), reserve0);\r\n        assertEq(uint112(token1.balanceOf(address(pair))), reserve1);\r\n\r\n        assertEq(pair.balanceOf(address(this)), 0);\r\n        assertEq(pair.totalSupply(), pair.MINIMUM_LIQUIDITY());\r\n        assertEq(token0.balanceOf(address(this)), TOKEN_A_TOTAL_SUPPLY - amountA + _amountA);\r\n        assertEq(token1.balanceOf(address(this)), TOKEN_B_TOTAL_SUPPLY - amountB + _amountB);\r\n    }\r\n\r\n    function test_ShouldBeSuccess_removeLiquidityETH() public {\r\n        uint256 token0approveAmount = 1e18;\r\n        uint256 WETHapproveAmount = 1e18;\r\n\r\n        token0.approve(address(router), token0approveAmount);\r\n        weth.approve(address(router), WETHapproveAmount);\r\n\r\n        (uint256 amountA,, uint256 liquidity) = router.addLiquidityETH{ value: 1e18 }(\r\n            address(token0), token0approveAmount, 1e18, 1e18, address(this), deadline\r\n        );\r\n\r\n        address pairAddress = pairFactory.getPair(address(token0), address(weth));\r\n\r\n        Pair(pairAddress).approve(address(router), liquidity);\r\n\r\n        (uint256 _amountA, uint256 _amountB) = router.removeLiquidity(\r\n            address(token0),\r\n            address(weth),\r\n            liquidity,\r\n            token0approveAmount - pair.MINIMUM_LIQUIDITY(),\r\n            WETHapproveAmount - pair.MINIMUM_LIQUIDITY(),\r\n            address(this),\r\n            deadline\r\n        );\r\n\r\n        (uint256 reserve0, uint256 reserve1,) = Pair(pairAddress).getReserves();\r\n        assertEq(uint112(token0.balanceOf(address(pairAddress))), reserve0);\r\n        assertEq(uint112(weth.balanceOf(address(pairAddress))), reserve1);\r\n\r\n        assertEq(Pair(pairAddress).balanceOf(address(this)), 0);\r\n        assertEq(Pair(pairAddress).totalSupply(), pair.MINIMUM_LIQUIDITY());\r\n        assertEq(token0.balanceOf(address(this)), TOKEN_A_TOTAL_SUPPLY - amountA + _amountA);\r\n        assertEq(weth.balanceOf(address(this)), 20e18 + _amountB);\r\n    }\r\n\r\n    function test_ShouldBeSuccess_partially_removeLiquidity() public {\r\n        uint256 token0TransferAmount = 1e18;\r\n        uint256 token1TransferAmount = 1e18;\r\n\r\n        (uint256 amountA, uint256 amountB, uint256 liquidity) =\r\n            _addLiquidity(token0TransferAmount, token1TransferAmount);\r\n\r\n        uint256 calculateLiquidity = (liquidity * 3) / 10;\r\n        pair.approve(address(router), calculateLiquidity);\r\n\r\n        (uint256 _amountA, uint256 _amountB) = router.removeLiquidity(\r\n            address(tokenA),\r\n            address(tokenB),\r\n            calculateLiquidity,\r\n            0.3 ether - 3e16,\r\n            0.3 ether - 3e16,\r\n            address(this),\r\n            deadline\r\n        );\r\n\r\n        (uint256 reserve0, uint256 reserve1,) = pair.getReserves();\r\n        assertEq(uint112(token0.balanceOf(address(pair))), reserve0);\r\n        assertEq(uint112(token1.balanceOf(address(pair))), reserve1);\r\n\r\n        assertEq(pair.balanceOf(address(this)), liquidity - calculateLiquidity);\r\n        assertEq(token0.balanceOf(address(this)), TOKEN_A_TOTAL_SUPPLY - amountA + _amountA);\r\n        assertEq(token1.balanceOf(address(this)), TOKEN_B_TOTAL_SUPPLY - amountB + _amountB);\r\n        assertEq(pair.totalSupply(), (liquidity + pair.MINIMUM_LIQUIDITY()) - calculateLiquidity);\r\n    }\r\n\r\n    function test_ShouldBeSuccess_removeLiquidityWithPermit() public {\r\n        token0.transfer(sender, 5e18);\r\n        token1.transfer(sender, 5e18);\r\n\r\n        vm.startPrank(sender);\r\n\r\n        token0.approve(address(router), 1e18);\r\n        token1.approve(address(router), 1e18);\r\n\r\n        (uint256 amountA, uint256 amountB, uint256 liquidity) =\r\n            router.addLiquidity(address(token0), address(token1), 1e18, 1e18, 1e18, 1e18, sender, deadline);\r\n\r\n        bytes32 permitMeesageHash =\r\n            _getPermitHash(pair, sender, address(router), liquidity, pair.nonces(sender), deadline);\r\n\r\n        (uint8 v, bytes32 r, bytes32 s) = vm.sign(1, permitMeesageHash);\r\n\r\n        (uint256 _amountA, uint256 _amountB) = router.removeLiquidityWithPermit(\r\n            address(token0),\r\n            address(token1),\r\n            liquidity,\r\n            1e18 - pair.MINIMUM_LIQUIDITY(),\r\n            1e18 - pair.MINIMUM_LIQUIDITY(),\r\n            sender,\r\n            deadline,\r\n            false,\r\n            v,\r\n            r,\r\n            s\r\n        );\r\n\r\n        (uint256 reserve0, uint256 reserve1,) = pair.getReserves();\r\n        assertEq(uint112(token0.balanceOf(address(pair))), reserve0);\r\n        assertEq(uint112(token1.balanceOf(address(pair))), reserve1);\r\n\r\n        assertEq(pair.balanceOf(sender), 0);\r\n        assertEq(pair.totalSupply(), pair.MINIMUM_LIQUIDITY());\r\n        assertEq(token0.balanceOf(sender), 5e18 - amountA + _amountA);\r\n        assertEq(token1.balanceOf(sender), 5e18 - amountB + _amountB);\r\n    }\r\n\r\n    function test_ShouldBeSuccess_removeLiquidityETHWithPermit() public {\r\n        vm.deal(sender, 1e18);\r\n        token0.transfer(sender, 5e18);\r\n        weth.transfer(sender, 5e18);\r\n\r\n        vm.startPrank(sender);\r\n\r\n        token0.approve(address(router), 1e18);\r\n        weth.approve(address(router), 1e18);\r\n\r\n        (uint256 amountA,, uint256 liquidity) =\r\n            router.addLiquidityETH{ value: 1e18 }(address(token0), 1e18, 1e18, 1e18, sender, deadline);\r\n\r\n        address pairAddress = pairFactory.getPair(address(token0), address(weth));\r\n\r\n        bytes32 permitMeesageHash = _getPermitHash(\r\n            Pair(pairAddress), sender, address(router), liquidity, Pair(pairAddress).nonces(sender), deadline\r\n        );\r\n\r\n        (uint8 v, bytes32 r, bytes32 s) = vm.sign(1, permitMeesageHash);\r\n\r\n        (uint256 _amountA,) = router.removeLiquidityETHWithPermit(\r\n            address(token0),\r\n            liquidity,\r\n            1e18 - Pair(pairAddress).MINIMUM_LIQUIDITY(),\r\n            1e18 - Pair(pairAddress).MINIMUM_LIQUIDITY(),\r\n            sender,\r\n            deadline,\r\n            false,\r\n            v,\r\n            r,\r\n            s\r\n        );\r\n\r\n        (uint256 reserve0, uint256 reserve1,) = Pair(pairAddress).getReserves();\r\n        assertEq(uint112(token0.balanceOf(address(pairAddress))), reserve0);\r\n        assertEq(uint112(weth.balanceOf(address(pairAddress))), reserve1);\r\n\r\n        assertEq(Pair(pairAddress).balanceOf(sender), 0);\r\n        assertEq(Pair(pairAddress).totalSupply(), pair.MINIMUM_LIQUIDITY());\r\n        assertEq(token0.balanceOf(sender), 5e18 - amountA + _amountA);\r\n        assertEq(weth.balanceOf(sender), 5e18);\r\n    }\r\n\r\n    function test_ShouldBeSuccess_removeLiquidityETHSupportingFeeOnTransferTokens() public {\r\n        uint256 token0approveAmount = 1e18;\r\n        uint256 WETHapproveAmount = 1e18;\r\n\r\n        token0.approve(address(router), token0approveAmount);\r\n        weth.approve(address(router), WETHapproveAmount);\r\n\r\n        (,, uint256 liquidity) = router.addLiquidityETH{ value: 1e18 }(\r\n            address(token0), token0approveAmount, 1e18, 1e18, address(this), deadline\r\n        );\r\n\r\n        address pairAddress = pairFactory.getPair(address(token0), address(weth));\r\n\r\n        Pair(pairAddress).approve(address(router), liquidity);\r\n\r\n        (uint256 _amountEth) = router.removeLiquidityETHSupportingFeeOnTransferTokens(\r\n            address(token0),\r\n            liquidity,\r\n            token0approveAmount - pair.MINIMUM_LIQUIDITY(),\r\n            WETHapproveAmount - pair.MINIMUM_LIQUIDITY(),\r\n            address(this),\r\n            deadline\r\n        );\r\n\r\n        (uint256 reserve0, uint256 reserve1,) = Pair(pairAddress).getReserves();\r\n        assertEq(uint112(token0.balanceOf(address(pairAddress))), reserve0);\r\n        assertEq(uint112(weth.balanceOf(address(pairAddress))), reserve1);\r\n\r\n        assertEq(Pair(pairAddress).balanceOf(address(this)), 0);\r\n        assertEq(Pair(pairAddress).totalSupply(), pair.MINIMUM_LIQUIDITY());\r\n        assertEq(token0.balanceOf(address(this)), TOKEN_A_TOTAL_SUPPLY - 1e18 + _amountEth);\r\n        assertEq(weth.balanceOf(address(this)), 20e18);\r\n    }\r\n\r\n    function test_ShouldBeSuccess_removeLiquidityETHWithPermitSupportingFeeOnTransferTokens() public {\r\n        vm.deal(sender, 1e18);\r\n        token0.transfer(sender, 5e18);\r\n        weth.transfer(sender, 5e18);\r\n\r\n        vm.startPrank(sender);\r\n\r\n        token0.approve(address(router), 1e18);\r\n        weth.approve(address(router), 1e18);\r\n\r\n        (uint256 amountA,, uint256 liquidity) =\r\n            router.addLiquidityETH{ value: 1e18 }(address(token0), 1e18, 1e18, 1e18, sender, deadline);\r\n\r\n        address pairAddress = pairFactory.getPair(address(token0), address(weth));\r\n\r\n        bytes32 permitMeesageHash = _getPermitHash(\r\n            Pair(pairAddress), sender, address(router), liquidity, Pair(pairAddress).nonces(sender), deadline\r\n        );\r\n\r\n        (uint8 v, bytes32 r, bytes32 s) = vm.sign(1, permitMeesageHash);\r\n\r\n        (uint256 _amountETH) = router.removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n            address(token0),\r\n            liquidity,\r\n            1e18 - Pair(pairAddress).MINIMUM_LIQUIDITY(),\r\n            1e18 - Pair(pairAddress).MINIMUM_LIQUIDITY(),\r\n            sender,\r\n            deadline,\r\n            false,\r\n            v,\r\n            r,\r\n            s\r\n        );\r\n\r\n        (uint256 reserve0, uint256 reserve1,) = Pair(pairAddress).getReserves();\r\n        assertEq(uint112(token0.balanceOf(address(pairAddress))), reserve0);\r\n        assertEq(uint112(weth.balanceOf(address(pairAddress))), reserve1);\r\n\r\n        assertEq(Pair(pairAddress).balanceOf(sender), 0);\r\n        assertEq(Pair(pairAddress).totalSupply(), pair.MINIMUM_LIQUIDITY());\r\n        assertEq(token0.balanceOf(sender), 5e18 - amountA + _amountETH);\r\n        assertEq(weth.balanceOf(sender), 5e18);\r\n    }\r\n\r\n    function test_ShouldBeSuccess_swapExactTokensForTokens() public {\r\n        uint256 WETHTransferAmount = 1e18;\r\n        uint256 token0TransferAmount = 1e18;\r\n        uint256 token1TransferAmount = 1e18;\r\n\r\n        _addLiquidity(token0TransferAmount, token1TransferAmount);\r\n\r\n        token1.approve(address(router), token1TransferAmount);\r\n        weth.approve(address(router), WETHTransferAmount);\r\n\r\n        router.addLiquidityETH{ value: 1e18 }(\r\n            address(token1), token1TransferAmount, 1e18, 1e18, address(this), deadline\r\n        );\r\n\r\n        address[] memory path = new address[](3);\r\n        path[0] = address(token0);\r\n        path[1] = address(token1);\r\n        path[2] = address(weth);\r\n\r\n        uint256 amount1Out = RouterLib.getAmountOut(3e17, 1e18, 1e18);\r\n        uint256 amount2Out = RouterLib.getAmountOut(amount1Out, 1e18, 1e18);\r\n\r\n        token0.approve(address(router), 3e17);\r\n        router.swapExactTokensForTokens(3e17, 1e17, path, address(this), deadline);\r\n\r\n        assertEq(token0.balanceOf(address(this)), TOKEN_A_TOTAL_SUPPLY - 1e18 - 3e17);\r\n        assertEq(token1.balanceOf(address(this)), TOKEN_B_TOTAL_SUPPLY - 2e18);\r\n        assertEq(weth.balanceOf(address(this)), 20e18 + amount2Out);\r\n    }\r\n\r\n    function test_ShouldBeSuccess_swapTokensForExactTokens() public {\r\n        uint256 WETHTransferAmount = 1e18;\r\n        uint256 token0TransferAmount = 1e18;\r\n        uint256 token1TransferAmount = 1e18;\r\n\r\n        _addLiquidity(token0TransferAmount, token1TransferAmount);\r\n\r\n        token1.approve(address(router), token1TransferAmount);\r\n        weth.approve(address(router), WETHTransferAmount);\r\n\r\n        router.addLiquidityETH{ value: 1e18 }(\r\n            address(token1), token1TransferAmount, 1e18, 1e18, address(this), deadline\r\n        );\r\n\r\n        address[] memory path = new address[](3);\r\n        path[0] = address(token0);\r\n        path[1] = address(token1);\r\n        path[2] = address(weth);\r\n\r\n        uint256 amount1Out = RouterLib.getAmountOut(3e17, 1e18, 1e18);\r\n        uint256 amount2Out = RouterLib.getAmountOut(amount1Out, 1e18, 1e18);\r\n\r\n        token0.approve(address(router), 3e17);\r\n        router.swapTokensForExactTokens(amount2Out, 3e17, path, address(this), deadline);\r\n\r\n        assertEq(token0.balanceOf(address(this)), TOKEN_A_TOTAL_SUPPLY - 1e18 - 3e17);\r\n        assertEq(token1.balanceOf(address(this)), TOKEN_B_TOTAL_SUPPLY - 2e18);\r\n        assertEq(weth.balanceOf(address(this)), 20e18 + amount2Out);\r\n    }\r\n\r\n    function test_ShouldBeSuccess_swapExactETHForTokens() public {\r\n        uint256 WETHTransferAmount = 1e18;\r\n        uint256 token0TransferAmount = 1e18;\r\n        uint256 token1TransferAmount = 1e18;\r\n\r\n        _addLiquidity(token0TransferAmount, token1TransferAmount);\r\n\r\n        token1.approve(address(router), token1TransferAmount);\r\n        weth.approve(address(router), WETHTransferAmount);\r\n\r\n        router.addLiquidityETH{ value: 1e18 }(\r\n            address(token1), token1TransferAmount, 1e18, 1e18, address(this), deadline\r\n        );\r\n\r\n        address[] memory path = new address[](3);\r\n        path[0] = address(weth);\r\n        path[1] = address(token1);\r\n        path[2] = address(token0);\r\n\r\n        uint256 amount1Out = RouterLib.getAmountOut(3e17, 1e18, 1e18);\r\n        uint256 amount2Out = RouterLib.getAmountOut(amount1Out, 1e18, 1e18);\r\n\r\n        weth.approve(address(router), 3e17);\r\n        router.swapExactETHForTokens{ value: 3e17 }(1e17, path, address(this), deadline);\r\n\r\n        assertEq(token0.balanceOf(address(this)), TOKEN_A_TOTAL_SUPPLY - 1e18 + amount2Out);\r\n        assertEq(token1.balanceOf(address(this)), TOKEN_B_TOTAL_SUPPLY - 2e18);\r\n        assertEq(weth.balanceOf(address(this)), 20e18);\r\n    }\r\n\r\n    function test_ShouldBeSuccess_swapTokensForExactETH() public {\r\n        uint256 WETHTransferAmount = 1e18;\r\n        uint256 token0TransferAmount = 1e18;\r\n        uint256 token1TransferAmount = 1e18;\r\n\r\n        _addLiquidity(token0TransferAmount, token1TransferAmount);\r\n\r\n        token1.approve(address(router), token1TransferAmount);\r\n        weth.approve(address(router), WETHTransferAmount);\r\n\r\n        router.addLiquidityETH{ value: 1e18 }(\r\n            address(token1), token1TransferAmount, 1e18, 1e18, address(this), deadline\r\n        );\r\n\r\n        address[] memory path = new address[](3);\r\n        path[0] = address(token0);\r\n        path[1] = address(token1);\r\n        path[2] = address(weth);\r\n\r\n        uint256 amount1Out = RouterLib.getAmountOut(3e17, 1e18, 1e18);\r\n        uint256 amount2Out = RouterLib.getAmountOut(amount1Out, 1e18, 1e18);\r\n\r\n        token0.approve(address(router), 3e17);\r\n        router.swapTokensForExactETH(amount2Out, 3e17, path, address(this), deadline);\r\n\r\n        assertEq(token0.balanceOf(address(this)), TOKEN_A_TOTAL_SUPPLY - 1e18 - 3e17);\r\n        assertEq(token1.balanceOf(address(this)), TOKEN_B_TOTAL_SUPPLY - 2e18);\r\n        assertEq(weth.balanceOf(address(this)), 20e18);\r\n    }\r\n\r\n    function test_ShouldBeSuccess_swapExactTokensForETH() public {\r\n        uint256 WETHTransferAmount = 1e18;\r\n        uint256 token0TransferAmount = 1e18;\r\n        uint256 token1TransferAmount = 1e18;\r\n\r\n        _addLiquidity(token0TransferAmount, token1TransferAmount);\r\n\r\n        token1.approve(address(router), token1TransferAmount);\r\n        weth.approve(address(router), WETHTransferAmount);\r\n\r\n        router.addLiquidityETH{ value: 1e18 }(\r\n            address(token1), token1TransferAmount, 1e18, 1e18, address(this), deadline\r\n        );\r\n\r\n        address[] memory path = new address[](3);\r\n        path[0] = address(token0);\r\n        path[1] = address(token1);\r\n        path[2] = address(weth);\r\n\r\n        token0.approve(address(router), 3e17);\r\n        router.swapExactTokensForETH(3e17, 1e17, path, address(this), deadline);\r\n\r\n        assertEq(token0.balanceOf(address(this)), TOKEN_A_TOTAL_SUPPLY - 1e18 - 3e17);\r\n        assertEq(token1.balanceOf(address(this)), TOKEN_B_TOTAL_SUPPLY - 2e18);\r\n        assertEq(weth.balanceOf(address(this)), 20e18);\r\n    }\r\n\r\n    function test_ShouldBeSuccess_swapETHForExactTokens() public {\r\n        uint256 WETHTransferAmount = 1e18;\r\n        uint256 token0TransferAmount = 1e18;\r\n        uint256 token1TransferAmount = 1e18;\r\n\r\n        _addLiquidity(token0TransferAmount, token1TransferAmount);\r\n\r\n        token1.approve(address(router), token1TransferAmount);\r\n        weth.approve(address(router), WETHTransferAmount);\r\n\r\n        router.addLiquidityETH{ value: 1e18 }(\r\n            address(token1), token1TransferAmount, 1e18, 1e18, address(this), deadline\r\n        );\r\n\r\n        address[] memory path = new address[](3);\r\n        path[0] = address(weth);\r\n        path[1] = address(token1);\r\n        path[2] = address(token0);\r\n\r\n        uint256 amount1Out = RouterLib.getAmountOut(3e17, 1e18, 1e18);\r\n        uint256 amount2Out = RouterLib.getAmountOut(amount1Out, 1e18, 1e18);\r\n\r\n        weth.approve(address(router), 3e17);\r\n        router.swapETHForExactTokens{ value: 3e17 }(amount2Out, path, address(this), deadline);\r\n\r\n        assertEq(token0.balanceOf(address(this)), TOKEN_A_TOTAL_SUPPLY - 1e18 + amount2Out);\r\n        assertEq(token1.balanceOf(address(this)), TOKEN_B_TOTAL_SUPPLY - 2e18);\r\n        assertEq(weth.balanceOf(address(this)), 20e18);\r\n    }\r\n\r\n    function test_ShouldBeSuccess_swapExactTokensForTokensSupportingFeeOnTransferTokens() public {\r\n        uint256 token0TransferAmount = 1e18;\r\n        uint256 token1TransferAmount = 1e18;\r\n\r\n        _addLiquidity(token0TransferAmount, token1TransferAmount);\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(token0);\r\n        path[1] = address(token1);\r\n\r\n        uint256 amount1Out = RouterLib.getAmountOut(3e17, 1e18, 1e18);\r\n\r\n        token0.approve(address(router), 3e17);\r\n        router.swapExactTokensForTokensSupportingFeeOnTransferTokens(3e17, amount1Out, path, address(this), deadline);\r\n\r\n        assertEq(token0.balanceOf(address(this)), TOKEN_A_TOTAL_SUPPLY - 1e18 - 3e17);\r\n        assertEq(token1.balanceOf(address(this)), TOKEN_B_TOTAL_SUPPLY - 1e18 + amount1Out);\r\n    }\r\n\r\n    function test_ShouldBeSuccess_swapExactETHForTokensSupportingFeeOnTransferTokens() public {\r\n        uint256 WETHTransferAmount = 1e18;\r\n        uint256 token0TransferAmount = 1e18;\r\n        uint256 token1TransferAmount = 1e18;\r\n\r\n        _addLiquidity(token0TransferAmount, token1TransferAmount);\r\n\r\n        token1.approve(address(router), token1TransferAmount);\r\n        weth.approve(address(router), WETHTransferAmount);\r\n\r\n        router.addLiquidityETH{ value: 1e18 }(\r\n            address(token1), token1TransferAmount, 1e18, 1e18, address(this), deadline\r\n        );\r\n\r\n        address[] memory path = new address[](3);\r\n        path[0] = address(weth);\r\n        path[1] = address(token1);\r\n        path[2] = address(token0);\r\n\r\n        uint256 amount1Out = RouterLib.getAmountOut(3e17, 1e18, 1e18);\r\n        uint256 amount2Out = RouterLib.getAmountOut(amount1Out, 1e18, 1e18);\r\n\r\n        weth.approve(address(router), 3e17);\r\n        router.swapExactETHForTokensSupportingFeeOnTransferTokens{ value: 3e17 }(1e17, path, address(this), deadline);\r\n\r\n        assertEq(token0.balanceOf(address(this)), TOKEN_A_TOTAL_SUPPLY - 1e18 + amount2Out);\r\n        assertEq(token1.balanceOf(address(this)), TOKEN_B_TOTAL_SUPPLY - 2e18);\r\n        assertEq(weth.balanceOf(address(this)), 20e18);\r\n    }\r\n\r\n    function test_ShouldBeSuccess_swapExactTokensForETHSupportingFeeOnTransferTokens() public {\r\n        uint256 WETHTransferAmount = 1e18;\r\n        uint256 token0TransferAmount = 1e18;\r\n        uint256 token1TransferAmount = 1e18;\r\n\r\n        _addLiquidity(token0TransferAmount, token1TransferAmount);\r\n\r\n        token1.approve(address(router), token1TransferAmount);\r\n        weth.approve(address(router), WETHTransferAmount);\r\n\r\n        router.addLiquidityETH{ value: 1e18 }(\r\n            address(token1), token1TransferAmount, 1e18, 1e18, address(this), deadline\r\n        );\r\n\r\n        address[] memory path = new address[](3);\r\n        path[0] = address(token0);\r\n        path[1] = address(token1);\r\n        path[2] = address(weth);\r\n\r\n        token0.approve(address(router), 3e17);\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(3e17, 1e17, path, address(this), deadline);\r\n\r\n        assertEq(token0.balanceOf(address(this)), TOKEN_A_TOTAL_SUPPLY - 1e18 - 3e17);\r\n        assertEq(token1.balanceOf(address(this)), TOKEN_B_TOTAL_SUPPLY - 2e18);\r\n        assertEq(weth.balanceOf(address(this)), 20e18);\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////////////////\r\n                                      REVERTS\r\n    //////////////////////////////////////////////////////////////////////////*/\r\n\r\n    function test_Revert_insufficientBAmount_addLiquidity() public {\r\n        uint256 token0transferAmount = 1e18;\r\n        uint256 token1transferAmount = 1e18;\r\n        _addLiquidity(token0transferAmount, token1transferAmount);\r\n\r\n        uint256 token0approveAmount = 1e18;\r\n        uint256 token1approveAmount = 2e18;\r\n\r\n        token0.approve(address(router), token0approveAmount);\r\n        token1.approve(address(router), token1approveAmount);\r\n\r\n        vm.expectRevert(Router.InsufficientBAmount.selector);\r\n        router.addLiquidity(\r\n            address(token0),\r\n            address(token1),\r\n            token0approveAmount,\r\n            token1approveAmount,\r\n            token0approveAmount,\r\n            token1approveAmount,\r\n            address(this),\r\n            deadline\r\n        );\r\n    }\r\n\r\n    function test_Revert_insufficientAAmount_addLiquidity() public {\r\n        uint256 token0transferAmount = 1e18;\r\n        uint256 token1transferAmount = 1e18;\r\n        _addLiquidity(token0transferAmount, token1transferAmount);\r\n\r\n        uint256 token0approveAmount = 1e18;\r\n        uint256 token1approveAmount = 2e18;\r\n\r\n        token0.approve(address(router), token0approveAmount);\r\n        token1.approve(address(router), token1approveAmount);\r\n\r\n        vm.expectRevert(Router.InsufficientAAmount.selector);\r\n        router.addLiquidity(\r\n            address(token0),\r\n            address(token1),\r\n            token1approveAmount,\r\n            token0approveAmount,\r\n            token1approveAmount,\r\n            token0approveAmount,\r\n            address(this),\r\n            deadline\r\n        );\r\n    }\r\n\r\n    //function test_Revert_UnableToTransferWETH_addLiquidityETH() public { }\r\n\r\n    function test_Revert_UnableToSendEther_addLiquidityETH() public {\r\n        address erc20Contarct = makeAddr(\"erc20Contarct\");\r\n        vm.etch(erc20Contarct, \"1\");\r\n\r\n        vm.deal(erc20Contarct, 5e18);\r\n        token0.transfer(erc20Contarct, 5e18);\r\n        weth.transfer(erc20Contarct, 5e18);\r\n\r\n        vm.startPrank(erc20Contarct);\r\n\r\n        uint256 token0approveAmount = 1e18;\r\n        uint256 WETHapproveAmount = 1e18;\r\n\r\n        token0.approve(address(router), token0approveAmount);\r\n        weth.approve(address(router), WETHapproveAmount);\r\n\r\n        router.addLiquidityETH{ value: 1e18 }(address(token0), token0approveAmount, 1e18, 1e18, erc20Contarct, deadline);\r\n\r\n        token0.approve(address(router), 1e18);\r\n        weth.approve(address(router), 2e18);\r\n\r\n        vm.expectRevert(Router.UnableToSendEther.selector);\r\n        router.addLiquidityETH{ value: 1e18 }(address(token0), 1e17, 1e18, 1e17, erc20Contarct, deadline);\r\n    }\r\n\r\n    function test_Revert_insufficientAAmount_removeLiquidity() public {\r\n        uint256 token0transferAmount = 1e18;\r\n        uint256 token1transferAmount = 1e18;\r\n        (,, uint256 liquidity) = _addLiquidity(token0transferAmount, token1transferAmount);\r\n\r\n        pair.approve(address(router), liquidity);\r\n\r\n        vm.expectRevert(Router.InsufficientAAmount.selector);\r\n        router.removeLiquidity(\r\n            address(token0),\r\n            address(token1),\r\n            liquidity,\r\n            token0transferAmount,\r\n            token1transferAmount,\r\n            address(this),\r\n            deadline\r\n        );\r\n    }\r\n\r\n    function test_Revert_insufficientBAmount_removeLiquidity() public {\r\n        uint256 token0transferAmount = 1e18;\r\n        uint256 token1transferAmount = 1e18;\r\n        (,, uint256 liquidity) = _addLiquidity(token0transferAmount, token1transferAmount);\r\n\r\n        pair.approve(address(router), liquidity);\r\n\r\n        vm.expectRevert(Router.InsufficientBAmount.selector);\r\n        router.removeLiquidity(\r\n            address(token0),\r\n            address(token1),\r\n            liquidity,\r\n            token0transferAmount - 10 ** 3,\r\n            token1transferAmount,\r\n            address(this),\r\n            deadline\r\n        );\r\n    }\r\n\r\n    function test_Revert_unableToSendEther_removeLiquidityETHSupportingFeeOnTransferTokens() public {\r\n        address erc20Contarct = makeAddr(\"erc20Contarct\");\r\n        vm.etch(erc20Contarct, \"1\");\r\n\r\n        vm.deal(erc20Contarct, 1e18);\r\n        token0.transfer(erc20Contarct, 5e18);\r\n        weth.transfer(erc20Contarct, 5e18);\r\n\r\n        vm.startPrank(erc20Contarct);\r\n\r\n        uint256 token0approveAmount = 1e18;\r\n        uint256 WETHapproveAmount = 1e18;\r\n\r\n        token0.approve(address(router), token0approveAmount);\r\n        weth.approve(address(router), WETHapproveAmount);\r\n\r\n        (,, uint256 liquidity) = router.addLiquidityETH{ value: 1e18 }(\r\n            address(token0), token0approveAmount, 1e18, 1e18, erc20Contarct, deadline\r\n        );\r\n\r\n        address pairAddress = pairFactory.getPair(address(token0), address(weth));\r\n\r\n        Pair(pairAddress).approve(address(router), liquidity);\r\n\r\n        vm.expectRevert(Router.UnableToSendEther.selector);\r\n        router.removeLiquidityETHSupportingFeeOnTransferTokens(\r\n            address(token0),\r\n            liquidity,\r\n            token0approveAmount - 10 ** 3,\r\n            WETHapproveAmount - 10 ** 3,\r\n            erc20Contarct,\r\n            deadline\r\n        );\r\n    }\r\n\r\n    function test_Revert_insufficientOutputAmount_swapExactTokensForTokens() public {\r\n        uint256 WETHTransferAmount = 1e18;\r\n        uint256 token0TransferAmount = 1e18;\r\n        uint256 token1TransferAmount = 1e18;\r\n\r\n        _addLiquidity(token0TransferAmount, token1TransferAmount);\r\n\r\n        token1.approve(address(router), token1TransferAmount);\r\n        weth.approve(address(router), WETHTransferAmount);\r\n\r\n        router.addLiquidityETH{ value: 1e18 }(\r\n            address(token1), token1TransferAmount, 1e18, 1e18, address(this), deadline\r\n        );\r\n\r\n        address[] memory path = new address[](3);\r\n        path[0] = address(token0);\r\n        path[1] = address(token1);\r\n        path[2] = address(weth);\r\n\r\n        token0.approve(address(router), 3e17);\r\n\r\n        vm.expectRevert(Router.InsufficientOutputAmount.selector);\r\n        router.swapExactTokensForTokens(3e17, 1e18, path, address(this), deadline);\r\n    }\r\n\r\n    function test_Revert_excessiveInputAmount_swapTokensForExactTokens() public {\r\n        uint256 WETHTransferAmount = 1e18;\r\n        uint256 token0TransferAmount = 1e18;\r\n        uint256 token1TransferAmount = 1e18;\r\n\r\n        _addLiquidity(token0TransferAmount, token1TransferAmount);\r\n\r\n        token1.approve(address(router), token1TransferAmount);\r\n        weth.approve(address(router), WETHTransferAmount);\r\n\r\n        router.addLiquidityETH{ value: 1e18 }(\r\n            address(token1), token1TransferAmount, 1e18, 1e18, address(this), deadline\r\n        );\r\n\r\n        address[] memory path = new address[](3);\r\n        path[0] = address(token0);\r\n        path[1] = address(token1);\r\n        path[2] = address(weth);\r\n\r\n        uint256 amount1Out = RouterLib.getAmountOut(3e17, 1e18, 1e18);\r\n        uint256 amount2Out = RouterLib.getAmountOut(amount1Out, 1e18, 1e18);\r\n\r\n        token0.approve(address(router), 3e17);\r\n\r\n        vm.expectRevert(Router.ExcessiveInputAmount.selector);\r\n        router.swapTokensForExactTokens(amount2Out, 1e16, path, address(this), deadline);\r\n    }\r\n\r\n    function test_Revert_invalidPath_swapExactETHForTokens() public {\r\n        uint256 WETHTransferAmount = 1e18;\r\n        uint256 token0TransferAmount = 1e18;\r\n        uint256 token1TransferAmount = 1e18;\r\n\r\n        _addLiquidity(token0TransferAmount, token1TransferAmount);\r\n\r\n        token1.approve(address(router), token1TransferAmount);\r\n        weth.approve(address(router), WETHTransferAmount);\r\n\r\n        router.addLiquidityETH{ value: 1e18 }(\r\n            address(token1), token1TransferAmount, 1e18, 1e18, address(this), deadline\r\n        );\r\n\r\n        address[] memory path = new address[](3);\r\n        path[0] = address(token0);\r\n        path[1] = address(token1);\r\n        path[2] = address(weth);\r\n\r\n        weth.approve(address(router), 3e17);\r\n\r\n        vm.expectRevert(Router.InvalidPath.selector);\r\n        router.swapExactETHForTokens{ value: 3e17 }(1e18, path, address(this), deadline);\r\n    }\r\n\r\n    function test_Revert_insufficientOutputAmount_swapExactETHForTokens() public {\r\n        uint256 WETHTransferAmount = 1e18;\r\n        uint256 token0TransferAmount = 1e18;\r\n        uint256 token1TransferAmount = 1e18;\r\n\r\n        _addLiquidity(token0TransferAmount, token1TransferAmount);\r\n\r\n        token1.approve(address(router), token1TransferAmount);\r\n        weth.approve(address(router), WETHTransferAmount);\r\n\r\n        router.addLiquidityETH{ value: 1e18 }(\r\n            address(token1), token1TransferAmount, 1e18, 1e18, address(this), deadline\r\n        );\r\n\r\n        address[] memory path = new address[](3);\r\n        path[0] = address(weth);\r\n        path[1] = address(token1);\r\n        path[2] = address(token0);\r\n\r\n        weth.approve(address(router), 3e17);\r\n\r\n        vm.expectRevert(Router.InsufficientOutputAmount.selector);\r\n        router.swapExactETHForTokens{ value: 3e17 }(1e18, path, address(this), deadline);\r\n    }\r\n\r\n    //function test_Revert_unableToTransferWETH_swapExactETHForTokens() public { }\r\n\r\n    function test_Revert_invalidPath_swapTokensForExactETH() public {\r\n        uint256 WETHTransferAmount = 1e18;\r\n        uint256 token0TransferAmount = 1e18;\r\n        uint256 token1TransferAmount = 1e18;\r\n\r\n        _addLiquidity(token0TransferAmount, token1TransferAmount);\r\n\r\n        token1.approve(address(router), token1TransferAmount);\r\n        weth.approve(address(router), WETHTransferAmount);\r\n\r\n        router.addLiquidityETH{ value: 1e18 }(\r\n            address(token1), token1TransferAmount, 1e18, 1e18, address(this), deadline\r\n        );\r\n\r\n        address[] memory path = new address[](3);\r\n        path[1] = address(weth);\r\n        path[0] = address(token0);\r\n        path[2] = address(token1);\r\n\r\n        uint256 amount1Out = RouterLib.getAmountOut(3e17, 1e18, 1e18);\r\n        uint256 amount2Out = RouterLib.getAmountOut(amount1Out, 1e18, 1e18);\r\n\r\n        token0.approve(address(router), 3e17);\r\n\r\n        vm.expectRevert(Router.InvalidPath.selector);\r\n        router.swapTokensForExactETH(amount2Out, 3e17, path, address(this), deadline);\r\n    }\r\n\r\n    function test_Revert_excessiveInputAmount_swapTokensForExactETH() public {\r\n        uint256 WETHTransferAmount = 1e18;\r\n        uint256 token0TransferAmount = 1e18;\r\n        uint256 token1TransferAmount = 1e18;\r\n\r\n        _addLiquidity(token0TransferAmount, token1TransferAmount);\r\n\r\n        token1.approve(address(router), token1TransferAmount);\r\n        weth.approve(address(router), WETHTransferAmount);\r\n\r\n        router.addLiquidityETH{ value: 1e18 }(\r\n            address(token1), token1TransferAmount, 1e18, 1e18, address(this), deadline\r\n        );\r\n\r\n        address[] memory path = new address[](3);\r\n        path[0] = address(token0);\r\n        path[1] = address(token1);\r\n        path[2] = address(weth);\r\n\r\n        uint256 amount1Out = RouterLib.getAmountOut(3e17, 1e18, 1e18);\r\n        uint256 amount2Out = RouterLib.getAmountOut(amount1Out, 1e18, 1e18);\r\n\r\n        token0.approve(address(router), 3e17);\r\n\r\n        vm.expectRevert(Router.ExcessiveInputAmount.selector);\r\n        router.swapTokensForExactETH(amount2Out, 3e16, path, address(this), deadline);\r\n    }\r\n\r\n    function test_Revert_unableToSendEther_swapTokensForExactETH() public {\r\n        address erc20Contarct = makeAddr(\"erc20Contarct\");\r\n        vm.etch(erc20Contarct, \"1\");\r\n\r\n        vm.deal(erc20Contarct, 1e18);\r\n        token0.transfer(erc20Contarct, 5e18);\r\n        token1.transfer(erc20Contarct, 5e18);\r\n        weth.transfer(erc20Contarct, 5e18);\r\n\r\n        vm.startPrank(erc20Contarct);\r\n\r\n        uint256 WETHTransferAmount = 1e18;\r\n        uint256 token0TransferAmount = 1e18;\r\n        uint256 token1TransferAmount = 1e18;\r\n\r\n        _addLiquidity(token0TransferAmount, token1TransferAmount);\r\n\r\n        token1.approve(address(router), token1TransferAmount);\r\n        weth.approve(address(router), WETHTransferAmount);\r\n\r\n        router.addLiquidityETH{ value: 1e18 }(\r\n            address(token1), token1TransferAmount, 1e18, 1e18, erc20Contarct, deadline\r\n        );\r\n\r\n        address[] memory path = new address[](3);\r\n        path[0] = address(token0);\r\n        path[1] = address(token1);\r\n        path[2] = address(weth);\r\n\r\n        uint256 amount1Out = RouterLib.getAmountOut(3e17, 1e18, 1e18);\r\n        uint256 amount2Out = RouterLib.getAmountOut(amount1Out, 1e18, 1e18);\r\n\r\n        token0.approve(address(router), 3e17);\r\n\r\n        vm.expectRevert(Router.UnableToSendEther.selector);\r\n        router.swapTokensForExactETH(amount2Out, 3e17, path, erc20Contarct, deadline);\r\n    }\r\n\r\n    function test_Revert_invalidPath_swapExactTokensForETH() public {\r\n        uint256 WETHTransferAmount = 1e18;\r\n        uint256 token0TransferAmount = 1e18;\r\n        uint256 token1TransferAmount = 1e18;\r\n\r\n        _addLiquidity(token0TransferAmount, token1TransferAmount);\r\n\r\n        token1.approve(address(router), token1TransferAmount);\r\n        weth.approve(address(router), WETHTransferAmount);\r\n\r\n        router.addLiquidityETH{ value: 1e18 }(\r\n            address(token1), token1TransferAmount, 1e18, 1e18, address(this), deadline\r\n        );\r\n\r\n        address[] memory path = new address[](3);\r\n        path[0] = address(weth);\r\n        path[1] = address(token1);\r\n        path[2] = address(token0);\r\n\r\n        token0.approve(address(router), 3e17);\r\n\r\n        vm.expectRevert(Router.InvalidPath.selector);\r\n        router.swapExactTokensForETH(3e17, 1e17, path, address(this), deadline);\r\n    }\r\n\r\n    function test_Revert_insufficientOutputAmount_swapExactTokensForETH() public {\r\n        uint256 WETHTransferAmount = 1e18;\r\n        uint256 token0TransferAmount = 1e18;\r\n        uint256 token1TransferAmount = 1e18;\r\n\r\n        _addLiquidity(token0TransferAmount, token1TransferAmount);\r\n\r\n        token1.approve(address(router), token1TransferAmount);\r\n        weth.approve(address(router), WETHTransferAmount);\r\n\r\n        router.addLiquidityETH{ value: 1e18 }(\r\n            address(token1), token1TransferAmount, 1e18, 1e18, address(this), deadline\r\n        );\r\n\r\n        address[] memory path = new address[](3);\r\n        path[0] = address(token0);\r\n        path[1] = address(token1);\r\n        path[2] = address(weth);\r\n\r\n        token0.approve(address(router), 3e17);\r\n\r\n        vm.expectRevert(Router.InsufficientOutputAmount.selector);\r\n        router.swapExactTokensForETH(3e17, 1e18, path, address(this), deadline);\r\n    }\r\n\r\n    function test_Revert_unableToSendEther_swapExactTokensForETH() public {\r\n        address erc20Contarct = makeAddr(\"erc20Contarct\");\r\n        vm.etch(erc20Contarct, \"1\");\r\n\r\n        vm.deal(erc20Contarct, 1e18);\r\n        token0.transfer(erc20Contarct, 5e18);\r\n        token1.transfer(erc20Contarct, 5e18);\r\n        weth.transfer(erc20Contarct, 5e18);\r\n\r\n        vm.startPrank(erc20Contarct);\r\n\r\n        uint256 WETHTransferAmount = 1e18;\r\n        uint256 token0TransferAmount = 1e18;\r\n        uint256 token1TransferAmount = 1e18;\r\n\r\n        _addLiquidity(token0TransferAmount, token1TransferAmount);\r\n\r\n        token1.approve(address(router), token1TransferAmount);\r\n        weth.approve(address(router), WETHTransferAmount);\r\n\r\n        router.addLiquidityETH{ value: 1e18 }(\r\n            address(token1), token1TransferAmount, 1e18, 1e18, erc20Contarct, deadline\r\n        );\r\n\r\n        address[] memory path = new address[](3);\r\n        path[0] = address(token0);\r\n        path[1] = address(token1);\r\n        path[2] = address(weth);\r\n\r\n        token0.approve(address(router), 3e17);\r\n\r\n        vm.expectRevert(Router.UnableToSendEther.selector);\r\n        router.swapExactTokensForETH(3e17, 1e17, path, erc20Contarct, deadline);\r\n    }\r\n\r\n    function test_Revert_invalidPath_swapETHForExactTokens() public {\r\n        uint256 WETHTransferAmount = 1e18;\r\n        uint256 token0TransferAmount = 1e18;\r\n        uint256 token1TransferAmount = 1e18;\r\n\r\n        _addLiquidity(token0TransferAmount, token1TransferAmount);\r\n\r\n        token1.approve(address(router), token1TransferAmount);\r\n        weth.approve(address(router), WETHTransferAmount);\r\n\r\n        router.addLiquidityETH{ value: 1e18 }(\r\n            address(token1), token1TransferAmount, 1e18, 1e18, address(this), deadline\r\n        );\r\n\r\n        address[] memory path = new address[](3);\r\n        path[0] = address(token0);\r\n        path[1] = address(token1);\r\n        path[2] = address(weth);\r\n\r\n        uint256 amount1Out = RouterLib.getAmountOut(3e17, 1e18, 1e18);\r\n        uint256 amount2Out = RouterLib.getAmountOut(amount1Out, 1e18, 1e18);\r\n\r\n        weth.approve(address(router), 3e17);\r\n\r\n        vm.expectRevert(Router.InvalidPath.selector);\r\n        router.swapETHForExactTokens{ value: 3e17 }(amount2Out, path, address(this), deadline);\r\n    }\r\n\r\n    function test_Revert_excessiveInputAmount_swapETHForExactTokens() public {\r\n        uint256 WETHTransferAmount = 1e18;\r\n        uint256 token0TransferAmount = 1e18;\r\n        uint256 token1TransferAmount = 1e18;\r\n\r\n        _addLiquidity(token0TransferAmount, token1TransferAmount);\r\n\r\n        token1.approve(address(router), token1TransferAmount);\r\n        weth.approve(address(router), WETHTransferAmount);\r\n\r\n        router.addLiquidityETH{ value: 1e18 }(\r\n            address(token1), token1TransferAmount, 1e18, 1e18, address(this), deadline\r\n        );\r\n\r\n        address[] memory path = new address[](3);\r\n        path[0] = address(weth);\r\n        path[1] = address(token1);\r\n        path[2] = address(token0);\r\n\r\n        uint256 amount1Out = RouterLib.getAmountOut(3e17, 1e18, 1e18);\r\n        uint256 amount2Out = RouterLib.getAmountOut(amount1Out, 1e18, 1e18);\r\n\r\n        weth.approve(address(router), 3e17);\r\n\r\n        vm.expectRevert(Router.ExcessiveInputAmount.selector);\r\n        router.swapETHForExactTokens{ value: 3e16 }(amount2Out, path, address(this), deadline);\r\n    }\r\n\r\n    //function test_Revert_unableToTransferWETH_swapETHForExactTokens() public { }\r\n\r\n    //function test_Revert_unableToSendEther_swapETHForExactTokens() public { }\r\n\r\n    function test_Revert_insufficientOutputAmount_swapExactTokensForTokensSupportingFeeOnTransferTokens() public {\r\n        uint256 token0TransferAmount = 1e18;\r\n        uint256 token1TransferAmount = 1e18;\r\n\r\n        _addLiquidity(token0TransferAmount, token1TransferAmount);\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(token0);\r\n        path[1] = address(token1);\r\n\r\n        token0.approve(address(router), 3e17);\r\n\r\n        vm.expectRevert(Router.InsufficientOutputAmount.selector);\r\n        router.swapExactTokensForTokensSupportingFeeOnTransferTokens(3e17, 1e18, path, address(this), deadline);\r\n    }\r\n\r\n    function test_Revert_invalidPath_swapExactETHForTokensSupportingFeeOnTransferTokens() public {\r\n        uint256 WETHTransferAmount = 1e18;\r\n        uint256 token0TransferAmount = 1e18;\r\n        uint256 token1TransferAmount = 1e18;\r\n\r\n        _addLiquidity(token0TransferAmount, token1TransferAmount);\r\n\r\n        token1.approve(address(router), token1TransferAmount);\r\n        weth.approve(address(router), WETHTransferAmount);\r\n\r\n        router.addLiquidityETH{ value: 1e18 }(\r\n            address(token1), token1TransferAmount, 1e18, 1e18, address(this), deadline\r\n        );\r\n\r\n        address[] memory path = new address[](3);\r\n        path[0] = address(token0);\r\n        path[1] = address(token1);\r\n        path[2] = address(weth);\r\n\r\n        weth.approve(address(router), 3e17);\r\n\r\n        vm.expectRevert(Router.InvalidPath.selector);\r\n        router.swapExactETHForTokensSupportingFeeOnTransferTokens{ value: 3e17 }(1e18, path, address(this), deadline);\r\n    }\r\n\r\n    //function test_Revert_unableToTransferWETH_swapExactETHForTokensSupportingFeeOnTransferTokens() public { }\r\n\r\n    function test_Revert_insufficientOutputAmount_swapExactETHForTokensSupportingFeeOnTransferTokens() public {\r\n        uint256 WETHTransferAmount = 1e18;\r\n        uint256 token0TransferAmount = 1e18;\r\n        uint256 token1TransferAmount = 1e18;\r\n\r\n        _addLiquidity(token0TransferAmount, token1TransferAmount);\r\n\r\n        token1.approve(address(router), token1TransferAmount);\r\n        weth.approve(address(router), WETHTransferAmount);\r\n\r\n        router.addLiquidityETH{ value: 1e18 }(\r\n            address(token1), token1TransferAmount, 1e18, 1e18, address(this), deadline\r\n        );\r\n\r\n        address[] memory path = new address[](3);\r\n        path[0] = address(weth);\r\n        path[1] = address(token1);\r\n        path[2] = address(token0);\r\n\r\n        weth.approve(address(router), 3e17);\r\n\r\n        vm.expectRevert(Router.InsufficientOutputAmount.selector);\r\n        router.swapExactETHForTokensSupportingFeeOnTransferTokens{ value: 3e17 }(1e18, path, address(this), deadline);\r\n    }\r\n\r\n    //function test_Revert_unableToTransferWETH_swapExactTokensForETHSupportingFeeOnTransferTokens() public { }\r\n\r\n    function test_Revert_invalidPath_swapExactTokensForETHSupportingFeeOnTransferTokens() public {\r\n        uint256 WETHTransferAmount = 1e18;\r\n        uint256 token0TransferAmount = 1e18;\r\n        uint256 token1TransferAmount = 1e18;\r\n\r\n        _addLiquidity(token0TransferAmount, token1TransferAmount);\r\n\r\n        token1.approve(address(router), token1TransferAmount);\r\n        weth.approve(address(router), WETHTransferAmount);\r\n\r\n        router.addLiquidityETH{ value: 1e18 }(\r\n            address(token1), token1TransferAmount, 1e18, 1e18, address(this), deadline\r\n        );\r\n\r\n        address[] memory path = new address[](3);\r\n        path[0] = address(weth);\r\n        path[1] = address(token1);\r\n        path[2] = address(token0);\r\n\r\n        token0.approve(address(router), 3e17);\r\n\r\n        vm.expectRevert(Router.InvalidPath.selector);\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(3e17, 1e17, path, address(this), deadline);\r\n    }\r\n\r\n    function test_Revert_insufficientOutputAmount_swapExactTokensForETHSupportingFeeOnTransferTokens() public {\r\n        uint256 WETHTransferAmount = 1e18;\r\n        uint256 token0TransferAmount = 1e18;\r\n        uint256 token1TransferAmount = 1e18;\r\n\r\n        _addLiquidity(token0TransferAmount, token1TransferAmount);\r\n\r\n        token1.approve(address(router), token1TransferAmount);\r\n        weth.approve(address(router), WETHTransferAmount);\r\n\r\n        router.addLiquidityETH{ value: 1e18 }(\r\n            address(token1), token1TransferAmount, 1e18, 1e18, address(this), deadline\r\n        );\r\n\r\n        address[] memory path = new address[](3);\r\n        path[0] = address(token0);\r\n        path[1] = address(token1);\r\n        path[2] = address(weth);\r\n\r\n        token0.approve(address(router), 3e17);\r\n\r\n        vm.expectRevert(Router.InsufficientOutputAmount.selector);\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(3e17, 1e18, path, address(this), deadline);\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////////////////\r\n                                      HELPERS\r\n    //////////////////////////////////////////////////////////////////////////*/\r\n\r\n    function _addLiquidity(\r\n        uint256 _token0Amount,\r\n        uint256 _token1Amount\r\n    )\r\n        private\r\n        returns (uint256 amountA, uint256 amountB, uint256 liquidity)\r\n    {\r\n        token0.approve(address(router), _token0Amount);\r\n        token1.approve(address(router), _token1Amount);\r\n        (amountA, amountB, liquidity) = router.addLiquidity(\r\n            address(token0),\r\n            address(token1),\r\n            _token0Amount,\r\n            _token1Amount,\r\n            _token0Amount,\r\n            _token1Amount,\r\n            address(this),\r\n            deadline\r\n        );\r\n    }\r\n\r\n    function _getPermitHash(\r\n        Pair _pair,\r\n        address _owner,\r\n        address _spender,\r\n        uint256 _value,\r\n        uint256 _nonce,\r\n        uint256 _deadline\r\n    )\r\n        private\r\n        view\r\n        returns (bytes32)\r\n    {\r\n        return keccak256(\r\n            abi.encodePacked(\r\n                \"\\x19\\x01\",\r\n                _pair.DOMAIN_SEPARATOR(),\r\n                keccak256(abi.encode(PERMIT_TYPEHASH, _owner, _spender, _value, _nonce, _deadline))\r\n            )\r\n        );\r\n    }\r\n}\r\n```\r\n</details>\r\n\r\nHere's the coverage result:\r\n\r\nI used `forge coverage` command.\r\n\r\n![Screenshot from 2024-01-22 12-12-05](https://github.com/foundry-rs/foundry/assets/26247827/6461eb9e-d755-4015-9238-e16b32475fb1)\r\n\r\ncc: @PaulRBerg @gakonst \r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/6875/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/6875/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1903944046",
    "html_url": "https://github.com/foundry-rs/foundry/issues/6875#issuecomment-1903944046",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/6875",
    "id": 1903944046,
    "node_id": "IC_kwDOGBlvNc5xe-Fu",
    "user": {
      "login": "PaulRBerg",
      "id": 8782666,
      "node_id": "MDQ6VXNlcjg3ODI2NjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8782666?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PaulRBerg",
      "html_url": "https://github.com/PaulRBerg",
      "followers_url": "https://api.github.com/users/PaulRBerg/followers",
      "following_url": "https://api.github.com/users/PaulRBerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/PaulRBerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PaulRBerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PaulRBerg/subscriptions",
      "organizations_url": "https://api.github.com/users/PaulRBerg/orgs",
      "repos_url": "https://api.github.com/users/PaulRBerg/repos",
      "events_url": "https://api.github.com/users/PaulRBerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PaulRBerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2024-01-22T12:51:25Z",
    "updated_at": "2024-01-22T12:51:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "unfortunately I don't have time to review this, but I've some feedback for future posts (and this post, if you would like to edit it): put your code underneath [collapsible sections](https://docs.github.com/en/get-started/writing-on-github/working-with-advanced-formatting/organizing-information-with-collapsed-sections) so that the core message does not get lost among code.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1903944046/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1912042679",
    "html_url": "https://github.com/foundry-rs/foundry/issues/6875#issuecomment-1912042679",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/6875",
    "id": 1912042679,
    "node_id": "IC_kwDOGBlvNc5x93S3",
    "user": {
      "login": "ismailcanvardar",
      "id": 26247827,
      "node_id": "MDQ6VXNlcjI2MjQ3ODI3",
      "avatar_url": "https://avatars.githubusercontent.com/u/26247827?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ismailcanvardar",
      "html_url": "https://github.com/ismailcanvardar",
      "followers_url": "https://api.github.com/users/ismailcanvardar/followers",
      "following_url": "https://api.github.com/users/ismailcanvardar/following{/other_user}",
      "gists_url": "https://api.github.com/users/ismailcanvardar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ismailcanvardar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ismailcanvardar/subscriptions",
      "organizations_url": "https://api.github.com/users/ismailcanvardar/orgs",
      "repos_url": "https://api.github.com/users/ismailcanvardar/repos",
      "events_url": "https://api.github.com/users/ismailcanvardar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ismailcanvardar/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2024-01-26T13:07:38Z",
    "updated_at": "2024-01-26T13:07:38Z",
    "author_association": "NONE",
    "body": "could anyone please help me with this issue? i am not able to solve this issue.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1912042679/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1912875781",
    "html_url": "https://github.com/foundry-rs/foundry/issues/6875#issuecomment-1912875781",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/6875",
    "id": 1912875781,
    "node_id": "IC_kwDOGBlvNc5yBCsF",
    "user": {
      "login": "KholdStare",
      "id": 836110,
      "node_id": "MDQ6VXNlcjgzNjExMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/836110?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/KholdStare",
      "html_url": "https://github.com/KholdStare",
      "followers_url": "https://api.github.com/users/KholdStare/followers",
      "following_url": "https://api.github.com/users/KholdStare/following{/other_user}",
      "gists_url": "https://api.github.com/users/KholdStare/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/KholdStare/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/KholdStare/subscriptions",
      "organizations_url": "https://api.github.com/users/KholdStare/orgs",
      "repos_url": "https://api.github.com/users/KholdStare/repos",
      "events_url": "https://api.github.com/users/KholdStare/events{/privacy}",
      "received_events_url": "https://api.github.com/users/KholdStare/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2024-01-27T00:43:48Z",
    "updated_at": "2024-01-27T00:43:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "@ismailcanvardar One thing that I always do is disable optimizations for coverage runs. The optimizations inline a lot of code, so there's no way to attribute the runs back to the source code.\r\n\r\nExample `foundry.toml`:\r\n\r\n```toml\r\n# Default \"production\" profile.\r\n[profile.default]\r\nsolc-version = \"0.8.19\"\r\noptimizer = true\r\noptimizer-runs = 20000\r\n\r\n# Use FOUNDRY_PROFILE=lite for quicker compilation, coverage\r\n[profile.lite]\r\noptimizer = false\r\n```\r\n\r\nThen run like:\r\n\r\n```\r\nFOUNDRY_PROFILE=lite forge coverage\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1912875781/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
