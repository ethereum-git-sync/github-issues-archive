{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/2002",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2002/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2002/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2002/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/2002",
  "id": 1273968058,
  "node_id": "I_kwDOGBlvNc5L7zW6",
  "number": 2002,
  "title": "Tx succeeds during simulation but fails when broadcasted for func on contract without constructor on Optimism/Arbitrum fork",
  "user": {
    "login": "chad-js",
    "id": 22300733,
    "node_id": "MDQ6VXNlcjIyMzAwNzMz",
    "avatar_url": "https://avatars.githubusercontent.com/u/22300733?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/chad-js",
    "html_url": "https://github.com/chad-js",
    "followers_url": "https://api.github.com/users/chad-js/followers",
    "following_url": "https://api.github.com/users/chad-js/following{/other_user}",
    "gists_url": "https://api.github.com/users/chad-js/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/chad-js/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/chad-js/subscriptions",
    "organizations_url": "https://api.github.com/users/chad-js/orgs",
    "repos_url": "https://api.github.com/users/chad-js/repos",
    "events_url": "https://api.github.com/users/chad-js/events{/privacy}",
    "received_events_url": "https://api.github.com/users/chad-js/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3334394228,
      "node_id": "MDU6TGFiZWwzMzM0Mzk0MjI4",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-bug",
      "name": "T-bug",
      "color": "d73a4a",
      "default": false,
      "description": "Type: bug"
    },
    {
      "id": 3703752787,
      "node_id": "LA_kwDOGBlvNc7cwshT",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/C-forge",
      "name": "C-forge",
      "color": "5319E7",
      "default": false,
      "description": "Command: forge"
    },
    {
      "id": 4182991461,
      "node_id": "LA_kwDOGBlvNc75U2Jl",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/Cmd-forge-script",
      "name": "Cmd-forge-script",
      "color": "006B75",
      "default": false,
      "description": "Command: forge script"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 11,
  "created_at": "2022-06-16T19:01:14Z",
  "updated_at": "2022-08-23T16:30:37Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "### Component\r\n\r\nAnvil\r\n\r\n### Have you ensured that all of these are up to date?\r\n\r\n- [X] Foundry\r\n- [X] Foundryup\r\n\r\n### What version of Foundry are you on?\r\n\r\nforge 0.2.0 (0962fd3 2022-06-16T18:19:05.497315Z)\r\n\r\n### What command(s) is the bug in?\r\n\r\n_No response_\r\n\r\n### Operating System\r\n\r\nmacOS (Apple Silicon)\r\n\r\n### Describe the bug\r\n\r\nExecuting a contract func that updates storage on a contract that doesn't have a constructor fails on a forked instance of optimism or arbitrum (using anvil). On mainnet and polygon forks, there's no issue.\r\n\r\n```solidity\r\n// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.13;\r\n\r\ncontract Contract {\r\n  address public test;\r\n\r\n  function initialize(address _test) external {\r\n    test = _test;\r\n  }\r\n}\r\n```\r\n```solidity\r\n// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.13;\r\n\r\nimport \"forge-std/Script.sol\";\r\n\r\nimport {Contract} from \"src/Contract.sol\";\r\n\r\ncontract ContractScript is Script {\r\n\r\n    Contract public testContract;\r\n\r\n    function run() public {\r\n        vm.broadcast();\r\n        testContract = new Contract();\r\n\r\n        vm.broadcast();\r\n        testContract.initialize(address(1));\r\n    }\r\n}\r\n```\r\n\r\nWhat's interesting is the simulation is successful, but the actual broadcast tx fails:\r\n```\r\n$ forge script script/Contract.s.sol --rpc-url \"http://127.0.0.1:8545\" --private-key $ANVIL_ACCT_9 --broadcast -vvvv                                                                                            [14:41:16]\r\n[⠒] Compiling...\r\nNothing to compile\r\nTraces:\r\n  [93261] ContractScript::run() \r\n    ├─ [0] VM::broadcast() \r\n    │   └─ ← ()\r\n    ├─ [49699] → new Contract@0x700b6a60ce7eaaea56f065753d8dcb9653dbad35\r\n    │   └─ ← 248 bytes of code\r\n    ├─ [0] VM::broadcast() \r\n    │   └─ ← ()\r\n    ├─ [2502] Contract::initialize(0x0000000000000000000000000000000000000000) \r\n    │   └─ ← ()\r\n    └─ ← ()\r\n\r\n\r\nScript ran successfully.\r\nGas used: 93261\r\n==========================\r\nSimulated On-chain Traces:\r\n\r\n  [106971] → new Contract@0x700b6a60ce7eaaea56f065753d8dcb9653dbad35\r\n    └─ ← 248 bytes of code\r\n\r\n  [23694] Contract::initialize(0x0000000000000000000000000000000000000000) \r\n    └─ ← ()\r\n\r\n\r\n==========================\r\n\r\nEstimated total gas used for script: 131151\r\n\r\nAmount required: 0.000262302 ETH\r\n\r\n==========================\r\n\r\n###\r\nFinding wallets for all the necessary addresses...\r\n##\r\nSending transactions [0 - 1].\r\n⠉ [00:00:00] [#################################################################################################################################################################################################################################################] 2/2 txes (0.0s)\r\nTransactions saved to: broadcast/Contract.s.sol/10/run-latest.json\r\n\r\n##\r\nWaiting for receipts.\r\n⠙ [00:00:07] [#############################################################################################################################################################################################################################################] 2/2 receipts (0.0s)\r\n#####\r\n✅ Hash: 0x616898701db8efc33e972bfb36467311b28cfc49ed863f70dfe2f4a1d48a4c71\r\nContract Address: 0x700b6a60ce7eaaea56f065753d8dcb9653dbad35\r\nBlock: 12064970\r\nPaid: 0.000213942 ETH (106971 gas * 2 gwei)\r\n\r\n\r\n#####\r\n❌ Hash: 0x03db02d9ff00fb3f4e1c6550670aa6c57e8a9361d1e406a34e391e0de5ee0b21\r\nBlock: 12064971\r\nPaid: 0.0000469 ETH (23450 gas * 2 gwei)\r\n\r\n\r\nTransactions saved to: broadcast/Contract.s.sol/10/run-latest.json\r\n\r\nError: \r\n   0: [\"Transaction Failure: 0x03db…0b21\"]\r\n\r\nLocation:\r\n   cli/src/cmd/forge/script/receipts.rs:75\r\n```\r\n\r\nIf you remove logic that updates any storage state, the tx succeeds. ",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/2002/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2002/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1158116444",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2002#issuecomment-1158116444",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2002",
    "id": 1158116444,
    "node_id": "IC_kwDOGBlvNc5FB3Rc",
    "user": {
      "login": "chad-js",
      "id": 22300733,
      "node_id": "MDQ6VXNlcjIyMzAwNzMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/22300733?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chad-js",
      "html_url": "https://github.com/chad-js",
      "followers_url": "https://api.github.com/users/chad-js/followers",
      "following_url": "https://api.github.com/users/chad-js/following{/other_user}",
      "gists_url": "https://api.github.com/users/chad-js/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chad-js/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chad-js/subscriptions",
      "organizations_url": "https://api.github.com/users/chad-js/orgs",
      "repos_url": "https://api.github.com/users/chad-js/repos",
      "events_url": "https://api.github.com/users/chad-js/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chad-js/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-16T20:49:46Z",
    "updated_at": "2022-06-16T20:51:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "I just gave the script I put above a try on prod optimism, the tx for the initialize call [fails there](https://optimistic.etherscan.io/tx/0x1b07ca2cce8b7302dbdb0e4a257c07d19689647c50de8df8a3549a2eedd1a3ff) as well:\r\n\r\n```\r\n$ forge script script/Contract.s.sol --rpc-url $OPTIMISM_RPC_URL --private-key <prvKey> --broadcast --slow -vvvv                                                                                             [16:33:43]\r\n[⠢] Compiling...\r\nNothing to compile\r\nTraces:\r\n  [113155] ContractScript::run() \r\n    ├─ [0] VM::broadcast() \r\n    │   └─ ← ()\r\n    ├─ [49699] → new Contract@0x8eb4600bbab2286a46103f4923866de9653b737b\r\n    │   └─ ← 248 bytes of code\r\n    ├─ [0] VM::broadcast() \r\n    │   └─ ← ()\r\n    ├─ [22402] Contract::initialize(0x0000000000000000000000000000000000000001) \r\n    │   └─ ← ()\r\n    └─ ← ()\r\n\r\n\r\nScript ran successfully.\r\nGas used: 113155\r\n==========================\r\nSimulated On-chain Traces:\r\n\r\n  [106971] → new Contract@0x8eb4600bbab2286a46103f4923866de9653b737b\r\n    └─ ← 248 bytes of code\r\n\r\n  [43606] Contract::initialize(0x0000000000000000000000000000000000000001) \r\n    └─ ← ()\r\n\r\n\r\n==========================\r\n\r\nEstimated total gas used for script: 128175\r\n\r\nAmount required: 0.000000128175 ETH\r\n\r\n==========================\r\n\r\n###\r\nFinding wallets for all the necessary addresses...\r\n##\r\nSending transactions [0 - 1].\r\n⠁ [00:00:00] [########################################################################################################################>------------------------------------------------------------------------------------------------------------------------] 1/2 txes (0.4s)⠉ [00:00:07] [#############################################################################################################################################################################################################################################] 1/1 receipts (0.0s)\r\n#####\r\n✅ Hash: 0x1a972cf266cbfd61a028e1fdd694686130ce4b6dc0c7202bd21212ef775c8589\r\nContract Address: 0x8eb4600bbab2286a46103f4923866de9653b737b\r\nBlock: 12073464\r\nGas Used: 106971\r\n\r\n⠉ [00:00:07] [#################################################################################################################################################################################################################################################] 2/2 txes (0.0s)⠉ [00:00:07] [#############################################################################################################################################################################################################################################] 1/1 receipts (0.0s)\r\n#####\r\n❌ Hash: 0x1b07ca2cce8b7302dbdb0e4a257c07d19689647c50de8df8a3549a2eedd1a3ff\r\nBlock: 12073469\r\nGas Used: 21204\r\n\r\n\r\nTransactions saved to: broadcast/Contract.s.sol/10/run-latest.json\r\n\r\nError: \r\n   0: [\"Transaction Failure: 0x1b07…a3ff\"]\r\n   ```\r\n\r\nBut, notice that executing a tx with the same args but with `cast` and a gas limit of `75000` [results in success](https://optimistic.etherscan.io/tx/0x1493c477c18629ab75f6759f95bed118517f6a4e66602460a2c3643c93486801):\r\n```\r\n$ cast send 0x8eb4600bbab2286a46103f4923866de9653b737b \"initialize(address)\"  0x0000000000000000000000000000000000000001 --gas 75000 --rpc-url $OPTIMISM_RPC_URL --private-key <prvKey>                     [16:41:41]\r\n\r\nblockHash               0xf6c411ec971b21c1ec5c41487929b814bad5be151f4831de7b07d0e36c6a44c0\r\nblockNumber             12074683\r\ncontractAddress         \r\ncumulativeGasUsed       43606\r\neffectiveGasPrice       \r\ngasUsed                 43606\r\nlogs                    []\r\nlogsBloom               0xr\nroot                    \r\nstatus                  1\r\ntransactionHash         0x1493c477c18629ab75f6759f95bed118517f6a4e66602460a2c3643c93486801\r\ntransactionIndex        0\r\ntype                    \r\n```\r\n\r\nSo, seems like this is a gas estimation issue",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1158116444/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1158138997",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2002#issuecomment-1158138997",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2002",
    "id": 1158138997,
    "node_id": "IC_kwDOGBlvNc5FB8x1",
    "user": {
      "login": "gakonst",
      "id": 17802178,
      "node_id": "MDQ6VXNlcjE3ODAyMTc4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17802178?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gakonst",
      "html_url": "https://github.com/gakonst",
      "followers_url": "https://api.github.com/users/gakonst/followers",
      "following_url": "https://api.github.com/users/gakonst/following{/other_user}",
      "gists_url": "https://api.github.com/users/gakonst/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gakonst/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gakonst/subscriptions",
      "organizations_url": "https://api.github.com/users/gakonst/orgs",
      "repos_url": "https://api.github.com/users/gakonst/repos",
      "events_url": "https://api.github.com/users/gakonst/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gakonst/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-16T21:18:29Z",
    "updated_at": "2022-06-16T21:18:29Z",
    "author_association": "MEMBER",
    "body": "Per @mds1 suggestion let's go with the following 2 steps:\r\n\r\n1 Add a broadcast overload that lets you specify the gas limit for the tx, `vm.broadcast(uint256 gasLimit)` and `vm.broadcast(address sender, uint256 gasLimit)`\r\n2. add bespoke logic for each L2, determined by chainId, this will need to be fork-aware when #1715 is merged\r\n\r\ncc @joshieDo \r\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1158138997/reactions",
      "total_count": 4,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1158185606",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2002#issuecomment-1158185606",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2002",
    "id": 1158185606,
    "node_id": "IC_kwDOGBlvNc5FCIKG",
    "user": {
      "login": "joshieDo",
      "id": 93316087,
      "node_id": "U_kgDOBY_j9w",
      "avatar_url": "https://avatars.githubusercontent.com/u/93316087?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/joshieDo",
      "html_url": "https://github.com/joshieDo",
      "followers_url": "https://api.github.com/users/joshieDo/followers",
      "following_url": "https://api.github.com/users/joshieDo/following{/other_user}",
      "gists_url": "https://api.github.com/users/joshieDo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/joshieDo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/joshieDo/subscriptions",
      "organizations_url": "https://api.github.com/users/joshieDo/orgs",
      "repos_url": "https://api.github.com/users/joshieDo/repos",
      "events_url": "https://api.github.com/users/joshieDo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/joshieDo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-16T22:16:03Z",
    "updated_at": "2022-06-16T22:23:51Z",
    "author_association": "COLLABORATOR",
    "body": "We should probably add those broadcast interfaces. However, this is actually a result from another issue. \r\n\r\nSince Arbitrum & Optimism* have different gas calculations, we discard the gas estimated locally, and request a new one from the RPC. To support batching, they're happening at the same time for tx1 and tx2. However, tx2 needs tx1 to be submitted  and accepted first in this case, for the estimation to be a valid one.\r\n\r\nWe should probably force `--slow` on Arbitrum & Optimism* or any other transaction that requires an estimation coming from the RPC. In this case, even with `--slow` it won't work, since we estimate everything before we start sending, which needs to be adjusted as well. \r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1158185606/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1158188333",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2002#issuecomment-1158188333",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2002",
    "id": 1158188333,
    "node_id": "IC_kwDOGBlvNc5FCI0t",
    "user": {
      "login": "joshieDo",
      "id": 93316087,
      "node_id": "U_kgDOBY_j9w",
      "avatar_url": "https://avatars.githubusercontent.com/u/93316087?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/joshieDo",
      "html_url": "https://github.com/joshieDo",
      "followers_url": "https://api.github.com/users/joshieDo/followers",
      "following_url": "https://api.github.com/users/joshieDo/following{/other_user}",
      "gists_url": "https://api.github.com/users/joshieDo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/joshieDo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/joshieDo/subscriptions",
      "organizations_url": "https://api.github.com/users/joshieDo/orgs",
      "repos_url": "https://api.github.com/users/joshieDo/repos",
      "events_url": "https://api.github.com/users/joshieDo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/joshieDo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-16T22:21:00Z",
    "updated_at": "2022-06-16T22:21:00Z",
    "author_association": "COLLABORATOR",
    "body": "I was under the impression Arbitrum and Optimism had different gas metering, but it seems that only Arbitrum has.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1158188333/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1158936417",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2002#issuecomment-1158936417",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2002",
    "id": 1158936417,
    "node_id": "IC_kwDOGBlvNc5FE_dh",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-17T14:37:11Z",
    "updated_at": "2022-06-17T14:37:11Z",
    "author_association": "COLLABORATOR",
    "body": "Just summarizing what we ended up on as the path forward:\r\n1. Remove Optimism from the `has_different_gas_calc` function\r\n\r\nhttps://github.com/foundry-rs/foundry/blob/112bd440c7cc83480612c5e05d71229ceeba7178/cli/src/cmd/forge/script/broadcast.rs#L275-L277\r\nhttps://github.com/foundry-rs/foundry/blob/123ad0a427dc938a0a911eae3332de6576370a51/cli/src/cmd/utils.rs#L199-L205\r\n\r\n2. Force `--slow` on Arbitrum and Optimism. Both of don't have mempools like L1's so if you send multiple txs they get rejected with `nonce too low`.\r\n\r\n3. Move RPC gas estimation right before sending the intended tx, and add a note to the output indicating the \"total gas/ETH cost estimates\" shown beforehand aren't guaranteed to be accurate (since we don't estimate Optimism costs correctly)\r\n\r\n4. This one wasn't settled on, but I think we should change the broadcast overloads to specify margin on the gas estimate, instead of absolute limits. So if I'm estimating gas for a uniswap v2 trade where cost varies by block position, I can do `vm.broadcast(20)` to mean \"add 20% margin to the gas estimate\". IMO this is better UX than needing to harcode gas limits directly.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1158936417/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1160815236",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2002#issuecomment-1160815236",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2002",
    "id": 1160815236,
    "node_id": "IC_kwDOGBlvNc5FMKKE",
    "user": {
      "login": "tynes",
      "id": 6626818,
      "node_id": "MDQ6VXNlcjY2MjY4MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6626818?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tynes",
      "html_url": "https://github.com/tynes",
      "followers_url": "https://api.github.com/users/tynes/followers",
      "following_url": "https://api.github.com/users/tynes/following{/other_user}",
      "gists_url": "https://api.github.com/users/tynes/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tynes/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tynes/subscriptions",
      "organizations_url": "https://api.github.com/users/tynes/orgs",
      "repos_url": "https://api.github.com/users/tynes/repos",
      "events_url": "https://api.github.com/users/tynes/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tynes/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-20T20:17:02Z",
    "updated_at": "2022-06-20T20:17:02Z",
    "author_association": "CONTRIBUTOR",
    "body": "> 2. add bespoke logic for each L2, determined by chainId, this will need to be fork-aware when #1715 is merged\r\n\r\nFor accurate fee estimation on Optimism, the L2 (execution) fee and the L1 (availability) fee needs to be taken into account. See [here](https://github.com/ethereum-optimism/optimism/blob/15abd3de37b01aca5f85bd49eaa2c4aa9ae83a27/packages/sdk/src/l2-provider.ts#L134) for how to do so. If special logic is added that is chain aware, perhaps handling this could just be abstracted away from users. See https://community.optimism.io/docs/developers/build/transaction-fees/#estimating-the-l1-data-fee for a higher level explanation\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1160815236/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1172615569",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2002#issuecomment-1172615569",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2002",
    "id": 1172615569,
    "node_id": "IC_kwDOGBlvNc5F5LGR",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-01T18:35:04Z",
    "updated_at": "2022-07-01T18:35:04Z",
    "author_association": "MEMBER",
    "body": "Was this fixed in #2046 @joshieDo?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1172615569/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1172622177",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2002#issuecomment-1172622177",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2002",
    "id": 1172622177,
    "node_id": "IC_kwDOGBlvNc5F5Mth",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-01T18:46:02Z",
    "updated_at": "2022-07-01T18:46:02Z",
    "author_association": "COLLABORATOR",
    "body": "Of the 4 items listed in my above comment, I believe 1 and 2 are implemented, 3 and 4 are not.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1172622177/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1172959281",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2002#issuecomment-1172959281",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2002",
    "id": 1172959281,
    "node_id": "IC_kwDOGBlvNc5F6fAx",
    "user": {
      "login": "gakonst",
      "id": 17802178,
      "node_id": "MDQ6VXNlcjE3ODAyMTc4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17802178?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gakonst",
      "html_url": "https://github.com/gakonst",
      "followers_url": "https://api.github.com/users/gakonst/followers",
      "following_url": "https://api.github.com/users/gakonst/following{/other_user}",
      "gists_url": "https://api.github.com/users/gakonst/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gakonst/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gakonst/subscriptions",
      "organizations_url": "https://api.github.com/users/gakonst/orgs",
      "repos_url": "https://api.github.com/users/gakonst/repos",
      "events_url": "https://api.github.com/users/gakonst/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gakonst/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-02T20:57:19Z",
    "updated_at": "2022-07-02T20:57:19Z",
    "author_association": "MEMBER",
    "body": "> This one wasn't settled on, but I think we should change the broadcast overloads to specify margin on the gas estimate, instead of absolute limits. So if I'm estimating gas for a uniswap v2 trade where cost varies by block position, I can do vm.broadcast(20) to mean \"add 20% margin to the gas estimate\". IMO this is better UX than needing to harcode gas limits directly.\r\n\r\nI love this idea, just re-read it.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1172959281/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1206990534",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2002#issuecomment-1206990534",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2002",
    "id": 1206990534,
    "node_id": "IC_kwDOGBlvNc5H8TbG",
    "user": {
      "login": "devanoneth",
      "id": 89424366,
      "node_id": "MDQ6VXNlcjg5NDI0MzY2",
      "avatar_url": "https://avatars.githubusercontent.com/u/89424366?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/devanoneth",
      "html_url": "https://github.com/devanoneth",
      "followers_url": "https://api.github.com/users/devanoneth/followers",
      "following_url": "https://api.github.com/users/devanoneth/following{/other_user}",
      "gists_url": "https://api.github.com/users/devanoneth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/devanoneth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/devanoneth/subscriptions",
      "organizations_url": "https://api.github.com/users/devanoneth/orgs",
      "repos_url": "https://api.github.com/users/devanoneth/repos",
      "events_url": "https://api.github.com/users/devanoneth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/devanoneth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-05T22:11:01Z",
    "updated_at": "2022-08-05T22:11:01Z",
    "author_association": "CONTRIBUTOR",
    "body": "Just a small note on all of this, recently stumped me and had to use the `-g` flag.\r\n\r\nCould we also get a better error message if the transaction runs out of gas? `Transaction Failure: 0x1b07…a3ff` is not the most obvious. I'm down to implement this myself, just curious if others would agree or there's some reason we don't currently do that.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1206990534/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1207080993",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2002#issuecomment-1207080993",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2002",
    "id": 1207080993,
    "node_id": "IC_kwDOGBlvNc5H8pgh",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-05T23:11:18Z",
    "updated_at": "2022-08-05T23:11:31Z",
    "author_association": "COLLABORATOR",
    "body": "+1 on @devanonon's comment, haven't gotten around to opening issues yet but here's a related repro with other issues too: https://github.com/mds1/forge-trace-and-script-issue",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1207080993/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
