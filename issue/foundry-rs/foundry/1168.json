{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/1168",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1168/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1168/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1168/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/1168",
  "id": 1189951427,
  "node_id": "I_kwDOGBlvNc5G7TfD",
  "number": 1168,
  "title": "bug: fuzzer dict does not contain immutables",
  "user": {
    "login": "mds1",
    "id": 17163988,
    "node_id": "MDQ6VXNlcjE3MTYzOTg4",
    "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mds1",
    "html_url": "https://github.com/mds1",
    "followers_url": "https://api.github.com/users/mds1/followers",
    "following_url": "https://api.github.com/users/mds1/following{/other_user}",
    "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
    "organizations_url": "https://api.github.com/users/mds1/orgs",
    "repos_url": "https://api.github.com/users/mds1/repos",
    "events_url": "https://api.github.com/users/mds1/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mds1/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3334394228,
      "node_id": "MDU6TGFiZWwzMzM0Mzk0MjI4",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-bug",
      "name": "T-bug",
      "color": "d73a4a",
      "default": false,
      "description": "Type: bug"
    },
    {
      "id": 3394554570,
      "node_id": "LA_kwDOGBlvNc7KVMrK",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/A-fuzzing",
      "name": "A-fuzzing",
      "color": "FBCA04",
      "default": false,
      "description": "Area: fuzzing"
    },
    {
      "id": 3593644915,
      "node_id": "LA_kwDOGBlvNc7WMqtz",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/Cmd-forge-test",
      "name": "Cmd-forge-test",
      "color": "006B75",
      "default": false,
      "description": "Command: forge test"
    },
    {
      "id": 3703752787,
      "node_id": "LA_kwDOGBlvNc7cwshT",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/C-forge",
      "name": "C-forge",
      "color": "5319E7",
      "default": false,
      "description": "Command: forge"
    },
    {
      "id": 3759719259,
      "node_id": "LA_kwDOGBlvNc7gGMNb",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/P-high",
      "name": "P-high",
      "color": "D93F0B",
      "default": false,
      "description": "Priority: high"
    },
    {
      "id": 3759720129,
      "node_id": "LA_kwDOGBlvNc7gGMbB",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/D-hard",
      "name": "D-hard",
      "color": "0E8A16",
      "default": false,
      "description": "Difficulty: hard"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": {
    "login": "onbjerg",
    "id": 8862627,
    "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/onbjerg",
    "html_url": "https://github.com/onbjerg",
    "followers_url": "https://api.github.com/users/onbjerg/followers",
    "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
    "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
    "organizations_url": "https://api.github.com/users/onbjerg/orgs",
    "repos_url": "https://api.github.com/users/onbjerg/repos",
    "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
    "received_events_url": "https://api.github.com/users/onbjerg/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/milestones/1",
    "html_url": "https://github.com/foundry-rs/foundry/milestone/1",
    "labels_url": "https://api.github.com/repos/foundry-rs/foundry/milestones/1/labels",
    "id": 8140456,
    "node_id": "MI_kwDOGBlvNc4AfDao",
    "number": 1,
    "title": "v1.0.0",
    "description": "",
    "creator": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 10,
    "closed_issues": 125,
    "state": "open",
    "created_at": "2022-06-28T08:15:32Z",
    "updated_at": "2023-05-12T14:44:03Z",
    "due_on": null,
    "closed_at": null
  },
  "comments": 5,
  "created_at": "2022-04-01T15:20:55Z",
  "updated_at": "2022-08-25T23:42:26Z",
  "closed_at": "2022-08-25T23:42:26Z",
  "author_association": "COLLABORATOR",
  "active_lock_reason": null,
  "body": "### Component\n\nForge\n\n### Have you ensured that all of these are up to date?\n\n- [X] Foundry\n- [ ] Foundryup\n\n### What version of Foundry are you on?\n\nforge 0.2.0 (233ab70 2022-04-01T00:51:18.292928+00:00)\n\n### What command(s) is the bug in?\n\nforge test\n\n### Operating System\n\nmacOS (amd)\n\n### Describe the bug\n\nBelow is a contract and test that have very little state, so you'd expect both tests to fail relatively quickly because the fuzzer should try using each owner address as input. However, this does not happen, and most of the time these tests pass, whether I use 100 or 100k fuzz runs. I have not yet investigated this, but potential causes:\r\n\r\n1. Values are not actually being added to the dictionary\r\n2. Values improperly encoded/formatted before being added\r\n3. All random fuzz inputs (or other useless state, such as nonces, gas used, etc.) are being added to the dictionary, blowing up its size and making it less likely for the owner addresses to be used\r\n\r\n```solidity\r\npragma solidity 0.8.13;\r\n\r\nimport \"ds-test/test.sol\";\r\nimport \"forge-std/Vm.sol\";\r\n\r\ncontract FuzzerDict {\r\n  // Immutables should get added to the dictionary.\r\n  address public immutable immutableOwner;\r\n  // Regular storage variables should also get added to the dictionary.\r\n  address public storageOwner;\r\n\r\n  constructor(address _immutableOwner, address _storageOwner) {\r\n    immutableOwner = _immutableOwner;\r\n    storageOwner = _storageOwner;\r\n  }\r\n}\r\n\r\ncontract FuzzerDictTest is DSTest {\r\n  FuzzerDict fuzzerDict;\r\n  Vm vm = Vm(HEVM_ADDRESS);\r\n\r\n  function setUp() public {\r\n    fuzzerDict = new FuzzerDict(address(100), address(200));\r\n  }\r\n\r\n  // Fuzzer should try `fuzzerDict.immutableOwner()` as input, causing this to fail\r\n  function testImmutableOwner(address who) public {\r\n    assertTrue(who != fuzzerDict.immutableOwner());\r\n  }\r\n\r\n  // Fuzzer should try `fuzzerDict.storageOwner()` as input, causing this to fail\r\n  function testStorageOwner(address who) public {\r\n    assertTrue(who != fuzzerDict.storageOwner());\r\n  }\r\n}\r\n```",
  "closed_by": {
    "login": "gakonst",
    "id": 17802178,
    "node_id": "MDQ6VXNlcjE3ODAyMTc4",
    "avatar_url": "https://avatars.githubusercontent.com/u/17802178?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/gakonst",
    "html_url": "https://github.com/gakonst",
    "followers_url": "https://api.github.com/users/gakonst/followers",
    "following_url": "https://api.github.com/users/gakonst/following{/other_user}",
    "gists_url": "https://api.github.com/users/gakonst/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/gakonst/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gakonst/subscriptions",
    "organizations_url": "https://api.github.com/users/gakonst/orgs",
    "repos_url": "https://api.github.com/users/gakonst/repos",
    "events_url": "https://api.github.com/users/gakonst/events{/privacy}",
    "received_events_url": "https://api.github.com/users/gakonst/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/1168/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1168/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1086170970",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1168#issuecomment-1086170970",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1168",
    "id": 1086170970,
    "node_id": "IC_kwDOGBlvNc5Avada",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-01T17:38:34Z",
    "updated_at": "2022-04-01T17:38:34Z",
    "author_association": "COLLABORATOR",
    "body": "Here is a gist with the outputs from running `RUST_LOG=foundry_evm=trace forge test --match-contract FuzzerDictTest`. There are two files, one called `debug-256-fuzz-runs.rs`, and `debug-100-fuzz-runs.rs`: https://gist.github.com/mds1/9331b9a35e6d4a6da1f572457c517c93\r\n\r\nI'm assuming rows with `state` are values added to the fuzzer's dict, and rows with `calldata` are the actual test inputs. Assuming that's true, in the 256 run example:\r\n- `address(100)` and `address(200)` correspond to `0x00..064` and `0x00..0c8`, and are not found anywhere in that file\r\n- `0xb4c79dab8f259c7aee6e5b2aa729821864227e84` is the address of the `FuzzerDictTest` test contract. It shows up as `state`, but never as `calldata`\r\n- `0xce71065d4017f316ec606fe4422e11eb2c47c246` is the address of the `FuzzerDict` contract. It never shows up anywhere\r\n\r\nIn the 1000 run example:\r\n- `0x00...064` is added to the state and seems to get used as calldata since the `testImmutableOwner` failure is found. However, `0x00...0c8` is not seen anywhere and the `testStorageOwner` failure is not found\r\n- Both `FuzzerDictTest` and `FuzzerDict` addresses are not seen anywhere\r\n\r\nI have not repeated this analysis multiple times to confirm how consistent these fuzzer state/calldata values are",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1086170970/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1086333582",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1168#issuecomment-1086333582",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1168",
    "id": 1086333582,
    "node_id": "IC_kwDOGBlvNc5AwCKO",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-01T21:18:52Z",
    "updated_at": "2022-04-01T21:21:08Z",
    "author_association": "MEMBER",
    "body": "I don't think we handle immutables. How is the value of `storageOwner` added to the stack (not too familiar with this part of Solidity)? If it's not using `PUSH*`, then we won't find it:\r\n\r\n- We add push bytes (bytes immediately after `PUSH*`)\r\n- We add storage\r\n- We add some information about addresses (i.e. addresses called)\r\n- We add topics/data from logs\r\n\r\nI'm not sure how we would handle immutables tbh\r\n\r\nEdit: Took the liberty of editing the issue title to reflect that this is (most likely) an issue with immutables not being in the fuzz dict, not that the fuzz dict is broken in general",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1086333582/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1086346516",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1168#issuecomment-1086346516",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1168",
    "id": 1086346516,
    "node_id": "IC_kwDOGBlvNc5AwFUU",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-01T21:34:54Z",
    "updated_at": "2022-04-01T21:41:59Z",
    "author_association": "COLLABORATOR",
    "body": "> We add push bytes (bytes immediately after PUSH*)\r\n\r\nSo from the debugger I've confirmed `immutableOwner` is added with PUSH\r\n\r\n<img width=\"400\" alt=\"image\" src=\"https://user-images.githubusercontent.com/17163988/161343884-afbc5c65-3392-4572-b461-ec824a7742b9.png\">\r\n\r\n`storageOwner` is added to the stack via an SLOAD, but given it's in storage I'd expect it to be added to the dict anyway?\r\n\r\n> Took the liberty of editing the issue title to reflect that this is (most likely) an issue with immutables not being in the fuzz dict, not that the fuzz dict is broken in general\r\n\r\nThe above results in that gist are actually showing the opposite. With 1000 fuzz runs we successfully found the failure in `testImmutableOwner` which indicates immutables are in the dict, and we do not find the failure in `testStorageOwner` indicating storage was not in the dict. \r\n\r\nI just ran the tests using the default 256 runs 10 times. Because the state space is so small here I'd expect both to tests to fail almost always (to clarify, we are looking for failures here). However, in practice `testImmutableOwner` only failed once, and `testStorageOwner` never failed",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1086346516/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1086356341",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1168#issuecomment-1086356341",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1168",
    "id": 1086356341,
    "node_id": "IC_kwDOGBlvNc5AwHt1",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-01T21:49:18Z",
    "updated_at": "2022-04-01T21:51:06Z",
    "author_association": "MEMBER",
    "body": "That's really weird and should not be the case at all. I'll have to investigate, but if you want to debug further using `dbg!()` or something, the relevant functions that lift state are:\r\n\r\nFor building the initial state from DB (slots, push bytes etc.):\r\n\r\nhttps://github.com/gakonst/foundry/blob/233ab70b92e4fa451e251c72983af7a0c9f771db/evm/src/fuzz/strategies/state.rs#L50\r\n\r\nFor lifting state from calls:\r\n\r\nhttps://github.com/gakonst/foundry/blob/233ab70b92e4fa451e251c72983af7a0c9f771db/evm/src/fuzz/strategies/state.rs#L78\r\n\r\nEdit: Looking over your trace again, we select `bytes(0)` a lot, which is really odd, too.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1086356341/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1086361751",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1168#issuecomment-1086361751",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1168",
    "id": 1086361751,
    "node_id": "IC_kwDOGBlvNc5AwJCX",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-01T21:56:16Z",
    "updated_at": "2022-04-01T21:56:28Z",
    "author_association": "COLLABORATOR",
    "body": "Great, thanks! I'll try to take a look this weekend / early next week if you don't beat me to it 🙂\r\n\r\nAm I interpreting that trace correctly in that `state` rows show the data being added to the dict, and `calldata` rows are the fuzzer inputs used for that test run? That doesn't seem exactly correct since the number of `calldata` rows does not seem to equal the number of test runs (e.g. in the 256 run file there's 316 `calldata` entries and 196 `state` entries, even though 256 runs of each test were executed)",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1086361751/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
