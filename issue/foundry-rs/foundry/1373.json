{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/1373",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1373/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1373/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1373/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/1373",
  "id": 1210331733,
  "node_id": "I_kwDOGBlvNc5IJDJV",
  "number": 1373,
  "title": "compiling tests `via-ir` causes issues with warp & `block.timestamp` stored in memory",
  "user": {
    "login": "wminshew",
    "id": 9845502,
    "node_id": "MDQ6VXNlcjk4NDU1MDI=",
    "avatar_url": "https://avatars.githubusercontent.com/u/9845502?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/wminshew",
    "html_url": "https://github.com/wminshew",
    "followers_url": "https://api.github.com/users/wminshew/followers",
    "following_url": "https://api.github.com/users/wminshew/following{/other_user}",
    "gists_url": "https://api.github.com/users/wminshew/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/wminshew/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/wminshew/subscriptions",
    "organizations_url": "https://api.github.com/users/wminshew/orgs",
    "repos_url": "https://api.github.com/users/wminshew/repos",
    "events_url": "https://api.github.com/users/wminshew/events{/privacy}",
    "received_events_url": "https://api.github.com/users/wminshew/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3334394228,
      "node_id": "MDU6TGFiZWwzMzM0Mzk0MjI4",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-bug",
      "name": "T-bug",
      "color": "d73a4a",
      "default": false,
      "description": "Type: bug"
    },
    {
      "id": 3593644915,
      "node_id": "LA_kwDOGBlvNc7WMqtz",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/Cmd-forge-test",
      "name": "Cmd-forge-test",
      "color": "006B75",
      "default": false,
      "description": "Command: forge test"
    },
    {
      "id": 3703752787,
      "node_id": "LA_kwDOGBlvNc7cwshT",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/C-forge",
      "name": "C-forge",
      "color": "5319E7",
      "default": false,
      "description": "Command: forge"
    },
    {
      "id": 3759720129,
      "node_id": "LA_kwDOGBlvNc7gGMbB",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/D-hard",
      "name": "D-hard",
      "color": "0E8A16",
      "default": false,
      "description": "Difficulty: hard"
    },
    {
      "id": 3777098561,
      "node_id": "LA_kwDOGBlvNc7hIfNB",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/Cmd-forge-build",
      "name": "Cmd-forge-build",
      "color": "006B75",
      "default": false,
      "description": "Command: forge build"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 10,
  "created_at": "2022-04-20T23:50:12Z",
  "updated_at": "2022-04-26T18:02:19Z",
  "closed_at": "2022-04-26T14:30:10Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "### Component\n\nForge\n\n### Have you ensured that all of these are up to date?\n\n- [X] Foundry\n- [X] Foundryup\n\n### What version of Foundry are you on?\n\nforge 0.2.0 (276a122 2022-04-20T18:04:32.540251+00:00)\n\n### What command(s) is the bug in?\n\nforge test\n\n### Operating System\n\nmacOS (amd)\n\n### Describe the bug\n\nCan explore with [this repo](https://github.com/0xSplits/splits-vesting) on commit `b2dd8cfafa79d02394826e8f01138e849d78f784`\r\n1. `forge install`\r\n2. `make test` \r\n3. see tests passing\r\n4. update `foundry.toml` to build `via-ir = true`\r\n5. `forge test -vvv --match-test createERC20`\r\n6. see test failing\r\n\r\nthe error appears to be with [`vestingStart`](https://github.com/0xSplits/splits-vesting/blob/master/src/test/VestingModule.t.sol#L577), which is `block.timestamp` saved to memory at the beginning & later tested against. It appears to jump forward with the warp. My guess (not confirmed browsing opcode output) is that `via-ir` is trying to save me gas by skipping the m{store,load} for the timestamp (bc in regular contracts block timestamps don't change w/i execution of a fn) & just re-loading `block.timestamp` freshly on later reference\r\n\r\n(to debug this I had to use `emit log_uint` -- couldn't seem to get [`console2`](https://github.com/foundry-rs/forge-std/pull/44) or `console` to output to trace.. but that's a separate topic)\r\n\r\nfortunately this is easy enough to fix in my own case since `vestingStart` is only ever 0 how/where I was currently using it (and `via-ir` doesn't appear to save any gas for these contracts)\r\n\r\nwanted to flag for others in the meantime",
  "closed_by": {
    "login": "gakonst",
    "id": 17802178,
    "node_id": "MDQ6VXNlcjE3ODAyMTc4",
    "avatar_url": "https://avatars.githubusercontent.com/u/17802178?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/gakonst",
    "html_url": "https://github.com/gakonst",
    "followers_url": "https://api.github.com/users/gakonst/followers",
    "following_url": "https://api.github.com/users/gakonst/following{/other_user}",
    "gists_url": "https://api.github.com/users/gakonst/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/gakonst/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gakonst/subscriptions",
    "organizations_url": "https://api.github.com/users/gakonst/orgs",
    "repos_url": "https://api.github.com/users/gakonst/repos",
    "events_url": "https://api.github.com/users/gakonst/events{/privacy}",
    "received_events_url": "https://api.github.com/users/gakonst/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/1373/reactions",
    "total_count": 3,
    "+1": 3,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1373/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1105635705",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1373#issuecomment-1105635705",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1373",
    "id": 1105635705,
    "node_id": "IC_kwDOGBlvNc5B5ql5",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-21T18:52:25Z",
    "updated_at": "2022-04-21T18:55:03Z",
    "author_association": "MEMBER",
    "body": "I'm not surethis is a Foundry issue. When you call `vm.warp`, then the block's timestamp is set to what you pass to `warp` for the **remainder of the test** until `vm.warp` is called with a new value. For that reason, if Solidity optimized things by calling `block.timestamp` again, you would see whatever you passed to `warp`.\r\n\r\nIt *might* be that Solidity instead optimizes by putting `block.timestamp` on the stack before it is actually called and then does a pop or other stack operation later. This is sound for normal Solidity since `block.timestamp` is immutable under normal circumstances, but obviously breaks things for us.\r\n\r\nFor example this is what I imagine is happening (pseudo-code):\r\n\r\n```solidity\r\n// test code (without IR this passes)\r\nvm.warp(100);\r\nassertEq(block.timestamp, 100);\r\nvm.warp(200);\r\nassertEq(block.timestamp, 200);\r\n\r\n// solidity IR optimization (crudely)\r\nuint256 timestamp = block.timestamp; // for us, this is 0 here\r\nvm.warp(100); // sets block.timestamp, so accessing it directly would result in 100\r\nassertEq(timestamp, 100); // but its already on the stack, and solc reuses that, so this assertion fails\r\nvm.warp(200);\r\nassertEq(timestamp, 200);\r\n```\r\n\r\nThe only real fix we could do is track the location of stack items that have been produced by `block.timestamp` (and other immutables too like `block.number`, further complicating things), however, this would break tests like:\r\n\r\n```solidity\r\nuint256 timestampBefore = block.timestamp;\r\nvm.warp(block.timestamp + x);\r\nassertEq(timestamp - x, timestampBefore);\r\n```\r\n\r\nI'm not really sure what we should do here. Pinging @hrkrshnn and @gakonst ",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1105635705/reactions",
      "total_count": 2,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 1,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1105651579",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1373#issuecomment-1105651579",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1373",
    "id": 1105651579,
    "node_id": "IC_kwDOGBlvNc5B5ud7",
    "user": {
      "login": "brockelmore",
      "id": 31553173,
      "node_id": "MDQ6VXNlcjMxNTUzMTcz",
      "avatar_url": "https://avatars.githubusercontent.com/u/31553173?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brockelmore",
      "html_url": "https://github.com/brockelmore",
      "followers_url": "https://api.github.com/users/brockelmore/followers",
      "following_url": "https://api.github.com/users/brockelmore/following{/other_user}",
      "gists_url": "https://api.github.com/users/brockelmore/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brockelmore/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brockelmore/subscriptions",
      "organizations_url": "https://api.github.com/users/brockelmore/orgs",
      "repos_url": "https://api.github.com/users/brockelmore/repos",
      "events_url": "https://api.github.com/users/brockelmore/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brockelmore/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-21T19:09:03Z",
    "updated_at": "2022-04-21T19:09:03Z",
    "author_association": "MEMBER",
    "body": "ye so likely we will need to provide a helper function here that blackboxes it from the compiler. @hrkrshnn what do you think about going more general and native with a blackbox inside solidity? ",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1105651579/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1105794067",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1373#issuecomment-1105794067",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1373",
    "id": 1105794067,
    "node_id": "IC_kwDOGBlvNc5B6RQT",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-21T21:48:49Z",
    "updated_at": "2022-04-21T21:54:29Z",
    "author_association": "MEMBER",
    "body": "Hmm, looking at this more: the `TIMESTAMP` opcode costs 2 gas, so this is a weird optimization. DUP1 costs 3 gas and POP costs 2 gas, so really, there isn't any gas saving here?\r\n\r\nEdit: Also, another fix would be to bump priority on per-contract optimizations, e.g. disabling the optimizer for test contracts always but enabling it for the user contracts, if possible. I don't think there's a specific reason you'd want to run tests with the optimizer on for test contracts other than measuring gas of your actual contracts\r\n\r\nEdit: Ok last edit I swear, I just remembered that the optimizer might be relevant for test contracts if you hit the \"stack too deep\" or w/e error :disappointed: ",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1105794067/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1108987131",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1373#issuecomment-1108987131",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1373",
    "id": 1108987131,
    "node_id": "IC_kwDOGBlvNc5CGcz7",
    "user": {
      "login": "cgewecke",
      "id": 7332026,
      "node_id": "MDQ6VXNlcjczMzIwMjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7332026?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cgewecke",
      "html_url": "https://github.com/cgewecke",
      "followers_url": "https://api.github.com/users/cgewecke/followers",
      "following_url": "https://api.github.com/users/cgewecke/following{/other_user}",
      "gists_url": "https://api.github.com/users/cgewecke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cgewecke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cgewecke/subscriptions",
      "organizations_url": "https://api.github.com/users/cgewecke/orgs",
      "repos_url": "https://api.github.com/users/cgewecke/repos",
      "events_url": "https://api.github.com/users/cgewecke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cgewecke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-25T20:05:53Z",
    "updated_at": "2022-04-25T20:05:53Z",
    "author_association": "NONE",
    "body": "> the optimizer might be relevant for test contracts if you hit the \"stack too deep\" error\r\n\r\n@onbjerg Might be possible to config the compiler so that optimization is mostly off but \"stack too deep\" doesn't happen. \r\n\r\n+ [solidity issue  10354 comment][1]\r\n+ [solidity-coverage issue 675 comment][2]\r\n\r\n[1]: https://github.com/ethereum/solidity/issues/10354#issuecomment-847407103\r\n[2]: https://github.com/sc-forks/solidity-coverage/issues/675#issuecomment-977247258\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1108987131/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1109812522",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1373#issuecomment-1109812522",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1373",
    "id": 1109812522,
    "node_id": "IC_kwDOGBlvNc5CJmUq",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-26T13:40:35Z",
    "updated_at": "2022-04-26T13:40:35Z",
    "author_association": "MEMBER",
    "body": "Interesting as a workaround, but I'm not sure we can do that in Forge since it would require some knowledge of the expected test outcome, and for us to bruteforce the optimizer settings until it might work? :thinking: ",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1109812522/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1109854054",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1373#issuecomment-1109854054",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1373",
    "id": 1109854054,
    "node_id": "IC_kwDOGBlvNc5CJwdm",
    "user": {
      "login": "hrkrshnn",
      "id": 13174375,
      "node_id": "MDQ6VXNlcjEzMTc0Mzc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/13174375?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hrkrshnn",
      "html_url": "https://github.com/hrkrshnn",
      "followers_url": "https://api.github.com/users/hrkrshnn/followers",
      "following_url": "https://api.github.com/users/hrkrshnn/following{/other_user}",
      "gists_url": "https://api.github.com/users/hrkrshnn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hrkrshnn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hrkrshnn/subscriptions",
      "organizations_url": "https://api.github.com/users/hrkrshnn/orgs",
      "repos_url": "https://api.github.com/users/hrkrshnn/repos",
      "events_url": "https://api.github.com/users/hrkrshnn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hrkrshnn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-26T14:16:50Z",
    "updated_at": "2022-04-26T14:16:50Z",
    "author_association": "NONE",
    "body": "> Hmm, looking at this more: the TIMESTAMP opcode costs 2 gas, so this is a weird optimization. DUP1 costs 3 gas and POP costs 2 gas, so really, there isn't any gas saving here?\r\n\r\nGood point. I think it's easiest to fix this: made https://github.com/ethereum/solidity/issues/12963 to track.  @onbjerg ",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1109854054/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1109869605",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1373#issuecomment-1109869605",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1373",
    "id": 1109869605,
    "node_id": "IC_kwDOGBlvNc5CJ0Ql",
    "user": {
      "login": "gakonst",
      "id": 17802178,
      "node_id": "MDQ6VXNlcjE3ODAyMTc4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17802178?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gakonst",
      "html_url": "https://github.com/gakonst",
      "followers_url": "https://api.github.com/users/gakonst/followers",
      "following_url": "https://api.github.com/users/gakonst/following{/other_user}",
      "gists_url": "https://api.github.com/users/gakonst/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gakonst/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gakonst/subscriptions",
      "organizations_url": "https://api.github.com/users/gakonst/orgs",
      "repos_url": "https://api.github.com/users/gakonst/repos",
      "events_url": "https://api.github.com/users/gakonst/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gakonst/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-26T14:30:10Z",
    "updated_at": "2022-04-26T14:30:10Z",
    "author_association": "MEMBER",
    "body": "Thanks for flagging @wminshew, closing given:\r\n1. we've tracked it down to Solidity and have the relevant issues tracked. \r\n2. you have a workaround for this in your case",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1109869605/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1109922413",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1373#issuecomment-1109922413",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1373",
    "id": 1109922413,
    "node_id": "IC_kwDOGBlvNc5CKBJt",
    "user": {
      "login": "hrkrshnn",
      "id": 13174375,
      "node_id": "MDQ6VXNlcjEzMTc0Mzc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/13174375?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hrkrshnn",
      "html_url": "https://github.com/hrkrshnn",
      "followers_url": "https://api.github.com/users/hrkrshnn/followers",
      "following_url": "https://api.github.com/users/hrkrshnn/following{/other_user}",
      "gists_url": "https://api.github.com/users/hrkrshnn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hrkrshnn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hrkrshnn/subscriptions",
      "organizations_url": "https://api.github.com/users/hrkrshnn/orgs",
      "repos_url": "https://api.github.com/users/hrkrshnn/repos",
      "events_url": "https://api.github.com/users/hrkrshnn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hrkrshnn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-26T15:13:32Z",
    "updated_at": "2022-04-26T15:13:32Z",
    "author_association": "NONE",
    "body": "> It might be that Solidity instead optimizes by putting block.timestamp on the stack before it is actually called and then does a pop or other stack operation later. This is sound for normal Solidity since block.timestamp is immutable under normal circumstances, but obviously breaks things for us.\r\n\r\n@onbjerg Just checked this. This doesn't seem to be true:\r\n\r\n```solidity\r\ninterface VM {\r\n    function warp(uint) external;\r\n}\r\ncontract C {\r\n    VM vm = VM(address(0));\r\n    function f() external {\r\n        // test code (without IR this passes)\r\n        vm.warp(100);\r\n        assert(block.timestamp == 100);\r\n        vm.warp(200);\r\n        assert(block.timestamp == 200);\r\n    }\r\n}\r\n```\r\nLooked at both the `--ir-optimized --optimize` and `--asm --via-ir --optimize` for the above code. There are two references to `timestamp`. So it's not getting `dup`-ed.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1109922413/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1110074553",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1373#issuecomment-1110074553",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1373",
    "id": 1110074553,
    "node_id": "IC_kwDOGBlvNc5CKmS5",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-26T17:39:53Z",
    "updated_at": "2022-04-26T17:41:38Z",
    "author_association": "MEMBER",
    "body": "Right, I think I had it confused; what is actually happening is that you replace all occurrences of a variable that just contains `block.timestamp` with `block.timestamp` (which is a fair optimization but muddies things for us). See this example:\r\n\r\n```solidity\r\ninterface VM {\r\n    function warp(uint) external;\r\n}\r\ncontract C {\r\n    VM vm = VM(address(0x7109709ECfa91a80626fF3989D68f67F5b1DD12D));\r\n\r\n    function testF() external {\r\n        // test code (without IR this passes)\r\n        uint256 start = block.timestamp;\r\n        vm.warp(100);\r\n        assert(start == 0);\r\n    }\r\n}\r\n```\r\n\r\nNot sure if we should re-open @gakonst, I don't know if there is anything we can do on our side. Any way to get around this @hrkrshnn?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1110074553/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1110095125",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1373#issuecomment-1110095125",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1373",
    "id": 1110095125,
    "node_id": "IC_kwDOGBlvNc5CKrUV",
    "user": {
      "login": "wminshew",
      "id": 9845502,
      "node_id": "MDQ6VXNlcjk4NDU1MDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9845502?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wminshew",
      "html_url": "https://github.com/wminshew",
      "followers_url": "https://api.github.com/users/wminshew/followers",
      "following_url": "https://api.github.com/users/wminshew/following{/other_user}",
      "gists_url": "https://api.github.com/users/wminshew/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wminshew/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wminshew/subscriptions",
      "organizations_url": "https://api.github.com/users/wminshew/orgs",
      "repos_url": "https://api.github.com/users/wminshew/repos",
      "events_url": "https://api.github.com/users/wminshew/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wminshew/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-26T18:02:19Z",
    "updated_at": "2022-04-26T18:02:19Z",
    "author_association": "NONE",
    "body": "added a minimal repro in https://github.com/ethereum/solidity/issues/12963#issuecomment-1110070343",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1110095125/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
