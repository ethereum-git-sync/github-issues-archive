{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/5739",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5739/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5739/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5739/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/5739",
  "id": 1870167259,
  "node_id": "I_kwDOGBlvNc5veHzb",
  "number": 5739,
  "title": "`rollFork` fails to clean up \"hot\" storage variables",
  "user": {
    "login": "amusingaxl",
    "id": 112016538,
    "node_id": "U_kgDOBq08mg",
    "avatar_url": "https://avatars.githubusercontent.com/u/112016538?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amusingaxl",
    "html_url": "https://github.com/amusingaxl",
    "followers_url": "https://api.github.com/users/amusingaxl/followers",
    "following_url": "https://api.github.com/users/amusingaxl/following{/other_user}",
    "gists_url": "https://api.github.com/users/amusingaxl/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amusingaxl/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amusingaxl/subscriptions",
    "organizations_url": "https://api.github.com/users/amusingaxl/orgs",
    "repos_url": "https://api.github.com/users/amusingaxl/repos",
    "events_url": "https://api.github.com/users/amusingaxl/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amusingaxl/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3334394228,
      "node_id": "MDU6TGFiZWwzMzM0Mzk0MjI4",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-bug",
      "name": "T-bug",
      "color": "d73a4a",
      "default": false,
      "description": "Type: bug"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 10,
  "created_at": "2023-08-28T17:32:41Z",
  "updated_at": "2023-08-31T05:04:25Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "### Component\r\n\r\nForge\r\n\r\n### Have you ensured that all of these are up to date?\r\n\r\n- [X] Foundry\r\n- [X] Foundryup\r\n\r\n### What version of Foundry are you on?\r\n\r\nforge 0.2.0 (bff4ed9 2023-08-28T00:24:09.226668296Z)\r\n\r\n### What command(s) is the bug in?\r\n\r\nforge test --fork-url <RPC_ENDPOINT>\r\n\r\n### Operating System\r\n\r\nLinux\r\n\r\n### Describe the bug\r\n\r\nI just spotted this bug in the wild while running MakerDAO's [Spell Test suite](https://github.com/makerdao/spells-goerli/blob/0bc45005e3afe60bfda47121c4337fbb85b40653/src/DssSpell.t.base.sol#L283-L302).\r\n\r\nRelevant part of the code:\r\n\r\n```solidity\r\n    function setUp() public {\r\n        setValues(address(chief));\r\n\r\n        spellValues.deployed_spell_created = spellValues.deployed_spell != address(0) ? spellValues.deployed_spell_created : block.timestamp;\r\n        _castPreviousSpell();\r\n\r\n        // ------------- From here ----------------------\r\n        spell = spellValues.deployed_spell != address(0) ?\r\n            DssSpell(spellValues.deployed_spell) : new DssSpell();\r\n\r\n        if (spellValues.deployed_spell_block != 0 && spell.eta() != 0) {\r\n            // if we have a deployed spell in the config\r\n            // we want to roll our fork to the block where it was deployed\r\n            // this means the test suite will continue to accurately pass/fail\r\n            // even if mainnet has already scheduled/cast the spell\r\n            vm.makePersistent(address(this));\r\n            vm.makePersistent(address(rates));\r\n            vm.makePersistent(address(addr));\r\n            vm.makePersistent(address(deployers));\r\n            vm.rollFork(spellValues.deployed_spell_block);\r\n        }\r\n    }\r\n```\r\n\r\nSpells have an `eta` and a `done` storage variables.\r\n\r\nApparently, any \"hot\" storage variable is not reset after `rollFork`, like if we had called `vm.makePersistent()` on it.\r\n\r\nIf I log both variables _before_ and _after_ `rollFork`, they have the same value:\r\n\r\n```solidity\r\n        if (spellValues.deployed_spell_block != 0 && spell.eta() != 0) {\r\n            console2.log(\"Before `rollFork`: eta = %d, done = %b\", spell.eta(), spell.done());\r\n\r\n            // if we have a deployed spell in the config\r\n            // we want to roll our fork to the block where it was deployed\r\n            // this means the test suite will continue to accurately pass/fail\r\n            // even if mainnet has already scheduled/cast the spell\r\n            vm.makePersistent(address(this));\r\n            vm.makePersistent(address(rates));\r\n            vm.makePersistent(address(addr));\r\n            vm.makePersistent(address(deployers));\r\n            vm.rollFork(spellValues.deployed_spell_block);\r\n\r\n            console2.log(\"After `rollFork`: eta = %d, done = %b\", spell.eta(), spell.done());\r\n        }\r\n```\r\n\r\nResult shows both wrong:\r\n\r\n```\r\nLogs:\r\n  Before `rollFork`: eta = 1693238220, done = b true\r\n  After `rollFork`: eta = 1693238220, done = b true\r\n```\r\n\r\nIf I remove the log from _before_, `done` is now correct (it has not been accessed), however `eta` is still incorrect, because it was accessed in the conditional:\r\n\r\n```solidity\r\n        //                                                  +---- `eta` accessed here:\r\n        //                                                  v\r\n        if (spellValues.deployed_spell_block != 0 && spell.eta() != 0) {\r\n            // if we have a deployed spell in the config\r\n            // we want to roll our fork to the block where it was deployed\r\n            // this means the test suite will continue to accurately pass/fail\r\n            // even if mainnet has already scheduled/cast the spell\r\n            vm.makePersistent(address(this));\r\n            vm.makePersistent(address(rates));\r\n            vm.makePersistent(address(addr));\r\n            vm.makePersistent(address(deployers));\r\n            vm.rollFork(spellValues.deployed_spell_block);\r\n\r\n            console2.log(\"After `rollFork`: eta = %d, done = %b\", spell.eta(), spell.done());\r\n        }\r\n```\r\n\r\nResult shows `done` correct and `eta` wrong:\r\n\r\n```\r\nLogs:\r\n  eta = 1693238220, done = b false\r\n```\r\n\r\nIf I remove `eta` from the conditional and log it only after `rollFork`, it works as expected:\r\n\r\n```\r\n        if (spellValues.deployed_spell_block != 0) {\r\n            // if we have a deployed spell in the config\r\n            // we want to roll our fork to the block where it was deployed\r\n            // this means the test suite will continue to accurately pass/fail\r\n            // even if mainnet has already scheduled/cast the spell\r\n            vm.makePersistent(address(this));\r\n            vm.makePersistent(address(rates));\r\n            vm.makePersistent(address(addr));\r\n            vm.makePersistent(address(deployers));\r\n            vm.rollFork(spellValues.deployed_spell_block);\r\n\r\n            console2.log(\"After `rollFork`: eta = %d, done = %b\", spell.eta(), spell.done());\r\n        }\r\n```\r\n\r\nResult with both correct:\r\n```\r\nLogs:\r\n  eta = 0, done = b false\r\n```\r\n\r\nThis looks like an unexpected behavior.\r\n\r\nPlease reach out to me if you need help running that test suite, but after setting `ETH_RPC_URL`, you can just call `make test match=\"testOnTime\"`.",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/5739/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5739/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1696627907",
    "html_url": "https://github.com/foundry-rs/foundry/issues/5739#issuecomment-1696627907",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5739",
    "id": 1696627907,
    "node_id": "IC_kwDOGBlvNc5lIHzD",
    "user": {
      "login": "nhtyy",
      "id": 15225385,
      "node_id": "MDQ6VXNlcjE1MjI1Mzg1",
      "avatar_url": "https://avatars.githubusercontent.com/u/15225385?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nhtyy",
      "html_url": "https://github.com/nhtyy",
      "followers_url": "https://api.github.com/users/nhtyy/followers",
      "following_url": "https://api.github.com/users/nhtyy/following{/other_user}",
      "gists_url": "https://api.github.com/users/nhtyy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nhtyy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nhtyy/subscriptions",
      "organizations_url": "https://api.github.com/users/nhtyy/orgs",
      "repos_url": "https://api.github.com/users/nhtyy/repos",
      "events_url": "https://api.github.com/users/nhtyy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nhtyy/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-08-29T01:13:26Z",
    "updated_at": "2023-08-29T01:13:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "hi you can see the behavior arise in the code snippet below, at first i also thought this was bug but\r\n\r\nhttps://github.com/foundry-rs/foundry/blob/bff4ed912bb023d7bf9b20eda581aa4867a1cf70/crates/evm/src/executor/backend/mod.rs#L1098-L1111\r\n \r\nI think this is more of a semantics issue; when you run the command `forge test --fork-url <RPC_ENDPOINT>` yore not specifying the block number, therefore using the current, if you load some state while the fork is at the block number it is essentially cached to memory\r\n\r\nNow imagine you instantiate a fork at some `block=T`, and you explicitly override some value (storing it in memory), i think it makes sense that rolling the block number to `block=T+n` forward wouldn't dump all the storage and try to get the new storage at the current block (assuming its lower than the actual chains block height).\r\n\r\nHowever I see where you're coming from when rolling the chain **back**. You could definitely make an argument that the state should be dumped in favor of the older state, since in practice the chain can never go backwards.\r\n\r\non the other hand this could be breaking change, So you should probably just use a different pattern to achieve this. But maybe the core team will have other thoughts.\r\n\r\nA fix could be checking that if `new_block_number < current_block` dont copy over the state like in the snippet above.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1696627907/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1697257711",
    "html_url": "https://github.com/foundry-rs/foundry/issues/5739#issuecomment-1697257711",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5739",
    "id": 1697257711,
    "node_id": "IC_kwDOGBlvNc5lKhjv",
    "user": {
      "login": "amusingaxl",
      "id": 112016538,
      "node_id": "U_kgDOBq08mg",
      "avatar_url": "https://avatars.githubusercontent.com/u/112016538?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amusingaxl",
      "html_url": "https://github.com/amusingaxl",
      "followers_url": "https://api.github.com/users/amusingaxl/followers",
      "following_url": "https://api.github.com/users/amusingaxl/following{/other_user}",
      "gists_url": "https://api.github.com/users/amusingaxl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amusingaxl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amusingaxl/subscriptions",
      "organizations_url": "https://api.github.com/users/amusingaxl/orgs",
      "repos_url": "https://api.github.com/users/amusingaxl/repos",
      "events_url": "https://api.github.com/users/amusingaxl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amusingaxl/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-08-29T11:25:46Z",
    "updated_at": "2023-08-29T11:25:46Z",
    "author_association": "NONE",
    "body": "If I can roll back in time, I would expect that the chain state would be rolled back, otherwise, there is no point.\r\n\r\nAll memory cache should be flushed out (or at least not be accessible by the fork) when we're in the context of a rollback. This is the expected behavior. Anything else is just too hard to reason about.\r\n\r\n> I think this is more of a semantics issue; when you run the command forge test --fork-url <RPC_ENDPOINT> yore not specifying the block number\r\n\r\nYes, that is correct. By not using the `--fork-block-number` option, we can programmatically choose to fork. This approach is way more CI friendly, without the need to create wrapper scripts to conditionally spin up a fork.\r\n\r\n> on the other hand this could be breaking change [...]\r\n\r\nI cannot think about a use case where the current behavior would be desirable. Maybe there is someone relying on it out there, however they are relying on an arguably broken behavior.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1697257711/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1697403092",
    "html_url": "https://github.com/foundry-rs/foundry/issues/5739#issuecomment-1697403092",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5739",
    "id": 1697403092,
    "node_id": "IC_kwDOGBlvNc5lLFDU",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-08-29T13:01:50Z",
    "updated_at": "2023-08-29T13:01:50Z",
    "author_association": "COLLABORATOR",
    "body": "First to confirm my understanding of the issue: \r\n\r\n1. Forking from a chain ID at block `X`\r\n2. Make state changes\r\n3. `vm.rollFork` on the same chain to a new block `Y` where `Y < X`\r\n4. State changes from step 2 are currently persisted, but should be reverted\r\n\r\nIs that correct? If so, I'm not sure if that's a bug or intentional—will defer to @mattsse for that. \r\n\r\nAssuming that understanding is correct, potential solutions:\r\n1. Leave as-is and document: This feels like a footgun, and is non-intuitive, for the reasons @amusingaxl mentions.\r\n2. If going back in time on a fork, reset state to the fork state at that time: Going back in time isn't realistic, so if you're doing this, it resets all state (storage, code, nonce, block properties). But this would only apply when going back in time via a fork, and this is not applicable for a `vm.roll`\r\n3. Don't allow this and revert: Even (2) is arguably a footgun, because most users won't need to go back in time so this might be user error. The workaround would be to first `rollFork` to the earlier block and `vm.snapshot()` it, and later you can `vm.revertTo()` instead. However, this is semantically different since RPC queries wouldn't query the old fork state, so I guess that is an argument for (2). \r\n4. A combination of (2) and (3) where by default it reverts but you can override this (either via a config param or a new cheatcode with a boolean config value or a similar cheat named e.g. `forceRollFork` \r\n\r\nI could be convinced of (2) if I better understood the use case here, but allowing you to go backwards by default feels like it could be a footgun that we should prevent.\r\n\r\nOne last thought: IMO this should all also apply to the case where `Y == X`, since that similarly should not be needed and is likely a user-error.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1697403092/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1697574184",
    "html_url": "https://github.com/foundry-rs/foundry/issues/5739#issuecomment-1697574184",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5739",
    "id": 1697574184,
    "node_id": "IC_kwDOGBlvNc5lLu0o",
    "user": {
      "login": "amusingaxl",
      "id": 112016538,
      "node_id": "U_kgDOBq08mg",
      "avatar_url": "https://avatars.githubusercontent.com/u/112016538?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amusingaxl",
      "html_url": "https://github.com/amusingaxl",
      "followers_url": "https://api.github.com/users/amusingaxl/followers",
      "following_url": "https://api.github.com/users/amusingaxl/following{/other_user}",
      "gists_url": "https://api.github.com/users/amusingaxl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amusingaxl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amusingaxl/subscriptions",
      "organizations_url": "https://api.github.com/users/amusingaxl/orgs",
      "repos_url": "https://api.github.com/users/amusingaxl/repos",
      "events_url": "https://api.github.com/users/amusingaxl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amusingaxl/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-08-29T14:37:08Z",
    "updated_at": "2023-08-29T14:37:08Z",
    "author_association": "NONE",
    "body": "> Is that correct?\r\n\r\nNo, in my example, no state changes are being made. State is only being **read**.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1697574184/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1699389956",
    "html_url": "https://github.com/foundry-rs/foundry/issues/5739#issuecomment-1699389956",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5739",
    "id": 1699389956,
    "node_id": "IC_kwDOGBlvNc5lSqIE",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-08-30T15:24:18Z",
    "updated_at": "2023-08-30T15:24:18Z",
    "author_association": "COLLABORATOR",
    "body": "I see. I'd be curious if this applies to state changes also. If so, all above options are still applicable. If not, option (1) gets removed and the rest are applicable",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1699389956/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1699764923",
    "html_url": "https://github.com/foundry-rs/foundry/issues/5739#issuecomment-1699764923",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5739",
    "id": 1699764923,
    "node_id": "IC_kwDOGBlvNc5lUFq7",
    "user": {
      "login": "nhtyy",
      "id": 15225385,
      "node_id": "MDQ6VXNlcjE1MjI1Mzg1",
      "avatar_url": "https://avatars.githubusercontent.com/u/15225385?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nhtyy",
      "html_url": "https://github.com/nhtyy",
      "followers_url": "https://api.github.com/users/nhtyy/followers",
      "following_url": "https://api.github.com/users/nhtyy/following{/other_user}",
      "gists_url": "https://api.github.com/users/nhtyy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nhtyy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nhtyy/subscriptions",
      "organizations_url": "https://api.github.com/users/nhtyy/orgs",
      "repos_url": "https://api.github.com/users/nhtyy/repos",
      "events_url": "https://api.github.com/users/nhtyy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nhtyy/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-08-30T20:05:25Z",
    "updated_at": "2023-08-30T20:06:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "@mds1 yes i was able to test this\r\n\r\n```solidity\r\n     function setUp() public {\r\n        // deploys at current fork block\r\n        // using `--rpc-url` \r\n        counter = new Counter();\r\n        counter.increment();\r\n    }\r\n\r\n    function testRoll() public {\r\n        assertEq(counter.number(), 100);\r\n\r\n        counter.setNumber(100);\r\n\r\n        assertEq(counter.number(), 100);\r\n\r\n        vm.rollFork(block.number - 100);\r\n\r\n        assertEq(counter.number(), 100);\r\n    }\r\n\r\n```\r\n\r\nI think this makes sense because all state changes (reads or writes) end up in the `journaled_state` and would then be copied over for subsequent calls in the function. I believe REVM trys to load state from there first.\r\n\r\nAnd in ops case since this is the `setup` function all of this would then get written to the CacheDb since it commits its state, meaning it would persist across tests. (the journaled state is thrown away between tests/setup).\r\n\r\nI think i like option 4, and i agree snapshot/revert seems like the right call here",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1699764923/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1699768911",
    "html_url": "https://github.com/foundry-rs/foundry/issues/5739#issuecomment-1699768911",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5739",
    "id": 1699768911,
    "node_id": "IC_kwDOGBlvNc5lUGpP",
    "user": {
      "login": "nhtyy",
      "id": 15225385,
      "node_id": "MDQ6VXNlcjE1MjI1Mzg1",
      "avatar_url": "https://avatars.githubusercontent.com/u/15225385?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nhtyy",
      "html_url": "https://github.com/nhtyy",
      "followers_url": "https://api.github.com/users/nhtyy/followers",
      "following_url": "https://api.github.com/users/nhtyy/following{/other_user}",
      "gists_url": "https://api.github.com/users/nhtyy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nhtyy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nhtyy/subscriptions",
      "organizations_url": "https://api.github.com/users/nhtyy/orgs",
      "repos_url": "https://api.github.com/users/nhtyy/repos",
      "events_url": "https://api.github.com/users/nhtyy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nhtyy/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-08-30T20:08:37Z",
    "updated_at": "2023-08-30T20:11:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "this also means rolling forward you cant read newer slots/accounts if the slot/account has already been loaded",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1699768911/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1699791515",
    "html_url": "https://github.com/foundry-rs/foundry/issues/5739#issuecomment-1699791515",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5739",
    "id": 1699791515,
    "node_id": "IC_kwDOGBlvNc5lUMKb",
    "user": {
      "login": "mattsse",
      "id": 19890894,
      "node_id": "MDQ6VXNlcjE5ODkwODk0",
      "avatar_url": "https://avatars.githubusercontent.com/u/19890894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mattsse",
      "html_url": "https://github.com/mattsse",
      "followers_url": "https://api.github.com/users/mattsse/followers",
      "following_url": "https://api.github.com/users/mattsse/following{/other_user}",
      "gists_url": "https://api.github.com/users/mattsse/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mattsse/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mattsse/subscriptions",
      "organizations_url": "https://api.github.com/users/mattsse/orgs",
      "repos_url": "https://api.github.com/users/mattsse/repos",
      "events_url": "https://api.github.com/users/mattsse/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mattsse/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-08-30T20:26:40Z",
    "updated_at": "2023-08-30T20:26:40Z",
    "author_association": "MEMBER",
    "body": "just catching up here \r\n\r\n> However I see where you're coming from when rolling the chain back.\r\n\r\nI see.\r\n\r\nso what should we change for roll back?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1699791515/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1699799953",
    "html_url": "https://github.com/foundry-rs/foundry/issues/5739#issuecomment-1699799953",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5739",
    "id": 1699799953,
    "node_id": "IC_kwDOGBlvNc5lUOOR",
    "user": {
      "login": "nhtyy",
      "id": 15225385,
      "node_id": "MDQ6VXNlcjE1MjI1Mzg1",
      "avatar_url": "https://avatars.githubusercontent.com/u/15225385?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nhtyy",
      "html_url": "https://github.com/nhtyy",
      "followers_url": "https://api.github.com/users/nhtyy/followers",
      "following_url": "https://api.github.com/users/nhtyy/following{/other_user}",
      "gists_url": "https://api.github.com/users/nhtyy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nhtyy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nhtyy/subscriptions",
      "organizations_url": "https://api.github.com/users/nhtyy/orgs",
      "repos_url": "https://api.github.com/users/nhtyy/repos",
      "events_url": "https://api.github.com/users/nhtyy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nhtyy/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-08-30T20:33:23Z",
    "updated_at": "2023-08-31T05:02:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "@mattsse \r\n\r\nimo a bigger issue that is related and i could see people getting confused about is that if you do an sload on `address(n)` at `block=t`, and then roll **forward** to `block=t+x < current_block` in subsequent calls it will still be the old value until the journaled state is dropped, for example within tests or within the setup function.\r\n\r\nnot sure if this actually gets persisted in the cacheDB if its in setupt (is it marked touched from an sload?)",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1699799953/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1699886682",
    "html_url": "https://github.com/foundry-rs/foundry/issues/5739#issuecomment-1699886682",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5739",
    "id": 1699886682,
    "node_id": "IC_kwDOGBlvNc5lUjZa",
    "user": {
      "login": "nhtyy",
      "id": 15225385,
      "node_id": "MDQ6VXNlcjE1MjI1Mzg1",
      "avatar_url": "https://avatars.githubusercontent.com/u/15225385?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nhtyy",
      "html_url": "https://github.com/nhtyy",
      "followers_url": "https://api.github.com/users/nhtyy/followers",
      "following_url": "https://api.github.com/users/nhtyy/following{/other_user}",
      "gists_url": "https://api.github.com/users/nhtyy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nhtyy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nhtyy/subscriptions",
      "organizations_url": "https://api.github.com/users/nhtyy/orgs",
      "repos_url": "https://api.github.com/users/nhtyy/repos",
      "events_url": "https://api.github.com/users/nhtyy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nhtyy/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-08-30T21:40:45Z",
    "updated_at": "2023-08-31T05:04:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "i think im on the side of making it forward only and just clearing the semantics in the docs\r\n\r\nas I think revert/snapshot is probably the functionality people are thinking of when wanting to a do a \"roll back\"\r\n\r\nor another thing is maybe introducing `vm.persistSlot(address,uint256)` and by default dump the journaled state (back to the start of the fork + persisted accounts). This could actually work both ways i think. In ops case they would have gotten expected behavior, and if a user wants to hold a storage slot constant between rolls they can use that cheatcode. \r\n\r\nhappy to handle that btw",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1699886682/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
