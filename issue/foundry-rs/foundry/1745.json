{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/1745",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1745/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1745/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1745/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/1745",
  "id": 1249846888,
  "node_id": "I_kwDOGBlvNc5KfyZo",
  "number": 1745,
  "title": "bug: expectEmit and expectCall don't only check the next call",
  "user": {
    "login": "mds1",
    "id": 17163988,
    "node_id": "MDQ6VXNlcjE3MTYzOTg4",
    "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mds1",
    "html_url": "https://github.com/mds1",
    "followers_url": "https://api.github.com/users/mds1/followers",
    "following_url": "https://api.github.com/users/mds1/following{/other_user}",
    "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
    "organizations_url": "https://api.github.com/users/mds1/orgs",
    "repos_url": "https://api.github.com/users/mds1/repos",
    "events_url": "https://api.github.com/users/mds1/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mds1/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3334394228,
      "node_id": "MDU6TGFiZWwzMzM0Mzk0MjI4",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-bug",
      "name": "T-bug",
      "color": "d73a4a",
      "default": false,
      "description": "Type: bug"
    },
    {
      "id": 3593644915,
      "node_id": "LA_kwDOGBlvNc7WMqtz",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/Cmd-forge-test",
      "name": "Cmd-forge-test",
      "color": "006B75",
      "default": false,
      "description": "Command: forge test"
    },
    {
      "id": 3703752787,
      "node_id": "LA_kwDOGBlvNc7cwshT",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/C-forge",
      "name": "C-forge",
      "color": "5319E7",
      "default": false,
      "description": "Command: forge"
    },
    {
      "id": 3703752960,
      "node_id": "LA_kwDOGBlvNc7cwskA",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/A-cheatcodes",
      "name": "A-cheatcodes",
      "color": "FBCA04",
      "default": false,
      "description": "Area: cheatcodes"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/milestones/1",
    "html_url": "https://github.com/foundry-rs/foundry/milestone/1",
    "labels_url": "https://api.github.com/repos/foundry-rs/foundry/milestones/1/labels",
    "id": 8140456,
    "node_id": "MI_kwDOGBlvNc4AfDao",
    "number": 1,
    "title": "v1.0.0",
    "description": "",
    "creator": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 10,
    "closed_issues": 125,
    "state": "open",
    "created_at": "2022-06-28T08:15:32Z",
    "updated_at": "2023-05-12T14:44:03Z",
    "due_on": null,
    "closed_at": null
  },
  "comments": 6,
  "created_at": "2022-05-26T17:26:45Z",
  "updated_at": "2023-05-12T14:44:03Z",
  "closed_at": "2023-05-12T14:44:03Z",
  "author_association": "COLLABORATOR",
  "active_lock_reason": null,
  "body": "### Component\n\nForge\n\n### Have you ensured that all of these are up to date?\n\n- [ ] Foundry\n- [ ] Foundryup\n\n### What version of Foundry are you on?\n\nforge 0.2.0 (4fcd7e0 2022-05-26T00:08:37.693306Z)\n\n### What command(s) is the bug in?\n\nforge test\n\n### Operating System\n\n_No response_\n\n### Describe the bug\n\nMy understanding is that the expected behavior of `expectEmit` is \"look for event in the next call\" but it seems to actually be \"look for expected event before the end of the test\". And the docs are contradictory here—one part says it must be the \"next event\" (which seems to imply it needs to be the first event in the next call), another part says \"before the end of the current function\". Similarly issue for `expectCall` behavior.\r\n\r\nTo ensure tests are clear, I think `expectEmit` and `expectCall` should only look in the next call. Otherwise this can result in bugs where your event was emitted _eventually_ in a later portion of your test, but not emitted at the time you expected it, and the test still passes. \r\n\r\nReproduce with this test:\r\n\r\n```solidity\r\n// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.8.13;\r\n\r\nimport \"forge-std/Test.sol\";\r\n\r\ncontract CallMe {\r\n  function calling() public {}\r\n}\r\n\r\ncontract MyContract {\r\n  CallMe callMe;\r\n\r\n  constructor(CallMe _callMe) {\r\n    callMe = _callMe;\r\n  }\r\n\r\n  event MyEvent();\r\n  event OtherEvent();\r\n\r\n  function noEventOrCall() public {}\r\n\r\n  function myEventAndCall() public {\r\n    emit OtherEvent(); // Shows event order does not matter if only checking for MyEvent.\r\n    emit MyEvent();\r\n    callMe.calling();\r\n  }\r\n}\r\n\r\ncontract ExpectTest is Test {\r\n  event MyEvent();\r\n  CallMe callMe;\r\n  MyContract myContract;\r\n\r\n  function setUp() public {\r\n    callMe = new CallMe();\r\n    myContract = new MyContract(callMe);\r\n  }\r\n\r\n  // -------- expectEmit Tests --------\r\n\r\n  function test_MyEvent() public {\r\n    // Passes like expected.\r\n    vm.expectEmit(true, true, true, true);\r\n    emit MyEvent();\r\n    myContract.myEventAndCall();\r\n  }\r\n\r\n  function test_NoEventOrCall() public {\r\n    // Fails like expected.\r\n    vm.expectEmit(true, true, true, true);\r\n    emit MyEvent();\r\n    myContract.noEventOrCall();\r\n  }\r\n\r\n  function test_EventuallyMyEvent() public {\r\n    // Passes, but should fail, because expectEmit should only check the next call.\r\n    vm.expectEmit(true, true, true, true);\r\n    emit MyEvent();\r\n    myContract.noEventOrCall();\r\n    myContract.myEventAndCall();\r\n  }\r\n\r\n  // -------- expectCall Tests --------\r\n\r\n  function test_Call() public {\r\n    // Passes like expected.\r\n    vm.expectCall(address(callMe), abi.encodeWithSelector(CallMe.calling.selector));\r\n    myContract.myEventAndCall();\r\n  }\r\n\r\n  function test_NoCall() public {\r\n    // Fails like expected.\r\n    vm.expectCall(address(callMe), abi.encodeWithSelector(CallMe.calling.selector));\r\n    myContract.noEventOrCall();\r\n  }\r\n\r\n  function test_EventuallyCall() public {\r\n    // Passes, but should fail, because expectCall should only check the next call.\r\n    vm.expectCall(address(callMe), abi.encodeWithSelector(CallMe.calling.selector));\r\n    emit MyEvent();\r\n    myContract.noEventOrCall();\r\n    myContract.myEventAndCall();\r\n  }\r\n}\r\n```",
  "closed_by": {
    "login": "mattsse",
    "id": 19890894,
    "node_id": "MDQ6VXNlcjE5ODkwODk0",
    "avatar_url": "https://avatars.githubusercontent.com/u/19890894?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mattsse",
    "html_url": "https://github.com/mattsse",
    "followers_url": "https://api.github.com/users/mattsse/followers",
    "following_url": "https://api.github.com/users/mattsse/following{/other_user}",
    "gists_url": "https://api.github.com/users/mattsse/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mattsse/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mattsse/subscriptions",
    "organizations_url": "https://api.github.com/users/mattsse/orgs",
    "repos_url": "https://api.github.com/users/mattsse/repos",
    "events_url": "https://api.github.com/users/mattsse/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mattsse/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/1745/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1745/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1139768986",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1745#issuecomment-1139768986",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1745",
    "id": 1139768986,
    "node_id": "IC_kwDOGBlvNc5D736a",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-27T16:22:25Z",
    "updated_at": "2022-05-27T16:22:25Z",
    "author_association": "MEMBER",
    "body": "This is documented in the book and has always been the behavior. I'm not entirely sure if we should change it, but if we should, then this is definitely a breaking change and we should try to bundle it up with other breaking changes.\r\n\r\n![image](https://user-images.githubusercontent.com/8862627/170739463-aeaefac6-88e7-4e45-87ed-c882feaed1e7.png)\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1139768986/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1139773360",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1745#issuecomment-1139773360",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1745",
    "id": 1139773360,
    "node_id": "IC_kwDOGBlvNc5D74-w",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-27T16:26:21Z",
    "updated_at": "2022-05-27T16:26:21Z",
    "author_association": "MEMBER",
    "body": ">one part says it must be the \"next event\" (which seems to imply it needs to be the first event in the next call), another part says \"before the end of the current function\". \r\n\r\nI don't think this is contradictory, but it might lead to some confusion that could be cleared up.\r\n\r\n>Assert a specific log is emitted before the end of the current function.\r\n\r\nThis is the overall usage for `expectEmit` - we use it to expect that a certain log is emitted *anywhere* in the current test function.\r\n\r\nIt then follows up:\r\n\r\n>1. Call the cheat code, specifying whether we should check the first, second or third topic, and the log data. Topic 0 is always checked.\r\n>2. Emit the event we are supposed to see before the end of the current function.\r\n>3. Perform the call.\r\n\r\nThis explains the call order: we call the cheatcode, we emit the event we expect, and then we perform a call that emits the event.\r\n\r\nIt then also goes on in an info box:\r\n\r\n>ℹ️ Ordering matters\r\n>\r\n>If we call expectEmit and emit an event, then the next event emitted must match the one we expect.\r\n\r\nThis is essentially saying that if we call `expectEmit`, emit the event we expect and then some other part of our code emits a second event, then the second event *must* match the first.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1139773360/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1139801773",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1745#issuecomment-1139801773",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1745",
    "id": 1139801773,
    "node_id": "IC_kwDOGBlvNc5D7_6t",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-27T16:59:59Z",
    "updated_at": "2022-05-27T16:59:59Z",
    "author_association": "COLLABORATOR",
    "body": "> I'm not entirely sure if we should change it, but if we should, then this is definitely a breaking change and we should try to bundle it up with other breaking changes.\r\n\r\nIf this is not a bug, do you know what the rationale was for this behavior originally? It feels like this provides minimal UX benefits, makes tests harder to read, and introduces greater risk of testing bugs, especially for e.g. long integration tests where the event might be emitted many txs after you declared to expect it. It also deviates from other frameworks where you specify the exact call/receipt emitting the event (see [waffle](https://ethereum-waffle.readthedocs.io/en/latest/matchers.html#emitting-events) (used in hardhat) and [brownie](https://vyper.readthedocs.io/en/stable/testing-contracts-brownie.html#testing-events)).\r\n\r\n> It then also goes on in an info box:\r\n> > ℹ️ Ordering matters\r\n> > If we call expectEmit and emit an event, then the next event emitted must match the one we expect.\r\n>\r\n> This is essentially saying that if we call expectEmit, emit the event we expect and then some other part of our code emits a second event, then the second event must match the first.\r\n\r\nThis is exactly the part of the docs that seem contradictory! 😅 Both \"the next event emitted must match the one we expect\" and \"the second event must match the first\" are not true. Ordering only matters in the sense that you must have `vm.expectEmit(...); emit MyEvent();` first, and the event emission you're looking for can come any time after until the test ends. This test below passes, but I really think it should fail for the reasons above.\r\n\r\n```solidity\r\ncontract MyContract {\r\n  event MyEvent();\r\n  event OtherEvent();\r\n\r\n  function noEvent() public {}\r\n\r\n  function otherEvent() public {\r\n    emit OtherEvent();\r\n  }\r\n\r\n  function myEvent() public {\r\n    emit OtherEvent();\r\n    emit MyEvent();\r\n  }\r\n}\r\n\r\ncontract ExpectTest is Test {\r\n  event MyEvent();\r\n  MyContract myContract;\r\n\r\n  function setUp() public {\r\n    myContract = new MyContract();\r\n  }\r\n\r\n  function test_EventuallyMyEvent() public {\r\n    vm.expectEmit(true, true, true, true);\r\n    emit MyEvent();\r\n    myContract.otherEvent();\r\n    myContract.noEvent();\r\n    myContract.otherEvent();\r\n    myContract.myEvent();\r\n  }\r\n}\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1139801773/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1139809919",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1745#issuecomment-1139809919",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1745",
    "id": 1139809919,
    "node_id": "IC_kwDOGBlvNc5D8B5_",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-27T17:07:01Z",
    "updated_at": "2022-05-27T17:07:01Z",
    "author_association": "MEMBER",
    "body": "Perhaps the confusion is that it's the event *data* (topics + data) and not topic0 that needs to match? I.e. if I emit a `MyEvent(123)` and then a `MyEvent(456)` then it would fail since the data + topics do not match.\r\n\r\n>If this is not a bug, do you know what the rationale was for this behavior originally?\r\n\r\nIt's not a bug but I do not know the rationale, I believe `expectEmit` was originally added by @brockelmore so maybe he can add some insight. For `expectCall` I believe I was mirroring how it works in Hardhat?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1139809919/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1139833296",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1745#issuecomment-1139833296",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1745",
    "id": 1139833296,
    "node_id": "IC_kwDOGBlvNc5D8HnQ",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-27T17:28:50Z",
    "updated_at": "2022-05-27T17:28:50Z",
    "author_association": "COLLABORATOR",
    "body": "From the description in the original PR (https://github.com/foundry-rs/foundry/pull/329) it does sound like it was supposed to only work for the next call:\r\n\r\n> After the call, if the expected events are found, it continues execution. Otherwise, if the expected logs aren't found, it reverts.\r\n\r\nIt's also possible it used to fail if not found in the next call, and a subsequent PR changed that. But yea we'll see what @brockelmore says 👍",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1139833296/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1141149747",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1745#issuecomment-1141149747",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1745",
    "id": 1141149747,
    "node_id": "IC_kwDOGBlvNc5EBJAz",
    "user": {
      "login": "brockelmore",
      "id": 31553173,
      "node_id": "MDQ6VXNlcjMxNTUzMTcz",
      "avatar_url": "https://avatars.githubusercontent.com/u/31553173?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brockelmore",
      "html_url": "https://github.com/brockelmore",
      "followers_url": "https://api.github.com/users/brockelmore/followers",
      "following_url": "https://api.github.com/users/brockelmore/following{/other_user}",
      "gists_url": "https://api.github.com/users/brockelmore/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brockelmore/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brockelmore/subscriptions",
      "organizations_url": "https://api.github.com/users/brockelmore/orgs",
      "repos_url": "https://api.github.com/users/brockelmore/repos",
      "events_url": "https://api.github.com/users/brockelmore/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brockelmore/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-30T13:17:44Z",
    "updated_at": "2022-05-30T13:17:44Z",
    "author_association": "MEMBER",
    "body": "Ye I believe things got switched around. I believe the reason it got changed was people seemed to like to just define a bunch of logs they expect at the beginning of the test then write the test like normal to improve readability. I.e.:\r\n```solidity\r\nfunction logs() internal {\r\n    vm.expectEmit(..);\r\n    emit event(..);\r\n    vm.expectEmit(..);\r\n    emit event(..);\r\n}\r\n\r\nfunction testA() public {\r\n    logs();\r\n    // do normal test stuff that likely includes multiple calls & static calls\r\n}\r\n```\r\n\r\nIt may have also been because we were considering static calls in that group which was an even bigger footgun? I dont have strong preferences here, but we should filter out static calls if we change `expectEmit`",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1141149747/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
