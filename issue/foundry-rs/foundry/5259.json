{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/5259",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5259/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5259/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5259/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/5259",
  "id": 1782588614,
  "node_id": "I_kwDOGBlvNc5qQCTG",
  "number": 5259,
  "title": "Differentiate between fail_on_assert and fail_on_revert",
  "user": {
    "login": "aviggiano",
    "id": 3029017,
    "node_id": "MDQ6VXNlcjMwMjkwMTc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/3029017?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/aviggiano",
    "html_url": "https://github.com/aviggiano",
    "followers_url": "https://api.github.com/users/aviggiano/followers",
    "following_url": "https://api.github.com/users/aviggiano/following{/other_user}",
    "gists_url": "https://api.github.com/users/aviggiano/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/aviggiano/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/aviggiano/subscriptions",
    "organizations_url": "https://api.github.com/users/aviggiano/orgs",
    "repos_url": "https://api.github.com/users/aviggiano/repos",
    "events_url": "https://api.github.com/users/aviggiano/events{/privacy}",
    "received_events_url": "https://api.github.com/users/aviggiano/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2023-06-29T20:25:35Z",
  "updated_at": "2023-06-30T18:23:15Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "Hello,\r\n\r\nI am currently fuzzing Uniswap v2 as part of a comparison between foundry and echidna.\r\n\r\nI am having some trouble reproducing what I can do with echidna here. \r\n\r\nMore specifically, when echidna is run with `testMode: assertion`, it will fail if an assertion does not equal `true`, but it will continue fuzzing if a `require` does not equal `true` (similar to the behavior of `vm.assume` on foundry). \r\n\r\nHowever, foundry invariant tests will treat both `assert` and `revert` as a failure. \r\n\r\nThis is not ideal when I am trying to catch failed asserts on my `targetContract` but I do not care about failed `require`s on any other contracts. This is the case if I'm doing handler-based testing. For example, my target contract **MUST NOT** have any failed `assert`s, but any other deployed contracts may have failed `require`s.\r\n\r\nIt would be interesting to have a `fail_on_assert` configuration variable in order to mimic echidna's behavior.",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/5259/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5259/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1614703666",
    "html_url": "https://github.com/foundry-rs/foundry/issues/5259#issuecomment-1614703666",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5259",
    "id": 1614703666,
    "node_id": "IC_kwDOGBlvNc5gPmwy",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-06-30T14:05:10Z",
    "updated_at": "2023-06-30T14:05:10Z",
    "author_association": "COLLABORATOR",
    "body": "Does the `fail_on_revert` flag give you what you need? When `false` reverts are ignored. You can find more info about this flag in the book",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1614703666/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1614742516",
    "html_url": "https://github.com/foundry-rs/foundry/issues/5259#issuecomment-1614742516",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5259",
    "id": 1614742516,
    "node_id": "IC_kwDOGBlvNc5gPwP0",
    "user": {
      "login": "aviggiano",
      "id": 3029017,
      "node_id": "MDQ6VXNlcjMwMjkwMTc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3029017?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aviggiano",
      "html_url": "https://github.com/aviggiano",
      "followers_url": "https://api.github.com/users/aviggiano/followers",
      "following_url": "https://api.github.com/users/aviggiano/following{/other_user}",
      "gists_url": "https://api.github.com/users/aviggiano/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aviggiano/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aviggiano/subscriptions",
      "organizations_url": "https://api.github.com/users/aviggiano/orgs",
      "repos_url": "https://api.github.com/users/aviggiano/repos",
      "events_url": "https://api.github.com/users/aviggiano/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aviggiano/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-06-30T14:32:24Z",
    "updated_at": "2023-06-30T14:32:53Z",
    "author_association": "NONE",
    "body": "Hi @mds1 \n\nIt does not. What I want is to fail on `assert` but not fail on `require` (which triggers a revert)\n\nIs it possible to do that?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1614742516/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1614762451",
    "html_url": "https://github.com/foundry-rs/foundry/issues/5259#issuecomment-1614762451",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5259",
    "id": 1614762451,
    "node_id": "IC_kwDOGBlvNc5gP1HT",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-06-30T14:47:48Z",
    "updated_at": "2023-06-30T14:47:48Z",
    "author_association": "COLLABORATOR",
    "body": "Do you mean `assert` as-in the native solidity method, or are you referring to `assertEq` helpers? If the latter, this will work with `fail_on_revert = false` and using `assertEq` in your invariant test contracts. Note that `assertEq` is not yet supported in handler/target contracts, see https://github.com/foundry-rs/foundry/issues/4718. \r\n\r\nIf you mean the former, this is not currently supported. Assuming #4718 gets fixed, my question would be: why do you need to use `assert` instead of `assertEq`? Is this for integration with the SMT solver or similar? `assert` creates an error of `Panic(uint256)` and `require` creates an error of `Error(string)`, so we should be able to differentiate them if this is needed.\r\n\r\nCan you share more specifics about what you are trying to accomplish? Foundry and echidna structure their tests/failure detection differently, so purely trying to replicate echidna with `assert` might not be the right goal",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1614762451/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1614783235",
    "html_url": "https://github.com/foundry-rs/foundry/issues/5259#issuecomment-1614783235",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5259",
    "id": 1614783235,
    "node_id": "IC_kwDOGBlvNc5gP6MD",
    "user": {
      "login": "aviggiano",
      "id": 3029017,
      "node_id": "MDQ6VXNlcjMwMjkwMTc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3029017?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aviggiano",
      "html_url": "https://github.com/aviggiano",
      "followers_url": "https://api.github.com/users/aviggiano/followers",
      "following_url": "https://api.github.com/users/aviggiano/following{/other_user}",
      "gists_url": "https://api.github.com/users/aviggiano/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aviggiano/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aviggiano/subscriptions",
      "organizations_url": "https://api.github.com/users/aviggiano/orgs",
      "repos_url": "https://api.github.com/users/aviggiano/repos",
      "events_url": "https://api.github.com/users/aviggiano/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aviggiano/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-06-30T15:01:28Z",
    "updated_at": "2023-06-30T18:23:15Z",
    "author_association": "NONE",
    "body": "I mean `assert` as in the native solidity method. I believe the issue is indeed related to #4718.\r\n\r\nThe reason why I need `assert` instead of `assertEq` is that I am trying to use BOTH echidna and foundry on the same invariant tests in order to avoid code repetition.\r\n\r\nYou can take a look at my [test suite here](https://github.com/aviggiano/fuzzer-evaluation/tree/main/protocols/uniswap-v2/test).\r\n\r\nBasically, I have a `FoundryInvariantTests.sol` contract that extends from `forge-std/Test.sol`, and that contract deploys [`targetContract`s](https://github.com/aviggiano/fuzzer-evaluation/blob/main/protocols/uniswap-v2/test/FoundryInvariantTests.t.sol#L22) to be fuzzed by foundry. \r\n\r\nThen, it uses handlers that call Uniswap v2 contracts (such as `UniswapV2Pair`), which has itself some `require`s. \r\n\r\nFor example, Uniswap will revert when trying to swap 0 tokens, with the following message: `UniswapV2: INSUFFICIENT_OUTPUT_AMOUNT`.\r\n\r\nI do not want foundry to fail on this error.\r\n\r\nThe reason is that my handler is already returning return value of the proxy call (e.g. with [`address(_target).call(_calldata)`](https://github.com/aviggiano/fuzzer-evaluation/blob/main/protocols/uniswap-v2/test/User.sol#L12)) to the `targetContract`\r\n\r\nThis is why differentiating between `Panic(uint256)` and `Error(string)` would be useful.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1614783235/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
