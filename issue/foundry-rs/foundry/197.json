{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/197",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/197/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/197/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/197/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/197",
  "id": 1074788600,
  "node_id": "I_kwDOGBlvNc5AD_j4",
  "number": 197,
  "title": "Hardhat style console.logs don't work for uint",
  "user": {
    "login": "tlancina",
    "id": 804331,
    "node_id": "MDQ6VXNlcjgwNDMzMQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/804331?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tlancina",
    "html_url": "https://github.com/tlancina",
    "followers_url": "https://api.github.com/users/tlancina/followers",
    "following_url": "https://api.github.com/users/tlancina/following{/other_user}",
    "gists_url": "https://api.github.com/users/tlancina/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tlancina/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tlancina/subscriptions",
    "organizations_url": "https://api.github.com/users/tlancina/orgs",
    "repos_url": "https://api.github.com/users/tlancina/repos",
    "events_url": "https://api.github.com/users/tlancina/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tlancina/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 8,
  "created_at": "2021-12-08T20:09:00Z",
  "updated_at": "2021-12-20T22:42:45Z",
  "closed_at": "2021-12-20T22:42:45Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "From https://github.com/gakonst/foundry/blob/bab7e2d672bf9459645c01201b37e6fcfd257521/evm-adapters/src/sputnik/cheatcodes/cheatcode_handler.rs#L746 it looks like the method signature is always for `log(uint)`, but the abigen seems to only produce signatures for `ethers::core::types::U256`.\r\n\r\nIf you need more information let me know, you can easily repro by adding a `console.log` with any uint value to the console tests.\r\n\r\nHappy to submit a PR if you can point me in the right direction (also DSTest logs work just fine).\r\n",
  "closed_by": {
    "login": "gakonst",
    "id": 17802178,
    "node_id": "MDQ6VXNlcjE3ODAyMTc4",
    "avatar_url": "https://avatars.githubusercontent.com/u/17802178?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/gakonst",
    "html_url": "https://github.com/gakonst",
    "followers_url": "https://api.github.com/users/gakonst/followers",
    "following_url": "https://api.github.com/users/gakonst/following{/other_user}",
    "gists_url": "https://api.github.com/users/gakonst/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/gakonst/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gakonst/subscriptions",
    "organizations_url": "https://api.github.com/users/gakonst/orgs",
    "repos_url": "https://api.github.com/users/gakonst/repos",
    "events_url": "https://api.github.com/users/gakonst/events{/privacy}",
    "received_events_url": "https://api.github.com/users/gakonst/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/197/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/197/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/989181602",
    "html_url": "https://github.com/foundry-rs/foundry/issues/197#issuecomment-989181602",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/197",
    "id": 989181602,
    "node_id": "IC_kwDOGBlvNc469bai",
    "user": {
      "login": "mattsse",
      "id": 19890894,
      "node_id": "MDQ6VXNlcjE5ODkwODk0",
      "avatar_url": "https://avatars.githubusercontent.com/u/19890894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mattsse",
      "html_url": "https://github.com/mattsse",
      "followers_url": "https://api.github.com/users/mattsse/followers",
      "following_url": "https://api.github.com/users/mattsse/following{/other_user}",
      "gists_url": "https://api.github.com/users/mattsse/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mattsse/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mattsse/subscriptions",
      "organizations_url": "https://api.github.com/users/mattsse/orgs",
      "repos_url": "https://api.github.com/users/mattsse/repos",
      "events_url": "https://api.github.com/users/mattsse/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mattsse/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-12-08T20:45:32Z",
    "updated_at": "2021-12-08T20:52:53Z",
    "author_association": "MEMBER",
    "body": "nice catch, \r\nso what's happening under the hood is that abigen! takes the console.log json https://github.com/gakonst/foundry/blob/master/evm-adapters/testdata/console.json and generates Binding for all those calls\r\nHowever the type for `p0` of `function log(uint p0)` is actually `uint256` the the json (format the json then it's on line 8762):\r\n\r\n```json\r\n  {\r\n    \"inputs\": [\r\n      {\r\n        \"internalType\": \"uint256\",\r\n        \"name\": \"p0\",\r\n        \"type\": \"uint256\"\r\n      }\r\n    ],\r\n    \"name\": \"log\",\r\n    \"outputs\": [],\r\n    \"stateMutability\": \"view\",\r\n    \"type\": \"function\"\r\n  },\r\n```\r\n\r\nhowever the function uses `log(uint)` when sending the payload but the generated rust type is\r\n\r\n```rust\r\n        ///Container type for all input parameters for the `log`function with signature `log(uint256)` and selector `[248, 44, 80, 241]`\r\n        #[ethcall(name = \"log\", abi = \"log(uint256)\")]\r\n        pub struct Log333Call {\r\n            pub p_0: ethers::core::types::U256,\r\n        }\r\n```\r\n\r\n~~I hope editing the `type` manually in the json file to `uint` for `log(unit)` and `int` instead of `int256` for `log(int)` will work~~, we also want a test for that so in the event we have to recompile the console.json we're reminded of that.\r\n\r\nUnfortunately, this does not work... then we should add our own Call types add add this as additional check,\r\n\r\nSomething like:\r\n\r\n```rust\r\n        #[derive(EthCall, EthAbiType,...)]\r\n        #[ethcall(name = \"log\", abi = \"log(uint)\")]\r\n        pub struct LogUint {\r\n            pub p_0: ethers::core::types::U256,\r\n        }\r\n```\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/989181602/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/989302355",
    "html_url": "https://github.com/foundry-rs/foundry/issues/197#issuecomment-989302355",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/197",
    "id": 989302355,
    "node_id": "IC_kwDOGBlvNc46945T",
    "user": {
      "login": "tlancina",
      "id": 804331,
      "node_id": "MDQ6VXNlcjgwNDMzMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/804331?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tlancina",
      "html_url": "https://github.com/tlancina",
      "followers_url": "https://api.github.com/users/tlancina/followers",
      "following_url": "https://api.github.com/users/tlancina/following{/other_user}",
      "gists_url": "https://api.github.com/users/tlancina/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tlancina/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tlancina/subscriptions",
      "organizations_url": "https://api.github.com/users/tlancina/orgs",
      "repos_url": "https://api.github.com/users/tlancina/repos",
      "events_url": "https://api.github.com/users/tlancina/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tlancina/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-12-08T23:12:00Z",
    "updated_at": "2021-12-08T23:12:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "Ah ok, thanks for the explanation. What are your thoughts on changing `console.sol` to explicitly match the generated ABI like:\r\n\r\n```diff\r\n-    function log(uint p0) internal view {\r\n-        _sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\r\n+    function log(uint256 p0) internal view {\r\n+        _sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\r\n     }\r\n```\r\n\r\nThe only things I could think of were if they aren't always equivalent or if the upstream Hardhat file changes it's more annoying to track/maintain.\r\n\r\nIn the meantime I'll take a look at the abigen! `proc_macro` stuff (I don't know Rust, but this has been an enjoyable way to learn).",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/989302355/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/989309572",
    "html_url": "https://github.com/foundry-rs/foundry/issues/197#issuecomment-989309572",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/197",
    "id": 989309572,
    "node_id": "IC_kwDOGBlvNc4696qE",
    "user": {
      "login": "mattsse",
      "id": 19890894,
      "node_id": "MDQ6VXNlcjE5ODkwODk0",
      "avatar_url": "https://avatars.githubusercontent.com/u/19890894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mattsse",
      "html_url": "https://github.com/mattsse",
      "followers_url": "https://api.github.com/users/mattsse/followers",
      "following_url": "https://api.github.com/users/mattsse/following{/other_user}",
      "gists_url": "https://api.github.com/users/mattsse/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mattsse/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mattsse/subscriptions",
      "organizations_url": "https://api.github.com/users/mattsse/orgs",
      "repos_url": "https://api.github.com/users/mattsse/repos",
      "events_url": "https://api.github.com/users/mattsse/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mattsse/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-12-08T23:26:11Z",
    "updated_at": "2021-12-08T23:27:03Z",
    "author_association": "MEMBER",
    "body": "> The only things I could think of were if they aren't always equivalent or if the upstream Hardhat file changes it's more annoying to track/maintain.\r\n\r\nthat's the point against it, lets simply support more functions instead of editing the ABI which might cause problems down the line.\r\n\r\nThis is basically how the EthCall macro works:\r\n\r\nhttps://github.com/gakonst/ethers-rs/blob/0b1f3b1dcfcd4a16d455af7850c75b29d366cf22/ethers-contract/tests/common/derive.rs#L432-L438\r\n\r\nSo what we should do here is:\r\n1. add two more structs that derive EthCall (`LogUint` `LogInt`) same as above, see the linked ethers-rs code for reference\r\n2. try to decode them here as well: https://github.com/gakonst/foundry/blob/bab7e2d672bf9459645c01201b37e6fcfd257521/evm-adapters/src/sputnik/cheatcodes/cheatcode_handler.rs#L265-L268\r\n\r\nWe probably want to try to decode them first, since they are more common than most of the console log calls\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/989309572/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/990612241",
    "html_url": "https://github.com/foundry-rs/foundry/issues/197#issuecomment-990612241",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/197",
    "id": 990612241,
    "node_id": "IC_kwDOGBlvNc47C4sR",
    "user": {
      "login": "tlancina",
      "id": 804331,
      "node_id": "MDQ6VXNlcjgwNDMzMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/804331?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tlancina",
      "html_url": "https://github.com/tlancina",
      "followers_url": "https://api.github.com/users/tlancina/followers",
      "following_url": "https://api.github.com/users/tlancina/following{/other_user}",
      "gists_url": "https://api.github.com/users/tlancina/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tlancina/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tlancina/subscriptions",
      "organizations_url": "https://api.github.com/users/tlancina/orgs",
      "repos_url": "https://api.github.com/users/tlancina/repos",
      "events_url": "https://api.github.com/users/tlancina/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tlancina/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-12-10T04:37:35Z",
    "updated_at": "2021-12-10T04:37:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "When viewing the expanded output, I can see that despite `#[ethcall(name = \"log\", abi = \"log(uint)\")]`, the signature is still `log(uint256)`:\r\n\r\n```rust\r\n#[ethcall(name = \"log\", abi = \"log(uint)\")]\r\npub struct LogUint {\r\n    pub p_0: ethers::core::types::U256,\r\n}\r\n\r\n...\r\n\r\nimpl ethers::contract::EthCall for LogUint {\r\n    fn function_name() -> ::std::borrow::Cow<'static, str> {\r\n        \"log\".into()\r\n    }\r\n    fn selector() -> ethers::core::types::Selector {\r\n        [248, 44, 80, 241]\r\n    }\r\n    fn abi_signature() -> ::std::borrow::Cow<'static, str> {\r\n        \"log(uint256)\".into()\r\n    }\r\n}\r\n```\r\n\r\nIt seems to come down to [ethers-core/src/abi/human_readable.rs#L333](https://github.com/gakonst/ethers-rs/blob/59cf9918289012d9235e70da40f8d93c1f9ff692/ethers-core/src/abi/human_readable.rs#L333) returning a Uint(256) for \"uint\": [ethabi/src/param_type/reader.rs#L147](https://github.com/rust-ethereum/ethabi/blob/51b4a7f4f8fd5223435189a6802efdf095bbf8b5/ethabi/src/param_type/reader.rs#L147). I'm not really sure the best way to work around this right now.\r\n\r\nIf this has reached the cost/benefit tipping point where explaining things isn't worth it and you want to just move on I won't mind, I certainly appreciate the help so far (but would still be interested in seeing this through if you are open to it).",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/990612241/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/990615565",
    "html_url": "https://github.com/foundry-rs/foundry/issues/197#issuecomment-990615565",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/197",
    "id": 990615565,
    "node_id": "IC_kwDOGBlvNc47C5gN",
    "user": {
      "login": "mattsse",
      "id": 19890894,
      "node_id": "MDQ6VXNlcjE5ODkwODk0",
      "avatar_url": "https://avatars.githubusercontent.com/u/19890894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mattsse",
      "html_url": "https://github.com/mattsse",
      "followers_url": "https://api.github.com/users/mattsse/followers",
      "following_url": "https://api.github.com/users/mattsse/following{/other_user}",
      "gists_url": "https://api.github.com/users/mattsse/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mattsse/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mattsse/subscriptions",
      "organizations_url": "https://api.github.com/users/mattsse/orgs",
      "repos_url": "https://api.github.com/users/mattsse/repos",
      "events_url": "https://api.github.com/users/mattsse/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mattsse/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-12-10T04:48:31Z",
    "updated_at": "2021-12-10T04:55:38Z",
    "author_association": "MEMBER",
    "body": "ah interesting, I guess that makes sense since `unit` really is `uint256`.\r\n\r\nThen we have to implement this by hand, which is fine.\r\nThis looks great and is basically it already! would you like to open a PR with that, we basically need:\r\n\r\n- [ ] Manual EthCall implementation for `LogUint` + `LogInt`, as you did already, but signature should be `log(unit)` and `log(int)` and the selectors need to be updated accordingly\r\n- [ ] add additional decoding checks to where we already try to decode `ConsoleCalls`\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/990615565/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/990644538",
    "html_url": "https://github.com/foundry-rs/foundry/issues/197#issuecomment-990644538",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/197",
    "id": 990644538,
    "node_id": "IC_kwDOGBlvNc47DAk6",
    "user": {
      "login": "tlancina",
      "id": 804331,
      "node_id": "MDQ6VXNlcjgwNDMzMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/804331?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tlancina",
      "html_url": "https://github.com/tlancina",
      "followers_url": "https://api.github.com/users/tlancina/followers",
      "following_url": "https://api.github.com/users/tlancina/following{/other_user}",
      "gists_url": "https://api.github.com/users/tlancina/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tlancina/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tlancina/subscriptions",
      "organizations_url": "https://api.github.com/users/tlancina/orgs",
      "repos_url": "https://api.github.com/users/tlancina/repos",
      "events_url": "https://api.github.com/users/tlancina/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tlancina/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-12-10T06:06:50Z",
    "updated_at": "2021-12-10T06:06:50Z",
    "author_association": "CONTRIBUTOR",
    "body": "Ah I didn't even think to copy the expanded output, I think the `cargo expand` [disclaimer](https://github.com/dtolnay/cargo-expand#disclaimer) made me wary.\r\n\r\nSounds good! I'll open a PR when I get a chance.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/990644538/reactions",
      "total_count": 2,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 2,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/998264773",
    "html_url": "https://github.com/foundry-rs/foundry/issues/197#issuecomment-998264773",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/197",
    "id": 998264773,
    "node_id": "IC_kwDOGBlvNc47gE_F",
    "user": {
      "login": "mattsse",
      "id": 19890894,
      "node_id": "MDQ6VXNlcjE5ODkwODk0",
      "avatar_url": "https://avatars.githubusercontent.com/u/19890894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mattsse",
      "html_url": "https://github.com/mattsse",
      "followers_url": "https://api.github.com/users/mattsse/followers",
      "following_url": "https://api.github.com/users/mattsse/following{/other_user}",
      "gists_url": "https://api.github.com/users/mattsse/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mattsse/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mattsse/subscriptions",
      "organizations_url": "https://api.github.com/users/mattsse/orgs",
      "repos_url": "https://api.github.com/users/mattsse/repos",
      "events_url": "https://api.github.com/users/mattsse/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mattsse/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-12-20T20:59:50Z",
    "updated_at": "2021-12-20T20:59:50Z",
    "author_association": "MEMBER",
    "body": "Since hardhat's selectors are a bit odd, I guess we can simply patch them before trying to decode the calls:\r\n\r\nThis is a map `hardhat selector(unit,int) -> selector(uint256,int256)`\r\n\r\n```rust\r\nlet HH_CONSOLE_LOG_PATCHES = HashMap::from(\r\n[\r\n  // log(bool,uint256,uint256,address)\r\n  ([241, 97, 178, 33], [0, 221, 135, 185]),\r\n  // log(uint256,address,address,string)\r\n  ([121, 67, 220, 102], [3, 28, 111, 115]),\r\n  // log(uint256,bool,address,uint256)\r\n  ([65, 181, 239, 59], [7, 130, 135, 245]),\r\n  // log(bool,address,bool,uint256)\r\n  ([76, 182, 15, 209], [7, 131, 21, 2]),\r\n  // log(bool,uint256,address)\r\n  ([196, 210, 53, 7], [8, 142, 249, 210]),\r\n  // log(uint256,address,address,bool)\r\n  ([1, 85, 11, 4], [9, 31, 250, 245]),\r\n  // log(address,bool,uint256,string)\r\n  ([155, 88, 142, 204], [10, 166, 207, 173]),\r\n  // log(bool,bool,uint256,uint256)\r\n  ([70, 103, 222, 142], [11, 176, 14, 171]),\r\n  // log(bool,address,address,uint256)\r\n  ([82, 132, 189, 108], [12, 102, 209, 190]),\r\n  // log(uint256,address,uint256,uint256)\r\n  ([202, 154, 62, 180], [12, 156, 217, 193]),\r\n  // log(string,address,uint256)\r\n  ([7, 200, 18, 23], [13, 38, 185, 37]),\r\n  // log(address,string,uint256,bool)\r\n  ([126, 37, 13, 91], [14, 247, 224, 80]),\r\n  // log(address,uint256,address,uint256)\r\n  ([165, 217, 135, 104], [16, 15, 101, 14]),\r\n  // log(string,string,uint256,address)\r\n  ([93, 79, 70, 128], [16, 35, 247, 178]),\r\n  // log(bool,string,uint256)\r\n  ([192, 56, 42, 172], [16, 147, 238, 17]),\r\n  // log(bool,bool,uint256)\r\n  ([176, 19, 101, 187], [18, 242, 22, 2]),\r\n  // log(bool,address,uint256,address)\r\n  ([104, 241, 88, 181], [19, 107, 5, 221]),\r\n  // log(bool,uint256,address,uint256)\r\n  ([202, 165, 35, 106], [21, 55, 220, 135]),\r\n  // log(bool,string,uint256,address)\r\n  ([91, 34, 185, 56], [21, 150, 161, 206]),\r\n  // log(address,string,string,uint256)\r\n  ([161, 79, 208, 57], [21, 159, 137, 39]),\r\n  // log(uint256,address,uint256,address)\r\n  ([253, 178, 236, 212], [21, 193, 39, 181]),\r\n  // log(uint256,uint256,address,bool)\r\n  ([168, 232, 32, 174], [21, 202, 196, 118]),\r\n  // log(bool,string,bool,uint256)\r\n  ([141, 111, 156, 165], [22, 6, 163, 147]),\r\n  // log(address,address,uint256)\r\n  ([108, 54, 109, 114], [23, 254, 97, 133]),\r\n  // log(uint256,uint256,uint256,uint256)\r\n  ([92, 160, 173, 62], [25, 63, 184, 0]),\r\n  // log(bool,string,uint256,string)\r\n  ([119, 161, 171, 237], [26, 217, 109, 230]),\r\n  // log(bool,uint256,address,string)\r\n  ([24, 9, 19, 65], [27, 179, 176, 154]),\r\n  // log(string,uint256,address)\r\n  ([227, 132, 159, 121], [28, 126, 196, 72]),\r\n  // log(uint256,bool)\r\n  ([30, 109, 212, 236], [28, 157, 126, 179]),\r\n  // log(address,uint256,address,string)\r\n  ([93, 113, 243, 158], [29, 169, 134, 234]),\r\n  // log(address,string,uint256,uint256)\r\n  ([164, 201, 42, 96], [29, 200, 225, 184]),\r\n  // log(uint256,bool,uint256)\r\n  ([90, 77, 153, 34], [32, 9, 128, 20]),\r\n  // log(uint256,bool,bool)\r\n  ([213, 206, 172, 224], [32, 113, 134, 80]),\r\n  // log(address,uint256,uint256,address)\r\n  ([30, 246, 52, 52], [32, 227, 152, 77]),\r\n  // log(uint256,string,string,string)\r\n  ([87, 221, 10, 17], [33, 173, 6, 131]),\r\n  // log(address,uint256,bool,uint256)\r\n  ([105, 143, 67, 146], [34, 246, 185, 153]),\r\n  // log(uint256,address,address,address)\r\n  ([85, 71, 69, 249], [36, 136, 180, 20]),\r\n  // log(string,bool,string,uint256)\r\n  ([52, 203, 48, 141], [36, 249, 20, 101]),\r\n  // log(bool,uint256,address,address)\r\n  ([138, 47, 144, 170], [38, 245, 96, 168]),\r\n  // log(uint256,uint256,string,string)\r\n  ([124, 3, 42, 50], [39, 216, 175, 210]),\r\n  // log(bool,string,uint256,uint256)\r\n  ([142, 74, 232, 110], [40, 134, 63, 203]),\r\n  // log(uint256,bool,string,uint256)\r\n  ([145, 95, 219, 40], [44, 29, 7, 70]),\r\n  // log(address,uint256,uint256,uint256)\r\n  ([61, 14, 157, 228], [52, 240, 230, 54]),\r\n  // log(uint256,bool,address)\r\n  ([66, 78, 255, 191], [53, 8, 95, 123]),\r\n  // log(string,uint256,bool,bool)\r\n  ([227, 127, 243, 208], [53, 76, 54, 214]),\r\n  // log(bool,uint256,uint256)\r\n  ([59, 92, 3, 224], [55, 16, 51, 103]),\r\n  // log(bool,uint256,uint256,uint256)\r\n  ([50, 223, 165, 36], [55, 75, 180, 178]),\r\n  // log(uint256,string,uint256)\r\n  ([91, 109, 232, 63], [55, 170, 125, 76]),\r\n  // log(address,bool,uint256,uint256)\r\n  ([194, 16, 160, 30], [56, 111, 245, 244]),\r\n  // log(address,address,bool,uint256)\r\n  ([149, 214, 95, 17], [57, 113, 231, 140]),\r\n  // log(bool,uint256)\r\n  ([54, 75, 106, 146], [57, 145, 116, 211]),\r\n  // log(uint256,string,uint256,address)\r\n  ([171, 123, 217, 253], [59, 34, 121, 180]),\r\n  // log(address,uint256,bool,bool)\r\n  ([254, 161, 213, 90], [59, 245, 229, 55]),\r\n  // log(uint256,address,string,string)\r\n  ([141, 119, 134, 36], [62, 18, 140, 163]),\r\n  // log(string,address,bool,uint256)\r\n  ([197, 209, 187, 139], [62, 159, 134, 106]),\r\n  // log(uint256,uint256,string,address)\r\n  ([67, 50, 133, 162], [66, 210, 29, 183]),\r\n  // log(address,string,uint256,string)\r\n  ([93, 19, 101, 201], [68, 136, 48, 168]),\r\n  // log(uint256,bool,address,bool)\r\n  ([145, 251, 18, 66], [69, 77, 84, 165]),\r\n  // log(address,string,address,uint256)\r\n  ([140, 25, 51, 169], [69, 127, 227, 207]),\r\n  // log(uint256,address,string,uint256)\r\n  ([160, 196, 20, 232], [70, 130, 107, 93]),\r\n  // log(uint256,uint256,bool)\r\n  ([103, 87, 15, 247], [71, 102, 218, 114]),\r\n  // log(address,uint256,address,address)\r\n  ([236, 36, 132, 111], [71, 141, 28, 98]),\r\n  // log(address,uint256,uint256,string)\r\n  ([137, 52, 13, 171], [74, 40, 192, 23]),\r\n  // log(bool,bool,address,uint256)\r\n  ([96, 147, 134, 231], [76, 18, 61, 87]),\r\n  // log(uint256,string,bool)\r\n  ([70, 167, 208, 206], [76, 237, 167, 90]),\r\n  // log(string,uint256,address,uint256)\r\n  ([88, 73, 122, 254], [79, 4, 253, 198]),\r\n  // log(address,string,bool,uint256)\r\n  ([231, 32, 82, 28], [81, 94, 56, 182]),\r\n  // log(bool,address,uint256,string)\r\n  ([160, 104, 88, 51], [81, 240, 159, 248]),\r\n  // log(bool,bool,uint256,address)\r\n  ([11, 255, 149, 13], [84, 167, 169, 160]),\r\n  // log(uint256,uint256,address,address)\r\n  ([202, 147, 155, 32], [86, 165, 209, 177]),\r\n  // log(string,string,uint256)\r\n  ([243, 98, 202, 89], [88, 33, 239, 161]),\r\n  // log(string,uint256,string)\r\n  ([163, 245, 199, 57], [89, 112, 224, 137]),\r\n  // log(uint256,uint256,uint256,string)\r\n  ([120, 173, 122, 12], [89, 207, 203, 227]),\r\n  // log(string,address,uint256,string)\r\n  ([76, 85, 242, 52], [90, 71, 118, 50]),\r\n  // log(uint256,address,uint256)\r\n  ([136, 67, 67, 170], [90, 155, 94, 213]),\r\n  // log(string,uint256,string,string)\r\n  ([108, 152, 218, 226], [90, 184, 78, 31]),\r\n  // log(uint256,address,bool,uint256)\r\n  ([123, 8, 232, 235], [90, 189, 153, 42]),\r\n  // log(address,uint256,string,address)\r\n  ([220, 121, 38, 4], [92, 67, 13, 71]),\r\n  // log(uint256,uint256,address)\r\n  ([190, 51, 73, 27], [92, 150, 179, 49]),\r\n  // log(string,bool,address,uint256)\r\n  ([40, 223, 78, 150], [93, 8, 187, 5]),\r\n  // log(string,string,uint256,string)\r\n  ([141, 20, 44, 221], [93, 26, 151, 26]),\r\n  // log(uint256,uint256,string,uint256)\r\n  ([56, 148, 22, 61], [93, 162, 151, 235]),\r\n  // log(string,uint256,address,address)\r\n  ([234, 200, 146, 129], [94, 162, 183, 174]),\r\n  // log(uint256,address,uint256,bool)\r\n  ([25, 246, 115, 105], [95, 116, 58, 124]),\r\n  // log(bool,address,uint256)\r\n  ([235, 112, 75, 175], [95, 123, 154, 251]),\r\n  // log(uint256,string,address,address)\r\n  ([127, 165, 69, 139], [97, 104, 237, 97]),\r\n  // log(bool,bool,uint256,bool)\r\n  ([171, 92, 193, 196], [97, 158, 77, 14]),\r\n  // log(address,string,uint256,address)\r\n  ([223, 215, 216, 11], [99, 24, 54, 120]),\r\n  // log(uint256,address,string)\r\n  ([206, 131, 4, 123], [99, 203, 65, 249]),\r\n  // log(string,address,uint256,address)\r\n  ([163, 102, 236, 128], [99, 251, 139, 197]),\r\n  // log(uint256,string)\r\n  ([15, 163, 243, 69], [100, 63, 208, 223]),\r\n  // log(string,bool,uint256,uint256)\r\n  ([93, 191, 240, 56], [100, 181, 187, 103]),\r\n  // log(address,uint256,uint256,bool)\r\n  ([236, 75, 168, 162], [102, 241, 188, 103]),\r\n  // log(address,uint256,bool)\r\n  ([229, 74, 225, 68], [103, 130, 9, 168]),\r\n  // log(address,string,uint256)\r\n  ([28, 218, 242, 138], [103, 221, 111, 241]),\r\n  // log(uint256,bool,string,string)\r\n  ([164, 51, 252, 253], [104, 200, 184, 189]),\r\n  // log(uint256,string,uint256,bool)\r\n  ([135, 90, 110, 46], [105, 26, 143, 116]),\r\n  // log(uint256,address)\r\n  ([88, 235, 134, 12], [105, 39, 108, 134]),\r\n  // log(uint256,bool,bool,address)\r\n  ([83, 6, 34, 93], [105, 100, 11, 89]),\r\n  // log(bool,uint256,string,uint256)\r\n  ([65, 128, 1, 27], [106, 17, 153, 226]),\r\n  // log(bool,string,uint256,bool)\r\n  ([32, 187, 201, 175], [107, 14, 93, 83]),\r\n  // log(uint256,uint256,address,string)\r\n  ([214, 162, 209, 222], [108, 222, 64, 184]),\r\n  // log(bool,bool,bool,uint256)\r\n  ([194, 72, 131, 77], [109, 112, 69, 193]),\r\n  // log(uint256,uint256,string)\r\n  ([125, 105, 14, 230], [113, 208, 74, 242]),\r\n  // log(uint256,address,address,uint256)\r\n  ([154, 60, 191, 150], [115, 110, 251, 182]),\r\n  // log(string,bool,uint256,string)\r\n  ([66, 185, 162, 39], [116, 45, 110, 231]),\r\n  // log(uint256,bool,bool,uint256)\r\n  ([189, 37, 173, 89], [116, 100, 206, 35]),\r\n  // log(string,uint256,uint256,bool)\r\n  ([247, 60, 126, 61], [118, 38, 219, 146]),\r\n  // log(uint256,uint256,string,bool)\r\n  ([178, 46, 175, 6], [122, 246, 171, 37]),\r\n  // log(uint256,string,address)\r\n  ([31, 144, 242, 74], [122, 250, 201, 89]),\r\n  // log(address,uint256,address)\r\n  ([151, 236, 163, 148], [123, 192, 216, 72]),\r\n  // log(bool,string,string,uint256)\r\n  ([93, 219, 37, 146], [123, 224, 195, 235]),\r\n  // log(bool,address,uint256,uint256)\r\n  ([155, 254, 114, 188], [123, 241, 129, 161]),\r\n  // log(string,uint256,string,address)\r\n  ([187, 114, 53, 233], [124, 70, 50, 164]),\r\n  // log(string,string,address,uint256)\r\n  ([74, 129, 165, 106], [124, 195, 198, 7]),\r\n  // log(string,uint256,string,bool)\r\n  ([233, 159, 130, 207], [125, 36, 73, 29]),\r\n  // log(bool,bool,uint256,string)\r\n  ([80, 97, 137, 55], [125, 212, 208, 224]),\r\n  // log(bool,uint256,bool,uint256)\r\n  ([211, 222, 85, 147], [127, 155, 188, 162]),\r\n  // log(address,bool,string,uint256)\r\n  ([158, 18, 123, 110], [128, 230, 162, 11]),\r\n  // log(string,uint256,address,bool)\r\n  ([17, 6, 168, 247], [130, 17, 42, 66]),\r\n  // log(uint256,string,uint256,uint256)\r\n  ([192, 4, 56, 7], [130, 194, 91, 116]),\r\n  // log(address,uint256)\r\n  ([34, 67, 207, 163], [131, 9, 232, 168]),\r\n  // log(string,uint256,uint256,string)\r\n  ([165, 78, 212, 189], [133, 75, 52, 150]),\r\n  // log(uint256,bool,string)\r\n  ([139, 14, 20, 254], [133, 119, 80, 33]),\r\n  // log(address,uint256,string,string)\r\n  ([126, 86, 198, 147], [136, 168, 196, 6]),\r\n  // log(uint256,bool,uint256,address)\r\n  ([79, 64, 5, 142], [136, 203, 96, 65]),\r\n  // log(uint256,uint256,address,uint256)\r\n  ([97, 11, 168, 192], [136, 246, 228, 178]),\r\n  // log(string,bool,uint256,bool)\r\n  ([60, 197, 181, 211], [138, 247, 207, 138]),\r\n  // log(address,bool,bool,uint256)\r\n  ([207, 181, 135, 86], [140, 78, 93, 230]),\r\n  // log(address,address,uint256,address)\r\n  ([214, 198, 82, 118], [141, 166, 222, 245]),\r\n  // log(string,bool,bool,uint256)\r\n  ([128, 117, 49, 232], [142, 63, 120, 169]),\r\n  // log(bool,uint256,uint256,string)\r\n  ([218, 6, 102, 200], [142, 105, 251, 93]),\r\n  // log(string,string,string,uint256)\r\n  ([159, 208, 9, 245], [142, 175, 176, 43]),\r\n  // log(string,address,address,uint256)\r\n  ([110, 183, 148, 61], [142, 243, 243, 153]),\r\n  // log(uint256,string,address,bool)\r\n  ([249, 63, 255, 55], [144, 195, 10, 86]),\r\n  // log(uint256,address,bool,string)\r\n  ([99, 240, 226, 66], [144, 251, 6, 170]),\r\n  // log(bool,uint256,bool,string)\r\n  ([182, 213, 105, 212], [145, 67, 219, 177]),\r\n  // log(uint256,bool,uint256,bool)\r\n  ([210, 171, 196, 253], [145, 160, 46, 42]),\r\n  // log(string,address,string,uint256)\r\n  ([143, 98, 75, 233], [145, 209, 17, 46]),\r\n  // log(string,bool,uint256,address)\r\n  ([113, 211, 133, 13], [147, 94, 9, 191]),\r\n  // log(address,address,address,uint256)\r\n  ([237, 94, 172, 135], [148, 37, 13, 119]),\r\n  // log(uint256,uint256,bool,address)\r\n  ([225, 23, 116, 79], [154, 129, 106, 131]),\r\n  // log(bool,uint256,bool,address)\r\n  ([66, 103, 199, 248], [154, 205, 54, 22]),\r\n  // log(address,address,uint256,bool)\r\n  ([194, 246, 136, 236], [155, 66, 84, 226]),\r\n  // log(uint256,address,bool)\r\n  ([122, 208, 18, 142], [155, 110, 192, 66]),\r\n  // log(uint256,string,address,string)\r\n  ([248, 152, 87, 127], [156, 58, 223, 161]),\r\n  // log(address,bool,uint256)\r\n  ([44, 70, 141, 21], [156, 79, 153, 251]),\r\n  // log(uint256,address,string,address)\r\n  ([203, 229, 142, 253], [156, 186, 143, 255]),\r\n  // log(string,uint256,address,string)\r\n  ([50, 84, 194, 232], [159, 251, 47, 147]),\r\n  // log(address,uint256,address,bool)\r\n  ([241, 129, 161, 233], [161, 188, 201, 179]),\r\n  // log(uint256,bool,address,address)\r\n  ([134, 237, 193, 12], [161, 239, 76, 187]),\r\n  // log(address,uint256,string)\r\n  ([186, 249, 104, 73], [161, 242, 232, 170]),\r\n  // log(address,uint256,bool,address)\r\n  ([35, 229, 73, 114], [163, 27, 253, 204]),\r\n  // log(uint256,uint256,bool,string)\r\n  ([239, 217, 203, 238], [165, 180, 252, 153]),\r\n  // log(bool,string,address,uint256)\r\n  ([27, 11, 149, 91], [165, 202, 218, 148]),\r\n  // log(address,bool,address,uint256)\r\n  ([220, 113, 22, 210], [167, 92, 89, 222]),\r\n  // log(string,uint256,uint256,uint256)\r\n  ([8, 238, 86, 102], [167, 168, 120, 83]),\r\n  // log(uint256,uint256,bool,bool)\r\n  ([148, 190, 59, 177], [171, 8, 90, 230]),\r\n  // log(string,uint256,bool,string)\r\n  ([118, 204, 96, 100], [171, 247, 58, 152]),\r\n  // log(uint256,bool,address,string)\r\n  ([162, 48, 118, 30], [173, 224, 82, 199]),\r\n  // log(uint256,string,bool,address)\r\n  ([121, 111, 40, 160], [174, 46, 197, 129]),\r\n  // log(uint256,string,string,uint256)\r\n  ([118, 236, 99, 94], [176, 40, 201, 189]),\r\n  // log(uint256,string,string)\r\n  ([63, 87, 194, 149], [177, 21, 97, 31]),\r\n  // log(uint256,string,string,bool)\r\n  ([18, 134, 43, 152], [179, 166, 182, 189]),\r\n  // log(bool,uint256,address,bool)\r\n  ([101, 173, 244, 8], [180, 195, 20, 255]),\r\n  // log(string,uint256)\r\n  ([151, 16, 169, 208], [182, 14, 114, 204]),\r\n  // log(address,uint256,uint256)\r\n  ([135, 134, 19, 94], [182, 155, 202, 246]),\r\n  // log(uint256,bool,bool,bool)\r\n  ([78, 108, 83, 21], [182, 245, 119, 161]),\r\n  // log(uint256,string,uint256,string)\r\n  ([162, 188, 12, 153], [183, 185, 20, 202]),\r\n  // log(uint256,string,bool,bool)\r\n  ([81, 188, 43, 193], [186, 83, 93, 156]),\r\n  // log(uint256,address,address)\r\n  ([125, 119, 166, 27], [188, 253, 155, 224]),\r\n  // log(address,address,uint256,uint256)\r\n  ([84, 253, 243, 228], [190, 85, 52, 129]),\r\n  // log(bool,uint256,uint256,bool)\r\n  ([164, 29, 129, 222], [190, 152, 67, 83]),\r\n  // log(address,uint256,string,uint256)\r\n  ([245, 18, 207, 155], [191, 1, 248, 145]),\r\n  // log(bool,address,string,uint256)\r\n  ([11, 153, 252, 34], [194, 31, 100, 199]),\r\n  // log(string,string,uint256,bool)\r\n  ([230, 86, 88, 202], [195, 168, 166, 84]),\r\n  // log(bool,uint256,string)\r\n  ([200, 57, 126, 176], [195, 252, 57, 112]),\r\n  // log(address,bool,uint256,bool)\r\n  ([133, 205, 197, 175], [196, 100, 62, 32]),\r\n  // log(uint256,uint256,uint256,bool)\r\n  ([100, 82, 185, 203], [197, 152, 209, 133]),\r\n  // log(address,uint256,bool,string)\r\n  ([142, 142, 78, 117], [197, 173, 133, 249]),\r\n  // log(string,uint256,string,uint256)\r\n  ([160, 196, 178, 37], [198, 126, 169, 209]),\r\n  // log(uint256,bool,uint256,uint256)\r\n  ([86, 130, 141, 164], [198, 172, 199, 168]),\r\n  // log(string,bool,uint256)\r\n  ([41, 27, 185, 208], [201, 89, 88, 214]),\r\n  // log(string,uint256,uint256)\r\n  ([150, 156, 221, 3], [202, 71, 196, 235]),\r\n  // log(string,uint256,bool)\r\n  ([241, 2, 238, 5], [202, 119, 51, 177]),\r\n  // log(uint256,address,string,bool)\r\n  ([34, 164, 121, 166], [204, 50, 171, 7]),\r\n  // log(address,bool,uint256,address)\r\n  ([13, 140, 230, 30], [204, 247, 144, 161]),\r\n  // log(bool,uint256,bool,bool)\r\n  ([158, 1, 247, 65], [206, 181, 244, 215]),\r\n  // log(uint256,string,bool,uint256)\r\n  ([164, 180, 138, 127], [207, 0, 152, 128]),\r\n  // log(address,uint256,string,bool)\r\n  ([164, 2, 79, 17], [207, 24, 16, 92]),\r\n  // log(uint256,uint256,uint256)\r\n  ([231, 130, 10, 116], [209, 237, 122, 60]),\r\n  // log(uint256,string,bool,string)\r\n  ([141, 72, 156, 160], [210, 212, 35, 205]),\r\n  // log(uint256,string,string,address)\r\n  ([204, 152, 138, 160], [213, 131, 198, 2]),\r\n  // log(bool,address,uint256,bool)\r\n  ([238, 141, 134, 114], [214, 1, 159, 28]),\r\n  // log(string,string,bool,uint256)\r\n  ([134, 129, 138, 122], [214, 174, 250, 210]),\r\n  // log(uint256,address,uint256,string)\r\n  ([62, 211, 189, 40], [221, 176, 101, 33]),\r\n  // log(uint256,bool,bool,string)\r\n  ([49, 138, 229, 155], [221, 219, 149, 97]),\r\n  // log(uint256,bool,uint256,string)\r\n  ([232, 221, 188, 86], [222, 3, 231, 116]),\r\n  // log(string,uint256,bool,address)\r\n  ([229, 84, 157, 145], [224, 233, 91, 152]),\r\n  // log(string,uint256,uint256,address)\r\n  ([190, 215, 40, 191], [226, 29, 226, 120]),\r\n  // log(uint256,address,bool,bool)\r\n  ([126, 39, 65, 13], [227, 81, 20, 15]),\r\n  // log(bool,bool,string,uint256)\r\n  ([23, 139, 70, 133], [227, 169, 202, 47]),\r\n  // log(string,uint256,bool,uint256)\r\n  ([85, 14, 110, 245], [228, 27, 111, 111]),\r\n  // log(bool,uint256,string,bool)\r\n  ([145, 210, 248, 19], [229, 231, 11, 43]),\r\n  // log(uint256,string,address,uint256)\r\n  ([152, 231, 243, 243], [232, 211, 1, 141]),\r\n  // log(bool,uint256,bool)\r\n  ([27, 173, 201, 235], [232, 222, 251, 169]),\r\n  // log(uint256,uint256,bool,uint256)\r\n  ([108, 100, 124, 140], [235, 127, 111, 210]),\r\n  // log(uint256,bool,string,bool)\r\n  ([52, 110, 184, 199], [235, 146, 141, 127]),\r\n  // log(address,address,string,uint256)\r\n  ([4, 40, 147, 0], [239, 28, 239, 231]),\r\n  // log(uint256,bool,string,address)\r\n  ([73, 110, 43, 180], [239, 82, 144, 24]),\r\n  // log(uint256,address,bool,address)\r\n  ([182, 49, 48, 148], [239, 114, 197, 19]),\r\n  // log(string,string,uint256,uint256)\r\n  ([213, 207, 23, 208], [244, 93, 125, 44]),\r\n  // log(bool,uint256,string,string)\r\n  ([211, 42, 101, 72], [245, 188, 34, 73]),\r\n  // log(uint256,uint256)\r\n  ([108, 15, 105, 128], [246, 102, 113, 90]),\r\n  // log(uint256)\r\n  ([245, 177, 187, 169], [248, 44, 80, 241]),\r\n  // log(string,address,uint256,uint256)\r\n  ([218, 163, 148, 189], [248, 245, 27, 30]),\r\n  // log(uint256,uint256,uint256,address)\r\n  ([224, 133, 63, 105], [250, 129, 133, 175]),\r\n  // log(string,address,uint256,bool)\r\n  ([90, 193, 193, 60], [252, 72, 69, 240]),\r\n  // log(address,address,uint256,string)\r\n  ([157, 209, 46, 173], [253, 180, 249, 144]),\r\n  // log(bool,uint256,string,address)\r\n  ([165, 199, 13, 41], [254, 221, 31, 255]),\r\n  // logInt(int256)\r\n  ([155, 94, 97, 79], [101, 37, 181, 245]),\r\n  // logUint(uint256)\r\n  ([226, 35, 89, 127], [153, 5, 183, 68]),\r\n]\r\n);\r\n\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/998264773/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/998271973",
    "html_url": "https://github.com/foundry-rs/foundry/issues/197#issuecomment-998271973",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/197",
    "id": 998271973,
    "node_id": "IC_kwDOGBlvNc47gGvl",
    "user": {
      "login": "gakonst",
      "id": 17802178,
      "node_id": "MDQ6VXNlcjE3ODAyMTc4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17802178?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gakonst",
      "html_url": "https://github.com/gakonst",
      "followers_url": "https://api.github.com/users/gakonst/followers",
      "following_url": "https://api.github.com/users/gakonst/following{/other_user}",
      "gists_url": "https://api.github.com/users/gakonst/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gakonst/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gakonst/subscriptions",
      "organizations_url": "https://api.github.com/users/gakonst/orgs",
      "repos_url": "https://api.github.com/users/gakonst/repos",
      "events_url": "https://api.github.com/users/gakonst/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gakonst/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-12-20T21:10:20Z",
    "updated_at": "2021-12-20T21:10:20Z",
    "author_association": "MEMBER",
    "body": "I'm OK with doing the above approach, as long as we have a note linking to this issue",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/998271973/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
