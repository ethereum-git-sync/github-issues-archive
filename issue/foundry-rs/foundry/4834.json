{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/4834",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4834/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4834/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4834/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/4834",
  "id": 1685829753,
  "node_id": "I_kwDOGBlvNc5ke7h5",
  "number": 4834,
  "title": "Allow parametrised invariants",
  "user": {
    "login": "andreas-blockswap",
    "id": 122449742,
    "node_id": "U_kgDOB0xvTg",
    "avatar_url": "https://avatars.githubusercontent.com/u/122449742?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/andreas-blockswap",
    "html_url": "https://github.com/andreas-blockswap",
    "followers_url": "https://api.github.com/users/andreas-blockswap/followers",
    "following_url": "https://api.github.com/users/andreas-blockswap/following{/other_user}",
    "gists_url": "https://api.github.com/users/andreas-blockswap/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/andreas-blockswap/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/andreas-blockswap/subscriptions",
    "organizations_url": "https://api.github.com/users/andreas-blockswap/orgs",
    "repos_url": "https://api.github.com/users/andreas-blockswap/repos",
    "events_url": "https://api.github.com/users/andreas-blockswap/events{/privacy}",
    "received_events_url": "https://api.github.com/users/andreas-blockswap/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3394554570,
      "node_id": "LA_kwDOGBlvNc7KVMrK",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/A-fuzzing",
      "name": "A-fuzzing",
      "color": "FBCA04",
      "default": false,
      "description": "Area: fuzzing"
    },
    {
      "id": 3593644820,
      "node_id": "LA_kwDOGBlvNc7WMqsU",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-feature",
      "name": "T-feature",
      "color": "BFD4F2",
      "default": false,
      "description": "Type: feature"
    },
    {
      "id": 3593644915,
      "node_id": "LA_kwDOGBlvNc7WMqtz",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/Cmd-forge-test",
      "name": "Cmd-forge-test",
      "color": "006B75",
      "default": false,
      "description": "Command: forge test"
    },
    {
      "id": 3703752787,
      "node_id": "LA_kwDOGBlvNc7cwshT",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/C-forge",
      "name": "C-forge",
      "color": "5319E7",
      "default": false,
      "description": "Command: forge"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 10,
  "created_at": "2023-04-26T22:27:19Z",
  "updated_at": "2023-05-08T18:51:34Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "### Component\n\nForge\n\n### Describe the feature you would like\n\nI would like to be able to parametrise my invariants. For example\r\n```Solidity\r\nfunction invariantSomePropertyTest(uint256 _x) external {\r\n  uint256 expectedResult = computeExpectedResult();\r\n  uint256 actualResult = computeActualResult(_x);\r\n  assertEq(expectedResult, actualResult);\r\n}\r\n```\r\nThis should work like a normal invariant test with a fuzzing campaign, but every time a non-parametrised invariant would call the function, the parametrised invariant should generate multiple calls with fuzzing.\r\n\r\nThe invariant fuzzing campaign brings the contract in many different states before testing the property, which is useful because it allows detection of bugs that depend on a particular chain of function calls before showing up.\r\n\r\nI have implemented a quick a dirty PoC on my fork https://github.com/andreas-blockswap/foundry/tree/invariant-parameters\n\n### Additional context\n\n_No response_",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/4834/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4834/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1529930810",
    "html_url": "https://github.com/foundry-rs/foundry/issues/4834#issuecomment-1529930810",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4834",
    "id": 1529930810,
    "node_id": "IC_kwDOGBlvNc5bMOQ6",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-01T16:39:08Z",
    "updated_at": "2023-05-01T16:39:08Z",
    "author_association": "COLLABORATOR",
    "body": "I'm not sure I understand the feature request here, can you clarify?\r\n\r\n> The invariant fuzzing campaign brings the contract in many different states before testing the property, which is useful because it allows detection of bugs that depend on a particular chain of function calls before showing up.\r\n\r\nThis is exactly what the current invariant testing does. If you have an invariant test called `invariantSomePropertyTest()` what happens is:\r\n1. forge runs the code within that test and verifies the assertions pass. If they fail, the test fails.\r\n2. forge fuzzer executes a random call to your contracts to mutate state.\r\n3. The code within that test is re-run to verify the assertions pass. If they fail, the test fails.\r\n4. Repeat steps 2-3 `depth` times\r\n\r\nCheck out the invariant testing [docs](https://book.getfoundry.sh/forge/invariant-testing) for more info",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1529930810/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1529940552",
    "html_url": "https://github.com/foundry-rs/foundry/issues/4834#issuecomment-1529940552",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4834",
    "id": 1529940552,
    "node_id": "IC_kwDOGBlvNc5bMQpI",
    "user": {
      "login": "andreas-blockswap",
      "id": 122449742,
      "node_id": "U_kgDOB0xvTg",
      "avatar_url": "https://avatars.githubusercontent.com/u/122449742?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/andreas-blockswap",
      "html_url": "https://github.com/andreas-blockswap",
      "followers_url": "https://api.github.com/users/andreas-blockswap/followers",
      "following_url": "https://api.github.com/users/andreas-blockswap/following{/other_user}",
      "gists_url": "https://api.github.com/users/andreas-blockswap/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/andreas-blockswap/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/andreas-blockswap/subscriptions",
      "organizations_url": "https://api.github.com/users/andreas-blockswap/orgs",
      "repos_url": "https://api.github.com/users/andreas-blockswap/repos",
      "events_url": "https://api.github.com/users/andreas-blockswap/events{/privacy}",
      "received_events_url": "https://api.github.com/users/andreas-blockswap/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-01T16:51:00Z",
    "updated_at": "2023-05-01T16:51:00Z",
    "author_association": "NONE",
    "body": "The feature request is to add support for parameters/input to invariant functions, like the parameter `uint256 _x` in the example.\r\n\r\nWhat I meant by\r\n> The invariant fuzzing campaign brings the contract in many different states before testing the property, which is useful because it allows detection of bugs that depend on a particular chain of function calls before showing up\r\n\r\nis that the combination invariant fuzzing +  parameters is useful together.\r\n\r\nDoes that clarify?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1529940552/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1529950377",
    "html_url": "https://github.com/foundry-rs/foundry/issues/4834#issuecomment-1529950377",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4834",
    "id": 1529950377,
    "node_id": "IC_kwDOGBlvNc5bMTCp",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-01T16:59:15Z",
    "updated_at": "2023-05-01T16:59:15Z",
    "author_association": "COLLABORATOR",
    "body": "Ah, so you want step 3 to basically act like a fuzz test within the invariant test? Do you have a concrete example of where that would be useful? Because my initial reaction is that what should be tested inside your invariant tests are things like \"sum of all balance equals total supply\", where fuzzing doesn't make sense because your invariant test is already considering the full state of your contracts",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1529950377/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1530008301",
    "html_url": "https://github.com/foundry-rs/foundry/issues/4834#issuecomment-1530008301",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4834",
    "id": 1530008301,
    "node_id": "IC_kwDOGBlvNc5bMhLt",
    "user": {
      "login": "andreas-blockswap",
      "id": 122449742,
      "node_id": "U_kgDOB0xvTg",
      "avatar_url": "https://avatars.githubusercontent.com/u/122449742?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/andreas-blockswap",
      "html_url": "https://github.com/andreas-blockswap",
      "followers_url": "https://api.github.com/users/andreas-blockswap/followers",
      "following_url": "https://api.github.com/users/andreas-blockswap/following{/other_user}",
      "gists_url": "https://api.github.com/users/andreas-blockswap/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/andreas-blockswap/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/andreas-blockswap/subscriptions",
      "organizations_url": "https://api.github.com/users/andreas-blockswap/orgs",
      "repos_url": "https://api.github.com/users/andreas-blockswap/repos",
      "events_url": "https://api.github.com/users/andreas-blockswap/events{/privacy}",
      "received_events_url": "https://api.github.com/users/andreas-blockswap/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-01T17:51:29Z",
    "updated_at": "2023-05-01T21:13:55Z",
    "author_association": "NONE",
    "body": "> Ah, so you want step 3 to basically act like a fuzz test within the invariant test?\r\n\r\nYes I want a step like that.\r\n\r\n> Do you have a concrete example of where that would be useful?\r\n\r\nThe following is an example where it is useful:\r\n```Solidity\r\ncontract MyMath {\r\n  uint256 private oops;\r\n  /// Implementation of addition\r\n  function add(uint256 _x, uint256 _y) external view returns (uint256) {\r\n    return _x + _y + oops; // NOTICE the bug\r\n  }\r\n  function setOops(uint256 _oops) external {\r\n    oops = _oops;\r\n  }\r\n}\r\n```\r\nThe test contract\r\n```Solidity\r\ncontract TestMyMath is Test {\r\n  MyMath internal myMath;\r\n  function setUp() {\r\n    myMath = new MyMath();\r\n  }\r\n  function testAdd(uint256 _x, uint256 _y) external {\r\n    assertEq(myMath.add(_x, _y), _x + _y);\r\n  }\r\n  function invariantTestAdd(uint256 _x, uint256 _y) external {\r\n    assertEq(myMath.add(_x, _y), _x + _y);\r\n  }\r\n}\r\n```\r\nHere `testAdd` does not catch the bug, but `invariantTestAdd` will most likely catch the bug.\r\n\r\n> Because my initial reaction is that what should be tested inside your invariant tests are things like \"sum of all balance equals total supply\", where fuzzing doesn't make sense because your invariant test is already considering the full state of your contracts\r\n\r\nIndeed, if I am just testing an invariant. But invariant functions can be used to test properties, which is more powerful than mere test functions, because invariant functions consider many initial states.\r\n\r\nI am currently simulating invariant parameters with input as state. What I do is something like\r\n```Solidity\r\ncontract MyMathInput {\r\n  uint256 public x;\r\n  uint256 public y;\r\n  function set(uint256 _x, uint256 _y) external {\r\n    x = _x;\r\n    y = _y;\r\n  }\r\n}\r\ncontract TestMyMath is Test {\r\n  MyMath internal myMath;\r\n  MyMathInput internal input;\r\n  function setUp() {\r\n    myMath = new MyMath();\r\n    input = new MyMathInput();\r\n  }\r\n  function invariantTestAdd() external {\r\n    assertEq(myMath.add(input.x(), input.y()), input.x() + input.y());\r\n  }\r\n}\r\n```\r\nBut this is far from optimal, since the invariant fuzzing campaign would blindly call `input.set` 50% of the time. There are other ways to set input state, but I have not been able to make this work in an intelligent way.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1530008301/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 1,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1535074676",
    "html_url": "https://github.com/foundry-rs/foundry/issues/4834#issuecomment-1535074676",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4834",
    "id": 1535074676,
    "node_id": "IC_kwDOGBlvNc5bf2F0",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-04T16:51:24Z",
    "updated_at": "2023-05-04T16:51:24Z",
    "author_association": "COLLABORATOR",
    "body": "Thanks for the examples, that was helpful! The way I'd currently get your desired behavior is with the handler pattern for invariant tests, shown below. This is a very flexible/popular pattern, which you can read more about here:\r\n- https://mirror.xyz/horsefacts.eth/Jex2YVaO65dda6zEyfM_-DXlXhOWCAoSpOx5PLocYgw\r\n- https://book.getfoundry.sh/forge/invariant-testing\r\n\r\n```solidity\r\n// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.13;\r\n\r\nimport {Test, console2} from \"forge-std/Test.sol\";\r\nimport {CommonBase} from \"forge-std/Base.sol\";\r\nimport {StdCheats} from \"forge-std/StdCheats.sol\";\r\nimport {StdUtils} from \"forge-std/StdUtils.sol\";\r\n\r\ncontract MyMath {\r\n    uint256 private oops;\r\n    /// Implementation of addition\r\n    function add(uint256 x, uint256 y) external view returns (uint256) {\r\n        return x + y + oops; // NOTICE the bug\r\n    }\r\n    function setOops(uint256 _oops) external {\r\n        oops = _oops;\r\n    }\r\n}\r\n\r\n// All inputs in the handler and test contracts are uint128 to avoid overflows\r\n// in this example (we could also have kept uint256 and used `bound`).\r\ncontract MyMathHandler is CommonBase, StdCheats, StdUtils{\r\n    MyMath myMath;\r\n\r\n    constructor(MyMath _myMath) {\r\n        myMath = _myMath;\r\n    }\r\n\r\n    function myMath_add(uint128 x, uint128 y) external view {\r\n        uint256 z = myMath.add(x, y);\r\n        require(z == x + y, \"invariant broken\");\r\n    }\r\n\r\n    function myMath_setOops(uint128 _oops) external {\r\n        myMath.setOops(_oops);\r\n    }\r\n}\r\n\r\ncontract TestMyMath is Test {\r\n    MyMath internal myMath;\r\n    MyMathHandler internal myMathHandler;\r\n\r\n    function setUp() public {\r\n        myMath = new MyMath();\r\n        myMathHandler = new MyMathHandler(myMath);\r\n\r\n        // Only call methods on the handler contract.\r\n        targetContract(address(myMathHandler));\r\n    }\r\n\r\n    function testAdd(uint128 x, uint128 y) external {\r\n        assertEq(myMath.add(x, y), uint256(x) + y);\r\n    }\r\n\r\n    function invariantTestAdd() external {\r\n        // We hardcode a few test vectors here, and add additional `require`\r\n        // statements on the fuzzed handler method above. (Regular assertions\r\n        // are not yet supported in handlers, see https://github.com/foundry-rs/foundry/issues/4718)\r\n        assertEq(myMath.add(1, 2), 3);\r\n        assertEq(myMath.add(4, 9), 13);\r\n    }\r\n}\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1535074676/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1535250077",
    "html_url": "https://github.com/foundry-rs/foundry/issues/4834#issuecomment-1535250077",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4834",
    "id": 1535250077,
    "node_id": "IC_kwDOGBlvNc5bgg6d",
    "user": {
      "login": "andreas-blockswap",
      "id": 122449742,
      "node_id": "U_kgDOB0xvTg",
      "avatar_url": "https://avatars.githubusercontent.com/u/122449742?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/andreas-blockswap",
      "html_url": "https://github.com/andreas-blockswap",
      "followers_url": "https://api.github.com/users/andreas-blockswap/followers",
      "following_url": "https://api.github.com/users/andreas-blockswap/following{/other_user}",
      "gists_url": "https://api.github.com/users/andreas-blockswap/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/andreas-blockswap/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/andreas-blockswap/subscriptions",
      "organizations_url": "https://api.github.com/users/andreas-blockswap/orgs",
      "repos_url": "https://api.github.com/users/andreas-blockswap/repos",
      "events_url": "https://api.github.com/users/andreas-blockswap/events{/privacy}",
      "received_events_url": "https://api.github.com/users/andreas-blockswap/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-04T18:52:03Z",
    "updated_at": "2023-05-04T18:52:13Z",
    "author_association": "NONE",
    "body": " I want parametrisation of the invariant function in order to avoid hard coded inputs. Your invariant function fails to find this bug:\r\n```Solidity\r\n    function add(uint256 x, uint256 y) external view returns (uint256) {\r\n        if (x == 1 || y == 9) return x + y;\r\n        return x + y + oops; // NOTICE the bug\r\n    }\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1535250077/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1535287873",
    "html_url": "https://github.com/foundry-rs/foundry/issues/4834#issuecomment-1535287873",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4834",
    "id": 1535287873,
    "node_id": "IC_kwDOGBlvNc5bgqJB",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-04T19:23:11Z",
    "updated_at": "2023-05-04T19:23:11Z",
    "author_association": "COLLABORATOR",
    "body": "You don't actually need those hardcoded inputs, they were just examples. You can leave them in or comment them out, but if you set the invariant `fail_on_revert = true` setting in your config, you will see my invariant test does find that bug. It's able to find it because of the `require` statement, which serves the same purpose as your suggestion, i.e. that method in the handler is effectively fuzzed.\r\n\r\nHere's the fixed version that finds your bug (my above version had a `view` modifier which IIRC prevents forge from calling it)\r\n\r\n```solidity\r\n// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.13;\r\n\r\nimport {Test, console2} from \"forge-std/Test.sol\";\r\nimport {CommonBase} from \"forge-std/Base.sol\";\r\nimport {StdCheats} from \"forge-std/StdCheats.sol\";\r\nimport {StdUtils} from \"forge-std/StdUtils.sol\";\r\n\r\ncontract MyMath {\r\n    uint256 private oops;\r\n    /// Implementation of addition\r\n    function add(uint256 x, uint256 y) external view returns (uint256) {\r\n        if (x == 1 || y == 9) return x + y;\r\n        return x + y + oops; // NOTICE the bug\r\n    }\r\n\r\n    function setOops(uint256 _oops) external {\r\n        oops = _oops;\r\n    }\r\n}\r\n\r\n// All inputs in the handler and test contracts are uint128 to avoid overflows\r\n// in this example (we could also have kept uint256 and used `bound`).\r\ncontract MyMathHandler is CommonBase, StdCheats, StdUtils {\r\n    MyMath myMath;\r\n\r\n    constructor(MyMath _myMath) {\r\n        myMath = _myMath;\r\n    }\r\n\r\n    function myMath_add(uint128 x, uint128 y) external {\r\n        uint256 z = myMath.add(x, y);\r\n        require(z == x + y, \"invariant broken\");\r\n    }\r\n\r\n    function myMath_setOops(uint128 _oops) external {\r\n        myMath.setOops(_oops);\r\n    }\r\n}\r\n\r\ncontract TestMyMath is Test {\r\n    MyMath internal myMath;\r\n    MyMathHandler internal myMathHandler;\r\n\r\n    function setUp() public {\r\n        myMath = new MyMath();\r\n        myMathHandler = new MyMathHandler(myMath);\r\n\r\n        // Only call methods on the handler contract.\r\n        targetContract(address(myMathHandler));\r\n    }\r\n\r\n    function testAdd(uint128 x, uint128 y) external {\r\n        assertEq(myMath.add(x, y), uint256(x) + y);\r\n    }\r\n\r\n    function invariantTestAdd() external {\r\n        // We hardcode a few test vectors here, and add additional `require`\r\n        // statements on the fuzzed handler method above. (Regular assertions\r\n        // are not yet supported in handlers, see https://github.com/foundry-rs/foundry/issues/4718)\r\n        assertEq(myMath.add(1, 2), 3);\r\n        assertEq(myMath.add(4, 9), 13);\r\n    }\r\n}\r\n```\r\n\r\nThe point of these examples is to show how you can achieve what you are looking to do, even if this feature is not implemented",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1535287873/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1535406449",
    "html_url": "https://github.com/foundry-rs/foundry/issues/4834#issuecomment-1535406449",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4834",
    "id": 1535406449,
    "node_id": "IC_kwDOGBlvNc5bhHFx",
    "user": {
      "login": "andreas-blockswap",
      "id": 122449742,
      "node_id": "U_kgDOB0xvTg",
      "avatar_url": "https://avatars.githubusercontent.com/u/122449742?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/andreas-blockswap",
      "html_url": "https://github.com/andreas-blockswap",
      "followers_url": "https://api.github.com/users/andreas-blockswap/followers",
      "following_url": "https://api.github.com/users/andreas-blockswap/following{/other_user}",
      "gists_url": "https://api.github.com/users/andreas-blockswap/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/andreas-blockswap/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/andreas-blockswap/subscriptions",
      "organizations_url": "https://api.github.com/users/andreas-blockswap/orgs",
      "repos_url": "https://api.github.com/users/andreas-blockswap/repos",
      "events_url": "https://api.github.com/users/andreas-blockswap/events{/privacy}",
      "received_events_url": "https://api.github.com/users/andreas-blockswap/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-04T21:01:31Z",
    "updated_at": "2023-05-04T21:01:31Z",
    "author_association": "NONE",
    "body": "Looks like it makes all invariant functions fail if `require(z == x + y)` reverts. Is that the intention?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1535406449/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1535421018",
    "html_url": "https://github.com/foundry-rs/foundry/issues/4834#issuecomment-1535421018",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4834",
    "id": 1535421018,
    "node_id": "IC_kwDOGBlvNc5bhKpa",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-04T21:14:21Z",
    "updated_at": "2023-05-04T21:14:21Z",
    "author_association": "COLLABORATOR",
    "body": "Right, because the check is in the handler contract, which in this example would be used for all invariant tests. A common pattern (which is also great for performance) is to have a single (or a few), and group multiple invaraint assertions within a single test. For example: https://github.com/maple-labs/maple-core-v2/blob/00f01ae7175885f8d49ac201a1c72465e320b2f6/tests/invariants/BasicInvariants.t.sol#L65-L86",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1535421018/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1538172914",
    "html_url": "https://github.com/foundry-rs/foundry/issues/4834#issuecomment-1538172914",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4834",
    "id": 1538172914,
    "node_id": "IC_kwDOGBlvNc5brqfy",
    "user": {
      "login": "andreas-blockswap",
      "id": 122449742,
      "node_id": "U_kgDOB0xvTg",
      "avatar_url": "https://avatars.githubusercontent.com/u/122449742?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/andreas-blockswap",
      "html_url": "https://github.com/andreas-blockswap",
      "followers_url": "https://api.github.com/users/andreas-blockswap/followers",
      "following_url": "https://api.github.com/users/andreas-blockswap/following{/other_user}",
      "gists_url": "https://api.github.com/users/andreas-blockswap/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/andreas-blockswap/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/andreas-blockswap/subscriptions",
      "organizations_url": "https://api.github.com/users/andreas-blockswap/orgs",
      "repos_url": "https://api.github.com/users/andreas-blockswap/repos",
      "events_url": "https://api.github.com/users/andreas-blockswap/events{/privacy}",
      "received_events_url": "https://api.github.com/users/andreas-blockswap/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-08T10:55:39Z",
    "updated_at": "2023-05-08T10:55:39Z",
    "author_association": "NONE",
    "body": "It is not convenient to implement property tests in this way and the feedback from forge on failing tests is bad like this.\r\n\r\nI think it is straight forward to add support for parametrised invariant functions. I have literally just added the missing fuzz step in my [fork](https://github.com/andreas-blockswap/foundry/tree/invariant-parameters) and seems to work. One can consider more feedback to the user in the end, but not strictly necessary.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1538172914/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
