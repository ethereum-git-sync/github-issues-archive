{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/4301",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4301/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4301/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4301/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/4301",
  "id": 1575182935,
  "node_id": "I_kwDOGBlvNc5d42JX",
  "number": 4301,
  "title": "Unable to verify contracts on custom evm chain",
  "user": {
    "login": "samtvlabs",
    "id": 112424909,
    "node_id": "U_kgDOBrN3zQ",
    "avatar_url": "https://avatars.githubusercontent.com/u/112424909?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/samtvlabs",
    "html_url": "https://github.com/samtvlabs",
    "followers_url": "https://api.github.com/users/samtvlabs/followers",
    "following_url": "https://api.github.com/users/samtvlabs/following{/other_user}",
    "gists_url": "https://api.github.com/users/samtvlabs/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/samtvlabs/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/samtvlabs/subscriptions",
    "organizations_url": "https://api.github.com/users/samtvlabs/orgs",
    "repos_url": "https://api.github.com/users/samtvlabs/repos",
    "events_url": "https://api.github.com/users/samtvlabs/events{/privacy}",
    "received_events_url": "https://api.github.com/users/samtvlabs/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3334394228,
      "node_id": "MDU6TGFiZWwzMzM0Mzk0MjI4",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-bug",
      "name": "T-bug",
      "color": "d73a4a",
      "default": false,
      "description": "Type: bug"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 6,
  "created_at": "2023-02-07T23:23:32Z",
  "updated_at": "2023-02-20T16:38:26Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "### Component\n\nForge\n\n### Have you ensured that all of these are up to date?\n\n- [X] Foundry\n- [X] Foundryup\n\n### What version of Foundry are you on?\n\nforge 0.2.0 (ca9de13 2023-02-04T00:05:10.755265Z)\n\n### What command(s) is the bug in?\n\nforge verify-contract 0xb7723582Ac1f8D714D723Ade22E9876b8473CB63 node_modules/@hyperlane-xyz/core/contracts/Mailbox.sol:Mailbox  --verifier blockscout --verifier-url https://khalani-axon-explorer-staging.digipnyx.org/api\n\n### Operating System\n\nmacOS (Apple Silicon)\n\n### Describe the bug\n\n## Description\r\n\r\nI am trying to verify a contract on our EVM compatible chains. However , I am unable to , and I get an error. I have attached the logs. The chain does not implement `debug_traceTransction` , and I wonder if this is linked\r\n\r\n## Expected\r\n\r\n```\r\nOk\r\nContract Verified\r\n```\r\n\r\n## Actual \r\n\r\n```\r\nFailed to submit contract verification, payload:\r\n{\"contractaddress\":\"0xb7723582ac1f8d714d723ade22e9876b8473cb63\",\"sourceCode\":\"{\\\"language\\\":\\\"Solidity\\\",\\\"sources\\\":{\\\"node_modules/@hyperlane-xyz/core/contracts/Mailbox.sol\\\":{\\\"content\\\":\\\"// SPDX-License-Identifier: MIT OR Apache-2.0\\\\npragma solidity >=0.8.0;\\\\n\\\\n// ============ Internal Imports ============\\\\nimport {Versioned} from \\\\\\\"./upgrade/Versioned.sol\\\\\\\";\\\\nimport {MerkleLib} from \\\\\\\"./libs/Merkle.sol\\\\\\\";\\\\nimport {Message} from \\\\\\\"./libs/Message.sol\\\\\\\";\\\\nimport {TypeCasts} from \\\\\\\"./libs/TypeCasts.sol\\\\\\\";\\\\nimport {IMessageRecipient} from \\\\\\\"../interfaces/IMessageRecipient.sol\\\\\\\";\\\\nimport {IInterchainSecurityModule, ISpecifiesInterchainSecurityModule} from \\\\\\\"../interfaces/IInterchainSecurityModule.sol\\\\\\\";\\\\nimport {IMailbox} from \\\\\\\"../interfaces/IMailbox.sol\\\\\\\";\\\\nimport {PausableReentrancyGuardUpgradeable} from \\\\\\\"./PausableReentrancyGuard.sol\\\\\\\";\\\\n\\\\n// ============ External Imports ============\\\\nimport {Address} from \\\\\\\"@openzeppelin/contracts/utils/Address.sol\\\\\\\";\\\\nimport {OwnableUpgradeable} from \\\\\\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\\\\\";\\\\n\\\\ncontract Mailbox is\\\\n    IMailbox,\\\\n    OwnableUpgradeable,\\\\n    PausableReentrancyGuardUpgradeable,\\\\n    Versioned\\\\n{\\\\n    // ============ Libraries ============\\\\n\\\\n    using MerkleLib for MerkleLib.Tree;\\\\n    using Message for bytes;\\\\n    using TypeCasts for bytes32;\\\\n    using TypeCasts for address;\\\\n\\\\n    // ============ Constants ============\\\\n\\\\n    // Maximum bytes per message = 2 KiB (somewhat arbitrarily set to begin)\\\\n    uint256 public constant MAX_MESSAGE_BODY_BYTES = 2 * 2**10;\\\\n    // Domain of chain on which the contract is deployed\\\\n    uint32 public immutable localDomain;\\\\n\\\\n    // ============ Public Storage ============\\\\n\\\\n    // The default ISM, used if the recipient fails to specify one.\\\\n    IInterchainSecurityModule public defaultIsm;\\\\n    // An incremental merkle tree used to store outbound message IDs.\\\\n    MerkleLib.Tree public tree;\\\\n    // Mapping of message ID to whether or not that message has been delivered.\\\\n    mapping(bytes32 => bool) public delivered;\\\\n\\\\n    // ============ Upgrade Gap ============\\\\n\\\\n    // gap for upgrade safety\\\\n    uint256[47] private __GAP;\\\\n\\\\n    // ============ Events ============\\\\n\\\\n    /**\\\\n     * @notice Emitted when the default ISM is updated\\\\n     * @param module The new default ISM\\\\n     */\\\\n    event DefaultIsmSet(address indexed module);\\\\n\\\\n    /**\\\\n     * @notice Emitted when a new message is dispatched via Hyperlane\\\\n     * @param sender The address that dispatched the message\\\\n     * @param destination The destination domain of the message\\\\n     * @param recipient The message recipient address on `destination`\\\\n     * @param message Raw bytes of message\\\\n     */\\\\n    event Dispatch(\\\\n        address indexed sender,\\\\n        uint32 indexed destination,\\\\n        bytes32 indexed recipient,\\\\n        bytes message\\\\n    );\\\\n\\\\n    /**\\\\n     * @notice Emitted when a new message is dispatched via Hyperlane\\\\n     * @param messageId The unique message identifier\\\\n     */\\\\n    event DispatchId(bytes32 indexed messageId);\\\\n\\\\n    /**\\\\n     * @notice Emitted when a Hyperlane message is processed\\\\n     * @param messageId The unique message identifier\\\\n     */\\\\n    event ProcessId(bytes32 indexed messageId);\\\\n\\\\n    /**\\\\n     * @notice Emitted when a Hyperlane message is delivered\\\\n     * @param origin The origin domain of the message\\\\n     * @param sender The message sender address on `origin`\\\\n     * @param recipient The address that handled the message\\\\n     */\\\\n    event Process(\\\\n        uint32 indexed origin,\\\\n        bytes32 indexed sender,\\\\n        address indexed recipient\\\\n    );\\\\n\\\\n    /**\\\\n     * @notice Emitted when Mailbox is paused\\\\n     */\\\\n    event Paused();\\\\n\\\\n    /**\\\\n     * @notice Emitted when Mailbox is unpaused\\\\n     */\\\\n    event Unpaused();\\\\n\\\\n    // ============ Constructor ============\\\\n\\\\n    // solhint-disable-next-line no-empty-blocks\\\\n    constructor(uint32 _localDomain) {\\\\n        localDomain = _localDomain;\\\\n    }\\\\n\\\\n    // ============ Initializers ============\\\\n\\\\n    function initialize(address _owner, address _defaultIsm)\\\\n        external\\\\n        initializer\\\\n    {\\\\n        __PausableReentrancyGuard_init();\\\\n        __Ownable_init();\\\\n        transferOwnership(_owner);\\\\n        _setDefaultIsm(_defaultIsm);\\\\n    }\\\\n\\\\n    // ============ External Functions ============\\\\n\\\\n    /**\\\\n     * @notice Sets the default ISM for the Mailbox.\\\\n     * @param _module The new default ISM. Must be a contract.\\\\n     */\\\\n    function setDefaultIsm(address _module) external onlyOwner {\\\\n        _setDefaultIsm(_module);\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice Dispatches a message to the destination domain & recipient.\\\\n     * @param _destinationDomain Domain of destination chain\\\\n     * @param _recipientAddress Address of recipient on destination chain as bytes32\\\\n     * @param _messageBody Raw bytes content of message body\\\\n     * @return The message ID inserted into the Mailbox's merkle tree\\\\n     */\\\\n    function dispatch(\\\\n        uint32 _destinationDomain,\\\\n        bytes32 _recipientAddress,\\\\n        bytes calldata _messageBody\\\\n    ) external override notPaused returns (bytes32) {\\\\n        require(_messageBody.length <= MAX_MESSAGE_BODY_BYTES, \\\\\\\"msg too long\\\\\\\");\\\\n        // Format the message into packed bytes.\\\\n        bytes memory _message = Message.formatMessage(\\\\n            VERSION,\\\\n            count(),\\\\n            localDomain,\\\\n            msg.sender.addressToBytes32(),\\\\n            _destinationDomain,\\\\n            _recipientAddress,\\\\n            _messageBody\\\\n        );\\\\n\\\\n        // Insert the message ID into the merkle tree.\\\\n        bytes32 _id = _message.id();\\\\n        tree.insert(_id);\\\\n        emit Dispatch(\\\\n            msg.sender,\\\\n            _destinationDomain,\\\\n            _recipientAddress,\\\\n            _message\\\\n        );\\\\n        emit DispatchId(_id);\\\\n        return _id;\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice Attempts to deliver `_message` to its recipient. Verifies\\\\n     * `_message` via the recipient's ISM using the provided `_metadata`.\\\\n     * @param _metadata Metadata used by the ISM to verify `_message`.\\\\n     * @param _message Formatted Hyperlane message (refer to Message.sol).\\\\n     */\\\\n    function process(bytes calldata _metadata, bytes calldata _message)\\\\n        external\\\\n        override\\\\n        nonReentrantAndNotPaused\\\\n    {\\\\n        // Check that the message was intended for this mailbox.\\\\n        require(_message.version() == VERSION, \\\\\\\"!version\\\\\\\");\\\\n        require(_message.destination() == localDomain, \\\\\\\"!destination\\\\\\\");\\\\n\\\\n        // Check that the message hasn't already been delivered.\\\\n        bytes32 _id = _message.id();\\\\n        require(delivered[_id] == false, \\\\\\\"delivered\\\\\\\");\\\\n        delivered[_id] = true;\\\\n\\\\n        // Verify the message via the ISM.\\\\n        IInterchainSecurityModule _ism = IInterchainSecurityModule(\\\\n            recipientIsm(_message.recipientAddress())\\\\n        );\\\\n        require(_ism.verify(_metadata, _message), \\\\\\\"!module\\\\\\\");\\\\n\\\\n        // Deliver the message to the recipient.\\\\n        uint32 origin = _message.origin();\\\\n        bytes32 sender = _message.sender();\\\\n        address recipient = _message.recipientAddress();\\\\n        IMessageRecipient(recipient).handle(origin, sender, _message.body());\\\\n        emit Process(origin, sender, recipient);\\\\n        emit ProcessId(_id);\\\\n    }\\\\n\\\\n    // ============ Public Functions ============\\\\n\\\\n    /**\\\\n     * @notice Calculates and returns tree's current root\\\\n     */\\\\n    function root() public view returns (bytes32) {\\\\n        return tree.root();\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice Returns the number of inserted leaves in the tree\\\\n     */\\\\n    function count() public view returns (uint32) {\\\\n        // count cannot exceed 2**TREE_DEPTH, see MerkleLib.sol\\\\n        return uint32(tree.count);\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice Returns a checkpoint representing the current merkle tree.\\\\n     * @return root The root of the Mailbox's merkle tree.\\\\n     * @return index The index of the last element in the tree.\\\\n     */\\\\n    function latestCheckpoint() public view returns (bytes32, uint32) {\\\\n        return (root(), count() - 1);\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice Pauses mailbox and prevents further dispatch/process calls\\\\n     * @dev Only `owner` can pause the mailbox.\\\\n     */\\\\n    function pause() external onlyOwner {\\\\n        _pause();\\\\n        emit Paused();\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice Unpauses mailbox and allows for message processing.\\\\n     * @dev Only `owner` can unpause the mailbox.\\\\n     */\\\\n    function unpause() external onlyOwner {\\\\n        _unpause();\\\\n        emit Unpaused();\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice Returns whether mailbox is paused.\\\\n     */\\\\n    function isPaused() external view returns (bool) {\\\\n        return _isPaused();\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice Returns the ISM to use for the recipient, defaulting to the\\\\n     * default ISM if none is specified.\\\\n     * @param _recipient The message recipient whose ISM should be returned.\\\\n     * @return The ISM to use for `_recipient`.\\\\n     */\\\\n    function recipientIsm(address _recipient)\\\\n        public\\\\n        view\\\\n        returns (IInterchainSecurityModule)\\\\n    {\\\\n        // Use a default interchainSecurityModule if one is not specified by the\\\\n        // recipient.\\\\n        // This is useful for backwards compatibility and for convenience as\\\\n        // recipients are not mandated to specify an ISM.\\\\n        try\\\\n            ISpecifiesInterchainSecurityModule(_recipient)\\\\n                .interchainSecurityModule()\\\\n        returns (IInterchainSecurityModule _val) {\\\\n            // If the recipient specifies a zero address, use the default ISM.\\\\n            if (address(_val) != address(0)) {\\\\n                return _val;\\\\n            }\\\\n        } catch {}\\\\n        return defaultIsm;\\\\n    }\\\\n\\\\n    // ============ Internal Functions ============\\\\n\\\\n    /**\\\\n     * @notice Sets the default ISM for the Mailbox.\\\\n     * @param _module The new default ISM. Must be a contract.\\\\n     */\\\\n    function _setDefaultIsm(address _module) internal {\\\\n        require(Address.isContract(_module), \\\\\\\"!contract\\\\\\\");\\\\n        defaultIsm = IInterchainSecurityModule(_module);\\\\n        emit DefaultIsmSet(_module);\\\\n    }\\\\n}\\\\n\\\"},\\\"node_modules/@hyperlane-xyz/core/contracts/PausableReentrancyGuard.sol\\\":{\\\"content\\\":\\\"// SPDX-License-Identifier: MIT OR Apache-2.0\\\\npragma solidity >=0.8.0;\\\\n\\\\nimport \\\\\\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\\\\\";\\\\n\\\\n// adapted from \\\\\\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\\\\\";\\\\nabstract contract PausableReentrancyGuardUpgradeable is Initializable {\\\\n    uint256 private constant _NOT_ENTERED = 1;\\\\n    uint256 private constant _ENTERED = 2;\\\\n    uint256 private constant _PAUSED = 3;\\\\n\\\\n    uint256 private _status;\\\\n\\\\n    /**\\\\n     * @dev MUST be called for `nonReentrant` to not always revert\\\\n     */\\\\n    function __PausableReentrancyGuard_init() internal onlyInitializing {\\\\n        _status = _NOT_ENTERED;\\\\n    }\\\\n\\\\n    function _isPaused() internal view returns (bool) {\\\\n        return _status == _PAUSED;\\\\n    }\\\\n\\\\n    function _pause() internal notPaused {\\\\n        _status = _PAUSED;\\\\n    }\\\\n\\\\n    function _unpause() internal {\\\\n        require(_isPaused(), \\\\\\\"!paused\\\\\\\");\\\\n        _status = _NOT_ENTERED;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Prevents a contract from being entered when paused.\\\\n     */\\\\n    modifier notPaused() {\\\\n        require(!_isPaused(), \\\\\\\"paused\\\\\\\");\\\\n        _;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\\\n     * function is not supported. It is possible to prevent this from happening\\\\n     * by making the `nonReentrant` function external, and making it call a\\\\n     * `private` function that does the actual work.\\\\n     */\\\\n    modifier nonReentrantAndNotPaused() {\\\\n        // status must have been initialized\\\\n        require(_status == _NOT_ENTERED, \\\\\\\"reentrant call (or paused)\\\\\\\");\\\\n\\\\n        // Any calls to nonReentrant after this point will fail\\\\n        _status = _ENTERED;\\\\n\\\\n        _;\\\\n\\\\n        // By storing the original value once again, a refund is triggered (see\\\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\\\n        _status = _NOT_ENTERED;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\\\n     * variables without shifting down storage in the inheritance chain.\\\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\\\n     */\\\\n    uint256[49] private __gap;\\\\n}\\\\n\\\"},\\\"node_modules/@hyperlane-xyz/core/contracts/libs/Merkle.sol\\\":{\\\"content\\\":\\\"// SPDX-License-Identifier: MIT OR Apache-2.0\\\\npragma solidity >=0.6.11;\\\\n\\\\n// work based on eth2 deposit contract, which is used under CC0-1.0\\\\n\\\\n/**\\\\n * @title MerkleLib\\\\n * @author Celo Labs Inc.\\\\n * @notice An incremental merkle tree modeled on the eth2 deposit contract.\\\\n **/\\\\nlibrary MerkleLib {\\\\n    uint256 internal constant TREE_DEPTH = 32;\\\\n    uint256 internal constant MAX_LEAVES = 2**TREE_DEPTH - 1;\\\\n\\\\n    /**\\\\n     * @notice Struct representing incremental merkle tree. Contains current\\\\n     * branch and the number of inserted leaves in the tree.\\\\n     **/\\\\n    struct Tree {\\\\n        bytes32[TREE_DEPTH] branch;\\\\n        uint256 count;\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice Inserts `_node` into merkle tree\\\\n     * @dev Reverts if tree is full\\\\n     * @param _node Element to insert into tree\\\\n     **/\\\\n    function insert(Tree storage _tree, bytes32 _node) internal {\\\\n        require(_tree.count < MAX_LEAVES, \\\\\\\"merkle tree full\\\\\\\");\\\\n\\\\n        _tree.count += 1;\\\\n        uint256 size = _tree.count;\\\\n        for (uint256 i = 0; i < TREE_DEPTH; i++) {\\\\n            if ((size & 1) == 1) {\\\\n                _tree.branch[i] = _node;\\\\n                return;\\\\n            }\\\\n            _node = keccak256(abi.encodePacked(_tree.branch[i], _node));\\\\n            size /= 2;\\\\n        }\\\\n        // As the loop should always end prematurely with the `return` statement,\\\\n        // this code should be unreachable. We assert `false` just to be safe.\\\\n        assert(false);\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice Calculates and returns`_tree`'s current root given array of zero\\\\n     * hashes\\\\n     * @param _zeroes Array of zero hashes\\\\n     * @return _current Calculated root of `_tree`\\\\n     **/\\\\n    function rootWithCtx(Tree storage _tree, bytes32[TREE_DEPTH] memory _zeroes)\\\\n        internal\\\\n        view\\\\n        returns (bytes32 _current)\\\\n    {\\\\n        uint256 _index = _tree.count;\\\\n\\\\n        for (uint256 i = 0; i < TREE_DEPTH; i++) {\\\\n            uint256 _ithBit = (_index >> i) & 0x01;\\\\n            bytes32 _next = _tree.branch[i];\\\\n            if (_ithBit == 1) {\\\\n                _current = keccak256(abi.encodePacked(_next, _current));\\\\n            } else {\\\\n                _current = keccak256(abi.encodePacked(_current, _zeroes[i]));\\\\n            }\\\\n        }\\\\n    }\\\\n\\\\n    /// @notice Calculates and returns`_tree`'s current root\\\\n    function root(Tree storage _tree) internal view returns (bytes32) {\\\\n        return rootWithCtx(_tree, zeroHashes());\\\\n    }\\\\n\\\\n    /// @notice Returns array of TREE_DEPTH zero hashes\\\\n    /// @return _zeroes Array of TREE_DEPTH zero hashes\\\\n    function zeroHashes()\\\\n        internal\\\\n        pure\\\\n        returns (bytes32[TREE_DEPTH] memory _zeroes)\\\\n    {\\\\n        _zeroes[0] = Z_0;\\\\n        _zeroes[1] = Z_1;\\\\n        _zeroes[2] = Z_2;\\\\n        _zeroes[3] = Z_3;\\\\n        _zeroes[4] = Z_4;\\\\n        _zeroes[5] = Z_5;\\\\n        _zeroes[6] = Z_6;\\\\n        _zeroes[7] = Z_7;\\\\n        _zeroes[8] = Z_8;\\\\n        _zeroes[9] = Z_9;\\\\n        _zeroes[10] = Z_10;\\\\n        _zeroes[11] = Z_11;\\\\n        _zeroes[12] = Z_12;\\\\n        _zeroes[13] = Z_13;\\\\n        _zeroes[14] = Z_14;\\\\n        _zeroes[15] = Z_15;\\\\n        _zeroes[16] = Z_16;\\\\n        _zeroes[17] = Z_17;\\\\n        _zeroes[18] = Z_18;\\\\n        _zeroes[19] = Z_19;\\\\n        _zeroes[20] = Z_20;\\\\n        _zeroes[21] = Z_21;\\\\n        _zeroes[22] = Z_22;\\\\n        _zeroes[23] = Z_23;\\\\n        _zeroes[24] = Z_24;\\\\n        _zeroes[25] = Z_25;\\\\n        _zeroes[26] = Z_26;\\\\n        _zeroes[27] = Z_27;\\\\n        _zeroes[28] = Z_28;\\\\n        _zeroes[29] = Z_29;\\\\n        _zeroes[30] = Z_30;\\\\n        _zeroes[31] = Z_31;\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice Calculates and returns the merkle root for the given leaf\\\\n     * `_item`, a merkle branch, and the index of `_item` in the tree.\\\\n     * @param _item Merkle leaf\\\\n     * @param _branch Merkle proof\\\\n     * @param _index Index of `_item` in tree\\\\n     * @return _current Calculated merkle root\\\\n     **/\\\\n    function branchRoot(\\\\n        bytes32 _item,\\\\n        bytes32[TREE_DEPTH] memory _branch,\\\\n        uint256 _index\\\\n    ) internal pure returns (bytes32 _current) {\\\\n        _current = _item;\\\\n\\\\n        for (uint256 i = 0; i < TREE_DEPTH; i++) {\\\\n            uint256 _ithBit = (_index >> i) & 0x01;\\\\n            bytes32 _next = _branch[i];\\\\n            if (_ithBit == 1) {\\\\n                _current = keccak256(abi.encodePacked(_next, _current));\\\\n            } else {\\\\n                _current = keccak256(abi.encodePacked(_current, _next));\\\\n            }\\\\n        }\\\\n    }\\\\n\\\\n    // keccak256 zero hashes\\\\n    bytes32 internal constant Z_0 =\\\\n        hex\\\\\\\"0000000000000000000000000000000000000000000000000000000000000000\\\\\\\";\\\\n    bytes32 internal constant Z_1 =\\\\n        hex\\\\\\\"ad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5\\\\\\\";\\\\n    bytes32 internal constant Z_2 =\\\\n        hex\\\\\\\"b4c11951957c6f8f642c4af61cd6b24640fec6dc7fc607ee8206a99e92410d30\\\\\\\";\\\\n    bytes32 internal constant Z_3 =\\\\n        hex\\\\\\\"21ddb9a356815c3fac1026b6dec5df3124afbadb485c9ba5a3e3398a04b7ba85\\\\\\\";\\\\n    bytes32 internal constant Z_4 =\\\\n        hex\\\\\\\"e58769b32a1beaf1ea27375a44095a0d1fb664ce2dd358e7fcbfb78c26a19344\\\\\\\";\\\\n    bytes32 internal constant Z_5 =\\\\n        hex\\\\\\\"0eb01ebfc9ed27500cd4dfc979272d1f0913cc9f66540d7e8005811109e1cf2d\\\\\\\";\\\\n    bytes32 internal constant Z_6 =\\\\n        hex\\\\\\\"887c22bd8750d34016ac3c66b5ff102dacdd73f6b014e710b51e8022af9a1968\\\\\\\";\\\\n    bytes32 internal constant Z_7 =\\\\n        hex\\\\\\\"ffd70157e48063fc33c97a050f7f640233bf646cc98d9524c6b92bcf3ab56f83\\\\\\\";\\\\n    bytes32 internal constant Z_8 =\\\\n        hex\\\\\\\"9867cc5f7f196b93bae1e27e6320742445d290f2263827498b54fec539f756af\\\\\\\";\\\\n    bytes32 internal constant Z_9 =\\\\n        hex\\\\\\\"cefad4e508c098b9a7e1d8feb19955fb02ba9675585078710969d3440f5054e0\\\\\\\";\\\\n    bytes32 internal constant Z_10 =\\\\n        hex\\\\\\\"f9dc3e7fe016e050eff260334f18a5d4fe391d82092319f5964f2e2eb7c1c3a5\\\\\\\";\\\\n    bytes32 internal constant Z_11 =\\\\n        hex\\\\\\\"f8b13a49e282f609c317a833fb8d976d11517c571d1221a265d25af778ecf892\\\\\\\";\\\\n    bytes32 internal constant Z_12 =\\\\n        hex\\\\\\\"3490c6ceeb450aecdc82e28293031d10c7d73bf85e57bf041a97360aa2c5d99c\\\\\\\";\\\\n    bytes32 internal constant Z_13 =\\\\n        hex\\\\\\\"c1df82d9c4b87413eae2ef048f94b4d3554cea73d92b0f7af96e0271c691e2bb\\\\\\\";\\\\n    bytes32 internal constant Z_14 =\\\\n        hex\\\\\\\"5c67add7c6caf302256adedf7ab114da0acfe870d449a3a489f781d659e8becc\\\\\\\";\\\\n    bytes32 internal constant Z_15 =\\\\n        hex\\\\\\\"da7bce9f4e8618b6bd2f4132ce798cdc7a60e7e1460a7299e3c6342a579626d2\\\\\\\";\\\\n    bytes32 internal constant Z_16 =\\\\n        hex\\\\\\\"2733e50f526ec2fa19a22b31e8ed50f23cd1fdf94c9154ed3a7609a2f1ff981f\\\\\\\";\\\\n    bytes32 internal constant Z_17 =\\\\n        hex\\\\\\\"e1d3b5c807b281e4683cc6d6315cf95b9ade8641defcb32372f1c126e398ef7a\\\\\\\";\\\\n    bytes32 internal constant Z_18 =\\\\n        hex\\\\\\\"5a2dce0a8a7f68bb74560f8f71837c2c2ebbcbf7fffb42ae1896f13f7c7479a0\\\\\\\";\\\\n    bytes32 internal constant Z_19 =\\\\n        hex\\\\\\\"b46a28b6f55540f89444f63de0378e3d121be09e06cc9ded1c20e65876d36aa0\\\\\\\";\\\\n    bytes32 internal constant Z_20 =\\\\n        hex\\\\\\\"c65e9645644786b620e2dd2ad648ddfcbf4a7e5b1a3a4ecfe7f64667a3f0b7e2\\\\\\\";\\\\n    bytes32 internal constant Z_21 =\\\\n        hex\\\\\\\"f4418588ed35a2458cffeb39b93d26f18d2ab13bdce6aee58e7b99359ec2dfd9\\\\\\\";\\\\n    bytes32 internal constant Z_22 =\\\\n        hex\\\\\\\"5a9c16dc00d6ef18b7933a6f8dc65ccb55667138776f7dea101070dc8796e377\\\\\\\";\\\\n    bytes32 internal constant Z_23 =\\\\n        hex\\\\\\\"4df84f40ae0c8229d0d6069e5c8f39a7c299677a09d367fc7b05e3bc380ee652\\\\\\\";\\\\n    bytes32 internal constant Z_24 =\\\\n        hex\\\\\\\"cdc72595f74c7b1043d0e1ffbab734648c838dfb0527d971b602bc216c9619ef\\\\\\\";\\\\n    bytes32 internal constant Z_25 =\\\\n        hex\\\\\\\"0abf5ac974a1ed57f4050aa510dd9c74f508277b39d7973bb2dfccc5eeb0618d\\\\\\\";\\\\n    bytes32 internal constant Z_26 =\\\\n        hex\\\\\\\"b8cd74046ff337f0a7bf2c8e03e10f642c1886798d71806ab1e888d9e5ee87d0\\\\\\\";\\\\n    bytes32 internal constant Z_27 =\\\\n        hex\\\\\\\"838c5655cb21c6cb83313b5a631175dff4963772cce9108188b34ac87c81c41e\\\\\\\";\\\\n    bytes32 internal constant Z_28 =\\\\n        hex\\\\\\\"662ee4dd2dd7b2bc707961b1e646c4047669dcb6584f0d8d770daf5d7e7deb2e\\\\\\\";\\\\n    bytes32 internal constant Z_29 =\\\\n        hex\\\\\\\"388ab20e2573d171a88108e79d820e98f26c0b84aa8b2f4aa4968dbb818ea322\\\\\\\";\\\\n    bytes32 internal constant Z_30 =\\\\n        hex\\\\\\\"93237c50ba75ee485f4c22adf2f741400bdf8d6a9cc7df7ecae576221665d735\\\\\\\";\\\\n    bytes32 internal constant Z_31 =\\\\n        hex\r\n```\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/4301/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4301/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1422288664",
    "html_url": "https://github.com/foundry-rs/foundry/issues/4301#issuecomment-1422288664",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4301",
    "id": 1422288664,
    "node_id": "IC_kwDOGBlvNc5UxmcY",
    "user": {
      "login": "mattsse",
      "id": 19890894,
      "node_id": "MDQ6VXNlcjE5ODkwODk0",
      "avatar_url": "https://avatars.githubusercontent.com/u/19890894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mattsse",
      "html_url": "https://github.com/mattsse",
      "followers_url": "https://api.github.com/users/mattsse/followers",
      "following_url": "https://api.github.com/users/mattsse/following{/other_user}",
      "gists_url": "https://api.github.com/users/mattsse/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mattsse/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mattsse/subscriptions",
      "organizations_url": "https://api.github.com/users/mattsse/orgs",
      "repos_url": "https://api.github.com/users/mattsse/repos",
      "events_url": "https://api.github.com/users/mattsse/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mattsse/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-02-08T09:25:35Z",
    "updated_at": "2023-02-08T09:25:35Z",
    "author_association": "MEMBER",
    "body": "I'm getting 504 timeouts when trying to access https://khalani-axon-explorer-staging.digipnyx.org/api\r\n\r\nperhaps this is related?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1422288664/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1422291418",
    "html_url": "https://github.com/foundry-rs/foundry/issues/4301#issuecomment-1422291418",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4301",
    "id": 1422291418,
    "node_id": "IC_kwDOGBlvNc5UxnHa",
    "user": {
      "login": "samtvlabs",
      "id": 112424909,
      "node_id": "U_kgDOBrN3zQ",
      "avatar_url": "https://avatars.githubusercontent.com/u/112424909?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/samtvlabs",
      "html_url": "https://github.com/samtvlabs",
      "followers_url": "https://api.github.com/users/samtvlabs/followers",
      "following_url": "https://api.github.com/users/samtvlabs/following{/other_user}",
      "gists_url": "https://api.github.com/users/samtvlabs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/samtvlabs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/samtvlabs/subscriptions",
      "organizations_url": "https://api.github.com/users/samtvlabs/orgs",
      "repos_url": "https://api.github.com/users/samtvlabs/repos",
      "events_url": "https://api.github.com/users/samtvlabs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/samtvlabs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-02-08T09:27:36Z",
    "updated_at": "2023-02-08T09:27:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "We are currently redeploying the service , please try again in 20-30\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1422291418/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1422316148",
    "html_url": "https://github.com/foundry-rs/foundry/issues/4301#issuecomment-1422316148",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4301",
    "id": 1422316148,
    "node_id": "IC_kwDOGBlvNc5UxtJ0",
    "user": {
      "login": "samtvlabs",
      "id": 112424909,
      "node_id": "U_kgDOBrN3zQ",
      "avatar_url": "https://avatars.githubusercontent.com/u/112424909?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/samtvlabs",
      "html_url": "https://github.com/samtvlabs",
      "followers_url": "https://api.github.com/users/samtvlabs/followers",
      "following_url": "https://api.github.com/users/samtvlabs/following{/other_user}",
      "gists_url": "https://api.github.com/users/samtvlabs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/samtvlabs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/samtvlabs/subscriptions",
      "organizations_url": "https://api.github.com/users/samtvlabs/orgs",
      "repos_url": "https://api.github.com/users/samtvlabs/repos",
      "events_url": "https://api.github.com/users/samtvlabs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/samtvlabs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-02-08T09:46:56Z",
    "updated_at": "2023-02-08T09:46:56Z",
    "author_association": "CONTRIBUTOR",
    "body": "@mattsse can you please try again? ",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1422316148/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1422323484",
    "html_url": "https://github.com/foundry-rs/foundry/issues/4301#issuecomment-1422323484",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4301",
    "id": 1422323484,
    "node_id": "IC_kwDOGBlvNc5Uxu8c",
    "user": {
      "login": "samtvlabs",
      "id": 112424909,
      "node_id": "U_kgDOBrN3zQ",
      "avatar_url": "https://avatars.githubusercontent.com/u/112424909?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/samtvlabs",
      "html_url": "https://github.com/samtvlabs",
      "followers_url": "https://api.github.com/users/samtvlabs/followers",
      "following_url": "https://api.github.com/users/samtvlabs/following{/other_user}",
      "gists_url": "https://api.github.com/users/samtvlabs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/samtvlabs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/samtvlabs/subscriptions",
      "organizations_url": "https://api.github.com/users/samtvlabs/orgs",
      "repos_url": "https://api.github.com/users/samtvlabs/repos",
      "events_url": "https://api.github.com/users/samtvlabs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/samtvlabs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-02-08T09:52:39Z",
    "updated_at": "2023-02-08T09:52:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "Here are the logs with `RUST_LOG=forge`\r\n\r\nhttps://gist.github.com/samtvlabs/dc08a3b26b0f84c82cabb20f90d46939",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1422323484/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1422326296",
    "html_url": "https://github.com/foundry-rs/foundry/issues/4301#issuecomment-1422326296",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4301",
    "id": 1422326296,
    "node_id": "IC_kwDOGBlvNc5UxvoY",
    "user": {
      "login": "mattsse",
      "id": 19890894,
      "node_id": "MDQ6VXNlcjE5ODkwODk0",
      "avatar_url": "https://avatars.githubusercontent.com/u/19890894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mattsse",
      "html_url": "https://github.com/mattsse",
      "followers_url": "https://api.github.com/users/mattsse/followers",
      "following_url": "https://api.github.com/users/mattsse/following{/other_user}",
      "gists_url": "https://api.github.com/users/mattsse/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mattsse/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mattsse/subscriptions",
      "organizations_url": "https://api.github.com/users/mattsse/orgs",
      "repos_url": "https://api.github.com/users/mattsse/repos",
      "events_url": "https://api.github.com/users/mattsse/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mattsse/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-02-08T09:54:52Z",
    "updated_at": "2023-02-08T09:54:52Z",
    "author_association": "MEMBER",
    "body": "will debug this shortly.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1422326296/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1437108107",
    "html_url": "https://github.com/foundry-rs/foundry/issues/4301#issuecomment-1437108107",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4301",
    "id": 1437108107,
    "node_id": "IC_kwDOGBlvNc5VqIeL",
    "user": {
      "login": "ChiTimesChi",
      "id": 88190723,
      "node_id": "MDQ6VXNlcjg4MTkwNzIz",
      "avatar_url": "https://avatars.githubusercontent.com/u/88190723?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ChiTimesChi",
      "html_url": "https://github.com/ChiTimesChi",
      "followers_url": "https://api.github.com/users/ChiTimesChi/followers",
      "following_url": "https://api.github.com/users/ChiTimesChi/following{/other_user}",
      "gists_url": "https://api.github.com/users/ChiTimesChi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ChiTimesChi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ChiTimesChi/subscriptions",
      "organizations_url": "https://api.github.com/users/ChiTimesChi/orgs",
      "repos_url": "https://api.github.com/users/ChiTimesChi/repos",
      "events_url": "https://api.github.com/users/ChiTimesChi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ChiTimesChi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-02-20T14:26:37Z",
    "updated_at": "2023-02-20T16:38:26Z",
    "author_association": "NONE",
    "body": "@mattsse Any updates for this? Not being able to verify deployed contracts on any of the blockscout explorers lately.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1437108107/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
