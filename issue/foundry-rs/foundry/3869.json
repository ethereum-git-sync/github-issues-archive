{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/3869",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3869/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3869/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3869/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/3869",
  "id": 1489307367,
  "node_id": "I_kwDOGBlvNc5YxQbn",
  "number": 3869,
  "title": "Cannot find the storage slot for a public string variable",
  "user": {
    "login": "simontianx",
    "id": 9939278,
    "node_id": "MDQ6VXNlcjk5MzkyNzg=",
    "avatar_url": "https://avatars.githubusercontent.com/u/9939278?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simontianx",
    "html_url": "https://github.com/simontianx",
    "followers_url": "https://api.github.com/users/simontianx/followers",
    "following_url": "https://api.github.com/users/simontianx/following{/other_user}",
    "gists_url": "https://api.github.com/users/simontianx/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simontianx/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simontianx/subscriptions",
    "organizations_url": "https://api.github.com/users/simontianx/orgs",
    "repos_url": "https://api.github.com/users/simontianx/repos",
    "events_url": "https://api.github.com/users/simontianx/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simontianx/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3334394228,
      "node_id": "MDU6TGFiZWwzMzM0Mzk0MjI4",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-bug",
      "name": "T-bug",
      "color": "d73a4a",
      "default": false,
      "description": "Type: bug"
    },
    {
      "id": 3703752787,
      "node_id": "LA_kwDOGBlvNc7cwshT",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/C-forge",
      "name": "C-forge",
      "color": "5319E7",
      "default": false,
      "description": "Command: forge"
    },
    {
      "id": 3703752960,
      "node_id": "LA_kwDOGBlvNc7cwskA",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/A-cheatcodes",
      "name": "A-cheatcodes",
      "color": "FBCA04",
      "default": false,
      "description": "Area: cheatcodes"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 10,
  "created_at": "2022-12-11T02:38:31Z",
  "updated_at": "2022-12-24T17:01:53Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "### Component\r\n\r\nForge\r\n\r\n### Have you ensured that all of these are up to date?\r\n\r\n- [X] Foundry\r\n- [ ] Foundryup\r\n\r\n### What version of Foundry are you on?\r\n\r\nforge 0.2.0 (b28119b 2022-11-23T03:06:50.152811Z)\r\n\r\n### What command(s) is the bug in?\r\n\r\nforge test\r\n\r\n### Operating System\r\n\r\nWindows\r\n\r\n### Describe the bug\r\n\r\nFor a simple storage layout given below, it's possible to find the storage slot for `owner` and `number` by running `stdstore.target(address(test)).sig(\"owner()\").find();` or `stdstore.target(address(test)).sig(\"number()\").find();`, but it's failing when running `stdstore.target(address(test)).sig(\"sentence()\").find();`.\r\n```\r\ncontract SimpleStorage {\r\n    address public owner;\r\n    string public sentence;\r\n    uint256 public number;\r\n}\r\n```",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/3869/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3869/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1362763316",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3869#issuecomment-1362763316",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3869",
    "id": 1362763316,
    "node_id": "IC_kwDOGBlvNc5ROh40",
    "user": {
      "login": "rkrasiuk",
      "id": 25429261,
      "node_id": "MDQ6VXNlcjI1NDI5MjYx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25429261?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rkrasiuk",
      "html_url": "https://github.com/rkrasiuk",
      "followers_url": "https://api.github.com/users/rkrasiuk/followers",
      "following_url": "https://api.github.com/users/rkrasiuk/following{/other_user}",
      "gists_url": "https://api.github.com/users/rkrasiuk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rkrasiuk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rkrasiuk/subscriptions",
      "organizations_url": "https://api.github.com/users/rkrasiuk/orgs",
      "repos_url": "https://api.github.com/users/rkrasiuk/repos",
      "events_url": "https://api.github.com/users/rkrasiuk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rkrasiuk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-12-22T12:07:15Z",
    "updated_at": "2022-12-22T12:07:15Z",
    "author_association": "COLLABORATOR",
    "body": "@mds1 @ZeroEkkusu ptal",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1362763316/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1362880402",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3869#issuecomment-1362880402",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3869",
    "id": 1362880402,
    "node_id": "IC_kwDOGBlvNc5RO-eS",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-12-22T14:07:32Z",
    "updated_at": "2022-12-22T14:07:32Z",
    "author_association": "COLLABORATOR",
    "body": "This makes sense to me: `address` and `uint256` always use a single slot in storage, whereas `string` is a dynamic type so it's length / number of slots varies, and I don't think `stdstore` supports dynamic types currently. It probably can be extended to do so, though I'm not sure how difficult it would be (@brockelmore might know better)",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1362880402/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1362963430",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3869#issuecomment-1362963430",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3869",
    "id": 1362963430,
    "node_id": "IC_kwDOGBlvNc5RPSvm",
    "user": {
      "login": "brockelmore",
      "id": 31553173,
      "node_id": "MDQ6VXNlcjMxNTUzMTcz",
      "avatar_url": "https://avatars.githubusercontent.com/u/31553173?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brockelmore",
      "html_url": "https://github.com/brockelmore",
      "followers_url": "https://api.github.com/users/brockelmore/followers",
      "following_url": "https://api.github.com/users/brockelmore/following{/other_user}",
      "gists_url": "https://api.github.com/users/brockelmore/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brockelmore/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brockelmore/subscriptions",
      "organizations_url": "https://api.github.com/users/brockelmore/orgs",
      "repos_url": "https://api.github.com/users/brockelmore/repos",
      "events_url": "https://api.github.com/users/brockelmore/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brockelmore/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-12-22T15:18:51Z",
    "updated_at": "2022-12-22T15:18:51Z",
    "author_association": "MEMBER",
    "body": "multi-slot stuff would be a big unlock but quite painful to accomplish safely. If the string fits in 32 bytes, it works but anything longer won't. I would recommend manually using vm.load if you need to handle multi slot strings",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1362963430/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1363001597",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3869#issuecomment-1363001597",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3869",
    "id": 1363001597,
    "node_id": "IC_kwDOGBlvNc5RPcD9",
    "user": {
      "login": "ZeroEkkusu",
      "id": 94782988,
      "node_id": "U_kgDOBaZGDA",
      "avatar_url": "https://avatars.githubusercontent.com/u/94782988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ZeroEkkusu",
      "html_url": "https://github.com/ZeroEkkusu",
      "followers_url": "https://api.github.com/users/ZeroEkkusu/followers",
      "following_url": "https://api.github.com/users/ZeroEkkusu/following{/other_user}",
      "gists_url": "https://api.github.com/users/ZeroEkkusu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ZeroEkkusu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ZeroEkkusu/subscriptions",
      "organizations_url": "https://api.github.com/users/ZeroEkkusu/orgs",
      "repos_url": "https://api.github.com/users/ZeroEkkusu/repos",
      "events_url": "https://api.github.com/users/ZeroEkkusu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ZeroEkkusu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-12-22T15:55:56Z",
    "updated_at": "2022-12-22T15:59:50Z",
    "author_association": "CONTRIBUTOR",
    "body": "@brockelmore Is it possible to have a `vm` cheatcode that returns storage layout - e.g. when you take a look at the storage layout in the artifacts, you can see the names of variables and it is obvious what is packed where and of what type it is. Types do get more complicated with structs, etc. `forge-std` could leverage it to create helpers - it'd be possible to access `internal` and `private` variables as well. How doable is that?\r\n\r\nEdit: I thought about it a few months ago but saw that parsing storage layout gets complicated with structs/nesting, as I mentioned.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1363001597/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1363172637",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3869#issuecomment-1363172637",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3869",
    "id": 1363172637,
    "node_id": "IC_kwDOGBlvNc5RQF0d",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-12-22T17:42:53Z",
    "updated_at": "2022-12-22T17:42:53Z",
    "author_association": "COLLABORATOR",
    "body": "We've talked about that a bit in the past, a few considerations that I recall:\r\n- pretty sure solc does not output storage layout by default, so the cheatcode would need to throw or recompile if storage layout isn't present. Also need to decide if you compile with storage layout by default and slow down compilation for all users, even ones who don't need it, or require users to add that flag when using this cheatcode.\r\n- the current stdstorage approach (not needing storage layout) is still better in some cases: (1) you don't have source code but you have an ABI, (2) you're working against a fork for a contract already deployed (avoids needing to compile it to get storage layout), and (3) you're running forge against local contracts compiled with another language so don't have storage layout info in the expected solidity format\r\n- i.e. the optimal solution is to have both approaches behind the scenes and figure out the best UX to make this work",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1363172637/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1363333860",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3869#issuecomment-1363333860",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3869",
    "id": 1363333860,
    "node_id": "IC_kwDOGBlvNc5RQtLk",
    "user": {
      "login": "ZeroEkkusu",
      "id": 94782988,
      "node_id": "U_kgDOBaZGDA",
      "avatar_url": "https://avatars.githubusercontent.com/u/94782988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ZeroEkkusu",
      "html_url": "https://github.com/ZeroEkkusu",
      "followers_url": "https://api.github.com/users/ZeroEkkusu/followers",
      "following_url": "https://api.github.com/users/ZeroEkkusu/following{/other_user}",
      "gists_url": "https://api.github.com/users/ZeroEkkusu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ZeroEkkusu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ZeroEkkusu/subscriptions",
      "organizations_url": "https://api.github.com/users/ZeroEkkusu/orgs",
      "repos_url": "https://api.github.com/users/ZeroEkkusu/repos",
      "events_url": "https://api.github.com/users/ZeroEkkusu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ZeroEkkusu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-12-22T20:58:27Z",
    "updated_at": "2022-12-22T20:58:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "I agree with all three points.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1363333860/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1363380777",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3869#issuecomment-1363380777",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3869",
    "id": 1363380777,
    "node_id": "IC_kwDOGBlvNc5RQ4op",
    "user": {
      "login": "brockelmore",
      "id": 31553173,
      "node_id": "MDQ6VXNlcjMxNTUzMTcz",
      "avatar_url": "https://avatars.githubusercontent.com/u/31553173?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brockelmore",
      "html_url": "https://github.com/brockelmore",
      "followers_url": "https://api.github.com/users/brockelmore/followers",
      "following_url": "https://api.github.com/users/brockelmore/following{/other_user}",
      "gists_url": "https://api.github.com/users/brockelmore/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brockelmore/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brockelmore/subscriptions",
      "organizations_url": "https://api.github.com/users/brockelmore/orgs",
      "repos_url": "https://api.github.com/users/brockelmore/repos",
      "events_url": "https://api.github.com/users/brockelmore/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brockelmore/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-12-22T21:49:32Z",
    "updated_at": "2022-12-22T21:51:47Z",
    "author_association": "MEMBER",
    "body": "Now that i think about it there is a nonzero chance that if we know we are finding a string or bytes we can check for sequentialities in the read slots and match against those actually",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1363380777/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1363413382",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3869#issuecomment-1363413382",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3869",
    "id": 1363413382,
    "node_id": "IC_kwDOGBlvNc5RRAmG",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-12-22T22:44:32Z",
    "updated_at": "2022-12-22T22:44:32Z",
    "author_association": "COLLABORATOR",
    "body": "Also need to consider that the data might be in the slot itself, or the slot might just have the encoded length with the data in `keccak(slot)`: https://docs.soliditylang.org/en/v0.8.17/internals/layout_in_storage.html#bytes-and-string\r\n\r\nBut yea, for the latter case you can just keep reading adjacent slots until it's empty which should pretty much always be a safe assumption",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1363413382/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1364522823",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3869#issuecomment-1364522823",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3869",
    "id": 1364522823,
    "node_id": "IC_kwDOGBlvNc5RVPdH",
    "user": {
      "login": "simontianx",
      "id": 9939278,
      "node_id": "MDQ6VXNlcjk5MzkyNzg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9939278?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/simontianx",
      "html_url": "https://github.com/simontianx",
      "followers_url": "https://api.github.com/users/simontianx/followers",
      "following_url": "https://api.github.com/users/simontianx/following{/other_user}",
      "gists_url": "https://api.github.com/users/simontianx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/simontianx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/simontianx/subscriptions",
      "organizations_url": "https://api.github.com/users/simontianx/orgs",
      "repos_url": "https://api.github.com/users/simontianx/repos",
      "events_url": "https://api.github.com/users/simontianx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/simontianx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-12-24T12:28:54Z",
    "updated_at": "2022-12-24T12:28:54Z",
    "author_association": "NONE",
    "body": "@mds1 @rkrasiuk @brockelmore @ZeroEkkusu Thanks for the answers and comments. In the given example, I was thinking that the information at the slot 1 can be read directly to know about the string `sentence` as in `ethers.getStorageAt`, but `stdstore.target(address(test)).sig(\"sentence()\").find();` doesn't seem to work that way. I am wondering if it's possible to read directly from a storage slot no matter what type of variables it represents. Thanks.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1364522823/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1364556196",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3869#issuecomment-1364556196",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3869",
    "id": 1364556196,
    "node_id": "IC_kwDOGBlvNc5RVXmk",
    "user": {
      "login": "brockelmore",
      "id": 31553173,
      "node_id": "MDQ6VXNlcjMxNTUzMTcz",
      "avatar_url": "https://avatars.githubusercontent.com/u/31553173?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brockelmore",
      "html_url": "https://github.com/brockelmore",
      "followers_url": "https://api.github.com/users/brockelmore/followers",
      "following_url": "https://api.github.com/users/brockelmore/following{/other_user}",
      "gists_url": "https://api.github.com/users/brockelmore/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brockelmore/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brockelmore/subscriptions",
      "organizations_url": "https://api.github.com/users/brockelmore/orgs",
      "repos_url": "https://api.github.com/users/brockelmore/repos",
      "events_url": "https://api.github.com/users/brockelmore/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brockelmore/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-12-24T17:01:53Z",
    "updated_at": "2022-12-24T17:01:53Z",
    "author_association": "MEMBER",
    "body": "@simontianx can you try the branch of forge-std in the PR i linked above? Should work",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1364556196/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
