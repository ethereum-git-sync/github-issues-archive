{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/3950",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3950/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3950/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3950/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/3950",
  "id": 1509952285,
  "node_id": "I_kwDOGBlvNc5aAAsd",
  "number": 3950,
  "title": "How to combine multiple supposed-to-fail contract calls in one test case?",
  "user": {
    "login": "0xDEnYO",
    "id": 77058885,
    "node_id": "MDQ6VXNlcjc3MDU4ODg1",
    "avatar_url": "https://avatars.githubusercontent.com/u/77058885?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/0xDEnYO",
    "html_url": "https://github.com/0xDEnYO",
    "followers_url": "https://api.github.com/users/0xDEnYO/followers",
    "following_url": "https://api.github.com/users/0xDEnYO/following{/other_user}",
    "gists_url": "https://api.github.com/users/0xDEnYO/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/0xDEnYO/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/0xDEnYO/subscriptions",
    "organizations_url": "https://api.github.com/users/0xDEnYO/orgs",
    "repos_url": "https://api.github.com/users/0xDEnYO/repos",
    "events_url": "https://api.github.com/users/0xDEnYO/events{/privacy}",
    "received_events_url": "https://api.github.com/users/0xDEnYO/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 3,
  "created_at": "2022-11-21T15:27:38Z",
  "updated_at": "2022-12-24T05:44:00Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "Hey Guys,\r\n\r\nI am coding a Testhelper.sol contract which features some standard tests that should be inherited and executed by multiple other test files. We have numerous diamond facets and we want to make sure that they all pass the same tests whilst reducing boilerplate code.\r\nAggregating and calling positive tests works fine.\r\nBut aggregating negative tests does not work since after the first test failed, the tx is reverted already and the following tests will never be executed.\r\nI cannot work with try/catch here since these are internal calls.\r\n\r\nIn Hardhat I could apply the following principle:\r\nexpectRevert(testFailNegative1());\r\nexpectRevert(testFailNegative2());\r\n...\r\n\r\nBut with foundry I have not found a way to have several reverting calls in one test case.\r\n\r\nDo you have a suggestion for me how I could implement such a pattern?\r\n\r\nfile _Testhelper.sol_\r\n```\r\ncontract TestHelper {\r\n   function testPositiveA() public {....}\r\n   function testPositiveB() public {....}\r\n   function testFailNegative1() public {....}\r\n   function testFailNegative() public {....}\r\n\r\n   function runAllPositiveTests() internal {      // this works fine\r\n     testPositiveA();\r\n     testPositiveB();\r\n   }\r\n\r\n  function runAllNegativeTests() internal {\r\n     testFailNegative1();   // fails here (as expected)\r\n     testFailNegative2();  // will never be executed, but should\r\n  }\r\n}\r\n```\r\n\r\nfile _TestFacet.t.sol_\r\n```\r\ncontract TestFacet is Testhelper {\r\n\r\n   function testPositiveStandardTests() public {\r\n       runAllPositiveTests();   // this works fine\r\n   }\r\n\r\n   function testFailNegativeStandardTests() public {\r\n       runAllNegativeTests();    // this will never execute all negative standard tests but stop after the first one failed\r\n   }\r\n}",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/3950/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3950/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1364466965",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3950#issuecomment-1364466965",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3950",
    "id": 1364466965,
    "node_id": "IC_kwDOGBlvNc5RVB0V",
    "user": {
      "login": "mattsse",
      "id": 19890894,
      "node_id": "MDQ6VXNlcjE5ODkwODk0",
      "avatar_url": "https://avatars.githubusercontent.com/u/19890894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mattsse",
      "html_url": "https://github.com/mattsse",
      "followers_url": "https://api.github.com/users/mattsse/followers",
      "following_url": "https://api.github.com/users/mattsse/following{/other_user}",
      "gists_url": "https://api.github.com/users/mattsse/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mattsse/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mattsse/subscriptions",
      "organizations_url": "https://api.github.com/users/mattsse/orgs",
      "repos_url": "https://api.github.com/users/mattsse/repos",
      "events_url": "https://api.github.com/users/mattsse/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mattsse/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-21T16:09:15Z",
    "updated_at": "2022-11-21T16:09:15Z",
    "author_association": "MEMBER",
    "body": "@odyslam thoughts about this?\r\n\r\niirc we discussed multi expectRevert at some point, so maybe you have some insight here",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1364466965/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1364466966",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3950#issuecomment-1364466966",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3950",
    "id": 1364466966,
    "node_id": "IC_kwDOGBlvNc5RVB0W",
    "user": {
      "login": "0xDEnYO",
      "id": 77058885,
      "node_id": "MDQ6VXNlcjc3MDU4ODg1",
      "avatar_url": "https://avatars.githubusercontent.com/u/77058885?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/0xDEnYO",
      "html_url": "https://github.com/0xDEnYO",
      "followers_url": "https://api.github.com/users/0xDEnYO/followers",
      "following_url": "https://api.github.com/users/0xDEnYO/following{/other_user}",
      "gists_url": "https://api.github.com/users/0xDEnYO/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/0xDEnYO/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/0xDEnYO/subscriptions",
      "organizations_url": "https://api.github.com/users/0xDEnYO/orgs",
      "repos_url": "https://api.github.com/users/0xDEnYO/repos",
      "events_url": "https://api.github.com/users/0xDEnYO/events{/privacy}",
      "received_events_url": "https://api.github.com/users/0xDEnYO/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-21T16:31:49Z",
    "updated_at": "2022-11-21T16:31:49Z",
    "author_association": "NONE",
    "body": "Actually, I just realized that by making the functions public in the Testhelper.sol contract, the test run will pick them up automatically. So I dont even need to aggregate the functions and call them explicitly. This helps me partially.\r\n\r\nBut nevertheless I see benefits of having multiple reverts in one call \r\n(e.g. testing to fail a function with several wrong parameters - would be nice to combine that in one test case) ",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1364466966/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1364466967",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3950#issuecomment-1364466967",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3950",
    "id": 1364466967,
    "node_id": "IC_kwDOGBlvNc5RVB0X",
    "user": {
      "login": "odyslam",
      "id": 13405632,
      "node_id": "MDQ6VXNlcjEzNDA1NjMy",
      "avatar_url": "https://avatars.githubusercontent.com/u/13405632?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/odyslam",
      "html_url": "https://github.com/odyslam",
      "followers_url": "https://api.github.com/users/odyslam/followers",
      "following_url": "https://api.github.com/users/odyslam/following{/other_user}",
      "gists_url": "https://api.github.com/users/odyslam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/odyslam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/odyslam/subscriptions",
      "organizations_url": "https://api.github.com/users/odyslam/orgs",
      "repos_url": "https://api.github.com/users/odyslam/repos",
      "events_url": "https://api.github.com/users/odyslam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/odyslam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-21T16:35:47Z",
    "updated_at": "2022-11-21T16:35:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "@mattsse I think this is another use-case for the combinators we talked about:\r\n- not\r\n- or\r\n- and",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1364466967/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
