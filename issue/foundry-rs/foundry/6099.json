{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/6099",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/6099/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/6099/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/6099/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/6099",
  "id": 1960020809,
  "node_id": "I_kwDOGBlvNc5004tJ",
  "number": 6099,
  "title": "Selective compilation of certain Solidity files via foundry.toml",
  "user": {
    "login": "Vectorized",
    "id": 5889274,
    "node_id": "MDQ6VXNlcjU4ODkyNzQ=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5889274?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Vectorized",
    "html_url": "https://github.com/Vectorized",
    "followers_url": "https://api.github.com/users/Vectorized/followers",
    "following_url": "https://api.github.com/users/Vectorized/following{/other_user}",
    "gists_url": "https://api.github.com/users/Vectorized/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Vectorized/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Vectorized/subscriptions",
    "organizations_url": "https://api.github.com/users/Vectorized/orgs",
    "repos_url": "https://api.github.com/users/Vectorized/repos",
    "events_url": "https://api.github.com/users/Vectorized/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Vectorized/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3593644820,
      "node_id": "LA_kwDOGBlvNc7WMqsU",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-feature",
      "name": "T-feature",
      "color": "BFD4F2",
      "default": false,
      "description": "Type: feature"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2023-10-24T20:25:51Z",
  "updated_at": "2023-10-25T10:10:22Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "### Component\r\n\r\nForge\r\n\r\n### Describe the feature you would like\r\n\r\nSuppose I want to include 2 different `ReentracyGuard` files in Solady. \r\n\r\n- `ReentrancyGuard.sol` (uses regular old `sstore`).\r\n- `ReentrancyGuard.cancun.sol` (uses the `tstore` opcode probably available in solc 0.8.23 in the future).\r\n\r\nCompilation will throw an error when using `\"solc_version\" < \"0.8.23\"` or `\"evm_version\" < \"cancun\"`.\r\n\r\n#### Suggestion\r\n\r\nSuppose Solady's `foundry.toml` has:\r\n\r\n```\r\n[profile.default]\r\nsolc_version = \"0.8.21\"\r\nevm_version = \"paris\" # Shanghai will be tested in the CI.\r\nauto_detect_solc = false\r\noptimizer = true\r\noptimizer_runs = 1_000\r\ngas_limit = 100_000_000 # ETH is 30M, but we use a higher value.\r\nremappings = [\r\n  \"forge-std=test/utils/forge-std/\"\r\n]\r\nselective_compile = [\r\n  { path = \"./**/*.cancun.sol\", min_solc_version = \"0.8.23\", min_evm_version = \"cancun\" }\r\n]\r\n```\r\n\r\nIdeally any library that installs Solady via forge must be able to compile with `solc >= 0.8.4` (minimum supported version by Solady). \r\n\r\nBut if their `foundry.toml` specifies `\"solc_version\" = \"0.0.23\"` and `\"evm_version\" = \"cancun\"`, they will be able to include and compile `ReentrancyGuard.cancun.sol`.\r\n\r\nA project that targets many EVM chains (e.g. for canonical create2 deployments with vanity addresses) would use `\"solc_version\" = \"0.0.23\"` (or any other version that supports paris) and `\"evm_version\" = \"paris\"`. They will include the traditional `ReentrancyGuard.sol` in files.\r\n\r\nA project that only targets Ethereum mainnet would use `\"solc_version\" = \"0.0.23\"` and `\"evm_version\" = \"cancun\"`. They will include `ReentrancyGuard.cancun.sol` in files instead.\r\n\r\n#### Why?\r\n\r\nI mean... we cannot expect L2s (and Solidity) to be shipping as fast and hardcore as the Foundry team. \r\n\r\nPUSH0 was a good test of what's to come.\r\n\r\n### Additional context\r\n\r\n_No response_",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/6099/reactions",
    "total_count": 3,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 3,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/6099/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1778139862",
    "html_url": "https://github.com/foundry-rs/foundry/issues/6099#issuecomment-1778139862",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/6099",
    "id": 1778139862,
    "node_id": "IC_kwDOGBlvNc5p_ELW",
    "user": {
      "login": "mattsse",
      "id": 19890894,
      "node_id": "MDQ6VXNlcjE5ODkwODk0",
      "avatar_url": "https://avatars.githubusercontent.com/u/19890894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mattsse",
      "html_url": "https://github.com/mattsse",
      "followers_url": "https://api.github.com/users/mattsse/followers",
      "following_url": "https://api.github.com/users/mattsse/following{/other_user}",
      "gists_url": "https://api.github.com/users/mattsse/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mattsse/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mattsse/subscriptions",
      "organizations_url": "https://api.github.com/users/mattsse/orgs",
      "repos_url": "https://api.github.com/users/mattsse/repos",
      "events_url": "https://api.github.com/users/mattsse/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mattsse/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-10-24T22:25:04Z",
    "updated_at": "2023-10-24T22:25:04Z",
    "author_association": "MEMBER",
    "body": "yeah, we kind of want this in one form or another.\r\n\r\nI think this is some form of configuration conditional where a library can allow/disallow certain files based on the configured version\r\n\r\nall of this needs to be solved during preprocessing, independently from solc.\r\n\r\nI can see how this will become important with new cancun opcodes and already is problematic with push0...\r\n\r\nBecause this depends on the file itself, I can imagine this could be solved with some natspec custom modifier and via the config like you suggested.\r\n\r\nI think it's most important to prevent compilation if evm version is invalid.\r\nbut I wonder if the ideal DX would be something like, \"if cancun use cancun.sol variant of that file, if < cancun use this file\"\r\n\r\nbut this is likely a niche feature only for certain libraries like solady and should probably be solved via a package manager solution instead.\r\n\r\nBut adding rules into the config would be possible and we should start with that.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1778139862/reactions",
      "total_count": 5,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 5,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
