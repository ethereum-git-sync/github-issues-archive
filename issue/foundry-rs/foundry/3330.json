{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/3330",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3330/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3330/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3330/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/3330",
  "id": 1384268691,
  "node_id": "I_kwDOGBlvNc5SgkOT",
  "number": 3330,
  "title": "vm.signTypedData or vm.generateEIP712Digest",
  "user": {
    "login": "colinnielsen",
    "id": 33375223,
    "node_id": "MDQ6VXNlcjMzMzc1MjIz",
    "avatar_url": "https://avatars.githubusercontent.com/u/33375223?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/colinnielsen",
    "html_url": "https://github.com/colinnielsen",
    "followers_url": "https://api.github.com/users/colinnielsen/followers",
    "following_url": "https://api.github.com/users/colinnielsen/following{/other_user}",
    "gists_url": "https://api.github.com/users/colinnielsen/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/colinnielsen/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/colinnielsen/subscriptions",
    "organizations_url": "https://api.github.com/users/colinnielsen/orgs",
    "repos_url": "https://api.github.com/users/colinnielsen/repos",
    "events_url": "https://api.github.com/users/colinnielsen/events{/privacy}",
    "received_events_url": "https://api.github.com/users/colinnielsen/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3593644820,
      "node_id": "LA_kwDOGBlvNc7WMqsU",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-feature",
      "name": "T-feature",
      "color": "BFD4F2",
      "default": false,
      "description": "Type: feature"
    },
    {
      "id": 3703752787,
      "node_id": "LA_kwDOGBlvNc7cwshT",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/C-forge",
      "name": "C-forge",
      "color": "5319E7",
      "default": false,
      "description": "Command: forge"
    },
    {
      "id": 3703752960,
      "node_id": "LA_kwDOGBlvNc7cwskA",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/A-cheatcodes",
      "name": "A-cheatcodes",
      "color": "FBCA04",
      "default": false,
      "description": "Area: cheatcodes"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2022-09-23T20:28:12Z",
  "updated_at": "2023-03-09T23:30:48Z",
  "closed_at": "2023-03-09T23:30:47Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "### Component\n\nForge\n\n### Describe the feature you would like\n\nFor EIP712 testing, it would be great to have a EIP712 digest generator that creates a 32 byte digest based the types, domain, and values following the algorithm defined in the [EIP712 spec](https://eips.ethereum.org/EIPS/eip-712), or even a fully built `signedTypedData` cheatcode.\r\n\r\nI've had a lot of headache recently with EIP712 foundry tests passing when they shouldn't have because there was no way to test if a contract is computing a digest properly.\r\n\r\nI am not sure what cheatcodes would look like in solidity, but I imagine passing a it:\r\n1. EIP712 domain struct\r\n2. The EIP712 type def: eg: `Transaction(Person from,Person to,Asset tx)Asset(address token,uint256 amount)Person(address wallet,string name)` \r\n3. The `abi.encodePacked()` values of the struct\r\n\r\n\r\nThis could be a possible interface\r\n```solidity\r\nfunction generateEIP712Digest(EIP712Domain memory domain, string memory eip712Type, bytes memory structValue) public view returns (string memory);\r\n\r\nfunction signTypedData(uint256 privateKey, EIP712Domain memory domain, string memory eip712Type, bytes memory structValue) public view returns (uint8 v, bytes32 r, bytes32 s);\r\n```\n\n### Additional context\n\n_No response_",
  "closed_by": {
    "login": "mds1",
    "id": 17163988,
    "node_id": "MDQ6VXNlcjE3MTYzOTg4",
    "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mds1",
    "html_url": "https://github.com/mds1",
    "followers_url": "https://api.github.com/users/mds1/followers",
    "following_url": "https://api.github.com/users/mds1/following{/other_user}",
    "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
    "organizations_url": "https://api.github.com/users/mds1/orgs",
    "repos_url": "https://api.github.com/users/mds1/repos",
    "events_url": "https://api.github.com/users/mds1/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mds1/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/3330/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3330/timeline",
  "performed_via_github_app": null,
  "state_reason": "not_planned"
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1262343380",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3330#issuecomment-1262343380",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3330",
    "id": 1262343380,
    "node_id": "IC_kwDOGBlvNc5LPdTU",
    "user": {
      "login": "CodeSandwich",
      "id": 26183680,
      "node_id": "MDQ6VXNlcjI2MTgzNjgw",
      "avatar_url": "https://avatars.githubusercontent.com/u/26183680?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeSandwich",
      "html_url": "https://github.com/CodeSandwich",
      "followers_url": "https://api.github.com/users/CodeSandwich/followers",
      "following_url": "https://api.github.com/users/CodeSandwich/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeSandwich/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeSandwich/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeSandwich/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeSandwich/orgs",
      "repos_url": "https://api.github.com/users/CodeSandwich/repos",
      "events_url": "https://api.github.com/users/CodeSandwich/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeSandwich/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-29T14:11:28Z",
    "updated_at": "2022-09-29T14:11:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "I had a similar problem, but I was able to work it around with `vm.sign(privKey, digest)` and OpenZeppelin's helpers. It boiled down to:\r\n```\r\nbytes32 digest = ECDSA.toTypedDataHash(domainSeparator, keccak256(payload));\r\n(uint8 v, bytes32 r, bytes32 s) = vm.sign(privKey, digest);\r\n```\r\nIt has an advantage over a VM built-in of not enforcing any particular signing convention, it's very elastic and thus future-proof.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1262343380/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1262667094",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3330#issuecomment-1262667094",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3330",
    "id": 1262667094,
    "node_id": "IC_kwDOGBlvNc5LQsVW",
    "user": {
      "login": "colinnielsen",
      "id": 33375223,
      "node_id": "MDQ6VXNlcjMzMzc1MjIz",
      "avatar_url": "https://avatars.githubusercontent.com/u/33375223?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/colinnielsen",
      "html_url": "https://github.com/colinnielsen",
      "followers_url": "https://api.github.com/users/colinnielsen/followers",
      "following_url": "https://api.github.com/users/colinnielsen/following{/other_user}",
      "gists_url": "https://api.github.com/users/colinnielsen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/colinnielsen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/colinnielsen/subscriptions",
      "organizations_url": "https://api.github.com/users/colinnielsen/orgs",
      "repos_url": "https://api.github.com/users/colinnielsen/repos",
      "events_url": "https://api.github.com/users/colinnielsen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/colinnielsen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-29T18:33:42Z",
    "updated_at": "2022-09-29T18:33:42Z",
    "author_association": "NONE",
    "body": "> ```bytes32 digest = ECDSA.toTypedDataHash(domainSeparator, keccak256(payload));```\r\n\r\nhmm - yes this does get _closer_ to solving the problem, but I think there is still a use case for true EIP712 digest generation. This would still be easy to generate false positives against.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1262667094/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1263286526",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3330#issuecomment-1263286526",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3330",
    "id": 1263286526,
    "node_id": "IC_kwDOGBlvNc5LTDj-",
    "user": {
      "login": "CodeSandwich",
      "id": 26183680,
      "node_id": "MDQ6VXNlcjI2MTgzNjgw",
      "avatar_url": "https://avatars.githubusercontent.com/u/26183680?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeSandwich",
      "html_url": "https://github.com/CodeSandwich",
      "followers_url": "https://api.github.com/users/CodeSandwich/followers",
      "following_url": "https://api.github.com/users/CodeSandwich/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeSandwich/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeSandwich/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeSandwich/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeSandwich/orgs",
      "repos_url": "https://api.github.com/users/CodeSandwich/repos",
      "events_url": "https://api.github.com/users/CodeSandwich/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeSandwich/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-30T08:41:49Z",
    "updated_at": "2022-09-30T08:41:49Z",
    "author_association": "CONTRIBUTOR",
    "body": "By far the best solution would be to have support for EIP-721 in Solidity, it could then do the magic static typing like it does with `abi.encodeWithSelector`. What can the VM do safer than a Solidity library? Both of them can analyze the `string memory eip712Type` and try to parse the `bytes memory structValue` to sanity-check it, but it seems like that's about it. That's an awesome feature when writing tests, but it doesn't seem to require a forever change in the VM API, a Solidity library should do just fine.\r\n\r\nI mean, don't mind my opinion too much, I'm not a Foundry developer, so it's not up to me to make any decisions, I'm just a user who wants to have Foundry robust.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1263286526/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1462981374",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3330#issuecomment-1462981374",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3330",
    "id": 1462981374,
    "node_id": "IC_kwDOGBlvNc5XM1L-",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-09T23:30:47Z",
    "updated_at": "2023-03-09T23:30:47Z",
    "author_association": "COLLABORATOR",
    "body": "There's no easy way in solidity to have a generic EIP-712 cheat since the data being signed over varies with each implementation. Instead, you should write your own helper contracts based on your specific contract. See https://book.getfoundry.sh/tutorials/testing-eip712 for an example of how to do this",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1462981374/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
