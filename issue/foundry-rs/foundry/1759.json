{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/1759",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1759/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1759/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1759/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/1759",
  "id": 1251837390,
  "node_id": "I_kwDOGBlvNc5KnYXO",
  "number": 1759,
  "title": "Partial cache in forking mode",
  "user": {
    "login": "asafyish",
    "id": 1331750,
    "node_id": "MDQ6VXNlcjEzMzE3NTA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1331750?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/asafyish",
    "html_url": "https://github.com/asafyish",
    "followers_url": "https://api.github.com/users/asafyish/followers",
    "following_url": "https://api.github.com/users/asafyish/following{/other_user}",
    "gists_url": "https://api.github.com/users/asafyish/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/asafyish/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/asafyish/subscriptions",
    "organizations_url": "https://api.github.com/users/asafyish/orgs",
    "repos_url": "https://api.github.com/users/asafyish/repos",
    "events_url": "https://api.github.com/users/asafyish/events{/privacy}",
    "received_events_url": "https://api.github.com/users/asafyish/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3593644820,
      "node_id": "LA_kwDOGBlvNc7WMqsU",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-feature",
      "name": "T-feature",
      "color": "BFD4F2",
      "default": false,
      "description": "Type: feature"
    },
    {
      "id": 4077188949,
      "node_id": "LA_kwDOGBlvNc7zBPdV",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/C-anvil",
      "name": "C-anvil",
      "color": "5319E7",
      "default": false,
      "description": "Command: anvil"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 7,
  "created_at": "2022-05-29T09:28:43Z",
  "updated_at": "2023-07-06T19:44:45Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "### Component\n\nAnvil\n\n### Describe the feature you would like\n\nI am running anvil in fork mode (connected to archive node), like so:\r\n```bash\r\nanvil --fork-url \"https://eth-mainnet.alchemyapi.io/v2/XXXXXXXX\" --fork-block-number 14577209\r\n```\r\nThen I am trying to read historical blocks data, which works, but only caches block 14577209, even though I am reading from the other blocks. The same scenario does create cache in hardhat and ganache. Since anvil is so much faster in the initial reading, I prefer using it.\r\n\r\nThis is how I am reading historical data:\r\n```js\r\nconst ethers = require(\"ethers\");\r\n\r\nconst daiAddress = \"0x6B175474E89094C44Da98b954EedeAC495271d0F\";\r\nconst daiAbi = [\"function name() view returns (string)\"];\r\n\r\nconst provider = new ethers.providers.JsonRpcProvider(\"http://127.0.0.1:8545\");\r\nconst daiContract = new ethers.Contract(daiAddress, daiAbi, provider);\r\n\r\nfor (let blockTag = 14577100; blockTag < 14577209; blockTag++) {\r\n  const name = await daiContract.name({\r\n    blockTag,\r\n  });\r\n  console.log(name);\r\n}\r\n```\r\n\r\nRunning\r\n```bash\r\nforge cache ls\r\n```\r\nreturns:\r\n-️ mainnet (2.1 kB)\r\n        -️ Block 14577209 (2.1 kB)\n\n### Additional context\n\nforge 0.2.0 (6ca977f 2022-05-29T02:10:50.584077Z)",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/1759/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1759/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1140430044",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1759#issuecomment-1140430044",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1759",
    "id": 1140430044,
    "node_id": "IC_kwDOGBlvNc5D-ZTc",
    "user": {
      "login": "mattsse",
      "id": 19890894,
      "node_id": "MDQ6VXNlcjE5ODkwODk0",
      "avatar_url": "https://avatars.githubusercontent.com/u/19890894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mattsse",
      "html_url": "https://github.com/mattsse",
      "followers_url": "https://api.github.com/users/mattsse/followers",
      "following_url": "https://api.github.com/users/mattsse/following{/other_user}",
      "gists_url": "https://api.github.com/users/mattsse/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mattsse/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mattsse/subscriptions",
      "organizations_url": "https://api.github.com/users/mattsse/orgs",
      "repos_url": "https://api.github.com/users/mattsse/repos",
      "events_url": "https://api.github.com/users/mattsse/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mattsse/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-29T11:36:19Z",
    "updated_at": "2022-05-29T11:36:19Z",
    "author_association": "MEMBER",
    "body": "currently we only store the state of the forked block, and cache is blockwise.\r\n\r\nif the block predates the fork we simply delegate the eth_call.\r\nin order to support state caching for these blocks we'd need to execute these calls locally and instead let the evm translate this to storage requests so we can cache single storage slots.\r\n\r\nwhich would be doable but would require some work.\r\n\r\nI'm not sure how hardhat/ganache store that eth_call, are they storing state map or eth_call/response pairs?\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1140430044/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1140466121",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1759#issuecomment-1140466121",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1759",
    "id": 1140466121,
    "node_id": "IC_kwDOGBlvNc5D-iHJ",
    "user": {
      "login": "asafyish",
      "id": 1331750,
      "node_id": "MDQ6VXNlcjEzMzE3NTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1331750?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/asafyish",
      "html_url": "https://github.com/asafyish",
      "followers_url": "https://api.github.com/users/asafyish/followers",
      "following_url": "https://api.github.com/users/asafyish/following{/other_user}",
      "gists_url": "https://api.github.com/users/asafyish/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/asafyish/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/asafyish/subscriptions",
      "organizations_url": "https://api.github.com/users/asafyish/orgs",
      "repos_url": "https://api.github.com/users/asafyish/repos",
      "events_url": "https://api.github.com/users/asafyish/events{/privacy}",
      "received_events_url": "https://api.github.com/users/asafyish/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-29T14:56:53Z",
    "updated_at": "2022-05-29T14:56:53Z",
    "author_association": "NONE",
    "body": "I am not familiar with hardhat implementation, but looking into the cache folder, it seems they are creating a \"request-{transaction-hash}.json\" file, with the contents of the response inside. I don't see any block number reference, so I can only guess that part of the hash contains the block number, something like sha(blockNumber + transaction-data).",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1140466121/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1140487668",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1759#issuecomment-1140487668",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1759",
    "id": 1140487668,
    "node_id": "IC_kwDOGBlvNc5D-nX0",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-29T17:03:32Z",
    "updated_at": "2022-05-29T17:03:32Z",
    "author_association": "COLLABORATOR",
    "body": "I looked into hardhat's caching approach a little while back (see https://github.com/foundry-rs/foundry/pull/698#issuecomment-1033111981). The answer is yes, they store call/response pairs:\r\n\r\n- `cache/hardhat-network-fork/network-{chainId}/` is the path containing cached responses for a given chain ID\r\n- Within that folder, each request is stored as a separate JSON file called `request-{key}.json`, where the `key` is  a hash of `{chain ID} {rpcMethod} {stringifiedParams}`. You can see the implementation [here](https://github.com/nomiclabs/hardhat/blob/4f108b51fc7f87bcf7f173a4301b5973918b4903/packages/hardhat-core/src/internal/hardhat-network/jsonrpc/client.ts#L364-L373).\r\n- The contents of each JSON file is simply the response of the request \r\n- They also don't cache blocks that are too recent and at risk of being reorged, and that threshold varies by network\r\n\r\nMost (all?) of their implementation can be found here: https://github.com/nomiclabs/hardhat/blob/4f108b51fc7f87bcf7f173a4301b5973918b4903/packages/hardhat-core/src/internal/hardhat-network/jsonrpc/client.ts#L224-L475",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1140487668/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1140559920",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1759#issuecomment-1140559920",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1759",
    "id": 1140559920,
    "node_id": "IC_kwDOGBlvNc5D-5Aw",
    "user": {
      "login": "tynes",
      "id": 6626818,
      "node_id": "MDQ6VXNlcjY2MjY4MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6626818?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tynes",
      "html_url": "https://github.com/tynes",
      "followers_url": "https://api.github.com/users/tynes/followers",
      "following_url": "https://api.github.com/users/tynes/following{/other_user}",
      "gists_url": "https://api.github.com/users/tynes/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tynes/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tynes/subscriptions",
      "organizations_url": "https://api.github.com/users/tynes/orgs",
      "repos_url": "https://api.github.com/users/tynes/repos",
      "events_url": "https://api.github.com/users/tynes/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tynes/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-30T00:32:27Z",
    "updated_at": "2022-05-30T00:32:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "Needing to implement chain specific logic for safe depth could be implemented in a more generic way if the corresponding blockhash is stored locally and always checked against the remote before using the cache. If they don't match, then flush the cache. That adds an extra http request but it can be amortized over many possible state lookups",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1140559920/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1140617361",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1759#issuecomment-1140617361",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1759",
    "id": 1140617361,
    "node_id": "IC_kwDOGBlvNc5D_HCR",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-30T02:25:46Z",
    "updated_at": "2022-05-30T02:25:46Z",
    "author_association": "COLLABORATOR",
    "body": "Ah yes good point, did not mean to imply we should use hardhat's approach of a chain-specific reorg threshold—I agree the blockhash approach is better and forgot to mention it",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1140617361/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1172618212",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1759#issuecomment-1172618212",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1759",
    "id": 1172618212,
    "node_id": "IC_kwDOGBlvNc5F5Lvk",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-01T18:39:15Z",
    "updated_at": "2022-07-01T18:39:15Z",
    "author_association": "MEMBER",
    "body": "Is this still the case? If so, is this expected/is it fixable? cc @mattsse ",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1172618212/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1624221441",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1759#issuecomment-1624221441",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1759",
    "id": 1624221441,
    "node_id": "IC_kwDOGBlvNc5gz6cB",
    "user": {
      "login": "julien-devatom",
      "id": 61523188,
      "node_id": "MDQ6VXNlcjYxNTIzMTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/61523188?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/julien-devatom",
      "html_url": "https://github.com/julien-devatom",
      "followers_url": "https://api.github.com/users/julien-devatom/followers",
      "following_url": "https://api.github.com/users/julien-devatom/following{/other_user}",
      "gists_url": "https://api.github.com/users/julien-devatom/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/julien-devatom/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/julien-devatom/subscriptions",
      "organizations_url": "https://api.github.com/users/julien-devatom/orgs",
      "repos_url": "https://api.github.com/users/julien-devatom/repos",
      "events_url": "https://api.github.com/users/julien-devatom/events{/privacy}",
      "received_events_url": "https://api.github.com/users/julien-devatom/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-07-06T19:44:44Z",
    "updated_at": "2023-07-06T19:44:44Z",
    "author_association": "NONE",
    "body": "> which would be doable but would require some work.\r\n\r\nIs it still considered to have a call cache that can be dumped into a file?\r\nMy point is when you are running 1M times the same calls every day by using `anvil`. You can only leverage the in-memory caching of the storage. So when restarting anvil, you're restarting from scratch. \r\n\r\nThat would be an awesome feature.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1624221441/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
