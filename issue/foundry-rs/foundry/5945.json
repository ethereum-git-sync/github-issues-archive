{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/5945",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5945/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5945/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5945/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/5945",
  "id": 1917960859,
  "node_id": "I_kwDOGBlvNc5yUcKb",
  "number": 5945,
  "title": "mockCall not working",
  "user": {
    "login": "linghuccc",
    "id": 59200993,
    "node_id": "MDQ6VXNlcjU5MjAwOTkz",
    "avatar_url": "https://avatars.githubusercontent.com/u/59200993?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/linghuccc",
    "html_url": "https://github.com/linghuccc",
    "followers_url": "https://api.github.com/users/linghuccc/followers",
    "following_url": "https://api.github.com/users/linghuccc/following{/other_user}",
    "gists_url": "https://api.github.com/users/linghuccc/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/linghuccc/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/linghuccc/subscriptions",
    "organizations_url": "https://api.github.com/users/linghuccc/orgs",
    "repos_url": "https://api.github.com/users/linghuccc/repos",
    "events_url": "https://api.github.com/users/linghuccc/events{/privacy}",
    "received_events_url": "https://api.github.com/users/linghuccc/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2023-09-28T14:34:36Z",
  "updated_at": "2023-09-28T17:25:28Z",
  "closed_at": "2023-09-28T17:24:57Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "Counter.sol (contract codes) :\r\n`\r\n// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.13;\r\n\r\ncontract Counter {\r\n    uint256 private _totalSupply;\r\n    uint256 private constant MAX = 100;\r\n    mapping(address => uint256) public whitelistNumber;\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function mintWhitelist() external view {\r\n        uint256 totalMinted = totalSupply();\r\n        require(totalMinted < MAX, \"All minted\");\r\n\r\n        uint256 whitelistAmount = whitelistNumber[msg.sender];\r\n        require(whitelistAmount > 0, \"Not in whitelist\");\r\n    }\r\n}\r\n`\r\n\r\nCounter.t.sol (foundry test script) :\r\n\r\n`\r\n// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.13;\r\n\r\nimport {Test, console2, stdStorage, StdStorage} from \"forge-std/Test.sol\";\r\nimport {Counter} from \"../src/Counter.sol\";\r\n\r\ncontract CounterTest is Test {\r\n    using stdStorage for StdStorage;\r\n\r\n    Counter private counter;\r\n    address private addrCounter;\r\n    uint256 private constant OVER_MAX = 3000;\r\n    address private constant USER = address(0x1);\r\n\r\n    function setUp() public {\r\n        counter = new Counter();\r\n        addrCounter = address(counter);\r\n    }\r\n\r\n    function test_mintWhitelist() public {\r\n        vm.mockCall(\r\n            address(addrCounter),\r\n            abi.encodeWithSelector(counter.totalSupply.selector),\r\n            abi.encode(OVER_MAX)\r\n        );\r\n        assertEq(counter.totalSupply(), OVER_MAX);\r\n\r\n        vm.prank(USER);\r\n        vm.expectRevert(\"All minted\");\r\n        counter.mintWhitelist();\r\n    }\r\n}\r\n`\r\n\r\nTest logs:\r\n\r\n`\r\nRunning 1 test for test/Counter.t.sol:CounterTest\r\n[FAIL. Reason: Error != expected error: Not in whitelist != All minted] test_mintWhitelist() (gas: 14297)\r\nTraces:\r\n  [154579] CounterTest::setUp() \r\n    ├─ [77929] → new Counter@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f\r\n    │   └─ ← 389 bytes of code\r\n    └─ ← ()\r\n\r\n  [14297] CounterTest::test_mintWhitelist() \r\n    ├─ [0] VM::mockCall(Counter: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f], 0x18160ddd, 0x00000000000000000000000000000000000000000000000000000000000003e8) \r\n    │   └─ ← ()\r\n    ├─ [0] Counter::totalSupply() [staticcall]\r\n    │   └─ ← 3000\r\n    ├─ [0] VM::prank(0x0000000000000000000000000000000000000001) \r\n    │   └─ ← ()\r\n    ├─ [0] VM::expectRevert(All minted) \r\n    │   └─ ← ()\r\n    ├─ [4571] Counter::mintWhitelist() [staticcall]\r\n    │   └─ ← \"Not in whitelist\"\r\n    └─ ← \"Error != expected error: Not in whitelist != All minted\"\r\n`\r\n\r\n\r\nIn my test script, mockCall is used to mock totalSupply to be more than MAX, so error \"All minted\" should be triggered. But currently it does not appear so.",
  "closed_by": {
    "login": "mds1",
    "id": 17163988,
    "node_id": "MDQ6VXNlcjE3MTYzOTg4",
    "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mds1",
    "html_url": "https://github.com/mds1",
    "followers_url": "https://api.github.com/users/mds1/followers",
    "following_url": "https://api.github.com/users/mds1/following{/other_user}",
    "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
    "organizations_url": "https://api.github.com/users/mds1/orgs",
    "repos_url": "https://api.github.com/users/mds1/repos",
    "events_url": "https://api.github.com/users/mds1/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mds1/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/5945/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5945/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1739723924",
    "html_url": "https://github.com/foundry-rs/foundry/issues/5945#issuecomment-1739723924",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5945",
    "id": 1739723924,
    "node_id": "IC_kwDOGBlvNc5nshSU",
    "user": {
      "login": "mattsse",
      "id": 19890894,
      "node_id": "MDQ6VXNlcjE5ODkwODk0",
      "avatar_url": "https://avatars.githubusercontent.com/u/19890894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mattsse",
      "html_url": "https://github.com/mattsse",
      "followers_url": "https://api.github.com/users/mattsse/followers",
      "following_url": "https://api.github.com/users/mattsse/following{/other_user}",
      "gists_url": "https://api.github.com/users/mattsse/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mattsse/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mattsse/subscriptions",
      "organizations_url": "https://api.github.com/users/mattsse/orgs",
      "repos_url": "https://api.github.com/users/mattsse/repos",
      "events_url": "https://api.github.com/users/mattsse/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mattsse/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-09-28T17:11:29Z",
    "updated_at": "2023-09-28T17:21:45Z",
    "author_association": "MEMBER",
    "body": "~~I wonder if this is a weird edge cases with prank+mock @Evalir~~",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1739723924/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1739734986",
    "html_url": "https://github.com/foundry-rs/foundry/issues/5945#issuecomment-1739734986",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5945",
    "id": 1739734986,
    "node_id": "IC_kwDOGBlvNc5nsj_K",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-09-28T17:24:57Z",
    "updated_at": "2023-09-28T17:25:28Z",
    "author_association": "COLLABORATOR",
    "body": "The issue here is that `mockCall` only works for external calls, not internal jumps to functions. When `mintWhitelist` does `uint256 totalMinted = totalSupply()` it's just a JUMP to the logic in `totalSupply()`. If you changed that line `uint256 totalMinted = this.totalSupply()` that would force it to be an external call and your test would pass.\r\n\r\nHowever, you don't want to do that, because making that line an external call is unnecessary so it adds gas and complexity just to facilitate testing, which isn't ideal.\r\n\r\nInstead, I'd recommend using the `StdStorage` library in forge-std to overwrite the value in the `_totalSupply` slot. You can use `forge inspect MyContract storage-layout --pretty` to view the storage layout of `MyContract` to know which slot number to use\r\n\r\nClosing this since there's no issue, but let me know if you have any more questions\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1739734986/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
