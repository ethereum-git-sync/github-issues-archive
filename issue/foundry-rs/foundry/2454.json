{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/2454",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2454/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2454/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2454/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/2454",
  "id": 1315743509,
  "node_id": "I_kwDOGBlvNc5ObKcV",
  "number": 2454,
  "title": "expectRevert fails when returning a struct",
  "user": {
    "login": "K-G-J",
    "id": 91970214,
    "node_id": "U_kgDOBXtapg",
    "avatar_url": "https://avatars.githubusercontent.com/u/91970214?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/K-G-J",
    "html_url": "https://github.com/K-G-J",
    "followers_url": "https://api.github.com/users/K-G-J/followers",
    "following_url": "https://api.github.com/users/K-G-J/following{/other_user}",
    "gists_url": "https://api.github.com/users/K-G-J/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/K-G-J/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/K-G-J/subscriptions",
    "organizations_url": "https://api.github.com/users/K-G-J/orgs",
    "repos_url": "https://api.github.com/users/K-G-J/repos",
    "events_url": "https://api.github.com/users/K-G-J/events{/privacy}",
    "received_events_url": "https://api.github.com/users/K-G-J/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3334394228,
      "node_id": "MDU6TGFiZWwzMzM0Mzk0MjI4",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-bug",
      "name": "T-bug",
      "color": "d73a4a",
      "default": false,
      "description": "Type: bug"
    },
    {
      "id": 3593644915,
      "node_id": "LA_kwDOGBlvNc7WMqtz",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/Cmd-forge-test",
      "name": "Cmd-forge-test",
      "color": "006B75",
      "default": false,
      "description": "Command: forge test"
    },
    {
      "id": 3703752787,
      "node_id": "LA_kwDOGBlvNc7cwshT",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/C-forge",
      "name": "C-forge",
      "color": "5319E7",
      "default": false,
      "description": "Command: forge"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": {
    "login": "onbjerg",
    "id": 8862627,
    "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/onbjerg",
    "html_url": "https://github.com/onbjerg",
    "followers_url": "https://api.github.com/users/onbjerg/followers",
    "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
    "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
    "organizations_url": "https://api.github.com/users/onbjerg/orgs",
    "repos_url": "https://api.github.com/users/onbjerg/repos",
    "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
    "received_events_url": "https://api.github.com/users/onbjerg/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/milestones/1",
    "html_url": "https://github.com/foundry-rs/foundry/milestone/1",
    "labels_url": "https://api.github.com/repos/foundry-rs/foundry/milestones/1/labels",
    "id": 8140456,
    "node_id": "MI_kwDOGBlvNc4AfDao",
    "number": 1,
    "title": "v1.0.0",
    "description": "",
    "creator": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 10,
    "closed_issues": 125,
    "state": "open",
    "created_at": "2022-06-28T08:15:32Z",
    "updated_at": "2023-05-12T14:44:03Z",
    "due_on": null,
    "closed_at": null
  },
  "comments": 10,
  "created_at": "2022-07-23T20:50:47Z",
  "updated_at": "2022-08-01T20:50:10Z",
  "closed_at": "2022-08-01T20:50:10Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "### Component\r\n\r\nForge\r\n\r\n### Have you ensured that all of these are up to date?\r\n\r\n- [X] Foundry\r\n- [X] Foundryup\r\n\r\n### What version of Foundry are you on?\r\n\r\n33dbaa5 2022-07-23T00:08:24.676044Z\r\n\r\n### What command(s) is the bug in?\r\n\r\nforge test\r\n\r\n### Operating System\r\n\r\nmacOS (Apple Silicon)\r\n\r\n### Describe the bug\r\n\r\nMy team and I are having an issue where tests expect a revert with the onlyOwner modifier reason and the logs show the call reverting with the expected reason, but the test fails. If you remove the reason in the expectRevert the test fails, but with onlyOwner modifier reason.  We debugged the test and found that the issue occurs when returning the metadata struct.  If we just return the address of the deployed vault from the deployVaultV1 function, the test passes as it is written with the expected revert reason.  When we also try to return the metadata in the function, the test fails and reverts without reason.\r\n\r\n![Failing Test Logs](https://user-images.githubusercontent.com/91970214/180622314-06f88514-1371-40e5-ad08-f62dc4d2487e.jpg)\r\n1\r\n\r\nfunction being tested from the factory contract \r\n``` solidity\r\n  function deployVaultV1(\r\n    VaultParams memory _vaultParams,\r\n    uint256 _type,\r\n    bool _enabled,\r\n    address _stakingAddress,\r\n    address _submitter,\r\n    string memory _metadataCID,\r\n    address[8] memory _swapTokenAddresses,\r\n    address _swapAddress,\r\n    uint256 _exchange\r\n  ) external onlyOwner returns (VaultMetadata memory, address) {\r\n    Vault vault = new Vault(\r\n      _vaultParams.token,\r\n      _vaultParams.yearnRegistry,\r\n      _vaultParams.contractRegistry,\r\n      _vaultParams.staking,\r\n      _vaultParams.feeStructure\r\n    );\r\n    VaultMetadata memory metadata = VaultMetadata({\r\n      vaultAddress: address(vault),\r\n      vaultType: _type,\r\n      enabled: _enabled,\r\n      stakingAddress: _stakingAddress,\r\n      submitter: _submitter,\r\n      metadataCID: _metadataCID,\r\n      swapTokenAddresses: _swapTokenAddresses,\r\n      swapAddress: _swapAddress,\r\n      exchange: _exchange\r\n    });\r\n    emit VaultV1Deployment(address(vault));\r\n    return (metadata, address(vault));\r\n  }\r\n```\r\nexpectRevert onlyOwner test (passes if deploy function modified to only return vault address, fails, and reverts without reason when the function is as written and returning the vault address and metadata struct) \r\n``` solidity\r\n  function test__deployVaultV1NotOwnerReverts() public {\r\n    vm.expectRevert(\"Only the contract owner may perform this action\");\r\n    (VaultMetadata memory metadata, address vault) = vaultsV1Factory.deployVaultV1(\r\n      vaultParams,\r\n      1,\r\n      true,\r\n      address(0x1111),\r\n      vaultsV1ControllerOwner,\r\n      \"someCID\",\r\n      swapTokenAddresses,\r\n      address(0x2222),\r\n      1\r\n    );\r\n    assertEq(vault, address(0), \"vault deployment failed\");\r\n    assertEq(metadata.vaultAddress, address(0), \"metadata not constructed\");\r\n  }\r\n```\r\n[Factory contract](https://github.com/popcorndao/sweet-caramel/blob/feature/vault-registry/packages/hardhat/contracts/core/defi/vault/VaultsV1Factory.sol)\r\n[Factory test contract](https://github.com/popcorndao/sweet-caramel/blob/feature/vault-registry/packages/hardhat/test/forge/fork/VaultsV1Factory.t.sol)",
  "closed_by": {
    "login": "onbjerg",
    "id": 8862627,
    "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/onbjerg",
    "html_url": "https://github.com/onbjerg",
    "followers_url": "https://api.github.com/users/onbjerg/followers",
    "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
    "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
    "organizations_url": "https://api.github.com/users/onbjerg/orgs",
    "repos_url": "https://api.github.com/users/onbjerg/repos",
    "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
    "received_events_url": "https://api.github.com/users/onbjerg/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/2454/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2454/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1193377532",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2454#issuecomment-1193377532",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2454",
    "id": 1193377532,
    "node_id": "IC_kwDOGBlvNc5HIX78",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-24T19:14:36Z",
    "updated_at": "2022-07-24T19:16:03Z",
    "author_association": "MEMBER",
    "body": "This is because `vm.expectRevert` changes the status of the call from 0 (revert) to 1 (success) and returns dummy data. You cannot read the data returned from the call, because it is gibberish, so the rest of your test will be incorrect. We don't return a mock of your internal data structures, just a tiny bit of data to make Solidity happy. Does it work if you don't assign the return value to anything?\r\n\r\nEdit: Triaged the issue, but if your test works w/o assigning the return data then I will close since this is expected (as mentioned before, the return data is gibberish, so Solidity won't be able to interpret it in a meaningful manner)",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1193377532/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1193381588",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2454#issuecomment-1193381588",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2454",
    "id": 1193381588,
    "node_id": "IC_kwDOGBlvNc5HIY7U",
    "user": {
      "login": "K-G-J",
      "id": 91970214,
      "node_id": "U_kgDOBXtapg",
      "avatar_url": "https://avatars.githubusercontent.com/u/91970214?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/K-G-J",
      "html_url": "https://github.com/K-G-J",
      "followers_url": "https://api.github.com/users/K-G-J/followers",
      "following_url": "https://api.github.com/users/K-G-J/following{/other_user}",
      "gists_url": "https://api.github.com/users/K-G-J/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/K-G-J/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/K-G-J/subscriptions",
      "organizations_url": "https://api.github.com/users/K-G-J/orgs",
      "repos_url": "https://api.github.com/users/K-G-J/repos",
      "events_url": "https://api.github.com/users/K-G-J/events{/privacy}",
      "received_events_url": "https://api.github.com/users/K-G-J/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-24T19:39:22Z",
    "updated_at": "2022-07-24T19:39:42Z",
    "author_association": "NONE",
    "body": "Unfortunately, I rewrote the test not to assign data or read the return variable, and the test still fails and reverts without reason\r\nupdated test\r\n``` solidity\r\n  function test__deployVaultV1NotOwnerReverts() public {\r\n    vm.expectRevert(\"Only the contract owner may perform this action\");\r\n    vaultsV1Factory.deployVaultV1(\r\n      vaultParams,\r\n      1,\r\n      true,\r\n      address(0x1111),\r\n      vaultsV1ControllerOwner,\r\n      \"someCID\",\r\n      swapTokenAddresses,\r\n      address(0x2222),\r\n      1\r\n    );\r\n  }\r\n```\r\n<img width=\"1237\" alt=\"Screen Shot 2022-07-24 at 3 38 18 PM\" src=\"https://user-images.githubusercontent.com/91970214/180663113-36273d3d-5ba2-4640-8b4f-b456362ee09e.png\">\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1193381588/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1193382239",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2454#issuecomment-1193382239",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2454",
    "id": 1193382239,
    "node_id": "IC_kwDOGBlvNc5HIZFf",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-24T19:43:18Z",
    "updated_at": "2022-07-24T19:43:31Z",
    "author_association": "MEMBER",
    "body": "Interesting. I guess it's because the return data is not long enough for what Solidity expects... Or maybe it requires a very specific format?\r\n\r\ncc @brockelmore Any thoughts/context on the length you chose originally for `expectRevert` or how to resolve this?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1193382239/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1193632196",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2454#issuecomment-1193632196",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2454",
    "id": 1193632196,
    "node_id": "IC_kwDOGBlvNc5HJWHE",
    "user": {
      "login": "brockelmore",
      "id": 31553173,
      "node_id": "MDQ6VXNlcjMxNTUzMTcz",
      "avatar_url": "https://avatars.githubusercontent.com/u/31553173?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brockelmore",
      "html_url": "https://github.com/brockelmore",
      "followers_url": "https://api.github.com/users/brockelmore/followers",
      "following_url": "https://api.github.com/users/brockelmore/following{/other_user}",
      "gists_url": "https://api.github.com/users/brockelmore/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brockelmore/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brockelmore/subscriptions",
      "organizations_url": "https://api.github.com/users/brockelmore/orgs",
      "repos_url": "https://api.github.com/users/brockelmore/repos",
      "events_url": "https://api.github.com/users/brockelmore/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brockelmore/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-25T06:23:35Z",
    "updated_at": "2022-07-25T06:30:23Z",
    "author_association": "MEMBER",
    "body": "very likely given the size of this return object, we aren't allocating enough memory in the return data. I believe we maxed it at 10 words (320 bytes). I was hoping i'd eventually come up with a better way to do this (and may still exist?), but i haven't. we can either boost data size or add an overload for this specific case\n\nedit: technically... we could peek at the abi inside forge at runtime and create an accurately sized byte array",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1193632196/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1194274171",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2454#issuecomment-1194274171",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2454",
    "id": 1194274171,
    "node_id": "IC_kwDOGBlvNc5HLy17",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-25T15:57:10Z",
    "updated_at": "2022-07-25T15:57:10Z",
    "author_association": "MEMBER",
    "body": "That would require us to continually identify contracts which is something we tried to avoid because of the performance penalty. Unsure what the best path forward is... We can either boost the returned data in general or we could add an override or something that sets the size of the returned data, although that might not be super nice UX (have to figure out the size yourself)",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1194274171/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1194754640",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2454#issuecomment-1194754640",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2454",
    "id": 1194754640,
    "node_id": "IC_kwDOGBlvNc5HNoJQ",
    "user": {
      "login": "K-G-J",
      "id": 91970214,
      "node_id": "U_kgDOBXtapg",
      "avatar_url": "https://avatars.githubusercontent.com/u/91970214?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/K-G-J",
      "html_url": "https://github.com/K-G-J",
      "followers_url": "https://api.github.com/users/K-G-J/followers",
      "following_url": "https://api.github.com/users/K-G-J/following{/other_user}",
      "gists_url": "https://api.github.com/users/K-G-J/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/K-G-J/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/K-G-J/subscriptions",
      "organizations_url": "https://api.github.com/users/K-G-J/orgs",
      "repos_url": "https://api.github.com/users/K-G-J/repos",
      "events_url": "https://api.github.com/users/K-G-J/events{/privacy}",
      "received_events_url": "https://api.github.com/users/K-G-J/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-25T23:15:09Z",
    "updated_at": "2022-07-25T23:15:09Z",
    "author_association": "NONE",
    "body": "Is there a way we can write an override for our specific test?  Would be happy to help you all with troubleshooting this.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1194754640/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1194785119",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2454#issuecomment-1194785119",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2454",
    "id": 1194785119,
    "node_id": "IC_kwDOGBlvNc5HNvlf",
    "user": {
      "login": "brockelmore",
      "id": 31553173,
      "node_id": "MDQ6VXNlcjMxNTUzMTcz",
      "avatar_url": "https://avatars.githubusercontent.com/u/31553173?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brockelmore",
      "html_url": "https://github.com/brockelmore",
      "followers_url": "https://api.github.com/users/brockelmore/followers",
      "following_url": "https://api.github.com/users/brockelmore/following{/other_user}",
      "gists_url": "https://api.github.com/users/brockelmore/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brockelmore/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brockelmore/subscriptions",
      "organizations_url": "https://api.github.com/users/brockelmore/orgs",
      "repos_url": "https://api.github.com/users/brockelmore/repos",
      "events_url": "https://api.github.com/users/brockelmore/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brockelmore/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-25T23:54:27Z",
    "updated_at": "2022-07-25T23:54:27Z",
    "author_association": "MEMBER",
    "body": "@K-G-J, currently the best work around is to just use `testFail` semantics unfortunately. Or you can do a low level call and abi.decode the result.\r\n\r\n@onbjerg I have asked the solc guys to add `type(a).size` (for unrelated reasons) which would report the size of an object but they haven't done so :/. that would be ideal. I will ask them if they are open to it again, otherwise I think we just add an overload with extra parameter for size and boost default size (issue with boosting size is potentially change in gas snapshots if a contract `returndatacopy`s the whole object)? ",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1194785119/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1194793276",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2454#issuecomment-1194793276",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2454",
    "id": 1194793276,
    "node_id": "IC_kwDOGBlvNc5HNxk8",
    "user": {
      "login": "brockelmore",
      "id": 31553173,
      "node_id": "MDQ6VXNlcjMxNTUzMTcz",
      "avatar_url": "https://avatars.githubusercontent.com/u/31553173?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brockelmore",
      "html_url": "https://github.com/brockelmore",
      "followers_url": "https://api.github.com/users/brockelmore/followers",
      "following_url": "https://api.github.com/users/brockelmore/following{/other_user}",
      "gists_url": "https://api.github.com/users/brockelmore/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brockelmore/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brockelmore/subscriptions",
      "organizations_url": "https://api.github.com/users/brockelmore/orgs",
      "repos_url": "https://api.github.com/users/brockelmore/repos",
      "events_url": "https://api.github.com/users/brockelmore/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brockelmore/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-26T00:00:33Z",
    "updated_at": "2022-07-26T00:00:56Z",
    "author_association": "MEMBER",
    "body": "@K-G-J here are two solutions:\r\n\r\n```solidity\r\n  // testFail version\r\n  function testFail__deployVaultV1NotOwnerReverts() public {\r\n    (VaultMetadata memory metadata, address vault) = vaultsV1Factory.deployVaultV1(\r\n      vaultParams,\r\n      1,\r\n      true,\r\n      address(0x1111),\r\n      vaultsV1ControllerOwner,\r\n      \"someCID\",\r\n      swapTokenAddresses,\r\n      address(0x2222),\r\n      1\r\n    );\r\n  }\r\n  \r\n  function test__deployVaultV1NotOwnerReverts() public {\r\n    (bool success, bytes memory returndata) = address(vaultsV1Factory).call(\r\n        abi.encodePacked(vaultsV1Factory.deployVaultV1.signature, abi.encode(\r\n          vaultParams,\r\n          1,\r\n          true,\r\n          address(0x1111),\r\n          vaultsV1ControllerOwner,\r\n          \"someCID\",\r\n          swapTokenAddresses,\r\n          address(0x2222),\r\n          1\r\n        ))\r\n    );\r\n    string memory returnString = abi.decode(returndata, (string));\r\n    assertTrue(!success);\r\n    assertEq(returnString, \"Only the contract owner may perform this action\");\r\n  }\r\n```\r\n\r\nthere may be some slight inaccuracies with the above but i think you can take it from here  ",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1194793276/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1195964874",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2454#issuecomment-1195964874",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2454",
    "id": 1195964874,
    "node_id": "IC_kwDOGBlvNc5HSPnK",
    "user": {
      "login": "K-G-J",
      "id": 91970214,
      "node_id": "U_kgDOBXtapg",
      "avatar_url": "https://avatars.githubusercontent.com/u/91970214?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/K-G-J",
      "html_url": "https://github.com/K-G-J",
      "followers_url": "https://api.github.com/users/K-G-J/followers",
      "following_url": "https://api.github.com/users/K-G-J/following{/other_user}",
      "gists_url": "https://api.github.com/users/K-G-J/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/K-G-J/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/K-G-J/subscriptions",
      "organizations_url": "https://api.github.com/users/K-G-J/orgs",
      "repos_url": "https://api.github.com/users/K-G-J/repos",
      "events_url": "https://api.github.com/users/K-G-J/events{/privacy}",
      "received_events_url": "https://api.github.com/users/K-G-J/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-26T20:47:30Z",
    "updated_at": "2022-07-26T20:47:30Z",
    "author_association": "NONE",
    "body": "thank you! I will try out these solutions.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1195964874/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1201033216",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2454#issuecomment-1201033216",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2454",
    "id": 1201033216,
    "node_id": "IC_kwDOGBlvNc5HllAA",
    "user": {
      "login": "0xPhaze",
      "id": 103113487,
      "node_id": "U_kgDOBiVjDw",
      "avatar_url": "https://avatars.githubusercontent.com/u/103113487?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/0xPhaze",
      "html_url": "https://github.com/0xPhaze",
      "followers_url": "https://api.github.com/users/0xPhaze/followers",
      "following_url": "https://api.github.com/users/0xPhaze/following{/other_user}",
      "gists_url": "https://api.github.com/users/0xPhaze/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/0xPhaze/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/0xPhaze/subscriptions",
      "organizations_url": "https://api.github.com/users/0xPhaze/orgs",
      "repos_url": "https://api.github.com/users/0xPhaze/repos",
      "events_url": "https://api.github.com/users/0xPhaze/events{/privacy}",
      "received_events_url": "https://api.github.com/users/0xPhaze/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-01T10:46:40Z",
    "updated_at": "2022-08-01T10:49:58Z",
    "author_association": "NONE",
    "body": "I had run into something similar. I was trying to catch the revert reason from deploying a proxy with a factory. After stepping through with the debugger, I realized that the correct reason was being reverted, but it was never available in the returndata after the create call had run. I expected this was some normal solidity shenanigans that it was impossible to bubble up the revert reason of a create call.\r\n@brockelmore did you figure out whether this was foundry related?\r\n\r\nEdit: after going through your comments I think my problem might have been something else.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1201033216/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
