{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/4754",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4754/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4754/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4754/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/4754",
  "id": 1671046329,
  "node_id": "I_kwDOGBlvNc5jmiS5",
  "number": 4754,
  "title": "Failing invariant sequence is not printed",
  "user": {
    "login": "hasanza",
    "id": 49759922,
    "node_id": "MDQ6VXNlcjQ5NzU5OTIy",
    "avatar_url": "https://avatars.githubusercontent.com/u/49759922?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hasanza",
    "html_url": "https://github.com/hasanza",
    "followers_url": "https://api.github.com/users/hasanza/followers",
    "following_url": "https://api.github.com/users/hasanza/following{/other_user}",
    "gists_url": "https://api.github.com/users/hasanza/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hasanza/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hasanza/subscriptions",
    "organizations_url": "https://api.github.com/users/hasanza/orgs",
    "repos_url": "https://api.github.com/users/hasanza/repos",
    "events_url": "https://api.github.com/users/hasanza/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hasanza/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3334394228,
      "node_id": "MDU6TGFiZWwzMzM0Mzk0MjI4",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-bug",
      "name": "T-bug",
      "color": "d73a4a",
      "default": false,
      "description": "Type: bug"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 9,
  "created_at": "2023-04-17T12:18:34Z",
  "updated_at": "2023-04-19T17:03:54Z",
  "closed_at": "2023-04-18T11:55:19Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "### Component\n\nForge\n\n### Have you ensured that all of these are up to date?\n\n- [ ] Foundry\n- [X] Foundryup\n\n### What version of Foundry are you on?\n\nforge 0.2.0 (04ce078 2023-04-17T00:04:57.209269000Z)\n\n### What command(s) is the bug in?\n\nforge test \n\n### Operating System\n\nmacOS (Apple Silicon)\n\n### Describe the bug\n\nIssue: when I run the invariant test, it does not print the [Sequence] of the failed invariant test. \r\n\r\nThis is the output I get:\r\n![image](https://user-images.githubusercontent.com/49759922/232480783-910b44fe-5400-44fc-af20-6720cbc52276.png)\r\n\r\nIt should also print the `[Sequence]` like in the example below:\r\n![image](https://user-images.githubusercontent.com/49759922/232480870-f5a21389-0ab7-4553-93fb-80f54429b556.png)\r\n\r\nAs a result, I am not able to know which call sequence and function args broke the invariant.\r\n\r\nI have updated the binaries, tried different configs etc. but nothing is working. I think it is a small and easy to fix issue but I have not been able to find help on my search, which is why as a last resort, I am posting here. Currently, my config file is empty (default).\r\n\r\nRef: \r\n- The example snippet is from the guide on invariant testing: https://mirror.xyz/horsefacts.eth/Jex2YVaO65dda6zEyfM_-DXlXhOWCAoSpOx5PLocYgw",
  "closed_by": {
    "login": "mds1",
    "id": 17163988,
    "node_id": "MDQ6VXNlcjE3MTYzOTg4",
    "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mds1",
    "html_url": "https://github.com/mds1",
    "followers_url": "https://api.github.com/users/mds1/followers",
    "following_url": "https://api.github.com/users/mds1/following{/other_user}",
    "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
    "organizations_url": "https://api.github.com/users/mds1/orgs",
    "repos_url": "https://api.github.com/users/mds1/repos",
    "events_url": "https://api.github.com/users/mds1/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mds1/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/4754/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4754/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1512952559",
    "html_url": "https://github.com/foundry-rs/foundry/issues/4754#issuecomment-1512952559",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4754",
    "id": 1512952559,
    "node_id": "IC_kwDOGBlvNc5aLdLv",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-04-18T11:55:18Z",
    "updated_at": "2023-04-18T11:55:50Z",
    "author_association": "COLLABORATOR",
    "body": "If no sequence is printed, it means the invariant failed before any calls by the fuzzer were executed. The invariant is checked at the very beginning (immediately after setup runs, before any fuzzer calls are made), so if it fails at that point there is no sequence to print\r\n\r\nIn your screenshot, it lists the number of calls as zero which confirms this",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1512952559/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1512977035",
    "html_url": "https://github.com/foundry-rs/foundry/issues/4754#issuecomment-1512977035",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4754",
    "id": 1512977035,
    "node_id": "IC_kwDOGBlvNc5aLjKL",
    "user": {
      "login": "hasanza",
      "id": 49759922,
      "node_id": "MDQ6VXNlcjQ5NzU5OTIy",
      "avatar_url": "https://avatars.githubusercontent.com/u/49759922?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hasanza",
      "html_url": "https://github.com/hasanza",
      "followers_url": "https://api.github.com/users/hasanza/followers",
      "following_url": "https://api.github.com/users/hasanza/following{/other_user}",
      "gists_url": "https://api.github.com/users/hasanza/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hasanza/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hasanza/subscriptions",
      "organizations_url": "https://api.github.com/users/hasanza/orgs",
      "repos_url": "https://api.github.com/users/hasanza/repos",
      "events_url": "https://api.github.com/users/hasanza/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hasanza/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-04-18T12:08:46Z",
    "updated_at": "2023-04-18T12:08:46Z",
    "author_association": "NONE",
    "body": "Ah I see. Thanks for the quick response!\r\n\r\nIf I may, I want to confirm one more thing from you:\r\n\r\nIs it possible to use `vm.prank` to impersonate a mainnet account in a fork test? I am trying to use the existing USDT balance of a USDT holder using vm.prank in a fork test but for some reason, any non-view call to the USDT contract fails. Is this the correct way to impersonate? Any help with this is highly appreciated as I cannot find a definitive answer to this.\r\n\r\nThe test I am running:\r\n```\r\n    function test_approve() public {\r\n        address actualUser = address(0x0162Cd2BA40E23378Bf0FD41f919E1be075f025F);\r\n        vm.selectFork(mainnetFork);\r\n        vm.prank(actualUser);\r\n        // This reverts. \r\n        IERC20(USDTAddr).approve(address(instance), 50);\r\n    }\r\n```\r\n  \r\n  The output :\r\n    \r\n![image](https://user-images.githubusercontent.com/49759922/232772334-fecf1d9e-e21b-4a36-99bc-16bd80d4b0cc.png)\r\n\r\n\r\n    ",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1512977035/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1512990009",
    "html_url": "https://github.com/foundry-rs/foundry/issues/4754#issuecomment-1512990009",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4754",
    "id": 1512990009,
    "node_id": "IC_kwDOGBlvNc5aLmU5",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-04-18T12:13:39Z",
    "updated_at": "2023-04-18T12:13:39Z",
    "author_association": "COLLABORATOR",
    "body": "This revert is likely due to an approval quirk in USDT—there's a [race condition](https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729) with ERC-20 approvals, that in practice doesn't matter because most people approve contracts, not individuals. But USDT tries to mitigate this, so if you try to set the allowance to 50, and the existing allowance is already nonzero, UDST will revert. You must first set the allowance to zero, then set it to the new allowance. You can check out the USDT contract's approve method to see specifics.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1512990009/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1513038836",
    "html_url": "https://github.com/foundry-rs/foundry/issues/4754#issuecomment-1513038836",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4754",
    "id": 1513038836,
    "node_id": "IC_kwDOGBlvNc5aLyP0",
    "user": {
      "login": "hasanza",
      "id": 49759922,
      "node_id": "MDQ6VXNlcjQ5NzU5OTIy",
      "avatar_url": "https://avatars.githubusercontent.com/u/49759922?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hasanza",
      "html_url": "https://github.com/hasanza",
      "followers_url": "https://api.github.com/users/hasanza/followers",
      "following_url": "https://api.github.com/users/hasanza/following{/other_user}",
      "gists_url": "https://api.github.com/users/hasanza/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hasanza/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hasanza/subscriptions",
      "organizations_url": "https://api.github.com/users/hasanza/orgs",
      "repos_url": "https://api.github.com/users/hasanza/repos",
      "events_url": "https://api.github.com/users/hasanza/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hasanza/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-04-18T12:38:12Z",
    "updated_at": "2023-04-18T12:39:24Z",
    "author_association": "NONE",
    "body": "> This revert is likely due to an approval quirk in USDT—there's a [race condition](https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729) with ERC-20 approvals, that in practice doesn't matter because most people approve contracts, not individuals. But USDT tries to mitigate this, so if you try to set the allowance to 50, and the existing allowance is already nonzero, UDST will revert. You must first set the allowance to zero, then set it to the new allowance. You can check out the USDT contract's approve method to see specifics.\r\n\r\nInteresting, will def check it out. But in this case, even `transfer` fails in the same manner. There is a revert after the Transfer event emission.\r\n\r\nAlso, in this case, the impersonated user is approving a contract (`instance`), and the allowance is 0 to begin with.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1513038836/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1513043960",
    "html_url": "https://github.com/foundry-rs/foundry/issues/4754#issuecomment-1513043960",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4754",
    "id": 1513043960,
    "node_id": "IC_kwDOGBlvNc5aLzf4",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-04-18T12:39:45Z",
    "updated_at": "2023-04-18T12:39:45Z",
    "author_association": "COLLABORATOR",
    "body": "Ah yes, I see now in your screenshot the approve call succeeded, and the revert is after. Hard to say without a reproduction case, if you can share a repo to reproduce I can take a look tomorrow",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1513043960/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1513116583",
    "html_url": "https://github.com/foundry-rs/foundry/issues/4754#issuecomment-1513116583",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4754",
    "id": 1513116583,
    "node_id": "IC_kwDOGBlvNc5aMFOn",
    "user": {
      "login": "hasanza",
      "id": 49759922,
      "node_id": "MDQ6VXNlcjQ5NzU5OTIy",
      "avatar_url": "https://avatars.githubusercontent.com/u/49759922?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hasanza",
      "html_url": "https://github.com/hasanza",
      "followers_url": "https://api.github.com/users/hasanza/followers",
      "following_url": "https://api.github.com/users/hasanza/following{/other_user}",
      "gists_url": "https://api.github.com/users/hasanza/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hasanza/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hasanza/subscriptions",
      "organizations_url": "https://api.github.com/users/hasanza/orgs",
      "repos_url": "https://api.github.com/users/hasanza/repos",
      "events_url": "https://api.github.com/users/hasanza/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hasanza/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-04-18T13:12:36Z",
    "updated_at": "2023-04-18T13:12:36Z",
    "author_association": "NONE",
    "body": "That is might kind of you!\r\n\r\nI have created this public repo with the relevant files: https://github.com/hasanza/forking",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1513116583/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1514079962",
    "html_url": "https://github.com/foundry-rs/foundry/issues/4754#issuecomment-1514079962",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4754",
    "id": 1514079962,
    "node_id": "IC_kwDOGBlvNc5aPwba",
    "user": {
      "login": "hasanza",
      "id": 49759922,
      "node_id": "MDQ6VXNlcjQ5NzU5OTIy",
      "avatar_url": "https://avatars.githubusercontent.com/u/49759922?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hasanza",
      "html_url": "https://github.com/hasanza",
      "followers_url": "https://api.github.com/users/hasanza/followers",
      "following_url": "https://api.github.com/users/hasanza/following{/other_user}",
      "gists_url": "https://api.github.com/users/hasanza/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hasanza/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hasanza/subscriptions",
      "organizations_url": "https://api.github.com/users/hasanza/orgs",
      "repos_url": "https://api.github.com/users/hasanza/repos",
      "events_url": "https://api.github.com/users/hasanza/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hasanza/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-04-19T03:26:03Z",
    "updated_at": "2023-04-19T03:26:03Z",
    "author_association": "NONE",
    "body": "> race condition\r\n\r\nI put your suggestion to test by using USDC, and approve works! \r\nIt is definitely some quirk with the write functions (approve, transfer) of USDT. Without having looked at USDT code, I wonder what the issue is...",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1514079962/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1514699030",
    "html_url": "https://github.com/foundry-rs/foundry/issues/4754#issuecomment-1514699030",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4754",
    "id": 1514699030,
    "node_id": "IC_kwDOGBlvNc5aSHkW",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-04-19T13:03:22Z",
    "updated_at": "2023-04-19T13:03:22Z",
    "author_association": "COLLABORATOR",
    "body": "One issue us that you're deploying the instance in a local test environment in `setUp`, then switching to a fork environment in the `test_approve` test. So the contract you deployed does not exist. Modify `test_approve` with two console.logs like this:\r\n\r\n```solidity\r\nfunction test_approve() public {\r\n    address actualUser = address(0x0162Cd2BA40E23378Bf0FD41f919E1be075f025F);\r\n    console2.log(address(instance).code.length);\r\n    vm.selectFork(mainnetFork);\r\n    console2.log(address(instance).code.length);\r\n    vm.prank(actualUser);\r\n    // Allowance to instance\r\n    // This reverts. But calls to `view` functions succeed\r\n    IERC20(USDTAddr).approve(address(instance), 50);\r\n}\r\n```\r\n\r\nAnd you'll see\r\n\r\n```\r\nLogs:\r\n  3377\r\n  0\r\n```\r\n\r\nIn other words, the contract exists because it has non-zero length code, but as soon as you switch to the fork, the contract doesn't exist on that new chain.\r\n\r\nI'd suggest removing `selectFork` usage in your test and instead just using `createSelectFork` in the `setUp` method.\r\n\r\nHowever I don't think that's the actual cause of your issue, since that shouldn't affect the approve call.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1514699030/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1515077497",
    "html_url": "https://github.com/foundry-rs/foundry/issues/4754#issuecomment-1515077497",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4754",
    "id": 1515077497,
    "node_id": "IC_kwDOGBlvNc5aTj95",
    "user": {
      "login": "hasanza",
      "id": 49759922,
      "node_id": "MDQ6VXNlcjQ5NzU5OTIy",
      "avatar_url": "https://avatars.githubusercontent.com/u/49759922?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hasanza",
      "html_url": "https://github.com/hasanza",
      "followers_url": "https://api.github.com/users/hasanza/followers",
      "following_url": "https://api.github.com/users/hasanza/following{/other_user}",
      "gists_url": "https://api.github.com/users/hasanza/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hasanza/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hasanza/subscriptions",
      "organizations_url": "https://api.github.com/users/hasanza/orgs",
      "repos_url": "https://api.github.com/users/hasanza/repos",
      "events_url": "https://api.github.com/users/hasanza/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hasanza/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-04-19T17:03:53Z",
    "updated_at": "2023-04-19T17:03:53Z",
    "author_association": "NONE",
    "body": "> One issue us that you're deploying the instance in a local test environment in `setUp`, then switching to a fork environment in the `test_approve` test. So the contract you deployed does not exist. Modify `test_approve` with two console.logs like this:\r\n> \r\n> ```solidity\r\n> function test_approve() public {\r\n>     address actualUser = address(0x0162Cd2BA40E23378Bf0FD41f919E1be075f025F);\r\n>     console2.log(address(instance).code.length);\r\n>     vm.selectFork(mainnetFork);\r\n>     console2.log(address(instance).code.length);\r\n>     vm.prank(actualUser);\r\n>     // Allowance to instance\r\n>     // This reverts. But calls to `view` functions succeed\r\n>     IERC20(USDTAddr).approve(address(instance), 50);\r\n> }\r\n> ```\r\n> \r\n> And you'll see\r\n> \r\n> ```\r\n> Logs:\r\n>   3377\r\n>   0\r\n> ```\r\n> \r\n> In other words, the contract exists because it has non-zero length code, but as soon as you switch to the fork, the contract doesn't exist on that new chain.\r\n> \r\n> I'd suggest removing `selectFork` usage in your test and instead just using `createSelectFork` in the `setUp` method.\r\n> \r\n> However I don't think that's the actual cause of your issue, since that shouldn't affect the approve call.\r\n\r\nYou are correct; I also realised this and fixed it. We have to select the fork in the setup function as well. The currently working test is:\r\n\r\n```\r\n// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.0 <0.9.0;\r\n\r\nimport \"forge-std/Test.sol\";\r\nimport \"../src/MyContract.sol\";\r\n\r\ncontract DepositTest is Test {\r\n    address public DAIAddr;\r\n    uint256 mainnetFork;\r\n    ERC20 DAI;\r\n    address user;\r\n    MyContract instance;\r\n\r\n    function setUp() public {\r\n        // Create fork\r\n        mainnetFork = vm.createFork(vm.envString(\"MAINNET_RPC_URL\"));\r\n        // Select the fork to the next setup steps on\r\n        vm.selectFork(mainnetFork);\r\n        // User with a lot of DAI\r\n        user = address(0x075e72a5eDf65F0A5f44699c7654C1a76941Ddc8);\r\n        // The DAI contract address\r\n        DAIAddr = address(0x6B175474E89094C44Da98b954EedeAC495271d0F);\r\n        // Compose the DAI contract instance using ERC20 interface\r\n        DAI = ERC20(DAIAddr);\r\n        // Instantiate SecureMe\r\n        instance = new MyContract(100 ether, DAI);\r\n        // Boostrap test contract w/ ETH\r\n        deal(address(this), 100 ether);\r\n        // Mint attacker 50_000 DAI\r\n        deal(user, 100 ether);\r\n    }\r\n\r\n    function test_deposit() public {\r\n        // Select the fork to run this test on\r\n        vm.selectFork(mainnetFork);\r\n        // Change msg.sender to `user` for all subsequent calls\r\n        vm.startPrank(user);\r\n        // Approve instance to transfer 500 DAI from user\r\n        DAI.approve(address(instance), 500 ether);\r\n        // Cache the allowance amount\r\n        uint256 allowance = DAI.allowance(user, address(instance));\r\n        // call depositDAI\r\n        instance.depositDAI(500 ether);\r\n        // Assert that minted tokens are equal to approved and deposited DAI\r\n        assertEq(allowance, instance.balanceOf(user));\r\n    }\r\n}\r\n\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1515077497/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 1,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
