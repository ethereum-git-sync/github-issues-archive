{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/3062",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3062/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3062/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3062/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/3062",
  "id": 1360214176,
  "node_id": "I_kwDOGBlvNc5REzig",
  "number": 3062,
  "title": "feat (proposal): UX for granularity over fuzz, invariant, and solidity sections",
  "user": {
    "login": "mds1",
    "id": 17163988,
    "node_id": "MDQ6VXNlcjE3MTYzOTg4",
    "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mds1",
    "html_url": "https://github.com/mds1",
    "followers_url": "https://api.github.com/users/mds1/followers",
    "following_url": "https://api.github.com/users/mds1/following{/other_user}",
    "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
    "organizations_url": "https://api.github.com/users/mds1/orgs",
    "repos_url": "https://api.github.com/users/mds1/repos",
    "events_url": "https://api.github.com/users/mds1/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mds1/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3394554570,
      "node_id": "LA_kwDOGBlvNc7KVMrK",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/A-fuzzing",
      "name": "A-fuzzing",
      "color": "FBCA04",
      "default": false,
      "description": "Area: fuzzing"
    },
    {
      "id": 3593644820,
      "node_id": "LA_kwDOGBlvNc7WMqsU",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-feature",
      "name": "T-feature",
      "color": "BFD4F2",
      "default": false,
      "description": "Type: feature"
    },
    {
      "id": 3703752787,
      "node_id": "LA_kwDOGBlvNc7cwshT",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/C-forge",
      "name": "C-forge",
      "color": "5319E7",
      "default": false,
      "description": "Command: forge"
    },
    {
      "id": 4450020906,
      "node_id": "LA_kwDOGBlvNc8AAAABCT3uKg",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/A-config",
      "name": "A-config",
      "color": "FBCA04",
      "default": false,
      "description": "Area: config"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 19,
  "created_at": "2022-09-02T13:41:37Z",
  "updated_at": "2023-05-15T16:47:35Z",
  "closed_at": "2023-05-15T16:47:35Z",
  "author_association": "COLLABORATOR",
  "active_lock_reason": null,
  "body": "### Component\n\nForge\n\n### Describe the feature you would like\n\nSupersedes https://github.com/foundry-rs/foundry/issues/744\r\n\r\nFor the `[fuzz]` and `[invariant]` sections, you must define configuration per-profile and it applies to all tests. Some tests need more/less fuzzing than others, so it would be great to configure this on a per-test basis. Below is a proposal for how to structure the `foundry.toml` to allow this.\r\n\r\nSimilarly, it would be great to allow different solc settings per contract (e.g. 1 optimizer run for `MyBigContract` but 10M optimizer runs for all others). This proposal would enable that as well.\r\n\r\n```toml\r\n# OVERVIEW\r\n# Each fuzz/invariant section can have subprofiles. In these subprofiles you\r\n# can define all the standard fuzz/invariant options, but additionally the same\r\n# matching flags that `forge test` has are supported. This means good naming\r\n# conventions are important to make targeting your tests easy.\r\n\r\n# EXAMPLE\r\n# Here is an example using fuzz configs to do the following:\r\n#\r\n# Default profile:\r\n#   - 250 fuzz runs by default\r\n#   - `low` tests execute 50 fuzz runs\r\n#   - `high` tests execute 500 fuzz runs\r\n# CI profile:\r\n#   - 1000 fuzz runs by default\r\n#   - `low` tests execute 500 fuzz runs\r\n#   - `high` tests execute 5000 fuzz runs with 100_000 max rejections\r\n#\r\n# In this example, we only use the match-test flag, but any supported match\r\n# flags can be used.\r\n\r\n# First we define our default profile\r\n[profile.default.fuzz]\r\nruns = 250 # 250 runs by default for the default profile\r\n\r\n[profile.default.fuzz.low]\r\n# Any test that matches the provided regex uses this subprofile\r\nmatch-test = \"testFuzzLow.*\"\r\nruns = 50\r\n\r\n[profile.default.fuzz.high]\r\nmatch-test = \"testFuzzHigh.*\"\r\nruns = 500\r\n\r\n# Now we define our CI profile\r\n[profile.ci.fuzz]\r\nruns = 1000\r\n\r\n[profile.ci.fuzz.low]\r\nmatch-test = \"testFuzzLow.*\"\r\nruns = 500\r\n\r\n[profile.ci.fuzz.high]\r\nmatch-test = \"testFuzzHigh.*\"\r\nruns = 5000\r\nmax-global-rejects = 100_000\r\n\r\n# EXTENSIONS\r\n# You can imagine this extending to e.g. solidity configurations too when a\r\n# [solidity] table is added, such as shown below:\r\n\r\n# We define a lite mode to keep the optimizer off to speed up dev/testing.\r\n# Since there's no `lite` fuzz config, it uses the default profile's settings.\r\n[profile.lite.solidity]\r\noptimizer = false\r\n\r\n# In our default solidity profile we apply 10M optimizer runs.\r\n[profile.default.solidity]\r\noptimizer = true\r\noptimizer-runs = 10_000_000\r\n\r\n# But we have one really big contract, so we use 1 optimizer run to minimize\r\n# its size.\r\n[profile.default.solidity.size]\r\noptimizer = true\r\noptimizer-runs = 1\r\nmatch-contract = \"MyBigContract\"\r\n```\n\n### Additional context\n\n_No response_",
  "closed_by": {
    "login": "mds1",
    "id": 17163988,
    "node_id": "MDQ6VXNlcjE3MTYzOTg4",
    "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mds1",
    "html_url": "https://github.com/mds1",
    "followers_url": "https://api.github.com/users/mds1/followers",
    "following_url": "https://api.github.com/users/mds1/following{/other_user}",
    "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
    "organizations_url": "https://api.github.com/users/mds1/orgs",
    "repos_url": "https://api.github.com/users/mds1/repos",
    "events_url": "https://api.github.com/users/mds1/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mds1/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/3062/reactions",
    "total_count": 4,
    "+1": 2,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 2,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3062/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1236387025",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3062#issuecomment-1236387025",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3062",
    "id": 1236387025,
    "node_id": "IC_kwDOGBlvNc5JscTR",
    "user": {
      "login": "gakonst",
      "id": 17802178,
      "node_id": "MDQ6VXNlcjE3ODAyMTc4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17802178?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gakonst",
      "html_url": "https://github.com/gakonst",
      "followers_url": "https://api.github.com/users/gakonst/followers",
      "following_url": "https://api.github.com/users/gakonst/following{/other_user}",
      "gists_url": "https://api.github.com/users/gakonst/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gakonst/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gakonst/subscriptions",
      "organizations_url": "https://api.github.com/users/gakonst/orgs",
      "repos_url": "https://api.github.com/users/gakonst/repos",
      "events_url": "https://api.github.com/users/gakonst/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gakonst/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-04T17:48:09Z",
    "updated_at": "2022-09-04T17:48:09Z",
    "author_association": "MEMBER",
    "body": "To select the profile `ci` one would do `FOUNDRY_CONFIG=ci forge t`, how would one choose the fuzzer profile?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1236387025/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1236388068",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3062#issuecomment-1236388068",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3062",
    "id": 1236388068,
    "node_id": "IC_kwDOGBlvNc5Jscjk",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-04T17:56:55Z",
    "updated_at": "2022-09-04T17:56:55Z",
    "author_association": "COLLABORATOR",
    "body": "`FOUNDRY_CONFIG=ci forge t` would use the settings under `profile.ci.fuzz` for fuzz tests. Within that profile are sub profiles: `profile.ci.fuzz` is the default config for that profile, and in the above example there's also `profile.ci.fuzz.low` and `profile.ci.fuzz.high`. So forge would:\r\n- Look at all `match-*` keys under `profile.ci.fuzz.low`, and apply the CI `low` config to those tests.\r\n- Look at all `match-*` keys under `profile.ci.fuzz.high`, and apply the CI `high` config to those tests. (If there's a conflict, we should just go with whatever was processed last and print a warning so the user can fix it)\r\n- All other tests use the default under `profile.ci.fuzz`.\r\n- If nothing is specified under `profile.ci.fuzz`, it falls back to `profile.default.fuzz` which is an alias for `fuzz`",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1236388068/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1236390663",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3062#issuecomment-1236390663",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3062",
    "id": 1236390663,
    "node_id": "IC_kwDOGBlvNc5JsdMH",
    "user": {
      "login": "rkrasiuk",
      "id": 25429261,
      "node_id": "MDQ6VXNlcjI1NDI5MjYx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25429261?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rkrasiuk",
      "html_url": "https://github.com/rkrasiuk",
      "followers_url": "https://api.github.com/users/rkrasiuk/followers",
      "following_url": "https://api.github.com/users/rkrasiuk/following{/other_user}",
      "gists_url": "https://api.github.com/users/rkrasiuk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rkrasiuk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rkrasiuk/subscriptions",
      "organizations_url": "https://api.github.com/users/rkrasiuk/orgs",
      "repos_url": "https://api.github.com/users/rkrasiuk/repos",
      "events_url": "https://api.github.com/users/rkrasiuk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rkrasiuk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-04T18:16:29Z",
    "updated_at": "2022-09-04T18:16:29Z",
    "author_association": "COLLABORATOR",
    "body": "i've got mixed feelings about the config complexity this introduces. @mds1 wdtyt about keeping the sections packed & simply adding the `overrides` to `[fuzz]` & `[invariant]` sections\r\n```toml\r\n[fuzz]\r\nruns = 250\r\noverrides = { \"testFuzzLow.*\" = { runs = 50 }, \"testFuzzHigh.*\" = { runs = 500 }}\r\n\r\n[profile.ci.fuzz]\r\nruns = 1000\r\noverrides = { \"testFuzzLow.*\" = { runs = 500 }, \"testFuzzHigh.*\" = { runs = 5000, max-global-rejects = 100_000 } }\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1236390663/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1236391755",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3062#issuecomment-1236391755",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3062",
    "id": 1236391755,
    "node_id": "IC_kwDOGBlvNc5JsddL",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-04T18:24:38Z",
    "updated_at": "2022-09-04T18:24:38Z",
    "author_association": "COLLABORATOR",
    "body": "Yea I feel the same way about the complexity, but couldn't think of a good alternative 😕\r\n\r\nIn general I like your `overrides` suggestion, but:\r\n1. I think we should support matching by either test name, contract, or file, whereas that looks like just test name. This can be resolved by something like `overrides-match-path`, `overrides-no-match-test`, etc.\r\n2. Inline tables for overrides can get long, and I'd want to split them onto multiple lines for readability. However the [toml spec](https://toml.io/en/v1.0.0#inline-table) says:\r\n\r\n> Inline tables are intended to appear on a single line ... No newlines are allowed between the curly braces unless they are valid within a value. Even so, it is strongly discouraged to break an inline table onto multiples lines. If you find yourself gripped with this desire, it means you should be using standard tables.\r\n\r\nWhich was part of my motivation for the original format",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1236391755/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1236392388",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3062#issuecomment-1236392388",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3062",
    "id": 1236392388,
    "node_id": "IC_kwDOGBlvNc5JsdnE",
    "user": {
      "login": "rkrasiuk",
      "id": 25429261,
      "node_id": "MDQ6VXNlcjI1NDI5MjYx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25429261?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rkrasiuk",
      "html_url": "https://github.com/rkrasiuk",
      "followers_url": "https://api.github.com/users/rkrasiuk/followers",
      "following_url": "https://api.github.com/users/rkrasiuk/following{/other_user}",
      "gists_url": "https://api.github.com/users/rkrasiuk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rkrasiuk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rkrasiuk/subscriptions",
      "organizations_url": "https://api.github.com/users/rkrasiuk/orgs",
      "repos_url": "https://api.github.com/users/rkrasiuk/repos",
      "events_url": "https://api.github.com/users/rkrasiuk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rkrasiuk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-04T18:28:04Z",
    "updated_at": "2022-09-04T18:28:04Z",
    "author_association": "COLLABORATOR",
    "body": "yeah, makes sense. not a fan of long lines either hence mixed feelings. one more idea is to have a cheatcode for a contract or test to set the config values, however that'd be both cumbersome to implement and for the end user to track across the codebase",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1236392388/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1236393919",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3062#issuecomment-1236393919",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3062",
    "id": 1236393919,
    "node_id": "IC_kwDOGBlvNc5Jsd-_",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-04T18:38:52Z",
    "updated_at": "2023-01-13T17:13:00Z",
    "author_association": "COLLABORATOR",
    "body": "Yea I do think cheatcodes could be nice UX, see approach 4 in https://github.com/foundry-rs/foundry/issues/744. However even that can get cumbersome since there's multiple parameters to set—we'd probably want a struct that defines all fuzz values and use some magic values to mean \"I'm not setting this one, fallback to the default\". But like you said it's probably significantly more work to implement and harder for users to track.\r\n\r\nI think the original proposal feels complex and hard to read because everything is visually \"flat\", whereas if this were formatted as JSON it would be more readable due to the indentation changes. Therefore I think using some comments to visually separate profiles can make it more readable (inline tables would also help, though technically they're supposed to be limited to one line I believe):\r\n\r\n\r\n```toml\r\n# =================================\r\n# ======== Default Profile ========\r\n# =================================\r\n\r\n# -------- General --------\r\n\r\n[profile.default]\r\nverbosity = 3\r\n\r\n# -------- Solidity --------\r\n\r\n[profile.lite.solidity]\r\noptimizer = false\r\n\r\n[profile.default.solidity]\r\noptimizer = true\r\noptimizer-runs = 10_000_000\r\n\r\n[profile.default.solidity.size]\r\noptimizer = true\r\noptimizer-runs = 1\r\nmatch-contract = \"MyBigContract\"\r\n\r\n# -------- Fuzz --------\r\n\r\n[profile.default.fuzz]\r\nruns = 250 # 250 runs by default for the default profile\r\n\r\n[profile.default.fuzz.low]\r\nmatch-test = \"testFuzzLow.*\"\r\nruns = 50\r\n\r\n[profile.default.fuzz.high]\r\nmatch-test = \"testFuzzHigh.*\"\r\nruns = 500\r\n\r\n# ====================\r\n# ======== CI ========\r\n# ====================\r\n\r\n# -------- Fuzz --------\r\n\r\n[profile.ci.fuzz]\r\nruns = 1000\r\n\r\n[profile.ci.fuzz.low]\r\nmatch-test = \"testFuzzLow.*\"\r\nruns = 500\r\n\r\n[profile.ci.fuzz.high]\r\nmatch-test = \"testFuzzHigh.*\"\r\nruns = 5000\r\nmax-global-rejects = 100_000\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1236393919/reactions",
      "total_count": 2,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1400445251",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3062#issuecomment-1400445251",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3062",
    "id": 1400445251,
    "node_id": "IC_kwDOGBlvNc5TeRlD",
    "user": {
      "login": "PaulRBerg",
      "id": 8782666,
      "node_id": "MDQ6VXNlcjg3ODI2NjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8782666?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PaulRBerg",
      "html_url": "https://github.com/PaulRBerg",
      "followers_url": "https://api.github.com/users/PaulRBerg/followers",
      "following_url": "https://api.github.com/users/PaulRBerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/PaulRBerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PaulRBerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PaulRBerg/subscriptions",
      "organizations_url": "https://api.github.com/users/PaulRBerg/orgs",
      "repos_url": "https://api.github.com/users/PaulRBerg/repos",
      "events_url": "https://api.github.com/users/PaulRBerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PaulRBerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-23T14:32:39Z",
    "updated_at": "2023-01-23T14:32:50Z",
    "author_association": "CONTRIBUTOR",
    "body": "> everything is visually \"flat\" .. Therefore I think using some comments to visually separate profiles can make it more readable\r\n\r\nAn alternative is to format the TOML with [Taplo](https://taplo.tamasfe.dev/), which can be enabled with the [Even Better TOML](https://marketplace.visualstudio.com/items?itemName=tamasfe.even-better-toml) extension in VSCode:\r\n\r\n```json\r\n\"[toml]\": {\r\n  \"editor.defaultFormatter\": \"tamasfe.even-better-toml\"\r\n}\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1400445251/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1400533616",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3062#issuecomment-1400533616",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3062",
    "id": 1400533616,
    "node_id": "IC_kwDOGBlvNc5TenJw",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-23T15:24:36Z",
    "updated_at": "2023-01-23T15:24:36Z",
    "author_association": "COLLABORATOR",
    "body": "Agreed, using taplo to indent the keys would also help. I personally do that for all toml files and find it much more readable",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1400533616/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1483130224",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3062#issuecomment-1483130224",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3062",
    "id": 1483130224,
    "node_id": "IC_kwDOGBlvNc5YZsVw",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-24T17:03:03Z",
    "updated_at": "2023-03-24T17:05:17Z",
    "author_association": "COLLABORATOR",
    "body": "I'm starting to think comment directives might the way to go here. Originally we didn't go this route because we thought it required compilation + `/// @custom:` natspec support which is only in recent solidity versions. However, we can use a regular comment with a custom syntax such as `// forge-config:profileName:section:setting = value`. For example:\r\n\r\n```solidity\r\ncontract MyTest is Test {\r\n  // forge-config: default.fuzz.runs = 100\r\n  // forge-config: ci.fuzz.runs = 500\r\n  function test_SimpleFuzzTest(uint256 x) public {\r\n    // --- snip ---\r\n  }\r\n\r\n  // forge-config: default.fuzz.runs = 500\r\n  // forge-config: ci.fuzz.runs = 10000\r\n  function test_ImportantFuzzTest(uint256 x) public {\r\n    // --- snip ---\r\n  }\r\n}\r\n```\r\n\r\nIn this example:\r\n- The `default` profile runs `test_SimpleFuzzTest` 100 times and the `ci` profile runs it 500 times\r\n- The `default` profile runs `test_ImportantFuzzTest` 500 times and the `ci` profile runs it 500 times\r\n\r\nBenefits over the config file approach:\r\n- The config is a lot simpler, cleaner, and more readable since it's directly above the fuzz test, so you don't need to keep flipping back and forth to the TOML file\r\n- Can be parsed with solang so it should be fast, and not reliant on solidity features or compilation\r\n\r\nSimilar to the original proposal here, those comment directives could be supported above tests (to apply to a single test), above contracts (to apply to all tests in that contract), or at the root of a file (to apply to all tests in that file), with the most specific ones taking precendence.\r\n\r\nThe main downside is the added noise to tests, but I think it's worth it.\r\n\r\ncc @brockelmore @transmissions11 @PaulRBerg @PatrickAlphaC for UX thoughts. I think this would be a huge unlock for the fuzzer",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1483130224/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1483803641",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3062#issuecomment-1483803641",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3062",
    "id": 1483803641,
    "node_id": "IC_kwDOGBlvNc5YcQv5",
    "user": {
      "login": "PaulRBerg",
      "id": 8782666,
      "node_id": "MDQ6VXNlcjg3ODI2NjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8782666?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PaulRBerg",
      "html_url": "https://github.com/PaulRBerg",
      "followers_url": "https://api.github.com/users/PaulRBerg/followers",
      "following_url": "https://api.github.com/users/PaulRBerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/PaulRBerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PaulRBerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PaulRBerg/subscriptions",
      "organizations_url": "https://api.github.com/users/PaulRBerg/orgs",
      "repos_url": "https://api.github.com/users/PaulRBerg/repos",
      "events_url": "https://api.github.com/users/PaulRBerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PaulRBerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-25T11:48:08Z",
    "updated_at": "2023-03-25T11:48:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "@mds1 100% in favor of your feature proposal; it would be super useful.\r\n\r\nRegarding `/// @custom` NatSpec tags (which were added in Solidity v0.8.2) - later down the line, Foundry could add retroactive support for [`@custom:fuzz-runs NUMBER`](https://github.com/foundry-rs/foundry/issues/4085) on top of `// forge-config:` (that is, once the vast majority of Solidity projects switch to >=0.8.2).",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1483803641/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1484324926",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3062#issuecomment-1484324926",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3062",
    "id": 1484324926,
    "node_id": "IC_kwDOGBlvNc5YeQA-",
    "user": {
      "login": "PatrickAlphaC",
      "id": 54278053,
      "node_id": "MDQ6VXNlcjU0Mjc4MDUz",
      "avatar_url": "https://avatars.githubusercontent.com/u/54278053?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PatrickAlphaC",
      "html_url": "https://github.com/PatrickAlphaC",
      "followers_url": "https://api.github.com/users/PatrickAlphaC/followers",
      "following_url": "https://api.github.com/users/PatrickAlphaC/following{/other_user}",
      "gists_url": "https://api.github.com/users/PatrickAlphaC/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PatrickAlphaC/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PatrickAlphaC/subscriptions",
      "organizations_url": "https://api.github.com/users/PatrickAlphaC/orgs",
      "repos_url": "https://api.github.com/users/PatrickAlphaC/repos",
      "events_url": "https://api.github.com/users/PatrickAlphaC/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PatrickAlphaC/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-27T01:16:30Z",
    "updated_at": "2023-03-27T01:16:30Z",
    "author_association": "NONE",
    "body": "Why not use modifiers instead of comments? I really dislike the idea of using comments as a sort of function decorator.\r\n\r\nWhat are the thoughts on:\r\n\r\n`foundry.toml`\r\n```toml\r\n[profile.ci.fuzz]\r\nruns = 1000\r\n\r\n[profile.ci.fuzz.low]\r\nmatch-test = \"testFuzzLow.*\"\r\nruns = 500\r\n\r\n[profile.ci.fuzz.high]\r\nmatch-test = \"testFuzzHigh.*\"\r\nruns = 5000\r\nmax-global-rejects = 100_000\r\n```\r\n\r\n`MyTest.t.sol`:\r\n\r\n```javascript\r\ncontract MyTest is Test {\r\n  // it takes a list of strings as profile, and a list of uint256 as the number of fuzz runs repective with the profile\r\n  function test_SimpleFuzzTest(uint256 x) public fuzzRuns([\"ci.fuzz.low\"], [500]){\r\n    // --- snip ---\r\n  }\r\n\r\n  function test_ImportantFuzzTest(uint256 x) public fuzzRuns([\"ci.fuzz.low\"], [500]) {\r\n    // --- snip ---\r\n  }\r\n}\r\n```\r\n\r\nAdditionally, we could overload modifiers to accept one parameter to override everything in the config.\r\n\r\n```javascript\r\n function test_ImportantFuzzTest(uint256 x) public fuzzRuns(500) {\r\n    // --- snip ---\r\n  }\r\n```\r\n\r\nThat way, we could rely on the compiler that our modifiers are setup more correctly. \r\n\r\nThis could be part of the foundry standard test library. ",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1484324926/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1484642698",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3062#issuecomment-1484642698",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3062",
    "id": 1484642698,
    "node_id": "IC_kwDOGBlvNc5YfdmK",
    "user": {
      "login": "PaulRBerg",
      "id": 8782666,
      "node_id": "MDQ6VXNlcjg3ODI2NjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8782666?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PaulRBerg",
      "html_url": "https://github.com/PaulRBerg",
      "followers_url": "https://api.github.com/users/PaulRBerg/followers",
      "following_url": "https://api.github.com/users/PaulRBerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/PaulRBerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PaulRBerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PaulRBerg/subscriptions",
      "organizations_url": "https://api.github.com/users/PaulRBerg/orgs",
      "repos_url": "https://api.github.com/users/PaulRBerg/repos",
      "events_url": "https://api.github.com/users/PaulRBerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PaulRBerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-27T07:29:42Z",
    "updated_at": "2023-03-27T07:53:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "Compared to comments, using modifiers for test granularity has two downsides:\r\n\r\n1. Much more difficult to make breaking changes (imagine your code not compiling after `foundryup` because the granularity modifier changed)\r\n2. Would interfere with my [state tree technique](https://twitter.com/PaulRBerg/status/1624763320539525121) for writing tests",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1484642698/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1484646775",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3062#issuecomment-1484646775",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3062",
    "id": 1484646775,
    "node_id": "IC_kwDOGBlvNc5Yfel3",
    "user": {
      "login": "sambacha",
      "id": 32783916,
      "node_id": "MDQ6VXNlcjMyNzgzOTE2",
      "avatar_url": "https://avatars.githubusercontent.com/u/32783916?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sambacha",
      "html_url": "https://github.com/sambacha",
      "followers_url": "https://api.github.com/users/sambacha/followers",
      "following_url": "https://api.github.com/users/sambacha/following{/other_user}",
      "gists_url": "https://api.github.com/users/sambacha/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sambacha/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sambacha/subscriptions",
      "organizations_url": "https://api.github.com/users/sambacha/orgs",
      "repos_url": "https://api.github.com/users/sambacha/repos",
      "events_url": "https://api.github.com/users/sambacha/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sambacha/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-27T07:33:27Z",
    "updated_at": "2023-03-27T07:33:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Compared to comments, using modifiers for test granularity has two downsides:\n> \n> \n> \n> 1. Much more difficult to make breaking changes (imagine your code not compiling after `foundryup` because the granularity modifier changes)\n> \n> 2. Would interfere with my [state tree technique](https://twitter.com/PaulRBerg/status/1624763320539525121) for writing tests\n\n3. They are comments at the end of the day, so there is no realistic chance of the compiler  trying to use it. \n\n\nIt should be noted that dapple (dapptools progenitor) uses this comment style as well (or use to at least). \n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1484646775/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1487909119",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3062#issuecomment-1487909119",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3062",
    "id": 1487909119,
    "node_id": "IC_kwDOGBlvNc5Yr7D_",
    "user": {
      "login": "PatrickAlphaC",
      "id": 54278053,
      "node_id": "MDQ6VXNlcjU0Mjc4MDUz",
      "avatar_url": "https://avatars.githubusercontent.com/u/54278053?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PatrickAlphaC",
      "html_url": "https://github.com/PatrickAlphaC",
      "followers_url": "https://api.github.com/users/PatrickAlphaC/followers",
      "following_url": "https://api.github.com/users/PatrickAlphaC/following{/other_user}",
      "gists_url": "https://api.github.com/users/PatrickAlphaC/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PatrickAlphaC/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PatrickAlphaC/subscriptions",
      "organizations_url": "https://api.github.com/users/PatrickAlphaC/orgs",
      "repos_url": "https://api.github.com/users/PatrickAlphaC/repos",
      "events_url": "https://api.github.com/users/PatrickAlphaC/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PatrickAlphaC/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-29T03:56:34Z",
    "updated_at": "2023-03-29T03:56:34Z",
    "author_association": "NONE",
    "body": "Hmm... I see your points. They make sense. But maybe there is some advantage to having the compiler take it on. For example, if you format your custom runs incorrectly, the compiler will catch it vs you'd test your code incorrectly. I sort of like the idea that having a modifier would make sure that I'm formatting my fuzz runs right. \r\n\r\nI don't love the idea of comments as the driving force. I think it isn't very clear. for newer devs especially. \r\n\r\n\"Comments don't affect how your code runs, oh, except in this case in foundry.\" <- This feels weird to teach. \r\n\r\nComments becoming an important factor in how your test suite runs are... meh. I like python's decorators, but I suppose we can't do something like that in solidity/foundry.\r\n\r\nThis isn't a hill I'll die on as I see your points. But TL;DR, my thoughts are that using comments you'd:\r\n1. Make code harder to understand\r\n2. Not gain compiler benefits\r\n\r\nBut you get:\r\n1. Easier maintainability\r\n2. Arguably nicer to read syntax\r\n3. Not have to worry about compiler issues",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1487909119/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1488303370",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3062#issuecomment-1488303370",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3062",
    "id": 1488303370,
    "node_id": "IC_kwDOGBlvNc5YtbUK",
    "user": {
      "login": "PaulRBerg",
      "id": 8782666,
      "node_id": "MDQ6VXNlcjg3ODI2NjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8782666?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PaulRBerg",
      "html_url": "https://github.com/PaulRBerg",
      "followers_url": "https://api.github.com/users/PaulRBerg/followers",
      "following_url": "https://api.github.com/users/PaulRBerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/PaulRBerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PaulRBerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PaulRBerg/subscriptions",
      "organizations_url": "https://api.github.com/users/PaulRBerg/orgs",
      "repos_url": "https://api.github.com/users/PaulRBerg/repos",
      "events_url": "https://api.github.com/users/PaulRBerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PaulRBerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-29T10:02:45Z",
    "updated_at": "2023-03-29T10:02:45Z",
    "author_association": "CONTRIBUTOR",
    "body": "@PatrickAlphaC nice write-up; my take is that the benefits of using comments outweigh the cons.\r\n\r\n> the compiler will catch it vs you'd test your code incorrectly.\r\n\r\nSurely Foundry can catch misconfigured inputs. And if you don't use the correct comment syntax, you can quite quickly notice this when you run your tests and see that the fuzzing config didn't apply (e.g. you want to fuzz 50 times but in fact you fuzz 1,000 times, this is easy to see).\r\n\r\n> I don't love the idea of comments as the driving force\r\n\r\nIMO, that's a bit of a stretch; `foundry.toml` is the driving force. Comments would be used on a case-by-case basis.\r\n\r\n> \"Comments don't affect how your code runs, oh, except in this case in foundry.\" <- This feels weird to teach.\r\n\r\n1. This is only about running tests, not production code.\r\n2. In any case, comments already affect the bytecode of smart contracts (because of [metadata](https://docs.soliditylang.org/en/v0.8.19/metadata.html#:~:text=The%20Solidity%20compiler%20automatically%20generates,and%20verify%20its%20source%20code.)), so the logic of comments in Solidity has to be taught anyway.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1488303370/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1491201413",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3062#issuecomment-1491201413",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3062",
    "id": 1491201413,
    "node_id": "IC_kwDOGBlvNc5Y4e2F",
    "user": {
      "login": "PatrickAlphaC",
      "id": 54278053,
      "node_id": "MDQ6VXNlcjU0Mjc4MDUz",
      "avatar_url": "https://avatars.githubusercontent.com/u/54278053?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PatrickAlphaC",
      "html_url": "https://github.com/PatrickAlphaC",
      "followers_url": "https://api.github.com/users/PatrickAlphaC/followers",
      "following_url": "https://api.github.com/users/PatrickAlphaC/following{/other_user}",
      "gists_url": "https://api.github.com/users/PatrickAlphaC/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PatrickAlphaC/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PatrickAlphaC/subscriptions",
      "organizations_url": "https://api.github.com/users/PatrickAlphaC/orgs",
      "repos_url": "https://api.github.com/users/PatrickAlphaC/repos",
      "events_url": "https://api.github.com/users/PatrickAlphaC/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PatrickAlphaC/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-31T02:30:09Z",
    "updated_at": "2023-03-31T02:30:09Z",
    "author_association": "NONE",
    "body": "Thanks for the response. Re: \"In any case, comments already affect the bytecode of smart contracts (because of metadata), so the logic of comments in Solidity has to be taught anyway.\"\n\nThey affect the code size, but not the running code. I just know that someone is going to post something on stack exchange asking us to debug their tests, and the answer is that their comments are breaking it.\n\nIn any case, I can't think of a better solution, so I think comments might be the best bet.\n\nExcited for this feature. ",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1491201413/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1501401086",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3062#issuecomment-1501401086",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3062",
    "id": 1501401086,
    "node_id": "IC_kwDOGBlvNc5ZfY_-",
    "user": {
      "login": "0xMySt1c",
      "id": 101825630,
      "node_id": "U_kgDOBhG8Xg",
      "avatar_url": "https://avatars.githubusercontent.com/u/101825630?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/0xMySt1c",
      "html_url": "https://github.com/0xMySt1c",
      "followers_url": "https://api.github.com/users/0xMySt1c/followers",
      "following_url": "https://api.github.com/users/0xMySt1c/following{/other_user}",
      "gists_url": "https://api.github.com/users/0xMySt1c/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/0xMySt1c/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/0xMySt1c/subscriptions",
      "organizations_url": "https://api.github.com/users/0xMySt1c/orgs",
      "repos_url": "https://api.github.com/users/0xMySt1c/repos",
      "events_url": "https://api.github.com/users/0xMySt1c/events{/privacy}",
      "received_events_url": "https://api.github.com/users/0xMySt1c/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-04-10T05:09:50Z",
    "updated_at": "2023-04-10T05:09:50Z",
    "author_association": "NONE",
    "body": "```\r\n# In our default solidity profile we apply 10M optimizer runs.\r\n[profile.default.solidity]\r\noptimizer = true\r\noptimizer-runs = 10_000_000\r\n\r\n# But we have one really big contract, so we use 1 optimizer run to minimize\r\n# its size.\r\n[profile.default.solidity.size]\r\noptimizer = true\r\noptimizer-runs = 1\r\nmatch-contract = \"MyBigContract\"\r\n```\r\n\r\nJust curious how would the build know not to run optimizer 10,000,000x on MyBigContract?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1501401086/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1546738893",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3062#issuecomment-1546738893",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3062",
    "id": 1546738893,
    "node_id": "IC_kwDOGBlvNc5cMVzN",
    "user": {
      "login": "PaulRBerg",
      "id": 8782666,
      "node_id": "MDQ6VXNlcjg3ODI2NjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8782666?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PaulRBerg",
      "html_url": "https://github.com/PaulRBerg",
      "followers_url": "https://api.github.com/users/PaulRBerg/followers",
      "following_url": "https://api.github.com/users/PaulRBerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/PaulRBerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PaulRBerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PaulRBerg/subscriptions",
      "organizations_url": "https://api.github.com/users/PaulRBerg/orgs",
      "repos_url": "https://api.github.com/users/PaulRBerg/repos",
      "events_url": "https://api.github.com/users/PaulRBerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PaulRBerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-13T19:50:24Z",
    "updated_at": "2023-05-13T19:50:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "Given that #4744 was merged, should we close this issue?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1546738893/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1548203075",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3062#issuecomment-1548203075",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3062",
    "id": 1548203075,
    "node_id": "IC_kwDOGBlvNc5cR7RD",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-15T16:47:35Z",
    "updated_at": "2023-05-15T16:47:35Z",
    "author_association": "COLLABORATOR",
    "body": "Closing, thanks!",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1548203075/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
