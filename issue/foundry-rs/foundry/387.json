{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/387",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/387/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/387/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/387/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/387",
  "id": 1094935075,
  "node_id": "I_kwDOGBlvNc5BQ2Ij",
  "number": 387,
  "title": "meta: forge fuzzer improvements",
  "user": {
    "login": "mds1",
    "id": 17163988,
    "node_id": "MDQ6VXNlcjE3MTYzOTg4",
    "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mds1",
    "html_url": "https://github.com/mds1",
    "followers_url": "https://api.github.com/users/mds1/followers",
    "following_url": "https://api.github.com/users/mds1/following{/other_user}",
    "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
    "organizations_url": "https://api.github.com/users/mds1/orgs",
    "repos_url": "https://api.github.com/users/mds1/repos",
    "events_url": "https://api.github.com/users/mds1/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mds1/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3394554570,
      "node_id": "LA_kwDOGBlvNc7KVMrK",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/A-fuzzing",
      "name": "A-fuzzing",
      "color": "FBCA04",
      "default": false,
      "description": "Area: fuzzing"
    },
    {
      "id": 3703752787,
      "node_id": "LA_kwDOGBlvNc7cwshT",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/C-forge",
      "name": "C-forge",
      "color": "5319E7",
      "default": false,
      "description": "Command: forge"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 12,
  "created_at": "2022-01-06T03:36:28Z",
  "updated_at": "2023-02-26T22:09:21Z",
  "closed_at": "2023-02-26T22:09:20Z",
  "author_association": "COLLABORATOR",
  "active_lock_reason": null,
  "body": "The current state of fuzzing is naive (we think, more on this below)—it uses [`proptest`](https://github.com/AltSysrq/proptest) strategies to [generate](https://github.com/gakonst/foundry/blob/master/evm-adapters/src/fuzz.rs#L236) random, uniformly distributed inputs based on Solidity types. This is an ok start, but isn't great. There's lots of improvements to the fuzzer that can be made to increase the chances of finding bugs.\r\n\r\nThis issue is spec out (1) what fuzzing features and functionality we want to have, and then (2) how to approach that, e.g. are custom proptest strategies sufficient, should we switch to a different crate, etc.\r\n\r\nI'm certainly no fuzzing expert, but as a jumping off point here's my assessment of functionality we'd want to have, as well as a list of other rust crates for fuzzing to consider\r\n\r\n## Fuzzing Features \r\n\r\nThese are just ones that come to mind based on my limited knowledge of fuzzing and my use of foundry so far\r\n\r\n### Bias random values towards extremes\r\n\r\nBased on the proptest [docs](https://altsysrq.github.io/proptest-book/proptest/limitations.html) and [this open proptest issue](https://github.com/AltSysrq/proptest/issues/82), it appears proptest does not bias towards extreme values and edge cases such as 0, max, min, etc. \r\n\r\n### \"Synchronize\" the fuzzed inputs\r\n\r\nSome bugs require multiple inputs to be in sync, e.g. all zeros or empty arrays. If each input is generated independently and uniformly, this is unlikely to happen. I _think_ this is the current behavior of proptest, but I may be wrong because the fuzzer [did find](https://github.com/gakonst/foundry/pull/383) a failure case with a counter example of `[], [], [], 0x, 0x` for inputs of types `(address,uint256[],uint256[],uint256[],bytes,bytes)`. I believe this specific example came up on each fuzz run, suggesting proptest may be smarter than myself and the docs give it credit for\r\n\r\n### Some degree of control over array and bytes lengths\r\n\r\nCurrently the max size of inputs for [arrays](https://github.com/gakonst/foundry/blob/0785187319a9cdbc070ad40040a360b2e23ddaf0/evm-adapters/src/fuzz.rs#L280) and [bytes](https://github.com/gakonst/foundry/blob/0785187319a9cdbc070ad40040a360b2e23ddaf0/evm-adapters/src/fuzz.rs#L243) are bounded, but some bugs may only surface with larger inputs. Always allowing very large inputs might slow down tests, so it'd be useful to either allow them be unbound (or have larger bounds) via a flag (e.g. for use in CI), or to bias the fuzzer to have large inputs only be used occasionally\r\n\r\n### Constant mining\r\n\r\nDetails and motivation can be found [here](https://forum.openzeppelin.com/t/using-automatic-analysis-tools-with-makerdao-contracts/1021/2). The summary is that echidna uses constant mining to extract return values from other methods and uses those as fuzzer inputs. As shown in the link, this helps find bugs that would not be found otherwise\r\n\r\n### `assume` functionality\r\n\r\nAllow inputs that don't meet certain conditions, such as ignoring the zero address or ensuring that `x + y < z`, to be discarded and have a new set of inputs generated. Discarded fuzz runs are not counted toward the number of executed runs, so new inputs would be generated and the test re-ran\r\n\r\n### Bounding inputs to a range\r\n\r\nIt's debatable whether this should be part of the fuzzer, or if users should just manage it manually by [bounding](https://github.com/Rari-Capital/solmate/blob/ab1d04a2ba35cd63ebe90d3704ff0a010a576246/src/test/utils/DSTestPlus.sol#L114-L133) the fuzzer's inputs, but a way to control the range of inputs is often useful to avoid reverts due to overflows, etc.\r\n\r\n### Symbolically execute to seed fuzzer inputs\r\n\r\nSee https://github.com/gakonst/foundry/issues/387#issuecomment-1006626020 below:\r\n\r\n> Consider using SMT solvers like z3 directly to generate random valid inputs, instead of hoping some generic fuzzer will support smart contract specific needs.\r\n\r\nh/t @yaronvel\r\n\r\n## Rust Fuzzing Crates\r\n\r\nThere's probably others, but here's a few I've come across so far\r\n\r\n- [proptest](https://github.com/AltSysrq/proptest) is what we currently use\r\n- [quickcheck](https://github.com/BurntSushi/quickcheck) — QuickCheck for Haskell is what dapptools uses\r\n- [afl.rs](https://github.com/rust-fuzz/afl.rs) allows fuzzing with AFL\r\n- [cargo-fuzz](https://github.com/rust-fuzz/cargo-fuzz) allows fuzzing with libFuzzer\r\n- [arbitrary](https://github.com/rust-fuzz/arbitrary) is intended to be combined with a fuzzer like libFuzzer and cargo-fuzz or AFL, and to help you turn the raw, untyped byte buffers that they produce into well-typed, valid, structured values (h/t @mattsse)",
  "closed_by": {
    "login": "mds1",
    "id": 17163988,
    "node_id": "MDQ6VXNlcjE3MTYzOTg4",
    "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mds1",
    "html_url": "https://github.com/mds1",
    "followers_url": "https://api.github.com/users/mds1/followers",
    "following_url": "https://api.github.com/users/mds1/following{/other_user}",
    "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
    "organizations_url": "https://api.github.com/users/mds1/orgs",
    "repos_url": "https://api.github.com/users/mds1/repos",
    "events_url": "https://api.github.com/users/mds1/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mds1/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/387/reactions",
    "total_count": 15,
    "+1": 15,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/387/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1006519115",
    "html_url": "https://github.com/foundry-rs/foundry/issues/387#issuecomment-1006519115",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/387",
    "id": 1006519115,
    "node_id": "IC_kwDOGBlvNc47_kNL",
    "user": {
      "login": "mattsse",
      "id": 19890894,
      "node_id": "MDQ6VXNlcjE5ODkwODk0",
      "avatar_url": "https://avatars.githubusercontent.com/u/19890894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mattsse",
      "html_url": "https://github.com/mattsse",
      "followers_url": "https://api.github.com/users/mattsse/followers",
      "following_url": "https://api.github.com/users/mattsse/following{/other_user}",
      "gists_url": "https://api.github.com/users/mattsse/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mattsse/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mattsse/subscriptions",
      "organizations_url": "https://api.github.com/users/mattsse/orgs",
      "repos_url": "https://api.github.com/users/mattsse/repos",
      "events_url": "https://api.github.com/users/mattsse/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mattsse/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-06T11:53:18Z",
    "updated_at": "2022-01-06T11:53:18Z",
    "author_association": "MEMBER",
    "body": "there's also \r\nhttps://github.com/rust-fuzz/arbitrary",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1006519115/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1006611059",
    "html_url": "https://github.com/foundry-rs/foundry/issues/387#issuecomment-1006611059",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/387",
    "id": 1006611059,
    "node_id": "IC_kwDOGBlvNc47_6pz",
    "user": {
      "login": "gakonst",
      "id": 17802178,
      "node_id": "MDQ6VXNlcjE3ODAyMTc4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17802178?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gakonst",
      "html_url": "https://github.com/gakonst",
      "followers_url": "https://api.github.com/users/gakonst/followers",
      "following_url": "https://api.github.com/users/gakonst/following{/other_user}",
      "gists_url": "https://api.github.com/users/gakonst/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gakonst/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gakonst/subscriptions",
      "organizations_url": "https://api.github.com/users/gakonst/orgs",
      "repos_url": "https://api.github.com/users/gakonst/repos",
      "events_url": "https://api.github.com/users/gakonst/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gakonst/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-06T13:57:03Z",
    "updated_at": "2022-01-06T13:57:03Z",
    "author_association": "MEMBER",
    "body": "We could also explore making our own `Strategy` implementations for proptest.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1006611059/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1006626020",
    "html_url": "https://github.com/foundry-rs/foundry/issues/387#issuecomment-1006626020",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/387",
    "id": 1006626020,
    "node_id": "IC_kwDOGBlvNc47_-Tk",
    "user": {
      "login": "yaronvel",
      "id": 19823963,
      "node_id": "MDQ6VXNlcjE5ODIzOTYz",
      "avatar_url": "https://avatars.githubusercontent.com/u/19823963?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yaronvel",
      "html_url": "https://github.com/yaronvel",
      "followers_url": "https://api.github.com/users/yaronvel/followers",
      "following_url": "https://api.github.com/users/yaronvel/following{/other_user}",
      "gists_url": "https://api.github.com/users/yaronvel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yaronvel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yaronvel/subscriptions",
      "organizations_url": "https://api.github.com/users/yaronvel/orgs",
      "repos_url": "https://api.github.com/users/yaronvel/repos",
      "events_url": "https://api.github.com/users/yaronvel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yaronvel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-06T14:18:10Z",
    "updated_at": "2022-01-06T14:18:10Z",
    "author_association": "NONE",
    "body": "Consider using SMT solvers like z3 directly to generate random valid inputs, instead of hoping some generic fuzzer will support smart contract specific needs.\r\nCan elaborate more on this if you want, in my previous life I once built a randomized testing tool with z3 from scratch.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1006626020/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1007446287",
    "html_url": "https://github.com/foundry-rs/foundry/issues/387#issuecomment-1007446287",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/387",
    "id": 1007446287,
    "node_id": "IC_kwDOGBlvNc48DGkP",
    "user": {
      "login": "wuestholz",
      "id": 51156,
      "node_id": "MDQ6VXNlcjUxMTU2",
      "avatar_url": "https://avatars.githubusercontent.com/u/51156?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wuestholz",
      "html_url": "https://github.com/wuestholz",
      "followers_url": "https://api.github.com/users/wuestholz/followers",
      "following_url": "https://api.github.com/users/wuestholz/following{/other_user}",
      "gists_url": "https://api.github.com/users/wuestholz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wuestholz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wuestholz/subscriptions",
      "organizations_url": "https://api.github.com/users/wuestholz/orgs",
      "repos_url": "https://api.github.com/users/wuestholz/repos",
      "events_url": "https://api.github.com/users/wuestholz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wuestholz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-07T14:26:24Z",
    "updated_at": "2022-01-07T14:26:24Z",
    "author_association": "NONE",
    "body": "@mds1 @gakonst Great to hear that there are other efforts to get more users hooked on fuzzing! :) You might want to take a look at our Harvey fuzzer; see https://mariachris.github.io/Pubs/FSE-2020-Harvey.pdf for ideas on what features make a big difference in practice. Harvey is used both in Diligence's [MythX](https://mythx.io) service and our dedicated [Diligence fuzzing](https://consensys.net/diligence/fuzzing) solution.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1007446287/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1011678116",
    "html_url": "https://github.com/foundry-rs/foundry/issues/387#issuecomment-1011678116",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/387",
    "id": 1011678116,
    "node_id": "IC_kwDOGBlvNc48TPuk",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-13T02:12:17Z",
    "updated_at": "2022-01-13T02:12:17Z",
    "author_association": "COLLABORATOR",
    "body": "> Consider using SMT solvers like z3 directly to generate random valid inputs, instead of hoping some generic fuzzer will support smart contract specific needs.\r\n> Can elaborate more on this if you want, in my previous life I once built a randomized testing tool with z3 from scratch.\r\n\r\nHey @yaronvel—I'm not too familiar with how you'd implement this in practice, and foundry doesn't yet have any symbolic execution capabilities, so this probably won't be the first path we go down. However I've always thought seeding the fuzzer with solver outputs would be valuable, so would love if you could elaborate more!",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1011678116/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1011685153",
    "html_url": "https://github.com/foundry-rs/foundry/issues/387#issuecomment-1011685153",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/387",
    "id": 1011685153,
    "node_id": "IC_kwDOGBlvNc48TRch",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-13T02:20:14Z",
    "updated_at": "2022-01-13T02:20:14Z",
    "author_association": "COLLABORATOR",
    "body": "> Great to hear that there are other efforts to get more users hooked on fuzzing! :) You might want to take a look at our Harvey fuzzer; see https://mariachris.github.io/Pubs/FSE-2020-Harvey.pdf for ideas on what features make a big difference in practice. Harvey is used both in Diligence's MythX service and our dedicated Diligence fuzzing solution.\r\n\r\nThanks @wuestholz this looks great, planning to read this soon. Only question until then is: looks like the paper is from November 2020, so is there anything you've learned since then that isn't covered in the paper, or anything you'd change if writing a similar paper today? It's only about a year old, but a year is a long time in the smart contract world! 😁",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1011685153/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1011940496",
    "html_url": "https://github.com/foundry-rs/foundry/issues/387#issuecomment-1011940496",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/387",
    "id": 1011940496,
    "node_id": "IC_kwDOGBlvNc48UPyQ",
    "user": {
      "login": "wuestholz",
      "id": 51156,
      "node_id": "MDQ6VXNlcjUxMTU2",
      "avatar_url": "https://avatars.githubusercontent.com/u/51156?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wuestholz",
      "html_url": "https://github.com/wuestholz",
      "followers_url": "https://api.github.com/users/wuestholz/followers",
      "following_url": "https://api.github.com/users/wuestholz/following{/other_user}",
      "gists_url": "https://api.github.com/users/wuestholz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wuestholz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wuestholz/subscriptions",
      "organizations_url": "https://api.github.com/users/wuestholz/orgs",
      "repos_url": "https://api.github.com/users/wuestholz/repos",
      "events_url": "https://api.github.com/users/wuestholz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wuestholz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-13T09:13:15Z",
    "updated_at": "2022-01-13T09:13:15Z",
    "author_association": "NONE",
    "body": "> > Great to hear that there are other efforts to get more users hooked on fuzzing! :) You might want to take a look at our Harvey fuzzer; see https://mariachris.github.io/Pubs/FSE-2020-Harvey.pdf for ideas on what features make a big difference in practice. Harvey is used both in Diligence's MythX service and our dedicated Diligence fuzzing solution.\r\n> \r\n> Thanks @wuestholz this looks great, planning to read this soon. Only question until then is: looks like the paper is from November 2020, so is there anything you've learned since then that isn't covered in the paper, or anything you'd change if writing a similar paper today? It's only about a year old, but a year is a long time in the smart contract world! 😁\r\n\r\n😁 We're continuously improving Harvey based on feedback from auditors and clients. We're planning to write up one of the novel techniques we added soon (spoiler alert: up to 30% coverage increase for some of our benchmarks). I think all the lessons in the paper still apply today, but we've definitely been optimizing Harvey more for property checking (for instance, in combination with our [Scribble specification language](https://scribble.codes/)). We've also found several cool use-cases for the input prediction technique we presented in our FSE paper.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1011940496/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1011986226",
    "html_url": "https://github.com/foundry-rs/foundry/issues/387#issuecomment-1011986226",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/387",
    "id": 1011986226,
    "node_id": "IC_kwDOGBlvNc48Ua8y",
    "user": {
      "login": "gakonst",
      "id": 17802178,
      "node_id": "MDQ6VXNlcjE3ODAyMTc4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17802178?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gakonst",
      "html_url": "https://github.com/gakonst",
      "followers_url": "https://api.github.com/users/gakonst/followers",
      "following_url": "https://api.github.com/users/gakonst/following{/other_user}",
      "gists_url": "https://api.github.com/users/gakonst/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gakonst/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gakonst/subscriptions",
      "organizations_url": "https://api.github.com/users/gakonst/orgs",
      "repos_url": "https://api.github.com/users/gakonst/repos",
      "events_url": "https://api.github.com/users/gakonst/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gakonst/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-13T10:10:27Z",
    "updated_at": "2022-01-13T10:10:27Z",
    "author_association": "MEMBER",
    "body": "How much of the specification/property writing do you think we can overload into Solidity syntax, vs having a separate language?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1011986226/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1012085432",
    "html_url": "https://github.com/foundry-rs/foundry/issues/387#issuecomment-1012085432",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/387",
    "id": 1012085432,
    "node_id": "IC_kwDOGBlvNc48UzK4",
    "user": {
      "login": "wuestholz",
      "id": 51156,
      "node_id": "MDQ6VXNlcjUxMTU2",
      "avatar_url": "https://avatars.githubusercontent.com/u/51156?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wuestholz",
      "html_url": "https://github.com/wuestholz",
      "followers_url": "https://api.github.com/users/wuestholz/followers",
      "following_url": "https://api.github.com/users/wuestholz/following{/other_user}",
      "gists_url": "https://api.github.com/users/wuestholz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wuestholz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wuestholz/subscriptions",
      "organizations_url": "https://api.github.com/users/wuestholz/orgs",
      "repos_url": "https://api.github.com/users/wuestholz/repos",
      "events_url": "https://api.github.com/users/wuestholz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wuestholz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-13T12:19:02Z",
    "updated_at": "2022-01-13T12:19:02Z",
    "author_association": "NONE",
    "body": "@gakonst I'm hoping a lot! 😁 We're trying to keep Scribble as simple as possible. Ideally, a Solidity developer can understand most specifications \"out-of-the-box\"; for instance, we allow regular Solidity expressions whenever possible, and only extend the syntax slightly when needed (for instance, `old`-expressions in postconditions).\r\n\r\nFrom my perspective, the Solidity team can \"steal\" as much of Scribble as possible. 😉 We partly started Scribble to explore the language design space and are more than happy to evolve the language with feedback from the community.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1012085432/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1030919586",
    "html_url": "https://github.com/foundry-rs/foundry/issues/387#issuecomment-1030919586",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/387",
    "id": 1030919586,
    "node_id": "IC_kwDOGBlvNc49cpWi",
    "user": {
      "login": "transmissions11",
      "id": 26209401,
      "node_id": "MDQ6VXNlcjI2MjA5NDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/26209401?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/transmissions11",
      "html_url": "https://github.com/transmissions11",
      "followers_url": "https://api.github.com/users/transmissions11/followers",
      "following_url": "https://api.github.com/users/transmissions11/following{/other_user}",
      "gists_url": "https://api.github.com/users/transmissions11/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/transmissions11/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/transmissions11/subscriptions",
      "organizations_url": "https://api.github.com/users/transmissions11/orgs",
      "repos_url": "https://api.github.com/users/transmissions11/repos",
      "events_url": "https://api.github.com/users/transmissions11/events{/privacy}",
      "received_events_url": "https://api.github.com/users/transmissions11/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-06T21:37:04Z",
    "updated_at": "2022-02-06T21:37:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "here's a concrete example of the fuzzer missing multiple bugs that other fuzzers (dapptools) would detect easily:\r\n\r\n```solidity\r\nfunction testEquality(uint256 x, uint256 y) public {\r\n        uint256 xy;\r\n\r\n        unchecked {\r\n            xy = x * y;\r\n        }\r\n\r\n        if ((x != 0 && xy / x != y)) return;\r\n\r\n        assertEq(((xy - 1) / 1e18) + 1, (xy - 1) / (1e18 + 1));\r\n}\r\n```\r\n\r\n<img width=\"383\" alt=\"Screen Shot 2022-02-06 at 1 36 46 PM\" src=\"https://user-images.githubusercontent.com/26209401/152702353-35e29161-45ea-4a05-8c9e-e030fe0ef634.png\">",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1030919586/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1034396200",
    "html_url": "https://github.com/foundry-rs/foundry/issues/387#issuecomment-1034396200",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/387",
    "id": 1034396200,
    "node_id": "IC_kwDOGBlvNc49p6Io",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-10T01:39:16Z",
    "updated_at": "2022-02-10T01:39:16Z",
    "author_association": "COLLABORATOR",
    "body": "Primary fuzzing technique we should focus on right now is building the best dictionary, and selecting inputs from both the dictionary and from a randomly generated value, with a user-defined weight specifying the frequency of each.\r\n- Biasing towards extremes can be handled by adding values to the dictionary\r\n- Constant mining can be handled by dumping the EVM state into the dictionary\r\n- Can also add values by parsing solc output or using slither\r\n- Instead of coverage guidance, add a flag to output a coverage report, so user knows what wasn't hit\r\n- A cheatcode to add values to dictionary can help improve coverage, based on coverage report\r\n\r\nTo implement this we need a weighted union of two strategies:\r\n- Strategy 1: Randomly generated values, which we currently have\r\n- Strategy 2: The dictionary, using proptest's [`select`](https://docs.rs/proptest/latest/proptest/sample/fn.select.html), which creates a strategy that uniformly selects one value from `values`:\r\n- Union: Use [`new_weighted`](https://docs.rs/proptest/latest/proptest/strategy/struct.Union.html#method.new_weighted) function to create a strategy that selects from the above two strategies with the specified weights\r\n- Echidna's [default dictionary](https://github.com/crytic/echidna/pull/321) frequency is 40%, so we should use that value also. This means random values are used 1.5 times more often than dictionary values, and based on how `new_weighted` requires wights to be specified, this is equivalent to a weight of 1 for dictionary and 1.5 for random values",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1034396200/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1445480624",
    "html_url": "https://github.com/foundry-rs/foundry/issues/387#issuecomment-1445480624",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/387",
    "id": 1445480624,
    "node_id": "IC_kwDOGBlvNc5WKEiw",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-02-26T22:09:20Z",
    "updated_at": "2023-02-26T22:09:20Z",
    "author_association": "COLLABORATOR",
    "body": "Closing this since the fuzzer has improved since this was created, so this is now stale. Will create a new issue to track future fuzz improvements",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1445480624/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
