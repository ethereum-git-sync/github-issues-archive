{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/3616",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3616/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3616/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3616/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/3616",
  "id": 1437103111,
  "node_id": "I_kwDOGBlvNc5VqHQH",
  "number": 3616,
  "title": "`forge test` incorrectly assigns balances to the tested contracts",
  "user": {
    "login": "lekhovitsky",
    "id": 19476174,
    "node_id": "MDQ6VXNlcjE5NDc2MTc0",
    "avatar_url": "https://avatars.githubusercontent.com/u/19476174?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/lekhovitsky",
    "html_url": "https://github.com/lekhovitsky",
    "followers_url": "https://api.github.com/users/lekhovitsky/followers",
    "following_url": "https://api.github.com/users/lekhovitsky/following{/other_user}",
    "gists_url": "https://api.github.com/users/lekhovitsky/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/lekhovitsky/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/lekhovitsky/subscriptions",
    "organizations_url": "https://api.github.com/users/lekhovitsky/orgs",
    "repos_url": "https://api.github.com/users/lekhovitsky/repos",
    "events_url": "https://api.github.com/users/lekhovitsky/events{/privacy}",
    "received_events_url": "https://api.github.com/users/lekhovitsky/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3334394228,
      "node_id": "MDU6TGFiZWwzMzM0Mzk0MjI4",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-bug",
      "name": "T-bug",
      "color": "d73a4a",
      "default": false,
      "description": "Type: bug"
    },
    {
      "id": 3593644915,
      "node_id": "LA_kwDOGBlvNc7WMqtz",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/Cmd-forge-test",
      "name": "Cmd-forge-test",
      "color": "006B75",
      "default": false,
      "description": "Command: forge test"
    },
    {
      "id": 3703752787,
      "node_id": "LA_kwDOGBlvNc7cwshT",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/C-forge",
      "name": "C-forge",
      "color": "5319E7",
      "default": false,
      "description": "Command: forge"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2022-11-05T16:54:09Z",
  "updated_at": "2022-11-07T07:47:26Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "### Component\n\nForge\n\n### Have you ensured that all of these are up to date?\n\n- [X] Foundry\n- [X] Foundryup\n\n### What version of Foundry are you on?\n\nforge 0.2.0 (c06b532 2022-11-05T00:10:39.000335Z)\n\n### What command(s) is the bug in?\n\nforge test\n\n### Operating System\n\nmacOS (Apple Silicon)\n\n### Describe the bug\n\nWhen the instance of the tested contract is created, it is expected that its balance is zero or the value passed via `--initial-balance`. The actual value however might be non-zero, and `--initial-balance` has no control over it.\r\n\r\nConsider this simple test:\r\n```solidity\r\n// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.13;\r\n\r\nimport \"forge-std/Test.sol\";\r\n\r\ncontract X {}\r\n\r\ncontract XTest is Test {\r\n    X private x;\r\n\r\n    function setUp() public {\r\n        x = new X();\r\n    }\r\n\r\n    function testBalanceIsZero() public {\r\n        assertEq(address(x).balance, 0);\r\n    }\r\n}\r\n```\r\n\r\nIt passes if we don't fork the state:\r\n```bash\r\nforge test -vvv\r\n```\r\n\r\nHowever, if we fork the Ethereum mainnet state, it fails:\r\n```bash\r\nforge test -vvv --fork-url <SOME_MAINNET_RPC_URL>\r\n```\r\n\r\nExamining stack traces, one'll find a strange number `5656000000000000000`. This is, in fact, the actual mainnet balance of an address [`0xce71065d4017f316ec606fe4422e11eb2c47c246`](https://etherscan.io/address/0xce71065d4017f316ec606fe4422e11eb2c47c246) at which `x` is deployed.",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/3616/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3616/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1304591683",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3616#issuecomment-1304591683",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3616",
    "id": 1304591683,
    "node_id": "IC_kwDOGBlvNc5Nwn1D",
    "user": {
      "login": "mattsse",
      "id": 19890894,
      "node_id": "MDQ6VXNlcjE5ODkwODk0",
      "avatar_url": "https://avatars.githubusercontent.com/u/19890894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mattsse",
      "html_url": "https://github.com/mattsse",
      "followers_url": "https://api.github.com/users/mattsse/followers",
      "following_url": "https://api.github.com/users/mattsse/following{/other_user}",
      "gists_url": "https://api.github.com/users/mattsse/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mattsse/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mattsse/subscriptions",
      "organizations_url": "https://api.github.com/users/mattsse/orgs",
      "repos_url": "https://api.github.com/users/mattsse/repos",
      "events_url": "https://api.github.com/users/mattsse/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mattsse/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-05T17:09:49Z",
    "updated_at": "2022-11-05T17:09:49Z",
    "author_association": "MEMBER",
    "body": "ah lol `0xCe71065D4017F316EC606Fe4422e11eB2c47c246` is in fact the address that's derived for the first contract created in a test deployed by the default sender (0x00a329c0648769a73afac7f9381e08fb43dbea72)\r\n\r\nBut since this is triggered by the test contract, I think the correct behaviour here would be to initialize an empty account instead of retrieving it from the forked chain.\r\n\r\nwdyt @mds1 ?\r\n\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1304591683/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1304643821",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3616#issuecomment-1304643821",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3616",
    "id": 1304643821,
    "node_id": "IC_kwDOGBlvNc5Nw0jt",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-05T21:19:40Z",
    "updated_at": "2022-11-05T21:19:40Z",
    "author_association": "COLLABORATOR",
    "body": "Ahh interesting! Yea, I agree with that solutionâ€”whenever a contract is created in a test, consider that an empty account with the only state being the new code. And let's make sure this only applies to new contract deploys, e.g. if you `vm.etch` to an address it should still access forked chain state even if there's new etched bytecode there (hopefully I explained that well)\r\n\r\nWonder how someone accidentally sent 5.656 ETH to that address on mainnet ðŸ˜¬",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1304643821/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1304748137",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3616#issuecomment-1304748137",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3616",
    "id": 1304748137,
    "node_id": "IC_kwDOGBlvNc5NxOBp",
    "user": {
      "login": "mattsse",
      "id": 19890894,
      "node_id": "MDQ6VXNlcjE5ODkwODk0",
      "avatar_url": "https://avatars.githubusercontent.com/u/19890894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mattsse",
      "html_url": "https://github.com/mattsse",
      "followers_url": "https://api.github.com/users/mattsse/followers",
      "following_url": "https://api.github.com/users/mattsse/following{/other_user}",
      "gists_url": "https://api.github.com/users/mattsse/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mattsse/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mattsse/subscriptions",
      "organizations_url": "https://api.github.com/users/mattsse/orgs",
      "repos_url": "https://api.github.com/users/mattsse/repos",
      "events_url": "https://api.github.com/users/mattsse/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mattsse/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-06T09:41:41Z",
    "updated_at": "2022-11-06T09:41:41Z",
    "author_association": "MEMBER",
    "body": "hmm, thought about this a bit, and the fix is not trivial and also is unsound, because technically that's the correct behavior here, because the eth do actually exists in the contract's account",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1304748137/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1304839046",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3616#issuecomment-1304839046",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3616",
    "id": 1304839046,
    "node_id": "IC_kwDOGBlvNc5NxkOG",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-06T16:30:30Z",
    "updated_at": "2022-11-06T16:31:42Z",
    "author_association": "COLLABORATOR",
    "body": "Yea thatâ€™s fair about soundness, it did feel a bit dirty. Some other options:\r\n- Do nothing, and require users to just manually set the balance to zero when this occurs and is an issue for them (and note this in the book so itâ€™s easier to debug). This is trickier if the address has nonzero balance for a rebase token, but so far thatâ€™s just a hypothetical issue and weâ€™ve only seen this with ETH. \r\n-  When deploying a new contract, if the resulting address has a nonzero mainnet balance, bump deployers nonce then deploy (i.e. donâ€™t deploy to addresses that have balance). Downside is youâ€™d also need to run this check for every tokens, not just ETH. so perhaps get a big token list for popular chains, execute a [multicall](https://github.com/mds1/multicall) so itâ€™s just one RPC call, and bump nonce if any call returns nonzero. I donâ€™t think this affects determinism because no one should have a pk for those addrs so funds are stuck. But similarly weâ€™ve also only seen this with ETH so can probably just check that for now ",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1304839046/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
