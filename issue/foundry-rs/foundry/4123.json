{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/4123",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4123/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4123/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4123/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/4123",
  "id": 1548766013,
  "node_id": "I_kwDOGBlvNc5cUEs9",
  "number": 4123,
  "title": "Add support for arbitrary type max/mins in Cast",
  "user": {
    "login": "x676f64",
    "id": 53136615,
    "node_id": "MDQ6VXNlcjUzMTM2NjE1",
    "avatar_url": "https://avatars.githubusercontent.com/u/53136615?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/x676f64",
    "html_url": "https://github.com/x676f64",
    "followers_url": "https://api.github.com/users/x676f64/followers",
    "following_url": "https://api.github.com/users/x676f64/following{/other_user}",
    "gists_url": "https://api.github.com/users/x676f64/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/x676f64/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/x676f64/subscriptions",
    "organizations_url": "https://api.github.com/users/x676f64/orgs",
    "repos_url": "https://api.github.com/users/x676f64/repos",
    "events_url": "https://api.github.com/users/x676f64/events{/privacy}",
    "received_events_url": "https://api.github.com/users/x676f64/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3593644820,
      "node_id": "LA_kwDOGBlvNc7WMqsU",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-feature",
      "name": "T-feature",
      "color": "BFD4F2",
      "default": false,
      "description": "Type: feature"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2023-01-19T09:10:35Z",
  "updated_at": "2023-02-04T11:37:29Z",
  "closed_at": "2023-02-04T11:37:29Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "### Component\r\n\r\nCast\r\n\r\n### Describe the feature you would like\r\n\r\nInspired by PaulRBerg to add this feature request. It would be great if we could access arbitrary max/mix type values instead of just uint256/int256. It would be great if we could have access to a feature that basically does `type(uint).(max|min)`\r\n\r\nI would propose a format like so:\r\n```\r\n# cast max uint8\r\n255\r\n\r\n# cast min int8\r\n-128\r\n```\r\nAnd something like the following for abbreviations:\r\n```\r\n# cast mau8\r\n255\r\n# cast mi8\r\n-128\r\n```\r\nBonus points if you could add `--decimal/--dec` and `--hex` flags so we could display it in either format.\r\n\r\n### Additional context\r\n\r\n_No response_",
  "closed_by": {
    "login": "mattsse",
    "id": 19890894,
    "node_id": "MDQ6VXNlcjE5ODkwODk0",
    "avatar_url": "https://avatars.githubusercontent.com/u/19890894?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mattsse",
    "html_url": "https://github.com/mattsse",
    "followers_url": "https://api.github.com/users/mattsse/followers",
    "following_url": "https://api.github.com/users/mattsse/following{/other_user}",
    "gists_url": "https://api.github.com/users/mattsse/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mattsse/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mattsse/subscriptions",
    "organizations_url": "https://api.github.com/users/mattsse/orgs",
    "repos_url": "https://api.github.com/users/mattsse/repos",
    "events_url": "https://api.github.com/users/mattsse/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mattsse/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/4123/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4123/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1397012930",
    "html_url": "https://github.com/foundry-rs/foundry/issues/4123#issuecomment-1397012930",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4123",
    "id": 1397012930,
    "node_id": "IC_kwDOGBlvNc5TRLnC",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-19T13:52:04Z",
    "updated_at": "2023-01-19T13:52:04Z",
    "author_association": "COLLABORATOR",
    "body": "There is currently `cast --max-uint`, `cast --max-int`, and `cast --min-int` commands, which return values for the 256 bit types. I'd suggest adding an optional arg to that command which specifies the bit size instead of introducing a new command, e.g. `cast --max-uint 128`",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1397012930/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1397573146",
    "html_url": "https://github.com/foundry-rs/foundry/issues/4123#issuecomment-1397573146",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4123",
    "id": 1397573146,
    "node_id": "IC_kwDOGBlvNc5TTUYa",
    "user": {
      "login": "x676f64",
      "id": 53136615,
      "node_id": "MDQ6VXNlcjUzMTM2NjE1",
      "avatar_url": "https://avatars.githubusercontent.com/u/53136615?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/x676f64",
      "html_url": "https://github.com/x676f64",
      "followers_url": "https://api.github.com/users/x676f64/followers",
      "following_url": "https://api.github.com/users/x676f64/following{/other_user}",
      "gists_url": "https://api.github.com/users/x676f64/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/x676f64/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/x676f64/subscriptions",
      "organizations_url": "https://api.github.com/users/x676f64/orgs",
      "repos_url": "https://api.github.com/users/x676f64/repos",
      "events_url": "https://api.github.com/users/x676f64/events{/privacy}",
      "received_events_url": "https://api.github.com/users/x676f64/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-19T20:39:17Z",
    "updated_at": "2023-01-19T20:39:17Z",
    "author_association": "NONE",
    "body": "> There is currently `cast --max-uint`, `cast --max-int`, and `cast --min-int` commands, which return values for the 256 bit types. I'd suggest adding an optional arg to that command which specifies the bit size instead of introducing a new command, e.g. `cast --max-uint 128`\r\n\r\nThat would work for me.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1397573146/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
