{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/2638",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2638/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2638/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2638/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/2638",
  "id": 1330375386,
  "node_id": "I_kwDOGBlvNc5PS-ra",
  "number": 2638,
  "title": "feat: let user define create2 factory",
  "user": {
    "login": "sambacha",
    "id": 32783916,
    "node_id": "MDQ6VXNlcjMyNzgzOTE2",
    "avatar_url": "https://avatars.githubusercontent.com/u/32783916?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/sambacha",
    "html_url": "https://github.com/sambacha",
    "followers_url": "https://api.github.com/users/sambacha/followers",
    "following_url": "https://api.github.com/users/sambacha/following{/other_user}",
    "gists_url": "https://api.github.com/users/sambacha/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/sambacha/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/sambacha/subscriptions",
    "organizations_url": "https://api.github.com/users/sambacha/orgs",
    "repos_url": "https://api.github.com/users/sambacha/repos",
    "events_url": "https://api.github.com/users/sambacha/events{/privacy}",
    "received_events_url": "https://api.github.com/users/sambacha/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3593644820,
      "node_id": "LA_kwDOGBlvNc7WMqsU",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-feature",
      "name": "T-feature",
      "color": "BFD4F2",
      "default": false,
      "description": "Type: feature"
    },
    {
      "id": 3703752787,
      "node_id": "LA_kwDOGBlvNc7cwshT",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/C-forge",
      "name": "C-forge",
      "color": "5319E7",
      "default": false,
      "description": "Command: forge"
    },
    {
      "id": 4182991461,
      "node_id": "LA_kwDOGBlvNc75U2Jl",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/Cmd-forge-script",
      "name": "Cmd-forge-script",
      "color": "006B75",
      "default": false,
      "description": "Command: forge script"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [
    {
      "login": "Evalir",
      "id": 26014927,
      "node_id": "MDQ6VXNlcjI2MDE0OTI3",
      "avatar_url": "https://avatars.githubusercontent.com/u/26014927?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Evalir",
      "html_url": "https://github.com/Evalir",
      "followers_url": "https://api.github.com/users/Evalir/followers",
      "following_url": "https://api.github.com/users/Evalir/following{/other_user}",
      "gists_url": "https://api.github.com/users/Evalir/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Evalir/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Evalir/subscriptions",
      "organizations_url": "https://api.github.com/users/Evalir/orgs",
      "repos_url": "https://api.github.com/users/Evalir/repos",
      "events_url": "https://api.github.com/users/Evalir/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Evalir/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/milestones/1",
    "html_url": "https://github.com/foundry-rs/foundry/milestone/1",
    "labels_url": "https://api.github.com/repos/foundry-rs/foundry/milestones/1/labels",
    "id": 8140456,
    "node_id": "MI_kwDOGBlvNc4AfDao",
    "number": 1,
    "title": "v1.0.0",
    "description": "",
    "creator": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 27,
    "closed_issues": 152,
    "state": "open",
    "created_at": "2022-06-28T08:15:32Z",
    "updated_at": "2023-12-14T15:15:16Z",
    "due_on": null,
    "closed_at": null
  },
  "comments": 38,
  "created_at": "2022-08-05T20:38:51Z",
  "updated_at": "2023-12-22T14:24:01Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "### Component\n\nForge\n\n### Describe the feature you would like\n\n## Define CREATE2 Factory\r\n\r\nI do not want to use your factory, I want to use my own factory. \n\n### Additional context\n\nhttps://etherscan.io/address/0x4e59b44847b379578588920ca78fbf26c0b4956c no\r\nhttps://goerli.etherscan.io/address/0x179c98f5ccdb3bc7d7aefffa06fb7f608a301877#code yes",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/2638/reactions",
    "total_count": 7,
    "+1": 7,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2638/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1206855029",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2638#issuecomment-1206855029",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2638",
    "id": 1206855029,
    "node_id": "IC_kwDOGBlvNc5H7yV1",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-05T20:51:56Z",
    "updated_at": "2022-08-05T20:54:12Z",
    "author_association": "COLLABORATOR",
    "body": "This is a good config option to add, e.g. `create2_deployer = 0x123...`. Alternative name ideas: `create2_deployer_contract` or `create2_factory`",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1206855029/reactions",
      "total_count": 4,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 2,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1206856470",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2638#issuecomment-1206856470",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2638",
    "id": 1206856470,
    "node_id": "IC_kwDOGBlvNc5H7ysW",
    "user": {
      "login": "sambacha",
      "id": 32783916,
      "node_id": "MDQ6VXNlcjMyNzgzOTE2",
      "avatar_url": "https://avatars.githubusercontent.com/u/32783916?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sambacha",
      "html_url": "https://github.com/sambacha",
      "followers_url": "https://api.github.com/users/sambacha/followers",
      "following_url": "https://api.github.com/users/sambacha/following{/other_user}",
      "gists_url": "https://api.github.com/users/sambacha/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sambacha/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sambacha/subscriptions",
      "organizations_url": "https://api.github.com/users/sambacha/orgs",
      "repos_url": "https://api.github.com/users/sambacha/repos",
      "events_url": "https://api.github.com/users/sambacha/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sambacha/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-05T20:54:32Z",
    "updated_at": "2022-08-05T20:54:32Z",
    "author_association": "CONTRIBUTOR",
    "body": "Especially considering how etherscan represents the current factory, teams may prefer to have their own canonical factory (nothing preventing other people from using it ofc) etc etc ",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1206856470/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1206880912",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2638#issuecomment-1206880912",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2638",
    "id": 1206880912,
    "node_id": "IC_kwDOGBlvNc5H74qQ",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-05T21:22:02Z",
    "updated_at": "2022-08-05T21:22:32Z",
    "author_association": "COLLABORATOR",
    "body": "The main reasons to use another create2 deployer are (1) pass init data to be called after deploy, (2) more leading zeros for cheaper deploy, and I think that's it? Given that, an alternative is to mine a cheap address, agree on the deploy contract's code, deploy it to all the chains, and replace the current default. One downside here is this is a breaking change for anyone relying on the current deployer for vanity addresses.\r\n\r\n@sambacha would that work as an alternative / are there other reasons people might need a custom deployer? ",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1206880912/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1206887227",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2638#issuecomment-1206887227",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2638",
    "id": 1206887227,
    "node_id": "IC_kwDOGBlvNc5H76M7",
    "user": {
      "login": "sambacha",
      "id": 32783916,
      "node_id": "MDQ6VXNlcjMyNzgzOTE2",
      "avatar_url": "https://avatars.githubusercontent.com/u/32783916?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sambacha",
      "html_url": "https://github.com/sambacha",
      "followers_url": "https://api.github.com/users/sambacha/followers",
      "following_url": "https://api.github.com/users/sambacha/following{/other_user}",
      "gists_url": "https://api.github.com/users/sambacha/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sambacha/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sambacha/subscriptions",
      "organizations_url": "https://api.github.com/users/sambacha/orgs",
      "repos_url": "https://api.github.com/users/sambacha/repos",
      "events_url": "https://api.github.com/users/sambacha/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sambacha/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-05T21:26:52Z",
    "updated_at": "2022-08-05T21:30:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "> The main reasons to use another create2 deployer are (1) pass init data to be called after deploy, (2) more leading zeros for cheaper deploy, and I think that's it? Given that, an alternative is to mine a cheap address, agree on the deploy contract's code, deploy it to all the chains, and replace the current default. One downside here is this is a breaking change for anyone relying on the current deployer for vanity addresses.\r\n> \r\n> @sambacha would that work as an alternative / are there other reasons people might need a custom deployer?\r\n\r\nThe factory contract I linked has additional benefits such as:\r\n\r\n- There is also a view function that computes the address of the contract that will be created when submitting a given salt or nonce along with a given block of initialization code.\r\n\r\n- Determine if a contract has already been deployed by the factory to a given address.\r\n\r\n- Modifier to ensure that the first 20 bytes of a submitted salt match those of the calling account. This provides protection against the salt being stolen by frontrunners or other attackers. \r\n\r\nYes for leading zeros, I am using this: https://github.com/0age/create2crunch\r\n\r\nwdyt @mds1 ",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1206887227/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1206890209",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2638#issuecomment-1206890209",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2638",
    "id": 1206890209,
    "node_id": "IC_kwDOGBlvNc5H767h",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-05T21:29:43Z",
    "updated_at": "2022-08-05T21:33:40Z",
    "author_association": "COLLABORATOR",
    "body": "I think all of those are good ideas to include in a canonical create2 deployer contract 👌\r\n\r\nPerhaps next week I can scaffold out a proposed interface",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1206890209/reactions",
      "total_count": 5,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 1,
      "confused": 0,
      "heart": 0,
      "rocket": 2,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1207442953",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2638#issuecomment-1207442953",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2638",
    "id": 1207442953,
    "node_id": "IC_kwDOGBlvNc5H-B4J",
    "user": {
      "login": "joshieDo",
      "id": 93316087,
      "node_id": "U_kgDOBY_j9w",
      "avatar_url": "https://avatars.githubusercontent.com/u/93316087?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/joshieDo",
      "html_url": "https://github.com/joshieDo",
      "followers_url": "https://api.github.com/users/joshieDo/followers",
      "following_url": "https://api.github.com/users/joshieDo/following{/other_user}",
      "gists_url": "https://api.github.com/users/joshieDo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/joshieDo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/joshieDo/subscriptions",
      "organizations_url": "https://api.github.com/users/joshieDo/orgs",
      "repos_url": "https://api.github.com/users/joshieDo/repos",
      "events_url": "https://api.github.com/users/joshieDo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/joshieDo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-07T16:34:36Z",
    "updated_at": "2022-08-07T16:35:13Z",
    "author_association": "COLLABORATOR",
    "body": "The way we verify contracts or create the transaction depends on the factory we use. So just letting anyone use their own factory implementation is not that straightforward imo. So... if we can agree to a certain interface, it should be fine.\r\n\r\n> One downside here is this is a breaking change for anyone relying on the current deployer for vanity addresses\r\n\r\nTrue...\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1207442953/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1222827163",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2638#issuecomment-1222827163",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2638",
    "id": 1222827163,
    "node_id": "IC_kwDOGBlvNc5I4tyb",
    "user": {
      "login": "sambacha",
      "id": 32783916,
      "node_id": "MDQ6VXNlcjMyNzgzOTE2",
      "avatar_url": "https://avatars.githubusercontent.com/u/32783916?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sambacha",
      "html_url": "https://github.com/sambacha",
      "followers_url": "https://api.github.com/users/sambacha/followers",
      "following_url": "https://api.github.com/users/sambacha/following{/other_user}",
      "gists_url": "https://api.github.com/users/sambacha/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sambacha/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sambacha/subscriptions",
      "organizations_url": "https://api.github.com/users/sambacha/orgs",
      "repos_url": "https://api.github.com/users/sambacha/repos",
      "events_url": "https://api.github.com/users/sambacha/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sambacha/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-22T19:35:32Z",
    "updated_at": "2022-08-22T19:35:32Z",
    "author_association": "CONTRIBUTOR",
    "body": "> The way we verify contracts or create the transaction depends on the factory we use. So just letting anyone use their own factory implementation is not that straightforward imo. So... if we can agree to a certain interface, it should be fine.\r\n> \r\n> > One downside here is this is a breaking change for anyone relying on the current deployer for vanity addresses\r\n> \r\n> True...\r\n\r\nif your gonna break it, break it before v1.0 ",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1222827163/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1222840977",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2638#issuecomment-1222840977",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2638",
    "id": 1222840977,
    "node_id": "IC_kwDOGBlvNc5I4xKR",
    "user": {
      "login": "sambacha",
      "id": 32783916,
      "node_id": "MDQ6VXNlcjMyNzgzOTE2",
      "avatar_url": "https://avatars.githubusercontent.com/u/32783916?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sambacha",
      "html_url": "https://github.com/sambacha",
      "followers_url": "https://api.github.com/users/sambacha/followers",
      "following_url": "https://api.github.com/users/sambacha/following{/other_user}",
      "gists_url": "https://api.github.com/users/sambacha/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sambacha/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sambacha/subscriptions",
      "organizations_url": "https://api.github.com/users/sambacha/orgs",
      "repos_url": "https://api.github.com/users/sambacha/repos",
      "events_url": "https://api.github.com/users/sambacha/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sambacha/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-22T19:41:45Z",
    "updated_at": "2022-08-22T19:41:45Z",
    "author_association": "CONTRIBUTOR",
    "body": "> This is a good config option to add, e.g. `create2_deployer = 0x123...`. Alternative name ideas: `create2_deployer_contract` or `create2_factory`\r\n\r\n# FoundryCreate2FactoryV8",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1222840977/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1229644850",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2638#issuecomment-1229644850",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2638",
    "id": 1229644850,
    "node_id": "IC_kwDOGBlvNc5JSuQy",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-29T01:44:10Z",
    "updated_at": "2022-08-29T01:44:10Z",
    "author_association": "COLLABORATOR",
    "body": "Proposed create2 deployer below, feedback welcome. Interfaces (and the code comments) are largely based on @0age's [create2 deployer](https://etherscan.io/address/0x0000000000FFe8B47B3e2130213B802212439497#code), with a few modifications based on the above. \r\n\r\n```solidity\r\ncontract Create2Deployer {\r\n  // Mapping to track which addresses have already been deployed.\r\n  mapping(address => bool) public isDeployed;\r\n\r\n  /// @dev Create a contract using CREATE2 by submitting a given salt or nonce\r\n  /// along with the initialization code for the contract.\r\n  /// @return Address of the contract that will be created, or the null address\r\n  /// if a contract already exists at that address.\r\n  function create2(bytes32 salt, bytes calldata initCode)\r\n    external\r\n    payable\r\n    returns (address deploymentAddr);\r\n\r\n  /// @dev Create a contract using CREATE2 by submitting a given salt or nonce\r\n  /// along with the initialization code for the contract, and call the\r\n  /// contract after deployment with the provided data.\r\n  /// @return Address of the contract that will be created, or the null address\r\n  /// if a contract already exists at that address.\r\n  function create2(bytes32 salt, bytes calldata initCode, bytes calldata data)\r\n    external\r\n    payable\r\n    returns (address deploymentAddr);\r\n\r\n  /// @dev Create a contract using CREATE2 by submitting a given salt or nonce\r\n  /// along with the initialization code for the contract.\r\n  /// @dev The first 20 bytes of the salt must match those of the calling\r\n  /// address, which prevents contract creation events from being submitted by\r\n  /// unintended parties.\r\n  /// @return Address of the contract that will be created, or the null address\r\n  /// if a contract already exists at that address.\r\n  function safeCreate2(bytes32 salt, bytes calldata initCode)\r\n    external\r\n    payable\r\n    containsCaller(salt)\r\n    returns (address deploymentAddr);\r\n\r\n  /// @dev Create a contract using CREATE2 by submitting a given salt or nonce\r\n  /// along with the initialization code for the contract, and call the\r\n  /// contract after deployment with the provided data.\r\n  /// @dev The first 20 bytes of the salt must match those of the calling\r\n  /// address, which prevents contract creation events from being submitted by\r\n  /// unintended parties.\r\n  /// @return Address of the contract that will be created, or the null address\r\n  /// if a contract already exists at that address.\r\n  function safeCreate2(bytes32 salt, bytes calldata initCode, bytes calldata data)\r\n    external\r\n    payable\r\n    containsCaller(salt)\r\n    returns (address deploymentAddr);\r\n\r\n  /// @dev Compute the address of the contract that will be created when\r\n  /// submitting a given salt or nonce to the contract along with the contract's\r\n  /// initialization code.\r\n  /// @return Address of the contract that will be created, or the null address\r\n  /// if a contract has already been deployed to that address.\r\n  function computeCreate2Address(bytes32 salt, bytes calldata initCode)\r\n    external\r\n    view\r\n    returns (address deploymentAddr);\r\n\r\n  /// @dev Compute the address of the contract that will be created when\r\n  /// submitting a given salt or nonce to the contract along with the keccak256\r\n  /// hash of the contract's initialization code.\r\n  /// @return Address of the contract that will be created, or the null address\r\n  /// if a contract has already been deployed to that address.\r\n  function computeCreate2Address(bytes32 salt, bytes32 initCodeHash)\r\n    external\r\n    view\r\n    returns (address deploymentAddress);\r\n\r\n  /// @dev Modifier to ensure that the first 20 bytes of a submitted salt match\r\n  /// those of the calling account. This provides protection against the salt\r\n  /// being stolen by frontrunners or other attackers. The protection can also be\r\n  /// bypassed if desired by setting each of the first 20 bytes to zero.\r\n  /// @param salt bytes32 The salt value to check against the calling address.\r\n  modifier containsCaller(bytes32 salt) {\r\n    require(\r\n      (address(bytes20(salt)) == msg.sender) || (bytes20(salt) == bytes20(0)),\r\n      \"Invalid salt: first 20 bytes of the salt must match calling address.\"\r\n    );\r\n    _;\r\n  }\r\n}\r\n```\r\n\r\nWe can arguably remove either (1) the `containsCaller` bypass of `bytes20(salt) == bytes20(0)` OR (2) the dedicated `create2` methods, since it's a bit redundant, but I think it's worth keeping both because:\r\n- Existing tooling for mining vanity addresses fits better with `create2` (i.e. they don't often let you add limitations on the salt)\r\n- Removing the bypass doesn't save much gas anyway so can't hurt to keep it to add compatibility for anyone who relies on that\r\n\r\ncc'ing a few people for feedback who I think are interested: @sambacha @gakonst @joshieDo @pcaversaccio @storming0x",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1229644850/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1229648193",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2638#issuecomment-1229648193",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2638",
    "id": 1229648193,
    "node_id": "IC_kwDOGBlvNc5JSvFB",
    "user": {
      "login": "sambacha",
      "id": 32783916,
      "node_id": "MDQ6VXNlcjMyNzgzOTE2",
      "avatar_url": "https://avatars.githubusercontent.com/u/32783916?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sambacha",
      "html_url": "https://github.com/sambacha",
      "followers_url": "https://api.github.com/users/sambacha/followers",
      "following_url": "https://api.github.com/users/sambacha/following{/other_user}",
      "gists_url": "https://api.github.com/users/sambacha/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sambacha/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sambacha/subscriptions",
      "organizations_url": "https://api.github.com/users/sambacha/orgs",
      "repos_url": "https://api.github.com/users/sambacha/repos",
      "events_url": "https://api.github.com/users/sambacha/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sambacha/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-29T01:48:50Z",
    "updated_at": "2022-08-29T01:48:50Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Proposed create2 deployer below, feedback welcome. Interfaces (and the code comments) are largely based on @0age's [create2 deployer](https://etherscan.io/address/0x0000000000FFe8B47B3e2130213B802212439497#code), with a few modifications based on the above.\r\n> \r\n> ```solidity\r\n> contract Create2Deployer {\r\n>   // Mapping to track which addresses have already been deployed.\r\n>   mapping(address => bool) public isDeployed;\r\n> \r\n>   /// @dev Create a contract using CREATE2 by submitting a given salt or nonce\r\n>   /// along with the initialization code for the contract.\r\n>   /// @return Address of the contract that will be created, or the null address\r\n>   /// if a contract already exists at that address.\r\n>   function create2(bytes32 salt, bytes calldata initCode)\r\n>     external\r\n>     payable\r\n>     returns (address deploymentAddr);\r\n> \r\n>   /// @dev Create a contract using CREATE2 by submitting a given salt or nonce\r\n>   /// along with the initialization code for the contract, and call the\r\n>   /// contract after deployment with the provided data.\r\n>   /// @return Address of the contract that will be created, or the null address\r\n>   /// if a contract already exists at that address.\r\n>   function create2(bytes32 salt, bytes calldata initCode, bytes calldata data)\r\n>     external\r\n>     payable\r\n>     returns (address deploymentAddr);\r\n> \r\n>   /// @dev Create a contract using CREATE2 by submitting a given salt or nonce\r\n>   /// along with the initialization code for the contract.\r\n>   /// @dev The first 20 bytes of the salt must match those of the calling\r\n>   /// address, which prevents contract creation events from being submitted by\r\n>   /// unintended parties.\r\n>   /// @return Address of the contract that will be created, or the null address\r\n>   /// if a contract already exists at that address.\r\n>   function safeCreate2(bytes32 salt, bytes calldata initCode)\r\n>     external\r\n>     payable\r\n>     containsCaller(salt)\r\n>     returns (address deploymentAddr);\r\n> \r\n>   /// @dev Create a contract using CREATE2 by submitting a given salt or nonce\r\n>   /// along with the initialization code for the contract, and call the\r\n>   /// contract after deployment with the provided data.\r\n>   /// @dev The first 20 bytes of the salt must match those of the calling\r\n>   /// address, which prevents contract creation events from being submitted by\r\n>   /// unintended parties.\r\n>   /// @return Address of the contract that will be created, or the null address\r\n>   /// if a contract already exists at that address.\r\n>   function safeCreate2(bytes32 salt, bytes calldata initCode, bytes calldata data)\r\n>     external\r\n>     payable\r\n>     containsCaller(salt)\r\n>     returns (address deploymentAddr);\r\n> \r\n>   /// @dev Compute the address of the contract that will be created when\r\n>   /// submitting a given salt or nonce to the contract along with the contract's\r\n>   /// initialization code.\r\n>   /// @return Address of the contract that will be created, or the null address\r\n>   /// if a contract has already been deployed to that address.\r\n>   function computeCreate2Address(bytes32 salt, bytes calldata initCode)\r\n>     external\r\n>     view\r\n>     returns (address deploymentAddr);\r\n> \r\n>   /// @dev Compute the address of the contract that will be created when\r\n>   /// submitting a given salt or nonce to the contract along with the keccak256\r\n>   /// hash of the contract's initialization code.\r\n>   /// @return Address of the contract that will be created, or the null address\r\n>   /// if a contract has already been deployed to that address.\r\n>   function computeCreate2Address(bytes32 salt, bytes32 initCodeHash)\r\n>     external\r\n>     view\r\n>     returns (address deploymentAddress);\r\n> \r\n>   /// @dev Modifier to ensure that the first 20 bytes of a submitted salt match\r\n>   /// those of the calling account. This provides protection against the salt\r\n>   /// being stolen by frontrunners or other attackers. The protection can also be\r\n>   /// bypassed if desired by setting each of the first 20 bytes to zero.\r\n>   /// @param salt bytes32 The salt value to check against the calling address.\r\n>   modifier containsCaller(bytes32 salt) {\r\n>     require(\r\n>       (address(bytes20(salt)) == msg.sender) || (bytes20(salt) == bytes20(0)),\r\n>       \"Invalid salt: first 20 bytes of the salt must match calling address.\"\r\n>     );\r\n>     _;\r\n>   }\r\n> }\r\n> ```\r\n> \r\n> We can arguably remove either (1) the `containsCaller` bypass of `bytes20(salt) == bytes20(0)` OR (2) the dedicated `create2` methods, since it's a bit redundant, but I think it's worth keeping both because:\r\n> \r\n> * Existing tooling for mining vanity addresses fits better with `create2` (i.e. they don't often let you add limitations on the salt)\r\n> * Removing the bypass doesn't save much gas anyway so can't hurt to keep it to add compatibility for anyone who relies on that\r\n> \r\n> cc'ing a few people for feedback who I think are interested: @sambacha @gakonst @joshieDo @pcaversaccio @storming0x\r\n\r\nShould there be any chain id information included ? \r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1229648193/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1229651333",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2638#issuecomment-1229651333",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2638",
    "id": 1229651333,
    "node_id": "IC_kwDOGBlvNc5JSv2F",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-29T01:53:36Z",
    "updated_at": "2022-08-29T01:53:36Z",
    "author_association": "COLLABORATOR",
    "body": "What chain ID information did you have in mind?\n\nAnother method that hashes your salt with chain ID to prevent redeploying to another chain at the same address might be a good idea",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1229651333/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1229668800",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2638#issuecomment-1229668800",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2638",
    "id": 1229668800,
    "node_id": "IC_kwDOGBlvNc5JS0HA",
    "user": {
      "login": "sambacha",
      "id": 32783916,
      "node_id": "MDQ6VXNlcjMyNzgzOTE2",
      "avatar_url": "https://avatars.githubusercontent.com/u/32783916?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sambacha",
      "html_url": "https://github.com/sambacha",
      "followers_url": "https://api.github.com/users/sambacha/followers",
      "following_url": "https://api.github.com/users/sambacha/following{/other_user}",
      "gists_url": "https://api.github.com/users/sambacha/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sambacha/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sambacha/subscriptions",
      "organizations_url": "https://api.github.com/users/sambacha/orgs",
      "repos_url": "https://api.github.com/users/sambacha/repos",
      "events_url": "https://api.github.com/users/sambacha/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sambacha/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-29T02:16:57Z",
    "updated_at": "2022-08-29T02:19:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "> What chain ID information did you have in mind?\n> \n> Another method that hashes your salt with chain ID to prevent redeploying to another chain at the same address might be a good idea\n\n\nThis is what I had in mind, but then again I am not sure if its even useful. \n\nIt would be useful in the edge case of contentious forks, so def YMMV\n~~~solidity\n\n/// constructor \ndeploymentChainId = block.chainid;\n_DOMAIN_SEPARATOR = _calculateDomainSeparator(block.chainid);\n\n\n/// ... Return the DOMAIN_SEPARATOR.\nreturn block.chainid == deploymentChainId ? _DOMAIN_SEPARATOR : _calculateDomainSeparator(block.chainid);\n\n\n/// ...abi.encode\nblock.chainid == deploymentChainId ? _DOMAIN_SEPARATOR : _calculateDomainSeparator(block.chainid),\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1229668800/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1230307365",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2638#issuecomment-1230307365",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2638",
    "id": 1230307365,
    "node_id": "IC_kwDOGBlvNc5JVQAl",
    "user": {
      "login": "storming0x",
      "id": 6074987,
      "node_id": "MDQ6VXNlcjYwNzQ5ODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6074987?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/storming0x",
      "html_url": "https://github.com/storming0x",
      "followers_url": "https://api.github.com/users/storming0x/followers",
      "following_url": "https://api.github.com/users/storming0x/following{/other_user}",
      "gists_url": "https://api.github.com/users/storming0x/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/storming0x/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/storming0x/subscriptions",
      "organizations_url": "https://api.github.com/users/storming0x/orgs",
      "repos_url": "https://api.github.com/users/storming0x/repos",
      "events_url": "https://api.github.com/users/storming0x/events{/privacy}",
      "received_events_url": "https://api.github.com/users/storming0x/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-29T13:28:16Z",
    "updated_at": "2022-08-29T13:28:16Z",
    "author_association": "NONE",
    "body": "Thanks for tagging, yeah i think this covers our use case mostly, being able to deploy init type smart contracts with create2",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1230307365/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1231327205",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2638#issuecomment-1231327205",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2638",
    "id": 1231327205,
    "node_id": "IC_kwDOGBlvNc5JZI_l",
    "user": {
      "login": "pcaversaccio",
      "id": 25297591,
      "node_id": "MDQ6VXNlcjI1Mjk3NTkx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25297591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pcaversaccio",
      "html_url": "https://github.com/pcaversaccio",
      "followers_url": "https://api.github.com/users/pcaversaccio/followers",
      "following_url": "https://api.github.com/users/pcaversaccio/following{/other_user}",
      "gists_url": "https://api.github.com/users/pcaversaccio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pcaversaccio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pcaversaccio/subscriptions",
      "organizations_url": "https://api.github.com/users/pcaversaccio/orgs",
      "repos_url": "https://api.github.com/users/pcaversaccio/repos",
      "events_url": "https://api.github.com/users/pcaversaccio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pcaversaccio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-30T08:24:52Z",
    "updated_at": "2022-08-30T08:31:51Z",
    "author_association": "CONTRIBUTOR",
    "body": "@mds1 thanks for tagging me - the suggested interface would not be compatible with my [`Create2Deployer.sol`](https://github.com/pcaversaccio/create2deployer/blob/main/contracts/Create2Deployer.sol) code. I use the following semantics:\r\n\r\n ```solidity\r\n/**\r\n  * @dev Deploys a contract using `CREATE2`. The address where the\r\n  * contract will be deployed can be known in advance via {computeAddress}.\r\n  *\r\n  * The bytecode for a contract can be obtained from Solidity with\r\n  * `type(contractName).creationCode`.\r\n  *\r\n  * Requirements:\r\n  * - `bytecode` must not be empty.\r\n  * - `salt` must have not been used for `bytecode` already.\r\n  * - the factory must have a balance of at least `value`.\r\n  * - if `value` is non-zero, `bytecode` must have a `payable` constructor.\r\n  */\r\nfunction deploy(uint256 value, bytes32 salt, bytes memory code) external returns (address addr);\r\n\r\n/**\r\n  * @dev Deployment of the {ERC1820Implementer}.\r\n  * Further information: https://eips.ethereum.org/EIPS/eip-1820\r\n  */\r\nfunction deployERC1820Implementer(uint256 value, bytes32 salt) external returns (address addr);\r\n\r\n/**\r\n  * @dev Returns the address where a contract will be stored if deployed via {deploy}.\r\n  * Any change in the `bytecodeHash` or `salt` will result in a new destination address.\r\n  */\r\nfunction computeAddress(bytes32 salt, bytes32 codeHash) external view returns (address addr);\r\n\r\n/**\r\n  * @dev Returns the address where a contract will be stored if deployed via {deploy} from a\r\n  * contract located at `deployer`. If `deployer` is this contract's address, returns the\r\n  * same value as {computeAddress}.\r\n  */\r\nfunction computeAddressWithDeployer(bytes32 salt, bytes32 codeHash, address deployer) external pure returns (address addr);\r\n```\r\n\r\nThe `payable` feature is implemented via a `receive` function in the contract itself. So the question is whether the interface should be compatible with my deployed factory or not - generally, I like the definition of the interface except for the keyword `safe`. Can we get rid of this, please ;-)?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1231327205/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1231448795",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2638#issuecomment-1231448795",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2638",
    "id": 1231448795,
    "node_id": "IC_kwDOGBlvNc5JZmrb",
    "user": {
      "login": "sambacha",
      "id": 32783916,
      "node_id": "MDQ6VXNlcjMyNzgzOTE2",
      "avatar_url": "https://avatars.githubusercontent.com/u/32783916?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sambacha",
      "html_url": "https://github.com/sambacha",
      "followers_url": "https://api.github.com/users/sambacha/followers",
      "following_url": "https://api.github.com/users/sambacha/following{/other_user}",
      "gists_url": "https://api.github.com/users/sambacha/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sambacha/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sambacha/subscriptions",
      "organizations_url": "https://api.github.com/users/sambacha/orgs",
      "repos_url": "https://api.github.com/users/sambacha/repos",
      "events_url": "https://api.github.com/users/sambacha/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sambacha/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-30T10:03:59Z",
    "updated_at": "2022-08-30T10:03:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "> @mds1 thanks for tagging me - the suggested interface would not be compatible with my [`Create2Deployer.sol`](https://github.com/pcaversaccio/create2deployer/blob/main/contracts/Create2Deployer.sol) code. I use the following semantics:\r\n> \r\n> ```solidity\r\n> /**\r\n>  * @dev Deploys a contract using `CREATE2`. The address where the\r\n>  * contract will be deployed can be known in advance via {computeAddress}.\r\n>  *\r\n>  * The bytecode for a contract can be obtained from Solidity with\r\n>  * `type(contractName).creationCode`.\r\n>  *\r\n>  * Requirements:\r\n>  * - `bytecode` must not be empty.\r\n>  * - `salt` must have not been used for `bytecode` already.\r\n>  * - the factory must have a balance of at least `value`.\r\n>  * - if `value` is non-zero, `bytecode` must have a `payable` constructor.\r\n>  */\r\n> function deploy(uint256 value, bytes32 salt, bytes memory code) external returns (address addr);\r\n> \r\n> /**\r\n>  * @dev Deployment of the {ERC1820Implementer}.\r\n>  * Further information: https://eips.ethereum.org/EIPS/eip-1820\r\n>  */\r\n> function deployERC1820Implementer(uint256 value, bytes32 salt) external returns (address addr);\r\n> \r\n> /**\r\n>  * @dev Returns the address where a contract will be stored if deployed via {deploy}.\r\n>  * Any change in the `bytecodeHash` or `salt` will result in a new destination address.\r\n>  */\r\n> function computeAddress(bytes32 salt, bytes32 codeHash) external view returns (address addr);\r\n> \r\n> /**\r\n>  * @dev Returns the address where a contract will be stored if deployed via {deploy} from a\r\n>  * contract located at `deployer`. If `deployer` is this contract's address, returns the\r\n>  * same value as {computeAddress}.\r\n>  */\r\n> function computeAddressWithDeployer(bytes32 salt, bytes32 codeHash, address deployer) external pure returns (address addr);\r\n> ```\r\n> \r\n> The `payable` feature is implemented via a `receive` function in the contract itself. So the question is whether the interface should be compatible with my deployed factory or not - generally, I like the definition of the interface except for the keyword `safe`. Can we get rid of this, please ;-)?\r\n\r\n🫂✨⭐️💫",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1231448795/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1328113121",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2638#issuecomment-1328113121",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2638",
    "id": 1328113121,
    "node_id": "IC_kwDOGBlvNc5PKWXh",
    "user": {
      "login": "zjesko",
      "id": 42722188,
      "node_id": "MDQ6VXNlcjQyNzIyMTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/42722188?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zjesko",
      "html_url": "https://github.com/zjesko",
      "followers_url": "https://api.github.com/users/zjesko/followers",
      "following_url": "https://api.github.com/users/zjesko/following{/other_user}",
      "gists_url": "https://api.github.com/users/zjesko/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zjesko/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zjesko/subscriptions",
      "organizations_url": "https://api.github.com/users/zjesko/orgs",
      "repos_url": "https://api.github.com/users/zjesko/repos",
      "events_url": "https://api.github.com/users/zjesko/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zjesko/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-26T20:56:45Z",
    "updated_at": "2022-11-26T20:57:44Z",
    "author_association": "NONE",
    "body": "any progress on this? is there a way to define the address for a custom create2 factory?\r\n\r\nwould love to work on it and open a PR if it makes sense to do so",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1328113121/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1328115284",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2638#issuecomment-1328115284",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2638",
    "id": 1328115284,
    "node_id": "IC_kwDOGBlvNc5PKW5U",
    "user": {
      "login": "gakonst",
      "id": 17802178,
      "node_id": "MDQ6VXNlcjE3ODAyMTc4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17802178?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gakonst",
      "html_url": "https://github.com/gakonst",
      "followers_url": "https://api.github.com/users/gakonst/followers",
      "following_url": "https://api.github.com/users/gakonst/following{/other_user}",
      "gists_url": "https://api.github.com/users/gakonst/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gakonst/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gakonst/subscriptions",
      "organizations_url": "https://api.github.com/users/gakonst/orgs",
      "repos_url": "https://api.github.com/users/gakonst/repos",
      "events_url": "https://api.github.com/users/gakonst/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gakonst/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-26T21:11:01Z",
    "updated_at": "2022-11-26T21:11:01Z",
    "author_association": "MEMBER",
    "body": "Nobody's on it, feel free to go for it!",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1328115284/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1328238990",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2638#issuecomment-1328238990",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2638",
    "id": 1328238990,
    "node_id": "IC_kwDOGBlvNc5PK1GO",
    "user": {
      "login": "zjesko",
      "id": 42722188,
      "node_id": "MDQ6VXNlcjQyNzIyMTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/42722188?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zjesko",
      "html_url": "https://github.com/zjesko",
      "followers_url": "https://api.github.com/users/zjesko/followers",
      "following_url": "https://api.github.com/users/zjesko/following{/other_user}",
      "gists_url": "https://api.github.com/users/zjesko/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zjesko/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zjesko/subscriptions",
      "organizations_url": "https://api.github.com/users/zjesko/orgs",
      "repos_url": "https://api.github.com/users/zjesko/repos",
      "events_url": "https://api.github.com/users/zjesko/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zjesko/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-27T12:42:48Z",
    "updated_at": "2022-11-27T12:42:48Z",
    "author_association": "NONE",
    "body": "sounds good @gakonst, Ill start working on it.\r\n\r\nAs per my understanding the main goal here is to add a parameter like `create2_deployer` which lets a user use a custom create2 factory instead of the default 0x4e59b44847b379578588920ca78fbf26c0b4956c. This is useful for the following reasons:\r\n\r\n- Enables usage of alternative improved create2 custom contracts as described above in the thread.\r\n- There is no way to deploy the create2 0x4e59b44847b379578588920ca78fbf26c0b4956c on chains not supporting pre EIP-155 transactions. (The transaction mentioned here can not be replayed https://github.com/Arachnid/deterministic-deployment-proxy#latest-outputs). Eg. CANTO (http://chainlist.org/chain/7700)\r\n\r\n\r\nDoes this make sense? @mds1 @joshieDo \r\n\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1328238990/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1328266480",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2638#issuecomment-1328266480",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2638",
    "id": 1328266480,
    "node_id": "IC_kwDOGBlvNc5PK7zw",
    "user": {
      "login": "joshieDo",
      "id": 93316087,
      "node_id": "U_kgDOBY_j9w",
      "avatar_url": "https://avatars.githubusercontent.com/u/93316087?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/joshieDo",
      "html_url": "https://github.com/joshieDo",
      "followers_url": "https://api.github.com/users/joshieDo/followers",
      "following_url": "https://api.github.com/users/joshieDo/following{/other_user}",
      "gists_url": "https://api.github.com/users/joshieDo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/joshieDo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/joshieDo/subscriptions",
      "organizations_url": "https://api.github.com/users/joshieDo/orgs",
      "repos_url": "https://api.github.com/users/joshieDo/repos",
      "events_url": "https://api.github.com/users/joshieDo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/joshieDo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-27T15:09:47Z",
    "updated_at": "2022-11-27T15:09:47Z",
    "author_association": "COLLABORATOR",
    "body": "> The way we verify contracts or create the transaction depends on the factory we use. So just letting anyone use their own factory implementation is not that straightforward imo. So... if we can agree to a certain interface, it should be fine.\r\n\r\nI think the core issue is not just about a custom factory, but agreeing on a specific interface for a new factory.\r\n\r\nSure, having a parameter for a custom factory is nice, but for the reasons given above, it has to share the same interface as the default factory.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1328266480/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1328293061",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2638#issuecomment-1328293061",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2638",
    "id": 1328293061,
    "node_id": "IC_kwDOGBlvNc5PLCTF",
    "user": {
      "login": "zjesko",
      "id": 42722188,
      "node_id": "MDQ6VXNlcjQyNzIyMTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/42722188?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zjesko",
      "html_url": "https://github.com/zjesko",
      "followers_url": "https://api.github.com/users/zjesko/followers",
      "following_url": "https://api.github.com/users/zjesko/following{/other_user}",
      "gists_url": "https://api.github.com/users/zjesko/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zjesko/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zjesko/subscriptions",
      "organizations_url": "https://api.github.com/users/zjesko/orgs",
      "repos_url": "https://api.github.com/users/zjesko/repos",
      "events_url": "https://api.github.com/users/zjesko/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zjesko/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-27T16:49:19Z",
    "updated_at": "2022-11-27T16:50:05Z",
    "author_association": "NONE",
    "body": "This sounds good. I'll add this feature while making sure the create2 interface is shared by the default one",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1328293061/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1384824610",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2638#issuecomment-1384824610",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2638",
    "id": 1384824610,
    "node_id": "IC_kwDOGBlvNc5Sir8i",
    "user": {
      "login": "sambacha",
      "id": 32783916,
      "node_id": "MDQ6VXNlcjMyNzgzOTE2",
      "avatar_url": "https://avatars.githubusercontent.com/u/32783916?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sambacha",
      "html_url": "https://github.com/sambacha",
      "followers_url": "https://api.github.com/users/sambacha/followers",
      "following_url": "https://api.github.com/users/sambacha/following{/other_user}",
      "gists_url": "https://api.github.com/users/sambacha/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sambacha/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sambacha/subscriptions",
      "organizations_url": "https://api.github.com/users/sambacha/orgs",
      "repos_url": "https://api.github.com/users/sambacha/repos",
      "events_url": "https://api.github.com/users/sambacha/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sambacha/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-17T04:42:25Z",
    "updated_at": "2023-01-17T04:42:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "Any movement on this for v1.0",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1384824610/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1400810876",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2638#issuecomment-1400810876",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2638",
    "id": 1400810876,
    "node_id": "IC_kwDOGBlvNc5Tfq18",
    "user": {
      "login": "zjesko",
      "id": 42722188,
      "node_id": "MDQ6VXNlcjQyNzIyMTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/42722188?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zjesko",
      "html_url": "https://github.com/zjesko",
      "followers_url": "https://api.github.com/users/zjesko/followers",
      "following_url": "https://api.github.com/users/zjesko/following{/other_user}",
      "gists_url": "https://api.github.com/users/zjesko/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zjesko/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zjesko/subscriptions",
      "organizations_url": "https://api.github.com/users/zjesko/orgs",
      "repos_url": "https://api.github.com/users/zjesko/repos",
      "events_url": "https://api.github.com/users/zjesko/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zjesko/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-23T18:43:28Z",
    "updated_at": "2023-01-23T18:43:28Z",
    "author_association": "NONE",
    "body": "Hello, I didn't get time to work on it earlier, but will now try to open a PR asap",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1400810876/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1400811785",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2638#issuecomment-1400811785",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2638",
    "id": 1400811785,
    "node_id": "IC_kwDOGBlvNc5TfrEJ",
    "user": {
      "login": "sambacha",
      "id": 32783916,
      "node_id": "MDQ6VXNlcjMyNzgzOTE2",
      "avatar_url": "https://avatars.githubusercontent.com/u/32783916?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sambacha",
      "html_url": "https://github.com/sambacha",
      "followers_url": "https://api.github.com/users/sambacha/followers",
      "following_url": "https://api.github.com/users/sambacha/following{/other_user}",
      "gists_url": "https://api.github.com/users/sambacha/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sambacha/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sambacha/subscriptions",
      "organizations_url": "https://api.github.com/users/sambacha/orgs",
      "repos_url": "https://api.github.com/users/sambacha/repos",
      "events_url": "https://api.github.com/users/sambacha/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sambacha/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-23T18:44:25Z",
    "updated_at": "2023-01-23T18:44:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Hello, I didn't get time to work on it earlier, but will now try to open a PR asap\n\nHell yea lmk if you need any help",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1400811785/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1402894439",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2638#issuecomment-1402894439",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2638",
    "id": 1402894439,
    "node_id": "IC_kwDOGBlvNc5Tnnhn",
    "user": {
      "login": "zjesko",
      "id": 42722188,
      "node_id": "MDQ6VXNlcjQyNzIyMTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/42722188?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zjesko",
      "html_url": "https://github.com/zjesko",
      "followers_url": "https://api.github.com/users/zjesko/followers",
      "following_url": "https://api.github.com/users/zjesko/following{/other_user}",
      "gists_url": "https://api.github.com/users/zjesko/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zjesko/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zjesko/subscriptions",
      "organizations_url": "https://api.github.com/users/zjesko/orgs",
      "repos_url": "https://api.github.com/users/zjesko/repos",
      "events_url": "https://api.github.com/users/zjesko/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zjesko/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-25T00:49:44Z",
    "updated_at": "2023-01-29T03:41:57Z",
    "author_association": "NONE",
    "body": "Hello @sambacha @joshieDo @mds1 \r\n\r\nHad a quick question regarding the interface.\r\n\r\nCurrently for example,\r\n\r\n```\r\nbytes32 constant SALT = bytes32(uint256(0x00...))\r\nvm.startBroadcast();\r\n        // deploy with create\r\n        permit2 = new Permit2();\r\n\r\n        // deploy with create2\r\n        permit2 = new Permit2{salt: SALT}();\r\nvm.stopBroadcast();\r\n```\r\n\r\nThis common create scheme comes directly from the revm library:\r\n```\r\npub enum CreateScheme {\r\n    /// Legacy create scheme of `CREATE`.\r\n    Create,\r\n    /// Create scheme of `CREATE2`.\r\n    Create2 {\r\n        /// Salt.\r\n        salt: U256,\r\n    },\r\n}\r\n```\r\n\r\nSo should we change this schema to accommodate something similar to `permit2 = new Permit2{salt: SALT, deployerCreate2: CREATE2_ADDRESS}();` OR instead add a forge-std helper method such as `deployCreate2(string contractName, bytes32 salt, bytes memory constructorData, bytes memory initData, address deployer)`\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1402894439/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1402895684",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2638#issuecomment-1402895684",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2638",
    "id": 1402895684,
    "node_id": "IC_kwDOGBlvNc5Tnn1E",
    "user": {
      "login": "sambacha",
      "id": 32783916,
      "node_id": "MDQ6VXNlcjMyNzgzOTE2",
      "avatar_url": "https://avatars.githubusercontent.com/u/32783916?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sambacha",
      "html_url": "https://github.com/sambacha",
      "followers_url": "https://api.github.com/users/sambacha/followers",
      "following_url": "https://api.github.com/users/sambacha/following{/other_user}",
      "gists_url": "https://api.github.com/users/sambacha/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sambacha/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sambacha/subscriptions",
      "organizations_url": "https://api.github.com/users/sambacha/orgs",
      "repos_url": "https://api.github.com/users/sambacha/repos",
      "events_url": "https://api.github.com/users/sambacha/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sambacha/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-25T00:51:39Z",
    "updated_at": "2023-01-25T00:51:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Hello @sambacha @joshieDo @mds1 \n> \n> \n> \n> Had a quick question regarding the interface.\n> \n> \n> \n> Currently for example,\n> \n> \n> \n> ```\n> \n> bytes32 constant SALT = bytes32(uint256(0x00...))\n> \n> vm.startBroadcast();\n> \n>         // deploy with create\n> \n>         permit2 = new Permit2();\n> \n> \n> \n>         // deploy with create2\n> \n>         permit2 = new Permit2{salt: SALT}();\n> \n> vm.stopBroadcast();\n> \n> ```\n> \n> \n> \n> This common create scheme comes directly from the revm library:\n> \n> ```\n> \n> pub enum CreateScheme {\n> \n>     /// Legacy create scheme of `CREATE`.\n> \n>     Create,\n> \n>     /// Create scheme of `CREATE2`.\n> \n>     Create2 {\n> \n>         /// Salt.\n> \n>         salt: U256,\n> \n>     },\n> \n> }\n> \n> ```\n> \n> \n> \n> So should we change this schema to accommodate something like `permit2 = new Permit2{salt: SALT, deployerCreate2: CREATE2_ADDRESS}();` OR instead add a forge-std helper method such as `deployCreate2(string contractName, bytes32 salt, bytes memory constructorData, bytes memory initData, address deployer)`\n> \n> \n> \n> \n\nProbably forge std usage but i would wait to hear from Matt first before settling on usage",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1402895684/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1405787391",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2638#issuecomment-1405787391",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2638",
    "id": 1405787391,
    "node_id": "IC_kwDOGBlvNc5Typz_",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-26T23:03:35Z",
    "updated_at": "2023-01-26T23:03:35Z",
    "author_association": "COLLABORATOR",
    "body": "> So should we change this schema to accommodate something like `permit2 = new Permit2{salt: SALT, deployerCreate2: CREATE2_ADDRESS}();`\r\n\r\nThis is not valid solidity and there is currently no plans to preprocess solidity to support custom syntax, so this option isn't currently doable.\r\n\r\n> OR instead add a forge-std helper method such as `deployCreate2(string contractName, bytes32 salt, bytes memory constructorData, bytes memory initData, address deployer)`\r\n\r\nThis solution is ok, would pair nicely with the create2 helpers recently added in https://github.com/foundry-rs/forge-std/pull/276. There may be alternative function sigs we'd want, would need to think about it. But the custom create2 deployer would need to have the same signature as the default create2 deployer so it's not clear how much value this adds since you can do this on your own anyway.\r\n\r\nAnother option is to add a new config option to the `foundry.toml` with some name options defined in https://github.com/foundry-rs/foundry/issues/2638#issuecomment-1206855029, but again the custom create2 deployer would need to have the same signature as the default create2 deployer\r\n\r\n--------\r\n\r\nThere's been a lot of discussion in this issue so I think it's worth backing up a sec to discuss _why_ we want this feature, which we discussed briefly starting [here](https://github.com/foundry-rs/foundry/issues/2638#issuecomment-1206880912), and using that answer to determine which solution to go with.\r\n\r\nIMO the best (but not necessarily simplest) solution is to write a new, more flexible create2 factory that has the features we need and deploy it across all chains. You can then add cheatcodes to instruct forge what specifically to do with the create2 deployer, for example a `vm.BatchInitializeCall` cheat might take the next create2 deploy and subsequent tx and batch them into the same transaction to the deployer. Or a `vm.safeCreate2` cheat might instruct forge to instead use the `safeCreate2` method, etc. AFAIK none of other solutions allow native support for this, and the ability to batch contract deployment + initialization is definitely important\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1405787391/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1422393395",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2638#issuecomment-1422393395",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2638",
    "id": 1422393395,
    "node_id": "IC_kwDOGBlvNc5UyAAz",
    "user": {
      "login": "0xTimepunk",
      "id": 45543880,
      "node_id": "MDQ6VXNlcjQ1NTQzODgw",
      "avatar_url": "https://avatars.githubusercontent.com/u/45543880?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/0xTimepunk",
      "html_url": "https://github.com/0xTimepunk",
      "followers_url": "https://api.github.com/users/0xTimepunk/followers",
      "following_url": "https://api.github.com/users/0xTimepunk/following{/other_user}",
      "gists_url": "https://api.github.com/users/0xTimepunk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/0xTimepunk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/0xTimepunk/subscriptions",
      "organizations_url": "https://api.github.com/users/0xTimepunk/orgs",
      "repos_url": "https://api.github.com/users/0xTimepunk/repos",
      "events_url": "https://api.github.com/users/0xTimepunk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/0xTimepunk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-02-08T10:45:23Z",
    "updated_at": "2023-02-08T10:45:23Z",
    "author_association": "NONE",
    "body": "Hey guys, any update on this?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1422393395/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1424689215",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2638#issuecomment-1424689215",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2638",
    "id": 1424689215,
    "node_id": "IC_kwDOGBlvNc5U6wg_",
    "user": {
      "login": "gakonst",
      "id": 17802178,
      "node_id": "MDQ6VXNlcjE3ODAyMTc4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17802178?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gakonst",
      "html_url": "https://github.com/gakonst",
      "followers_url": "https://api.github.com/users/gakonst/followers",
      "following_url": "https://api.github.com/users/gakonst/following{/other_user}",
      "gists_url": "https://api.github.com/users/gakonst/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gakonst/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gakonst/subscriptions",
      "organizations_url": "https://api.github.com/users/gakonst/orgs",
      "repos_url": "https://api.github.com/users/gakonst/repos",
      "events_url": "https://api.github.com/users/gakonst/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gakonst/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-02-09T19:14:14Z",
    "updated_at": "2023-02-09T19:14:14Z",
    "author_association": "MEMBER",
    "body": "Sorry not yet! @akshatcx what's your current plan here?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1424689215/reactions",
      "total_count": 2,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 2
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1581267583",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2638#issuecomment-1581267583",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2638",
    "id": 1581267583,
    "node_id": "IC_kwDOGBlvNc5eQDp_",
    "user": {
      "login": "callum-elvidge",
      "id": 119327354,
      "node_id": "U_kgDOBxzKeg",
      "avatar_url": "https://avatars.githubusercontent.com/u/119327354?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/callum-elvidge",
      "html_url": "https://github.com/callum-elvidge",
      "followers_url": "https://api.github.com/users/callum-elvidge/followers",
      "following_url": "https://api.github.com/users/callum-elvidge/following{/other_user}",
      "gists_url": "https://api.github.com/users/callum-elvidge/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/callum-elvidge/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/callum-elvidge/subscriptions",
      "organizations_url": "https://api.github.com/users/callum-elvidge/orgs",
      "repos_url": "https://api.github.com/users/callum-elvidge/repos",
      "events_url": "https://api.github.com/users/callum-elvidge/events{/privacy}",
      "received_events_url": "https://api.github.com/users/callum-elvidge/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-06-07T17:55:31Z",
    "updated_at": "2023-06-07T17:55:31Z",
    "author_association": "NONE",
    "body": "Hey, any update on this? ",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1581267583/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1581330913",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2638#issuecomment-1581330913",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2638",
    "id": 1581330913,
    "node_id": "IC_kwDOGBlvNc5eQTHh",
    "user": {
      "login": "gakonst",
      "id": 17802178,
      "node_id": "MDQ6VXNlcjE3ODAyMTc4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17802178?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gakonst",
      "html_url": "https://github.com/gakonst",
      "followers_url": "https://api.github.com/users/gakonst/followers",
      "following_url": "https://api.github.com/users/gakonst/following{/other_user}",
      "gists_url": "https://api.github.com/users/gakonst/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gakonst/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gakonst/subscriptions",
      "organizations_url": "https://api.github.com/users/gakonst/orgs",
      "repos_url": "https://api.github.com/users/gakonst/repos",
      "events_url": "https://api.github.com/users/gakonst/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gakonst/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-06-07T18:41:08Z",
    "updated_at": "2023-06-07T18:41:24Z",
    "author_association": "MEMBER",
    "body": "We haven't prioritized it, no. Is it a big deal for you? It's a small enough bite that I'd prefer a third party contributor to take. But if it is really important we can try to prio.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1581330913/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
