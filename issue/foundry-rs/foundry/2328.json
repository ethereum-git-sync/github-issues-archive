{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/2328",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2328/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2328/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2328/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/2328",
  "id": 1305675857,
  "node_id": "I_kwDOGBlvNc5N0whR",
  "number": 2328,
  "title": "Extend error traces to include source code line number",
  "user": {
    "login": "ckoopmann",
    "id": 15629702,
    "node_id": "MDQ6VXNlcjE1NjI5NzAy",
    "avatar_url": "https://avatars.githubusercontent.com/u/15629702?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ckoopmann",
    "html_url": "https://github.com/ckoopmann",
    "followers_url": "https://api.github.com/users/ckoopmann/followers",
    "following_url": "https://api.github.com/users/ckoopmann/following{/other_user}",
    "gists_url": "https://api.github.com/users/ckoopmann/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ckoopmann/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ckoopmann/subscriptions",
    "organizations_url": "https://api.github.com/users/ckoopmann/orgs",
    "repos_url": "https://api.github.com/users/ckoopmann/repos",
    "events_url": "https://api.github.com/users/ckoopmann/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ckoopmann/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3593644820,
      "node_id": "LA_kwDOGBlvNc7WMqsU",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-feature",
      "name": "T-feature",
      "color": "BFD4F2",
      "default": false,
      "description": "Type: feature"
    },
    {
      "id": 3593644915,
      "node_id": "LA_kwDOGBlvNc7WMqtz",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/Cmd-forge-test",
      "name": "Cmd-forge-test",
      "color": "006B75",
      "default": false,
      "description": "Command: forge test"
    },
    {
      "id": 3703752787,
      "node_id": "LA_kwDOGBlvNc7cwshT",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/C-forge",
      "name": "C-forge",
      "color": "5319E7",
      "default": false,
      "description": "Command: forge"
    },
    {
      "id": 3703753090,
      "node_id": "LA_kwDOGBlvNc7cwsmC",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/A-tracing",
      "name": "A-tracing",
      "color": "FBCA04",
      "default": false,
      "description": "Area: tracing"
    },
    {
      "id": 3759720129,
      "node_id": "LA_kwDOGBlvNc7gGMbB",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/D-hard",
      "name": "D-hard",
      "color": "0E8A16",
      "default": false,
      "description": "Difficulty: hard"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 3,
  "created_at": "2022-07-15T07:20:16Z",
  "updated_at": "2022-07-25T02:58:09Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "### Component\r\n\r\nForge\r\n\r\n### Describe the feature you would like\r\n\r\n# Current behaviour\r\nError traces in failing tests show only the contract and method where the respective error was thrown:\r\n\r\n<img width=\"568\" alt=\"image\" src=\"https://user-images.githubusercontent.com/15629702/179172293-b683c78d-59e7-4ed3-b12f-b88e3ad61f8d.png\">\r\n\r\n# Desired behaviour\r\nExtend the error traces from tests (or other tasks) to include the line number in the contract's solidity source code which corresponds to the compiled bytecode where the error / revertion was thrown. \r\nIdeally this should work both in the case of locally compiled contracts as well as contracts verified on etherscan.\r\n\r\nHardhat does this for locally compiled contracts:\r\n<img width=\"1145\" alt=\"image\" src=\"https://user-images.githubusercontent.com/15629702/179172223-e9bf99ad-3808-4313-b96a-1fa1478ba5f3.png\">\r\n\r\n\r\n### Additional context\r\n\r\nI tried to produce the desired behaviour in forge with different verbosity levels and also couldn't find any corresponding option in `forge test --help`. \r\nPlease lmk if this feature already exists (in which case we might want to extend the documentation)",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/2328/reactions",
    "total_count": 3,
    "+1": 3,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2328/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1185255133",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2328#issuecomment-1185255133",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2328",
    "id": 1185255133,
    "node_id": "IC_kwDOGBlvNc5GpY7d",
    "user": {
      "login": "ckoopmann",
      "id": 15629702,
      "node_id": "MDQ6VXNlcjE1NjI5NzAy",
      "avatar_url": "https://avatars.githubusercontent.com/u/15629702?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ckoopmann",
      "html_url": "https://github.com/ckoopmann",
      "followers_url": "https://api.github.com/users/ckoopmann/followers",
      "following_url": "https://api.github.com/users/ckoopmann/following{/other_user}",
      "gists_url": "https://api.github.com/users/ckoopmann/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ckoopmann/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ckoopmann/subscriptions",
      "organizations_url": "https://api.github.com/users/ckoopmann/orgs",
      "repos_url": "https://api.github.com/users/ckoopmann/repos",
      "events_url": "https://api.github.com/users/ckoopmann/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ckoopmann/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-15T07:21:30Z",
    "updated_at": "2022-07-15T07:21:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "I'd love to take a shot at implementing this, if it is considered a desirable feature. ",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1185255133/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1186294548",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2328#issuecomment-1186294548",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2328",
    "id": 1186294548,
    "node_id": "IC_kwDOGBlvNc5GtWsU",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-16T21:14:00Z",
    "updated_at": "2022-07-16T21:14:00Z",
    "author_association": "MEMBER",
    "body": "It would be cool but it's really really hard to do. You would need to keep track of the instruction counter (not the program counter), identify the contract, look up the source range in the source map, translate that to a line and display that. Additionally, it's somewhat unclear how this would work in the following situations:\r\n\r\n- If you use DSTest-style assertions, then there is no revert. What line should be displayed in this case? If we just display the line number of the function then I'd argue what we have now is already good enough\r\n- If you use assertion *libraries* or inherited assertion helpers, what line should be displayed? If you just track the point of the revert, the line would show up as being inside the assertion helper or assertion library, not inside the test. In this case you would need to construct a backtrace somehow\r\n\r\nBut it is definitely something we've talked about so feel free to take a stab at it :)",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1186294548/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1193500249",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2328#issuecomment-1193500249",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2328",
    "id": 1193500249,
    "node_id": "IC_kwDOGBlvNc5HI15Z",
    "user": {
      "login": "ckoopmann",
      "id": 15629702,
      "node_id": "MDQ6VXNlcjE1NjI5NzAy",
      "avatar_url": "https://avatars.githubusercontent.com/u/15629702?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ckoopmann",
      "html_url": "https://github.com/ckoopmann",
      "followers_url": "https://api.github.com/users/ckoopmann/followers",
      "following_url": "https://api.github.com/users/ckoopmann/following{/other_user}",
      "gists_url": "https://api.github.com/users/ckoopmann/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ckoopmann/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ckoopmann/subscriptions",
      "organizations_url": "https://api.github.com/users/ckoopmann/orgs",
      "repos_url": "https://api.github.com/users/ckoopmann/repos",
      "events_url": "https://api.github.com/users/ckoopmann/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ckoopmann/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-25T02:58:09Z",
    "updated_at": "2022-07-25T02:58:09Z",
    "author_association": "CONTRIBUTOR",
    "body": "> It would be cool but it's really really hard to do. You would need to keep track of the instruction counter (not the program counter), identify the contract, look up the source range in the source map, translate that to a line and display that. Additionally, it's somewhat unclear how this would work in the following situations:\r\n> \r\n> * If you use DSTest-style assertions, then there is no revert. What line should be displayed in this case? If we just display the line number of the function then I'd argue what we have now is already good enough\r\n> * If you use assertion _libraries_ or inherited assertion helpers, what line should be displayed? If you just track the point of the revert, the line would show up as being inside the assertion helper or assertion library, not inside the test. In this case you would need to construct a backtrace somehow\r\n> \r\n> But it is definitely something we've talked about so feel free to take a stab at it :)\r\n\r\nThanks for the info 👍 . I had suspected already that there was a good reason that this isn't implemented already.\r\nI think I'll be looking for an easier issue to start contributing. :)",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1193500249/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
