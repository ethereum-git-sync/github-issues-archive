{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/1124",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1124/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1124/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1124/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/1124",
  "id": 1185157552,
  "node_id": "I_kwDOGBlvNc5GpBGw",
  "number": 1124,
  "title": "bug: `expectRevert` does not work for low-level calls",
  "user": {
    "login": "mds1",
    "id": 17163988,
    "node_id": "MDQ6VXNlcjE3MTYzOTg4",
    "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mds1",
    "html_url": "https://github.com/mds1",
    "followers_url": "https://api.github.com/users/mds1/followers",
    "following_url": "https://api.github.com/users/mds1/following{/other_user}",
    "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
    "organizations_url": "https://api.github.com/users/mds1/orgs",
    "repos_url": "https://api.github.com/users/mds1/repos",
    "events_url": "https://api.github.com/users/mds1/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mds1/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3334394228,
      "node_id": "MDU6TGFiZWwzMzM0Mzk0MjI4",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-bug",
      "name": "T-bug",
      "color": "d73a4a",
      "default": false,
      "description": "Type: bug"
    },
    {
      "id": 3593644915,
      "node_id": "LA_kwDOGBlvNc7WMqtz",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/Cmd-forge-test",
      "name": "Cmd-forge-test",
      "color": "006B75",
      "default": false,
      "description": "Command: forge test"
    },
    {
      "id": 3703752787,
      "node_id": "LA_kwDOGBlvNc7cwshT",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/C-forge",
      "name": "C-forge",
      "color": "5319E7",
      "default": false,
      "description": "Command: forge"
    },
    {
      "id": 3703752960,
      "node_id": "LA_kwDOGBlvNc7cwskA",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/A-cheatcodes",
      "name": "A-cheatcodes",
      "color": "FBCA04",
      "default": false,
      "description": "Area: cheatcodes"
    },
    {
      "id": 3759719580,
      "node_id": "LA_kwDOGBlvNc7gGMSc",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/P-normal",
      "name": "P-normal",
      "color": "D93F0B",
      "default": false,
      "description": "Priority: normal"
    },
    {
      "id": 3759720362,
      "node_id": "LA_kwDOGBlvNc7gGMeq",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/D-average",
      "name": "D-average",
      "color": "0E8A16",
      "default": false,
      "description": "Difficulty: average"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 14,
  "created_at": "2022-03-29T17:00:03Z",
  "updated_at": "2022-03-29T18:02:44Z",
  "closed_at": "2022-03-29T17:59:32Z",
  "author_association": "COLLABORATOR",
  "active_lock_reason": null,
  "body": "### Component\n\nForge\n\n### Have you ensured that all of these are up to date?\n\n- [X] Foundry\n- [ ] Foundryup\n\n### What version of Foundry are you on?\n\nforge 0.2.0 (fc85b1c 2022-03-28T17:17:55.044128+00:00)\n\n### What command(s) is the bug in?\n\nforge test\n\n### Operating System\n\nmacOS (amd)\n\n### Describe the bug\n\nMy assumption was the below behavior should work, since `expectRevert` would check the success/return data of the call, even though I'm not explicitly checking it in solidity. I'd consider this a bug, though it's possible this is the expected behavior to due how this cheat code is implemented. \r\n\r\n```solidity\r\nvm.expectRevert(abi.encodeWithSelector(Unauthorized.selector));\r\naddress(contract).call(someCalldata);\r\n```\r\n\r\nCurrent workaround I'm using, suggested by @brockelmore:\r\n\r\n```solidity\r\n(bool ok, bytes memory ret) = address(contract).call(someCalldata);\r\nassertTrue(!ok);\r\nassertEq(ret, abi.encodeWithSelector(Unauthorized.selector));\r\n```\r\n\r\nI'm also not sure whether there's similar issues with this pattern for `expectEmit` and `expectCall`, and if there is they would not have similarly simple workarounds",
  "closed_by": {
    "login": "mds1",
    "id": 17163988,
    "node_id": "MDQ6VXNlcjE3MTYzOTg4",
    "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mds1",
    "html_url": "https://github.com/mds1",
    "followers_url": "https://api.github.com/users/mds1/followers",
    "following_url": "https://api.github.com/users/mds1/following{/other_user}",
    "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
    "organizations_url": "https://api.github.com/users/mds1/orgs",
    "repos_url": "https://api.github.com/users/mds1/repos",
    "events_url": "https://api.github.com/users/mds1/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mds1/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/1124/reactions",
    "total_count": 2,
    "+1": 2,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1124/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1082137768",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1124#issuecomment-1082137768",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1124",
    "id": 1082137768,
    "node_id": "IC_kwDOGBlvNc5AgByo",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-29T17:03:07Z",
    "updated_at": "2022-03-29T17:03:07Z",
    "author_association": "MEMBER",
    "body": "Does the call actually revert with Unauthorized, or is it reverting for some other reason? Or can you provide a minimal example perhaps?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1082137768/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1082138923",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1124#issuecomment-1082138923",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1124",
    "id": 1082138923,
    "node_id": "IC_kwDOGBlvNc5AgCEr",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-29T17:04:12Z",
    "updated_at": "2022-03-29T17:04:12Z",
    "author_association": "COLLABORATOR",
    "body": "Yea it does revert with unauthorized, let me put together a minimal example later today (sorry, will need a few hours but wanted to get the issue open)",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1082138923/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1082176805",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1124#issuecomment-1082176805",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1124",
    "id": 1082176805,
    "node_id": "IC_kwDOGBlvNc5AgLUl",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-29T17:34:11Z",
    "updated_at": "2022-03-29T17:34:11Z",
    "author_association": "COLLABORATOR",
    "body": "@onbjerg actually was able to put this together quickly now:\r\n\r\n```solidity\r\npragma solidity 0.8.13;\r\n\r\nimport \"ds-test/test.sol\";\r\nimport \"forge-std/Vm.sol\";\r\n\r\ncontract Reverter {\r\n  error Unauthorized();\r\n\r\n  function revertWithError() public {\r\n    revert Unauthorized();\r\n  }\r\n\r\n  function dontRevert() public {\r\n    // Do nothing.\r\n  }\r\n}\r\n\r\ncontract ReverterTests is DSTest {\r\n  error Unauthorized();\r\n  Reverter reverter;\r\n  Vm vm = Vm(HEVM_ADDRESS);\r\n\r\n  function setUp() public {\r\n    reverter = new Reverter();\r\n  }\r\n\r\n  // Passes as expected.\r\n  function test_expectRevert_normalCall() public {\r\n    vm.expectRevert(abi.encodeWithSelector(Unauthorized.selector));\r\n    reverter.revertWithError();\r\n  }\r\n\r\n  // Passes as expected, but this is actually a bug because we're not checking the revert condition.\r\n  function test_expectRevert_lowLevelCall() public {\r\n    vm.expectRevert(abi.encodeWithSelector(Unauthorized.selector));\r\n    (bool ok, ) = address(reverter).call(abi.encode(reverter.revertWithError.selector));\r\n    // This logs 1, indicating that forge caught the revert and changed the return value so the tests can\r\n    // continue. If you remove the expectRevert call, the test still passes but this now logs 0 indicating\r\n    // that expectRevert is not behaving as expected.\r\n    emit log_named_uint(\"ok\", ok ? 1 : 0);\r\n  }\r\n  \r\n  // This passes even though I'd expect it to fail.\r\n  function test_expectNoRevert_lowLevelCall() public {\r\n    vm.expectRevert(abi.encodeWithSelector(Unauthorized.selector));\r\n    address(reverter).call(abi.encode(reverter.dontRevert.selector));\r\n  }\r\n}\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1082176805/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1082185972",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1124#issuecomment-1082185972",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1124",
    "id": 1082185972,
    "node_id": "IC_kwDOGBlvNc5AgNj0",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-29T17:41:17Z",
    "updated_at": "2022-03-29T17:44:04Z",
    "author_association": "MEMBER",
    "body": "I'm not sure how `test_expectRevert_lowLevelCall` is a bug? The call *did* revert, checking the returned bool is up to the implementer and not generally something we can check if people did or not\r\n\r\nAlso \"If you remove the expectRevert call, the test still passes but this now logs 0 indicating that expectRevert is not behaving as expected.\" this indicates the opposite, no? If expectRevert did not behave as expected in this case, then it would return 0 for both cases",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1082185972/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1082190342",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1124#issuecomment-1082190342",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1124",
    "id": 1082190342,
    "node_id": "IC_kwDOGBlvNc5AgOoG",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-29T17:44:34Z",
    "updated_at": "2022-03-29T17:44:45Z",
    "author_association": "COLLABORATOR",
    "body": "So is the way `expectRevert` works that it hooks onto the solidity-generated checks to verify the returned bool, and that's what gets intercepted/handed?\r\n\r\nThe reason it feels like a bug is because the call did revert, whether or not we check that in solidity. And my expectation (from a user perspective) would be that the cheatcode is verifying that the next call reverted, regardless of how the return value is handled",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1082190342/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1082191381",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1124#issuecomment-1082191381",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1124",
    "id": 1082191381,
    "node_id": "IC_kwDOGBlvNc5AgO4V",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-29T17:45:41Z",
    "updated_at": "2022-03-29T18:02:44Z",
    "author_association": "COLLABORATOR",
    "body": "> Also \"If you remove the expectRevert call, the test still passes but this now logs 0 indicating that expectRevert is not behaving as expected.\" this indicates the opposite, no? If expectRevert did not behave as expected in this case, then it would return 0 for both cases\r\n\r\nYea that was confusingly worded. What I meant to convey was that the test pass/fail status is not effected by expectRevert, even though expectRevert is modifying the return value. In other words, it feels inconsistent that the return bool is modified but not the tests pass/fail status",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1082191381/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1082191883",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1124#issuecomment-1082191883",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1124",
    "id": 1082191883,
    "node_id": "IC_kwDOGBlvNc5AgPAL",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-29T17:46:18Z",
    "updated_at": "2022-03-29T17:47:58Z",
    "author_association": "MEMBER",
    "body": "No, we're not, but that's what I'm saying - I don't think the first one is a bug. It works as expected: you expected a revert, we caught it and altered the result so that tests can continue. If you remove `vm.expectRevert` then the call reverts, but the calling context does not, because that is how Solidity works and is not generally something we can change I think\r\n\r\nexpectRevert catches the return status of the next call, checks if it reverts - if it does, we flip it (i.e. make it not revert) and continue. If it does not revert, we flip it also - making it revert\r\n\r\nI guess the same is true for test_expectNoRevert_lowLevelCall as well actually - if you log the return status here I think it would log 0, and if you remove expectRevert it would log 1",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1082191883/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1082195091",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1124#issuecomment-1082195091",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1124",
    "id": 1082195091,
    "node_id": "IC_kwDOGBlvNc5AgPyT",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-29T17:49:50Z",
    "updated_at": "2022-03-29T17:49:50Z",
    "author_association": "COLLABORATOR",
    "body": "> the call reverts, but the calling context does not\r\n\r\nGot it, nice distinction here. I think this is the root of the question/issue: should expectRevert be checking that the _calling context_ reverted, or the _call itself_ reverted. My expectation as a user is that the it's the latter, but the actual behavior is the former. I can be convinced that's ok, but it does feel unintuitive and we should document that behavior in the foundry book",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1082195091/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1082196246",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1124#issuecomment-1082196246",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1124",
    "id": 1082196246,
    "node_id": "IC_kwDOGBlvNc5AgQEW",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-29T17:51:02Z",
    "updated_at": "2022-03-29T17:51:02Z",
    "author_association": "MEMBER",
    "body": "It is actually doing the latter, it is just not bubbling it for you (i.e. forcing the calling context to revert) 😄 I hope that makes sense, I'm making up terms as I go",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1082196246/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1082199687",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1124#issuecomment-1082199687",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1124",
    "id": 1082199687,
    "node_id": "IC_kwDOGBlvNc5AgQ6H",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-29T17:54:38Z",
    "updated_at": "2022-03-29T17:56:32Z",
    "author_association": "MEMBER",
    "body": "Essentially what you experience as a non-low-level-calling-user is:\r\n\r\n```solidity\r\nvm.expectRevert(...)\r\n// this reverts - ok would be 1 here normally (it does not revert), but expectRevert turns it into 0\r\nsomething.call()\r\n// solidity now checks ok for you, its 0, so solidity jumps and does a revert for you\r\n// in the **calling context**\r\n```\r\n\r\nWhat you experience as a low-level-calling user is exactly the same, except the revert check is not done for you, so the calling context doesn't revert",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1082199687/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1082201763",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1124#issuecomment-1082201763",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1124",
    "id": 1082201763,
    "node_id": "IC_kwDOGBlvNc5AgRaj",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-29T17:56:54Z",
    "updated_at": "2022-03-29T17:57:16Z",
    "author_association": "COLLABORATOR",
    "body": "Heh, yea that makes sense. I get what you mean, and maybe also am tripping up on terminology here, but either way I think we understand each other. Would adding `require(ok)` afterwards result in \"identical behavior\" (ugh, possibly confusing terminology again) between low-level calls and \"normal\" calls? If so, then maybe the best path forward here is leaving as-is and updating the foundry book to mention you must assert on the return status for expectRevert work as expected for low-level calls?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1082201763/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1082202601",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1124#issuecomment-1082202601",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1124",
    "id": 1082202601,
    "node_id": "IC_kwDOGBlvNc5AgRnp",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-29T17:57:37Z",
    "updated_at": "2022-03-29T17:57:37Z",
    "author_association": "MEMBER",
    "body": "It would, yeah, if not that is definitely a bug. It would make sense to add some clarification in the book on this for sure",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1082202601/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1082204563",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1124#issuecomment-1082204563",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1124",
    "id": 1082204563,
    "node_id": "IC_kwDOGBlvNc5AgSGT",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-29T17:59:32Z",
    "updated_at": "2022-03-29T17:59:32Z",
    "author_association": "COLLABORATOR",
    "body": "Just tested and that seems to be the case. Thanks for clearing up that behavior!\r\n\r\nI'll close this and open a PR on the foundry book later, and we can continue discussing any clarifications there",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1082204563/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1082204807",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1124#issuecomment-1082204807",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1124",
    "id": 1082204807,
    "node_id": "IC_kwDOGBlvNc5AgSKH",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-29T17:59:47Z",
    "updated_at": "2022-03-29T17:59:47Z",
    "author_association": "MEMBER",
    "body": "Sounds good 😄 ",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1082204807/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
