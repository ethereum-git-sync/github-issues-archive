{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/1869",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1869/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1869/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1869/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/1869",
  "id": 1263794111,
  "node_id": "I_kwDOGBlvNc5LU_e_",
  "number": 1869,
  "title": "Improve wallet management UX using Keystore",
  "user": {
    "login": "hbarcelos",
    "id": 16565602,
    "node_id": "MDQ6VXNlcjE2NTY1NjAy",
    "avatar_url": "https://avatars.githubusercontent.com/u/16565602?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hbarcelos",
    "html_url": "https://github.com/hbarcelos",
    "followers_url": "https://api.github.com/users/hbarcelos/followers",
    "following_url": "https://api.github.com/users/hbarcelos/following{/other_user}",
    "gists_url": "https://api.github.com/users/hbarcelos/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hbarcelos/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hbarcelos/subscriptions",
    "organizations_url": "https://api.github.com/users/hbarcelos/orgs",
    "repos_url": "https://api.github.com/users/hbarcelos/repos",
    "events_url": "https://api.github.com/users/hbarcelos/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hbarcelos/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3593644820,
      "node_id": "LA_kwDOGBlvNc7WMqsU",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-feature",
      "name": "T-feature",
      "color": "BFD4F2",
      "default": false,
      "description": "Type: feature"
    },
    {
      "id": 3703752609,
      "node_id": "LA_kwDOGBlvNc7cwseh",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/C-cast",
      "name": "C-cast",
      "color": "5319E7",
      "default": false,
      "description": "Command: cast"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/milestones/1",
    "html_url": "https://github.com/foundry-rs/foundry/milestone/1",
    "labels_url": "https://api.github.com/repos/foundry-rs/foundry/milestones/1/labels",
    "id": 8140456,
    "node_id": "MI_kwDOGBlvNc4AfDao",
    "number": 1,
    "title": "v1.0.0",
    "description": "",
    "creator": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 10,
    "closed_issues": 125,
    "state": "open",
    "created_at": "2022-06-28T08:15:32Z",
    "updated_at": "2023-05-12T14:44:03Z",
    "due_on": null,
    "closed_at": null
  },
  "comments": 10,
  "created_at": "2022-06-07T19:54:30Z",
  "updated_at": "2023-06-02T12:23:01Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "### Component\r\n\r\nForge, Cast\r\n\r\n### Describe the feature you would like\r\n\r\nI'm currently migrating from `dapp.tools` and it had this nice UX to handle keystore files:\r\n\r\n1. Declare the following env vars:\r\n   - `ETH_KEYSTORE`: the path to the keystore **directory**\r\n   - `ETH_FROM`: the account from which send the tx from (I believe this was used to find the right keystore **file** inside the keystore directory).\r\n   - `ETH_PASSWORD`: the **path** to a plain-text password file with the password for the keystore file in the local file system.\r\n2. Anything requiring wallet signing pickups the above variables automatically:\r\n   ```bash\r\n   dapp create src/MyContract.sol:MyContract\r\n   seth send $ADDRESS \"myFunc(address)\" $ARG\r\n   ```\r\n\r\nI'm finding it a bit difficult to work with Foundry for that purpose. Specifically regarding contract deployment. Main differences are:\r\n\r\n1. `ETH_KEYSTORE` works, but it expects a keystore **file**, not a directory.\r\n2. `ETH_FROM` is redundant, since the sender wallet is derived from `ETH_KEYSTORE`\r\n3. `ETH_PASSWORD` doesn't work.\r\n\r\nAlso if I use `CAST_PASSWORD` env var, `forge create` does not pick it up, so I need to be explicit when passing it:\r\n\r\n```bash\r\nforge create --password=${CAST_PASSWORD} src/MyContract.sol:MyContract.sol\r\n```\r\n\r\nAlso ideally such configs could be in `foundry.toml` as well:\r\n\r\n```toml\r\n[default]\r\npassword-file = '~/.eth-password'\r\n\r\n# either\r\nkeystore-directory = '~/.ethereum/keystore'\r\nfrom = '0xdeAD00000000000000000000000000000000dEAd'\r\n\r\n# or\r\nkeystore-file = '~/.ethereum/keystore/UTC--2022-01-01T00-00-00.000000000Z--dead00000000000000000000000000000000dead'\r\n\r\n```\r\n\r\nFurthermore, users should have the liberty to overwrite any configs with environment variables. For example, it's very useful to be able to define a keystore directory containing multiple accounts and define the `from` address with env vars.\r\n\r\n```\r\nFOUNDRY_ETH_FROM=0x0783...122 FOUNDRY_PASSWORD_FILE=~/.eth-password-0783...122 forge deploy ...\r\n```\r\n\r\n### Additional context\r\n\r\nAs a workaround, I have written a small helper script to allow me to use `forge` the same way I could use `dapp.tools`. Perhaps this can help guiding the implementation.\r\n\r\n```bash\r\n#!/bin/bash\r\n\r\n# scripts/deploy.sh\r\n\r\nset -eo pipefail\r\n\r\nfunction log() {\r\n  echo -e \"$@\" >&2\r\n}\r\n\r\nfunction die() {\r\n  log \"$@\"\r\n  log \"\"\r\n  exit 1\r\n}\r\n\r\nfunction err_msg_keystore_file() {\r\ncat <<MSG\r\nERROR: could not determine the location of the keystore file.\r\n\r\nYou should either define:\r\n\r\n\\t1. The FOUNDRY_ETH_KEYSTORE_FILE env var or;\r\n\\t2. Both FOUNDRY_ETH_KEYSTORE_DIR and FOUNDRY_ETH_FROM env vars.\r\nMSG\r\n}\r\n\r\nfunction err_msg_etherscan_api_key() {\r\ncat <<MSG\r\nERROR: cannot verify contracts without ETHERSCAN_API_KEY being set.\r\n\r\nYou should either:\r\n\r\n\\t1. Not use the --verify flag or;\r\n\\t2. Define the ETHERSCAN_API_KEY env var.\r\nMSG\r\n}\r\n\r\nfunction usage() {\r\ncat <<MSG\r\ndeploy.sh contract_path [--constructor-args ...args]\r\n\r\nExamples:\r\n\r\n\\t# Constructor does not take any arguments\r\n\\tdeploy.sh src/MyContract.sol:MyContract\r\n\r\n\\t# Constructor takes (uint, address) arguments\r\n\\tdeploy.sh src/MyContract.sol:MyContract --constructor-args 1 0x0000000000000000000000000000000000000000\r\nMSG\r\n}\r\n\r\nfunction deploy() {\r\n  local ENV_FILE=\"${BASH_SOURCE%/*}/../.env\"\r\n  [ -f \"$ENV_FILE\" ] && source \"$ENV_FILE\"\r\n\r\n  FOUNDRY_ETH_FROM=\"${FOUNDRY_ETH_FROM:-$ETH_FROM}\"\r\n  FOUNDRY_ETHERSCAN_API_KEY=\"${FOUNDRY_ETHERSCAN_API_KEY:-$ETHERSCAN_API_KEY}\"\r\n  FOUNDRY_ETH_KEYSTORE_DIRECTORY=\"${FOUNDRY_ETH_KEYSTORE_DIRECTORY:-$ETH_KEYSTORE}\"\r\n\r\n  if [ -z \"$FOUNDRY_ETH_KEYSTORE_FILE\" ]; then\r\n    [ -z \"$FOUNDRY_ETH_KEYSTORE_DIRECTORY\" ] && die \"$(err_msg_keystore_file)\"\r\n    # Foundy expects the Ethereum Keystore file, not the directory.\r\n    # This step assumes the Keystore file for the deployed wallet includes $ETH_FROM in its name.\r\n    FOUNDRY_ETH_KEYSTORE_FILE=\"${FOUNDRY_ETH_KEYSTORE_DIRECTORY%/}/$(ls -1 $FOUNDRY_ETH_KEYSTORE_DIRECTORY | \\\r\n      # -i: case insensitive\r\n      # #0x: strip the 0x prefix from the the address\r\n      grep -i ${FOUNDRY_ETH_FROM#0x})\"\r\n  fi\r\n  [ -z \"$FOUNDRY_ETH_KEYSTORE_FILE\" ] && die \"$(err_msg_keystore_file)\"\r\n\r\n  # Handle reading from the password file\r\n  local PASSWORD_OPT=''\r\n  if [ -f \"$FOUNDRY_ETH_PASSWORD_FILE\" ]; then\r\n    PASSWORD_OPT=\"--password=$(cat \"$FOUNDRY_ETH_PASSWORD_FILE\")\"\r\n  fi\r\n\r\n  # Require the Etherscan API Key if --verify option is enabled\r\n  set +e\r\n  if grep -- '--verify' <<< \"$@\" > /dev/null; then\r\n    [ -z \"$FOUNDRY_ETHERSCAN_API_KEY\" ] && die \"$(err_msg_etherscan_api_key)\"\r\n  fi\r\n  set -e\r\n\r\n  # Log the command being issued, making sure not to expose the password\r\n  log \"forge create --keystore=\"$FOUNDRY_ETH_KEYSTORE_FILE\" $(sed 's/=.*$/=[REDACTED]/' <<<${PASSWORD_OPT}) $@\"\r\n  forge create --keystore=\"$FOUNDRY_ETH_KEYSTORE_FILE\" ${PASSWORD_OPT} $@\r\n}\r\n\r\n# Executes the function if it's been called as a script.\r\n# This will evaluate to false if this script is sourced by other script.\r\nif [ \"$0\" = \"$BASH_SOURCE\" ]; then\r\n  if [ $# -eq 0 ]; then\r\n    die \"$(usage)\"\r\n  fi\r\n\r\n  [ \"$1\" = '-h' ] || [ \"$1\" = '--help' ] && {\r\n    log \"$(usage)\"\r\n    exit 0\r\n  }\r\n\r\n  deploy $@\r\nfi\r\n```\r\n\r\n```bash\r\n# .env\r\n\r\nexport FOUNDRY_ETHERSCAN_API_KEY=API_KEY\r\nexport FOUNDRY_ETH_FROM=WALLET_ADDRESS\r\nexport FOUNDRY_ETH_KEYSTORE_DIRECTORY=PATH_OF_ETHEREUM_KEYSTORE_DIR # i.e.: ${HOME}/.ethereum/keystore/\r\nexport FOUNDRY_ETH_PASSWORD=PATH_OF_ETHEREUM_PASSWORD_FILE\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/1869/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1869/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1149164463",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1869#issuecomment-1149164463",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1869",
    "id": 1149164463,
    "node_id": "IC_kwDOGBlvNc5Eftuv",
    "user": {
      "login": "tynes",
      "id": 6626818,
      "node_id": "MDQ6VXNlcjY2MjY4MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6626818?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tynes",
      "html_url": "https://github.com/tynes",
      "followers_url": "https://api.github.com/users/tynes/followers",
      "following_url": "https://api.github.com/users/tynes/following{/other_user}",
      "gists_url": "https://api.github.com/users/tynes/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tynes/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tynes/subscriptions",
      "organizations_url": "https://api.github.com/users/tynes/orgs",
      "repos_url": "https://api.github.com/users/tynes/repos",
      "events_url": "https://api.github.com/users/tynes/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tynes/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-07T21:02:57Z",
    "updated_at": "2022-06-07T21:02:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "Counterparts for `seth ls` and `seth accounts` are missing as well. I know that `seth` uses the same tooling as `geth` for handling keystores and I do think the idea of `ETH_KEYSTORE` being a directory is a better idea, I think one problem is that geth uses a non standard keystore json format that includes the address in plaintext. If `ETH_KEYSTORE` is a directory, then foundry will need to create keystores in the same way to determine which json file is which key",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1149164463/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1149198691",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1869#issuecomment-1149198691",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1869",
    "id": 1149198691,
    "node_id": "IC_kwDOGBlvNc5Ef2Fj",
    "user": {
      "login": "hbarcelos",
      "id": 16565602,
      "node_id": "MDQ6VXNlcjE2NTY1NjAy",
      "avatar_url": "https://avatars.githubusercontent.com/u/16565602?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hbarcelos",
      "html_url": "https://github.com/hbarcelos",
      "followers_url": "https://api.github.com/users/hbarcelos/followers",
      "following_url": "https://api.github.com/users/hbarcelos/following{/other_user}",
      "gists_url": "https://api.github.com/users/hbarcelos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hbarcelos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hbarcelos/subscriptions",
      "organizations_url": "https://api.github.com/users/hbarcelos/orgs",
      "repos_url": "https://api.github.com/users/hbarcelos/repos",
      "events_url": "https://api.github.com/users/hbarcelos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hbarcelos/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-07T21:43:43Z",
    "updated_at": "2022-06-07T21:43:43Z",
    "author_association": "NONE",
    "body": "> I think one problem is that geth uses a non standard keystore json format that includes the address in plaintext. If ETH_KEYSTORE is a directory, then foundry will need to create keystores in the same way to determine which json file is which key\r\n\r\nIf sticking to the standard keystore json format, you could keep the convention of including the address in the name of the file to easily find it.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1149198691/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1149758926",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1869#issuecomment-1149758926",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1869",
    "id": 1149758926,
    "node_id": "IC_kwDOGBlvNc5Eh-3O",
    "user": {
      "login": "gakonst",
      "id": 17802178,
      "node_id": "MDQ6VXNlcjE3ODAyMTc4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17802178?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gakonst",
      "html_url": "https://github.com/gakonst",
      "followers_url": "https://api.github.com/users/gakonst/followers",
      "following_url": "https://api.github.com/users/gakonst/following{/other_user}",
      "gists_url": "https://api.github.com/users/gakonst/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gakonst/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gakonst/subscriptions",
      "organizations_url": "https://api.github.com/users/gakonst/orgs",
      "repos_url": "https://api.github.com/users/gakonst/repos",
      "events_url": "https://api.github.com/users/gakonst/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gakonst/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-08T10:47:39Z",
    "updated_at": "2022-06-08T10:47:39Z",
    "author_association": "MEMBER",
    "body": "all good points, agreed we'd want them in",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1149758926/reactions",
      "total_count": 3,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 3,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1187908815",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1869#issuecomment-1187908815",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1869",
    "id": 1187908815,
    "node_id": "IC_kwDOGBlvNc5GzgzP",
    "user": {
      "login": "NiklasKunkel",
      "id": 1817533,
      "node_id": "MDQ6VXNlcjE4MTc1MzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1817533?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NiklasKunkel",
      "html_url": "https://github.com/NiklasKunkel",
      "followers_url": "https://api.github.com/users/NiklasKunkel/followers",
      "following_url": "https://api.github.com/users/NiklasKunkel/following{/other_user}",
      "gists_url": "https://api.github.com/users/NiklasKunkel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NiklasKunkel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NiklasKunkel/subscriptions",
      "organizations_url": "https://api.github.com/users/NiklasKunkel/orgs",
      "repos_url": "https://api.github.com/users/NiklasKunkel/repos",
      "events_url": "https://api.github.com/users/NiklasKunkel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NiklasKunkel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-18T17:41:29Z",
    "updated_at": "2022-07-18T17:41:29Z",
    "author_association": "NONE",
    "body": "Agree with everything here. Transitioning over from dapptools this has been quite frustrating to deal with.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1187908815/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1256582820",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1869#issuecomment-1256582820",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1869",
    "id": 1256582820,
    "node_id": "IC_kwDOGBlvNc5K5e6k",
    "user": {
      "login": "godsflaw",
      "id": 959600,
      "node_id": "MDQ6VXNlcjk1OTYwMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/959600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/godsflaw",
      "html_url": "https://github.com/godsflaw",
      "followers_url": "https://api.github.com/users/godsflaw/followers",
      "following_url": "https://api.github.com/users/godsflaw/following{/other_user}",
      "gists_url": "https://api.github.com/users/godsflaw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/godsflaw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/godsflaw/subscriptions",
      "organizations_url": "https://api.github.com/users/godsflaw/orgs",
      "repos_url": "https://api.github.com/users/godsflaw/repos",
      "events_url": "https://api.github.com/users/godsflaw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/godsflaw/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-23T19:14:46Z",
    "updated_at": "2022-09-23T19:14:46Z",
    "author_association": "NONE",
    "body": "Adding my vote in support of this request.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1256582820/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1256761262",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1869#issuecomment-1256761262",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1869",
    "id": 1256761262,
    "node_id": "IC_kwDOGBlvNc5K6Keu",
    "user": {
      "login": "gakonst",
      "id": 17802178,
      "node_id": "MDQ6VXNlcjE3ODAyMTc4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17802178?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gakonst",
      "html_url": "https://github.com/gakonst",
      "followers_url": "https://api.github.com/users/gakonst/followers",
      "following_url": "https://api.github.com/users/gakonst/following{/other_user}",
      "gists_url": "https://api.github.com/users/gakonst/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gakonst/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gakonst/subscriptions",
      "organizations_url": "https://api.github.com/users/gakonst/orgs",
      "repos_url": "https://api.github.com/users/gakonst/repos",
      "events_url": "https://api.github.com/users/gakonst/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gakonst/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-23T22:43:06Z",
    "updated_at": "2022-09-23T22:43:06Z",
    "author_association": "MEMBER",
    "body": "Just to set expectations, nobody is working on this rn and we're not prioritizing it. Would happily accept a PR that implements something we agree to ",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1256761262/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1506005188",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1869#issuecomment-1506005188",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1869",
    "id": 1506005188,
    "node_id": "IC_kwDOGBlvNc5Zw9DE",
    "user": {
      "login": "PatrickAlphaC",
      "id": 54278053,
      "node_id": "MDQ6VXNlcjU0Mjc4MDUz",
      "avatar_url": "https://avatars.githubusercontent.com/u/54278053?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PatrickAlphaC",
      "html_url": "https://github.com/PatrickAlphaC",
      "followers_url": "https://api.github.com/users/PatrickAlphaC/followers",
      "following_url": "https://api.github.com/users/PatrickAlphaC/following{/other_user}",
      "gists_url": "https://api.github.com/users/PatrickAlphaC/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PatrickAlphaC/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PatrickAlphaC/subscriptions",
      "organizations_url": "https://api.github.com/users/PatrickAlphaC/orgs",
      "repos_url": "https://api.github.com/users/PatrickAlphaC/repos",
      "events_url": "https://api.github.com/users/PatrickAlphaC/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PatrickAlphaC/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-04-12T21:51:12Z",
    "updated_at": "2023-04-12T21:51:12Z",
    "author_association": "NONE",
    "body": "Additional context: https://github.com/foundry-rs/foundry/issues/3818",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1506005188/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1563364419",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1869#issuecomment-1563364419",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1869",
    "id": 1563364419,
    "node_id": "IC_kwDOGBlvNc5dLwxD",
    "user": {
      "login": "PatrickAlphaC",
      "id": 54278053,
      "node_id": "MDQ6VXNlcjU0Mjc4MDUz",
      "avatar_url": "https://avatars.githubusercontent.com/u/54278053?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PatrickAlphaC",
      "html_url": "https://github.com/PatrickAlphaC",
      "followers_url": "https://api.github.com/users/PatrickAlphaC/followers",
      "following_url": "https://api.github.com/users/PatrickAlphaC/following{/other_user}",
      "gists_url": "https://api.github.com/users/PatrickAlphaC/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PatrickAlphaC/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PatrickAlphaC/subscriptions",
      "organizations_url": "https://api.github.com/users/PatrickAlphaC/orgs",
      "repos_url": "https://api.github.com/users/PatrickAlphaC/repos",
      "events_url": "https://api.github.com/users/PatrickAlphaC/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PatrickAlphaC/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-25T18:52:44Z",
    "updated_at": "2023-05-25T18:56:40Z",
    "author_association": "NONE",
    "body": "I will pay someone to implement this. \r\n\r\nImport and encrypt a private key to a local keystore file\r\n\r\nAPI:\r\n```\r\ncast wallet import \r\n```\r\n\r\nThe usage/help command would look like this:\r\n\r\n```\r\nImports and encrypts a private key to a keystore file. \r\n\r\nUsage: cast wallet import <ACCOUNT_NAME>\r\n\r\nCommands:\r\n    --keystores The file to store your encrypted keystore (defaults to ~/.foundry/keystores\r\n```\r\n\r\nWhich prompts you for a private key that it will obfuscate and a password that it will also obfuscate. \r\n\r\n## Then ideally...\r\n\r\nYou could just run:\r\n\r\n```\r\nforge script scripts/<YOUR_SCRIPT> --account <account_name> --broadcast\r\n```\r\n\r\nAnd it will prompt you for the password to your keystore file. \r\n\r\nIt would be equivalent to:\r\n\r\n```\r\nforge script scripts/<YOUR_SCRIPT> --keystore ~/.foundry/<account_name>.json --password <password> --broadcast\r\n```\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1563364419/reactions",
      "total_count": 3,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 3,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1563393494",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1869#issuecomment-1563393494",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1869",
    "id": 1563393494,
    "node_id": "IC_kwDOGBlvNc5dL33W",
    "user": {
      "login": "PatrickAlphaC",
      "id": 54278053,
      "node_id": "MDQ6VXNlcjU0Mjc4MDUz",
      "avatar_url": "https://avatars.githubusercontent.com/u/54278053?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PatrickAlphaC",
      "html_url": "https://github.com/PatrickAlphaC",
      "followers_url": "https://api.github.com/users/PatrickAlphaC/followers",
      "following_url": "https://api.github.com/users/PatrickAlphaC/following{/other_user}",
      "gists_url": "https://api.github.com/users/PatrickAlphaC/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PatrickAlphaC/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PatrickAlphaC/subscriptions",
      "organizations_url": "https://api.github.com/users/PatrickAlphaC/orgs",
      "repos_url": "https://api.github.com/users/PatrickAlphaC/repos",
      "events_url": "https://api.github.com/users/PatrickAlphaC/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PatrickAlphaC/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-25T19:17:20Z",
    "updated_at": "2023-05-25T19:20:33Z",
    "author_association": "NONE",
    "body": "Idk if/how OpenQ works, but YOLO.\r\n\r\nhttps://openq.dev/contract/I_kwDOGBlvNc5LU_e_/0xd558ff76aa038da541202987c11ef61c0b8dacc2?invoiceable=false\r\n\r\nFunded this issue here. \r\n\r\nDeliverables (IMO):\r\n\r\n1. Fix @hbarcelos's issue\r\n2. Add my API (if the foundry core team likes it)\r\n3. Ideally fix https://github.com/foundry-rs/foundry/issues/3818 as well\r\n\r\nThe three is probably worth 1000 MATIC right? (...maybe?)",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1563393494/reactions",
      "total_count": 3,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 3,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1573650187",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1869#issuecomment-1573650187",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1869",
    "id": 1573650187,
    "node_id": "IC_kwDOGBlvNc5dy_8L",
    "user": {
      "login": "rickkdev",
      "id": 28826387,
      "node_id": "MDQ6VXNlcjI4ODI2Mzg3",
      "avatar_url": "https://avatars.githubusercontent.com/u/28826387?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rickkdev",
      "html_url": "https://github.com/rickkdev",
      "followers_url": "https://api.github.com/users/rickkdev/followers",
      "following_url": "https://api.github.com/users/rickkdev/following{/other_user}",
      "gists_url": "https://api.github.com/users/rickkdev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rickkdev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rickkdev/subscriptions",
      "organizations_url": "https://api.github.com/users/rickkdev/orgs",
      "repos_url": "https://api.github.com/users/rickkdev/repos",
      "events_url": "https://api.github.com/users/rickkdev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rickkdev/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-06-02T12:22:46Z",
    "updated_at": "2023-06-02T12:23:01Z",
    "author_association": "NONE",
    "body": "> Idk if/how OpenQ works, but YOLO.\r\n> \r\n> https://openq.dev/contract/I_kwDOGBlvNc5LU_e_/0xd558ff76aa038da541202987c11ef61c0b8dacc2?invoiceable=false\r\n> \r\n> Funded this issue here.\r\n> \r\n> Deliverables (IMO):\r\n> \r\n> 1. Fix @hbarcelos's issue\r\n> 2. Add my API (if the foundry core team likes it)\r\n> 3. Ideally fix [Support loading mnemonic + HD path as encrypted keystore #3818](https://github.com/foundry-rs/foundry/issues/3818) as well\r\n> \r\n> The three is probably worth 1000 MATIC right? (...maybe?)\r\n\r\nIt works :) merge the PR that is connected to this issue and the contributor can login to OpenQ and claim their money.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1573650187/reactions",
      "total_count": 5,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 3,
      "rocket": 0,
      "eyes": 2
    },
    "performed_via_github_app": null
  }
]
