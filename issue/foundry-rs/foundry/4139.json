{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/4139",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4139/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4139/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4139/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/4139",
  "id": 1550796162,
  "node_id": "I_kwDOGBlvNc5cb0WC",
  "number": 4139,
  "title": "Fuzzy Test Scenario where it always Under / Over flows",
  "user": {
    "login": "johnashu",
    "id": 26277199,
    "node_id": "MDQ6VXNlcjI2Mjc3MTk5",
    "avatar_url": "https://avatars.githubusercontent.com/u/26277199?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/johnashu",
    "html_url": "https://github.com/johnashu",
    "followers_url": "https://api.github.com/users/johnashu/followers",
    "following_url": "https://api.github.com/users/johnashu/following{/other_user}",
    "gists_url": "https://api.github.com/users/johnashu/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/johnashu/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/johnashu/subscriptions",
    "organizations_url": "https://api.github.com/users/johnashu/orgs",
    "repos_url": "https://api.github.com/users/johnashu/repos",
    "events_url": "https://api.github.com/users/johnashu/events{/privacy}",
    "received_events_url": "https://api.github.com/users/johnashu/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3334394228,
      "node_id": "MDU6TGFiZWwzMzM0Mzk0MjI4",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-bug",
      "name": "T-bug",
      "color": "d73a4a",
      "default": false,
      "description": "Type: bug"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 10,
  "created_at": "2023-01-20T12:48:46Z",
  "updated_at": "2023-01-26T15:30:33Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "### Component\r\n\r\nForge\r\n\r\n### Have you ensured that all of these are up to date?\r\n\r\n- [X] Foundry\r\n- [x] Foundryup\r\n\r\n### What version of Foundry are you on?\r\n\r\nforge 0.2.0 (d8f2434 2023-01-20T00:32:27.0786063Z)\r\n\r\n### What command(s) is the bug in?\r\n\r\nforge test\r\n\r\n### Operating System\r\n\r\nWindows\r\n\r\n### Describe the bug\r\n\r\nI have come across an issue whilst having a play with testing (I am just starting with Foundry from Hardhat/Truffle).\r\n\r\n**TDLR**, \r\n\r\n**WHEN** testing a contract\r\n**AND** the test function is designed to PASS (not `testFailXxxxx`)\r\n**AND** the test is a `Fuzzy` test, taking an argument and using it in a test function call)\r\n\r\n**IF** the function is increasing a value and returning it\r\n    **THEN**  it will run until it hits `0xff...`\r\n    **AND** fail the test\r\n\r\n**IF** the function is decreasing a value and returning it\r\n    **THEN**  it will run until it hits `0x00...`\r\n    **AND** fail the test\r\n\r\n\r\n**DETAILS**\r\n\r\nI created a simple function that adds 1 to an input:\r\n\r\n```solidity\r\nfunction addOne(uint256 x) external view returns (uint256) {\r\n        return ++x;\r\n    }\r\n```\r\n\r\nAnd created a test for this function with hardcoded values:\r\n\r\n```solidity\r\nfunction testAddOne() public {\r\n        assertEq(bug.addOne(2), 3);\r\n    }\r\n```\r\n\r\nPasses OK!\r\n\r\nI moved onto 'Fuzzy' testing and updated the function like so:\r\n\r\n```solidity\r\nfunction testAddOne(uint256 x) public {\r\n        assertEq(bug.addOne(x), x + 1);\r\n    }\r\n```\r\n\r\nNow I get a fail!!\r\n\r\nYou can see that it is sending in the Max value of a `uint256` and that the number of runs exceeds the 256 run that is expected. - `(runs: 299)`\r\n\r\n```bash\r\n[FAIL. Reason: Arithmetic over/underflow Counterexample: calldata=0xa76d58f5**ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff**, \r\nargs=[**115792089237316195423570985008687907853269984665640564039457584007913129639935**]] \r\ntestAddOne(uint256) **(runs: 299,** μ: 5688, ~: 5688)\r\nTraces:\r\n  [108385] BugTest::setUp()\r\n    ├─ [53905] → new Bug@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f\r\n    │   └─ ← 269 bytes of code\r\n    └─ ← ()\r\n\r\n  [5397] BugTest::testAddOne(**115792089237316195423570985008687907853269984665640564039457584007913129639935**)\r\n    ├─ [303] Bug::addOne(**115792089237316195423570985008687907853269984665640564039457584007913129639935**) [staticcall]\r\n    │   └─ ← \"Arithmetic over/underflow\"\r\n    └─ ← \"Arithmetic over/underflow\"\r\n```\r\n\r\nOk, so I noted this and carried on with my exploration as I cannot fix it (I tried updating everything and rebuilding everything and still the same)\r\n\r\nI got to the `testFailXXXXX`  part of the documentation and was having a play and applied it to the same function like so:\r\n\r\n```solidity\r\nfunction testFailAddOne(uint x) public {\r\n        assertEq(bug.addOne(x), x + 2);\r\n    }\r\n```\r\n\r\nExpecting it to throw the same error and I thought maybe I made a mistake in syntax with the +1 or something, so +2 surely should fail??\r\n\r\nNope! And it processed the expected 256 runs.\r\n\r\n```bash\r\n[**PASS**] testFailAddOne(uint256) **(runs: 256**, μ: 19196, ~: 20289)\r\nTraces:\r\n  [20289] BugTest::testFailAddOne(3329412423180596564739756140565163763831322173243704837981418)\r\n    ├─ [343] Bug::addOne(3329412423180596564739756140565163763831322173243704837981418) [staticcall]\r\n    │   └─ ← 3329412423180596564739756140565163763831322173243704837981419\r\n    ├─ emit log(: Error: a == b not satisfied [uint])\r\n    ├─ emit log_named_uint(key:   Expected, val: 3329412423180596564739756140565163763831322173243704837981420)\r\n    ├─ emit log_named_uint(key:     Actual, val: 3329412423180596564739756140565163763831322173243704837981419)\r\n    ├─ [0] VM::store(VM: [0x7109709ECfa91a80626fF3989D68f67F5b1DD12D], 0x6661696c65640000000000000000000000000000000000000000000000000000, 0x0000000000000000000000000000000000000000000000000000000000000001)\r\n    │   └─ ← ()\r\n    └─ ← ()\r\n```\r\n\r\nI also tried every variation of + and -\r\n\r\n```\r\nreturn ++x;\r\nx += 1; return x;\r\nuint y = 1; x+=y; return x (or y)\r\n...\r\n```\r\n\r\nThe same thing happens with `--x;` except that is performs less runs - `(runs: 2)`\r\n\r\n```bash\r\n[FAIL. Reason: Arithmetic over/underflow Counterexample: \r\ncalldata=0xdfcc5faa0000000000000000000000000000000000000000000000000000000000000000, args=[0]] \r\ntestMinusOne(uint256) (**runs: 2**, μ: 5685, ~: 5685)\r\n```   \r\n\r\nI  hope that is enough to understand the pattern here and below is an example test contract that _should_ reproduce the issue :)\r\n\r\n**POC**\r\n\r\n```solidty\r\n// Bug.t.sol\r\n\r\n// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.13;\r\n\r\nimport \"forge-std/Test.sol\";\r\n\r\ncontract Bug {\r\n    function addOne(uint256 x) external view returns (uint256) {\r\n        return ++x;\r\n    }\r\n\r\n    function minusOne(uint256 x) external pure returns (uint256) {\r\n        return --x;\r\n    }\r\n}\r\n\r\ncontract BugTest is Test {\r\n    Bug public bug;\r\n\r\n    function setUp() public {\r\n        bug = new Bug();\r\n    }\r\n\r\n    // Fails with Over / Under Flow..\r\n    function testAddOne(uint256 x) public {\r\n        assertEq(bug.addOne(x), x + 1);\r\n    }\r\n\r\n    // Passes no problem..\r\n    function testFailAddOne(uint x) public {\r\n        assertEq(bug.addOne(x), x + 2);\r\n    }\r\n\r\n    // Fails with Over / Under Flow..\r\n    function testMinusOne(uint256 x) public {\r\n        assertEq(bug.minusOne(x), x - 1);\r\n    }\r\n\r\n    // Passes no problem..\r\n    function testFailMinusOne(uint x) public {\r\n        assertEq(bug.minusOne(x), x - 2);\r\n    }\r\n}\r\n```\r\n\r\n\r\n\r\n\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/4139/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4139/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1399101208",
    "html_url": "https://github.com/foundry-rs/foundry/issues/4139#issuecomment-1399101208",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4139",
    "id": 1399101208,
    "node_id": "IC_kwDOGBlvNc5TZJcY",
    "user": {
      "login": "j-vp",
      "id": 104004836,
      "node_id": "U_kgDOBjL85A",
      "avatar_url": "https://avatars.githubusercontent.com/u/104004836?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/j-vp",
      "html_url": "https://github.com/j-vp",
      "followers_url": "https://api.github.com/users/j-vp/followers",
      "following_url": "https://api.github.com/users/j-vp/following{/other_user}",
      "gists_url": "https://api.github.com/users/j-vp/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/j-vp/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/j-vp/subscriptions",
      "organizations_url": "https://api.github.com/users/j-vp/orgs",
      "repos_url": "https://api.github.com/users/j-vp/repos",
      "events_url": "https://api.github.com/users/j-vp/events{/privacy}",
      "received_events_url": "https://api.github.com/users/j-vp/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-21T00:34:05Z",
    "updated_at": "2023-01-21T00:34:05Z",
    "author_association": "NONE",
    "body": "if your input is a uint256 and the function increases it with 1, it'll try `type(uint256).max + 1`, which will overflow. \nAdd a `vm.assume(x < type(uint256).max - 1` and it should work.\n\nSame for the `--x`, it'll underflow if the input is 0.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1399101208/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1399289227",
    "html_url": "https://github.com/foundry-rs/foundry/issues/4139#issuecomment-1399289227",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4139",
    "id": 1399289227,
    "node_id": "IC_kwDOGBlvNc5TZ3WL",
    "user": {
      "login": "johnashu",
      "id": 26277199,
      "node_id": "MDQ6VXNlcjI2Mjc3MTk5",
      "avatar_url": "https://avatars.githubusercontent.com/u/26277199?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/johnashu",
      "html_url": "https://github.com/johnashu",
      "followers_url": "https://api.github.com/users/johnashu/followers",
      "following_url": "https://api.github.com/users/johnashu/following{/other_user}",
      "gists_url": "https://api.github.com/users/johnashu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/johnashu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/johnashu/subscriptions",
      "organizations_url": "https://api.github.com/users/johnashu/orgs",
      "repos_url": "https://api.github.com/users/johnashu/repos",
      "events_url": "https://api.github.com/users/johnashu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/johnashu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-21T17:01:52Z",
    "updated_at": "2023-01-21T23:12:42Z",
    "author_association": "NONE",
    "body": "\r\n> if your input is a uint256 and the function increases it with 1, it'll try `type(uint256).max + 1`, which will overflow. Add a `vm.assume(x < type(uint256).max - 1` and it should work.\r\n> \r\n> Same for the `--x`, it'll underflow if the input is 0.\r\n\r\nI appreciate the work around but it happens every single run without exception.\r\n\r\nWhy does it not select the Highest uint256 when I expect a negative using `testFailAddOne`?\r\n\r\nWhy does it run OVER the 256 runs before hitting the max uint?\r\n\r\nI might also note that I took this example from a tutorial [Here:](https://w.mirror.xyz/mOUlpgkWA178HNUW7xR20TdbGRV6dMid7uChqxf9Z58)\r\n\r\n![image](https://user-images.githubusercontent.com/26277199/213878077-03ad007c-268a-480b-a5e8-5355c2b6f16c.png)\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1399289227/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1400026944",
    "html_url": "https://github.com/foundry-rs/foundry/issues/4139#issuecomment-1400026944",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4139",
    "id": 1400026944,
    "node_id": "IC_kwDOGBlvNc5TcrdA",
    "user": {
      "login": "j-vp",
      "id": 104004836,
      "node_id": "U_kgDOBjL85A",
      "avatar_url": "https://avatars.githubusercontent.com/u/104004836?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/j-vp",
      "html_url": "https://github.com/j-vp",
      "followers_url": "https://api.github.com/users/j-vp/followers",
      "following_url": "https://api.github.com/users/j-vp/following{/other_user}",
      "gists_url": "https://api.github.com/users/j-vp/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/j-vp/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/j-vp/subscriptions",
      "organizations_url": "https://api.github.com/users/j-vp/orgs",
      "repos_url": "https://api.github.com/users/j-vp/repos",
      "events_url": "https://api.github.com/users/j-vp/events{/privacy}",
      "received_events_url": "https://api.github.com/users/j-vp/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-23T09:24:13Z",
    "updated_at": "2023-01-23T09:24:24Z",
    "author_association": "NONE",
    "body": "`testAddOne(uint256)` will always fail as it will fuzzes the inputs and at the upper boundary of the fuzzed uint256 input it will fail.\r\n\r\n`testFailAddOne` passes, since this function will also fail and thus pass as a test.\r\n\r\nRegarding the amounts of runs: only the 299 is weird, what's the content of your `foundry.toml`? If a fuzz fails, it'll stop. If that happens to be on the second run, it'll show `runs: 2`. It might thus be that the amount of runs isn't always identical.\r\n\r\nAgain, the input of fuzzing tests should be constrained using `vm.assume`, which is Foundry's cheatcodes and thus how it's supposed to be used. In your case, you have to ensure that the fuzzed input is within operating bounds, meaning 1 or 2 below the max uint256. We use this extensively in our test suite (https://github.com/arcadia-finance/arcadia-vaults/tree/main/src/test) and is also used throughout the Foundry book (for example https://book.getfoundry.sh/cheatcodes/assume?highlight=vm.assume#examples).",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1400026944/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1400145684",
    "html_url": "https://github.com/foundry-rs/foundry/issues/4139#issuecomment-1400145684",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4139",
    "id": 1400145684,
    "node_id": "IC_kwDOGBlvNc5TdIcU",
    "user": {
      "login": "johnashu",
      "id": 26277199,
      "node_id": "MDQ6VXNlcjI2Mjc3MTk5",
      "avatar_url": "https://avatars.githubusercontent.com/u/26277199?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/johnashu",
      "html_url": "https://github.com/johnashu",
      "followers_url": "https://api.github.com/users/johnashu/followers",
      "following_url": "https://api.github.com/users/johnashu/following{/other_user}",
      "gists_url": "https://api.github.com/users/johnashu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/johnashu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/johnashu/subscriptions",
      "organizations_url": "https://api.github.com/users/johnashu/orgs",
      "repos_url": "https://api.github.com/users/johnashu/repos",
      "events_url": "https://api.github.com/users/johnashu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/johnashu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-23T10:49:28Z",
    "updated_at": "2023-01-23T10:50:16Z",
    "author_association": "NONE",
    "body": "> `testFailAddOne` passes, since this function will also fail and thus pass as a test.\r\n\r\nOf course! lol\r\n\r\n> Regarding the amounts of runs: only the 299 is weird, what's the content of your foundry.toml? If a fuzz fails, it'll stop. If that happens to be on the second run, it'll show runs: 2. It might thus be that the amount of runs isn't always identical.\r\n\r\nYeah, the runs being higher than the 256 is what really prompted the bug request.  Especially seeing as I copypasta it from a 'working' example.  \r\n\r\nMy .toml file is just default from `forge init` \r\n\r\n```toml\r\n[profile.default]\r\nsrc = 'src'\r\nout = 'out'\r\nlibs = ['lib']\r\n```\r\n\r\n> Again, the input of fuzzing tests should be constrained using `vm.assume`, which is Foundry's cheatcodes and thus how it's supposed to be used.\r\n\r\nThis does work and I will use it as expected (it is definitely a useful feature!) , thanks again, I am just starting with Foundry from Hardhat so I appreciate the help!\r\n\r\nIs this still viable as a bug?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1400145684/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1400232267",
    "html_url": "https://github.com/foundry-rs/foundry/issues/4139#issuecomment-1400232267",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4139",
    "id": 1400232267,
    "node_id": "IC_kwDOGBlvNc5TddlL",
    "user": {
      "login": "j-vp",
      "id": 104004836,
      "node_id": "U_kgDOBjL85A",
      "avatar_url": "https://avatars.githubusercontent.com/u/104004836?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/j-vp",
      "html_url": "https://github.com/j-vp",
      "followers_url": "https://api.github.com/users/j-vp/followers",
      "following_url": "https://api.github.com/users/j-vp/following{/other_user}",
      "gists_url": "https://api.github.com/users/j-vp/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/j-vp/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/j-vp/subscriptions",
      "organizations_url": "https://api.github.com/users/j-vp/orgs",
      "repos_url": "https://api.github.com/users/j-vp/repos",
      "events_url": "https://api.github.com/users/j-vp/events{/privacy}",
      "received_events_url": "https://api.github.com/users/j-vp/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-23T12:04:00Z",
    "updated_at": "2023-01-23T12:04:00Z",
    "author_association": "NONE",
    "body": "> Is this still viable as a bug?\r\n\r\nIf you can find a reproducible manner to get above the amount of fuzz runs, I think they'll pick it up as a bug. ",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1400232267/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1400295384",
    "html_url": "https://github.com/foundry-rs/foundry/issues/4139#issuecomment-1400295384",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4139",
    "id": 1400295384,
    "node_id": "IC_kwDOGBlvNc5Tds_Y",
    "user": {
      "login": "johnashu",
      "id": 26277199,
      "node_id": "MDQ6VXNlcjI2Mjc3MTk5",
      "avatar_url": "https://avatars.githubusercontent.com/u/26277199?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/johnashu",
      "html_url": "https://github.com/johnashu",
      "followers_url": "https://api.github.com/users/johnashu/followers",
      "following_url": "https://api.github.com/users/johnashu/following{/other_user}",
      "gists_url": "https://api.github.com/users/johnashu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/johnashu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/johnashu/subscriptions",
      "organizations_url": "https://api.github.com/users/johnashu/orgs",
      "repos_url": "https://api.github.com/users/johnashu/repos",
      "events_url": "https://api.github.com/users/johnashu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/johnashu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-23T12:56:51Z",
    "updated_at": "2023-01-23T13:46:04Z",
    "author_association": "NONE",
    "body": "> If you can find a reproducible manner to get above the amount of fuzz runs, I think they'll pick it up as a bug.\r\n\r\nFor me, the example test in the description: \r\n\r\n- The ++X fails every time and ALWAYS > 256 runs and always with max uint\r\n- The --X fails every time and ALWAYS == 2 runs and always with min uint\r\n\r\nI have ran it no less than 50 times lol. Tried with many different combinations but only your `vm.assume` worked! worked..\r\n\r\nIf it happened intermittently and within the 256 runs limit; this is supposed to be 256 **random** numbers in the range 0- uint256.max, the odds of it happening every single time is extremely unlikely!;  Then I would look at it differently but this is not the case..\r\n\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1400295384/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1400530386",
    "html_url": "https://github.com/foundry-rs/foundry/issues/4139#issuecomment-1400530386",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4139",
    "id": 1400530386,
    "node_id": "IC_kwDOGBlvNc5TemXS",
    "user": {
      "login": "j-vp",
      "id": 104004836,
      "node_id": "U_kgDOBjL85A",
      "avatar_url": "https://avatars.githubusercontent.com/u/104004836?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/j-vp",
      "html_url": "https://github.com/j-vp",
      "followers_url": "https://api.github.com/users/j-vp/followers",
      "following_url": "https://api.github.com/users/j-vp/following{/other_user}",
      "gists_url": "https://api.github.com/users/j-vp/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/j-vp/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/j-vp/subscriptions",
      "organizations_url": "https://api.github.com/users/j-vp/orgs",
      "repos_url": "https://api.github.com/users/j-vp/repos",
      "events_url": "https://api.github.com/users/j-vp/events{/privacy}",
      "received_events_url": "https://api.github.com/users/j-vp/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-23T15:22:32Z",
    "updated_at": "2023-01-23T15:22:32Z",
    "author_association": "NONE",
    "body": "I haven't tried to reproduce the issue that it fails with more fuzz runs than it should, do you have a repo available where this happens?\r\n\r\n> If it happened intermittently and within the 256 runs limit; this is supposed to be 256 random numbers in the range 0- uint256.max, the odds of it happening every single time is extremely unlikely!; Then I would look at it differently but this is not the case..\r\n\r\nFuzzing doesn't create inputs randomly, it always checks the boundries first, along with known uint's or addresses in the context of the test, to reach edgecases faster.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1400530386/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1400866320",
    "html_url": "https://github.com/foundry-rs/foundry/issues/4139#issuecomment-1400866320",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4139",
    "id": 1400866320,
    "node_id": "IC_kwDOGBlvNc5Tf4YQ",
    "user": {
      "login": "johnashu",
      "id": 26277199,
      "node_id": "MDQ6VXNlcjI2Mjc3MTk5",
      "avatar_url": "https://avatars.githubusercontent.com/u/26277199?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/johnashu",
      "html_url": "https://github.com/johnashu",
      "followers_url": "https://api.github.com/users/johnashu/followers",
      "following_url": "https://api.github.com/users/johnashu/following{/other_user}",
      "gists_url": "https://api.github.com/users/johnashu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/johnashu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/johnashu/subscriptions",
      "organizations_url": "https://api.github.com/users/johnashu/orgs",
      "repos_url": "https://api.github.com/users/johnashu/repos",
      "events_url": "https://api.github.com/users/johnashu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/johnashu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-23T19:27:48Z",
    "updated_at": "2023-01-23T19:27:48Z",
    "author_association": "NONE",
    "body": "> I haven't tried to reproduce the issue that it fails with more fuzz runs than it should, do you have a repo available where this happens?\r\n\r\nI have this repo here that I was using to have a play around.. the function in question is here:\r\n\r\n[Counter.t.sol#L63](https://github.com/johnashu/foundrySample/blob/6309cc373e20a09ecb81c701eabf6bee989f8089/test/Counter.t.sol#L63)\r\n\r\nI added another function using uint128 and it fails at <256 runs so I think it is more related to uint256 arguments regarding number of runs.\r\n\r\n\r\n> Fuzzing doesn't create inputs randomly, it always checks the boundries first, along with known uint's or addresses in the context of the test, to reach edgecases faster.\r\n\r\nThat it what I kind of expected.  :)",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1400866320/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1403305377",
    "html_url": "https://github.com/foundry-rs/foundry/issues/4139#issuecomment-1403305377",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4139",
    "id": 1403305377,
    "node_id": "IC_kwDOGBlvNc5TpL2h",
    "user": {
      "login": "j-vp",
      "id": 104004836,
      "node_id": "U_kgDOBjL85A",
      "avatar_url": "https://avatars.githubusercontent.com/u/104004836?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/j-vp",
      "html_url": "https://github.com/j-vp",
      "followers_url": "https://api.github.com/users/j-vp/followers",
      "following_url": "https://api.github.com/users/j-vp/following{/other_user}",
      "gists_url": "https://api.github.com/users/j-vp/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/j-vp/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/j-vp/subscriptions",
      "organizations_url": "https://api.github.com/users/j-vp/orgs",
      "repos_url": "https://api.github.com/users/j-vp/repos",
      "events_url": "https://api.github.com/users/j-vp/events{/privacy}",
      "received_events_url": "https://api.github.com/users/j-vp/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-25T09:17:14Z",
    "updated_at": "2023-01-25T09:17:14Z",
    "author_association": "NONE",
    "body": "Fuzzes more than the standard 256 times for me as well! I would close this ticket & reopen a new one specifically for that issue.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1403305377/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1405185166",
    "html_url": "https://github.com/foundry-rs/foundry/issues/4139#issuecomment-1405185166",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4139",
    "id": 1405185166,
    "node_id": "IC_kwDOGBlvNc5TwWyO",
    "user": {
      "login": "johnashu",
      "id": 26277199,
      "node_id": "MDQ6VXNlcjI2Mjc3MTk5",
      "avatar_url": "https://avatars.githubusercontent.com/u/26277199?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/johnashu",
      "html_url": "https://github.com/johnashu",
      "followers_url": "https://api.github.com/users/johnashu/followers",
      "following_url": "https://api.github.com/users/johnashu/following{/other_user}",
      "gists_url": "https://api.github.com/users/johnashu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/johnashu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/johnashu/subscriptions",
      "organizations_url": "https://api.github.com/users/johnashu/orgs",
      "repos_url": "https://api.github.com/users/johnashu/repos",
      "events_url": "https://api.github.com/users/johnashu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/johnashu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-26T15:30:32Z",
    "updated_at": "2023-01-26T15:30:32Z",
    "author_association": "NONE",
    "body": "> Fuzzes more than the standard 256 times for me as well! I would close this ticket & reopen a new one specifically for that issue.\r\n\r\nJust for the over 256.. I guess you think the `--x` is normal?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1405185166/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
