{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/4832",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4832/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4832/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4832/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/4832",
  "id": 1685786129,
  "node_id": "I_kwDOGBlvNc5kew4R",
  "number": 4832,
  "title": "bug(forge): `vm.expectRevert` without external call makes `assertEq` pass",
  "user": {
    "login": "0xPhaze",
    "id": 103113487,
    "node_id": "U_kgDOBiVjDw",
    "avatar_url": "https://avatars.githubusercontent.com/u/103113487?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/0xPhaze",
    "html_url": "https://github.com/0xPhaze",
    "followers_url": "https://api.github.com/users/0xPhaze/followers",
    "following_url": "https://api.github.com/users/0xPhaze/following{/other_user}",
    "gists_url": "https://api.github.com/users/0xPhaze/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/0xPhaze/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/0xPhaze/subscriptions",
    "organizations_url": "https://api.github.com/users/0xPhaze/orgs",
    "repos_url": "https://api.github.com/users/0xPhaze/repos",
    "events_url": "https://api.github.com/users/0xPhaze/events{/privacy}",
    "received_events_url": "https://api.github.com/users/0xPhaze/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3334394228,
      "node_id": "MDU6TGFiZWwzMzM0Mzk0MjI4",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-bug",
      "name": "T-bug",
      "color": "d73a4a",
      "default": false,
      "description": "Type: bug"
    },
    {
      "id": 3593644915,
      "node_id": "LA_kwDOGBlvNc7WMqtz",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/Cmd-forge-test",
      "name": "Cmd-forge-test",
      "color": "006B75",
      "default": false,
      "description": "Command: forge test"
    },
    {
      "id": 3703752787,
      "node_id": "LA_kwDOGBlvNc7cwshT",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/C-forge",
      "name": "C-forge",
      "color": "5319E7",
      "default": false,
      "description": "Command: forge"
    },
    {
      "id": 3703752960,
      "node_id": "LA_kwDOGBlvNc7cwskA",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/A-cheatcodes",
      "name": "A-cheatcodes",
      "color": "FBCA04",
      "default": false,
      "description": "Area: cheatcodes"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2023-04-26T21:51:42Z",
  "updated_at": "2023-04-30T14:05:21Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "### Component\n\nForge\n\n### Have you ensured that all of these are up to date?\n\n- [X] Foundry\n- [X] Foundryup\n\n### What version of Foundry are you on?\n\n_No response_\n\n### What command(s) is the bug in?\n\nforge test\n\n### Operating System\n\nmacOS (Apple Silicon)\n\n### Describe the bug\n\nThis test passes.\r\n\r\n```solidity\r\n    function testFun() public {\r\n        assertEq(uint256(1), 2);\r\n\r\n        vm.expectRevert();\r\n        revert();\r\n    }\r\n```\r\n\r\n```\r\nRunning 1 test for test/Contract.t.sol:ContractTest\r\n[PASS] testFun() (gas: 15068)\r\nLogs:\r\n  Error: a == b not satisfied [uint]\r\n        Left: 1\r\n       Right: 2\r\n\r\nTest result: ok. 1 passed; 0 failed; finished in 283.88Âµs\r\n```\r\n\r\nI know `vm.expectRevert` is not intended to be used on anything but external calls, but I still like using it for testing free functions.",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/4832/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4832/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1529015465",
    "html_url": "https://github.com/foundry-rs/foundry/issues/4832#issuecomment-1529015465",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/4832",
    "id": 1529015465,
    "node_id": "IC_kwDOGBlvNc5bIuyp",
    "user": {
      "login": "0xPhaze",
      "id": 103113487,
      "node_id": "U_kgDOBiVjDw",
      "avatar_url": "https://avatars.githubusercontent.com/u/103113487?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/0xPhaze",
      "html_url": "https://github.com/0xPhaze",
      "followers_url": "https://api.github.com/users/0xPhaze/followers",
      "following_url": "https://api.github.com/users/0xPhaze/following{/other_user}",
      "gists_url": "https://api.github.com/users/0xPhaze/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/0xPhaze/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/0xPhaze/subscriptions",
      "organizations_url": "https://api.github.com/users/0xPhaze/orgs",
      "repos_url": "https://api.github.com/users/0xPhaze/repos",
      "events_url": "https://api.github.com/users/0xPhaze/events{/privacy}",
      "received_events_url": "https://api.github.com/users/0xPhaze/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-04-30T12:32:57Z",
    "updated_at": "2023-04-30T12:32:57Z",
    "author_association": "NONE",
    "body": "Here is another strange case (though possibly related):\r\n\r\nhttps://github.com/0xPhaze/solnum/blob/d05fbe538c2dc610103a0b44c2ad8737407effbc/test/Random.t.sol#L71-L76\r\n```solidity\r\n    function test_addRandn_revert_Overflow() public {\r\n        Random r = seed(0);\r\n        vm.expectRevert(N32x32_Overflow.selector);\r\n\r\n        r.addRandn(sn.zeros(1, 100), sn.ONE);\r\n    }\r\n```\r\n\r\nThis function passes. It also passes when I remove the line containing `vm.expectRevert` which is strange. When I switch out the line `r.addRandn(...` for something else, like `Random r = seed(0);` it reverts (as expected). I tried quickly reproducing this in a simpler setup, but couldn't pin it down (there it worked as it should).",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1529015465/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
