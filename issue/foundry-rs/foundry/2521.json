{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/2521",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2521/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2521/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2521/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/2521",
  "id": 1322809677,
  "node_id": "I_kwDOGBlvNc5O2HlN",
  "number": 2521,
  "title": "vscode extension for inline real time gas stats",
  "user": {
    "login": "joshstevens19",
    "id": 18472422,
    "node_id": "MDQ6VXNlcjE4NDcyNDIy",
    "avatar_url": "https://avatars.githubusercontent.com/u/18472422?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/joshstevens19",
    "html_url": "https://github.com/joshstevens19",
    "followers_url": "https://api.github.com/users/joshstevens19/followers",
    "following_url": "https://api.github.com/users/joshstevens19/following{/other_user}",
    "gists_url": "https://api.github.com/users/joshstevens19/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/joshstevens19/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/joshstevens19/subscriptions",
    "organizations_url": "https://api.github.com/users/joshstevens19/orgs",
    "repos_url": "https://api.github.com/users/joshstevens19/repos",
    "events_url": "https://api.github.com/users/joshstevens19/events{/privacy}",
    "received_events_url": "https://api.github.com/users/joshstevens19/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3593644820,
      "node_id": "LA_kwDOGBlvNc7WMqsU",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-feature",
      "name": "T-feature",
      "color": "BFD4F2",
      "default": false,
      "description": "Type: feature"
    },
    {
      "id": 3759719790,
      "node_id": "LA_kwDOGBlvNc7gGMVu",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/P-low",
      "name": "P-low",
      "color": "D93F0B",
      "default": false,
      "description": "Priority: low"
    },
    {
      "id": 3759720129,
      "node_id": "LA_kwDOGBlvNc7gGMbB",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/D-hard",
      "name": "D-hard",
      "color": "0E8A16",
      "default": false,
      "description": "Difficulty: hard"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2022-07-30T00:02:57Z",
  "updated_at": "2022-07-31T13:10:24Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "### Component\r\n\r\nBrand new package.\r\n\r\n### Describe the feature you would like\r\n\r\nFirstly foundry is pushing Ethereum development to the next level, giving us tools just as good as you have in the web2 space. This is key for mass adoption, bringing new developers into the space, so thanks for smashing it guys. \r\n\r\nWas chatting to @gakonst about this on Twitter DMs and he told me to put the idea in here as a feature request:\r\n\r\nFrom seeing what foundry has built already when focusing on the amazing gas breakdowns it seems the bulk of the complex problem has been solved (working all that stuff out) and it's now pushing these amazing solutions as far as we can.\r\n\r\nIdea:\r\n\r\nGas optimization is very important to a lot of the Ethereum builders but even though it's incredible to quickly run a script to compare the gas changes how amazing would it be to see it in real-time as you change the code? \r\n\r\nThe idea is to build a vscode extension that outputs the gas consumption of each method and even each line which on save recomputes these figures and re-renders them in real-time. This allows solidity developers to see these changes next to the executing code itself (very powerful), it also allows them to see if they have increased the gas or decreased it as they change their code (again very powerful). \r\n\r\nWith the ability to compile rust code into WASM we could expose a simple TypeScript wrapper allowing the vscode extension to easily call it and then use all the built-in stuff vscode extension package has already solved to call on changes etc. \r\n\r\nIf the rust code had methods like:\r\n\r\n```\r\n// lazy load call on file open initial time then cache\r\ncomputeAllGas(fileLocation)\r\n// on change of a line after a 2-second break or whatever recall this to computer\r\nrecomputeGas(fileLocation, lineNumber)\r\n// just another nice way to compute the gas \r\nrecomputeGas(fileLocation, methodName)\r\n```\r\n\r\nIt would then be pretty easy in the vscode extension to call that interface to make this work really nicely for developers. \r\n\r\nHappy to write the vscode extension if the WASM rust part was done and exposed as a simple TypeScript wrapper. \r\n\r\nI think this could be a game changer in how people work and would improve the gas visibility a lot. \r\n\r\nOn top of this once we get this initial solution working we can then extend it to include code coverage, gas suggestions, and many more things! (foundry-vs-code)\r\n\r\nAnyway just dumping this here, let me know what people think üëç ",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/2521/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2521/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1200072046",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2521#issuecomment-1200072046",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2521",
    "id": 1200072046,
    "node_id": "IC_kwDOGBlvNc5Hh6Vu",
    "user": {
      "login": "0xEddie",
      "id": 36518273,
      "node_id": "MDQ6VXNlcjM2NTE4Mjcz",
      "avatar_url": "https://avatars.githubusercontent.com/u/36518273?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/0xEddie",
      "html_url": "https://github.com/0xEddie",
      "followers_url": "https://api.github.com/users/0xEddie/followers",
      "following_url": "https://api.github.com/users/0xEddie/following{/other_user}",
      "gists_url": "https://api.github.com/users/0xEddie/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/0xEddie/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/0xEddie/subscriptions",
      "organizations_url": "https://api.github.com/users/0xEddie/orgs",
      "repos_url": "https://api.github.com/users/0xEddie/repos",
      "events_url": "https://api.github.com/users/0xEddie/events{/privacy}",
      "received_events_url": "https://api.github.com/users/0xEddie/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-30T02:44:06Z",
    "updated_at": "2022-07-30T02:44:06Z",
    "author_association": "NONE",
    "body": "like quokka.js!\r\nsounds exciting",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1200072046/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1200422377",
    "html_url": "https://github.com/foundry-rs/foundry/issues/2521#issuecomment-1200422377",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/2521",
    "id": 1200422377,
    "node_id": "IC_kwDOGBlvNc5HjP3p",
    "user": {
      "login": "sambacha",
      "id": 32783916,
      "node_id": "MDQ6VXNlcjMyNzgzOTE2",
      "avatar_url": "https://avatars.githubusercontent.com/u/32783916?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sambacha",
      "html_url": "https://github.com/sambacha",
      "followers_url": "https://api.github.com/users/sambacha/followers",
      "following_url": "https://api.github.com/users/sambacha/following{/other_user}",
      "gists_url": "https://api.github.com/users/sambacha/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sambacha/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sambacha/subscriptions",
      "organizations_url": "https://api.github.com/users/sambacha/orgs",
      "repos_url": "https://api.github.com/users/sambacha/repos",
      "events_url": "https://api.github.com/users/sambacha/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sambacha/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-31T13:10:24Z",
    "updated_at": "2022-07-31T13:10:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "You can do this potentially just with defining a tasks.json file and having forge watch the directory and provide output. ",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1200422377/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
