{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/3754",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3754/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3754/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3754/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/3754",
  "id": 1462233142,
  "node_id": "I_kwDOGBlvNc5XJ-g2",
  "number": 3754,
  "title": "Broken JSON Parsing of Integers",
  "user": {
    "login": "apbendi",
    "id": 1479802,
    "node_id": "MDQ6VXNlcjE0Nzk4MDI=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1479802?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/apbendi",
    "html_url": "https://github.com/apbendi",
    "followers_url": "https://api.github.com/users/apbendi/followers",
    "following_url": "https://api.github.com/users/apbendi/following{/other_user}",
    "gists_url": "https://api.github.com/users/apbendi/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/apbendi/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/apbendi/subscriptions",
    "organizations_url": "https://api.github.com/users/apbendi/orgs",
    "repos_url": "https://api.github.com/users/apbendi/repos",
    "events_url": "https://api.github.com/users/apbendi/events{/privacy}",
    "received_events_url": "https://api.github.com/users/apbendi/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3334394228,
      "node_id": "MDU6TGFiZWwzMzM0Mzk0MjI4",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-bug",
      "name": "T-bug",
      "color": "d73a4a",
      "default": false,
      "description": "Type: bug"
    },
    {
      "id": 3703752787,
      "node_id": "LA_kwDOGBlvNc7cwshT",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/C-forge",
      "name": "C-forge",
      "color": "5319E7",
      "default": false,
      "description": "Command: forge"
    },
    {
      "id": 3703752960,
      "node_id": "LA_kwDOGBlvNc7cwskA",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/A-cheatcodes",
      "name": "A-cheatcodes",
      "color": "FBCA04",
      "default": false,
      "description": "Area: cheatcodes"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": {
    "login": "odyslam",
    "id": 13405632,
    "node_id": "MDQ6VXNlcjEzNDA1NjMy",
    "avatar_url": "https://avatars.githubusercontent.com/u/13405632?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/odyslam",
    "html_url": "https://github.com/odyslam",
    "followers_url": "https://api.github.com/users/odyslam/followers",
    "following_url": "https://api.github.com/users/odyslam/following{/other_user}",
    "gists_url": "https://api.github.com/users/odyslam/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/odyslam/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/odyslam/subscriptions",
    "organizations_url": "https://api.github.com/users/odyslam/orgs",
    "repos_url": "https://api.github.com/users/odyslam/repos",
    "events_url": "https://api.github.com/users/odyslam/events{/privacy}",
    "received_events_url": "https://api.github.com/users/odyslam/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "odyslam",
      "id": 13405632,
      "node_id": "MDQ6VXNlcjEzNDA1NjMy",
      "avatar_url": "https://avatars.githubusercontent.com/u/13405632?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/odyslam",
      "html_url": "https://github.com/odyslam",
      "followers_url": "https://api.github.com/users/odyslam/followers",
      "following_url": "https://api.github.com/users/odyslam/following{/other_user}",
      "gists_url": "https://api.github.com/users/odyslam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/odyslam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/odyslam/subscriptions",
      "organizations_url": "https://api.github.com/users/odyslam/orgs",
      "repos_url": "https://api.github.com/users/odyslam/repos",
      "events_url": "https://api.github.com/users/odyslam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/odyslam/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 10,
  "created_at": "2022-11-23T18:39:28Z",
  "updated_at": "2023-01-10T17:10:47Z",
  "closed_at": "2023-01-10T14:41:54Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "### Component\n\nForge\n\n### Have you ensured that all of these are up to date?\n\n- [X] Foundry\n- [X] Foundryup\n\n### What version of Foundry are you on?\n\nforge 0.2.0 (b28119b 2022-11-23T00:17:21.324951Z)\n\n### What command(s) is the bug in?\n\n_No response_\n\n### Operating System\n\nmacOS (Apple Silicon)\n\n### Describe the bug\n\nParsing quoted integers from a JSON file using `vm.parseJson` results in incorrect values at runtime. Attempting to parse non-quoted integers causes a revert.\r\n\r\nTo see this, checkout the [broken-json-inputs](https://github.com/gitcoinco/2022-Governor-upgrade/tree/broken-json-inputs) branch of the project. Copy the .env.template file to .env and add a private key to `DEPLOYER_PRIVATE_KEY=`. Run `forge test` to see the failing tests.\r\n\r\nRelevant code:\r\n\r\n* [JSON file](https://github.com/gitcoinco/2022-Governor-upgrade/blob/broken-json-inputs/script/deploy-input.json)\r\n* [Parsing](https://github.com/gitcoinco/2022-Governor-upgrade/blob/broken-json-inputs/script/Deploy.s.sol#L21)\r\n* [Failing Test Assertions](https://github.com/gitcoinco/2022-Governor-upgrade/blob/broken-json-inputs/test/GitcoinGovernor.t.sol#L28-L30) (due to numbers being incorrect at runtime)\r\n\r\nUnquote the strings in the json file and run `forge test`. You'll receive the following error:\r\n\r\n```\r\nFailing tests:\r\nEncountered 1 failing test in test/GitcoinGovernor.t.sol:GitcoinGovernorTest\r\n[FAIL. Reason: Setup failed: Failed to parse key $] setUp() (gas: 0)\r\n```",
  "closed_by": {
    "login": "rkrasiuk",
    "id": 25429261,
    "node_id": "MDQ6VXNlcjI1NDI5MjYx",
    "avatar_url": "https://avatars.githubusercontent.com/u/25429261?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/rkrasiuk",
    "html_url": "https://github.com/rkrasiuk",
    "followers_url": "https://api.github.com/users/rkrasiuk/followers",
    "following_url": "https://api.github.com/users/rkrasiuk/following{/other_user}",
    "gists_url": "https://api.github.com/users/rkrasiuk/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/rkrasiuk/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/rkrasiuk/subscriptions",
    "organizations_url": "https://api.github.com/users/rkrasiuk/orgs",
    "repos_url": "https://api.github.com/users/rkrasiuk/repos",
    "events_url": "https://api.github.com/users/rkrasiuk/events{/privacy}",
    "received_events_url": "https://api.github.com/users/rkrasiuk/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/3754/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3754/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1325510924",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3754#issuecomment-1325510924",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3754",
    "id": 1325510924,
    "node_id": "IC_kwDOGBlvNc5PAbEM",
    "user": {
      "login": "mattsse",
      "id": 19890894,
      "node_id": "MDQ6VXNlcjE5ODkwODk0",
      "avatar_url": "https://avatars.githubusercontent.com/u/19890894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mattsse",
      "html_url": "https://github.com/mattsse",
      "followers_url": "https://api.github.com/users/mattsse/followers",
      "following_url": "https://api.github.com/users/mattsse/following{/other_user}",
      "gists_url": "https://api.github.com/users/mattsse/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mattsse/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mattsse/subscriptions",
      "organizations_url": "https://api.github.com/users/mattsse/orgs",
      "repos_url": "https://api.github.com/users/mattsse/repos",
      "events_url": "https://api.github.com/users/mattsse/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mattsse/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-23T18:44:15Z",
    "updated_at": "2022-11-23T18:44:15Z",
    "author_association": "MEMBER",
    "body": "cc @odyslam ",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1325510924/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1325518920",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3754#issuecomment-1325518920",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3754",
    "id": 1325518920,
    "node_id": "IC_kwDOGBlvNc5PAdBI",
    "user": {
      "login": "odyslam",
      "id": 13405632,
      "node_id": "MDQ6VXNlcjEzNDA1NjMy",
      "avatar_url": "https://avatars.githubusercontent.com/u/13405632?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/odyslam",
      "html_url": "https://github.com/odyslam",
      "followers_url": "https://api.github.com/users/odyslam/followers",
      "following_url": "https://api.github.com/users/odyslam/following{/other_user}",
      "gists_url": "https://api.github.com/users/odyslam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/odyslam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/odyslam/subscriptions",
      "organizations_url": "https://api.github.com/users/odyslam/orgs",
      "repos_url": "https://api.github.com/users/odyslam/repos",
      "events_url": "https://api.github.com/users/odyslam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/odyslam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-23T18:48:22Z",
    "updated_at": "2022-11-23T18:52:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "Quoted integers are, by design, interpreted as strings and encoded as such. The solution is for the numbers to be type [number](https://json-schema.org/understanding-json-schema/reference/type.html) in the JSON. Everything works as expected.\r\n```\r\n{ \"a\": 123 }\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1325518920/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1325978130",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3754#issuecomment-1325978130",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3754",
    "id": 1325978130,
    "node_id": "IC_kwDOGBlvNc5PCNIS",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-24T05:34:07Z",
    "updated_at": "2022-11-24T05:35:25Z",
    "author_association": "COLLABORATOR",
    "body": "> The solution is for the numbers to be type [number](https://json-schema.org/understanding-json-schema/reference/type.html) in the JSON. Everything works as expected.\r\n\r\nIt works as expected up to values of `u64::MAX`, after that parsing fails 😅\r\n\r\nI also don't love that you have to store numbers as type \"number\", since this causes issues with other tooling. For example ethers.js will throw if you try to parse a number type larger than JS's `Number.MAX_SAFE_INTEGER` (~9e15) into a `BigNumber`, because numbers that large are unsafe in JS. This means I can't take a JSON file and read it in both solidity and JS.\r\n\r\nPerhaps we also need new `parseJson` methods that lets you specify the expected type, that way you can store the data in any format? e.g. `vm.parseJsonUint` would mean I can do `{ \"a\": 123 }` or `{ \"a\": \"0x7b\" }` or `{ \"a\": \"123\" }` and all get read in properly with that cheat",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1325978130/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1328087635",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3754#issuecomment-1328087635",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3754",
    "id": 1328087635,
    "node_id": "IC_kwDOGBlvNc5PKQJT",
    "user": {
      "login": "odyslam",
      "id": 13405632,
      "node_id": "MDQ6VXNlcjEzNDA1NjMy",
      "avatar_url": "https://avatars.githubusercontent.com/u/13405632?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/odyslam",
      "html_url": "https://github.com/odyslam",
      "followers_url": "https://api.github.com/users/odyslam/followers",
      "following_url": "https://api.github.com/users/odyslam/following{/other_user}",
      "gists_url": "https://api.github.com/users/odyslam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/odyslam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/odyslam/subscriptions",
      "organizations_url": "https://api.github.com/users/odyslam/orgs",
      "repos_url": "https://api.github.com/users/odyslam/repos",
      "events_url": "https://api.github.com/users/odyslam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/odyslam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-26T17:49:07Z",
    "updated_at": "2022-11-26T17:49:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "IIRC, I settled for type number because it's a rabbit hole to parse \"things\" into numbers. It had a false positive with H160 (addresses), and it seemed cleaner to have it that way. I think it's a pretty decent assumption.\r\n\r\nThe u64::MAX is probs a limitation that I should document.\r\n\r\nFor the bytes, we had that discussion due to the 'gas' field a while back, if you remember, and we settled that it's best to leave byte numbers as bytes. The way to interpret a hex number would be to load it as type 'bytes' and then abi.decode it to a number.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1328087635/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1328444412",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3754#issuecomment-1328444412",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3754",
    "id": 1328444412,
    "node_id": "IC_kwDOGBlvNc5PLnP8",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-28T02:23:17Z",
    "updated_at": "2022-11-28T02:23:17Z",
    "author_association": "COLLABORATOR",
    "body": "> IIRC, I settled for type number because it's a rabbit hole to parse \"things\" into numbers. It had a false positive with H160 (addresses), and it seemed cleaner to have it that way.\r\n\r\nThis make sense if you only have a single `vm.parseJson` cheat that needs to infer types from JSON, but I don't think we need to impose that restriction. Currently, you cannot have a JSON file that stores large numbers as human-readable strings which can be used by both solidity and JS, which feels like a significant limitation / poor UX, because:\r\n1. Hex numbers are harder to read than decimal\r\n2. There's no stdJson method to help go from hex string to uint through bytes, if you decided to store it as a hex string instead of decimal string (same for int, uint arrays, etc)\r\n\r\nIt seems:\r\n1. Adding `vm.parseJson*(Array)` cheats for all types, e.g. `vm.parseJsonUint` and `vm.parseJsonUintArray`, and\r\n2. Adding `readBytesAsUint` and `readBytesArrayAsUints`, etc. for ints, should be added to `StdJson.sol` in forge-std\r\n\r\nwould not be too difficult to add and resolve the UX issues. @odyslam @apbendi @mattsse lmk what you all think\r\n\r\n--------\r\n\r\nThough, all that aside, still not sure the original question from @apbendi is resolved? 😅 In particular:\r\n1. Why does it return 32 when you run the tests initially? I get that the length of the encoded string for those numbers is 32 bytes, but I don't yet understand specifically why it returns the length of the string as the parsed value. \r\n2. Why is there a `Failed to parse key` error? It's not clear exactly which key failed to parse or why.\r\n\r\nSo potentially still a bug somewhere?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1328444412/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1333771441",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3754#issuecomment-1333771441",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3754",
    "id": 1333771441,
    "node_id": "IC_kwDOGBlvNc5Pf7yx",
    "user": {
      "login": "odyslam",
      "id": 13405632,
      "node_id": "MDQ6VXNlcjEzNDA1NjMy",
      "avatar_url": "https://avatars.githubusercontent.com/u/13405632?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/odyslam",
      "html_url": "https://github.com/odyslam",
      "followers_url": "https://api.github.com/users/odyslam/followers",
      "following_url": "https://api.github.com/users/odyslam/following{/other_user}",
      "gists_url": "https://api.github.com/users/odyslam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/odyslam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/odyslam/subscriptions",
      "organizations_url": "https://api.github.com/users/odyslam/orgs",
      "repos_url": "https://api.github.com/users/odyslam/repos",
      "events_url": "https://api.github.com/users/odyslam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/odyslam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-12-01T13:27:55Z",
    "updated_at": "2022-12-01T13:27:55Z",
    "author_association": "CONTRIBUTOR",
    "body": "@mds1, that sounds good. Will prioritize some time today to address these.\r\n\r\nSorry for the delay folks",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1333771441/reactions",
      "total_count": 4,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 4,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1356316733",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3754#issuecomment-1356316733",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3754",
    "id": 1356316733,
    "node_id": "IC_kwDOGBlvNc5Q18A9",
    "user": {
      "login": "0xPhaze",
      "id": 103113487,
      "node_id": "U_kgDOBiVjDw",
      "avatar_url": "https://avatars.githubusercontent.com/u/103113487?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/0xPhaze",
      "html_url": "https://github.com/0xPhaze",
      "followers_url": "https://api.github.com/users/0xPhaze/followers",
      "following_url": "https://api.github.com/users/0xPhaze/following{/other_user}",
      "gists_url": "https://api.github.com/users/0xPhaze/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/0xPhaze/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/0xPhaze/subscriptions",
      "organizations_url": "https://api.github.com/users/0xPhaze/orgs",
      "repos_url": "https://api.github.com/users/0xPhaze/repos",
      "events_url": "https://api.github.com/users/0xPhaze/events{/privacy}",
      "received_events_url": "https://api.github.com/users/0xPhaze/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-12-17T15:57:28Z",
    "updated_at": "2022-12-17T15:58:44Z",
    "author_association": "NONE",
    "body": "Just wanted to chime in that I also encountered this and spent a good part of the day debugging. I found the error message pretty confusing. Would love to see this fixed!\r\n\r\nEdit: do we have any good workaround for now? Make all values string and call `vm.parseUint256`?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1356316733/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1364208398",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3754#issuecomment-1364208398",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3754",
    "id": 1364208398,
    "node_id": "IC_kwDOGBlvNc5RUCsO",
    "user": {
      "login": "odyslam",
      "id": 13405632,
      "node_id": "MDQ6VXNlcjEzNDA1NjMy",
      "avatar_url": "https://avatars.githubusercontent.com/u/13405632?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/odyslam",
      "html_url": "https://github.com/odyslam",
      "followers_url": "https://api.github.com/users/odyslam/followers",
      "following_url": "https://api.github.com/users/odyslam/following{/other_user}",
      "gists_url": "https://api.github.com/users/odyslam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/odyslam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/odyslam/subscriptions",
      "organizations_url": "https://api.github.com/users/odyslam/orgs",
      "repos_url": "https://api.github.com/users/odyslam/repos",
      "events_url": "https://api.github.com/users/odyslam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/odyslam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-12-23T18:57:16Z",
    "updated_at": "2022-12-24T02:07:45Z",
    "author_association": "CONTRIBUTOR",
    "body": "So, I spent quite some time exploring the best solution. The TL;DR is the following:\r\n- We can do the coercion, but only if the cheatcode parses a \"field\" from the Json. It must infer the field types if it attempts to parse an object. We could coerce every \"bytes\" field, but it doesn't seem very useful.\r\n- The u64::MAX limitation is solvable and will be standard U256::Max from now on.\r\n- The best solution IMHO is to do the coercion as follows: \r\n```\r\n// parse '0xbeef'\r\nuint256 bigNumber = vm.parseUint(vm.toString(vm.parseJson(file, key)));\r\n// parse '12344'\r\nuint256 bigNumber = vm.parseUint(vm.parseJson(file, key));\r\n```\r\n\r\nThe rust code looks considerable dirtier with the coercion and would rather have the above one-liner in the stdJson\r\n\r\nWould that be an acceptable solution @apbendi @mds1 ",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1364208398/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1369065599",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3754#issuecomment-1369065599",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3754",
    "id": 1369065599,
    "node_id": "IC_kwDOGBlvNc5Rmkh_",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-02T16:12:29Z",
    "updated_at": "2023-01-02T16:16:50Z",
    "author_association": "COLLABORATOR",
    "body": "Chatted with @odyslam a bit, here's what I think is the best path forward:\r\n\r\n> The u64::MAX limitation is solvable and will be standard U256::Max from now on.\r\n\r\nLet's still fix this. Then:\r\n\r\nCurrently `vm.parseJson` tries to infer types from the formatting in the JSON, which has limitations and footguns to be aware of as discussed above. Right now there are two ways a user may try to parse a uint JSON field, where the uint is stored as a decimal string or hex string:\r\n1. `uint256 x = vm.parseUint(vm.toString(vm.parseJson(file, key)))`\r\n2. `uint256 x = abi.decode(vm.parseJson(file, key), (uint256))`\r\n\r\nThe first case works for numbers of any size, and can be a helper in forge-std. The second case is riskier, as this can return the wrong value due to incorrect inference depending on the field format, and therefore we don't want users to use this. \r\n\r\nWe can't force users to use the `StdJson` library and should not have to rely on that for JSON parsing safety. Adding specifically-typed cheats such as `vm.parseJsonUint` would be safer and lead to the following guidance:\r\n- Use `vm.parseJson*` cheats to read individual fields. Examples:\r\n    - `uint256 balance = vm.parseJsonUint(json, \".balance\")` \r\n    - `uint256 balances = vm.parseJsonUintArray(json, \".balance[]\")` \r\n    - `address user = vm.parseJsonAddress(json, \".user\")`\r\n- Use `vm.parseJson` to parse multiple fields at once. This still returns ABI-encoded bytes that must be decoded by defining a struct of the right shape, and following the JSON parsing rules and limitations documented in the book (e.g. alphabetical order)",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1369065599/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1369068636",
    "html_url": "https://github.com/foundry-rs/foundry/issues/3754#issuecomment-1369068636",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/3754",
    "id": 1369068636,
    "node_id": "IC_kwDOGBlvNc5RmlRc",
    "user": {
      "login": "odyslam",
      "id": 13405632,
      "node_id": "MDQ6VXNlcjEzNDA1NjMy",
      "avatar_url": "https://avatars.githubusercontent.com/u/13405632?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/odyslam",
      "html_url": "https://github.com/odyslam",
      "followers_url": "https://api.github.com/users/odyslam/followers",
      "following_url": "https://api.github.com/users/odyslam/following{/other_user}",
      "gists_url": "https://api.github.com/users/odyslam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/odyslam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/odyslam/subscriptions",
      "organizations_url": "https://api.github.com/users/odyslam/orgs",
      "repos_url": "https://api.github.com/users/odyslam/repos",
      "events_url": "https://api.github.com/users/odyslam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/odyslam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-02T16:15:42Z",
    "updated_at": "2023-01-10T17:10:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "I am on board with the above @mds1, and it should also be pretty clear in the rust code. I will probably use the `parse*` backend to have consistent conversion amongst the different cheatcodes. \r\n\r\nThe next steps are:\r\n- [x] PR with the above changes\r\n- [x] PR to book to update reference documentation\r\n- [x] PR to book for the definitive guide on having to read/write JSON files + public announcement of the improvements (e.g what to expect, new API, etc.)",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1369068636/reactions",
      "total_count": 2,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 1,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
