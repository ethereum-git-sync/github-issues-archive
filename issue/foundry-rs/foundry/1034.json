{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/1034",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1034/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1034/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1034/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/1034",
  "id": 1178846057,
  "node_id": "I_kwDOGBlvNc5GQ8Np",
  "number": 1034,
  "title": "feat: support environment variables in `foundry.toml`",
  "user": {
    "login": "mds1",
    "id": 17163988,
    "node_id": "MDQ6VXNlcjE3MTYzOTg4",
    "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mds1",
    "html_url": "https://github.com/mds1",
    "followers_url": "https://api.github.com/users/mds1/followers",
    "following_url": "https://api.github.com/users/mds1/following{/other_user}",
    "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
    "organizations_url": "https://api.github.com/users/mds1/orgs",
    "repos_url": "https://api.github.com/users/mds1/repos",
    "events_url": "https://api.github.com/users/mds1/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mds1/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3593644820,
      "node_id": "LA_kwDOGBlvNc7WMqsU",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-feature",
      "name": "T-feature",
      "color": "BFD4F2",
      "default": false,
      "description": "Type: feature"
    },
    {
      "id": 3703752787,
      "node_id": "LA_kwDOGBlvNc7cwshT",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/C-forge",
      "name": "C-forge",
      "color": "5319E7",
      "default": false,
      "description": "Command: forge"
    },
    {
      "id": 3759719790,
      "node_id": "LA_kwDOGBlvNc7gGMVu",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/P-low",
      "name": "P-low",
      "color": "D93F0B",
      "default": false,
      "description": "Priority: low"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 32,
  "created_at": "2022-03-24T01:55:39Z",
  "updated_at": "2022-08-25T15:04:48Z",
  "closed_at": "2022-08-25T15:04:48Z",
  "author_association": "COLLABORATOR",
  "active_lock_reason": null,
  "body": "### Component\n\nForge\n\n### Describe the feature you would like\n\nA common use case is configuring test params with environment variables, with the RPC URL used for forking tests being a popular example. Right now there is now way to specify in the config file to use a certain environment variable for fork URLs, and instead you'd have to pass this in to the test command, e.g. `forge test --fork-url $MY_RPC_URL`\n\n### Additional context\n\n_No response_",
  "closed_by": {
    "login": "mattsse",
    "id": 19890894,
    "node_id": "MDQ6VXNlcjE5ODkwODk0",
    "avatar_url": "https://avatars.githubusercontent.com/u/19890894?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mattsse",
    "html_url": "https://github.com/mattsse",
    "followers_url": "https://api.github.com/users/mattsse/followers",
    "following_url": "https://api.github.com/users/mattsse/following{/other_user}",
    "gists_url": "https://api.github.com/users/mattsse/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mattsse/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mattsse/subscriptions",
    "organizations_url": "https://api.github.com/users/mattsse/orgs",
    "repos_url": "https://api.github.com/users/mattsse/repos",
    "events_url": "https://api.github.com/users/mattsse/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mattsse/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/1034/reactions",
    "total_count": 2,
    "+1": 2,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1034/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1077003039",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1034#issuecomment-1077003039",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1034",
    "id": 1077003039,
    "node_id": "IC_kwDOGBlvNc5AMcMf",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-24T02:26:54Z",
    "updated_at": "2022-03-24T02:28:34Z",
    "author_association": "MEMBER",
    "body": "It should be the case that all things in `foundry.toml` can be configured using `FOUNDRY_*`, e.g. `FOUNDRY_ETH_RPC_URL` in your case\r\n\r\nEdit: Ah, you want to override the environment variable used?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1077003039/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1077006420",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1034#issuecomment-1077006420",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1034",
    "id": 1077006420,
    "node_id": "IC_kwDOGBlvNc5AMdBU",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-24T02:33:48Z",
    "updated_at": "2022-03-24T02:33:48Z",
    "author_association": "COLLABORATOR",
    "body": "Yea I want someone to be able to clone a repo, configure a `.env` file, and have `forge test` run with those environment variables which get loaded because they're used the config file. Currently you have to run `forge test --fork-url $RPC_URL` which obviously isn't a huge deal, but being able to do everything in the config file, instead of splitting between config file and command line, is better UX IMO",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1077006420/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1079248696",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1034#issuecomment-1079248696",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1034",
    "id": 1079248696,
    "node_id": "IC_kwDOGBlvNc5AVAc4",
    "user": {
      "login": "rpedroni",
      "id": 759187,
      "node_id": "MDQ6VXNlcjc1OTE4Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/759187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rpedroni",
      "html_url": "https://github.com/rpedroni",
      "followers_url": "https://api.github.com/users/rpedroni/followers",
      "following_url": "https://api.github.com/users/rpedroni/following{/other_user}",
      "gists_url": "https://api.github.com/users/rpedroni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rpedroni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rpedroni/subscriptions",
      "organizations_url": "https://api.github.com/users/rpedroni/orgs",
      "repos_url": "https://api.github.com/users/rpedroni/repos",
      "events_url": "https://api.github.com/users/rpedroni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rpedroni/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-25T17:31:14Z",
    "updated_at": "2022-03-25T17:31:14Z",
    "author_association": "NONE",
    "body": "+1 not having to change tracked files makes for better DX",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1079248696/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1079846395",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1034#issuecomment-1079846395",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1034",
    "id": 1079846395,
    "node_id": "IC_kwDOGBlvNc5AXSX7",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-27T05:54:57Z",
    "updated_at": "2022-03-27T05:55:22Z",
    "author_association": "MEMBER",
    "body": "Still unsure about this, I don't know of any tools that allow this other than DappTools because they used a full bash script for configuration, and I don't think there's a clean way to do this in TOML either. Any reason you don't just do the renaming in your environment script that we could autoload instead?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1079846395/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1079929940",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1034#issuecomment-1079929940",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1034",
    "id": 1079929940,
    "node_id": "IC_kwDOGBlvNc5AXmxU",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-27T13:16:14Z",
    "updated_at": "2022-03-27T13:17:29Z",
    "author_association": "COLLABORATOR",
    "body": "You could argue hardhat does allow for this: In `hardhat.config.ts` you can access env vars like normal with `process.env.MY_ENV_VAR`. So a common approach is something like this:\r\n- Commit a file called `.env.example` with the contents `FORK_RPC_URL=mainnetRpcUrlHere`.\r\n- Readme instructs users to run `cp .env.example .env` and add their RPC URL.\r\n- The hardhat config defines the `hardhat` network configuration to fork form `process.env.FORK_RPC_URL`.\r\n- Now, running the standard `hardhat test` command reads the env var in the config and runs tests against that fork. \r\n\r\nThough to your point I don't think there's a way to do this natively in TOML files. I think the easiest way is to define a custom syntax like `env:MY_ENV_VAR` or `$MY_ENV_VAR` and manually replace that string with the corresponding env var at runtime.\r\n\r\n> Any reason you don't just do the renaming in your environment script that we could autoload instead?\r\n\r\nSorry, not sure I follow what environment script forge would autoload. Do you mean e.g. using a makefile to define test commands with env vars and running `make test` instead of `forge test`?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1079929940/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1080547255",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1034#issuecomment-1080547255",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1034",
    "id": 1080547255,
    "node_id": "IC_kwDOGBlvNc5AZ9e3",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-28T11:42:23Z",
    "updated_at": "2022-03-28T11:42:23Z",
    "author_association": "MEMBER",
    "body": "I mean if Forge auto-loaded `.env` for example",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1080547255/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1081208751",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1034#issuecomment-1081208751",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1034",
    "id": 1081208751,
    "node_id": "IC_kwDOGBlvNc5Ace-v",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-28T22:17:19Z",
    "updated_at": "2022-03-28T22:17:19Z",
    "author_association": "COLLABORATOR",
    "body": "Ahh interesting! Let me make sure I'm understanding: Since every param in `foundry.toml` can also be set with `FOUNDRY_PARAM_NAME`, you're suggestion the way to use env vars would be define those params in `.env` instead of `foundry.toml`, then add a PR which auto-loads `.env` at the beginning of a `forge` command? And presumably the env file would always take precedence over the config?\r\n\r\nI'd say that's an acceptable short term solution, with the reasons I don't love it being that:\r\n1. If an env var isn't set, tests will still run but likely fail (e.g. because they're not running against a forked network), which isn't very intuitive behavior. Whereas with the \"env vars in config file\" approach we can have an explicit `ENV_VAR not set` error\r\n2. It still fragments config so it's partially in the config file and partially in the env file\r\n3. You can't use different env vars for different profiles (admittedly I don't have a use case in mind for this, it just seems like a nice property)",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1081208751/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1091475890",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1034#issuecomment-1091475890",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1034",
    "id": 1091475890,
    "node_id": "IC_kwDOGBlvNc5BDpmy",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-07T10:04:46Z",
    "updated_at": "2022-04-07T10:04:46Z",
    "author_association": "MEMBER",
    "body": "Yes, that's what I mean.\r\n\r\nI think the main reason I don't like the env vars in `foundry.toml` approach is that it's non-standard TOML and requires us to do a little hacking, which I'd rather avoid if possible.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1091475890/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1091701678",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1034#issuecomment-1091701678",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1034",
    "id": 1091701678,
    "node_id": "IC_kwDOGBlvNc5BEguu",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-07T12:55:37Z",
    "updated_at": "2022-04-07T12:55:37Z",
    "author_association": "COLLABORATOR",
    "body": "Makes sense. Maybe a good solution to mitigate items 1 and 2 is adding a field to the config file called something like `env-vars=['FOUNDRY_FORK_URL', 'FOUNDRY_FORK_BLOCK']`, and foundry auto-loads those env vars specifically? (Those might not be the right names for this example, I don't see them in the foundry book config reference page and don't remember offhand). This way if an env var is missing, foundry knows and can show a warning or error.\r\n\r\nNot sure whether it'd be better to specify the env var names specifically there, or the config file field names which foundry would convert to the env var format",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1091701678/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1092193203",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1034#issuecomment-1092193203",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1034",
    "id": 1092193203,
    "node_id": "IC_kwDOGBlvNc5BGYuz",
    "user": {
      "login": "sambacha",
      "id": 32783916,
      "node_id": "MDQ6VXNlcjMyNzgzOTE2",
      "avatar_url": "https://avatars.githubusercontent.com/u/32783916?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sambacha",
      "html_url": "https://github.com/sambacha",
      "followers_url": "https://api.github.com/users/sambacha/followers",
      "following_url": "https://api.github.com/users/sambacha/following{/other_user}",
      "gists_url": "https://api.github.com/users/sambacha/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sambacha/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sambacha/subscriptions",
      "organizations_url": "https://api.github.com/users/sambacha/orgs",
      "repos_url": "https://api.github.com/users/sambacha/repos",
      "events_url": "https://api.github.com/users/sambacha/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sambacha/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-07T20:57:06Z",
    "updated_at": "2022-04-07T20:57:06Z",
    "author_association": "CONTRIBUTOR",
    "body": "Why not use something like Justfile? eg https://github.com/sambacha/foundry-scripts/blob/master/justfile\n\nThis loads env file, etc ",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1092193203/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1129400717",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1034#issuecomment-1129400717",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1034",
    "id": 1129400717,
    "node_id": "IC_kwDOGBlvNc5DUUmN",
    "user": {
      "login": "gakonst",
      "id": 17802178,
      "node_id": "MDQ6VXNlcjE3ODAyMTc4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17802178?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gakonst",
      "html_url": "https://github.com/gakonst",
      "followers_url": "https://api.github.com/users/gakonst/followers",
      "following_url": "https://api.github.com/users/gakonst/following{/other_user}",
      "gists_url": "https://api.github.com/users/gakonst/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gakonst/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gakonst/subscriptions",
      "organizations_url": "https://api.github.com/users/gakonst/orgs",
      "repos_url": "https://api.github.com/users/gakonst/repos",
      "events_url": "https://api.github.com/users/gakonst/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gakonst/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-17T23:01:21Z",
    "updated_at": "2022-05-17T23:50:07Z",
    "author_association": "MEMBER",
    "body": "Here's one idea:\r\n\r\n1. We autoload `.env` if present (does this still work on Windows?) to set env vars\r\n2. We allow the `env(\"<VALUE>\")` syntax inside `foundry.toml`. Before running anything, we search + replace any instances of `env(\"FOO\")` with the value of the environment value `FOO`. \r\n\r\nExample:\r\n\r\n```toml\r\n[default]\r\nsrc = 'src'\r\ntest = 'test'\r\neth-rpc-url = 'https://mainnet.infura.io/v3/env(\"INFURA_API\")'\r\n\r\n[rinkeby]\r\neth-rpc-url = 'https://rinkeby.infura.io/v3/env(\"INFURA_API\")'\r\n```\r\n\r\n## Edge case 1\r\n\r\nHardhat will error if no env var is present (because `process.env.INFURA_API` will return `undefined` and it'll try to read an undefined value), so there's a world where we do that. There's also a world where if a parameter needs an env var but that env var is not present, then we simply ignore that parameter and use the default value from the config (e.g. if `INFURA_API` isn't set above, we just consider `eth-rpc-url` as unset, but if it's set, `forge test` will assume that it's called as `forge test --rpc-url`)",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1129400717/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1129942545",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1034#issuecomment-1129942545",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1034",
    "id": 1129942545,
    "node_id": "IC_kwDOGBlvNc5DWY4R",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-18T12:26:11Z",
    "updated_at": "2022-05-18T12:26:11Z",
    "author_association": "COLLABORATOR",
    "body": "Personally I like that approach, though I know above @onbjerg mentioned he didn't love the idea of non-standard TOML, but I do think it provides the best and simplest UX.\r\n\r\nIf you specify an env var in your config but it's not present, we should probably error. I suspect most cases (such as fork URLs and API keys) would end up erroring anyway, or resulting in unexpected behavior, if you tried to fall back to some default value.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1129942545/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1130202954",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1034#issuecomment-1130202954",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1034",
    "id": 1130202954,
    "node_id": "IC_kwDOGBlvNc5DXYdK",
    "user": {
      "login": "gakonst",
      "id": 17802178,
      "node_id": "MDQ6VXNlcjE3ODAyMTc4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17802178?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gakonst",
      "html_url": "https://github.com/gakonst",
      "followers_url": "https://api.github.com/users/gakonst/followers",
      "following_url": "https://api.github.com/users/gakonst/following{/other_user}",
      "gists_url": "https://api.github.com/users/gakonst/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gakonst/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gakonst/subscriptions",
      "organizations_url": "https://api.github.com/users/gakonst/orgs",
      "repos_url": "https://api.github.com/users/gakonst/repos",
      "events_url": "https://api.github.com/users/gakonst/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gakonst/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-18T15:59:34Z",
    "updated_at": "2022-05-18T15:59:34Z",
    "author_association": "MEMBER",
    "body": "@onbjerg curious for any strong opinions re: my comment above?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1130202954/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1131935736",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1034#issuecomment-1131935736",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1034",
    "id": 1131935736,
    "node_id": "IC_kwDOGBlvNc5Dd_f4",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-19T16:30:59Z",
    "updated_at": "2022-05-19T16:30:59Z",
    "author_association": "MEMBER",
    "body": "I think if we want inline env vars I'd rather go with something standard like `${ENV}`. Additionally, there is a question around how this would work for non-string config since the TOML library we use parse stuff strongly typed, so it probably wouldn't work without a custom deserializer",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1131935736/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1132018024",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1034#issuecomment-1132018024",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1034",
    "id": 1132018024,
    "node_id": "IC_kwDOGBlvNc5DeTlo",
    "user": {
      "login": "gakonst",
      "id": 17802178,
      "node_id": "MDQ6VXNlcjE3ODAyMTc4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17802178?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gakonst",
      "html_url": "https://github.com/gakonst",
      "followers_url": "https://api.github.com/users/gakonst/followers",
      "following_url": "https://api.github.com/users/gakonst/following{/other_user}",
      "gists_url": "https://api.github.com/users/gakonst/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gakonst/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gakonst/subscriptions",
      "organizations_url": "https://api.github.com/users/gakonst/orgs",
      "repos_url": "https://api.github.com/users/gakonst/repos",
      "events_url": "https://api.github.com/users/gakonst/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gakonst/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-19T17:58:23Z",
    "updated_at": "2022-05-19T17:58:23Z",
    "author_association": "MEMBER",
    "body": "I'm :+1: with calling it `${ENV}`",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1132018024/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1151180866",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1034#issuecomment-1151180866",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1034",
    "id": 1151180866,
    "node_id": "IC_kwDOGBlvNc5EnaBC",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-09T14:19:01Z",
    "updated_at": "2022-06-09T14:19:01Z",
    "author_association": "MEMBER",
    "body": "This comment might be relevant: https://github.com/foundry-rs/foundry/issues/1457#issuecomment-1147407539",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1151180866/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1152168108",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1034#issuecomment-1152168108",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1034",
    "id": 1152168108,
    "node_id": "IC_kwDOGBlvNc5ErLCs",
    "user": {
      "login": "StErMi",
      "id": 146166,
      "node_id": "MDQ6VXNlcjE0NjE2Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/146166?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/StErMi",
      "html_url": "https://github.com/StErMi",
      "followers_url": "https://api.github.com/users/StErMi/followers",
      "following_url": "https://api.github.com/users/StErMi/following{/other_user}",
      "gists_url": "https://api.github.com/users/StErMi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/StErMi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/StErMi/subscriptions",
      "organizations_url": "https://api.github.com/users/StErMi/orgs",
      "repos_url": "https://api.github.com/users/StErMi/repos",
      "events_url": "https://api.github.com/users/StErMi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/StErMi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-10T09:32:40Z",
    "updated_at": "2022-06-10T09:32:40Z",
    "author_association": "NONE",
    "body": "> Here's one idea:\r\n> \r\n> 1. We autoload `.env` if present (does this still work on Windows?) to set env vars\r\n> 2. We allow the `env(\"<VALUE>\")` syntax inside `foundry.toml`. Before running anything, we search + replace any instances of `env(\"FOO\")` with the value of the environment value `FOO`.\r\n> \r\n> Example:\r\n> \r\n> ```toml\r\n> [default]\r\n> src = 'src'\r\n> test = 'test'\r\n> eth-rpc-url = 'https://mainnet.infura.io/v3/env(\"INFURA_API\")'\r\n> \r\n> [rinkeby]\r\n> eth-rpc-url = 'https://rinkeby.infura.io/v3/env(\"INFURA_API\")'\r\n> ```\r\n\r\n\r\nQuoting from my https://github.com/foundry-rs/foundry/issues/1457#issuecomment-1147407539 comment an enhancement to your suggestion (that's the same thing I wanted to implement on the other thread) would be to also allow the developer to have different `.env` files.\r\n\r\n`.env` is the default one, and it acts like the `default` profile for foundry. \r\nYou can have multiple `.env` file, each one for a profile you have defined on the `foundry.toml` config file.\r\n\r\nIf you specify a profile when running a foundry script, foundry will load the `.env` file and the corresponding `.env.profilename` file, merge them (the more specific one will override when possible the generic one) and at that point you will apply those env variables to the script.\r\n\r\nWould this make sense?\r\n\r\nSide question: how can I specify the `profile` when launching `forge test`? There's no way to specify it via `--profile` but only via an ENV var, so I would need to have the script like this to make it work?\r\n\r\n```json\r\n{\r\n  \"scripts\": {\r\n    \"test\": \"FOUNDRY_PROFILE=rinkeby forge test\"\r\n  }\r\n}\r\n```\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1152168108/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1152953597",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1034#issuecomment-1152953597",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1034",
    "id": 1152953597,
    "node_id": "IC_kwDOGBlvNc5EuKz9",
    "user": {
      "login": "gakonst",
      "id": 17802178,
      "node_id": "MDQ6VXNlcjE3ODAyMTc4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17802178?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gakonst",
      "html_url": "https://github.com/gakonst",
      "followers_url": "https://api.github.com/users/gakonst/followers",
      "following_url": "https://api.github.com/users/gakonst/following{/other_user}",
      "gists_url": "https://api.github.com/users/gakonst/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gakonst/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gakonst/subscriptions",
      "organizations_url": "https://api.github.com/users/gakonst/orgs",
      "repos_url": "https://api.github.com/users/gakonst/repos",
      "events_url": "https://api.github.com/users/gakonst/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gakonst/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-11T15:45:43Z",
    "updated_at": "2022-06-11T15:45:43Z",
    "author_association": "MEMBER",
    "body": "I think I prefer the approach mentioned above with `${ENV}`. Don't like forcing dotenv files to the user.\r\n\r\n> Side question: how can I specify the profile when launching forge test? There's no way to specify it via --profile but only via an ENV var, so I would need to have the script like this to make it work?\r\n\r\nYep.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1152953597/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1153087583",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1034#issuecomment-1153087583",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1034",
    "id": 1153087583,
    "node_id": "IC_kwDOGBlvNc5Eurhf",
    "user": {
      "login": "StErMi",
      "id": 146166,
      "node_id": "MDQ6VXNlcjE0NjE2Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/146166?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/StErMi",
      "html_url": "https://github.com/StErMi",
      "followers_url": "https://api.github.com/users/StErMi/followers",
      "following_url": "https://api.github.com/users/StErMi/following{/other_user}",
      "gists_url": "https://api.github.com/users/StErMi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/StErMi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/StErMi/subscriptions",
      "organizations_url": "https://api.github.com/users/StErMi/orgs",
      "repos_url": "https://api.github.com/users/StErMi/repos",
      "events_url": "https://api.github.com/users/StErMi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/StErMi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-12T06:58:21Z",
    "updated_at": "2022-06-12T06:58:21Z",
    "author_association": "NONE",
    "body": "> I think I prefer the approach mentioned above with `${ENV}`. Don't like forcing dotenv files to the user.\r\n> \r\n> > Side question: how can I specify the profile when launching forge test? There's no way to specify it via --profile but only via an ENV var, so I would need to have the script like this to make it work?\r\n> \r\n> Yep.\r\n\r\nMaybe I didn't understand it, how can I pass locally those env vars without the support of a `.env` standard?\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1153087583/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1153703219",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1034#issuecomment-1153703219",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1034",
    "id": 1153703219,
    "node_id": "IC_kwDOGBlvNc5ExB0z",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-13T09:42:31Z",
    "updated_at": "2022-06-13T09:42:31Z",
    "author_association": "MEMBER",
    "body": "It depends on your shell, but in bash you would prepend the variables like so:\r\n\r\n`FOO=bar ./my-program`\r\n\r\nAlternatively you can source your `.env` before running commands:\r\n\r\n```sh\r\nsource .env\r\n./my-program\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1153703219/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1153706875",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1034#issuecomment-1153706875",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1034",
    "id": 1153706875,
    "node_id": "IC_kwDOGBlvNc5ExCt7",
    "user": {
      "login": "StErMi",
      "id": 146166,
      "node_id": "MDQ6VXNlcjE0NjE2Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/146166?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/StErMi",
      "html_url": "https://github.com/StErMi",
      "followers_url": "https://api.github.com/users/StErMi/followers",
      "following_url": "https://api.github.com/users/StErMi/following{/other_user}",
      "gists_url": "https://api.github.com/users/StErMi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/StErMi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/StErMi/subscriptions",
      "organizations_url": "https://api.github.com/users/StErMi/orgs",
      "repos_url": "https://api.github.com/users/StErMi/repos",
      "events_url": "https://api.github.com/users/StErMi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/StErMi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-13T09:46:04Z",
    "updated_at": "2022-06-13T09:46:04Z",
    "author_association": "NONE",
    "body": "> It depends on your shell, but in bash you would prepend the variables like so:\r\n> \r\n> `FOO=bar ./my-program`\r\n> \r\n> Alternatively you can source your `.env` before running commands:\r\n> \r\n> ```shell\r\n> source .env\r\n> ./my-program\r\n> ```\r\n\r\nOk, so you can't make them to have the same `npm` script to act the same on both CI and local dev env. ",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1153706875/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1153715424",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1034#issuecomment-1153715424",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1034",
    "id": 1153715424,
    "node_id": "IC_kwDOGBlvNc5ExEzg",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-13T09:55:08Z",
    "updated_at": "2022-06-13T09:55:08Z",
    "author_association": "MEMBER",
    "body": "I'm not entirely sure what you mean - it is definitely possible to run `source .env` in a CI environment before running the test as well",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1153715424/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1191868296",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1034#issuecomment-1191868296",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1034",
    "id": 1191868296,
    "node_id": "IC_kwDOGBlvNc5HCneI",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-21T19:46:01Z",
    "updated_at": "2022-07-21T19:46:01Z",
    "author_association": "COLLABORATOR",
    "body": "@mattsse Did https://github.com/foundry-rs/foundry/pull/2334 add general support for this, or only for certain config keys? ",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1191868296/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1191875305",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1034#issuecomment-1191875305",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1034",
    "id": 1191875305,
    "node_id": "IC_kwDOGBlvNc5HCpLp",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-21T19:54:49Z",
    "updated_at": "2022-07-21T19:54:49Z",
    "author_association": "MEMBER",
    "body": "Only for RPC endpoints in the `[rpc_endpoints]` section",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1191875305/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1193453964",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1034#issuecomment-1193453964",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1034",
    "id": 1193453964,
    "node_id": "IC_kwDOGBlvNc5HIqmM",
    "user": {
      "login": "gakonst",
      "id": 17802178,
      "node_id": "MDQ6VXNlcjE3ODAyMTc4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17802178?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gakonst",
      "html_url": "https://github.com/gakonst",
      "followers_url": "https://api.github.com/users/gakonst/followers",
      "following_url": "https://api.github.com/users/gakonst/following{/other_user}",
      "gists_url": "https://api.github.com/users/gakonst/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gakonst/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gakonst/subscriptions",
      "organizations_url": "https://api.github.com/users/gakonst/orgs",
      "repos_url": "https://api.github.com/users/gakonst/repos",
      "events_url": "https://api.github.com/users/gakonst/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gakonst/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-25T01:25:31Z",
    "updated_at": "2022-07-25T01:25:31Z",
    "author_association": "MEMBER",
    "body": "Where else do you want it @mds1 ?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1193453964/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1200276577",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1034#issuecomment-1200276577",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1034",
    "id": 1200276577,
    "node_id": "IC_kwDOGBlvNc5HisRh",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-30T18:53:56Z",
    "updated_at": "2022-07-30T18:53:56Z",
    "author_association": "COLLABORATOR",
    "body": "Mainly anywhere you might have API keys, which would also include `eth_rpc_url` and `etherscan_api_key`. But more generally, it feels inconsistent to only support this in one section or only for certain keys—why not support env var interpolation for all config keys?\r\n\r\nRelated to this—and maybe this is a foundry book issue—I'm unclear on the recommend way to run a portion of tests as fork tests within your test suite. Right now we use `source .env && forge test` along with `vm.createFork(vm.envString(\"OPTIMISM_RPC_URL\"))` (and the related fork cheatcodes). It seems an alternative is to still use `source .env && forge test` but instead use the `[rpc_endpoints]` section to define an `optimism` RPC and then use `vm.createFork(vm. rpcUrl(\"optimism\"))`? Is there a tradeoff here or are these two identical?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1200276577/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1200306279",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1034#issuecomment-1200306279",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1034",
    "id": 1200306279,
    "node_id": "IC_kwDOGBlvNc5Hizhn",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-30T22:40:11Z",
    "updated_at": "2022-07-30T22:40:11Z",
    "author_association": "MEMBER",
    "body": "Tradeoff is that it's easier to figure out what environment variables to set if you use `[rpc_endpoints]` since it's all in the config vs having to read through all of the tests to find `vm.envString` calls :) Other than that they are equivalent",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1200306279/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1200309439",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1034#issuecomment-1200309439",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1034",
    "id": 1200309439,
    "node_id": "IC_kwDOGBlvNc5Hi0S_",
    "user": {
      "login": "gakonst",
      "id": 17802178,
      "node_id": "MDQ6VXNlcjE3ODAyMTc4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17802178?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gakonst",
      "html_url": "https://github.com/gakonst",
      "followers_url": "https://api.github.com/users/gakonst/followers",
      "following_url": "https://api.github.com/users/gakonst/following{/other_user}",
      "gists_url": "https://api.github.com/users/gakonst/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gakonst/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gakonst/subscriptions",
      "organizations_url": "https://api.github.com/users/gakonst/orgs",
      "repos_url": "https://api.github.com/users/gakonst/repos",
      "events_url": "https://api.github.com/users/gakonst/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gakonst/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-30T23:02:38Z",
    "updated_at": "2022-07-30T23:03:40Z",
    "author_association": "MEMBER",
    "body": "> Related to this—and maybe this is a foundry book issue—I'm unclear on the recommend way to run a portion of tests as fork tests within your test suite. Right now we use source .env && forge test along with vm.createFork(vm.envString(\"OPTIMISM_RPC_URL\")) (and the related fork cheatcodes). It seems an alternative is to still use source .env && forge test but instead use the [rpc_endpoints] section to define an optimism RPC and then use vm.createFork(vm. rpcUrl(\"optimism\"))? Is there a tradeoff here or are these two identical?\r\n\r\nThey're basically identical, and I prefer the latter to the former because you put all your env vars in the foundry toml and then refer only by aliases in the code.\r\n\r\nWe could also allow `etherscan_api_key = ${NAME_OF_YOUR_ENV_VAR}` although that's already read by default via the `ETHERSCAN_API_KEY` env var (or CLI option), so not sure how helpful that is?",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1200309439/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1204085052",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1034#issuecomment-1204085052",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1034",
    "id": 1204085052,
    "node_id": "IC_kwDOGBlvNc5HxOE8",
    "user": {
      "login": "mds1",
      "id": 17163988,
      "node_id": "MDQ6VXNlcjE3MTYzOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17163988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mds1",
      "html_url": "https://github.com/mds1",
      "followers_url": "https://api.github.com/users/mds1/followers",
      "following_url": "https://api.github.com/users/mds1/following{/other_user}",
      "gists_url": "https://api.github.com/users/mds1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mds1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mds1/subscriptions",
      "organizations_url": "https://api.github.com/users/mds1/orgs",
      "repos_url": "https://api.github.com/users/mds1/repos",
      "events_url": "https://api.github.com/users/mds1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mds1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-03T15:15:00Z",
    "updated_at": "2022-08-03T15:15:00Z",
    "author_association": "COLLABORATOR",
    "body": "Heh thought that might be the answer. IMO best practice is to have a committed `.env.template` type of file committed to a repo so devs know which env vars they need, which means you don't really need the `[rpc_endpoints]` section to find all env vars. Additionally, there might be env vars part of e.g. helper scripts in the repo, so you can't guarantee all env vars in the toml are the only ones you need.\r\n\r\nBut the `vm.rpcUrl` is already implemented so fine to keep and is a bit more readable, so mainly just personal preference. \r\n\r\n> We could also allow `etherscan_api_key = ${NAME_OF_YOUR_ENV_VAR}` although that's already read by default via the `ETHERSCAN_API_KEY` env var (or CLI option), so not sure how helpful that is?\r\n\r\nEtherscan API keys differ by network, so a single `ETHERSCAN_API_KEY` env var isn't sufficient for multichain cases. I'm not sure of what flow people use for multi-chain verification of contracts / if toml env var interpolation would be helpful there, though. Similar comment/question for `eth_rpc_url`.\r\n\r\nPerhaps we want an `[etherscan_api_keys]` section to map chain IDs/network names to API keys, and that way foundry can automatically use the right one based on the specified chain? And for that section we'd probably want env var interpolation, unless we choose to hardcode env var names that foundry looks for and remove the need for that section (e.g. hardcode `MAINNET_ETHERSCAN_API_KEY` as what foundry looks for on mainnet, `OPTIMISM_ETHERSCAN_API_KEY` for optimism, etc. (need to confirm which networks share API keys))",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1204085052/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1204331658",
    "html_url": "https://github.com/foundry-rs/foundry/issues/1034#issuecomment-1204331658",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/1034",
    "id": 1204331658,
    "node_id": "IC_kwDOGBlvNc5HyKSK",
    "user": {
      "login": "gakonst",
      "id": 17802178,
      "node_id": "MDQ6VXNlcjE3ODAyMTc4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17802178?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gakonst",
      "html_url": "https://github.com/gakonst",
      "followers_url": "https://api.github.com/users/gakonst/followers",
      "following_url": "https://api.github.com/users/gakonst/following{/other_user}",
      "gists_url": "https://api.github.com/users/gakonst/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gakonst/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gakonst/subscriptions",
      "organizations_url": "https://api.github.com/users/gakonst/orgs",
      "repos_url": "https://api.github.com/users/gakonst/repos",
      "events_url": "https://api.github.com/users/gakonst/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gakonst/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-03T18:32:39Z",
    "updated_at": "2022-08-03T18:32:39Z",
    "author_association": "MEMBER",
    "body": "> Perhaps we want an [etherscan_api_keys] section to map chain IDs/network names to API keys, and that way foundry can automatically use the right one based on the specified chain?\r\n\r\nYep I like that. @mattsse wdyt? also relevant in the context of multichain deployments' verifications (cc @joshieDo)",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1204331658/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
