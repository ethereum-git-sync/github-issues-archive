{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/871",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/871/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/871/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/871/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/871",
  "id": 1162642590,
  "node_id": "I_kwDOGBlvNc5FTISe",
  "number": 871,
  "title": "Using enum as paramter in fuzz test fails",
  "user": {
    "login": "david-k",
    "id": 2444770,
    "node_id": "MDQ6VXNlcjI0NDQ3NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2444770?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/david-k",
    "html_url": "https://github.com/david-k",
    "followers_url": "https://api.github.com/users/david-k/followers",
    "following_url": "https://api.github.com/users/david-k/following{/other_user}",
    "gists_url": "https://api.github.com/users/david-k/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/david-k/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/david-k/subscriptions",
    "organizations_url": "https://api.github.com/users/david-k/orgs",
    "repos_url": "https://api.github.com/users/david-k/repos",
    "events_url": "https://api.github.com/users/david-k/events{/privacy}",
    "received_events_url": "https://api.github.com/users/david-k/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3334394228,
      "node_id": "MDU6TGFiZWwzMzM0Mzk0MjI4",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-bug",
      "name": "T-bug",
      "color": "d73a4a",
      "default": false,
      "description": "Type: bug"
    },
    {
      "id": 3394554570,
      "node_id": "LA_kwDOGBlvNc7KVMrK",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/A-fuzzing",
      "name": "A-fuzzing",
      "color": "FBCA04",
      "default": false,
      "description": "Area: fuzzing"
    },
    {
      "id": 3593644915,
      "node_id": "LA_kwDOGBlvNc7WMqtz",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/Cmd-forge-test",
      "name": "Cmd-forge-test",
      "color": "006B75",
      "default": false,
      "description": "Command: forge test"
    },
    {
      "id": 3703752787,
      "node_id": "LA_kwDOGBlvNc7cwshT",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/C-forge",
      "name": "C-forge",
      "color": "5319E7",
      "default": false,
      "description": "Command: forge"
    },
    {
      "id": 3759719580,
      "node_id": "LA_kwDOGBlvNc7gGMSc",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/P-normal",
      "name": "P-normal",
      "color": "D93F0B",
      "default": false,
      "description": "Priority: normal"
    },
    {
      "id": 3759720129,
      "node_id": "LA_kwDOGBlvNc7gGMbB",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/D-hard",
      "name": "D-hard",
      "color": "0E8A16",
      "default": false,
      "description": "Difficulty: hard"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 13,
  "created_at": "2022-03-08T13:14:35Z",
  "updated_at": "2022-09-07T16:50:13Z",
  "closed_at": "2022-03-09T17:58:46Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "### Component\n\nForge\n\n### Have you ensured that all of these are up to date?\n\n- [X] Foundry\n- [X] Foundryup\n\n### What version of Foundry are you on?\n\nforge 0.1.0 (39b6e39 2022-03-08T00:05:45.429338818+00:00)\n\n### What command(s) is the bug in?\n\n_No response_\n\n### Operating System\n\nLinux\n\n### Describe the bug\n\nWhen using an `enum` as a parameter in a fuzz test the test will very likely fail because the provided value is invalid for the `enum`:\r\n```solidity\r\ncontract MyTest is DSTest {\r\n\tenum Enum { A, B }\r\n\r\n\t// Always fails\r\n\tfunction test_enum(Enum e) public {\r\n\r\n\t}\r\n}\r\n```\r\nMy understanding is that this happens because enums are represented as `unit8` in the EVM, and when fuzzing we naturally want to sample values from the full range of `uint8`. However, in the case of enums this causes the test to immediately fail.\r\n\r\nI don't know if it is possible to somehow provide additional information to the test runner so that it knows that only a subset of values should be considered.\r\n\r\nYou can of course easily work around this issue, but being able to use enums would still be nice.",
  "closed_by": {
    "login": "mattsse",
    "id": 19890894,
    "node_id": "MDQ6VXNlcjE5ODkwODk0",
    "avatar_url": "https://avatars.githubusercontent.com/u/19890894?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mattsse",
    "html_url": "https://github.com/mattsse",
    "followers_url": "https://api.github.com/users/mattsse/followers",
    "following_url": "https://api.github.com/users/mattsse/following{/other_user}",
    "gists_url": "https://api.github.com/users/mattsse/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mattsse/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mattsse/subscriptions",
    "organizations_url": "https://api.github.com/users/mattsse/orgs",
    "repos_url": "https://api.github.com/users/mattsse/repos",
    "events_url": "https://api.github.com/users/mattsse/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mattsse/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/871/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/871/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1062374572",
    "html_url": "https://github.com/foundry-rs/foundry/issues/871#issuecomment-1062374572",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/871",
    "id": 1062374572,
    "node_id": "IC_kwDOGBlvNc4_Uoys",
    "user": {
      "login": "gakonst",
      "id": 17802178,
      "node_id": "MDQ6VXNlcjE3ODAyMTc4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17802178?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gakonst",
      "html_url": "https://github.com/gakonst",
      "followers_url": "https://api.github.com/users/gakonst/followers",
      "following_url": "https://api.github.com/users/gakonst/following{/other_user}",
      "gists_url": "https://api.github.com/users/gakonst/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gakonst/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gakonst/subscriptions",
      "organizations_url": "https://api.github.com/users/gakonst/orgs",
      "repos_url": "https://api.github.com/users/gakonst/repos",
      "events_url": "https://api.github.com/users/gakonst/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gakonst/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-08T23:27:42Z",
    "updated_at": "2022-03-08T23:27:42Z",
    "author_association": "MEMBER",
    "body": "Ah, this seems hard to get around. The best way to do this would be:\r\n\r\n```solidity\r\nfunction test_enum(uint8 _e) public {\r\n    vm.assume(_e < 2);\r\n    Enum e = Enum(_e);\r\n}\r\n```\r\n\r\nI don't think we can solve this in some other way, unless the compiler gives us information about how many enum variants there are? cc @mattsse ",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1062374572/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1062551626",
    "html_url": "https://github.com/foundry-rs/foundry/issues/871#issuecomment-1062551626",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/871",
    "id": 1062551626,
    "node_id": "IC_kwDOGBlvNc4_VUBK",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-09T04:49:38Z",
    "updated_at": "2022-03-09T04:49:38Z",
    "author_association": "MEMBER",
    "body": "Read over the Solidity docs and it does not seem like the JSON output has any option to return info on enums",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1062551626/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1062733571",
    "html_url": "https://github.com/foundry-rs/foundry/issues/871#issuecomment-1062733571",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/871",
    "id": 1062733571,
    "node_id": "IC_kwDOGBlvNc4_WAcD",
    "user": {
      "login": "david-k",
      "id": 2444770,
      "node_id": "MDQ6VXNlcjI0NDQ3NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2444770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/david-k",
      "html_url": "https://github.com/david-k",
      "followers_url": "https://api.github.com/users/david-k/followers",
      "following_url": "https://api.github.com/users/david-k/following{/other_user}",
      "gists_url": "https://api.github.com/users/david-k/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/david-k/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/david-k/subscriptions",
      "organizations_url": "https://api.github.com/users/david-k/orgs",
      "repos_url": "https://api.github.com/users/david-k/repos",
      "events_url": "https://api.github.com/users/david-k/events{/privacy}",
      "received_events_url": "https://api.github.com/users/david-k/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-09T09:41:06Z",
    "updated_at": "2022-03-09T09:41:06Z",
    "author_association": "NONE",
    "body": "Yeah, I figured that this isn't easy to do. Fortunately, one can easily work around this with some modulo operations or `vm.assume()`. (Thanks btw for mentioning `vm.assume()`, didn't know about that one!)",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1062733571/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1063203923",
    "html_url": "https://github.com/foundry-rs/foundry/issues/871#issuecomment-1063203923",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/871",
    "id": 1063203923,
    "node_id": "IC_kwDOGBlvNc4_XzRT",
    "user": {
      "login": "mattsse",
      "id": 19890894,
      "node_id": "MDQ6VXNlcjE5ODkwODk0",
      "avatar_url": "https://avatars.githubusercontent.com/u/19890894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mattsse",
      "html_url": "https://github.com/mattsse",
      "followers_url": "https://api.github.com/users/mattsse/followers",
      "following_url": "https://api.github.com/users/mattsse/following{/other_user}",
      "gists_url": "https://api.github.com/users/mattsse/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mattsse/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mattsse/subscriptions",
      "organizations_url": "https://api.github.com/users/mattsse/orgs",
      "repos_url": "https://api.github.com/users/mattsse/repos",
      "events_url": "https://api.github.com/users/mattsse/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mattsse/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-09T17:58:46Z",
    "updated_at": "2022-03-09T17:58:46Z",
    "author_association": "MEMBER",
    "body": "> Ah, this seems hard to get around. The best way to do this would be:\r\n> \r\n> ```solidity\r\n> function test_enum(uint8 _e) public {\r\n>     vm.assume(_e < 2);\r\n>     Enum e = Enum(_e);\r\n> }\r\n> ```\r\n> \r\n> I don't think we can solve this in some other way, unless the compiler gives us information about how many enum variants there are? cc @mattsse\r\n\r\nThis is not included in the output and only limited to `\"internalType\": \"enum MyTest.Enum\",`\r\n\r\nthe module solution is pretty neat though.\r\n\r\nvote close.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1063203923/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1119195114",
    "html_url": "https://github.com/foundry-rs/foundry/issues/871#issuecomment-1119195114",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/871",
    "id": 1119195114,
    "node_id": "IC_kwDOGBlvNc5CtY_q",
    "user": {
      "login": "0xalpharush",
      "id": 87383155,
      "node_id": "MDQ6VXNlcjg3MzgzMTU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/87383155?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/0xalpharush",
      "html_url": "https://github.com/0xalpharush",
      "followers_url": "https://api.github.com/users/0xalpharush/followers",
      "following_url": "https://api.github.com/users/0xalpharush/following{/other_user}",
      "gists_url": "https://api.github.com/users/0xalpharush/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/0xalpharush/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/0xalpharush/subscriptions",
      "organizations_url": "https://api.github.com/users/0xalpharush/orgs",
      "repos_url": "https://api.github.com/users/0xalpharush/repos",
      "events_url": "https://api.github.com/users/0xalpharush/events{/privacy}",
      "received_events_url": "https://api.github.com/users/0xalpharush/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-06T02:01:50Z",
    "updated_at": "2022-05-06T02:01:50Z",
    "author_association": "NONE",
    "body": "I'd appreciate reconsidering how the fuzzer treats enums as it requires a lot of boilerplate to craft more complex types e.g. structs and cast unsigned integers to an enum type. \r\n\r\nIf that's not realistic, it may be worth displaying suggestions to users when an enum is in a function signature and it's reverting. It wasn't readily apparent that the failure is due to invalid calldata. \r\n",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1119195114/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1119197313",
    "html_url": "https://github.com/foundry-rs/foundry/issues/871#issuecomment-1119197313",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/871",
    "id": 1119197313,
    "node_id": "IC_kwDOGBlvNc5CtZiB",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-06T02:07:43Z",
    "updated_at": "2022-05-06T02:07:43Z",
    "author_association": "MEMBER",
    "body": "We need solc to give us more information on enum types so we can generate inputs that are not outside of the bounds of the number of variants of the enum",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1119197313/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1119543008",
    "html_url": "https://github.com/foundry-rs/foundry/issues/871#issuecomment-1119543008",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/871",
    "id": 1119543008,
    "node_id": "IC_kwDOGBlvNc5Cut7g",
    "user": {
      "login": "gakonst",
      "id": 17802178,
      "node_id": "MDQ6VXNlcjE3ODAyMTc4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17802178?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gakonst",
      "html_url": "https://github.com/gakonst",
      "followers_url": "https://api.github.com/users/gakonst/followers",
      "following_url": "https://api.github.com/users/gakonst/following{/other_user}",
      "gists_url": "https://api.github.com/users/gakonst/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gakonst/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gakonst/subscriptions",
      "organizations_url": "https://api.github.com/users/gakonst/orgs",
      "repos_url": "https://api.github.com/users/gakonst/repos",
      "events_url": "https://api.github.com/users/gakonst/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gakonst/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-06T12:02:55Z",
    "updated_at": "2022-05-06T12:03:18Z",
    "author_association": "MEMBER",
    "body": "@0xalpharush we agree that this would be nice, as Bjerg writes above, per our last investigation, we don't have that information to provide more context to the user.. If you have any suggestions on how to do that, we'd obviously be very happy to include, as this is indeed an important shortcoming  (cc @mds1 per previous convos around the fuzzer)",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1119543008/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1119735165",
    "html_url": "https://github.com/foundry-rs/foundry/issues/871#issuecomment-1119735165",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/871",
    "id": 1119735165,
    "node_id": "IC_kwDOGBlvNc5Cvc19",
    "user": {
      "login": "0xalpharush",
      "id": 87383155,
      "node_id": "MDQ6VXNlcjg3MzgzMTU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/87383155?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/0xalpharush",
      "html_url": "https://github.com/0xalpharush",
      "followers_url": "https://api.github.com/users/0xalpharush/followers",
      "following_url": "https://api.github.com/users/0xalpharush/following{/other_user}",
      "gists_url": "https://api.github.com/users/0xalpharush/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/0xalpharush/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/0xalpharush/subscriptions",
      "organizations_url": "https://api.github.com/users/0xalpharush/orgs",
      "repos_url": "https://api.github.com/users/0xalpharush/repos",
      "events_url": "https://api.github.com/users/0xalpharush/events{/privacy}",
      "received_events_url": "https://api.github.com/users/0xalpharush/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-06T15:22:07Z",
    "updated_at": "2022-05-06T15:24:05Z",
    "author_association": "NONE",
    "body": "I'm not sure if Foundry has access to the panic code. For enum conversions that fail, the panic code is `0x21`. Would it be possible to brute force a valid size by using inputs ranging from 1 to 256 (the max enum size) and cap the upper bound when a `0x21` panic is hit?\r\nAlternatively, this can be outsourced to a static analysis tool like slither and Foundry can read that max enum size.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1119735165/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1119759604",
    "html_url": "https://github.com/foundry-rs/foundry/issues/871#issuecomment-1119759604",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/871",
    "id": 1119759604,
    "node_id": "IC_kwDOGBlvNc5Cviz0",
    "user": {
      "login": "gakonst",
      "id": 17802178,
      "node_id": "MDQ6VXNlcjE3ODAyMTc4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17802178?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gakonst",
      "html_url": "https://github.com/gakonst",
      "followers_url": "https://api.github.com/users/gakonst/followers",
      "following_url": "https://api.github.com/users/gakonst/following{/other_user}",
      "gists_url": "https://api.github.com/users/gakonst/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gakonst/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gakonst/subscriptions",
      "organizations_url": "https://api.github.com/users/gakonst/orgs",
      "repos_url": "https://api.github.com/users/gakonst/repos",
      "events_url": "https://api.github.com/users/gakonst/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gakonst/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-06T15:49:44Z",
    "updated_at": "2022-05-06T15:50:07Z",
    "author_association": "MEMBER",
    "body": "This makes sense - I think we have access to the panic code given we handle it in Forge-std. Will investigate, PRs welcome of course ",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1119759604/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1159522942",
    "html_url": "https://github.com/foundry-rs/foundry/issues/871#issuecomment-1159522942",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/871",
    "id": 1159522942,
    "node_id": "IC_kwDOGBlvNc5FHOp-",
    "user": {
      "login": "hrkrshnn",
      "id": 13174375,
      "node_id": "MDQ6VXNlcjEzMTc0Mzc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/13174375?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hrkrshnn",
      "html_url": "https://github.com/hrkrshnn",
      "followers_url": "https://api.github.com/users/hrkrshnn/followers",
      "following_url": "https://api.github.com/users/hrkrshnn/following{/other_user}",
      "gists_url": "https://api.github.com/users/hrkrshnn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hrkrshnn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hrkrshnn/subscriptions",
      "organizations_url": "https://api.github.com/users/hrkrshnn/orgs",
      "repos_url": "https://api.github.com/users/hrkrshnn/repos",
      "events_url": "https://api.github.com/users/hrkrshnn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hrkrshnn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-18T17:46:18Z",
    "updated_at": "2022-06-18T17:46:18Z",
    "author_association": "NONE",
    "body": "@onbjerg where do you want the extra information? In the `--abi` or `--ast-compact-json`? Can you open an issue in the solc repo?\r\n\r\n---\r\n\r\nAs a side note, `type(Enum).max` works. So something like `vm.assume(rand <= uint8(type(Enum).max))` is probably the best right now.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1159522942/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1239438457",
    "html_url": "https://github.com/foundry-rs/foundry/issues/871#issuecomment-1239438457",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/871",
    "id": 1239438457,
    "node_id": "IC_kwDOGBlvNc5J4FR5",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-07T14:05:35Z",
    "updated_at": "2022-09-07T14:05:35Z",
    "author_association": "NONE",
    "body": ">Alternatively, this can be outsourced to a static analysis tool like slither and Foundry can read that max enum size.\r\n\r\nThis isn't necessary if Foundry has access to the AST. But I'd say that enum information should be included in the ABI.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1239438457/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1239449281",
    "html_url": "https://github.com/foundry-rs/foundry/issues/871#issuecomment-1239449281",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/871",
    "id": 1239449281,
    "node_id": "IC_kwDOGBlvNc5J4H7B",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-07T14:14:02Z",
    "updated_at": "2022-09-07T14:14:02Z",
    "author_association": "MEMBER",
    "body": "We don't process the AST in `forge test` at all and I'd be hesitant to do so currently since it's not documented anywhere as far as I can tell, so implementing e.g. https://github.com/gakonst/ethers-rs/pull/1567 was a major pain (and is likely to break at some point). `vm.assume` is OK for now but having the number of variants for enums in the ABI would be nice (like we have struct descriptions)",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1239449281/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1239642299",
    "html_url": "https://github.com/foundry-rs/foundry/issues/871#issuecomment-1239642299",
    "issue_url": "https://api.github.com/repos/foundry-rs/foundry/issues/871",
    "id": 1239642299,
    "node_id": "IC_kwDOGBlvNc5J43C7",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-07T16:50:13Z",
    "updated_at": "2022-09-07T16:50:13Z",
    "author_association": "NONE",
    "body": "I maintain documentation for the AST at https://solidity-ast.netlify.app, but dealing with different Solidity versions is difficult so to keep `forge test` AST agnostic is probably a good idea.",
    "reactions": {
      "url": "https://api.github.com/repos/foundry-rs/foundry/issues/comments/1239642299/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 1
    },
    "performed_via_github_app": null
  }
]
