{
  "url": "https://api.github.com/repos/foundry-rs/foundry/issues/5522",
  "repository_url": "https://api.github.com/repos/foundry-rs/foundry",
  "labels_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5522/labels{/name}",
  "comments_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5522/comments",
  "events_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5522/events",
  "html_url": "https://github.com/foundry-rs/foundry/issues/5522",
  "id": 1832150537,
  "node_id": "I_kwDOGBlvNc5tNGYJ",
  "number": 5522,
  "title": "feat(forge): Allow marking contracts local in scripts",
  "user": {
    "login": "klkvr",
    "id": 62447812,
    "node_id": "MDQ6VXNlcjYyNDQ3ODEy",
    "avatar_url": "https://avatars.githubusercontent.com/u/62447812?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/klkvr",
    "html_url": "https://github.com/klkvr",
    "followers_url": "https://api.github.com/users/klkvr/followers",
    "following_url": "https://api.github.com/users/klkvr/following{/other_user}",
    "gists_url": "https://api.github.com/users/klkvr/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/klkvr/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/klkvr/subscriptions",
    "organizations_url": "https://api.github.com/users/klkvr/orgs",
    "repos_url": "https://api.github.com/users/klkvr/repos",
    "events_url": "https://api.github.com/users/klkvr/events{/privacy}",
    "received_events_url": "https://api.github.com/users/klkvr/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3593644820,
      "node_id": "LA_kwDOGBlvNc7WMqsU",
      "url": "https://api.github.com/repos/foundry-rs/foundry/labels/T-feature",
      "name": "T-feature",
      "color": "BFD4F2",
      "default": false,
      "description": "Type: feature"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 0,
  "created_at": "2023-08-01T23:06:36Z",
  "updated_at": "2023-08-01T23:16:00Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "### Component\r\n\r\nForge\r\n\r\n### Describe the feature you would like\r\n\r\nRight now following script would broadcast single call to non-existent contract `CounterDeployer`:\r\n```solidity\r\npragma solidity ^0.8.13;\r\n\r\nimport {Script} from \"forge-std/Script.sol\";\r\nimport {Counter} from \"src/Counter.sol\";\r\n\r\ncontract CounterDeployer {\r\n    function deploy() public returns (address) {\r\n        return address(new Counter());\r\n    }\r\n}\r\n\r\ncontract CounterScript is Script {\r\n    function run() public {\r\n        CounterDeployer deployer = new CounterDeployer();\r\n\r\n        vm.broadcast(1);\r\n        deployer.deploy();\r\n    }\r\n}\r\n\r\n```\r\n\r\noutput:\r\n```\r\nScript ran successfully.\r\n\r\n## Setting up (1) EVMs.\r\n==========================\r\nSimulated On-chain Traces:\r\n\r\n  [22380] CounterDeployer::deploy() \r\n    └─ ← ()\r\n```\r\n\r\nThe behavior I propose would allow pattern similar to this:\r\n```solidity\r\n// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.13;\r\n\r\nimport {Script} from \"forge-std/Script.sol\";\r\nimport {Counter} from \"src/Counter.sol\";\r\n\r\ncontract CounterDeployer {\r\n    function deploy() public returns (address) {\r\n        return address(new Counter());\r\n    }\r\n}\r\n\r\ncontract CounterScript is Script {\r\n    function run() public {\r\n        CounterDeployer deployer = new CounterDeployer();\r\n\r\n        vm.markLocal(address(deployer)); // Marks deployer contract local (in fact treats it as if it was just part of our test contract)\r\n        vm.broadcast(1);\r\n        deployer.deploy(); // deploy() call is not broadcasted, but external transactions generated by it are\r\n    }\r\n}\r\n\r\n```\r\n\r\nThis would allow cleaner structure of deployment logic, which could be encapsulated in special deployers (I am right now using similar structure, and reuse deployers in tests too). Right now it is possible to get similar behavior using libraries, but they are missing some features contracts have (for example, storage, calls via normal interfaces, inheritance, etc)\r\n\r\nI guess this can be implemented via introducing broadcast-specific virtual depth which will not be increased when calls are made to contract marked local\r\n\r\n### Additional context\r\n\r\nIf this is a desired feature, I would be happy to try implement it ",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/foundry-rs/foundry/issues/5522/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/foundry-rs/foundry/issues/5522/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[

]
