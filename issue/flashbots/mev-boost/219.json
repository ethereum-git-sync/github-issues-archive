{
  "url": "https://api.github.com/repos/flashbots/mev-boost/issues/219",
  "repository_url": "https://api.github.com/repos/flashbots/mev-boost",
  "labels_url": "https://api.github.com/repos/flashbots/mev-boost/issues/219/labels{/name}",
  "comments_url": "https://api.github.com/repos/flashbots/mev-boost/issues/219/comments",
  "events_url": "https://api.github.com/repos/flashbots/mev-boost/issues/219/events",
  "html_url": "https://github.com/flashbots/mev-boost/issues/219",
  "id": 1309834590,
  "node_id": "I_kwDOGZSKs85OEn1e",
  "number": 219,
  "title": "Relay spam protection: require a small deposit to submit blocks as a builder",
  "user": {
    "login": "bertmiller",
    "id": 30010302,
    "node_id": "MDQ6VXNlcjMwMDEwMzAy",
    "avatar_url": "https://avatars.githubusercontent.com/u/30010302?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bertmiller",
    "html_url": "https://github.com/bertmiller",
    "followers_url": "https://api.github.com/users/bertmiller/followers",
    "following_url": "https://api.github.com/users/bertmiller/following{/other_user}",
    "gists_url": "https://api.github.com/users/bertmiller/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bertmiller/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bertmiller/subscriptions",
    "organizations_url": "https://api.github.com/users/bertmiller/orgs",
    "repos_url": "https://api.github.com/users/bertmiller/repos",
    "events_url": "https://api.github.com/users/bertmiller/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bertmiller/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 4053138209,
      "node_id": "LA_kwDOGZSKs87xlfsh",
      "url": "https://api.github.com/repos/flashbots/mev-boost/labels/brainstorming",
      "name": "brainstorming",
      "color": "5ABEB3",
      "default": false,
      "description": "Currently in discussion"
    },
    {
      "id": 4352116416,
      "node_id": "LA_kwDOGZSKs88AAAABA2gGwA",
      "url": "https://api.github.com/repos/flashbots/mev-boost/labels/relay",
      "name": "relay",
      "color": "c5def5",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 8,
  "created_at": "2022-07-19T17:27:23Z",
  "updated_at": "2022-08-14T20:01:09Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "Relays have many jobs, among them is accepting blocks from many builders and figuring out which block is the most profitable for validators. One of the difficult parts of this job is that full blocks are large in size and costly to simulate. Without appropriate protections then a builder could spam many bad blocks at a relay, which would then be required to spend computational resources for no benefit. At the limit you can imagine builders actually overwhelming a relay with blocks and causing it to go down, which could have adverse effects on the overall network.\r\n\r\nOne option to prevent such spam would be to implement reputation scoring and priority queues similar to what Flashbots has done with our bundle relay on PoW ETH. That would need to be thought through and specced further.\r\n\r\nAnother option would be to require builders to deposit a small stake in a contract before they are allowed to submit blocks to a relay. The basic idea would be that if the builder starts to act maliciously then the relay can slash their stake, and the threat of this cost would act as a deterrent. \r\n\r\nAt the same time, we'd like to keep the barriers to entry for block building as low as possible. I'm not sure what a good stake requirement would be yet, but am open to ideas.\r\n\r\nIdeally we would like to have completely permissionless submission to our relay, and this is the goal, although with a tight timeline before the merge and limited internal resources we may have to settle for slightly higher barriers to entry at the merge and permissionless submission later.",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/flashbots/mev-boost/issues/219/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/flashbots/mev-boost/issues/219/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1189433625",
    "html_url": "https://github.com/flashbots/mev-boost/issues/219#issuecomment-1189433625",
    "issue_url": "https://api.github.com/repos/flashbots/mev-boost/issues/219",
    "id": 1189433625,
    "node_id": "IC_kwDOGZSKs85G5VEZ",
    "user": {
      "login": "jparyani",
      "id": 1595880,
      "node_id": "MDQ6VXNlcjE1OTU4ODA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1595880?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jparyani",
      "html_url": "https://github.com/jparyani",
      "followers_url": "https://api.github.com/users/jparyani/followers",
      "following_url": "https://api.github.com/users/jparyani/following{/other_user}",
      "gists_url": "https://api.github.com/users/jparyani/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jparyani/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jparyani/subscriptions",
      "organizations_url": "https://api.github.com/users/jparyani/orgs",
      "repos_url": "https://api.github.com/users/jparyani/repos",
      "events_url": "https://api.github.com/users/jparyani/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jparyani/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-19T18:43:47Z",
    "updated_at": "2022-07-19T18:43:47Z",
    "author_association": "MEMBER",
    "body": "> One option to prevent such spam would be to implement reputation scoring and priority queues similar to what Flashbots has done with our bundle relay on PoW ETH. That would need to be thought through and specced further.\r\n\r\nA simple way to bootstrap this would be to make it a completely manual process to get started. We could manually check which builders are landing profitable blocks and only then move them to the high priority queue. This will give us time to analyze the data and come up with a better programmatic system for reputation, and prevents the chicken and egg problem that would occur around the merge if we started with an automated system.",
    "reactions": {
      "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1189433625/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1189488631",
    "html_url": "https://github.com/flashbots/mev-boost/issues/219#issuecomment-1189488631",
    "issue_url": "https://api.github.com/repos/flashbots/mev-boost/issues/219",
    "id": 1189488631,
    "node_id": "IC_kwDOGZSKs85G5if3",
    "user": {
      "login": "bertmiller",
      "id": 30010302,
      "node_id": "MDQ6VXNlcjMwMDEwMzAy",
      "avatar_url": "https://avatars.githubusercontent.com/u/30010302?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bertmiller",
      "html_url": "https://github.com/bertmiller",
      "followers_url": "https://api.github.com/users/bertmiller/followers",
      "following_url": "https://api.github.com/users/bertmiller/following{/other_user}",
      "gists_url": "https://api.github.com/users/bertmiller/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bertmiller/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bertmiller/subscriptions",
      "organizations_url": "https://api.github.com/users/bertmiller/orgs",
      "repos_url": "https://api.github.com/users/bertmiller/repos",
      "events_url": "https://api.github.com/users/bertmiller/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bertmiller/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-19T19:50:08Z",
    "updated_at": "2022-07-19T19:50:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "Would love to hear thoughts from you @jeromelaurens @sambacha @xcarlo @block-builder-22!",
    "reactions": {
      "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1189488631/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1189858479",
    "html_url": "https://github.com/flashbots/mev-boost/issues/219#issuecomment-1189858479",
    "issue_url": "https://api.github.com/repos/flashbots/mev-boost/issues/219",
    "id": 1189858479,
    "node_id": "IC_kwDOGZSKs85G68yv",
    "user": {
      "login": "sambacha",
      "id": 32783916,
      "node_id": "MDQ6VXNlcjMyNzgzOTE2",
      "avatar_url": "https://avatars.githubusercontent.com/u/32783916?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sambacha",
      "html_url": "https://github.com/sambacha",
      "followers_url": "https://api.github.com/users/sambacha/followers",
      "following_url": "https://api.github.com/users/sambacha/following{/other_user}",
      "gists_url": "https://api.github.com/users/sambacha/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sambacha/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sambacha/subscriptions",
      "organizations_url": "https://api.github.com/users/sambacha/orgs",
      "repos_url": "https://api.github.com/users/sambacha/repos",
      "events_url": "https://api.github.com/users/sambacha/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sambacha/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-20T05:53:33Z",
    "updated_at": "2022-07-20T05:53:33Z",
    "author_association": "NONE",
    "body": "> Would love to hear thoughts from you @jeromelaurens @sambacha @xcarlo @block-builder-22!\n\nWe are implementing an RLN based authentication scheme for the purposes of preventing spam. \n\nThe requirement is that the submitter has an existing flashbots reputation. I can show you a demo if your interested @bertmiller ",
    "reactions": {
      "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1189858479/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1189928938",
    "html_url": "https://github.com/flashbots/mev-boost/issues/219#issuecomment-1189928938",
    "issue_url": "https://api.github.com/repos/flashbots/mev-boost/issues/219",
    "id": 1189928938,
    "node_id": "IC_kwDOGZSKs85G7N_q",
    "user": {
      "login": "jeromelaurens",
      "id": 2656354,
      "node_id": "MDQ6VXNlcjI2NTYzNTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2656354?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jeromelaurens",
      "html_url": "https://github.com/jeromelaurens",
      "followers_url": "https://api.github.com/users/jeromelaurens/followers",
      "following_url": "https://api.github.com/users/jeromelaurens/following{/other_user}",
      "gists_url": "https://api.github.com/users/jeromelaurens/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jeromelaurens/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jeromelaurens/subscriptions",
      "organizations_url": "https://api.github.com/users/jeromelaurens/orgs",
      "repos_url": "https://api.github.com/users/jeromelaurens/repos",
      "events_url": "https://api.github.com/users/jeromelaurens/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jeromelaurens/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-20T07:30:50Z",
    "updated_at": "2022-07-20T07:30:50Z",
    "author_association": "NONE",
    "body": "> Would love to hear thoughts from you @jeromelaurens @sambacha @xcarlo @block-builder-22!\r\n\r\nMainly agree with @jparyani : start simple.\r\nI would propose a signed header for authentication but without reputation scoring at the beginning + network Dos protection if it's easy to setup on your relay.\r\nAnd as jason suggested, analyze manually what is a malicious behaviour before deciding the countermeasures.\r\n\r\nWhy not a stake too, but some of us may have some bugs or strange behaviour at the beginning, that is not intentionaly malicious. Those bugs would have to be fixed. But in the meantime it wouldn't be fair to slash the stake for those investing time for this.\r\nAlso I'm not in favour of stake beacause what's preventing a rich builder to build an infrastructure with many accounts and stakes, still spaming more than the others without being seen as a whole?\r\nIt is an incentive to centralization for richs",
    "reactions": {
      "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1189928938/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1189931592",
    "html_url": "https://github.com/flashbots/mev-boost/issues/219#issuecomment-1189931592",
    "issue_url": "https://api.github.com/repos/flashbots/mev-boost/issues/219",
    "id": 1189931592,
    "node_id": "IC_kwDOGZSKs85G7OpI",
    "user": {
      "login": "sambacha",
      "id": 32783916,
      "node_id": "MDQ6VXNlcjMyNzgzOTE2",
      "avatar_url": "https://avatars.githubusercontent.com/u/32783916?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sambacha",
      "html_url": "https://github.com/sambacha",
      "followers_url": "https://api.github.com/users/sambacha/followers",
      "following_url": "https://api.github.com/users/sambacha/following{/other_user}",
      "gists_url": "https://api.github.com/users/sambacha/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sambacha/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sambacha/subscriptions",
      "organizations_url": "https://api.github.com/users/sambacha/orgs",
      "repos_url": "https://api.github.com/users/sambacha/repos",
      "events_url": "https://api.github.com/users/sambacha/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sambacha/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-20T07:34:04Z",
    "updated_at": "2022-07-20T07:34:04Z",
    "author_association": "NONE",
    "body": "> > Would love to hear thoughts from you @jeromelaurens @sambacha @xcarlo @block-builder-22!\r\n> \r\n> Mainly agree with @jparyani : start simple. I would propose a signed header for authentication but without reputation scoring at the beginning + network Dos protection if it's easy to setup on your relay. And as jason suggested, analyze manually what is a malicious behaviour before deciding the countermeasures.\r\n> \r\n> Why not a stake too, but some of us may have some bugs or strange behaviour at the beginning, that is not intentionaly malicious. Those bugs would have to be fixed. But in the meantime it wouldn't be fair to slash the stake for those investing time for this. Also I'm not in favour of stake beacause what's preventing a rich builder to build an infrastructure with many accounts and stakes, still spaming more than the others without being seen as a whole? It is an incentive to centralization for richs\r\n\r\nThe RLN solves this issue by decoupling availability from reputation: you do not get access based on some capital requirement, you get access based on your existing reputation from flashbots to boostrap it. The sybil problem is still there, however there are additional ways of mitigating this",
    "reactions": {
      "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1189931592/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1189949304",
    "html_url": "https://github.com/flashbots/mev-boost/issues/219#issuecomment-1189949304",
    "issue_url": "https://api.github.com/repos/flashbots/mev-boost/issues/219",
    "id": 1189949304,
    "node_id": "IC_kwDOGZSKs85G7S94",
    "user": {
      "login": "jeromelaurens",
      "id": 2656354,
      "node_id": "MDQ6VXNlcjI2NTYzNTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2656354?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jeromelaurens",
      "html_url": "https://github.com/jeromelaurens",
      "followers_url": "https://api.github.com/users/jeromelaurens/followers",
      "following_url": "https://api.github.com/users/jeromelaurens/following{/other_user}",
      "gists_url": "https://api.github.com/users/jeromelaurens/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jeromelaurens/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jeromelaurens/subscriptions",
      "organizations_url": "https://api.github.com/users/jeromelaurens/orgs",
      "repos_url": "https://api.github.com/users/jeromelaurens/repos",
      "events_url": "https://api.github.com/users/jeromelaurens/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jeromelaurens/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-20T07:54:04Z",
    "updated_at": "2022-07-20T08:26:00Z",
    "author_association": "NONE",
    "body": "> The RLN solves this issue by decoupling availability from reputation: you do not get access based on some capital requirement, you get access based on your existing reputation from flashbots to boostrap it. The sybil problem is still there, however there are additional ways of mitigating this\r\n\r\nRLN is a very good idea. 👍 \r\nI'm not completly aware of all the details of RLN, but there is something at stake in RLN ?\r\nif yes, what did you put at stake ? the flashbot reputation? \r\nbut you cannot slash flashbot reputation, only your copy of it?  only flashbot team can.\r\nAnd the question remains : do the FB team have time to implement it before the merge ?",
    "reactions": {
      "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1189949304/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1189955531",
    "html_url": "https://github.com/flashbots/mev-boost/issues/219#issuecomment-1189955531",
    "issue_url": "https://api.github.com/repos/flashbots/mev-boost/issues/219",
    "id": 1189955531,
    "node_id": "IC_kwDOGZSKs85G7UfL",
    "user": {
      "login": "sambacha",
      "id": 32783916,
      "node_id": "MDQ6VXNlcjMyNzgzOTE2",
      "avatar_url": "https://avatars.githubusercontent.com/u/32783916?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sambacha",
      "html_url": "https://github.com/sambacha",
      "followers_url": "https://api.github.com/users/sambacha/followers",
      "following_url": "https://api.github.com/users/sambacha/following{/other_user}",
      "gists_url": "https://api.github.com/users/sambacha/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sambacha/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sambacha/subscriptions",
      "organizations_url": "https://api.github.com/users/sambacha/orgs",
      "repos_url": "https://api.github.com/users/sambacha/repos",
      "events_url": "https://api.github.com/users/sambacha/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sambacha/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-20T08:00:44Z",
    "updated_at": "2022-07-20T08:00:44Z",
    "author_association": "NONE",
    "body": "> > The RLN solves this issue by decoupling availability from reputation: you do not get access based on some capital requirement, you get access based on your existing reputation from flashbots to boostrap it. The sybil problem is still there, however there are additional ways of mitigating this\r\n> \r\n> RLN is a very good idea. 👍 I'm not completly aware of all the details of RLN, but there is something at stake in RLN ? if yes, what did you put at stake ? the flashbot reputation? but you cannot slash flashbot reputation, only your copy of it? only flashbot team can. And the question remains : do the FB have time to implement it before the merge ?\r\n\r\n\r\n> From our Forums post on the subject:\r\n\r\n# OpenMEV RLN\r\n\r\nOpenMEV is interested in utilizing a decentralized identity for the purposes of limiting access to its public RPC. In general, everyone should be able to submit to the RPC, however, some degree of censorship vis a vie to protect the availability and liveness of the RPC gateway is desirable (i.e. preventing DDoS, spam, etc).\r\n\r\nIt seems as if there are 3 possible ways of utilizing the zk-RLN solution:\r\n\r\n1: Exclusively rely on it as both an identity, authentication/authorization, and reputation system\r\n\r\n2: Use existing reputation methods to enrich RLN (is this even possible, I am unsure as there seems only to be a membership and slashing, no +positive function for improving one's score')?\r\n\r\n3: Two-stage membership: zk-RLN for general access, with a reputation system on top for prioritizing positional priority within accepting transactions\r\n\r\n\r\n> [1]: is identity and reputation substantively different or purely semantics in the context of this system \r\n\r\nCan this be applied to a 'two-sided market'? Basically with the RLN acting as an interchange/matchmaking mechanism?\r\n\r\nIs there only a concept of a singular user or can there be 'collectives'/'groups'?\r\n\r\nCan slashing be configured? What are the parameters for slashing? Was not able to find this as it relates specifically to RLN\r\n\r\n## RLN Overview\r\n\r\nRLN (Rate Limiting Nullifier) is a construct based on zero-knowledge proofs that enable spam prevention mechanisms for decentralized, anonymous environments.\r\n\r\nFor RLN to be used, the users first need to register to the application with their public key - they’re added to a membership Merkle tree upon successful registration. After that, they can use the protocol protected by RLN, but with each action, they leak a portion of their private key, and if they break the anti-spam threshold with a predetermined frequency of requests their private key can be fully reconstructed (by the properties of Shamir’s Secret Sharing scheme 2). By having their private key revealed the user can be removed from the membership tree and their protocol-related stake can be slashed if staking is enabled for the RLN application. \r\n\r\n\r\nIt will rate limit the users based on their IP addresses, but also it will be able to verify ZK proofs that the users will generate. The users will need to be registered to the service to generate valid ZK proofs. The service will enable user registration for the users that want to avoid solving challenges manually by providing a user interface, where by using InterRep the users will be able to register to the service.\r\n\r\nThe server (RPC Gateway) will host a single membership Merkle tree for all of the users, meaning that the users are registered at the service level and not on the application level. In other words after registering users will be able to access all of the applications protected by the rate-limiting service.\r\n\r\nIf a user sends too many requests per second, the service will be able to reliably identify and remove the user from it’s membership tree, by the properties of the RLN proof system. Once slashed the users will not be able to access the applications protected by the rate-limiting service again, nor be able to register (this might be too restrictive, and we might loosen up these conditions).\r\n\r\n\r\n\r\n### Current Flashbots Reputation scheme:\r\n\r\n$r$ : searcher reputation score.\r\n$H_{U}$ : set of all transactions $T$ submitted by searcher $U$ to the flashbots relay eth_sendBundle RPC and successfully landed on chain.\r\n$S_{U}$ : set of all transactions $T$ submitted by searcher $U$ to the flashbots relay eth_sendBundle and eth_callBundle RPC.\r\n$g_{T}$ : gas used by transaction $T$.\r\n$p_{T}$ : gas price of transaction $T$.\r\n$\\Delta_{\\text {coinbase }}$ : coinbase difference from direct payment in transaction $T$.",
    "reactions": {
      "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1189955531/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1214439795",
    "html_url": "https://github.com/flashbots/mev-boost/issues/219#issuecomment-1214439795",
    "issue_url": "https://api.github.com/repos/flashbots/mev-boost/issues/219",
    "id": 1214439795,
    "node_id": "IC_kwDOGZSKs85IYuFz",
    "user": {
      "login": "charlescharles",
      "id": 4009487,
      "node_id": "MDQ6VXNlcjQwMDk0ODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4009487?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/charlescharles",
      "html_url": "https://github.com/charlescharles",
      "followers_url": "https://api.github.com/users/charlescharles/followers",
      "following_url": "https://api.github.com/users/charlescharles/following{/other_user}",
      "gists_url": "https://api.github.com/users/charlescharles/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/charlescharles/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/charlescharles/subscriptions",
      "organizations_url": "https://api.github.com/users/charlescharles/orgs",
      "repos_url": "https://api.github.com/users/charlescharles/repos",
      "events_url": "https://api.github.com/users/charlescharles/events{/privacy}",
      "received_events_url": "https://api.github.com/users/charlescharles/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-14T20:01:09Z",
    "updated_at": "2022-08-14T20:01:09Z",
    "author_association": "NONE",
    "body": "Here’s an idea for a reputation system - so the relay really only needs to simulate the best block it’s received so far, right? How about:\r\n- relay asks builders assert how much their blocks pay (or also other assertions the relay may care about, like not containing sandwiches or not interacting with sanctioned addresses (sorry))\r\n- relay keeps two queues: (1) blocks from “trusted” builders in decreasing claimed payment, (2) blocks with no payment assertion provided or from “untrusted” builders in received order\r\n- it iterates through queue 1, simulating blocks until it finds one that pays the amount claimed. Every time it finds a block that pays less than claimed, it marks that builder no longer trusted. Once it finds a block that pays the claimed amount it can stop looking at queue 1 (this must is the best block so far)\r\n- Then it looks through queue 2 and simulates every one to check if it’s better than the best block\r\n\r\nWe also need to decide how the reputation system works. If you’re too eager to mark builders trusted, then malicious builders can generate lots of keys, get them all trusted, and then spam queue 1 during high mev times. If you’re too picky, this encourages centralization. One simple option is to mark builders trusted once they’ve successfully had a block proposed.\r\n\r\nThere are probably other things you can do too, like require builders to send you the proposer payment log event along with merkle proof of inclusion in the receipts trie of their block.",
    "reactions": {
      "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1214439795/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
