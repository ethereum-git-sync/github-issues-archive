{
  "url": "https://api.github.com/repos/flashbots/mev-boost/issues/88",
  "repository_url": "https://api.github.com/repos/flashbots/mev-boost",
  "labels_url": "https://api.github.com/repos/flashbots/mev-boost/issues/88/labels{/name}",
  "comments_url": "https://api.github.com/repos/flashbots/mev-boost/issues/88/comments",
  "events_url": "https://api.github.com/repos/flashbots/mev-boost/issues/88/events",
  "html_url": "https://github.com/flashbots/mev-boost/issues/88",
  "id": 1197698413,
  "node_id": "I_kwDOGZSKs85HY21t",
  "number": 88,
  "title": "Fraud proof communication",
  "user": {
    "login": "realbigsean",
    "id": 5160426,
    "node_id": "MDQ6VXNlcjUxNjA0MjY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5160426?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/realbigsean",
    "html_url": "https://github.com/realbigsean",
    "followers_url": "https://api.github.com/users/realbigsean/followers",
    "following_url": "https://api.github.com/users/realbigsean/following{/other_user}",
    "gists_url": "https://api.github.com/users/realbigsean/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/realbigsean/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/realbigsean/subscriptions",
    "organizations_url": "https://api.github.com/users/realbigsean/orgs",
    "repos_url": "https://api.github.com/users/realbigsean/repos",
    "events_url": "https://api.github.com/users/realbigsean/events{/privacy}",
    "received_events_url": "https://api.github.com/users/realbigsean/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 4053138209,
      "node_id": "LA_kwDOGZSKs87xlfsh",
      "url": "https://api.github.com/repos/flashbots/mev-boost/labels/brainstorming",
      "name": "brainstorming",
      "color": "5ABEB3",
      "default": false,
      "description": "Currently in discussion"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2022-04-08T19:10:57Z",
  "updated_at": "2022-04-20T12:15:07Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "What is the current direction this is headed? I'm not sure how bad payloads are supposed to be communicated between `mev-boost` nodes and I think this is important in order to know ahead of time which relays to avoid using. \r\n\r\nThe options I can think of are:\r\n1. consensus layer p2p - seems like the best solution but not feasible pre-merge\r\n2. `mev-boost` implements p2p - also seems unlikely pre-merge, but maybe with re-use of Prysm's libraries this wouldn't actually be too  bad\r\n3. relays are used to also relay fraud proofs, and this would rely on relays policing each other. Their incentive for doing this is to increase their own flow of payloads by notifying `mev-boost` nodes that *other* relays are misbehaving. This one seems least appealing but maybe the easiest to actually implement pre-merge. Relevant comment: https://github.com/flashbots/mev-boost/pull/82#issuecomment-1091851969",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/flashbots/mev-boost/issues/88/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/flashbots/mev-boost/issues/88/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1095106700",
    "html_url": "https://github.com/flashbots/mev-boost/issues/88#issuecomment-1095106700",
    "issue_url": "https://api.github.com/repos/flashbots/mev-boost/issues/88",
    "id": 1095106700,
    "node_id": "IC_kwDOGZSKs85BRgCM",
    "user": {
      "login": "thegostep",
      "id": 15959632,
      "node_id": "MDQ6VXNlcjE1OTU5NjMy",
      "avatar_url": "https://avatars.githubusercontent.com/u/15959632?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/thegostep",
      "html_url": "https://github.com/thegostep",
      "followers_url": "https://api.github.com/users/thegostep/followers",
      "following_url": "https://api.github.com/users/thegostep/following{/other_user}",
      "gists_url": "https://api.github.com/users/thegostep/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/thegostep/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/thegostep/subscriptions",
      "organizations_url": "https://api.github.com/users/thegostep/orgs",
      "repos_url": "https://api.github.com/users/thegostep/repos",
      "events_url": "https://api.github.com/users/thegostep/events{/privacy}",
      "received_events_url": "https://api.github.com/users/thegostep/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-11T14:14:31Z",
    "updated_at": "2022-04-11T14:22:01Z",
    "author_association": "CONTRIBUTOR",
    "body": "The design I initially proposed was 3) where mev-boost can call `relay_getRelayStatusV1` on the relays to obtain fraud proofs for the last 64 blocks. Main reason for selecting this approach is to avoid needing to solve spam prevention on p2p.\r\n\r\nWhy I think 3) can work:\r\n- relays have incentive to report against on each other because they can take down a different relay\r\n- it allows all validators to obtain a fraud proof and disconnect from a relay simultaneously\r\n- if a relay provides an invalid fraud proof or spam, they can be punished by mev-boost\r\n\r\nThe fraud proof does assume that the execution client provides an RPC for simulating a block on top of the state of any of the past 64 blocks. Initially, the plan was to use `engine_executePayloadV1` for this, but as I understand it was removed from the engine API and must be replaced.\r\n\r\n---\r\n\r\n### Validation\r\n\r\n ```mermaid\r\n sequenceDiagram\r\n     Title: Fraud Proof\r\n     participant mev_boost\r\n     participant relays\r\n     mev_boost->>relays: relay_getRelayStatusV1\r\n     Note over mev_boost: blacklist bad relay\r\n ```\r\n\r\n 1. if a relay identifies a payload which violates consensus rules and was subsequently proposed to the network, they must craft a [`FraudProof`](#fraudproof) which contains the necessary information to verify the missbehavior.\r\n 2. mev-boost requests recent fraud proofs by calling [`relay_getRelayStatusV1`](#relay_getrelaystatusv1) on connected relays.\r\n 3. If a fraud proof is returned, mev-boost extracts the identity of the offending relay from the payload signature and verifies that the signature matches the payload header.\r\n 4. mev-boost calls [`engine_executePayloadV1`](#engine_executepayloadv1) against the local execution client using the payload data provided in the fraud proof. If the response is `\"INVALID\"`, mev-boost immediately blacklists the relay that generated this payload.\r\n 5. the operator must manually remove the offending relay from the blacklist in order to resume receiving payloads.\r\n\r\n### relay_getRelayStatusV1\r\n\r\n #### Request\r\n\r\n - method: `relay_getRelayStatusV1`\r\n\r\n #### Response\r\n\r\n - result: [`RelayStatus`](#relaystatus)\r\n - error: code and message set in case an exception happens while performing the request.\r\n\r\n#### RelayStatus\r\n\r\n - `currentState`: [`ForkchoiceStateV1`](https://github.com/ethereum/execution-apis/blob/v1.0.0-alpha.5/src/engine/specification.md#forkchoicestatev1) - current state of the chain seen by the relay.\r\n - `nextPayload`: [`PayloadAttributesV1`](https://github.com/ethereum/execution-apis/blob/v1.0.0-alpha.5/src/engine/specification.md#payloadattributesv1) - attributes of the upcoming payload.\r\n - `fraudProofs`: Array of [`FraudProof`](#fraudproof) - any fraud proof produced in the last 64 blocks.\r\n\r\n #### FraudProof\r\n\r\n - `payloadHeader`: [`SignedMEVPayloadHeader`](#signedmevpayloadheader) - the invalid payload header signed by the offending relay.\r\n - `payload`: [`ExecutionPayloadV1`](https://github.com/ethereum/consensus-specs/blob/v1.1.6/specs/merge/beacon-chain.md#executionpayload) - the invalid payload revealed to the network.\r\n - `block`: [`SignedBlindedBeaconBlock`](#signedblindedbeaconblock) - the invalid beacon block signed and proposed by the validator.",
    "reactions": {
      "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1095106700/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
