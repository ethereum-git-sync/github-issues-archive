{
  "url": "https://api.github.com/repos/flashbots/mev-boost/issues/144",
  "repository_url": "https://api.github.com/repos/flashbots/mev-boost",
  "labels_url": "https://api.github.com/repos/flashbots/mev-boost/issues/144/labels{/name}",
  "comments_url": "https://api.github.com/repos/flashbots/mev-boost/issues/144/comments",
  "events_url": "https://api.github.com/repos/flashbots/mev-boost/issues/144/events",
  "html_url": "https://github.com/flashbots/mev-boost/issues/144",
  "id": 1266352879,
  "node_id": "I_kwDOGZSKs85LewLv",
  "number": 144,
  "title": "Searcher Bidding Complexity Due To PBS",
  "user": {
    "login": "quintuskilbourn",
    "id": 47097067,
    "node_id": "MDQ6VXNlcjQ3MDk3MDY3",
    "avatar_url": "https://avatars.githubusercontent.com/u/47097067?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/quintuskilbourn",
    "html_url": "https://github.com/quintuskilbourn",
    "followers_url": "https://api.github.com/users/quintuskilbourn/followers",
    "following_url": "https://api.github.com/users/quintuskilbourn/following{/other_user}",
    "gists_url": "https://api.github.com/users/quintuskilbourn/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/quintuskilbourn/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/quintuskilbourn/subscriptions",
    "organizations_url": "https://api.github.com/users/quintuskilbourn/orgs",
    "repos_url": "https://api.github.com/users/quintuskilbourn/repos",
    "events_url": "https://api.github.com/users/quintuskilbourn/events{/privacy}",
    "received_events_url": "https://api.github.com/users/quintuskilbourn/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 4082529928,
      "node_id": "LA_kwDOGZSKs87zVnaI",
      "url": "https://api.github.com/repos/flashbots/mev-boost/labels/research%20%F0%9F%92%A1",
      "name": "research 💡",
      "color": "0052cc",
      "default": false,
      "description": "Research topic"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2022-06-09T15:56:21Z",
  "updated_at": "2022-07-29T20:06:45Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "In thinking about how the auction for bundle inclusion will change under PBS the following problem came to mind. \r\n\r\nThere are effectively two auctions happening. One for bundle inclusion and one for block inclusion. Searchers know how to bid for bundle inclusion, however block inclusion is very different. One may be faced with a scenario in which the sum of the winning bids for bundle inclusion in a Flashbots block (flashblock?) is not sufficient to win the PBS auction, despite the block being the most valuable block produced. In order for the flashblock to make it on-chain, searchers must work together and bid more than they need for bundle inclusion to facilitate block inclusion. \r\n\r\nBelow is an example of such a scenario (it may be a little unrealistic, but the problem is more general than the example). The example shows two distinct MEV opportunities being bid on for inclusion in the Flashblock. For simplicity, both opportunities are only pursued by two searchers, the superior of which has a good inkling to what the other can extract/bid.\r\n\r\n![image](https://user-images.githubusercontent.com/47097067/172890653-5886e49f-b01f-4140-8f82-c7a031ffd556.png)\r\n### This seems unrealistic\r\n* Argument: No one will come close to creating blocks with a similar value to ours\r\n    * Response: This is a strong premise, we should have good reason to assume weak competition if we do\r\n    - Response: One can imagine something like Yuga requiring all NFT mints to go through a certain wallet.\r\n- Argument: No way searchers have this much profit left after getting a bundle included\r\n    - Response: Long tail MEV\r\n    - Response: Exclusive order flow is a problem. For example, we recently spoke to Rook searchers who had no competition for block inclusion because of EOF (for which they didn’t have to pay that much).\r\n    - Response: PBS may end up being a game of inches\r\n- Argument: This will be rare\r\n    - Response: Even if it is rare, there may be many such blocks in a row leading bad UX (e.g. if this arises from specific market conditions like a Coinbase wallet incentive)\r\n    - Response: With EOF it may not be.\r\n\r\n\r\n### Why this is a problem\r\n\r\n- Searchers face a lot of uncertainty. It is hard to know how much everyone else is willing to bid for block inclusion especially because of the following uncertainties:\r\n    - What other bundles will be included in the flashblock\r\n    - How highly other searchers value their bundles\r\n    - How high other searchers will bid to include their blocks\r\n    \r\n    This provides incentive for searchers to **merge/form coalitions** to coordinate on total bid (centralisation)\r\n    \r\n- EOF of other block builder gains traction.\r\n\r\n\r\n-------\r\n#### Some discussion that already happened\r\nOn the point about searcher uncertainty: \"and the argument is that this incurs a lot of overhead on searcher’s side, so the collective time they spent playing mind games because of the existence of 2 auctions instead of 1 is negative sum. So we should devise a better mechanism design?\"\r\n\r\nResponse: \"Yes negative sum bc of time wasted and revenue wasted on blocks that don’t make it because someone else is trying to game the system or on overbidding to compensate for potential slackers.\r\n May also see searchers invest more time in auctions that see them more reliably included/with more “fair” UX for searchers.\"\r\n\r\n\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/flashbots/mev-boost/issues/144/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/flashbots/mev-boost/issues/144/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1152546425",
    "html_url": "https://github.com/flashbots/mev-boost/issues/144#issuecomment-1152546425",
    "issue_url": "https://api.github.com/repos/flashbots/mev-boost/issues/144",
    "id": 1152546425,
    "node_id": "IC_kwDOGZSKs85EsnZ5",
    "user": {
      "login": "jldunne",
      "id": 89044461,
      "node_id": "MDQ6VXNlcjg5MDQ0NDYx",
      "avatar_url": "https://avatars.githubusercontent.com/u/89044461?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jldunne",
      "html_url": "https://github.com/jldunne",
      "followers_url": "https://api.github.com/users/jldunne/followers",
      "following_url": "https://api.github.com/users/jldunne/following{/other_user}",
      "gists_url": "https://api.github.com/users/jldunne/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jldunne/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jldunne/subscriptions",
      "organizations_url": "https://api.github.com/users/jldunne/orgs",
      "repos_url": "https://api.github.com/users/jldunne/repos",
      "events_url": "https://api.github.com/users/jldunne/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jldunne/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-10T16:42:13Z",
    "updated_at": "2022-06-10T16:42:13Z",
    "author_association": "NONE",
    "body": "Thanks for taking the time to write this up @quintuskilbourn! I have added some thoughts and questions below.\r\n\r\nMy understanding of this scenario is as follows:\r\n\r\n1. Searchers bid to have their bundles included in a block. There is some upper limit on the value of their bids i.e. the overall value of the bundle.\r\n2. The block builder will separately bid to have the block chosen by the proposer. The block builder has no upper limit on what they might bid to have their block included, as it is advantageous for them to have blocks included (winning blocks is good for business, maybe they profit from MEV, more blocks means more EOF). A soft limit might be the `sum(searcher’s bids) - profit`.\r\n3. If the searchers are bidding to have their block included, it’s possible that the builder they submit to is asking for less bids than another builder, thus leading to a decreased likelihood of their block being included. This incentivises the searchers to monitor other bundles that are coming in (is this possible?), and collude with eachother to pay more (but not more than the overall value of their bundles), so that there is more space for the builder to win the proposer auction.\r\n4. If a builder or group of searchers has access to EOF, then this leads to more opportunity for the block builder to increase their proposer bid, thus leading to more likely block inclusion, and probably more orderflow. This has a centralising effect at block building.\r\n\r\n**TL;DR**\r\nIt’s still not 100% clear to me what the negative implications of this are. The most concerning one seems to be access to exclusive orderflow exacerbating occurrence of this scenario, leading to dominant builders emerging. However, I think this is still the least bad area for “centralisation” to occur, and it’s in line with the original design goals of PBS, that block building be outsourced to a competitive market.\r\n\r\nMore detailed comments:\r\n\r\n> In thinking about how the auction for bundle inclusion will change under PBS the following problem came to mind.\r\n> There are effectively two auctions happening. One for bundle inclusion and one for block inclusion. Searchers know how to bid for bundle inclusion, however block inclusion is very different. \r\n\r\nYes, however I think it’s important to note that these are two independent auctions. The block builder’s bid is separate from the bids that the searchers are submitting. The builder will decide independently how much of the searcher bids to give to the proposer. In the absence of the protocol enforcing this relationship, It’s not clear to me that this will definitely converge at `proposer bid == sum of searcher bids - small profit`. In fact, I can think of a few scenarios where the block builder might like to pay significantly more than what they received to the proposer (e.g. Mateusz’s idea about allowing partial blocks, or some kind of promotion).\r\n\r\n> One may be faced with a scenario in which the sum of the winning bids for bundle inclusion in a Flashbots block (flashblock?) is not sufficient to win the PBS auction, despite the block being the most valuable block produced.\r\n\r\nI see what you are saying. However, in this case, couldn’t the builder conceivably pay more out of their own funds in order to get this block included, and then require higher bids from searchers for the next block? They might be more likely to do this as there are some advantages to them winning blocks apart from profiting from searcher bids.\r\n\r\n> In order for the flashblock to make it on-chain, searchers must work together and bid more than they need for bundle inclusion to facilitate block inclusion.\r\n\r\nThis framing doesn't seem quite right to me. There is an upper bound of what the searchers bids will be (close to the value of the bundle) because presumably they won’t bother bidding unless it is profitable to them. Is the idea that collectively upping their bids gives the block builder more room to increase its own bid, and therefore include their block?\r\n\r\n> No one will come close to creating blocks with a similar value to ours\r\n\r\nHmm, I think we are expecting other builders to emerge very quickly after the merge, and there is certainly no guarantee that FB will be the strongest 😁 \r\n\r\n> This provides incentive for searchers to merge/form coalitions to coordinate on total bid (centralisation)\r\n\r\nAFAIK it’s already very common for searchers to work in teams. Is the issue that disparate groups of searchers will collude at bidding time? Why is this a problem?\r\n\r\n> EOF of other block builder gains traction.\r\n\r\nThis is maybe more of an issue. If a builder/searcher has access to EOF, they can submit bundles that will theoretically be more profitable, which might lead to this dynamic happening more, and if the builder acts rationally and increases the proposer bid to be equal to the upper limit of this sum(bids), then maybe this builder is more likely to win. Winning builders will be more likely to get more OF, and therefore become dominant?",
    "reactions": {
      "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1152546425/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1152622983",
    "html_url": "https://github.com/flashbots/mev-boost/issues/144#issuecomment-1152622983",
    "issue_url": "https://api.github.com/repos/flashbots/mev-boost/issues/144",
    "id": 1152622983,
    "node_id": "IC_kwDOGZSKs85Es6GH",
    "user": {
      "login": "quintuskilbourn",
      "id": 47097067,
      "node_id": "MDQ6VXNlcjQ3MDk3MDY3",
      "avatar_url": "https://avatars.githubusercontent.com/u/47097067?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/quintuskilbourn",
      "html_url": "https://github.com/quintuskilbourn",
      "followers_url": "https://api.github.com/users/quintuskilbourn/followers",
      "following_url": "https://api.github.com/users/quintuskilbourn/following{/other_user}",
      "gists_url": "https://api.github.com/users/quintuskilbourn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/quintuskilbourn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/quintuskilbourn/subscriptions",
      "organizations_url": "https://api.github.com/users/quintuskilbourn/orgs",
      "repos_url": "https://api.github.com/users/quintuskilbourn/repos",
      "events_url": "https://api.github.com/users/quintuskilbourn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/quintuskilbourn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-10T18:22:25Z",
    "updated_at": "2022-06-10T18:35:51Z",
    "author_association": "NONE",
    "body": "Thanks for a thorough response @jldunne. \r\n\r\nYes I agree that if builders are willing to take a loss to have a block included then this situation is less of a problem.  Then again one would ideally not design a block-building system in which the builder frequently has to take a loss while searchers walk away with profit that could have covered the builders loss.\r\n\r\nThe point I was trying to make is less a criticism of PBS and more of a potential flaw in determining bundle inclusion by taking the highest bid (because valuable blocks may not make it on-chain), especially if for some reason the builder is unwilling to take a loss on any block (this could come up if someone is trying to build blocks in a fully decentralised way for example). \r\n\r\nWith PBS and under the assumption that a builder isn't willing to take a loss on a block, having searchers bid for bundle inclusion in a block means that searchers need to estimate three quantities to maximise profit: (1) how much they should bid for inclusion in the block, (2) how much the block bid should be for on-chain inclusion and (3) how much other searchers will bid for their opportunities. \r\n\r\nIf searchers formed a coalition they could reduce/eliminate having to deal with (3), but I guess you're right. Centralisation at the searcher level shouldn't lead to any censorship as long as transactions that aren't picked up by searchers make it into the block normally. \r\nOn the other hand, if one does end up with a super-searcher with megabundles that cover most opportunities. It may be hard for smaller searchers working on a smaller range of opportunities to compete. No competition among searchers means that most MEV profit goes to searchers and not to builders or users.\r\n\r\n> Hmm, I think we are expecting other builders to emerge very quickly after the merge, and there is certainly no guarantee that FB will be the strongest 😁\r\n\r\n^Apologies the \"This seems unrealistic\" section was written as in an argument-response setup, but that wasn't clear. Edited it for clarity\r\n\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1152622983/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1164327366",
    "html_url": "https://github.com/flashbots/mev-boost/issues/144#issuecomment-1164327366",
    "issue_url": "https://api.github.com/repos/flashbots/mev-boost/issues/144",
    "id": 1164327366,
    "node_id": "IC_kwDOGZSKs85FZjnG",
    "user": {
      "login": "barnabemonnot",
      "id": 4910325,
      "node_id": "MDQ6VXNlcjQ5MTAzMjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4910325?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/barnabemonnot",
      "html_url": "https://github.com/barnabemonnot",
      "followers_url": "https://api.github.com/users/barnabemonnot/followers",
      "following_url": "https://api.github.com/users/barnabemonnot/following{/other_user}",
      "gists_url": "https://api.github.com/users/barnabemonnot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/barnabemonnot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/barnabemonnot/subscriptions",
      "organizations_url": "https://api.github.com/users/barnabemonnot/orgs",
      "repos_url": "https://api.github.com/users/barnabemonnot/repos",
      "events_url": "https://api.github.com/users/barnabemonnot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/barnabemonnot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-23T12:08:24Z",
    "updated_at": "2022-06-23T12:08:24Z",
    "author_association": "NONE",
    "body": "Just wanted to post some thoughts about this issue. The problem as I understand it is that the economically efficient block isn't realised due to the fragmentation of the auctions.\r\n\r\nMore specifically, you have two competitive auctions (`A` and `B`) going on at the same time. For each auction, we expect the second-price to be realised, respectively `A2` and `B2`. It is possible that the sum of the two second-prices `A2 + B2` is less than the value `C` (or bid) of a third party bidding a whole block, while the sum of the two \"first-prices\" `A1 + B1` (highest value for each bundle) is greater than the bid of the third party. In this case, economic efficiency is not realised as the value realised in the block is smaller than it could have been (`A1 + B1 > C > A2 + B2`)\r\n\r\nWhat prevented efficiency? Namely, it seems to be an information problem. If all bidders in the bundle auctions were aware of the third party bid, they could profitably enter into an agreement with each other to make a total bid up to `C`, plus increment (assume increment is zero, tie is broken by including the two bundles). For instance, any two bids `a` and `b` such that `a+b = C` and `a >= A2` and `b >= B2` would be fine, and the bids are incentive compatible as long as `A1 >= a` and `B1 >= b`. If we have `A1 + B1 > C`, then the feasible set is not trivially empty. Each point in the set is also an equilibrium, as either player unilaterally bidding less means they both realise a payoff of zero (they are not included in the block).\r\n\r\nNow we could assume 1) that neither player knows the other's value, or 2) that only one of them knows the other's, or 3) that they each know the other's. I am just writing some thoughts but it should be discussed :)\r\n\r\nIn 1), I wonder if it is possible to design a mechanism where they would reveal their true value. I am thinking some sort of VCG mechanism (https://en.wikipedia.org/wiki/Vickrey%E2%80%93Clarke%E2%80%93Groves_mechanism), but is it implementable?\r\n\r\nIn 2), it feels like the player who knows the other's value should be able to make them bid the entirety of their value or up to the amount necessary to beat the third-party bid, whichever is lower.\r\n\r\nIn 3), there may be ways to arrive at mutually-agreed upon \"fair\" agreements, where for instance each player bids an equal fraction of the profit they expect to make (they know how much the other stands to make since they know their values).\r\n\r\nThen of course should the builder interacting with the two searchers wish to \"top up\" the searcher bids to beat the EOF builder, it is basically a subsidy, which may be rational in a larger model where the builder gets external rewards from having one of their blocks included.",
    "reactions": {
      "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1164327366/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 1
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1199907471",
    "html_url": "https://github.com/flashbots/mev-boost/issues/144#issuecomment-1199907471",
    "issue_url": "https://api.github.com/repos/flashbots/mev-boost/issues/144",
    "id": 1199907471,
    "node_id": "IC_kwDOGZSKs85HhSKP",
    "user": {
      "login": "andy-t-wang",
      "id": 41224501,
      "node_id": "MDQ6VXNlcjQxMjI0NTAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/41224501?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/andy-t-wang",
      "html_url": "https://github.com/andy-t-wang",
      "followers_url": "https://api.github.com/users/andy-t-wang/followers",
      "following_url": "https://api.github.com/users/andy-t-wang/following{/other_user}",
      "gists_url": "https://api.github.com/users/andy-t-wang/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/andy-t-wang/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/andy-t-wang/subscriptions",
      "organizations_url": "https://api.github.com/users/andy-t-wang/orgs",
      "repos_url": "https://api.github.com/users/andy-t-wang/repos",
      "events_url": "https://api.github.com/users/andy-t-wang/events{/privacy}",
      "received_events_url": "https://api.github.com/users/andy-t-wang/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-29T20:06:45Z",
    "updated_at": "2022-07-29T20:06:45Z",
    "author_association": "NONE",
    "body": "I figure searchers will broadcast their transactions to all honest block builders. If the builder acts dishonestly and steals the MEV opportunities, then searchers will stop submitting to that builder. Thus, the builder will see their block value decrease as they lose valuable order flow. This means that honest block builders will generate the most of the blocks as they build the most valuable blocks and searchers should be fine submitting txns to all honest block builders. ",
    "reactions": {
      "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1199907471/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
