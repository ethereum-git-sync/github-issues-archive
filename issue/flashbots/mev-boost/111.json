{
  "url": "https://api.github.com/repos/flashbots/mev-boost/issues/111",
  "repository_url": "https://api.github.com/repos/flashbots/mev-boost",
  "labels_url": "https://api.github.com/repos/flashbots/mev-boost/issues/111/labels{/name}",
  "comments_url": "https://api.github.com/repos/flashbots/mev-boost/issues/111/comments",
  "events_url": "https://api.github.com/repos/flashbots/mev-boost/issues/111/events",
  "html_url": "https://github.com/flashbots/mev-boost/issues/111",
  "id": 1218729368,
  "node_id": "I_kwDOGZSKs85IpFWY",
  "number": 111,
  "title": "how does pos ethereum prevent bribery for late block proposal?",
  "user": {
    "login": "obadiaa",
    "id": 19510814,
    "node_id": "MDQ6VXNlcjE5NTEwODE0",
    "avatar_url": "https://avatars.githubusercontent.com/u/19510814?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/obadiaa",
    "html_url": "https://github.com/obadiaa",
    "followers_url": "https://api.github.com/users/obadiaa/followers",
    "following_url": "https://api.github.com/users/obadiaa/following{/other_user}",
    "gists_url": "https://api.github.com/users/obadiaa/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/obadiaa/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/obadiaa/subscriptions",
    "organizations_url": "https://api.github.com/users/obadiaa/orgs",
    "repos_url": "https://api.github.com/users/obadiaa/repos",
    "events_url": "https://api.github.com/users/obadiaa/events{/privacy}",
    "received_events_url": "https://api.github.com/users/obadiaa/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 4082529928,
      "node_id": "LA_kwDOGZSKs87zVnaI",
      "url": "https://api.github.com/repos/flashbots/mev-boost/labels/research%20%F0%9F%92%A1",
      "name": "research ðŸ’¡",
      "color": "0052cc",
      "default": false,
      "description": "Research topic"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 6,
  "created_at": "2022-04-28T13:26:33Z",
  "updated_at": "2022-07-18T17:14:07Z",
  "closed_at": null,
  "author_association": "COLLABORATOR",
  "active_lock_reason": null,
  "body": "TLDR: There exist a financial incentive for the execution payload to be proposed later than the anticipated time window for it. We worry that this might lead to favoring larger validators, encourage attester bribing infrastructure and might contribute to making consensus attacks described in recent papers more likely.\r\n\r\n**Context:** \r\nThe beacon chain has slots. A slot is currently every 12s. Within this slot exists an execution chain block as well as consensus objects. While there is theoretically (12s-epsilon) time to put the beacon block together within the slot, there are actually sub-slots within this slot that are softly enforced by consensus clients. These sub-slots are necessary in order to account for propagation time (incl. network delays) to attesters and for the proper construction of a beacon block. \r\n\r\nAfaik - an execution chain block is supposed to be proposed in the first 4s of the 12s slot. This gives 8s for it to be voted on by attesters and in MEV-Boost, leaves enough for the body to be revealed by the end of the slot. For eg. see `waitToOneThirdOrValidBlock()` in Prysm's client here: https://github.com/prysmaticlabs/prysm/blob/8c8f1bb9c18ebbc42241848a328ed275b12587e5/validator/client/attest.go#L250 (thanks @terencechain )\r\n\r\n**Worry 1: Late execution block proposals:**\r\nIn theory, the proposer has until 12s-epsilon to submit a beacon block. This means the execution chain block could be constructed maybe at 11s rather than 4s in. This time difference means the builder would have an additional 7s to construct a block. In those 7s, new transactions couldâ€™ve come in and made the block more profitable. \r\n\r\nThe proposer and builders now have an incentive to delay the block submission as much as possible.\r\n\r\nThis is problematic because:\r\n- a proposer that controls a lot of validators can inherently force them to vote later (by modifying their consensus client source codes) vs a solo validator. This means there is an advantage to controlling a lot of validators that are well-connected to the p2p network.\r\n- another flavor of this problem is that there might exist an incentive to bribe attesters in order to delay their attestations.\r\n\r\nQuestions:\r\n1. on average, how much more profitable are blocks after X seconds from Flashbots data? This will help us understand how big of an advantage would larger validators get. \r\n2. what is the technical complexity of either bribing attesters and making sure the attesters attest later than expected?\r\n3. what is the financial risk encountered by doing this (later attestations get less rewards + there is a risk of missing the slot afaik which would incur a slashing penalty)? can we surface and calculate the expected value of doing this?\r\n4. Given this information, how expensive would it be to bribe attesters?\r\n\r\nThe good news is that we have numbers to quantify this, in particular, Flashbots finds that on average, each additional second of waiting is worth 0.034 eth in additional miner payment (incl. 1559 tips). The outlier numbers we have (top 0.1% of blocks excluding tips - only bundle payments) are around 1 eth/s (thx @metachris and @Ruteri ). These numbers generally _seem_ too small for this worry to be relevant.\r\n\r\nThe bad news is that this quantification is imperfect. In particular, if someone can delay their ultimate proposal to a few seconds later, they are able to do cross-domain arbitrage with low-latency domains more effectively. Priced in, this might be worth large sums of money.\r\n\r\nTo-do:\r\n- [ ] poll relevant parties (searchers who run these type of strategies) to understand what this could amount to for them.\r\n\r\n**Worry 2: Reorgs**\r\nTwo papers (https://arxiv.org/pdf/2203.01315.pdf and https://eprint.iacr.org/2021/1413.pdf) were recently released detailing 5 attacks on PoS consensus (co-authored by @casparschwa @barnabemonnot et.al). One attack in particular relies on the timing of a block proposal.\r\n\r\nWe worry wether the financial incentives outlined above exert an upwards pressure on the likeliness of such a timing attack happening in the wild. I understand these attacks have been fixed and suspect this worry can be easily alleviated by @casparschwa sharing how these attacks were fixed.\r\n\r\nWe open the discussion here and look forward to your questions and comments :)!",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/flashbots/mev-boost/issues/111/reactions",
    "total_count": 2,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 2
  },
  "timeline_url": "https://api.github.com/repos/flashbots/mev-boost/issues/111/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1117590790",
    "html_url": "https://github.com/flashbots/mev-boost/issues/111#issuecomment-1117590790",
    "issue_url": "https://api.github.com/repos/flashbots/mev-boost/issues/111",
    "id": 1117590790,
    "node_id": "IC_kwDOGZSKs85CnRUG",
    "user": {
      "login": "casparschwa",
      "id": 31305984,
      "node_id": "MDQ6VXNlcjMxMzA1OTg0",
      "avatar_url": "https://avatars.githubusercontent.com/u/31305984?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/casparschwa",
      "html_url": "https://github.com/casparschwa",
      "followers_url": "https://api.github.com/users/casparschwa/followers",
      "following_url": "https://api.github.com/users/casparschwa/following{/other_user}",
      "gists_url": "https://api.github.com/users/casparschwa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/casparschwa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/casparschwa/subscriptions",
      "organizations_url": "https://api.github.com/users/casparschwa/orgs",
      "repos_url": "https://api.github.com/users/casparschwa/repos",
      "events_url": "https://api.github.com/users/casparschwa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/casparschwa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-04T17:01:53Z",
    "updated_at": "2022-05-04T17:20:56Z",
    "author_association": "NONE",
    "body": "### Worry 1: Late execution block proposals:\r\n\r\nThanks for bringing up this issue on timeliness of block proposals. **This is a known issue with the protocol and active exploit of this issue will lead to accelerated mitigation.** However, it's a known problem for which we have a solution in mind already. The solution is [(block, slot)-voting](https://github.com/ethereum/consensus-specs/pull/2197), it just needs some details figured out. \r\n\r\n[In this HackMD you'll find a much more detailed write-up of the problem, what this means for proposers/builders and what solutions could look like (there are more ideas!)](https://notes.ethereum.org/@css/H1G4M6CBc). \r\n\r\ntldr:\r\n- A block proposer can release as late as 11s into the slot and still end up canonical. The only constraint is that the next block proposer hears the late block so that they build on top of it (as opposed to the late block's parent). \r\n- However, if a proposer chooses to release very late virtually no attesters will vote for their late block (because they will have attested already). This opens the late block up to reorg attacks. The next proposer can use something called [*Proposer LMD Score Boosting*](https://github.com/ethereum/consensus-specs/pull/2730) (essentially as if some validators had already attested to this block) to reorg out a preceeding that has less votes accumulated than the size of the boost. This effectively introduces a soft-cap for the block releasing deadline around the 4s mark (which is the time when hoenst validators attest, if they havent heard a valid block already). \r\n- Both builders and proposers are interested in colluding since more tx mempool listening time implies more MEV, which is good for both parties involved. The questions is whether they can collude without trusting each other? And I think the answer is yes: Builders can simply send new bids as time goes by and the proposer just picks the best whenever they decide to finally build and release their block. This is good in so far that there is no advantage to being a large, reputable staker (builders trust you) vs being a solo staker (builders donâ€™t trust you), but it is bad in so far that it is therefore more likely to happen in the wild. \r\n- One may wonder whether a relay could somehow enforce honest release timing? For example, the relay could simply refuse to forward late builder bids. However, this incentivizes the creation of a new relay that is trusted by builders/proposers and allows untimely timing strategies. Relays only need to be trusted by builders and proposers, and itâ€™s irrelevant whether theyâ€™re value aligned. Generally this competitive pressure should make them stay away from being too restrictive. Further, relays are overall quite limited in what they can enforce, e.g. builders can release their payload themselves (should the relay refuse to because the proposer was late)â€¦\r\n\r\n### Worry 2: Reorgs\r\nThe three attacks mentioned in our paper are fixed by the aforementioned [Proposer LMD Score Boosting](https://github.com/ethereum/consensus-specs/pull/2730). One of the attacks in the other paper by Neu et al. is not an attack on PoS Ethereum. The other one is fixed by [removing equiovcating validators from fork choice consideration](https://github.com/ethereum/consensus-specs/pull/2845). I am happy to go into more detail on this here or elsewhere, but didn't want to go beyond scope in this comment. \r\n\r\n### Some other comments\r\nThere is actually one more \"sub-slot\": \r\n- [At the beginning of the slot a block proposer is supposed to propose a block](https://github.com/ethereum/consensus-specs/blob/dev/specs/phase0/validator.md#block-proposal). \r\n- [Committee members are supposed to attest](https://github.com/ethereum/consensus-specs/blob/dev/specs/phase0/validator.md#attesting) when they hear a valid block or 4s into the slot -- whatever comes first. \r\n- Aggregators are supposed to [release their attestation aggregates](https://github.com/ethereum/consensus-specs/blob/dev/specs/phase0/validator.md#broadcast-aggregate) 8s into slot. \r\n\r\nThis means that if the aggregators don't hear your attestations some time before the 8s mark they will likely not include them, meaning you're incentivized to release them before the 8s mark (if you want them to be included asap). \r\n\r\n---\r\n> A proposer that controls a lot of validators can inherently force them to vote later (by modifying their consensus client source codes) vs a solo validator. This means there is an advantage to controlling a lot of validators that are well-connected to the p2p network.\r\n\r\nBoth solo and multi-validators can modify the source code. It is not clear to me how there is an advantage only available to one or the other. Controlling lots of validators does not mean you control lots of nodes on the p2p layer. You can, but typically you'll use the same beacon node that handles the p2p stuff. And again, both a solo- and multi-validator could run multiple p2p nodes. \r\n\r\nOne advantage that someone controlling many validators has: They are more likely to also control an aggregator in the relevant (committee, slot)-pair in question. This means a large enough adversary could potentially circumvent the 8s deadline without foregoing inclusion rewards. \r\n\r\n---\r\nAnd finally, one question for you: Rather than an average value for what each additional second of waiting is worth, do you have data on the distribution of this?\r\n\r\nI wanted to post this already, but I'll think more about some of the other questions mentioned. Let me know, if there are follow-up questions etc. ",
    "reactions": {
      "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1117590790/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1117788102",
    "html_url": "https://github.com/flashbots/mev-boost/issues/111#issuecomment-1117788102",
    "issue_url": "https://api.github.com/repos/flashbots/mev-boost/issues/111",
    "id": 1117788102,
    "node_id": "IC_kwDOGZSKs85CoBfG",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-04T19:46:39Z",
    "updated_at": "2022-05-04T19:46:57Z",
    "author_association": "NONE",
    "body": "> However, if a proposer chooses to release very late virtually no attesters will vote for their late block (because they will have attested already). This opens the late block up to reorg attacks.\r\n\r\nTo expand on this.\r\n\r\nIf proposer of slot N is regularly willing to be \"dishonest\" (deviating from spec and normal software) and wait well past the 4s mark, then it is reasonable to believe the proposer of slot N+1 will (also be dishonest) utilize their proposer boost to re-org that proposer (by building on N's parent) and to steal MEV from proposer at slot N.\r\n\r\nSo it is not actually clear that waiting near or past the 4s mark is a viable strategy to get more MEV due to this strategy being attackable by the next slot proposer.\r\n\r\n-----------\r\n\r\nBeyond that. A general note here on this security issue. Mentioned by @casparschwa but worth being very clear what's at stake here.\r\n\r\nEthereum PoS has a number of known upgrades in the pipeline. Some are feature enhancements (e.g. sharded data) while some are security enhancements (e.g. proof of execution, DAS, etc). While we (researchers, developers, community) would like to prioritize shipping features, if known security issues become active targets, security enhancements will have to be prioritized\r\n\r\nManipulating the release of blocks between 4 and 11s in a slot is a known degenerate case with a proposed fix (called (block, slot) fork choice). This is explicitly against the \"honest\" spec and would (1) fairly attributable and (2) seen as nefarious behavior. In the event that flashbots, some large pool, or some other mechanism begins to exploit this issue to shift the timing equillibrium, it will accelerate the priority of shipping (block, slot) at the expense of important (desired?) scalability features. \r\n",
    "reactions": {
      "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1117788102/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1120446811",
    "html_url": "https://github.com/flashbots/mev-boost/issues/111#issuecomment-1120446811",
    "issue_url": "https://api.github.com/repos/flashbots/mev-boost/issues/111",
    "id": 1120446811,
    "node_id": "IC_kwDOGZSKs85CyKlb",
    "user": {
      "login": "terencechain",
      "id": 21316537,
      "node_id": "MDQ6VXNlcjIxMzE2NTM3",
      "avatar_url": "https://avatars.githubusercontent.com/u/21316537?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/terencechain",
      "html_url": "https://github.com/terencechain",
      "followers_url": "https://api.github.com/users/terencechain/followers",
      "following_url": "https://api.github.com/users/terencechain/following{/other_user}",
      "gists_url": "https://api.github.com/users/terencechain/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/terencechain/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/terencechain/subscriptions",
      "organizations_url": "https://api.github.com/users/terencechain/orgs",
      "repos_url": "https://api.github.com/users/terencechain/repos",
      "events_url": "https://api.github.com/users/terencechain/events{/privacy}",
      "received_events_url": "https://api.github.com/users/terencechain/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-08T16:18:46Z",
    "updated_at": "2022-05-08T16:18:46Z",
    "author_association": "COLLABORATOR",
    "body": "> The good news is that we have numbers to quantify this, in particular, Flashbots finds that on average, each additional second of waiting is worth 0.034 eth\r\n\r\nI'm curious about how much the honest block that builds on top of the late block would degrade and whether that's something we can quantify. For example, say at slot N, a dishonest proposer releases block at 11s and gains X more MEV. Would it be fair to estimate that at slot N+1, the honest proposer releases block at 0s and loses X MEV that it would have gained? Assuming both proposers use mev-boost and connect to different relays or same relay (would that make a big difference?) \r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1120446811/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1120452780",
    "html_url": "https://github.com/flashbots/mev-boost/issues/111#issuecomment-1120452780",
    "issue_url": "https://api.github.com/repos/flashbots/mev-boost/issues/111",
    "id": 1120452780,
    "node_id": "IC_kwDOGZSKs85CyMCs",
    "user": {
      "login": "terencechain",
      "id": 21316537,
      "node_id": "MDQ6VXNlcjIxMzE2NTM3",
      "avatar_url": "https://avatars.githubusercontent.com/u/21316537?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/terencechain",
      "html_url": "https://github.com/terencechain",
      "followers_url": "https://api.github.com/users/terencechain/followers",
      "following_url": "https://api.github.com/users/terencechain/following{/other_user}",
      "gists_url": "https://api.github.com/users/terencechain/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/terencechain/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/terencechain/subscriptions",
      "organizations_url": "https://api.github.com/users/terencechain/orgs",
      "repos_url": "https://api.github.com/users/terencechain/repos",
      "events_url": "https://api.github.com/users/terencechain/events{/privacy}",
      "received_events_url": "https://api.github.com/users/terencechain/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-08T17:00:35Z",
    "updated_at": "2022-05-08T17:00:35Z",
    "author_association": "COLLABORATOR",
    "body": "There's also an active prototype by the lighthouse team to combat this: https://github.com/sigp/lighthouse/pull/2860\r\nIf it goes well, it'll likely land itself into the honest validator spec and all clients will implement it.",
    "reactions": {
      "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1120452780/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1166758648",
    "html_url": "https://github.com/flashbots/mev-boost/issues/111#issuecomment-1166758648",
    "issue_url": "https://api.github.com/repos/flashbots/mev-boost/issues/111",
    "id": 1166758648,
    "node_id": "IC_kwDOGZSKs85Fi1L4",
    "user": {
      "login": "obadiaa",
      "id": 19510814,
      "node_id": "MDQ6VXNlcjE5NTEwODE0",
      "avatar_url": "https://avatars.githubusercontent.com/u/19510814?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/obadiaa",
      "html_url": "https://github.com/obadiaa",
      "followers_url": "https://api.github.com/users/obadiaa/followers",
      "following_url": "https://api.github.com/users/obadiaa/following{/other_user}",
      "gists_url": "https://api.github.com/users/obadiaa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/obadiaa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/obadiaa/subscriptions",
      "organizations_url": "https://api.github.com/users/obadiaa/orgs",
      "repos_url": "https://api.github.com/users/obadiaa/repos",
      "events_url": "https://api.github.com/users/obadiaa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/obadiaa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-27T02:22:10Z",
    "updated_at": "2022-06-27T02:23:25Z",
    "author_association": "COLLABORATOR",
    "body": "Hey everyone! Thanks a lot for you comments here, and thanks in particular to @casparschwa and @fradamt for the conversations offline and the detailed answers above. They've been critical in writing this reply!\r\n\r\n### TLDR:\r\n- there are some mitigations for late block proposals including [Proposer LMD score boosting](https://github.com/ethereum/consensus-specs/pull/2730), and in the future [(block,slot) voting](https://github.com/ethereum/consensus-specs/pull/2197). \r\n  - however none of them protect against a degenerate case where the network without needing coordination pushes block proposal and attestation times further and further.\r\n  - this is an issue to further study, as well as to potentially monitor for by setting up infrastructure to measure time at which blocks are proposed within a slot and to call out any misbehavior publicly.\r\n- other tangential research questions to study are: retroactive rewards for timely block proposals, quantifying how much money can be made from delaying block proposals, mev oracles as a scaling factor to help retroactive timely block proposal rewards and whether deterministic block times are a fundamental flaw of PoS Ethereum.\r\n\r\nOne misunderstanding corrected privately that I'll relay here is an attestation of slot n can only get included in the block from slot n+1 (the earliest).\r\n\r\nYou'll find below further details on all of the above:\r\n\r\n### Mitigations (summarizing the above - feel free to skip to the 'additional comments' and later sections)\r\nCurrently, there is no network-wide mitigation for late block proposals that's implemented and all a proposer has to do is to make sure that the next proposer hears their block (block n) by the time they start constructing their block (block n+1). This means proposers today can propose a block very late in their slot.\r\n\r\nOne immediate mitigation that's implemented in _some_ clients is [Proposer LMD score boosting](https://github.com/ethereum/consensus-specs/pull/2730). This was implemented for another issue than late block proposals but turns out to be helpful for our issue too. In a nutshell, this would allow the next proposer to re-org the previous one out if they proposed their block too late. \r\n\r\nHow does it work?\r\nIf you don't accumulate any fork choice weight because youâ€™re releasing your block so late that the entire attester committee doesnâ€™t see it in time, then youâ€™re prone to be reorged out by the next proposer. If you want to be reorg-resistant then you need to release it in such a way that your late block accumulates at least `PROPOSER_BOOST` votes, which brings you back to around a 4s deadline. One outstanding question here is how to set the boost value correctly. Read more about it [here](https://notes.ethereum.org/@casparschwa/H1T0k7b85)\r\n\r\nAn advanced version of that mitigation that avoids relying on the proposer but instead on the attester committee is [(block,slot) voting](https://github.com/ethereum/consensus-specs/pull/2197). This currently has a rough spec but if i understand correctly needs more work before being implemented. In (block,slot) voting, committee members can vote on an empty slot (which they weren't able to previously), meaning the empty slot now accumulates fork choice weight making it harder for a late block to become canonical. This enshrines the 4s rule in-protocol, without needing proposer LMD score boost.\r\n \r\nFinally, there are other mitigation discussions at an experimental stage like retroactive timely rewards for block proposers, effectively changing the components of the block proposer reward to include timeliness. One problem with this is that it is only effective if this reward is higher than the reward from a proposer stands to make from 'late MEV' which makes it problematic since MEV rewards can shift while this parameters may be static.\r\n\r\nYou can learn more about these mitigations in this document from @casparschwa here: [(Un)-Timeliness in PoS Ethereum](https://notes.ethereum.org/@css/H1G4M6CBc)\r\n\r\n\r\n**Some additional comments:**\r\n- On @casparschwa 's point about the potentiality of relays enforcing proposal deadlines on builders: I agree with your intuition. It would make such relays less competitive. We've already seen similar dynamics happen today among different relays on PoW Ethereum.\r\n\r\n- On @terencechain's point, and also @djrtwo's point: absolutely!\r\n\t-  if this is a network-wide behavior, large players (large wrt to stake ownership) would be stealing from one another.\r\n\t- this is easily detectible, the one who is constantly spoiling the pot should be able to get told off.\r\n\t- on the other hand, if it's a solo validator it's totally fine because they're a proposer so rarely that such a behaviour wouldn't have a material impact unless it becomes endemic.\r\n\r\nhow would you be able to detect this behavior?\r\n- you could detect it by the value of the proposer's MEV and the content of their block. if their block includes txs at the 4s mark and beyond then you know they were still constructing it then. this would require a node setup to benchmark when txs are received in the mempool and some statistical analysis.\r\n  - one heuristic that can work to mitigate edge cases of this first one would be that if it's a big validator who's constantly late, it's worth asking why.\r\n- meta-question: should monitoring infrastructure be set-up for this/should this be part of the monitoring infrastructure on the network? (tagging @elopio, @epheph and @taarushv here)\r\n\r\n### So, can we close this issue?\r\nI don't think so! There is one oustanding concern worth discussing:\r\n\r\nEven if proposer-boost is implemented network-wide, and even with (block,slot) voting, there is still an incentive for proposers to propose as late as they can within the boundaries given to them (ie. as close as possible to the 4s mark).\r\n\r\nBecause the block would be proposed around the 4s deadline, some attesters would likely miss it as they vote on the latest head they've seen. This would affect their total rewards since voting on timely head gives 14/64 of total validator rewards (so roughly 10% of their reward).\r\n\r\nThe ideal strategy for attesters is that if they're protected from 'proposer_boost', they might as well wait 0.5s later to make sure they're in the group that sees the proposer slot. The future proposers now might push their proposal to 4.5s rather than 4s. You can imagine this game being iterated, pushing block proposal deadlines further and further without any network-wide coordination needed. (Read more about this in here by @fradamt [https://notes.ethereum.org/HO8UXG4rSdmH4Sv16iWKuw?view#Shifting-timing-equilbria-of-block-releasing-amp-attestations](https://notes.ethereum.org/HO8UXG4rSdmH4Sv16iWKuw?view#Shifting-timing-equilbria-of-block-releasing-amp-attestations) )\r\n\r\nThere is more complexity to this problem to think about such as:\r\n- if the network doesn't move in unison when they push this limit, it becomes quite complex to think about attestations and things like timing attacks.\r\n- there are more network-dynamics to consider, like:\r\n  - solo validators having to monitor the network to figure out that this behavior is happening, \r\n  - solo validators potentially not being able to catch up because they would constantly have to download a client that's incentive compatible (ie. with updated deadlines)\r\n  - the advantage of large validators who would likely control an attestation aggregator and are able to play around the aggregator deadline that's at 8s in the slot which solo validators wouldn't be able to\r\n\r\nIf the network does move in unison doing this behavior, should we expect a drift over time of block proposals and attestations?\r\n\r\n### So where does that leave us?\r\n- There are multiple solutions to mitigate late block proposals. Yay!\r\n- This behavior is detectible and can be addressed publicly, where players doing this can be called out. \r\n- However, none of these solutions are silver bullets and there is still an underexplored worrisome degenerate case. \r\n\r\n\r\n### Further research\r\n**Quantifying MEV:** \r\nHaving a better idea of the amount of MEV players stand to make would allow us to think about these mitigation solutions better. In particular it would help us think about the usefulness of retroactive timely rewards for block proposals. Generally, estimating what isn't in the numbers which I mentioned above would be helpful although seemingly difficult to achieve. (ie. quantifying cross-domain MEV for later block proposals)\r\n\r\n**Understanding the degenerate case better:** \r\nA bunch of questions were listed above as part of understanding the dynamics of the iterated game better. \r\n\r\nIt's also worth asking the question, why is it bad if blocks are proposed later? I'm asking this question because I'd like to be able to point to something written to explain why a validator/validator pool who's acting under economically rational assumption shouldn't do this. From all our conversation above, the answer seems to be:\r\n- it would significantly complicate reasoning about balancing attacks.\r\n- it is likely useless if the network does it in unison (it just delays slots in perpetuity)\r\n- it may enforce higher hardware & software requirements on validators and less tolerance on network delays and propagation. This means the network becomes less accessible to players that don't have the best connections or professional set-ups. This goes against the ethos of the system we're building.\r\n- it is unwanted behavior that if noticed, will become a higher priority to solve and as @djrtwo mentioned, will be prioritized against efforts that stand to make Ethereum better by adding new features to it. \r\n\r\n\r\n**Against deterministic block times?** \r\nI wonder if this is simply a fundamental flaw of chains with deterministic block times, and that current PoW Ethereum's variable block times is actually better for decentralization. If you start from the assumption that users will always want to push the limit of how far they can wait to propose a block because of economic incentives, variable block times introduce uncertainty which was helpful to prevent this behavior. While I don't have more thoughts here at the moment, I wonder if ethereum will be the first big test of a sophisticated (wrt to MEV activity) PoS network with deterministic block times and whether there may be conclusions to draw on the experiment. I also know of efforts like Algorand's PoS chain that mimics PoW-like probabilistic leader election that may be worth studying further.",
    "reactions": {
      "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1166758648/reactions",
      "total_count": 3,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 3
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1187803661",
    "html_url": "https://github.com/flashbots/mev-boost/issues/111#issuecomment-1187803661",
    "issue_url": "https://api.github.com/repos/flashbots/mev-boost/issues/111",
    "id": 1187803661,
    "node_id": "IC_kwDOGZSKs85GzHIN",
    "user": {
      "login": "come-maiz",
      "id": 617831,
      "node_id": "MDQ6VXNlcjYxNzgzMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/617831?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/come-maiz",
      "html_url": "https://github.com/come-maiz",
      "followers_url": "https://api.github.com/users/come-maiz/followers",
      "following_url": "https://api.github.com/users/come-maiz/following{/other_user}",
      "gists_url": "https://api.github.com/users/come-maiz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/come-maiz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/come-maiz/subscriptions",
      "organizations_url": "https://api.github.com/users/come-maiz/orgs",
      "repos_url": "https://api.github.com/users/come-maiz/repos",
      "events_url": "https://api.github.com/users/come-maiz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/come-maiz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-18T17:14:07Z",
    "updated_at": "2022-07-18T17:14:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "We are starting data collection for mev rewards around our relay in https://github.com/flashbots/flashbots-data-transparency/issues/9 and https://github.com/flashbots/flashbots-data-transparency/issues/6",
    "reactions": {
      "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1187803661/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
