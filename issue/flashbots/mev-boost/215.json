{
  "url": "https://api.github.com/repos/flashbots/mev-boost/issues/215",
  "repository_url": "https://api.github.com/repos/flashbots/mev-boost",
  "labels_url": "https://api.github.com/repos/flashbots/mev-boost/issues/215/labels{/name}",
  "comments_url": "https://api.github.com/repos/flashbots/mev-boost/issues/215/comments",
  "events_url": "https://api.github.com/repos/flashbots/mev-boost/issues/215/events",
  "html_url": "https://github.com/flashbots/mev-boost/issues/215",
  "id": 1306039372,
  "node_id": "I_kwDOGZSKs85N2JRM",
  "number": 215,
  "title": "Censorship Resistance: crlists in mev-boost",
  "user": {
    "login": "quintuskilbourn",
    "id": 47097067,
    "node_id": "MDQ6VXNlcjQ3MDk3MDY3",
    "avatar_url": "https://avatars.githubusercontent.com/u/47097067?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/quintuskilbourn",
    "html_url": "https://github.com/quintuskilbourn",
    "followers_url": "https://api.github.com/users/quintuskilbourn/followers",
    "following_url": "https://api.github.com/users/quintuskilbourn/following{/other_user}",
    "gists_url": "https://api.github.com/users/quintuskilbourn/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/quintuskilbourn/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/quintuskilbourn/subscriptions",
    "organizations_url": "https://api.github.com/users/quintuskilbourn/orgs",
    "repos_url": "https://api.github.com/users/quintuskilbourn/repos",
    "events_url": "https://api.github.com/users/quintuskilbourn/events{/privacy}",
    "received_events_url": "https://api.github.com/users/quintuskilbourn/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3559229523,
      "node_id": "LA_kwDOGZSKs87UJYhT",
      "url": "https://api.github.com/repos/flashbots/mev-boost/labels/enhancement",
      "name": "enhancement",
      "color": "a2eeef",
      "default": true,
      "description": "New feature or request"
    },
    {
      "id": 4053138209,
      "node_id": "LA_kwDOGZSKs87xlfsh",
      "url": "https://api.github.com/repos/flashbots/mev-boost/labels/brainstorming",
      "name": "brainstorming",
      "color": "5ABEB3",
      "default": false,
      "description": "Currently in discussion"
    },
    {
      "id": 4082529928,
      "node_id": "LA_kwDOGZSKs87zVnaI",
      "url": "https://api.github.com/repos/flashbots/mev-boost/labels/research%20%F0%9F%92%A1",
      "name": "research üí°",
      "color": "0052cc",
      "default": false,
      "description": "Research topic"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 13,
  "created_at": "2022-07-15T13:28:29Z",
  "updated_at": "2022-08-11T21:51:30Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "Censorship resistance lists (crlists) are designed to prevent builders from censoring users in PBS. The design was originally put together with in-protocol PBS in mind. Can we adapt this solution to improve mev-boost?\r\n* The original design: https://notes.ethereum.org/s3JToeApTx6CKLJt8AbhFQ#Hybrid-PBS-can-we-use-proposers-only-for-inclusion-of-last-resort\r\n* A critique/analysis: https://notes.ethereum.org/@fradamt/H1TsYRfJc\r\n\r\n## Why censorship resistance is important with MEV-Boost\r\n\r\nWe anticipate the builder market to be smaller than the total validator set, becoming more centralised over time. This higher degree of centralisation makes censorship much easier and much likelier, severely affecting the neutrality of the network. Additionally, it is unclear how the builder market will evolve (e.g. presence of EOF, fair-ordering builders etc.). This opacity makes it hard to reason about censorship resistance with MEV-boost as it is.\r\nConsequently, validators may find themselves in a position where they suspect the builder market of censoring users (e.g. because of a government sanction where most builders are located) and have to choose between the additional profit of PBS and the ideologically sound move which is building blocks locally. Building in a censorship resistance mechanism means that proposers can continue to run MEV-boost with assurance that the neutrality of mainnet isn‚Äôt being compromised.  From the perspective of the system as a whole: crlists allow us to derive censorship resistance from the decentralisation of proposers rather than builders without requiring proposers to be sophisticated.\r\nAdditionally, including crlists in mev-boost could provide useful insight into challenges and market dynamics in a low risk environment (discussed below) which would prove useful for designing in-protocol PBS.\r\n\r\n## What are crlists?\r\n\r\nThe basic idea is to allow a proposer to publish a list of transactions which it suspects are being censored. (e.g. a valid txn with sufficient basefee that hasn‚Äôt been included for several slots). Builders supplying blocks to this proposer must either supply completely full blocks or include as many of these transactions as possible until the block is full or they are all included.\r\n\r\nThe flow in mev-boost would look something like the following:\r\n\r\n1. The proposer announces its crlist at _some point_ before receiving block headers\r\n    1. one option is to send this list with the ‚ÄúgetHeader‚Äù request, but this may be a bit late since builders may already have started building blocks, meaning that builders might have to restart building, leading to a loss of profit for proposers. \r\n    2. another option is to leave the timing of the announcement up to the proposer (any time after they are assigned a slot and before the getHeader request). The longer they wait the more likely they are to reduce their bids but also the more fine-grained their crlist selection will be.\r\n    3. We allow proposers not to participate by submitting an empty crlist or not submitting a crlist at all (depending on implementation).\r\n2. Relayer conveys crlist to partnered builders\r\n3. Upon receipt of blocks, relay checks that crlist conditions are satisfied before forwarding headers to the proposer. We have the option of adding some metadata (some json or binary map? not sure how these kinds of things work in practice) indicating which transactions are from the crlist for speed of checking conditions. The conditions would be:\r\n    1. block is full (~30m gas)\r\n    2. OR all valid (basefee and nonce) crlist transactions are in the block\r\n4. Header is signed and relayer/builder sends full block to the proposer\r\n5. Proposer conducts same check as in (3). If conditions are violated, relayer reputation is adjusted/proposer no longer accepts headers from relay\r\n\r\nThe original in-protocol design ideas attempt to make this a trustless process where builders would send proofs that the crlist conditions are satisfied along with their headers. Since mev-boost is still a trust-based system, proposers could simply outsource the checking of crlist conditions to relayers. If a relayer sends a block that does not satisfy the conditions, this should affect the relayer‚Äôs reputation score. This is the same mechanism which we use to address the problem of signed headers with a missing block body. \r\n\r\nAs for builders censoring users while fulfilling the crlist requirements (i.e. filling blocks), this becomes exponentially more expensive as time passes, since full blocks move up the basefee via EIP1559 and the censoring builder must continue to fill entire blocks. \r\n\r\nImportantly, since crlists are optional in this design and there are no encoded slashing conditions or punishments for deviation, if unwanted effects arise from the implementation, proposers simply stopping submission of crlists could be a quick fix in many cases.\r\n\r\n## Risks, Obstacles and Problems\r\n\r\nAs far as I can tell, the biggest issues identified with crlists are related to their in-protocol enforcement and DAS. Neither of these topics relate to the trust-based PBS which mev-boost is implementing so crlists seem like a good fit.\r\n\r\n**Proposer protection**\r\n\r\n- One concern is that proposers publishing crlists will be intentionally or inadvertently (e.g. because of regulation preventing builders from satisfying crlist requirements) punished by receiving lower, fewer or no bids.\r\n    - This also constitutes opportunity cost for builders and, assuming a competitive market, is unlikely to have a large impact\r\n    - Even if this does happen, proposers are still able to build local blocks, which is the censorship-resistant choice under the current model\r\n- Is the sending of the crlist burdensome in terms of network requirements? I would imagine not but would like confirmation.\r\n\r\n**Relay burden**\r\n\r\n- One could argue that this design places additional load on the relay which now has more checks and must manage builders more closely. I don‚Äôt see this being much more intensive or qualitatively different than what relays are already expected to do in terms of insuring validity and availability of blocks. However as Jolene pointed out, this could restrict relay design space as it would require either:\r\n1. relayers having a way of pushing lists to builders (i.e. a list of IP addresses)\r\n2. builders regularly pinging the relay to check if a new crlist has been released (here there may also be latency advantages if crlists are released late).\r\n\r\n**Objects of user intent**\r\n\r\nAccount abstraction, EIP712 and similar designs may mean that users could express their intent in formats that are not currently recognised by the mempool. Hence, crlists in the design above do not capture censorship of these expressions of intent. \r\n\r\n- In the worst case, users can submit transactions satisfying their ‚Äúintent‚Äù directly to the mempool\r\n\r\n**Formation of lists**\r\n\r\nAs Jolene pointed out, implementing crlists may require changes to EL/CL clients. The problem, as I understand it, is that mev-boost doesn't have access to the mempool so either must be given access to the mempool via a communication channel with the EL or must have the crlist passed into mev-boost via some other means like changes to the Builder API. \r\n\r\n\r\n\r\n\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/flashbots/mev-boost/issues/215/reactions",
    "total_count": 2,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 2,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/flashbots/mev-boost/issues/215/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1185806674",
    "html_url": "https://github.com/flashbots/mev-boost/issues/215#issuecomment-1185806674",
    "issue_url": "https://api.github.com/repos/flashbots/mev-boost/issues/215",
    "id": 1185806674,
    "node_id": "IC_kwDOGZSKs85GrflS",
    "user": {
      "login": "charlescharles",
      "id": 4009487,
      "node_id": "MDQ6VXNlcjQwMDk0ODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4009487?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/charlescharles",
      "html_url": "https://github.com/charlescharles",
      "followers_url": "https://api.github.com/users/charlescharles/followers",
      "following_url": "https://api.github.com/users/charlescharles/following{/other_user}",
      "gists_url": "https://api.github.com/users/charlescharles/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/charlescharles/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/charlescharles/subscriptions",
      "organizations_url": "https://api.github.com/users/charlescharles/orgs",
      "repos_url": "https://api.github.com/users/charlescharles/repos",
      "events_url": "https://api.github.com/users/charlescharles/events{/privacy}",
      "received_events_url": "https://api.github.com/users/charlescharles/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-15T18:36:08Z",
    "updated_at": "2022-07-15T18:36:08Z",
    "author_association": "NONE",
    "body": "Not directly related to crlists, but I was thinking that PBS generally makes large-scale censorship by eg state actors a lot easier. If you have a bunch of money and want to make Ethereum effectively stop processing txns for a bit, currently you have to send lots of txns from many accounts with sufficiently high priority fee to box everyone else out (and you can't even know this exactly due to private relays), but not too many txns that you increase gas target and make it quadratically expensive to continue censoring.\r\n\r\nWith unsealed-bid PBS (I think sealed-bid is not incentive-compatible), on the other hand, you can just construct a block with gastarget worth of noop txns along with a proposer payment of current_best_bid + epsilon.",
    "reactions": {
      "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1185806674/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1188570548",
    "html_url": "https://github.com/flashbots/mev-boost/issues/215#issuecomment-1188570548",
    "issue_url": "https://api.github.com/repos/flashbots/mev-boost/issues/215",
    "id": 1188570548,
    "node_id": "IC_kwDOGZSKs85G2CW0",
    "user": {
      "login": "come-maiz",
      "id": 617831,
      "node_id": "MDQ6VXNlcjYxNzgzMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/617831?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/come-maiz",
      "html_url": "https://github.com/come-maiz",
      "followers_url": "https://api.github.com/users/come-maiz/followers",
      "following_url": "https://api.github.com/users/come-maiz/following{/other_user}",
      "gists_url": "https://api.github.com/users/come-maiz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/come-maiz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/come-maiz/subscriptions",
      "organizations_url": "https://api.github.com/users/come-maiz/orgs",
      "repos_url": "https://api.github.com/users/come-maiz/repos",
      "events_url": "https://api.github.com/users/come-maiz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/come-maiz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-19T04:04:56Z",
    "updated_at": "2022-07-19T04:04:56Z",
    "author_association": "CONTRIBUTOR",
    "body": "Why would builders build blocks that are not full?",
    "reactions": {
      "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1188570548/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1188574865",
    "html_url": "https://github.com/flashbots/mev-boost/issues/215#issuecomment-1188574865",
    "issue_url": "https://api.github.com/repos/flashbots/mev-boost/issues/215",
    "id": 1188574865,
    "node_id": "IC_kwDOGZSKs85G2DaR",
    "user": {
      "login": "quintuskilbourn",
      "id": 47097067,
      "node_id": "MDQ6VXNlcjQ3MDk3MDY3",
      "avatar_url": "https://avatars.githubusercontent.com/u/47097067?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/quintuskilbourn",
      "html_url": "https://github.com/quintuskilbourn",
      "followers_url": "https://api.github.com/users/quintuskilbourn/followers",
      "following_url": "https://api.github.com/users/quintuskilbourn/following{/other_user}",
      "gists_url": "https://api.github.com/users/quintuskilbourn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/quintuskilbourn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/quintuskilbourn/subscriptions",
      "organizations_url": "https://api.github.com/users/quintuskilbourn/orgs",
      "repos_url": "https://api.github.com/users/quintuskilbourn/repos",
      "events_url": "https://api.github.com/users/quintuskilbourn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/quintuskilbourn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-19T04:12:45Z",
    "updated_at": "2022-07-19T04:22:38Z",
    "author_association": "NONE",
    "body": "Most blocks aren‚Äôt full. EIP1559 is designed so that blocks are always ~50% full (15m gas I think). It‚Äôs only at times when demand spikes that blocks are full. \r\nA ‚Äúdemand spike‚Äù means that you have enough transactions that are willing to pay the basefee to fill the block. But, this is rare because the basefee adjusts dynamically so that when the block is more than 50% full, the basefee increases to price out the excess demand.",
    "reactions": {
      "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1188574865/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1188689552",
    "html_url": "https://github.com/flashbots/mev-boost/issues/215#issuecomment-1188689552",
    "issue_url": "https://api.github.com/repos/flashbots/mev-boost/issues/215",
    "id": 1188689552,
    "node_id": "IC_kwDOGZSKs85G2faQ",
    "user": {
      "login": "beetrootkid",
      "id": 34025634,
      "node_id": "MDQ6VXNlcjM0MDI1NjM0",
      "avatar_url": "https://avatars.githubusercontent.com/u/34025634?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/beetrootkid",
      "html_url": "https://github.com/beetrootkid",
      "followers_url": "https://api.github.com/users/beetrootkid/followers",
      "following_url": "https://api.github.com/users/beetrootkid/following{/other_user}",
      "gists_url": "https://api.github.com/users/beetrootkid/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/beetrootkid/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/beetrootkid/subscriptions",
      "organizations_url": "https://api.github.com/users/beetrootkid/orgs",
      "repos_url": "https://api.github.com/users/beetrootkid/repos",
      "events_url": "https://api.github.com/users/beetrootkid/events{/privacy}",
      "received_events_url": "https://api.github.com/users/beetrootkid/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-19T07:18:05Z",
    "updated_at": "2022-07-19T07:18:05Z",
    "author_association": "NONE",
    "body": "How does the proposer learn about \"possibly censored\" transactions? Does the idea assume use of the public mempool? Is that realistic?",
    "reactions": {
      "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1188689552/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1189108559",
    "html_url": "https://github.com/flashbots/mev-boost/issues/215#issuecomment-1189108559",
    "issue_url": "https://api.github.com/repos/flashbots/mev-boost/issues/215",
    "id": 1189108559,
    "node_id": "IC_kwDOGZSKs85G4FtP",
    "user": {
      "login": "quintuskilbourn",
      "id": 47097067,
      "node_id": "MDQ6VXNlcjQ3MDk3MDY3",
      "avatar_url": "https://avatars.githubusercontent.com/u/47097067?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/quintuskilbourn",
      "html_url": "https://github.com/quintuskilbourn",
      "followers_url": "https://api.github.com/users/quintuskilbourn/followers",
      "following_url": "https://api.github.com/users/quintuskilbourn/following{/other_user}",
      "gists_url": "https://api.github.com/users/quintuskilbourn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/quintuskilbourn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/quintuskilbourn/subscriptions",
      "organizations_url": "https://api.github.com/users/quintuskilbourn/orgs",
      "repos_url": "https://api.github.com/users/quintuskilbourn/repos",
      "events_url": "https://api.github.com/users/quintuskilbourn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/quintuskilbourn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-19T14:14:26Z",
    "updated_at": "2022-07-19T14:14:26Z",
    "author_association": "NONE",
    "body": "The idea does assume a public mempool. It could end up being the case that the majority of transactions end up moving to builders via other channels for a variety of reasons, but the public mempool would operate as a fallback. If a user suspects they are being censored, they can give up whatever benefits they received from their alternate channel of communication and submit via the public mempool.",
    "reactions": {
      "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1189108559/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1189261952",
    "html_url": "https://github.com/flashbots/mev-boost/issues/215#issuecomment-1189261952",
    "issue_url": "https://api.github.com/repos/flashbots/mev-boost/issues/215",
    "id": 1189261952,
    "node_id": "IC_kwDOGZSKs85G4rKA",
    "user": {
      "login": "come-maiz",
      "id": 617831,
      "node_id": "MDQ6VXNlcjYxNzgzMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/617831?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/come-maiz",
      "html_url": "https://github.com/come-maiz",
      "followers_url": "https://api.github.com/users/come-maiz/followers",
      "following_url": "https://api.github.com/users/come-maiz/following{/other_user}",
      "gists_url": "https://api.github.com/users/come-maiz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/come-maiz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/come-maiz/subscriptions",
      "organizations_url": "https://api.github.com/users/come-maiz/orgs",
      "repos_url": "https://api.github.com/users/come-maiz/repos",
      "events_url": "https://api.github.com/users/come-maiz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/come-maiz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-19T16:08:38Z",
    "updated_at": "2022-07-19T16:08:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "What I'm thinking is that this could be just an expectation of how builders work, and it can be reflected on their monitoring and rating, or demanded on the specification.\r\n\r\nSo, if blocks are on average 50% full, and there's a builder that sends a block that's 30% full, we can say they are censoring or being lazy. If we require all builders to include a percentage of transactions from the mempool, sorted by gas, would that prevent censoring?",
    "reactions": {
      "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1189261952/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1189291338",
    "html_url": "https://github.com/flashbots/mev-boost/issues/215#issuecomment-1189291338",
    "issue_url": "https://api.github.com/repos/flashbots/mev-boost/issues/215",
    "id": 1189291338,
    "node_id": "IC_kwDOGZSKs85G4yVK",
    "user": {
      "login": "charlescharles",
      "id": 4009487,
      "node_id": "MDQ6VXNlcjQwMDk0ODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4009487?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/charlescharles",
      "html_url": "https://github.com/charlescharles",
      "followers_url": "https://api.github.com/users/charlescharles/followers",
      "following_url": "https://api.github.com/users/charlescharles/following{/other_user}",
      "gists_url": "https://api.github.com/users/charlescharles/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/charlescharles/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/charlescharles/subscriptions",
      "organizations_url": "https://api.github.com/users/charlescharles/orgs",
      "repos_url": "https://api.github.com/users/charlescharles/repos",
      "events_url": "https://api.github.com/users/charlescharles/events{/privacy}",
      "received_events_url": "https://api.github.com/users/charlescharles/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-19T16:20:00Z",
    "updated_at": "2022-07-19T16:20:00Z",
    "author_association": "NONE",
    "body": "> What I'm thinking is that this could be just an expectation of how builders work, and it can be reflected on their monitoring and rating, or demanded on the specification.\r\nSo, if blocks are on average 50% full, and there's a builder that sends a block that's 30% full, we can say they are censoring or being lazy. If we require all builders to include a percentage of transactions from the mempool, sorted by gas, would that prevent censoring?\r\n\r\nI'll play devil's advocate, as usual :) \r\n- I think requiring blocks to meet the gas target does ~nothing for censorship-resistance. All it does is make it marginally more annoying to censor: now you have to spend a bit more effort to fill up the block with some sybil transactions\r\n- I also think requiring builders to include a percentage of mempool txns does ~nothing. You can have lots of sybil EOAs and maintain lots of no-op sybil txns in the mempool at all times and fill up your censoring blocks with those\r\n- I also think that, game-theoretically, you can't really \"require\" anything. Let's say we make mev-boost ignore blocks that are <30% full. Then say some rich but lazy censoring builder says \"hai guys for the next 100 blocks I'm going to propose blocks with a single transaction paying you (the proposer) 50ETH; if you want in then add me as a relay and run this mev-boost patch\". Do we really think no proposers will defect, especially if this game is repeated?",
    "reactions": {
      "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1189291338/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1189368381",
    "html_url": "https://github.com/flashbots/mev-boost/issues/215#issuecomment-1189368381",
    "issue_url": "https://api.github.com/repos/flashbots/mev-boost/issues/215",
    "id": 1189368381,
    "node_id": "IC_kwDOGZSKs85G5FI9",
    "user": {
      "login": "ryanschneider",
      "id": 53520,
      "node_id": "MDQ6VXNlcjUzNTIw",
      "avatar_url": "https://avatars.githubusercontent.com/u/53520?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanschneider",
      "html_url": "https://github.com/ryanschneider",
      "followers_url": "https://api.github.com/users/ryanschneider/followers",
      "following_url": "https://api.github.com/users/ryanschneider/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanschneider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanschneider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanschneider/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanschneider/orgs",
      "repos_url": "https://api.github.com/users/ryanschneider/repos",
      "events_url": "https://api.github.com/users/ryanschneider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanschneider/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-19T17:33:33Z",
    "updated_at": "2022-07-19T17:33:33Z",
    "author_association": "NONE",
    "body": ">  If conditions are violated, relayer reputation is adjusted/proposer no longer accepts headers from relay\r\n\r\nThis feels like a heavy punishment.  What if the builder is legally required not to include a tx in the CRlist?  \r\n\r\nWhat if instead of punishing the builder, the relay only relays crlist-compatible blocks if they exist?  Some something like:\r\n\r\n- a crlist is produced by whatever decided on means\r\n- if any builders produce crlist-compliant blocks (either full or containing the txs), those are relayed\r\n- if any builder produces crlist-violating blocks, and any crlist-compliant block is produced, the violating blocks are not relayed\r\n\r\nThus, to censor, you need to convince _all_ builders to exclude a crlist tx.  This also makes builders that specialize in \"censorship likely\" tx a possiblity, without unduly penalizing builders that for some reason cannot include a specific tx.",
    "reactions": {
      "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1189368381/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1189502169",
    "html_url": "https://github.com/flashbots/mev-boost/issues/215#issuecomment-1189502169",
    "issue_url": "https://api.github.com/repos/flashbots/mev-boost/issues/215",
    "id": 1189502169,
    "node_id": "IC_kwDOGZSKs85G5lzZ",
    "user": {
      "login": "quintuskilbourn",
      "id": 47097067,
      "node_id": "MDQ6VXNlcjQ3MDk3MDY3",
      "avatar_url": "https://avatars.githubusercontent.com/u/47097067?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/quintuskilbourn",
      "html_url": "https://github.com/quintuskilbourn",
      "followers_url": "https://api.github.com/users/quintuskilbourn/followers",
      "following_url": "https://api.github.com/users/quintuskilbourn/following{/other_user}",
      "gists_url": "https://api.github.com/users/quintuskilbourn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/quintuskilbourn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/quintuskilbourn/subscriptions",
      "organizations_url": "https://api.github.com/users/quintuskilbourn/orgs",
      "repos_url": "https://api.github.com/users/quintuskilbourn/repos",
      "events_url": "https://api.github.com/users/quintuskilbourn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/quintuskilbourn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-19T20:06:25Z",
    "updated_at": "2022-07-19T20:06:25Z",
    "author_association": "NONE",
    "body": "> > If conditions are violated, relayer reputation is adjusted/proposer no longer accepts headers from relay\r\n> \r\n\r\n> What if instead of punishing the builder, the relay only relays crlist-compatible blocks if they exist? Some something like:\r\n> \r\n> * a crlist is produced by whatever decided on means\r\n> * if any builders produce crlist-compliant blocks (either full or containing the txs), those are relayed\r\n> * if any builder produces crlist-violating blocks, and any crlist-compliant block is produced, the violating blocks are not relayed\r\n> \r\n> Thus, to censor, you need to convince _all_ builders to exclude a crlist tx. This also makes builders that specialize in \"censorship likely\" tx a possiblity, without unduly penalizing builders that for some reason cannot include a specific tx.\r\n\r\nthis is pretty much the idea! Apologies if it wasn‚Äôt clear. Relays can handle their relationships with builders in whatever way they see fit (either ignoring non-crlist-compliant blocks or requiring them not to be submitted to prevent undue load). The punishment above was referring to the proposer-relay relationship which is different because the proposer is blind when signing blocks and signing a block is much more impactful than simply sending one to a relay.\r\n\r\nThe punishment for relay misbehaviour also need not be ignoring relays forever - it could be blacklisting for a set time period or simply reducing a reputation score. ",
    "reactions": {
      "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1189502169/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1189543250",
    "html_url": "https://github.com/flashbots/mev-boost/issues/215#issuecomment-1189543250",
    "issue_url": "https://api.github.com/repos/flashbots/mev-boost/issues/215",
    "id": 1189543250,
    "node_id": "IC_kwDOGZSKs85G5v1S",
    "user": {
      "login": "ryanschneider",
      "id": 53520,
      "node_id": "MDQ6VXNlcjUzNTIw",
      "avatar_url": "https://avatars.githubusercontent.com/u/53520?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanschneider",
      "html_url": "https://github.com/ryanschneider",
      "followers_url": "https://api.github.com/users/ryanschneider/followers",
      "following_url": "https://api.github.com/users/ryanschneider/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanschneider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanschneider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanschneider/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanschneider/orgs",
      "repos_url": "https://api.github.com/users/ryanschneider/repos",
      "events_url": "https://api.github.com/users/ryanschneider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanschneider/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-19T20:57:52Z",
    "updated_at": "2022-07-19T20:57:52Z",
    "author_association": "NONE",
    "body": "Ah apologies, I definitely misread that as the relay no longer accepting blocks from the builder, but that's clearly on me for misreading it! üòä ",
    "reactions": {
      "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1189543250/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1191965869",
    "html_url": "https://github.com/flashbots/mev-boost/issues/215#issuecomment-1191965869",
    "issue_url": "https://api.github.com/repos/flashbots/mev-boost/issues/215",
    "id": 1191965869,
    "node_id": "IC_kwDOGZSKs85HC_St",
    "user": {
      "login": "quintuskilbourn",
      "id": 47097067,
      "node_id": "MDQ6VXNlcjQ3MDk3MDY3",
      "avatar_url": "https://avatars.githubusercontent.com/u/47097067?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/quintuskilbourn",
      "html_url": "https://github.com/quintuskilbourn",
      "followers_url": "https://api.github.com/users/quintuskilbourn/followers",
      "following_url": "https://api.github.com/users/quintuskilbourn/following{/other_user}",
      "gists_url": "https://api.github.com/users/quintuskilbourn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/quintuskilbourn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/quintuskilbourn/subscriptions",
      "organizations_url": "https://api.github.com/users/quintuskilbourn/orgs",
      "repos_url": "https://api.github.com/users/quintuskilbourn/repos",
      "events_url": "https://api.github.com/users/quintuskilbourn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/quintuskilbourn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-21T21:45:16Z",
    "updated_at": "2022-07-21T21:45:16Z",
    "author_association": "NONE",
    "body": "I've been thinking about the issue of forming crlists without changing the EL/CL clients and came up with two potential routes. I don't have sufficient technical familiarity with everything I touch so I'm mostly putting this out there for more knowledgeable people to build on. Among other things, I'm not clear on how the potential solutions affect disk or RAM requirements, although I suspect there may be some shortcuts like only storing hashes unless some censorship is suspected.\r\n\r\n1. **RPC** \r\nIt looks like most (if not all) clients have an RPC call which returns mempool transactions.\r\n* Geth: txpool_content \r\n* Besu: txpool_besuTransactions\r\n* Nethermind: parity_pendingTransactions\r\n* Erigon: ??\r\nMEV_boost could potentially make use of these RPC calls to keep track of missing transactions and form crlists like that. As far as I can tell, these RPCs aren't in the eth1 RPC API specification so we would be relying on something that isn't in the Ethereum spec - I'm not sure if that's something we would be willing to consider doing. \r\n\r\n2. **P2P**: _Have mev-boost behave as a node in the p2p network._ \r\nI'm very unclear on the feasibility given that mev-boost and the EL would potentially have to use the same IP (or would they?). I was hoping something like listening at different ports could do the trick. \r\nOne could potentially also change the discovery protocol implementation so mev-boost is only ever discovered by its specified EL client and doesn't interact with anyone else.\r\n\r\nAgain, I'm mostly spitballing and would love if someone who's spent more time in the weeds could weigh in.",
    "reactions": {
      "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1191965869/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1212498416",
    "html_url": "https://github.com/flashbots/mev-boost/issues/215#issuecomment-1212498416",
    "issue_url": "https://api.github.com/repos/flashbots/mev-boost/issues/215",
    "id": 1212498416,
    "node_id": "IC_kwDOGZSKs85IRUHw",
    "user": {
      "login": "ralexstokes",
      "id": 3113781,
      "node_id": "MDQ6VXNlcjMxMTM3ODE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3113781?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ralexstokes",
      "html_url": "https://github.com/ralexstokes",
      "followers_url": "https://api.github.com/users/ralexstokes/followers",
      "following_url": "https://api.github.com/users/ralexstokes/following{/other_user}",
      "gists_url": "https://api.github.com/users/ralexstokes/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ralexstokes/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ralexstokes/subscriptions",
      "organizations_url": "https://api.github.com/users/ralexstokes/orgs",
      "repos_url": "https://api.github.com/users/ralexstokes/repos",
      "events_url": "https://api.github.com/users/ralexstokes/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ralexstokes/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-11T21:13:55Z",
    "updated_at": "2022-08-11T21:13:55Z",
    "author_association": "COLLABORATOR",
    "body": "I will chime in with a very low-res version of this idea: mandate that \"honest\" proposers forgo the builder network in lieu of their local builder w/ public mempool every N of M slots.\r\n\r\nIf this policy is hard-coded into consensus clients as a default, and there is an honest majority of the stake, you'd end up in practice getting some blocks every so often exclusively using the public mempool and I claim this is a very rough approximation of what crLists etc want to accomplish",
    "reactions": {
      "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1212498416/reactions",
      "total_count": 3,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 3,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1212532008",
    "html_url": "https://github.com/flashbots/mev-boost/issues/215#issuecomment-1212532008",
    "issue_url": "https://api.github.com/repos/flashbots/mev-boost/issues/215",
    "id": 1212532008,
    "node_id": "IC_kwDOGZSKs85IRcUo",
    "user": {
      "login": "quintuskilbourn",
      "id": 47097067,
      "node_id": "MDQ6VXNlcjQ3MDk3MDY3",
      "avatar_url": "https://avatars.githubusercontent.com/u/47097067?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/quintuskilbourn",
      "html_url": "https://github.com/quintuskilbourn",
      "followers_url": "https://api.github.com/users/quintuskilbourn/followers",
      "following_url": "https://api.github.com/users/quintuskilbourn/following{/other_user}",
      "gists_url": "https://api.github.com/users/quintuskilbourn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/quintuskilbourn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/quintuskilbourn/subscriptions",
      "organizations_url": "https://api.github.com/users/quintuskilbourn/orgs",
      "repos_url": "https://api.github.com/users/quintuskilbourn/repos",
      "events_url": "https://api.github.com/users/quintuskilbourn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/quintuskilbourn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-11T21:51:30Z",
    "updated_at": "2022-08-11T21:51:30Z",
    "author_association": "NONE",
    "body": "> mandate that \"honest\" proposers forgo the builder network in lieu of their local builder w/ public mempool every N of M slots.\r\n\r\nI agree that this is a reasonable intermediate solution, but its worth noting the crlists have some advantages:\r\n* with crlists, profit is presumably not sacrificed so dishonest proposers (no crlist) won't outperform honest proposers that use crlists\r\n* crlists in mev-boost provide useful data for what crlists in in-protocol PBS should/could look like and what dynamics might follow from their implementation\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1212532008/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
