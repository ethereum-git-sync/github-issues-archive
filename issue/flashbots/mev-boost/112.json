{
  "url": "https://api.github.com/repos/flashbots/mev-boost/issues/112",
  "repository_url": "https://api.github.com/repos/flashbots/mev-boost",
  "labels_url": "https://api.github.com/repos/flashbots/mev-boost/issues/112/labels{/name}",
  "comments_url": "https://api.github.com/repos/flashbots/mev-boost/issues/112/comments",
  "events_url": "https://api.github.com/repos/flashbots/mev-boost/issues/112/events",
  "html_url": "https://github.com/flashbots/mev-boost/issues/112",
  "id": 1218842137,
  "node_id": "I_kwDOGZSKs85Ipg4Z",
  "number": 112,
  "title": "auction - should (header,bid) messages be publicly accessible during the message passing period?",
  "user": {
    "login": "obadiaa",
    "id": 19510814,
    "node_id": "MDQ6VXNlcjE5NTEwODE0",
    "avatar_url": "https://avatars.githubusercontent.com/u/19510814?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/obadiaa",
    "html_url": "https://github.com/obadiaa",
    "followers_url": "https://api.github.com/users/obadiaa/followers",
    "following_url": "https://api.github.com/users/obadiaa/following{/other_user}",
    "gists_url": "https://api.github.com/users/obadiaa/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/obadiaa/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/obadiaa/subscriptions",
    "organizations_url": "https://api.github.com/users/obadiaa/orgs",
    "repos_url": "https://api.github.com/users/obadiaa/repos",
    "events_url": "https://api.github.com/users/obadiaa/events{/privacy}",
    "received_events_url": "https://api.github.com/users/obadiaa/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 4082529928,
      "node_id": "LA_kwDOGZSKs87zVnaI",
      "url": "https://api.github.com/repos/flashbots/mev-boost/labels/research%20%F0%9F%92%A1",
      "name": "research 💡",
      "color": "0052cc",
      "default": false,
      "description": "Research topic"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 19,
  "created_at": "2022-04-28T14:43:04Z",
  "updated_at": "2022-07-18T21:42:55Z",
  "closed_at": null,
  "author_association": "COLLABORATOR",
  "active_lock_reason": null,
  "body": "**Description:**\r\nIn the current design of MEV-Boost, relays release (header,bid) pairs to all instances of mev-boost that pings it (please correct me if this is wrong). This means the pairs are public information that can be used as input for auction participants.\r\n\r\nFor example, a builder could watch the 'mempool' of (header,bid) pairs, see what the maximum bid and compare it to the maximum they're willing to bid. If they can bid higher than `max_current_bid` then they just add 1 wei to it.\r\n\r\nIf you assume this behaviour from multiple builders, we have a game where: \r\n- the optimal bidding strategy is to bid by increments and always bid the smallest increment allowed more than the current 'winning' builder. \r\n- the optimal bidding strategy is to wait until the last possible moment to bid as to not reveal the information to other bidders.\r\n\r\n**Questions:**\r\n1. Should we make the 'mempool' private only to the proposer of a slot? Technically this would require proposers to send an authenticated message to the relays, proving that they are the proposers of the current slot. How technically difficult is this?\r\n2. Is this PGA behaviour problematic? Does it overwhelm the communication network or pollute its bandwidth with incremental bids from builders or burst of bids close to the deadline?\r\n3. What does this non-sealed bid auction look like?\r\n4. Is this a worry at all since in a repeated game, this should trend towards bidding max of the opportunity?",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/flashbots/mev-boost/issues/112/reactions",
    "total_count": 1,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 1
  },
  "timeline_url": "https://api.github.com/repos/flashbots/mev-boost/issues/112/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1113083617",
    "html_url": "https://github.com/flashbots/mev-boost/issues/112#issuecomment-1113083617",
    "issue_url": "https://api.github.com/repos/flashbots/mev-boost/issues/112",
    "id": 1113083617,
    "node_id": "IC_kwDOGZSKs85CWE7h",
    "user": {
      "login": "metachris",
      "id": 116939,
      "node_id": "MDQ6VXNlcjExNjkzOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/116939?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/metachris",
      "html_url": "https://github.com/metachris",
      "followers_url": "https://api.github.com/users/metachris/followers",
      "following_url": "https://api.github.com/users/metachris/following{/other_user}",
      "gists_url": "https://api.github.com/users/metachris/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/metachris/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/metachris/subscriptions",
      "organizations_url": "https://api.github.com/users/metachris/orgs",
      "repos_url": "https://api.github.com/users/metachris/repos",
      "events_url": "https://api.github.com/users/metachris/events{/privacy}",
      "received_events_url": "https://api.github.com/users/metachris/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-29T09:06:44Z",
    "updated_at": "2022-04-29T09:06:44Z",
    "author_association": "COLLABORATOR",
    "body": "> relays release (header,bid) pairs to all instances of mev-boost that pings it\r\n\r\nIn the current [spec](https://github.com/ethereum/execution-apis/pull/209/files#diff-20ad1b5e044517450181107c321127eff3a6beeb9deaee4906c9c90cc778daf9R260) that is true. The `getHeader` request is unsigned and can be sent by anyone. ",
    "reactions": {
      "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1113083617/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1130236791",
    "html_url": "https://github.com/flashbots/mev-boost/issues/112#issuecomment-1130236791",
    "issue_url": "https://api.github.com/repos/flashbots/mev-boost/issues/112",
    "id": 1130236791,
    "node_id": "IC_kwDOGZSKs85DXgt3",
    "user": {
      "login": "thegostep",
      "id": 15959632,
      "node_id": "MDQ6VXNlcjE1OTU5NjMy",
      "avatar_url": "https://avatars.githubusercontent.com/u/15959632?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/thegostep",
      "html_url": "https://github.com/thegostep",
      "followers_url": "https://api.github.com/users/thegostep/followers",
      "following_url": "https://api.github.com/users/thegostep/following{/other_user}",
      "gists_url": "https://api.github.com/users/thegostep/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/thegostep/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/thegostep/subscriptions",
      "organizations_url": "https://api.github.com/users/thegostep/orgs",
      "repos_url": "https://api.github.com/users/thegostep/repos",
      "events_url": "https://api.github.com/users/thegostep/events{/privacy}",
      "received_events_url": "https://api.github.com/users/thegostep/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-18T16:33:16Z",
    "updated_at": "2022-05-18T16:33:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "Something important to keep in mind is that it's important for builders to find out if relays are prioritizing their payloads correctly. I expect relays to be incentivized to publish summaries of receive and publish timestamps as well as bid value for all requests.\r\n\r\nThe more standardized this data publishing is between relays, the better.\r\n\r\nOther metrics which will be critical to track for mev-boost system health: relay reveal performance, relay latency, fraud proofs, bid value, builder rankings, relay rankings",
    "reactions": {
      "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1130236791/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1151094511",
    "html_url": "https://github.com/flashbots/mev-boost/issues/112#issuecomment-1151094511",
    "issue_url": "https://api.github.com/repos/flashbots/mev-boost/issues/112",
    "id": 1151094511,
    "node_id": "IC_kwDOGZSKs85EnE7v",
    "user": {
      "login": "charlescharles",
      "id": 4009487,
      "node_id": "MDQ6VXNlcjQwMDk0ODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4009487?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/charlescharles",
      "html_url": "https://github.com/charlescharles",
      "followers_url": "https://api.github.com/users/charlescharles/followers",
      "following_url": "https://api.github.com/users/charlescharles/following{/other_user}",
      "gists_url": "https://api.github.com/users/charlescharles/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/charlescharles/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/charlescharles/subscriptions",
      "organizations_url": "https://api.github.com/users/charlescharles/orgs",
      "repos_url": "https://api.github.com/users/charlescharles/repos",
      "events_url": "https://api.github.com/users/charlescharles/events{/privacy}",
      "received_events_url": "https://api.github.com/users/charlescharles/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-09T13:04:44Z",
    "updated_at": "2022-06-09T13:04:44Z",
    "author_association": "NONE",
    "body": "I think public bids are the equilibrium - builders will bid up to their value for a given slot, and proposers are therefore incentivized to publish the current highest bid. \r\n\r\nI'm a bit worried that this will cause a speed/bidding war: builders send their blocks to the relay at deadline - epsilon, and also try to learn about other bids from the relay as fast as possible (it seems best for relays to publish bids over some fair multicast feed as soon as they're received - if you can learn about bids faster by connecting to the relay over the mev-boost api, builders will just do that, which seems bad. If relays don't publish bids, then I think validators will end up running mev-boost mods which do that, which also seems bad)",
    "reactions": {
      "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1151094511/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1167766998",
    "html_url": "https://github.com/flashbots/mev-boost/issues/112#issuecomment-1167766998",
    "issue_url": "https://api.github.com/repos/flashbots/mev-boost/issues/112",
    "id": 1167766998,
    "node_id": "IC_kwDOGZSKs85FmrXW",
    "user": {
      "login": "quintuskilbourn",
      "id": 47097067,
      "node_id": "MDQ6VXNlcjQ3MDk3MDY3",
      "avatar_url": "https://avatars.githubusercontent.com/u/47097067?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/quintuskilbourn",
      "html_url": "https://github.com/quintuskilbourn",
      "followers_url": "https://api.github.com/users/quintuskilbourn/followers",
      "following_url": "https://api.github.com/users/quintuskilbourn/following{/other_user}",
      "gists_url": "https://api.github.com/users/quintuskilbourn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/quintuskilbourn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/quintuskilbourn/subscriptions",
      "organizations_url": "https://api.github.com/users/quintuskilbourn/orgs",
      "repos_url": "https://api.github.com/users/quintuskilbourn/repos",
      "events_url": "https://api.github.com/users/quintuskilbourn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/quintuskilbourn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-27T19:06:23Z",
    "updated_at": "2022-06-27T19:06:23Z",
    "author_association": "NONE",
    "body": "Agreed there are several issues which come to mind:\r\n1. Latency advantage for builders close to the relay, because of information asymmetry and just-in-time bidding. \r\n2. This adds further incentive for validators to wait as long as possible before signing a block header (related thread: https://github.com/flashbots/mev-boost/issues/111#issuecomment-1166758648)\r\n3. Relayers incurring additional overhead (spam), although I am not sure how significant this will be relative to a relay's capacity. (please weigh in if you have a better idea). \r\n\r\nA sealed-bid auction (assuming highest bidder wins) in a competitive market, should see the highest bidder bidding close to their true value (how much value the extracted) so the final bid shouldn't be any worse than the public case, but with none of the downsides listed above.\r\n\r\nOn the point of the value of transparency: relays can offer a service in which information about block bids is made public after a slight delay. This can ensure that e.g. Lido validators are truly accepting the highest bid and not taking payments through side channels.",
    "reactions": {
      "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1167766998/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1168045660",
    "html_url": "https://github.com/flashbots/mev-boost/issues/112#issuecomment-1168045660",
    "issue_url": "https://api.github.com/repos/flashbots/mev-boost/issues/112",
    "id": 1168045660,
    "node_id": "IC_kwDOGZSKs85FnvZc",
    "user": {
      "login": "ralexstokes",
      "id": 3113781,
      "node_id": "MDQ6VXNlcjMxMTM3ODE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3113781?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ralexstokes",
      "html_url": "https://github.com/ralexstokes",
      "followers_url": "https://api.github.com/users/ralexstokes/followers",
      "following_url": "https://api.github.com/users/ralexstokes/following{/other_user}",
      "gists_url": "https://api.github.com/users/ralexstokes/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ralexstokes/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ralexstokes/subscriptions",
      "organizations_url": "https://api.github.com/users/ralexstokes/orgs",
      "repos_url": "https://api.github.com/users/ralexstokes/repos",
      "events_url": "https://api.github.com/users/ralexstokes/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ralexstokes/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-27T23:50:52Z",
    "updated_at": "2022-06-27T23:50:52Z",
    "author_association": "COLLABORATOR",
    "body": "> Relayers incurring additional overhead (spam),\r\n\r\nsome low-hanging fruit here is to only allow 1 bid per builder per slot, which seems like it would go a long way to prevent any type of PGA-style behavior. if we have some cancellation mechanism then that would be 0 or 1 bids per slot\r\n\r\n> further incentive for validators to wait\r\n\r\nhonest validators are already enforcing a timeout on the availability of headers, cf. the `BUILDER_PROPOSAL_DELAY_TOLERANCE` constant and its usage here: https://github.com/ethereum/builder-specs/blob/main/specs/validator.md#relation-to-local-block-building; validators are free to deviate of course, but in practice defaults do go a long way\r\n\r\neven if we only allow 1 bid per builder per slot, we still have the \"first mover disadvantage\" if the \"mempool\" is public... \r\n\r\nthe only immediate issue I see with making the \"mempool\" private is that it harms validator privacy as in expectation only the proposer will be making a request in a given slot -- if you can pull off any sort of correlation attacks, then you can start mapping proposers to their IPs. there are mitigations here and you have this problem to a lesser extent (up to the size of the \"anonymity set\") w/ the public \"mempool\" so it may not be worth worrying about here.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1168045660/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1169933159",
    "html_url": "https://github.com/flashbots/mev-boost/issues/112#issuecomment-1169933159",
    "issue_url": "https://api.github.com/repos/flashbots/mev-boost/issues/112",
    "id": 1169933159,
    "node_id": "IC_kwDOGZSKs85Fu8Nn",
    "user": {
      "login": "barnabemonnot",
      "id": 4910325,
      "node_id": "MDQ6VXNlcjQ5MTAzMjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4910325?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/barnabemonnot",
      "html_url": "https://github.com/barnabemonnot",
      "followers_url": "https://api.github.com/users/barnabemonnot/followers",
      "following_url": "https://api.github.com/users/barnabemonnot/following{/other_user}",
      "gists_url": "https://api.github.com/users/barnabemonnot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/barnabemonnot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/barnabemonnot/subscriptions",
      "organizations_url": "https://api.github.com/users/barnabemonnot/orgs",
      "repos_url": "https://api.github.com/users/barnabemonnot/repos",
      "events_url": "https://api.github.com/users/barnabemonnot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/barnabemonnot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-29T12:42:44Z",
    "updated_at": "2022-06-29T12:42:44Z",
    "author_association": "NONE",
    "body": "We discussed it briefly during an earlier call, but it may be worth thinking about incentive-compatibility of the different parties. Broadly:\r\n- Builders want their bids to win, and they want to pay as little as possible to get in. They can choose which relays to send their bids to.\r\n- Relays want as many successful builder bids to be included, it signals higher relay quality to builders and so more traffic towards a specific relay. They can choose to publish or not the bids they receive.\r\n- Proposers want the best possible bid to win, so they earn a greater profit from the builder.\r\n\r\nI describe a strawman auction first:\r\n- Builders send their bids to relays privately\r\n- Relays commit to sending one bid only to proposers, using a second-price auction: they charge the best builder the bid of the second-best builder. Bids are sent publicly to proposers to avoid the issues associated with private mempools\r\n- Proposers choose the highest received bid before publishing\r\n\r\nThis auction has nice properties:\r\n- Builders don't need to engage in sniping wars: they privately declare their willingness-to-pay to the relay and know they will only pay the second highest bid, which would be the natural result of a PGA style open bidding process. They can even declare their bid (privately) to as many relays as they want.\r\n- The onus is on relays to gauge how much risk they are willing to take with respect to when they should publish their \"best bid\". Relays who consistently publish too late never get blocks included and so builders defect to more timely relays. Relays who publish too early have the same issue.\r\n- Proposers can have a very passive strategy that guarantees them the current highest revealed bid: set a deadline for publishing their blocks and listen to the bids, picking the highest received bid when they publish.\r\n\r\nSome issues:\r\n- The second-price needs to be implementable. A builder signs its own bid, so how can the relay charge the second-price? Do they ask the builder to resubmit their bid at the second-price, with the guarantee that the relay will publish the resubmitted bid? If the relay doesn't provide good quality of service or deviates in any way, the builder would choose a different relay that is more reliable => good to note here that the builder-relay relationship is essentially a repeated game.\r\n- Incentive-compatibility for proposers: This is the more serious problem of the auction. A proposer has an incentive to accept bids from relays who deviate from the \"honest\" specification of \"one bid only per relay\". For instance, if the relay obtains a better second-best bid after they communicated an initial bid to the proposer, they could communicate the better bid to the proposer, and it's in the proposer's interest to accept this new bid. If this is true, then the relay's best strategy is to always offer the proposer its current second-best bid, and update it based on the bids it receives. On the other hand, if a strong enough social norm forms around relays, the constraint of one bid per relay can hold. If it doesn't hold, it just ends up being the same as the timing game where all players publish as late as they possibly can in the case of \"one-bid-per-builder\", or spam with insignificant increments otherwise. The constraint can also be relaxed by allowing for \"up to two bids per relay\" in case the norm seems untenable. I am not aware of any other mechanism to force relays to respect the constraint.\r\n\r\nAnyways, I mainly wanted to present this strawman as a way to explore a different point in the design space, but I realise it may be impractical (and there are possibly flaws I haven't thought about).",
    "reactions": {
      "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1169933159/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1169963322",
    "html_url": "https://github.com/flashbots/mev-boost/issues/112#issuecomment-1169963322",
    "issue_url": "https://api.github.com/repos/flashbots/mev-boost/issues/112",
    "id": 1169963322,
    "node_id": "IC_kwDOGZSKs85FvDk6",
    "user": {
      "login": "charlescharles",
      "id": 4009487,
      "node_id": "MDQ6VXNlcjQwMDk0ODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4009487?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/charlescharles",
      "html_url": "https://github.com/charlescharles",
      "followers_url": "https://api.github.com/users/charlescharles/followers",
      "following_url": "https://api.github.com/users/charlescharles/following{/other_user}",
      "gists_url": "https://api.github.com/users/charlescharles/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/charlescharles/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/charlescharles/subscriptions",
      "organizations_url": "https://api.github.com/users/charlescharles/orgs",
      "repos_url": "https://api.github.com/users/charlescharles/repos",
      "events_url": "https://api.github.com/users/charlescharles/events{/privacy}",
      "received_events_url": "https://api.github.com/users/charlescharles/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-29T13:12:07Z",
    "updated_at": "2022-06-29T13:12:24Z",
    "author_association": "NONE",
    "body": "@barnabemonnot here are a couple things that may or may not be issues with your strawman setup; I'd be curious to hear your thoughts.\r\n\r\n- what prevents a builder-relay from connecting to a second-price relay, waiting to see its bid, and then itself bidding +epsilon to proposers? even if the relay validates that the proposer is a legitimate validator scheduled for this slot, isn't there a more general problem that the proposer is incentivized to publish all the (header, bid)s it has received as an invitation for improving bids?\r\n- there are many ways for relays to undetectably defect (lying about the second price in return for some payment from the proposer, colluding with a subset of builders to raise the second price, etc)",
    "reactions": {
      "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1169963322/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1169986038",
    "html_url": "https://github.com/flashbots/mev-boost/issues/112#issuecomment-1169986038",
    "issue_url": "https://api.github.com/repos/flashbots/mev-boost/issues/112",
    "id": 1169986038,
    "node_id": "IC_kwDOGZSKs85FvJH2",
    "user": {
      "login": "barnabemonnot",
      "id": 4910325,
      "node_id": "MDQ6VXNlcjQ5MTAzMjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4910325?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/barnabemonnot",
      "html_url": "https://github.com/barnabemonnot",
      "followers_url": "https://api.github.com/users/barnabemonnot/followers",
      "following_url": "https://api.github.com/users/barnabemonnot/following{/other_user}",
      "gists_url": "https://api.github.com/users/barnabemonnot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/barnabemonnot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/barnabemonnot/subscriptions",
      "organizations_url": "https://api.github.com/users/barnabemonnot/orgs",
      "repos_url": "https://api.github.com/users/barnabemonnot/repos",
      "events_url": "https://api.github.com/users/barnabemonnot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/barnabemonnot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-29T13:32:21Z",
    "updated_at": "2022-06-29T13:32:21Z",
    "author_association": "NONE",
    "body": "Thanks @charlescharles !\r\n\r\n- I was under the assumption that relays were somewhat limited in number and identifiable, as in a builder couldn't become a relay at the same time, this came up while I was writing but I don't remember where exactly now, it does break something else if builders can just \"spawn as relays\" too. Regarding the bids, I believe they should be publicly visible once the relay publishes them. But indeed public bids means there is a waiting game for relays as well, who can observe currently published bids and if their current highest bid is higher than the publicly published bid, bid an increment above (they can do that only once however, if they are honest about not publishing multiple bids for the same slot).\r\n- Good point on the undetectable deviations... I don't know why I had in mind that this would be potentially detected by builders. Now I wonder if it's enforceable.",
    "reactions": {
      "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1169986038/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1169999264",
    "html_url": "https://github.com/flashbots/mev-boost/issues/112#issuecomment-1169999264",
    "issue_url": "https://api.github.com/repos/flashbots/mev-boost/issues/112",
    "id": 1169999264,
    "node_id": "IC_kwDOGZSKs85FvMWg",
    "user": {
      "login": "charlescharles",
      "id": 4009487,
      "node_id": "MDQ6VXNlcjQwMDk0ODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4009487?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/charlescharles",
      "html_url": "https://github.com/charlescharles",
      "followers_url": "https://api.github.com/users/charlescharles/followers",
      "following_url": "https://api.github.com/users/charlescharles/following{/other_user}",
      "gists_url": "https://api.github.com/users/charlescharles/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/charlescharles/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/charlescharles/subscriptions",
      "organizations_url": "https://api.github.com/users/charlescharles/orgs",
      "repos_url": "https://api.github.com/users/charlescharles/repos",
      "events_url": "https://api.github.com/users/charlescharles/events{/privacy}",
      "received_events_url": "https://api.github.com/users/charlescharles/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-29T13:44:01Z",
    "updated_at": "2022-06-29T13:44:01Z",
    "author_association": "NONE",
    "body": "Yeah, I have been conflating builders and relays because relays kind of seem irrelevant in a game theoretic analysis (or something) - if a mechanism is incentive-compatible for neither builders nor proposers then I think we should expect new relays to emerge that don't follow the rules. I agree that social norms + only writing software that follows the rules might suffice for some time (maybe indefinitely?), but it seems preferable to design a mechanism which is more game-theoretically robust, if possible :)",
    "reactions": {
      "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1169999264/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1170215436",
    "html_url": "https://github.com/flashbots/mev-boost/issues/112#issuecomment-1170215436",
    "issue_url": "https://api.github.com/repos/flashbots/mev-boost/issues/112",
    "id": 1170215436,
    "node_id": "IC_kwDOGZSKs85FwBIM",
    "user": {
      "login": "barnabemonnot",
      "id": 4910325,
      "node_id": "MDQ6VXNlcjQ5MTAzMjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4910325?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/barnabemonnot",
      "html_url": "https://github.com/barnabemonnot",
      "followers_url": "https://api.github.com/users/barnabemonnot/followers",
      "following_url": "https://api.github.com/users/barnabemonnot/following{/other_user}",
      "gists_url": "https://api.github.com/users/barnabemonnot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/barnabemonnot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/barnabemonnot/subscriptions",
      "organizations_url": "https://api.github.com/users/barnabemonnot/orgs",
      "repos_url": "https://api.github.com/users/barnabemonnot/repos",
      "events_url": "https://api.github.com/users/barnabemonnot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/barnabemonnot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-29T16:34:14Z",
    "updated_at": "2022-06-29T16:34:14Z",
    "author_association": "NONE",
    "body": "Can you expand on what relays look like then, in a MEV-boost landscape? I thought of them as a handful, like Infura, Metamask, Flashbots, well-known names, for which validators using MEV-boost connect to directly (like add their addresses in a config file)",
    "reactions": {
      "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1170215436/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1170221680",
    "html_url": "https://github.com/flashbots/mev-boost/issues/112#issuecomment-1170221680",
    "issue_url": "https://api.github.com/repos/flashbots/mev-boost/issues/112",
    "id": 1170221680,
    "node_id": "IC_kwDOGZSKs85FwCpw",
    "user": {
      "login": "metachris",
      "id": 116939,
      "node_id": "MDQ6VXNlcjExNjkzOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/116939?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/metachris",
      "html_url": "https://github.com/metachris",
      "followers_url": "https://api.github.com/users/metachris/followers",
      "following_url": "https://api.github.com/users/metachris/following{/other_user}",
      "gists_url": "https://api.github.com/users/metachris/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/metachris/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/metachris/subscriptions",
      "organizations_url": "https://api.github.com/users/metachris/orgs",
      "repos_url": "https://api.github.com/users/metachris/repos",
      "events_url": "https://api.github.com/users/metachris/events{/privacy}",
      "received_events_url": "https://api.github.com/users/metachris/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-29T16:39:31Z",
    "updated_at": "2022-06-30T06:43:54Z",
    "author_association": "COLLABORATOR",
    "body": "Yes, validators need to configure mev-boost with each relay to connect to specifically (using the relay address and pubkey, as cli arg or [a config file](https://github.com/flashbots/mev-boost/issues/154)).",
    "reactions": {
      "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1170221680/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1170371090",
    "html_url": "https://github.com/flashbots/mev-boost/issues/112#issuecomment-1170371090",
    "issue_url": "https://api.github.com/repos/flashbots/mev-boost/issues/112",
    "id": 1170371090,
    "node_id": "IC_kwDOGZSKs85FwnIS",
    "user": {
      "login": "charlescharles",
      "id": 4009487,
      "node_id": "MDQ6VXNlcjQwMDk0ODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4009487?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/charlescharles",
      "html_url": "https://github.com/charlescharles",
      "followers_url": "https://api.github.com/users/charlescharles/followers",
      "following_url": "https://api.github.com/users/charlescharles/following{/other_user}",
      "gists_url": "https://api.github.com/users/charlescharles/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/charlescharles/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/charlescharles/subscriptions",
      "organizations_url": "https://api.github.com/users/charlescharles/orgs",
      "repos_url": "https://api.github.com/users/charlescharles/repos",
      "events_url": "https://api.github.com/users/charlescharles/events{/privacy}",
      "received_events_url": "https://api.github.com/users/charlescharles/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-29T18:53:24Z",
    "updated_at": "2022-06-29T18:53:24Z",
    "author_association": "NONE",
    "body": "> Can you expand on what relays look like then, in a MEV-boost landscape? I thought of them as a handful, like Infura, Metamask, Flashbots, well-known names, for which validators using MEV-boost connect to directly (like add their addresses in a config file)\r\n\r\nWell, if the world is such that it's possible for proposers to make more money by bypassing the existing relays and connecting directly to builders, I think we should assume that this will happen. It's not hard to imagine someone starting a relay and saying \"if you add us to your relay list and run this mev-boost patch which publishes (header, bid)s, you'll be able to make x% more\" - behind the scenes, they're a builder who's actually one of the flashbots builders (or something), and just bidding epsilon more than the existing bid whenever their value exceeds the bid.",
    "reactions": {
      "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1170371090/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1170562944",
    "html_url": "https://github.com/flashbots/mev-boost/issues/112#issuecomment-1170562944",
    "issue_url": "https://api.github.com/repos/flashbots/mev-boost/issues/112",
    "id": 1170562944,
    "node_id": "IC_kwDOGZSKs85FxV-A",
    "user": {
      "login": "thegostep",
      "id": 15959632,
      "node_id": "MDQ6VXNlcjE1OTU5NjMy",
      "avatar_url": "https://avatars.githubusercontent.com/u/15959632?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/thegostep",
      "html_url": "https://github.com/thegostep",
      "followers_url": "https://api.github.com/users/thegostep/followers",
      "following_url": "https://api.github.com/users/thegostep/following{/other_user}",
      "gists_url": "https://api.github.com/users/thegostep/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/thegostep/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/thegostep/subscriptions",
      "organizations_url": "https://api.github.com/users/thegostep/orgs",
      "repos_url": "https://api.github.com/users/thegostep/repos",
      "events_url": "https://api.github.com/users/thegostep/events{/privacy}",
      "received_events_url": "https://api.github.com/users/thegostep/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-29T22:38:00Z",
    "updated_at": "2022-06-29T22:39:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "How the relay landscape evolves over time is difficult to predict. We believe the ideal will have relays as independent 3rd parties who are not actively profiting from the private information they have access to.\r\n\r\nHowever, I still expect all three of these to occur:\r\n1. Independent relays will be operated by trusted entities like Infura, Flashbots, Alchemy, Bloxroute, and others. These are likely to attract the most validators and therefore the highest quality builders. Some of them will be corrupted and sell or otherwise make use of preferential access to the information they hold.\r\n2. Some validators (particularly the large ones) will want to run their own relays. This will allow them to reduce the risk of proposing an invalid block or for their block proposal to be withheld.\r\n3. Some builders will want to run their own relays. They will want to do this to avoid needing to trust a 3rd party relay or to minimize their latency.\r\n\r\nI tend to agree with @charlescharles claim that if *any* actor can see the bid, then it's best for *every* actor to see it. Anything else creates an opportunity for bribery.\r\n\r\nWe've previously discussed exploring a system where *no* actor outside the builder sees the bid. Not even the validator. This might be possible to achieve using some mpc or sgx committee for selecting the winning bid. This is pretty green field exploration.",
    "reactions": {
      "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1170562944/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1171555124",
    "html_url": "https://github.com/flashbots/mev-boost/issues/112#issuecomment-1171555124",
    "issue_url": "https://api.github.com/repos/flashbots/mev-boost/issues/112",
    "id": 1171555124,
    "node_id": "IC_kwDOGZSKs85F1IM0",
    "user": {
      "login": "metachris",
      "id": 116939,
      "node_id": "MDQ6VXNlcjExNjkzOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/116939?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/metachris",
      "html_url": "https://github.com/metachris",
      "followers_url": "https://api.github.com/users/metachris/followers",
      "following_url": "https://api.github.com/users/metachris/following{/other_user}",
      "gists_url": "https://api.github.com/users/metachris/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/metachris/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/metachris/subscriptions",
      "organizations_url": "https://api.github.com/users/metachris/orgs",
      "repos_url": "https://api.github.com/users/metachris/repos",
      "events_url": "https://api.github.com/users/metachris/events{/privacy}",
      "received_events_url": "https://api.github.com/users/metachris/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-30T18:43:10Z",
    "updated_at": "2022-07-01T05:22:32Z",
    "author_association": "COLLABORATOR",
    "body": "This topic was discussed in [today's Consensus-layer call](https://github.com/ethereum/pm/issues/555), see also [notes from Ben](https://hackmd.io/@benjaminion/HJNt57iq5#MEV-Boost) and the [recording](https://youtu.be/Fid8hTxkRHM?t=1268) (excuse my bumbling ^^).\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1171555124/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1185717882",
    "html_url": "https://github.com/flashbots/mev-boost/issues/112#issuecomment-1185717882",
    "issue_url": "https://api.github.com/repos/flashbots/mev-boost/issues/112",
    "id": 1185717882,
    "node_id": "IC_kwDOGZSKs85GrJ56",
    "user": {
      "login": "barnabemonnot",
      "id": 4910325,
      "node_id": "MDQ6VXNlcjQ5MTAzMjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4910325?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/barnabemonnot",
      "html_url": "https://github.com/barnabemonnot",
      "followers_url": "https://api.github.com/users/barnabemonnot/followers",
      "following_url": "https://api.github.com/users/barnabemonnot/following{/other_user}",
      "gists_url": "https://api.github.com/users/barnabemonnot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/barnabemonnot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/barnabemonnot/subscriptions",
      "organizations_url": "https://api.github.com/users/barnabemonnot/orgs",
      "repos_url": "https://api.github.com/users/barnabemonnot/repos",
      "events_url": "https://api.github.com/users/barnabemonnot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/barnabemonnot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-15T16:44:21Z",
    "updated_at": "2022-07-15T16:44:21Z",
    "author_association": "NONE",
    "body": "The more I think about it the more it seems like few rules can be enforced and perhaps it's best to let relays operate their favoured trade-offs. Relays have two constraints:\r\n\r\n- They want to give block producers their most up-to-date bids and they want to receive the most up-to-date bids from builders\r\n- They don't want to crumble under spam/DoS\r\n\r\nAny rule regarding their behaviour typically reduces to a race to the bottom, e.g. imposing builders to resubmit with a 5% extra value rule means builders will move to a relay that imposes 4% instead. Even setting such a rule as a social norm seems tricky, as indeed builders could become their own relays to bypass any norm.\r\n\r\nI am not clear however how the trust model works for validators running their own relay, as per @thegostep suggestion. Isn't the point of the relay to shield the block payload from the validator? Is this supposed to work in a case where the builders trust large validator entities to not steal their blocks? That doesn't seem unrealistic, but it does reintroduce a small element of economic centralisation (assuming the latency difference is significant for validator-run relays)",
    "reactions": {
      "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1185717882/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1185724513",
    "html_url": "https://github.com/flashbots/mev-boost/issues/112#issuecomment-1185724513",
    "issue_url": "https://api.github.com/repos/flashbots/mev-boost/issues/112",
    "id": 1185724513,
    "node_id": "IC_kwDOGZSKs85GrLhh",
    "user": {
      "login": "charlescharles",
      "id": 4009487,
      "node_id": "MDQ6VXNlcjQwMDk0ODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4009487?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/charlescharles",
      "html_url": "https://github.com/charlescharles",
      "followers_url": "https://api.github.com/users/charlescharles/followers",
      "following_url": "https://api.github.com/users/charlescharles/following{/other_user}",
      "gists_url": "https://api.github.com/users/charlescharles/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/charlescharles/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/charlescharles/subscriptions",
      "organizations_url": "https://api.github.com/users/charlescharles/orgs",
      "repos_url": "https://api.github.com/users/charlescharles/repos",
      "events_url": "https://api.github.com/users/charlescharles/events{/privacy}",
      "received_events_url": "https://api.github.com/users/charlescharles/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-15T16:52:41Z",
    "updated_at": "2022-07-15T16:52:55Z",
    "author_association": "NONE",
    "body": "\r\n> The more I think about it the more it seems like few rules can be enforced and perhaps it's best to let relays operate their favoured trade-offs.\r\n\r\nYeah, I totally agree with this\r\n\r\n> I am not clear however how the trust model works for validators running their own relay, as per @thegostep suggestion. Isn't the point of the relay to shield the block payload from the validator? Is this supposed to work in a case where the builders trust large validator entities to not steal their blocks? That doesn't seem unrealistic, but it does reintroduce a small element of economic centralisation (assuming the latency difference is significant for validator-run relays)\r\n\r\nYeah, this is why I feel like relays disappear in any kind of formal analysis. If some large validator entity connects to all the big relays, but also runs their own relay, then as a builder you may want to connect to that validator's relay to skip 100ms (or something) worth of network hops. Even if a validator-run relay steals your trades with some probability, if the probability isn't too large and the validator is sufficiently big you may still want to send blocks to them.",
    "reactions": {
      "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1185724513/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1185750288",
    "html_url": "https://github.com/flashbots/mev-boost/issues/112#issuecomment-1185750288",
    "issue_url": "https://api.github.com/repos/flashbots/mev-boost/issues/112",
    "id": 1185750288,
    "node_id": "IC_kwDOGZSKs85GrR0Q",
    "user": {
      "login": "barnabemonnot",
      "id": 4910325,
      "node_id": "MDQ6VXNlcjQ5MTAzMjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4910325?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/barnabemonnot",
      "html_url": "https://github.com/barnabemonnot",
      "followers_url": "https://api.github.com/users/barnabemonnot/followers",
      "following_url": "https://api.github.com/users/barnabemonnot/following{/other_user}",
      "gists_url": "https://api.github.com/users/barnabemonnot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/barnabemonnot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/barnabemonnot/subscriptions",
      "organizations_url": "https://api.github.com/users/barnabemonnot/orgs",
      "repos_url": "https://api.github.com/users/barnabemonnot/repos",
      "events_url": "https://api.github.com/users/barnabemonnot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/barnabemonnot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-15T17:24:59Z",
    "updated_at": "2022-07-15T17:24:59Z",
    "author_association": "NONE",
    "body": "Right, so assuming this eventually happens, perhaps a strong norm around relays sharing the bids they receive should be enforced. If big validators do run their own relays, they could close them off to being \"pinged\" by observers. While it's not inherently bad that a validator would collude with a builder, it feels like relevant information to the network as a whole. By keeping private the bids the relay receives, maybe it's not clear if such a collusion is happening?",
    "reactions": {
      "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1185750288/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1185791334",
    "html_url": "https://github.com/flashbots/mev-boost/issues/112#issuecomment-1185791334",
    "issue_url": "https://api.github.com/repos/flashbots/mev-boost/issues/112",
    "id": 1185791334,
    "node_id": "IC_kwDOGZSKs85Grb1m",
    "user": {
      "login": "quintuskilbourn",
      "id": 47097067,
      "node_id": "MDQ6VXNlcjQ3MDk3MDY3",
      "avatar_url": "https://avatars.githubusercontent.com/u/47097067?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/quintuskilbourn",
      "html_url": "https://github.com/quintuskilbourn",
      "followers_url": "https://api.github.com/users/quintuskilbourn/followers",
      "following_url": "https://api.github.com/users/quintuskilbourn/following{/other_user}",
      "gists_url": "https://api.github.com/users/quintuskilbourn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/quintuskilbourn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/quintuskilbourn/subscriptions",
      "organizations_url": "https://api.github.com/users/quintuskilbourn/orgs",
      "repos_url": "https://api.github.com/users/quintuskilbourn/repos",
      "events_url": "https://api.github.com/users/quintuskilbourn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/quintuskilbourn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-15T18:22:53Z",
    "updated_at": "2022-07-18T21:42:55Z",
    "author_association": "NONE",
    "body": "In my view the key focus should be preventing proposer centralisation - after all, this was the original motivation for PBS implementation - and this is best done by examining the behaviour of proposers. In order to avoid centralisation of proposers, we would like sophisticated proposers to have little to no advantage over “naive” proposers exhibiting default behaviour or other proposers deviating in a less sophisticated manner. Ideally, there would be a clear dominant strategy for proposers which we could set as the default. Unfortunately, this seems unrealistic (at least until more data is gathered), but we could still strive for setting a default with a payoff close to what a sophisticated proposer can achieve.\r\n\r\nA rough way of looking at the builder-relayer-proposer dynamic is that there are two parties determining the mechanism at play - the relays and the proposer, with the proposer having the last move and therefore most important role. If relays have one default behaviour (e.g. sealed bids) the proposer could flip the mechanism and change the game (e.g. to open bids). \r\n\r\n**Some examples of what I mean:**\r\n\r\n- If naive proposers do not sign getHeader requests, relayers expose bids by default since it is hard to distinguish the true proposer from those pretending to be the proposer. Builders would want access to other builders’ bids without exposing their own so a builder may choose to run its own relayer to accomplish this. If proposers feel that private bids may increase their profit or they receive payment according to some side agreement then they can allow this by changing to a version of mev-boost that allows for signed messages or sharing their IP. \r\n    - One reason private bids may increase their profit is if builders given access to private bids agree to always increase the max bid by some minimum amount if they increase it all, which may be worthwhile for proposers if the sealed bid always comes right before block selection. Other reasons could be a pre-agreed payment (validators may prefer consistent income in dollars vs. inconsistent ETH and MEV payments).\r\n    - As a side note: if relays are able to tell which requests are from the proposer for the current slot, they could hide bids of partnered builders from everyone else calling getHeader in order to give those builders an advantage.\r\n- If naive proposers sign getHeader requests to run sealed-bid as default then proposers could change the auction to open-bid if they believe open-bid to be more profitable or are being payed.\r\n    - There is nuance here as well since proposers could only open bids to a subset of builders/relays.\r\n    - Proposers could expose bids in two ways\r\n        - Propagating bids (so latency becomes important). This could happen in exchange for some pre-agreed payment perhaps.\r\n        - Refusing to sign getHeader messages. If validators are big enough this could force relayers to expose their bids to everyone since they cannot distinguish proposers from those behaving as proposers.\r\n\r\n**Wat do**\r\nIdeally we choose a setup in which proposers have no incentive to switch and no sophisticated techniques for improving their revenue. The literature is not particularly decisive on this point as different assumptions predict different proposer revenues at equilibrium:\r\n\r\n- Symmetric, independent, private values for builders should lead to the same revenue for sealed-bid first-price and English auctions (Revenue Equivalence Theorem)\r\n- Symmetric, affiliated values should lead to a higher payoff under an English auction\r\n- Under other sets of assumptions like asymmetry, collusion or risk-aversion there are equilibria with a higher payoff for sealed-bid auctions\r\n\r\nSee [this paper](https://www.cna.org/archive/CNA_Files/pdf/d0017911.a1.pdf) for a good overview and pointer to other results.\r\n\r\nUnfortunately, it is unclear which assumptions will hold for several reasons (e.g. how OF will be divided/shared between builders). These results also don’t cover cases where some agents are operating in an open environment and other agents are operating in a private environment. \r\n\r\n(*It is worth noting (as pointed out in flashboys 2.0 paper) that if the block-selection time is highly predictable as being at time T, then an open auction defaults into sealed bid where “sealed-bids” are submitted at T-d where d is the time taken for a bid to reach the proposer. However, T and d may not be known to a sufficient accuracy and vary across agents such that it is not the case that all auctions end up being sealed-bid.)*\r\n\r\nThis leaves us the question: will there be stronger centralisation forces among proposers who facilitate sealed-bid or open auctions? \r\n\r\nThere are several factors to consider outside of the advantage gained from deviation and deviating better than other deviating proposers. For instance, if a certain deviation becomes very widespread (e.g. most proposers provide private channels) then relays may start doing this themselves as a service. Alternatively, if certain deviations by large validators affect the market such that some builders shade their bids lower or drop out suspecting misbehaviour, deviations may cease to occur. \r\n\r\nOne last thing to note on the practicality of enforcement: if proposers allow private channels, relays which do not expose bids are likely to become the norm. All things being equal between relays, no builders gains by sending their bids via open relays. \r\n\r\nIf proposers don’t allow private channels, the gains of a relay that doesn’t expose bids *may* be negligible (and perhaps infeasible if proposers don’t implement signed messages).\r\n\r\nIf we put aside proposer centralisation, it seems intuitive that a default-open system is better for competition. For example if 90% of the builder-relay world operates in the open and 10% manage to keep their info private. The maximum difference between the default and the \"cheating\" parties is 10% information. \r\nIf the builder-relay world is private by default then most parties have only their private info but some parties have close to 100% more info in absolute terms. ",
    "reactions": {
      "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1185791334/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1188031358",
    "html_url": "https://github.com/flashbots/mev-boost/issues/112#issuecomment-1188031358",
    "issue_url": "https://api.github.com/repos/flashbots/mev-boost/issues/112",
    "id": 1188031358,
    "node_id": "IC_kwDOGZSKs85Gz-t-",
    "user": {
      "login": "come-maiz",
      "id": 617831,
      "node_id": "MDQ6VXNlcjYxNzgzMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/617831?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/come-maiz",
      "html_url": "https://github.com/come-maiz",
      "followers_url": "https://api.github.com/users/come-maiz/followers",
      "following_url": "https://api.github.com/users/come-maiz/following{/other_user}",
      "gists_url": "https://api.github.com/users/come-maiz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/come-maiz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/come-maiz/subscriptions",
      "organizations_url": "https://api.github.com/users/come-maiz/orgs",
      "repos_url": "https://api.github.com/users/come-maiz/repos",
      "events_url": "https://api.github.com/users/come-maiz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/come-maiz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-18T18:16:03Z",
    "updated_at": "2022-07-18T18:16:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "Wow, this is a lot :exploding_head:. I appreciate all of your comments and how you make it as easy as possible to follow <3\r\n\r\nI would like to see more people interested in running relays to participate here. I think we only succeed at this part if the network of builders collaborate to design it. My immediate proposal to not explode is to insist a lot that anybody wanting to be a relay should [start by running a builder](145 ). That way they get in touch with the complexities of MEV and start participating on these discussions, so when we have multiple relays we have good mitigations in place and a plan for exploring permissionlessness.",
    "reactions": {
      "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1188031358/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
