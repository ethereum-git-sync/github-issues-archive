{
  "url": "https://api.github.com/repos/flashbots/mev-boost/issues/71",
  "repository_url": "https://api.github.com/repos/flashbots/mev-boost",
  "labels_url": "https://api.github.com/repos/flashbots/mev-boost/issues/71/labels{/name}",
  "comments_url": "https://api.github.com/repos/flashbots/mev-boost/issues/71/comments",
  "events_url": "https://api.github.com/repos/flashbots/mev-boost/issues/71/events",
  "html_url": "https://github.com/flashbots/mev-boost/issues/71",
  "id": 1187033825,
  "node_id": "I_kwDOGZSKs85GwLLh",
  "number": 71,
  "title": "Remove use of `engine_forkchoiceUpdatedV1`",
  "user": {
    "login": "lightclient",
    "id": 14004106,
    "node_id": "MDQ6VXNlcjE0MDA0MTA2",
    "avatar_url": "https://avatars.githubusercontent.com/u/14004106?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/lightclient",
    "html_url": "https://github.com/lightclient",
    "followers_url": "https://api.github.com/users/lightclient/followers",
    "following_url": "https://api.github.com/users/lightclient/following{/other_user}",
    "gists_url": "https://api.github.com/users/lightclient/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/lightclient/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/lightclient/subscriptions",
    "organizations_url": "https://api.github.com/users/lightclient/orgs",
    "repos_url": "https://api.github.com/users/lightclient/repos",
    "events_url": "https://api.github.com/users/lightclient/events{/privacy}",
    "received_events_url": "https://api.github.com/users/lightclient/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 15,
  "created_at": "2022-03-30T21:54:12Z",
  "updated_at": "2022-04-08T13:46:42Z",
  "closed_at": "2022-04-08T13:46:42Z",
  "author_association": "COLLABORATOR",
  "active_lock_reason": null,
  "body": "Currently `engine_forkchoiceUpdatedV1` is used to communicate to relays the `feeRecipient` that a validator will be using. As a side effect, a lot of unnecessary information is communicated to the relays.\r\n\r\nI propose two potential alternatives:\r\n\r\n1) `builder_getPayloadHeader(hash, feeRecipient) -> PayloadHeader`\r\n2) `builder_preparePayload(hash, feeRecipient) -> uint64` + `builder_getPayloadHeader(payloadId) -> PayloadHeader`\r\n\r\nI don't know if I have enough of an understanding of the latency of 1) to choose it over 2), but it is naively my preference.",
  "closed_by": {
    "login": "metachris",
    "id": 116939,
    "node_id": "MDQ6VXNlcjExNjkzOQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/116939?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/metachris",
    "html_url": "https://github.com/metachris",
    "followers_url": "https://api.github.com/users/metachris/followers",
    "following_url": "https://api.github.com/users/metachris/following{/other_user}",
    "gists_url": "https://api.github.com/users/metachris/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/metachris/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/metachris/subscriptions",
    "organizations_url": "https://api.github.com/users/metachris/orgs",
    "repos_url": "https://api.github.com/users/metachris/repos",
    "events_url": "https://api.github.com/users/metachris/events{/privacy}",
    "received_events_url": "https://api.github.com/users/metachris/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/flashbots/mev-boost/issues/71/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/flashbots/mev-boost/issues/71/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1084547811",
    "html_url": "https://github.com/flashbots/mev-boost/issues/71#issuecomment-1084547811",
    "issue_url": "https://api.github.com/repos/flashbots/mev-boost/issues/71",
    "id": 1084547811,
    "node_id": "IC_kwDOGZSKs85ApOLj",
    "user": {
      "login": "mkalinin",
      "id": 1892772,
      "node_id": "MDQ6VXNlcjE4OTI3NzI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1892772?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mkalinin",
      "html_url": "https://github.com/mkalinin",
      "followers_url": "https://api.github.com/users/mkalinin/followers",
      "following_url": "https://api.github.com/users/mkalinin/following{/other_user}",
      "gists_url": "https://api.github.com/users/mkalinin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mkalinin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mkalinin/subscriptions",
      "organizations_url": "https://api.github.com/users/mkalinin/orgs",
      "repos_url": "https://api.github.com/users/mkalinin/repos",
      "events_url": "https://api.github.com/users/mkalinin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mkalinin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-31T13:01:11Z",
    "updated_at": "2022-03-31T13:01:11Z",
    "author_association": "NONE",
    "body": "I think that entire `PayloadAttributes` object is worth being communicated to relays. Ofc, this information is available in the network, but it probably would be easier for builders to receive it from the outside as in this case builders will not have to query CL to obtain this information. Also, querying CL isn't that easy to do in general case, suppose, there are two competing forks, a builder will have to understand which fork a validator is proposing on and make the corresponding query to CL -- and all information the builder has is `hash`, so, it will query CL by execution block hash which may be inconvenient.\r\n\r\nI also think that it might worth communicating the attributes in advance as per (2). In this case `feeRecipient` and other payload attributes that may affect the result of transaction execution will be known to builders in advance aiding creation of a better block.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1084547811/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1084939039",
    "html_url": "https://github.com/flashbots/mev-boost/issues/71#issuecomment-1084939039",
    "issue_url": "https://api.github.com/repos/flashbots/mev-boost/issues/71",
    "id": 1084939039,
    "node_id": "IC_kwDOGZSKs85Aqtsf",
    "user": {
      "login": "come-maiz",
      "id": 617831,
      "node_id": "MDQ6VXNlcjYxNzgzMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/617831?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/come-maiz",
      "html_url": "https://github.com/come-maiz",
      "followers_url": "https://api.github.com/users/come-maiz/followers",
      "following_url": "https://api.github.com/users/come-maiz/following{/other_user}",
      "gists_url": "https://api.github.com/users/come-maiz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/come-maiz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/come-maiz/subscriptions",
      "organizations_url": "https://api.github.com/users/come-maiz/orgs",
      "repos_url": "https://api.github.com/users/come-maiz/repos",
      "events_url": "https://api.github.com/users/come-maiz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/come-maiz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-31T18:08:21Z",
    "updated_at": "2022-03-31T18:09:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "From @djrtwo in https://notes.ethereum.org/WX1hwcMRRzy5oh-zHyzqOA?view\r\n\r\n# use of forkchoiceUpdated\r\n\r\nreuse of the engine_forkchoiceUpdatedV1 semantics seems off\r\nI understand that some of the same info is to be communicated (e.g. payloadBuildAttributes) but to use the same namespace engine_ leads to a less clear separation of concerns and could lead to misunderstandings or accidental bugs\r\nthe description of the namespaces (under header API) conflicts with actual usage (i.e. engine is one of the methods called to the sidecar). suggest again for there to be a new builder_ endpoint that initiates the mev-build process rather than reusing engine_forkchoiceUpdated\r\nI would suggest builder_beginPayloadBuildProcessV1 for BN->mev_boost and relay_begin_payloadBuildProcessV1 for mev_boost->relay\r\n\r\n```\r\nbuilder_beginPayloadBuildProcessV1 {\r\n    headBlockHash,\r\n    payloadAttributes\r\n}\r\n\r\nrelay_beginPayloadBuildProcessV1 {\r\n    headBlockHash,\r\n    payloadAttributes\r\n}\r\n\r\n# if relay cannot build on requested headBlockHash, then can return null\r\n# or if when requesting the payloadHeader via the payloadId, it can return null if it couldn't build anything\r\n```\r\n\r\nI don’t really think the beacon node is actually updating the forkchoice of these external builders (by default). they are sending a request to perform a build process. Such a builder could update it’s local node forkchoice to meet the response but it’s not really a dictate to update the forkchoice and smashing the semantics together here is likely to lead to confusion or unintended consequences",
    "reactions": {
      "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1084939039/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1085665356",
    "html_url": "https://github.com/flashbots/mev-boost/issues/71#issuecomment-1085665356",
    "issue_url": "https://api.github.com/repos/flashbots/mev-boost/issues/71",
    "id": 1085665356,
    "node_id": "IC_kwDOGZSKs85AtfBM",
    "user": {
      "login": "metachris",
      "id": 116939,
      "node_id": "MDQ6VXNlcjExNjkzOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/116939?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/metachris",
      "html_url": "https://github.com/metachris",
      "followers_url": "https://api.github.com/users/metachris/followers",
      "following_url": "https://api.github.com/users/metachris/following{/other_user}",
      "gists_url": "https://api.github.com/users/metachris/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/metachris/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/metachris/subscriptions",
      "organizations_url": "https://api.github.com/users/metachris/orgs",
      "repos_url": "https://api.github.com/users/metachris/repos",
      "events_url": "https://api.github.com/users/metachris/events{/privacy}",
      "received_events_url": "https://api.github.com/users/metachris/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-01T09:18:00Z",
    "updated_at": "2022-04-01T09:18:00Z",
    "author_association": "COLLABORATOR",
    "body": "I'd very much agree that the semantics are off, both in using the `engine_` prefix as well as using the `forkchoiceUpdated` in general. In practice, mev-boost wouldn't actually update the forkchoice of the relays.\r\n\r\nI think the cleanest way would be to use the proposal of `builder_beginPayloadBuildProcessV1` and `relay_beginPayloadBuildProcessV1` instead of `forkchoiceUpdated`.\r\n\r\nIf that's too big of a change, we should at least change `engine_forkchoiceUpdatedV1` to `builder_forkchoiceUpdatedV1` and `relay_forkchoiceUpdatedV1`, although my preference would be to use `builder_beginPayloadBuildProcessV1`.",
    "reactions": {
      "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1085665356/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1085993918",
    "html_url": "https://github.com/flashbots/mev-boost/issues/71#issuecomment-1085993918",
    "issue_url": "https://api.github.com/repos/flashbots/mev-boost/issues/71",
    "id": 1085993918,
    "node_id": "IC_kwDOGZSKs85AuvO-",
    "user": {
      "login": "lightclient",
      "id": 14004106,
      "node_id": "MDQ6VXNlcjE0MDA0MTA2",
      "avatar_url": "https://avatars.githubusercontent.com/u/14004106?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lightclient",
      "html_url": "https://github.com/lightclient",
      "followers_url": "https://api.github.com/users/lightclient/followers",
      "following_url": "https://api.github.com/users/lightclient/following{/other_user}",
      "gists_url": "https://api.github.com/users/lightclient/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lightclient/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lightclient/subscriptions",
      "organizations_url": "https://api.github.com/users/lightclient/orgs",
      "repos_url": "https://api.github.com/users/lightclient/repos",
      "events_url": "https://api.github.com/users/lightclient/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lightclient/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-01T14:49:34Z",
    "updated_at": "2022-04-01T14:49:34Z",
    "author_association": "COLLABORATOR",
    "body": "IIUC, one goal is to remove any kind of synchronous communication from the critical path of block building. For that reason, it feels like we should avoid flows that require an \"initialization\" call. All parameters other than `feeRecipient` can be derived trivially from the beacon chain and `feeRecipient` can be bound to a validator asynchronously during the epoch prior to their proposal slot. Builders can store that information and retrieve it when they are ready to build a block for a certain slot. In which case, the only method we'd need is `builder_getPayloadHeader(hash)`. Thoughts?",
    "reactions": {
      "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1085993918/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1086037672",
    "html_url": "https://github.com/flashbots/mev-boost/issues/71#issuecomment-1086037672",
    "issue_url": "https://api.github.com/repos/flashbots/mev-boost/issues/71",
    "id": 1086037672,
    "node_id": "IC_kwDOGZSKs85Au56o",
    "user": {
      "login": "metachris",
      "id": 116939,
      "node_id": "MDQ6VXNlcjExNjkzOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/116939?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/metachris",
      "html_url": "https://github.com/metachris",
      "followers_url": "https://api.github.com/users/metachris/followers",
      "following_url": "https://api.github.com/users/metachris/following{/other_user}",
      "gists_url": "https://api.github.com/users/metachris/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/metachris/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/metachris/subscriptions",
      "organizations_url": "https://api.github.com/users/metachris/orgs",
      "repos_url": "https://api.github.com/users/metachris/repos",
      "events_url": "https://api.github.com/users/metachris/events{/privacy}",
      "received_events_url": "https://api.github.com/users/metachris/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-01T15:25:47Z",
    "updated_at": "2022-04-01T15:25:47Z",
    "author_association": "COLLABORATOR",
    "body": "I'm trying to think through if there's any issue with option 1, removing the init call and having the attributes be part of `getPayloadHeader`...",
    "reactions": {
      "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1086037672/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1086182540",
    "html_url": "https://github.com/flashbots/mev-boost/issues/71#issuecomment-1086182540",
    "issue_url": "https://api.github.com/repos/flashbots/mev-boost/issues/71",
    "id": 1086182540,
    "node_id": "IC_kwDOGZSKs85AvdSM",
    "user": {
      "login": "mkalinin",
      "id": 1892772,
      "node_id": "MDQ6VXNlcjE4OTI3NzI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1892772?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mkalinin",
      "html_url": "https://github.com/mkalinin",
      "followers_url": "https://api.github.com/users/mkalinin/followers",
      "following_url": "https://api.github.com/users/mkalinin/following{/other_user}",
      "gists_url": "https://api.github.com/users/mkalinin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mkalinin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mkalinin/subscriptions",
      "organizations_url": "https://api.github.com/users/mkalinin/orgs",
      "repos_url": "https://api.github.com/users/mkalinin/repos",
      "events_url": "https://api.github.com/users/mkalinin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mkalinin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-01T17:54:24Z",
    "updated_at": "2022-04-01T17:54:24Z",
    "author_association": "NONE",
    "body": "If we suppose a builder will read all other values from the beacon state, then sending `parentBeaconBlockRoot` as a parameter to `builder_getPayloadHeader` might be more convenient for a builder, for instance, `parentBlockHash` may also be read from the beacon state.\r\n\r\nIf we don't have a `prepare` phase then how builder will know which fork a validator is proposing on in case of competing forks? Or is it supposed for a builder to prepare blocks for all forks to be ready to serve a payload on whatever fork a validator chooses?",
    "reactions": {
      "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1086182540/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1086194210",
    "html_url": "https://github.com/flashbots/mev-boost/issues/71#issuecomment-1086194210",
    "issue_url": "https://api.github.com/repos/flashbots/mev-boost/issues/71",
    "id": 1086194210,
    "node_id": "IC_kwDOGZSKs85AvgIi",
    "user": {
      "login": "lightclient",
      "id": 14004106,
      "node_id": "MDQ6VXNlcjE0MDA0MTA2",
      "avatar_url": "https://avatars.githubusercontent.com/u/14004106?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lightclient",
      "html_url": "https://github.com/lightclient",
      "followers_url": "https://api.github.com/users/lightclient/followers",
      "following_url": "https://api.github.com/users/lightclient/following{/other_user}",
      "gists_url": "https://api.github.com/users/lightclient/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lightclient/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lightclient/subscriptions",
      "organizations_url": "https://api.github.com/users/lightclient/orgs",
      "repos_url": "https://api.github.com/users/lightclient/repos",
      "events_url": "https://api.github.com/users/lightclient/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lightclient/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-01T18:08:55Z",
    "updated_at": "2022-04-01T18:08:55Z",
    "author_association": "COLLABORATOR",
    "body": "> Or is it supposed for a builder to prepare blocks for all forks to be ready to serve a payload on whatever fork a validator chooses?\r\n\r\nI think we should push the burden to the builder to monitor all potential forks and build on top of all of them. In milestone one, it may make sense to just tell the builder what fork you're on, but as we move to a p2p approach to maintain privacy, I think the latency will cause the builder to lose much of the advantage of building with _confidence_ that the validator is on the fork.",
    "reactions": {
      "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1086194210/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1086610035",
    "html_url": "https://github.com/flashbots/mev-boost/issues/71#issuecomment-1086610035",
    "issue_url": "https://api.github.com/repos/flashbots/mev-boost/issues/71",
    "id": 1086610035,
    "node_id": "IC_kwDOGZSKs85AxFpz",
    "user": {
      "login": "metachris",
      "id": 116939,
      "node_id": "MDQ6VXNlcjExNjkzOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/116939?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/metachris",
      "html_url": "https://github.com/metachris",
      "followers_url": "https://api.github.com/users/metachris/followers",
      "following_url": "https://api.github.com/users/metachris/following{/other_user}",
      "gists_url": "https://api.github.com/users/metachris/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/metachris/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/metachris/subscriptions",
      "organizations_url": "https://api.github.com/users/metachris/orgs",
      "repos_url": "https://api.github.com/users/metachris/repos",
      "events_url": "https://api.github.com/users/metachris/events{/privacy}",
      "received_events_url": "https://api.github.com/users/metachris/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-02T10:25:22Z",
    "updated_at": "2022-04-02T10:25:22Z",
    "author_association": "COLLABORATOR",
    "body": "Got some feedback from @jparyani on this too -- it seems feasible for builders to prepare blocks for all forks, and serve a payload for whatever fork the validator wants immediately. Seems like we could actually go with option 1. \r\n\r\nThe remaining question would be whether to include the full [PayloadAttributesV1](https://github.com/ethereum/execution-apis/blob/main/src/engine/specification.md#payloadattributesv1) object or only `feeRecipient`, besides the `headBlockHash`.\r\n\r\n```go\r\nbuilder_getPayloadHeader(headBlockHash, feeRecipient) -> PayloadHeader\r\n\r\nor\r\n\r\nbuilder_getPayloadHeader(headBlockHash, payloadAttributes) -> PayloadHeader\r\n```\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1086610035/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1086696916",
    "html_url": "https://github.com/flashbots/mev-boost/issues/71#issuecomment-1086696916",
    "issue_url": "https://api.github.com/repos/flashbots/mev-boost/issues/71",
    "id": 1086696916,
    "node_id": "IC_kwDOGZSKs85Axa3U",
    "user": {
      "login": "terencechain",
      "id": 21316537,
      "node_id": "MDQ6VXNlcjIxMzE2NTM3",
      "avatar_url": "https://avatars.githubusercontent.com/u/21316537?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/terencechain",
      "html_url": "https://github.com/terencechain",
      "followers_url": "https://api.github.com/users/terencechain/followers",
      "following_url": "https://api.github.com/users/terencechain/following{/other_user}",
      "gists_url": "https://api.github.com/users/terencechain/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/terencechain/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/terencechain/subscriptions",
      "organizations_url": "https://api.github.com/users/terencechain/orgs",
      "repos_url": "https://api.github.com/users/terencechain/repos",
      "events_url": "https://api.github.com/users/terencechain/events{/privacy}",
      "received_events_url": "https://api.github.com/users/terencechain/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-02T18:26:47Z",
    "updated_at": "2022-04-02T18:26:47Z",
    "author_association": "COLLABORATOR",
    "body": "If the builder needs access to the parent beacon state or beacon block, it may be more accessible to use `headBeaconBlockRoot` than  `headBlockHash` as the first argument \r\n```python\r\nbuilder_getPayloadHeader(headBeaconBlockRoot, feeRecipient or payloadAttributes) -> PayloadHeader\r\n```\r\n\r\nFrom the consensus client, at least in Prysm, it's easier to look up beacon state, beacon block, and payload using the block root than using payload hash \r\n",
    "reactions": {
      "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1086696916/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1086713475",
    "html_url": "https://github.com/flashbots/mev-boost/issues/71#issuecomment-1086713475",
    "issue_url": "https://api.github.com/repos/flashbots/mev-boost/issues/71",
    "id": 1086713475,
    "node_id": "IC_kwDOGZSKs85Axe6D",
    "user": {
      "login": "jparyani",
      "id": 1595880,
      "node_id": "MDQ6VXNlcjE1OTU4ODA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1595880?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jparyani",
      "html_url": "https://github.com/jparyani",
      "followers_url": "https://api.github.com/users/jparyani/followers",
      "following_url": "https://api.github.com/users/jparyani/following{/other_user}",
      "gists_url": "https://api.github.com/users/jparyani/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jparyani/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jparyani/subscriptions",
      "organizations_url": "https://api.github.com/users/jparyani/orgs",
      "repos_url": "https://api.github.com/users/jparyani/repos",
      "events_url": "https://api.github.com/users/jparyani/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jparyani/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-02T20:04:44Z",
    "updated_at": "2022-04-02T20:04:44Z",
    "author_association": "MEMBER",
    "body": "> If the builder needs access to the parent beacon state or beacon block, it may be more accessible to use headBeaconBlockRoot than headBlockHash as the first argument\r\n\r\nI’m not seeing a case where the builder would need access to the beacon chain state, but I might be missing something, @terencechain do you have any examples?",
    "reactions": {
      "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1086713475/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1086715998",
    "html_url": "https://github.com/flashbots/mev-boost/issues/71#issuecomment-1086715998",
    "issue_url": "https://api.github.com/repos/flashbots/mev-boost/issues/71",
    "id": 1086715998,
    "node_id": "IC_kwDOGZSKs85Axfhe",
    "user": {
      "login": "terencechain",
      "id": 21316537,
      "node_id": "MDQ6VXNlcjIxMzE2NTM3",
      "avatar_url": "https://avatars.githubusercontent.com/u/21316537?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/terencechain",
      "html_url": "https://github.com/terencechain",
      "followers_url": "https://api.github.com/users/terencechain/followers",
      "following_url": "https://api.github.com/users/terencechain/following{/other_user}",
      "gists_url": "https://api.github.com/users/terencechain/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/terencechain/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/terencechain/subscriptions",
      "organizations_url": "https://api.github.com/users/terencechain/orgs",
      "repos_url": "https://api.github.com/users/terencechain/repos",
      "events_url": "https://api.github.com/users/terencechain/events{/privacy}",
      "received_events_url": "https://api.github.com/users/terencechain/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-02T20:20:10Z",
    "updated_at": "2022-04-02T20:20:10Z",
    "author_association": "COLLABORATOR",
    "body": "I also don't see it, but I think it was mentioned a few times above, if the builder doesn't need to access the beacon chain state then the payload hash shall work just fine ",
    "reactions": {
      "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1086715998/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1086750733",
    "html_url": "https://github.com/flashbots/mev-boost/issues/71#issuecomment-1086750733",
    "issue_url": "https://api.github.com/repos/flashbots/mev-boost/issues/71",
    "id": 1086750733,
    "node_id": "IC_kwDOGZSKs85AxoAN",
    "user": {
      "login": "thegostep",
      "id": 15959632,
      "node_id": "MDQ6VXNlcjE1OTU5NjMy",
      "avatar_url": "https://avatars.githubusercontent.com/u/15959632?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/thegostep",
      "html_url": "https://github.com/thegostep",
      "followers_url": "https://api.github.com/users/thegostep/followers",
      "following_url": "https://api.github.com/users/thegostep/following{/other_user}",
      "gists_url": "https://api.github.com/users/thegostep/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/thegostep/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/thegostep/subscriptions",
      "organizations_url": "https://api.github.com/users/thegostep/orgs",
      "repos_url": "https://api.github.com/users/thegostep/repos",
      "events_url": "https://api.github.com/users/thegostep/events{/privacy}",
      "received_events_url": "https://api.github.com/users/thegostep/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-03T00:46:34Z",
    "updated_at": "2022-04-03T00:46:34Z",
    "author_association": "CONTRIBUTOR",
    "body": "If going with the builder_getPayloadHeader approach, would mev-boost still performing polling or do a single call to all relays? If a single call, how long would it wait for a response before returning a payload to the BN?",
    "reactions": {
      "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1086750733/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1086900946",
    "html_url": "https://github.com/flashbots/mev-boost/issues/71#issuecomment-1086900946",
    "issue_url": "https://api.github.com/repos/flashbots/mev-boost/issues/71",
    "id": 1086900946,
    "node_id": "IC_kwDOGZSKs85AyMrS",
    "user": {
      "login": "metachris",
      "id": 116939,
      "node_id": "MDQ6VXNlcjExNjkzOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/116939?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/metachris",
      "html_url": "https://github.com/metachris",
      "followers_url": "https://api.github.com/users/metachris/followers",
      "following_url": "https://api.github.com/users/metachris/following{/other_user}",
      "gists_url": "https://api.github.com/users/metachris/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/metachris/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/metachris/subscriptions",
      "organizations_url": "https://api.github.com/users/metachris/orgs",
      "repos_url": "https://api.github.com/users/metachris/repos",
      "events_url": "https://api.github.com/users/metachris/events{/privacy}",
      "received_events_url": "https://api.github.com/users/metachris/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-03T16:20:44Z",
    "updated_at": "2022-04-03T16:20:44Z",
    "author_association": "COLLABORATOR",
    "body": "Assuming the relays already have the headers prepared before the call, the responses should arrive fairly quickly (a few ms + network latency). What would be an acceptable upper limit? \r\n\r\nDoes waiting ~2 seconds for the `getPayloadHeaderV1` responses from the relays feel too much? I guess that should suffice for a little computing overhead + network latency.",
    "reactions": {
      "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1086900946/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1087379652",
    "html_url": "https://github.com/flashbots/mev-boost/issues/71#issuecomment-1087379652",
    "issue_url": "https://api.github.com/repos/flashbots/mev-boost/issues/71",
    "id": 1087379652,
    "node_id": "IC_kwDOGZSKs85A0BjE",
    "user": {
      "login": "mkalinin",
      "id": 1892772,
      "node_id": "MDQ6VXNlcjE4OTI3NzI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1892772?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mkalinin",
      "html_url": "https://github.com/mkalinin",
      "followers_url": "https://api.github.com/users/mkalinin/followers",
      "following_url": "https://api.github.com/users/mkalinin/following{/other_user}",
      "gists_url": "https://api.github.com/users/mkalinin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mkalinin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mkalinin/subscriptions",
      "organizations_url": "https://api.github.com/users/mkalinin/orgs",
      "repos_url": "https://api.github.com/users/mkalinin/repos",
      "events_url": "https://api.github.com/users/mkalinin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mkalinin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-04T10:24:53Z",
    "updated_at": "2022-04-04T10:24:53Z",
    "author_association": "NONE",
    "body": "> I’m not seeing a case where the builder would need access to the beacon chain state, but I might be missing something, @terencechain do you have any examples?\r\n\r\nThis would only matter if we have `prepare_` call which is not what ppl are leaning to.\r\n\r\n> Does waiting ~2 seconds for the getPayloadHeaderV1 responses from the relays feel too much? I guess that should suffice for a little computing overhead + network latency.\r\n\r\nIdeally, mev-boost responds immediately to `builder_getPayloadHeaderV1` call in the same fashion as EL client do with `engine_getPayloadV1` call. This is because CL is supposed to make the latter call right at the slot boundary while constructing a block and expects to get the built payload immediately. So, mev-boost should probably do polling and be ready to respond quickly to CL's request as it's mentioned by @thegostep",
    "reactions": {
      "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1087379652/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1092877848",
    "html_url": "https://github.com/flashbots/mev-boost/issues/71#issuecomment-1092877848",
    "issue_url": "https://api.github.com/repos/flashbots/mev-boost/issues/71",
    "id": 1092877848,
    "node_id": "IC_kwDOGZSKs85BI_4Y",
    "user": {
      "login": "metachris",
      "id": 116939,
      "node_id": "MDQ6VXNlcjExNjkzOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/116939?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/metachris",
      "html_url": "https://github.com/metachris",
      "followers_url": "https://api.github.com/users/metachris/followers",
      "following_url": "https://api.github.com/users/metachris/following{/other_user}",
      "gists_url": "https://api.github.com/users/metachris/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/metachris/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/metachris/subscriptions",
      "organizations_url": "https://api.github.com/users/metachris/orgs",
      "repos_url": "https://api.github.com/users/metachris/repos",
      "events_url": "https://api.github.com/users/metachris/events{/privacy}",
      "received_events_url": "https://api.github.com/users/metachris/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-08T13:46:42Z",
    "updated_at": "2022-04-08T13:46:42Z",
    "author_association": "COLLABORATOR",
    "body": "`engine_forkchoiceUpdatedV1` was removed with #82 \r\n\r\nClosing this now. Please open a new issue to continue any conversations, if applicable.",
    "reactions": {
      "url": "https://api.github.com/repos/flashbots/mev-boost/issues/comments/1092877848/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
