{
  "url": "https://api.github.com/repos/MyCryptoHQ/MyCrypto/issues/103",
  "repository_url": "https://api.github.com/repos/MyCryptoHQ/MyCrypto",
  "labels_url": "https://api.github.com/repos/MyCryptoHQ/MyCrypto/issues/103/labels{/name}",
  "comments_url": "https://api.github.com/repos/MyCryptoHQ/MyCrypto/issues/103/comments",
  "events_url": "https://api.github.com/repos/MyCryptoHQ/MyCrypto/issues/103/events",
  "html_url": "https://github.com/MyCryptoHQ/MyCrypto/issues/103",
  "id": 247225791,
  "node_id": "MDU6SXNzdWUyNDcyMjU3OTE=",
  "number": 103,
  "title": "Wallet Class Structure",
  "user": {
    "login": "skubakdj",
    "id": 8206446,
    "node_id": "MDQ6VXNlcjgyMDY0NDY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8206446?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/skubakdj",
    "html_url": "https://github.com/skubakdj",
    "followers_url": "https://api.github.com/users/skubakdj/followers",
    "following_url": "https://api.github.com/users/skubakdj/following{/other_user}",
    "gists_url": "https://api.github.com/users/skubakdj/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/skubakdj/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/skubakdj/subscriptions",
    "organizations_url": "https://api.github.com/users/skubakdj/orgs",
    "repos_url": "https://api.github.com/users/skubakdj/repos",
    "events_url": "https://api.github.com/users/skubakdj/events{/privacy}",
    "received_events_url": "https://api.github.com/users/skubakdj/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": {
    "login": "skubakdj",
    "id": 8206446,
    "node_id": "MDQ6VXNlcjgyMDY0NDY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8206446?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/skubakdj",
    "html_url": "https://github.com/skubakdj",
    "followers_url": "https://api.github.com/users/skubakdj/followers",
    "following_url": "https://api.github.com/users/skubakdj/following{/other_user}",
    "gists_url": "https://api.github.com/users/skubakdj/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/skubakdj/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/skubakdj/subscriptions",
    "organizations_url": "https://api.github.com/users/skubakdj/orgs",
    "repos_url": "https://api.github.com/users/skubakdj/repos",
    "events_url": "https://api.github.com/users/skubakdj/events{/privacy}",
    "received_events_url": "https://api.github.com/users/skubakdj/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "skubakdj",
      "id": 8206446,
      "node_id": "MDQ6VXNlcjgyMDY0NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8206446?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/skubakdj",
      "html_url": "https://github.com/skubakdj",
      "followers_url": "https://api.github.com/users/skubakdj/followers",
      "following_url": "https://api.github.com/users/skubakdj/following{/other_user}",
      "gists_url": "https://api.github.com/users/skubakdj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/skubakdj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/skubakdj/subscriptions",
      "organizations_url": "https://api.github.com/users/skubakdj/orgs",
      "repos_url": "https://api.github.com/users/skubakdj/repos",
      "events_url": "https://api.github.com/users/skubakdj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/skubakdj/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 12,
  "created_at": "2017-08-01T22:55:21Z",
  "updated_at": "2017-11-28T04:19:06Z",
  "closed_at": "2017-11-28T04:19:05Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "Hey everyone!\r\n\r\nLet's use this issue to determine our class structure for the different wallet types we support. I've piggybacked on what's currently in our codebase and divised a simple structure that I hope will be a good starting point for discussion: \r\n\r\n```\r\nBaseWallet\r\n|   getAddress()\r\n|   getNakedAddress()   \r\n|\r\n|__ PrivkeyWallet( privkey )\r\n|   |   privKey\r\n|   |   pubKey\r\n|   |   address\r\n|   |   generate()\r\n|   |   getPrivateKey()\r\n|   |   getAddress()\r\n|   |   toKeystoreFile()\r\n|   |   signRawTransaction()\r\n|   |   signMessage()\r\n|   |        \r\n|   |__ EncryptedPrivkeyWallet( key, pass )\r\n|   |       super( decryptPrivateKey( key, pass ) )\r\n|   |\r\n|   |__ MnemonicWallet( phrase, pass )\r\n|   |       super( decryptMnemonicPhraseToPrivkey( phrase, pass ) )\r\n|   |\r\n|   |__ KeystoreWallet( keystore, pass )\r\n|   |       super( decryptKeystoreToPrivkey( keystore, pass ) )\r\n|   |\r\n|   |__ PresaleWallet( presale, pass )\r\n|           super( decryptPresaleToPrivkey( presale, pass ) ) \r\n|\r\n|__ LedgerWallet\r\n|       address\r\n|       signRawTransaction()\r\n|       signMessage()\r\n|\r\n|__ TrezorWallet\r\n        address\r\n        signRawTransaction()\r\n        signMessage()\r\n```\r\n\r\n\r\nTo summarize, all wallets inherit from `BaseWallet` and any wallet dependent on deriving a private key (`EncryptedPrivkeyWallet`, `KeystoreWallet`, `PresaleWallet`, `MnemonicWallet`) is essentially a wrapper for `PrivkeyWallet`. All wallets should come equipped with methods to sign transactions and messages (`signRawTransaction()` & `signMessage()`, respectively). \r\n\r\nAdditional work will probably have to go into `LedgerWallet` and `TrezorWallet`, specifically dealing with HD key paths & verifying addresses exist. \r\n\r\nPlease let me know what y'all think :smile: \r\n\r\n@dternyak  @crptm @wbobeirne\r\n",
  "closed_by": {
    "login": "dternyak",
    "id": 7861465,
    "node_id": "MDQ6VXNlcjc4NjE0NjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/7861465?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/dternyak",
    "html_url": "https://github.com/dternyak",
    "followers_url": "https://api.github.com/users/dternyak/followers",
    "following_url": "https://api.github.com/users/dternyak/following{/other_user}",
    "gists_url": "https://api.github.com/users/dternyak/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/dternyak/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/dternyak/subscriptions",
    "organizations_url": "https://api.github.com/users/dternyak/orgs",
    "repos_url": "https://api.github.com/users/dternyak/repos",
    "events_url": "https://api.github.com/users/dternyak/events{/privacy}",
    "received_events_url": "https://api.github.com/users/dternyak/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/MyCryptoHQ/MyCrypto/issues/103/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/MyCryptoHQ/MyCrypto/issues/103/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/MyCryptoHQ/MyCrypto/issues/comments/319528266",
    "html_url": "https://github.com/MyCryptoHQ/MyCrypto/issues/103#issuecomment-319528266",
    "issue_url": "https://api.github.com/repos/MyCryptoHQ/MyCrypto/issues/103",
    "id": 319528266,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxOTUyODI2Ng==",
    "user": {
      "login": "wbobeirne",
      "id": 649992,
      "node_id": "MDQ6VXNlcjY0OTk5Mg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wbobeirne",
      "html_url": "https://github.com/wbobeirne",
      "followers_url": "https://api.github.com/users/wbobeirne/followers",
      "following_url": "https://api.github.com/users/wbobeirne/following{/other_user}",
      "gists_url": "https://api.github.com/users/wbobeirne/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wbobeirne/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wbobeirne/subscriptions",
      "organizations_url": "https://api.github.com/users/wbobeirne/orgs",
      "repos_url": "https://api.github.com/users/wbobeirne/repos",
      "events_url": "https://api.github.com/users/wbobeirne/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wbobeirne/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-01T23:49:57Z",
    "updated_at": "2017-08-01T23:49:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "Great diagram!\r\n\r\nSeems to me that all wallets will have a `signRawTransaction()` as well, but that's not shared in any way that I see here. But this is a great idea to standardize, to get rid of [shit like this](https://github.com/kvhnuke/etherwallet/blob/mercury/app/scripts/uiFuncs.js#L114).\r\n\r\nOne thing I see a lot of in v3 is separate conditionals for each hardware wallet to do their unlocking behavior. I think it would be great to either:\r\n1) Have a `HardwareWallet` class that standardizes this behavior\r\n2) Have all wallet classes have this behavior, but wallets that don't need to, simply resolve the promise immediately\r\n\r\nI think 1 should happen for sure, but I kind of like the idea of 2 for code simplicity. That way we can just always call `wallet.unlock().then( /* rest of stuff */ )` and avoid conditional soup.\r\n\r\nYou could also take that idea further and have `unlock`ing be implemented by everything, just have some of them be synchronous and resolve with promises after doing they checks they would normally do in their constructor.",
    "reactions": {
      "url": "https://api.github.com/repos/MyCryptoHQ/MyCrypto/issues/comments/319528266/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/MyCryptoHQ/MyCrypto/issues/comments/319543088",
    "html_url": "https://github.com/MyCryptoHQ/MyCrypto/issues/103#issuecomment-319543088",
    "issue_url": "https://api.github.com/repos/MyCryptoHQ/MyCrypto/issues/103",
    "id": 319543088,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxOTU0MzA4OA==",
    "user": {
      "login": "dternyak",
      "id": 7861465,
      "node_id": "MDQ6VXNlcjc4NjE0NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7861465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dternyak",
      "html_url": "https://github.com/dternyak",
      "followers_url": "https://api.github.com/users/dternyak/followers",
      "following_url": "https://api.github.com/users/dternyak/following{/other_user}",
      "gists_url": "https://api.github.com/users/dternyak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dternyak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dternyak/subscriptions",
      "organizations_url": "https://api.github.com/users/dternyak/orgs",
      "repos_url": "https://api.github.com/users/dternyak/repos",
      "events_url": "https://api.github.com/users/dternyak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dternyak/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-02T01:34:36Z",
    "updated_at": "2017-08-02T01:34:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "Awesome diagram @skubakdj!\r\n\r\n@crptm And I had a discussion about having an async API for all wallet classes, and came to the same conclusion of having the immediate resolve pattern @wbobeirne mentioned above.\r\n\r\nSo far, I can identify the following methods that would be async:\r\n1. `unlock` (as @wbobeirne mentioned above)\r\n2. `signMessage`\r\n3. `getAddress`\r\n4. `signRawTransaction`\r\n5. `signMessage`\r\n\r\nAll wallet classes should implement this basic interface, and since hardware / managed wallets will be async, we can avoid the \"conditional soup\" when interacting with a wallet instance as @wbobeirne mentions, and should result in simpler code overall. \r\n\r\nSince parity phrases are no longer supported, we would only need to resolve immediately since we would already have the private key for:\r\n1. `UTC wallets`\r\n2. `Raw private keys`",
    "reactions": {
      "url": "https://api.github.com/repos/MyCryptoHQ/MyCrypto/issues/comments/319543088/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/MyCryptoHQ/MyCrypto/issues/comments/319554586",
    "html_url": "https://github.com/MyCryptoHQ/MyCrypto/issues/103#issuecomment-319554586",
    "issue_url": "https://api.github.com/repos/MyCryptoHQ/MyCrypto/issues/103",
    "id": 319554586,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxOTU1NDU4Ng==",
    "user": {
      "login": "wbobeirne",
      "id": 649992,
      "node_id": "MDQ6VXNlcjY0OTk5Mg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wbobeirne",
      "html_url": "https://github.com/wbobeirne",
      "followers_url": "https://api.github.com/users/wbobeirne/followers",
      "following_url": "https://api.github.com/users/wbobeirne/following{/other_user}",
      "gists_url": "https://api.github.com/users/wbobeirne/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wbobeirne/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wbobeirne/subscriptions",
      "organizations_url": "https://api.github.com/users/wbobeirne/orgs",
      "repos_url": "https://api.github.com/users/wbobeirne/repos",
      "events_url": "https://api.github.com/users/wbobeirne/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wbobeirne/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-02T03:01:58Z",
    "updated_at": "2017-08-02T03:02:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "That all sounds dope 👍 \r\n\r\nThe only thing I'm still not clear on is how we'll handle the additional UI of unlocking as a part of the promise. Not to mention selecting the path and address. It'd be a little odd to have a `*Wallet` class dispatch to redux store or something like that.\r\n\r\nPerhaps we could have a function that takes in a wallet as an arg, and handles the reducer side of it? Something like:\r\n\r\n```js\r\n// Fires `WALLET_UNLOCK`, followed by `WALLET_UNLOCK_SUCCESS` or\r\n// `WALLET_UNLOCK_FAILURE` upon unlocking. Also potentially calls\r\n// `WALLET_UNLOCK_SELECT_PATH_AND_ADDRESS` or something\r\n// along the way.\r\nuiUnlock(wallet).then((unlockedWallet) => {\r\n  /* wallet and unlockedWallet are the same object */\r\n});\r\n```\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/MyCryptoHQ/MyCrypto/issues/comments/319554586/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/MyCryptoHQ/MyCrypto/issues/comments/319554826",
    "html_url": "https://github.com/MyCryptoHQ/MyCrypto/issues/103#issuecomment-319554826",
    "issue_url": "https://api.github.com/repos/MyCryptoHQ/MyCrypto/issues/103",
    "id": 319554826,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxOTU1NDgyNg==",
    "user": {
      "login": "dternyak",
      "id": 7861465,
      "node_id": "MDQ6VXNlcjc4NjE0NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7861465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dternyak",
      "html_url": "https://github.com/dternyak",
      "followers_url": "https://api.github.com/users/dternyak/followers",
      "following_url": "https://api.github.com/users/dternyak/following{/other_user}",
      "gists_url": "https://api.github.com/users/dternyak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dternyak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dternyak/subscriptions",
      "organizations_url": "https://api.github.com/users/dternyak/orgs",
      "repos_url": "https://api.github.com/users/dternyak/repos",
      "events_url": "https://api.github.com/users/dternyak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dternyak/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-02T03:04:03Z",
    "updated_at": "2017-08-02T03:04:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "I like it! Great idea, didn't think about state management yet.",
    "reactions": {
      "url": "https://api.github.com/repos/MyCryptoHQ/MyCrypto/issues/comments/319554826/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/MyCryptoHQ/MyCrypto/issues/comments/319721670",
    "html_url": "https://github.com/MyCryptoHQ/MyCrypto/issues/103#issuecomment-319721670",
    "issue_url": "https://api.github.com/repos/MyCryptoHQ/MyCrypto/issues/103",
    "id": 319721670,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxOTcyMTY3MA==",
    "user": {
      "login": "skubakdj",
      "id": 8206446,
      "node_id": "MDQ6VXNlcjgyMDY0NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8206446?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/skubakdj",
      "html_url": "https://github.com/skubakdj",
      "followers_url": "https://api.github.com/users/skubakdj/followers",
      "following_url": "https://api.github.com/users/skubakdj/following{/other_user}",
      "gists_url": "https://api.github.com/users/skubakdj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/skubakdj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/skubakdj/subscriptions",
      "organizations_url": "https://api.github.com/users/skubakdj/orgs",
      "repos_url": "https://api.github.com/users/skubakdj/repos",
      "events_url": "https://api.github.com/users/skubakdj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/skubakdj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-02T16:14:26Z",
    "updated_at": "2017-08-14T22:54:06Z",
    "author_association": "CONTRIBUTOR",
    "body": "Really love the idea of keeping a standard async api throughout, that will **greatly** simplify wallet interaction :+1: \r\n\r\n@dternyak could we confirm the different private key wallets we'll be supporting? I think there might be a few more for which we can resolve immediately. From issue #80 :\r\n\r\n1. `UTC wallets`\r\n2. `Raw private key`\r\n3. `Encrypted private key`\r\n4. `Presale JSON` \r\n5. `BIP39 Mnemonic`\r\n\r\nSide note -- browsing the live v3 site, I'm guessing the `Mnemonic Phrase` option is the BIP39 implementation and, interestingly, I don't see a selection for `Presale JSON`, though I think it may have been around in previous versions. ",
    "reactions": {
      "url": "https://api.github.com/repos/MyCryptoHQ/MyCrypto/issues/comments/319721670/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/MyCryptoHQ/MyCrypto/issues/comments/319811752",
    "html_url": "https://github.com/MyCryptoHQ/MyCrypto/issues/103#issuecomment-319811752",
    "issue_url": "https://api.github.com/repos/MyCryptoHQ/MyCrypto/issues/103",
    "id": 319811752,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxOTgxMTc1Mg==",
    "user": {
      "login": "dternyak",
      "id": 7861465,
      "node_id": "MDQ6VXNlcjc4NjE0NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7861465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dternyak",
      "html_url": "https://github.com/dternyak",
      "followers_url": "https://api.github.com/users/dternyak/followers",
      "following_url": "https://api.github.com/users/dternyak/following{/other_user}",
      "gists_url": "https://api.github.com/users/dternyak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dternyak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dternyak/subscriptions",
      "organizations_url": "https://api.github.com/users/dternyak/orgs",
      "repos_url": "https://api.github.com/users/dternyak/repos",
      "events_url": "https://api.github.com/users/dternyak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dternyak/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-02T22:02:54Z",
    "updated_at": "2017-08-02T22:02:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "@skubakdj I think @tayvano should actually confirm here :)",
    "reactions": {
      "url": "https://api.github.com/repos/MyCryptoHQ/MyCrypto/issues/comments/319811752/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/MyCryptoHQ/MyCrypto/issues/comments/320194697",
    "html_url": "https://github.com/MyCryptoHQ/MyCrypto/issues/103#issuecomment-320194697",
    "issue_url": "https://api.github.com/repos/MyCryptoHQ/MyCrypto/issues/103",
    "id": 320194697,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyMDE5NDY5Nw==",
    "user": {
      "login": "tayvano",
      "id": 7924827,
      "node_id": "MDQ6VXNlcjc5MjQ4Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7924827?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tayvano",
      "html_url": "https://github.com/tayvano",
      "followers_url": "https://api.github.com/users/tayvano/followers",
      "following_url": "https://api.github.com/users/tayvano/following{/other_user}",
      "gists_url": "https://api.github.com/users/tayvano/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tayvano/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tayvano/subscriptions",
      "organizations_url": "https://api.github.com/users/tayvano/orgs",
      "repos_url": "https://api.github.com/users/tayvano/repos",
      "events_url": "https://api.github.com/users/tayvano/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tayvano/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-04T08:50:45Z",
    "updated_at": "2017-08-04T08:51:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "1. UTC / Keystore / v3 files. These are the standard wallet files created by geth. That would be the `tov3()` method here: https://github.com/ethereumjs/ethereumjs-wallet#remarks-about-tov3\r\n    - The n value cannot be `262144` in browser. It has to be a um...thing. Like 1024...2048....etc. We should run test to see how high we can get it while not breaking browsers.\r\n\r\n2. Yup. ✅\r\n\r\n3. This is same input as # 2 but if its not 64 characters, then you show a password dialog. This is not something we generate anymore. `fromEtherWallet(input, password) - import a wallet generated by EtherWallet` here: https://github.com/ethereumjs/ethereumjs-wallet#thirdparty-api \r\n\r\n4. Yup. JSON file. `fromEthSale(input, password)` https://github.com/ethereumjs/ethereumjs-wallet#wallet-api\r\n\r\n5. Yup. User should be able to select any path. I would recommend using the existing libraries in V3 as we spent a lot of time figuring that shit out. This has an optional password. Can be any number of words. \r\n\r\n- Trezor, Ledger, Digital Bitbox, via web3 will be methods in future where you only have address, not PK. We should set something so that we can adjust things easily based on whether we have access to key or not, not based on specific format of key.\r\n\r\n- Also just found this which may be salvageable? https://github.com/MyEtherWallet/mew-wallet (prob not)\r\n\r\n- HD paths are a shitstorm. Do not try to understand. Do not change. :P https://github.com/kvhnuke/etherwallet/blob/mercury/app/scripts/controllers/decryptWalletCtrl.js#L11-L26\r\n\r\n- We should assume that we do not have the actual private key (for cases like Ledger / TREZOR)\r\n\r\n- We will likely add a \"connect via web3\" item IF you detect web3 in browser. Metamask team can provide guidance. Find kumavis in the dreamteam channel. \r\n\r\n- Longest running request ever: encrypt a private key on MEW. (just keep in mind. no need to do it now if it's a pain. Not high priority.)",
    "reactions": {
      "url": "https://api.github.com/repos/MyCryptoHQ/MyCrypto/issues/comments/320194697/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/MyCryptoHQ/MyCrypto/issues/comments/322436042",
    "html_url": "https://github.com/MyCryptoHQ/MyCrypto/issues/103#issuecomment-322436042",
    "issue_url": "https://api.github.com/repos/MyCryptoHQ/MyCrypto/issues/103",
    "id": 322436042,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyMjQzNjA0Mg==",
    "user": {
      "login": "crptm",
      "id": 26779763,
      "node_id": "MDQ6VXNlcjI2Nzc5NzYz",
      "avatar_url": "https://avatars.githubusercontent.com/u/26779763?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/crptm",
      "html_url": "https://github.com/crptm",
      "followers_url": "https://api.github.com/users/crptm/followers",
      "following_url": "https://api.github.com/users/crptm/following{/other_user}",
      "gists_url": "https://api.github.com/users/crptm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/crptm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/crptm/subscriptions",
      "organizations_url": "https://api.github.com/users/crptm/orgs",
      "repos_url": "https://api.github.com/users/crptm/repos",
      "events_url": "https://api.github.com/users/crptm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/crptm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-15T10:43:51Z",
    "updated_at": "2017-08-15T10:43:51Z",
    "author_association": "CONTRIBUTOR",
    "body": "PKeyWallet should have toKeystore(password). Sign should not be on all classes because of 'view with address only' - we might reconsider it if we have address first flow everywhere. unlock().then() wouldnt work bc it needs custom UI",
    "reactions": {
      "url": "https://api.github.com/repos/MyCryptoHQ/MyCrypto/issues/comments/322436042/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/MyCryptoHQ/MyCrypto/issues/comments/322437351",
    "html_url": "https://github.com/MyCryptoHQ/MyCrypto/issues/103#issuecomment-322437351",
    "issue_url": "https://api.github.com/repos/MyCryptoHQ/MyCrypto/issues/103",
    "id": 322437351,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyMjQzNzM1MQ==",
    "user": {
      "login": "crptm",
      "id": 26779763,
      "node_id": "MDQ6VXNlcjI2Nzc5NzYz",
      "avatar_url": "https://avatars.githubusercontent.com/u/26779763?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/crptm",
      "html_url": "https://github.com/crptm",
      "followers_url": "https://api.github.com/users/crptm/followers",
      "following_url": "https://api.github.com/users/crptm/following{/other_user}",
      "gists_url": "https://api.github.com/users/crptm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/crptm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/crptm/subscriptions",
      "organizations_url": "https://api.github.com/users/crptm/orgs",
      "repos_url": "https://api.github.com/users/crptm/repos",
      "events_url": "https://api.github.com/users/crptm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/crptm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-15T10:52:17Z",
    "updated_at": "2017-08-15T10:52:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "If we have address first flow, we could have same async unlock flow for hw/regular wallets. MEW key apps need a bit different logic. We should have something like GetUnlockComponent(): Component<Props>, where Props:\r\n\r\n```\r\n{\r\n  tx: Transaction,\r\n  onTxSign(signedTx?) // for regular wallets\r\n  onFinish() // for mew key like flow when component handles broadcasts, \r\n             // so we have a point to reset relevant page state/reload balances\r\n  onError()\r\n}\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/MyCryptoHQ/MyCrypto/issues/comments/322437351/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/MyCryptoHQ/MyCrypto/issues/comments/323800536",
    "html_url": "https://github.com/MyCryptoHQ/MyCrypto/issues/103#issuecomment-323800536",
    "issue_url": "https://api.github.com/repos/MyCryptoHQ/MyCrypto/issues/103",
    "id": 323800536,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyMzgwMDUzNg==",
    "user": {
      "login": "skubakdj",
      "id": 8206446,
      "node_id": "MDQ6VXNlcjgyMDY0NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8206446?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/skubakdj",
      "html_url": "https://github.com/skubakdj",
      "followers_url": "https://api.github.com/users/skubakdj/followers",
      "following_url": "https://api.github.com/users/skubakdj/following{/other_user}",
      "gists_url": "https://api.github.com/users/skubakdj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/skubakdj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/skubakdj/subscriptions",
      "organizations_url": "https://api.github.com/users/skubakdj/orgs",
      "repos_url": "https://api.github.com/users/skubakdj/repos",
      "events_url": "https://api.github.com/users/skubakdj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/skubakdj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-21T17:07:41Z",
    "updated_at": "2017-08-21T17:08:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "So for example, if we had a private key wallet with address-first flow, would we only ask for a user's address in the `Wallet Decrypt` component, and then later ask for the private key to 'unlock' the wallet when they try to sign something?",
    "reactions": {
      "url": "https://api.github.com/repos/MyCryptoHQ/MyCrypto/issues/comments/323800536/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/MyCryptoHQ/MyCrypto/issues/comments/323809557",
    "html_url": "https://github.com/MyCryptoHQ/MyCrypto/issues/103#issuecomment-323809557",
    "issue_url": "https://api.github.com/repos/MyCryptoHQ/MyCrypto/issues/103",
    "id": 323809557,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyMzgwOTU1Nw==",
    "user": {
      "login": "tayvano",
      "id": 7924827,
      "node_id": "MDQ6VXNlcjc5MjQ4Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7924827?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tayvano",
      "html_url": "https://github.com/tayvano",
      "followers_url": "https://api.github.com/users/tayvano/followers",
      "following_url": "https://api.github.com/users/tayvano/following{/other_user}",
      "gists_url": "https://api.github.com/users/tayvano/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tayvano/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tayvano/subscriptions",
      "organizations_url": "https://api.github.com/users/tayvano/orgs",
      "repos_url": "https://api.github.com/users/tayvano/repos",
      "events_url": "https://api.github.com/users/tayvano/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tayvano/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-21T17:53:48Z",
    "updated_at": "2017-08-21T17:53:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "Correct. This may be easier to do in general, considering it is the flow for hardware wallets & MetaMask and any iPhone signers (like the one Glenn is working on). Basically it would use same flow for everyone. There is a non-working branch on v3 that does this. You select private key / keystore file and instead of the file you enter your address. When you go to sign it, itll pop up a modal asking for your actual file so that it can sign it. ",
    "reactions": {
      "url": "https://api.github.com/repos/MyCryptoHQ/MyCrypto/issues/comments/323809557/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/MyCryptoHQ/MyCrypto/issues/comments/347409060",
    "html_url": "https://github.com/MyCryptoHQ/MyCrypto/issues/103#issuecomment-347409060",
    "issue_url": "https://api.github.com/repos/MyCryptoHQ/MyCrypto/issues/103",
    "id": 347409060,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NzQwOTA2MA==",
    "user": {
      "login": "dternyak",
      "id": 7861465,
      "node_id": "MDQ6VXNlcjc4NjE0NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7861465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dternyak",
      "html_url": "https://github.com/dternyak",
      "followers_url": "https://api.github.com/users/dternyak/followers",
      "following_url": "https://api.github.com/users/dternyak/following{/other_user}",
      "gists_url": "https://api.github.com/users/dternyak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dternyak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dternyak/subscriptions",
      "organizations_url": "https://api.github.com/users/dternyak/orgs",
      "repos_url": "https://api.github.com/users/dternyak/repos",
      "events_url": "https://api.github.com/users/dternyak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dternyak/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-28T04:19:05Z",
    "updated_at": "2017-11-28T04:19:05Z",
    "author_association": "CONTRIBUTOR",
    "body": "Closing - happy to re-open if we need to continue this design discussion.",
    "reactions": {
      "url": "https://api.github.com/repos/MyCryptoHQ/MyCrypto/issues/comments/347409060/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
