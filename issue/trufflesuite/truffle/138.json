{
  "url": "https://api.github.com/repos/trufflesuite/truffle/issues/138",
  "repository_url": "https://api.github.com/repos/trufflesuite/truffle",
  "labels_url": "https://api.github.com/repos/trufflesuite/truffle/issues/138/labels{/name}",
  "comments_url": "https://api.github.com/repos/trufflesuite/truffle/issues/138/comments",
  "events_url": "https://api.github.com/repos/trufflesuite/truffle/issues/138/events",
  "html_url": "https://github.com/trufflesuite/truffle/issues/138",
  "id": 149259381,
  "node_id": "MDU6SXNzdWUxNDkyNTkzODE=",
  "number": 138,
  "title": "TIP #1: Migrations as Modular Scripts",
  "user": {
    "login": "tcoulter",
    "id": 92629,
    "node_id": "MDQ6VXNlcjkyNjI5",
    "avatar_url": "https://avatars.githubusercontent.com/u/92629?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tcoulter",
    "html_url": "https://github.com/tcoulter",
    "followers_url": "https://api.github.com/users/tcoulter/followers",
    "following_url": "https://api.github.com/users/tcoulter/following{/other_user}",
    "gists_url": "https://api.github.com/users/tcoulter/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tcoulter/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tcoulter/subscriptions",
    "organizations_url": "https://api.github.com/users/tcoulter/orgs",
    "repos_url": "https://api.github.com/users/tcoulter/repos",
    "events_url": "https://api.github.com/users/tcoulter/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tcoulter/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 27,
  "created_at": "2016-04-18T20:16:54Z",
  "updated_at": "2016-08-25T17:14:45Z",
  "closed_at": "2016-08-25T17:14:45Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "<pre>\n  TIP: 1\n  Title: Contract Migrations as Modular Scripts\n  Status: Draft\n  Type: Awesome\n  Author: Tim Coulter\n  Created: 2016-04-18\n</pre>\n\n## Introduction\n\nTruffle's current deploy process only allows for a very strict type of contract: One that doesn't take constructor parameters, and one that's meant to exist as a singleton. For many people these restrictions are limiting and confusing, as deployment for different styles of contracts is needed. Furthermore, no matter the contract, Truffle's deploy process fails to address the needs of future deployments. This proposal aims to provide a solution that allows for deploying complex contracts in a way that doesn't introduce that complexity back into Truffle itself; as well, this proposal will outline a method for managing multiple deployments across the lifetime of a project.\n\nCurrently, the only recourse for developers who want to perform complex deployments is to run [after_deploy scripts](http://truffle.readthedocs.org/en/latest/advanced/configuration/#after_deploy). These are scripts that can be run with `truffle exec`, and will be run directly after deployment and whenever a deployment is needed. The benefit of `after_deploy` scripts is they can run arbitrary code during deployment, allowing for as complex of a deployment as the user needs. The negatives, on the other hand, is that `after_deploy` scripts are [hard to use](http://truffle.readthedocs.org/en/latest/getting_started/scripts/#caveat) and that the addresses of deployed contracts within the scripts are not saved.\n\n`after_deploy` scripts, as well, don't address future deployments, as the initial scripts written would assume contracts related to the dapp don't already exist on the desired network. When a future deployment is needed, when a project's contracts do exist -- which need to be modified or updated as a course of the deployment -- the user would be required to manage those scripts depending on the environment in a way that's tedious and error prone. \n## Solution: Migrations\n\nTo address all of the issues mentioned above, let me introduce the concept of Migrations. This idea is heavily influenced by [Rail's ActiveRecord migrations](http://edgeguides.rubyonrails.org/active_record_migrations.html), but is much lighter weight. \n1. Migrations, in general, are a set of scripts identified by their file name and prefixed by a number, that are responsible for initializing and maintaining the state of a set of contracts on a given network. The numbered prefix represents the date and time of the migration, and the rest of the file name is meant to communicate the purpose of the migration. Example: `1461005828324_initial_deploy.js`. Here, the numbered prefix was produced by `new Date().getTime()`, but it can theoretically be any number.\n2. Migrations assume that regardless of intentions, over the lifetime of a dapp contract state will need to be modified and contract code will either need to be updated, modified, or destroyed in order to support new features and bug fixes.\n3. Migrations are simple Javascripts modules that export the code they want to run and are expected to call a `done()` callback when finished, outlined below. This structure allows users to execute complex deployment steps without running into the same issues with `after_deploy` scripts mentioned above. \n4. Migrations will be run in the order of their filename, lowest first. Migration state -- i.e., a record of which migrations have been run on a given network -- will be saved in a special Migrator contract deployed to the network, so on future deployments Truffle can \"intuit\" which migration to run next. This contract will be added automatically to the user's project upon creation (`truffle init`). If the Migrator contract doesn't exist or is deleted by the user, Truffle will instead run all migrations in order, and will not save the migiration state upon completion.\n5. A new top-level directory will be created for migrations, called `migrations`. Truffle will determine which migrations need to be run based on the network's saved migration state as well as the files within the `migrations` directory. \n6. Truffle's current deployment architecture will be completely removed except for automatic library linking. This includes removing the `deploy` configuration from the project's `truffle.js` file. The `truffle deploy` command will now run the migrations instead of deploying contracts specified within the `deploy` configuration.\n## Discussion\n\nOne cause of contention is saving the migration state on the blockchain. Theoretically this state could be saved in a file within the target environment. The benefits of having it on the blockchain is that in my experience, it's easier to manage and the migrator contract could be edited to act differently if the user desired. On the other hand, the largest negative is that deploying and interacting with the Migrator contract would cost real Ether on the public network. I'm open to other's opinions on this (as well as anything else) and would appreciate your thoughts.\n\nAnother cause for contention is that as of now, migrations aren't atomic. If a migration fails, there's no way to automatically revert the transactions within the migration that succeeded, as you can with Rails. This likely isn't a feature that can be provided due to the nature of the Ethereum network, but ideas welcome.\n\nLastly, there is currently no notion of migrating both \"up\" and \"down\" as provided in Rails -- currently they only happen in one direction. I would love to hear if this feature would be useful. \n## Code & Examples\n\nHere are some example migrations as well as proposed solidity code for the migrator contract: \n##### Example Migration: Initial deploy\n\nThis will deploy a new contract to the network and save that contract's address.\n\nFile name: `1461005828324_initial_deploy.js`\n\n``` javascript\nmodule.exports = function(accounts, done) {\n  // Add a new contract to the network\n  MyContract.new(function(instance) {\n    // Tell Truffle that this new contract represents\n    // the deployed version of this contract\n    MyContract.address = instance.address;\n  }).then(done).catch(done); \n};\n```\n##### Example Migration: Upgrading a Contract\n\nThis will expect a currently deployed contract and update a value (Hub & Spoke model). \n\nFile name: `1461005828324_update_spoke.js`\n\n``` javascript\nmodule.exports = function(accounts, done) {\n  // Expect an already deployed Hub.\n  var hub = Hub.deployed();\n\n  // Deploy a new spoke. \n  Spoke.new(function(spoke) {\n    // Tell the hub about the new spoke.\n    return hub.setSpoke(spoke.address);\n  })).then(done).catch(done);\n};\n```\n##### Proposed Migrator Contract\n\nEffectively pseudo-code. Subject to change.\n\n```\ncontract Migrator {\n  uint[] public completed_migrations;\n\n  function Migrator() {}\n\n  function migrate(uint migration) {\n    completed_migrations[completed_migrations.length++] = migration;\n  }\n}\n```\n## Feedback\n\nAll feedback is welcome. This TIP will remain active until a sufficient consensys is reached. Please leave all comments on github. Thanks!\n",
  "closed_by": {
    "login": "tcoulter",
    "id": 92629,
    "node_id": "MDQ6VXNlcjkyNjI5",
    "avatar_url": "https://avatars.githubusercontent.com/u/92629?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tcoulter",
    "html_url": "https://github.com/tcoulter",
    "followers_url": "https://api.github.com/users/tcoulter/followers",
    "following_url": "https://api.github.com/users/tcoulter/following{/other_user}",
    "gists_url": "https://api.github.com/users/tcoulter/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tcoulter/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tcoulter/subscriptions",
    "organizations_url": "https://api.github.com/users/tcoulter/orgs",
    "repos_url": "https://api.github.com/users/tcoulter/repos",
    "events_url": "https://api.github.com/users/tcoulter/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tcoulter/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/trufflesuite/truffle/issues/138/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/trufflesuite/truffle/issues/138/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/trufflesuite/truffle/issues/comments/211567033",
    "html_url": "https://github.com/trufflesuite/truffle/issues/138#issuecomment-211567033",
    "issue_url": "https://api.github.com/repos/trufflesuite/truffle/issues/138",
    "id": 211567033,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxMTU2NzAzMw==",
    "user": {
      "login": "rfikki",
      "id": 1055929,
      "node_id": "MDQ6VXNlcjEwNTU5Mjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1055929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rfikki",
      "html_url": "https://github.com/rfikki",
      "followers_url": "https://api.github.com/users/rfikki/followers",
      "following_url": "https://api.github.com/users/rfikki/following{/other_user}",
      "gists_url": "https://api.github.com/users/rfikki/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rfikki/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rfikki/subscriptions",
      "organizations_url": "https://api.github.com/users/rfikki/orgs",
      "repos_url": "https://api.github.com/users/rfikki/repos",
      "events_url": "https://api.github.com/users/rfikki/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rfikki/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-18T20:40:52Z",
    "updated_at": "2016-04-18T20:40:52Z",
    "author_association": "NONE",
    "body": "Any possibily for a suicide/selfdestruct feature for removing unwanted contracts.\n",
    "reactions": {
      "url": "https://api.github.com/repos/trufflesuite/truffle/issues/comments/211567033/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/trufflesuite/truffle/issues/comments/211989133",
    "html_url": "https://github.com/trufflesuite/truffle/issues/138#issuecomment-211989133",
    "issue_url": "https://api.github.com/repos/trufflesuite/truffle/issues/138",
    "id": 211989133,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxMTk4OTEzMw==",
    "user": {
      "login": "tcoulter",
      "id": 92629,
      "node_id": "MDQ6VXNlcjkyNjI5",
      "avatar_url": "https://avatars.githubusercontent.com/u/92629?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tcoulter",
      "html_url": "https://github.com/tcoulter",
      "followers_url": "https://api.github.com/users/tcoulter/followers",
      "following_url": "https://api.github.com/users/tcoulter/following{/other_user}",
      "gists_url": "https://api.github.com/users/tcoulter/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tcoulter/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tcoulter/subscriptions",
      "organizations_url": "https://api.github.com/users/tcoulter/orgs",
      "repos_url": "https://api.github.com/users/tcoulter/repos",
      "events_url": "https://api.github.com/users/tcoulter/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tcoulter/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-19T15:49:11Z",
    "updated_at": "2016-04-19T15:49:11Z",
    "author_association": "CONTRIBUTOR",
    "body": "`selfdestruct` is a function of your contract and can be called from within a migration like any other transaction. However, you would need to add the self-destruct command do your contract youreself: http://solidity.readthedocs.org/en/latest/units-and-global-variables.html?highlight=destroy#contract-related\n",
    "reactions": {
      "url": "https://api.github.com/repos/trufflesuite/truffle/issues/comments/211989133/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/trufflesuite/truffle/issues/comments/212002823",
    "html_url": "https://github.com/trufflesuite/truffle/issues/138#issuecomment-212002823",
    "issue_url": "https://api.github.com/repos/trufflesuite/truffle/issues/138",
    "id": 212002823,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxMjAwMjgyMw==",
    "user": {
      "login": "danfinlay",
      "id": 542863,
      "node_id": "MDQ6VXNlcjU0Mjg2Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/542863?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/danfinlay",
      "html_url": "https://github.com/danfinlay",
      "followers_url": "https://api.github.com/users/danfinlay/followers",
      "following_url": "https://api.github.com/users/danfinlay/following{/other_user}",
      "gists_url": "https://api.github.com/users/danfinlay/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/danfinlay/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/danfinlay/subscriptions",
      "organizations_url": "https://api.github.com/users/danfinlay/orgs",
      "repos_url": "https://api.github.com/users/danfinlay/repos",
      "events_url": "https://api.github.com/users/danfinlay/events{/privacy}",
      "received_events_url": "https://api.github.com/users/danfinlay/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-19T16:20:35Z",
    "updated_at": "2016-04-19T16:20:35Z",
    "author_association": "NONE",
    "body": "First, a couple clarifications:  \n- In the `1461005828324_initial_deploy.js`, `MyContract` is the `Hub` contract?\n- When updating the `Spoke` contract, we're actually deploying a new Spoke, and updating a pointer within the `Hub`?\n\nI'm really excited about this realm of thought. Truffle as it stands is a fantastic way to build simple Dapps, but for sustainable contracts, this is important stuff to deal with.\n\nI think the migration structure is clever, and I like how it allows multi-phase architectures to be constructed.\n\nOf course, since this is such a big change, I'd just like to make sure we get as many concerns on the table as possible before committing to the work.\n\nFirst off, if we're going to adopt migrations, it seems like we might as well have the ability to roll them back. This could be achieved by storing an array of the previous migration addresses, or maybe just the ability for a future migration to point back to an older one. Whatever the method, I think we'd regret if we could only migrate to new contracts.\n\nSecondly, as a member of the Ethereum community who loves its distributed nature, leaving one contract creator with the keys to change the contract at all times seems like a re-centralization of power.  A user, even on reviewing the contract, has no guarantee that the contract won't be spontaneously updated to different terms.\n\nI guess this doesn't need to be an issue, as long as we keep the possibility for **different types of migrations**.  Some migrations may require a vote of an approving board, which is essentially the premise of Boardroom by @SilentCicero.\n\nI guess I'm just making sure that the migration structure is open-ended enough that people could write their own migration contracts, which might require an asynchronous block step of waiting for a third party to sign off on a change.\n",
    "reactions": {
      "url": "https://api.github.com/repos/trufflesuite/truffle/issues/comments/212002823/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/trufflesuite/truffle/issues/comments/212048491",
    "html_url": "https://github.com/trufflesuite/truffle/issues/138#issuecomment-212048491",
    "issue_url": "https://api.github.com/repos/trufflesuite/truffle/issues/138",
    "id": 212048491,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxMjA0ODQ5MQ==",
    "user": {
      "login": "tcoulter",
      "id": 92629,
      "node_id": "MDQ6VXNlcjkyNjI5",
      "avatar_url": "https://avatars.githubusercontent.com/u/92629?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tcoulter",
      "html_url": "https://github.com/tcoulter",
      "followers_url": "https://api.github.com/users/tcoulter/followers",
      "following_url": "https://api.github.com/users/tcoulter/following{/other_user}",
      "gists_url": "https://api.github.com/users/tcoulter/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tcoulter/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tcoulter/subscriptions",
      "organizations_url": "https://api.github.com/users/tcoulter/orgs",
      "repos_url": "https://api.github.com/users/tcoulter/repos",
      "events_url": "https://api.github.com/users/tcoulter/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tcoulter/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-19T18:06:57Z",
    "updated_at": "2016-04-19T18:06:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks @flyswatter. Responses inline: \n\n> In the 1461005828324_initial_deploy.js, MyContract is the Hub contract?\n\nThe example migrations provided were meant to be completely separate codebases, existing at different stages of a project's lifecycle. However, they could be the same for example purposes. \n\nIn the first example, no contract exists on the network yet -- this is the project's initial deploy. Here, most everyone would need to deploy new contracts like shown in the first example. The second example is a hypothetical future migration on a different project, where a hub and spoke architecture exists and some changes have been made to the spoke, thus necessitating a new deploy of the spoke and an update of the Hub. \n\n> When updating the Spoke contract, we're actually deploying a new Spoke, and updating a pointer within the Hub?\n\nCorrect. Again, this is a hypothetical situation but one that is likely to happen in real life (I've coded dapps like this before). \n\n> First off, if we're going to adopt migrations, it seems like we might as well have the ability to roll them back. This could be achieved by storing an array of the previous migration addresses, or maybe just the ability for a future migration to point back to an older one. Whatever the method, I think we'd regret if we could only migrate to new contracts.\n\nIt's important to note that the examples given are arbitrary code. A migration doesn't necessarily create new contracts -- just as with Rails migrations, a migration could move data around, update a value, remove an item from the list, etc. Given this, it's unclear how to create an automatic way to rollback a migration. At best we can do what Rails does, and have an `up` and a `down` target, that specifies direction, where we require the developer to write the down, but in my experience most people don't test their downs, and they are rarely used (in practice, it's mostly for emergencies). I could be persuaded to adopt this model as it aids in development, especially when testing migrations themselves, but it adds significant complication to the architecture including, as you mentioned, saving old addresses. Moreover, even if we were to implement this architecture, since migrations are non-atomic, depending on where a migration fails there's no guarantee the down will run correctly either, leaving the network and your contracts in a worse state. Given this, it's likely better that if you want to \"revert\" to a previous state, like git, your \"revert\" is an action that moves forward in time (i.e., a new migration). \n\n> Secondly, as a member of the Ethereum community who loves its distributed nature, leaving one contract creator with the keys to change the contract at all times seems like a re-centralization of power. A user, even on reviewing the contract, has no guarantee that the contract won't be spontaneously updated to different terms.\n\nCan you explain this in more detail? You bring up a good point in that the Migrator contract needs an owner, and should only be updated by the owner, but don't believe that was your main point. In my proposal above, the creator of all contracts -- including the Migrator contract -- are owned by the person deploying them. You can already set the deployment address in Truffle. If you want your Migrator contract to be owned by multiple groups, you can edit the contract yourself to do so. In fact, you can even migrate the Migrator contract, but maybe we should add hooks to make that easier.\n\n> I guess this doesn't need to be an issue, as long as we keep the possibility for different types of migrations. Some migrations may require a vote of an approving board, which is essentially the premise of Boardroom by @SilentCicero.\n\nThe world is your oyster @flyswatter. :) The migrator contract just holds migration state: i.e., the last migration that has been run. It doesn't specify what the migration actually is. For that, you must specify it in your migration code, which as stated above can be anything you want.\n\n> I guess I'm just making sure that the migration structure is open-ended enough that people could write their own migration contracts, which might require an asynchronous block step of waiting for a third party to sign off on a change.\n\nAgain, the Migrator contract is owned by you and you can edit it however you want, as long as it upholds a simple API. If you'd like to change it so that it has multiple owners, you can.\n",
    "reactions": {
      "url": "https://api.github.com/repos/trufflesuite/truffle/issues/comments/212048491/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/trufflesuite/truffle/issues/comments/212071324",
    "html_url": "https://github.com/trufflesuite/truffle/issues/138#issuecomment-212071324",
    "issue_url": "https://api.github.com/repos/trufflesuite/truffle/issues/138",
    "id": 212071324,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxMjA3MTMyNA==",
    "user": {
      "login": "danfinlay",
      "id": 542863,
      "node_id": "MDQ6VXNlcjU0Mjg2Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/542863?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/danfinlay",
      "html_url": "https://github.com/danfinlay",
      "followers_url": "https://api.github.com/users/danfinlay/followers",
      "following_url": "https://api.github.com/users/danfinlay/following{/other_user}",
      "gists_url": "https://api.github.com/users/danfinlay/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/danfinlay/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/danfinlay/subscriptions",
      "organizations_url": "https://api.github.com/users/danfinlay/orgs",
      "repos_url": "https://api.github.com/users/danfinlay/repos",
      "events_url": "https://api.github.com/users/danfinlay/events{/privacy}",
      "received_events_url": "https://api.github.com/users/danfinlay/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-19T19:04:39Z",
    "updated_at": "2016-04-19T19:05:01Z",
    "author_association": "NONE",
    "body": "Cool, thanks for the thorough answer, @tcoulter!\n\nI'm still on the fence re: up/down migrations, but it sounds like you're designing this migration path to be generic enough that it can be structured in whatever way a person wants, so it sounds good!\n",
    "reactions": {
      "url": "https://api.github.com/repos/trufflesuite/truffle/issues/comments/212071324/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/trufflesuite/truffle/issues/comments/212126360",
    "html_url": "https://github.com/trufflesuite/truffle/issues/138#issuecomment-212126360",
    "issue_url": "https://api.github.com/repos/trufflesuite/truffle/issues/138",
    "id": 212126360,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxMjEyNjM2MA==",
    "user": {
      "login": "chrisclark",
      "id": 693700,
      "node_id": "MDQ6VXNlcjY5MzcwMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/693700?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chrisclark",
      "html_url": "https://github.com/chrisclark",
      "followers_url": "https://api.github.com/users/chrisclark/followers",
      "following_url": "https://api.github.com/users/chrisclark/following{/other_user}",
      "gists_url": "https://api.github.com/users/chrisclark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chrisclark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chrisclark/subscriptions",
      "organizations_url": "https://api.github.com/users/chrisclark/orgs",
      "repos_url": "https://api.github.com/users/chrisclark/repos",
      "events_url": "https://api.github.com/users/chrisclark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chrisclark/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-19T20:58:42Z",
    "updated_at": "2016-04-19T20:58:42Z",
    "author_association": "NONE",
    "body": "Would it make sense to address these constraints:\n\n> One that doesn't take constructor parameters, and one that's meant to exist as a singleton.\n\nseparately from updates/migrations? I don't see that they are inextricably related.\n",
    "reactions": {
      "url": "https://api.github.com/repos/trufflesuite/truffle/issues/comments/212126360/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/trufflesuite/truffle/issues/comments/212135423",
    "html_url": "https://github.com/trufflesuite/truffle/issues/138#issuecomment-212135423",
    "issue_url": "https://api.github.com/repos/trufflesuite/truffle/issues/138",
    "id": 212135423,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxMjEzNTQyMw==",
    "user": {
      "login": "tcoulter",
      "id": 92629,
      "node_id": "MDQ6VXNlcjkyNjI5",
      "avatar_url": "https://avatars.githubusercontent.com/u/92629?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tcoulter",
      "html_url": "https://github.com/tcoulter",
      "followers_url": "https://api.github.com/users/tcoulter/followers",
      "following_url": "https://api.github.com/users/tcoulter/following{/other_user}",
      "gists_url": "https://api.github.com/users/tcoulter/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tcoulter/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tcoulter/subscriptions",
      "organizations_url": "https://api.github.com/users/tcoulter/orgs",
      "repos_url": "https://api.github.com/users/tcoulter/repos",
      "events_url": "https://api.github.com/users/tcoulter/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tcoulter/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-19T21:22:35Z",
    "updated_at": "2016-04-19T21:22:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "@chrisclark I'm not sure it makes sense to (or put differently, this is a way of addressing that). We could create a system that allows for that and works in addition to `after_deploy` scripts, but then what do you do down the line when you've had couple contracts in production for a few weeks and realize a bug needs to be fixed? The current deployment implementation won't support that. If we move to a migration infrastructure, you can deploy with constructor parameters as well as create a system for future deployments.\n\nNote that, if it's not clear, the `.new()` function in `MyContract.new()` is where you specify constructor parameters if any exist.\n",
    "reactions": {
      "url": "https://api.github.com/repos/trufflesuite/truffle/issues/comments/212135423/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/trufflesuite/truffle/issues/comments/212179232",
    "html_url": "https://github.com/trufflesuite/truffle/issues/138#issuecomment-212179232",
    "issue_url": "https://api.github.com/repos/trufflesuite/truffle/issues/138",
    "id": 212179232,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxMjE3OTIzMg==",
    "user": {
      "login": "zmitton",
      "id": 6954889,
      "node_id": "MDQ6VXNlcjY5NTQ4ODk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6954889?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zmitton",
      "html_url": "https://github.com/zmitton",
      "followers_url": "https://api.github.com/users/zmitton/followers",
      "following_url": "https://api.github.com/users/zmitton/following{/other_user}",
      "gists_url": "https://api.github.com/users/zmitton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zmitton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zmitton/subscriptions",
      "organizations_url": "https://api.github.com/users/zmitton/orgs",
      "repos_url": "https://api.github.com/users/zmitton/repos",
      "events_url": "https://api.github.com/users/zmitton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zmitton/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-20T00:05:16Z",
    "updated_at": "2016-04-20T00:05:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "Great ideas. This addresses one of the biggest unanswered questions I've had with Ethereum in general: how to update imperfect code. \n\nHaving said that, I AM concerned with having the OPTION to keep the contract immutable (in an easy way). Could there be maybe a flag upon project initialization that somehow specifies this? Either by disabling the feature, or maybe automatically writing a migration contract with rules that it can't be updated?\n",
    "reactions": {
      "url": "https://api.github.com/repos/trufflesuite/truffle/issues/comments/212179232/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/trufflesuite/truffle/issues/comments/212182420",
    "html_url": "https://github.com/trufflesuite/truffle/issues/138#issuecomment-212182420",
    "issue_url": "https://api.github.com/repos/trufflesuite/truffle/issues/138",
    "id": 212182420,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxMjE4MjQyMA==",
    "user": {
      "login": "tcoulter",
      "id": 92629,
      "node_id": "MDQ6VXNlcjkyNjI5",
      "avatar_url": "https://avatars.githubusercontent.com/u/92629?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tcoulter",
      "html_url": "https://github.com/tcoulter",
      "followers_url": "https://api.github.com/users/tcoulter/followers",
      "following_url": "https://api.github.com/users/tcoulter/following{/other_user}",
      "gists_url": "https://api.github.com/users/tcoulter/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tcoulter/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tcoulter/subscriptions",
      "organizations_url": "https://api.github.com/users/tcoulter/orgs",
      "repos_url": "https://api.github.com/users/tcoulter/repos",
      "events_url": "https://api.github.com/users/tcoulter/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tcoulter/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-20T00:21:50Z",
    "updated_at": "2016-04-20T00:21:50Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hi @zmitton. I'm not sure I understand. By definition contracts deployed to the Ethereum network are immutable, and there's no way to get around this. The closest option available is to create a \"pointer\" contract which contains an address of the actual contract meant to service a dapp. When you want to update the dapp's code, you deploy a completely new contract and then update the pointer (an example of this is the Hub and Spoke, above). But all of this is not a function of Truffle; the migrations above are just examples. If you want this pointer functionality you'll have to build it into your dapp yourself.\n",
    "reactions": {
      "url": "https://api.github.com/repos/trufflesuite/truffle/issues/comments/212182420/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/trufflesuite/truffle/issues/comments/212474021",
    "html_url": "https://github.com/trufflesuite/truffle/issues/138#issuecomment-212474021",
    "issue_url": "https://api.github.com/repos/trufflesuite/truffle/issues/138",
    "id": 212474021,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxMjQ3NDAyMQ==",
    "user": {
      "login": "redsquirrel",
      "id": 2512,
      "node_id": "MDQ6VXNlcjI1MTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2512?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/redsquirrel",
      "html_url": "https://github.com/redsquirrel",
      "followers_url": "https://api.github.com/users/redsquirrel/followers",
      "following_url": "https://api.github.com/users/redsquirrel/following{/other_user}",
      "gists_url": "https://api.github.com/users/redsquirrel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/redsquirrel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/redsquirrel/subscriptions",
      "organizations_url": "https://api.github.com/users/redsquirrel/orgs",
      "repos_url": "https://api.github.com/users/redsquirrel/repos",
      "events_url": "https://api.github.com/users/redsquirrel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/redsquirrel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-20T15:18:45Z",
    "updated_at": "2016-04-20T15:18:45Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Example: 1461005828324_initial_deploy.js. Here, the numbered prefix was produced by new Date().getTime(), but it can theoretically be any number.\n\nAt the risk of stating the obvious, I can't imagine _not_ using a timestamp as the prefix. They have the double-benefit of sorting your migrations in sequence, as well as ensuring the migration filenames are unique.\n",
    "reactions": {
      "url": "https://api.github.com/repos/trufflesuite/truffle/issues/comments/212474021/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/trufflesuite/truffle/issues/comments/212477466",
    "html_url": "https://github.com/trufflesuite/truffle/issues/138#issuecomment-212477466",
    "issue_url": "https://api.github.com/repos/trufflesuite/truffle/issues/138",
    "id": 212477466,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxMjQ3NzQ2Ng==",
    "user": {
      "login": "redsquirrel",
      "id": 2512,
      "node_id": "MDQ6VXNlcjI1MTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2512?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/redsquirrel",
      "html_url": "https://github.com/redsquirrel",
      "followers_url": "https://api.github.com/users/redsquirrel/followers",
      "following_url": "https://api.github.com/users/redsquirrel/following{/other_user}",
      "gists_url": "https://api.github.com/users/redsquirrel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/redsquirrel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/redsquirrel/subscriptions",
      "organizations_url": "https://api.github.com/users/redsquirrel/orgs",
      "repos_url": "https://api.github.com/users/redsquirrel/repos",
      "events_url": "https://api.github.com/users/redsquirrel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/redsquirrel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-20T15:26:38Z",
    "updated_at": "2016-04-20T15:26:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "> If the Migrator contract doesn't exist or is deleted by the user, Truffle will instead run all migrations in order, and will not save the migiration [sic] state upon completion.\n\nIt seems like in this situation, it should either auto-create the Migrator contract, or possibly prompt the user about whether a Migrator contract should be created. Otherwise, it seems like it's leaving the dapp in a bad state.\n",
    "reactions": {
      "url": "https://api.github.com/repos/trufflesuite/truffle/issues/comments/212477466/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/trufflesuite/truffle/issues/comments/212478584",
    "html_url": "https://github.com/trufflesuite/truffle/issues/138#issuecomment-212478584",
    "issue_url": "https://api.github.com/repos/trufflesuite/truffle/issues/138",
    "id": 212478584,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxMjQ3ODU4NA==",
    "user": {
      "login": "tcoulter",
      "id": 92629,
      "node_id": "MDQ6VXNlcjkyNjI5",
      "avatar_url": "https://avatars.githubusercontent.com/u/92629?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tcoulter",
      "html_url": "https://github.com/tcoulter",
      "followers_url": "https://api.github.com/users/tcoulter/followers",
      "following_url": "https://api.github.com/users/tcoulter/following{/other_user}",
      "gists_url": "https://api.github.com/users/tcoulter/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tcoulter/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tcoulter/subscriptions",
      "organizations_url": "https://api.github.com/users/tcoulter/orgs",
      "repos_url": "https://api.github.com/users/tcoulter/repos",
      "events_url": "https://api.github.com/users/tcoulter/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tcoulter/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-20T15:29:56Z",
    "updated_at": "2016-04-20T15:30:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "@redsquirrel \n\n> It seems like in this situation, it should either auto-create the Migrator contract, or possibly prompt the user about whether a Migrator contract should be created. Otherwise, it seems like it's leaving the dapp in a bad state.\n\nFor new projects (i.e., `truffle init`) I was thinking about making the Migrator contract deployed as the first migration, and Truffle would use it to record the migration state _only if_ a contract called Migrator existed -- and it would check for the Migrator contract after each migration completed, in case the Migrator had been updated.\n\nThat said, \"Migrator\" should probably be renamed as it's not doing the migration. It's just recording the state. Perhaps MigrationState. \n",
    "reactions": {
      "url": "https://api.github.com/repos/trufflesuite/truffle/issues/comments/212478584/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/trufflesuite/truffle/issues/comments/212538486",
    "html_url": "https://github.com/trufflesuite/truffle/issues/138#issuecomment-212538486",
    "issue_url": "https://api.github.com/repos/trufflesuite/truffle/issues/138",
    "id": 212538486,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxMjUzODQ4Ng==",
    "user": {
      "login": "thiagodelgado111",
      "id": 1891013,
      "node_id": "MDQ6VXNlcjE4OTEwMTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1891013?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/thiagodelgado111",
      "html_url": "https://github.com/thiagodelgado111",
      "followers_url": "https://api.github.com/users/thiagodelgado111/followers",
      "following_url": "https://api.github.com/users/thiagodelgado111/following{/other_user}",
      "gists_url": "https://api.github.com/users/thiagodelgado111/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/thiagodelgado111/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/thiagodelgado111/subscriptions",
      "organizations_url": "https://api.github.com/users/thiagodelgado111/orgs",
      "repos_url": "https://api.github.com/users/thiagodelgado111/repos",
      "events_url": "https://api.github.com/users/thiagodelgado111/events{/privacy}",
      "received_events_url": "https://api.github.com/users/thiagodelgado111/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-20T18:05:12Z",
    "updated_at": "2016-04-20T18:05:12Z",
    "author_association": "NONE",
    "body": "That sounds awesome, @tcoulter. I'm really excited about that feature :)\n",
    "reactions": {
      "url": "https://api.github.com/repos/trufflesuite/truffle/issues/comments/212538486/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/trufflesuite/truffle/issues/comments/212544551",
    "html_url": "https://github.com/trufflesuite/truffle/issues/138#issuecomment-212544551",
    "issue_url": "https://api.github.com/repos/trufflesuite/truffle/issues/138",
    "id": 212544551,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxMjU0NDU1MQ==",
    "user": {
      "login": "redsquirrel",
      "id": 2512,
      "node_id": "MDQ6VXNlcjI1MTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2512?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/redsquirrel",
      "html_url": "https://github.com/redsquirrel",
      "followers_url": "https://api.github.com/users/redsquirrel/followers",
      "following_url": "https://api.github.com/users/redsquirrel/following{/other_user}",
      "gists_url": "https://api.github.com/users/redsquirrel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/redsquirrel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/redsquirrel/subscriptions",
      "organizations_url": "https://api.github.com/users/redsquirrel/orgs",
      "repos_url": "https://api.github.com/users/redsquirrel/repos",
      "events_url": "https://api.github.com/users/redsquirrel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/redsquirrel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-20T18:23:21Z",
    "updated_at": "2016-04-20T18:23:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Lastly, there is currently no notion of migrating both \"up\" and \"down\" as provided in Rails...\n\nI think this is fine. Being able to migrate \"down\" in Rails is nice, but I've never actually seen it used in production. I've only ever seen it used to revert/reset local schema changes while developing migrations and/or new features.\n",
    "reactions": {
      "url": "https://api.github.com/repos/trufflesuite/truffle/issues/comments/212544551/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/trufflesuite/truffle/issues/comments/212546269",
    "html_url": "https://github.com/trufflesuite/truffle/issues/138#issuecomment-212546269",
    "issue_url": "https://api.github.com/repos/trufflesuite/truffle/issues/138",
    "id": 212546269,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxMjU0NjI2OQ==",
    "user": {
      "login": "tcoulter",
      "id": 92629,
      "node_id": "MDQ6VXNlcjkyNjI5",
      "avatar_url": "https://avatars.githubusercontent.com/u/92629?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tcoulter",
      "html_url": "https://github.com/tcoulter",
      "followers_url": "https://api.github.com/users/tcoulter/followers",
      "following_url": "https://api.github.com/users/tcoulter/following{/other_user}",
      "gists_url": "https://api.github.com/users/tcoulter/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tcoulter/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tcoulter/subscriptions",
      "organizations_url": "https://api.github.com/users/tcoulter/orgs",
      "repos_url": "https://api.github.com/users/tcoulter/repos",
      "events_url": "https://api.github.com/users/tcoulter/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tcoulter/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-20T18:28:03Z",
    "updated_at": "2016-04-20T18:28:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "I agree @redsquirrel. Do we need that development benefit in our case, however? I was thinking about getting around that issue with something like this:\n\n```\n$ truffle migrate --all\n```\n\nThis will just start from scratch. When used on the TestRPC, things will be quick. This assumes A) your migrations aren't doing heavy processing, and so won't take awhile (i.e., you won't be merging thousands of rows like in Rails); and B) you won't have hundreds of migrations. That said, the up/down interface could easily be added in later with little effort if ever it was needed.\n",
    "reactions": {
      "url": "https://api.github.com/repos/trufflesuite/truffle/issues/comments/212546269/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/trufflesuite/truffle/issues/comments/212553156",
    "html_url": "https://github.com/trufflesuite/truffle/issues/138#issuecomment-212553156",
    "issue_url": "https://api.github.com/repos/trufflesuite/truffle/issues/138",
    "id": 212553156,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxMjU1MzE1Ng==",
    "user": {
      "login": "redsquirrel",
      "id": 2512,
      "node_id": "MDQ6VXNlcjI1MTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2512?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/redsquirrel",
      "html_url": "https://github.com/redsquirrel",
      "followers_url": "https://api.github.com/users/redsquirrel/followers",
      "following_url": "https://api.github.com/users/redsquirrel/following{/other_user}",
      "gists_url": "https://api.github.com/users/redsquirrel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/redsquirrel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/redsquirrel/subscriptions",
      "organizations_url": "https://api.github.com/users/redsquirrel/orgs",
      "repos_url": "https://api.github.com/users/redsquirrel/repos",
      "events_url": "https://api.github.com/users/redsquirrel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/redsquirrel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-20T18:40:59Z",
    "updated_at": "2016-04-20T18:42:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "@tcoulter I imagine it would be nice to be able to re-run all migrations (assuming you're on TestRPC) to be able to get yourself out of a bad state, as well as ensuring that your migrations do actually play nice with each other. In general, though, I'd punt most of these questions until you get feedback from people using migrations in the wild. (In other words, keep it simple. 😄)\n",
    "reactions": {
      "url": "https://api.github.com/repos/trufflesuite/truffle/issues/comments/212553156/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/trufflesuite/truffle/issues/comments/212561675",
    "html_url": "https://github.com/trufflesuite/truffle/issues/138#issuecomment-212561675",
    "issue_url": "https://api.github.com/repos/trufflesuite/truffle/issues/138",
    "id": 212561675,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxMjU2MTY3NQ==",
    "user": {
      "login": "tcoulter",
      "id": 92629,
      "node_id": "MDQ6VXNlcjkyNjI5",
      "avatar_url": "https://avatars.githubusercontent.com/u/92629?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tcoulter",
      "html_url": "https://github.com/tcoulter",
      "followers_url": "https://api.github.com/users/tcoulter/followers",
      "following_url": "https://api.github.com/users/tcoulter/following{/other_user}",
      "gists_url": "https://api.github.com/users/tcoulter/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tcoulter/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tcoulter/subscriptions",
      "organizations_url": "https://api.github.com/users/tcoulter/orgs",
      "repos_url": "https://api.github.com/users/tcoulter/repos",
      "events_url": "https://api.github.com/users/tcoulter/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tcoulter/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-20T19:09:21Z",
    "updated_at": "2016-04-20T19:09:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "Ya, I'm in the same boat. On the verge of implementing it to get better feedback. So far response is positive, and so comes down to implementation.\n",
    "reactions": {
      "url": "https://api.github.com/repos/trufflesuite/truffle/issues/comments/212561675/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/trufflesuite/truffle/issues/comments/212564965",
    "html_url": "https://github.com/trufflesuite/truffle/issues/138#issuecomment-212564965",
    "issue_url": "https://api.github.com/repos/trufflesuite/truffle/issues/138",
    "id": 212564965,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxMjU2NDk2NQ==",
    "user": {
      "login": "redsquirrel",
      "id": 2512,
      "node_id": "MDQ6VXNlcjI1MTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2512?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/redsquirrel",
      "html_url": "https://github.com/redsquirrel",
      "followers_url": "https://api.github.com/users/redsquirrel/followers",
      "following_url": "https://api.github.com/users/redsquirrel/following{/other_user}",
      "gists_url": "https://api.github.com/users/redsquirrel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/redsquirrel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/redsquirrel/subscriptions",
      "organizations_url": "https://api.github.com/users/redsquirrel/orgs",
      "repos_url": "https://api.github.com/users/redsquirrel/repos",
      "events_url": "https://api.github.com/users/redsquirrel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/redsquirrel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-20T19:16:05Z",
    "updated_at": "2016-04-20T19:16:05Z",
    "author_association": "CONTRIBUTOR",
    "body": "@tcoulter Is there a branch we can watch? 👀 \n",
    "reactions": {
      "url": "https://api.github.com/repos/trufflesuite/truffle/issues/comments/212564965/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/trufflesuite/truffle/issues/comments/212566274",
    "html_url": "https://github.com/trufflesuite/truffle/issues/138#issuecomment-212566274",
    "issue_url": "https://api.github.com/repos/trufflesuite/truffle/issues/138",
    "id": 212566274,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxMjU2NjI3NA==",
    "user": {
      "login": "tcoulter",
      "id": 92629,
      "node_id": "MDQ6VXNlcjkyNjI5",
      "avatar_url": "https://avatars.githubusercontent.com/u/92629?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tcoulter",
      "html_url": "https://github.com/tcoulter",
      "followers_url": "https://api.github.com/users/tcoulter/followers",
      "following_url": "https://api.github.com/users/tcoulter/following{/other_user}",
      "gists_url": "https://api.github.com/users/tcoulter/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tcoulter/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tcoulter/subscriptions",
      "organizations_url": "https://api.github.com/users/tcoulter/orgs",
      "repos_url": "https://api.github.com/users/tcoulter/repos",
      "events_url": "https://api.github.com/users/tcoulter/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tcoulter/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-20T19:17:45Z",
    "updated_at": "2016-04-20T19:17:45Z",
    "author_association": "CONTRIBUTOR",
    "body": "Just pushed the branch `migrations` to master. No differences from master yet, but changes will be added there.\n",
    "reactions": {
      "url": "https://api.github.com/repos/trufflesuite/truffle/issues/comments/212566274/reactions",
      "total_count": 2,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 2,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/trufflesuite/truffle/issues/comments/212603515",
    "html_url": "https://github.com/trufflesuite/truffle/issues/138#issuecomment-212603515",
    "issue_url": "https://api.github.com/repos/trufflesuite/truffle/issues/138",
    "id": 212603515,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxMjYwMzUxNQ==",
    "user": {
      "login": "tcoulter",
      "id": 92629,
      "node_id": "MDQ6VXNlcjkyNjI5",
      "avatar_url": "https://avatars.githubusercontent.com/u/92629?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tcoulter",
      "html_url": "https://github.com/tcoulter",
      "followers_url": "https://api.github.com/users/tcoulter/followers",
      "following_url": "https://api.github.com/users/tcoulter/following{/other_user}",
      "gists_url": "https://api.github.com/users/tcoulter/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tcoulter/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tcoulter/subscriptions",
      "organizations_url": "https://api.github.com/users/tcoulter/orgs",
      "repos_url": "https://api.github.com/users/tcoulter/repos",
      "events_url": "https://api.github.com/users/tcoulter/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tcoulter/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-20T20:57:52Z",
    "updated_at": "2016-04-20T20:57:52Z",
    "author_association": "CONTRIBUTOR",
    "body": "I've created a pull request that should make watching easier: https://github.com/ConsenSys/truffle/pull/143\n",
    "reactions": {
      "url": "https://api.github.com/repos/trufflesuite/truffle/issues/comments/212603515/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/trufflesuite/truffle/issues/comments/218609364",
    "html_url": "https://github.com/trufflesuite/truffle/issues/138#issuecomment-218609364",
    "issue_url": "https://api.github.com/repos/trufflesuite/truffle/issues/138",
    "id": 218609364,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxODYwOTM2NA==",
    "user": {
      "login": "tcoulter",
      "id": 92629,
      "node_id": "MDQ6VXNlcjkyNjI5",
      "avatar_url": "https://avatars.githubusercontent.com/u/92629?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tcoulter",
      "html_url": "https://github.com/tcoulter",
      "followers_url": "https://api.github.com/users/tcoulter/followers",
      "following_url": "https://api.github.com/users/tcoulter/following{/other_user}",
      "gists_url": "https://api.github.com/users/tcoulter/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tcoulter/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tcoulter/subscriptions",
      "organizations_url": "https://api.github.com/users/tcoulter/orgs",
      "repos_url": "https://api.github.com/users/tcoulter/repos",
      "events_url": "https://api.github.com/users/tcoulter/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tcoulter/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-11T22:28:52Z",
    "updated_at": "2016-05-11T22:29:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "While developing the migrations feature, I’m finding that migrations can be made easier if there were an object to help you with the transactions. I’ve recently whipped up an example — not quite a prototype — where a migration could look something like this: \n\n``` javascript\nmodule.exports = function(accounts) {\n  deployer.autolink();\n  // and/or\n  deployer.link(SomeLibrary, [\n    SomeContract,\n    AnotherContract\n  ]);\n\n  deployer.new(SomeContract);\n  deployer.new(AnotherContract);\n\n  deployer.then(function() {\n    return SomeContract.deployed().callSomeFunction(5);\n  });\n\n  deployer.then(function() {\n    // Do more complex things.\n  });\n};\n```\n\nHere, the `deployer` object is your helper, and it can provide functions such as “autolink” (link libraries automatically based on their dependencies), “link” (link specific libraries to specific contracts), “new” (deploy new version of the contract and ensure the address gets saved), and then more general, “then” (perform any arbitrary step in deployment). All objects like `SomeContract` are Pudding contract objects, and through the magic of promises your migration steps can be written synchronously (i.e., the function just creates one long promise chain stored in `deployer` and executes it later rather than executing each step in the function itself). \n\nThe point of all this is to provide a mechanism for people to write their own complex deployments without making a tool that's equally complex, while at the same time making deployments as easy as possible. Thoughts? \n",
    "reactions": {
      "url": "https://api.github.com/repos/trufflesuite/truffle/issues/comments/218609364/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/trufflesuite/truffle/issues/comments/218615529",
    "html_url": "https://github.com/trufflesuite/truffle/issues/138#issuecomment-218615529",
    "issue_url": "https://api.github.com/repos/trufflesuite/truffle/issues/138",
    "id": 218615529,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxODYxNTUyOQ==",
    "user": {
      "login": "thiagodelgado111",
      "id": 1891013,
      "node_id": "MDQ6VXNlcjE4OTEwMTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1891013?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/thiagodelgado111",
      "html_url": "https://github.com/thiagodelgado111",
      "followers_url": "https://api.github.com/users/thiagodelgado111/followers",
      "following_url": "https://api.github.com/users/thiagodelgado111/following{/other_user}",
      "gists_url": "https://api.github.com/users/thiagodelgado111/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/thiagodelgado111/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/thiagodelgado111/subscriptions",
      "organizations_url": "https://api.github.com/users/thiagodelgado111/orgs",
      "repos_url": "https://api.github.com/users/thiagodelgado111/repos",
      "events_url": "https://api.github.com/users/thiagodelgado111/events{/privacy}",
      "received_events_url": "https://api.github.com/users/thiagodelgado111/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-11T23:02:31Z",
    "updated_at": "2016-05-11T23:16:43Z",
    "author_association": "NONE",
    "body": "Maybe we could follow Rails `up` and `down` idea? Would that be possible? I like the idea of the `deployer` maybe we could name it as `helper` or `deployHelper` something like this to make it more clear. \n\nCan we have a fallback function to call in case of errors during migration?\ne.g:\n\n``` js\nmigration('Adding \"users\" mapping to contract\"', function(args, helper, accounts) {\n\n//to be used to change the value of a flag or bind a new contract address to a contract\n helper.up(function(done) { \n   let oldContract = Contract.at(args.address);\n   oldContract.change\n })\n\n//to be used when something is done and cannot be undone or at least easily undone\n helper.change(function(done) { \n   let oldContract = Contract.at(args.address);\n\n   UpdatedContract.new()\n   .then(function(_newContract) {\n      return oldContract.upgradeTo(_newContract.address);\n   })\n   .then(function(txHash) {\n      console.log('Contract upgraded!');\n      done();\n   })\n   .catch(done);\n });\n\n //to be used to undo what \"up\" is doing\n helper.down(function(done) {\n\n });\n\n helper.onError(function() {\n   //notify the user, fix something on the blockchain, create a log entry somewhere, something like that\n });\n});\n```\n",
    "reactions": {
      "url": "https://api.github.com/repos/trufflesuite/truffle/issues/comments/218615529/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/trufflesuite/truffle/issues/comments/218972503",
    "html_url": "https://github.com/trufflesuite/truffle/issues/138#issuecomment-218972503",
    "issue_url": "https://api.github.com/repos/trufflesuite/truffle/issues/138",
    "id": 218972503,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxODk3MjUwMw==",
    "user": {
      "login": "tcoulter",
      "id": 92629,
      "node_id": "MDQ6VXNlcjkyNjI5",
      "avatar_url": "https://avatars.githubusercontent.com/u/92629?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tcoulter",
      "html_url": "https://github.com/tcoulter",
      "followers_url": "https://api.github.com/users/tcoulter/followers",
      "following_url": "https://api.github.com/users/tcoulter/following{/other_user}",
      "gists_url": "https://api.github.com/users/tcoulter/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tcoulter/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tcoulter/subscriptions",
      "organizations_url": "https://api.github.com/users/tcoulter/orgs",
      "repos_url": "https://api.github.com/users/tcoulter/repos",
      "events_url": "https://api.github.com/users/tcoulter/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tcoulter/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-13T07:37:01Z",
    "updated_at": "2016-05-13T07:37:01Z",
    "author_association": "CONTRIBUTOR",
    "body": "@thiagodelgado111 Couple things:\n\nHaving an up/down concept is a good one, in general, but undefined behavior will occur whenever a migration errors. For instance, imagine a migration that, when migrating up, makes 20 transactions (possibly an exaggeration). Say transaction 11 fails: This means the whole migration fails. Since we're dealing with a blockchain, you can't revert those transactions, which means you're in an unknown state. If you migrate down from there, it's likely that your down will fail as well since the down expects the environment to be in a specific state, which it is not. This is a similar problem with rollbacks: How do you rollback a migration that can't be reverted? The only way is human interaction, where you have to determine the best possible rollback yourself - and it's entirely situationally dependent. Which means - to recap - we _could_ have a down and a rollback, but they're unlikely to work in most cases, and so in most cases are very useless. The only way around this that I can see is to have one transaction per migration, but this becomes untenable - though I can imagine some people going this route.\n\nAlso, in my experience with other migration systems (i.e., Rails) `down` and `rollback` were rarely used in production, and were only useful during development. Though I can see the benefit of having these features during development, we there are other ways to solve that problem, like testing/developing from a known blockchain state, which can be reverted. That said, you've made me think of a great feature: automatic reverts when using the TestRPC. The TestRPC supports state reverting, so when developing migrations, truffle can take advantage of this and automatically revert if there's an error during a migration. \n\nGiven the above, out of the gate I'm likely not going to add in support for down and rollback, but we can consider those features once more people use the first implementation and we get feedback from users.\n\nThanks, as always!\n",
    "reactions": {
      "url": "https://api.github.com/repos/trufflesuite/truffle/issues/comments/218972503/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/trufflesuite/truffle/issues/comments/219089291",
    "html_url": "https://github.com/trufflesuite/truffle/issues/138#issuecomment-219089291",
    "issue_url": "https://api.github.com/repos/trufflesuite/truffle/issues/138",
    "id": 219089291,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxOTA4OTI5MQ==",
    "user": {
      "login": "thiagodelgado111",
      "id": 1891013,
      "node_id": "MDQ6VXNlcjE4OTEwMTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1891013?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/thiagodelgado111",
      "html_url": "https://github.com/thiagodelgado111",
      "followers_url": "https://api.github.com/users/thiagodelgado111/followers",
      "following_url": "https://api.github.com/users/thiagodelgado111/following{/other_user}",
      "gists_url": "https://api.github.com/users/thiagodelgado111/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/thiagodelgado111/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/thiagodelgado111/subscriptions",
      "organizations_url": "https://api.github.com/users/thiagodelgado111/orgs",
      "repos_url": "https://api.github.com/users/thiagodelgado111/repos",
      "events_url": "https://api.github.com/users/thiagodelgado111/events{/privacy}",
      "received_events_url": "https://api.github.com/users/thiagodelgado111/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-13T16:13:57Z",
    "updated_at": "2016-05-13T16:13:57Z",
    "author_association": "NONE",
    "body": "Hi, @tcoulter! Thanks for reading my comment and answering it :)\n\nWhen I thought about having a `rollback/down` function I thought that it could be useful for little things e.g: reverting a change I did in a contract state variable modified on this migration. The same applies to `up`, it would be used for `little things` as well like the one I mentioned before e.g: a single transaction changing the state of a variable, calling a constant function, maybe even things that are not strictly related to the blockchain like calling a service to get data from it, anything like that. \n\nAnyway, I agree it might not be really useful. Would you still consider instead having:\n- A `setup` function to be used to put up anything that's needed for the next function\n- `change` that would be the place for the 20 txs to be executed \n- And maybe one called `onError`, to be called if the migration fails (I could log an event on a bug tracking service, log it on a file, etc.)\n\n``` js\nvar myAppData = require('myapp/libs/data');\nmigration('Adding \"users\" mapping to contract\"', function(accounts) {\n\n helper.setup(function(done) { \n   migrationData.params = myAppData.getParams();\n })\n\n helper.change(function(done) { \n   let oldContract = Contract.at(args.address);\n   var newContract;\n   UpdatedContract.new()\n   .then(function(_newContract) {\n      newContract = _newContract;\n      return oldContract.upgradeTo(_newContract.address);\n   })\n   .then(function() {\n      return newContract.use(migrationData.params);\n   })\n   .then(function(txHash) {\n      console.log('Contract upgraded!');\n      done();\n   })\n   .catch(done);\n });\n\n helper.onError(function() {\n   //notify the user, fix something on the blockchain, create a log entry somewhere, something like that\n });\n});\n```\n\nAlso, I'm glad I ended up helping you to have the automatic revert idea with TestRPC hahaha :smile:\nAgain, thanks for reading and for your feedback :)\n",
    "reactions": {
      "url": "https://api.github.com/repos/trufflesuite/truffle/issues/comments/219089291/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/trufflesuite/truffle/issues/comments/219148349",
    "html_url": "https://github.com/trufflesuite/truffle/issues/138#issuecomment-219148349",
    "issue_url": "https://api.github.com/repos/trufflesuite/truffle/issues/138",
    "id": 219148349,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxOTE0ODM0OQ==",
    "user": {
      "login": "tcoulter",
      "id": 92629,
      "node_id": "MDQ6VXNlcjkyNjI5",
      "avatar_url": "https://avatars.githubusercontent.com/u/92629?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tcoulter",
      "html_url": "https://github.com/tcoulter",
      "followers_url": "https://api.github.com/users/tcoulter/followers",
      "following_url": "https://api.github.com/users/tcoulter/following{/other_user}",
      "gists_url": "https://api.github.com/users/tcoulter/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tcoulter/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tcoulter/subscriptions",
      "organizations_url": "https://api.github.com/users/tcoulter/orgs",
      "repos_url": "https://api.github.com/users/tcoulter/repos",
      "events_url": "https://api.github.com/users/tcoulter/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tcoulter/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-13T20:16:28Z",
    "updated_at": "2016-05-13T20:21:32Z",
    "author_association": "CONTRIBUTOR",
    "body": "@thiagodelgado111 The deployer system is still being fleshed out, but currently it works like this:\n\nA \"migration\" is a set of steps that need to be performed. In your migration, you build these steps and add them to the list - you don't actually execute the steps. The steps are executed behind the scenes after your migration has finished queueing them. Given that, your notion of `setup` and `change` (as far as I understand them) are just special versions of a more general idea: `setup` is just the first step, and `change` is a step somewhere in the middle. Here's what your example might look like in the implementation I have now:\n\n``` javascript\nvar myAppData = require('myapp/libs/data');\nmodule.exports = function(deployer) {\n  // Get the existing contract address before the deploy starts.\n  var existingAddress = Contract.address;\n\n  // Replace the version of Contract. deploy() will do this automatically\n  // if it has previously been deployed in an earlier migration.\n  deployer.deploy(Contract);\n  deployer.then(function() { \n    // Call the upgradeTo function on the existing contract.\n    Contract.at(existingAddress).upgradeTo(Contract.address);\n  }).then(function() {\n    // Call the use() function on the new contract.\n    // Remember: A new version was deployed in the previous step.\n    Contract.deployed().use(myAppData.getParams());\n  });\n});\n```\n\nAs you can see, the structure is very linear, and cleaner than typical Pudding though it's taking advantage of Pudding constructs considerably. \n\nNote that I removed your `setup` step entirely as it was just a function call (`getParams()`) that could be added later on in the code. I should also add that Truffle is taking care of telling the deployer what environment it's working in; setting up the web3 providers, setting the deployment account, etc. So you don't have to deal with any of that within the migration.\n\nThe only feature I haven't implemented that you suggested is the `onError` feature. Good suggestion. I need to think about implementation, but I'll do my best to support your case. My hunch, however, is it might be best to have a CI tool take a look at the `truffle migrate` exit code (non-zero on errors) and send you the email instead.\n",
    "reactions": {
      "url": "https://api.github.com/repos/trufflesuite/truffle/issues/comments/219148349/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/trufflesuite/truffle/issues/comments/219165531",
    "html_url": "https://github.com/trufflesuite/truffle/issues/138#issuecomment-219165531",
    "issue_url": "https://api.github.com/repos/trufflesuite/truffle/issues/138",
    "id": 219165531,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxOTE2NTUzMQ==",
    "user": {
      "login": "thiagodelgado111",
      "id": 1891013,
      "node_id": "MDQ6VXNlcjE4OTEwMTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1891013?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/thiagodelgado111",
      "html_url": "https://github.com/thiagodelgado111",
      "followers_url": "https://api.github.com/users/thiagodelgado111/followers",
      "following_url": "https://api.github.com/users/thiagodelgado111/following{/other_user}",
      "gists_url": "https://api.github.com/users/thiagodelgado111/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/thiagodelgado111/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/thiagodelgado111/subscriptions",
      "organizations_url": "https://api.github.com/users/thiagodelgado111/orgs",
      "repos_url": "https://api.github.com/users/thiagodelgado111/repos",
      "events_url": "https://api.github.com/users/thiagodelgado111/events{/privacy}",
      "received_events_url": "https://api.github.com/users/thiagodelgado111/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-13T21:37:24Z",
    "updated_at": "2016-05-13T21:37:32Z",
    "author_association": "NONE",
    "body": "Cool, @tcoulter! I think you're right about leaving the task of sending an e-mail to the CI tool, I just thought it might be useful to have something like this! Thanks for answering! 😃 \n",
    "reactions": {
      "url": "https://api.github.com/repos/trufflesuite/truffle/issues/comments/219165531/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/trufflesuite/truffle/issues/comments/242468954",
    "html_url": "https://github.com/trufflesuite/truffle/issues/138#issuecomment-242468954",
    "issue_url": "https://api.github.com/repos/trufflesuite/truffle/issues/138",
    "id": 242468954,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MjQ2ODk1NA==",
    "user": {
      "login": "tcoulter",
      "id": 92629,
      "node_id": "MDQ6VXNlcjkyNjI5",
      "avatar_url": "https://avatars.githubusercontent.com/u/92629?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tcoulter",
      "html_url": "https://github.com/tcoulter",
      "followers_url": "https://api.github.com/users/tcoulter/followers",
      "following_url": "https://api.github.com/users/tcoulter/following{/other_user}",
      "gists_url": "https://api.github.com/users/tcoulter/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tcoulter/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tcoulter/subscriptions",
      "organizations_url": "https://api.github.com/users/tcoulter/orgs",
      "repos_url": "https://api.github.com/users/tcoulter/repos",
      "events_url": "https://api.github.com/users/tcoulter/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tcoulter/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-25T17:14:38Z",
    "updated_at": "2016-08-25T17:14:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "This has been added in Truffle 2.0. Closing! Thanks for everyone's feedback!\n",
    "reactions": {
      "url": "https://api.github.com/repos/trufflesuite/truffle/issues/comments/242468954/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
