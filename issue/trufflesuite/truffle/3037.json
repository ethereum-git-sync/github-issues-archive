{
  "url": "https://api.github.com/repos/trufflesuite/truffle/issues/3037",
  "repository_url": "https://api.github.com/repos/trufflesuite/truffle",
  "labels_url": "https://api.github.com/repos/trufflesuite/truffle/issues/3037/labels{/name}",
  "comments_url": "https://api.github.com/repos/trufflesuite/truffle/issues/3037/comments",
  "events_url": "https://api.github.com/repos/trufflesuite/truffle/issues/3037/events",
  "html_url": "https://github.com/trufflesuite/truffle/issues/3037",
  "id": 614064393,
  "node_id": "MDU6SXNzdWU2MTQwNjQzOTM=",
  "number": 3037,
  "title": "\"VM Exception while processing transaction: revert\" in Truffle test and Truffle dev",
  "user": {
    "login": "Exctazy",
    "id": 45420690,
    "node_id": "MDQ6VXNlcjQ1NDIwNjkw",
    "avatar_url": "https://avatars.githubusercontent.com/u/45420690?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Exctazy",
    "html_url": "https://github.com/Exctazy",
    "followers_url": "https://api.github.com/users/Exctazy/followers",
    "following_url": "https://api.github.com/users/Exctazy/following{/other_user}",
    "gists_url": "https://api.github.com/users/Exctazy/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Exctazy/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Exctazy/subscriptions",
    "organizations_url": "https://api.github.com/users/Exctazy/orgs",
    "repos_url": "https://api.github.com/users/Exctazy/repos",
    "events_url": "https://api.github.com/users/Exctazy/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Exctazy/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 5,
  "created_at": "2020-05-07T13:36:44Z",
  "updated_at": "2020-05-20T17:56:52Z",
  "closed_at": "2020-05-20T17:56:52Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "- [x] I've asked for help in the [Truffle Gitter](http://gitter.im/Consensys/truffle) before filing this issue.\r\n\r\n---------------------------\r\n\r\n## Issue\r\n\r\n \"Error: Returned error: VM Exception while processing transaction: revert\" when reaching the Transfer function. I think it is related to the fact that my Crowdsale smart contrat hasn't any TotalSupply of my tokens. \r\n\r\n## Steps to Reproduce\r\n\r\nToken Smart contract :\r\n\r\n```javascript\r\n    pragma solidity   0.5.16; \r\n\r\n    import \"openzeppelin-solidity/contracts/token/ERC20/DetailedERC20.sol\";\r\n    import \"openzeppelin-solidity/contracts/token/ERC20/PausableToken.sol\";\r\n\r\n    contract TokenSPC is PausableToken, DetailedERC20 \r\n    {\r\n    \r\n        constructor(string memory _name, string memory _symbol, uint8 _decimals, uint256 _amount)\r\n        DetailedERC20(_name, _symbol, _decimals)\r\n        public\r\n        {\r\n    \t\r\n    \t \trequire(_amount > 0, \"amount has to be greater than 0\");\r\n\t\t\ttotalSupply_ = _amount.mul(10 ** uint256(_decimals));\r\n\t\t\tbalances[msg.sender] = totalSupply_;\r\n\t\t\temit Transfer(address(0), msg.sender, totalSupply_);\r\n\r\n     \t\r\n        }\r\n    } \r\n\r\n```\r\nCrowdsale Smart Contract :\r\n\r\n```javascript\r\n\r\n    pragma solidity 0.5.16;\r\n\r\n    import './TokenSPC.sol';\r\n    import \"openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\";\r\n    import \"openzeppelin-solidity/contracts/token/ERC20/PausableToken.sol\";\r\n    import \"openzeppelin-solidity/contracts/crowdsale/Crowdsale.sol\";\r\n    import \"openzeppelin-solidity/contracts/crowdsale/validation/CappedCrowdsale.sol\";\r\n\r\n\r\n    contract TokenCrowdsale is Crowdsale, CappedCrowdsale {\r\n\r\n      //Minim invest contrib\r\n      //Max invest contrib\r\n      uint256 public investorMinCap = 2000000000000000;\r\n      uint256 public investorHardCap = 50000000000000000000;\r\n      mapping(address => uint256) public contributions;\r\n\r\n      constructor(\r\n        uint256 _rate,\r\n        address payable _wallet,\r\n        ERC20 _token,\r\n        uint256 _cap\r\n       )\r\n      Crowdsale(_rate, _wallet, _token)\r\n      CappedCrowdsale(_cap)\r\n      public\r\n      {\r\n  \r\n      }\r\n\r\n      function getUserContribution(address _beneficiary)\r\n      public view returns(uint256)\r\n      {\r\n        return contributions[_beneficiary];\r\n      }\r\n\r\n      function _preValidatePurchase(\r\n        address _beneficiary, \r\n        uint256 _weiAmount\r\n     )\r\n     internal\r\n     {\r\n        super._preValidatePurchase(_beneficiary,_weiAmount);\r\n        uint256 _existingContribution = contributions[_beneficiary];\r\n        uint256 _newContribution = _existingContribution.add(_weiAmount);\r\n        require(_newContribution >= investorMinCap && _newContribution <= investorHardCap);\r\n        contributions[_beneficiary] = _newContribution;\r\n     } \r\n   }\r\n\r\n```\r\nTest Crowdsale.test : \r\n\r\n```javascript\r\nimport ether from './helpers/ether';\r\nimport sendTransaction from './helpers/sendTransaction';\r\nimport EVMRevert from './helpers/EVMRevert';\r\n\r\nconst BN = web3.utils.BN;\r\n\r\nrequire('chai')\r\n  .use(require('chai-as-promised'))\r\n  .use(require('chai-bn')(BN))\r\n  .should();\r\n\r\nconst Token = artifacts.require('TokenSPC');\r\nconst TokenCrowdsale = artifacts.require('TokenCrowdsale');\r\n\r\ncontract('TokenCrowdsale', function([_, wallet, investor1, investor2]) {\r\n\r\n  /*before(async function() {\r\n    // Transfer extra ether to investor1's account for testing\r\n    await web3.eth.sendTransaction({ from: _, to: investor1, value: ether(60) })\r\n    await web3.eth.sendTransaction({ from: _, to: investor2, value: ether(20) })\r\n  });*/\r\n\r\n  beforeEach(async function () {\r\n    // Token config\r\n    this.name = \"Seed Project Coin\";\r\n    this.symbol = \"SPC\";\r\n    this.decimals = 18;\r\n    this.amount = 380000000;\r\n\r\n\r\n    // Deploy Token\r\n    this.token = await Token.new(\r\n      this.name,\r\n      this.symbol,\r\n      this.decimals,\r\n      this.amount\r\n    );\r\n\r\n    // Crowdsale config\r\n    this.rate = new BN(500);\r\n    this.wallet = wallet;\r\n    this.cap = ether(100);\r\n\r\n    //Invest cap\r\n    this.investorMinCap = ether(0.002);\r\n    this.investorHardCap = ether(50);\r\n   \r\n    this.crowdsale = await TokenCrowdsale.new(\r\n      this.rate,\r\n      this.wallet,\r\n      this.token.address,\r\n      this.cap\r\n\r\n      \r\n    );\r\n\r\n    // Transfer token owern to crowdsale\r\n    await this.token.transferOwnership(this.crowdsale.address);\r\n\r\n  \r\n  });\r\n\r\n  describe('token', function() {\r\n    it(\"should check totalSupply\", async function() {\r\n      const _supp = await this.token.totalSupply();\r\n      console.log( \"     \", \"totalSupply =\", _supp.toString());\r\n    });\r\n   \r\n  });\r\n\r\n  describe('crowdsale', function() {\r\n    it('tracks the rate', async function() {\r\n      const _rate = await this.crowdsale.rate();\r\n      //console.log( \"     \", \"Rate =\", _rate );\r\n      //console.log( \"     \", \"this.rate =\", this.rate );\r\n      _rate.should.be.a.bignumber.that.equals(this.rate);\r\n    });\r\n\r\n    it('tracks the wallet', async function() {\r\n      const wallet = await this.crowdsale.wallet();\r\n      wallet.should.equal(this.wallet);\r\n    });\r\n\r\n    it('tracks the token', async function() {\r\n      const token = await this.crowdsale.token();\r\n      token.should.equal(this.token.address);\r\n    });\r\n  });\r\n\r\n  //A revoir---------------------------------------------\r\n /* describe('actualization crowdsale', function() {\r\n    it('actualize total supply of crowdsale after purchase', async function() {\r\n      const originalTotalSupply = await this.token.totalSupply();\r\n      this.token.totalSupply_ -= 1;\r\n      const newTotalSupply = await this.token.totalSupply();\r\n      assert.isTrue(newTotalSupply < originalTotalSupply)\r\n    });\r\n  });*/\r\n\r\n  describe('capped crowdsale', async function() {\r\n    it('has the correct hard cap', async function() {\r\n      const _cap = await this.crowdsale.cap();\r\n      _cap.should.be.a.bignumber.that.equals(this.cap);\r\n    });\r\n  });\r\n\r\n  //A revoir ---------------------------------------------\r\n  /*describe('accepting payments', function() {\r\n    it('should accept payments', async function() {\r\n      const value = ether(1);\r\n      const purchaser = investor2;\r\n      await this.crowdsale.sendTransaction({ value : value, from : investor1}).should.be.fulfilled;\r\n      await this.crowdsale.buyTokens(investor1, { value: value, from: purchaser }).should.be.fulfilled;\r\n    });\r\n  });*/\r\n\r\n  describe('buyTokens()', function() {\r\n    describe('when the contrib is less than min cap', function(){\r\n      it('rejects the transaction', async function() {\r\n        const value = this.investorMinCap - 1;\r\n        await this.crowdsale.buyTokens(investor2, { value: value, from: investor2 }).should.be.rejectedWith(EVMRevert);\r\n      });\r\n    });\r\n\r\n     describe('when the invest has already met the min cap', function(){\r\n      it('allows the invest to contrib below the min cap', async function() {\r\n        //isvalid\r\n        const value1 = ether(1);\r\n        \r\n        \r\n        await this.crowdsale.buyTokens(investor1, { value: value1, from: investor1 });\r\n        console.log( \"     \", \"inv =\", investor1 );\r\n        console.log( \"     \", \"value =\", value1 );\r\n        console.log( \"     \", \"inv.value =\", await this.crowdsale.buyTokens(investor1, { value: value1, from: investor1 }) );\r\n        //is less then invest cap\r\n        const value2 = 1; //wei\r\n        await this.crowdsale.buyTokens(investor1, { value: value2, from: investor1 }).should.be.fulfilled;\r\n\r\n      });\r\n    });\r\n\r\n  });\r\n\r\n/*---------------A revoir\r\n  describe('when the total contrib exceed the invest hardcap', function(){\r\n    it('reject the transaction', async function() {\r\n      //first contrib in valid range\r\n      const value1 = ether(2);\r\n      await this.crowdsale.buyTokens(investor1, { value: value1, from: investor1});\r\n\r\n      //second is over hardcap\r\n      const value2 = ether(49);\r\n      await this.crowdsale.buyTokens(investor1, { value: value2, from: investor1}).should.be.rejectedWith(EVMRevert);\r\n    });\r\n  });\r\n\r\n  describe('when the contrib is within the valid range', function() {\r\n    const value = ether(2);\r\n    it('succeeds & updates the contrib amount', async function() {\r\n      await this.crowdsale.buyTokens(investor2, { value: value, from: investor2 }).should.be.fulfilled;\r\n      const contribution = await this.crowdsale.getUserContribution(investor2);\r\n      contribution.should.be.bignumber.equals;\r\n    });\r\n  });\r\n*/\r\n\r\n});\r\n\r\n```\r\n\r\nDeployement script : \r\n\r\n```javascript\r\n\r\nconst Token = artifacts.require(\"./TokenSPC.sol\");\r\nconst TokenCrowdsale = artifacts.require(\"./TokenCrowdsale.sol\");\r\n\r\nconst ether = (n) => new web3.utils.BN(web3.utils.toWei(n.toString(), 'ether'));\r\n\r\nconst duration = {\r\n  seconds: function (val) { return val; },\r\n  minutes: function (val) { return val * this.seconds(60); },\r\n  hours: function (val) { return val * this.minutes(60); },\r\n  days: function (val) { return val * this.hours(24); },\r\n  weeks: function (val) { return val * this.days(7); },\r\n  years: function (val) { return val * this.days(365); },\r\n};\r\n\r\nmodule.exports = async function(deployer, network, accounts) {\r\n  const _name = \"Seed Project Coin\";\r\n  const _symbol = \"SPC\";\r\n  const _decimals = 18;\r\n  const _amount = 380000000;\r\n\r\n  await deployer.deploy(Token , _name, _symbol, _decimals, _amount );\r\n  const deployedToken = await Token.deployed();\r\n\r\n \r\n\r\n  const _rate           = 1;\r\n  const _wallet         = accounts[0]; // TODO: Replace me\r\n  const _token          = deployedToken.address;\r\n  const _cap            = ether(100);\r\n\r\n  await deployer.deploy(\r\n    TokenCrowdsale,\r\n    _rate,\r\n    _wallet,\r\n    _token,\r\n    _cap\r\n    \r\n  );\r\n\r\n  return true;\r\n};\r\n```\r\n\r\n**First method to have the error :**\r\n\r\nLaunch ganache-cli via cmd : `ganache-cli`\r\n\r\nCompile : `truffle compile`\r\n\r\nLaunch test : `truffle test ./test/TokenCrowdsale.test.js`\r\n\r\n**Second method to have the error :**\r\n\r\nLaunch ganache-cli via cmd : `ganache-cli`\r\n\r\nCompile : `truffle compile`\r\n\r\nMigrate : `truffle migrate`\r\n\r\nUse console : `truffle console`\r\n\r\nCommands in truffle console : \r\n\r\n``` \r\n    - TokenSPC.deployed().then(instance => token = instance)\r\n    - TokenCrowdsale.deployed().then(instance => crowdsale = instance)\r\n\r\n    - web3.eth.getAccounts().then(function(acc){ accounts = acc }) \r\n    -  var tokenamount = 100 * 10**18 \r\n    - token.transfer(accounts[1], tokenamount.toString())\r\n\r\n    - crowdsale.buyTokens(accounts[1], { from: accounts[1], value: 10000000000000000000 })\r\n```\r\n \r\n\r\n## Expected Behavior\r\n\r\nThe Crowdsale smart contract have a fixed totalSupply, i don't want any minted token. So i expect the crowdsale to do the transactions to buy the token and transfer it to the user.  \r\n\r\n## Actual Results\r\n\r\n![2](https://user-images.githubusercontent.com/45420690/81299291-48ca9c80-9076-11ea-915f-4c01344426e0.png)\r\n\r\n-----------------------------------------\r\n\r\n![1](https://user-images.githubusercontent.com/45420690/81299318-53853180-9076-11ea-937c-0d99c62b7a88.png)\r\n\r\n-----------------------------------------\r\n\r\n![Sans titre](https://user-images.githubusercontent.com/45420690/81299333-58e27c00-9076-11ea-9f0d-db391d04c3f3.png)\r\n\r\n\r\n\r\n## Environment\r\n\r\n* Operating System: Windows 10\r\n* Ethereum client: Ganache-cli => v6.9.1, Ganache-core => v2.10.2\r\n* Truffle version (`truffle version`): v5.1.20\r\n* node version (`node --version`): v12.16.1\r\n* npm version (`npm --version`): v6.13.4\r\n\r\n## More Informations\r\n\r\nI'm following a tutorial from DappUniversity : Real World Ico to help me building my smart contract functionnalities. I've done a lot of research about a lot of errors that i've encountered and almost find everytime a solution. But the VM Error is crap and doesn't tell anything. Also, i didn't find any issue similar to mine. There's only one topic pointing out the fact that most of the time if it's not out-of-gas issue, it's because we don't have any token to buy, and that's true for my part. I really think it's because i don't have any totalSupply in my crowdsale so he can't buy / transfer / ect... and i'm stuck because i can't find a tutorial or topic explaing how to have a fixed total supply. Actually there is one really sticking to my situation which is that topic : \r\n\r\nhttps://ethereum.stackexchange.com/questions/34620/crowdsale-tokens\r\n\r\nBut he is creating the token contract with the help of the crowdsale contract, and i'm not doing this neither i want to. I need to find a way to transfer the totalSupply from the token contract to the crowdsale contract, and to test it with truffle test.\r\n\r\nThanks a lot for your help peeps !",
  "closed_by": {
    "login": "eggplantzzz",
    "id": 14827965,
    "node_id": "MDQ6VXNlcjE0ODI3OTY1",
    "avatar_url": "https://avatars.githubusercontent.com/u/14827965?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/eggplantzzz",
    "html_url": "https://github.com/eggplantzzz",
    "followers_url": "https://api.github.com/users/eggplantzzz/followers",
    "following_url": "https://api.github.com/users/eggplantzzz/following{/other_user}",
    "gists_url": "https://api.github.com/users/eggplantzzz/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/eggplantzzz/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/eggplantzzz/subscriptions",
    "organizations_url": "https://api.github.com/users/eggplantzzz/orgs",
    "repos_url": "https://api.github.com/users/eggplantzzz/repos",
    "events_url": "https://api.github.com/users/eggplantzzz/events{/privacy}",
    "received_events_url": "https://api.github.com/users/eggplantzzz/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/trufflesuite/truffle/issues/3037/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/trufflesuite/truffle/issues/3037/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/trufflesuite/truffle/issues/comments/628140713",
    "html_url": "https://github.com/trufflesuite/truffle/issues/3037#issuecomment-628140713",
    "issue_url": "https://api.github.com/repos/trufflesuite/truffle/issues/3037",
    "id": 628140713,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyODE0MDcxMw==",
    "user": {
      "login": "haltman-at",
      "id": 35589221,
      "node_id": "MDQ6VXNlcjM1NTg5MjIx",
      "avatar_url": "https://avatars.githubusercontent.com/u/35589221?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/haltman-at",
      "html_url": "https://github.com/haltman-at",
      "followers_url": "https://api.github.com/users/haltman-at/followers",
      "following_url": "https://api.github.com/users/haltman-at/following{/other_user}",
      "gists_url": "https://api.github.com/users/haltman-at/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/haltman-at/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/haltman-at/subscriptions",
      "organizations_url": "https://api.github.com/users/haltman-at/orgs",
      "repos_url": "https://api.github.com/users/haltman-at/repos",
      "events_url": "https://api.github.com/users/haltman-at/events{/privacy}",
      "received_events_url": "https://api.github.com/users/haltman-at/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-13T17:37:40Z",
    "updated_at": "2020-05-13T17:37:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "Sorry, is there a Truffle error that you've encountered here?  Or is the problem simply that a transaction reverted?  If the latter, that doesn't sound like a Truffle issue.  If there is a Truffle isue here, please let us know!",
    "reactions": {
      "url": "https://api.github.com/repos/trufflesuite/truffle/issues/comments/628140713/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/trufflesuite/truffle/issues/comments/628143230",
    "html_url": "https://github.com/trufflesuite/truffle/issues/3037#issuecomment-628143230",
    "issue_url": "https://api.github.com/repos/trufflesuite/truffle/issues/3037",
    "id": 628143230,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyODE0MzIzMA==",
    "user": {
      "login": "Exctazy",
      "id": 45420690,
      "node_id": "MDQ6VXNlcjQ1NDIwNjkw",
      "avatar_url": "https://avatars.githubusercontent.com/u/45420690?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Exctazy",
      "html_url": "https://github.com/Exctazy",
      "followers_url": "https://api.github.com/users/Exctazy/followers",
      "following_url": "https://api.github.com/users/Exctazy/following{/other_user}",
      "gists_url": "https://api.github.com/users/Exctazy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Exctazy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Exctazy/subscriptions",
      "organizations_url": "https://api.github.com/users/Exctazy/orgs",
      "repos_url": "https://api.github.com/users/Exctazy/repos",
      "events_url": "https://api.github.com/users/Exctazy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Exctazy/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-13T17:42:09Z",
    "updated_at": "2020-05-13T17:42:09Z",
    "author_association": "NONE",
    "body": "It's just a transaction that reverted in fact. But i though the VM error was a truffle error?",
    "reactions": {
      "url": "https://api.github.com/repos/trufflesuite/truffle/issues/comments/628143230/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/trufflesuite/truffle/issues/comments/628216798",
    "html_url": "https://github.com/trufflesuite/truffle/issues/3037#issuecomment-628216798",
    "issue_url": "https://api.github.com/repos/trufflesuite/truffle/issues/3037",
    "id": 628216798,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyODIxNjc5OA==",
    "user": {
      "login": "haltman-at",
      "id": 35589221,
      "node_id": "MDQ6VXNlcjM1NTg5MjIx",
      "avatar_url": "https://avatars.githubusercontent.com/u/35589221?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/haltman-at",
      "html_url": "https://github.com/haltman-at",
      "followers_url": "https://api.github.com/users/haltman-at/followers",
      "following_url": "https://api.github.com/users/haltman-at/following{/other_user}",
      "gists_url": "https://api.github.com/users/haltman-at/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/haltman-at/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/haltman-at/subscriptions",
      "organizations_url": "https://api.github.com/users/haltman-at/orgs",
      "repos_url": "https://api.github.com/users/haltman-at/repos",
      "events_url": "https://api.github.com/users/haltman-at/events{/privacy}",
      "received_events_url": "https://api.github.com/users/haltman-at/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-13T20:05:00Z",
    "updated_at": "2020-05-13T20:05:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "Ganache in its default mode will throw errors on a revert.  You can turn off this behavior by using the `--noVMErrorsOnRPCResponse` option.  However, even with this you'll still get errors on a revert, because web3 throws error on reverts, and Truffle propagates these.  It would be nice if reverts didn't cause errors, but changing that is both hard (though we intend to get to it eventually!) and it would be a breaking change (people rely on those errors).\r\n\r\nBasically, this is just what's going to happen when you get a revert, sorry.  It's not really an error in Truffle.  Although, as I've said, we're hoping to get rid of such errors eventually.",
    "reactions": {
      "url": "https://api.github.com/repos/trufflesuite/truffle/issues/comments/628216798/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/trufflesuite/truffle/issues/comments/628573038",
    "html_url": "https://github.com/trufflesuite/truffle/issues/3037#issuecomment-628573038",
    "issue_url": "https://api.github.com/repos/trufflesuite/truffle/issues/3037",
    "id": 628573038,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyODU3MzAzOA==",
    "user": {
      "login": "Exctazy",
      "id": 45420690,
      "node_id": "MDQ6VXNlcjQ1NDIwNjkw",
      "avatar_url": "https://avatars.githubusercontent.com/u/45420690?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Exctazy",
      "html_url": "https://github.com/Exctazy",
      "followers_url": "https://api.github.com/users/Exctazy/followers",
      "following_url": "https://api.github.com/users/Exctazy/following{/other_user}",
      "gists_url": "https://api.github.com/users/Exctazy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Exctazy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Exctazy/subscriptions",
      "organizations_url": "https://api.github.com/users/Exctazy/orgs",
      "repos_url": "https://api.github.com/users/Exctazy/repos",
      "events_url": "https://api.github.com/users/Exctazy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Exctazy/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-14T11:31:33Z",
    "updated_at": "2020-05-14T11:31:33Z",
    "author_association": "NONE",
    "body": "Alright, well there is no point turning off the behavior if it tells me there is something wrong occuring. I'll try to check what is reverting and wait for an update on VMErrors. Thanks.",
    "reactions": {
      "url": "https://api.github.com/repos/trufflesuite/truffle/issues/comments/628573038/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/trufflesuite/truffle/issues/comments/631631359",
    "html_url": "https://github.com/trufflesuite/truffle/issues/3037#issuecomment-631631359",
    "issue_url": "https://api.github.com/repos/trufflesuite/truffle/issues/3037",
    "id": 631631359,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzMTYzMTM1OQ==",
    "user": {
      "login": "eggplantzzz",
      "id": 14827965,
      "node_id": "MDQ6VXNlcjE0ODI3OTY1",
      "avatar_url": "https://avatars.githubusercontent.com/u/14827965?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/eggplantzzz",
      "html_url": "https://github.com/eggplantzzz",
      "followers_url": "https://api.github.com/users/eggplantzzz/followers",
      "following_url": "https://api.github.com/users/eggplantzzz/following{/other_user}",
      "gists_url": "https://api.github.com/users/eggplantzzz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/eggplantzzz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/eggplantzzz/subscriptions",
      "organizations_url": "https://api.github.com/users/eggplantzzz/orgs",
      "repos_url": "https://api.github.com/users/eggplantzzz/repos",
      "events_url": "https://api.github.com/users/eggplantzzz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/eggplantzzz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-20T17:56:46Z",
    "updated_at": "2020-05-20T17:56:46Z",
    "author_association": "CONTRIBUTOR",
    "body": "So just to be clear, this error means that there is something going wrong in your Solidity program that is causing a transaction to revert. Check your code to see if it is doing anything that you don't expect or if there are any opportunities for something to go wrong. Good luck! \r\n\r\nClosing this for issue maintenance.\r\n\r\nIf you have any questions or need troubleshooting help, feel free to reach out on our [Spectrum channel](https://spectrum.chat/trufflesuite?tab=posts) and we'll try and give you a hand!",
    "reactions": {
      "url": "https://api.github.com/repos/trufflesuite/truffle/issues/comments/631631359/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
