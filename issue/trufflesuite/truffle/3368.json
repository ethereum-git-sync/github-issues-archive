{
  "url": "https://api.github.com/repos/trufflesuite/truffle/issues/3368",
  "repository_url": "https://api.github.com/repos/trufflesuite/truffle",
  "labels_url": "https://api.github.com/repos/trufflesuite/truffle/issues/3368/labels{/name}",
  "comments_url": "https://api.github.com/repos/trufflesuite/truffle/issues/3368/comments",
  "events_url": "https://api.github.com/repos/trufflesuite/truffle/issues/3368/events",
  "html_url": "https://github.com/trufflesuite/truffle/issues/3368",
  "id": 702870297,
  "node_id": "MDU6SXNzdWU3MDI4NzAyOTc=",
  "number": 3368,
  "title": "request: truffle dump out commands given to solc ",
  "user": {
    "login": "fxfactorial",
    "id": 3036816,
    "node_id": "MDQ6VXNlcjMwMzY4MTY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/3036816?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/fxfactorial",
    "html_url": "https://github.com/fxfactorial",
    "followers_url": "https://api.github.com/users/fxfactorial/followers",
    "following_url": "https://api.github.com/users/fxfactorial/following{/other_user}",
    "gists_url": "https://api.github.com/users/fxfactorial/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/fxfactorial/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/fxfactorial/subscriptions",
    "organizations_url": "https://api.github.com/users/fxfactorial/orgs",
    "repos_url": "https://api.github.com/users/fxfactorial/repos",
    "events_url": "https://api.github.com/users/fxfactorial/events{/privacy}",
    "received_events_url": "https://api.github.com/users/fxfactorial/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 230393328,
      "node_id": "MDU6TGFiZWwyMzAzOTMzMjg=",
      "url": "https://api.github.com/repos/trufflesuite/truffle/labels/enhancement",
      "name": "enhancement",
      "color": "84b6eb",
      "default": true,
      "description": null
    },
    {
      "id": 230393329,
      "node_id": "MDU6TGFiZWwyMzAzOTMzMjk=",
      "url": "https://api.github.com/repos/trufflesuite/truffle/labels/help%20wanted",
      "name": "help wanted",
      "color": "159818",
      "default": true,
      "description": null
    },
    {
      "id": 971681714,
      "node_id": "MDU6TGFiZWw5NzE2ODE3MTQ=",
      "url": "https://api.github.com/repos/trufflesuite/truffle/labels/Compiler",
      "name": "Compiler",
      "color": "b60205",
      "default": false,
      "description": ""
    },
    {
      "id": 1086852667,
      "node_id": "MDU6TGFiZWwxMDg2ODUyNjY3",
      "url": "https://api.github.com/repos/trufflesuite/truffle/labels/needs%20requirements",
      "name": "needs requirements",
      "color": "d4c5f9",
      "default": false,
      "description": "feature request is unclear"
    },
    {
      "id": 1675042241,
      "node_id": "MDU6TGFiZWwxNjc1MDQyMjQx",
      "url": "https://api.github.com/repos/trufflesuite/truffle/labels/priority5%20%F0%9F%8C%80",
      "name": "priority5 ðŸŒ€",
      "color": "006b75",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 9,
  "created_at": "2020-09-16T15:38:08Z",
  "updated_at": "2020-10-12T15:55:05Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "I'm trying to use abigen against truffle compiled contracts but had some trouble because solc doesn't know about JS style imports - so would have been much easier if could see the module remappings that truffle does in its invocation of solc \r\n\r\nwould be great if truffle could accept some env var that allows dumping out to screen the commands it passes to solc - I looked in source and currently it doesn't do that, or have a hook for that. \r\n\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/trufflesuite/truffle/issues/3368/reactions",
    "total_count": 1,
    "+1": 1,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/trufflesuite/truffle/issues/3368/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/trufflesuite/truffle/issues/comments/693575833",
    "html_url": "https://github.com/trufflesuite/truffle/issues/3368#issuecomment-693575833",
    "issue_url": "https://api.github.com/repos/trufflesuite/truffle/issues/3368",
    "id": 693575833,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5MzU3NTgzMw==",
    "user": {
      "login": "eggplantzzz",
      "id": 14827965,
      "node_id": "MDQ6VXNlcjE0ODI3OTY1",
      "avatar_url": "https://avatars.githubusercontent.com/u/14827965?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/eggplantzzz",
      "html_url": "https://github.com/eggplantzzz",
      "followers_url": "https://api.github.com/users/eggplantzzz/followers",
      "following_url": "https://api.github.com/users/eggplantzzz/following{/other_user}",
      "gists_url": "https://api.github.com/users/eggplantzzz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/eggplantzzz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/eggplantzzz/subscriptions",
      "organizations_url": "https://api.github.com/users/eggplantzzz/orgs",
      "repos_url": "https://api.github.com/users/eggplantzzz/repos",
      "events_url": "https://api.github.com/users/eggplantzzz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/eggplantzzz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-16T18:16:00Z",
    "updated_at": "2020-09-16T18:16:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hey @fxfactorial! Are you interested in just getting the raw input that Truffle gives to the Solidity compiler? If so, Truffle doesn't currently expose that information. Something that you may find helpful is the metadata field in the built artifacts (the JSON files). This information is complete in the sense that you can accurately re-create the compilation. You can check out the docs from Solidity [here](https://solidity.readthedocs.io/en/latest/metadata.html). Hopefully this helps!",
    "reactions": {
      "url": "https://api.github.com/repos/trufflesuite/truffle/issues/comments/693575833/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/trufflesuite/truffle/issues/comments/693599049",
    "html_url": "https://github.com/trufflesuite/truffle/issues/3368#issuecomment-693599049",
    "issue_url": "https://api.github.com/repos/trufflesuite/truffle/issues/3368",
    "id": 693599049,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5MzU5OTA0OQ==",
    "user": {
      "login": "fxfactorial",
      "id": 3036816,
      "node_id": "MDQ6VXNlcjMwMzY4MTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3036816?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fxfactorial",
      "html_url": "https://github.com/fxfactorial",
      "followers_url": "https://api.github.com/users/fxfactorial/followers",
      "following_url": "https://api.github.com/users/fxfactorial/following{/other_user}",
      "gists_url": "https://api.github.com/users/fxfactorial/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fxfactorial/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fxfactorial/subscriptions",
      "organizations_url": "https://api.github.com/users/fxfactorial/orgs",
      "repos_url": "https://api.github.com/users/fxfactorial/repos",
      "events_url": "https://api.github.com/users/fxfactorial/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fxfactorial/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-16T19:00:02Z",
    "updated_at": "2020-09-16T19:00:02Z",
    "author_association": "NONE",
    "body": "@eggplantzzz ya exactly - the raw command truffle calls to solc - I see in the source that it doesn't expose that, so I'm asking if could have something like \r\n\r\n```js\r\nif (process.env.TRUFFLE_DUMP_SOLC_CMD) {\r\n\r\n}\r\n```\r\n\r\nright  before the compliation ",
    "reactions": {
      "url": "https://api.github.com/repos/trufflesuite/truffle/issues/comments/693599049/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/trufflesuite/truffle/issues/comments/693648710",
    "html_url": "https://github.com/trufflesuite/truffle/issues/3368#issuecomment-693648710",
    "issue_url": "https://api.github.com/repos/trufflesuite/truffle/issues/3368",
    "id": 693648710,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5MzY0ODcxMA==",
    "user": {
      "login": "haltman-at",
      "id": 35589221,
      "node_id": "MDQ6VXNlcjM1NTg5MjIx",
      "avatar_url": "https://avatars.githubusercontent.com/u/35589221?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/haltman-at",
      "html_url": "https://github.com/haltman-at",
      "followers_url": "https://api.github.com/users/haltman-at/followers",
      "following_url": "https://api.github.com/users/haltman-at/following{/other_user}",
      "gists_url": "https://api.github.com/users/haltman-at/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/haltman-at/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/haltman-at/subscriptions",
      "organizations_url": "https://api.github.com/users/haltman-at/orgs",
      "repos_url": "https://api.github.com/users/haltman-at/repos",
      "events_url": "https://api.github.com/users/haltman-at/events{/privacy}",
      "received_events_url": "https://api.github.com/users/haltman-at/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-16T20:30:54Z",
    "updated_at": "2020-09-16T20:30:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "Note that Truffle generally doesn't invoke solc by way of a command, unless you're using `version: \"native\"` in your Truffle config.  So the question then becomes whether you would want just the JSON input, or whether you would want it converted to the form of a command.  I imagine the former makes more sense, as it's much more generally usable than the latter (e.g., for verifying on Etherscan).  The latter seems kind of abstraction-breaking.",
    "reactions": {
      "url": "https://api.github.com/repos/trufflesuite/truffle/issues/comments/693648710/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/trufflesuite/truffle/issues/comments/705694527",
    "html_url": "https://github.com/trufflesuite/truffle/issues/3368#issuecomment-705694527",
    "issue_url": "https://api.github.com/repos/trufflesuite/truffle/issues/3368",
    "id": 705694527,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwNTY5NDUyNw==",
    "user": {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-08T16:49:30Z",
    "updated_at": "2020-10-08T17:01:34Z",
    "author_association": "NONE",
    "body": "Another use case: having easy access to the JSON input would be very helpful when debugging compiler crashes (like in #2994 or #3419). Admittedly, that's not typical usage for contract developers but currently the only way I know to get this info when someone reports a bug is to download Truffle source and modify it (by inserting `console.log(inputString)` in `invokeCompiler()` in `packages/compile-solidity/run.js`). It would be much better to be able to get that info out of a built version downloaded via npm or system package manager.\r\n\r\nI can get it from the metadata but that's obviously not available if the contract fails to compile due to an internal compiler error. Also, the JSON stored in the metadata is not the exact copy of the input. It has been read, analyzed and then serialized again by the compiler from its internal data structure that stores settings - the difference can sometimes matter when trying to analyze buggy behavior.\r\n\r\nThis info is also directly usable with `solc --standard-json` - can be supplied on standard input or stored in a file if you specify the name. Currently this does not always map easily to the standard use with command-line flags but this is likely to change in the future (https://github.com/ethereum/solidity/issues/9583).",
    "reactions": {
      "url": "https://api.github.com/repos/trufflesuite/truffle/issues/comments/705694527/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/trufflesuite/truffle/issues/comments/705762092",
    "html_url": "https://github.com/trufflesuite/truffle/issues/3368#issuecomment-705762092",
    "issue_url": "https://api.github.com/repos/trufflesuite/truffle/issues/3368",
    "id": 705762092,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwNTc2MjA5Mg==",
    "user": {
      "login": "gnidan",
      "id": 151065,
      "node_id": "MDQ6VXNlcjE1MTA2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/151065?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gnidan",
      "html_url": "https://github.com/gnidan",
      "followers_url": "https://api.github.com/users/gnidan/followers",
      "following_url": "https://api.github.com/users/gnidan/following{/other_user}",
      "gists_url": "https://api.github.com/users/gnidan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gnidan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gnidan/subscriptions",
      "organizations_url": "https://api.github.com/users/gnidan/orgs",
      "repos_url": "https://api.github.com/users/gnidan/repos",
      "events_url": "https://api.github.com/users/gnidan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gnidan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-08T19:00:04Z",
    "updated_at": "2020-10-08T19:00:04Z",
    "author_association": "MEMBER",
    "body": "Hm, some questions:\r\n\r\n1. Is this part of `truffle compile` or is it a separate command?\r\n  a. If it's part of `truffle compile`, what's a good name for a CLI flag? `truffle compile --save-compiler-inputs=<filename>`?\r\n  b. If it's part of `truffle compile`, should it print this info in addition to doing the normal compilation, or instead of doing that?\r\n  c. If it's a separate command, what do we call it?\r\n2. Since `truffle compile` handles more than just solc, how does this work for Vyper, etc.?\r\n  a. If we don't want to support non-solc compilers, can we restrict this to just solc? So `truffle compile --compiler=solc --save-compiler-inputs=<filename>`? This might get tricky in implementation.\r\n  b. If we support this for all compilers, what's the aggregate result data look like? We'd need to figure that out\r\n  c. What do we do about @truffle/external-compile? (see [external compiler docs](https://www.trufflesuite.com/docs/truffle/reference/configuration#external-compilers))\r\n\r\nAnyway, I'm into this. I'll move this to our backlog with a low priority, but I'll mark it `help wanted` if anyone wants to open a PR for this, once we get these requirements nailed down.\r\n\r\nThis would require changes in a few places:\r\n- `packages/core/lib/commands/compile` to add the CLI flag and hook that up (unless we make it a totally separate command)\r\n- `packages/workflow-compile` to accept the new option and forward it to the relevant compiler integrations\r\n- `packages/compile-solidity` for solc\r\n- `packages/compile-vyper` for vyper\r\n- `packages/external-compile` for external compilers (this might not need to change much, not sure)\r\n- `packages/compile-common`, since that defines the common interface across all the compiler packages\r\n\r\nIf anyone's interested in pursuing this, let us know! Happy to work with you to figure out the unknowns and make this happen. Thanks!",
    "reactions": {
      "url": "https://api.github.com/repos/trufflesuite/truffle/issues/comments/705762092/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/trufflesuite/truffle/issues/comments/705783278",
    "html_url": "https://github.com/trufflesuite/truffle/issues/3368#issuecomment-705783278",
    "issue_url": "https://api.github.com/repos/trufflesuite/truffle/issues/3368",
    "id": 705783278,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwNTc4MzI3OA==",
    "user": {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-08T19:41:51Z",
    "updated_at": "2020-10-08T20:10:41Z",
    "author_association": "NONE",
    "body": "> Hm, some questions:\r\n>     1. Is this part of `truffle compile` or is it a separate command?\r\n\r\nI see it just as an option to enable more verbose output, possibly usable also with `truffle test` and maybe other commands if they invoke the compiler, so a CLI flag sounds like the best fit.\r\n\r\n> a. If it's part of `truffle compile`, what's a good name for a CLI flag? `truffle compile --save-compiler-inputs=<filename>`?\r\n\r\nHow about `--show-compiler-input`? `--show-invocations`? Just `--verbose` might be good too - this does not really have to be limited to showing just the compiler input, though that's the part that's useful to me at the moment.\r\n\r\nBeing able to save the input to a file sounds convenient but only if it's one file per invocation. If it's just a big dump of all invocations, then I can't feed that directly to `solc` and I think it's better to just print it to stdout so that I can copy it and paste into a file.\r\n\r\n> b. If it's part of `truffle compile`, should it print this info in addition to doing the normal compilation, or instead of doing that?\r\n\r\nI'd say that printing it to stdout along with everything else would be fine for me. It would just be helpful if that output was printed prettified (i.e. with indentation) to make it readable.\r\n\r\n> 2. Since `truffle compile` handles more than just solc, how does this work for Vyper, etc.?\r\n\r\nI'm not sure how Truffle communicates with Vyper but I'd say that I would just expect it to tell me that it's invoking Vyper and show me whatever information it passes to it. Might be JSON, TOML, CLI commands, a dump of RPC commands if it's running like a language server or any other info that it receives.\r\n\r\n> a. If we don't want to support non-solc compilers, can we restrict this to just solc? So `truffle compile --compiler=solc --save-compiler-inputs=<filename>`? This might get tricky in implementation.\r\n\r\nPersonally I'd be fine even with it working only for Solidity but I don't think it would be hard to add logging for other compilers too as long as you treat it just as log output and not something that has to adhere to the same format in all cases.\r\n\r\n> b. If we support this for all compilers, what's the aggregate result data look like? We'd need to figure that out\r\n\r\nJust a free-form log of all the stuff that was invoked.\r\n\r\n> c. What do we do about @truffle/external-compile? (see [external compiler docs](https://www.trufflesuite.com/docs/truffle/reference/configuration#external-compilers))\r\n\r\nIt actually sounds like this feature would be helpful when trying to hook up a custom compilation script. While doing stuff like that for the first time there's usually some trial and error involved to figure out how exactly to specify it and what exactly the command is getting as arguments.\r\n\r\nDoes Truffle execute it as a process (or a shell command)? Then just seeing the command, its arguments and the working directory would be the information I'd want to see.\r\n\r\n> Anyway, I'm into this. I'll move this to our backlog with a low priority, but I'll mark it `help wanted` if anyone wants to open a PR for this, once we get these requirements nailed down.\r\n\r\nThanks a lot! I hope the answers above help.",
    "reactions": {
      "url": "https://api.github.com/repos/trufflesuite/truffle/issues/comments/705783278/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/trufflesuite/truffle/issues/comments/705862360",
    "html_url": "https://github.com/trufflesuite/truffle/issues/3368#issuecomment-705862360",
    "issue_url": "https://api.github.com/repos/trufflesuite/truffle/issues/3368",
    "id": 705862360,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwNTg2MjM2MA==",
    "user": {
      "login": "gnidan",
      "id": 151065,
      "node_id": "MDQ6VXNlcjE1MTA2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/151065?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gnidan",
      "html_url": "https://github.com/gnidan",
      "followers_url": "https://api.github.com/users/gnidan/followers",
      "following_url": "https://api.github.com/users/gnidan/following{/other_user}",
      "gists_url": "https://api.github.com/users/gnidan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gnidan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gnidan/subscriptions",
      "organizations_url": "https://api.github.com/users/gnidan/orgs",
      "repos_url": "https://api.github.com/users/gnidan/repos",
      "events_url": "https://api.github.com/users/gnidan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gnidan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-08T22:47:28Z",
    "updated_at": "2020-10-08T22:47:28Z",
    "author_association": "MEMBER",
    "body": "> I see it just as an option to enable more verbose output, possibly usable also with truffle test and maybe other commands if they invoke the compiler, so a CLI flag sounds like the best fit.\r\n\r\nI concur with this.\r\n\r\n> I'd say that printing it to stdout along with everything else would be fine for me. It would just be helpful if that output was printed prettified (i.e. with indentation) to make it readable.\r\n\r\nThe problem with stdout is that it makes it harder to extract programmatically, since there's other stdout that might get in the way. We faced this problem recently and decided to go with a similar solution with the (undocumented) `truffle compile --save-intermediate` flag.\r\n\r\n> Being able to save the input to a file sounds convenient but only if it's one file per invocation. If it's just a big dump of all invocations, then I can't feed that directly to solc and I think it's better to just print it to stdout so that I can copy it and paste into a file.\r\n\r\nI'm imagining that we'd save a JSON file that'd be organized by compilation - so you could go into that file and grab whatever compilation you need specifically.\r\n\r\nAlternatively, we could create a directory and store everything there, but I think that's a bit uglier.\r\n\r\n> Personally I'd be fine even with it working only for Solidity but I don't think it would be hard to add logging for other compilers too as long as you treat it just as log output and not something that has to adhere to the same format in all cases.\r\n\r\nThe implementation concern I have with this approach is that, right now, there's no way to define CLI options that only apply to one compiler. We could add that, and then have (e.g.) `truffle compile --solc-save-standard-json`, but I think that'd be more work than defining something in common for everything.\r\n\r\n> Does Truffle execute it as a process (or a shell command)? Then just seeing the command, its arguments and the working directory would be the information I'd want to see.\r\n\r\nYep, it executes as a child process in the shell. So yeah, seems pretty easy.\r\n\r\nThe next tricky thing, I think, will be to create unified type that works across compilers. Note that Truffle currently invokes solc in a number of ways (and similarly for Vyper): we either do `docker run` or we call a native `solc` binary through the shell, or we invoke a wrapped soljson via JS. Would we use a type union to represent the different possibilities here?\r\n\r\nSeems like the first step would be to start spec'ing out what the TS type would look like.\r\n\r\n> Thanks a lot! I hope the answers above help.\r\n\r\nDefinitely! Thank you!",
    "reactions": {
      "url": "https://api.github.com/repos/trufflesuite/truffle/issues/comments/705862360/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/trufflesuite/truffle/issues/comments/705872348",
    "html_url": "https://github.com/trufflesuite/truffle/issues/3368#issuecomment-705872348",
    "issue_url": "https://api.github.com/repos/trufflesuite/truffle/issues/3368",
    "id": 705872348,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwNTg3MjM0OA==",
    "user": {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-08T23:20:17Z",
    "updated_at": "2020-10-08T23:21:25Z",
    "author_association": "NONE",
    "body": "I'm suggesting just printing to stdout because my and @fxfactorial's use cases do not really require it to be easy to process programmatically and I'm not sure if there's really a good use case for that. If it needs to be processed like that then some way to hook into the compilation process in JS would be more a general solution anyway. Trying to solve it here might mean dealing with problems that don't really need to be solved :)\r\n\r\nI'd do it in the simplest possible way now and refactor into a more robust feature once a real use case appears. The nice thing about this being just optional, free-form log output meant for human consumption is that the backwards-compatibility is not really a concern. So there's no need to make it perfect from the start, it can be minimal and improved when the need comes. Maybe I'd add a randomly generated [content boundary (like in MIME multipart messages)](https://en.wikipedia.org/wiki/Delimiter#Content_boundary) to make it easy to cut that part out programmatically but that's basically it.",
    "reactions": {
      "url": "https://api.github.com/repos/trufflesuite/truffle/issues/comments/705872348/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/trufflesuite/truffle/issues/comments/707203691",
    "html_url": "https://github.com/trufflesuite/truffle/issues/3368#issuecomment-707203691",
    "issue_url": "https://api.github.com/repos/trufflesuite/truffle/issues/3368",
    "id": 707203691,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwNzIwMzY5MQ==",
    "user": {
      "login": "eggplantzzz",
      "id": 14827965,
      "node_id": "MDQ6VXNlcjE0ODI3OTY1",
      "avatar_url": "https://avatars.githubusercontent.com/u/14827965?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/eggplantzzz",
      "html_url": "https://github.com/eggplantzzz",
      "followers_url": "https://api.github.com/users/eggplantzzz/followers",
      "following_url": "https://api.github.com/users/eggplantzzz/following{/other_user}",
      "gists_url": "https://api.github.com/users/eggplantzzz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/eggplantzzz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/eggplantzzz/subscriptions",
      "organizations_url": "https://api.github.com/users/eggplantzzz/orgs",
      "repos_url": "https://api.github.com/users/eggplantzzz/repos",
      "events_url": "https://api.github.com/users/eggplantzzz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/eggplantzzz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-12T15:55:05Z",
    "updated_at": "2020-10-12T15:55:05Z",
    "author_association": "CONTRIBUTOR",
    "body": "@gnidan This is a perfect task for the event system if we go ahead and implement something for this :)",
    "reactions": {
      "url": "https://api.github.com/repos/trufflesuite/truffle/issues/comments/707203691/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
