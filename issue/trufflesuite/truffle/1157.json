{
  "url": "https://api.github.com/repos/trufflesuite/truffle/issues/1157",
  "repository_url": "https://api.github.com/repos/trufflesuite/truffle",
  "labels_url": "https://api.github.com/repos/trufflesuite/truffle/issues/1157/labels{/name}",
  "comments_url": "https://api.github.com/repos/trufflesuite/truffle/issues/1157/comments",
  "events_url": "https://api.github.com/repos/trufflesuite/truffle/issues/1157/events",
  "html_url": "https://github.com/trufflesuite/truffle/issues/1157",
  "id": 345434607,
  "node_id": "MDU6SXNzdWUzNDU0MzQ2MDc=",
  "number": 1157,
  "title": "Deploy simple ERC20 token and simple Crowdsale contract into ropsten network with locally installed Truffle, but received this error: The contract code couldn't be stored, please check your gas amount",
  "user": {
    "login": "robertbob987",
    "id": 37437381,
    "node_id": "MDQ6VXNlcjM3NDM3Mzgx",
    "avatar_url": "https://avatars.githubusercontent.com/u/37437381?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/robertbob987",
    "html_url": "https://github.com/robertbob987",
    "followers_url": "https://api.github.com/users/robertbob987/followers",
    "following_url": "https://api.github.com/users/robertbob987/following{/other_user}",
    "gists_url": "https://api.github.com/users/robertbob987/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/robertbob987/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/robertbob987/subscriptions",
    "organizations_url": "https://api.github.com/users/robertbob987/orgs",
    "repos_url": "https://api.github.com/users/robertbob987/repos",
    "events_url": "https://api.github.com/users/robertbob987/events{/privacy}",
    "received_events_url": "https://api.github.com/users/robertbob987/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2018-07-28T09:22:41Z",
  "updated_at": "2018-07-31T17:33:08Z",
  "closed_at": "2018-07-31T17:33:08Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "I am trying to deploy simple ERC20 token and simple Crowdsale contract into ropsten network with locally installed Truffle, but received this error: The contract code couldn't be stored, please check your gas amount\r\n`truffle migrate --reset --network ropsten\r\nUsing network 'ropsten'.\r\n\r\nRunning migration: 1_initial_migration.js\r\n  Replacing Migrations...\r\n  ... 0x0ff37e7ba5a0eb4f8600984db8ba13fac80f5e6c085a4254afa31dae741e2fef\r\n  Migrations: 0x268c318e2a04a6fdcba5b03a43f2ffda4f2b6e80\r\nSaving successful migration to network...\r\n  ... 0x65a0aa077ad45c1b8e4735d36622f20f805192ac1b913cb281c30c978781947f\r\nSaving artifacts...\r\nRunning migration: 2_deploy_contracts.js\r\n  Running step...\r\n  Deploying SampleCrowdsaleToken...\r\n  ... 0x5c865b9cbef7a35145ef60c6b4f6be02c4c974d33d0ccbf28698975b02b81f6a\r\n  SampleCrowdsaleToken: 0xbfb19138461daeed076e179593212d870c14204d\r\n  Deploying SampleCrowdsale...\r\n  ... 0x6a6bbcaa614999d4e09e6a73263ebf7a3e217695c113d50a9d3f23a7ccca5a57\r\nError encountered, bailing. Network state unknown. Review successful transactions manually.\r\nError: The contract code couldn't be stored, please check your gas amount.\r\n    at Object.callback (/home/haibing/.nvm/versions/node/v9.11.1/lib/node_modules/truffle/build/webpack:/~/web3/lib/web3/contract.js:147:1)\r\n    at /home/haibing/.nvm/versions/node/v9.11.1/lib/node_modules/truffle/build/webpack:/~/web3/lib/web3/method.js:142:1\r\n    at /home/haibing/.nvm/versions/node/v9.11.1/lib/node_modules/truffle/build/webpack:/~/web3/lib/web3/requestmanager.js:89:1\r\n    at /home/haibing/.nvm/versions/node/v9.11.1/lib/node_modules/truffle/build/webpack:/~/truffle-core/~/truffle-migrate/index.js:225:1\r\n    at /home/haibing/.nvm/versions/node/v9.11.1/lib/node_modules/truffle/build/webpack:/~/truffle-provider/wrapper.js:134:1\r\n    at XMLHttpRequest.request.onreadystatechange (/home/haibing/.nvm/versions/node/v9.11.1/lib/node_modules/truffle/build/webpack:/~/web3/lib/web3/httpprovider.js:128:1)\r\n    at XMLHttpRequestEventTarget.dispatchEvent (/home/haibing/.nvm/versions/node/v9.11.1/lib/node_modules/truffle/build/webpack:/~/xhr2/lib/xhr2.js:64:1)\r\n    at XMLHttpRequest._setReadyState (/home/haibing/.nvm/versions/node/v9.11.1/lib/node_modules/truffle/build/webpack:/~/xhr2/lib/xhr2.js:354:1)\r\n    at XMLHttpRequest._onHttpResponseEnd (/home/haibing/.nvm/versions/node/v9.11.1/lib/node_modules/truffle/build/webpack:/~/xhr2/lib/xhr2.js:509:1)\r\n    at IncomingMessage.<anonymous> (/home/haibing/.nvm/versions/node/v9.11.1/lib/node_modules/truffle/build/webpack:/~/xhr2/lib/xhr2.js:469:1)\r\n    at IncomingMessage.emit (events.js:185:15)\r\n    at endReadableNT (_stream_readable.js:1106:12)\r\n    at process._tickCallback (internal/process/next_tick.js:178:19)\r\n`\r\n### token contract:\r\n`pragma solidity ^0.4.18;\r\nimport 'zeppelin-solidity/contracts/token/ERC20/MintableToken.sol';\r\n\r\n/**\r\n * @title SampleCrowdsaleToken\r\n * @dev Very simple ERC20 Token that can be minted.\r\n * It is meant to be used in a crowdsale contract.\r\n */\r\ncontract SampleCrowdsaleToken is MintableToken {\r\n\r\n  string public constant name = \"Sample Crowdsale Token\"; // solium-disable-line uppercase\r\n  string public constant symbol = \"SCT\"; // solium-disable-line uppercase\r\n  uint8 public constant decimals = 18; // solium-disable-line uppercase\r\n\r\n}\r\n`\r\n### crowdsale contract:\r\n`pragma solidity ^0.4.18;\r\n\r\nimport \"zeppelin-solidity/contracts/crowdsale/validation/CappedCrowdsale.sol\";\r\nimport \"zeppelin-solidity/contracts/crowdsale/distribution/RefundableCrowdsale.sol\";\r\nimport \"zeppelin-solidity/contracts/crowdsale/emission/MintedCrowdsale.sol\";\r\n\r\nimport \"./SampleCrowdsaleToken.sol\";\r\n\r\n/**\r\n * @title SampleCrowdsale\r\n * @dev This is an example of a fully fledged crowdsale.\r\n * The way to add new features to a base crowdsale is by multiple inheritance.\r\n * In this example we are providing following extensions:\r\n * CappedCrowdsale - sets a max boundary for raised funds\r\n * RefundableCrowdsale - set a min goal to be reached and returns funds if it's not met\r\n *\r\n * After adding multiple features it's good practice to run integration tests\r\n * to ensure that subcontracts works together as intended.\r\n */\r\ncontract SampleCrowdsale is CappedCrowdsale, RefundableCrowdsale, MintedCrowdsale {\r\n\r\n  function SampleCrowdsale(uint256 _openingTime, uint256 _closingTime, uint256 _rate, address _wallet, uint256 _cap, MintableToken _token, uint256 _goal) public\r\n    Crowdsale(_rate, _wallet, _token)\r\n    CappedCrowdsale(_cap)\r\n    TimedCrowdsale(_openingTime, _closingTime)\r\n    RefundableCrowdsale(_goal)\r\n  {\r\n    //As goal needs to be met for a successful crowdsale\r\n    //the value needs to less or equal than a cap which is limit for accepted funds\r\n    require(_goal <= _cap);\r\n  }\r\n}\r\n`\r\n### Migration JS file:\r\n```javascript\r\nvar SampleCrowdsale = artifacts.require(\"SampleCrowdsale\");\r\nvar SampleCrowdsaleToken = artifacts.require(\"SampleCrowdsaleToken\");\r\n\r\nmodule.exports = function(deployer, network, accounts) \r\n{\r\n    const startTime = Date.now()/1000|0 + 120;\r\n    const endTime = startTime + (3600 * 1 * 1); // *1 hour *1 days\r\n    const ethRate = new web3.BigNumber(100);\r\n    const wallet = accounts[0];\r\n    return deployer\r\n        .then(() => {\r\n            return deployer.deploy(SampleCrowdsaleToken);\r\n        })\r\n        .then(() => {\r\n            return deployer.deploy(\r\n                SampleCrowdsale,\r\n                startTime,\r\n                endTime,\r\n                ethRate,\r\n                wallet,\r\n                100000000000000000000,\r\n                SampleCrowdsaleToken.address,\r\n                200000000000000000000\r\n            );\r\n        }).then(() => {\r\n\r\n            // TODO: transfer ownerhship of the token to the crowdsale for minting\r\n            // Currently doing that in the UI\r\n\r\n        });\r\n};\r\n```\r\n### truffle.js\r\n```javascript\r\nmodule.exports = {\r\n  // See <http://truffleframework.com/docs/advanced/configuration>\r\n  // for more about customizing your Truffle configuration!\r\n  networks: {\r\n    development: {\r\n      host: \"127.0.0.1\",\r\n      port: 9545,\r\n      network_id: \"*\" // Match any network id\r\n    \r\n    },\r\n    ropsten: {\r\n      host: \"localhost\",\r\n      port: 8545,\r\n      network_id: \"*\",\r\n      gas: 4712388,//4000000,   // <--- Twice as much\r\n      gasPrice: 100000000000,\r\n      from: \"0x986ccba35d50e5f3b7a7c895ebce9212c343f691\"\r\n    }\r\n  }\r\n};\r\n```\r\n### Environment:\r\nTruffle v4.1.8 (core: 4.1.8)\r\nSolidity v0.4.23 (solc-js)\r\n\r\nGeth\r\nVersion: 1.8.7-stable\r\nGit Commit: 66432f3821badf24d526f2d9205f36c0543219de\r\nArchitecture: amd64\r\nProtocol Versions: [63 62]\r\nNetwork Id: 1\r\nGo Version: go1.10\r\nOperating System: linux\r\nGOPATH=\r\nGOROOT=/usr/lib/go-1.10\r\n",
  "closed_by": {
    "login": "cgewecke",
    "id": 7332026,
    "node_id": "MDQ6VXNlcjczMzIwMjY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/7332026?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cgewecke",
    "html_url": "https://github.com/cgewecke",
    "followers_url": "https://api.github.com/users/cgewecke/followers",
    "following_url": "https://api.github.com/users/cgewecke/following{/other_user}",
    "gists_url": "https://api.github.com/users/cgewecke/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cgewecke/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cgewecke/subscriptions",
    "organizations_url": "https://api.github.com/users/cgewecke/orgs",
    "repos_url": "https://api.github.com/users/cgewecke/repos",
    "events_url": "https://api.github.com/users/cgewecke/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cgewecke/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/trufflesuite/truffle/issues/1157/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/trufflesuite/truffle/issues/1157/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/trufflesuite/truffle/issues/comments/409304061",
    "html_url": "https://github.com/trufflesuite/truffle/issues/1157#issuecomment-409304061",
    "issue_url": "https://api.github.com/repos/trufflesuite/truffle/issues/1157",
    "id": 409304061,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwOTMwNDA2MQ==",
    "user": {
      "login": "cgewecke",
      "id": 7332026,
      "node_id": "MDQ6VXNlcjczMzIwMjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7332026?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cgewecke",
      "html_url": "https://github.com/cgewecke",
      "followers_url": "https://api.github.com/users/cgewecke/followers",
      "following_url": "https://api.github.com/users/cgewecke/following{/other_user}",
      "gists_url": "https://api.github.com/users/cgewecke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cgewecke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cgewecke/subscriptions",
      "organizations_url": "https://api.github.com/users/cgewecke/orgs",
      "repos_url": "https://api.github.com/users/cgewecke/repos",
      "events_url": "https://api.github.com/users/cgewecke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cgewecke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-31T17:33:07Z",
    "updated_at": "2018-07-31T17:33:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "@robertbob987 Just scanning the code, one thing I see that might be a problem is the way you're passing the `rate` in. In JS the maximum integer is: \r\n```\r\n9007199254740991\r\n```\r\nYour rates are:\r\n```\r\n100000000000000000000\r\n```\r\nYou might try using web3's `toWei` methods to convert the value you want into a BigNumber first before passing them in. \r\n\r\nAlso:\r\n+ try searching the Truffle issues for migrations and crowdsale threads - problems with start date and end date are common. \r\n+ This [article](https://vmexceptionwhileprocessingtransactionrevert.com/) is helpful. \r\n\r\nClosing because it's not clear this is bug in Truffle specifically. Please ping if you discover otherwise.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/trufflesuite/truffle/issues/comments/409304061/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
