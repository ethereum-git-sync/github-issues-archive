{
  "url": "https://api.github.com/repos/trufflesuite/truffle/issues/225",
  "repository_url": "https://api.github.com/repos/trufflesuite/truffle",
  "labels_url": "https://api.github.com/repos/trufflesuite/truffle/issues/225/labels{/name}",
  "comments_url": "https://api.github.com/repos/trufflesuite/truffle/issues/225/comments",
  "events_url": "https://api.github.com/repos/trufflesuite/truffle/issues/225/events",
  "html_url": "https://github.com/trufflesuite/truffle/issues/225",
  "id": 169613222,
  "node_id": "MDU6SXNzdWUxNjk2MTMyMjI=",
  "number": 225,
  "title": "[BUG] truffle classifies tests that should fail as passing",
  "user": {
    "login": "SethVgr",
    "id": 19685073,
    "node_id": "MDQ6VXNlcjE5Njg1MDcz",
    "avatar_url": "https://avatars.githubusercontent.com/u/19685073?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/SethVgr",
    "html_url": "https://github.com/SethVgr",
    "followers_url": "https://api.github.com/users/SethVgr/followers",
    "following_url": "https://api.github.com/users/SethVgr/following{/other_user}",
    "gists_url": "https://api.github.com/users/SethVgr/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/SethVgr/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/SethVgr/subscriptions",
    "organizations_url": "https://api.github.com/users/SethVgr/orgs",
    "repos_url": "https://api.github.com/users/SethVgr/repos",
    "events_url": "https://api.github.com/users/SethVgr/events{/privacy}",
    "received_events_url": "https://api.github.com/users/SethVgr/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 3,
  "created_at": "2016-08-05T13:58:00Z",
  "updated_at": "2016-08-26T15:37:57Z",
  "closed_at": "2016-08-24T20:35:39Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "@tcoulter \n# Checklist\n- [done ] installed **truffle** and **testrpc**\n\n```\n# npm install -g truffle\n# npm install -g testrpc\n```\n\nCreated a directory and ran initialized truffle:\n\n```\nmkdir test_project\ncd test_project\ntruffle init\n```\n\nCleared the pregenerated contracts and tests:\n\n`rm -r tests/* contracts/* build/*`\n\nand kept only the **Migrations.sol** contract in directory **contracts/**:\n\n```\ncontract Migrations {\n  address public owner;\n\n  // A function with the signature `last_completed_migration()`, returning a uint, is required.\n  uint public last_completed_migration;\n\n  modifier restricted() {\n    if (msg.sender == owner) _\n  }\n\n  function Migrations() {\n    owner = msg.sender;\n  }\n\n  // A function with the signature `setCompleted(uint)` is required.\n  function setCompleted(uint completed) restricted {\n    last_completed_migration = completed;\n  }\n\n  function upgrade(address new_address) restricted {\n    Migrations upgraded = Migrations(new_address);\n    upgraded.setCompleted(last_completed_migration);\n  }\n}\n```\n\nAdded a minimalist contract (in directory **contracts/**) and test js (in directory **tests/**) file:\n\n**C.sol**\n\n```\ncontract C {\n\n    address[] allowedClientAddrs;\n    address[] controlAddrs;\n\n    function initAddrsDbgTruffle() {\n\n        if (controlAddrs.length == 0) {\n            controlAddrs.push(0xace9110f62d55189abfde92892af8613fd40945f);\n        }\n\n        if (allowedClientAddrs.length == 0) {\n            allowedClientAddrs.push(0x3034715388e6f306c691eceea993cebd8360cb92);\n        }\n\n        if (controlAddrs.length == 1 && allowedClientAddrs.length == 1) {\n            return;\n        }\n\n        for (uint256 i = 0; i < controlAddrs.length; i++) {\n            if (controlAddrs[i] == 0xace9110f62d55189abfde92892af8613fd40945f)\n                return;\n        }\n\n        for (i = 0; i < allowedClientAddrs.length; i++) {\n            if (allowedClientAddrs[i] == 0x3034715388e6f306c691eceea993cebd8360cb92)\n                return;\n        }\n\n        controlAddrs.push(0xace9110f62d55189abfde92892af8613fd40945f);\n        allowedClientAddrs.push(0x3034715388e6f306c691eceea993cebd8360cb92);\n    }\n\n    function testClientAddr(uint256 index) constant returns(address) {\n        address stub;\n\n        if (index >= allowedClientAddrs.length) {\n            return stub;\n        }\n\n        return allowedClientAddrs[index];\n    }\n\n    function testControlAddr(uint256 index) constant returns(address) {\n        address stub;\n\n        if (index >= controlAddrs.length) {\n            return stub;\n        }\n\n        return controlAddrs[index];\n    }\n\n}\n```\n\n**c.js**\n\n```\ncontract('C', function(accounts) {\n  it(\"[I] Initializing addresses\", function() {\n    var fileDistribution = FileDistribution.deployed();\n\n    fileDistribution.initAddrsDbgTruffle({from:accounts[0],gas:400000000}).then(function() {\n      fileDistribution.testClientAddr.call(0).then(function(clientAddress) {\n\n    assert.equal(clientAddress, \"This is a test\", \"[E] The expected client address does not match \" + clientAddress);\n\n        return fileDistribution.testControlAddr.call(0).then(function(controlAddress) {\n\n        assert.equal(controlAddress, \"0xca35b7d915458ef540ade6068dfe2f44e8fa733c\", \"[E] The expected control address does not match \" + controlAddress);\n        });\n      });\n\n    });\n  });\n\n});\n```\n\nI have a migration file 1_deploy_contracts.js in directory **migrations/**\n\n```\nmodule.exports = function(deployer) {\n  deployer.deploy(FileDistribution);\n};\n```\n\nNext, I ran \n\n```\ntruffle compile --compile-all\ntruffle migrate\ntruffle test\n```\n\nEverything seemed ok; the contracts are compiled and mined by **testrpc**. \n## System/environment\n- OS: debian 8.3 Jessie x64, kernel version 3.16.0-4-amd64, virtual machine, running on VirtualBox, host machine Win7 x64, NAT network settings used\n## Expected behaviour\n\n**truffle** should have failed test:\n\n`assert.equal(clientAddress, \"This is a test\", \"[E] The expected client address does not match \" + clientAddress);`\n## Observed behaviour\n\nBoth tests are marked as valid even though the first test in the first assertion is clearly not a valid Ethereum address:\n\n```\nContract: C\n    âœ“ [I] Initializing addresses (39ms)\n```\n\nIs truffle broken?\n",
  "closed_by": {
    "login": "tcoulter",
    "id": 92629,
    "node_id": "MDQ6VXNlcjkyNjI5",
    "avatar_url": "https://avatars.githubusercontent.com/u/92629?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tcoulter",
    "html_url": "https://github.com/tcoulter",
    "followers_url": "https://api.github.com/users/tcoulter/followers",
    "following_url": "https://api.github.com/users/tcoulter/following{/other_user}",
    "gists_url": "https://api.github.com/users/tcoulter/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tcoulter/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tcoulter/subscriptions",
    "organizations_url": "https://api.github.com/users/tcoulter/orgs",
    "repos_url": "https://api.github.com/users/tcoulter/repos",
    "events_url": "https://api.github.com/users/tcoulter/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tcoulter/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/trufflesuite/truffle/issues/225/reactions",
    "total_count": 2,
    "+1": 2,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/trufflesuite/truffle/issues/225/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/trufflesuite/truffle/issues/comments/240735116",
    "html_url": "https://github.com/trufflesuite/truffle/issues/225#issuecomment-240735116",
    "issue_url": "https://api.github.com/repos/trufflesuite/truffle/issues/225",
    "id": 240735116,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MDczNTExNg==",
    "user": {
      "login": "elenadimitrova",
      "id": 703848,
      "node_id": "MDQ6VXNlcjcwMzg0OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/703848?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/elenadimitrova",
      "html_url": "https://github.com/elenadimitrova",
      "followers_url": "https://api.github.com/users/elenadimitrova/followers",
      "following_url": "https://api.github.com/users/elenadimitrova/following{/other_user}",
      "gists_url": "https://api.github.com/users/elenadimitrova/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/elenadimitrova/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/elenadimitrova/subscriptions",
      "organizations_url": "https://api.github.com/users/elenadimitrova/orgs",
      "repos_url": "https://api.github.com/users/elenadimitrova/repos",
      "events_url": "https://api.github.com/users/elenadimitrova/events{/privacy}",
      "received_events_url": "https://api.github.com/users/elenadimitrova/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-18T14:12:20Z",
    "updated_at": "2016-08-18T14:12:20Z",
    "author_association": "NONE",
    "body": "Maybe a duplicate to https://github.com/ConsenSys/truffle/issues/223\n",
    "reactions": {
      "url": "https://api.github.com/repos/trufflesuite/truffle/issues/comments/240735116/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/trufflesuite/truffle/issues/comments/242199545",
    "html_url": "https://github.com/trufflesuite/truffle/issues/225#issuecomment-242199545",
    "issue_url": "https://api.github.com/repos/trufflesuite/truffle/issues/225",
    "id": 242199545,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MjE5OTU0NQ==",
    "user": {
      "login": "tcoulter",
      "id": 92629,
      "node_id": "MDQ6VXNlcjkyNjI5",
      "avatar_url": "https://avatars.githubusercontent.com/u/92629?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tcoulter",
      "html_url": "https://github.com/tcoulter",
      "followers_url": "https://api.github.com/users/tcoulter/followers",
      "following_url": "https://api.github.com/users/tcoulter/following{/other_user}",
      "gists_url": "https://api.github.com/users/tcoulter/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tcoulter/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tcoulter/subscriptions",
      "organizations_url": "https://api.github.com/users/tcoulter/orgs",
      "repos_url": "https://api.github.com/users/tcoulter/repos",
      "events_url": "https://api.github.com/users/tcoulter/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tcoulter/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-24T20:35:38Z",
    "updated_at": "2016-08-24T20:37:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "See this line in your test (c.js): \n\n```\nit(\"[I] Initializing addresses\", function() {\n```\n\nYou're not passing a `done` callback to the function. When you don't do this, mocha -- the underlying test framework used by Truffle -- assumes your test is synchronous (i.e., doesn't make any asynchronous calls). However, your test makes many asynchronous calls, as shown by your nested callbacks. This means the `it()` function is going to complete before your asynchronous calls do, and mocha will consider it a success.\n\nTo ensure it doesn't happen, put a `done` callback within the function provided:\n\n```\nit(\"[I] Initializing addresses\", function(done) {\n```\n\nThen call that `done` function in your mostly deeply nested function after all your asserts. Mocha will now know that your test is asynchronous, and won't try to evaluate the results of the test until the `done` function is called.\n\nThere is one other option here, which is to return a promise, and mocha will evaluate that promise without the need for a `done` callback. However, this method won't work with nested promise chains, as in your example above. I've rewritten your test to both a) return a promise, and b) resolve your nested promise chains into single chain such that mocha will be able to evaluate it. One aside: You're not catching any promise errors and so even if there was an error mocha wouldn't know about it. In the example below you don't need to, because mocha knows how to handle a returned promise. However, it's good practice to catch errors on promise chains using `.catch()` when using promises (i.e., this case is an exception). \n\nUpdated c.js:\n\n``` javascript\ncontract('C', function(accounts) {\n  it(\"[I] Initializing addresses\", function() {\n    var fileDistribution = FileDistribution.deployed();\n\n    // This return returns the whole promise chain to Mocha.\n    return fileDistribution.initAddrsDbgTruffle({from:accounts[0],gas:400000000}).then(function() {\n      // This return returns another promise, to be evaluated and then passed to the next callback in the chain.\n      return fileDistribution.testClientAddr.call(0);\n    }).then(function(clientAddress) {\n      assert.equal(clientAddress, \"This is a test\", \"[E] The expected client address does not match \" + clientAddress);\n\n      // Return another promise, continuing the chain.\n      return fileDistribution.testControlAddr.call(0);\n    }).then(function(controlAddress) {\n      assert.equal(controlAddress, \"0xca35b7d915458ef540ade6068dfe2f44e8fa733c\", \"[E] The expected control address does not match \" + controlAddress);\n    });\n  });\n\n});\n```\n\nI'm going to close this ticket for housekeeping purposes. If you're positive there's actually a bug here, and it's not a misuse of promises / mocha, please don't hesitate to write in. Thanks!\n",
    "reactions": {
      "url": "https://api.github.com/repos/trufflesuite/truffle/issues/comments/242199545/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/trufflesuite/truffle/issues/comments/242770304",
    "html_url": "https://github.com/trufflesuite/truffle/issues/225#issuecomment-242770304",
    "issue_url": "https://api.github.com/repos/trufflesuite/truffle/issues/225",
    "id": 242770304,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0Mjc3MDMwNA==",
    "user": {
      "login": "SethVgr",
      "id": 19685073,
      "node_id": "MDQ6VXNlcjE5Njg1MDcz",
      "avatar_url": "https://avatars.githubusercontent.com/u/19685073?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SethVgr",
      "html_url": "https://github.com/SethVgr",
      "followers_url": "https://api.github.com/users/SethVgr/followers",
      "following_url": "https://api.github.com/users/SethVgr/following{/other_user}",
      "gists_url": "https://api.github.com/users/SethVgr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SethVgr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SethVgr/subscriptions",
      "organizations_url": "https://api.github.com/users/SethVgr/orgs",
      "repos_url": "https://api.github.com/users/SethVgr/repos",
      "events_url": "https://api.github.com/users/SethVgr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SethVgr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-26T15:37:57Z",
    "updated_at": "2016-08-26T15:37:57Z",
    "author_association": "NONE",
    "body": "Thanks. I did manage to get it to work. \n",
    "reactions": {
      "url": "https://api.github.com/repos/trufflesuite/truffle/issues/comments/242770304/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
