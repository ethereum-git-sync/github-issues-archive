{
  "url": "https://api.github.com/repos/trufflesuite/truffle/issues/2234",
  "repository_url": "https://api.github.com/repos/trufflesuite/truffle",
  "labels_url": "https://api.github.com/repos/trufflesuite/truffle/issues/2234/labels{/name}",
  "comments_url": "https://api.github.com/repos/trufflesuite/truffle/issues/2234/comments",
  "events_url": "https://api.github.com/repos/trufflesuite/truffle/issues/2234/events",
  "html_url": "https://github.com/trufflesuite/truffle/issues/2234",
  "id": 470316624,
  "node_id": "MDU6SXNzdWU0NzAzMTY2MjQ=",
  "number": 2234,
  "title": "Wrong GAS estimation",
  "user": {
    "login": "andreafspeziale",
    "id": 7680940,
    "node_id": "MDQ6VXNlcjc2ODA5NDA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/7680940?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/andreafspeziale",
    "html_url": "https://github.com/andreafspeziale",
    "followers_url": "https://api.github.com/users/andreafspeziale/followers",
    "following_url": "https://api.github.com/users/andreafspeziale/following{/other_user}",
    "gists_url": "https://api.github.com/users/andreafspeziale/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/andreafspeziale/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/andreafspeziale/subscriptions",
    "organizations_url": "https://api.github.com/users/andreafspeziale/orgs",
    "repos_url": "https://api.github.com/users/andreafspeziale/repos",
    "events_url": "https://api.github.com/users/andreafspeziale/events{/privacy}",
    "received_events_url": "https://api.github.com/users/andreafspeziale/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 230393329,
      "node_id": "MDU6TGFiZWwyMzAzOTMzMjk=",
      "url": "https://api.github.com/repos/trufflesuite/truffle/labels/help%20wanted",
      "name": "help wanted",
      "color": "159818",
      "default": true,
      "description": null
    },
    {
      "id": 1403343142,
      "node_id": "MDU6TGFiZWwxNDAzMzQzMTQy",
      "url": "https://api.github.com/repos/trufflesuite/truffle/labels/needs%20investigated",
      "name": "needs investigated",
      "color": "b7410e",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2019-07-19T13:10:32Z",
  "updated_at": "2019-07-30T11:52:03Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "- [ ] I've asked for help in the [Truffle Gitter](http://gitter.im/Consensys/truffle) before filing this issue.\r\n\r\n---------------------------\r\n\r\n## Issue\r\n\r\nIdon't know if it is the right place where report it.\r\nMy ERC20 `transfer` gas estimation report a wrong number.\r\n\r\n## Steps to Reproduce\r\n\r\n`MockToken.sol`\r\n```\r\npragma solidity ^0.5.10;\r\n\r\nimport \"openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol\";\r\nimport \"openzeppelin-solidity/contracts/token/ERC20/ERC20Mintable.sol\";\r\n\r\ncontract MockToken is ERC20Detailed, ERC20Mintable {\r\n\r\n  constructor(\r\n    string memory _name,\r\n    string memory _symbol,\r\n    uint8 _decimals,\r\n    uint _toBeMinted\r\n  )\r\n    public\r\n    ERC20Detailed(_name, _symbol, _decimals)\r\n  {\r\n    mint(msg.sender, _toBeMinted);\r\n  }\r\n}\r\n```\r\n\r\n`truffle-config.js`\r\n```javascript\r\nmodule.exports = {\r\n  networks: {\r\n    development: {\r\n      host: '127.0.0.1',\r\n      port: 7545,\r\n      network_id: '47',\r\n      gas: 4700000,\r\n      gasPrice: 6000000000,\r\n    },\r\n  },\r\n  compilers: {\r\n    solc: {\r\n      version: '0.5.10',\r\n      settings: {\r\n        optimizer: {\r\n          enabled: true,\r\n          runs: 200,\r\n        },\r\n      },\r\n    },\r\n  },\r\n}\r\n```\r\n\r\n`test.js`\r\n```javascript\r\nconst Tx = require('ethereumjs-tx').Transaction\r\n\r\nconst BigNumber = web3.utils.BN\r\n\r\nconst MockToken = artifacts.require('./Mocks/MockToken.sol')\r\n\r\nconst sender = '0xdb1b9e1708aec862fee256821702fa1906ceff67'\r\nconst senderPrivateKey = Buffer.from('a8345d27c6d41e4816163fe133daddf38298bb74c16ea5f8245727d03a5f85f8', 'hex')\r\n\r\ncontract('MockToken', (accounts) => {\r\n  const [TokenOwner] = accounts\r\n  const [, whoever] = accounts\r\n\r\n  describe('estimateGas', () => {\r\n    let MockTokenInstance\r\n\r\n    beforeEach(async () => {\r\n      MockTokenInstance = await MockToken.new(\r\n        'MockToken',\r\n        'ERC20',\r\n        18,\r\n        web3.utils.toWei('100'),\r\n        { from: TokenOwner },\r\n      )\r\n\r\n      await MockTokenInstance.transfer(sender, web3.utils.toWei('100'), { from: TokenOwner })\r\n    })\r\n\r\n    it('Should complete successfully the entire flow where an etherless account pay a transaction fee in ERC20', async () => {\r\n      // sender:\r\n      //    - has no ETH\r\n      //    - has 100 ERC0\r\n      //    - wants to send 10 ERC20 to whoever\r\n      //    - whoever sends the required eth to the sender in order to complete the transfer of the 10 ERC20\r\n\r\n      const transferTxData = MockTokenInstance.contract.methods.transfer(whoever, web3.utils.toWei('10')).encodeABI()\r\n      const transferGasEstimation = new BigNumber(await MockTokenInstance.transfer.estimateGas(whoever, web3.utils.toWei('10')))\r\n\r\n      const transferTx = new Tx({\r\n        to: MockTokenInstance.address,\r\n        data: transferTxData,\r\n        nonce: web3.utils.toHex(await web3.eth.getTransactionCount(sender)),\r\n        value: web3.utils.toHex('0'),\r\n        gasPrice: web3.utils.toHex(web3.utils.toWei('0.000005')),\r\n        gas: web3.utils.toHex(transferGasEstimation),\r\n      })\r\n\r\n      // sign primary tx\r\n      transferTx.sign(senderPrivateKey)\r\n      const transferRawTx = transferTx.serialize().toString('hex')\r\n      const transferCost = transferTx.getUpfrontCost()\r\n\r\n      // whoever sends to sender the transferCost\r\n      await web3.eth.sendTransaction({ from: whoever, to: sender, value: transferCost})\r\n      // sender now broadcast the transferRawTx\r\n      await web3.eth.sendSignedTransaction(transferRawTx)\r\n      // whoever has 10 ERC20\r\n      expect(await MockTokenInstance.balanceOf(whoever).toString()).to.equal(web3.utils.toWei('10'))\r\n      // sender still has 0 ETH\r\n      expect(await web3.eth.getBalance(sender)).to.equal('0')\r\n    })\r\n  })\r\n})\r\n```\r\n\r\n`yarn truffle compile`\r\n`yarn ganache-cli -p 7545 -i 47 -l 4700000`\r\n`yarn truffle test`\r\n\r\n## Expected Behavior\r\n\r\nThe transfer call will execute without any problem.\r\n\r\n## Actual Results\r\n\r\n`Error: Returned error: VM Exception while processing transaction: out of gas`\r\n\r\n## Environment\r\n\r\n* Operating System: macOsX\r\n\r\n```javascript\r\n\"dependencies\": {\r\n    \"ethereumjs-tx\": \"2.1.0\",\r\n    \"ethereumjs-util\": \"6.1.0\",\r\n    \"ganache-cli\": \"6.5.0\",\r\n    \"openzeppelin-solidity\": \"2.3\",\r\n    \"truffle\": \"5.0.26\"\r\n  }\r\n```\r\n\r\n* node version (`node --version`): `v10.16.0`\r\n* npm version (`npm --version`): `6.10.0`\r\n\r\n[wrong-gas-estimation.zip](https://github.com/trufflesuite/truffle/files/3411185/wrong-gas-estimation.zip)\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/trufflesuite/truffle/issues/2234/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/trufflesuite/truffle/issues/2234/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/trufflesuite/truffle/issues/comments/513531642",
    "html_url": "https://github.com/trufflesuite/truffle/issues/2234#issuecomment-513531642",
    "issue_url": "https://api.github.com/repos/trufflesuite/truffle/issues/2234",
    "id": 513531642,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxMzUzMTY0Mg==",
    "user": {
      "login": "andreafspeziale",
      "id": 7680940,
      "node_id": "MDQ6VXNlcjc2ODA5NDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7680940?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/andreafspeziale",
      "html_url": "https://github.com/andreafspeziale",
      "followers_url": "https://api.github.com/users/andreafspeziale/followers",
      "following_url": "https://api.github.com/users/andreafspeziale/following{/other_user}",
      "gists_url": "https://api.github.com/users/andreafspeziale/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/andreafspeziale/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/andreafspeziale/subscriptions",
      "organizations_url": "https://api.github.com/users/andreafspeziale/orgs",
      "repos_url": "https://api.github.com/users/andreafspeziale/repos",
      "events_url": "https://api.github.com/users/andreafspeziale/events{/privacy}",
      "received_events_url": "https://api.github.com/users/andreafspeziale/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-07-21T07:44:55Z",
    "updated_at": "2019-07-21T07:48:36Z",
    "author_association": "NONE",
    "body": "I've switched to `\"truffle\": \"5.0.27\"` and I've inserted some logs. This are some results:\r\n```\r\ntruffle contract => contractInstance.methodName.estimateGas() 23998\r\nweb3 => myContract.methods.myMethod().estimateGas() => 23998\r\nweb3 => web3.eth.estimateGas => 23998\r\nethereumjs-tx => getBaseFee() => 23192\r\n```\r\nIn any case it is not sufficient and will run into `out of gas`",
    "reactions": {
      "url": "https://api.github.com/repos/trufflesuite/truffle/issues/comments/513531642/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/trufflesuite/truffle/issues/comments/513778957",
    "html_url": "https://github.com/trufflesuite/truffle/issues/2234#issuecomment-513778957",
    "issue_url": "https://api.github.com/repos/trufflesuite/truffle/issues/2234",
    "id": 513778957,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxMzc3ODk1Nw==",
    "user": {
      "login": "andreafspeziale",
      "id": 7680940,
      "node_id": "MDQ6VXNlcjc2ODA5NDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7680940?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/andreafspeziale",
      "html_url": "https://github.com/andreafspeziale",
      "followers_url": "https://api.github.com/users/andreafspeziale/followers",
      "following_url": "https://api.github.com/users/andreafspeziale/following{/other_user}",
      "gists_url": "https://api.github.com/users/andreafspeziale/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/andreafspeziale/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/andreafspeziale/subscriptions",
      "organizations_url": "https://api.github.com/users/andreafspeziale/orgs",
      "repos_url": "https://api.github.com/users/andreafspeziale/repos",
      "events_url": "https://api.github.com/users/andreafspeziale/events{/privacy}",
      "received_events_url": "https://api.github.com/users/andreafspeziale/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-07-22T12:54:26Z",
    "updated_at": "2019-07-22T12:54:26Z",
    "author_association": "NONE",
    "body": "Hi guys I reach the correct amount of GAS needed for the above `transfer` call.\r\nThe correct amount is `51382`. Now the test is working cool.\r\n\r\n## How I reach the correct estimation?\r\nAll the above tries were made using `ganache-cli`.\r\n\r\nI've tried to run the test on a `parity dev client` and I noticed that the test was failing on the estimation call with a general `execution error`.\r\n\r\nThe same error occurs when I tried to run the estimation directly on the parity console creating the contract instance and running the estimateGas method with web3.\r\n\r\nWriting down it manually makes me notice that the transaction object `from` property was missing.\r\nActually the entire transaction object was missing.\r\nAs soon as I added it the estimateGas method went through and it returned a reasonable value and the test was \"green light\".\r\n\r\nSo I only changed this line\r\n`const transferGasEstimation = new BigNumber(await MockTokenInstance.transfer.estimateGas(whoever, web3.utils.toWei('10')))`\r\nin\r\n`const transferGasEstimation = new BigNumber(await MockTokenInstance.transfer.estimateGas(whoever, web3.utils.toWei('10'), { from: sender }))`\r\n\r\n## Conclusion\r\n- Probably this issue is only `ganache` related.\r\n- I would expect the gasEstimation failing on ganache like the \"real\" client did. \r\n\r\nFeel free to close the issue or go deeper investigating it.\r\nThanks!",
    "reactions": {
      "url": "https://api.github.com/repos/trufflesuite/truffle/issues/comments/513778957/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/trufflesuite/truffle/issues/comments/514797567",
    "html_url": "https://github.com/trufflesuite/truffle/issues/2234#issuecomment-514797567",
    "issue_url": "https://api.github.com/repos/trufflesuite/truffle/issues/2234",
    "id": 514797567,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxNDc5NzU2Nw==",
    "user": {
      "login": "davidmurdoch",
      "id": 187813,
      "node_id": "MDQ6VXNlcjE4NzgxMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/187813?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/davidmurdoch",
      "html_url": "https://github.com/davidmurdoch",
      "followers_url": "https://api.github.com/users/davidmurdoch/followers",
      "following_url": "https://api.github.com/users/davidmurdoch/following{/other_user}",
      "gists_url": "https://api.github.com/users/davidmurdoch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/davidmurdoch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/davidmurdoch/subscriptions",
      "organizations_url": "https://api.github.com/users/davidmurdoch/orgs",
      "repos_url": "https://api.github.com/users/davidmurdoch/repos",
      "events_url": "https://api.github.com/users/davidmurdoch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/davidmurdoch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-07-24T20:58:36Z",
    "updated_at": "2019-07-24T20:58:36Z",
    "author_association": "MEMBER",
    "body": "@andreafspeziale  the issue looks to be a couple of things:\r\n\r\n1. You aren't sending the same transaction in the `gasEstimate` call and the transaction itself. This may cause the estimate to change.\r\n2. Web3 \"helps out\" if you don't specify a `from` in a transaction by defaulting to `accounts[0]`. So the `from` in the `estimateGas` call ends up being `accounts[0]`.\r\n3. `accounts[0]` can't perform this transaction, so the transaction gets reverted.\r\n4. `ganache-core` still returns an accurate estimate for calling this transaction _as specified_ (with the wrong `from`). Even though the transaction reverts it is a valid transaction with an actual gas cost. This seems to be different than what parity does, which reports the `estimateGas` call as an `\"execution error\"` instead of returning the estimate.\r\n\r\nParity's behavior seems more desirable than Ganache's, so we're working on a change that will align ganache-core's `estimateGas` behavior more closely with Parity's; exceptional transactions (where the transaction's `status === 0`) will no longer return a gas estimate. If we decide to go forward with this change we'll _probably_ release it in our next major release, as I'm currently under the impression that this change qualifies as a breaking change, and not a bugfix/patch.",
    "reactions": {
      "url": "https://api.github.com/repos/trufflesuite/truffle/issues/comments/514797567/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/trufflesuite/truffle/issues/comments/516386090",
    "html_url": "https://github.com/trufflesuite/truffle/issues/2234#issuecomment-516386090",
    "issue_url": "https://api.github.com/repos/trufflesuite/truffle/issues/2234",
    "id": 516386090,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxNjM4NjA5MA==",
    "user": {
      "login": "andreafspeziale",
      "id": 7680940,
      "node_id": "MDQ6VXNlcjc2ODA5NDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7680940?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/andreafspeziale",
      "html_url": "https://github.com/andreafspeziale",
      "followers_url": "https://api.github.com/users/andreafspeziale/followers",
      "following_url": "https://api.github.com/users/andreafspeziale/following{/other_user}",
      "gists_url": "https://api.github.com/users/andreafspeziale/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/andreafspeziale/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/andreafspeziale/subscriptions",
      "organizations_url": "https://api.github.com/users/andreafspeziale/orgs",
      "repos_url": "https://api.github.com/users/andreafspeziale/repos",
      "events_url": "https://api.github.com/users/andreafspeziale/events{/privacy}",
      "received_events_url": "https://api.github.com/users/andreafspeziale/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-07-30T11:52:02Z",
    "updated_at": "2019-07-30T11:52:02Z",
    "author_association": "NONE",
    "body": "@davidmurdoch Thanks for the inputs!\r\nThe main reason was point number 2 but I didn't realise it till I tried it using parity which was failing rather giving me a wrong value. \r\n\r\nPlus I found another interesting thing.\r\nWhen you estimate the gas needed for a valid transfer of a token you get a value but for example it will be less if your balance will be 0 afte that transfer. There is any more efficient way to get a proper gas value rather than use specific functions like the parity trace feature?",
    "reactions": {
      "url": "https://api.github.com/repos/trufflesuite/truffle/issues/comments/516386090/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
