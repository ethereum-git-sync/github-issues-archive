{
  "url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/2876",
  "repository_url": "https://api.github.com/repos/NomicFoundation/hardhat",
  "labels_url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/2876/labels{/name}",
  "comments_url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/2876/comments",
  "events_url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/2876/events",
  "html_url": "https://github.com/NomicFoundation/hardhat/issues/2876",
  "id": 1283035363,
  "node_id": "I_kwDOB7jojM5MeZDj",
  "number": 2876,
  "title": "Loosing stack trace when test fails",
  "user": {
    "login": "rokso",
    "id": 14338548,
    "node_id": "MDQ6VXNlcjE0MzM4NTQ4",
    "avatar_url": "https://avatars.githubusercontent.com/u/14338548?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/rokso",
    "html_url": "https://github.com/rokso",
    "followers_url": "https://api.github.com/users/rokso/followers",
    "following_url": "https://api.github.com/users/rokso/following{/other_user}",
    "gists_url": "https://api.github.com/users/rokso/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/rokso/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/rokso/subscriptions",
    "organizations_url": "https://api.github.com/users/rokso/orgs",
    "repos_url": "https://api.github.com/users/rokso/repos",
    "events_url": "https://api.github.com/users/rokso/events{/privacy}",
    "received_events_url": "https://api.github.com/users/rokso/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 4608461883,
      "node_id": "LA_kwDOB7jojM8AAAABEq-MOw",
      "url": "https://api.github.com/repos/NomicFoundation/hardhat/labels/blocked-reason:needs-ethers-support",
      "name": "blocked-reason:needs-ethers-support",
      "color": "B60205",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": true,
  "assignee": {
    "login": "fvictorio",
    "id": 417134,
    "node_id": "MDQ6VXNlcjQxNzEzNA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/417134?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/fvictorio",
    "html_url": "https://github.com/fvictorio",
    "followers_url": "https://api.github.com/users/fvictorio/followers",
    "following_url": "https://api.github.com/users/fvictorio/following{/other_user}",
    "gists_url": "https://api.github.com/users/fvictorio/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/fvictorio/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/fvictorio/subscriptions",
    "organizations_url": "https://api.github.com/users/fvictorio/orgs",
    "repos_url": "https://api.github.com/users/fvictorio/repos",
    "events_url": "https://api.github.com/users/fvictorio/events{/privacy}",
    "received_events_url": "https://api.github.com/users/fvictorio/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "fvictorio",
      "id": 417134,
      "node_id": "MDQ6VXNlcjQxNzEzNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417134?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fvictorio",
      "html_url": "https://github.com/fvictorio",
      "followers_url": "https://api.github.com/users/fvictorio/followers",
      "following_url": "https://api.github.com/users/fvictorio/following{/other_user}",
      "gists_url": "https://api.github.com/users/fvictorio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fvictorio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fvictorio/subscriptions",
      "organizations_url": "https://api.github.com/users/fvictorio/orgs",
      "repos_url": "https://api.github.com/users/fvictorio/repos",
      "events_url": "https://api.github.com/users/fvictorio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fvictorio/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 6,
  "created_at": "2022-06-23T22:33:56Z",
  "updated_at": "2023-03-23T00:13:26Z",
  "closed_at": "2022-12-22T11:35:45Z",
  "author_association": "NONE",
  "active_lock_reason": "resolved",
  "body": "<!--\r\n\r\nThank you for using Hardhat and taking the time to open an issue!\r\n\r\n**Note that this issue tracker is not a support channel.**\r\n\r\n- For help with Hardhat and Hardhat network, please use our [Discord server](https://hardhat.org/discord).\r\n- For help with ethers.js, please go to [its Github Discussions](https://github.com/ethers-io/ethers.js/discussions).\r\n\r\nIf you are reporting a bug, please include reproduction steps. The best way to do this is to include a [Minimal Reproducible Example](https://stackoverflow.com/help/minimal-reproducible-example). If you can't do that, then include a link to your repo, and the steps to reproduce the problem. The easiest it is to reproduce your problem, the faster we are going to be able to fix it.\r\n\r\nIf you are submitting a feature request, please take the time to clearly describe your use case, and not only your proposed solution.\r\n\r\nThis issue will be automatically assigned to a Hardhat team member. This person will act as the point of contact between you and the team, but won't necessarily fix it nor address it in any way. An issue being assigned does not mean that it's being worked on.\r\n\r\n-->\r\nNot sure this is related to `ethers.js` or `hardhat` but it is breaking feature of hardhat so opening issue here.\r\n\r\nIf a test fails unexpectedly we used to get stack trace similar to [this](https://hardhat.org/hardhat-network#solidity-stack-traces) but since hardhat 2.9.4 and ethers 5.6.2 stack trace is completely useless and error message is something like this\r\n```\r\n     Error: call revert exception; VM Exception while processing transaction: reverted with reason string \"error-message\" [ See: https://links.ethers.org/v5-errors-CALL_EXCEPTION ] (method=\"letsMakeItFail()\", data=\"0x....\", errorArgs=[\"error-message\"], errorName=\"Error\", errorSignature=\"Error(string)\", reason=\"error-message\", code=CALL_EXCEPTION, version=abi/5.6.4)\r\n```\r\n",
  "closed_by": {
    "login": "fvictorio",
    "id": 417134,
    "node_id": "MDQ6VXNlcjQxNzEzNA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/417134?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/fvictorio",
    "html_url": "https://github.com/fvictorio",
    "followers_url": "https://api.github.com/users/fvictorio/followers",
    "following_url": "https://api.github.com/users/fvictorio/following{/other_user}",
    "gists_url": "https://api.github.com/users/fvictorio/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/fvictorio/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/fvictorio/subscriptions",
    "organizations_url": "https://api.github.com/users/fvictorio/orgs",
    "repos_url": "https://api.github.com/users/fvictorio/repos",
    "events_url": "https://api.github.com/users/fvictorio/events{/privacy}",
    "received_events_url": "https://api.github.com/users/fvictorio/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/2876/reactions",
    "total_count": 2,
    "+1": 2,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/2876/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/comments/1164978165",
    "html_url": "https://github.com/NomicFoundation/hardhat/issues/2876#issuecomment-1164978165",
    "issue_url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/2876",
    "id": 1164978165,
    "node_id": "IC_kwDOB7jojM5FcCf1",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2022-06-23T22:34:21Z",
    "updated_at": "2022-06-23T22:34:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "This issue is also being [tracked on Linear](https://linear.app/nomic-foundation/issue/HH-879/loosing-stack-trace-when-test-fails-[nomicfoundationhardhat2876]).\n\nWe use Linear to manage our development process, but we keep the conversations on Github.\n\nLINEAR-ID: 5bba8c87-6b1a-4dd8-a31a-3c7b7947cdb8",
    "reactions": {
      "url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/comments/1164978165/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/comments/1175037271",
    "html_url": "https://github.com/NomicFoundation/hardhat/issues/2876#issuecomment-1175037271",
    "issue_url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/2876",
    "id": 1175037271,
    "node_id": "IC_kwDOB7jojM5GCaVX",
    "user": {
      "login": "marcelomorgado",
      "id": 29674218,
      "node_id": "MDQ6VXNlcjI5Njc0MjE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/29674218?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/marcelomorgado",
      "html_url": "https://github.com/marcelomorgado",
      "followers_url": "https://api.github.com/users/marcelomorgado/followers",
      "following_url": "https://api.github.com/users/marcelomorgado/following{/other_user}",
      "gists_url": "https://api.github.com/users/marcelomorgado/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/marcelomorgado/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/marcelomorgado/subscriptions",
      "organizations_url": "https://api.github.com/users/marcelomorgado/orgs",
      "repos_url": "https://api.github.com/users/marcelomorgado/repos",
      "events_url": "https://api.github.com/users/marcelomorgado/events{/privacy}",
      "received_events_url": "https://api.github.com/users/marcelomorgado/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-05T13:05:12Z",
    "updated_at": "2022-07-05T13:05:12Z",
    "author_association": "CONTRIBUTOR",
    "body": "Worth noting that the errors are OK when downgrading to `ethers@5.5.4`",
    "reactions": {
      "url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/comments/1175037271/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/comments/1180197582",
    "html_url": "https://github.com/NomicFoundation/hardhat/issues/2876#issuecomment-1180197582",
    "issue_url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/2876",
    "id": 1180197582,
    "node_id": "IC_kwDOB7jojM5GWGLO",
    "user": {
      "login": "fvictorio",
      "id": 417134,
      "node_id": "MDQ6VXNlcjQxNzEzNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417134?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fvictorio",
      "html_url": "https://github.com/fvictorio",
      "followers_url": "https://api.github.com/users/fvictorio/followers",
      "following_url": "https://api.github.com/users/fvictorio/following{/other_user}",
      "gists_url": "https://api.github.com/users/fvictorio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fvictorio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fvictorio/subscriptions",
      "organizations_url": "https://api.github.com/users/fvictorio/orgs",
      "repos_url": "https://api.github.com/users/fvictorio/repos",
      "events_url": "https://api.github.com/users/fvictorio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fvictorio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-11T09:57:18Z",
    "updated_at": "2022-07-11T09:57:18Z",
    "author_association": "MEMBER",
    "body": "Can someone provide reproduction steps?",
    "reactions": {
      "url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/comments/1180197582/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/comments/1189048854",
    "html_url": "https://github.com/NomicFoundation/hardhat/issues/2876#issuecomment-1189048854",
    "issue_url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/2876",
    "id": 1189048854,
    "node_id": "IC_kwDOB7jojM5G33IW",
    "user": {
      "login": "marcelomorgado",
      "id": 29674218,
      "node_id": "MDQ6VXNlcjI5Njc0MjE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/29674218?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/marcelomorgado",
      "html_url": "https://github.com/marcelomorgado",
      "followers_url": "https://api.github.com/users/marcelomorgado/followers",
      "following_url": "https://api.github.com/users/marcelomorgado/following{/other_user}",
      "gists_url": "https://api.github.com/users/marcelomorgado/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/marcelomorgado/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/marcelomorgado/subscriptions",
      "organizations_url": "https://api.github.com/users/marcelomorgado/orgs",
      "repos_url": "https://api.github.com/users/marcelomorgado/repos",
      "events_url": "https://api.github.com/users/marcelomorgado/events{/privacy}",
      "received_events_url": "https://api.github.com/users/marcelomorgado/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-19T13:23:17Z",
    "updated_at": "2022-07-19T13:23:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hi,\r\n\r\nYou can follow these steps:\r\n1. Clone https://github.com/marcelomorgado/defi-hardhat-template\r\n2. Checkout `error-message` branch\r\n3. Set `PROVIDER_URL` and `BLOCK_NUMBER` env vars\r\n4. Run `npm t`\r\n\r\nThe error output will look like this:\r\n```\r\n MyLpWallet\r\n    ✔ should add liquidity (1171ms)\r\n    ✔ should deposit (73ms)\r\n    ✔ should withdraw (139ms)\r\n\r\n  MyToken\r\n    1) should mint\r\n\r\n\r\n  3 passing (4s)\r\n  1 failing\r\n\r\n  1) MyToken\r\n       should mint:\r\n     Error: cannot estimate gas; transaction may fail or may require manual gas limit [ See: https://links.ethers.org/v5-errors-UNPREDICTABLE_GAS_LIMIT ] (reason=\"VM Exception while processing transaction: reverted with reason string 'Ownable: caller is not the owner'\", method=\"estimateGas\", transaction={\"from\":\"0x70997970C51812dc3A010C7d01b50e0d17dc79C8\",\"to\":\"0x74Cf9087AD26D541930BaC724B7ab21bA8F00a27\",\"data\":\"0xa0712d6800000000000000000000000000000000000000000000003635c9adc5dea00000\",\"accessList\":null}, error={\"stackTrace\":[{\"type\":0,\"sourceReference\":{\"function\":\"mint\",\"contract\":\"MyToken\",\"sourceName\":\"contracts/MyToken.sol\",\"sourceContent\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract MyToken is ERC20, Ownable {\\n    constructor() ERC20(\\\"MyToken\\\", \\\"MYT\\\") {}\\n\\n    function mint(uint256 amount) public onlyOwner {\\n        _mint(msg.sender, amount);\\n    }\\n}\\n\",\"line\":12,\"range\":[284,373]},\"functionType\":1},{\"type\":0,\"sourceReference\":{\"function\":\"onlyOwner\",\"contract\":\"MyToken\",\"sourceName\":\"@openzeppelin/contracts/access/Ownable.sol\",\"sourceContent\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"line\":36,\"range\":[1094,1107]},\"functionType\":5},{\"type\":4,\"sourceReference\":{\"function\":\"decreaseAllowance\",\"contract\":\"MyToken\",\"sourceName\":\"@openzeppelin/contracts/token/ERC20/ERC20.sol\",\"sourceContent\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"line\":204,\"range\":[6803,6888]},\"message\":{\"value\":{\"type\":\"Buffer\",\"data\":[8,195,121,160,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,79,119,110,97,98,108,101,58,32,99,97,108,108,101,114,32,105,115,32,110,111,116,32,116,104,101,32,111,119,110,101,114]},\"_selector\":\"08c379a0\"},\"isInvalidOpcodeError\":false}],\"data\":\"0x08c379a0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000204f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\"}, code=UNPREDICTABLE_GAS_LIMIT, version=providers/5.6.8)\r\n      at Logger.makeError (node_modules/@ethersproject/logger/src.ts/index.ts:261:28)\r\n      at Logger.throwError (node_modules/@ethersproject/logger/src.ts/index.ts:273:20)\r\n      at checkError (node_modules/@ethersproject/providers/src.ts/json-rpc-provider.ts:78:20)\r\n      at EthersProviderWrapper.<anonymous> (node_modules/@ethersproject/providers/src.ts/json-rpc-provider.ts:603:20)\r\n      at step (node_modules/@ethersproject/providers/lib/json-rpc-provider.js:48:23)\r\n      at Object.throw (node_modules/@ethersproject/providers/lib/json-rpc-provider.js:29:53)\r\n      at rejected (node_modules/@ethersproject/providers/lib/json-rpc-provider.js:21:65)\r\n      at processTicksAndRejections (node:internal/process/task_queues:96:5)\r\n      at runNextTicks (node:internal/process/task_queues:65:3)\r\n      at listOnTimeout (node:internal/timers:526:9)\r\n\r\n\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/comments/1189048854/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/comments/1190097818",
    "html_url": "https://github.com/NomicFoundation/hardhat/issues/2876#issuecomment-1190097818",
    "issue_url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/2876",
    "id": 1190097818,
    "node_id": "IC_kwDOB7jojM5G73Oa",
    "user": {
      "login": "fvictorio",
      "id": 417134,
      "node_id": "MDQ6VXNlcjQxNzEzNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417134?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fvictorio",
      "html_url": "https://github.com/fvictorio",
      "followers_url": "https://api.github.com/users/fvictorio/followers",
      "following_url": "https://api.github.com/users/fvictorio/following{/other_user}",
      "gists_url": "https://api.github.com/users/fvictorio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fvictorio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fvictorio/subscriptions",
      "organizations_url": "https://api.github.com/users/fvictorio/orgs",
      "repos_url": "https://api.github.com/users/fvictorio/repos",
      "events_url": "https://api.github.com/users/fvictorio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fvictorio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-20T10:21:10Z",
    "updated_at": "2022-07-20T10:21:10Z",
    "author_association": "MEMBER",
    "body": "I see, thank you. I believe this is caused by https://github.com/ethers-io/ethers.js/issues/3038",
    "reactions": {
      "url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/comments/1190097818/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/comments/1362734121",
    "html_url": "https://github.com/NomicFoundation/hardhat/issues/2876#issuecomment-1362734121",
    "issue_url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/2876",
    "id": 1362734121,
    "node_id": "IC_kwDOB7jojM5ROawp",
    "user": {
      "login": "fvictorio",
      "id": 417134,
      "node_id": "MDQ6VXNlcjQxNzEzNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417134?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fvictorio",
      "html_url": "https://github.com/fvictorio",
      "followers_url": "https://api.github.com/users/fvictorio/followers",
      "following_url": "https://api.github.com/users/fvictorio/following{/other_user}",
      "gists_url": "https://api.github.com/users/fvictorio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fvictorio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fvictorio/subscriptions",
      "organizations_url": "https://api.github.com/users/fvictorio/orgs",
      "repos_url": "https://api.github.com/users/fvictorio/repos",
      "events_url": "https://api.github.com/users/fvictorio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fvictorio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-12-22T11:35:45Z",
    "updated_at": "2022-12-22T11:35:45Z",
    "author_association": "MEMBER",
    "body": "I believe this is not happening anymore with the latest versions of hardhat, ethers and hardhat-ethers. If someone is still seeing this problem and have reproduction steps, please open a new issue.",
    "reactions": {
      "url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/comments/1362734121/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
