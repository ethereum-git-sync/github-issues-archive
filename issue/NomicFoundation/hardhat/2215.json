{
  "url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/2215",
  "repository_url": "https://api.github.com/repos/NomicFoundation/hardhat",
  "labels_url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/2215/labels{/name}",
  "comments_url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/2215/comments",
  "events_url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/2215/events",
  "html_url": "https://github.com/NomicFoundation/hardhat/issues/2215",
  "id": 1095371409,
  "node_id": "I_kwDOB7jojM5BSgqR",
  "number": 2215,
  "title": "Wrong contract address on deploy to mumbai polygon testnet",
  "user": {
    "login": "freitasgouvea",
    "id": 46804396,
    "node_id": "MDQ6VXNlcjQ2ODA0Mzk2",
    "avatar_url": "https://avatars.githubusercontent.com/u/46804396?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/freitasgouvea",
    "html_url": "https://github.com/freitasgouvea",
    "followers_url": "https://api.github.com/users/freitasgouvea/followers",
    "following_url": "https://api.github.com/users/freitasgouvea/following{/other_user}",
    "gists_url": "https://api.github.com/users/freitasgouvea/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/freitasgouvea/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/freitasgouvea/subscriptions",
    "organizations_url": "https://api.github.com/users/freitasgouvea/orgs",
    "repos_url": "https://api.github.com/users/freitasgouvea/repos",
    "events_url": "https://api.github.com/users/freitasgouvea/events{/privacy}",
    "received_events_url": "https://api.github.com/users/freitasgouvea/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": true,
  "assignee": {
    "login": "alcuadrado",
    "id": 176499,
    "node_id": "MDQ6VXNlcjE3NjQ5OQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/176499?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/alcuadrado",
    "html_url": "https://github.com/alcuadrado",
    "followers_url": "https://api.github.com/users/alcuadrado/followers",
    "following_url": "https://api.github.com/users/alcuadrado/following{/other_user}",
    "gists_url": "https://api.github.com/users/alcuadrado/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/alcuadrado/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/alcuadrado/subscriptions",
    "organizations_url": "https://api.github.com/users/alcuadrado/orgs",
    "repos_url": "https://api.github.com/users/alcuadrado/repos",
    "events_url": "https://api.github.com/users/alcuadrado/events{/privacy}",
    "received_events_url": "https://api.github.com/users/alcuadrado/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "alcuadrado",
      "id": 176499,
      "node_id": "MDQ6VXNlcjE3NjQ5OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/176499?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alcuadrado",
      "html_url": "https://github.com/alcuadrado",
      "followers_url": "https://api.github.com/users/alcuadrado/followers",
      "following_url": "https://api.github.com/users/alcuadrado/following{/other_user}",
      "gists_url": "https://api.github.com/users/alcuadrado/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alcuadrado/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alcuadrado/subscriptions",
      "organizations_url": "https://api.github.com/users/alcuadrado/orgs",
      "repos_url": "https://api.github.com/users/alcuadrado/repos",
      "events_url": "https://api.github.com/users/alcuadrado/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alcuadrado/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2022-01-06T14:27:13Z",
  "updated_at": "2022-11-18T10:08:14Z",
  "closed_at": "2022-01-06T14:54:17Z",
  "author_association": "NONE",
  "active_lock_reason": "resolved",
  "body": "I was using hardhat with https://github.com/OpenZeppelin/openzeppelin-upgrades in poligon testnet mumbai and found a bug related to deployProxy on this network.\r\n\r\nWhat happens is that when we run the deployProxy function on the mumbai network and the transaction that is executed returns with the wrong created contract address.\r\n\r\nThe repository we used to reproduce this error was https://github.com/jeffprestes/test-proxy-contract\r\n\r\nThe network is configured with this params in the hardhat config networks:\r\n\r\n`        mumbai: {\r\n            url: 'https://rpc-mumbai.maticvigil.com',\r\n            accounts: { mnemonic: mnemonic },\r\n            timeout: 40000,\r\n        },`\r\n\r\nAnd the executed script was:\r\n\r\n`\r\n// scripts/deploy.js\r\nasync function main () {\r\n  const Box = await ethers.getContractFactory('Box');\r\n  console.log('Deploying Box...');\r\n  console.log(Box);\r\n  const box = await Box.deploy();\r\n  await box.deployed();\r\n  console.log('Box deployed:', box);\r\n  console.log('Box tx hash to:', box.deployTransaction.hash);\r\n  console.log('Box deployed to:', box.address);\r\n}\r\n\r\nmain()\r\n  .then(() => process.exit(0))\r\n  .catch(error => {\r\n    console.error(error);\r\n    process.exit(1);\r\n  });\r\n`\r\n\r\nWhen we executed this script with the rinkeby testnet and polygon mainnet networks it returned correctly, but with the mumbai network is having this problem.\r\n\r\nBelow are the deployProxy logs.\r\n\r\nOn the rinkeby network:\r\n\r\n`Box deployed: Contract {\r\n  interface: Interface {\r\n    fragments: [ [EventFragment], [FunctionFragment], [FunctionFragment] ],\r\n    _abiCoder: AbiCoder { coerceFunc: null },\r\n    functions: {\r\n      'retrieve()': [FunctionFragment],\r\n      'store(uint256)': [FunctionFragment]\r\n    },\r\n    errors: {},\r\n    events: { 'ValueChanged(uint256)': [EventFragment] },\r\n    structs: {},\r\n    deploy: ConstructorFragment {\r\n      name: null,\r\n      type: 'constructor',\r\n      inputs: [],\r\n      payable: false,\r\n      stateMutability: 'nonpayable',\r\n      gas: null,\r\n      _isFragment: true\r\n    },\r\n    _isInterface: true\r\n  },\r\n  provider: EthersProviderWrapper {\r\n    _isProvider: true,\r\n    _events: [],\r\n    _emitted: {\r\n      block: 9944335,\r\n      't:0x944371de05eba13ccb57dacaca1d6664f50bfcad9fb3e0aefc1075d53e6c6d0d': 9944335\r\n    },\r\n    formatter: Formatter { formats: [Object] },\r\n    anyNetwork: false,\r\n    _networkPromise: Promise { [Object] },\r\n    _maxInternalBlockNumber: 9944335,\r\n    _lastBlockNumber: 9944335,\r\n    _pollingInterval: 4000,\r\n    _fastQueryDate: 1641477632902,\r\n    connection: { url: 'http://localhost:8545' },\r\n    _nextId: 42,\r\n    _hardhatProvider: BackwardsCompatibilityProviderAdapter {\r\n      _wrapped: AutomaticGasPriceProvider {\r\n        _wrapped: FixedGasProvider {\r\n          _wrapped: [AutomaticSenderProvider],\r\n          _wrappedProvider: [AutomaticSenderProvider],\r\n          _gasLimit: 10000000\r\n        },\r\n        _wrappedProvider: FixedGasProvider {\r\n          _wrapped: [AutomaticSenderProvider],\r\n          _wrappedProvider: [AutomaticSenderProvider],\r\n          _gasLimit: 10000000\r\n        },\r\n        _nodeSupportsEIP1559: true\r\n      },\r\n      _provider: AutomaticGasPriceProvider {\r\n        _wrapped: FixedGasProvider {\r\n          _wrapped: [AutomaticSenderProvider],\r\n          _wrappedProvider: [AutomaticSenderProvider],\r\n          _gasLimit: 10000000\r\n        },\r\n        _wrappedProvider: FixedGasProvider {\r\n          _wrapped: [AutomaticSenderProvider],\r\n          _wrappedProvider: [AutomaticSenderProvider],\r\n          _gasLimit: 10000000\r\n        },\r\n        _nodeSupportsEIP1559: true\r\n      },\r\n      sendAsync: [Function: bound sendAsync],\r\n      send: [Function: bound send],\r\n      _sendJsonRpcRequest: [Function: bound _sendJsonRpcRequest] AsyncFunction\r\n    },\r\n    _eventLoopCache: { detectNetwork: null },\r\n    _network: {\r\n      name: 'rinkeby',\r\n      chainId: 4,\r\n      ensAddress: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\r\n      _defaultProvider: [Function]\r\n    },\r\n    _internalBlockNumber: Promise { [Object] },\r\n    _fastBlockNumber: 9944335,\r\n    _fastBlockNumberPromise: Promise { 9944335 },\r\n    _poller: null,\r\n    _bootstrapPoll: null\r\n  },\r\n  signer: SignerWithAddress {\r\n    _isSigner: true,\r\n    address: '0xAB3d4f780BfCaF17bC5B4A19cbBa95357655B036',\r\n    _signer: JsonRpcSigner {\r\n      _isSigner: true,\r\n      provider: [EthersProviderWrapper],\r\n      _address: '0xAB3d4f780BfCaF17bC5B4A19cbBa95357655B036',\r\n      _index: null\r\n    },\r\n    provider: EthersProviderWrapper {\r\n      _isProvider: true,\r\n      _events: [],\r\n      _emitted: [Object],\r\n      formatter: [Formatter],\r\n      anyNetwork: false,\r\n      _networkPromise: [Promise],\r\n      _maxInternalBlockNumber: 9944335,\r\n      _lastBlockNumber: 9944335,\r\n      _pollingInterval: 4000,\r\n      _fastQueryDate: 1641477632902,\r\n      connection: [Object],\r\n      _nextId: 42,\r\n      _hardhatProvider: BackwardsCompatibilityProviderAdapter {\r\n        _wrapped: AutomaticGasPriceProvider {\r\n          _wrapped: FixedGasProvider {\r\n            _wrapped: [AutomaticSenderProvider],\r\n            _wrappedProvider: [AutomaticSenderProvider],\r\n            _gasLimit: 10000000\r\n          },\r\n          _wrappedProvider: FixedGasProvider {\r\n            _wrapped: [AutomaticSenderProvider],\r\n            _wrappedProvider: [AutomaticSenderProvider],\r\n            _gasLimit: 10000000\r\n          },\r\n          _nodeSupportsEIP1559: true\r\n        },\r\n        _provider: AutomaticGasPriceProvider {\r\n          _wrapped: FixedGasProvider {\r\n            _wrapped: [AutomaticSenderProvider],\r\n            _wrappedProvider: [AutomaticSenderProvider],\r\n            _gasLimit: 10000000\r\n          },\r\n          _wrappedProvider: FixedGasProvider {\r\n            _wrapped: [AutomaticSenderProvider],\r\n            _wrappedProvider: [AutomaticSenderProvider],\r\n            _gasLimit: 10000000\r\n          },\r\n          _nodeSupportsEIP1559: true\r\n        },\r\n        sendAsync: [Function: bound sendAsync],\r\n        send: [Function: bound send],\r\n        _sendJsonRpcRequest: [Function: bound _sendJsonRpcRequest] AsyncFunction\r\n      },\r\n      _eventLoopCache: [Object],\r\n      _network: [Object],\r\n      _internalBlockNumber: [Promise],\r\n      _fastBlockNumber: 9944335,\r\n      _fastBlockNumberPromise: [Promise],\r\n      _poller: null,\r\n      _bootstrapPoll: null\r\n    }\r\n  },\r\n  callStatic: {\r\n    'retrieve()': [Function],\r\n    'store(uint256)': [Function],\r\n    retrieve: [Function],\r\n    store: [Function]\r\n  },\r\n  estimateGas: {\r\n    'retrieve()': [Function],\r\n    'store(uint256)': [Function],\r\n    retrieve: [Function],\r\n    store: [Function]\r\n  },\r\n  functions: {\r\n    'retrieve()': [Function],\r\n    'store(uint256)': [Function],\r\n    retrieve: [Function],\r\n    store: [Function]\r\n  },\r\n  populateTransaction: {\r\n    'retrieve()': [Function],\r\n    'store(uint256)': [Function],\r\n    retrieve: [Function],\r\n    store: [Function]\r\n  },\r\n  filters: { 'ValueChanged(uint256)': [Function], ValueChanged: [Function] },\r\n  _runningEvents: {},\r\n  _wrappedEmits: {},\r\n  address: '0xB0c3C4Ec201c11985F8b1FF676e2e91E200f7Ea7',\r\n  resolvedAddress: Promise { '0xB0c3C4Ec201c11985F8b1FF676e2e91E200f7Ea7' },\r\n  'retrieve()': [Function],\r\n  'store(uint256)': [Function],\r\n  retrieve: [Function],\r\n  store: [Function],\r\n  deployTransaction: {\r\n    hash: '0x944371de05eba13ccb57dacaca1d6664f50bfcad9fb3e0aefc1075d53e6c6d0d',\r\n    type: 2,\r\n    accessList: [],\r\n    blockHash: null,\r\n    blockNumber: null,\r\n    transactionIndex: null,\r\n    confirmations: 0,\r\n    from: '0xAB3d4f780BfCaF17bC5B4A19cbBa95357655B036',\r\n    gasPrice: BigNumber { value: \"2350000005\" },\r\n    maxPriorityFeePerGas: BigNumber { value: \"2349999975\" },\r\n    maxFeePerGas: BigNumber { value: \"2350000005\" },\r\n    gasLimit: BigNumber { value: \"137593\" },\r\n    to: null,\r\n    value: BigNumber { value: \"0\" },\r\n    nonce: 81,\r\n    data: '0x608060405234801561001057600080fd5b50610187806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80632e64cec11461003b5780636057361d14610059575b600080fd5b610043610075565b60405161005091906100d8565b60405180910390f35b610073600480360381019061006e9190610124565b61007e565b005b60008054905090565b806000819055507f93fe6d397c74fdf1402a8b72e47b68512f0510d7b98a4bc4cbdf6ac7108b3c59816040516100b491906100d8565b60405180910390a150565b6000819050919050565b6100d2816100bf565b82525050565b60006020820190506100ed60008301846100c9565b92915050565b600080fd5b610101816100bf565b811461010c57600080fd5b50565b60008135905061011e816100f8565b92915050565b60006020828403121561013a576101396100f3565b5b60006101488482850161010f565b9150509291505056fea26469706673582212201761a6d262cc308d54c436a53715da1d5196475a6b541bcd49001254f9b20b0f64736f6c63430008090033',\r\n    r: '0x66a05326c4b5503e2e0e4ddbf562e1bae52a95c24991f621976c8c177c495023',\r\n    s: '0x3349d98f2c6f5cce6b245562c95a91cb95e1cb1ec0e5f32a18c9a0e480714ab0',\r\n    v: 1,\r\n    creates: '0xB0c3C4Ec201c11985F8b1FF676e2e91E200f7Ea7',\r\n    chainId: 4,\r\n    wait: [Function]\r\n  },\r\n  _deployedPromise: Promise { [Circular] }\r\n}\r\nBox tx hash to: 0x944371de05eba13ccb57dacaca1d6664f50bfcad9fb3e0aefc1075d53e6c6d0d\r\nBox deployed to: 0xB0c3C4Ec201c11985F8b1FF676e2e91E200f7Ea7`\r\n\r\nIn this case the tx https://rinkeby.etherscan.io/tx/0x944371de05eba13ccb57dacaca1d6664f50bfcad9fb3e0aefc1075d53e6c6d0d created this contract https://rinkeby.etherscan.io/address/0xb0c3c4ec201c11985f8b1ff676e2e91e200f7ea7 and script retuns the correct address.\r\n\r\nBut on the mumbai network we have this log:\r\n\r\n`Box deployed: Contract {\r\n  interface: Interface {\r\n    fragments: [ [EventFragment], [FunctionFragment], [FunctionFragment] ],\r\n    _abiCoder: AbiCoder { coerceFunc: null },\r\n    functions: {\r\n      'retrieve()': [FunctionFragment],\r\n      'store(uint256)': [FunctionFragment]\r\n    },\r\n    errors: {},\r\n    events: { 'ValueChanged(uint256)': [EventFragment] },\r\n    structs: {},\r\n    deploy: ConstructorFragment {\r\n      name: null,\r\n      type: 'constructor',\r\n      inputs: [],\r\n      payable: false,\r\n      stateMutability: 'nonpayable',\r\n      gas: null,\r\n      _isFragment: true\r\n    },\r\n    _isInterface: true\r\n  },\r\n  provider: EthersProviderWrapper {\r\n    _isProvider: true,\r\n    _events: [],\r\n    _emitted: {\r\n      block: 23602264,\r\n      't:0x1964b7f3ec2e33e551092d39e6a336233edadcda1d6f7f6905b34b28c3175c18': 23602265\r\n    },\r\n    formatter: Formatter { formats: [Object] },\r\n    anyNetwork: false,\r\n    _networkPromise: Promise { [Object] },\r\n    _maxInternalBlockNumber: 23602264,\r\n    _lastBlockNumber: 23602264,\r\n    _pollingInterval: 4000,\r\n    _fastQueryDate: 1641477725983,\r\n    connection: { url: 'http://localhost:8545' },\r\n    _nextId: 42,\r\n    _hardhatProvider: BackwardsCompatibilityProviderAdapter {\r\n      _wrapped: AutomaticGasPriceProvider {\r\n        _wrapped: AutomaticGasProvider {\r\n          _wrapped: [AutomaticSenderProvider],\r\n          _wrappedProvider: [AutomaticSenderProvider],\r\n          _gasMultiplier: 1\r\n        },\r\n        _wrappedProvider: AutomaticGasProvider {\r\n          _wrapped: [AutomaticSenderProvider],\r\n          _wrappedProvider: [AutomaticSenderProvider],\r\n          _gasMultiplier: 1\r\n        },\r\n        _nodeSupportsEIP1559: true\r\n      },\r\n      _provider: AutomaticGasPriceProvider {\r\n        _wrapped: AutomaticGasProvider {\r\n          _wrapped: [AutomaticSenderProvider],\r\n          _wrappedProvider: [AutomaticSenderProvider],\r\n          _gasMultiplier: 1\r\n        },\r\n        _wrappedProvider: AutomaticGasProvider {\r\n          _wrapped: [AutomaticSenderProvider],\r\n          _wrappedProvider: [AutomaticSenderProvider],\r\n          _gasMultiplier: 1\r\n        },\r\n        _nodeSupportsEIP1559: true\r\n      },\r\n      sendAsync: [Function: bound sendAsync],\r\n      send: [Function: bound send],\r\n      _sendJsonRpcRequest: [Function: bound _sendJsonRpcRequest] AsyncFunction\r\n    },\r\n    _eventLoopCache: { detectNetwork: null },\r\n    _network: {\r\n      name: 'maticmum',\r\n      chainId: 80001,\r\n      ensAddress: null,\r\n      _defaultProvider: null\r\n    },\r\n    _internalBlockNumber: Promise { [Object] },\r\n    _fastBlockNumber: 23602264,\r\n    _fastBlockNumberPromise: Promise { 23602264 },\r\n    _poller: null,\r\n    _bootstrapPoll: null\r\n  },\r\n  signer: SignerWithAddress {\r\n    _isSigner: true,\r\n    address: '0xAB3d4f780BfCaF17bC5B4A19cbBa95357655B036',\r\n    _signer: JsonRpcSigner {\r\n      _isSigner: true,\r\n      provider: [EthersProviderWrapper],\r\n      _address: '0xAB3d4f780BfCaF17bC5B4A19cbBa95357655B036',\r\n      _index: null\r\n    },\r\n    provider: EthersProviderWrapper {\r\n      _isProvider: true,\r\n      _events: [],\r\n      _emitted: [Object],\r\n      formatter: [Formatter],\r\n      anyNetwork: false,\r\n      _networkPromise: [Promise],\r\n      _maxInternalBlockNumber: 23602264,\r\n      _lastBlockNumber: 23602264,\r\n      _pollingInterval: 4000,\r\n      _fastQueryDate: 1641477725983,\r\n      connection: [Object],\r\n      _nextId: 42,\r\n      _hardhatProvider: BackwardsCompatibilityProviderAdapter {\r\n        _wrapped: AutomaticGasPriceProvider {\r\n          _wrapped: AutomaticGasProvider {\r\n            _wrapped: [AutomaticSenderProvider],\r\n            _wrappedProvider: [AutomaticSenderProvider],\r\n            _gasMultiplier: 1\r\n          },\r\n          _wrappedProvider: AutomaticGasProvider {\r\n            _wrapped: [AutomaticSenderProvider],\r\n            _wrappedProvider: [AutomaticSenderProvider],\r\n            _gasMultiplier: 1\r\n          },\r\n          _nodeSupportsEIP1559: true\r\n        },\r\n        _provider: AutomaticGasPriceProvider {\r\n          _wrapped: AutomaticGasProvider {\r\n            _wrapped: [AutomaticSenderProvider],\r\n            _wrappedProvider: [AutomaticSenderProvider],\r\n            _gasMultiplier: 1\r\n          },\r\n          _wrappedProvider: AutomaticGasProvider {\r\n            _wrapped: [AutomaticSenderProvider],\r\n            _wrappedProvider: [AutomaticSenderProvider],\r\n            _gasMultiplier: 1\r\n          },\r\n          _nodeSupportsEIP1559: true\r\n        },\r\n        sendAsync: [Function: bound sendAsync],\r\n        send: [Function: bound send],\r\n        _sendJsonRpcRequest: [Function: bound _sendJsonRpcRequest] AsyncFunction\r\n      },\r\n      _eventLoopCache: [Object],\r\n      _network: [Object],\r\n      _internalBlockNumber: [Promise],\r\n      _fastBlockNumber: 23602264,\r\n      _fastBlockNumberPromise: [Promise],\r\n      _poller: null,\r\n      _bootstrapPoll: null\r\n    }\r\n  },\r\n  callStatic: {\r\n    'retrieve()': [Function],\r\n    'store(uint256)': [Function],\r\n    retrieve: [Function],\r\n    store: [Function]\r\n  },\r\n  estimateGas: {\r\n    'retrieve()': [Function],\r\n    'store(uint256)': [Function],\r\n    retrieve: [Function],\r\n    store: [Function]\r\n  },\r\n  functions: {\r\n    'retrieve()': [Function],\r\n    'store(uint256)': [Function],\r\n    retrieve: [Function],\r\n    store: [Function]\r\n  },\r\n  populateTransaction: {\r\n    'retrieve()': [Function],\r\n    'store(uint256)': [Function],\r\n    retrieve: [Function],\r\n    store: [Function]\r\n  },\r\n  filters: { 'ValueChanged(uint256)': [Function], ValueChanged: [Function] },\r\n  _runningEvents: {},\r\n  _wrappedEmits: {},\r\n  address: '0xCc64e1fFC33D7B99013AAb5D71E34886310040a0',\r\n  resolvedAddress: Promise { '0xCc64e1fFC33D7B99013AAb5D71E34886310040a0' },\r\n  'retrieve()': [Function],\r\n  'store(uint256)': [Function],\r\n  retrieve: [Function],\r\n  store: [Function],\r\n  deployTransaction: {\r\n    hash: '0x1964b7f3ec2e33e551092d39e6a336233edadcda1d6f7f6905b34b28c3175c18',\r\n    type: 2,\r\n    accessList: [],\r\n    blockHash: null,\r\n    blockNumber: null,\r\n    transactionIndex: null,\r\n    confirmations: 0,\r\n    from: '0x0000000000000000000000000000000000000000',\r\n    gasPrice: BigNumber { value: \"2000000001\" },\r\n    maxPriorityFeePerGas: BigNumber { value: \"1999999991\" },\r\n    maxFeePerGas: BigNumber { value: \"2000000001\" },\r\n    gasLimit: BigNumber { value: \"137593\" },\r\n    to: null,\r\n    value: BigNumber { value: \"0\" },\r\n    nonce: 13,\r\n    data: '0x608060405234801561001057600080fd5b50610187806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80632e64cec11461003b5780636057361d14610059575b600080fd5b610043610075565b60405161005091906100d8565b60405180910390f35b610073600480360381019061006e9190610124565b61007e565b005b60008054905090565b806000819055507f93fe6d397c74fdf1402a8b72e47b68512f0510d7b98a4bc4cbdf6ac7108b3c59816040516100b491906100d8565b60405180910390a150565b6000819050919050565b6100d2816100bf565b82525050565b60006020820190506100ed60008301846100c9565b92915050565b600080fd5b610101816100bf565b811461010c57600080fd5b50565b60008135905061011e816100f8565b92915050565b60006020828403121561013a576101396100f3565b5b60006101488482850161010f565b9150509291505056fea26469706673582212201761a6d262cc308d54c436a53715da1d5196475a6b541bcd49001254f9b20b0f64736f6c63430008090033',\r\n    r: '0x0c052aa29fd541531d68591c39c8582939e86f16d8ac48b4b030dc5de4600453',\r\n    s: '0x30e766f6e9defac859033714b55cf427c893b6d3c5d7c9a10157230b17c9eada',\r\n    v: 0,\r\n    creates: '0xCc64e1fFC33D7B99013AAb5D71E34886310040a0',\r\n    chainId: 80001,\r\n    wait: [Function]\r\n  },\r\n  _deployedPromise: Promise { [Circular] }\r\n}\r\nBox tx hash to: 0x1964b7f3ec2e33e551092d39e6a336233edadcda1d6f7f6905b34b28c3175c18\r\nBox deployed to: 0xCc64e1fFC33D7B99013AAb5D71E34886310040a0`\r\n\r\nAnd in this case the tx https://mumbai.polygonscan.com/tx/0x1964b7f3ec2e33e551092d39e6a336233edadcda1d6f7f6905b34b28c3175c18 created this contract https://mumbai.polygonscan.com/address/0xa058aef62e9c94e49821310694f3c83e2f82cfdf but the script retuns incorrect contract address 0xCc64e1fFC33D7B99013AAb5D71E34886310040a0.\r\n\r\n I don't know if this error is related to ethersjs.",
  "closed_by": {
    "login": "alcuadrado",
    "id": 176499,
    "node_id": "MDQ6VXNlcjE3NjQ5OQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/176499?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/alcuadrado",
    "html_url": "https://github.com/alcuadrado",
    "followers_url": "https://api.github.com/users/alcuadrado/followers",
    "following_url": "https://api.github.com/users/alcuadrado/following{/other_user}",
    "gists_url": "https://api.github.com/users/alcuadrado/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/alcuadrado/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/alcuadrado/subscriptions",
    "organizations_url": "https://api.github.com/users/alcuadrado/orgs",
    "repos_url": "https://api.github.com/users/alcuadrado/repos",
    "events_url": "https://api.github.com/users/alcuadrado/events{/privacy}",
    "received_events_url": "https://api.github.com/users/alcuadrado/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/2215/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/2215/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/comments/1006648417",
    "html_url": "https://github.com/NomicFoundation/hardhat/issues/2215#issuecomment-1006648417",
    "issue_url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/2215",
    "id": 1006648417,
    "node_id": "IC_kwDOB7jojM48ADxh",
    "user": {
      "login": "freitasgouvea",
      "id": 46804396,
      "node_id": "MDQ6VXNlcjQ2ODA0Mzk2",
      "avatar_url": "https://avatars.githubusercontent.com/u/46804396?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/freitasgouvea",
      "html_url": "https://github.com/freitasgouvea",
      "followers_url": "https://api.github.com/users/freitasgouvea/followers",
      "following_url": "https://api.github.com/users/freitasgouvea/following{/other_user}",
      "gists_url": "https://api.github.com/users/freitasgouvea/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/freitasgouvea/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/freitasgouvea/subscriptions",
      "organizations_url": "https://api.github.com/users/freitasgouvea/orgs",
      "repos_url": "https://api.github.com/users/freitasgouvea/repos",
      "events_url": "https://api.github.com/users/freitasgouvea/events{/privacy}",
      "received_events_url": "https://api.github.com/users/freitasgouvea/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-06T14:47:41Z",
    "updated_at": "2022-01-06T14:48:16Z",
    "author_association": "NONE",
    "body": "I found this same issue here https://github.com/nomiclabs/hardhat/issues/2162 we will try use Alchemy provider and i will update informations here",
    "reactions": {
      "url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/comments/1006648417/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/comments/1006653368",
    "html_url": "https://github.com/NomicFoundation/hardhat/issues/2215#issuecomment-1006653368",
    "issue_url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/2215",
    "id": 1006653368,
    "node_id": "IC_kwDOB7jojM48AE-4",
    "user": {
      "login": "alcuadrado",
      "id": 176499,
      "node_id": "MDQ6VXNlcjE3NjQ5OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/176499?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alcuadrado",
      "html_url": "https://github.com/alcuadrado",
      "followers_url": "https://api.github.com/users/alcuadrado/followers",
      "following_url": "https://api.github.com/users/alcuadrado/following{/other_user}",
      "gists_url": "https://api.github.com/users/alcuadrado/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alcuadrado/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alcuadrado/subscriptions",
      "organizations_url": "https://api.github.com/users/alcuadrado/orgs",
      "repos_url": "https://api.github.com/users/alcuadrado/repos",
      "events_url": "https://api.github.com/users/alcuadrado/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alcuadrado/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-06T14:54:16Z",
    "updated_at": "2022-01-06T14:54:16Z",
    "author_association": "MEMBER",
    "body": "Hey @freitasgouvea, this is in fact a duplicate of #2162. Using Alchemy workarounds the problem.",
    "reactions": {
      "url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/comments/1006653368/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
