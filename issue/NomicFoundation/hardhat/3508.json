{
  "url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/3508",
  "repository_url": "https://api.github.com/repos/NomicFoundation/hardhat",
  "labels_url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/3508/labels{/name}",
  "comments_url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/3508/comments",
  "events_url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/3508/events",
  "html_url": "https://github.com/NomicFoundation/hardhat/issues/3508",
  "id": 1515887615,
  "node_id": "I_kwDOB7jojM5aWpv_",
  "number": 3508,
  "title": "Add parameters to `loadFixture`",
  "user": {
    "login": "VVander",
    "id": 6549498,
    "node_id": "MDQ6VXNlcjY1NDk0OTg=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6549498?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/VVander",
    "html_url": "https://github.com/VVander",
    "followers_url": "https://api.github.com/users/VVander/followers",
    "following_url": "https://api.github.com/users/VVander/following{/other_user}",
    "gists_url": "https://api.github.com/users/VVander/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/VVander/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/VVander/subscriptions",
    "organizations_url": "https://api.github.com/users/VVander/orgs",
    "repos_url": "https://api.github.com/users/VVander/repos",
    "events_url": "https://api.github.com/users/VVander/events{/privacy}",
    "received_events_url": "https://api.github.com/users/VVander/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 947232611,
      "node_id": "MDU6TGFiZWw5NDcyMzI2MTE=",
      "url": "https://api.github.com/repos/NomicFoundation/hardhat/labels/type:feature",
      "name": "type:feature",
      "color": "FBCA04",
      "default": false,
      "description": "Feature request"
    },
    {
      "id": 4937720577,
      "node_id": "LA_kwDOB7jojM8AAAABJk-jAQ",
      "url": "https://api.github.com/repos/NomicFoundation/hardhat/labels/status:ready",
      "name": "status:ready",
      "color": "0E8A16",
      "default": false,
      "description": "This issue is ready to be worked on"
    },
    {
      "id": 4952057568,
      "node_id": "LA_kwDOB7jojM8AAAABJypm4A",
      "url": "https://api.github.com/repos/NomicFoundation/hardhat/labels/area:network-helpers",
      "name": "area:network-helpers",
      "color": "5319E7",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 7,
  "created_at": "2023-01-01T23:04:45Z",
  "updated_at": "2023-07-24T02:57:03Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "Hello! I noticed in the `hardhat-network-helpers` package, `loadFixture()` doesn't allow parameters to be passed to fixtures. I use a parameter on my fixture to dictate the initial state for tests so that I don't have to duplicate code.\r\n\r\nThis is a relatively simple change, so I went ahead and altered `loadFixture()` to pass optional parameters via another generic type `P`. Although this works for my use case, I haven't tested it extensively otherwise.\r\n\r\n```\r\nimport type { SnapshotRestorer } from \"./helpers/takeSnapshot\";\r\n\r\nimport {\r\n  FixtureAnonymousFunctionError,\r\n  FixtureSnapshotError,\r\n  InvalidSnapshotError,\r\n} from \"./errors\";\r\n\r\ntype Fixture<T, P> = (fixtureParameters?:P) => Promise<T>;\r\n\r\ninterface Snapshot<T, P> {\r\n  restorer: SnapshotRestorer;\r\n  fixture: Fixture<T, P>;\r\n  data: T;\r\n}\r\n\r\nlet snapshots: Array<Snapshot<any, any>> = [];\r\n\r\n/**\r\n * Useful in tests for setting up the desired state of the network.\r\n *\r\n * Executes the given function and takes a snapshot of the blockchain. Upon\r\n * subsequent calls to `loadFixture` with the same function, rather than\r\n * executing the function again, the blockchain will be restored to that\r\n * snapshot.\r\n *\r\n * _Warning_: don't use `loadFixture` with an anonymous function, otherwise the\r\n * function will be executed each time instead of using snapshots:\r\n *\r\n * - Correct usage: `loadFixture(deployTokens, deployTokensParameters)`\r\n * - Incorrect usage: `loadFixture(async (parameters) => { ... })`\r\n */\r\nexport async function loadFixture<T, P>(fixture: Fixture<T,P>, fixtureParameters?: P): Promise<T> {\r\n  if (fixture.name === \"\") {\r\n    throw new FixtureAnonymousFunctionError();\r\n  }\r\n\r\n  const snapshot = snapshots.find((s) => s.fixture === fixture);\r\n\r\n  const { takeSnapshot } = await import(\"./helpers/takeSnapshot\");\r\n\r\n  if (snapshot !== undefined) {\r\n    try {\r\n      await snapshot.restorer.restore();\r\n      snapshots = snapshots.filter(\r\n        (s) =>\r\n          Number(s.restorer.snapshotId) <= Number(snapshot.restorer.snapshotId)\r\n      );\r\n    } catch (e) {\r\n      if (e instanceof InvalidSnapshotError) {\r\n        throw new FixtureSnapshotError(e);\r\n      }\r\n\r\n      throw e;\r\n    }\r\n\r\n    return snapshot.data;\r\n  } else {\r\n    const data = await fixture(fixtureParameters);\r\n    const restorer = await takeSnapshot();\r\n\r\n    snapshots.push({\r\n      restorer,\r\n      fixture,\r\n      data,\r\n    });\r\n\r\n    return data;\r\n  }\r\n}\r\n```",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/3508/reactions",
    "total_count": 3,
    "+1": 3,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/3508/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/comments/1369076174",
    "html_url": "https://github.com/NomicFoundation/hardhat/issues/3508#issuecomment-1369076174",
    "issue_url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/3508",
    "id": 1369076174,
    "node_id": "IC_kwDOB7jojM5RmnHO",
    "user": {
      "login": "fvictorio",
      "id": 417134,
      "node_id": "MDQ6VXNlcjQxNzEzNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417134?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fvictorio",
      "html_url": "https://github.com/fvictorio",
      "followers_url": "https://api.github.com/users/fvictorio/followers",
      "following_url": "https://api.github.com/users/fvictorio/following{/other_user}",
      "gists_url": "https://api.github.com/users/fvictorio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fvictorio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fvictorio/subscriptions",
      "organizations_url": "https://api.github.com/users/fvictorio/orgs",
      "repos_url": "https://api.github.com/users/fvictorio/repos",
      "events_url": "https://api.github.com/users/fvictorio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fvictorio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-02T16:26:44Z",
    "updated_at": "2023-01-02T16:26:44Z",
    "author_association": "MEMBER",
    "body": "I agree that this would be useful; the problem is how to handle different calls to `loadFixture` with different params. With your change (if I'm understanding it correctly), when you do this:\r\n\r\n```\r\nawait loadFixture(myFixture(1))\r\n\r\n// ...\r\n\r\nawait loadFixture(myFixture(2))\r\n```\r\n\r\nthe second call will use the state from the first one, which is incorrect.\r\n\r\nWe could add the parameters to the \"cache key\", but this would mean that all the parameters should be comparable, which makes things more complex.\r\n\r\nThis is a valid feature request though, thanks for opening it.",
    "reactions": {
      "url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/comments/1369076174/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/comments/1369200207",
    "html_url": "https://github.com/NomicFoundation/hardhat/issues/3508#issuecomment-1369200207",
    "issue_url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/3508",
    "id": 1369200207,
    "node_id": "IC_kwDOB7jojM5RnFZP",
    "user": {
      "login": "VVander",
      "id": 6549498,
      "node_id": "MDQ6VXNlcjY1NDk0OTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6549498?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/VVander",
      "html_url": "https://github.com/VVander",
      "followers_url": "https://api.github.com/users/VVander/followers",
      "following_url": "https://api.github.com/users/VVander/following{/other_user}",
      "gists_url": "https://api.github.com/users/VVander/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/VVander/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/VVander/subscriptions",
      "organizations_url": "https://api.github.com/users/VVander/orgs",
      "repos_url": "https://api.github.com/users/VVander/repos",
      "events_url": "https://api.github.com/users/VVander/events{/privacy}",
      "received_events_url": "https://api.github.com/users/VVander/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-02T21:00:50Z",
    "updated_at": "2023-01-03T01:55:24Z",
    "author_association": "NONE",
    "body": "> ...the second call will use the state from the first one, which is incorrect.\r\n\r\nGood catch! I had a feeling there were some cases I missed.\r\n\r\n> We could add the parameters to the \"cache key\", but this would mean that all the parameters should be comparable, which makes things more complex.\r\n\r\nComparable parameters works fine for my use case, since I'm just passing an object full of booleans like this:\r\n\r\n```\r\nexport type SetupData = { \r\n        protocol: Protocol, \r\n        signers: Signers\r\n}\r\n\r\ntype FixtureParameters = {\r\n\tinitialize: boolean,\r\n\tsetupWhitelist: boolean,\r\n\tetc: boolean\r\n}\r\n\r\nexport async function protocolFixture(\r\n\tparameters: {\r\n\t\tinitialize: true,\r\n\t\tsetupWhitelist: false,\r\n\t\tetc: false\r\n\t}): Promise<SetupData> {\r\n\t\r\n\tconst protocol = await deployProtocol(); \r\n\tconst signers = await createSigners();\r\n\r\n\tif (parameters.initialize) initializeProtocol(protocol);\r\n\tif (parameters.setupWhitelist) setupWhitelist(protocol);\r\n\tif (parameters.etc) doSomethingElse();\r\n\r\n\treturn { protocol, signers } ;\t\r\n}\r\n```\r\n\r\nAnd here's the modified `loadFixture.ts` with parameters added to the snapshot key:\r\n\r\n```\r\nimport type { SnapshotRestorer } from \"./helpers/takeSnapshot\";\r\n\r\nimport {\r\n  FixtureAnonymousFunctionError,\r\n  FixtureSnapshotError,\r\n  InvalidSnapshotError,\r\n} from \"./errors\";\r\n\r\ntype Fixture<T, P> = (fixtureParameters?:P) => Promise<T>;\r\n\r\ninterface Snapshot<T, P> {\r\n  restorer: SnapshotRestorer;\r\n  fixture: Fixture<T, P>;\r\n  parameters: P\r\n  data: T;\r\n}\r\n\r\nlet snapshots: Array<Snapshot<any, any>> = [];\r\n\r\n/**\r\n * Useful in tests for setting up the desired state of the network.\r\n *\r\n * Executes the given function and takes a snapshot of the blockchain. Upon\r\n * subsequent calls to `loadFixture` with the same function, rather than\r\n * executing the function again, the blockchain will be restored to that\r\n * snapshot.\r\n *\r\n * _Warning_: don't use `loadFixture` with an anonymous function, otherwise the\r\n * function will be executed each time instead of using snapshots:\r\n *\r\n * - Correct usage: `loadFixture(deployTokens, deployTokensParameters)`\r\n * - Incorrect usage: `loadFixture(async (parameters) => { ... })`\r\n */\r\nexport async function loadFixture<T, P>(fixture: Fixture<T,P>, parameters?: P): Promise<T> {\r\n  if (fixture.name === \"\") {\r\n    throw new FixtureAnonymousFunctionError();\r\n  }\r\n\r\n  const snapshot = snapshots.find((s) => s.fixture === fixture && s.parameters === parameters);\r\n\r\n  if (snapshot !== undefined) {\r\n    try {\r\n      await snapshot.restorer.restore();\r\n      snapshots = snapshots.filter(\r\n        (s) =>\r\n          Number(s.restorer.snapshotId) <= Number(snapshot.restorer.snapshotId)\r\n      );\r\n    } catch (e) {\r\n      if (e instanceof InvalidSnapshotError) {\r\n        throw new FixtureSnapshotError(e);\r\n      }\r\n\r\n      throw e;\r\n    }\r\n\r\n    return snapshot.data;\r\n  } else {\r\n    const { takeSnapshot } = await import(\"./helpers/takeSnapshot\");\r\n    const data = await fixture(parameters);\r\n    const restorer = await takeSnapshot();\r\n\r\n    snapshots.push({\r\n      restorer,\r\n      fixture,\r\n      parameters,\r\n      data,\r\n    });\r\n\r\n    return data;\r\n  }\r\n}\r\n```\r\n\r\nI still haven't tested this very much, but my tests are still passing at least. Would be happy to submit a PR, but I'm having trouble getting the repo to compile locally -- probably a dependency issue.",
    "reactions": {
      "url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/comments/1369200207/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/comments/1369683620",
    "html_url": "https://github.com/NomicFoundation/hardhat/issues/3508#issuecomment-1369683620",
    "issue_url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/3508",
    "id": 1369683620,
    "node_id": "IC_kwDOB7jojM5Ro7ak",
    "user": {
      "login": "fvictorio",
      "id": 417134,
      "node_id": "MDQ6VXNlcjQxNzEzNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417134?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fvictorio",
      "html_url": "https://github.com/fvictorio",
      "followers_url": "https://api.github.com/users/fvictorio/followers",
      "following_url": "https://api.github.com/users/fvictorio/following{/other_user}",
      "gists_url": "https://api.github.com/users/fvictorio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fvictorio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fvictorio/subscriptions",
      "organizations_url": "https://api.github.com/users/fvictorio/orgs",
      "repos_url": "https://api.github.com/users/fvictorio/repos",
      "events_url": "https://api.github.com/users/fvictorio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fvictorio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-03T11:54:50Z",
    "updated_at": "2023-01-03T11:54:50Z",
    "author_association": "MEMBER",
    "body": "If I'm understanding the code correctly, this will work if `parameters` is a number or string, but it won't if it's an array or object, because it's being compared by reference.\r\n\r\nMaybe the way to go here is to add a simple `isEqual` function that compares the values, and throws if they are not comparable (say, if any of the values, or nested values, is a function).\r\n\r\nIt's also possible to type this, but it's a bit of a pain in the ass.\r\n\r\n```js\r\nfunction isEqual(a: unknown, b: unknown) {\r\n  if (a === null) {\r\n    return b === null;\r\n  }\r\n\r\n  if (a === undefined) {\r\n    return b === undefined;\r\n  }\r\n\r\n  if (typeof a === \"function\" || typeof b === \"function\") {\r\n    throw new Error(\"only comparable values are supported\");\r\n  }\r\n\r\n  if (typeof a === \"number\" || typeof a === \"bigint\" || typeof a === \"string\") {\r\n    return a === b;\r\n  }\r\n\r\n  if (Array.isArray(a)) {\r\n    if (!Array.isArray(b)) {\r\n      return false;\r\n    }\r\n    if (a.length !== b.length) {\r\n      return false;\r\n    }\r\n\r\n    return zip(a, b).every((x, y) => isEqual(x, y));\r\n  }\r\n\r\n  // etc.\r\n}\r\n```\r\n\r\nJust off the top of my head, I haven't tested this.",
    "reactions": {
      "url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/comments/1369683620/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 1
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/comments/1370520399",
    "html_url": "https://github.com/NomicFoundation/hardhat/issues/3508#issuecomment-1370520399",
    "issue_url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/3508",
    "id": 1370520399,
    "node_id": "IC_kwDOB7jojM5RsHtP",
    "user": {
      "login": "VVander",
      "id": 6549498,
      "node_id": "MDQ6VXNlcjY1NDk0OTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6549498?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/VVander",
      "html_url": "https://github.com/VVander",
      "followers_url": "https://api.github.com/users/VVander/followers",
      "following_url": "https://api.github.com/users/VVander/following{/other_user}",
      "gists_url": "https://api.github.com/users/VVander/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/VVander/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/VVander/subscriptions",
      "organizations_url": "https://api.github.com/users/VVander/orgs",
      "repos_url": "https://api.github.com/users/VVander/repos",
      "events_url": "https://api.github.com/users/VVander/events{/privacy}",
      "received_events_url": "https://api.github.com/users/VVander/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-04T06:05:02Z",
    "updated_at": "2023-01-04T06:17:05Z",
    "author_association": "NONE",
    "body": "Ahh another good catch! The prevalence of anonymous objects is really throwing me off here. I'm used to C# where I can limit generic parameters like this: `public myFunction<T>() where T is IEquatable<T>`. `X extends Y` in TS is obviously similar to `where X is Y` in C#, but I don't know of the TS equivalent of [IEquatable](https://learn.microsoft.com/en-us/dotnet/api/system.iequatable-1?view=net-7.0). For now, I've just manually added the function like you suggested (see commit ref above), though this doesn't appear to change anything since my tests were already passing. Maybe I'm still missing something? :shrug: \r\n\r\nI'm going to move on, but I'll keep monitoring and update if I see anything odd. Thanks for considering this feature @fvictorio !",
    "reactions": {
      "url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/comments/1370520399/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/comments/1370565934",
    "html_url": "https://github.com/NomicFoundation/hardhat/issues/3508#issuecomment-1370565934",
    "issue_url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/3508",
    "id": 1370565934,
    "node_id": "IC_kwDOB7jojM5RsS0u",
    "user": {
      "login": "fvictorio",
      "id": 417134,
      "node_id": "MDQ6VXNlcjQxNzEzNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417134?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fvictorio",
      "html_url": "https://github.com/fvictorio",
      "followers_url": "https://api.github.com/users/fvictorio/followers",
      "following_url": "https://api.github.com/users/fvictorio/following{/other_user}",
      "gists_url": "https://api.github.com/users/fvictorio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fvictorio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fvictorio/subscriptions",
      "organizations_url": "https://api.github.com/users/fvictorio/orgs",
      "repos_url": "https://api.github.com/users/fvictorio/repos",
      "events_url": "https://api.github.com/users/fvictorio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fvictorio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-04T07:23:41Z",
    "updated_at": "2023-01-04T07:23:41Z",
    "author_association": "MEMBER",
    "body": "> but I don't know of the TS equivalent of [IEquatable](https://learn.microsoft.com/en-us/dotnet/api/system.iequatable-1?view=net-7.0)\r\n\r\nThere isn't something like that AFAIK. Same thing for serializable types. It's really annoying to not have those things, but oh well.\r\n\r\n> though this doesn't appear to change anything since my tests were already passing. Maybe I'm still missing something?\r\n\r\nYour previous snippet probably works in the sense of not crashing, but I think it would just always call the fixture function instead of leveraging snapshots. You can add a `console.log` call to check if that's the case or not.\r\n\r\n> Thanks for considering this feature\r\n\r\nThank you for helping me think about it~ This is something we'll probably want to add in the future, and this discussion is going to be useful.",
    "reactions": {
      "url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/comments/1370565934/reactions",
      "total_count": 2,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 1,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/comments/1464941646",
    "html_url": "https://github.com/NomicFoundation/hardhat/issues/3508#issuecomment-1464941646",
    "issue_url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/3508",
    "id": 1464941646,
    "node_id": "IC_kwDOB7jojM5XUTxO",
    "user": {
      "login": "AlissonRS",
      "id": 4753901,
      "node_id": "MDQ6VXNlcjQ3NTM5MDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4753901?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AlissonRS",
      "html_url": "https://github.com/AlissonRS",
      "followers_url": "https://api.github.com/users/AlissonRS/followers",
      "following_url": "https://api.github.com/users/AlissonRS/following{/other_user}",
      "gists_url": "https://api.github.com/users/AlissonRS/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AlissonRS/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AlissonRS/subscriptions",
      "organizations_url": "https://api.github.com/users/AlissonRS/orgs",
      "repos_url": "https://api.github.com/users/AlissonRS/repos",
      "events_url": "https://api.github.com/users/AlissonRS/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AlissonRS/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-11T15:58:53Z",
    "updated_at": "2023-03-11T16:06:56Z",
    "author_association": "NONE",
    "body": "I figured a way to pass parameters to the fixture setup, my tests work fine with this approach, however I'm not sure if this causes the fixture to re-run between tests, maybe it depends on whether params are the same or not.\r\n\r\nI'm doing this because I want to decompose my initial setup into multiple fixtures, and I may use the output of one fixture as input for another fixture and so on.\r\n\r\n```\r\n\r\nexport async function setupMainFixture(paramA: string, paramB: number) {\r\n   const user0 = ethers.provider.getSigner(0);\r\n   const user1 = ethers.provider.getSigner(1);\r\n   return { user0, user1 };\r\n}\r\n\r\nexport async function setupChildFixture(user0: JsonRpcSigner, user1: JsonRpcSigner) {\r\n  const setupChildFixtureInternal = async () => {\r\n    // DO YOUR SETUP HERE, RETURN WHAT YOU NEED IN YOUR TESTS\r\n    const balance0 = await user0.getBalance();\r\n    const balance1 = await user1.getBalance();\r\n    return { balance0, balance1 };\r\n  };\r\n  return setupChildFixtureInternal;\r\n}\r\n\r\n  // Test using the fixture\r\n  it('Should detect non-LP ERC20 Token with fallback', async () => {\r\n    const { user0, user1 } = await loadFixture(setupMainFixture);\r\n    const { balance0, balance1 } = await loadFixture(await setupChildFixtureInternal(user0, user1));\r\n    // Test logic\r\n  });\r\n\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/comments/1464941646/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 1,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/comments/1647123272",
    "html_url": "https://github.com/NomicFoundation/hardhat/issues/3508#issuecomment-1647123272",
    "issue_url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/3508",
    "id": 1647123272,
    "node_id": "IC_kwDOB7jojM5iLRtI",
    "user": {
      "login": "SvenMeyer",
      "id": 25609,
      "node_id": "MDQ6VXNlcjI1NjA5",
      "avatar_url": "https://avatars.githubusercontent.com/u/25609?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SvenMeyer",
      "html_url": "https://github.com/SvenMeyer",
      "followers_url": "https://api.github.com/users/SvenMeyer/followers",
      "following_url": "https://api.github.com/users/SvenMeyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/SvenMeyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SvenMeyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SvenMeyer/subscriptions",
      "organizations_url": "https://api.github.com/users/SvenMeyer/orgs",
      "repos_url": "https://api.github.com/users/SvenMeyer/repos",
      "events_url": "https://api.github.com/users/SvenMeyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SvenMeyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-07-24T02:57:03Z",
    "updated_at": "2023-07-24T02:57:03Z",
    "author_association": "NONE",
    "body": "@fvictorio Would be great to have an \"official solution\".\r\nA lot of code and setup work could be made much less redundant if a parameter (or more than one) could be passed to `loadFixture`\r\n- Even if all the different parameterised versions will only be executed once, it would be better to manage.\r\n- Easy and ready to re-use the setup if needed later again\r\n\r\n@VVander @AlissonRS How is your experience with your approach , (still) working ?",
    "reactions": {
      "url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/comments/1647123272/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
