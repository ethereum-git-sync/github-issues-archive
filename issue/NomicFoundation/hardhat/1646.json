{
  "url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/1646",
  "repository_url": "https://api.github.com/repos/NomicFoundation/hardhat",
  "labels_url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/1646/labels{/name}",
  "comments_url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/1646/comments",
  "events_url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/1646/events",
  "html_url": "https://github.com/NomicFoundation/hardhat/issues/1646",
  "id": 941126113,
  "node_id": "MDU6SXNzdWU5NDExMjYxMTM=",
  "number": 1646,
  "title": "Encountering issues to use evm_snapshot and evm_revert",
  "user": {
    "login": "wei3erHase",
    "id": 84595958,
    "node_id": "MDQ6VXNlcjg0NTk1OTU4",
    "avatar_url": "https://avatars.githubusercontent.com/u/84595958?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/wei3erHase",
    "html_url": "https://github.com/wei3erHase",
    "followers_url": "https://api.github.com/users/wei3erHase/followers",
    "following_url": "https://api.github.com/users/wei3erHase/following{/other_user}",
    "gists_url": "https://api.github.com/users/wei3erHase/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/wei3erHase/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/wei3erHase/subscriptions",
    "organizations_url": "https://api.github.com/users/wei3erHase/orgs",
    "repos_url": "https://api.github.com/users/wei3erHase/repos",
    "events_url": "https://api.github.com/users/wei3erHase/events{/privacy}",
    "received_events_url": "https://api.github.com/users/wei3erHase/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": true,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2021-07-09T23:56:08Z",
  "updated_at": "2022-11-18T18:26:06Z",
  "closed_at": "2021-07-10T00:41:07Z",
  "author_association": "NONE",
  "active_lock_reason": "resolved",
  "body": "I'm getting this response when executing the following test:\r\n`InvalidArgumentsError: Errors encountered in param 0: Invalid value 1625874929794 supplied to : QUANTITY`\r\n\r\n```ts\r\nimport { ethers, network } from 'hardhat';\r\nimport { expect } from 'chai';\r\nimport { BigNumber } from 'ethers';\r\nimport { JsonRpcSigner } from '@ethersproject/providers';\r\nimport { IERC20 } from '@types';\r\nimport { ERC20ForTest, ERC20ForTest__factory } from '@types';\r\n\r\nconst DAI_ADDRESS = '0x6B175474E89094C44Da98b954EedeAC495271d0F';\r\nconst RICH_DAI_ADDRESS = '0x47ac0fb4f2d84898e4d9e7b4dab3c24507a6d503';\r\n\r\ndescribe.only('plain-snapshots', () => {\r\n  let dude: JsonRpcSigner;\r\n  let dai: IERC20;\r\n  let token: ERC20ForTest;\r\n  let test: IERC20;\r\n\r\n  let snap_id: number;\r\n  let initialBalance: BigNumber;\r\n\r\n  before(async () => {\r\n    dude = await impersonate(RICH_DAI_ADDRESS);\r\n    dai = (await ethers.getContractAt('@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20', DAI_ADDRESS)) as unknown as IERC20;\r\n    token = await ((await ethers.getContractFactory('ERC20ForTest')) as unknown as ERC20ForTest__factory).deploy(\r\n      'BUG',\r\n      'snapshot',\r\n      dude._address,\r\n      BigNumber.from('0xfffffffffffffff')\r\n    );\r\n\r\n    // e2e + unit\r\n    test = dai as any as IERC20; // dai\r\n    //\r\n\r\n    if (test == dai) {\r\n      await reset({\r\n        jsonRpcUrl: process.env.MAINNET_HTTPS_URL,\r\n        blockNumber: 12657955,\r\n      });\r\n    }\r\n\r\n    snap_id = await takeSnapshot();\r\n    initialBalance = await test.balanceOf(dude._address);\r\n\r\n    console.log('DAI', test.address);\r\n    console.log('dude', dude._address);\r\n    console.log('initialBalance', initialBalance);\r\n  });\r\n\r\n  beforeEach(async () => {\r\n    test.connect(dude).transfer(test.address, 1, { gasPrice: 0 });\r\n\r\n    await revertSnapshot(snap_id);\r\n  });\r\n\r\n  it('should have balance', async () => {\r\n    expect(await test.balanceOf(dude._address)).to.be.gt(0);\r\n  });\r\n\r\n  it('should have initialBalance', async () => {\r\n    let balance = await test.balanceOf(dude._address);\r\n    expect(balance).to.be.eq(initialBalance);\r\n  });\r\n\r\n  it('should have not made 3 tx', async () => {\r\n    let balance = await test.balanceOf(dude._address);\r\n    expect(balance).not.to.be.eq(initialBalance.sub(3));\r\n  });\r\n});\r\n\r\nconst impersonate = async (address: string): Promise<JsonRpcSigner> => {\r\n  await network.provider.request({\r\n    method: 'hardhat_impersonateAccount',\r\n    params: [address],\r\n  });\r\n  return ethers.provider.getSigner(address);\r\n};\r\n\r\nconst reset = async (forking?: { [key: string]: any }) => {\r\n  const params = forking ? [{ forking }] : [];\r\n  await network.provider.request({\r\n    method: 'hardhat_reset',\r\n    params,\r\n  });\r\n};\r\n\r\nconst takeSnapshot = async (): Promise<number> => {\r\n  const id = new Date().getTime(); // 1\r\n  await network.provider.request({\r\n    method: 'evm_snapshot',\r\n    params: [],\r\n  });\r\n  return id;\r\n};\r\n\r\nconst revertSnapshot = async (id: number) => {\r\n  // (network.provider as any)._maxInternalBlockNumber = -1024\r\n  await network.provider.request({\r\n    method: 'evm_revert',\r\n    params: [id],\r\n  });\r\n};\r\n\r\n```",
  "closed_by": {
    "login": "alcuadrado",
    "id": 176499,
    "node_id": "MDQ6VXNlcjE3NjQ5OQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/176499?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/alcuadrado",
    "html_url": "https://github.com/alcuadrado",
    "followers_url": "https://api.github.com/users/alcuadrado/followers",
    "following_url": "https://api.github.com/users/alcuadrado/following{/other_user}",
    "gists_url": "https://api.github.com/users/alcuadrado/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/alcuadrado/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/alcuadrado/subscriptions",
    "organizations_url": "https://api.github.com/users/alcuadrado/orgs",
    "repos_url": "https://api.github.com/users/alcuadrado/repos",
    "events_url": "https://api.github.com/users/alcuadrado/events{/privacy}",
    "received_events_url": "https://api.github.com/users/alcuadrado/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/1646/reactions",
    "total_count": 1,
    "+1": 1,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/1646/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/comments/877524125",
    "html_url": "https://github.com/NomicFoundation/hardhat/issues/1646#issuecomment-877524125",
    "issue_url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/1646",
    "id": 877524125,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg3NzUyNDEyNQ==",
    "user": {
      "login": "alcuadrado",
      "id": 176499,
      "node_id": "MDQ6VXNlcjE3NjQ5OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/176499?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alcuadrado",
      "html_url": "https://github.com/alcuadrado",
      "followers_url": "https://api.github.com/users/alcuadrado/followers",
      "following_url": "https://api.github.com/users/alcuadrado/following{/other_user}",
      "gists_url": "https://api.github.com/users/alcuadrado/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alcuadrado/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alcuadrado/subscriptions",
      "organizations_url": "https://api.github.com/users/alcuadrado/orgs",
      "repos_url": "https://api.github.com/users/alcuadrado/repos",
      "events_url": "https://api.github.com/users/alcuadrado/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alcuadrado/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-07-10T00:41:07Z",
    "updated_at": "2021-07-10T00:41:07Z",
    "author_association": "MEMBER",
    "body": "Hey, @wei3erHase. \r\n\r\nNote that this is not a support channel. Please use http://hardhat.org/discord for that.\r\n\r\nAnyway, here's what's going on:\r\n\r\n* The Ethereum JSON-RPC represents numbers as string with a format normally referred as `QUANTITY`. You are using `number`s instead. \r\n* Also, you are not supposed to generate those ids locally. `evm_snapshot` returns them, in the right format.\r\n\r\n\r\nThis should work:\r\n\r\n```ts\r\nconst takeSnapshot = async (): Promise<string> => {\r\n  return await network.provider.request({\r\n    method: 'evm_snapshot',\r\n    params: [],\r\n  });\r\n};\r\n\r\nconst revertSnapshot = async (id: string) => {\r\n  // (network.provider as any)._maxInternalBlockNumber = -1024\r\n  await network.provider.request({\r\n    method: 'evm_revert',\r\n    params: [id],\r\n  });\r\n};\r\n```\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/comments/877524125/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
