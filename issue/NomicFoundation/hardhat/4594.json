{
  "url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/4594",
  "repository_url": "https://api.github.com/repos/NomicFoundation/hardhat",
  "labels_url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/4594/labels{/name}",
  "comments_url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/4594/comments",
  "events_url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/4594/events",
  "html_url": "https://github.com/NomicFoundation/hardhat/issues/4594",
  "id": 1997902059,
  "node_id": "I_kwDOB7jojM53FZDr",
  "number": 4594,
  "title": "ContractFactory runner is null when Hardhat config has no accounts",
  "user": {
    "login": "ericglau",
    "id": 29640130,
    "node_id": "MDQ6VXNlcjI5NjQwMTMw",
    "avatar_url": "https://avatars.githubusercontent.com/u/29640130?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ericglau",
    "html_url": "https://github.com/ericglau",
    "followers_url": "https://api.github.com/users/ericglau/followers",
    "following_url": "https://api.github.com/users/ericglau/following{/other_user}",
    "gists_url": "https://api.github.com/users/ericglau/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ericglau/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ericglau/subscriptions",
    "organizations_url": "https://api.github.com/users/ericglau/orgs",
    "repos_url": "https://api.github.com/users/ericglau/repos",
    "events_url": "https://api.github.com/users/ericglau/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ericglau/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 4937119027,
      "node_id": "LA_kwDOB7jojM8AAAABJkZ1Mw",
      "url": "https://api.github.com/repos/NomicFoundation/hardhat/labels/status:triaging",
      "name": "status:triaging",
      "color": "0E8A16",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": {
    "login": "schaable",
    "id": 1165424,
    "node_id": "MDQ6VXNlcjExNjU0MjQ=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1165424?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/schaable",
    "html_url": "https://github.com/schaable",
    "followers_url": "https://api.github.com/users/schaable/followers",
    "following_url": "https://api.github.com/users/schaable/following{/other_user}",
    "gists_url": "https://api.github.com/users/schaable/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/schaable/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/schaable/subscriptions",
    "organizations_url": "https://api.github.com/users/schaable/orgs",
    "repos_url": "https://api.github.com/users/schaable/repos",
    "events_url": "https://api.github.com/users/schaable/events{/privacy}",
    "received_events_url": "https://api.github.com/users/schaable/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "schaable",
      "id": 1165424,
      "node_id": "MDQ6VXNlcjExNjU0MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1165424?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/schaable",
      "html_url": "https://github.com/schaable",
      "followers_url": "https://api.github.com/users/schaable/followers",
      "following_url": "https://api.github.com/users/schaable/following{/other_user}",
      "gists_url": "https://api.github.com/users/schaable/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/schaable/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/schaable/subscriptions",
      "organizations_url": "https://api.github.com/users/schaable/orgs",
      "repos_url": "https://api.github.com/users/schaable/repos",
      "events_url": "https://api.github.com/users/schaable/events{/privacy}",
      "received_events_url": "https://api.github.com/users/schaable/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 0,
  "created_at": "2023-11-16T22:29:25Z",
  "updated_at": "2023-11-16T22:35:59Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "### Version of Hardhat\r\n\r\n2.17.2\r\n\r\n### What happened?\r\n\r\nWhen using a network that is defined in the Hardhat config with only `url` and no `accounts`, `ethers.getContractFactory` instantiates a ContractFactory with no `runner`.\r\n\r\nWhile it may make sense in the context of the ContractFactory itself for deployments (there is no signer for deploying new contracts), subsequent usage of this ContractFactory might attempt to use the `runner` not as a signer but as a provider.\r\n\r\nFor example, consider the following code when there are no accounts:\r\n```\r\nimport { ethers } from \"hardhat\";\r\n\r\nasync function main() {\r\n  const MyToken = await ethers.getContractFactory(\"MyToken\"); // MyToken.runner is null\r\n  const instance = MyToken.attach('0xf37F5FE27A63876C172B110B0C229e2Ff3B29Eb8'); // instance.runner is null\r\n  await instance.waitForDeployment();\r\n}\r\n```\r\nThis is a simplified example but we want to wait for a contract instance to exist on the network, but the contract instance may either be a new deployment or something that was previously deployed. In the above, it was previously deployed.\r\n\r\nSince ethers uses the contract instance's `runner` in [waitForDeployment](https://github.com/ethers-io/ethers.js/blob/v6.7.1/src.ts/contract/contract.ts#L838) to [check for deployed code](https://github.com/ethers-io/ethers.js/blob/v6.7.1/src.ts/contract/contract.ts#L815), the above fails with: \r\n```\r\nError: runner does not support .provider (operation=\"getDeployedCode\", code=UNSUPPORTED_OPERATION, version=6.7.1)\r\n    at makeError (/Users/eric/Downloads/project 19/node_modules/ethers/src.ts/utils/errors.ts:685:21)\r\n    at assert (/Users/eric/Downloads/project 19/node_modules/ethers/src.ts/utils/errors.ts:702:25)\r\n    at Proxy.getDeployedCode (/Users/eric/Downloads/project 19/node_modules/ethers/src.ts/contract/contract.ts:817:15)\r\n    at Proxy.waitForDeployment (/Users/eric/Downloads/project 19/node_modules/ethers/src.ts/contract/contract.ts:838:33)\r\n    at main (/Users/eric/Downloads/project 19/scripts/waitForDeployment.ts:10:18)\r\n    at processTicksAndRejections (node:internal/process/task_queues:95:5) {\r\n  code: 'UNSUPPORTED_OPERATION',\r\n  operation: 'getDeployedCode'\r\n}\r\n```\r\n\r\nI am wondering if either of the following would make sense for Hardhat:\r\n- `getContractFactory` should use the default `hre.ethers.provider` as the `runner` if there are no accounts\r\nor\r\n- Hardhat should provide an alternative to `ContractFactory.attach` where Hardhat injects the default `hre.ethers.provider` if there is no runner in the `ContractFactory`\r\n\r\nAlternatively, please let me know if this is a usage error.  For example, the following both work.  Would any of these be preferred in terms of usage?\r\n```\r\nimport { ethers } from \"hardhat\";\r\n\r\nasync function main() {\r\n  const MyToken = await ethers.getContractFactory(\"MyToken\");\r\n  const MyTokenWithRunner = new ethers.ContractFactory(MyToken.interface, MyToken.bytecode, ethers.provider);\r\n  const instance = MyTokenWithRunner.attach('0xf37F5FE27A63876C172B110B0C229e2Ff3B29Eb8');\r\n  await instance.waitForDeployment();\r\n}\r\n```\r\nor\r\n```\r\nimport { ethers } from \"hardhat\";\r\n\r\nasync function main() {\r\n  const MyToken = await ethers.getContractFactory(\"MyToken\");\r\n  const instance = new ethers.Contract('0xf37F5FE27A63876C172B110B0C229e2Ff3B29Eb8', MyToken.interface, ethers.provider);\r\n  await instance.waitForDeployment();\r\n}\r\n```\r\n\r\n### Minimal reproduction steps\r\n\r\nCreate a new Hardhat project using ethers and hardhat-ethers.\r\n\r\nIn hardhat-config.ts, specify the following under `networks` (without any accounts):\r\n```\r\n    baseGoerli: {\r\n      url: 'https://goerli.base.org',\r\n    }\r\n```\r\n\r\nCreate the following script and run it as `npx hardhat run scripts/waitForDeployment.ts --network baseGoerli`\r\n```\r\nimport { ethers } from \"hardhat\";\r\n\r\nasync function main() {\r\n  const MyToken = await ethers.getContractFactory(\"MyToken\");\r\n\r\n  console.log('runner', MyToken.runner);\r\n\r\n  const instance = MyToken.attach('0xf37F5FE27A63876C172B110B0C229e2Ff3B29Eb8');\r\n  await instance.waitForDeployment();\r\n}\r\n\r\nmain().catch((error) => {\r\n  console.error(error);\r\n  process.exitCode = 1;\r\n});\r\n```\r\n\r\nOutput:\r\n```\r\nrunner null\r\nError: runner does not support .provider (operation=\"getDeployedCode\", code=UNSUPPORTED_OPERATION, version=6.7.1)\r\n    at makeError (/Users/eric/Downloads/project 19/node_modules/ethers/src.ts/utils/errors.ts:685:21)\r\n    at assert (/Users/eric/Downloads/project 19/node_modules/ethers/src.ts/utils/errors.ts:702:25)\r\n    at Proxy.getDeployedCode (/Users/eric/Downloads/project 19/node_modules/ethers/src.ts/contract/contract.ts:817:15)\r\n    at Proxy.waitForDeployment (/Users/eric/Downloads/project 19/node_modules/ethers/src.ts/contract/contract.ts:838:33)\r\n    at main (/Users/eric/Downloads/project 19/scripts/waitForDeployment.ts:9:18)\r\n    at processTicksAndRejections (node:internal/process/task_queues:95:5) {\r\n  code: 'UNSUPPORTED_OPERATION',\r\n  operation: 'getDeployedCode'\r\n}\r\n```\r\n\r\n### Search terms\r\n\r\nContractFactory runner provider accounts",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/4594/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/4594/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[

]
