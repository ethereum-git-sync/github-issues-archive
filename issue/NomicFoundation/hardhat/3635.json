{
  "url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/3635",
  "repository_url": "https://api.github.com/repos/NomicFoundation/hardhat",
  "labels_url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/3635/labels{/name}",
  "comments_url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/3635/comments",
  "events_url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/3635/events",
  "html_url": "https://github.com/NomicFoundation/hardhat/issues/3635",
  "id": 1569300908,
  "node_id": "I_kwDOB7jojM5diaGs",
  "number": 3635,
  "title": "automine does not always increase the block timestamp by the same amount",
  "user": {
    "login": "frontier159",
    "id": 103474701,
    "node_id": "U_kgDOBirmDQ",
    "avatar_url": "https://avatars.githubusercontent.com/u/103474701?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/frontier159",
    "html_url": "https://github.com/frontier159",
    "followers_url": "https://api.github.com/users/frontier159/followers",
    "following_url": "https://api.github.com/users/frontier159/following{/other_user}",
    "gists_url": "https://api.github.com/users/frontier159/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/frontier159/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/frontier159/subscriptions",
    "organizations_url": "https://api.github.com/users/frontier159/orgs",
    "repos_url": "https://api.github.com/users/frontier159/repos",
    "events_url": "https://api.github.com/users/frontier159/events{/privacy}",
    "received_events_url": "https://api.github.com/users/frontier159/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 4935639218,
      "node_id": "LA_kwDOB7jojM8AAAABJi_gsg",
      "url": "https://api.github.com/repos/NomicFoundation/hardhat/labels/status:needs-decision",
      "name": "status:needs-decision",
      "color": "0E8A16",
      "default": false,
      "description": "We need to make a decision about this"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2023-02-03T06:34:01Z",
  "updated_at": "2023-02-22T09:10:09Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "### Version of Hardhat\r\n\r\n2.12.5\r\n\r\n### What happened?\r\n\r\nWhen running tests, using automine=true - most of the time, when the same transaction is executed multiple times, the block timestamp increases by the same amount each time.\r\n\r\nHowever when the machine is under load, some contract calls increment the block timestamp by a different amount\r\n\r\nThis has an impact on tests which rely on the timestamp for accrued yield for example.\r\n\r\nIs there a mode where we can set automine to *always* increase the timestamp exactly by 1 second?\r\n\r\n### Minimal reproduction steps\r\n\r\n1. Create a test (automine=true) and track delta of block.timestamp before and after the transaction \r\n2. Run this in a loop to stress test. \r\n3. Also test with the PC under load.\r\n4. The nature of the transaction may also impact - if can't reproduce then try with a relatively gas-expensive transaction.\r\n\r\n```\r\n$ hardhat test test/blockTimestamp.ts\r\n\r\n  Block Timestamp\r\n    timestamp\r\nblock.timestamp delta (seconds): 4\r\nblock.timestamp delta (seconds): 5\r\nblock.timestamp delta (seconds): 4\r\nblock.timestamp delta (seconds): 5\r\nblock.timestamp delta (seconds): 4\r\nblock.timestamp delta (seconds): 5\r\nblock.timestamp delta (seconds): 4\r\nblock.timestamp delta (seconds): 5\r\nblock.timestamp delta (seconds): 5\r\nblock.timestamp delta (seconds): 4\r\nblock.timestamp delta (seconds): 5\r\nblock.timestamp delta (seconds): 5\r\nblock.timestamp delta (seconds): 5\r\nblock.timestamp delta (seconds): 5\r\nblock.timestamp delta (seconds): 5\r\nblock.timestamp delta (seconds): 4\r\nblock.timestamp delta (seconds): 5\r\nblock.timestamp delta (seconds): 5\r\nblock.timestamp delta (seconds): 4\r\n```\r\n\r\nI'm on a macbook pro M1.\r\n\r\n### Search terms\r\n\r\nautomine",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/3635/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/3635/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/comments/1416484119",
    "html_url": "https://github.com/NomicFoundation/hardhat/issues/3635#issuecomment-1416484119",
    "issue_url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/3635",
    "id": 1416484119,
    "node_id": "IC_kwDOB7jojM5UbdUX",
    "user": {
      "login": "frontier159",
      "id": 103474701,
      "node_id": "U_kgDOBirmDQ",
      "avatar_url": "https://avatars.githubusercontent.com/u/103474701?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frontier159",
      "html_url": "https://github.com/frontier159",
      "followers_url": "https://api.github.com/users/frontier159/followers",
      "following_url": "https://api.github.com/users/frontier159/following{/other_user}",
      "gists_url": "https://api.github.com/users/frontier159/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frontier159/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frontier159/subscriptions",
      "organizations_url": "https://api.github.com/users/frontier159/orgs",
      "repos_url": "https://api.github.com/users/frontier159/repos",
      "events_url": "https://api.github.com/users/frontier159/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frontier159/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-02-03T22:28:12Z",
    "updated_at": "2023-02-03T22:28:12Z",
    "author_association": "NONE",
    "body": "Note: I can *force* that the timestamp increases by exactly 1 with\r\nhttps://hardhat.org/hardhat-network/docs/reference#evm_setnextblocktimestamp\r\n\r\nIt would be nice to do this from the config rather than on each call. \r\n\r\nAs of now, I've created my own `MySignerWithAddress`, which is the same as the `@nomiclabs/hardhat-ethers/signers.SignerWithAddress`, except in `sendTransaction()` I ensure the timestamp only increases by 1\r\n\r\n```\r\nimport { ethers } from \"ethers\";\r\nimport { default as hre, network } from \"hardhat\";\r\nimport { time as timeHelpers } from \"@nomicfoundation/hardhat-network-helpers\";\r\n\r\n// The same as \"@nomiclabs/hardhat-ethers/signers.SignerWithAddress\"\r\n// Except force the block timestamp to increment by exactly one on each send transaction.\r\n// Can't extend SignerWithAddress as the constructor is private.\r\nexport class MySignerWithAddress extends ethers.Signer {\r\n  public static async create(signer: ethers.providers.JsonRpcSigner) {\r\n    return new MySignerWithAddress(await signer.getAddress(), signer);\r\n  }\r\n\r\n  private constructor(\r\n    public readonly address: string,\r\n    private readonly _signer: ethers.providers.JsonRpcSigner\r\n  ) {\r\n    super();\r\n    (this as any).provider = _signer.provider;\r\n  }\r\n\r\n  public async getAddress(): Promise<string> {\r\n    return this.address;\r\n  }\r\n\r\n  public signMessage(message: string | ethers.utils.Bytes): Promise<string> {\r\n    return this._signer.signMessage(message);\r\n  }\r\n\r\n  public signTransaction(\r\n    transaction: ethers.utils.Deferrable<ethers.providers.TransactionRequest>\r\n  ): Promise<string> {\r\n    return this._signer.signTransaction(transaction);\r\n  }\r\n\r\n  public async sendTransaction(\r\n    transaction: ethers.utils.Deferrable<ethers.providers.TransactionRequest>\r\n  ): Promise<ethers.providers.TransactionResponse> {\r\n    // Ensure we increment the block by exactly 1\r\n    const currentTime = await timeHelpers.latest();\r\n    await network.provider.send(\"evm_setNextBlockTimestamp\", [currentTime+1]);\r\n    return this._signer.sendTransaction(transaction);\r\n  }\r\n\r\n  public connect(provider: ethers.providers.Provider): MySignerWithAddress {\r\n    return new MySignerWithAddress(this.address, this._signer.connect(provider));\r\n  }\r\n\r\n  public _signTypedData(\r\n    ...params: Parameters<ethers.providers.JsonRpcSigner[\"_signTypedData\"]>\r\n  ): Promise<string> {\r\n    return this._signer._signTypedData(...params);\r\n  }\r\n\r\n  public toJSON() {\r\n    return `<MySignerWithAddress ${this.address}>`;\r\n  }\r\n}\r\n\r\nexport async function getSigners(\r\n  ): Promise<MySignerWithAddress[]> {\r\n    const accounts = await hre.ethers.provider.listAccounts();\r\n    return await Promise.all(\r\n      accounts.map((account) => getSigner(account))\r\n    );\r\n  }\r\n  \r\nexport async function getSigner(\r\n    address: string\r\n  ): Promise<MySignerWithAddress> {\r\n    const signer = hre.ethers.provider.getSigner(address);  \r\n    return await MySignerWithAddress.create(signer);\r\n  }\r\n\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/comments/1416484119/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/comments/1439664647",
    "html_url": "https://github.com/NomicFoundation/hardhat/issues/3635#issuecomment-1439664647",
    "issue_url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/3635",
    "id": 1439664647,
    "node_id": "IC_kwDOB7jojM5Vz4oH",
    "user": {
      "login": "fvictorio",
      "id": 417134,
      "node_id": "MDQ6VXNlcjQxNzEzNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417134?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fvictorio",
      "html_url": "https://github.com/fvictorio",
      "followers_url": "https://api.github.com/users/fvictorio/followers",
      "following_url": "https://api.github.com/users/fvictorio/following{/other_user}",
      "gists_url": "https://api.github.com/users/fvictorio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fvictorio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fvictorio/subscriptions",
      "organizations_url": "https://api.github.com/users/fvictorio/orgs",
      "repos_url": "https://api.github.com/users/fvictorio/repos",
      "events_url": "https://api.github.com/users/fvictorio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fvictorio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-02-22T09:10:00Z",
    "updated_at": "2023-02-22T09:10:00Z",
    "author_association": "MEMBER",
    "body": "I think this is a reasonably feature request, but I'm not sure what would be the best way to support this use case. I'll discuss this with @alcuadrado and comment here what we decide.",
    "reactions": {
      "url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/comments/1439664647/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
