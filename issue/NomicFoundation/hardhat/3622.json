{
  "url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/3622",
  "repository_url": "https://api.github.com/repos/NomicFoundation/hardhat",
  "labels_url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/3622/labels{/name}",
  "comments_url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/3622/comments",
  "events_url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/3622/events",
  "html_url": "https://github.com/NomicFoundation/hardhat/issues/3622",
  "id": 1562489655,
  "node_id": "I_kwDOB7jojM5dIbM3",
  "number": 3622,
  "title": "Bool returned in solidity is resulted as some object in NodeJs",
  "user": {
    "login": "m-waqas88",
    "id": 62002637,
    "node_id": "MDQ6VXNlcjYyMDAyNjM3",
    "avatar_url": "https://avatars.githubusercontent.com/u/62002637?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/m-waqas88",
    "html_url": "https://github.com/m-waqas88",
    "followers_url": "https://api.github.com/users/m-waqas88/followers",
    "following_url": "https://api.github.com/users/m-waqas88/following{/other_user}",
    "gists_url": "https://api.github.com/users/m-waqas88/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/m-waqas88/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/m-waqas88/subscriptions",
    "organizations_url": "https://api.github.com/users/m-waqas88/orgs",
    "repos_url": "https://api.github.com/users/m-waqas88/repos",
    "events_url": "https://api.github.com/users/m-waqas88/events{/privacy}",
    "received_events_url": "https://api.github.com/users/m-waqas88/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 4937119027,
      "node_id": "LA_kwDOB7jojM8AAAABJkZ1Mw",
      "url": "https://api.github.com/repos/NomicFoundation/hardhat/labels/status:triaging",
      "name": "status:triaging",
      "color": "0E8A16",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": true,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 3,
  "created_at": "2023-01-30T13:51:40Z",
  "updated_at": "2023-05-03T00:12:38Z",
  "closed_at": "2023-01-31T23:44:26Z",
  "author_association": "NONE",
  "active_lock_reason": "resolved",
  "body": "### What I am doing?\r\nI am writing a simple basic smart contract for certificate verification. \r\n\r\n### Facts\r\nThe `verifyCertificate` function returns bool (true or false).\r\n\r\n`\r\nfunction verifyCertificate(bytes32 _certificateHash) public returns(bool){\r\n        bool verified = certificates[_certificateHash];    \r\n        if(verified){\r\n            emit CertificateVerified(_certificateHash);\r\n        }\r\n        return verified;\r\n}\r\n`\r\n\r\nI am using `ethers` from `hardhat` and JsonRpcProvider.\r\n`const { ethers } = require(\"hardhat\");\r\nconst provider = new ethers.providers.JsonRpcProvider(\"http://localhost:8545\");`\r\n\r\nI am invoking the function `verifyCertificate`\r\n`wallet = await contract.connect(issuer);\r\n const success = await wallet.verifyCertificate(CERTIFICATE_HASH);`\r\n\r\n### Issue\r\nThis is supposed to return a boolean value as it is returned in the smart contract using Solidity.\r\n\r\nBut when I log the returned value in the console\r\n`console.log(success);`\r\n\r\nI receive below object (that looks like transaction object but does not have status property)\r\n`{\r\n  hash: '0x36d8b777081a954bda09e7deb9ed6fc101afe180b7a5626c0f0b5b5e492f6cb6',\r\n  type: 2,\r\n  accessList: [],\r\n  blockHash: '0x8c3a34e313d5791f26fe63e2637ec6fc482f917f0774c8228597d92e205920a2',\r\n  blockNumber: 3,\r\n  transactionIndex: 0,\r\n  confirmations: 1,\r\n  from: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\r\n  gasPrice: BigNumber { value: \"1672290038\" },\r\n  maxPriorityFeePerGas: BigNumber { value: \"1000000000\" },\r\n  maxFeePerGas: BigNumber { value: \"2344580076\" },\r\n  gasLimit: BigNumber { value: \"29023448\" },\r\n  to: '0x5FbDB2315678afecb367f032d93F642f64180aa3',\r\n  value: BigNumber { value: \"0\" },\r\n  nonce: 2,\r\n  data: '0x850c1768e1f5fdfc4ea680634168535290f8a5ec6b9bcdddfd975ce1bb3fbbf7e82da5c7',\r\n  r: '0xa332ed542f6271a6b9628cd1c3aebe2aa0d88751161bbec07e541fba91736782',\r\n  s: '0x1be6b67869003e50b4c22e7defb023b096da2a2f2f1c51733621766aaaca8343',\r\n  v: 0,\r\n  creates: null,\r\n  chainId: 31337,\r\n  wait: [Function (anonymous)]\r\n}`\r\n\r\n### Possible Solution\r\nWhen I specify the `verifyCertificate` function as `view` then I get the boolean value in NodeJs environment as required and expected. But I need to emit the event when the certificate is verified, that is why I cannot specify this function as `view`\r\n \r\n\r\n### Expected\r\nI want the resulted boolean value not this object.\r\n\r\n#### Additional Information:\r\nhardhat.config.js:\r\n`require(\"@nomicfoundation/hardhat-toolbox\");\r\n\r\n/** @type import('hardhat/config').HardhatUserConfig */\r\nmodule.exports = {\r\n  solidity: \"0.8.17\",\r\n};`\r\n\r\npackage.json\r\n`{\r\n  \"name\": \"CertificateManagementPlatform\",\r\n  \"version\": \"1.0.0\",\r\n  \"main\": \"index.js\",\r\n  \"license\": \"MIT\",\r\n  \"dependencies\": {\r\n    \"hardhat\": \"^2.12.6\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"@ethersproject/abi\": \"^5.4.7\",\r\n    \"@ethersproject/providers\": \"^5.4.7\",\r\n    \"@nomicfoundation/hardhat-chai-matchers\": \"^1.0.0\",\r\n    \"@nomicfoundation/hardhat-network-helpers\": \"^1.0.0\",\r\n    \"@nomicfoundation/hardhat-toolbox\": \"^2.0.0\",\r\n    \"@nomiclabs/hardhat-ethers\": \"^2.0.0\",\r\n    \"@nomiclabs/hardhat-etherscan\": \"^3.0.0\",\r\n    \"@typechain/ethers-v5\": \"^10.1.0\",\r\n    \"@typechain/hardhat\": \"^6.1.2\",\r\n    \"chai\": \"^4.2.0\",\r\n    \"ethers\": \"^5.4.7\",\r\n    \"hardhat-gas-reporter\": \"^1.0.8\",\r\n    \"solidity-coverage\": \"^0.8.0\",\r\n    \"typechain\": \"^8.1.0\"\r\n  }\r\n}`\r\n\r\nCertificate.sol\r\n`// SPDX-License-Identifier: SEE LICENSE IN LICENSE\r\npragma solidity ^0.8.0;\r\n\r\n\r\ncontract Certificate{\r\n\r\n    address public issuer;\r\n    mapping(bytes32 => bool) public certificates;\r\n    \r\n    event CertificateIssued(bytes32 indexed CertificateHash);\r\n    event CertificateVerified(bytes32 indexed CertificateHash);\r\n\r\n    constructor(address _issuer) {\r\n        issuer = _issuer;\r\n    }\r\n\r\n    function issueCertificate(bytes32 _certificateHash) public returns(bool) {\r\n        require(msg.sender == issuer, \"Only issuer can issue the certificate\");\r\n        certificates[_certificateHash] = true;\r\n        emit CertificateIssued(_certificateHash);\r\n        return true;\r\n    }\r\n\r\n    function verifyCertificate(bytes32 _certificateHash) public returns(bool){\r\n        bool verified = certificates[_certificateHash];\r\n        \r\n        if(verified){\r\n            emit CertificateVerified(_certificateHash);\r\n        }\r\n\r\n        \r\n        return verified;\r\n    }\r\n\r\n\r\n}`\r\n\r\ncontract ABI\r\n`\"abi\": [\r\n    {\r\n      \"inputs\": [\r\n        {\r\n          \"internalType\": \"address\",\r\n          \"name\": \"_issuer\",\r\n          \"type\": \"address\"\r\n        }\r\n      ],\r\n      \"stateMutability\": \"nonpayable\",\r\n      \"type\": \"constructor\"\r\n    },\r\n    {\r\n      \"anonymous\": false,\r\n      \"inputs\": [\r\n        {\r\n          \"indexed\": true,\r\n          \"internalType\": \"bytes32\",\r\n          \"name\": \"CertificateHash\",\r\n          \"type\": \"bytes32\"\r\n        }\r\n      ],\r\n      \"name\": \"CertificateIssued\",\r\n      \"type\": \"event\"\r\n    },\r\n    {\r\n      \"anonymous\": false,\r\n      \"inputs\": [\r\n        {\r\n          \"indexed\": true,\r\n          \"internalType\": \"bytes32\",\r\n          \"name\": \"CertificateHash\",\r\n          \"type\": \"bytes32\"\r\n        }\r\n      ],\r\n      \"name\": \"CertificateVerified\",\r\n      \"type\": \"event\"\r\n    },\r\n    {\r\n      \"inputs\": [\r\n        {\r\n          \"internalType\": \"bytes32\",\r\n          \"name\": \"\",\r\n          \"type\": \"bytes32\"\r\n        }\r\n      ],\r\n      \"name\": \"certificates\",\r\n      \"outputs\": [\r\n        {\r\n          \"internalType\": \"bool\",\r\n          \"name\": \"\",\r\n          \"type\": \"bool\"\r\n        }\r\n      ],\r\n      \"stateMutability\": \"view\",\r\n      \"type\": \"function\"\r\n    },\r\n    {\r\n      \"inputs\": [\r\n        {\r\n          \"internalType\": \"bytes32\",\r\n          \"name\": \"_certificateHash\",\r\n          \"type\": \"bytes32\"\r\n        }\r\n      ],\r\n      \"name\": \"issueCertificate\",\r\n      \"outputs\": [\r\n        {\r\n          \"internalType\": \"bool\",\r\n          \"name\": \"\",\r\n          \"type\": \"bool\"\r\n        }\r\n      ],\r\n      \"stateMutability\": \"nonpayable\",\r\n      \"type\": \"function\"\r\n    },\r\n    {\r\n      \"inputs\": [],\r\n      \"name\": \"issuer\",\r\n      \"outputs\": [\r\n        {\r\n          \"internalType\": \"address\",\r\n          \"name\": \"\",\r\n          \"type\": \"address\"\r\n        }\r\n      ],\r\n      \"stateMutability\": \"view\",\r\n      \"type\": \"function\"\r\n    },\r\n    {\r\n      \"inputs\": [\r\n        {\r\n          \"internalType\": \"bytes32\",\r\n          \"name\": \"_certificateHash\",\r\n          \"type\": \"bytes32\"\r\n        }\r\n      ],\r\n      \"name\": \"verifyCertificate\",\r\n      \"outputs\": [\r\n        {\r\n          \"internalType\": \"bool\",\r\n          \"name\": \"\",\r\n          \"type\": \"bool\"\r\n        }\r\n      ],\r\n      \"stateMutability\": \"nonpayable\",\r\n      \"type\": \"function\"\r\n    }\r\n  ],`\r\n",
  "closed_by": {
    "login": "fvictorio",
    "id": 417134,
    "node_id": "MDQ6VXNlcjQxNzEzNA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/417134?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/fvictorio",
    "html_url": "https://github.com/fvictorio",
    "followers_url": "https://api.github.com/users/fvictorio/followers",
    "following_url": "https://api.github.com/users/fvictorio/following{/other_user}",
    "gists_url": "https://api.github.com/users/fvictorio/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/fvictorio/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/fvictorio/subscriptions",
    "organizations_url": "https://api.github.com/users/fvictorio/orgs",
    "repos_url": "https://api.github.com/users/fvictorio/repos",
    "events_url": "https://api.github.com/users/fvictorio/events{/privacy}",
    "received_events_url": "https://api.github.com/users/fvictorio/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/3622/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/3622/timeline",
  "performed_via_github_app": null,
  "state_reason": "not_planned"
}
[
  {
    "url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/comments/1410948857",
    "html_url": "https://github.com/NomicFoundation/hardhat/issues/3622#issuecomment-1410948857",
    "issue_url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/3622",
    "id": 1410948857,
    "node_id": "IC_kwDOB7jojM5UGV75",
    "user": {
      "login": "m-waqas88",
      "id": 62002637,
      "node_id": "MDQ6VXNlcjYyMDAyNjM3",
      "avatar_url": "https://avatars.githubusercontent.com/u/62002637?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/m-waqas88",
      "html_url": "https://github.com/m-waqas88",
      "followers_url": "https://api.github.com/users/m-waqas88/followers",
      "following_url": "https://api.github.com/users/m-waqas88/following{/other_user}",
      "gists_url": "https://api.github.com/users/m-waqas88/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/m-waqas88/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/m-waqas88/subscriptions",
      "organizations_url": "https://api.github.com/users/m-waqas88/orgs",
      "repos_url": "https://api.github.com/users/m-waqas88/repos",
      "events_url": "https://api.github.com/users/m-waqas88/events{/privacy}",
      "received_events_url": "https://api.github.com/users/m-waqas88/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-31T19:29:35Z",
    "updated_at": "2023-01-31T19:29:35Z",
    "author_association": "NONE",
    "body": "### Suggested Solution\r\nWhen there is an explicit return value in a function then that value must be returned not the transaction object. If there is no explicit return value then by default Transaction Object can be returned. There must however be an optional argument if the caller of the function wants the Transaction Object in return or the explicit returned value.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/comments/1410948857/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/comments/1411225178",
    "html_url": "https://github.com/NomicFoundation/hardhat/issues/3622#issuecomment-1411225178",
    "issue_url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/3622",
    "id": 1411225178,
    "node_id": "IC_kwDOB7jojM5UHZZa",
    "user": {
      "login": "fvictorio",
      "id": 417134,
      "node_id": "MDQ6VXNlcjQxNzEzNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417134?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fvictorio",
      "html_url": "https://github.com/fvictorio",
      "followers_url": "https://api.github.com/users/fvictorio/followers",
      "following_url": "https://api.github.com/users/fvictorio/following{/other_user}",
      "gists_url": "https://api.github.com/users/fvictorio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fvictorio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fvictorio/subscriptions",
      "organizations_url": "https://api.github.com/users/fvictorio/orgs",
      "repos_url": "https://api.github.com/users/fvictorio/repos",
      "events_url": "https://api.github.com/users/fvictorio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fvictorio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-31T23:44:26Z",
    "updated_at": "2023-01-31T23:44:26Z",
    "author_association": "MEMBER",
    "body": "Hi @m-waqas88. Getting the value of a function like that is only possible if the function is `view` or `pure`, which is not the case of the function you shared.\r\n\r\nWhen the function is not `view` or `pure`, a transaction is sent and mined, and the return value cannot be (easily) recovered. This is just how the JSON-RPC layer of ethereum works.\r\n\r\nYou have some options here:\r\n- Add `view` or `pure` to that function if possible.\r\n- Instead of returning the value, emit it in an event, capture the event and extract the value.\r\n- Keep the function as is if you can't change it. In that case, to recover the value you have to use the `debug_traceTransaction` RPC method, extract the `returnValue` and parse it. This is very involved, but doable.\r\n\r\nThe first option is by far the best one if you can do it.",
    "reactions": {
      "url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/comments/1411225178/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/comments/1411855083",
    "html_url": "https://github.com/NomicFoundation/hardhat/issues/3622#issuecomment-1411855083",
    "issue_url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/3622",
    "id": 1411855083,
    "node_id": "IC_kwDOB7jojM5UJzLr",
    "user": {
      "login": "m-waqas88",
      "id": 62002637,
      "node_id": "MDQ6VXNlcjYyMDAyNjM3",
      "avatar_url": "https://avatars.githubusercontent.com/u/62002637?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/m-waqas88",
      "html_url": "https://github.com/m-waqas88",
      "followers_url": "https://api.github.com/users/m-waqas88/followers",
      "following_url": "https://api.github.com/users/m-waqas88/following{/other_user}",
      "gists_url": "https://api.github.com/users/m-waqas88/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/m-waqas88/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/m-waqas88/subscriptions",
      "organizations_url": "https://api.github.com/users/m-waqas88/orgs",
      "repos_url": "https://api.github.com/users/m-waqas88/repos",
      "events_url": "https://api.github.com/users/m-waqas88/events{/privacy}",
      "received_events_url": "https://api.github.com/users/m-waqas88/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-02-01T10:49:51Z",
    "updated_at": "2023-02-01T10:49:51Z",
    "author_association": "NONE",
    "body": "@fvictorio thanks for your response. I will go with the second option. This best suits my current need.",
    "reactions": {
      "url": "https://api.github.com/repos/NomicFoundation/hardhat/issues/comments/1411855083/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
