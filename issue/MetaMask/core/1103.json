{
  "url": "https://api.github.com/repos/MetaMask/core/issues/1103",
  "repository_url": "https://api.github.com/repos/MetaMask/core",
  "labels_url": "https://api.github.com/repos/MetaMask/core/issues/1103/labels{/name}",
  "comments_url": "https://api.github.com/repos/MetaMask/core/issues/1103/comments",
  "events_url": "https://api.github.com/repos/MetaMask/core/issues/1103/events",
  "html_url": "https://github.com/MetaMask/core/issues/1103",
  "id": 1586185894,
  "node_id": "I_kwDOCBB0Cc5ei0am",
  "number": 1103,
  "title": "Plan tasks to consolidate keyring interactions between extension and mobile.",
  "user": {
    "login": "Gudahtt",
    "id": 2459287,
    "node_id": "MDQ6VXNlcjI0NTkyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2459287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Gudahtt",
    "html_url": "https://github.com/Gudahtt",
    "followers_url": "https://api.github.com/users/Gudahtt/followers",
    "following_url": "https://api.github.com/users/Gudahtt/following{/other_user}",
    "gists_url": "https://api.github.com/users/Gudahtt/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Gudahtt/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Gudahtt/subscriptions",
    "organizations_url": "https://api.github.com/users/Gudahtt/orgs",
    "repos_url": "https://api.github.com/users/Gudahtt/repos",
    "events_url": "https://api.github.com/users/Gudahtt/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Gudahtt/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 948148996,
      "node_id": "MDU6TGFiZWw5NDgxNDg5OTY=",
      "url": "https://api.github.com/repos/MetaMask/core/labels/enhancement",
      "name": "enhancement",
      "color": "a2eeef",
      "default": true,
      "description": "New feature or request"
    },
    {
      "id": 4031879895,
      "node_id": "LA_kwDOCBB0Cc7wUZrX",
      "url": "https://api.github.com/repos/MetaMask/core/labels/team-accounts",
      "name": "team-accounts",
      "color": "D294F2",
      "default": false,
      "description": ""
    },
    {
      "id": 5330766523,
      "node_id": "LA_kwDOCBB0Cc8AAAABPb0Kuw",
      "url": "https://api.github.com/repos/MetaMask/core/labels/team-shared-libraries",
      "name": "team-shared-libraries",
      "color": "c5def5",
      "default": false,
      "description": ""
    },
    {
      "id": 5436476377,
      "node_id": "LA_kwDOCBB0Cc8AAAABRAoL2Q",
      "url": "https://api.github.com/repos/MetaMask/core/labels/snap-keyring-epic",
      "name": "snap-keyring-epic",
      "color": "20A4FC",
      "default": false,
      "description": null
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": {
    "login": "mikesposito",
    "id": 34438276,
    "node_id": "MDQ6VXNlcjM0NDM4Mjc2",
    "avatar_url": "https://avatars.githubusercontent.com/u/34438276?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mikesposito",
    "html_url": "https://github.com/mikesposito",
    "followers_url": "https://api.github.com/users/mikesposito/followers",
    "following_url": "https://api.github.com/users/mikesposito/following{/other_user}",
    "gists_url": "https://api.github.com/users/mikesposito/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mikesposito/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mikesposito/subscriptions",
    "organizations_url": "https://api.github.com/users/mikesposito/orgs",
    "repos_url": "https://api.github.com/users/mikesposito/repos",
    "events_url": "https://api.github.com/users/mikesposito/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mikesposito/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "mikesposito",
      "id": 34438276,
      "node_id": "MDQ6VXNlcjM0NDM4Mjc2",
      "avatar_url": "https://avatars.githubusercontent.com/u/34438276?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mikesposito",
      "html_url": "https://github.com/mikesposito",
      "followers_url": "https://api.github.com/users/mikesposito/followers",
      "following_url": "https://api.github.com/users/mikesposito/following{/other_user}",
      "gists_url": "https://api.github.com/users/mikesposito/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mikesposito/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mikesposito/subscriptions",
      "organizations_url": "https://api.github.com/users/mikesposito/orgs",
      "repos_url": "https://api.github.com/users/mikesposito/repos",
      "events_url": "https://api.github.com/users/mikesposito/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mikesposito/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 23,
  "created_at": "2023-02-15T16:39:47Z",
  "updated_at": "2023-04-27T19:17:24Z",
  "closed_at": "2023-04-26T16:45:45Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "We should plan out how to consolidate keyring interactions between extension and mobile.\r\n\r\nThe issue #1102 exists for researching what the current differences are. The goal of this issue would be planning out a way to merge them together.\r\n\r\n### Definition of Done\r\n- Whenever applies, any change unit tested, reviewed(approved) and documented(JSDOC at least)\r\n- [ ] We have changelog entries for any related changes\r\n- [ ] Any changed APIs have comprehensive inline documentation\r\n- [ ] Any changed public APIs are well covered by unit tests\r\n- Other items\r\n- [ ] If a planning/research ticket, then the plan has been reviewed and approved by at least 1 team members",
  "closed_by": {
    "login": "Gudahtt",
    "id": 2459287,
    "node_id": "MDQ6VXNlcjI0NTkyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2459287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Gudahtt",
    "html_url": "https://github.com/Gudahtt",
    "followers_url": "https://api.github.com/users/Gudahtt/followers",
    "following_url": "https://api.github.com/users/Gudahtt/following{/other_user}",
    "gists_url": "https://api.github.com/users/Gudahtt/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Gudahtt/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Gudahtt/subscriptions",
    "organizations_url": "https://api.github.com/users/Gudahtt/orgs",
    "repos_url": "https://api.github.com/users/Gudahtt/repos",
    "events_url": "https://api.github.com/users/Gudahtt/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Gudahtt/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/MetaMask/core/issues/1103/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/MetaMask/core/issues/1103/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/MetaMask/core/issues/comments/1470238062",
    "html_url": "https://github.com/MetaMask/core/issues/1103#issuecomment-1470238062",
    "issue_url": "https://api.github.com/repos/MetaMask/core/issues/1103",
    "id": 1470238062,
    "node_id": "IC_kwDOCBB0Cc5Xog1u",
    "user": {
      "login": "xinnanyemm",
      "id": 116830388,
      "node_id": "U_kgDOBvawtA",
      "avatar_url": "https://avatars.githubusercontent.com/u/116830388?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/xinnanyemm",
      "html_url": "https://github.com/xinnanyemm",
      "followers_url": "https://api.github.com/users/xinnanyemm/followers",
      "following_url": "https://api.github.com/users/xinnanyemm/following{/other_user}",
      "gists_url": "https://api.github.com/users/xinnanyemm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/xinnanyemm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/xinnanyemm/subscriptions",
      "organizations_url": "https://api.github.com/users/xinnanyemm/orgs",
      "repos_url": "https://api.github.com/users/xinnanyemm/repos",
      "events_url": "https://api.github.com/users/xinnanyemm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/xinnanyemm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-15T15:24:39Z",
    "updated_at": "2023-03-15T15:24:39Z",
    "author_association": "NONE",
    "body": "Hey team! Please [add your planning poker estimate](https://app.zenhub.com/workspaces/Shared-Libraries-621e46b4d7103800171d1b02/issues/MetaMask/core/1103?planning-poker) with Zenhub @cryptodev-2s @Gudahtt @mikesposito",
    "reactions": {
      "url": "https://api.github.com/repos/MetaMask/core/issues/comments/1470238062/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/MetaMask/core/issues/comments/1490211818",
    "html_url": "https://github.com/MetaMask/core/issues/1103#issuecomment-1490211818",
    "issue_url": "https://api.github.com/repos/MetaMask/core/issues/1103",
    "id": 1490211818,
    "node_id": "IC_kwDOCBB0Cc5Y0tPq",
    "user": {
      "login": "mikesposito",
      "id": 34438276,
      "node_id": "MDQ6VXNlcjM0NDM4Mjc2",
      "avatar_url": "https://avatars.githubusercontent.com/u/34438276?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mikesposito",
      "html_url": "https://github.com/mikesposito",
      "followers_url": "https://api.github.com/users/mikesposito/followers",
      "following_url": "https://api.github.com/users/mikesposito/following{/other_user}",
      "gists_url": "https://api.github.com/users/mikesposito/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mikesposito/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mikesposito/subscriptions",
      "organizations_url": "https://api.github.com/users/mikesposito/orgs",
      "repos_url": "https://api.github.com/users/mikesposito/repos",
      "events_url": "https://api.github.com/users/mikesposito/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mikesposito/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-30T12:23:42Z",
    "updated_at": "2023-03-30T14:37:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "## 1. Prerequisites\r\n\r\nThis is a list of the changes we should make prior to any other method change:\r\n\r\n- #1151\r\n- #1152 ",
    "reactions": {
      "url": "https://api.github.com/repos/MetaMask/core/issues/comments/1490211818/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/MetaMask/core/issues/comments/1490260942",
    "html_url": "https://github.com/MetaMask/core/issues/1103#issuecomment-1490260942",
    "issue_url": "https://api.github.com/repos/MetaMask/core/issues/1103",
    "id": 1490260942,
    "node_id": "IC_kwDOCBB0Cc5Y05PO",
    "user": {
      "login": "mikesposito",
      "id": 34438276,
      "node_id": "MDQ6VXNlcjM0NDM4Mjc2",
      "avatar_url": "https://avatars.githubusercontent.com/u/34438276?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mikesposito",
      "html_url": "https://github.com/mikesposito",
      "followers_url": "https://api.github.com/users/mikesposito/followers",
      "following_url": "https://api.github.com/users/mikesposito/following{/other_user}",
      "gists_url": "https://api.github.com/users/mikesposito/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mikesposito/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mikesposito/subscriptions",
      "organizations_url": "https://api.github.com/users/mikesposito/orgs",
      "repos_url": "https://api.github.com/users/mikesposito/repos",
      "events_url": "https://api.github.com/users/mikesposito/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mikesposito/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-30T12:58:35Z",
    "updated_at": "2023-04-20T12:31:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "## 2: addNewAccount\r\nThis method is present on both core KeyringController and extension, we should align them.\r\n\r\n###  2.1: Make `addNewAccount`  method idempotent\r\n#### Context\r\nThe extension `addNewAccount` takes an `accountCount` parameter: a new account is added only if its value is equal to the number of identities in the preferences controller store.  In the core KeyringController we don’t have this parameter and the account is directly added to the primary keyring. This has been done to make this method idempotent for MV3 compatibility reasons (See [Pull Request #15566](https://github.com/MetaMask/metamask-extension/pull/15566)).\r\n\r\n#### Proposal\r\nIn order to make the KeyringController compatible with MV3 we should bring this change.\r\n\r\n### 2.2: Change `addNewAccount` method returned objects\r\n#### Context\r\nCurrently, the core KeyringController's `addNewAccount` method returns `KeyringMemState` directly, but what we expect on the clients is different in both cases:\r\n- On mobile, the core KeyringController [is patched](https://github.com/MetaMask/metamask-mobile/blob/main/patches/%40metamask%2Bkeyring-controller%2B1.0.1.patch) to return the following object:\r\n```typescript\r\n{\r\n    keyringState: KeyringMemState,\r\n    addedAccountAddress: string\r\n}\r\n```\r\n\r\n- On the extension, the `addNewAccount` method returns a union of the EthKeyringController's KeyringMemState and the identities from the preferencesController.\r\n\r\n#### Proposal\r\nAt the moment, none of the clients is compatible with what is returned by the core KeyringController. Based on the [Redux actions file](https://github.com/MetaMask/metamask-extension/blob/develop/ui/store/actions.ts#L437), the extension's UI uses identities returned by the `addNewAccount` background method to then locally compute the new account, roughly seeing which one was not present before.\r\n\r\nIn the core KeyringController's `addNewAccount` we could return an object similar to the one expected by the mobile client, adding an `addedAccountAddress` value with the new account added. This would be compliant with the mobile client and beneficial for the extension, as it will have that value already computed. \r\n\r\nMoreover, with this solution, we also remove the extension's dependency from the preferencesController in this method, which we should have treated somehow otherwise.\r\n\r\n### 2.3: Support optional parameter to not change selected account\r\n#### Context\r\nIn the mobile client,  the core KeyringController is patched to not switch account after creating a new one.\r\n#### Proposal\r\nWe can add an optional parameter to the function, or an `opt` object, to let the clients specify if the new account should be also selected.\r\n\r\n**EDIT**: Remove account selection from core KeyringController implementation, leaving this on the extension",
    "reactions": {
      "url": "https://api.github.com/repos/MetaMask/core/issues/comments/1490260942/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/MetaMask/core/issues/comments/1490344485",
    "html_url": "https://github.com/MetaMask/core/issues/1103#issuecomment-1490344485",
    "issue_url": "https://api.github.com/repos/MetaMask/core/issues/1103",
    "id": 1490344485,
    "node_id": "IC_kwDOCBB0Cc5Y1Nol",
    "user": {
      "login": "mikesposito",
      "id": 34438276,
      "node_id": "MDQ6VXNlcjM0NDM4Mjc2",
      "avatar_url": "https://avatars.githubusercontent.com/u/34438276?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mikesposito",
      "html_url": "https://github.com/mikesposito",
      "followers_url": "https://api.github.com/users/mikesposito/followers",
      "following_url": "https://api.github.com/users/mikesposito/following{/other_user}",
      "gists_url": "https://api.github.com/users/mikesposito/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mikesposito/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mikesposito/subscriptions",
      "organizations_url": "https://api.github.com/users/mikesposito/orgs",
      "repos_url": "https://api.github.com/users/mikesposito/repos",
      "events_url": "https://api.github.com/users/mikesposito/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mikesposito/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-30T13:52:20Z",
    "updated_at": "2023-04-20T12:32:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "## 3: verifySeedPhrase\r\nThis method is present on both core KeyringController and extension, we should align them.\r\n\r\n### 3.1: Seed phrase should be handled as array of integers instead of string\r\n#### Context\r\nIn the extension, the primary keyring mnemonic is handled as buffer. In the core KeyringController it is handled as a string. (See https://github.com/MetaMask/metamask-extension/commit/98f187c301176152a7f697e62e2ba6d78b018b68)\r\n\r\n#### Proposal\r\nWe should handle it as an array of integers in the core KeyringController too.\r\n**EDIT**: Seed phrase should be handled as `Uint8Array`. In the extension, we should edit the background <> UI communication layer to convert the seed phrase bytes to an array of integers.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/MetaMask/core/issues/comments/1490344485/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/MetaMask/core/issues/comments/1497194583",
    "html_url": "https://github.com/MetaMask/core/issues/1103#issuecomment-1497194583",
    "issue_url": "https://api.github.com/repos/MetaMask/core/issues/1103",
    "id": 1497194583,
    "node_id": "IC_kwDOCBB0Cc5ZPWBX",
    "user": {
      "login": "mikesposito",
      "id": 34438276,
      "node_id": "MDQ6VXNlcjM0NDM4Mjc2",
      "avatar_url": "https://avatars.githubusercontent.com/u/34438276?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mikesposito",
      "html_url": "https://github.com/mikesposito",
      "followers_url": "https://api.github.com/users/mikesposito/followers",
      "following_url": "https://api.github.com/users/mikesposito/following{/other_user}",
      "gists_url": "https://api.github.com/users/mikesposito/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mikesposito/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mikesposito/subscriptions",
      "organizations_url": "https://api.github.com/users/mikesposito/orgs",
      "repos_url": "https://api.github.com/users/mikesposito/repos",
      "events_url": "https://api.github.com/users/mikesposito/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mikesposito/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-04-05T09:32:42Z",
    "updated_at": "2023-04-24T12:12:43Z",
    "author_association": "CONTRIBUTOR",
    "body": "## 4: removeAccount\r\nThis method is present on both core KeyringController and extension, we should align them.\r\n\r\n### 4.1: Destroy Ledger keyring after last account removal\r\n#### Context\r\nAfter calling `EthKeyringController.removeAccount`, there’s a check to see if it is the last account of a keyring: if so, the `keyring.destroy()` method is called directly from the extension. (See: [Pull Request #14993](https://github.com/MetaMask/metamask-extension/pull/14993)) \r\n#### Proposal\r\nWe can make a change to the `eth-ledger-bridge-keyring` to call `.destroy()` after removing the last account, so that the clients are not responsible for that.\r\n\r\n### 4.2: Remove account operation's side effects responsibility should stay with the clients\r\n#### Context\r\nOn the extension, `removeAllAccountPermissions` and `AccountTracker.removeAccount` are called when removing an account from the keyring, eg. remove all permissions associated with the removed account.\r\n#### Proposal\r\nWe should leave to the extension the responsibility to call these two functions before or after calling the core KeyringController's removeAccount.\r\n\r\n**Edit**: We can add an `onAccountRemoved` method on core KeyringController that allows to subscribe to the `removedAccount` event from `EthKeyringController`, and then pass an event handler to each extension's controller that needs to execute side effects. ",
    "reactions": {
      "url": "https://api.github.com/repos/MetaMask/core/issues/comments/1497194583/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/MetaMask/core/issues/comments/1497314139",
    "html_url": "https://github.com/MetaMask/core/issues/1103#issuecomment-1497314139",
    "issue_url": "https://api.github.com/repos/MetaMask/core/issues/1103",
    "id": 1497314139,
    "node_id": "IC_kwDOCBB0Cc5ZPzNb",
    "user": {
      "login": "mikesposito",
      "id": 34438276,
      "node_id": "MDQ6VXNlcjM0NDM4Mjc2",
      "avatar_url": "https://avatars.githubusercontent.com/u/34438276?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mikesposito",
      "html_url": "https://github.com/mikesposito",
      "followers_url": "https://api.github.com/users/mikesposito/followers",
      "following_url": "https://api.github.com/users/mikesposito/following{/other_user}",
      "gists_url": "https://api.github.com/users/mikesposito/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mikesposito/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mikesposito/subscriptions",
      "organizations_url": "https://api.github.com/users/mikesposito/orgs",
      "repos_url": "https://api.github.com/users/mikesposito/repos",
      "events_url": "https://api.github.com/users/mikesposito/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mikesposito/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-04-05T11:12:40Z",
    "updated_at": "2023-04-20T12:34:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "## 5: importAccountWithStrategy\r\n### 5.1: Use `AccountImportStrategy` enum also in the extension\r\n#### Context\r\nAPI for this method are different, as strategy argument keys used to identify strategies are different: es. “Private Key” in the extension, “privateKey” in the core KeyringController.\r\n#### Proposal\r\nWe should use the core KeyringController’s  `AccountImportStrategy` enum also in the extension (`privateKey` and `json`):\r\n\r\n```typescript\r\nenum AccountImportStrategy {\r\n  privateKey = 'privateKey',\r\n  json = 'json',\r\n}\r\n```\r\n\r\n### 5.2: Add private key digits check on core KeyringController\r\n#### Context\r\nFor the strategy private key, in addition to `isValidPrivate`, the extension  also checks the number of digits in the string (See [Pull Request #17763](https://github.com/MetaMask/metamask-extension/pull/17763))\r\n#### Proposal\r\nWe can add this check to the core KeyringController.\r\n\r\n### 5.3: Change function return\r\n#### Context\r\nIn the mobile client, the core KeyringController is patched (see also method `addNewAccount`) to return this object:\r\n```typescript\r\n{\r\n    keyringState: KeyringMemState,\r\n    importedAccountAddress: string\r\n}\r\n``` \r\n\r\n#### Proposal\r\nWe can use a solution similar to the one provided for `addAccount`. We can choose to use the same `addedAccountAddress` used for `addAccount`, or use a specific one, like `importedAccountAddress`.\r\n\r\n### 5.4: Support optional parameter to not change selected account\r\n#### Context\r\nIn the mobile client,  the core KeyringController is patched to not switch accounts after creating a new one.\r\n#### Proposal\r\nWe can add an optional parameter to the function, or an `opt` object, to let the clients specify if the new account should be also selected.\r\n**EDIT**: Remove account selection from core KeyringController implementation, leaving this on the extension",
    "reactions": {
      "url": "https://api.github.com/repos/MetaMask/core/issues/comments/1497314139/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/MetaMask/core/issues/comments/1497403763",
    "html_url": "https://github.com/MetaMask/core/issues/1103#issuecomment-1497403763",
    "issue_url": "https://api.github.com/repos/MetaMask/core/issues/1103",
    "id": 1497403763,
    "node_id": "IC_kwDOCBB0Cc5ZQJFz",
    "user": {
      "login": "mikesposito",
      "id": 34438276,
      "node_id": "MDQ6VXNlcjM0NDM4Mjc2",
      "avatar_url": "https://avatars.githubusercontent.com/u/34438276?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mikesposito",
      "html_url": "https://github.com/mikesposito",
      "followers_url": "https://api.github.com/users/mikesposito/followers",
      "following_url": "https://api.github.com/users/mikesposito/following{/other_user}",
      "gists_url": "https://api.github.com/users/mikesposito/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mikesposito/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mikesposito/subscriptions",
      "organizations_url": "https://api.github.com/users/mikesposito/orgs",
      "repos_url": "https://api.github.com/users/mikesposito/repos",
      "events_url": "https://api.github.com/users/mikesposito/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mikesposito/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-04-05T12:26:36Z",
    "updated_at": "2023-04-20T12:38:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "## 6: setLocked\r\n### 6.1: Hardware keyrings’ disposals should remain in the extension\r\n#### Context\r\nIn the extension,  `ledgerKeyring.destroy` and `trezorKeyring.dispose` methods are called to lock hardware keyrings, before calling EthKeyringController ’s `setLocked` method.\r\n#### Proposal\r\nWe should leave this responsibility to the extension client for now.\r\n\r\n**EDIT:** core KeyringController should be responsible for call an optional `keyring.destroy()` method when a reference to a keyring is being dropped (lock, removeAccount)\r\n\r\n### 6.2: Session storage clearing should also remain in the extension\r\n#### Context\r\nFor MV3 compatibility, in the extension clearLoginArtifacts() is also called to remove login data from the browser session storage.\r\n#### Proposal\r\nAs for **6.1**, this responsibility should remain with the extension.\r\n\r\n**EDIT:** We can add an event handler for the lock event.",
    "reactions": {
      "url": "https://api.github.com/repos/MetaMask/core/issues/comments/1497403763/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/MetaMask/core/issues/comments/1497447913",
    "html_url": "https://github.com/MetaMask/core/issues/1103#issuecomment-1497447913",
    "issue_url": "https://api.github.com/repos/MetaMask/core/issues/1103",
    "id": 1497447913,
    "node_id": "IC_kwDOCBB0Cc5ZQT3p",
    "user": {
      "login": "mikesposito",
      "id": 34438276,
      "node_id": "MDQ6VXNlcjM0NDM4Mjc2",
      "avatar_url": "https://avatars.githubusercontent.com/u/34438276?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mikesposito",
      "html_url": "https://github.com/mikesposito",
      "followers_url": "https://api.github.com/users/mikesposito/followers",
      "following_url": "https://api.github.com/users/mikesposito/following{/other_user}",
      "gists_url": "https://api.github.com/users/mikesposito/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mikesposito/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mikesposito/subscriptions",
      "organizations_url": "https://api.github.com/users/mikesposito/orgs",
      "repos_url": "https://api.github.com/users/mikesposito/repos",
      "events_url": "https://api.github.com/users/mikesposito/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mikesposito/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-04-05T13:00:57Z",
    "updated_at": "2023-04-20T12:38:05Z",
    "author_association": "CONTRIBUTOR",
    "body": "## 7: createNewVaultAndKeychain\r\n### 7.1: Leave to the extension the responsibility to avoid multiple UI submissions \r\n#### Context\r\nTo resolve a “possible bug” and to avoid potential multiple submissions from the UI, on the extension there’s a check to see if the vault has been already created by checking accounts in the EthKeyringController (See: [Pull Request #2605](https://github.com/MetaMask/metamask-extension/pull/2605))\r\n#### Proposal\r\nAs the vault creation in the core KeyringController is already done behind a mutex, we should leave the multiple UI submission to the clients.\r\n\r\n**EDIT:** the mutex protects against simultaneous vault creations, not sequential attempts. We should migrate this to the core KeyringController `createNewVaultAndKeychain`.",
    "reactions": {
      "url": "https://api.github.com/repos/MetaMask/core/issues/comments/1497447913/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/MetaMask/core/issues/comments/1497589637",
    "html_url": "https://github.com/MetaMask/core/issues/1103#issuecomment-1497589637",
    "issue_url": "https://api.github.com/repos/MetaMask/core/issues/1103",
    "id": 1497589637,
    "node_id": "IC_kwDOCBB0Cc5ZQ2eF",
    "user": {
      "login": "mikesposito",
      "id": 34438276,
      "node_id": "MDQ6VXNlcjM0NDM4Mjc2",
      "avatar_url": "https://avatars.githubusercontent.com/u/34438276?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mikesposito",
      "html_url": "https://github.com/mikesposito",
      "followers_url": "https://api.github.com/users/mikesposito/followers",
      "following_url": "https://api.github.com/users/mikesposito/following{/other_user}",
      "gists_url": "https://api.github.com/users/mikesposito/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mikesposito/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mikesposito/subscriptions",
      "organizations_url": "https://api.github.com/users/mikesposito/orgs",
      "repos_url": "https://api.github.com/users/mikesposito/repos",
      "events_url": "https://api.github.com/users/mikesposito/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mikesposito/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-04-05T14:30:25Z",
    "updated_at": "2023-04-20T12:39:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "## 8. createNewVaultAndRestore\r\n### 8.1: Seed phrase should be passed as array of bytes\r\n#### Context\r\nIn the extension, the seed phrase is passed expected by this method is an array of bytes, on core KeyringController is expected as string\r\n#### Proposal\r\nWe should expect an array of bytes also in the core KeyringController\r\n\r\n**EDIT:** Seed phrase should be handled as `Uint8Array`. In the extension, we should edit the background <> UI communication layer to convert the seed phrase bytes to an array of integers.\r\n\r\n### 8.2: Leave clearing calls to the extension  \r\n#### Context\r\nBesides clearing the addresses in the preferencesController (done also on mobile side), we call the following “clearing” controllers methods:\r\n - snapController.clearState\r\n - notificationController.clear\r\n - accountTracker.clearAccounts\r\n - cachedBalancesController.clearCachedBalances\r\n - txController.txStateManager.clearUnapprovedTxs\r\n\r\nThese are not present on the core KeyringController.\r\nWe should also note that some of these like snapController.clearState are under the FLASK feature flag on the extension.\r\n#### Proposal\r\nWe should leave these responsibilities to the extension client\r\n\r\n### 8.3: Leave account re-creation and balance fetching to the extension\r\n#### Context\r\nIn the extension, after creating a new vault, accounts are restored up until the first found with 0 balance (that is then removed)\r\n#### Proposal\r\nThis seems to be an extension client requirement, so it would make sense to not give this responsibility to the core KeyringController, leaving it in the extension.\r\n\r\n### 8.4: Leave Ledger transport preference update to the extension\r\n#### Context\r\nIn the extension, the transportPreference for the ledger keyring is updated after creating the vault.\r\n#### Proposal\r\nThis should remain in the extension for now, there is ongoing [PR](https://github.com/MetaMask/core/issues/1102) for adding ledger support.",
    "reactions": {
      "url": "https://api.github.com/repos/MetaMask/core/issues/comments/1497589637/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/MetaMask/core/issues/comments/1498822240",
    "html_url": "https://github.com/MetaMask/core/issues/1103#issuecomment-1498822240",
    "issue_url": "https://api.github.com/repos/MetaMask/core/issues/1103",
    "id": 1498822240,
    "node_id": "IC_kwDOCBB0Cc5ZVjZg",
    "user": {
      "login": "mikesposito",
      "id": 34438276,
      "node_id": "MDQ6VXNlcjM0NDM4Mjc2",
      "avatar_url": "https://avatars.githubusercontent.com/u/34438276?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mikesposito",
      "html_url": "https://github.com/mikesposito",
      "followers_url": "https://api.github.com/users/mikesposito/followers",
      "following_url": "https://api.github.com/users/mikesposito/following{/other_user}",
      "gists_url": "https://api.github.com/users/mikesposito/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mikesposito/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mikesposito/subscriptions",
      "organizations_url": "https://api.github.com/users/mikesposito/orgs",
      "repos_url": "https://api.github.com/users/mikesposito/repos",
      "events_url": "https://api.github.com/users/mikesposito/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mikesposito/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-04-06T10:15:21Z",
    "updated_at": "2023-04-13T16:09:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "## 9. submitPassword\r\n### 9.1:  Leave latest block check in the extension\r\n#### Context\r\nIn the extension, after submitting the password to `EthKeyringController.submitPassword`, there is a check for the latest block using `blockTracker`.\r\n#### Proposal\r\nWe should leave this check in the extension after unlocking the wallet.\r\n\r\n### 9.2:  Leave Ledger `transportPreference` update in the extension\r\n#### Context\r\nIn the extension, the  `transportPreference` for the ledger keyring is also updated:\r\n```typescript\r\n// This must be set as soon as possible to communicate to the\r\n// keyring's iframe and have the setting initialized properly\r\n// Optimistically called to not block MetaMask login due to\r\n// Ledger Keyring GitHub downtime\r\nconst transportPreference =\r\n  this.preferencesController.getLedgerTransportPreference();\r\n```\r\n#### Proposal\r\nWe should leave this call in the extension for now. \r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/MetaMask/core/issues/comments/1498822240/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/MetaMask/core/issues/comments/1498832845",
    "html_url": "https://github.com/MetaMask/core/issues/1103#issuecomment-1498832845",
    "issue_url": "https://api.github.com/repos/MetaMask/core/issues/1103",
    "id": 1498832845,
    "node_id": "IC_kwDOCBB0Cc5ZVl_N",
    "user": {
      "login": "mikesposito",
      "id": 34438276,
      "node_id": "MDQ6VXNlcjM0NDM4Mjc2",
      "avatar_url": "https://avatars.githubusercontent.com/u/34438276?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mikesposito",
      "html_url": "https://github.com/mikesposito",
      "followers_url": "https://api.github.com/users/mikesposito/followers",
      "following_url": "https://api.github.com/users/mikesposito/following{/other_user}",
      "gists_url": "https://api.github.com/users/mikesposito/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mikesposito/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mikesposito/subscriptions",
      "organizations_url": "https://api.github.com/users/mikesposito/orgs",
      "repos_url": "https://api.github.com/users/mikesposito/repos",
      "events_url": "https://api.github.com/users/mikesposito/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mikesposito/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-04-06T10:18:41Z",
    "updated_at": "2023-04-06T10:18:41Z",
    "author_association": "CONTRIBUTOR",
    "body": "## 10: submitEncryptionKey\r\nThis method is not present in the core KeyringController.\r\nIt is used by the extension to keep the user logged in when the browser service worker restarts. \r\n\r\n#### Proposal\r\nThis is needed with MV3 and we should port this to the core KeyringController. This method calls `EthKeyringController.submitEncryptionKey`\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/MetaMask/core/issues/comments/1498832845/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/MetaMask/core/issues/comments/1498846647",
    "html_url": "https://github.com/MetaMask/core/issues/1103#issuecomment-1498846647",
    "issue_url": "https://api.github.com/repos/MetaMask/core/issues/1103",
    "id": 1498846647,
    "node_id": "IC_kwDOCBB0Cc5ZVpW3",
    "user": {
      "login": "mikesposito",
      "id": 34438276,
      "node_id": "MDQ6VXNlcjM0NDM4Mjc2",
      "avatar_url": "https://avatars.githubusercontent.com/u/34438276?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mikesposito",
      "html_url": "https://github.com/mikesposito",
      "followers_url": "https://api.github.com/users/mikesposito/followers",
      "following_url": "https://api.github.com/users/mikesposito/following{/other_user}",
      "gists_url": "https://api.github.com/users/mikesposito/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mikesposito/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mikesposito/subscriptions",
      "organizations_url": "https://api.github.com/users/mikesposito/orgs",
      "repos_url": "https://api.github.com/users/mikesposito/repos",
      "events_url": "https://api.github.com/users/mikesposito/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mikesposito/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-04-06T10:29:04Z",
    "updated_at": "2023-04-20T12:39:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "## 11: verifyPassword\r\nThis method is in the extension, but not in the core KeyringController.\r\nThe closest method declared in the core KeyringController is named `validatePassword`, but with some differences:\r\n* In the extension, we call and return `EthKeyringController.verifyPassword` (this method is never used in the core alternative)\r\n* In the core KeyringController: we return `#keyring.password === password`\r\n\r\n#### Proposal\r\nLeave the core KeyringController method `validatePassword` as is, and add the `verifyPassword` from the extension in the core KeyringController as an additional method.\r\n\r\n**EDIT:** Rename method `validatePassword` to `verifyPassword` and align it with extension implementation",
    "reactions": {
      "url": "https://api.github.com/repos/MetaMask/core/issues/comments/1498846647/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/MetaMask/core/issues/comments/1498872248",
    "html_url": "https://github.com/MetaMask/core/issues/1103#issuecomment-1498872248",
    "issue_url": "https://api.github.com/repos/MetaMask/core/issues/1103",
    "id": 1498872248,
    "node_id": "IC_kwDOCBB0Cc5ZVvm4",
    "user": {
      "login": "mikesposito",
      "id": 34438276,
      "node_id": "MDQ6VXNlcjM0NDM4Mjc2",
      "avatar_url": "https://avatars.githubusercontent.com/u/34438276?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mikesposito",
      "html_url": "https://github.com/mikesposito",
      "followers_url": "https://api.github.com/users/mikesposito/followers",
      "following_url": "https://api.github.com/users/mikesposito/following{/other_user}",
      "gists_url": "https://api.github.com/users/mikesposito/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mikesposito/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mikesposito/subscriptions",
      "organizations_url": "https://api.github.com/users/mikesposito/orgs",
      "repos_url": "https://api.github.com/users/mikesposito/repos",
      "events_url": "https://api.github.com/users/mikesposito/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mikesposito/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-04-06T10:50:41Z",
    "updated_at": "2023-04-06T10:51:51Z",
    "author_association": "CONTRIBUTOR",
    "body": "## 12: QR Devices methods\r\n### 12.1: Instantiate the QR keyring through the core KeyringController\r\n#### Context\r\nThe QRHardwareKeyring is instantiated differently on the two clients: On extension we manually create a new QRHardwareKeyring in `metamask-controller.js`, instead on core KeyringController it’s done when any of the QR-related methods is called, using the `getOrAddQRKeyring` method that instantiates a new QR Keyring if none is present. \r\n\r\n#### Proposal\r\nIf the extension starts to use QR methods from the core KeyringController, the client will not need to instantiate a QR keyring manually.\r\n\r\n### 12.2: Rename submitQRHardwareCryptoHDKey in the extension\r\n#### Context\r\nIn core KeyringController, this method is called `submitQRCryptoHDKey`\r\n#### Proposal\r\nWe can refactor the extension to use the core KeyringController’s method.\r\n\r\n### 12.3: Rename submitQRHardwareCryptoAccount in the extension\r\n#### Context\r\nIn core KeyringController, this method is called `submitQRCryptoAccount`\r\n#### Proposal\r\nWe can refactor the extension to use the core KeyringController’s method.\r\n\r\n### 12.4: Add cancelSyncQRHardware in the core \r\n#### Context\r\nSeems like the `cancelSyncQRHardware` used in the extension is missing from the core KeyringController.  \r\n#### Proposal\r\nWe should add this method to the core KeyringController, named `cancelQRHardwareSync` to be aligned with the others. This method should call `QRHardwareKeyring.cancelSync`.\r\n\r\n### 12.5: Rename submitQRHardwareSignature in the extension\r\n#### Context\r\nIn core KeyringController, this method is called `submitQRSignature`\r\n#### Proposal\r\nWe can refactor the extension to use the core KeyringController’s method.\r\n\r\n### 12.6: Rename cancelQRHardwareSignRequest in the extension\r\n#### Context\r\nIn core KeyringController, this method is called `cancelQRSignRequest`\r\n#### Proposal\r\nWe can refactor the extension to use the core KeyringController’s method.",
    "reactions": {
      "url": "https://api.github.com/repos/MetaMask/core/issues/comments/1498872248/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/MetaMask/core/issues/comments/1505001319",
    "html_url": "https://github.com/MetaMask/core/issues/1103#issuecomment-1505001319",
    "issue_url": "https://api.github.com/repos/MetaMask/core/issues/1103",
    "id": 1505001319,
    "node_id": "IC_kwDOCBB0Cc5ZtH9n",
    "user": {
      "login": "mikesposito",
      "id": 34438276,
      "node_id": "MDQ6VXNlcjM0NDM4Mjc2",
      "avatar_url": "https://avatars.githubusercontent.com/u/34438276?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mikesposito",
      "html_url": "https://github.com/mikesposito",
      "followers_url": "https://api.github.com/users/mikesposito/followers",
      "following_url": "https://api.github.com/users/mikesposito/following{/other_user}",
      "gists_url": "https://api.github.com/users/mikesposito/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mikesposito/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mikesposito/subscriptions",
      "organizations_url": "https://api.github.com/users/mikesposito/orgs",
      "repos_url": "https://api.github.com/users/mikesposito/repos",
      "events_url": "https://api.github.com/users/mikesposito/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mikesposito/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-04-12T10:01:16Z",
    "updated_at": "2023-04-12T10:04:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "## 13: Hardware Keyrings\r\nOn the extension, hardware keyrings interactions are implemented calling function directly on the target keyring. \r\nIn all the cases, this is done through the `getKeyringForDevice` method declared in the extension. \r\n\r\n### 13.1: Expose a method to get a keyring by its type\r\n#### Context\r\nWe don’t necessarily have to implement all the hardware keyrings methods in the core KeyringController, but the extension will need a public method to get an hardware keyring.\r\n#### Proposal\r\nAt the moment, in the extension this is done by calling the EthKeyringController method  `getKeyringsByType`. We could add a method with the same name on core KeyringController to expose this functionality from the inner keyring controller.\r\n`KeyringTypes` from core KeyringController should also be extended, with missing keyring types supported by the extension (or alternatively make it extensible/dynamic).\r\n\r\n### 13.2: Expose `getKeyringForAccount` method\r\n#### Context\r\nIn some cases we need to get the keyring for a specific account address, which is not supported by core KeyringController at the moment, albeit we have a function to gather its type.\r\n#### Proposal\r\nWe can add a method with the same name on core KeyringController, to expose EthKeyringController functionality. \r\n\r\n### 13.3: Leave remaining hardware specific methods in the extension\r\n#### Context\r\nThe remaining methods:\r\n* getKeyringForDevice\r\n* connectHardware\r\n* forgetDevice\r\n* checkHardwareStatus\r\n* unlockHardwareWalletAccount\r\n* setLedgerTransportPreference\r\n* attemptLedgerTransportCreation\r\n* establishLedgerTransportPreference\r\nAre not needed by the mobile, so they don’t necessarily be shared by clients on the core KeyringController (with the exception of Ledger that is being integrated ATM).\r\n#### Proposal\r\nLeave these methods in the extension. All of them uses the `getKeyringForDevice` function, which internally uses `getKeyringsByType` from the EthKeyringController. As for **12.1** we should expose that, we can leave all the rest in the extensions.",
    "reactions": {
      "url": "https://api.github.com/repos/MetaMask/core/issues/comments/1505001319/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/MetaMask/core/issues/comments/1505019358",
    "html_url": "https://github.com/MetaMask/core/issues/1103#issuecomment-1505019358",
    "issue_url": "https://api.github.com/repos/MetaMask/core/issues/1103",
    "id": 1505019358,
    "node_id": "IC_kwDOCBB0Cc5ZtMXe",
    "user": {
      "login": "mikesposito",
      "id": 34438276,
      "node_id": "MDQ6VXNlcjM0NDM4Mjc2",
      "avatar_url": "https://avatars.githubusercontent.com/u/34438276?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mikesposito",
      "html_url": "https://github.com/mikesposito",
      "followers_url": "https://api.github.com/users/mikesposito/followers",
      "following_url": "https://api.github.com/users/mikesposito/following{/other_user}",
      "gists_url": "https://api.github.com/users/mikesposito/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mikesposito/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mikesposito/subscriptions",
      "organizations_url": "https://api.github.com/users/mikesposito/orgs",
      "repos_url": "https://api.github.com/users/mikesposito/repos",
      "events_url": "https://api.github.com/users/mikesposito/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mikesposito/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-04-12T10:13:51Z",
    "updated_at": "2023-04-20T12:40:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "## 14: EthKeyringController instantiation \r\n### 14.1: Add `cacheEncryptionKey ` when creating EthKeyringController instance\r\n#### Context\r\nIn the extension, the EthKeyringController instance is created with this config:\r\n```typescript\r\n{\r\n  keyringBuilders: additionalKeyrings,\r\n  initState: initState.KeyringController,\r\n  encryptor: opts.encryptor || undefined,\r\n  cacheEncryptionKey: isManifestV3,\r\n}\r\n``` \r\nOn the other hand, the core KeyringController’s `KeyringConfig` type seems to not expect the `cacheEncryptionKey` property.\r\n#### Proposal\r\nWe should add `cacheEncryptionKey` to the core KeyringController’s `KeyringConfig` type, so that it will be passed to EthKeyringController constructor.\r\n\r\n### 14.2: Allow memStore event subscription\r\n#### Context\r\nRight after instantiating the EthKeyringController, the extension subscribes to three keyring events: `onLock`, `onUnlock` and to `memStore` observable. \r\nThe core KeyringController has `onLock`, `onUnlock` and `subscribe` methods to do that, but `subscribe` subscribes to the store, not the memStore. \r\n#### Proposal\r\nWe can add an optional parameter to the `subscribe` method, to let the caller decide on which store to subscribe, `store` or `memStore` (it can be a simple boolean called useMemStore with false = store, true = memStore and default to false). \r\n\r\n**EDIT:** This is not possible as `subscribe` is part of BaseController. We can consider updating core KeyringController to BaseControllerV2, that allows subscription on persistent and non-persistent data.",
    "reactions": {
      "url": "https://api.github.com/repos/MetaMask/core/issues/comments/1505019358/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/MetaMask/core/issues/comments/1509226965",
    "html_url": "https://github.com/MetaMask/core/issues/1103#issuecomment-1509226965",
    "issue_url": "https://api.github.com/repos/MetaMask/core/issues/1103",
    "id": 1509226965,
    "node_id": "IC_kwDOCBB0Cc5Z9PnV",
    "user": {
      "login": "Gudahtt",
      "id": 2459287,
      "node_id": "MDQ6VXNlcjI0NTkyODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2459287?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Gudahtt",
      "html_url": "https://github.com/Gudahtt",
      "followers_url": "https://api.github.com/users/Gudahtt/followers",
      "following_url": "https://api.github.com/users/Gudahtt/following{/other_user}",
      "gists_url": "https://api.github.com/users/Gudahtt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Gudahtt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Gudahtt/subscriptions",
      "organizations_url": "https://api.github.com/users/Gudahtt/orgs",
      "repos_url": "https://api.github.com/users/Gudahtt/repos",
      "events_url": "https://api.github.com/users/Gudahtt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Gudahtt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-04-14T20:36:38Z",
    "updated_at": "2023-04-14T20:53:01Z",
    "author_association": "MEMBER",
    "body": "Great work on this @mikesposito ! I'll leave some comments here.\r\n\r\n>2.3: Support optional parameter to not change selected account\r\n\r\nHave you considered removing account switching from this method altogether? That would make the method simpler, closer to what mobile has if you take the patch into consideration. On the extension, `addNewAccount` is only called in one place (in `actions.js`) so it would be easy to add a call to `setSelectedAddress` after that call.\r\n\r\nJust an idea though; making that step optional sounds good to me as well.\r\n\r\n\r\n>3.1: Seed phrase should be handled as array of integers instead of string\r\n\r\nIn other packages we've been using Uint8Array for byte data. Do  think that would be suitable here as well?\r\n\r\nWe'll still need to convert it to an array of integers on the extension (just for the background <=> UI communication layer, which only supports JSON), but we can save that translation step for that communication layer. That might match expectations on mobile better, where they would never have any need to use an array of integers.\r\n\r\nEdit: the same goes for 8.1\r\n\r\n>4.2: Remove account operation's side effects responsibility should stay with the clients\r\n\r\n>We should leave to the extension the responsibility to call these two functions before or after calling the core KeyringController's removeAccount.\r\n\r\nAgreed that this responsibility belongs with the clients, but I wanted to suggest an alternative to making these calls directly. The preferences controller and the permissions controller can be updated to accept an event handler for when accounts are changed, then they can remove invalid state upon account removal internally. This lets each controller be responsible for the validity of its own state, removing the possibility that someone forgets to call these methods.\r\n\r\nEdit: The same goes for 8.2\r\n\r\n>5.4: Support optional parameter to not change selected account\r\n\r\nSimilar to 2.3, we could consider dropping this step altogether, moving the account switching on extension to the UI layer\r\n\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/MetaMask/core/issues/comments/1509226965/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/MetaMask/core/issues/comments/1509232037",
    "html_url": "https://github.com/MetaMask/core/issues/1103#issuecomment-1509232037",
    "issue_url": "https://api.github.com/repos/MetaMask/core/issues/1103",
    "id": 1509232037,
    "node_id": "IC_kwDOCBB0Cc5Z9Q2l",
    "user": {
      "login": "Gudahtt",
      "id": 2459287,
      "node_id": "MDQ6VXNlcjI0NTkyODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2459287?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Gudahtt",
      "html_url": "https://github.com/Gudahtt",
      "followers_url": "https://api.github.com/users/Gudahtt/followers",
      "following_url": "https://api.github.com/users/Gudahtt/following{/other_user}",
      "gists_url": "https://api.github.com/users/Gudahtt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Gudahtt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Gudahtt/subscriptions",
      "organizations_url": "https://api.github.com/users/Gudahtt/orgs",
      "repos_url": "https://api.github.com/users/Gudahtt/repos",
      "events_url": "https://api.github.com/users/Gudahtt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Gudahtt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-04-14T20:40:23Z",
    "updated_at": "2023-04-14T20:40:48Z",
    "author_association": "MEMBER",
    "body": "Regarding the steps that call `destroy` / `dispose` on the keyring (4.1, 6.1), I am conflicted about that. Some hardware wallets do need to be notified when they're no longer expected to be used, so some cleanup can occur. We can probably expect the same use case to appear for snaps at some point as well. So perhaps the keyring controller should be responsible for calling an optional `destroy` method whenever its dropping a reference to a keyring.\r\n\r\nIn the case where a keyring is \"destroying itself\" (i.e. the last account is removed), I guess it's possible for the keyring to know to call destroy internally as well. But this doesn't handle the locking case. Whereas if the keyring controller was responsible for calling destroy, it would be easier for us to guarantee that it's always called when the keyring is dropped.",
    "reactions": {
      "url": "https://api.github.com/repos/MetaMask/core/issues/comments/1509232037/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/MetaMask/core/issues/comments/1509246788",
    "html_url": "https://github.com/MetaMask/core/issues/1103#issuecomment-1509246788",
    "issue_url": "https://api.github.com/repos/MetaMask/core/issues/1103",
    "id": 1509246788,
    "node_id": "IC_kwDOCBB0Cc5Z9UdE",
    "user": {
      "login": "Gudahtt",
      "id": 2459287,
      "node_id": "MDQ6VXNlcjI0NTkyODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2459287?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Gudahtt",
      "html_url": "https://github.com/Gudahtt",
      "followers_url": "https://api.github.com/users/Gudahtt/followers",
      "following_url": "https://api.github.com/users/Gudahtt/following{/other_user}",
      "gists_url": "https://api.github.com/users/Gudahtt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Gudahtt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Gudahtt/subscriptions",
      "organizations_url": "https://api.github.com/users/Gudahtt/orgs",
      "repos_url": "https://api.github.com/users/Gudahtt/repos",
      "events_url": "https://api.github.com/users/Gudahtt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Gudahtt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-04-14T20:51:49Z",
    "updated_at": "2023-04-14T20:51:49Z",
    "author_association": "MEMBER",
    "body": ">6.2: Session storage clearing should also remain in the extension\r\n\r\nAgreed! Perhaps we can put this in an event handler for the `lock` event\r\n\r\n>7.1: Leave to the extension the responsibility to avoid multiple UI submissions\r\n\r\nHmm, not sure about this one. This is tricky because there can be multiple windows opened, and because the background <=> UI communication is async. The simplest way to ensure we don't have two \"first\" HD keyrings is to protect against this in the background.\r\n\r\nThe mutex in the core keyring controller protects against _simultaneous_ attempts to create a new vault, but it doesn't protect against sequential attempts. So it would still be possible for the UI to be in a state where it _thinks_ there is no vault so it asks for a new one, but by the time the request gets to the background, a vault had been created as a result of another request. Then that vault would get wiped out, potentially losing a private key that someone thought was the primary key for their wallet.\r\n\r\nPerhaps the extension has greater needs here because of the multi-process architecture. But even for mobile it probably couldn't hurt to ensure there was no vault before creating a new vault. Or maybe we could leave this check in the extension for now.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/MetaMask/core/issues/comments/1509246788/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/MetaMask/core/issues/comments/1509264365",
    "html_url": "https://github.com/MetaMask/core/issues/1103#issuecomment-1509264365",
    "issue_url": "https://api.github.com/repos/MetaMask/core/issues/1103",
    "id": 1509264365,
    "node_id": "IC_kwDOCBB0Cc5Z9Yvt",
    "user": {
      "login": "Gudahtt",
      "id": 2459287,
      "node_id": "MDQ6VXNlcjI0NTkyODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2459287?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Gudahtt",
      "html_url": "https://github.com/Gudahtt",
      "followers_url": "https://api.github.com/users/Gudahtt/followers",
      "following_url": "https://api.github.com/users/Gudahtt/following{/other_user}",
      "gists_url": "https://api.github.com/users/Gudahtt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Gudahtt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Gudahtt/subscriptions",
      "organizations_url": "https://api.github.com/users/Gudahtt/orgs",
      "repos_url": "https://api.github.com/users/Gudahtt/repos",
      "events_url": "https://api.github.com/users/Gudahtt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Gudahtt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-04-14T21:03:39Z",
    "updated_at": "2023-04-14T21:03:39Z",
    "author_association": "MEMBER",
    "body": ">8.3: Leave account re-creation and balance fetching to the extension\r\n\r\nOops, I missed this from the analysis! Mobile actually does the same thing, here: https://github.com/MetaMask/metamask-mobile/blob/bdbc865009b9acb4b4068aeefd907de87fd85c2e/app/core/Vault.js#L72\r\n\r\nIt seems OK to leave this with the clients, but there is an opportunity to make this shared at least.\r\n\r\n>9.1: Leave latest block check in the extension\r\n\r\nFor the scope of this project, this sounds good to me. But I'm not sure why this check is even needed. I was planning to investigate and potentially remove it altogether.\r\n\r\n>11: verifyPassword\r\n\r\nPart of the accounts team's plan was to make the core keyring controller aligned with extension here, removing the need to store the password at all. Perhaps this would be a better alternative than adding an additional equivalent method.\r\n\r\n>14.2: Allow memStore event subscription\r\n\r\n>We can add an optional parameter to the subscribe method, to let the caller decide on which store to subscribe, store or memStore (it can be a simple boolean called useMemStore with false = store, true = memStore and default to false).\r\n\r\nThis would be tricky because `subscribe` is part of the base controller.\r\n\r\nThe accounts team planned to solve this by refactoring the keyring controller to use base controller v2, which allows a single store to include persisted and non-persisted state. Then we could use a single subscribe function, having no need for two. Perhaps we could solve it in the same way? I am not aware of any blockers to use adopting the v2 API. Something to consider at least.",
    "reactions": {
      "url": "https://api.github.com/repos/MetaMask/core/issues/comments/1509264365/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/MetaMask/core/issues/comments/1516270870",
    "html_url": "https://github.com/MetaMask/core/issues/1103#issuecomment-1516270870",
    "issue_url": "https://api.github.com/repos/MetaMask/core/issues/1103",
    "id": 1516270870,
    "node_id": "IC_kwDOCBB0Cc5aYHUW",
    "user": {
      "login": "mikesposito",
      "id": 34438276,
      "node_id": "MDQ6VXNlcjM0NDM4Mjc2",
      "avatar_url": "https://avatars.githubusercontent.com/u/34438276?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mikesposito",
      "html_url": "https://github.com/mikesposito",
      "followers_url": "https://api.github.com/users/mikesposito/followers",
      "following_url": "https://api.github.com/users/mikesposito/following{/other_user}",
      "gists_url": "https://api.github.com/users/mikesposito/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mikesposito/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mikesposito/subscriptions",
      "organizations_url": "https://api.github.com/users/mikesposito/orgs",
      "repos_url": "https://api.github.com/users/mikesposito/repos",
      "events_url": "https://api.github.com/users/mikesposito/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mikesposito/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-04-20T12:49:46Z",
    "updated_at": "2023-04-20T12:49:46Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks for your comments @Gudahtt! I’ll reply to some of your comments here\r\n\r\n#### 2.3\r\n> Have you considered removing account switching from this method altogether? That would make the method simpler, closer to what mobile has if you take the patch into consideration. On the extension, addNewAccount is only called in one place (in actions.js) so it would be easy to add a call to setSelectedAddress after that call.\r\n\r\nProposal edited\r\n\r\n#### 3.1, 8.1\r\n> In other packages we’ve been using Uint8Array for byte data. Do think that would be suitable here as well?\r\nDefinitely!\r\n\r\nProposal edited\r\n\r\n#### 4.2, 8.2\r\n> Agreed that this responsibility belongs with the clients, but I wanted to suggest an alternative to making these calls directly. The preferences controller and the permissions controller can be updated to accept an event handler for when accounts are changed, then they can remove invalid state upon account removal internally. This lets each controller be responsible for the validity of its own state, removing the possibility that someone forgets to call these methods.\r\n\r\nWhat you are suggesting here is to add something like an `onAccountRemoved` method in each involved controller, that will be called from `MetamaskController` upon account removal?\r\n\r\n#### 5.4\r\n> Similar to 2.3, we could consider dropping this step altogether, moving the account switching on extension to the UI layer\r\n\r\nProposal edited\r\n\r\n#### 6.2 \r\n> Agreed! Perhaps we can put this in an event handler for the lock event\r\n\r\nProposal edited\r\n\r\n#### 7.1\r\n> Hmm, not sure about this one. This is tricky because there can be multiple windows opened, and because the background <=> UI communication is async. The simplest way to ensure we don’t have two “first” HD keyrings is to protect against this in the background.\r\n\r\nOh, right! This sounds reasonable. I edited the proposal\r\n\r\n#### 8.3\r\n> It seems OK to leave this with the clients, but there is an opportunity to make this shared at least.\r\n\r\nComparing how clients do that, I would say that mobile is more efficient as it keeps a count of pre-existing accounts instead of checking each balance (also, there could be a case where Account 1 has no balance while Account 2 does I guess).\r\n\r\nNot sure if we should also make shared the recreation of accounts outside the HD keyring though. I think we should take care of the QR Keyring for sure, that mobile recreates manually while the extensions doesn’t care as it handles the QRKeyring directly without passing through EthKeyringController.\r\n\r\n#### 11\r\n> Part of the accounts team’s plan was to make the core keyring controller aligned with extension here, removing the need to store the password at all. Perhaps this would be a better alternative than adding an additional equivalent method.\r\n\r\nProposal edited\r\n\r\n#### 14.2\r\n> This would be tricky because subscribe is part of the base controller.\r\n\r\nI edited the proposal to update the core KeyringController to BaseControllerV2",
    "reactions": {
      "url": "https://api.github.com/repos/MetaMask/core/issues/comments/1516270870/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/MetaMask/core/issues/comments/1516278287",
    "html_url": "https://github.com/MetaMask/core/issues/1103#issuecomment-1516278287",
    "issue_url": "https://api.github.com/repos/MetaMask/core/issues/1103",
    "id": 1516278287,
    "node_id": "IC_kwDOCBB0Cc5aYJIP",
    "user": {
      "login": "Gudahtt",
      "id": 2459287,
      "node_id": "MDQ6VXNlcjI0NTkyODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2459287?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Gudahtt",
      "html_url": "https://github.com/Gudahtt",
      "followers_url": "https://api.github.com/users/Gudahtt/followers",
      "following_url": "https://api.github.com/users/Gudahtt/following{/other_user}",
      "gists_url": "https://api.github.com/users/Gudahtt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Gudahtt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Gudahtt/subscriptions",
      "organizations_url": "https://api.github.com/users/Gudahtt/orgs",
      "repos_url": "https://api.github.com/users/Gudahtt/repos",
      "events_url": "https://api.github.com/users/Gudahtt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Gudahtt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-04-20T12:55:05Z",
    "updated_at": "2023-04-20T12:55:39Z",
    "author_association": "MEMBER",
    "body": ">What you are suggesting here is to add something like an onAccountRemoved method in each involved controller, that will be called from MetamaskController upon account removal?\r\n\r\nWhat I had in mind was something more like an `onAccountsChanged` event listener (or `onKeyringControllerStateChange`, or `onAccountRemoved`, some sort of event that tells us when accounts are removed, whatever works), which we could pass into any controller that cares about accounts. They can listen for that event to detect when accounts are removed, and respond accordingly. That way we never have to remember to call it.",
    "reactions": {
      "url": "https://api.github.com/repos/MetaMask/core/issues/comments/1516278287/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/MetaMask/core/issues/comments/1516308216",
    "html_url": "https://github.com/MetaMask/core/issues/1103#issuecomment-1516308216",
    "issue_url": "https://api.github.com/repos/MetaMask/core/issues/1103",
    "id": 1516308216,
    "node_id": "IC_kwDOCBB0Cc5aYQb4",
    "user": {
      "login": "Gudahtt",
      "id": 2459287,
      "node_id": "MDQ6VXNlcjI0NTkyODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2459287?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Gudahtt",
      "html_url": "https://github.com/Gudahtt",
      "followers_url": "https://api.github.com/users/Gudahtt/followers",
      "following_url": "https://api.github.com/users/Gudahtt/following{/other_user}",
      "gists_url": "https://api.github.com/users/Gudahtt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Gudahtt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Gudahtt/subscriptions",
      "organizations_url": "https://api.github.com/users/Gudahtt/orgs",
      "repos_url": "https://api.github.com/users/Gudahtt/repos",
      "events_url": "https://api.github.com/users/Gudahtt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Gudahtt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-04-20T13:14:13Z",
    "updated_at": "2023-04-20T13:14:13Z",
    "author_association": "MEMBER",
    "body": "This plan looks good to me! Some pending discussion on point v4.2 but just on the details; I agree that it should stay with clients and that was the most important point there.",
    "reactions": {
      "url": "https://api.github.com/repos/MetaMask/core/issues/comments/1516308216/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/MetaMask/core/issues/comments/1523742844",
    "html_url": "https://github.com/MetaMask/core/issues/1103#issuecomment-1523742844",
    "issue_url": "https://api.github.com/repos/MetaMask/core/issues/1103",
    "id": 1523742844,
    "node_id": "IC_kwDOCBB0Cc5a0nh8",
    "user": {
      "login": "Gudahtt",
      "id": 2459287,
      "node_id": "MDQ6VXNlcjI0NTkyODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2459287?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Gudahtt",
      "html_url": "https://github.com/Gudahtt",
      "followers_url": "https://api.github.com/users/Gudahtt/followers",
      "following_url": "https://api.github.com/users/Gudahtt/following{/other_user}",
      "gists_url": "https://api.github.com/users/Gudahtt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Gudahtt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Gudahtt/subscriptions",
      "organizations_url": "https://api.github.com/users/Gudahtt/orgs",
      "repos_url": "https://api.github.com/users/Gudahtt/repos",
      "events_url": "https://api.github.com/users/Gudahtt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Gudahtt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-04-26T16:45:44Z",
    "updated_at": "2023-04-26T16:45:44Z",
    "author_association": "MEMBER",
    "body": "This has been completed",
    "reactions": {
      "url": "https://api.github.com/repos/MetaMask/core/issues/comments/1523742844/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
