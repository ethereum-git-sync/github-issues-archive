{
  "url": "https://api.github.com/repos/MetaMask/core/issues/1474",
  "repository_url": "https://api.github.com/repos/MetaMask/core",
  "labels_url": "https://api.github.com/repos/MetaMask/core/issues/1474/labels{/name}",
  "comments_url": "https://api.github.com/repos/MetaMask/core/issues/1474/comments",
  "events_url": "https://api.github.com/repos/MetaMask/core/issues/1474/events",
  "html_url": "https://github.com/MetaMask/core/issues/1474",
  "id": 1793725357,
  "node_id": "I_kwDOCBB0Cc5q6hOt",
  "number": 1474,
  "title": "Research: v1 using PermissionsController rather than ActiveNetworkController",
  "user": {
    "login": "adonesky1",
    "id": 34557516,
    "node_id": "MDQ6VXNlcjM0NTU3NTE2",
    "avatar_url": "https://avatars.githubusercontent.com/u/34557516?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/adonesky1",
    "html_url": "https://github.com/adonesky1",
    "followers_url": "https://api.github.com/users/adonesky1/followers",
    "following_url": "https://api.github.com/users/adonesky1/following{/other_user}",
    "gists_url": "https://api.github.com/users/adonesky1/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/adonesky1/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/adonesky1/subscriptions",
    "organizations_url": "https://api.github.com/users/adonesky1/orgs",
    "repos_url": "https://api.github.com/users/adonesky1/repos",
    "events_url": "https://api.github.com/users/adonesky1/events{/privacy}",
    "received_events_url": "https://api.github.com/users/adonesky1/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 5108738713,
      "node_id": "LA_kwDOCBB0Cc8AAAABMIEqmQ",
      "url": "https://api.github.com/repos/MetaMask/core/labels/team-devex",
      "name": "team-devex",
      "color": "BFB144",
      "default": false,
      "description": null
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": {
    "login": "adonesky1",
    "id": 34557516,
    "node_id": "MDQ6VXNlcjM0NTU3NTE2",
    "avatar_url": "https://avatars.githubusercontent.com/u/34557516?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/adonesky1",
    "html_url": "https://github.com/adonesky1",
    "followers_url": "https://api.github.com/users/adonesky1/followers",
    "following_url": "https://api.github.com/users/adonesky1/following{/other_user}",
    "gists_url": "https://api.github.com/users/adonesky1/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/adonesky1/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/adonesky1/subscriptions",
    "organizations_url": "https://api.github.com/users/adonesky1/orgs",
    "repos_url": "https://api.github.com/users/adonesky1/repos",
    "events_url": "https://api.github.com/users/adonesky1/events{/privacy}",
    "received_events_url": "https://api.github.com/users/adonesky1/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "adonesky1",
      "id": 34557516,
      "node_id": "MDQ6VXNlcjM0NTU3NTE2",
      "avatar_url": "https://avatars.githubusercontent.com/u/34557516?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adonesky1",
      "html_url": "https://github.com/adonesky1",
      "followers_url": "https://api.github.com/users/adonesky1/followers",
      "following_url": "https://api.github.com/users/adonesky1/following{/other_user}",
      "gists_url": "https://api.github.com/users/adonesky1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adonesky1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adonesky1/subscriptions",
      "organizations_url": "https://api.github.com/users/adonesky1/orgs",
      "repos_url": "https://api.github.com/users/adonesky1/repos",
      "events_url": "https://api.github.com/users/adonesky1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adonesky1/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2023-07-07T15:18:07Z",
  "updated_at": "2023-07-13T16:23:14Z",
  "closed_at": "2023-07-13T16:23:14Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "Before we progress the v1 (per-dapp selected network) dApp API, we should make sure we pursuing an architecture that balances the need for expediency against helping us set up for v1.5.",
  "closed_by": {
    "login": "adonesky1",
    "id": 34557516,
    "node_id": "MDQ6VXNlcjM0NTU3NTE2",
    "avatar_url": "https://avatars.githubusercontent.com/u/34557516?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/adonesky1",
    "html_url": "https://github.com/adonesky1",
    "followers_url": "https://api.github.com/users/adonesky1/followers",
    "following_url": "https://api.github.com/users/adonesky1/following{/other_user}",
    "gists_url": "https://api.github.com/users/adonesky1/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/adonesky1/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/adonesky1/subscriptions",
    "organizations_url": "https://api.github.com/users/adonesky1/orgs",
    "repos_url": "https://api.github.com/users/adonesky1/repos",
    "events_url": "https://api.github.com/users/adonesky1/events{/privacy}",
    "received_events_url": "https://api.github.com/users/adonesky1/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/MetaMask/core/issues/1474/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/MetaMask/core/issues/1474/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/MetaMask/core/issues/comments/1626350501",
    "html_url": "https://github.com/MetaMask/core/issues/1474#issuecomment-1626350501",
    "issue_url": "https://api.github.com/repos/MetaMask/core/issues/1474",
    "id": 1626350501,
    "node_id": "IC_kwDOCBB0Cc5g8COl",
    "user": {
      "login": "adonesky1",
      "id": 34557516,
      "node_id": "MDQ6VXNlcjM0NTU3NTE2",
      "avatar_url": "https://avatars.githubusercontent.com/u/34557516?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adonesky1",
      "html_url": "https://github.com/adonesky1",
      "followers_url": "https://api.github.com/users/adonesky1/followers",
      "following_url": "https://api.github.com/users/adonesky1/following{/other_user}",
      "gists_url": "https://api.github.com/users/adonesky1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adonesky1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adonesky1/subscriptions",
      "organizations_url": "https://api.github.com/users/adonesky1/orgs",
      "repos_url": "https://api.github.com/users/adonesky1/repos",
      "events_url": "https://api.github.com/users/adonesky1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adonesky1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-07-07T23:12:29Z",
    "updated_at": "2023-07-13T00:45:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "Overall take: Using the PermissionsController in lieu of a new ActiveNetworkController for per-dapp selected network functionality will likely take longer to implement correctly and may not contribute to the direction we want to go with the way we are currently thinking of using of the Permissions System for v1.5. The main issue as I see it is that in the current API restricted method dApp requests do not contain network routing information - as they do with account information - meaning they are relying on 'selected network' state in the wallet to route the request. This model doesn't map well to a \"permissions\" system, so while it would be possible to use permissions to read and write this state it doesn't seem like the right place for it. This changes in v1.5 where the requests contain network routing information and can therefore be validated against the permissions without circularly referencing these permissions to route the request to the correct chainId.\r\n\r\n  The way permissions currently works is that each “restricted” method call (meaning essentially a 'write' method requiring an actual signature) is preceded by a call to `eth_accounts` and then [validation that the method being requested to sign matches an existing permission](https://github.com/MetaMask/eth-json-rpc-middleware/blob/b894ed96d26622a2b9c161ff2581220523e8bc4a/src/wallet.ts#L372).\r\n \r\n These checks occur in [middleware specifically for each these methods](https://github.com/MetaMask/eth-json-rpc-middleware/blob/b894ed96d26622a2b9c161ff2581220523e8bc4a/src/wallet.ts#L83). [signTypedData_v4](https://github.com/MetaMask/eth-json-rpc-middleware/blob/b894ed96d26622a2b9c161ff2581220523e8bc4a/src/wallet.ts#L242), [eth_sendTransaction](https://github.com/MetaMask/eth-json-rpc-middleware/blob/b894ed96d26622a2b9c161ff2581220523e8bc4a/src/wallet.ts#L134) etc.\r\n\r\n So a way we could do this I suppose is add a chain related caveat to `eth_accounts` permission (that is written each time the network changes network) and then (_this is me walking through how permissions work for transaction authorization, since I haven't been in the trenches with this flow before_)\r\n  [`getPermittedAccounts`](https://github.com/MetaMask/metamask-extension/blob/4e89c6ca8c623533d55bab4fc21148a28e358171/app/scripts/metamask-controller.js#L3411) -> [`executeRestrictedMethod`](https://github.com/MetaMask/core/blob/871554d6ba85202085d00fb19547f82b812025b8/packages/permission-controller/src/PermissionController.ts#L2359C32-L2359C32) -> [`getPermission`](https://github.com/MetaMask/core/blob/871554d6ba85202085d00fb19547f82b812025b8/packages/permission-controller/src/PermissionController.ts#L904) the result of which would be attenuated in [`decorateWithCaveats`](https://github.com/MetaMask/core/blob/871554d6ba85202085d00fb19547f82b812025b8/packages/permission-controller/src/Caveat.ts#L281) and only ever return an account which would pass the [restricted methods validation step](https://github.com/MetaMask/eth-json-rpc-middleware/blob/b894ed96d26622a2b9c161ff2581220523e8bc4a/src/wallet.ts#L372) when the chainId in the caveat matches that of the requested transaction... But we don't have a chainId (in this API) as part of the transaction like we do with the `from` account.\r\n\r\nSide note: It’s possible the only methods where permissions and chainId both matter are `eth_sendTransaction` & `eth_signTransaction`. Other permissioned methods (`personal_sign`, `eth_signTypedData`, `eth_getEncryptionPublicKey`, etc.) are chain agnostic.\r\n\r\n~One problem with this approach is that there are some methods that really don’t care about account permissions but do care about chainId like `wallet_watchAsset` . Getting the state from permissions in these cases may be more cumbersome than getting it from an active NetworkController. Though I suppose this method will remain unrestricted in this API...~",
    "reactions": {
      "url": "https://api.github.com/repos/MetaMask/core/issues/comments/1626350501/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
