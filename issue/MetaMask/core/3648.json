{
  "url": "https://api.github.com/repos/MetaMask/core/issues/3648",
  "repository_url": "https://api.github.com/repos/MetaMask/core",
  "labels_url": "https://api.github.com/repos/MetaMask/core/issues/3648/labels{/name}",
  "comments_url": "https://api.github.com/repos/MetaMask/core/issues/3648/comments",
  "events_url": "https://api.github.com/repos/MetaMask/core/issues/3648/events",
  "html_url": "https://github.com/MetaMask/core/issues/3648",
  "id": 2035776656,
  "node_id": "I_kwDOCBB0Cc55V3yQ",
  "number": 3648,
  "title": "[base-controller] `getRestricted` infers the wrong types when it has no allowed actions/events",
  "user": {
    "login": "Gudahtt",
    "id": 2459287,
    "node_id": "MDQ6VXNlcjI0NTkyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2459287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Gudahtt",
    "html_url": "https://github.com/Gudahtt",
    "followers_url": "https://api.github.com/users/Gudahtt/followers",
    "following_url": "https://api.github.com/users/Gudahtt/following{/other_user}",
    "gists_url": "https://api.github.com/users/Gudahtt/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Gudahtt/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Gudahtt/subscriptions",
    "organizations_url": "https://api.github.com/users/Gudahtt/orgs",
    "repos_url": "https://api.github.com/users/Gudahtt/repos",
    "events_url": "https://api.github.com/users/Gudahtt/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Gudahtt/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 948148992,
      "node_id": "MDU6TGFiZWw5NDgxNDg5OTI=",
      "url": "https://api.github.com/repos/MetaMask/core/labels/bug",
      "name": "bug",
      "color": "d73a4a",
      "default": true,
      "description": "Something isn't working"
    },
    {
      "id": 5330766523,
      "node_id": "LA_kwDOCBB0Cc8AAAABPb0Kuw",
      "url": "https://api.github.com/repos/MetaMask/core/labels/team-shared-libraries",
      "name": "team-shared-libraries",
      "color": "c5def5",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2023-12-11T14:13:30Z",
  "updated_at": "2024-01-05T23:09:29Z",
  "closed_at": null,
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "When constructing a restricted controller messenger with no allowed actions, it will infer the \"allowed action\" type as encompassing all actions. This puts the types and runtime behavior out-of-sync; at runtime, no allowed actions means you can't call any external actions, but at the type level it acts as though you could call all of them.\r\n\r\nEverything applies equally to events as well; the same problem is present for both actions and events.\r\n\r\nFor example:\r\n\r\n```TypeScript\r\ntype MessageEvent = {\r\n  type: 'MessageController:message';\r\n  payload: [string];\r\n};\r\ntype OtherEvent = {\r\n  type: 'OtherController:other';\r\n  payload: [unknown];\r\n};\r\n\r\n// Global messenger setup with two events: one for the MessengerController, and one external.\r\nconst controllerMessenger = new ControllerMessenger<\r\n  never,\r\n  MessageEvent | OtherEvent\r\n>();\r\n// No explicit type parameters given, they are inferred.\r\n// Note that no allowed events are specified, so \"OtherController:other\" should be disallowed\r\nconst restrictedControllerMessenger = controllerMessenger.getRestricted({\r\n  name: 'MessageController',\r\n});\r\n\r\n// This should result in a type error, but it does not. Instead it throws at runtime.\r\n// \"AllowedActions\" has been inferred as being all actions\r\nrestrictedControllerMessenger.subscribe(\r\n  'OtherController:other',\r\n  () => undefined,\r\n);\r\n```\r\n\r\nThis is easily addressed by explicitly declaring the type parameter as `never` when constructing the `RestrictedMessengerController`. For example:\r\n\r\n```TypeScript\r\n// following from the same global ControllerMessenger as the above example\r\n\r\n// Explicit type parameters given\r\nconst restrictedControllerMessenger = controllerMessenger.getRestricted<\r\n  'MessageController',  // \"name\"\r\n  never,                            // \"allowedActions\"\r\n  never                            // \"allowedEvents\"\r\n>({\r\n  name: 'MessageController',\r\n});\r\n\r\n// This now correctly results in a type error\r\nrestrictedControllerMessenger.subscribe(\r\n  'OtherController:other',\r\n  () => undefined,\r\n);\r\n```\r\n\r\nHowever, needing to explicitly declare type parameters for the empty case is not great. It's verbose, and makes this a bit more difficult to use.\r\n\r\nWe should investigate and find a way to ensure the inferred type is correct. If that's not possible, we should at least document this issue somewhere, so people are less likely to be caught off guard by it.\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/MetaMask/core/issues/3648/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/MetaMask/core/issues/3648/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/MetaMask/core/issues/comments/1879362747",
    "html_url": "https://github.com/MetaMask/core/issues/3648#issuecomment-1879362747",
    "issue_url": "https://api.github.com/repos/MetaMask/core/issues/3648",
    "id": 1879362747,
    "node_id": "IC_kwDOCBB0Cc5wBMy7",
    "user": {
      "login": "MajorLift",
      "id": 34228073,
      "node_id": "MDQ6VXNlcjM0MjI4MDcz",
      "avatar_url": "https://avatars.githubusercontent.com/u/34228073?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MajorLift",
      "html_url": "https://github.com/MajorLift",
      "followers_url": "https://api.github.com/users/MajorLift/followers",
      "following_url": "https://api.github.com/users/MajorLift/following{/other_user}",
      "gists_url": "https://api.github.com/users/MajorLift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MajorLift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MajorLift/subscriptions",
      "organizations_url": "https://api.github.com/users/MajorLift/orgs",
      "repos_url": "https://api.github.com/users/MajorLift/repos",
      "events_url": "https://api.github.com/users/MajorLift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MajorLift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2024-01-05T23:06:00Z",
    "updated_at": "2024-01-05T23:07:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "It seems like this applies not just to the empty case, but to any case where the allowed actions/events listed at the value level is narrower than the full `Allowed{Actions,Events}` union defined in the controller.\r\n\r\nAs documented in the issue, The 2nd and 3rd generic params of `getRestricted` default to the full `Allowed{Actions,Events}` unions when omitted. The problem is that if the value-level `allowed{Actions,Events}` arrays don't list the full unions (including being empty arrays or undefined), the type-level generic params are still inferred as the full union. The only way to override this is to explicitly pass in the narrower unions as generic params.\r\n\r\nHaving the `Allowed{Actions,Events}` generic params in `getRestricted` simply default to `never` would be safer at the expense of a worse developer experience (having to specify the same list twice at the value-level and type-level). Inferring the generic params from `allowed{Actions,Events}` would be ideal, but it's not clear whether that's possible. ",
    "reactions": {
      "url": "https://api.github.com/repos/MetaMask/core/issues/comments/1879362747/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
