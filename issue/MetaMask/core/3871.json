{
  "url": "https://api.github.com/repos/MetaMask/core/issues/3871",
  "repository_url": "https://api.github.com/repos/MetaMask/core",
  "labels_url": "https://api.github.com/repos/MetaMask/core/issues/3871/labels{/name}",
  "comments_url": "https://api.github.com/repos/MetaMask/core/issues/3871/comments",
  "events_url": "https://api.github.com/repos/MetaMask/core/issues/3871/events",
  "html_url": "https://github.com/MetaMask/core/issues/3871",
  "id": 2107986537,
  "node_id": "I_kwDOCBB0Cc59pVJp",
  "number": 3871,
  "title": "Streamlining KeyringController API",
  "user": {
    "login": "mikesposito",
    "id": 34438276,
    "node_id": "MDQ6VXNlcjM0NDM4Mjc2",
    "avatar_url": "https://avatars.githubusercontent.com/u/34438276?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mikesposito",
    "html_url": "https://github.com/mikesposito",
    "followers_url": "https://api.github.com/users/mikesposito/followers",
    "following_url": "https://api.github.com/users/mikesposito/following{/other_user}",
    "gists_url": "https://api.github.com/users/mikesposito/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mikesposito/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mikesposito/subscriptions",
    "organizations_url": "https://api.github.com/users/mikesposito/orgs",
    "repos_url": "https://api.github.com/users/mikesposito/repos",
    "events_url": "https://api.github.com/users/mikesposito/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mikesposito/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 5330766523,
      "node_id": "LA_kwDOCBB0Cc8AAAABPb0Kuw",
      "url": "https://api.github.com/repos/MetaMask/core/labels/team-shared-libraries",
      "name": "team-shared-libraries",
      "color": "c5def5",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2024-01-30T14:22:42Z",
  "updated_at": "2024-01-30T16:30:17Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "This issue aims to provide a list of observations and possible proposals to simplify the `KeyringController` API, removing unnecessary, redundant, out-of-scope, and confusing methods.\r\n\r\nThe `KeyringController` responsibilities should be the following (ideally, this is not written on any stone):\r\n* Hold keyrings instances\r\n* Provide functionalities to lock and unlock the wallet\r\n* Keep in sync its state with the state of each keyring\r\n* Route action calls for a specific account to the corresponding keyring that holds the account, or in other words, it should know which Keyring a specific account belongs to, and which actions are supported",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/MetaMask/core/issues/3871/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/MetaMask/core/issues/3871/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/MetaMask/core/issues/comments/1916977605",
    "html_url": "https://github.com/MetaMask/core/issues/3871#issuecomment-1916977605",
    "issue_url": "https://api.github.com/repos/MetaMask/core/issues/3871",
    "id": 1916977605,
    "node_id": "IC_kwDOCBB0Cc5yQsHF",
    "user": {
      "login": "mikesposito",
      "id": 34438276,
      "node_id": "MDQ6VXNlcjM0NDM4Mjc2",
      "avatar_url": "https://avatars.githubusercontent.com/u/34438276?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mikesposito",
      "html_url": "https://github.com/mikesposito",
      "followers_url": "https://api.github.com/users/mikesposito/followers",
      "following_url": "https://api.github.com/users/mikesposito/following{/other_user}",
      "gists_url": "https://api.github.com/users/mikesposito/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mikesposito/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mikesposito/subscriptions",
      "organizations_url": "https://api.github.com/users/mikesposito/orgs",
      "repos_url": "https://api.github.com/users/mikesposito/repos",
      "events_url": "https://api.github.com/users/mikesposito/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mikesposito/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2024-01-30T14:23:06Z",
    "updated_at": "2024-01-30T14:23:06Z",
    "author_association": "CONTRIBUTOR",
    "body": "## Hold Keyrings\r\nThe first responsibility listed is already effectively implemented: `KeyringController` holds all keyring instances in its `#keyrings` array.",
    "reactions": {
      "url": "https://api.github.com/repos/MetaMask/core/issues/comments/1916977605/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/MetaMask/core/issues/comments/1916978148",
    "html_url": "https://github.com/MetaMask/core/issues/3871#issuecomment-1916978148",
    "issue_url": "https://api.github.com/repos/MetaMask/core/issues/3871",
    "id": 1916978148,
    "node_id": "IC_kwDOCBB0Cc5yQsPk",
    "user": {
      "login": "mikesposito",
      "id": 34438276,
      "node_id": "MDQ6VXNlcjM0NDM4Mjc2",
      "avatar_url": "https://avatars.githubusercontent.com/u/34438276?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mikesposito",
      "html_url": "https://github.com/mikesposito",
      "followers_url": "https://api.github.com/users/mikesposito/followers",
      "following_url": "https://api.github.com/users/mikesposito/following{/other_user}",
      "gists_url": "https://api.github.com/users/mikesposito/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mikesposito/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mikesposito/subscriptions",
      "organizations_url": "https://api.github.com/users/mikesposito/orgs",
      "repos_url": "https://api.github.com/users/mikesposito/repos",
      "events_url": "https://api.github.com/users/mikesposito/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mikesposito/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2024-01-30T14:23:23Z",
    "updated_at": "2024-01-30T14:23:23Z",
    "author_association": "CONTRIBUTOR",
    "body": "## Locking and Unlocking\r\nThe second responsibility, /providing functionalities to lock and unlock the wallet/, is also already implemented, but we can probably do some refactoring to make it easier to use, and reduce the API coverage that it takes. Currently, we have these methods:\r\n* `isUnlocked`: in essence, it simply returns the value of  `isUnlocked` from the `KeyringController` state. \r\n* `verifyPassword`: Provides a way to check the correctness of a certain password. This is used in certain cases where the user should be prompted for the password again (e.g. before SRP reveal), even if the wallet is already unlocked.\r\n* `setLocked`: Wipes the keyring array from memory, and sets the wallet as locked.\r\n* `submitPassword`: Unlocks the wallet with a password, extracting all serialised keyrings from the encrypted vault, and restoring them in the `#keyrings` array.\r\n* `submitEncryptionKey`: Same as `submitPassword`, but with an encryption key that is usually derived from the password. This is mainly needed for MV3 compatibility.\r\n\r\nWe could do a couple of small improvements here:\r\n* We don’t necessarily need the `isUnlocked` method, as that should be easily accessible with `KeyringController.state.isUnlocked`: we can consider it as redundant.\r\n* `submitPassword` / `submitEncryptionKey`: we could take away some ambiguity, providing a unique method to unlock the wallet, and that could be, for simplicity, named `setUnlocked` (to reflect `setLocked`): this method should then provide a way to unlock the wallet using one of the two different possible methods (password / encryption key + salt).",
    "reactions": {
      "url": "https://api.github.com/repos/MetaMask/core/issues/comments/1916978148/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/MetaMask/core/issues/comments/1916978698",
    "html_url": "https://github.com/MetaMask/core/issues/3871#issuecomment-1916978698",
    "issue_url": "https://api.github.com/repos/MetaMask/core/issues/3871",
    "id": 1916978698,
    "node_id": "IC_kwDOCBB0Cc5yQsYK",
    "user": {
      "login": "mikesposito",
      "id": 34438276,
      "node_id": "MDQ6VXNlcjM0NDM4Mjc2",
      "avatar_url": "https://avatars.githubusercontent.com/u/34438276?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mikesposito",
      "html_url": "https://github.com/mikesposito",
      "followers_url": "https://api.github.com/users/mikesposito/followers",
      "following_url": "https://api.github.com/users/mikesposito/following{/other_user}",
      "gists_url": "https://api.github.com/users/mikesposito/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mikesposito/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mikesposito/subscriptions",
      "organizations_url": "https://api.github.com/users/mikesposito/orgs",
      "repos_url": "https://api.github.com/users/mikesposito/repos",
      "events_url": "https://api.github.com/users/mikesposito/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mikesposito/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2024-01-30T14:23:39Z",
    "updated_at": "2024-01-30T14:23:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "## Keep in sync its state with the state of each keyring\r\nThis is were things become a little more tricky. Currently, every time one of the “keyring actions” provided by the `KeyringController` (e.g. `addNewAccount`, `removeAccount`..) is executed, in case that action is considered to be mutating the state (e.g. an account is added or removed), each keyring is serialised, re-encrypted and saved into the vault, and its list of accounts is then replicated in the `KeyringController`’s state.\r\n\r\nThis mechanism is our strategy to keep the vault, the state of the `#keyrings`, and the `KeyringController` state all in sync. But what happens when a client calls some method on the keyring directly? Well, in that case the keyring would potentially mutate, but the vault and the `KeyringController` state would be left behind! \r\n\r\nUnfortunately, as we’ll observe in the next paragraph “Route action calls for a specific account to the corresponding keyring”, not all possible “keyring actions” are supported by the `KeyringController` API, and this leads to client needing to call methods on Keyrings directly, bypassing `KeyringController`: this is a real case scenario for Hardware Keyrings.\r\n\r\nThis is where the KeyringController’s  `persistAllKeyrings` method comes into play: it can be used by external clients to serialise all keyrings, save them encrypted into the vault, and reflect accounts held by them in the `KeyringController` state. The problem with that, as you can imagine, is that this moves this responsibility to clients.\r\n\r\nIncluding all possible supported methods in `KeyringController` would probably be the easiest solution, but would also do the exact opposite of what these observations are for.  \r\nAn alternative that would remove the need for a `persistAllKeyrings` method could be an event subscription between KeyringController and the single Keyrings included in the array: each Keyring could be an event emitter to which the KeyringController is subscribed to, and at each event emitted the KeyringController would execute the syncing operations. This way, clients don’t event have to know which method/action is going to mutate the state, because it will be kept in sync automatically, under the KeyringController’s hood.  ",
    "reactions": {
      "url": "https://api.github.com/repos/MetaMask/core/issues/comments/1916978698/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/MetaMask/core/issues/comments/1917069838",
    "html_url": "https://github.com/MetaMask/core/issues/3871#issuecomment-1917069838",
    "issue_url": "https://api.github.com/repos/MetaMask/core/issues/3871",
    "id": 1917069838,
    "node_id": "IC_kwDOCBB0Cc5yRCoO",
    "user": {
      "login": "mikesposito",
      "id": 34438276,
      "node_id": "MDQ6VXNlcjM0NDM4Mjc2",
      "avatar_url": "https://avatars.githubusercontent.com/u/34438276?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mikesposito",
      "html_url": "https://github.com/mikesposito",
      "followers_url": "https://api.github.com/users/mikesposito/followers",
      "following_url": "https://api.github.com/users/mikesposito/following{/other_user}",
      "gists_url": "https://api.github.com/users/mikesposito/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mikesposito/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mikesposito/subscriptions",
      "organizations_url": "https://api.github.com/users/mikesposito/orgs",
      "repos_url": "https://api.github.com/users/mikesposito/repos",
      "events_url": "https://api.github.com/users/mikesposito/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mikesposito/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2024-01-30T14:54:43Z",
    "updated_at": "2024-01-30T15:53:23Z",
    "author_association": "CONTRIBUTOR",
    "body": "## WIP: Route action calls for a specific account to the corresponding keyring\r\nAs already disclosed in the previous paragraphs, not all keyrings have the same features, and some of them present different APIs, in some cases very similar to each other, yet not identical. \r\n\r\nThe way clients went through these differences up until now has been to rely on these two methods that `KeyringController` provides:\r\n* `getKeyringForAccount` \r\n* `getKeyringsByType`\r\n\r\nThanks to the above methods, clients can get direct access to Keyring instances, and call methods directly on them, bypassing KeyringController API limits. \r\n\r\nA brilliant proposal from the accounts team aims to turn KeyringController into a router, forwarding requests to keyrings, routing them based on the targeted account: this would solve the issue completely: to make that an easier goal, we could cut off some of the `KeyringController` methods that are not particularly relevant, or that provide features that can be accessed or implemented in other ways.\r\n\r\n### Methods related to  the QR Keyring\r\nSome of the methods related to the QRKeyring are included in the `KeyringController`: this is somehow a privilege that the QRKeyring has over other _less standard_ keyrings, like other hardware keyrings. \r\nThese methods:\r\n* restoreQRKeyring\r\n* resetQRKeyringState\r\n* getQRKeyringState\r\n* submitQRCryptoHDKey\r\n* submitQRCryptoAccount\r\n* submitQRSignature\r\n* cancelQRSignRequest\r\n* cancelQRSynchronization\r\n* connectQRHardware\r\n* unlockQRHardwareWallet\r\nAre just exposing methods from the underlying QRKeyring instance. So, actually, if the client can use `getKeyringForAccount`, or `getKeyringsByType` (or even `getOrAddQRKeyring`), it can get access to the keyring directly and do the same. \r\n\r\nThere’s a caveat that is worth noting: currently, `KeyringController` is subscribed to events emitted by QRKeyring, as the extension uses those to display modals related to QR syncing and signing. This will probably make the QRKeyring trickier to align with other keyrings, and also `getOrAddQRKeyring` difficult to be removed along the others (as the event subscription happens in there). \r\nPerhaps, this would be easier if the event subscription between KeyringController and keyrings described in the previous paragraph “Keep in sync its state with the state of each keyring” is in place, as the QRKeyring will be able to use that channel to post its updates.\r\n\r\n### Methods related to HDKeyring\r\n`KeyringController` provides some methods that, based on their name, are used to add accounts, or create the initial vault. The `KeyringController` method naming is not clear though, as some methods are implicitly there for the HDKeyring which is considered the default keyring, and its builder is part of the KeyringController’s default keyring builders set (along with the Simple Keyring).   \r\n\r\nTo answer the question “Is there anything special in the actions executed on the primary (HD) keyring, compared to other keyrings?”, we should take a better look at these methods:\r\n* `createNewVaultAndKeychain`\r\n* `createNewVaultAndRestore`\r\n* `addNewAccount`\r\n* `verifySeedPhrase`\r\n* `exportSeedPhrase`\r\n\r\nThe HDKeyring is, as we said, the primary keyring. It has this nickname because it is the keyring that is currently created on the first vault creation or restore, through the first two methods listed: This behaviour is in the process of being changed by the accounts team, so this will probably no longer be the case.\r\n\r\nRegarding `addNewAccount`, the only special thing that we do compared to the general `addNewAccountForKeyring` is calling `KeyringController.verifySeedPhrase` , which verifies that all HD accounts can be recovered with the mnemonic held by the primary keyring instance: this is probably to cover some edge case, but might deserve some investigation to understand if that’s real useful when adding new accounts, and in case it is, if it should be somehow added also for other keyrings.\r\n\r\nLastly,  `exportSeedPhrase` is just exposing `.mnemonic` for the primary keyring, which again, can be accessed by using `getKeyringsByType` and accessing the keyring directly. \r\n\r\nGiven that, the answer to the question “Is there anything special in the actions executed on the primary (HD) keyring, compared to other keyrings?” is most likely No.\r\n\r\n### Methods related to SimpleKeyring\r\n\r\nWIP",
    "reactions": {
      "url": "https://api.github.com/repos/MetaMask/core/issues/comments/1917069838/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
