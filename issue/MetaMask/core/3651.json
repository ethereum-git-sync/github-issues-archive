{
  "url": "https://api.github.com/repos/MetaMask/core/issues/3651",
  "repository_url": "https://api.github.com/repos/MetaMask/core",
  "labels_url": "https://api.github.com/repos/MetaMask/core/issues/3651/labels{/name}",
  "comments_url": "https://api.github.com/repos/MetaMask/core/issues/3651/comments",
  "events_url": "https://api.github.com/repos/MetaMask/core/issues/3651/events",
  "html_url": "https://github.com/MetaMask/core/issues/3651",
  "id": 2038307610,
  "node_id": "I_kwDOCBB0Cc55fhsa",
  "number": 3651,
  "title": "Set TypeScript compiler options `--module`, `--moduleResolution` to `node16`/`nodenext`",
  "user": {
    "login": "MajorLift",
    "id": 34228073,
    "node_id": "MDQ6VXNlcjM0MjI4MDcz",
    "avatar_url": "https://avatars.githubusercontent.com/u/34228073?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/MajorLift",
    "html_url": "https://github.com/MajorLift",
    "followers_url": "https://api.github.com/users/MajorLift/followers",
    "following_url": "https://api.github.com/users/MajorLift/following{/other_user}",
    "gists_url": "https://api.github.com/users/MajorLift/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/MajorLift/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/MajorLift/subscriptions",
    "organizations_url": "https://api.github.com/users/MajorLift/orgs",
    "repos_url": "https://api.github.com/users/MajorLift/repos",
    "events_url": "https://api.github.com/users/MajorLift/events{/privacy}",
    "received_events_url": "https://api.github.com/users/MajorLift/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 5330766523,
      "node_id": "LA_kwDOCBB0Cc8AAAABPb0Kuw",
      "url": "https://api.github.com/repos/MetaMask/core/labels/team-shared-libraries",
      "name": "team-shared-libraries",
      "color": "c5def5",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 0,
  "created_at": "2023-12-12T18:08:46Z",
  "updated_at": "2023-12-13T05:27:12Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "## Motivation\r\n\r\n### `node16`/`nodenext`\r\n\r\n- TypeScript v4.7 introduced the `node16`/`nodenext` options for the `--module` and `--moduleResolution` compiler options.\r\n\r\n- We are currently at v4.8 using the `node` option for `moduleResolution`, which is deprecated starting from TypeScript v5.0. \r\n\r\n### `bundler`\r\n\r\n- v5.0 introduces the `bundler` option for better compatibility, but this isn't intended for usage with npm libraries that don't use a bundler to build and deploy.\r\n\r\n> On the other hand, if you’re writing a library that’s meant to be published on npm, using the bundler option can hide compatibility issues that may arise for your users who aren’t using a bundler. So in these cases, using the node16 or nodenext resolution options is likely to be a better path. \r\n\r\nhttps://www.typescriptlang.org/docs/handbook/release-notes/typescript-5-0.html#--moduleresolution-bundler\r\n\r\n- `bundler` requires `--module` to be `es2020`+ and looks for type declarations under `dist/esm/`. \r\n\r\n```ts\r\n    src/AccountsController.test.ts:6:28 - error TS7016: Could not find a declaration file for module '@metamask/snaps-utils'. '/home/runner/work/core/core/node_modules/@metamask/snaps-utils/dist/esm/index.js' implicitly has an 'any' type.\r\n      Try `npm i --save-dev @types/metamask__snaps-utils` if it exists or add a new declaration (.d.ts) file containing `declare module '@metamask/snaps-utils';`\r\n\r\n    6 import { SnapStatus } from '@metamask/snaps-utils';\r\n                                 ~~~~~~~~~~~~~~~~~~~~~~~\r\n```\r\n\r\n- [ ] TODO: Investigate feasibility of using `bundler` option with `tsup`\r\n\r\n## Explanation\r\n\r\nWe need to update `--module` and `--moduleResolution` to `node16` at minimum and preferably `nodenext` before we upgrade to TypeScript v5.0, but this entails a number of breaking changes:\r\n\r\n### Add file extensions to relative import\r\n\r\n> For example, in an ECMAScript module in Node.js, any relative import needs to include a file extension.\r\n> ```ts\r\n> // entry.mjs\r\n> import * as utils from \"./utils\";     // ❌ wrong - we need to include the file extension.\r\n> import * as utils from \"./utils.mjs\"; // ✅ works\r\n> ```\r\nhttps://www.typescriptlang.org/docs/handbook/release-notes/typescript-5-0.html#--moduleresolution-bundler\r\n\r\n### Convert to dynamic import\r\n\r\n> it’s worth noting that the only way to import ESM files from a CJS module is using dynamic import() calls. This can present challenges, but is the behavior in Node.js today.\r\n\r\nhttps://www.typescriptlang.org/docs/handbook/release-notes/typescript-4-7.html\r\nhttps://nodejs.org/api/esm.html#esm_interoperability_with_commonjs\r\n\r\n### Add \"type: module\" to package.json\r\n\r\n> That’s why TypeScript 4.7 introduces a new option called moduleDetection. moduleDetection can take on 3 values: \"auto\" (the default), \"legacy\" (the same behavior as 4.6 and prior), and \"force\".\r\n>\r\n> Under the mode \"auto\", TypeScript will not only look for import and export statements, but it will also check whether\r\n>\r\n> - the \"type\" field in package.json is set to \"module\" when running under --module nodenext/--module node16, and\r\n> - check whether the current file is a JSX file when running under --jsx react-jsx\r\n>\r\n> In cases where you want every file to be treated as a module, the \"force\" setting ensures that every non-declaration file is treated as a module. This will be true regardless of how module, moduleResolution, and jsx are configured.\r\n\r\nhttps://www.typescriptlang.org/docs/handbook/release-notes/typescript-4-7.html#control-over-module-detection\r\n\r\n### Move type declarations in dependencies to `dist/cjs/`\r\n\r\n```ts\r\n    src/AccountsController.test.ts:6:28 - error TS7016: Could not find a declaration file for module '@metamask/snaps-utils'. '/home/runner/work/core/core/node_modules/@metamask/snaps-utils/dist/cjs/index.js' implicitly has an 'any' type.\r\n      Try `npm i --save-dev @types/metamask__snaps-utils` if it exists or add a new declaration (.d.ts) file containing `declare module '@metamask/snaps-utils';`\r\n\r\n    6 import { SnapStatus } from '@metamask/snaps-utils';\r\n```",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/MetaMask/core/issues/3651/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/MetaMask/core/issues/3651/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[

]
