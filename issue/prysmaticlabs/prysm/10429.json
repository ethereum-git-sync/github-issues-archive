{
  "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/10429",
  "repository_url": "https://api.github.com/repos/prysmaticlabs/prysm",
  "labels_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/10429/labels{/name}",
  "comments_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/10429/comments",
  "events_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/10429/events",
  "html_url": "https://github.com/prysmaticlabs/prysm/issues/10429",
  "id": 1180207934,
  "node_id": "I_kwDOBvuov85GWIs-",
  "number": 10429,
  "title": "Improve testing/util BeaconState creation function options",
  "user": {
    "login": "kasey",
    "id": 489222,
    "node_id": "MDQ6VXNlcjQ4OTIyMg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/489222?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/kasey",
    "html_url": "https://github.com/kasey",
    "followers_url": "https://api.github.com/users/kasey/followers",
    "following_url": "https://api.github.com/users/kasey/following{/other_user}",
    "gists_url": "https://api.github.com/users/kasey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/kasey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/kasey/subscriptions",
    "organizations_url": "https://api.github.com/users/kasey/orgs",
    "repos_url": "https://api.github.com/users/kasey/repos",
    "events_url": "https://api.github.com/users/kasey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/kasey/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 802129908,
      "node_id": "MDU6TGFiZWw4MDIxMjk5MDg=",
      "url": "https://api.github.com/repos/prysmaticlabs/prysm/labels/Good%20First%20Issue",
      "name": "Good First Issue",
      "color": "7057ff",
      "default": false,
      "description": "Good for newcomers"
    },
    {
      "id": 2185788365,
      "node_id": "MDU6TGFiZWwyMTg1Nzg4MzY1",
      "url": "https://api.github.com/repos/prysmaticlabs/prysm/labels/Cleanup",
      "name": "Cleanup",
      "color": "9ffce6",
      "default": false,
      "description": "Code health!"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": {
    "login": "kasey",
    "id": 489222,
    "node_id": "MDQ6VXNlcjQ4OTIyMg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/489222?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/kasey",
    "html_url": "https://github.com/kasey",
    "followers_url": "https://api.github.com/users/kasey/followers",
    "following_url": "https://api.github.com/users/kasey/following{/other_user}",
    "gists_url": "https://api.github.com/users/kasey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/kasey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/kasey/subscriptions",
    "organizations_url": "https://api.github.com/users/kasey/orgs",
    "repos_url": "https://api.github.com/users/kasey/repos",
    "events_url": "https://api.github.com/users/kasey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/kasey/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "kasey",
      "id": 489222,
      "node_id": "MDQ6VXNlcjQ4OTIyMg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/489222?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kasey",
      "html_url": "https://github.com/kasey",
      "followers_url": "https://api.github.com/users/kasey/followers",
      "following_url": "https://api.github.com/users/kasey/following{/other_user}",
      "gists_url": "https://api.github.com/users/kasey/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kasey/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kasey/subscriptions",
      "organizations_url": "https://api.github.com/users/kasey/orgs",
      "repos_url": "https://api.github.com/users/kasey/repos",
      "events_url": "https://api.github.com/users/kasey/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kasey/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2022-03-25T00:54:24Z",
  "updated_at": "2022-07-02T03:57:59Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "### Background\r\nIn testing/util we have functions to help create BeaconState objects for testing purposes: `NewBeaconState`, `NewBeaconStateAltair`, `NewBeaconStateBellatrix`. (example)[https://github.com/prysmaticlabs/prysm/blob/develop/testing/util/state.go#L80]. These functions take options which are tied to the type of the state object they create. \r\n\r\n### Description\r\nModify `NewBeaconState`, `NewBeaconStateAltair`, `NewBeaconStateBellatrix` to accept the same functional option type (which would receive a value with the `state.BeaconState` interface). Then the same methods could be used across states creator functions. For example, populating the state object with a list of validators w/ a given balance for testing the weak subjectivity calculation.",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/10429/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/10429/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/1168911811",
    "html_url": "https://github.com/prysmaticlabs/prysm/issues/10429#issuecomment-1168911811",
    "issue_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/10429",
    "id": 1168911811,
    "node_id": "IC_kwDOBvuov85FrC3D",
    "user": {
      "login": "alexchenzl",
      "id": 2885415,
      "node_id": "MDQ6VXNlcjI4ODU0MTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2885415?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alexchenzl",
      "html_url": "https://github.com/alexchenzl",
      "followers_url": "https://api.github.com/users/alexchenzl/followers",
      "following_url": "https://api.github.com/users/alexchenzl/following{/other_user}",
      "gists_url": "https://api.github.com/users/alexchenzl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alexchenzl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alexchenzl/subscriptions",
      "organizations_url": "https://api.github.com/users/alexchenzl/orgs",
      "repos_url": "https://api.github.com/users/alexchenzl/repos",
      "events_url": "https://api.github.com/users/alexchenzl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alexchenzl/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-28T16:01:52Z",
    "updated_at": "2022-07-02T03:57:59Z",
    "author_association": "NONE",
    "body": "Hi @kasey , I'm trying to refactor these three functions to accept the same functional option type which would receive a value with the `state.BeaconState` interface, but I encountered an obstacle. I have two possible workarounds and want to hear your suggestion.\r\n\r\nThe current functional options are applied to corresponding ProtoBuf instances first, and then the expected `state.BeaconState` instances are generated from the ProtoBuf instances in the previous step. When a functional option receives a value with the `state.BeaconState `interface, for a normal `BeaconState` instance that has an internal ProtoBuf pointer, the functional option can be passed into the corresponding `InitializeFromProtoUnsafe` function and then applied to the internal ProtoBuf instance. But for a native `BeaconState` instance, this option has to be applied to the new created native `BeaconState` instance directly.\r\n\r\nAs a result, every functional option will need to be implemented twice. The first one is for the normal `BeaconSate` with an internal protobuf pointer, and the other one is for the corresponding native beacon state object.\r\n\r\nA brute-force workaround is to use an empty interface as the functional option's parameter type, but type conversion needs to be performed in the implementation of every functional option.\r\n\r\nAnother workaround is to add a new generic creation function with functional options. Though it didn't make the existing functions to accept a same functional option type,  the generic function could make it easier to create beacon states of different versions for various test cases.\r\n\r\n```\r\n// PbBeaconState is a type constraint with a union of all supported versions of protobuf beacon state types.\r\ntype PbBeaconState interface {\r\n    ethpb.BeaconState | ethpb.BeaconStateAltair | ethpb.BeaconStateBellatrix\r\n}\r\n\r\n// NewBeaconStateGeneric is a generic method to create a state.BeaconState.\r\nfunc NewBeaconStateGeneric[T PbBeaconState](initializer func(s *T), generator func(s *T) (state.BeaconState, error), options ...func(s *T) error) (state.BeaconState, error) {\r\n    seed := new(T)\r\n    // Initialize seed with default values\r\n    initializer(seed)\r\n    // Apply options to seed\r\n    for _, opt := range options {\r\n        err := opt(seed)\r\n        if err != nil {\r\n            return nil, err\r\n        }\r\n    }\r\n    // Generate a state.BeaconState object from the seed protobuf object\r\n    return generator(seed)\r\n}\r\n```\r\n\r\nThe above is the generic creation function. [Here](https://github.com/alexchenzl/prysm/blob/util-state-refactor/testing/util/state.go) is the complete refactored version of state.go for your reference.",
    "reactions": {
      "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/1168911811/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 1
    },
    "performed_via_github_app": null
  }
]
