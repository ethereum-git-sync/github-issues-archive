{
  "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/1307",
  "repository_url": "https://api.github.com/repos/prysmaticlabs/prysm",
  "labels_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/1307/labels{/name}",
  "comments_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/1307/comments",
  "events_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/1307/events",
  "html_url": "https://github.com/prysmaticlabs/prysm/issues/1307",
  "id": 398612355,
  "node_id": "MDU6SXNzdWUzOTg2MTIzNTU=",
  "number": 1307,
  "title": "Implement and Benchmark LMD Ghost Fork-Choice",
  "user": {
    "login": "rauljordan",
    "id": 5572669,
    "node_id": "MDQ6VXNlcjU1NzI2Njk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5572669?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/rauljordan",
    "html_url": "https://github.com/rauljordan",
    "followers_url": "https://api.github.com/users/rauljordan/followers",
    "following_url": "https://api.github.com/users/rauljordan/following{/other_user}",
    "gists_url": "https://api.github.com/users/rauljordan/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/rauljordan/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/rauljordan/subscriptions",
    "organizations_url": "https://api.github.com/users/rauljordan/orgs",
    "repos_url": "https://api.github.com/users/rauljordan/repos",
    "events_url": "https://api.github.com/users/rauljordan/events{/privacy}",
    "received_events_url": "https://api.github.com/users/rauljordan/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": {
    "url": "https://api.github.com/repos/prysmaticlabs/prysm/milestones/2",
    "html_url": "https://github.com/prysmaticlabs/prysm/milestone/2",
    "labels_url": "https://api.github.com/repos/prysmaticlabs/prysm/milestones/2/labels",
    "id": 3141842,
    "node_id": "MDk6TWlsZXN0b25lMzE0MTg0Mg==",
    "number": 2,
    "title": "Sapphire",
    "description": "The Sapphire Release: Goerli Testnet",
    "creator": {
      "login": "prestonvanloon",
      "id": 7246818,
      "node_id": "MDQ6VXNlcjcyNDY4MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7246818?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/prestonvanloon",
      "html_url": "https://github.com/prestonvanloon",
      "followers_url": "https://api.github.com/users/prestonvanloon/followers",
      "following_url": "https://api.github.com/users/prestonvanloon/following{/other_user}",
      "gists_url": "https://api.github.com/users/prestonvanloon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/prestonvanloon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/prestonvanloon/subscriptions",
      "organizations_url": "https://api.github.com/users/prestonvanloon/orgs",
      "repos_url": "https://api.github.com/users/prestonvanloon/repos",
      "events_url": "https://api.github.com/users/prestonvanloon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/prestonvanloon/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 0,
    "closed_issues": 171,
    "state": "closed",
    "created_at": "2018-02-25T21:23:32Z",
    "updated_at": "2020-02-04T15:38:04Z",
    "due_on": "2019-03-30T07:00:00Z",
    "closed_at": "2019-05-24T22:12:25Z"
  },
  "comments": 2,
  "created_at": "2019-01-13T02:31:03Z",
  "updated_at": "2019-03-16T14:21:26Z",
  "closed_at": "2019-03-16T14:21:26Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "Hi all,\r\n\r\nWe need to implement and benchmark a simple version of Latest Message Driven (LMD) GHOST (Greediest Heaviest Observed Sub-Tree) as a fork-choice algorithm for the beacon chain. As defined in the latest specification:\r\n\r\n### Spec Definition\r\n\r\nThe beacon chain fork choice rule is a hybrid that combines justification and finality with Latest Message Driven (LMD) Greediest Heaviest Observed SubTree (GHOST). At any point in time a validator v subjectively calculates the beacon chain head as follows.\r\n\r\n\r\n* Let `store` be the set of attestations and blocks that the [validator](#dfn-validator) `v` has observed and verified (in particular, block ancestors must be recursively verified). Attestations not part of any chain are still included in `store`.\r\n* Let `finalized_head` be the finalized block with the highest slot number. (A block `B` is finalized if there is a descendant of `B` in `store` the processing of which sets `B` as finalized.)\r\n* Let `justified_head` be the descendant of `finalized_head` with the highest slot number that has been justified for at least `EPOCH_LENGTH` slots. (A block `B` is justified if there is a descendant of `B` in `store` the processing of which sets `B` as justified.) If no such descendant exists set `justified_head` to `finalized_head`.\r\n* Let `get_ancestor(store, block, slot)` be the ancestor of `block` with slot number `slot`. The `get_ancestor` function can be defined recursively as `def get_ancestor(store, block, slot): return block if block.slot == slot else get_ancestor(store, store.get_parent(block), slot)`.\r\n* Let `get_latest_attestation(store, validator)` be the attestation with the highest slot number in `store` from `validator`. If several such attestations exist, use the one the [validator](#dfn-validator) `v` observed first.\r\n* Let `get_latest_attestation_target(store, validator)` be the target block in the attestation `get_latest_attestation(store, validator)`.\r\n* The head is `lmd_ghost(store, justified_head)` where the function `lmd_ghost` is defined below. Note that the implementation below is suboptimal; there are implementations that compute the head in time logarithmic in slot count.\r\n\r\n```python\r\ndef lmd_ghost(store, start):\r\n    validators = start.state.validator_registry\r\n    active_validators = [validators[i] for i in\r\n                         get_active_validator_indices(validators, start.state.slot)]\r\n    attestation_targets = [get_latest_attestation_target(store, validator)\r\n                           for validator in active_validators]\r\n    def get_vote_count(block):\r\n        return len([target for target in attestation_targets if\r\n                    get_ancestor(store, target, block.slot) == block])\r\n\r\n    head = start\r\n    while 1:\r\n        children = get_children(head)\r\n        if len(children) == 0:\r\n            return head\r\n        head = max(children, key=get_vote_count)\r\n```",
  "closed_by": {
    "login": "terencechain",
    "id": 21316537,
    "node_id": "MDQ6VXNlcjIxMzE2NTM3",
    "avatar_url": "https://avatars.githubusercontent.com/u/21316537?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/terencechain",
    "html_url": "https://github.com/terencechain",
    "followers_url": "https://api.github.com/users/terencechain/followers",
    "following_url": "https://api.github.com/users/terencechain/following{/other_user}",
    "gists_url": "https://api.github.com/users/terencechain/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/terencechain/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/terencechain/subscriptions",
    "organizations_url": "https://api.github.com/users/terencechain/orgs",
    "repos_url": "https://api.github.com/users/terencechain/repos",
    "events_url": "https://api.github.com/users/terencechain/events{/privacy}",
    "received_events_url": "https://api.github.com/users/terencechain/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/1307/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/1307/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/453798356",
    "html_url": "https://github.com/prysmaticlabs/prysm/issues/1307#issuecomment-453798356",
    "issue_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/1307",
    "id": 453798356,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1Mzc5ODM1Ng==",
    "user": {
      "login": "vbuterin",
      "id": 2230894,
      "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vbuterin",
      "html_url": "https://github.com/vbuterin",
      "followers_url": "https://api.github.com/users/vbuterin/followers",
      "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
      "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
      "organizations_url": "https://api.github.com/users/vbuterin/orgs",
      "repos_url": "https://api.github.com/users/vbuterin/repos",
      "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vbuterin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-13T03:14:12Z",
    "updated_at": "2019-01-13T03:14:12Z",
    "author_association": "NONE",
    "body": "Here's a python implementation that avoids going through the entire chain from start to end and cuts the complexity down to O(n * log^2(t)): https://github.com/ethereum/research/blob/master/clock_disparity/lmd_node.py#L229\r\n\r\nThough the above is not the only way to do it. Another possible approach is an \"online\" algorithm where you keep extra data that lets you compute an upper bound on how many blocks back you would have to recalculate (basically, at each height store the total deposits supporting that block minus the total deposits supporting its best competitor, and then decrease that value every time there are validator balance changes or a validator switches from supporting that chain to not supporting that chain, and recompute from that height when the value reaches zero). There's a large space of LMD GHOST optimizations that hasn't really been explored yet.",
    "reactions": {
      "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/453798356/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/473534391",
    "html_url": "https://github.com/prysmaticlabs/prysm/issues/1307#issuecomment-473534391",
    "issue_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/1307",
    "id": 473534391,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MzUzNDM5MQ==",
    "user": {
      "login": "terencechain",
      "id": 21316537,
      "node_id": "MDQ6VXNlcjIxMzE2NTM3",
      "avatar_url": "https://avatars.githubusercontent.com/u/21316537?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/terencechain",
      "html_url": "https://github.com/terencechain",
      "followers_url": "https://api.github.com/users/terencechain/followers",
      "following_url": "https://api.github.com/users/terencechain/following{/other_user}",
      "gists_url": "https://api.github.com/users/terencechain/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/terencechain/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/terencechain/subscriptions",
      "organizations_url": "https://api.github.com/users/terencechain/orgs",
      "repos_url": "https://api.github.com/users/terencechain/repos",
      "events_url": "https://api.github.com/users/terencechain/events{/privacy}",
      "received_events_url": "https://api.github.com/users/terencechain/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-16T14:21:26Z",
    "updated_at": "2019-03-16T14:21:26Z",
    "author_association": "MEMBER",
    "body": "Closed via #1933 see #1951 for further optimizations ",
    "reactions": {
      "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/473534391/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
