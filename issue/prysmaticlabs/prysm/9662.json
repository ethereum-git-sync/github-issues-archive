{
  "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/9662",
  "repository_url": "https://api.github.com/repos/prysmaticlabs/prysm",
  "labels_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/9662/labels{/name}",
  "comments_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/9662/comments",
  "events_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/9662/events",
  "html_url": "https://github.com/prysmaticlabs/prysm/issues/9662",
  "id": 1005730589,
  "node_id": "I_kwDOBvuov8478jsd",
  "number": 9662,
  "title": "Process attestations after processing block ",
  "user": {
    "login": "potuz",
    "id": 16044918,
    "node_id": "MDQ6VXNlcjE2MDQ0OTE4",
    "avatar_url": "https://avatars.githubusercontent.com/u/16044918?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/potuz",
    "html_url": "https://github.com/potuz",
    "followers_url": "https://api.github.com/users/potuz/followers",
    "following_url": "https://api.github.com/users/potuz/following{/other_user}",
    "gists_url": "https://api.github.com/users/potuz/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/potuz/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/potuz/subscriptions",
    "organizations_url": "https://api.github.com/users/potuz/orgs",
    "repos_url": "https://api.github.com/users/potuz/repos",
    "events_url": "https://api.github.com/users/potuz/events{/privacy}",
    "received_events_url": "https://api.github.com/users/potuz/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": {
    "login": "terencechain",
    "id": 21316537,
    "node_id": "MDQ6VXNlcjIxMzE2NTM3",
    "avatar_url": "https://avatars.githubusercontent.com/u/21316537?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/terencechain",
    "html_url": "https://github.com/terencechain",
    "followers_url": "https://api.github.com/users/terencechain/followers",
    "following_url": "https://api.github.com/users/terencechain/following{/other_user}",
    "gists_url": "https://api.github.com/users/terencechain/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/terencechain/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/terencechain/subscriptions",
    "organizations_url": "https://api.github.com/users/terencechain/orgs",
    "repos_url": "https://api.github.com/users/terencechain/repos",
    "events_url": "https://api.github.com/users/terencechain/events{/privacy}",
    "received_events_url": "https://api.github.com/users/terencechain/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "terencechain",
      "id": 21316537,
      "node_id": "MDQ6VXNlcjIxMzE2NTM3",
      "avatar_url": "https://avatars.githubusercontent.com/u/21316537?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/terencechain",
      "html_url": "https://github.com/terencechain",
      "followers_url": "https://api.github.com/users/terencechain/followers",
      "following_url": "https://api.github.com/users/terencechain/following{/other_user}",
      "gists_url": "https://api.github.com/users/terencechain/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/terencechain/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/terencechain/subscriptions",
      "organizations_url": "https://api.github.com/users/terencechain/orgs",
      "repos_url": "https://api.github.com/users/terencechain/repos",
      "events_url": "https://api.github.com/users/terencechain/events{/privacy}",
      "received_events_url": "https://api.github.com/users/terencechain/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 3,
  "created_at": "2021-09-23T18:33:06Z",
  "updated_at": "2021-09-23T22:58:49Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "# üêû Bug Report\r\n\r\n### The issue\r\nPrysm does not process early attestations in the current slot, but rather in the next slot. \r\n\r\n### Description of the problem\r\nConsider the following timeline\r\n\r\n1. Beacon node receives an attestation `A` for the current block, 1 second into the slot. \r\n2. Beacon node does not have the current block, so the attestation is put into a queue. \r\n3. Beacon node receives the block 3 seconds into the slot and processes it by 3.2 seconds. \r\n4. Beacon node receives an attestation `B` for the current block at 4.2 seconds and since it has the block it processes it immediately. \r\n\r\nThen the late attestation `B` is processed and gossiped, but the attestation `A` is not processed until the queue is cleared at the beginning of the next slot. \r\n\r\n### Detailed description of the problem:\r\nBlocks in prysm are handled by [onBlock](https://github.com/prysmaticlabs/prysm/blob/develop/beacon-chain/blockchain/process_block.go#L86), this function processes the block and the attestations within it, updates the head, the justification and finalized points, and performs fork-choice operations related to the new block we just synced. But it **does not call to clear attestation queues for this received slot**. \r\n\r\nThe way attestations are processed is by running a [routine](https://github.com/prysmaticlabs/prysm/blob/develop/beacon-chain/blockchain/receive_attestation.go#L101) that has the following loop in it\r\n\r\n```go\r\n       st := slots.NewSlotTicker(s.genesisTime, params.BeaconConfig().SecondsPerSlot)\r\n\tfor {\r\n\t\tselect {\r\n\t\tcase <-s.ctx.Done():\r\n\t\t\treturn\r\n\t\tcase <-st.C():\r\n\t\t\t// Continue when there's no fork choice attestation, there's nothing to process and update head.\r\n\t\t\t// This covers the condition when the node is still initial syncing to the head of the chain.\r\n\t\t\tif s.cfg.AttPool.ForkchoiceAttestationCount() == 0 {\r\n\t\t\t\tcontinue\r\n\t\t\t}\r\n\t\t\ts.processAttestations(s.ctx)\r\n\t\t\tif err := s.updateHead(s.ctx, s.getJustifiedBalances()); err != nil {\r\n\t\t\t\tlog.Warnf(\"Resolving fork due to new attestation: %v\", err)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n```\r\nThe key point is that 1) this happens once per slot because of the `NewSlotTicker` and 2) `processAttestations` is what handles the delay in processing them. \r\n\r\n### Possible solutions\r\n\r\nI can see two options here, the optimal solution from the perspective of the network, if feasible, would be to call `processAttestations` right after updating the head, for example it can be done [here](https://github.com/prysmaticlabs/prysm/blob/develop/beacon-chain/blockchain/receive_block.go#L54). \r\n\r\nOption 2 would be to at least make sure that we process these attestations sometime between 4 seconds and 7.5 seconds so as to at least give a minimal chance that these attestations will be seen by the aggregators of the current slot instead of the next one. \r\n\r\nOption 1 needs to be weighted against performance impact. I favor this option because of the following:\r\n \r\n- Right after processing a block and updating head, not a busy time for the beacon, in fact this problem happens more often in slot 0 and after receiving the block for slot 0 we have already finished epoch transition and are idle essentially. \r\n- It makes sure that it processes early attestations immediately and therefore gossips them and can alleviate the problem of slot 0 blocks being late. \r\n- In a highly forked situation, we may update the head wildly, but we will not be calling this extra processing more than once per slot anyway, so it does not provide us with a problem when we are highly forked. In the worst possible case of a context deadline, we will automatically revert to the previous behavior since the queue will be cleared in the next tick. \r\n\r\nOption 2 is simplistic but it provides minimum relief: we can just replace the tick there by `params.BeaconConfig().SecondsPerSlot / 2 ` and at least we would be gossiping 2 seconds before aggregation which gives some chances for those attestations. I tried on pyrmont attesting at that time and wasn't penalized. ",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/9662/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/9662/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/926196248",
    "html_url": "https://github.com/prysmaticlabs/prysm/issues/9662#issuecomment-926196248",
    "issue_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/9662",
    "id": 926196248,
    "node_id": "IC_kwDOBvuov843NKIY",
    "user": {
      "login": "potuz",
      "id": 16044918,
      "node_id": "MDQ6VXNlcjE2MDQ0OTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/16044918?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/potuz",
      "html_url": "https://github.com/potuz",
      "followers_url": "https://api.github.com/users/potuz/followers",
      "following_url": "https://api.github.com/users/potuz/following{/other_user}",
      "gists_url": "https://api.github.com/users/potuz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/potuz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/potuz/subscriptions",
      "organizations_url": "https://api.github.com/users/potuz/orgs",
      "repos_url": "https://api.github.com/users/potuz/repos",
      "events_url": "https://api.github.com/users/potuz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/potuz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-23T22:06:36Z",
    "updated_at": "2021-09-23T22:06:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "Just adding the info I got from Sproul and Sutton: both Lighthouse and Teku use something like the Option 1 I suggest here. ",
    "reactions": {
      "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/926196248/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/926204788",
    "html_url": "https://github.com/prysmaticlabs/prysm/issues/9662#issuecomment-926204788",
    "issue_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/9662",
    "id": 926204788,
    "node_id": "IC_kwDOBvuov843NMN0",
    "user": {
      "login": "terencechain",
      "id": 21316537,
      "node_id": "MDQ6VXNlcjIxMzE2NTM3",
      "avatar_url": "https://avatars.githubusercontent.com/u/21316537?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/terencechain",
      "html_url": "https://github.com/terencechain",
      "followers_url": "https://api.github.com/users/terencechain/followers",
      "following_url": "https://api.github.com/users/terencechain/following{/other_user}",
      "gists_url": "https://api.github.com/users/terencechain/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/terencechain/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/terencechain/subscriptions",
      "organizations_url": "https://api.github.com/users/terencechain/orgs",
      "repos_url": "https://api.github.com/users/terencechain/repos",
      "events_url": "https://api.github.com/users/terencechain/events{/privacy}",
      "received_events_url": "https://api.github.com/users/terencechain/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-23T22:18:00Z",
    "updated_at": "2021-09-23T22:58:49Z",
    "author_association": "MEMBER",
    "body": "Thanks for opening this issue! I agree option 1 is best",
    "reactions": {
      "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/926204788/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/926220215",
    "html_url": "https://github.com/prysmaticlabs/prysm/issues/9662#issuecomment-926220215",
    "issue_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/9662",
    "id": 926220215,
    "node_id": "IC_kwDOBvuov843NP-3",
    "user": {
      "login": "potuz",
      "id": 16044918,
      "node_id": "MDQ6VXNlcjE2MDQ0OTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/16044918?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/potuz",
      "html_url": "https://github.com/potuz",
      "followers_url": "https://api.github.com/users/potuz/followers",
      "following_url": "https://api.github.com/users/potuz/following{/other_user}",
      "gists_url": "https://api.github.com/users/potuz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/potuz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/potuz/subscriptions",
      "organizations_url": "https://api.github.com/users/potuz/orgs",
      "repos_url": "https://api.github.com/users/potuz/repos",
      "events_url": "https://api.github.com/users/potuz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/potuz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-23T22:56:16Z",
    "updated_at": "2021-09-23T22:56:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "After takling to @terencechain he showed me that actually we do already do Option 2 and exactly with the same timings (I missed this call), it's [here](https://github.com/prysmaticlabs/prysm/blob/develop/beacon-chain/sync/pending_attestations_queue.go#L23)\r\n```go\r\n// This defines how often a node cleans up and processes pending attestations in the queue.\r\nvar processPendingAttsPeriod = slots.DivideSlotBy(2 /* twice per slot */)\r\n```\r\nThis also shows why it's so subtle to trigger this issue that it's very hard to catch. ",
    "reactions": {
      "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/926220215/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
