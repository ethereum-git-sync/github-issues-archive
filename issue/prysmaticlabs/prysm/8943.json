{
  "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/8943",
  "repository_url": "https://api.github.com/repos/prysmaticlabs/prysm",
  "labels_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/8943/labels{/name}",
  "comments_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/8943/comments",
  "events_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/8943/events",
  "html_url": "https://github.com/prysmaticlabs/prysm/issues/8943",
  "id": 902315686,
  "node_id": "MDU6SXNzdWU5MDIzMTU2ODY=",
  "number": 8943,
  "title": "Asynchronously Prepare Block Proposals",
  "user": {
    "login": "nisdas",
    "id": 33201827,
    "node_id": "MDQ6VXNlcjMzMjAxODI3",
    "avatar_url": "https://avatars.githubusercontent.com/u/33201827?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nisdas",
    "html_url": "https://github.com/nisdas",
    "followers_url": "https://api.github.com/users/nisdas/followers",
    "following_url": "https://api.github.com/users/nisdas/following{/other_user}",
    "gists_url": "https://api.github.com/users/nisdas/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nisdas/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nisdas/subscriptions",
    "organizations_url": "https://api.github.com/users/nisdas/orgs",
    "repos_url": "https://api.github.com/users/nisdas/repos",
    "events_url": "https://api.github.com/users/nisdas/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nisdas/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 802129906,
      "node_id": "MDU6TGFiZWw4MDIxMjk5MDY=",
      "url": "https://api.github.com/repos/prysmaticlabs/prysm/labels/Enhancement",
      "name": "Enhancement",
      "color": "84b6eb",
      "default": false,
      "description": "New feature or request"
    },
    {
      "id": 1241586918,
      "node_id": "MDU6TGFiZWwxMjQxNTg2OTE4",
      "url": "https://api.github.com/repos/prysmaticlabs/prysm/labels/Tracking",
      "name": "Tracking",
      "color": "d0ff7f",
      "default": false,
      "description": "Gotta Catch 'Em All"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": {
    "login": "jmozah",
    "id": 940575,
    "node_id": "MDQ6VXNlcjk0MDU3NQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/940575?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jmozah",
    "html_url": "https://github.com/jmozah",
    "followers_url": "https://api.github.com/users/jmozah/followers",
    "following_url": "https://api.github.com/users/jmozah/following{/other_user}",
    "gists_url": "https://api.github.com/users/jmozah/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jmozah/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jmozah/subscriptions",
    "organizations_url": "https://api.github.com/users/jmozah/orgs",
    "repos_url": "https://api.github.com/users/jmozah/repos",
    "events_url": "https://api.github.com/users/jmozah/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jmozah/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "jmozah",
      "id": 940575,
      "node_id": "MDQ6VXNlcjk0MDU3NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/940575?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jmozah",
      "html_url": "https://github.com/jmozah",
      "followers_url": "https://api.github.com/users/jmozah/followers",
      "following_url": "https://api.github.com/users/jmozah/following{/other_user}",
      "gists_url": "https://api.github.com/users/jmozah/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jmozah/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jmozah/subscriptions",
      "organizations_url": "https://api.github.com/users/jmozah/orgs",
      "repos_url": "https://api.github.com/users/jmozah/repos",
      "events_url": "https://api.github.com/users/jmozah/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jmozah/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 0,
  "created_at": "2021-05-26T12:29:06Z",
  "updated_at": "2022-07-07T21:44:41Z",
  "closed_at": null,
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "# ðŸ’Ž Issue\r\n\r\n### Background\r\n\r\nCurrently a validator prepares a block synchronously, it receives its assignment and then when it comes on time for it to propose it \r\npackages all relevant attestations,deposits, etc and then finally broadcasts the block. While this process is optimized to pack attestations as quickly as possible and have a more efficient deposit trie generated , doing all these in lock-step does cause issues. If for any reason any part of our block proposal routine takes longer than usual this can lead to a late broadcast and in the worst case an orphaned block.\r\n\r\nWith the merge coming up soon, optimizing our block proposal process will be more important as retrieving the execution payload will add a non-trivial amount of time to the block proposal process. \r\n \r\n### Description\r\n\r\nOne solution would be to keep all these objects 'hot' . Fetching attestations/deposits should simply involve reaching directly into a pre-computed list and fetching up till the maximum limit.\r\n\r\n- Attestations would be continuously validated and processed in a pre-proposal pool. This would be run in a separate routine which would run on a per slot basis(or any other sensible time period). The attestations would be packed and verified before hand, and then placed into this pool.\r\n\r\n- Deposits would be easily retrievable from a deposit pool. There would be a separate deposit routine which would be on the lookout for any eth1data changes. Depending on that, it would rebuild the trie based on the newly voted eth1data. With this trie, you could simply arrange all valid deposits for that period and make it much faster for a proposer to fetch in the required amount of deposits.\r\n\r\n### Open Questions\r\n\r\n- Would having these background routines lead to higher than expected resource usage ? The process of packing attestations and generating deposit tries are not cheap. Having this happen continuously ( rather than sparsely) might have a negative effect on general beacon node performance.\r\n\r\n - What would be the expected improvements for the average validator in terms of time to proposal ?\r\n\r\n - How effective would it be given that attestations have a tight boundary to arrive in .( for the smallest inclusion distance and higher reward)\r\n  - Given how sensitive this part of the codebase is, are there any possible adverse effects to the network by having block proposals this way ? ( ex: higher inclusion distances for validators)\r\n  ",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/8943/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/8943/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[

]
