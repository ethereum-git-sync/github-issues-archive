{
  "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/9883",
  "repository_url": "https://api.github.com/repos/prysmaticlabs/prysm",
  "labels_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/9883/labels{/name}",
  "comments_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/9883/comments",
  "events_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/9883/events",
  "html_url": "https://github.com/prysmaticlabs/prysm/issues/9883",
  "id": 1049375434,
  "node_id": "I_kwDOBvuov84-jDLK",
  "number": 9883,
  "title": "Re-Think and Refactor Prysm's Wallet/Keymanager Code",
  "user": {
    "login": "rauljordan",
    "id": 5572669,
    "node_id": "MDQ6VXNlcjU1NzI2Njk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5572669?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/rauljordan",
    "html_url": "https://github.com/rauljordan",
    "followers_url": "https://api.github.com/users/rauljordan/followers",
    "following_url": "https://api.github.com/users/rauljordan/following{/other_user}",
    "gists_url": "https://api.github.com/users/rauljordan/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/rauljordan/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/rauljordan/subscriptions",
    "organizations_url": "https://api.github.com/users/rauljordan/orgs",
    "repos_url": "https://api.github.com/users/rauljordan/repos",
    "events_url": "https://api.github.com/users/rauljordan/events{/privacy}",
    "received_events_url": "https://api.github.com/users/rauljordan/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 802129907,
      "node_id": "MDU6TGFiZWw4MDIxMjk5MDc=",
      "url": "https://api.github.com/repos/prysmaticlabs/prysm/labels/Help%20Wanted",
      "name": "Help Wanted",
      "color": "33aa3f",
      "default": false,
      "description": "Extra attention is needed"
    },
    {
      "id": 1085357407,
      "node_id": "MDU6TGFiZWwxMDg1MzU3NDA3",
      "url": "https://api.github.com/repos/prysmaticlabs/prysm/labels/Priority:%20Medium",
      "name": "Priority: Medium",
      "color": "bbf726",
      "default": false,
      "description": "Medium priority item"
    },
    {
      "id": 1241586918,
      "node_id": "MDU6TGFiZWwxMjQxNTg2OTE4",
      "url": "https://api.github.com/repos/prysmaticlabs/prysm/labels/Tracking",
      "name": "Tracking",
      "color": "d0ff7f",
      "default": false,
      "description": "Gotta Catch 'Em All"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2021-11-10T04:00:08Z",
  "updated_at": "2022-08-15T21:14:55Z",
  "closed_at": "2022-08-15T21:14:54Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "## Summary\r\n\r\nPrysm's wallet/keymanager code is a mess with low separation of concerns, mixing business logic with CLI flag parsing, lack of extensible abstractions, and difficult to refactor. This issue outlines the problems of the code and desired changes when refactoring. External contributors are welcome to take this up.\r\n\r\n## Background\r\n\r\nIn the Prysm validator client, we currently use an abstraction called a `Keymanager`, which defines some entity that can \"manage keys\". Essentially, listing validating public keys, deleting keys, subscribing to key changes, and most importantly, signing data using private keys. During the validator's runtime, we interact with the `Keymanager` to sign data as we produce blocks and attestations. It makes sense to have this separation of concerns because when running a validator, we don't care about how we're signing data or where we're retrieving them from, just that we indeed do those things. Some users might prefer to use a **remote signing server** that handles the keys and the signing, while others might be ok with keeping keys locally in the same machine and signing data from private keys stored on disk.\r\n\r\nAt runtime, there are multiple kinds of `Keymanager` implementations and a user can select one as their preferred one. For example, using some command-line flags, a user can specify they wish to use a remote keymanager server. Using a Go interface to represent a Keymanager is a good idea as all keymanagers do the same thing, despite having different implementations. Unfortunately, **it is difficult to extend the keymanager functionality today**. The interface serves no purpose as there is a lot of code that depends on implementation details, therefore making the abstraction brittle.\r\n\r\nWe need to eventually **refactor** our keymanager/wallet code to use proper abstractions and separation of concerns. A design document explaining this problem can be found [here](https://prysmaticlabs.notion.site/Open-Closed-Principle-Applied-to-Prysm-s-Wallet-Keymanager-900393aa4cb243f5aead5578c8e801d7). \r\n\r\n## Requirements\r\n\r\n### Follow the open/closed principle of SOLID software design for keymanagers\r\n\r\nWe want to avoid all instances of the following kind of code:\r\n\r\n```go\r\nfunc DeleteAccount(ctx context.Context, cfg *Config) error {\r\n\tswitch cfg.Wallet.KeymanagerKind() {\r\n\tcase keymanager.Remote:\r\n          // Do something specific.\r\n        case keymanager.Imported:\r\n          // Do something specific.\r\n        case keymanager.Derived:\r\n          // Do something specific.\r\n...\r\n```\r\nand instead use the actual interface abstraction. We should be able to simply call `keymanager.DeleteKeys()` and it should work without us needing to make specific checks about the type of keymanager being used. If the keymanager does not support deleting keys, the method should simply return an error. This keeps our code clean the keymanager interface extensible.\r\n\r\n### We should define a keymanager interface via composition of functionality\r\n\r\nSomething like the following is preferable for keymanager abstractions\r\n```go\r\ntype Keymanager interface {\r\n\tPublicKeysFetcher\r\n\tSigner\r\n\tKeyChangeSubscriber\r\n}\r\n\r\n// KeysFetcher for validating private and public keys.\r\ntype KeysFetcher interface {\r\n\tFetchValidatingPrivateKeys(ctx context.Context) ([][32]byte, error)\r\n\tPublicKeysFetcher\r\n}\r\n\r\n// PublicKeysFetcher for validating public keys.\r\ntype PublicKeysFetcher interface {\r\n\tFetchValidatingPublicKeys(ctx context.Context) ([][48]byte, error)\r\n}\r\n\r\n// Signer allows signing messages using a validator private key.\r\ntype Signer interface {\r\n\tSign(context.Context, *validatorpb.SignRequest) (bls.Signature, error)\r\n}\r\n\r\n// Importer can import new keystores into the keymanager.\r\ntype Importer interface {\r\n\tImportKeystores(ctx context.Context, keystores []*Keystore, importsPassword string) error\r\n}\r\n\r\n// KeyChangeSubscriber allows subscribing to changes made to the underlying keys.\r\ntype KeyChangeSubscriber interface {\r\n\tSubscribeAccountChanges(pubKeysChan chan [][48]byte) event.Subscription\r\n}\r\n```\r\nBy using interface composition, we can assert whether a keymanager supports a certain kind of functionality at runtime rather than checking the implementation of the interface via messy conditionals.\r\n\r\n### Separate CLI parsing from business logic\r\n\r\n**Current State**\r\nA lot of our code in `validator/accounts` relies on the command-line context and parsing of CLI flags mixed with actual business logic of performing wallet operations. The following code, for example, is messy and hard to refactor:\r\n\r\n```go\r\nfunc ListAccountsCli(cliCtx *cli.Context) error {\r\n\tw, err := wallet.OpenWalletOrElseCli(cliCtx, func(cliCtx *cli.Context) (*wallet.Wallet, error) {\r\n\t\treturn nil, wallet.ErrNoWalletFound\r\n\t})\r\n\tif err != nil {\r\n\t\treturn errors.Wrap(err, \"could not open wallet\")\r\n\t}\r\n\tkm, err := w.InitializeKeymanager(cliCtx.Context, iface.InitKeymanagerConfig{ListenForChanges: false})\r\n\tif err != nil && strings.Contains(err.Error(), keymanager.IncorrectPasswordErrMsg) {\r\n\t\treturn errors.New(\"wrong wallet password entered\")\r\n\t}\r\n\tif err != nil {\r\n\t\treturn errors.Wrap(err, ErrCouldNotInitializeKeymanager)\r\n\t}\r\n\tshowDepositData := cliCtx.Bool(flags.ShowDepositDataFlag.Name)\r\n\tshowPrivateKeys := cliCtx.Bool(flags.ShowPrivateKeysFlag.Name)\r\n\tlistIndices := cliCtx.Bool(flags.ListValidatorIndices.Name)\r\n...\r\n```\r\n\r\n**Desired State**\r\n\r\nWe should instead separate the parsing of CLI flags from the business logic of every function in `validator/accounts`. See PR #9881, discontinued for now, as a reference on what we want to accomplish. We should follow the approach of that PR for every function in `validator/accounts`, but it will take time.\r\n\r\n## Allow for easy support for new kinds of keymanagers\r\n\r\nAdding a new keymanager in Prysm should be as easy as:\r\n\r\n1. Implementing a struct that implements the `Keymanager` interface\r\n2. Registering it at runtime via some CLI flag\r\n\r\nDevelopers writing the keymanager need not fix and include the keymanager across a bunch of different parts of the codebase. Today, a lot of places require type assertion and checks on the kind of keymanager being used.\r\n\r\n## Get rid of the concept of a `derived` keymanager\r\n\r\nWe have three keymanagers in Prysm: imported, derived, remote. Derived is just an imported keymanager that has support for recovering keys from a mnemonic, and actually has all functions passthrough into the imported keymanager implementation. This is a waste and we should remove this.\r\n\r\n## Rename `imported` keymanager to `local`\r\n\r\n`Imported` is a weird name. We should instead call it `local`, as it is using local disk to manage keys.",
  "closed_by": {
    "login": "rauljordan",
    "id": 5572669,
    "node_id": "MDQ6VXNlcjU1NzI2Njk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5572669?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/rauljordan",
    "html_url": "https://github.com/rauljordan",
    "followers_url": "https://api.github.com/users/rauljordan/followers",
    "following_url": "https://api.github.com/users/rauljordan/following{/other_user}",
    "gists_url": "https://api.github.com/users/rauljordan/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/rauljordan/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/rauljordan/subscriptions",
    "organizations_url": "https://api.github.com/users/rauljordan/orgs",
    "repos_url": "https://api.github.com/users/rauljordan/repos",
    "events_url": "https://api.github.com/users/rauljordan/events{/privacy}",
    "received_events_url": "https://api.github.com/users/rauljordan/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/9883/reactions",
    "total_count": 1,
    "+1": 1,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/9883/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/1215828703",
    "html_url": "https://github.com/prysmaticlabs/prysm/issues/9883#issuecomment-1215828703",
    "issue_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/9883",
    "id": 1215828703,
    "node_id": "IC_kwDOBvuov85IeBLf",
    "user": {
      "login": "rauljordan",
      "id": 5572669,
      "node_id": "MDQ6VXNlcjU1NzI2Njk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5572669?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rauljordan",
      "html_url": "https://github.com/rauljordan",
      "followers_url": "https://api.github.com/users/rauljordan/followers",
      "following_url": "https://api.github.com/users/rauljordan/following{/other_user}",
      "gists_url": "https://api.github.com/users/rauljordan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rauljordan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rauljordan/subscriptions",
      "organizations_url": "https://api.github.com/users/rauljordan/orgs",
      "repos_url": "https://api.github.com/users/rauljordan/repos",
      "events_url": "https://api.github.com/users/rauljordan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rauljordan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-15T21:14:54Z",
    "updated_at": "2022-08-15T21:14:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks to @michaelneuder , I consider this closed, as now our keymanager code is far more robust with its use of interfaces! Thank you so much for making this really solid",
    "reactions": {
      "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/1215828703/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
