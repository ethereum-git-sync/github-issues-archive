{
  "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/10519",
  "repository_url": "https://api.github.com/repos/prysmaticlabs/prysm",
  "labels_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/10519/labels{/name}",
  "comments_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/10519/comments",
  "events_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/10519/events",
  "html_url": "https://github.com/prysmaticlabs/prysm/issues/10519",
  "id": 1203778600,
  "node_id": "I_kwDOBvuov85HwDQo",
  "number": 10519,
  "title": "Proposal for Consensus Type Consistency in Prysm",
  "user": {
    "login": "rauljordan",
    "id": 5572669,
    "node_id": "MDQ6VXNlcjU1NzI2Njk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5572669?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/rauljordan",
    "html_url": "https://github.com/rauljordan",
    "followers_url": "https://api.github.com/users/rauljordan/followers",
    "following_url": "https://api.github.com/users/rauljordan/following{/other_user}",
    "gists_url": "https://api.github.com/users/rauljordan/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/rauljordan/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/rauljordan/subscriptions",
    "organizations_url": "https://api.github.com/users/rauljordan/orgs",
    "repos_url": "https://api.github.com/users/rauljordan/repos",
    "events_url": "https://api.github.com/users/rauljordan/events{/privacy}",
    "received_events_url": "https://api.github.com/users/rauljordan/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 934596141,
      "node_id": "MDU6TGFiZWw5MzQ1OTYxNDE=",
      "url": "https://api.github.com/repos/prysmaticlabs/prysm/labels/Discussion",
      "name": "Discussion",
      "color": "f9d0c4",
      "default": false,
      "description": "Simply a thread for talking about stuff"
    },
    {
      "id": 1085357407,
      "node_id": "MDU6TGFiZWwxMDg1MzU3NDA3",
      "url": "https://api.github.com/repos/prysmaticlabs/prysm/labels/Priority:%20Medium",
      "name": "Priority: Medium",
      "color": "bbf726",
      "default": false,
      "description": "Medium priority item"
    },
    {
      "id": 2185788365,
      "node_id": "MDU6TGFiZWwyMTg1Nzg4MzY1",
      "url": "https://api.github.com/repos/prysmaticlabs/prysm/labels/Cleanup",
      "name": "Cleanup",
      "color": "9ffce6",
      "default": false,
      "description": "Code health!"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2022-04-13T20:51:16Z",
  "updated_at": "2022-05-13T03:27:03Z",
  "closed_at": "2022-05-13T03:27:03Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "# Background\r\n\r\nSee the associated design document [here](https://www.notion.so/prysmaticlabs/Proposal-for-Consensus-Type-Consistency-in-Prysm-b5c085e5ab734a2c8ba09fbaa50c0fbe).\r\n\r\nEnsuring consistency in the type system used in our Ethereum consensus client is critical to prevent bugs, deduplicate code, and ensure we leverage the strength of the Go compiler to its best capacity. We successfully migrated from using primitive types, such as `uint64`, for some of the most critical parts of Ethereum consensus, using custom type aliases as slots, epochs, validator indices, and more. For this, we created a new project called [eth2-types](https://github.com/prysmaticlabs/eth2-types), which adds these aliases for primitives and supports abstractions for both **safe math** and **SSZ** (simple serialize). This makes them a joy to use in Prysm, keeping our code safer and cleaner.\r\n\r\nFor more sophisticated types, such as consensus data structures encompassing beacon blocks, attestations, and more, we rely on [protocol buffer](https://developers.google.com/protocol-buffers) schemas with [generated code](https://sourcegraph.com/github.com/prysmaticlabs/prysm@develop/-/blob/proto/prysm/v1alpha1/attestation.pb.go) we use throughout our codebase. The idea behind protobufs used for everything is that they allow us to write a schema once, and use the generated code everywhere.\r\n\r\nHowever, we have experienced that consensus types, such as beacon blocks, **have different versions depending on hard forks**. Today, we define each type as a different protobuf. The way we differentiate network works across the codebase is through type assertions or switch statements, which leak implementation details to other calls in the codebase. **This is a problem**. For example,\r\n\r\n```go\r\nswitch block.Version() {\r\ncase BellatrixVersion:\r\n\tresult, err := ProcessBellatrixXOperation()\r\ncase AltairVersion:\r\n\tresult, err := ProcessAltairXOperation()\r\ncase Phase0:\r\n\tresult, err := ProcessPhase0XOperation()\r\n}\r\n```\r\n\r\nThis makes it very hard to add new forks to the codebase, as forgetting even a single switch statement could lead to a consensus failure, or errors at runtime. Instead, these operations could be simplified by becoming a part of a beacon block interface used in our codebase:\r\n\r\n```go\r\ntype BeaconBlock interface {\r\n  ProcessXOperation()\r\n\t...\r\n}\r\n```\r\n\r\nHaving custom types, consolidating in a single place, gives us the flexibility to add in new methods to further simplify our codebase.\r\n\r\n## Proposal\r\n\r\nInstead, we propose consolidating consensus types of Prysm into a top-level folder that will be used for the following purposes:\r\n\r\n1. Defining primitives\r\n    1. This means moving the primitives from eth2-types into the package\r\n2. Defining consensus type interfaces to help support multiple fork versions\r\n    1. Defining consensus types as composable interfaces is the most idiomatic Go design pattern. This allows us to attach methods to types, such as SSZ Marshal/Unmarshal, as well as fork-specific processing operations. For example, some operations may differ when it comes to processing slashing operations from phase0 vs. altair blocks, and the cleanest way to handle this is to use an interface method\r\n\r\nHereâ€™s what the folder would look like:\r\n\r\n```\r\nconsensus-types/\r\n\tprimitives/\r\n\t\tslot.go\r\n\t\t...\r\n\tforks/\r\n\t\tphase0/\r\n\t\t\tblocks.go     // Concrete types for phase0.\r\n\t\t\toperations.go // Processing pipelines.\r\n\t\taltair/\r\n\t\t\t...\r\n\t\tbellatrix/\r\n\t\t\t...\r\n\tblocks.go   // Interfaces\r\n\tstate.go\r\n```\r\n\r\nFor a full discussion on the pros and cons of this approach, see the design document [here](https://www.notion.so/prysmaticlabs/Proposal-for-Consensus-Type-Consistency-in-Prysm-b5c085e5ab734a2c8ba09fbaa50c0fbe)",
  "closed_by": {
    "login": "rauljordan",
    "id": 5572669,
    "node_id": "MDQ6VXNlcjU1NzI2Njk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5572669?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/rauljordan",
    "html_url": "https://github.com/rauljordan",
    "followers_url": "https://api.github.com/users/rauljordan/followers",
    "following_url": "https://api.github.com/users/rauljordan/following{/other_user}",
    "gists_url": "https://api.github.com/users/rauljordan/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/rauljordan/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/rauljordan/subscriptions",
    "organizations_url": "https://api.github.com/users/rauljordan/orgs",
    "repos_url": "https://api.github.com/users/rauljordan/repos",
    "events_url": "https://api.github.com/users/rauljordan/events{/privacy}",
    "received_events_url": "https://api.github.com/users/rauljordan/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/10519/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/10519/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/1125621516",
    "html_url": "https://github.com/prysmaticlabs/prysm/issues/10519#issuecomment-1125621516",
    "issue_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/10519",
    "id": 1125621516,
    "node_id": "IC_kwDOBvuov85DF58M",
    "user": {
      "login": "rauljordan",
      "id": 5572669,
      "node_id": "MDQ6VXNlcjU1NzI2Njk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5572669?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rauljordan",
      "html_url": "https://github.com/rauljordan",
      "followers_url": "https://api.github.com/users/rauljordan/followers",
      "following_url": "https://api.github.com/users/rauljordan/following{/other_user}",
      "gists_url": "https://api.github.com/users/rauljordan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rauljordan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rauljordan/subscriptions",
      "organizations_url": "https://api.github.com/users/rauljordan/orgs",
      "repos_url": "https://api.github.com/users/rauljordan/repos",
      "events_url": "https://api.github.com/users/rauljordan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rauljordan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-13T03:27:03Z",
    "updated_at": "2022-05-13T03:27:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "Pretty much done!",
    "reactions": {
      "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/1125621516/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
