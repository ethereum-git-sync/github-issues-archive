{
  "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/7985",
  "repository_url": "https://api.github.com/repos/prysmaticlabs/prysm",
  "labels_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/7985/labels{/name}",
  "comments_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/7985/comments",
  "events_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/7985/events",
  "html_url": "https://github.com/prysmaticlabs/prysm/issues/7985",
  "id": 752521616,
  "node_id": "MDU6SXNzdWU3NTI1MjE2MTY=",
  "number": 7985,
  "title": "Check on-chain for attestations at validator launch",
  "user": {
    "login": "potuz",
    "id": 16044918,
    "node_id": "MDQ6VXNlcjE2MDQ0OTE4",
    "avatar_url": "https://avatars.githubusercontent.com/u/16044918?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/potuz",
    "html_url": "https://github.com/potuz",
    "followers_url": "https://api.github.com/users/potuz/followers",
    "following_url": "https://api.github.com/users/potuz/following{/other_user}",
    "gists_url": "https://api.github.com/users/potuz/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/potuz/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/potuz/subscriptions",
    "organizations_url": "https://api.github.com/users/potuz/orgs",
    "repos_url": "https://api.github.com/users/potuz/repos",
    "events_url": "https://api.github.com/users/potuz/events{/privacy}",
    "received_events_url": "https://api.github.com/users/potuz/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 934596141,
      "node_id": "MDU6TGFiZWw5MzQ1OTYxNDE=",
      "url": "https://api.github.com/repos/prysmaticlabs/prysm/labels/Discussion",
      "name": "Discussion",
      "color": "f9d0c4",
      "default": false,
      "description": "Simply a thread for talking about stuff"
    },
    {
      "id": 1085357407,
      "node_id": "MDU6TGFiZWwxMDg1MzU3NDA3",
      "url": "https://api.github.com/repos/prysmaticlabs/prysm/labels/Priority:%20Medium",
      "name": "Priority: Medium",
      "color": "bbf726",
      "default": false,
      "description": "Medium priority item"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 29,
  "created_at": "2020-11-28T01:02:53Z",
  "updated_at": "2021-07-02T04:11:09Z",
  "closed_at": "2021-07-02T04:11:09Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "# ðŸš€ Feature Request\r\n\r\n### Description\r\nIn the event of having a corrupted `validator.db` an easy and cheap safeguard would be to grab attestations from the last 3 epochs from the beacon-node and check if the validating indexes appear there. This would prevent having a double attestation in most cases. This test can be run only at launchtime and if the validator.db does not show any activity for the last/current epoch. So that the impact will be minimal in long running validators. \r\n\r\n\r\nI'd like to see what the team think of possible design patterns before submitting a PR, but I think this can be as easy as pulling the last 3 epochs blocks from the node, and comparing the attestations for the indexes of the validating accounts. And stopping if something is found on-chain that is not found on the `validator.db` with a possible flag `--disable-launchtime-check` or whatever to override this behavior. \r\n\r\n### Additional Info\r\n\r\nDiscussion in Discord: https://discord.com/channels/476244492043812875/730447046930071672/782041664327909417\r\n",
  "closed_by": {
    "login": "nisdas",
    "id": 33201827,
    "node_id": "MDQ6VXNlcjMzMjAxODI3",
    "avatar_url": "https://avatars.githubusercontent.com/u/33201827?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nisdas",
    "html_url": "https://github.com/nisdas",
    "followers_url": "https://api.github.com/users/nisdas/followers",
    "following_url": "https://api.github.com/users/nisdas/following{/other_user}",
    "gists_url": "https://api.github.com/users/nisdas/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nisdas/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nisdas/subscriptions",
    "organizations_url": "https://api.github.com/users/nisdas/orgs",
    "repos_url": "https://api.github.com/users/nisdas/repos",
    "events_url": "https://api.github.com/users/nisdas/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nisdas/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/7985/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/7985/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/735023250",
    "html_url": "https://github.com/prysmaticlabs/prysm/issues/7985#issuecomment-735023250",
    "issue_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/7985",
    "id": 735023250,
    "node_id": "MDEyOklzc3VlQ29tbWVudDczNTAyMzI1MA==",
    "user": {
      "login": "terencechain",
      "id": 21316537,
      "node_id": "MDQ6VXNlcjIxMzE2NTM3",
      "avatar_url": "https://avatars.githubusercontent.com/u/21316537?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/terencechain",
      "html_url": "https://github.com/terencechain",
      "followers_url": "https://api.github.com/users/terencechain/followers",
      "following_url": "https://api.github.com/users/terencechain/following{/other_user}",
      "gists_url": "https://api.github.com/users/terencechain/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/terencechain/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/terencechain/subscriptions",
      "organizations_url": "https://api.github.com/users/terencechain/orgs",
      "repos_url": "https://api.github.com/users/terencechain/repos",
      "events_url": "https://api.github.com/users/terencechain/events{/privacy}",
      "received_events_url": "https://api.github.com/users/terencechain/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-11-28T01:16:56Z",
    "updated_at": "2020-11-28T01:16:56Z",
    "author_association": "MEMBER",
    "body": "I will advocate no flag. We should eliminate the number of the flags for both beacon node and validator. More flags == more doc support == more room for errors and unnecessary frictions. \r\n\r\nWhat if the db doesn't have previous epoch info but the block attestation has?\r\n\r\nCan you also run this idea in the eth2 discord? Will be good to get opinions from other implementor teams",
    "reactions": {
      "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/735023250/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/735024138",
    "html_url": "https://github.com/prysmaticlabs/prysm/issues/7985#issuecomment-735024138",
    "issue_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/7985",
    "id": 735024138,
    "node_id": "MDEyOklzc3VlQ29tbWVudDczNTAyNDEzOA==",
    "user": {
      "login": "potuz",
      "id": 16044918,
      "node_id": "MDQ6VXNlcjE2MDQ0OTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/16044918?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/potuz",
      "html_url": "https://github.com/potuz",
      "followers_url": "https://api.github.com/users/potuz/followers",
      "following_url": "https://api.github.com/users/potuz/following{/other_user}",
      "gists_url": "https://api.github.com/users/potuz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/potuz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/potuz/subscriptions",
      "organizations_url": "https://api.github.com/users/potuz/orgs",
      "repos_url": "https://api.github.com/users/potuz/repos",
      "events_url": "https://api.github.com/users/potuz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/potuz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-11-28T01:25:48Z",
    "updated_at": "2020-11-28T01:25:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks for the tag, I wasn't allowed. I think  if the db doesn't have info from the previous epoch but the block has it the validator should stop and assume either the db is corrupted (had a dirtly stop for example) or there's another validator running the same keys. In both cases you should stop to prevent such attestations from happening. If you do not want to add an extra flag that is fine too. In principle if it was a corrupt db, 3 epochs into the future you'd be able to relaunch. And if you had another validator attesting, then you still do not want to launch anyway. So I am not against your suggestion of not having this flag. ",
    "reactions": {
      "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/735024138/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/735024914",
    "html_url": "https://github.com/prysmaticlabs/prysm/issues/7985#issuecomment-735024914",
    "issue_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/7985",
    "id": 735024914,
    "node_id": "MDEyOklzc3VlQ29tbWVudDczNTAyNDkxNA==",
    "user": {
      "login": "terencechain",
      "id": 21316537,
      "node_id": "MDQ6VXNlcjIxMzE2NTM3",
      "avatar_url": "https://avatars.githubusercontent.com/u/21316537?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/terencechain",
      "html_url": "https://github.com/terencechain",
      "followers_url": "https://api.github.com/users/terencechain/followers",
      "following_url": "https://api.github.com/users/terencechain/following{/other_user}",
      "gists_url": "https://api.github.com/users/terencechain/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/terencechain/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/terencechain/subscriptions",
      "organizations_url": "https://api.github.com/users/terencechain/orgs",
      "repos_url": "https://api.github.com/users/terencechain/repos",
      "events_url": "https://api.github.com/users/terencechain/events{/privacy}",
      "received_events_url": "https://api.github.com/users/terencechain/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-11-28T01:34:27Z",
    "updated_at": "2020-11-28T01:34:27Z",
    "author_association": "MEMBER",
    "body": "Flag might be useful if the user intentionally understands the risk and still wants to procee. Example:\r\n\r\n1.) epoch 100: attest on computer A, stop validator\r\n2.) epoch 101: start validator on computer B with a fresh DB \r\n\r\nI'm not sure how really applicable the above case is but it's a trade off that's worth looking at",
    "reactions": {
      "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/735024914/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/735414076",
    "html_url": "https://github.com/prysmaticlabs/prysm/issues/7985#issuecomment-735414076",
    "issue_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/7985",
    "id": 735414076,
    "node_id": "MDEyOklzc3VlQ29tbWVudDczNTQxNDA3Ng==",
    "user": {
      "login": "potuz",
      "id": 16044918,
      "node_id": "MDQ6VXNlcjE2MDQ0OTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/16044918?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/potuz",
      "html_url": "https://github.com/potuz",
      "followers_url": "https://api.github.com/users/potuz/followers",
      "following_url": "https://api.github.com/users/potuz/following{/other_user}",
      "gists_url": "https://api.github.com/users/potuz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/potuz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/potuz/subscriptions",
      "organizations_url": "https://api.github.com/users/potuz/orgs",
      "repos_url": "https://api.github.com/users/potuz/repos",
      "events_url": "https://api.github.com/users/potuz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/potuz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-11-29T15:48:12Z",
    "updated_at": "2020-11-29T15:48:12Z",
    "author_association": "CONTRIBUTOR",
    "body": "@arnetheduck for pointed me to this implementation of Nimbus \r\n\r\nhttps://github.com/status-im/nimbus-eth2/pull/1915\r\n\r\nwhich is pretty much the same as I am suggesting except they default for 2 epochs instead of three. I haven't read in detail because I do not know their code, but an implementation detail (that I admittedly might be reading wrong) is that they wait and listen for 2 epochs before they start broadcasting instead of asking the network for the last 2 epochs blocks and checking attestations. ",
    "reactions": {
      "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/735414076/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/739035929",
    "html_url": "https://github.com/prysmaticlabs/prysm/issues/7985#issuecomment-739035929",
    "issue_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/7985",
    "id": 739035929,
    "node_id": "MDEyOklzc3VlQ29tbWVudDczOTAzNTkyOQ==",
    "user": {
      "login": "prestonvanloon",
      "id": 7246818,
      "node_id": "MDQ6VXNlcjcyNDY4MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7246818?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/prestonvanloon",
      "html_url": "https://github.com/prestonvanloon",
      "followers_url": "https://api.github.com/users/prestonvanloon/followers",
      "following_url": "https://api.github.com/users/prestonvanloon/following{/other_user}",
      "gists_url": "https://api.github.com/users/prestonvanloon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/prestonvanloon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/prestonvanloon/subscriptions",
      "organizations_url": "https://api.github.com/users/prestonvanloon/orgs",
      "repos_url": "https://api.github.com/users/prestonvanloon/repos",
      "events_url": "https://api.github.com/users/prestonvanloon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/prestonvanloon/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-12-04T21:40:44Z",
    "updated_at": "2020-12-04T21:40:44Z",
    "author_association": "MEMBER",
    "body": "Is there a reason for 2 or 3 epochs? Technically, you could be slashed as far back as the weak subjectivity period. (i think)",
    "reactions": {
      "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/739035929/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/739037860",
    "html_url": "https://github.com/prysmaticlabs/prysm/issues/7985#issuecomment-739037860",
    "issue_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/7985",
    "id": 739037860,
    "node_id": "MDEyOklzc3VlQ29tbWVudDczOTAzNzg2MA==",
    "user": {
      "login": "potuz",
      "id": 16044918,
      "node_id": "MDQ6VXNlcjE2MDQ0OTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/16044918?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/potuz",
      "html_url": "https://github.com/potuz",
      "followers_url": "https://api.github.com/users/potuz/followers",
      "following_url": "https://api.github.com/users/potuz/following{/other_user}",
      "gists_url": "https://api.github.com/users/potuz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/potuz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/potuz/subscriptions",
      "organizations_url": "https://api.github.com/users/potuz/orgs",
      "repos_url": "https://api.github.com/users/potuz/repos",
      "events_url": "https://api.github.com/users/potuz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/potuz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-12-04T21:45:27Z",
    "updated_at": "2020-12-04T21:49:06Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Is there a reason for 2 or 3 epochs? Technically, you could be slashed as far back as the weak subjectivity period. (i think)\r\n\r\nYes but this should only happen in a forked environment. It seems like a good compromise since this request will impact every launch of the validator.  Notice that this is not meant to be a replacement of the slashing protection but rather a safeguard against other client using the same keys. These are the only slashings we've seen so far",
    "reactions": {
      "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/739037860/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/796637380",
    "html_url": "https://github.com/prysmaticlabs/prysm/issues/7985#issuecomment-796637380",
    "issue_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/7985",
    "id": 796637380,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc5NjYzNzM4MA==",
    "user": {
      "login": "potuz",
      "id": 16044918,
      "node_id": "MDQ6VXNlcjE2MDQ0OTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/16044918?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/potuz",
      "html_url": "https://github.com/potuz",
      "followers_url": "https://api.github.com/users/potuz/followers",
      "following_url": "https://api.github.com/users/potuz/following{/other_user}",
      "gists_url": "https://api.github.com/users/potuz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/potuz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/potuz/subscriptions",
      "organizations_url": "https://api.github.com/users/potuz/orgs",
      "repos_url": "https://api.github.com/users/potuz/repos",
      "events_url": "https://api.github.com/users/potuz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/potuz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-11T10:32:30Z",
    "updated_at": "2021-03-11T10:32:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "In addition to nimbus implementation here's lighthouse's \r\nhttps://github.com/sigp/lighthouse/pull/2230\r\n\r\nAlso, I think this newer issue can be safely closed since it is most likely to be covered by any solution to this issue\r\n\r\nhttps://github.com/prysmaticlabs/prysm/issues/8513",
    "reactions": {
      "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/796637380/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/797363351",
    "html_url": "https://github.com/prysmaticlabs/prysm/issues/7985#issuecomment-797363351",
    "issue_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/7985",
    "id": 797363351,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc5NzM2MzM1MQ==",
    "user": {
      "login": "nisdas",
      "id": 33201827,
      "node_id": "MDQ6VXNlcjMzMjAxODI3",
      "avatar_url": "https://avatars.githubusercontent.com/u/33201827?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nisdas",
      "html_url": "https://github.com/nisdas",
      "followers_url": "https://api.github.com/users/nisdas/followers",
      "following_url": "https://api.github.com/users/nisdas/following{/other_user}",
      "gists_url": "https://api.github.com/users/nisdas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nisdas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nisdas/subscriptions",
      "organizations_url": "https://api.github.com/users/nisdas/orgs",
      "repos_url": "https://api.github.com/users/nisdas/repos",
      "events_url": "https://api.github.com/users/nisdas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nisdas/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-12T09:32:00Z",
    "updated_at": "2021-03-12T09:32:00Z",
    "author_association": "MEMBER",
    "body": "Ok thanks, shifting over discussion to #8513 . ",
    "reactions": {
      "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/797363351/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/797365320",
    "html_url": "https://github.com/prysmaticlabs/prysm/issues/7985#issuecomment-797365320",
    "issue_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/7985",
    "id": 797365320,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc5NzM2NTMyMA==",
    "user": {
      "login": "potuz",
      "id": 16044918,
      "node_id": "MDQ6VXNlcjE2MDQ0OTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/16044918?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/potuz",
      "html_url": "https://github.com/potuz",
      "followers_url": "https://api.github.com/users/potuz/followers",
      "following_url": "https://api.github.com/users/potuz/following{/other_user}",
      "gists_url": "https://api.github.com/users/potuz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/potuz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/potuz/subscriptions",
      "organizations_url": "https://api.github.com/users/potuz/orgs",
      "repos_url": "https://api.github.com/users/potuz/repos",
      "events_url": "https://api.github.com/users/potuz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/potuz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-12T09:35:09Z",
    "updated_at": "2021-03-12T09:35:09Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Ok thanks, shifting over discussion to #8513 .\r\n\r\nI would've closed the newer issue instead as this one actually has a discussion",
    "reactions": {
      "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/797365320/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/797367379",
    "html_url": "https://github.com/prysmaticlabs/prysm/issues/7985#issuecomment-797367379",
    "issue_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/7985",
    "id": 797367379,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc5NzM2NzM3OQ==",
    "user": {
      "login": "nisdas",
      "id": 33201827,
      "node_id": "MDQ6VXNlcjMzMjAxODI3",
      "avatar_url": "https://avatars.githubusercontent.com/u/33201827?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nisdas",
      "html_url": "https://github.com/nisdas",
      "followers_url": "https://api.github.com/users/nisdas/followers",
      "following_url": "https://api.github.com/users/nisdas/following{/other_user}",
      "gists_url": "https://api.github.com/users/nisdas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nisdas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nisdas/subscriptions",
      "organizations_url": "https://api.github.com/users/nisdas/orgs",
      "repos_url": "https://api.github.com/users/nisdas/repos",
      "events_url": "https://api.github.com/users/nisdas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nisdas/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-12T09:38:42Z",
    "updated_at": "2021-03-12T09:38:42Z",
    "author_association": "MEMBER",
    "body": "Ah sorry, misread this . Porting over message to this issue. ",
    "reactions": {
      "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/797367379/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/797367734",
    "html_url": "https://github.com/prysmaticlabs/prysm/issues/7985#issuecomment-797367734",
    "issue_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/7985",
    "id": 797367734,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc5NzM2NzczNA==",
    "user": {
      "login": "nisdas",
      "id": 33201827,
      "node_id": "MDQ6VXNlcjMzMjAxODI3",
      "avatar_url": "https://avatars.githubusercontent.com/u/33201827?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nisdas",
      "html_url": "https://github.com/nisdas",
      "followers_url": "https://api.github.com/users/nisdas/followers",
      "following_url": "https://api.github.com/users/nisdas/following{/other_user}",
      "gists_url": "https://api.github.com/users/nisdas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nisdas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nisdas/subscriptions",
      "organizations_url": "https://api.github.com/users/nisdas/orgs",
      "repos_url": "https://api.github.com/users/nisdas/repos",
      "events_url": "https://api.github.com/users/nisdas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nisdas/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-12T09:39:19Z",
    "updated_at": "2021-03-12T09:39:19Z",
    "author_association": "MEMBER",
    "body": "I wrote a short design doc on something with similar goals a while back:\r\nhttps://hackmd.io/@prysmaticlabs/B16P-Bbgd\r\n\r\nHowever the main difference here is that instead of listening in on gossip we instead just search all attestation from the last N\r\nepochs and find if there is a conflicting attestation. Having something that 'waits' for a while is a possible liveness fault, as in the event of a restart a validator would miss an attestation in that particular epoch.",
    "reactions": {
      "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/797367734/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/797441578",
    "html_url": "https://github.com/prysmaticlabs/prysm/issues/7985#issuecomment-797441578",
    "issue_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/7985",
    "id": 797441578,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc5NzQ0MTU3OA==",
    "user": {
      "login": "potuz",
      "id": 16044918,
      "node_id": "MDQ6VXNlcjE2MDQ0OTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/16044918?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/potuz",
      "html_url": "https://github.com/potuz",
      "followers_url": "https://api.github.com/users/potuz/followers",
      "following_url": "https://api.github.com/users/potuz/following{/other_user}",
      "gists_url": "https://api.github.com/users/potuz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/potuz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/potuz/subscriptions",
      "organizations_url": "https://api.github.com/users/potuz/orgs",
      "repos_url": "https://api.github.com/users/potuz/repos",
      "events_url": "https://api.github.com/users/potuz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/potuz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-12T11:49:42Z",
    "updated_at": "2021-03-12T11:49:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "> I wrote a short design doc on something with similar goals a while back:\r\n> https://hackmd.io/@prysmaticlabs/B16P-Bbgd\r\n\r\nI like this approach with the endpoiint to check for sanity. I just wanted to point out that there is an economical  tradeoff between security and the price payed by not attesting at launch. While it's true that all current slashings would have been prevented by this method of looking back a few epochs and gathering attestations. It worries me a little in the long term. A validator is much more likely to be slashed in a forked/non-finalizing scenario. Currently we have seen validators running multiple instances of the same keys and not being slashed for a long time cause they were attesting precisely on the same data. This is less likely to happen on a forked scenario. In this situation, we will be dropping blocks and possibly attestations will not be included later if they were from different forks, so that when we request the attestations for the last n epochs and we don't get any from our key, in fact we may have been attesting anyway on a different fork. \r\n\r\nHaving said so, I think the approach of looking back is probably better anyway, even when forked we would expect at least 1 attestation to be included in later blocks in our current fork, even if they were on a different fork at the time of attesting. I have no intuition nor hard numbers about how many attestations went actually missing on Medalla. ",
    "reactions": {
      "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/797441578/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/797995841",
    "html_url": "https://github.com/prysmaticlabs/prysm/issues/7985#issuecomment-797995841",
    "issue_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/7985",
    "id": 797995841,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc5Nzk5NTg0MQ==",
    "user": {
      "login": "quangld",
      "id": 8688582,
      "node_id": "MDQ6VXNlcjg2ODg1ODI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8688582?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/quangld",
      "html_url": "https://github.com/quangld",
      "followers_url": "https://api.github.com/users/quangld/followers",
      "following_url": "https://api.github.com/users/quangld/following{/other_user}",
      "gists_url": "https://api.github.com/users/quangld/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/quangld/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/quangld/subscriptions",
      "organizations_url": "https://api.github.com/users/quangld/orgs",
      "repos_url": "https://api.github.com/users/quangld/repos",
      "events_url": "https://api.github.com/users/quangld/events{/privacy}",
      "received_events_url": "https://api.github.com/users/quangld/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-13T09:10:11Z",
    "updated_at": "2021-03-13T09:10:11Z",
    "author_association": "NONE",
    "body": "> Flag might be useful if the user intentionally understands the risk and still wants to procee. Example:\r\n> \r\n> 1.) epoch 100: attest on computer A, stop validator\r\n> 2.) epoch 101: start validator on computer B with a fresh DB\r\n\r\nI love this ideal: it's easier to implement\r\n- A flag to start to attest after a specified epoch\r\n- A command line to stop attestation after a specified epoch\r\nA combination of this can be used to move validator from one machine to another\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/797995841/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/832490430",
    "html_url": "https://github.com/prysmaticlabs/prysm/issues/7985#issuecomment-832490430",
    "issue_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/7985",
    "id": 832490430,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgzMjQ5MDQzMA==",
    "user": {
      "login": "ahadda5",
      "id": 21275079,
      "node_id": "MDQ6VXNlcjIxMjc1MDc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/21275079?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ahadda5",
      "html_url": "https://github.com/ahadda5",
      "followers_url": "https://api.github.com/users/ahadda5/followers",
      "following_url": "https://api.github.com/users/ahadda5/following{/other_user}",
      "gists_url": "https://api.github.com/users/ahadda5/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ahadda5/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ahadda5/subscriptions",
      "organizations_url": "https://api.github.com/users/ahadda5/orgs",
      "repos_url": "https://api.github.com/users/ahadda5/repos",
      "events_url": "https://api.github.com/users/ahadda5/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ahadda5/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-05T07:55:31Z",
    "updated_at": "2021-05-05T07:55:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "Will implement the change based on this [Design](https://hackmd.io/KXlyLQxiRzK9sIBwLu1UNA) \r\n",
    "reactions": {
      "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/832490430/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/843209422",
    "html_url": "https://github.com/prysmaticlabs/prysm/issues/7985#issuecomment-843209422",
    "issue_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/7985",
    "id": 843209422,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0MzIwOTQyMg==",
    "user": {
      "login": "potuz",
      "id": 16044918,
      "node_id": "MDQ6VXNlcjE2MDQ0OTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/16044918?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/potuz",
      "html_url": "https://github.com/potuz",
      "followers_url": "https://api.github.com/users/potuz/followers",
      "following_url": "https://api.github.com/users/potuz/following{/other_user}",
      "gists_url": "https://api.github.com/users/potuz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/potuz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/potuz/subscriptions",
      "organizations_url": "https://api.github.com/users/potuz/orgs",
      "repos_url": "https://api.github.com/users/potuz/repos",
      "events_url": "https://api.github.com/users/potuz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/potuz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-18T14:15:21Z",
    "updated_at": "2021-05-18T14:15:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "I wanted to leave here a method that I think has many advantages and outweighs the minor disadvantages which I enumerate below. In short the method consists of \r\n\r\n1. The validator client launches. Let `TARGET` be the last target epoch of its attestations and `HEAD` be the current head epoch. \r\n2. If `HEAD - TARGET < 2` continue operation as normal, there is nothing to do here (discussion below)\r\n3. Otherwise grab beacon states for the last three epochs `HEAD-i` with `i = 0,1,2`. Check for balance changes. If there is any positive balance change stop the validator and abort operation. \r\n\r\nThis will stop any validator with a doppelganger running somewhere and an included attestation with target bigger than `TARGET` except in the following cases\r\n\r\n- `HEAD - TARGET < 2` In this case the validator already attested to this or the previous epoch and our own attestation might be included, neither this method, nor the method of going through blocks will be able to distinguish here if there is another validator running or this very same validator submitted the previous attestation. Regardless, there are two cases, the user has just restarted the validator in this case and if he/she is using the same key on two machines and launching and restarting he should have been slashed already. \r\n- The balance decreases for two consecutive epochs even though the validator has been attesting with included attestations. In this situation we may be slashed. But this will only happen  if and only if the validator has voted incorrectly for target and head. This can only happen if \r\n  a) We are in a highly forked scenario: then the method of looking for blocks also does not save us in this situation. \r\n  b) We simply got unlucky and voted wrong head + target in two straight epochs. In current mainnet, each event happens 0,5% of the times, so this will happen with probability `2*10^-5`. \r\n\r\nThe problem in a) is not what this issue tries to solve: running two validators on different computers while the network is highly forked is dangerous anyway. We are trying to simply prevent the slashings by operator mistakes. The problem in b) is completely negligible given that this is the order of magnitude of all active validators now. For this to happen while at the same time being running on two machines at the same time the probability is just infinitesimal. b) can be completely mitigated by replacing positive balance by `balance_change > -2 * base_reward`, but I think this is an unnecessary burden that will also need to be changed in Altair. \r\n\r\nThe advantages of this methods are several on the other hand:\r\n\r\n- It requires only three states (and actually depending on implementation we may do with two since we record previous balance) instead of 64 blocks to check for attestations. Most probably these states will be cached. \r\n- It is simple and uses already implemented RPC points instead of having to loop through attestation bitfields and match to committee indexes to find the validator indices. This is error prone which makes testing harder on code that can potentially get us slashed. \r\n\r\nOne argument that can be said is that if the user is running hundreds of validators, and they are running on two machines, this method will be slower, since it will require 3 states, while the method of looking at back blocks will likely find already an attestation in the very first block fetched. But this argument is flawed, because for this user, in the vast majority of cases that he's relaunching, will only be launching in one machine and it will require grabbing 64 blocks and going through the loop on bitfields on each one of them to check that it hasn't attested. \r\n",
    "reactions": {
      "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/843209422/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/843755332",
    "html_url": "https://github.com/prysmaticlabs/prysm/issues/7985#issuecomment-843755332",
    "issue_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/7985",
    "id": 843755332,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0Mzc1NTMzMg==",
    "user": {
      "login": "ahadda5",
      "id": 21275079,
      "node_id": "MDQ6VXNlcjIxMjc1MDc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/21275079?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ahadda5",
      "html_url": "https://github.com/ahadda5",
      "followers_url": "https://api.github.com/users/ahadda5/followers",
      "following_url": "https://api.github.com/users/ahadda5/following{/other_user}",
      "gists_url": "https://api.github.com/users/ahadda5/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ahadda5/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ahadda5/subscriptions",
      "organizations_url": "https://api.github.com/users/ahadda5/orgs",
      "repos_url": "https://api.github.com/users/ahadda5/repos",
      "events_url": "https://api.github.com/users/ahadda5/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ahadda5/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-19T05:23:10Z",
    "updated_at": "2021-05-19T05:26:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "Good and definitely much faster than the brute search through attestations. \r\nQuestions(throughout we assume the user is setting the global flag to check for duplicates) \r\n\r\n1.  If you are checking 3 epochs back, so we check if  Balance@epoch-3 != Balance@epoch(-2)    and then is Balance@epoch(-2) != Bal@epoch(-1)  and Bal@epoch(-1) != Balance@currentEpoch?  \r\nLets consider the possibilities here \r\nPossibility A -  A Duplicate is active somewhere else. In such a case it is being rewarded and we can catch it. \r\nPossibility B -  A duplicate is active but caused a surrounding/ed votes resulting in valid slashing. This logic will catch it  which is better than only checking if it is going up. Activity elsewhere means up most of the time and unlikely down few times?\r\nPossibility C - The validator was stopped in the past three epochs. Then we start it. If balance changed we have a duplicate (Possibility A or B)   Or if the balance stayed the same(less a bit for inactivity- How do we catch that? can we determine the inactivity across N epochs precisely? ) for true inactivity, our logic will start the validator as intended. \r\n\r\n\r\n2. Balance checks are done down to the next Wei or base rewards multiples ?   Please unpack your statement \r\n> can be completely mitigated by replacing positive balance by balance_change > -2 * base_reward\r\n\r\n3.  In terms of balance checks . The validator  -> rpc call to beacon to retrieve the Balance across those epochs.  This is done reclusively for each Index (Key)? If it is changing, then we stop as explained in 1? \r\n\r\n4. Can you explain this   , a 0.5% probability , isn't  0.5% ^ 2 epochs = 0.25%? \r\n\r\n> In current mainnet, each event happens 0,5% of the times, so this will happen with probability 2*10^-5.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/843755332/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/843843372",
    "html_url": "https://github.com/prysmaticlabs/prysm/issues/7985#issuecomment-843843372",
    "issue_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/7985",
    "id": 843843372,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0Mzg0MzM3Mg==",
    "user": {
      "login": "nisdas",
      "id": 33201827,
      "node_id": "MDQ6VXNlcjMzMjAxODI3",
      "avatar_url": "https://avatars.githubusercontent.com/u/33201827?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nisdas",
      "html_url": "https://github.com/nisdas",
      "followers_url": "https://api.github.com/users/nisdas/followers",
      "following_url": "https://api.github.com/users/nisdas/following{/other_user}",
      "gists_url": "https://api.github.com/users/nisdas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nisdas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nisdas/subscriptions",
      "organizations_url": "https://api.github.com/users/nisdas/orgs",
      "repos_url": "https://api.github.com/users/nisdas/repos",
      "events_url": "https://api.github.com/users/nisdas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nisdas/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-19T07:52:57Z",
    "updated_at": "2021-05-19T07:52:57Z",
    "author_association": "MEMBER",
    "body": "@potuz \r\n\r\n> HEAD - TARGET < 2 In this case the validator already attested to this or the previous epoch and our own attestation might be included, neither this method, nor the method of going through blocks will be able to distinguish here if there is another validator running or this very same validator submitted the previous attestation. Regardless, there are two cases, the user has just restarted the validator in this case and if he/she is using the same key on two machines and launching and restarting he should have been slashed already.\r\n\r\nThis would be a fair assumption I guess, if the amount is less than 2 then going forward by skipping the check would be fine then. \r\n\r\n> The problem in a) is not what this issue tries to solve: running two validators on different computers while the network is highly forked is dangerous anyway. We are trying to simply prevent the slashings by operator mistakes. The problem in b) is completely negligible given that this is the order of magnitude of all active validators now. For this to happen while at the same time being running on two machines at the same time the probability is just infinitesimal. b) can be completely mitigated by replacing positive balance by balance_change > -2 * base_reward, but I think this is an unnecessary burden that will also need to be changed in Altair.\r\n\r\nSlashing by operator mistakes do happen and they are much more likely to happen in cases where the network is highly forked. For that reason we should default to the most secure method, which would be to check `-2 * base_reward` . If the network is highly forked, having a different head/target is much more likely. As you have noted we will again have to change this for Altair to account for the changed validator rewards accounting. \r\n\r\nOn the cost of this, I would disagree that this is cheaper/etc. Iterating through attestations in each block is much cheaper compared to regenerating the state. All methods so far do require us to regenerate states and then use that. We have cached committees during shuffling, so we simply can use that to check for each validator that has attested/or not. \r\n\r\nI am not against having the balance check instead, but it will require us to change again in Altair. Also any future forks that might change validator accounting in anyway will have to be handled correctly here. Doing the attestation check is more of a 'direct' /in-protocol check to validate a particular validator's participation versus doing a balance check which is more indirect here. \r\n",
    "reactions": {
      "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/843843372/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/843844161",
    "html_url": "https://github.com/prysmaticlabs/prysm/issues/7985#issuecomment-843844161",
    "issue_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/7985",
    "id": 843844161,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0Mzg0NDE2MQ==",
    "user": {
      "login": "nisdas",
      "id": 33201827,
      "node_id": "MDQ6VXNlcjMzMjAxODI3",
      "avatar_url": "https://avatars.githubusercontent.com/u/33201827?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nisdas",
      "html_url": "https://github.com/nisdas",
      "followers_url": "https://api.github.com/users/nisdas/followers",
      "following_url": "https://api.github.com/users/nisdas/following{/other_user}",
      "gists_url": "https://api.github.com/users/nisdas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nisdas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nisdas/subscriptions",
      "organizations_url": "https://api.github.com/users/nisdas/orgs",
      "repos_url": "https://api.github.com/users/nisdas/repos",
      "events_url": "https://api.github.com/users/nisdas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nisdas/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-19T07:54:08Z",
    "updated_at": "2021-05-19T07:54:08Z",
    "author_association": "MEMBER",
    "body": "> 4. Can you explain this , a 0.5% probability , isn't 0.5% ^ 2 epochs = 0.25%?\r\n\r\n@ahadda5 0.5% ^ 2 does not equal to 0.5% * 0.5 . \r\n",
    "reactions": {
      "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/843844161/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/843857942",
    "html_url": "https://github.com/prysmaticlabs/prysm/issues/7985#issuecomment-843857942",
    "issue_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/7985",
    "id": 843857942,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0Mzg1Nzk0Mg==",
    "user": {
      "login": "ahadda5",
      "id": 21275079,
      "node_id": "MDQ6VXNlcjIxMjc1MDc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/21275079?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ahadda5",
      "html_url": "https://github.com/ahadda5",
      "followers_url": "https://api.github.com/users/ahadda5/followers",
      "following_url": "https://api.github.com/users/ahadda5/following{/other_user}",
      "gists_url": "https://api.github.com/users/ahadda5/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ahadda5/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ahadda5/subscriptions",
      "organizations_url": "https://api.github.com/users/ahadda5/orgs",
      "repos_url": "https://api.github.com/users/ahadda5/repos",
      "events_url": "https://api.github.com/users/ahadda5/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ahadda5/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-19T08:11:36Z",
    "updated_at": "2021-05-19T08:11:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "@nisdas ahh correct  2.5 *10^ -5",
    "reactions": {
      "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/843857942/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/843999269",
    "html_url": "https://github.com/prysmaticlabs/prysm/issues/7985#issuecomment-843999269",
    "issue_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/7985",
    "id": 843999269,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0Mzk5OTI2OQ==",
    "user": {
      "login": "potuz",
      "id": 16044918,
      "node_id": "MDQ6VXNlcjE2MDQ0OTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/16044918?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/potuz",
      "html_url": "https://github.com/potuz",
      "followers_url": "https://api.github.com/users/potuz/followers",
      "following_url": "https://api.github.com/users/potuz/following{/other_user}",
      "gists_url": "https://api.github.com/users/potuz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/potuz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/potuz/subscriptions",
      "organizations_url": "https://api.github.com/users/potuz/orgs",
      "repos_url": "https://api.github.com/users/potuz/repos",
      "events_url": "https://api.github.com/users/potuz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/potuz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-19T11:10:58Z",
    "updated_at": "2021-05-19T11:10:58Z",
    "author_association": "CONTRIBUTOR",
    "body": "@ahadda5 \r\n\r\n> If you are checking 3 epochs back, so we check if Balance@epoch-3 != Balance@epoch(-2) and then is Balance@epoch(-2) != Bal@epoch(-1) and Bal@epoch(-1) != Balance@currentEpoch?\r\n\r\nNo, I am checking `currentEpoch - i` for `i = 0,1,2`so only three states instead of four. \r\n\r\n>Possibility C - The validator was stopped in the past three epochs. Then we start it. If balance changed we have a duplicate (Possibility A or B) Or if the balance stayed the same(less a bit for inactivity- How do we catch that? can we determine the inactivity across N epochs precisely? ) for true inactivity, our logic will start the validator as intended.\r\n\r\nNo, if the validator was stopped less than 2 epochs ago (I mentioned 2 instead of three in my message) then if balance changed we cannot infer that we have a duplicate because attestations for `HEAD-2` still reflect in the balance change at `HEAD` transition\r\n\r\n > Balance checks are done down to the next Wei or base rewards multiples ? Please unpack your statement\r\n\r\nIf you miss head and target and your attestation is included in the next slot you obtain `-1/8 * base_reward`. In the worst case scenario you miss both and is included in `31` slots of distance, you get essentially `- base_reward` (plus a tiny bit). All this needs to be multiplied by participation rate. On the other hand if you are inactive you will get `-3*base_reward` which is strictly lower than those numbers. So checking that you got strictly more than `-3*base_reward` indicates that you were active on a different client. \r\n\r\n@nisdas \r\n\r\n>Slashing by operator mistakes do happen and they are much more likely to happen in cases where the network is highly forked. For that reason we should default to the most secure method, which would be to check -2 * base_reward . If the network is highly forked, having a different head/target is much more likely.\r\n\r\nThe cost of computing the actual lower bound adds an unnecessary complication: you need to factor in participation rate and base reward which are slot and fork dependent. This will require going block by block which defeats the purpose of my proposal and it does not give you any real benefits. Instead, what you can do is simply decide to go back `N` epochs from head, where `N` depends on the current finality, so if finality is `2` then you choose `N=2` and what I said above for balance > 0 applies and you catch active validators with probability `1 - 2*10^{-5}`. If finality is higher you just simply change `N` accordingly so that if you had an active validator the probability is high enough that it voted for the right fork in some of the last epochs. \r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/843999269/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/848817762",
    "html_url": "https://github.com/prysmaticlabs/prysm/issues/7985#issuecomment-848817762",
    "issue_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/7985",
    "id": 848817762,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0ODgxNzc2Mg==",
    "user": {
      "login": "nisdas",
      "id": 33201827,
      "node_id": "MDQ6VXNlcjMzMjAxODI3",
      "avatar_url": "https://avatars.githubusercontent.com/u/33201827?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nisdas",
      "html_url": "https://github.com/nisdas",
      "followers_url": "https://api.github.com/users/nisdas/followers",
      "following_url": "https://api.github.com/users/nisdas/following{/other_user}",
      "gists_url": "https://api.github.com/users/nisdas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nisdas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nisdas/subscriptions",
      "organizations_url": "https://api.github.com/users/nisdas/orgs",
      "repos_url": "https://api.github.com/users/nisdas/repos",
      "events_url": "https://api.github.com/users/nisdas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nisdas/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-26T14:29:29Z",
    "updated_at": "2021-05-26T14:29:29Z",
    "author_association": "MEMBER",
    "body": "> The cost of computing the actual lower bound adds an unnecessary complication: you need to factor in participation rate and base reward which are slot and fork dependent. This will require going block by block which defeats the purpose of my proposal and it does not give you any real benefits. Instead, what you can do is simply decide to go back N epochs from head, where N depends on the current finality, so if finality is 2 then you choose N=2 and what I said above for balance > 0 applies and you catch active validators with probability 1 - 2*10^{-5}. If finality is higher you just simply change N accordingly so that if you had an active validator the probability is high enough that it voted for the right fork in some of the last epochs.\r\n\r\nThis could be worth a try, although it would still be vulnerable to future changes in the spec. After thinking through I am more amenable to using this method. \r\n",
    "reactions": {
      "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/848817762/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/849340697",
    "html_url": "https://github.com/prysmaticlabs/prysm/issues/7985#issuecomment-849340697",
    "issue_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/7985",
    "id": 849340697,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0OTM0MDY5Nw==",
    "user": {
      "login": "ahadda5",
      "id": 21275079,
      "node_id": "MDQ6VXNlcjIxMjc1MDc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/21275079?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ahadda5",
      "html_url": "https://github.com/ahadda5",
      "followers_url": "https://api.github.com/users/ahadda5/followers",
      "following_url": "https://api.github.com/users/ahadda5/following{/other_user}",
      "gists_url": "https://api.github.com/users/ahadda5/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ahadda5/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ahadda5/subscriptions",
      "organizations_url": "https://api.github.com/users/ahadda5/orgs",
      "repos_url": "https://api.github.com/users/ahadda5/repos",
      "events_url": "https://api.github.com/users/ahadda5/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ahadda5/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-27T05:46:34Z",
    "updated_at": "2021-05-27T05:46:34Z",
    "author_association": "CONTRIBUTOR",
    "body": "@nisdas  ok i will create another pull .  Explain the following in new design please\r\n1. Is N preset or determined programmatically? how is N changed based on finality? \r\n2. Do we check if the balance changed across epochs (>, <  or !=) ?  How is this checked.  \r\n> No, if the validator was stopped less than 2 epochs ago (I mentioned 2 instead of three in my message) then if balance changed we cannot infer that we have a duplicate because attestations for HEAD-2 still reflect in the balance change at HEAD transition\r\n\r\nWhat i'll do is write up a detailed design and come back before i start coding. ",
    "reactions": {
      "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/849340697/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/849348374",
    "html_url": "https://github.com/prysmaticlabs/prysm/issues/7985#issuecomment-849348374",
    "issue_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/7985",
    "id": 849348374,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0OTM0ODM3NA==",
    "user": {
      "login": "nisdas",
      "id": 33201827,
      "node_id": "MDQ6VXNlcjMzMjAxODI3",
      "avatar_url": "https://avatars.githubusercontent.com/u/33201827?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nisdas",
      "html_url": "https://github.com/nisdas",
      "followers_url": "https://api.github.com/users/nisdas/followers",
      "following_url": "https://api.github.com/users/nisdas/following{/other_user}",
      "gists_url": "https://api.github.com/users/nisdas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nisdas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nisdas/subscriptions",
      "organizations_url": "https://api.github.com/users/nisdas/orgs",
      "repos_url": "https://api.github.com/users/nisdas/repos",
      "events_url": "https://api.github.com/users/nisdas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nisdas/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-27T06:00:46Z",
    "updated_at": "2021-05-27T06:00:46Z",
    "author_association": "MEMBER",
    "body": "@ahadda5 There isn't a need to redo this in a new pull request. You essentially just need to change what the beacon rpc method does. Previously it was checking all attestations in blocks for a a validator's index. Now you just need to check a validator's balance for the relevant state. Everything else stays the same. \r\n\r\n> Is N preset or determined programmatically? how is N changed based on finality?\r\n\r\nN is basically your epochs since the validator's last recorded history. Ex: Validator was last observed in Epoch 8 and current epoch is 12. So we check from epoch 9 - 12. \r\n\r\n > Do we check if the balance changed across epochs (>, < or !=) ? How is this checked.\r\n\r\nYou just need to check if the balance delta for a validator is more than 0 across the N epochs. \r\n\r\n >  What i'll do is write up a detailed design and come back before i start coding.\r\n \r\n Sure thing, this doesn't change the basic structure of the feature much. The check is boxed into the beacon rpc method.",
    "reactions": {
      "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/849348374/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/849524641",
    "html_url": "https://github.com/prysmaticlabs/prysm/issues/7985#issuecomment-849524641",
    "issue_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/7985",
    "id": 849524641,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0OTUyNDY0MQ==",
    "user": {
      "login": "potuz",
      "id": 16044918,
      "node_id": "MDQ6VXNlcjE2MDQ0OTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/16044918?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/potuz",
      "html_url": "https://github.com/potuz",
      "followers_url": "https://api.github.com/users/potuz/followers",
      "following_url": "https://api.github.com/users/potuz/following{/other_user}",
      "gists_url": "https://api.github.com/users/potuz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/potuz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/potuz/subscriptions",
      "organizations_url": "https://api.github.com/users/potuz/orgs",
      "repos_url": "https://api.github.com/users/potuz/repos",
      "events_url": "https://api.github.com/users/potuz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/potuz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-27T10:34:11Z",
    "updated_at": "2021-05-27T10:34:11Z",
    "author_association": "CONTRIBUTOR",
    "body": "For some reason replies to this thread got buried in my mailbox:\r\n\r\n> \r\n> N is basically your epochs since the validator's last recorded history. Ex: Validator was last observed in Epoch 8 and current epoch is 12. So we check from epoch 9 - 12.\r\n\r\nI think this is wrong, on current situations, having a validator offline for several epochs will cost a lot unnecessarily, which is what my proposal wants to avoid: I want to set `N=2` if the last finalized checkpoint is `HEAD-2` and increase otherwise. For example you can set `N = (HEAD-FINALIZED_EPOCH-1)^3 + 1` and or increase the exponent if you feel unsafe. \r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/849524641/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/849604989",
    "html_url": "https://github.com/prysmaticlabs/prysm/issues/7985#issuecomment-849604989",
    "issue_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/7985",
    "id": 849604989,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0OTYwNDk4OQ==",
    "user": {
      "login": "nisdas",
      "id": 33201827,
      "node_id": "MDQ6VXNlcjMzMjAxODI3",
      "avatar_url": "https://avatars.githubusercontent.com/u/33201827?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nisdas",
      "html_url": "https://github.com/nisdas",
      "followers_url": "https://api.github.com/users/nisdas/followers",
      "following_url": "https://api.github.com/users/nisdas/following{/other_user}",
      "gists_url": "https://api.github.com/users/nisdas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nisdas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nisdas/subscriptions",
      "organizations_url": "https://api.github.com/users/nisdas/orgs",
      "repos_url": "https://api.github.com/users/nisdas/repos",
      "events_url": "https://api.github.com/users/nisdas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nisdas/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-27T12:47:25Z",
    "updated_at": "2021-05-27T12:47:25Z",
    "author_association": "MEMBER",
    "body": "> I think this is wrong, on current situations, having a validator offline for several epochs will cost a lot unnecessarily, which is what my proposal wants to avoid: I want to set N=2 if the last finalized checkpoint is HEAD-2 and increase otherwise. For example you can set N = (HEAD-FINALIZED_EPOCH-1)^3 + 1 and or increase the exponent if you feel unsafe.\r\n\r\nI think we might be referring to differing things here. I was referring to the historical lookback when a validator starts up while you are referring to the doppelganger waiting period. ",
    "reactions": {
      "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/849604989/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/849713251",
    "html_url": "https://github.com/prysmaticlabs/prysm/issues/7985#issuecomment-849713251",
    "issue_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/7985",
    "id": 849713251,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0OTcxMzI1MQ==",
    "user": {
      "login": "potuz",
      "id": 16044918,
      "node_id": "MDQ6VXNlcjE2MDQ0OTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/16044918?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/potuz",
      "html_url": "https://github.com/potuz",
      "followers_url": "https://api.github.com/users/potuz/followers",
      "following_url": "https://api.github.com/users/potuz/following{/other_user}",
      "gists_url": "https://api.github.com/users/potuz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/potuz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/potuz/subscriptions",
      "organizations_url": "https://api.github.com/users/potuz/orgs",
      "repos_url": "https://api.github.com/users/potuz/repos",
      "events_url": "https://api.github.com/users/potuz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/potuz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-27T15:07:52Z",
    "updated_at": "2021-05-27T15:07:52Z",
    "author_association": "CONTRIBUTOR",
    "body": "> > I think this is wrong, on current situations, having a validator offline for several epochs will cost a lot unnecessarily, which is what my proposal wants to avoid: I want to set N=2 if the last finalized checkpoint is HEAD-2 and increase otherwise. For example you can set N = (HEAD-FINALIZED_EPOCH-1)^3 + 1 and or increase the exponent if you feel unsafe.\r\n> \r\n> I think we might be referring to differing things here. I was referring to the historical lookback when a validator starts up while you are referring to the doppelganger waiting period.\r\n\r\nNo indeed I'm referring to the lookback as well since I want to avoid requesting blocks/states",
    "reactions": {
      "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/849713251/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/851018083",
    "html_url": "https://github.com/prysmaticlabs/prysm/issues/7985#issuecomment-851018083",
    "issue_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/7985",
    "id": 851018083,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg1MTAxODA4Mw==",
    "user": {
      "login": "ahadda5",
      "id": 21275079,
      "node_id": "MDQ6VXNlcjIxMjc1MDc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/21275079?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ahadda5",
      "html_url": "https://github.com/ahadda5",
      "followers_url": "https://api.github.com/users/ahadda5/followers",
      "following_url": "https://api.github.com/users/ahadda5/following{/other_user}",
      "gists_url": "https://api.github.com/users/ahadda5/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ahadda5/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ahadda5/subscriptions",
      "organizations_url": "https://api.github.com/users/ahadda5/orgs",
      "repos_url": "https://api.github.com/users/ahadda5/repos",
      "events_url": "https://api.github.com/users/ahadda5/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ahadda5/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-30T15:33:19Z",
    "updated_at": "2021-05-30T15:33:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "@potuz   for the case where Head- Target < 2  ,why can't we employ the signed block search approach.  It guarantees if we have duplicate activity.\r\nFor head - Target > 2 then the duplicate attestations/proposals in Head-2 are reflected in the balance and we can rely solely on balance. ",
    "reactions": {
      "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/851018083/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/851019049",
    "html_url": "https://github.com/prysmaticlabs/prysm/issues/7985#issuecomment-851019049",
    "issue_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/7985",
    "id": 851019049,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg1MTAxOTA0OQ==",
    "user": {
      "login": "potuz",
      "id": 16044918,
      "node_id": "MDQ6VXNlcjE2MDQ0OTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/16044918?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/potuz",
      "html_url": "https://github.com/potuz",
      "followers_url": "https://api.github.com/users/potuz/followers",
      "following_url": "https://api.github.com/users/potuz/following{/other_user}",
      "gists_url": "https://api.github.com/users/potuz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/potuz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/potuz/subscriptions",
      "organizations_url": "https://api.github.com/users/potuz/orgs",
      "repos_url": "https://api.github.com/users/potuz/repos",
      "events_url": "https://api.github.com/users/potuz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/potuz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-30T15:39:48Z",
    "updated_at": "2021-05-30T16:10:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "> @potuz for the case where Head- Target < 2 ,why can't we employ the signed block search approach. It guarantees if we have duplicate activity.\r\n> For head - Target > 2 then the duplicate attestations/proposals in Head-2 are reflected in the balance and we can rely solely on balance.\r\n\r\nThat is all my proposal: to look at balance changes and nothing else! but you are not going to see balances on the blocks, balances are on the beacon states. \r\n\r\nEDIT: Ohh Apologies, I misread the statement: you mean to use signed blocks for HEAD-TARGET < 2. I think if the last target was HEAD then it may be impossible to discern a duplicate instance running from our own instance. If the last target was HEAD-1 then it may be possible to see a vote for HEAD and call that a duplicate entry. I am not sure if it's worth the trouble implementing this. ",
    "reactions": {
      "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/851019049/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/851855259",
    "html_url": "https://github.com/prysmaticlabs/prysm/issues/7985#issuecomment-851855259",
    "issue_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/7985",
    "id": 851855259,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg1MTg1NTI1OQ==",
    "user": {
      "login": "nisdas",
      "id": 33201827,
      "node_id": "MDQ6VXNlcjMzMjAxODI3",
      "avatar_url": "https://avatars.githubusercontent.com/u/33201827?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nisdas",
      "html_url": "https://github.com/nisdas",
      "followers_url": "https://api.github.com/users/nisdas/followers",
      "following_url": "https://api.github.com/users/nisdas/following{/other_user}",
      "gists_url": "https://api.github.com/users/nisdas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nisdas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nisdas/subscriptions",
      "organizations_url": "https://api.github.com/users/nisdas/orgs",
      "repos_url": "https://api.github.com/users/nisdas/repos",
      "events_url": "https://api.github.com/users/nisdas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nisdas/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-06-01T06:25:11Z",
    "updated_at": "2021-06-01T06:25:11Z",
    "author_association": "MEMBER",
    "body": "> No indeed I'm referring to the lookback as well since I want to avoid requesting blocks/states\r\n\r\nGotcha, I guess this is configurable. We can test it out to see which parameter value would be desirable. ",
    "reactions": {
      "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/851855259/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
