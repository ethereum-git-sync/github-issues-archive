{
  "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/2011",
  "repository_url": "https://api.github.com/repos/prysmaticlabs/prysm",
  "labels_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/2011/labels{/name}",
  "comments_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/2011/comments",
  "events_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/2011/events",
  "html_url": "https://github.com/prysmaticlabs/prysm/issues/2011",
  "id": 421905820,
  "node_id": "MDU6SXNzdWU0MjE5MDU4MjA=",
  "number": 2011,
  "title": "Perform State Caching With Merkle Structure",
  "user": {
    "login": "nisdas",
    "id": 33201827,
    "node_id": "MDQ6VXNlcjMzMjAxODI3",
    "avatar_url": "https://avatars.githubusercontent.com/u/33201827?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nisdas",
    "html_url": "https://github.com/nisdas",
    "followers_url": "https://api.github.com/users/nisdas/followers",
    "following_url": "https://api.github.com/users/nisdas/following{/other_user}",
    "gists_url": "https://api.github.com/users/nisdas/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nisdas/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nisdas/subscriptions",
    "organizations_url": "https://api.github.com/users/nisdas/orgs",
    "repos_url": "https://api.github.com/users/nisdas/repos",
    "events_url": "https://api.github.com/users/nisdas/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nisdas/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1028320582,
      "node_id": "MDU6TGFiZWwxMDI4MzIwNTgy",
      "url": "https://api.github.com/repos/prysmaticlabs/prysm/labels/Blocked",
      "name": "Blocked",
      "color": "f3761b",
      "default": false,
      "description": "Blocked by research or external factors"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": {
    "url": "https://api.github.com/repos/prysmaticlabs/prysm/milestones/3",
    "html_url": "https://github.com/prysmaticlabs/prysm/milestone/3",
    "labels_url": "https://api.github.com/repos/prysmaticlabs/prysm/milestones/3/labels",
    "id": 3141844,
    "node_id": "MDk6TWlsZXN0b25lMzE0MTg0NA==",
    "number": 3,
    "title": "Diamond",
    "description": "The Diamond Release: Ethereum Mainnet",
    "creator": {
      "login": "prestonvanloon",
      "id": 7246818,
      "node_id": "MDQ6VXNlcjcyNDY4MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7246818?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/prestonvanloon",
      "html_url": "https://github.com/prestonvanloon",
      "followers_url": "https://api.github.com/users/prestonvanloon/followers",
      "following_url": "https://api.github.com/users/prestonvanloon/following{/other_user}",
      "gists_url": "https://api.github.com/users/prestonvanloon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/prestonvanloon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/prestonvanloon/subscriptions",
      "organizations_url": "https://api.github.com/users/prestonvanloon/orgs",
      "repos_url": "https://api.github.com/users/prestonvanloon/repos",
      "events_url": "https://api.github.com/users/prestonvanloon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/prestonvanloon/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 0,
    "closed_issues": 113,
    "state": "closed",
    "created_at": "2018-02-25T21:24:26Z",
    "updated_at": "2020-11-25T18:06:34Z",
    "due_on": "2020-11-20T08:00:00Z",
    "closed_at": "2020-11-25T18:06:34Z"
  },
  "comments": 4,
  "created_at": "2019-03-17T10:23:20Z",
  "updated_at": "2020-01-22T04:36:13Z",
  "closed_at": "2020-01-22T04:36:13Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "The spec now includes a section on state caching, this issue is to track state caching from this PR in the specs repo https://github.com/ethereum/eth2.0-specs/pull/732 and is also a part of #1999.\r\n\r\n```py\r\ndef cache_state(state: BeaconState) -> None:\r\n    previous_slot_state_root = hash_tree_root(state)\r\n\r\n    # store the previous slot's post state transition root\r\n    state.latest_state_roots[state.slot % SLOTS_PER_HISTORICAL_ROOT] = previous_slot_state_root\r\n\r\n    # cache state root in stored latest_block_header if empty\r\n    if state.latest_block_header.state_root == ZERO_HASH:\r\n        state.latest_block_header.state_root = previous_slot_state_root\r\n\r\n    # store latest known block for previous slot\r\n    state.latest_block_roots[state.slot % SLOTS_PER_HISTORICAL_ROOT] = hash_tree_root(state.latest_block_header)\r\n```",
  "closed_by": {
    "login": "rauljordan",
    "id": 5572669,
    "node_id": "MDQ6VXNlcjU1NzI2Njk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5572669?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/rauljordan",
    "html_url": "https://github.com/rauljordan",
    "followers_url": "https://api.github.com/users/rauljordan/followers",
    "following_url": "https://api.github.com/users/rauljordan/following{/other_user}",
    "gists_url": "https://api.github.com/users/rauljordan/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/rauljordan/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/rauljordan/subscriptions",
    "organizations_url": "https://api.github.com/users/rauljordan/orgs",
    "repos_url": "https://api.github.com/users/rauljordan/repos",
    "events_url": "https://api.github.com/users/rauljordan/events{/privacy}",
    "received_events_url": "https://api.github.com/users/rauljordan/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/2011/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/2011/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/473756104",
    "html_url": "https://github.com/prysmaticlabs/prysm/issues/2011#issuecomment-473756104",
    "issue_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/2011",
    "id": 473756104,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3Mzc1NjEwNA==",
    "user": {
      "login": "prestonvanloon",
      "id": 7246818,
      "node_id": "MDQ6VXNlcjcyNDY4MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7246818?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/prestonvanloon",
      "html_url": "https://github.com/prestonvanloon",
      "followers_url": "https://api.github.com/users/prestonvanloon/followers",
      "following_url": "https://api.github.com/users/prestonvanloon/following{/other_user}",
      "gists_url": "https://api.github.com/users/prestonvanloon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/prestonvanloon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/prestonvanloon/subscriptions",
      "organizations_url": "https://api.github.com/users/prestonvanloon/orgs",
      "repos_url": "https://api.github.com/users/prestonvanloon/repos",
      "events_url": "https://api.github.com/users/prestonvanloon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/prestonvanloon/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-18T03:21:12Z",
    "updated_at": "2019-03-18T03:21:12Z",
    "author_association": "MEMBER",
    "body": "Blocked by testnet feature freeze, but design can start now. ",
    "reactions": {
      "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/473756104/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/544387635",
    "html_url": "https://github.com/prysmaticlabs/prysm/issues/2011#issuecomment-544387635",
    "issue_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/2011",
    "id": 544387635,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0NDM4NzYzNQ==",
    "user": {
      "login": "rauljordan",
      "id": 5572669,
      "node_id": "MDQ6VXNlcjU1NzI2Njk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5572669?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rauljordan",
      "html_url": "https://github.com/rauljordan",
      "followers_url": "https://api.github.com/users/rauljordan/followers",
      "following_url": "https://api.github.com/users/rauljordan/following{/other_user}",
      "gists_url": "https://api.github.com/users/rauljordan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rauljordan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rauljordan/subscriptions",
      "organizations_url": "https://api.github.com/users/rauljordan/orgs",
      "repos_url": "https://api.github.com/users/rauljordan/repos",
      "events_url": "https://api.github.com/users/rauljordan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rauljordan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-21T07:34:26Z",
    "updated_at": "2019-10-21T07:34:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "A design that would have excellent side effects for this would be store the state itself in a Merkle DB structure.\r\n\r\nFrom @protolambda's [design](https://github.com/protolambda/eth2-impl-design):\r\n\r\n```\r\nState:\r\n\r\n# Versioning\r\ngenesis_time: uint64                                              -- once\r\nslot: Slot                                                        -- every slot (overwrite)\r\nfork: Fork                                                        -- every fork (overwrite)\r\n# History                                                         \r\nlatest_block_header: BeaconBlockHeader                            \r\nblock_roots: Vector[Hash, SLOTS_PER_HISTORICAL_ROOT]              -- every slot (overwrite 1)\r\nstate_roots: Vector[Hash, SLOTS_PER_HISTORICAL_ROOT]              -- every slot (overwrite 1)\r\nhistorical_roots: List[Hash, HISTORICAL_ROOTS_LIMIT]              -- every 2**13 slots (13 hours) (add 1)\r\n# Eth1            \r\neth1_data: Eth1Data                                               -- any block, assume 1/1024 slots. (overwrite 1)\r\neth1_data_votes: List[Eth1Data, SLOTS_PER_ETH1_VOTING_PERIOD]     -- every block (add 1)\r\neth1_deposit_index: uint64                                        -- any block (overwrite)\r\n# Registry            \r\nvalidators: List[Validator, VALIDATOR_REGISTRY_LIMIT]             -- every epoch (overwrite any), less likely every block \r\nbalances: List[Gwei, VALIDATOR_REGISTRY_LIMIT]                    -- every block (overwrite any)\r\n# Shuffling            \r\nstart_shard: Shard                                                -- every epoch (overwrite)\r\nrandao_mixes: Vector[Hash, EPOCHS_PER_HISTORICAL_VECTOR]          -- every block (overwrite)\r\nactive_index_roots: Vector[Hash, EPOCHS_PER_HISTORICAL_VECTOR]        -- every epoch (overwrite 1)\r\ncompact_committees_roots: Vector[Hash, EPOCHS_PER_HISTORICAL_VECTOR]  -- every epoch (overwrite 1)\r\n# Slashings\r\nslashings: Vector[Gwei, EPOCHS_PER_SLASHINGS_VECTOR]              -- every epoch (overwrite 1)\r\n# Attestations\r\nprevious_epoch_attestations: List[PendingAttestation, MAX_ATTESTATIONS * SLOTS_PER_EPOCH]  -- every block (add a few), every epoch reset\r\ncurrent_epoch_attestations: List[PendingAttestation, MAX_ATTESTATIONS * SLOTS_PER_EPOCH]   -- every block (add a few), every epoch reset\r\n# Crosslinks\r\nprevious_crosslinks: Vector[Crosslink, SHARD_COUNT]               -- every epoch (overwrite all, potentially a subset)\r\ncurrent_crosslinks: Vector[Crosslink, SHARD_COUNT]                -- every epoch (overwrite all, potentially a subset)\r\n# Finality\r\njustification_bits: Bitvector[JUSTIFICATION_BITS_LENGTH]          -- every epoch\r\nprevious_justified_checkpoint: Checkpoint                         -- every epoch (overwrite potentially)\r\ncurrent_justified_checkpoint: Checkpoint                          -- every epoch (overwrite potentially)\r\nfinalized_checkpoint: Checkpoint                                  -- every epoch (overwrite potentially)\r\n```\r\n\r\n> The data that is overwritten more often than every epoch can be restored by re-applying the blocks on top of the state of the epoch start. However, storing the full-epoch state may sitll include duplicate data, as a few big arrays only change a little every epoch. This data (block_roots, state_roots, historical_roots, active_index_roots, compact_committees_roots, slashings) could be separated out.\r\n> \r\n> The more advanced alternative would be to create a merkle-DB for binary trees, and overlay a custom index for each type of content you need. If unified with hash-tree-root, this may be a good way to re-hash a state efficiently (i.e. use unchanged tree nodes).\r\n\r\nDoing this would allow us to easily fetch the data we need at runtime without needing the entire state and would allow for lightning fast fetching of its hash tree root.",
    "reactions": {
      "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/544387635/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/544387783",
    "html_url": "https://github.com/prysmaticlabs/prysm/issues/2011#issuecomment-544387783",
    "issue_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/2011",
    "id": 544387783,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0NDM4Nzc4Mw==",
    "user": {
      "login": "rauljordan",
      "id": 5572669,
      "node_id": "MDQ6VXNlcjU1NzI2Njk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5572669?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rauljordan",
      "html_url": "https://github.com/rauljordan",
      "followers_url": "https://api.github.com/users/rauljordan/followers",
      "following_url": "https://api.github.com/users/rauljordan/following{/other_user}",
      "gists_url": "https://api.github.com/users/rauljordan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rauljordan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rauljordan/subscriptions",
      "organizations_url": "https://api.github.com/users/rauljordan/orgs",
      "repos_url": "https://api.github.com/users/rauljordan/repos",
      "events_url": "https://api.github.com/users/rauljordan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rauljordan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-21T07:34:53Z",
    "updated_at": "2019-10-21T07:35:41Z",
    "author_association": "CONTRIBUTOR",
    "body": "@nisdas @prestonvanloon @terencechain @0xKiwi @shayzluf what do you all think? What we have to carefully consider here is how much of this we will keep in memory vs. on disk and how we can prevent data corruption or accidental mutation.",
    "reactions": {
      "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/544387783/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/544394684",
    "html_url": "https://github.com/prysmaticlabs/prysm/issues/2011#issuecomment-544394684",
    "issue_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/2011",
    "id": 544394684,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0NDM5NDY4NA==",
    "user": {
      "login": "nisdas",
      "id": 33201827,
      "node_id": "MDQ6VXNlcjMzMjAxODI3",
      "avatar_url": "https://avatars.githubusercontent.com/u/33201827?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nisdas",
      "html_url": "https://github.com/nisdas",
      "followers_url": "https://api.github.com/users/nisdas/followers",
      "following_url": "https://api.github.com/users/nisdas/following{/other_user}",
      "gists_url": "https://api.github.com/users/nisdas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nisdas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nisdas/subscriptions",
      "organizations_url": "https://api.github.com/users/nisdas/orgs",
      "repos_url": "https://api.github.com/users/nisdas/repos",
      "events_url": "https://api.github.com/users/nisdas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nisdas/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-21T07:54:48Z",
    "updated_at": "2019-10-21T07:55:30Z",
    "author_association": "MEMBER",
    "body": "@rauljordan this looks good to me. Optimizing for some thing like this would definetly be very helpful. But as you stated we need to be extra careful about data corruption. The state having so many pieces, it would be easy for a minor bug to slip in and cause an unintended mutation. If we store this as a binary db, how would the state look like in bolt ?\r\n\r\nRight now we just place the whole ssz blob into the state key. But with something like this we would need to break it up further and have some sort of schema to iterate over keys for the state field. Ex: state.Slot => could be stored in a nested bucket using the state key. The same would apply for other fields.\r\nAlso you could potentially share fields between states. \r\nEx: balances are the same for state with root 0x123 and 0x456 . We would only need to store it once. And just update the reference for each state. \r\n\r\nThis all would need a detailed design.  ",
    "reactions": {
      "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/544394684/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
