{
  "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/3511",
  "repository_url": "https://api.github.com/repos/prysmaticlabs/prysm",
  "labels_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/3511/labels{/name}",
  "comments_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/3511/comments",
  "events_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/3511/events",
  "html_url": "https://github.com/prysmaticlabs/prysm/issues/3511",
  "id": 494836999,
  "node_id": "MDU6SXNzdWU0OTQ4MzY5OTk=",
  "number": 3511,
  "title": "Various duplicated computations in Prysm",
  "user": {
    "login": "0xKiwi",
    "id": 6251510,
    "node_id": "MDQ6VXNlcjYyNTE1MTA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6251510?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/0xKiwi",
    "html_url": "https://github.com/0xKiwi",
    "followers_url": "https://api.github.com/users/0xKiwi/followers",
    "following_url": "https://api.github.com/users/0xKiwi/following{/other_user}",
    "gists_url": "https://api.github.com/users/0xKiwi/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/0xKiwi/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/0xKiwi/subscriptions",
    "organizations_url": "https://api.github.com/users/0xKiwi/orgs",
    "repos_url": "https://api.github.com/users/0xKiwi/repos",
    "events_url": "https://api.github.com/users/0xKiwi/events{/privacy}",
    "received_events_url": "https://api.github.com/users/0xKiwi/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2019-09-17T20:31:23Z",
  "updated_at": "2019-09-19T02:05:36Z",
  "closed_at": "2019-09-19T02:05:36Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "I went through the spec and Prysm's codebase to see potential improvements in computations.\r\n\r\n## Notes\r\nFunctions that compute a single committee for when they're called:\r\n* `get_attestation_data_slot` .\r\n* `get_attesting_indices`.\r\n* `get_unslashed_attesting_indices` which calls `get_attesting_indices`.\r\n* `get_attesting_balance` which calls `get_unslashed_attesting_indices`.\r\n* `get_indexed_attestation` computes the same committee twice.\r\n\r\nThis computation is performed in `get_compact_committees_root`, `get_committee_assignments`,  `process_crosslinks` and  `get_crosslink_deltas`. \r\n```    \r\nfor committee_number in range(get_committee_count(state, epoch)):\r\n        shard = Shard((start_shard + committee_number) % SHARD_COUNT)\r\n        for index in get_crosslink_committee(state, epoch, shard):\r\n```\r\n\r\n\r\n## Notable improvements\r\nAs of `v0.8.3` [`process_attestation`](https://github.com/ethereum/eth2.0-specs/blob/v0.8.3/specs/core/0_beacon-chain.md#attestations) already computes a committee for every attestation, which is duplicated logic in `get_indexed_attestation`, meaning we calculate the committee 3 times for each attestation, this can be reduced to 1 call. We also call `get_beacon_proposer_index` which is detailed later.\r\n<br/>\r\nIn `get_winning_crosslink_and_attesting_indices` we call `get_attesting_balance` which computes a committee for every attestation in the state. We know all these attestations are for the same epoch and shard, which should mean they have same committee as well. This would be a notable improvement. \r\nBoth usages of `get_winning_crosslink_and_attesting_indices` in `get_crosslink_deltas` and  `process_crosslinks` calculate the committee before the function call anyways.\r\n**Proposed solution:** change `get_winning_crosslink_and_attesting_indices` to take in a committee, along with a new function mirroring `get_attesting_balance` that takes in a committee as well. \r\n<br/>\r\n`get_beacon_proposer_index` which computes a committee of the current state is used multiple times within the same block:\r\n* `process_block_header`.\r\n* `process_randao`.\r\n* Every attestation in a block.\r\n* Every validator slashed.\r\n* Every transfer.\r\n\r\n\r\n## Minor improvements \r\nModifying `get_indexed_attestation` to just use the same committee for both `get_attesting_indices` calls. \r\n\r\n\r\n## Unsure or Unlikely improvements\r\nWithin `get_matching_head_attestations` we call `get_attestation_data_slot` (which computes a committee) for every attestation in the beacon state, although the attestations here are most likely different committees anyways.\r\n\r\n`get_attestation_deltas` is a rather expensive function, calculating the indices (which calculates a committee) for every attestation in the state, although this seems unavoidable. Maybe we can use a mapping per epoch and shard ",
  "closed_by": {
    "login": "0xKiwi",
    "id": 6251510,
    "node_id": "MDQ6VXNlcjYyNTE1MTA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6251510?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/0xKiwi",
    "html_url": "https://github.com/0xKiwi",
    "followers_url": "https://api.github.com/users/0xKiwi/followers",
    "following_url": "https://api.github.com/users/0xKiwi/following{/other_user}",
    "gists_url": "https://api.github.com/users/0xKiwi/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/0xKiwi/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/0xKiwi/subscriptions",
    "organizations_url": "https://api.github.com/users/0xKiwi/orgs",
    "repos_url": "https://api.github.com/users/0xKiwi/repos",
    "events_url": "https://api.github.com/users/0xKiwi/events{/privacy}",
    "received_events_url": "https://api.github.com/users/0xKiwi/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/3511/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/3511/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/532934136",
    "html_url": "https://github.com/prysmaticlabs/prysm/issues/3511#issuecomment-532934136",
    "issue_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/3511",
    "id": 532934136,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzMjkzNDEzNg==",
    "user": {
      "login": "0xKiwi",
      "id": 6251510,
      "node_id": "MDQ6VXNlcjYyNTE1MTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6251510?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/0xKiwi",
      "html_url": "https://github.com/0xKiwi",
      "followers_url": "https://api.github.com/users/0xKiwi/followers",
      "following_url": "https://api.github.com/users/0xKiwi/following{/other_user}",
      "gists_url": "https://api.github.com/users/0xKiwi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/0xKiwi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/0xKiwi/subscriptions",
      "organizations_url": "https://api.github.com/users/0xKiwi/orgs",
      "repos_url": "https://api.github.com/users/0xKiwi/repos",
      "events_url": "https://api.github.com/users/0xKiwi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/0xKiwi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-09-19T02:05:36Z",
    "updated_at": "2019-09-19T02:05:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "After further observation [our BLS](https://cdn.discordapp.com/attachments/550365651118850081/624060764231172096/Screen_Shot_2019-09-18_at_9.54.12_PM.png) in incredibly slow compared to any of the state transition functions, closing this issue.",
    "reactions": {
      "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/532934136/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
