{
  "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/1753",
  "repository_url": "https://api.github.com/repos/prysmaticlabs/prysm",
  "labels_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/1753/labels{/name}",
  "comments_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/1753/comments",
  "events_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/1753/events",
  "html_url": "https://github.com/prysmaticlabs/prysm/issues/1753",
  "id": 415439134,
  "node_id": "MDU6SXNzdWU0MTU0MzkxMzQ=",
  "number": 1753,
  "title": "Cache the beacon chain state in order to reduce unneeded disk I/O",
  "user": {
    "login": "0xKiwi",
    "id": 6251510,
    "node_id": "MDQ6VXNlcjYyNTE1MTA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6251510?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/0xKiwi",
    "html_url": "https://github.com/0xKiwi",
    "followers_url": "https://api.github.com/users/0xKiwi/followers",
    "following_url": "https://api.github.com/users/0xKiwi/following{/other_user}",
    "gists_url": "https://api.github.com/users/0xKiwi/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/0xKiwi/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/0xKiwi/subscriptions",
    "organizations_url": "https://api.github.com/users/0xKiwi/orgs",
    "repos_url": "https://api.github.com/users/0xKiwi/repos",
    "events_url": "https://api.github.com/users/0xKiwi/events{/privacy}",
    "received_events_url": "https://api.github.com/users/0xKiwi/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": {
    "login": "0xKiwi",
    "id": 6251510,
    "node_id": "MDQ6VXNlcjYyNTE1MTA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6251510?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/0xKiwi",
    "html_url": "https://github.com/0xKiwi",
    "followers_url": "https://api.github.com/users/0xKiwi/followers",
    "following_url": "https://api.github.com/users/0xKiwi/following{/other_user}",
    "gists_url": "https://api.github.com/users/0xKiwi/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/0xKiwi/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/0xKiwi/subscriptions",
    "organizations_url": "https://api.github.com/users/0xKiwi/orgs",
    "repos_url": "https://api.github.com/users/0xKiwi/repos",
    "events_url": "https://api.github.com/users/0xKiwi/events{/privacy}",
    "received_events_url": "https://api.github.com/users/0xKiwi/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "0xKiwi",
      "id": 6251510,
      "node_id": "MDQ6VXNlcjYyNTE1MTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6251510?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/0xKiwi",
      "html_url": "https://github.com/0xKiwi",
      "followers_url": "https://api.github.com/users/0xKiwi/followers",
      "following_url": "https://api.github.com/users/0xKiwi/following{/other_user}",
      "gists_url": "https://api.github.com/users/0xKiwi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/0xKiwi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/0xKiwi/subscriptions",
      "organizations_url": "https://api.github.com/users/0xKiwi/orgs",
      "repos_url": "https://api.github.com/users/0xKiwi/repos",
      "events_url": "https://api.github.com/users/0xKiwi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/0xKiwi/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2019-02-28T04:13:02Z",
  "updated_at": "2019-03-12T19:30:11Z",
  "closed_at": "2019-03-12T19:30:11Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "This is an issue to represent the recent findings after running a local beacon chain, in which the higher the slot, the larger state elements such as `Eth1Data` and others grow. The size of `Eth1Data` in particular increases the block processing time by about 1 or 2 seconds each time an epoch transition is reached due to `BlockExists()` being performed up to 3 times on each item in `Eth1Data`. This continues until it surpasses `SECONDS_PER_SLOT` and the chain fails.\r\n\r\n\r\nIn beacon-chain/rpc/beacon_server.go, we call `BlockExists` [twice for each item in `Eth1Data`](https://github.com/prysmaticlabs/prysm/blob/master/beacon-chain/rpc/beacon_server.go#L121-L154) and then [called twice again for any \"ties\" in data voting](https://github.com/prysmaticlabs/prysm/blob/master/beacon-chain/rpc/beacon_server.go#L187-L208),\r\n\r\nImages from tracing:\r\n* [`Eth1Data` taking half a second at about 50 slots](https://cdn.discordapp.com/attachments/483017808658169866/550488569735675905/18dBAbBCAAAQhAAAIQgAAEIAABCEAAAhCAAAQgAAEIQGDaCCDlMG0OFQKFAAQgAAEIQAACEIAABCAAAQhAAAIQgAAEIAABCNzPAk.png)\r\n\r\n* [`Eth1Data` calling `BlockExists` and reading the state numerous times](https://cdn.discordapp.com/attachments/483017808658169866/550493890470477825/BABAAAEEEEAAAQQQQAABBBBAAAEEEEAAAQQQQAABBBBAAAEEEEAAAQQQQAAB3wTB0l1rqk5kpd7AAAAAElFTkSuQmCC.png)\r\n\r\n* [Calls for `Eth1Data` taking more time as slot number increases](https://cdn.discordapp.com/attachments/483017808658169866/550494245849661460/BzdrM7iUTuFAAAAAElFTkSuQmCC.png)\r\n\r\n* [`Eth1Data` call taking over 3 seconds](https://cdn.discordapp.com/attachments/483017808658169866/550494856326152192/VJxVxPgAABArMk4Dk4S9O0FgIECBCYVMBzcFIx1xMgQIDAKIG9Zmvr6WCx3W4tHEWsRl12nj8b7DX11tNeUSwuXWpXp3YxdHTNeX.png)\r\n\r\n* [Whole lifecycle from the validator to the DB](https://cdn.discordapp.com/attachments/483017808658169866/550504632879808542/QOAQhAAAIQgAAEIAABCEAAAhCAAAQgAAEIQAACEIAABCAAAQhAAAIQgAAEIAABCNxjAki6uscmDOFCAAIQgAAEIAABCEAAAhCAAA.png)\r\n\r\n* [General DB fetches taking over 20ms](https://cdn.discordapp.com/attachments/483017808658169866/550520727959240705/TEfX4Na3BJgAAAABJRU5ErkJggg.png)\r\n\r\n* [Same as above](https://cdn.discordapp.com/attachments/483017808658169866/550521675209506837/wCfk4D2TyOfAAAAABJRU5ErkJggg.png)\r\n\r\nA solution to this issue would be to save the state to cache so fetching the amount of data we need isn't as costly. \r\n\r\nDanny mentioned in particular that the [spec notes](https://github.com/prysmaticlabs/prysm/issues/1753) some definitions \"make repeated use of heavy computing. Production implementations are expected to appropriately use caching/memoization to avoid redoing work\". This is due to certain elements like `get_shuffling` *not being stored in the beacon state*.\r\n\r\nThis is also part related to #1718 , for a general goal of reducing disk I/O.",
  "closed_by": {
    "login": "prestonvanloon",
    "id": 7246818,
    "node_id": "MDQ6VXNlcjcyNDY4MTg=",
    "avatar_url": "https://avatars.githubusercontent.com/u/7246818?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/prestonvanloon",
    "html_url": "https://github.com/prestonvanloon",
    "followers_url": "https://api.github.com/users/prestonvanloon/followers",
    "following_url": "https://api.github.com/users/prestonvanloon/following{/other_user}",
    "gists_url": "https://api.github.com/users/prestonvanloon/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/prestonvanloon/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/prestonvanloon/subscriptions",
    "organizations_url": "https://api.github.com/users/prestonvanloon/orgs",
    "repos_url": "https://api.github.com/users/prestonvanloon/repos",
    "events_url": "https://api.github.com/users/prestonvanloon/events{/privacy}",
    "received_events_url": "https://api.github.com/users/prestonvanloon/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/1753/reactions",
    "total_count": 3,
    "+1": 1,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 2,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/1753/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/468272300",
    "html_url": "https://github.com/prysmaticlabs/prysm/issues/1753#issuecomment-468272300",
    "issue_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/1753",
    "id": 468272300,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2ODI3MjMwMA==",
    "user": {
      "login": "prestonvanloon",
      "id": 7246818,
      "node_id": "MDQ6VXNlcjcyNDY4MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7246818?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/prestonvanloon",
      "html_url": "https://github.com/prestonvanloon",
      "followers_url": "https://api.github.com/users/prestonvanloon/followers",
      "following_url": "https://api.github.com/users/prestonvanloon/following{/other_user}",
      "gists_url": "https://api.github.com/users/prestonvanloon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/prestonvanloon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/prestonvanloon/subscriptions",
      "organizations_url": "https://api.github.com/users/prestonvanloon/orgs",
      "repos_url": "https://api.github.com/users/prestonvanloon/repos",
      "events_url": "https://api.github.com/users/prestonvanloon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/prestonvanloon/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-28T13:28:50Z",
    "updated_at": "2019-03-03T16:18:33Z",
    "author_association": "MEMBER",
    "body": "Some of the ETH1Data calls are being addressed in #1757.\r\n\r\nI think the primary goal for this task is to optimize these calls\r\n![image](https://user-images.githubusercontent.com/7246818/53568810-e6e8db80-3b30-11e9-9120-8528589a016a.png)\r\n\r\nThe state is an object that is read often (several times per second) but written less often (>1 second between writes).  To reduce I/O time for reading the state, we could keep a warm copy of the last written state in memory such that the state is only read from the actual disk at start up and read from memory for all other reads during.\r\n\r\nWe can achieve this functionalty by adding a property to the beaconDB and using a [RWMutex](https://golang.org/pkg/sync/#RWMutex) to ensure thread safe operation.\r\n\r\nHere's a pseudo implementation example\r\n```go\r\ntype BeaconDB struct {\r\n  stateLock sync.RWMutex\r\n  currentState *pb.BeaconState\r\n  ...\r\n}\r\n\r\nfunc (db *BeaconDB) WriteState(state *pb.BeaconState) error {\r\n  db.stateLock.Lock()\r\n  defer db.stateLock.Unlock()\r\n  db.currentState = proto.Clone(state) // Clone to prevent mutations of the cached copy\r\n   // Then write to disk as we do already\r\n   ...\r\n}\r\n\r\nfunc (db *BeaconDB) State() *pb.BeaconState {\r\n  db.stateLock.RLock()\r\n  defer db.stateLock.RUnlock()\r\n   if db.currentState != nil {\r\n     return proto.Clone(db.currentState) // Clone to prevent mutations of the cached copy\r\n   }\r\n   // Otherwise fetch from disk as we do already\r\n   ...\r\n}\r\n```\r\n\r\nThe goals here are \r\n- [ ] Add state caching in BeaconDB\r\n- [ ] Verify operation with thorough unit testing\r\n- [ ] Verify improvement with another tracing screenshot",
    "reactions": {
      "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/468272300/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
