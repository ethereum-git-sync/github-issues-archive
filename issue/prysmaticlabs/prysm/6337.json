{
  "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/6337",
  "repository_url": "https://api.github.com/repos/prysmaticlabs/prysm",
  "labels_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/6337/labels{/name}",
  "comments_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/6337/comments",
  "events_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/6337/events",
  "html_url": "https://github.com/prysmaticlabs/prysm/issues/6337",
  "id": 642742990,
  "node_id": "MDU6SXNzdWU2NDI3NDI5OTA=",
  "number": 6337,
  "title": "Audit best practice feedback",
  "user": {
    "login": "terencechain",
    "id": 21316537,
    "node_id": "MDQ6VXNlcjIxMzE2NTM3",
    "avatar_url": "https://avatars.githubusercontent.com/u/21316537?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/terencechain",
    "html_url": "https://github.com/terencechain",
    "followers_url": "https://api.github.com/users/terencechain/followers",
    "following_url": "https://api.github.com/users/terencechain/following{/other_user}",
    "gists_url": "https://api.github.com/users/terencechain/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/terencechain/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/terencechain/subscriptions",
    "organizations_url": "https://api.github.com/users/terencechain/orgs",
    "repos_url": "https://api.github.com/users/terencechain/repos",
    "events_url": "https://api.github.com/users/terencechain/events{/privacy}",
    "received_events_url": "https://api.github.com/users/terencechain/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1241586918,
      "node_id": "MDU6TGFiZWwxMjQxNTg2OTE4",
      "url": "https://api.github.com/repos/prysmaticlabs/prysm/labels/Tracking",
      "name": "Tracking",
      "color": "d0ff7f",
      "default": false,
      "description": "Gotta Catch 'Em All"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": {
    "login": "0xKiwi",
    "id": 6251510,
    "node_id": "MDQ6VXNlcjYyNTE1MTA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6251510?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/0xKiwi",
    "html_url": "https://github.com/0xKiwi",
    "followers_url": "https://api.github.com/users/0xKiwi/followers",
    "following_url": "https://api.github.com/users/0xKiwi/following{/other_user}",
    "gists_url": "https://api.github.com/users/0xKiwi/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/0xKiwi/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/0xKiwi/subscriptions",
    "organizations_url": "https://api.github.com/users/0xKiwi/orgs",
    "repos_url": "https://api.github.com/users/0xKiwi/repos",
    "events_url": "https://api.github.com/users/0xKiwi/events{/privacy}",
    "received_events_url": "https://api.github.com/users/0xKiwi/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "0xKiwi",
      "id": 6251510,
      "node_id": "MDQ6VXNlcjYyNTE1MTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6251510?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/0xKiwi",
      "html_url": "https://github.com/0xKiwi",
      "followers_url": "https://api.github.com/users/0xKiwi/followers",
      "following_url": "https://api.github.com/users/0xKiwi/following{/other_user}",
      "gists_url": "https://api.github.com/users/0xKiwi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/0xKiwi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/0xKiwi/subscriptions",
      "organizations_url": "https://api.github.com/users/0xKiwi/orgs",
      "repos_url": "https://api.github.com/users/0xKiwi/repos",
      "events_url": "https://api.github.com/users/0xKiwi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/0xKiwi/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 3,
  "created_at": "2020-06-22T04:32:26Z",
  "updated_at": "2020-07-20T17:47:10Z",
  "closed_at": "2020-07-17T22:56:23Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "Opening this issue to track best practices feedbacks from the Quantstamp audit\r\n\r\n- [x] 1. ~~In shared/bls/bls.go, duplicated code between VerifyAggregate, AggregateVerify and FastAggregateVerify~~ Won't fix, out of date feedback\r\n- [x] 2. In beacon-chain/state/getters.go, duplicated code between: #6476\r\n- [x] 3. In beacon-chain/state/setters.go, duplicated code between: #6476\r\n- [x] 4. In beacon-chain/cache/depositcache/pending_deposits.go, duplicated code between pendingDeposits and In pendingContainers. #6476\r\n- [x] 5. In beacon-chain/interop-cold-start/service.go, error messages on L182, 189, 192 should read “could not save”. #6355\r\n- [x] 6. In beacon-chain/forkchoice/types.go, field names in type Node struct do not follow a consistent naming convention. \r\n- [x] 7. In beacon-chain/blockchain/metrics.go#122, ignores error logging. Should it log it?\r\n- [x] 8. In beacon-chain/p2p/encoder/ssz.go, in function writeSnappyBuffer(), when there is an error, the function returns without closing bufWriter. We recommend closing it before returning.\r\n- [x] 9. In beacon-chain/p2p/beacon-chain/p2p/sender.go#20, baseTopic is used without validation. If the upstream code has an issue or becomes out-of-sync (e.g., attempts to send a topic that is no longer supported), the baseTopic string could potentially be a topic that is actually not supported. #6558 \r\n- [x] 10. In beacon-chain/p2p/peers/status.go#487, CurrentEpoch() could be renamed to HighestEpoch() to better reflect the semantics.\r\n- [x] 11. In beacon-chain/p2p/peers/status.go#433, pidEpochs could be renamed to pidToEpoch for consistency with rootToEpoch defined on L432.\r\n- [x] 12. There are multiple instances of in-line constants. We recommend moving these constants elsewhere: a separate constants file or the top of the current file, for better visibility and maintainability. Some instances including, but not limited to #6467 \r\n- [x] 13. Error messages should be more precise\r\n- [x] 14. In beacon-chain/p2p/watch_peers.go, there is a 30-second timeout. However, in beacon-chain/p2p/service.go#555, and beacon-chain/p2p/dial_relay_node.go#29, such a timeout is not present. We recommend to make the logic consistent. #6560 \r\n- [x] 15. We recommend to resolving the TODOs for production readiness:\r\n- [x] 16. In beacon-chain/p2p/discovery.go#33, the createListener() method does not follow the same pattern for error propagation as other methods do: it fails with Fatal errors while, for instance, the createLocalNode() method returns an error in case of an issue, which seems to be more common in the P2P codebase. We recommend improving consistency of error handling. #6525\r\n- [x] 17. In gossip_topic_mappings.go, the following constant is defined in the GossipTopicMappings: \"/eth2/%x/committee_index%d_beacon_attestation\": &pb.Attestation{} . The same constant is being defined again in broadcaster.go, attestationSubnetTopicFormat. We advise against code clones. #6525\r\n- [x] 18. The schema version of the libp2p protocol ID is currently hard-coded in the topic strings. To facilitate updating the version it would be beneficial to use a separate SchemaVersion state variable. #6558 \r\n- [x] 19. In validator/client/runner.go#111 since id represents a public key, we recommend renaming it to pubKey. #6375\r\n- [x] 20. In beacon-chain/core/helpers/validators.go#178, as long as the epoch doesn't change, there is no need to call CurrentEpoch(state)   since L151 already retrieves it in the e.\r\n- [x] 21. In beacon-chain/state/stateutil/arrays.go#118, inner and outer loops use variables named i. Use different names for these variables.\r\n- [x] 22. In shared/sliceutil/slice.go, function SplitOffset() should add a check to ensure that index * chunks < listSize.\r\n- [x] 23. ~~In beacon-chain/blockchain/process_attestation_helpers.go#126, the error message should be aligned with the code with respect to the logical operator; it should use “and” instead of “or”.~~ Alignment is fixed, wording is correct (we try to match ether current or prev epoch, so reporting issue when we can't match one **or** another).\r\n- [x] 24. In beacon-chain/state/stateutil/blocks.go, the constants such as 16 on L112, which corresponds to MAX_DEPOSITS in the ETH2 spec, should be refactored into named constants.\r\n- [x] 25. In beacon-chain/state/state_trie.go, the constant 21 is used throughout which corresponds to the number of field indices. This should be a named constant.\r\n- [x] 26. In beacon-chain/state/setters.go, the function SetStateRoots() does not appear to be used anywhere or tested.\r\n- [x] 27. In beacon-chain/state/setters.go, when updating reference counts, MinusRef() is used in many places, however varname.refs-- is used in others. It is not clear what distinguishes these cases, and likely MinusRef() could be used throughout.\r\n- [x] 28. In beacon-chain/state/getters.go, the function ValidatorAtIndex() could reuse Cloners.CopyValidator().\r\n- [x] 29. In beacon-chain/core/feed/operation/events.go#17, the constant AggregatedAttReceived does not appear to be used anywhere in the codebase.\r\n- [x] 30. In beacon-chain/core/block_operations.go#818, the statement: if len(indices) > 0, is unnecessary since the nested for-loop would not loop if len(indices) == 0.\r\n- [x] 31. In beacon-chain/core/block_operations.go, the deprecated function verifyDepositDataSigningRoot(), which relies upon the function ssz.SigningRoot() (which is also deprecated), is still used in ProcessDeposit().\r\n- [x] 32. In beacon-chain/main.go#115, the switch statement has breaks in case branches. Those are not needed in Go.\r\n- [x] 33. In validator/main.go#152, the switch statement has breaks in case branches. Those are not needed in Go. #6375\r\n- [x] 34. In beacon-chain/sync/subscriber.go#36, noopValidator() does not use the context parameter. It should be removed.\r\n- [x] 35. In beacon-chain/sync/subscriber.go#135, uses deprecated PubSub.Subscribe(). The code should be updated. #6554\r\n- [x] 36. In beacon-chain/sync/initial-sync/block_fetcher.go#405, the function for selecting a failover peer is inefficient. It does not have to filter out the wrong peer at the beginning by searching for it. It can right away randomly select a new peer. If it happens to find the same peer (the forbidden one), it knows where it is and can drop it. #6442\r\n- [x] 37. In beacon-chain/sync/initial-sync/block_fetcher.go#269, the name count is reused (previously used as a name of of the argument). We recommend using different names. #6357\r\n- [x] 38. In beacon-chain/sync/initial-sync/blocks_queue.go#310, there is a switch statement with an empty default label. Some logging/comment would be handy. #6357 \r\n- [x] 39. In beacon-chain/p2p/encoder/ssz.go, L160 and 163 should be swapped. The length error is known on L160, and the reader is not needed if the error happens.\r\n- [x] 40. In beacon-chain/db/iface/interface.go (and implementations), DeleteBlock() and DeleteBlocks() are not used outside tests. They are declared in the interface, and supported by the database in blocks.go (as well as kafka), but not used otherwise. They should be moved to the test scope only.\r\n- [x] 41. In beacon-chain/db/kv/operations.go, the functions HasVoluntaryExit() and VoluntaryExit() have a lot of duplicated code related to retrieving the exit. Reuse VoluntaryExit() in HasVoluntaryExit() and return whether it is not nil. #6476\r\n- [x] 42. In beacon-chain/db/kv/operations.go, it seems that none of the methods here is called externally. Are they part of the future phase? At the very least, DeleteVoluntaryExit() is only called in tests. Consider moving it to the test scope.\r\n- [x] 43. In beacon-chain/db/kv/slashings.go, the function ProposerSlashing() has a lot of duplicated code with HasProposerSlashing(). Reuse the result in HasProposerSlashing(). Same holds for AttesterSlashing() and HasAttesterSlashing(). #6476\r\n- [x] 44. In beacon-chain/db/kv/slashings.go, Delete[Attester]Slashing() methods seem to have a testing scope only. Unless they are part of an upcoming phase, consider moving those to the testing scope.\r\n- [x] 45. In beacon-chain/db/kv/state_summary.go and beacon-chain/db/kv/state.go, the functions State() and HasState() duplicate the code similarly to StateSumary() and HasStateSummary(). #6476\r\n- [x] 46. The code in beacon-chain/db/http_backup_handler.go seems to be obsolete. It should be removed. **Comment:** Not sure why it was deemed obsolete - it is being used.\r\n- [x] 47. In package validator/db, the code suffers from the same unused code issue as the beacon chain database (the Delete() methods). This is present in DeleteAttestationHistory() of attestation_history.go, DeleteProposalHistory() in proposal_history.go. #6557 \r\n- [x] ~~48.In package validator/db, there is some code duplicated in NewKVStore() methods in both validator/db and beacon_chain/db packages. Consider removing the duplicates and consolidate the filesystem code.~~ Won't fix, somewhat odd to deduplicate.\r\n- [x] 49. Inline constants are used instead of existing named constants. #6463\r\n- [x] 50. Many DB-related functions that perform a computation on a given entity also have a corresponding function to perform the same computation on a corresponding batch of elements of the same entity kind. Examples: SaveBlock()/SaveBlocks(), DeleteBlock()/DeleteBlocks(), SaveStateSummary()/SaveStateSummaries(), etc. Such pairs of singular/plural functions share a lot of common code that could be simplified. Since the plural form is the most generic computation, it suffices to rewrite the singular function as a call to the plural one giving it a batch of size one. #6462\r\n- [x] 51. In beacon-chain/db/filters/filter.go, L21-44: use iota instead of enumerating sequential values. #6358\r\n- [x] 52. In beacon-chain/db/filters/filter.go, declaring FilterType as an alias to int seems excessive; rather, uint8 would have sufficed. #6358\r\n- [x] 53. In beacon-chain/db/kafka/export_wrapper.go#36, prior to returning, issue a log info just to inform that the db was not wrapped. #6358\r\n- [x] 54. In beacon-chain/db/kv/archived_point.go#38, Update is being called, but no side effect occurs. Replace it with View. #6358\r\n- [x] ~~55. In beacon-chain/db/kv/archived_point.go#40, rename b to a more descriptive name.~~ No need, code block is focused enough, and bytes returned (which we call `b`) are converted to little-endian index.\r\n- [x] 56. In beacon-chain/db/kv/attestations.go, function createAttestationIndicesFromData() does not start & end a span. Following other functions, start & end a span. #6358 \r\n- [x] 57. In beacon-chain/db/kv/backup.go#32, the permissions of the backup directory path (0777) are less strict than the database folder (0700). Make it the same - 0700. #6522\r\n- [x] 58. In beacon-chain/db/kv/backup.go#38, the permissions of the backup db file (0666) are less strict than the target database (0600). Make it the same - 0600. #6522\r\n- [x] 59. In beacon-chain/db/kv/backup.go#38: give Open a timeout option. #6555\r\n- [x] 60. In beacon-chain/db/kv/backup.go, receiver name (kv) does not match receiver name in other files (k). Change all receiver names under db/* to the same name. #6356\r\n- [x] 61. In beacon-chain/db/kv/backup.go, Backup does not start & end an span. Following other functions in kv/*, start & end a span.\r\n- [x] 62. In beacon-chain/db/kv/blocks.go, L527, L531, Rename k to key for better expressiveness. #6358 \r\n- [x] ~~63. In beacon-chain/db/kv/blocks.go, L509, L512, the assignment of startSlot is redundant, as its value is already set by the if condition (success), or defaults to zero (failure) otherwise. Thus there is no need to update startSlot and the code can be simplified.~~ Intended: we have type assertion static analysis check, that requires us to check if assertion was ok.\r\n- [x] 64. In beacon-chain/db/kv/blocks.go, functions fetchBlockRootsBySlotRange(), createBlockIndicesFromBlock(), and createBlockIndicesFromFilters() do not start & end a span. Following other operations, start & end a span. #6358\r\n- [x] 65. In beacon-chain/db/kv/check_historical_state.go, the function HistoricalStatesDeleted() does not start & end aSpan. Following other operations, start & end a span. #6358\r\n- [x] 66. In beacon-chain/db/kv/encoding.go, encode and decode functions do not start & end a span. Following other functions in kv/*, start & end a span.\r\n- [x] 67. In beacon-chain/db/kv/kv.go, functions in kv.go do not start & end a span. Following other operations in kv/*, start & end a span.\r\n- [x] 68. In beacon-chain/db/kv/regen_historical_states.go, functions lastSavedBlockArchivedIndex() and saveArchivedInfo() do not start a trace. Following other functions in kv/*, start & end a span. #6358\r\n- [x] 69. In beacon-chain/db/kv/utils.go, no function in utils.go start & end a span. Following other functions in kv/*, start & end a span. #6358\r\n- [x] 70. In validator/db/attestation_history.go, unmarshalAttestationHistory() does not start & end a trace. Following other operations, start & end a span. #6375\r\n- [x] 71. In validator/db/db.go, rename receiver name for better reading. Suggestion: instead of db, which causes db.db to appear in some places, rename it to store. #6375\r\n- [x] 72. In validator/db/setup_db.go, as this code is essentially testing infra, put it in a dedicated testing folder (the same way as performed for the setup_db.go file in the beacon-chain db).\r\n- [x] 73. In Beacon-chain::Sync, across many files, Service receiver is named r. Suggestion: name r *Service as service *Service. #6348\r\n- [x] 74. In beacon-chain/sync/service.go, rename receiver to make it more expressive. Suggestion: name r *Service as service *Service. #6348\r\n- [x] 75. In beacon-chain/sync/pending_blocks_queue.go, lock/unlock in processPendingBlocksQueue() is not required, as the internal function execution never overlaps with itself. #6357\r\n- [x] 76. In beacon-chain/sync/pending_attestations_queue.go, lock/unlock in processPendingAttsQueue() is not required, as the internal function execution never overlaps with itself. #6357\r\n- [x] 77. In beacon-chain/blockchain/service.go#349, error message is incorrect, as it misses negation. Should be \"could not save genesis block root\". #6355",
  "closed_by": {
    "login": "terencechain",
    "id": 21316537,
    "node_id": "MDQ6VXNlcjIxMzE2NTM3",
    "avatar_url": "https://avatars.githubusercontent.com/u/21316537?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/terencechain",
    "html_url": "https://github.com/terencechain",
    "followers_url": "https://api.github.com/users/terencechain/followers",
    "following_url": "https://api.github.com/users/terencechain/following{/other_user}",
    "gists_url": "https://api.github.com/users/terencechain/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/terencechain/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/terencechain/subscriptions",
    "organizations_url": "https://api.github.com/users/terencechain/orgs",
    "repos_url": "https://api.github.com/users/terencechain/repos",
    "events_url": "https://api.github.com/users/terencechain/events{/privacy}",
    "received_events_url": "https://api.github.com/users/terencechain/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/6337/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/6337/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/648930028",
    "html_url": "https://github.com/prysmaticlabs/prysm/issues/6337#issuecomment-648930028",
    "issue_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/6337",
    "id": 648930028,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0ODkzMDAyOA==",
    "user": {
      "login": "terencechain",
      "id": 21316537,
      "node_id": "MDQ6VXNlcjIxMzE2NTM3",
      "avatar_url": "https://avatars.githubusercontent.com/u/21316537?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/terencechain",
      "html_url": "https://github.com/terencechain",
      "followers_url": "https://api.github.com/users/terencechain/followers",
      "following_url": "https://api.github.com/users/terencechain/following{/other_user}",
      "gists_url": "https://api.github.com/users/terencechain/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/terencechain/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/terencechain/subscriptions",
      "organizations_url": "https://api.github.com/users/terencechain/orgs",
      "repos_url": "https://api.github.com/users/terencechain/repos",
      "events_url": "https://api.github.com/users/terencechain/events{/privacy}",
      "received_events_url": "https://api.github.com/users/terencechain/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-24T16:34:49Z",
    "updated_at": "2020-06-24T16:34:49Z",
    "author_association": "MEMBER",
    "body": "Working down this list today. Let me know if you are working on anything in the list",
    "reactions": {
      "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/648930028/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/651886495",
    "html_url": "https://github.com/prysmaticlabs/prysm/issues/6337#issuecomment-651886495",
    "issue_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/6337",
    "id": 651886495,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1MTg4NjQ5NQ==",
    "user": {
      "login": "terencechain",
      "id": 21316537,
      "node_id": "MDQ6VXNlcjIxMzE2NTM3",
      "avatar_url": "https://avatars.githubusercontent.com/u/21316537?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/terencechain",
      "html_url": "https://github.com/terencechain",
      "followers_url": "https://api.github.com/users/terencechain/followers",
      "following_url": "https://api.github.com/users/terencechain/following{/other_user}",
      "gists_url": "https://api.github.com/users/terencechain/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/terencechain/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/terencechain/subscriptions",
      "organizations_url": "https://api.github.com/users/terencechain/orgs",
      "repos_url": "https://api.github.com/users/terencechain/repos",
      "events_url": "https://api.github.com/users/terencechain/events{/privacy}",
      "received_events_url": "https://api.github.com/users/terencechain/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-30T15:57:03Z",
    "updated_at": "2020-06-30T15:57:03Z",
    "author_association": "MEMBER",
    "body": "```\r\nfunctions HasVoluntaryExit() and VoluntaryExit() have a lot of duplicated code related to retrieving the exit. Reuse VoluntaryExit() in HasVoluntaryExit() and return whether it is not nil.\r\n```\r\n\r\nI'm leaning towards not to do this. This means `HasVoluntaryExit` will be burdened with an unnecessary decode, while some of the beacon operation is small, it could be fairly large later",
    "reactions": {
      "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/651886495/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/653162162",
    "html_url": "https://github.com/prysmaticlabs/prysm/issues/6337#issuecomment-653162162",
    "issue_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/6337",
    "id": 653162162,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1MzE2MjE2Mg==",
    "user": {
      "login": "prestonvanloon",
      "id": 7246818,
      "node_id": "MDQ6VXNlcjcyNDY4MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7246818?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/prestonvanloon",
      "html_url": "https://github.com/prestonvanloon",
      "followers_url": "https://api.github.com/users/prestonvanloon/followers",
      "following_url": "https://api.github.com/users/prestonvanloon/following{/other_user}",
      "gists_url": "https://api.github.com/users/prestonvanloon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/prestonvanloon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/prestonvanloon/subscriptions",
      "organizations_url": "https://api.github.com/users/prestonvanloon/orgs",
      "repos_url": "https://api.github.com/users/prestonvanloon/repos",
      "events_url": "https://api.github.com/users/prestonvanloon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/prestonvanloon/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-02T18:36:09Z",
    "updated_at": "2020-07-02T18:37:29Z",
    "author_association": "MEMBER",
    "body": "@terencechain \r\n\r\nThis can still be refactored for deduplication without the decoding, but it is a bit of a stretch to do so.\r\n\r\n\r\n```go\r\nfunc (kv *Store) voluntaryExitBytes(ctx context.Context, exitRoot [32]byte) ([]byte, error) {\r\n        ctx, span := trace.StartSpan(ctx, \"BeaconDB.voluntaryExitBytes\")\r\n\tdefer span.End()\r\n\tvar dst []byte\r\n\terr := kv.db.View(func(tx *bolt.Tx) error {\r\n\t\tbkt := tx.Bucket(voluntaryExitsBucket)\r\n\t\tdst := bkt.Get(exitRoot[:])\r\n\t\treturn nil\r\n\t})\r\n\treturn dst, err\r\n}\r\n\r\n// VoluntaryExit retrieval by signing root.\r\nfunc (kv *Store) VoluntaryExit(ctx context.Context, exitRoot [32]byte) (*ethpb.VoluntaryExit, error) {\r\n\tctx, span := trace.StartSpan(ctx, \"BeaconDB.VoluntaryExit\")\r\n\tdefer span.End()\r\n        enc, err := kv.voluntaryExitBytes(ctx, exitRoot)\r\n        if err != nil {\r\n           return nil, err\r\n        }\r\n\texit := &ethpb.VoluntaryExit{}\r\n\treturn exit, decode(ctx, enc, exit)\r\n}\r\n\r\n// HasVoluntaryExit verifies if a voluntary exit is stored in the db by its signing root.\r\nfunc (kv *Store) HasVoluntaryExit(ctx context.Context, exitRoot [32]byte) bool {\r\n\tctx, span := trace.StartSpan(ctx, \"BeaconDB.HasVoluntaryExit\")\r\n\tdefer span.End()\r\n\tenc, err := kv.voluntaryExitBytes(ctx, exitRoot)\r\n        if err != nil {\r\n            panic(err)\r\n        }\r\n\treturn len(enc) > 0\r\n}\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/653162162/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
