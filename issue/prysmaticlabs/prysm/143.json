{
  "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/143",
  "repository_url": "https://api.github.com/repos/prysmaticlabs/prysm",
  "labels_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/143/labels{/name}",
  "comments_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/143/comments",
  "events_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/143/events",
  "html_url": "https://github.com/prysmaticlabs/prysm/issues/143",
  "id": 327514944,
  "node_id": "MDU6SXNzdWUzMjc1MTQ5NDQ=",
  "number": 143,
  "title": "Reusing Geth's Nodes and Interfaces in Our Implementation",
  "user": {
    "login": "rauljordan",
    "id": 5572669,
    "node_id": "MDQ6VXNlcjU1NzI2Njk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5572669?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/rauljordan",
    "html_url": "https://github.com/rauljordan",
    "followers_url": "https://api.github.com/users/rauljordan/followers",
    "following_url": "https://api.github.com/users/rauljordan/following{/other_user}",
    "gists_url": "https://api.github.com/users/rauljordan/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/rauljordan/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/rauljordan/subscriptions",
    "organizations_url": "https://api.github.com/users/rauljordan/orgs",
    "repos_url": "https://api.github.com/users/rauljordan/repos",
    "events_url": "https://api.github.com/users/rauljordan/events{/privacy}",
    "received_events_url": "https://api.github.com/users/rauljordan/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 802129907,
      "node_id": "MDU6TGFiZWw4MDIxMjk5MDc=",
      "url": "https://api.github.com/repos/prysmaticlabs/prysm/labels/Help%20Wanted",
      "name": "Help Wanted",
      "color": "33aa3f",
      "default": false,
      "description": "Extra attention is needed"
    },
    {
      "id": 934596141,
      "node_id": "MDU6TGFiZWw5MzQ1OTYxNDE=",
      "url": "https://api.github.com/repos/prysmaticlabs/prysm/labels/Discussion",
      "name": "Discussion",
      "color": "f9d0c4",
      "default": false,
      "description": "Simply a thread for talking about stuff"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": {
    "login": "prestonvanloon",
    "id": 7246818,
    "node_id": "MDQ6VXNlcjcyNDY4MTg=",
    "avatar_url": "https://avatars.githubusercontent.com/u/7246818?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/prestonvanloon",
    "html_url": "https://github.com/prestonvanloon",
    "followers_url": "https://api.github.com/users/prestonvanloon/followers",
    "following_url": "https://api.github.com/users/prestonvanloon/following{/other_user}",
    "gists_url": "https://api.github.com/users/prestonvanloon/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/prestonvanloon/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/prestonvanloon/subscriptions",
    "organizations_url": "https://api.github.com/users/prestonvanloon/orgs",
    "repos_url": "https://api.github.com/users/prestonvanloon/repos",
    "events_url": "https://api.github.com/users/prestonvanloon/events{/privacy}",
    "received_events_url": "https://api.github.com/users/prestonvanloon/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "prestonvanloon",
      "id": 7246818,
      "node_id": "MDQ6VXNlcjcyNDY4MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7246818?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/prestonvanloon",
      "html_url": "https://github.com/prestonvanloon",
      "followers_url": "https://api.github.com/users/prestonvanloon/followers",
      "following_url": "https://api.github.com/users/prestonvanloon/following{/other_user}",
      "gists_url": "https://api.github.com/users/prestonvanloon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/prestonvanloon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/prestonvanloon/subscriptions",
      "organizations_url": "https://api.github.com/users/prestonvanloon/orgs",
      "repos_url": "https://api.github.com/users/prestonvanloon/repos",
      "events_url": "https://api.github.com/users/prestonvanloon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/prestonvanloon/received_events",
      "type": "User",
      "site_admin": false
    },
    {
      "login": "terencechain",
      "id": 21316537,
      "node_id": "MDQ6VXNlcjIxMzE2NTM3",
      "avatar_url": "https://avatars.githubusercontent.com/u/21316537?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/terencechain",
      "html_url": "https://github.com/terencechain",
      "followers_url": "https://api.github.com/users/terencechain/followers",
      "following_url": "https://api.github.com/users/terencechain/following{/other_user}",
      "gists_url": "https://api.github.com/users/terencechain/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/terencechain/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/terencechain/subscriptions",
      "organizations_url": "https://api.github.com/users/terencechain/orgs",
      "repos_url": "https://api.github.com/users/terencechain/repos",
      "events_url": "https://api.github.com/users/terencechain/events{/privacy}",
      "received_events_url": "https://api.github.com/users/terencechain/received_events",
      "type": "User",
      "site_admin": false
    },
    {
      "login": "nisdas",
      "id": 33201827,
      "node_id": "MDQ6VXNlcjMzMjAxODI3",
      "avatar_url": "https://avatars.githubusercontent.com/u/33201827?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nisdas",
      "html_url": "https://github.com/nisdas",
      "followers_url": "https://api.github.com/users/nisdas/followers",
      "following_url": "https://api.github.com/users/nisdas/following{/other_user}",
      "gists_url": "https://api.github.com/users/nisdas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nisdas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nisdas/subscriptions",
      "organizations_url": "https://api.github.com/users/nisdas/orgs",
      "repos_url": "https://api.github.com/users/nisdas/repos",
      "events_url": "https://api.github.com/users/nisdas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nisdas/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": {
    "url": "https://api.github.com/repos/prysmaticlabs/prysm/milestones/1",
    "html_url": "https://github.com/prysmaticlabs/prysm/milestone/1",
    "labels_url": "https://api.github.com/repos/prysmaticlabs/prysm/milestones/1/labels",
    "id": 3141840,
    "node_id": "MDk6TWlsZXN0b25lMzE0MTg0MA==",
    "number": 1,
    "title": "Ruby - Demo",
    "description": "The Ruby Release: Local Alphanet",
    "creator": {
      "login": "prestonvanloon",
      "id": 7246818,
      "node_id": "MDQ6VXNlcjcyNDY4MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7246818?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/prestonvanloon",
      "html_url": "https://github.com/prestonvanloon",
      "followers_url": "https://api.github.com/users/prestonvanloon/followers",
      "following_url": "https://api.github.com/users/prestonvanloon/following{/other_user}",
      "gists_url": "https://api.github.com/users/prestonvanloon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/prestonvanloon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/prestonvanloon/subscriptions",
      "organizations_url": "https://api.github.com/users/prestonvanloon/orgs",
      "repos_url": "https://api.github.com/users/prestonvanloon/repos",
      "events_url": "https://api.github.com/users/prestonvanloon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/prestonvanloon/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 0,
    "closed_issues": 270,
    "state": "closed",
    "created_at": "2018-02-25T21:22:44Z",
    "updated_at": "2018-10-09T10:37:42Z",
    "due_on": "2018-10-01T07:00:00Z",
    "closed_at": "2018-10-09T10:37:42Z"
  },
  "comments": 12,
  "created_at": "2018-05-29T22:53:02Z",
  "updated_at": "2018-06-06T20:39:58Z",
  "closed_at": "2018-06-06T20:39:58Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "Hi all,\r\n\r\nAs our goal is to eventually merge with upstream, we need to leverage the tools and interfaces Geth uses to spin up nodes instead of rewriting everything from scratch ourselves. As an example, instead of writing our own sharding node, we could try to leverage what currently exists in geth and instead attach a sharding server as a `Service`to a node in a similar way that the `les` package attaches a Light Ethereum Server.\r\n\r\nCurrently, there is a lot to work on but it is not too clear where exactly we can add these items in our code base. Being able to extend geth's functionality in a compliant way would make it easier for us to know exactly where to add the shardChainDB, or where to add a p2p discovery service, etc.\r\n\r\nFiguring this out would unblock a lot of potential issues and PRs we could assign to the team or leave open for other contributors. This will be the top priority for now and we can use this issue as a thread to share our findings as to how to go about this efficiently.\r\n\r\n## Requirements\r\n\r\n@terenc3t: can you look into what a protocol manager is in the `les` package and how we can use this?\r\n@prestonvanloon: can you take a look at `serverpool.go` in the `les` package and see how it attaches useful p2p services to the protocol manager?\r\n@nisdas: can you look at how the chainDb, state, and trie are used in the `les` package and share your findings here?\r\n\r\nI will be looking at the main entry points of Geth to see how we could initialize sharding in a similar fashion to how an Ethereum or a Light Ethereum instance are started. In this case we would launch a `ShardEthereum` instance.\r\n\r\nThank you,\r\nR\r\n",
  "closed_by": {
    "login": "rauljordan",
    "id": 5572669,
    "node_id": "MDQ6VXNlcjU1NzI2Njk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5572669?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/rauljordan",
    "html_url": "https://github.com/rauljordan",
    "followers_url": "https://api.github.com/users/rauljordan/followers",
    "following_url": "https://api.github.com/users/rauljordan/following{/other_user}",
    "gists_url": "https://api.github.com/users/rauljordan/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/rauljordan/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/rauljordan/subscriptions",
    "organizations_url": "https://api.github.com/users/rauljordan/orgs",
    "repos_url": "https://api.github.com/users/rauljordan/repos",
    "events_url": "https://api.github.com/users/rauljordan/events{/privacy}",
    "received_events_url": "https://api.github.com/users/rauljordan/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/143/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/143/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/392974368",
    "html_url": "https://github.com/prysmaticlabs/prysm/issues/143#issuecomment-392974368",
    "issue_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/143",
    "id": 392974368,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5Mjk3NDM2OA==",
    "user": {
      "login": "prestonvanloon",
      "id": 7246818,
      "node_id": "MDQ6VXNlcjcyNDY4MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7246818?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/prestonvanloon",
      "html_url": "https://github.com/prestonvanloon",
      "followers_url": "https://api.github.com/users/prestonvanloon/followers",
      "following_url": "https://api.github.com/users/prestonvanloon/following{/other_user}",
      "gists_url": "https://api.github.com/users/prestonvanloon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/prestonvanloon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/prestonvanloon/subscriptions",
      "organizations_url": "https://api.github.com/users/prestonvanloon/orgs",
      "repos_url": "https://api.github.com/users/prestonvanloon/repos",
      "events_url": "https://api.github.com/users/prestonvanloon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/prestonvanloon/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-29T22:58:52Z",
    "updated_at": "2018-05-29T22:58:52Z",
    "author_association": "MEMBER",
    "body": "Some of the key questions to answer:\r\n- What are the backends a geth node?\r\n- What is different about sharding backends?\r\n- How interchangeable are those backends? (i.e. Are the constructor arguments based on interfaces or structs for the backends we need to change).\r\n- How would our actors \"hook\" into a running shard node?\r\n- How would our actors interface with the main chain? (i.e. Do we run a LES along side the shard node server or do we interface with a running geth node via ethclient?)",
    "reactions": {
      "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/392974368/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/393308422",
    "html_url": "https://github.com/prysmaticlabs/prysm/issues/143#issuecomment-393308422",
    "issue_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/143",
    "id": 393308422,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5MzMwODQyMg==",
    "user": {
      "login": "terencechain",
      "id": 21316537,
      "node_id": "MDQ6VXNlcjIxMzE2NTM3",
      "avatar_url": "https://avatars.githubusercontent.com/u/21316537?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/terencechain",
      "html_url": "https://github.com/terencechain",
      "followers_url": "https://api.github.com/users/terencechain/followers",
      "following_url": "https://api.github.com/users/terencechain/following{/other_user}",
      "gists_url": "https://api.github.com/users/terencechain/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/terencechain/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/terencechain/subscriptions",
      "organizations_url": "https://api.github.com/users/terencechain/orgs",
      "repos_url": "https://api.github.com/users/terencechain/repos",
      "events_url": "https://api.github.com/users/terencechain/events{/privacy}",
      "received_events_url": "https://api.github.com/users/terencechain/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-30T20:31:05Z",
    "updated_at": "2018-05-30T20:32:05Z",
    "author_association": "MEMBER",
    "body": "protocolManager lives in LesServer, where LesServer defines node server configuration, it hosts fields such as config, flowControl, private key and what topics it listens to. When we initialize a new LesServer in `NewLesServer()` we call `NewProtocolManager()` in `handler.go`\r\n\r\nIn `server.go`:\r\n```go\r\ntype LesServer struct {\r\n\tconfig          *eth.Config\r\n\tprotocolManager *ProtocolManager\r\n\tfcManager       *flowcontrol.ClientManager \r\n\tfcCostStats     *requestCostStats\r\n\tdefParams       *flowcontrol.ServerParams\r\n\tlesTopics       []discv5.Topic\r\n\tprivateKey      *ecdsa.PrivateKey\r\n\tquitSync        chan struct{}\r\n}\r\n```\r\n```go\r\nfunc NewLesServer(eth *eth.Ethereum, config *eth.Config) (*LesServer, error) {\r\n\tpm, err := NewProtocolManager(eth.BlockChain().Config(), false, ServerProtocolVersions, config.NetworkId, eth.EventMux(), eth.Engine(), newPeerSet(), eth.BlockChain(), eth.TxPool(), eth.ChainDb(), nil, nil, quitSync, new(sync.WaitGroup))\r\n        srv := &LesServer{protocolManager:  pm}\r\n\tpm.server = srv\r\n\treturn srv, nil\r\n}\r\n```\r\n\r\nprotocolManager gives you access to txpool, chainConfig, chainDB and odr configs. NewProtocolManager returns a new sub protocol manager. The sub protocol manages peers capable with the ethereum network.\r\n\r\nin `handler.go`\r\n```go\r\ntype ProtocolManager struct {\r\n\tlightSync   bool\r\n\ttxpool      txPool\r\n\ttxrelay     *LesTxRelay\r\n\tnetworkId   uint64\r\n\tchainConfig *params.ChainConfig\r\n\tblockchain  BlockChain\r\n\tchainDb     ethdb.Database\r\n\todr         *LesOdr\r\n\tserver      *LesServer\r\n\tserverPool  *serverPool\r\n}\r\n```\r\n```go\r\nfunc NewProtocolManager(chainConfig *params.ChainConfig, lightSync bool, protocolVersions []uint, networkId uint64, mux *event.TypeMux, engine consensus.Engine, peers *peerSet, blockchain BlockChain, txpool txPool, chainDb ethdb.Database, odr *LesOdr, txrelay *LesTxRelay, quitSync chan struct{}, wg *sync.WaitGroup) (*ProtocolManager, error) {\r\n\tmanager := &ProtocolManager{\r\n\t\tlightSync:   lightSync,\r\n\t\tblockchain:  blockchain,\r\n\t\tchainConfig: chainConfig,\r\n\t\tchainDb:     chainDb,\r\n\t\todr:         odr,\r\n\t\tnetworkId:   networkId,\r\n\t\ttxpool:      txpool,\r\n\t\ttxrelay:     txrelay,\r\n\t\tpeers:       peers,\r\n\t\tnewPeerCh:   make(chan *peer),\r\n\t}\r\n\r\n        // Initiate a subprotocols for every implemented version we can handle\r\n\r\n\tif lightSync {\r\n\t\tmanager.downloader = downloader.New(downloader.LightSync, chainDb, manager.eventMux, nil, blockchain, removePeer)\r\n\t\tmanager.peers.notify((*downloaderPeerNotify)(manager))\r\n\t\tmanager.fetcher = newLightFetcher(manager)\r\n\t}\r\n\r\n\treturn manager, nil\r\n}\r\n```\r\nprotocolManager is also used in `fetcher.go` The lightFetcher implements retrieval of newly announced headers. It also provides a peerHasBlock function for the ODR system to ensure that we only request data related to a certain block from peers who have already processed and announced that block\r\n\r\nin `fetcher.go`\r\n```go\r\ntype lightFetcher struct {\r\n\tpm    *ProtocolManager\r\n\todr   *LesOdr\r\n\tchain *light.LightChain\r\n}\r\n```\r\n```go \r\nfunc newLightFetcher(pm *ProtocolManager) *lightFetcher {\r\n\tf := &lightFetcher{\r\n\t\tpm:             pm,\r\n\t\tchain:          pm.blockchain.(*light.LightChain),\r\n\t\todr:            pm.odr,\r\n\t\tpeers:          make(map[*peer]*fetcherPeerInfo),\r\n\t\tdeliverChn:     make(chan fetchResponse, 100),\r\n\t\trequested:      make(map[uint64]fetchRequest),\r\n\t\ttimeoutChn:     make(chan uint64),\r\n\t\trequestChn:     make(chan bool, 100),\r\n\t\tsyncDone:       make(chan *peer),\r\n\t\tmaxConfirmedTd: big.NewInt(0),\r\n\t}\r\n\tpm.peers.notify(f)\r\n\r\n\tf.pm.wg.Add(1)\r\n\tgo f.syncLoop()\r\n\treturn f\r\n}\r\n```\r\n\r\nI think it makes the most sense to have a `ShardServer` (similar to `LesServer`), `ShardServer` will implement `shardProtocolManager` where it implements all the sharding protocol specs (similar to `ProtocolManager`) Then we can create sharding specific service like `lightFetcher` which uses `shardProtocolManager`",
    "reactions": {
      "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/393308422/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/393366355",
    "html_url": "https://github.com/prysmaticlabs/prysm/issues/143#issuecomment-393366355",
    "issue_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/143",
    "id": 393366355,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5MzM2NjM1NQ==",
    "user": {
      "login": "prestonvanloon",
      "id": 7246818,
      "node_id": "MDQ6VXNlcjcyNDY4MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7246818?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/prestonvanloon",
      "html_url": "https://github.com/prestonvanloon",
      "followers_url": "https://api.github.com/users/prestonvanloon/followers",
      "following_url": "https://api.github.com/users/prestonvanloon/following{/other_user}",
      "gists_url": "https://api.github.com/users/prestonvanloon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/prestonvanloon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/prestonvanloon/subscriptions",
      "organizations_url": "https://api.github.com/users/prestonvanloon/orgs",
      "repos_url": "https://api.github.com/users/prestonvanloon/repos",
      "events_url": "https://api.github.com/users/prestonvanloon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/prestonvanloon/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-31T00:53:59Z",
    "updated_at": "2018-05-31T00:53:59Z",
    "author_association": "MEMBER",
    "body": "## Protocol Manager API\r\n\r\nThe API for the `ProtocolManager` of the full geth node is:\r\n\r\n```\r\ntype ProtocolManager\r\nfunc NewProtocolManager(config *params.ChainConfig, mode downloader.SyncMode, networkId uint64, mux *event.TypeMux, txpool txPool, engine consensus.Engine, blockchain *core.BlockChain, chaindb ethdb.Database) (*ProtocolManager, error)\r\nfunc (pm *ProtocolManager) BroadcastBlock(block *types.Block, propagate bool)\r\nfunc (pm *ProtocolManager) BroadcastTxs(txs types.Transactions)\r\nfunc (pm *ProtocolManager) NodeInfo() *NodeInfo\r\nfunc (pm *ProtocolManager) Start(maxPeers int)\r\nfunc (pm *ProtocolManager) Stop()\r\n```\r\n\r\nThe LES version is slightly different:\r\n\r\n```\r\ntype ProtocolManager\r\nfunc NewProtocolManager(chainConfig *params.ChainConfig, lightSync bool, protocolVersions []uint, networkId uint64, mux *event.TypeMux, engine consensus.Engine, peers *peerSet, blockchain BlockChain, txpool txPool, chainDb ethdb.Database, odr *LesOdr, txrelay *LesTxRelay, quitSync chan struct{}, wg *sync.WaitGroup) (*ProtocolManager, error)\r\nfunc (self *ProtocolManager) NodeInfo() *NodeInfo\r\nfunc (pm *ProtocolManager) Start(maxPeers int)\r\nfunc (pm *ProtocolManager) Stop()\r\n```\r\n\r\nWhat are the common params (not in order)?\r\n\r\n| Param | Full node? | LES Node? |\r\n| -------- | -------- | -------- |\r\n| config \\*params.ChainConfig | Yes | Yes |\r\n| mode downloader.SyncMode | Yes | No |\r\n| networkId uint64 | Yes | Yes |\r\n| mux \\*event.TypeMux | Yes | Yes |\r\n| txpool txPool | Yes | Yes |\r\n| engine consensus.Engine | Yes | Yes |\r\n| blockchain \\*core.BlockChain | Yes | No -- Why is this different? |\r\n| chaindb ethdb.Database | Yes | Yes |\r\n| lightSync bool | No | Yes |\r\n| protocolVersions []uint | No | Yes\r\n| peers \\*peerSet | No | Yes | \r\n| blockchain BlockChain | No | Yes -- Why is this different? |\r\n| odr \\*LesOdr | No | Yes |\r\n| txrelay \\*LesTxRelay | No | Yes | \r\n| quitSync chan struct{} | No | Yes | \r\n| wg \\*sync.WaitGroup | No | Yes |\r\n\r\n## What are the likely params required by a sharding node?\r\n\r\nThese are common between LES and full Geth.\r\n\r\n- `networkId`\r\n- `*params.ChainConfig`\r\n- `*event.typeMux`\r\n- `txPool`\r\n- `concensus.Engine`\r\n- `ethdb.Database`\r\n- `protocolVersions`\r\n\r\nFor sharding we would want to provide a new implemention of the \r\n`concensus.Engine` and `ethdb.Database`. \r\n\r\n**Some more questions to answer:**\r\n\r\n- How are the LES blockchain and geth full node blockchain different? \r\n- What is the responsibility of NewProtocolManager?",
    "reactions": {
      "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/393366355/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/393372763",
    "html_url": "https://github.com/prysmaticlabs/prysm/issues/143#issuecomment-393372763",
    "issue_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/143",
    "id": 393372763,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5MzM3Mjc2Mw==",
    "user": {
      "login": "prestonvanloon",
      "id": 7246818,
      "node_id": "MDQ6VXNlcjcyNDY4MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7246818?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/prestonvanloon",
      "html_url": "https://github.com/prestonvanloon",
      "followers_url": "https://api.github.com/users/prestonvanloon/followers",
      "following_url": "https://api.github.com/users/prestonvanloon/following{/other_user}",
      "gists_url": "https://api.github.com/users/prestonvanloon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/prestonvanloon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/prestonvanloon/subscriptions",
      "organizations_url": "https://api.github.com/users/prestonvanloon/orgs",
      "repos_url": "https://api.github.com/users/prestonvanloon/repos",
      "events_url": "https://api.github.com/users/prestonvanloon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/prestonvanloon/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-31T01:30:08Z",
    "updated_at": "2018-05-31T01:38:34Z",
    "author_association": "MEMBER",
    "body": "## What are the params for sharding?\r\n\r\n| Param type | What is it? |\r\n|------------|-------------|\r\n| `networkId` int64 | The network ID, used for P2P handshakes and peer acceptance |\r\n| `chainConfig` *(new!)* \\*params.ChainConfig | Sharding will have its own struct for a chain config. This will contain various data including the chain ID, fork block numbers, etc. See the existing implementation [here](https://godoc.org/github.com/ethereum/go-ethereum/params#ChainConfig) for an idea. |\r\n| `mux` [*event.typeMux](https://godoc.org/github.com/ethereum/go-ethereum/event#TypeMuxEvent) | A TypeMux dispatches events to registered receivers. Receivers can be registered to handle events of certain type. **Deprecated! Use [event.Feed](https://godoc.org/github.com/ethereum/go-ethereum/event#Feed)**. Feed provides a similar one-to-many subscription channel. |\r\n| txPool [core.TxPool](https://godoc.org/github.com/ethereum/go-ethereum/core#TxPool) *Note: LES has its own txPool impl* | TxPool contains all currently known transactions. Transactions enter the pool when they are received from the network or submitted locally. They exit the pool when they are included in the blockchain. The pool separates processable transactions (which can be applied to the current state) and future transactions. Transactions move between those two states over time as they are received and processed. |\r\n| engine [consensus.Engine](https://godoc.org/github.com/ethereum/go-ethereum/consensus#Engine) | This will almost certainly need to be new for sharding. Consensus works quite differently for sharding. Key question: **Can we implement the same interface for sharding?** |\r\n| chaindb [ethdb.Database](https://godoc.org/github.com/ethereum/go-ethereum/ethdb#Database) | Database wraps all database operations. *This seems very similar to what we wrote as well! See: [ShardBackend](https://godoc.org/github.com/prysmaticlabs/geth-sharding/sharding/database#ShardBackend).* |\r\n| protocolVersions `[]uint` | The list of protocol messages that are supported by this particular client. If a peer also supports one of the protocol version then they are compatible with this client. |\r\n| blockchain [core.Blockchain](https://godoc.org/github.com/ethereum/go-ethereum/core#BlockChain) | BlockChain represents the canonical chain given a database with a genesis block. The Blockchain manages chain imports, reverts, chain reorganisations. **Do we need a new implementation for sharding?** | ",
    "reactions": {
      "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/393372763/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/393373618",
    "html_url": "https://github.com/prysmaticlabs/prysm/issues/143#issuecomment-393373618",
    "issue_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/143",
    "id": 393373618,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5MzM3MzYxOA==",
    "user": {
      "login": "prestonvanloon",
      "id": 7246818,
      "node_id": "MDQ6VXNlcjcyNDY4MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7246818?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/prestonvanloon",
      "html_url": "https://github.com/prestonvanloon",
      "followers_url": "https://api.github.com/users/prestonvanloon/followers",
      "following_url": "https://api.github.com/users/prestonvanloon/following{/other_user}",
      "gists_url": "https://api.github.com/users/prestonvanloon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/prestonvanloon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/prestonvanloon/subscriptions",
      "organizations_url": "https://api.github.com/users/prestonvanloon/orgs",
      "repos_url": "https://api.github.com/users/prestonvanloon/repos",
      "events_url": "https://api.github.com/users/prestonvanloon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/prestonvanloon/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-31T01:36:14Z",
    "updated_at": "2018-05-31T01:36:14Z",
    "author_association": "MEMBER",
    "body": "Summarizing the unanswered questions at this point:\r\n\r\n- Can we use the `consensus.Engine` interface for sharding?\r\n- What is the difference between [core.Blockchain](https://godoc.org/github.com/ethereum/go-ethereum/core#BlockChain) and [les.Blockchain](https://godoc.org/github.com/ethereum/go-ethereum/les#BlockChain)?\r\n- Do we need a sharding `Blockchain`? ",
    "reactions": {
      "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/393373618/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/393395039",
    "html_url": "https://github.com/prysmaticlabs/prysm/issues/143#issuecomment-393395039",
    "issue_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/143",
    "id": 393395039,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5MzM5NTAzOQ==",
    "user": {
      "login": "terencechain",
      "id": 21316537,
      "node_id": "MDQ6VXNlcjIxMzE2NTM3",
      "avatar_url": "https://avatars.githubusercontent.com/u/21316537?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/terencechain",
      "html_url": "https://github.com/terencechain",
      "followers_url": "https://api.github.com/users/terencechain/followers",
      "following_url": "https://api.github.com/users/terencechain/following{/other_user}",
      "gists_url": "https://api.github.com/users/terencechain/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/terencechain/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/terencechain/subscriptions",
      "organizations_url": "https://api.github.com/users/terencechain/orgs",
      "repos_url": "https://api.github.com/users/terencechain/repos",
      "events_url": "https://api.github.com/users/terencechain/events{/privacy}",
      "received_events_url": "https://api.github.com/users/terencechain/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-31T04:04:47Z",
    "updated_at": "2018-05-31T04:06:02Z",
    "author_association": "MEMBER",
    "body": "> What is the difference between core.Blockchain and les.Blockchain?\r\n\r\n`core.Blockchain` has access to the complete data set of the canonical chain starting from genesis block. `core.Blockchain` manages chain imports, reverts and reorgs. `LightChain` only represents a canonical chain that by default only handles block headers and it only does header validation during chain insertion.\r\n\r\nField | Blockchain | Lightchain\r\n------------ | ---- | ----\r\nchainConfig *params.ChainConfig | Yes | No\r\ncacheConfig *CacheConfig |Yes | No\r\ndb  ethdb.Database |Yes| Yes\r\nhc *HeaderChain |Yes| Yes\r\nrmLogsFeed event.Feed|Yes|No\r\nchainFeed  event.Feed|Yes|Yes\r\nchainSideFeed event.Feed|Yes|Yes\r\nchainHeadFeed event.Feed|Yes|Yes\r\nlogsFeed event.Feed|Yes|No\r\nscope event.SubscriptionScope|Yes|Yes\r\ngenesisBlock  *types.Block|Yes|Yes\r\nmu sync.RWMutex |Yes|Yes\r\nchainmu sync.RWMutex|Yes| Yes\r\nprocmu  sync.RWMutex |Yes|No\r\ncheckpoint int          |Yes|No //light client don't use check point\r\ncurrentBlock atomic.Value |Yes|No //light client don't care about block \r\ncurrentFastBlock atomic.Value |Yes|No //light client don't care about block \r\nstateCache state.Database |Yes|No //light client don't care about block \r\nbodyCache *lru.Cache     |Yes|Yes\r\nbodyRLPCache *lru.Cache     |Yes|Yes\r\nblockCache *lru.Cache     |Yes|Yes\r\nfutureBlocks *lru.Cache     |Yes|No //lightchain don't care about future block\r\nquit chan struct{} |Yes|Yes\r\nrunning int32         |Yes|Yes\r\nprocInterrupt int32        |Yes|  Yes\r\nwg sync.WaitGroup |Yes|Yes\r\nengine consensus.Engine|Yes|Yes\r\nprocessor Processor |Yes|No //light client don't process\r\nvalidator Validator |Yes|No //light client don't validate\r\nvmConfig  vm.Config|Yes|No\r\nbadBlocks *lru.Cache|Yes|No //light client don't care about block\r\nodr  OdrBackend |No|Yes //odr is only within les protocol\r\n\r\nWhat are some sharding specific fields for Blockchain?\r\n- collation instead of block\r\n- different odr for sharding p2p protocol\r\n- different consensus engine\r\n- different check point scheme for windback\r\n- different db\r\n- different chainFeed",
    "reactions": {
      "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/393395039/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/393401748",
    "html_url": "https://github.com/prysmaticlabs/prysm/issues/143#issuecomment-393401748",
    "issue_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/143",
    "id": 393401748,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5MzQwMTc0OA==",
    "user": {
      "login": "nisdas",
      "id": 33201827,
      "node_id": "MDQ6VXNlcjMzMjAxODI3",
      "avatar_url": "https://avatars.githubusercontent.com/u/33201827?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nisdas",
      "html_url": "https://github.com/nisdas",
      "followers_url": "https://api.github.com/users/nisdas/followers",
      "following_url": "https://api.github.com/users/nisdas/following{/other_user}",
      "gists_url": "https://api.github.com/users/nisdas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nisdas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nisdas/subscriptions",
      "organizations_url": "https://api.github.com/users/nisdas/orgs",
      "repos_url": "https://api.github.com/users/nisdas/repos",
      "events_url": "https://api.github.com/users/nisdas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nisdas/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-31T04:53:24Z",
    "updated_at": "2018-05-31T04:54:30Z",
    "author_association": "MEMBER",
    "body": "How the trie is built is specified in the light package\r\n```\r\ntype odrTrie struct {\r\n\tdb   *odrDatabase\r\n\tid   *TrieID\r\n\ttrie *trie.Trie\r\n}\r\n```\r\nThe trie is implemented the same way it is for `les` and full geth. The same can be said for the state which created using a given trie through\r\n`func NewState(ctx context.Context, head *types.Header, odr OdrBackend) *state.StateDB`\r\n\r\nIf you look at the backend for les\r\n```\r\ntype OdrBackend interface {\r\n\tDatabase() ethdb.Database\r\n\tChtIndexer() *core.ChainIndexer\r\n\tBloomTrieIndexer() *core.ChainIndexer\r\n\tBloomIndexer() *core.ChainIndexer\r\n\tRetrieve(ctx context.Context, req OdrRequest) error\r\n}\r\n```\r\nthe same db is implemented and accessed in the full client and light client. The only major difference I see would be in the syncing protocol for it. \r\n\r\nFor us in sharding the major changes I can see that we would have to be the trie structure and we would need a new implementation of a `sharded` db. Also state syncing would be another thing we would have to implement\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/393401748/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/393409997",
    "html_url": "https://github.com/prysmaticlabs/prysm/issues/143#issuecomment-393409997",
    "issue_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/143",
    "id": 393409997,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5MzQwOTk5Nw==",
    "user": {
      "login": "rauljordan",
      "id": 5572669,
      "node_id": "MDQ6VXNlcjU1NzI2Njk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5572669?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rauljordan",
      "html_url": "https://github.com/rauljordan",
      "followers_url": "https://api.github.com/users/rauljordan/followers",
      "following_url": "https://api.github.com/users/rauljordan/following{/other_user}",
      "gists_url": "https://api.github.com/users/rauljordan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rauljordan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rauljordan/subscriptions",
      "organizations_url": "https://api.github.com/users/rauljordan/orgs",
      "repos_url": "https://api.github.com/users/rauljordan/repos",
      "events_url": "https://api.github.com/users/rauljordan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rauljordan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-31T05:36:32Z",
    "updated_at": "2018-05-31T05:42:45Z",
    "author_association": "CONTRIBUTOR",
    "body": "State syncing in sharding would be different for notaries and proposers. Proposers would indeed need to be syncing with the shard they are processing tx's for and I can imagine we can follow certain similarities to geth here. For notaries, however, we have to be very efficient about [notary burst overhead](https://ethresear.ch/t/a-general-framework-of-overhead-and-finality-time-in-sharding-and-a-proposal/1638). \r\n\r\nBasically, when a notary is selected in a shard, the notary has to sync as fast as possible with the shard chain, download collation headers, and use a [fork choice rule](https://ethresear.ch/t/extending-minimal-sharding-with-cross-links/1989). In this case, we have to work with a sync protocol that aligns well with rapid reshuffling across networks and has a solid cache mechanism.\r\n\r\n@nisdas \r\n> For us in sharding the major changes I can see that we would have to be the trie structure and we would need a new implementation of a shard db. Also state syncing would be another thing we would have to implement.\r\n\r\nSo this means we can use the same interface for an OdrBackend as we will just have to modify the actual trie. Swapping the db will also be easy as there is already an interface there we can satisfy if we use something like badgerdb or redis.\r\n\r\n@terenc3t \r\n> What are some sharding specific fields for Blockchain?\r\n\r\nWe will definitely need to modify the blockchain struct a lot as the fundamental structure of its primitives are different for sharding. We can implement something that at least satisfies most of the current interface, but the methods will most likely be very different.\r\n\r\n@prestonvanloon \r\n> Can we use the consensus.Engine interface for sharding?\r\n\r\nthe consensus engine will life at the notary level, so we can perhaps keep this constrained to the notary package? Having something like a protocol manager does make sense in this case. Based on this analysis, we can follow a very similar structure to les, and we can probably get away with importing a lot of the interfaces and structs. However, there will definitely be a lot we will have to completely overhaul as our entire p2p layer is different and so much depends on it. Maybe this consensus engine can be renamed to something specific to the fork choice rule for shards exerted by notaries?",
    "reactions": {
      "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/393409997/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/393411013",
    "html_url": "https://github.com/prysmaticlabs/prysm/issues/143#issuecomment-393411013",
    "issue_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/143",
    "id": 393411013,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5MzQxMTAxMw==",
    "user": {
      "login": "rauljordan",
      "id": 5572669,
      "node_id": "MDQ6VXNlcjU1NzI2Njk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5572669?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rauljordan",
      "html_url": "https://github.com/rauljordan",
      "followers_url": "https://api.github.com/users/rauljordan/followers",
      "following_url": "https://api.github.com/users/rauljordan/following{/other_user}",
      "gists_url": "https://api.github.com/users/rauljordan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rauljordan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rauljordan/subscriptions",
      "organizations_url": "https://api.github.com/users/rauljordan/orgs",
      "repos_url": "https://api.github.com/users/rauljordan/repos",
      "events_url": "https://api.github.com/users/rauljordan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rauljordan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-31T05:42:00Z",
    "updated_at": "2018-05-31T05:42:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks a lot for this guys - we're getting close. I think we can do very well if we can reuse a lot of the caching mechanisms Geth has as fields within a lot of these structs. Tests should also be easier to write as we will have clear references to existing tests if we import a lot of what Geth currently does.",
    "reactions": {
      "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/393411013/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/393415575",
    "html_url": "https://github.com/prysmaticlabs/prysm/issues/143#issuecomment-393415575",
    "issue_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/143",
    "id": 393415575,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5MzQxNTU3NQ==",
    "user": {
      "login": "nisdas",
      "id": 33201827,
      "node_id": "MDQ6VXNlcjMzMjAxODI3",
      "avatar_url": "https://avatars.githubusercontent.com/u/33201827?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nisdas",
      "html_url": "https://github.com/nisdas",
      "followers_url": "https://api.github.com/users/nisdas/followers",
      "following_url": "https://api.github.com/users/nisdas/following{/other_user}",
      "gists_url": "https://api.github.com/users/nisdas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nisdas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nisdas/subscriptions",
      "organizations_url": "https://api.github.com/users/nisdas/orgs",
      "repos_url": "https://api.github.com/users/nisdas/repos",
      "events_url": "https://api.github.com/users/nisdas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nisdas/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-31T06:06:42Z",
    "updated_at": "2018-05-31T06:06:42Z",
    "author_association": "MEMBER",
    "body": "@rauljordan Yeap, thats right. We can reuse the same interface for our sharded db. A lot of the interfaces in the `light` and `les` package can be re-used for our purposes. This way seems much easier as instead of building from the ground up we can reuse a lot of the code in the `les` package and modify/add new code as required. \r\n",
    "reactions": {
      "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/393415575/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/394107171",
    "html_url": "https://github.com/prysmaticlabs/prysm/issues/143#issuecomment-394107171",
    "issue_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/143",
    "id": 394107171,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5NDEwNzE3MQ==",
    "user": {
      "login": "rauljordan",
      "id": 5572669,
      "node_id": "MDQ6VXNlcjU1NzI2Njk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5572669?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rauljordan",
      "html_url": "https://github.com/rauljordan",
      "followers_url": "https://api.github.com/users/rauljordan/followers",
      "following_url": "https://api.github.com/users/rauljordan/following{/other_user}",
      "gists_url": "https://api.github.com/users/rauljordan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rauljordan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rauljordan/subscriptions",
      "organizations_url": "https://api.github.com/users/rauljordan/orgs",
      "repos_url": "https://api.github.com/users/rauljordan/repos",
      "events_url": "https://api.github.com/users/rauljordan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rauljordan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-02T18:30:39Z",
    "updated_at": "2018-06-02T18:30:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hey all, the `core.Blockchain` struct should be very different than the one we use in the `ShardProtocolManager`. We will need some of the cache, sync, and checkpoint fields, but the implementations will be fundamentally different due to having different primitives.\r\n\r\nA lot of the `Blockchain` api methods rely on the current implementation of the state, consensus mechanisms, and gas/execution concepts. These are fundamentally different in a sharded mechanism, so I don't think we will be importing `core.Blockchain` or its associated methods in our implementation. Instead, the `ShardProtocolManager` will contain a `shard *Shard` field.",
    "reactions": {
      "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/394107171/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/394127824",
    "html_url": "https://github.com/prysmaticlabs/prysm/issues/143#issuecomment-394127824",
    "issue_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/143",
    "id": 394127824,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5NDEyNzgyNA==",
    "user": {
      "login": "prestonvanloon",
      "id": 7246818,
      "node_id": "MDQ6VXNlcjcyNDY4MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7246818?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/prestonvanloon",
      "html_url": "https://github.com/prestonvanloon",
      "followers_url": "https://api.github.com/users/prestonvanloon/followers",
      "following_url": "https://api.github.com/users/prestonvanloon/following{/other_user}",
      "gists_url": "https://api.github.com/users/prestonvanloon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/prestonvanloon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/prestonvanloon/subscriptions",
      "organizations_url": "https://api.github.com/users/prestonvanloon/orgs",
      "repos_url": "https://api.github.com/users/prestonvanloon/repos",
      "events_url": "https://api.github.com/users/prestonvanloon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/prestonvanloon/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-03T01:13:23Z",
    "updated_at": "2018-06-03T01:13:23Z",
    "author_association": "MEMBER",
    "body": "Further discussion in the design doc: https://docs.google.com/document/d/1J4AEHTSKDGJpNzWS7ZXPqD0yEjqecb-xjdVkjGrxRMk/edit",
    "reactions": {
      "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/394127824/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
