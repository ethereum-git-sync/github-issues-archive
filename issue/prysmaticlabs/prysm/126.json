{
  "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/126",
  "repository_url": "https://api.github.com/repos/prysmaticlabs/prysm",
  "labels_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/126/labels{/name}",
  "comments_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/126/comments",
  "events_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/126/events",
  "html_url": "https://github.com/prysmaticlabs/prysm/issues/126",
  "id": 324571382,
  "node_id": "MDU6SXNzdWUzMjQ1NzEzODI=",
  "number": 126,
  "title": "Revamp the Sharding Client Entry Points / Architecture",
  "user": {
    "login": "rauljordan",
    "id": 5572669,
    "node_id": "MDQ6VXNlcjU1NzI2Njk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5572669?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/rauljordan",
    "html_url": "https://github.com/rauljordan",
    "followers_url": "https://api.github.com/users/rauljordan/followers",
    "following_url": "https://api.github.com/users/rauljordan/following{/other_user}",
    "gists_url": "https://api.github.com/users/rauljordan/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/rauljordan/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/rauljordan/subscriptions",
    "organizations_url": "https://api.github.com/users/rauljordan/orgs",
    "repos_url": "https://api.github.com/users/rauljordan/repos",
    "events_url": "https://api.github.com/users/rauljordan/events{/privacy}",
    "received_events_url": "https://api.github.com/users/rauljordan/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": {
    "login": "rauljordan",
    "id": 5572669,
    "node_id": "MDQ6VXNlcjU1NzI2Njk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5572669?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/rauljordan",
    "html_url": "https://github.com/rauljordan",
    "followers_url": "https://api.github.com/users/rauljordan/followers",
    "following_url": "https://api.github.com/users/rauljordan/following{/other_user}",
    "gists_url": "https://api.github.com/users/rauljordan/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/rauljordan/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/rauljordan/subscriptions",
    "organizations_url": "https://api.github.com/users/rauljordan/orgs",
    "repos_url": "https://api.github.com/users/rauljordan/repos",
    "events_url": "https://api.github.com/users/rauljordan/events{/privacy}",
    "received_events_url": "https://api.github.com/users/rauljordan/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "rauljordan",
      "id": 5572669,
      "node_id": "MDQ6VXNlcjU1NzI2Njk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5572669?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rauljordan",
      "html_url": "https://github.com/rauljordan",
      "followers_url": "https://api.github.com/users/rauljordan/followers",
      "following_url": "https://api.github.com/users/rauljordan/following{/other_user}",
      "gists_url": "https://api.github.com/users/rauljordan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rauljordan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rauljordan/subscriptions",
      "organizations_url": "https://api.github.com/users/rauljordan/orgs",
      "repos_url": "https://api.github.com/users/rauljordan/repos",
      "events_url": "https://api.github.com/users/rauljordan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rauljordan/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": {
    "url": "https://api.github.com/repos/prysmaticlabs/prysm/milestones/1",
    "html_url": "https://github.com/prysmaticlabs/prysm/milestone/1",
    "labels_url": "https://api.github.com/repos/prysmaticlabs/prysm/milestones/1/labels",
    "id": 3141840,
    "node_id": "MDk6TWlsZXN0b25lMzE0MTg0MA==",
    "number": 1,
    "title": "Ruby - Demo",
    "description": "The Ruby Release: Local Alphanet",
    "creator": {
      "login": "prestonvanloon",
      "id": 7246818,
      "node_id": "MDQ6VXNlcjcyNDY4MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7246818?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/prestonvanloon",
      "html_url": "https://github.com/prestonvanloon",
      "followers_url": "https://api.github.com/users/prestonvanloon/followers",
      "following_url": "https://api.github.com/users/prestonvanloon/following{/other_user}",
      "gists_url": "https://api.github.com/users/prestonvanloon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/prestonvanloon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/prestonvanloon/subscriptions",
      "organizations_url": "https://api.github.com/users/prestonvanloon/orgs",
      "repos_url": "https://api.github.com/users/prestonvanloon/repos",
      "events_url": "https://api.github.com/users/prestonvanloon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/prestonvanloon/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 0,
    "closed_issues": 270,
    "state": "closed",
    "created_at": "2018-02-25T21:22:44Z",
    "updated_at": "2018-10-09T10:37:42Z",
    "due_on": "2018-10-01T07:00:00Z",
    "closed_at": "2018-10-09T10:37:42Z"
  },
  "comments": 6,
  "created_at": "2018-05-18T22:40:00Z",
  "updated_at": "2018-05-24T22:30:44Z",
  "closed_at": "2018-05-24T22:30:44Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "Hi all,\r\n\r\nThis is an issue that expands upon #122 to restructure our sharding client effectively. We need to leverage the first-class concurrency Go offers and allow for more modularity in the services attached to our running clients.\r\n\r\nThis is a very big topic requiring extensive discussion and design, so I propose a simple PR to get things started.\r\n\r\n## Requirements\r\n\r\n- Refactor the entry point of the sharding command to instead take `--nodetype=\"proposer\"` or `--nodetype=\"notary\"` as a cli flag\r\n- Main entry point will launch a `startShardingClient` option that does the following:\r\n  - Sets up basic all the config options for a sharding client in a simple and concise manner\r\n  - Registers all services required by the sharding client, similar to how how `RegisterEthService` does so in `go-ethereum/cmd/utils/flags.go` depending on the command line flag: in this case, proposer or notary\r\n- Setup Notary and Proposer as implementations of a `Service` interface that satisfy certain methods such as `.Start()` and `.Stop()`.\r\n\r\nI can take hold of this PR and I'll keep it simple.\r\n\r\nAs discussed in #122, this approach would allow for the sharding client instance to manage the lifecycle of its services without needing to be aware of how they function underneath the hood.\r\n\r\nOnce these requirements are done, we can wrap up this issue. Then, we can begin exploring the `Notary` and `Proposer` service implementations in greater detail in separate issues and PR's, analyzing the event loops they will require as well as their p2p requirements.\r\n\r\nLet me know your thoughts.",
  "closed_by": {
    "login": "rauljordan",
    "id": 5572669,
    "node_id": "MDQ6VXNlcjU1NzI2Njk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5572669?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/rauljordan",
    "html_url": "https://github.com/rauljordan",
    "followers_url": "https://api.github.com/users/rauljordan/followers",
    "following_url": "https://api.github.com/users/rauljordan/following{/other_user}",
    "gists_url": "https://api.github.com/users/rauljordan/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/rauljordan/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/rauljordan/subscriptions",
    "organizations_url": "https://api.github.com/users/rauljordan/orgs",
    "repos_url": "https://api.github.com/users/rauljordan/repos",
    "events_url": "https://api.github.com/users/rauljordan/events{/privacy}",
    "received_events_url": "https://api.github.com/users/rauljordan/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/126/reactions",
    "total_count": 2,
    "+1": 2,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/126/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/390351987",
    "html_url": "https://github.com/prysmaticlabs/prysm/issues/126#issuecomment-390351987",
    "issue_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/126",
    "id": 390351987,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5MDM1MTk4Nw==",
    "user": {
      "login": "terencechain",
      "id": 21316537,
      "node_id": "MDQ6VXNlcjIxMzE2NTM3",
      "avatar_url": "https://avatars.githubusercontent.com/u/21316537?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/terencechain",
      "html_url": "https://github.com/terencechain",
      "followers_url": "https://api.github.com/users/terencechain/followers",
      "following_url": "https://api.github.com/users/terencechain/following{/other_user}",
      "gists_url": "https://api.github.com/users/terencechain/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/terencechain/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/terencechain/subscriptions",
      "organizations_url": "https://api.github.com/users/terencechain/orgs",
      "repos_url": "https://api.github.com/users/terencechain/repos",
      "events_url": "https://api.github.com/users/terencechain/events{/privacy}",
      "received_events_url": "https://api.github.com/users/terencechain/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-18T22:48:46Z",
    "updated_at": "2018-05-18T22:48:46Z",
    "author_association": "MEMBER",
    "body": "Yes. I agree this is the next logical issue/PR to tackle. Once this is done, we can begin service implementations for `notary` and `proposer`. It's gonna be fun! Let me know if you need help with the PR",
    "reactions": {
      "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/390351987/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/390383600",
    "html_url": "https://github.com/prysmaticlabs/prysm/issues/126#issuecomment-390383600",
    "issue_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/126",
    "id": 390383600,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5MDM4MzYwMA==",
    "user": {
      "login": "nisdas",
      "id": 33201827,
      "node_id": "MDQ6VXNlcjMzMjAxODI3",
      "avatar_url": "https://avatars.githubusercontent.com/u/33201827?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nisdas",
      "html_url": "https://github.com/nisdas",
      "followers_url": "https://api.github.com/users/nisdas/followers",
      "following_url": "https://api.github.com/users/nisdas/following{/other_user}",
      "gists_url": "https://api.github.com/users/nisdas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nisdas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nisdas/subscriptions",
      "organizations_url": "https://api.github.com/users/nisdas/orgs",
      "repos_url": "https://api.github.com/users/nisdas/repos",
      "events_url": "https://api.github.com/users/nisdas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nisdas/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-19T06:30:27Z",
    "updated_at": "2018-05-19T06:30:27Z",
    "author_association": "MEMBER",
    "body": "Yeah agreed this is a good first step in order to tackle the issues raised in #122. What are the advantages of using a flag like `--nodetype=\"proposer\"` instead of `sharding-proposer` for the entrypoint for sharding ?\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/390383600/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/390428298",
    "html_url": "https://github.com/prysmaticlabs/prysm/issues/126#issuecomment-390428298",
    "issue_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/126",
    "id": 390428298,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5MDQyODI5OA==",
    "user": {
      "login": "prestonvanloon",
      "id": 7246818,
      "node_id": "MDQ6VXNlcjcyNDY4MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7246818?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/prestonvanloon",
      "html_url": "https://github.com/prestonvanloon",
      "followers_url": "https://api.github.com/users/prestonvanloon/followers",
      "following_url": "https://api.github.com/users/prestonvanloon/following{/other_user}",
      "gists_url": "https://api.github.com/users/prestonvanloon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/prestonvanloon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/prestonvanloon/subscriptions",
      "organizations_url": "https://api.github.com/users/prestonvanloon/orgs",
      "repos_url": "https://api.github.com/users/prestonvanloon/repos",
      "events_url": "https://api.github.com/users/prestonvanloon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/prestonvanloon/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-19T19:49:16Z",
    "updated_at": "2018-05-19T19:49:16Z",
    "author_association": "MEMBER",
    "body": "I agree with refactoring to support a modular node framework. Our existing code relies on a running geth node to connect to. These changes will make the sharding actors run as independent and self contained nodes. ",
    "reactions": {
      "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/390428298/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/390544473",
    "html_url": "https://github.com/prysmaticlabs/prysm/issues/126#issuecomment-390544473",
    "issue_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/126",
    "id": 390544473,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5MDU0NDQ3Mw==",
    "user": {
      "login": "rauljordan",
      "id": 5572669,
      "node_id": "MDQ6VXNlcjU1NzI2Njk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5572669?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rauljordan",
      "html_url": "https://github.com/rauljordan",
      "followers_url": "https://api.github.com/users/rauljordan/followers",
      "following_url": "https://api.github.com/users/rauljordan/following{/other_user}",
      "gists_url": "https://api.github.com/users/rauljordan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rauljordan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rauljordan/subscriptions",
      "organizations_url": "https://api.github.com/users/rauljordan/orgs",
      "repos_url": "https://api.github.com/users/rauljordan/repos",
      "events_url": "https://api.github.com/users/rauljordan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rauljordan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-21T03:35:42Z",
    "updated_at": "2018-05-21T03:35:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "Ok so here's how I've been approaching this:\r\n\r\nIn `/cmd/geth/shardingcmd.go`\r\n```go\r\nfunc shardingNode(ctx *cli.Context) error {\r\n\t// configures a sharding-enabled node using the cli's context.\r\n\tshardingNode := sharding.NewNode(ctx)\r\n\treturn shardingNode.Start()\r\n}\r\n```\r\n\r\nThen, `sharding.NewNode` has the responsibility of registering all the config options of the cli, registering different sharding services, and managing their lifecycle.\r\n\r\n## Service Registration\r\n\r\nThen, within this `NewNode` func, we register a few services depending on the cli flags. If `utils.flags.ClientType` is set to `notary`, then we register a `NewNotary` service. Otherwise, we register a `NewProposer` service. All of the services attached to this sharding node are managed and initialized within the node's `.Start()` function.\r\n\r\nWe define the Notary and Proposer services as **protocols** and, in their initialization, they setup a few different goroutines within their `.Start()` functions. Each of these sets up a `ProtocolManager` struct that satisfies an interface specifying access to p2p networking specific to the functionality of the client type, access to SMC bindings, and more. Then, three event loops started:\r\n\r\n```go\r\n// Within the Notary/Proposer protocols' .Start() functions...\r\ngo protocolManager.StartGethRPC()\r\ngo protocolManager.StartP2P()\r\ngo protocolManager.StartMainLoop()\r\n```\r\n\r\n`StartGethRPC()` sets up a connection to a Geth node via an IPC connection and handles the logic of setting up the SMC on the Geth node as well as setting up the bindings to allow each protocol to call functions on the SMC.\r\n\r\n`StartP2P()` will handle all of the shardp2p peer discovery, requests/responses to and from other nodes speaking the same protocol (either notary or proposer).\r\n\r\n`StartMainLoop()` will handle the logic of being a notary or proposer depending on the protocol at hand. For notaries, this involves checking if the notary was selected as eligible in a period and more. For proposers, this involves listening to incoming transactions and processing them into collations that will then be submitted to the SMC via SMC bindings created and attached to the proposer's `ProtocolManager`.\r\n\r\n## What This Achieves\r\n\r\nThis architecture is similar to what geth currently does to setup full/light nodes. This achieves separation of concerns between the sharding node and its underlying services. That is, everything related to notaries is contained within the notary package, and the notary will be responsible for handling the lifecycle of all the goroutines specific to it. Same goes for proposers.\r\n\r\nAdditionally, this allows us to define a nice `Service` interface and a `ProtocolManager` interface that allows us to be extensible to further changes in the research or if we want to add something new to our sharding client down the line without major rafactoring.\r\n\r\nMy concern with this architecture is perhaps repeating myself a bit with the code between protocols, which is why I suggested having a single ProtocolManager interface that specifies common methods for both, with logic that can be overwritten. However, both will need access to SMC bindings, which the `go protocolManager.StartGethRPC()` will handle. Could I instead abstract this one level higher at the sharding node level? Then, when registering a `Notary` protocol as a service to the sharding client, we could pass in a handler for SMC-related logic as an argument like:\r\n\r\n```go\r\nshardingNode.Register(func() {\r\n  return notary.NewNotary(shardingNode.ctx, shardingNode.SMCHandler)\r\n})\r\n```\r\n\r\nThis could keep things nice and abstract as we currently have them, but still trying to understand the best way to do this.\r\n\r\nThoughts on this? @prestonvanloon @terenc3t @nisdas @Magicking @enriquefynn?\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/390544473/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/390700803",
    "html_url": "https://github.com/prysmaticlabs/prysm/issues/126#issuecomment-390700803",
    "issue_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/126",
    "id": 390700803,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5MDcwMDgwMw==",
    "user": {
      "login": "terencechain",
      "id": 21316537,
      "node_id": "MDQ6VXNlcjIxMzE2NTM3",
      "avatar_url": "https://avatars.githubusercontent.com/u/21316537?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/terencechain",
      "html_url": "https://github.com/terencechain",
      "followers_url": "https://api.github.com/users/terencechain/followers",
      "following_url": "https://api.github.com/users/terencechain/following{/other_user}",
      "gists_url": "https://api.github.com/users/terencechain/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/terencechain/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/terencechain/subscriptions",
      "organizations_url": "https://api.github.com/users/terencechain/orgs",
      "repos_url": "https://api.github.com/users/terencechain/repos",
      "events_url": "https://api.github.com/users/terencechain/events{/privacy}",
      "received_events_url": "https://api.github.com/users/terencechain/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-21T16:07:08Z",
    "updated_at": "2018-05-21T16:07:08Z",
    "author_association": "MEMBER",
    "body": "I'm a fan of attaching services as protocols to each actor (proposer/notary). What should a client do if he just wants to be an observer? In that case he wouldn't register `NewNotary` or `NewProposer` service, but still needs to StartP2P `protocolManager.StartP2P()`. The observer will also wanna goto a specific shard, we can get the shard number from cli. ",
    "reactions": {
      "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/390700803/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/390702655",
    "html_url": "https://github.com/prysmaticlabs/prysm/issues/126#issuecomment-390702655",
    "issue_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/126",
    "id": 390702655,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5MDcwMjY1NQ==",
    "user": {
      "login": "rauljordan",
      "id": 5572669,
      "node_id": "MDQ6VXNlcjU1NzI2Njk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5572669?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rauljordan",
      "html_url": "https://github.com/rauljordan",
      "followers_url": "https://api.github.com/users/rauljordan/followers",
      "following_url": "https://api.github.com/users/rauljordan/following{/other_user}",
      "gists_url": "https://api.github.com/users/rauljordan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rauljordan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rauljordan/subscriptions",
      "organizations_url": "https://api.github.com/users/rauljordan/orgs",
      "repos_url": "https://api.github.com/users/rauljordan/repos",
      "events_url": "https://api.github.com/users/rauljordan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rauljordan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-21T16:13:18Z",
    "updated_at": "2018-05-21T16:13:18Z",
    "author_association": "CONTRIBUTOR",
    "body": "Yeah this model allows for us to easily do this via cli flags. If client type is not set then the node just becomes an observer in this case.",
    "reactions": {
      "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/390702655/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
