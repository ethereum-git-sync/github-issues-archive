{
  "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/150",
  "repository_url": "https://api.github.com/repos/prysmaticlabs/prysm",
  "labels_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/150/labels{/name}",
  "comments_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/150/comments",
  "events_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/150/events",
  "html_url": "https://github.com/prysmaticlabs/prysm/issues/150",
  "id": 329268633,
  "node_id": "MDU6SXNzdWUzMjkyNjg2MzM=",
  "number": 150,
  "title": "Exploring Serialization via Protobuf and Others",
  "user": {
    "login": "prestonvanloon",
    "id": 7246818,
    "node_id": "MDQ6VXNlcjcyNDY4MTg=",
    "avatar_url": "https://avatars.githubusercontent.com/u/7246818?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/prestonvanloon",
    "html_url": "https://github.com/prestonvanloon",
    "followers_url": "https://api.github.com/users/prestonvanloon/followers",
    "following_url": "https://api.github.com/users/prestonvanloon/following{/other_user}",
    "gists_url": "https://api.github.com/users/prestonvanloon/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/prestonvanloon/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/prestonvanloon/subscriptions",
    "organizations_url": "https://api.github.com/users/prestonvanloon/orgs",
    "repos_url": "https://api.github.com/users/prestonvanloon/repos",
    "events_url": "https://api.github.com/users/prestonvanloon/events{/privacy}",
    "received_events_url": "https://api.github.com/users/prestonvanloon/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 802129906,
      "node_id": "MDU6TGFiZWw4MDIxMjk5MDY=",
      "url": "https://api.github.com/repos/prysmaticlabs/prysm/labels/Enhancement",
      "name": "Enhancement",
      "color": "84b6eb",
      "default": false,
      "description": "New feature or request"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 17,
  "created_at": "2018-06-05T01:18:52Z",
  "updated_at": "2018-10-11T01:56:04Z",
  "closed_at": "2018-10-11T01:56:04Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "This issue exists to track progress on exploration of other serialization strategies for sharding and Ethereum. We'll likely want to move this into a new repository once work has been started.\r\n\r\n## Motivation\r\nWith RLP and other serialization mechanisms for Ethereum, it feels a bit like reinventing the wheel when there may be a more supported open source library.\r\n\r\nThe main motivation for RLP:\r\n\r\n> The alternative to RLP would have been using an existing algorithm such as protobuf or BSON; however, we prefer RLP because of (1) simplicity of implementation, and (2) guaranteed absolute byte-perfect consistency.\r\n\r\nThe question we try to answer is whether or not this is an issue that is not already solved by protocol buffers or other mechanisms.\r\n\r\n## Challenges with Hashing in Different languages\r\n\r\n> Key/value maps in many languages don't have an explicit ordering, and floating point formats have many special cases, potentially leading to the same data leading to different encodings and thus different hashes.\r\n\r\nSee [RLP design rationale](https://github.com/ethereum/wiki/wiki/Design-Rationale#rlp) for more context.\r\n\r\n# Google Protobuf\r\n\r\n> Protocol buffers are Google's language-neutral, platform-neutral, extensible mechanism for serializing structured data â€“ think XML, but smaller, faster, and simpler. You define how you want your data to be structured once, then you can use special generated source code to easily write and read your structured data to and from a variety of data streams and using a variety of languages.\r\n\r\n## How to test consistency across all languages?\r\n\r\nOne option is to write a gRPC service definition and implement the test in each popular language. The test would be easy to extend to another language, provided that it implements the service. \r\n\r\n## gRPC server for each language\r\n\r\nExample service defintion: \r\n\r\n```protobuf\r\nservice SerializerTest {\r\n  rpc TestHash(Block) returns (Hash) {}\r\n}\r\n\r\nmessage Block {\r\n  Header header = 1;\r\n  repeated Header uncles = 2;\r\n  repeated Transaction transactions = 3;\r\n\r\n  message Header {\r\n    bytes parent_hash = 1;\r\n    bytes uncles_hash = 2;\r\n    ...\r\n  }\r\n}\r\n\r\nmessage Transaction {\r\n  uint64 nonce = 1;\r\n  uint64 price = 2;\r\n  ...\r\n}\r\n\r\n// Hash result \r\nmessage Hash {\r\n  bytes hash = 1;\r\n  Block block = 2;\r\n}\r\n```\r\n\r\nThe request proto has an object resymboling a block then the service response with the resulting hash. The test then compares this against the actual hash. \r\n\r\nThe test can and should be populated with real Ethereum blocks that have been mined and their associated hash. This provides solid evidence that these test cases are valid.\r\n\r\n## Why set up this infrastructure of gRPC services?\r\nThe main idea is that we can run these tests against each language with an agnostic client, in isolation.\r\n\r\n## Why gRPC?\r\nDue to its low boilerplate, code generation, and structured payload. \r\n\r\n*List of official supported languages*\r\n\r\n- c++\r\n- java\r\n- python\r\n- go\r\n- ruby\r\n- c#\r\n- node.js\r\n- android java\r\n- objective C\r\n- PHP\r\n- Dart\r\n\r\n*List of 3rd party supported languages*\r\n\r\n- [rust](https://github.com/stepancheg/grpc-rust)\r\n\r\nThere are probably many more languages...\r\n\r\n## How does the test client work?\r\nThe test client will act as a command line tool and most likely read from a series of config files.\r\n\r\nWe can imagine at least config for service to hit and another config for the test cases.\r\n\r\nThe client will send the test proto to each of the services listed, in parallel. At the end of test execution, the client will print and/or write a report of pass/fail for test cases.\r\n\r\nExample output of the client:\r\n\r\n```\r\n./run_tests\r\n\r\nRunning 5 test cases\r\n\r\nTest 1\r\nJava - PASS\r\nGo - PASS\r\nJavaScript - FAIL - Wanted hash ... got ...\r\nPython - PASS\r\n\r\nTest 2\r\n...\r\n```\r\n\r\nExample services config:\r\n\r\n```toml\r\nservices = [\r\n   [\"java\", \"127.0.0.1:5001\"],\r\n   [\"go\", \"127.0.0.1:5002\"],\r\n   # ...\r\n]\r\n```\r\n\r\nExample test protos:\r\n\r\nTODO: Real blocks with hashs in proto supported format.\r\n\r\n## What about service orchestration?\r\n\r\nMaybe using docker compose?\r\n\r\nIt would be annoying to start many gRPC services locally without a single command.\r\n\r\n## What about benchmarks?\r\nBenchmarks are important, but we already know RLP is not as good in terms of performance for serialization. \r\n\r\nWe can add language specific benchmarks after we answer the question: will this work at all?\r\n",
  "closed_by": {
    "login": "prestonvanloon",
    "id": 7246818,
    "node_id": "MDQ6VXNlcjcyNDY4MTg=",
    "avatar_url": "https://avatars.githubusercontent.com/u/7246818?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/prestonvanloon",
    "html_url": "https://github.com/prestonvanloon",
    "followers_url": "https://api.github.com/users/prestonvanloon/followers",
    "following_url": "https://api.github.com/users/prestonvanloon/following{/other_user}",
    "gists_url": "https://api.github.com/users/prestonvanloon/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/prestonvanloon/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/prestonvanloon/subscriptions",
    "organizations_url": "https://api.github.com/users/prestonvanloon/orgs",
    "repos_url": "https://api.github.com/users/prestonvanloon/repos",
    "events_url": "https://api.github.com/users/prestonvanloon/events{/privacy}",
    "received_events_url": "https://api.github.com/users/prestonvanloon/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/150/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/150/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/394549589",
    "html_url": "https://github.com/prysmaticlabs/prysm/issues/150#issuecomment-394549589",
    "issue_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/150",
    "id": 394549589,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5NDU0OTU4OQ==",
    "user": {
      "login": "prestonvanloon",
      "id": 7246818,
      "node_id": "MDQ6VXNlcjcyNDY4MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7246818?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/prestonvanloon",
      "html_url": "https://github.com/prestonvanloon",
      "followers_url": "https://api.github.com/users/prestonvanloon/followers",
      "following_url": "https://api.github.com/users/prestonvanloon/following{/other_user}",
      "gists_url": "https://api.github.com/users/prestonvanloon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/prestonvanloon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/prestonvanloon/subscriptions",
      "organizations_url": "https://api.github.com/users/prestonvanloon/orgs",
      "repos_url": "https://api.github.com/users/prestonvanloon/repos",
      "events_url": "https://api.github.com/users/prestonvanloon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/prestonvanloon/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-05T01:19:53Z",
    "updated_at": "2018-06-05T01:19:53Z",
    "author_association": "MEMBER",
    "body": "cc: @rawfalafel",
    "reactions": {
      "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/394549589/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/394869230",
    "html_url": "https://github.com/prysmaticlabs/prysm/issues/150#issuecomment-394869230",
    "issue_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/150",
    "id": 394869230,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5NDg2OTIzMA==",
    "user": {
      "login": "rauljordan",
      "id": 5572669,
      "node_id": "MDQ6VXNlcjU1NzI2Njk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5572669?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rauljordan",
      "html_url": "https://github.com/rauljordan",
      "followers_url": "https://api.github.com/users/rauljordan/followers",
      "following_url": "https://api.github.com/users/rauljordan/following{/other_user}",
      "gists_url": "https://api.github.com/users/rauljordan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rauljordan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rauljordan/subscriptions",
      "organizations_url": "https://api.github.com/users/rauljordan/orgs",
      "repos_url": "https://api.github.com/users/rauljordan/repos",
      "events_url": "https://api.github.com/users/rauljordan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rauljordan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-05T21:39:07Z",
    "updated_at": "2018-06-05T21:39:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "I am getting more sold on protobufs, especially with how it leaves decoding up to each client. \r\n\r\n> What about service orchestration?\r\n> Maybe using docker compose?\r\n> It would be annoying to start many gRPC services locally without a single command.\r\n\r\nDo you have examples of other projects using gRPC that do this via docker compose? Orchestration seems to be the only big question that arises from this proposal.",
    "reactions": {
      "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/394869230/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/395032506",
    "html_url": "https://github.com/prysmaticlabs/prysm/issues/150#issuecomment-395032506",
    "issue_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/150",
    "id": 395032506,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5NTAzMjUwNg==",
    "user": {
      "login": "prestonvanloon",
      "id": 7246818,
      "node_id": "MDQ6VXNlcjcyNDY4MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7246818?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/prestonvanloon",
      "html_url": "https://github.com/prestonvanloon",
      "followers_url": "https://api.github.com/users/prestonvanloon/followers",
      "following_url": "https://api.github.com/users/prestonvanloon/following{/other_user}",
      "gists_url": "https://api.github.com/users/prestonvanloon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/prestonvanloon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/prestonvanloon/subscriptions",
      "organizations_url": "https://api.github.com/users/prestonvanloon/orgs",
      "repos_url": "https://api.github.com/users/prestonvanloon/repos",
      "events_url": "https://api.github.com/users/prestonvanloon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/prestonvanloon/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-06T11:14:21Z",
    "updated_at": "2018-06-06T11:14:21Z",
    "author_association": "MEMBER",
    "body": "My thoughts on orchestration: we build the containers for each service then set up something to manage those containers.\r\n\r\nI'm not too familiar with docker compose, but we need something that achieves the following:\r\n1) Builds image containers for each gRPC service\r\n2) Starts all of the containers on a port mapping (i.e. they could all serve on :5000 in their container)\r\n3) Runs the test suite or allows the test suite to be run locally\r\n\r\nHere's an example of how I envision this workflow:\r\n\r\n```bash\r\n# Build all of the service container images\r\n./build\r\n\r\n# Start up the test service infrastructure\r\n./start\r\n\r\n# Then run the tests against those services\r\n./run_tests\r\n```\r\n\r\nThese shell scripts (or whatever) above would read a config file to outline port mappings for the test.\r\nIt might look like the \"service config\" that I mentioned in the original post. ",
    "reactions": {
      "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/395032506/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/395273651",
    "html_url": "https://github.com/prysmaticlabs/prysm/issues/150#issuecomment-395273651",
    "issue_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/150",
    "id": 395273651,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5NTI3MzY1MQ==",
    "user": {
      "login": "rawfalafel",
      "id": 202157,
      "node_id": "MDQ6VXNlcjIwMjE1Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/202157?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rawfalafel",
      "html_url": "https://github.com/rawfalafel",
      "followers_url": "https://api.github.com/users/rawfalafel/followers",
      "following_url": "https://api.github.com/users/rawfalafel/following{/other_user}",
      "gists_url": "https://api.github.com/users/rawfalafel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rawfalafel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rawfalafel/subscriptions",
      "organizations_url": "https://api.github.com/users/rawfalafel/orgs",
      "repos_url": "https://api.github.com/users/rawfalafel/repos",
      "events_url": "https://api.github.com/users/rawfalafel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rawfalafel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-07T02:35:23Z",
    "updated_at": "2018-06-07T02:35:23Z",
    "author_association": "CONTRIBUTOR",
    "body": "We discussed this on gitter but I'll recap here:\r\n\r\nProtobuf was originally evaluated and passed on as a serialization mechanism because it doesn't provide byte-perfect consistency. With protobuf, the same object can be encoded multiple ways, and different encodings can be deserialized into the same object.\r\n\r\n@prestonvanloon mentioned that this isn't an issue once a proposer commits to a `chunkRoot`, which is true, but this is still an issue after a transaction gets broadcast and before a proposer commits. Moreover, RLP is the de facto encoding scheme throughout the entire Ethereum protocol, and the assumption is that the encoding scheme provides byte-perfect consistency.\r\n\r\nHate to be the nay-sayer, especially because I'd like to see a faster encoding scheme replace RLP as well, but I don't think we can use protobuf as is.",
    "reactions": {
      "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/395273651/reactions",
      "total_count": 2,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 2,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/395917782",
    "html_url": "https://github.com/prysmaticlabs/prysm/issues/150#issuecomment-395917782",
    "issue_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/150",
    "id": 395917782,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5NTkxNzc4Mg==",
    "user": {
      "login": "tfalencar",
      "id": 4054009,
      "node_id": "MDQ6VXNlcjQwNTQwMDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4054009?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tfalencar",
      "html_url": "https://github.com/tfalencar",
      "followers_url": "https://api.github.com/users/tfalencar/followers",
      "following_url": "https://api.github.com/users/tfalencar/following{/other_user}",
      "gists_url": "https://api.github.com/users/tfalencar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tfalencar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tfalencar/subscriptions",
      "organizations_url": "https://api.github.com/users/tfalencar/orgs",
      "repos_url": "https://api.github.com/users/tfalencar/repos",
      "events_url": "https://api.github.com/users/tfalencar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tfalencar/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-08T23:22:09Z",
    "updated_at": "2018-06-08T23:26:05Z",
    "author_association": "NONE",
    "body": "Did you guys consider fleece? Seems to have the properties needed, while being much simpler than protobuff. \r\n\r\nhttps://github.com/couchbaselabs/fleece/blob/master/README.md\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/395917782/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/395918448",
    "html_url": "https://github.com/prysmaticlabs/prysm/issues/150#issuecomment-395918448",
    "issue_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/150",
    "id": 395918448,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5NTkxODQ0OA==",
    "user": {
      "login": "prestonvanloon",
      "id": 7246818,
      "node_id": "MDQ6VXNlcjcyNDY4MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7246818?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/prestonvanloon",
      "html_url": "https://github.com/prestonvanloon",
      "followers_url": "https://api.github.com/users/prestonvanloon/followers",
      "following_url": "https://api.github.com/users/prestonvanloon/following{/other_user}",
      "gists_url": "https://api.github.com/users/prestonvanloon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/prestonvanloon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/prestonvanloon/subscriptions",
      "organizations_url": "https://api.github.com/users/prestonvanloon/orgs",
      "repos_url": "https://api.github.com/users/prestonvanloon/repos",
      "events_url": "https://api.github.com/users/prestonvanloon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/prestonvanloon/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-08T23:27:40Z",
    "updated_at": "2018-06-08T23:27:40Z",
    "author_association": "MEMBER",
    "body": "@tfalencar No we haven't, but a quick 15 second scan of this project and I found this:\r\n\r\n```\r\nCan I use it in $LANGUAGE? [where $LANGUAGE not in (\"C++\", \"C\")]\r\nNot currently. ...\r\n```\r\n\r\nTo be a reasonable replacement for RLP, it should preferably work for all modern languages. \r\n\r\nWith that said, nothing is out of question for this. If you have ideas or would like to explore fleece and share your results then the community would be interested! ",
    "reactions": {
      "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/395918448/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/402751495",
    "html_url": "https://github.com/prysmaticlabs/prysm/issues/150#issuecomment-402751495",
    "issue_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/150",
    "id": 402751495,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMjc1MTQ5NQ==",
    "user": {
      "login": "terencechain",
      "id": 21316537,
      "node_id": "MDQ6VXNlcjIxMzE2NTM3",
      "avatar_url": "https://avatars.githubusercontent.com/u/21316537?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/terencechain",
      "html_url": "https://github.com/terencechain",
      "followers_url": "https://api.github.com/users/terencechain/followers",
      "following_url": "https://api.github.com/users/terencechain/following{/other_user}",
      "gists_url": "https://api.github.com/users/terencechain/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/terencechain/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/terencechain/subscriptions",
      "organizations_url": "https://api.github.com/users/terencechain/orgs",
      "repos_url": "https://api.github.com/users/terencechain/repos",
      "events_url": "https://api.github.com/users/terencechain/events{/privacy}",
      "received_events_url": "https://api.github.com/users/terencechain/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-05T14:59:18Z",
    "updated_at": "2018-07-05T14:59:18Z",
    "author_association": "MEMBER",
    "body": "It might be worth to revisit this again now sharding's breaking away from main chain to beacon chain, it's more feasible to switch over to protobuf from rlp with a different consensus protocol. The likely case is to use protobuf to replace RLP with blob serialization",
    "reactions": {
      "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/402751495/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/402897798",
    "html_url": "https://github.com/prysmaticlabs/prysm/issues/150#issuecomment-402897798",
    "issue_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/150",
    "id": 402897798,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMjg5Nzc5OA==",
    "user": {
      "login": "adamdrake",
      "id": 867423,
      "node_id": "MDQ6VXNlcjg2NzQyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/867423?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adamdrake",
      "html_url": "https://github.com/adamdrake",
      "followers_url": "https://api.github.com/users/adamdrake/followers",
      "following_url": "https://api.github.com/users/adamdrake/following{/other_user}",
      "gists_url": "https://api.github.com/users/adamdrake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adamdrake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adamdrake/subscriptions",
      "organizations_url": "https://api.github.com/users/adamdrake/orgs",
      "repos_url": "https://api.github.com/users/adamdrake/repos",
      "events_url": "https://api.github.com/users/adamdrake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adamdrake/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-06T01:26:26Z",
    "updated_at": "2018-07-06T01:26:26Z",
    "author_association": "NONE",
    "body": "I've been exploring this topic as well, with the thinking of using FlatBuffers over ProtocolBuffers.  The main benefit (IMO) is that FlatBuffers allows for accessing the serialized data in a record without having to unpack it first.  There are very large performance implications of this, of course.\r\n\r\nhttps://google.github.io/flatbuffers/\r\n\r\nThoughts @prestonvanloon?",
    "reactions": {
      "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/402897798/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/409953635",
    "html_url": "https://github.com/prysmaticlabs/prysm/issues/150#issuecomment-409953635",
    "issue_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/150",
    "id": 409953635,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwOTk1MzYzNQ==",
    "user": {
      "login": "mratsim",
      "id": 22738317,
      "node_id": "MDQ6VXNlcjIyNzM4MzE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/22738317?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mratsim",
      "html_url": "https://github.com/mratsim",
      "followers_url": "https://api.github.com/users/mratsim/followers",
      "following_url": "https://api.github.com/users/mratsim/following{/other_user}",
      "gists_url": "https://api.github.com/users/mratsim/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mratsim/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mratsim/subscriptions",
      "organizations_url": "https://api.github.com/users/mratsim/orgs",
      "repos_url": "https://api.github.com/users/mratsim/repos",
      "events_url": "https://api.github.com/users/mratsim/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mratsim/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-02T14:49:37Z",
    "updated_at": "2018-08-02T14:49:45Z",
    "author_association": "NONE",
    "body": "Another potential alternative: Cap'n Proto https://capnproto.org/ by the guy who implemented Protobuf at Google in the first place.\r\n\r\nIt seems to fit:\r\n\r\n> But doesnâ€™t that mean the encoding is platform-specific?\r\n>\r\n> NO! The encoding is defined byte-for-byte independent of any platform. However, it is designed to be efficiently manipulated on common modern CPUs. Data is arranged like a compiler would arrange a struct â€“ with fixed widths, fixed offsets, and proper alignment. Variable-sized elements are embedded as pointers. Pointers are offset-based rather than absolute so that messages are position-independent. Integers use little-endian byte order because most CPUs are little-endian, and even big-endian CPUs usually have instructions for reading little-endian data.",
    "reactions": {
      "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/409953635/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 1,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/410137335",
    "html_url": "https://github.com/prysmaticlabs/prysm/issues/150#issuecomment-410137335",
    "issue_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/150",
    "id": 410137335,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMDEzNzMzNQ==",
    "user": {
      "login": "rauljordan",
      "id": 5572669,
      "node_id": "MDQ6VXNlcjU1NzI2Njk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5572669?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rauljordan",
      "html_url": "https://github.com/rauljordan",
      "followers_url": "https://api.github.com/users/rauljordan/followers",
      "following_url": "https://api.github.com/users/rauljordan/following{/other_user}",
      "gists_url": "https://api.github.com/users/rauljordan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rauljordan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rauljordan/subscriptions",
      "organizations_url": "https://api.github.com/users/rauljordan/orgs",
      "repos_url": "https://api.github.com/users/rauljordan/repos",
      "events_url": "https://api.github.com/users/rauljordan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rauljordan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-03T03:56:04Z",
    "updated_at": "2018-08-03T03:56:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "Also Cap'n proto has tons of language support - perhaps we can put together a small repo where we play around with these different schema-based serialization protocols across their different language implementations?",
    "reactions": {
      "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/410137335/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/423078304",
    "html_url": "https://github.com/prysmaticlabs/prysm/issues/150#issuecomment-423078304",
    "issue_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/150",
    "id": 423078304,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyMzA3ODMwNA==",
    "user": {
      "login": "zjshen14",
      "id": 35021395,
      "node_id": "MDQ6VXNlcjM1MDIxMzk1",
      "avatar_url": "https://avatars.githubusercontent.com/u/35021395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zjshen14",
      "html_url": "https://github.com/zjshen14",
      "followers_url": "https://api.github.com/users/zjshen14/followers",
      "following_url": "https://api.github.com/users/zjshen14/following{/other_user}",
      "gists_url": "https://api.github.com/users/zjshen14/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zjshen14/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zjshen14/subscriptions",
      "organizations_url": "https://api.github.com/users/zjshen14/orgs",
      "repos_url": "https://api.github.com/users/zjshen14/repos",
      "events_url": "https://api.github.com/users/zjshen14/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zjshen14/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-20T07:50:39Z",
    "updated_at": "2018-09-20T07:50:39Z",
    "author_association": "NONE",
    "body": "@rawfalafel, thanks for raising the concern of byte-perfect consistency on protobuf. I'm exploring a similar problem recently. Do you still recall the concrete example of `the same object can be encoded multiple ways, and different encodings can be deserialized into the same object`, so that I could evaluate if it will affect my case or not. Thanks!",
    "reactions": {
      "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/423078304/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/423079378",
    "html_url": "https://github.com/prysmaticlabs/prysm/issues/150#issuecomment-423079378",
    "issue_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/150",
    "id": 423079378,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyMzA3OTM3OA==",
    "user": {
      "login": "zjshen14",
      "id": 35021395,
      "node_id": "MDQ6VXNlcjM1MDIxMzk1",
      "avatar_url": "https://avatars.githubusercontent.com/u/35021395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zjshen14",
      "html_url": "https://github.com/zjshen14",
      "followers_url": "https://api.github.com/users/zjshen14/followers",
      "following_url": "https://api.github.com/users/zjshen14/following{/other_user}",
      "gists_url": "https://api.github.com/users/zjshen14/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zjshen14/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zjshen14/subscriptions",
      "organizations_url": "https://api.github.com/users/zjshen14/orgs",
      "repos_url": "https://api.github.com/users/zjshen14/repos",
      "events_url": "https://api.github.com/users/zjshen14/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zjshen14/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-20T07:53:47Z",
    "updated_at": "2018-09-20T07:53:47Z",
    "author_association": "NONE",
    "body": "@prestonvanloon have you conducted the cross-language experiments? How's consistency? Thanks!",
    "reactions": {
      "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/423079378/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/423081209",
    "html_url": "https://github.com/prysmaticlabs/prysm/issues/150#issuecomment-423081209",
    "issue_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/150",
    "id": 423081209,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyMzA4MTIwOQ==",
    "user": {
      "login": "rawfalafel",
      "id": 202157,
      "node_id": "MDQ6VXNlcjIwMjE1Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/202157?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rawfalafel",
      "html_url": "https://github.com/rawfalafel",
      "followers_url": "https://api.github.com/users/rawfalafel/followers",
      "following_url": "https://api.github.com/users/rawfalafel/following{/other_user}",
      "gists_url": "https://api.github.com/users/rawfalafel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rawfalafel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rawfalafel/subscriptions",
      "organizations_url": "https://api.github.com/users/rawfalafel/orgs",
      "repos_url": "https://api.github.com/users/rawfalafel/repos",
      "events_url": "https://api.github.com/users/rawfalafel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rawfalafel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-20T07:58:32Z",
    "updated_at": "2018-09-20T07:58:32Z",
    "author_association": "CONTRIBUTOR",
    "body": "Yep, take an encoding of a protobuf object and reorder the fields. They should `proto.Marshal` should encode those two encodings into the same object. ",
    "reactions": {
      "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/423081209/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/423081989",
    "html_url": "https://github.com/prysmaticlabs/prysm/issues/150#issuecomment-423081989",
    "issue_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/150",
    "id": 423081989,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyMzA4MTk4OQ==",
    "user": {
      "login": "rawfalafel",
      "id": 202157,
      "node_id": "MDQ6VXNlcjIwMjE1Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/202157?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rawfalafel",
      "html_url": "https://github.com/rawfalafel",
      "followers_url": "https://api.github.com/users/rawfalafel/followers",
      "following_url": "https://api.github.com/users/rawfalafel/following{/other_user}",
      "gists_url": "https://api.github.com/users/rawfalafel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rawfalafel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rawfalafel/subscriptions",
      "organizations_url": "https://api.github.com/users/rawfalafel/orgs",
      "repos_url": "https://api.github.com/users/rawfalafel/repos",
      "events_url": "https://api.github.com/users/rawfalafel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rawfalafel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-20T08:00:42Z",
    "updated_at": "2018-09-20T08:00:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "BTW, we're exploring a new encoding described here: https://github.com/ethereum/beacon_chain/blob/master/ssz/README.md",
    "reactions": {
      "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/423081989/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/423244070",
    "html_url": "https://github.com/prysmaticlabs/prysm/issues/150#issuecomment-423244070",
    "issue_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/150",
    "id": 423244070,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyMzI0NDA3MA==",
    "user": {
      "login": "zjshen14",
      "id": 35021395,
      "node_id": "MDQ6VXNlcjM1MDIxMzk1",
      "avatar_url": "https://avatars.githubusercontent.com/u/35021395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zjshen14",
      "html_url": "https://github.com/zjshen14",
      "followers_url": "https://api.github.com/users/zjshen14/followers",
      "following_url": "https://api.github.com/users/zjshen14/following{/other_user}",
      "gists_url": "https://api.github.com/users/zjshen14/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zjshen14/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zjshen14/subscriptions",
      "organizations_url": "https://api.github.com/users/zjshen14/orgs",
      "repos_url": "https://api.github.com/users/zjshen14/repos",
      "events_url": "https://api.github.com/users/zjshen14/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zjshen14/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-20T16:16:53Z",
    "updated_at": "2018-09-20T16:17:12Z",
    "author_association": "NONE",
    "body": "> Yep, take an encoding of a protobuf object and reorder the fields. They should proto.Marshal should encode those two encodings into the same object.\r\n\r\n@rawfalafel, thanks for taking my question. I want to clarify if you mean\r\n\r\n```\r\nmessage Foo {\r\n  uint64 a = 1;\r\n  bytes b = 2;\r\n}\r\n```\r\nAnd \r\n```\r\nmessage Foo {\r\n  bytes b = 1;\r\n  uint64 a = 2;\r\n}\r\n```\r\nWill be marshaled into the same bytes? If my understanding is correct, I've some followup questions:\r\n\r\n- What's the use case or reordering? I assume the convention is that when we define a proto msg, we usually don't break the field order.\r\n\r\n- And even one step back, does the order matters? In the case above, Foo hasn't been meaningfully changed, so that it should be okay to have the same serialized footprint in the memory, no?",
    "reactions": {
      "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/423244070/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/423411408",
    "html_url": "https://github.com/prysmaticlabs/prysm/issues/150#issuecomment-423411408",
    "issue_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/150",
    "id": 423411408,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyMzQxMTQwOA==",
    "user": {
      "login": "rawfalafel",
      "id": 202157,
      "node_id": "MDQ6VXNlcjIwMjE1Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/202157?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rawfalafel",
      "html_url": "https://github.com/rawfalafel",
      "followers_url": "https://api.github.com/users/rawfalafel/followers",
      "following_url": "https://api.github.com/users/rawfalafel/following{/other_user}",
      "gists_url": "https://api.github.com/users/rawfalafel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rawfalafel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rawfalafel/subscriptions",
      "organizations_url": "https://api.github.com/users/rawfalafel/orgs",
      "repos_url": "https://api.github.com/users/rawfalafel/repos",
      "events_url": "https://api.github.com/users/rawfalafel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rawfalafel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-21T04:41:57Z",
    "updated_at": "2018-09-21T04:41:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "Protobuf allows fields to be encoded in any order to facilitate merging two messages.\r\n\r\n> And even one step back, does the order matters? In the case above, Foo hasn't been meaningfully changed, so that it should be okay to have the same serialized footprint in the memory, no?\r\n\r\nHonest nodes should never encode in a different order. The problem though is when a malicious user purposefully encodes in the wrong order. In this scenario, the same message can have multiple encodings, and therefore multiple hashes, and break consensus.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/423411408/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/428251927",
    "html_url": "https://github.com/prysmaticlabs/prysm/issues/150#issuecomment-428251927",
    "issue_url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/150",
    "id": 428251927,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyODI1MTkyNw==",
    "user": {
      "login": "rauljordan",
      "id": 5572669,
      "node_id": "MDQ6VXNlcjU1NzI2Njk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5572669?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rauljordan",
      "html_url": "https://github.com/rauljordan",
      "followers_url": "https://api.github.com/users/rauljordan/followers",
      "following_url": "https://api.github.com/users/rauljordan/following{/other_user}",
      "gists_url": "https://api.github.com/users/rauljordan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rauljordan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rauljordan/subscriptions",
      "organizations_url": "https://api.github.com/users/rauljordan/orgs",
      "repos_url": "https://api.github.com/users/rauljordan/repos",
      "events_url": "https://api.github.com/users/rauljordan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rauljordan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-09T16:05:18Z",
    "updated_at": "2018-10-09T16:05:18Z",
    "author_association": "CONTRIBUTOR",
    "body": "This seems to have been resolved as every team is going for simple serialize at the moment - thoughts on closing this @prestonvanloon?",
    "reactions": {
      "url": "https://api.github.com/repos/prysmaticlabs/prysm/issues/comments/428251927/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
