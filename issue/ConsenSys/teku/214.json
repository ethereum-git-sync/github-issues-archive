{
  "url": "https://api.github.com/repos/ConsenSys/teku/issues/214",
  "repository_url": "https://api.github.com/repos/ConsenSys/teku",
  "labels_url": "https://api.github.com/repos/ConsenSys/teku/issues/214/labels{/name}",
  "comments_url": "https://api.github.com/repos/ConsenSys/teku/issues/214/comments",
  "events_url": "https://api.github.com/repos/ConsenSys/teku/issues/214/events",
  "html_url": "https://github.com/ConsenSys/teku/issues/214",
  "id": 403400459,
  "node_id": "MDU6SXNzdWU0MDM0MDA0NTk=",
  "number": 214,
  "title": "Fork choice rule",
  "user": {
    "login": "jrhea",
    "id": 5555162,
    "node_id": "MDQ6VXNlcjU1NTUxNjI=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5555162?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jrhea",
    "html_url": "https://github.com/jrhea",
    "followers_url": "https://api.github.com/users/jrhea/followers",
    "following_url": "https://api.github.com/users/jrhea/following{/other_user}",
    "gists_url": "https://api.github.com/users/jrhea/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jrhea/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jrhea/subscriptions",
    "organizations_url": "https://api.github.com/users/jrhea/orgs",
    "repos_url": "https://api.github.com/users/jrhea/repos",
    "events_url": "https://api.github.com/users/jrhea/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jrhea/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1048919131,
      "node_id": "MDU6TGFiZWwxMDQ4OTE5MTMx",
      "url": "https://api.github.com/repos/ConsenSys/teku/labels/enhancement%20%F0%9F%95%B5%EF%B8%8F%E2%80%8D%E2%99%80%EF%B8%8F",
      "name": "enhancement 🕵️‍♀️",
      "color": "a2eeef",
      "default": false,
      "description": "New feature or request"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": {
    "login": "akhila-raju",
    "id": 5432198,
    "node_id": "MDQ6VXNlcjU0MzIxOTg=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5432198?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/akhila-raju",
    "html_url": "https://github.com/akhila-raju",
    "followers_url": "https://api.github.com/users/akhila-raju/followers",
    "following_url": "https://api.github.com/users/akhila-raju/following{/other_user}",
    "gists_url": "https://api.github.com/users/akhila-raju/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/akhila-raju/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/akhila-raju/subscriptions",
    "organizations_url": "https://api.github.com/users/akhila-raju/orgs",
    "repos_url": "https://api.github.com/users/akhila-raju/repos",
    "events_url": "https://api.github.com/users/akhila-raju/events{/privacy}",
    "received_events_url": "https://api.github.com/users/akhila-raju/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "akhila-raju",
      "id": 5432198,
      "node_id": "MDQ6VXNlcjU0MzIxOTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5432198?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/akhila-raju",
      "html_url": "https://github.com/akhila-raju",
      "followers_url": "https://api.github.com/users/akhila-raju/followers",
      "following_url": "https://api.github.com/users/akhila-raju/following{/other_user}",
      "gists_url": "https://api.github.com/users/akhila-raju/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/akhila-raju/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/akhila-raju/subscriptions",
      "organizations_url": "https://api.github.com/users/akhila-raju/orgs",
      "repos_url": "https://api.github.com/users/akhila-raju/repos",
      "events_url": "https://api.github.com/users/akhila-raju/events{/privacy}",
      "received_events_url": "https://api.github.com/users/akhila-raju/received_events",
      "type": "User",
      "site_admin": false
    },
    {
      "login": "cemozerr",
      "id": 16581242,
      "node_id": "MDQ6VXNlcjE2NTgxMjQy",
      "avatar_url": "https://avatars.githubusercontent.com/u/16581242?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cemozerr",
      "html_url": "https://github.com/cemozerr",
      "followers_url": "https://api.github.com/users/cemozerr/followers",
      "following_url": "https://api.github.com/users/cemozerr/following{/other_user}",
      "gists_url": "https://api.github.com/users/cemozerr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cemozerr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cemozerr/subscriptions",
      "organizations_url": "https://api.github.com/users/cemozerr/orgs",
      "repos_url": "https://api.github.com/users/cemozerr/repos",
      "events_url": "https://api.github.com/users/cemozerr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cemozerr/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 0,
  "created_at": "2019-01-26T03:30:21Z",
  "updated_at": "2019-02-27T20:53:28Z",
  "closed_at": "2019-02-27T20:53:28Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "### Description\r\nImplement LMD GHOST fork choice rule.  The fork choice rule should be run:\r\n\r\n- at the start of each slot (machine time)\r\n- after processing a new block (not after processing new attestations as this is a DoS vector)\r\n\r\n\r\n(in progress - @akhila-raju & @cemozerr)\r\n- [ ] (@akhila-raju) Let finalized_head be the finalized block with the highest epoch. (A block B is finalized if there is a descendant of B in store the processing of which sets B as finalized.)\r\n- [x] (@akhila-raju) Let justified_head be the descendant of finalized_head with the highest epoch that has been justified for at least 1 epoch. (A block B is justified if there is a descendant of B in store the processing of which sets B as justified.) If no such descendant exists set justified_head to finalized_head.\r\n- [x] (@cemozerr) Let get_ancestor(store: Store, block: BeaconBlock, slot: SlotNumber) -> BeaconBlock be the ancestor of block with slot number slot. The get_ancestor function can be defined recursively as:\r\n```python\r\ndef get_ancestor(store: Store, block: BeaconBlock, slot: SlotNumber) -> BeaconBlock:\r\n    \"\"\"\r\n    Get the ancestor of ``block`` with slot number ``slot``; return ``None`` if not found.\r\n    \"\"\"\r\n    if block.slot == slot:\r\n        return block\r\n    elif block.slot < slot:\r\n        return None\r\n    else:\r\n        return get_ancestor(store, store.get_parent(block), slot)\r\n```\r\n- [x] (@cemozerr) Let get_latest_attestation(store: Store, validator: Validator) -> Attestation be the attestation with the highest slot number in store from validator. If several such attestations exist, use the one the validator v observed first.\r\n- [x] (@cemozerr) Let get_latest_attestation_target(store: Store, validator: Validator) -> BeaconBlock be the target block in the attestation get_latest_attestation(store, validator).\r\n- [x] (@akhila-raju) Let get_children(store: Store, block: BeaconBlock) -> List[BeaconBlock] returns the child blocks of the given block.\r\n- [x] (@akhila-raju) Let justified_head_state be the resulting BeaconState object from processing the chain up to the justified_head.\r\n- [x] (@cemozerr) The head (block) is lmd_ghost(store, justified_head_state, justified_head): \r\n```python\r\ndef lmd_ghost(store: Store, start_state: BeaconState, start_block: BeaconBlock) -> BeaconBlock:\r\n    \"\"\"\r\n    Execute the LMD-GHOST algorithm to find the head ``BeaconBlock``.\r\n    \"\"\"\r\n    validators = start_state.validator_registry\r\n    active_validators = [\r\n        validators[i]\r\n        for i in get_active_validator_indices(validators, start_state.slot)\r\n    ]\r\n    attestation_targets = [\r\n        get_latest_attestation_target(store, validator)\r\n        for validator in active_validators\r\n    ]\r\n\r\n    def get_vote_count(block: BeaconBlock) -> int:\r\n        return len([\r\n            target\r\n            for target in attestation_targets\r\n            if get_ancestor(store, target, block.slot) == block\r\n        ])\r\n\r\n    head = start_block\r\n    while 1:\r\n        children = get_children(store, head)\r\n        if len(children) == 0:\r\n            return head\r\n        head = max(children, key=get_vote_count)\r\n```\r\n\r\n\r\n",
  "closed_by": {
    "login": "cemozerr",
    "id": 16581242,
    "node_id": "MDQ6VXNlcjE2NTgxMjQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/16581242?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cemozerr",
    "html_url": "https://github.com/cemozerr",
    "followers_url": "https://api.github.com/users/cemozerr/followers",
    "following_url": "https://api.github.com/users/cemozerr/following{/other_user}",
    "gists_url": "https://api.github.com/users/cemozerr/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cemozerr/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cemozerr/subscriptions",
    "organizations_url": "https://api.github.com/users/cemozerr/orgs",
    "repos_url": "https://api.github.com/users/cemozerr/repos",
    "events_url": "https://api.github.com/users/cemozerr/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cemozerr/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ConsenSys/teku/issues/214/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ConsenSys/teku/issues/214/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[

]
