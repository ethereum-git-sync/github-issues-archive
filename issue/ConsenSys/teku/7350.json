{
  "url": "https://api.github.com/repos/Consensys/teku/issues/7350",
  "repository_url": "https://api.github.com/repos/Consensys/teku",
  "labels_url": "https://api.github.com/repos/Consensys/teku/issues/7350/labels{/name}",
  "comments_url": "https://api.github.com/repos/Consensys/teku/issues/7350/comments",
  "events_url": "https://api.github.com/repos/Consensys/teku/issues/7350/events",
  "html_url": "https://github.com/Consensys/teku/issues/7350",
  "id": 1798911536,
  "node_id": "I_kwDOCM9I9M5rOTYw",
  "number": 7350,
  "title": "Create dedicated archive blobs sync",
  "user": {
    "login": "zilm13",
    "id": 6196452,
    "node_id": "MDQ6VXNlcjYxOTY0NTI=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6196452?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/zilm13",
    "html_url": "https://github.com/zilm13",
    "followers_url": "https://api.github.com/users/zilm13/followers",
    "following_url": "https://api.github.com/users/zilm13/following{/other_user}",
    "gists_url": "https://api.github.com/users/zilm13/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/zilm13/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/zilm13/subscriptions",
    "organizations_url": "https://api.github.com/users/zilm13/orgs",
    "repos_url": "https://api.github.com/users/zilm13/repos",
    "events_url": "https://api.github.com/users/zilm13/events{/privacy}",
    "received_events_url": "https://api.github.com/users/zilm13/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 4760070044,
      "node_id": "LA_kwDOCM9I9M8AAAABG7jnnA",
      "url": "https://api.github.com/repos/Consensys/teku/labels/Epic%20Deneb",
      "name": "Epic Deneb",
      "color": "E1ED95",
      "default": false,
      "description": "Issues required to implement Deneb upgrade"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 0,
  "created_at": "2023-07-11T13:10:42Z",
  "updated_at": "2023-07-12T13:06:10Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "<!-- \r\nBy filing an Issue, you are expected to comply with the Code of Conduct, \r\nincluding treating everyone with respect:\r\nhttps://github.com/ConsenSys/teku/blob/master/CODE-OF-CONDUCT.md\r\n\r\nNot all sections will apply to all issue types.\r\n-->\r\n\r\n### Description\r\nEthereum spec requires node to keep `blobSidecars` only inside blob sidecars availability and allows to prune old blobs. With override feature https://github.com/Consensys/teku/pull/7333 we have introduced a way to keep in storage blobs outside availability window. But we doesn't want to require it outside availability window as it could stall the sync. It means if node starts with the flag and follows chain lively it will have blobs in storage. If it syncs historically, it will not have them in storage. It will not break any rule of the spec but considering such nodes could be an archive source of blobs we should have a feature to get them even historically.\r\n\r\nThe solution is to have dedicated sync for archive blobs. Assuming the node could start late or stop in the middle and restart after more epochs than the size of availability window we may need to introduce second blobSidecar slot variable, something like `oldestConfirmedBlobSidecarSlot` and trying to sync to the right checking the blocks for blobs requirements and existence of `blobSidecars` in storage when the feature is enabled. It's just an idea of one implementation option, actual implementation may be different.\r\n\r\nComparing forward and backwards filling backwards looks better because:\r\n- we are back filling blocks and we need block to verify blob, so if going backwards we could start archive blob sync before everything is synced, we could start whenever we have associated blocks\r\n- you will not download the blobs you prune in a minute right from the start when store blobs constant is not max\r\n- you start from the most recent blobs so you have less chances to stuck\r\n\r\nBut backwards sync will not work with one numeric value.\r\nSay you started somewhere in the middle, synced blobs to deneb start, saved deneb start slot in the value.\r\nNext you stop node for more than min_epochs and start again. At this time you have 0 info what range is downloaded.\r\nExpect you could do this several times without waiting till it's all synced. So we need to store set of intervals and to get it fast and in order to guarantee consistency it's better to store it in single value.\r\n\r\nAnother issue I see even with intervals is moving right bound skipping any checks during normal work. If you started even in less than min_epochs slots from the current you are not guaranteed that normal sync will be done without gap when finished because it will take time. We probably should just follow blocks backfill events in this case.",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/Consensys/teku/issues/7350/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/Consensys/teku/issues/7350/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[

]
