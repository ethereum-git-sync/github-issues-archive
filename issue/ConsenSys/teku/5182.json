{
  "url": "https://api.github.com/repos/Consensys/teku/issues/5182",
  "repository_url": "https://api.github.com/repos/Consensys/teku",
  "labels_url": "https://api.github.com/repos/Consensys/teku/issues/5182/labels{/name}",
  "comments_url": "https://api.github.com/repos/Consensys/teku/issues/5182/comments",
  "events_url": "https://api.github.com/repos/Consensys/teku/issues/5182/events",
  "html_url": "https://github.com/Consensys/teku/issues/5182",
  "id": 1169495984,
  "node_id": "I_kwDOCM9I9M5FtRew",
  "number": 5182,
  "title": "Aggregate public keys and signatures without jumping the C/Java boundary so often",
  "user": {
    "login": "benjaminion",
    "id": 20796281,
    "node_id": "MDQ6VXNlcjIwNzk2Mjgx",
    "avatar_url": "https://avatars.githubusercontent.com/u/20796281?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/benjaminion",
    "html_url": "https://github.com/benjaminion",
    "followers_url": "https://api.github.com/users/benjaminion/followers",
    "following_url": "https://api.github.com/users/benjaminion/following{/other_user}",
    "gists_url": "https://api.github.com/users/benjaminion/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/benjaminion/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/benjaminion/subscriptions",
    "organizations_url": "https://api.github.com/users/benjaminion/orgs",
    "repos_url": "https://api.github.com/users/benjaminion/repos",
    "events_url": "https://api.github.com/users/benjaminion/events{/privacy}",
    "received_events_url": "https://api.github.com/users/benjaminion/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1271198478,
      "node_id": "MDU6TGFiZWwxMjcxMTk4NDc4",
      "url": "https://api.github.com/repos/Consensys/teku/labels/performance%20%F0%9F%9A%80",
      "name": "performance ðŸš€",
      "color": "ffcce3",
      "default": false,
      "description": "Improves performance without changing functionality"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 3,
  "created_at": "2022-03-15T10:45:52Z",
  "updated_at": "2023-09-08T14:12:50Z",
  "closed_at": "2023-09-08T14:12:49Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "### Summary\r\n\r\nWe could probably significant reduce the cost of signature verification by adding some native code to aggregate public keys.\r\n\r\n### Explanation\r\n\r\nCurrently our code for aggregating public keys looks like [this](https://github.com/ConsenSys/teku/blob/master/infrastructure/bls/src/main/java/tech/pegasys/teku/bls/impl/blst/BlstPublicKey.java#L70):\r\n\r\n```\r\n    for (BlstPublicKey publicKey : publicKeys) {\r\n      sum.add(publicKey.ecPoint);\r\n    }\r\n```\r\n\r\nEach iteration of this is a separate JNI call to the Blst library, the cost of which probably dominates the cost of the relatively lightweight `add()` method.\r\n\r\nWe should\r\n1. Profile this to see if it really is an issue. My gut feel is that there is a good speedup available here.\r\n2. If so, add an external C library wrapper for Blst or fork of Blst that provides a method to aggregate a list of public keys, thus avoiding the calling overhead.\r\n\r\nThere is a [similar issue](https://github.com/ConsenSys/teku/blob/master/infrastructure/bls/src/main/java/tech/pegasys/teku/bls/impl/blst/BlstSignature.java#L61) for signatures, but for a number of reasons it's probably not so significant: we don't aggregate signatures as often; the cost of addition (aggregation) of signatures is greater; and the signature aggregation does an expensive group check, unlike the public key aggregation. So the JNI overhead would be relatively lower. But if we're adding native code for public keys, we could also do it for signatures for completeness.\r\n\r\n",
  "closed_by": {
    "login": "benjaminion",
    "id": 20796281,
    "node_id": "MDQ6VXNlcjIwNzk2Mjgx",
    "avatar_url": "https://avatars.githubusercontent.com/u/20796281?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/benjaminion",
    "html_url": "https://github.com/benjaminion",
    "followers_url": "https://api.github.com/users/benjaminion/followers",
    "following_url": "https://api.github.com/users/benjaminion/following{/other_user}",
    "gists_url": "https://api.github.com/users/benjaminion/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/benjaminion/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/benjaminion/subscriptions",
    "organizations_url": "https://api.github.com/users/benjaminion/orgs",
    "repos_url": "https://api.github.com/users/benjaminion/repos",
    "events_url": "https://api.github.com/users/benjaminion/events{/privacy}",
    "received_events_url": "https://api.github.com/users/benjaminion/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/Consensys/teku/issues/5182/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/Consensys/teku/issues/5182/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/Consensys/teku/issues/comments/1073795966",
    "html_url": "https://github.com/Consensys/teku/issues/5182#issuecomment-1073795966",
    "issue_url": "https://api.github.com/repos/Consensys/teku/issues/5182",
    "id": 1073795966,
    "node_id": "IC_kwDOCM9I9M5AANN-",
    "user": {
      "login": "benjaminion",
      "id": 20796281,
      "node_id": "MDQ6VXNlcjIwNzk2Mjgx",
      "avatar_url": "https://avatars.githubusercontent.com/u/20796281?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/benjaminion",
      "html_url": "https://github.com/benjaminion",
      "followers_url": "https://api.github.com/users/benjaminion/followers",
      "following_url": "https://api.github.com/users/benjaminion/following{/other_user}",
      "gists_url": "https://api.github.com/users/benjaminion/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/benjaminion/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/benjaminion/subscriptions",
      "organizations_url": "https://api.github.com/users/benjaminion/orgs",
      "repos_url": "https://api.github.com/users/benjaminion/repos",
      "events_url": "https://api.github.com/users/benjaminion/events{/privacy}",
      "received_events_url": "https://api.github.com/users/benjaminion/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-21T11:44:47Z",
    "updated_at": "2022-03-21T11:44:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "A quick and dirty update on testing this. It turns out that SWIG is a monster, so coding up the full version of this is complex. For a simple feasibility study I made two versions of point addition:\r\n\r\n```\r\n    P1* add(const P1_Affine &a)\r\n    {   blst_p1_add_or_double_affine(&point, &point, a); return this;   }\r\n    P1* add2(const P1_Affine &a, const P1_Affine &b)\r\n    {   blst_p1_add_or_double_affine(&point, &point, a); blst_p1_add_or_double_affine(&point, &point, b); return this;   }\r\n```\r\n\r\nGiven an even number of points the second will have half as many JNI calls as the first. Running with ten million points I get the following timings:\r\n  - `add`: 7.5s\r\n  - `add2`: 7.2 s\r\n\r\nThus, 5m JNI calls takes 0.3s, for a per-call cost of 0.06 microseconds, and 10m adds without the calling overhead takes 6.9s, for a per-add cost of 0.69 microseconds.\r\n\r\nIn summary, we could likely get around an 8% speed up in public key aggregation by eliminating the calling overhead. This is borderline worth doing. A worst-case verification of a block with 64 full attestations would need around 20,000 of these point additions which would currently take around 0.015s. We could shave just over a millisecond off this by eliminating the calling overhead.\r\n\r\nThe method that adds multiple points at once is already available in Blst and is exposed via some language interfaces, just not Java. In principle it's easy to expose it, except that SWIG is giving me a headache, and we'd have to maintain a branch of Blst or push the change back upstream.\r\n\r\nLeaving this for now, but may come back to it some time.",
    "reactions": {
      "url": "https://api.github.com/repos/Consensys/teku/issues/comments/1073795966/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/Consensys/teku/issues/comments/1711608018",
    "html_url": "https://github.com/Consensys/teku/issues/5182#issuecomment-1711608018",
    "issue_url": "https://api.github.com/repos/Consensys/teku/issues/5182",
    "id": 1711608018,
    "node_id": "IC_kwDOCM9I9M5mBRDS",
    "user": {
      "login": "tbenr",
      "id": 15999009,
      "node_id": "MDQ6VXNlcjE1OTk5MDA5",
      "avatar_url": "https://avatars.githubusercontent.com/u/15999009?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tbenr",
      "html_url": "https://github.com/tbenr",
      "followers_url": "https://api.github.com/users/tbenr/followers",
      "following_url": "https://api.github.com/users/tbenr/following{/other_user}",
      "gists_url": "https://api.github.com/users/tbenr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tbenr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tbenr/subscriptions",
      "organizations_url": "https://api.github.com/users/tbenr/orgs",
      "repos_url": "https://api.github.com/users/tbenr/repos",
      "events_url": "https://api.github.com/users/tbenr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tbenr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-09-08T12:40:47Z",
    "updated_at": "2023-09-08T12:41:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "I did some additional tests implementing various version of `add`, including a dynamic `add` accepting an array.\r\nThe dynamic one seems not paying off due to additional array handling.\r\n\r\nI focused then on:\r\n\r\n```\r\nadd2loop: 0.0019 ms\r\nadd2: 0.0017 ms - gain: 11.764707%\r\n\r\nadd4loop: 0.0036 ms\r\nadd4: 0.0031 ms - gain: 16.129026%\r\n\r\nadd8loop: 0.0071 ms\r\nadd8: 0.006 ms - gain: 18.333334%\r\n\r\nadd16loop: 0.0142 ms\r\nadd16: 0.0118 ms - gain: 20.33898%\r\n\r\nadd32loop: 0.0282 ms\r\nadd32: 0.0233 ms - gain: 21.030048%\r\n\r\nadd64loop: 0.0563 ms\r\nadd64: 0.0464 ms - gain: 21.336206%\r\n\r\nadd128loop: 0.1123 ms\r\nadd128: 0.0922 ms - gain: 21.80043%\r\n\r\n** block simulation (360 * 69)\r\nadd: 22.0 ms\r\nagg add: 18.0 ms - gain: 22.222221%\r\n```\r\n\r\nSeem the benefits reaches the top on `add32`. No additional benefits with more parameters.\r\n\r\nAt time of writing, after profiling a node for 10 min:\r\n![image](https://github.com/Consensys/teku/assets/15999009/3ccd825d-97ed-4e92-aade-dc876ca29661)\r\nWe can gain 20% on the `P1.add`.\r\n\r\nSo I think the added complexity seems not paid back by the performance boost.\r\n\r\n\r\nGiving up.",
    "reactions": {
      "url": "https://api.github.com/repos/Consensys/teku/issues/comments/1711608018/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/Consensys/teku/issues/comments/1711740329",
    "html_url": "https://github.com/Consensys/teku/issues/5182#issuecomment-1711740329",
    "issue_url": "https://api.github.com/repos/Consensys/teku/issues/5182",
    "id": 1711740329,
    "node_id": "IC_kwDOCM9I9M5mBxWp",
    "user": {
      "login": "benjaminion",
      "id": 20796281,
      "node_id": "MDQ6VXNlcjIwNzk2Mjgx",
      "avatar_url": "https://avatars.githubusercontent.com/u/20796281?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/benjaminion",
      "html_url": "https://github.com/benjaminion",
      "followers_url": "https://api.github.com/users/benjaminion/followers",
      "following_url": "https://api.github.com/users/benjaminion/following{/other_user}",
      "gists_url": "https://api.github.com/users/benjaminion/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/benjaminion/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/benjaminion/subscriptions",
      "organizations_url": "https://api.github.com/users/benjaminion/orgs",
      "repos_url": "https://api.github.com/users/benjaminion/repos",
      "events_url": "https://api.github.com/users/benjaminion/events{/privacy}",
      "received_events_url": "https://api.github.com/users/benjaminion/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-09-08T14:12:49Z",
    "updated_at": "2023-09-08T14:12:49Z",
    "author_association": "CONTRIBUTOR",
    "body": "Yep, the gains don't seem worth it. Or, to look at it more positively, JNI overhead is not currently a significant issue for us. Thanks for looking into this @tbenr - closing now.",
    "reactions": {
      "url": "https://api.github.com/repos/Consensys/teku/issues/comments/1711740329/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
