{
  "url": "https://api.github.com/repos/ConsenSys/teku/issues/6009",
  "repository_url": "https://api.github.com/repos/ConsenSys/teku",
  "labels_url": "https://api.github.com/repos/ConsenSys/teku/issues/6009/labels{/name}",
  "comments_url": "https://api.github.com/repos/ConsenSys/teku/issues/6009/comments",
  "events_url": "https://api.github.com/repos/ConsenSys/teku/issues/6009/events",
  "html_url": "https://github.com/ConsenSys/teku/issues/6009",
  "id": 1325612540,
  "node_id": "I_kwDOCM9I9M5PAz38",
  "number": 6009,
  "title": "Update proposer config to include builder registration overrides",
  "user": {
    "login": "ciaranmcveigh5",
    "id": 15610084,
    "node_id": "MDQ6VXNlcjE1NjEwMDg0",
    "avatar_url": "https://avatars.githubusercontent.com/u/15610084?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ciaranmcveigh5",
    "html_url": "https://github.com/ciaranmcveigh5",
    "followers_url": "https://api.github.com/users/ciaranmcveigh5/followers",
    "following_url": "https://api.github.com/users/ciaranmcveigh5/following{/other_user}",
    "gists_url": "https://api.github.com/users/ciaranmcveigh5/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ciaranmcveigh5/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ciaranmcveigh5/subscriptions",
    "organizations_url": "https://api.github.com/users/ciaranmcveigh5/orgs",
    "repos_url": "https://api.github.com/users/ciaranmcveigh5/repos",
    "events_url": "https://api.github.com/users/ciaranmcveigh5/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ciaranmcveigh5/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": {
    "login": "StefanBratanov",
    "id": 14827647,
    "node_id": "MDQ6VXNlcjE0ODI3NjQ3",
    "avatar_url": "https://avatars.githubusercontent.com/u/14827647?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/StefanBratanov",
    "html_url": "https://github.com/StefanBratanov",
    "followers_url": "https://api.github.com/users/StefanBratanov/followers",
    "following_url": "https://api.github.com/users/StefanBratanov/following{/other_user}",
    "gists_url": "https://api.github.com/users/StefanBratanov/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/StefanBratanov/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/StefanBratanov/subscriptions",
    "organizations_url": "https://api.github.com/users/StefanBratanov/orgs",
    "repos_url": "https://api.github.com/users/StefanBratanov/repos",
    "events_url": "https://api.github.com/users/StefanBratanov/events{/privacy}",
    "received_events_url": "https://api.github.com/users/StefanBratanov/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "StefanBratanov",
      "id": 14827647,
      "node_id": "MDQ6VXNlcjE0ODI3NjQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/14827647?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/StefanBratanov",
      "html_url": "https://github.com/StefanBratanov",
      "followers_url": "https://api.github.com/users/StefanBratanov/followers",
      "following_url": "https://api.github.com/users/StefanBratanov/following{/other_user}",
      "gists_url": "https://api.github.com/users/StefanBratanov/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/StefanBratanov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/StefanBratanov/subscriptions",
      "organizations_url": "https://api.github.com/users/StefanBratanov/orgs",
      "repos_url": "https://api.github.com/users/StefanBratanov/repos",
      "events_url": "https://api.github.com/users/StefanBratanov/events{/privacy}",
      "received_events_url": "https://api.github.com/users/StefanBratanov/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 3,
  "created_at": "2022-08-02T10:02:23Z",
  "updated_at": "2022-08-09T06:41:33Z",
  "closed_at": "2022-08-09T06:41:33Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "### Problem\r\n\r\nThis is directly related to #5985 \r\n\r\nDistributed Validators Require Signed Contents To Be The Same - for builder registration ValidatorRegistrationV1 the pubkey field will be the pubkey-share for co-validators rather than the aggregated pubkey meaning the contents between the co-validators will differ\r\n\r\n#5985 looks to address this with a pubkey override flag that enables the operators to hardcode the pubkey to be used in the registration payload.\r\n\r\nThis fix only allows 1 validator per VC as it has no way to map the pubkey-shares to the hardcoded aggregated pubkey\r\n\r\nIdeally we need a solution that enables multiple validator on a single VC with minimal overhead to the validator operator ie not have to update config/flags everytime a new validator is added\r\n\r\nWe have a few ideas / proposals at the spec level however realise the timelines on spec changes can be lengthy and so need an interim solution\r\n\r\n### Proposal\r\n\r\nWe can put the builder registration overrides in the proposer config - there is already a builder section that enables the operator to have builderApi enabled/disabled at the individual validator level if we can add the pubkey & timestamp fields in validator builder registration we can have individual validator control on overrides which will enable us to run multiple validators on a single VC with DVT capabilities  \r\n\r\n\r\nproposed schema from @StefanBratanov \r\n```\r\n{\r\n  \"proposer_config\": {\r\n    \"0xa057816155ad77931185101128655c0191bd0214c201ca48ed887f6c4c6adf334070efcd75140eada5ac83a92506dd7a\": {\r\n      \"fee_recipient\": \"0x50155530FCE8a85ec7055A5F8b2bE214B3DaeFd3\",\r\n      \"builder\": {\r\n        \"enabled\": true,\r\n        \"gas_limit\": \"12345654321\",\r\n        \"registration_overrides\": {\r\n          \"timestamp\": \"xxxx\",\r\n          \"public_key\": \"xxxx\"\r\n        }\r\n      }\r\n    }\r\n  },\r\n  \"default_config\": {\r\n    \"fee_recipient\": \"0x6e35733c5af9B61374A128e6F85f553aF09ff89A\",\r\n    \"builder\": {\r\n      \"enabled\": true,\r\n      \"registration_overrides\": {\r\n        \"timestamp\": \"xxxx\",\r\n        \"public_key\": \"xxxx\"\r\n      }\r\n    }\r\n  }\r\n}\r\n```",
  "closed_by": {
    "login": "StefanBratanov",
    "id": 14827647,
    "node_id": "MDQ6VXNlcjE0ODI3NjQ3",
    "avatar_url": "https://avatars.githubusercontent.com/u/14827647?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/StefanBratanov",
    "html_url": "https://github.com/StefanBratanov",
    "followers_url": "https://api.github.com/users/StefanBratanov/followers",
    "following_url": "https://api.github.com/users/StefanBratanov/following{/other_user}",
    "gists_url": "https://api.github.com/users/StefanBratanov/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/StefanBratanov/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/StefanBratanov/subscriptions",
    "organizations_url": "https://api.github.com/users/StefanBratanov/orgs",
    "repos_url": "https://api.github.com/users/StefanBratanov/repos",
    "events_url": "https://api.github.com/users/StefanBratanov/events{/privacy}",
    "received_events_url": "https://api.github.com/users/StefanBratanov/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ConsenSys/teku/issues/6009/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ConsenSys/teku/issues/6009/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ConsenSys/teku/issues/comments/1202378614",
    "html_url": "https://github.com/ConsenSys/teku/issues/6009#issuecomment-1202378614",
    "issue_url": "https://api.github.com/repos/ConsenSys/teku/issues/6009",
    "id": 1202378614,
    "node_id": "IC_kwDOCM9I9M5Hqtd2",
    "user": {
      "login": "ciaranmcveigh5",
      "id": 15610084,
      "node_id": "MDQ6VXNlcjE1NjEwMDg0",
      "avatar_url": "https://avatars.githubusercontent.com/u/15610084?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ciaranmcveigh5",
      "html_url": "https://github.com/ciaranmcveigh5",
      "followers_url": "https://api.github.com/users/ciaranmcveigh5/followers",
      "following_url": "https://api.github.com/users/ciaranmcveigh5/following{/other_user}",
      "gists_url": "https://api.github.com/users/ciaranmcveigh5/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ciaranmcveigh5/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ciaranmcveigh5/subscriptions",
      "organizations_url": "https://api.github.com/users/ciaranmcveigh5/orgs",
      "repos_url": "https://api.github.com/users/ciaranmcveigh5/repos",
      "events_url": "https://api.github.com/users/ciaranmcveigh5/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ciaranmcveigh5/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-02T11:46:30Z",
    "updated_at": "2022-08-02T11:49:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "Another simpler method would be explicitly stating that this endpoint is only requested once per pubkey and never again until teku is rebooted - we just check if cached(pubkey) exists and if it does just use cached value \r\n\r\nwe let the operator know that if the data changes the instance needs to be rebooted - im assuming the cached data is cleared at on restart?\r\n\r\nthis would be a less complicated method that achieves the same results, puts the responsibility on the operator to reboot if validator registrations have changed",
    "reactions": {
      "url": "https://api.github.com/repos/ConsenSys/teku/issues/comments/1202378614/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ConsenSys/teku/issues/comments/1203667768",
    "html_url": "https://github.com/ConsenSys/teku/issues/6009#issuecomment-1203667768",
    "issue_url": "https://api.github.com/repos/ConsenSys/teku/issues/6009",
    "id": 1203667768,
    "node_id": "IC_kwDOCM9I9M5HvoM4",
    "user": {
      "login": "ciaranmcveigh5",
      "id": 15610084,
      "node_id": "MDQ6VXNlcjE1NjEwMDg0",
      "avatar_url": "https://avatars.githubusercontent.com/u/15610084?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ciaranmcveigh5",
      "html_url": "https://github.com/ciaranmcveigh5",
      "followers_url": "https://api.github.com/users/ciaranmcveigh5/followers",
      "following_url": "https://api.github.com/users/ciaranmcveigh5/following{/other_user}",
      "gists_url": "https://api.github.com/users/ciaranmcveigh5/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ciaranmcveigh5/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ciaranmcveigh5/subscriptions",
      "organizations_url": "https://api.github.com/users/ciaranmcveigh5/orgs",
      "repos_url": "https://api.github.com/users/ciaranmcveigh5/repos",
      "events_url": "https://api.github.com/users/ciaranmcveigh5/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ciaranmcveigh5/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-03T08:50:25Z",
    "updated_at": "2022-08-03T10:31:44Z",
    "author_association": "CONTRIBUTOR",
    "body": "Another option (proposed by @StefanBratanov ) is to use the proposer config https://docs.teku.consensys.net/en/latest/Reference/CLI/CLI-Syntax/#validators-proposer-config \r\n\r\nit has just been extended to support the builder interface you can disable registrations for a validator etc\r\n\r\nit could be enchance to support this usecase - ie in the config have the pubkey-share -> aggregated pubkey\r\n\r\nthe proposer config can be a file or a url that will return the required json \r\n\r\nactual json schema below may be incorrect but it there to show how the json config file may look\r\n\r\n```\r\n{\r\n  \"proposer_config\": {\r\n    \"0xa057816155ad77931185101128655c0191bd0214c201ca48ed887f6c4c6adf334070efcd75140eada5ac83a92506dd7a\": {\r\n      \"fee_recipient\": \"0x50155530FCE8a85ec7055A5F8b2bE214B3DaeFd3\",\r\n      \"public_key\": \"0xabc............\"\r\n    }\r\n  },\r\n  \"default_config\": {\r\n    \"fee_recipient\": \"0x6e35733c5af9B61374A128e6F85f553aF09ff89A\"\r\n  },\r\n  \"builder_config\": {\r\n\"0xa057816155ad77931185101128655c0191bd0214c201ca48ed887f6c4c6adf334070efcd75140eada5ac83a92506dd7a\": {\r\n      \"register\": \"false\",\r\n      \"public_key\": \"0xabc............\"\r\n    }\r\n  },    \r\n}\r\n```\r\n\r\n\r\nraised a PR related to this implementation https://github.com/ConsenSys/teku/pull/6014",
    "reactions": {
      "url": "https://api.github.com/repos/ConsenSys/teku/issues/comments/1203667768/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ConsenSys/teku/issues/comments/1204229191",
    "html_url": "https://github.com/ConsenSys/teku/issues/6009#issuecomment-1204229191",
    "issue_url": "https://api.github.com/repos/ConsenSys/teku/issues/6009",
    "id": 1204229191,
    "node_id": "IC_kwDOCM9I9M5HxxRH",
    "user": {
      "login": "ciaranmcveigh5",
      "id": 15610084,
      "node_id": "MDQ6VXNlcjE1NjEwMDg0",
      "avatar_url": "https://avatars.githubusercontent.com/u/15610084?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ciaranmcveigh5",
      "html_url": "https://github.com/ciaranmcveigh5",
      "followers_url": "https://api.github.com/users/ciaranmcveigh5/followers",
      "following_url": "https://api.github.com/users/ciaranmcveigh5/following{/other_user}",
      "gists_url": "https://api.github.com/users/ciaranmcveigh5/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ciaranmcveigh5/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ciaranmcveigh5/subscriptions",
      "organizations_url": "https://api.github.com/users/ciaranmcveigh5/orgs",
      "repos_url": "https://api.github.com/users/ciaranmcveigh5/repos",
      "events_url": "https://api.github.com/users/ciaranmcveigh5/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ciaranmcveigh5/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-03T16:57:22Z",
    "updated_at": "2022-08-03T16:57:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "Commenting this for audit purposes as proposal for how to resolve original issue is being changed - below is the original issue content\r\n\r\n### Problem\r\n\r\nThis is directly related to #5985 \r\n\r\nDistributed Validators Require Signed Contents To Be The Same - for builder registration ValidatorRegistrationV1 the pubkey field will be the pubkey-share for co-validators rather than the aggregated pubkey meaning the contents between the co-validators will differ\r\n\r\n#5985 looks to address this with a pubkey override flag that enables the operators to hardcode the pubkey to be used in the registration payload.\r\n\r\nThis fix only allows 1 validator per VC as it has no way to map the pubkey-shares to the hardcoded aggregated pubkey\r\n\r\nIdeally we need a solution that enables multiple validator on a single VC with minimal overhead to the validator operator ie not have to update config/flags everytime a new validator is added\r\n\r\nWe have a few ideas / proposals at the spec level however realise the timelines on spec changes can be lengthy and so need an interim solution\r\n\r\n### Proposal\r\n\r\nWe are thinking of having an endpoint that can be intercepted by the DVT middleware to return the validator registration payload that needs to be signed (this would enable multiple validators on a single VC)\r\n\r\nour thoughts are that --Xvalidators-builder-registration-public-key-override gets replaced by something like --Xvalidators-builder-registration-request-payload-endpoint (happy to change naming)\r\n\r\nin teku we would check if this flag is set and if so run a \r\n\r\nGET {builder-registration-request-payload-endpoint}/{pubkey} \r\n\r\nThe specified endpoint will have to take that request (plus path parameter for pubkey) and return the correct registration payload for that pubkey. That payload will then be used in the rest of the teku flow.\r\n\r\n### Potential Issues\r\n\r\nOne item that has been flagged with this proposal is the VC making multiple requests if you have a large number of validators at the start of every epoch.\r\n\r\nSince teku checks the diff on feeRecipient & gasLimit to determine whether it needs to resign it will need to call the endpoint at the start of each epoch to check these values.\r\n\r\nOne possible solution relates to the existing timestamp-override flag\r\n\r\nThe timestamp override should take priority over the \"requested payload\" so if both flags are set the timestamp override value should be used.\r\n\r\nFor our DVT testing on testnet we will be using both flags and would recommend in our docs to use both. \r\n\r\nWe could make it so that the payload endpoint will only be re-requested if the timestamp changes\r\n\r\nThis would lead to 2 flows when request-payload is set - one where timestamp-overrride is set and one where it isn't\r\n\r\n- timestamp-override not set\r\n    - New timestamp will be set as time.now( )\r\n    - Diff check against new timestamp and cached timestamp\r\n    - new timestamp == cached timestamp will return false\r\n    - Since the check returned false re-request the registration payload\r\n    - Set feeRecipient = payload.feeRecipient etc.\r\n \r\n- timestamp override is set\r\n    - New timestamp will be set as timestamp-override\r\n    - Diff check against new timestamp and cached timestamp\r\n    - new timestamp == cached timestamp will return true\r\n    - Since the check returned true do NOT re-request the registration payload instead use cached values\r\n    - Set feeRecipent = cached.feeRecipient etc.  ",
    "reactions": {
      "url": "https://api.github.com/repos/ConsenSys/teku/issues/comments/1204229191/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
