{
  "url": "https://api.github.com/repos/ConsenSys/teku/issues/4906",
  "repository_url": "https://api.github.com/repos/ConsenSys/teku",
  "labels_url": "https://api.github.com/repos/ConsenSys/teku/issues/4906/labels{/name}",
  "comments_url": "https://api.github.com/repos/ConsenSys/teku/issues/4906/comments",
  "events_url": "https://api.github.com/repos/ConsenSys/teku/issues/4906/events",
  "html_url": "https://github.com/ConsenSys/teku/issues/4906",
  "id": 1114592671,
  "node_id": "I_kwDOCM9I9M5Cb1Wf",
  "number": 4906,
  "title": "Add commandline option constraints",
  "user": {
    "login": "jtraglia",
    "id": 95511699,
    "node_id": "U_kgDOBbFkkw",
    "avatar_url": "https://avatars.githubusercontent.com/u/95511699?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jtraglia",
    "html_url": "https://github.com/jtraglia",
    "followers_url": "https://api.github.com/users/jtraglia/followers",
    "following_url": "https://api.github.com/users/jtraglia/following{/other_user}",
    "gists_url": "https://api.github.com/users/jtraglia/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jtraglia/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jtraglia/subscriptions",
    "organizations_url": "https://api.github.com/users/jtraglia/orgs",
    "repos_url": "https://api.github.com/users/jtraglia/repos",
    "events_url": "https://api.github.com/users/jtraglia/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jtraglia/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 7,
  "created_at": "2022-01-26T03:34:28Z",
  "updated_at": "2022-02-01T21:27:47Z",
  "closed_at": "2022-02-01T21:27:47Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "### Description\r\n\r\nWhen poking around, I noticed that certain options that should only allow positive values (such as `--genesis-time` and `--validator-count` in `teku genesis mock`) will process negative values.\r\n\r\nFor negative genesis times, the `checkArgument` call will catch the problem and throw an exception.\r\n\r\n```\r\n$ teku genesis mock --genesis-time -1\r\njava.lang.IllegalArgumentException: value (-1) must be >= 0\r\n  <call stack>\r\n```\r\n\r\nBut for most other options, it will continue as normal. For example, a negative validator count will not show any warnings. In this situation, `validatorCount` is effectively zero because `IntStream.range(0, -1)` is a range of zero. So it's not really a problem here.\r\n\r\nBelow are some other options that could benefit from constraints. I'm able to specify negative values for all of them.\r\n\r\n```\r\n--eth1-deposit-contract-max-request-size=<INTEGER>\r\n--metrics-port=<INTEGER>\r\n--p2p-advertised-port=<INTEGER>\r\n--p2p-advertised-udp-port=<INTEGER>\r\n--p2p-peer-lower-bound=<INTEGER>\r\n--p2p-peer-upper-bound=<INTEGER>\r\n--p2p-port=<INTEGER>\r\n--p2p-udp-port=<INTEGER>\r\n--rest-api-port=<INTEGER>\r\n--validators-external-signer-timeout=<INTEGER>\r\n--data-storage-archive-frequency=<FREQUENCY>\r\n--number=<arg1>\r\n```\r\n\r\n### Possible Solution\r\n\r\nAdd validation constraints to some picocli options. Here is an example:\r\n\r\n* https://picocli.info/#_jsr_380_beanvalidation\r\n\r\nThis would look like:\r\n\r\n```java\r\n@Min(value = 0, message = \"Genesis time must be a positive value\")\r\n@Option(\r\n    names = {\"-t\", \"--genesis-time\"},\r\n    paramLabel = \"<GENESIS_TIME>\",\r\n    description = \"The genesis time\")\r\nprivate long genesisTime = System.currentTimeMillis() / 1000;\r\n```\r\n\r\nNote, another project dependency would be required.\r\n\r\n```\r\nimplementation group: 'javax.validation', name: 'validation-api', version: '2.0.1.Final'\r\n```\r\n\r\nI would be happy to do this and submit a pull request if it's something we want to fix.",
  "closed_by": {
    "login": "jtraglia",
    "id": 95511699,
    "node_id": "U_kgDOBbFkkw",
    "avatar_url": "https://avatars.githubusercontent.com/u/95511699?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jtraglia",
    "html_url": "https://github.com/jtraglia",
    "followers_url": "https://api.github.com/users/jtraglia/followers",
    "following_url": "https://api.github.com/users/jtraglia/following{/other_user}",
    "gists_url": "https://api.github.com/users/jtraglia/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jtraglia/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jtraglia/subscriptions",
    "organizations_url": "https://api.github.com/users/jtraglia/orgs",
    "repos_url": "https://api.github.com/users/jtraglia/repos",
    "events_url": "https://api.github.com/users/jtraglia/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jtraglia/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ConsenSys/teku/issues/4906/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ConsenSys/teku/issues/4906/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ConsenSys/teku/issues/comments/1022802258",
    "html_url": "https://github.com/ConsenSys/teku/issues/4906#issuecomment-1022802258",
    "issue_url": "https://api.github.com/repos/ConsenSys/teku/issues/4906",
    "id": 1022802258,
    "node_id": "IC_kwDOCM9I9M489rlS",
    "user": {
      "login": "ajsutton",
      "id": 72675,
      "node_id": "MDQ6VXNlcjcyNjc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/72675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajsutton",
      "html_url": "https://github.com/ajsutton",
      "followers_url": "https://api.github.com/users/ajsutton/followers",
      "following_url": "https://api.github.com/users/ajsutton/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajsutton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajsutton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajsutton/subscriptions",
      "organizations_url": "https://api.github.com/users/ajsutton/orgs",
      "repos_url": "https://api.github.com/users/ajsutton/repos",
      "events_url": "https://api.github.com/users/ajsutton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajsutton/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-27T03:04:25Z",
    "updated_at": "2022-01-27T03:04:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "For simple validations like ensuring the value is positive I think those annotations make a lot of sense. We're already getting the validation-api as a dependency (transitively via swagger and jackson) so no downside to using it.\n\nIt would be great if you took this on. ",
    "reactions": {
      "url": "https://api.github.com/repos/ConsenSys/teku/issues/comments/1022802258/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ConsenSys/teku/issues/comments/1022804355",
    "html_url": "https://github.com/ConsenSys/teku/issues/4906#issuecomment-1022804355",
    "issue_url": "https://api.github.com/repos/ConsenSys/teku/issues/4906",
    "id": 1022804355,
    "node_id": "IC_kwDOCM9I9M489sGD",
    "user": {
      "login": "ajsutton",
      "id": 72675,
      "node_id": "MDQ6VXNlcjcyNjc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/72675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajsutton",
      "html_url": "https://github.com/ajsutton",
      "followers_url": "https://api.github.com/users/ajsutton/followers",
      "following_url": "https://api.github.com/users/ajsutton/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajsutton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajsutton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajsutton/subscriptions",
      "organizations_url": "https://api.github.com/users/ajsutton/orgs",
      "repos_url": "https://api.github.com/users/ajsutton/repos",
      "events_url": "https://api.github.com/users/ajsutton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajsutton/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-27T03:08:35Z",
    "updated_at": "2022-01-27T03:08:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "Actually thinking about this - given there's a start of a programmatic API it may be better to put these checks into the various configuration builder classes for anything in the main beacon node and validator client.  Things like `genesis mock` are just debugging tools so tend to follow simpler patterns, using the annotations there would likely be a quick win without complicating things further.\n\nBut for example the `metrics-port` option could be validated in `MetricsConfig.MetricsConfigBuilder.metricsPort` and then the validation would apply to both CLI options as instantiating things programmatically.  I think throwing `IllegalArgumentException` will likely do the right thing but we could also through `InvalidConfigurationException` which is specifically designed to indicate a misconfiguration that causes Teku to exit and print the error message nicely for users (ie show only the message and not the stack trace).",
    "reactions": {
      "url": "https://api.github.com/repos/ConsenSys/teku/issues/comments/1022804355/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ConsenSys/teku/issues/comments/1023541761",
    "html_url": "https://github.com/ConsenSys/teku/issues/4906#issuecomment-1023541761",
    "issue_url": "https://api.github.com/repos/ConsenSys/teku/issues/4906",
    "id": 1023541761,
    "node_id": "IC_kwDOCM9I9M49AgIB",
    "user": {
      "login": "jtraglia",
      "id": 95511699,
      "node_id": "U_kgDOBbFkkw",
      "avatar_url": "https://avatars.githubusercontent.com/u/95511699?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtraglia",
      "html_url": "https://github.com/jtraglia",
      "followers_url": "https://api.github.com/users/jtraglia/followers",
      "following_url": "https://api.github.com/users/jtraglia/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtraglia/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtraglia/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtraglia/subscriptions",
      "organizations_url": "https://api.github.com/users/jtraglia/orgs",
      "repos_url": "https://api.github.com/users/jtraglia/repos",
      "events_url": "https://api.github.com/users/jtraglia/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtraglia/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-27T18:55:51Z",
    "updated_at": "2022-01-27T18:55:51Z",
    "author_association": "CONTRIBUTOR",
    "body": "That's a good point. Whatever we do should work with the programming API. I'll work on putting validation checks in the configuration builder classes and throwing an `InvalidConfigurationException`; friendly error messages are nice. I think this will be a good first issue for me.",
    "reactions": {
      "url": "https://api.github.com/repos/ConsenSys/teku/issues/comments/1023541761/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ConsenSys/teku/issues/comments/1023726187",
    "html_url": "https://github.com/ConsenSys/teku/issues/4906#issuecomment-1023726187",
    "issue_url": "https://api.github.com/repos/ConsenSys/teku/issues/4906",
    "id": 1023726187,
    "node_id": "IC_kwDOCM9I9M49BNJr",
    "user": {
      "login": "jtraglia",
      "id": 95511699,
      "node_id": "U_kgDOBbFkkw",
      "avatar_url": "https://avatars.githubusercontent.com/u/95511699?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtraglia",
      "html_url": "https://github.com/jtraglia",
      "followers_url": "https://api.github.com/users/jtraglia/followers",
      "following_url": "https://api.github.com/users/jtraglia/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtraglia/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtraglia/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtraglia/subscriptions",
      "organizations_url": "https://api.github.com/users/jtraglia/orgs",
      "repos_url": "https://api.github.com/users/jtraglia/repos",
      "events_url": "https://api.github.com/users/jtraglia/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtraglia/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-27T23:12:08Z",
    "updated_at": "2022-01-27T23:12:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "So for the metrics port option, if add `implementation project(':infrastructure:exceptions')` as a dependency in `teku/infrastructure/metrics/gradle.build`, there is a circular dependency:\r\n```\r\nCircular dependency between the following tasks:\r\n:infrastructure:async:compileJava\r\n\\--- :infrastructure:metrics:compileJava\r\n     \\--- :infrastructure:exceptions:compileJava\r\n          \\--- :infrastructure:async:compileJava (*)\r\n```\r\nIs there a simple way to resolve this? I would prefer to use `InvalidConfigurationException` like you suggested.",
    "reactions": {
      "url": "https://api.github.com/repos/ConsenSys/teku/issues/comments/1023726187/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ConsenSys/teku/issues/comments/1023740946",
    "html_url": "https://github.com/ConsenSys/teku/issues/4906#issuecomment-1023740946",
    "issue_url": "https://api.github.com/repos/ConsenSys/teku/issues/4906",
    "id": 1023740946,
    "node_id": "IC_kwDOCM9I9M49BQwS",
    "user": {
      "login": "ajsutton",
      "id": 72675,
      "node_id": "MDQ6VXNlcjcyNjc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/72675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajsutton",
      "html_url": "https://github.com/ajsutton",
      "followers_url": "https://api.github.com/users/ajsutton/followers",
      "following_url": "https://api.github.com/users/ajsutton/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajsutton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajsutton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajsutton/subscriptions",
      "organizations_url": "https://api.github.com/users/ajsutton/orgs",
      "repos_url": "https://api.github.com/users/ajsutton/repos",
      "events_url": "https://api.github.com/users/ajsutton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajsutton/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-27T23:37:29Z",
    "updated_at": "2022-01-27T23:37:29Z",
    "author_association": "CONTRIBUTOR",
    "body": "hmm, bit of yak shaving to be done on this but I think `:infrastructure:exceptions` shouldn't have the dependency on `:infrastructure:async` that it does.  That means that the `exceptionHandlingRunnable` and `exceptionHandlingConsumer` methods in `ExceptionUtil` probably need to move to somewhere in the `instrastructure:async` module. I think that's a better place for them though. I'm not exactly sure what the class name would be that they land in - maybe just `ExceptionHandlers`?",
    "reactions": {
      "url": "https://api.github.com/repos/ConsenSys/teku/issues/comments/1023740946/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ConsenSys/teku/issues/comments/1023845242",
    "html_url": "https://github.com/ConsenSys/teku/issues/4906#issuecomment-1023845242",
    "issue_url": "https://api.github.com/repos/ConsenSys/teku/issues/4906",
    "id": 1023845242,
    "node_id": "IC_kwDOCM9I9M49BqN6",
    "user": {
      "login": "jtraglia",
      "id": 95511699,
      "node_id": "U_kgDOBbFkkw",
      "avatar_url": "https://avatars.githubusercontent.com/u/95511699?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtraglia",
      "html_url": "https://github.com/jtraglia",
      "followers_url": "https://api.github.com/users/jtraglia/followers",
      "following_url": "https://api.github.com/users/jtraglia/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtraglia/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtraglia/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtraglia/subscriptions",
      "organizations_url": "https://api.github.com/users/jtraglia/orgs",
      "repos_url": "https://api.github.com/users/jtraglia/repos",
      "events_url": "https://api.github.com/users/jtraglia/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtraglia/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-28T03:11:07Z",
    "updated_at": "2022-01-28T03:11:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "@ajsutton I can shave some yaks if you want. I don't think `:infrastructure:exceptions` should have that dependency either. Also, I started a PR just to get the ball rolling. It doesn't allow those options I mention in the issue to have negative values anymore. I also added validation checks to some other options too. I'm not sure if I should add more checks elsewhere or not. To my surprise, throwing `IllegalArgumentException` doesn't print a stack trace and doesn't look that bad, but I'm still planning on changing all of to `InvalidConfigurationException ` exceptions.",
    "reactions": {
      "url": "https://api.github.com/repos/ConsenSys/teku/issues/comments/1023845242/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ConsenSys/teku/issues/comments/1023846556",
    "html_url": "https://github.com/ConsenSys/teku/issues/4906#issuecomment-1023846556",
    "issue_url": "https://api.github.com/repos/ConsenSys/teku/issues/4906",
    "id": 1023846556,
    "node_id": "IC_kwDOCM9I9M49Bqic",
    "user": {
      "login": "ajsutton",
      "id": 72675,
      "node_id": "MDQ6VXNlcjcyNjc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/72675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajsutton",
      "html_url": "https://github.com/ajsutton",
      "followers_url": "https://api.github.com/users/ajsutton/followers",
      "following_url": "https://api.github.com/users/ajsutton/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajsutton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajsutton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajsutton/subscriptions",
      "organizations_url": "https://api.github.com/users/ajsutton/orgs",
      "repos_url": "https://api.github.com/users/ajsutton/repos",
      "events_url": "https://api.github.com/users/ajsutton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajsutton/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-28T03:14:12Z",
    "updated_at": "2022-01-28T03:14:12Z",
    "author_association": "CONTRIBUTOR",
    "body": "> To my surprise, throwing `IllegalArgumentException` doesn't print a stack trace and doesn't look that bad, but I'm still planning on changing all of to `InvalidConfigurationException ` exceptions.\r\n\r\nYeah we must have special handling for `IllegalArgumentException` when parsing the options but definitely nicer to use the more specific exception type.\r\n\r\nJust left a comment on the PR as well. It's looking good - thanks for taking this on.",
    "reactions": {
      "url": "https://api.github.com/repos/ConsenSys/teku/issues/comments/1023846556/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
