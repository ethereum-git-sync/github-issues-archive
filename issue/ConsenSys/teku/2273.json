{
  "url": "https://api.github.com/repos/ConsenSys/teku/issues/2273",
  "repository_url": "https://api.github.com/repos/ConsenSys/teku",
  "labels_url": "https://api.github.com/repos/ConsenSys/teku/issues/2273/labels{/name}",
  "comments_url": "https://api.github.com/repos/ConsenSys/teku/issues/2273/comments",
  "events_url": "https://api.github.com/repos/ConsenSys/teku/issues/2273/events",
  "html_url": "https://github.com/ConsenSys/teku/issues/2273",
  "id": 648415940,
  "node_id": "MDU6SXNzdWU2NDg0MTU5NDA=",
  "number": 2273,
  "title": "Implement weak subjectivity checkpoints",
  "user": {
    "login": "benjaminion",
    "id": 20796281,
    "node_id": "MDQ6VXNlcjIwNzk2Mjgx",
    "avatar_url": "https://avatars.githubusercontent.com/u/20796281?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/benjaminion",
    "html_url": "https://github.com/benjaminion",
    "followers_url": "https://api.github.com/users/benjaminion/followers",
    "following_url": "https://api.github.com/users/benjaminion/following{/other_user}",
    "gists_url": "https://api.github.com/users/benjaminion/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/benjaminion/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/benjaminion/subscriptions",
    "organizations_url": "https://api.github.com/users/benjaminion/orgs",
    "repos_url": "https://api.github.com/users/benjaminion/repos",
    "events_url": "https://api.github.com/users/benjaminion/events{/privacy}",
    "received_events_url": "https://api.github.com/users/benjaminion/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": {
    "login": "mbaxter",
    "id": 658601,
    "node_id": "MDQ6VXNlcjY1ODYwMQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/658601?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mbaxter",
    "html_url": "https://github.com/mbaxter",
    "followers_url": "https://api.github.com/users/mbaxter/followers",
    "following_url": "https://api.github.com/users/mbaxter/following{/other_user}",
    "gists_url": "https://api.github.com/users/mbaxter/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mbaxter/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mbaxter/subscriptions",
    "organizations_url": "https://api.github.com/users/mbaxter/orgs",
    "repos_url": "https://api.github.com/users/mbaxter/repos",
    "events_url": "https://api.github.com/users/mbaxter/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mbaxter/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "mbaxter",
      "id": 658601,
      "node_id": "MDQ6VXNlcjY1ODYwMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/658601?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mbaxter",
      "html_url": "https://github.com/mbaxter",
      "followers_url": "https://api.github.com/users/mbaxter/followers",
      "following_url": "https://api.github.com/users/mbaxter/following{/other_user}",
      "gists_url": "https://api.github.com/users/mbaxter/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mbaxter/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mbaxter/subscriptions",
      "organizations_url": "https://api.github.com/users/mbaxter/orgs",
      "repos_url": "https://api.github.com/users/mbaxter/repos",
      "events_url": "https://api.github.com/users/mbaxter/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mbaxter/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2020-06-30T18:52:08Z",
  "updated_at": "2020-10-23T20:44:11Z",
  "closed_at": "2020-10-23T20:44:11Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "### Description\r\nAs a node operator, I want to be able to use weak subjectivity checkpoints so that I can resync securely. \r\n\r\nSee this write-ups for the current thinking on this: \r\n* https://notes.ethereum.org/@adiasg/weak-subjectvity-eth2\r\n* https://github.com/ethereum/eth2.0-specs/blob/7a46181853a34d74e8c3da08ad23686c0918f961/specs/phase0/weak-subjectivity.md\r\n\r\nAbsorbing #1950 here: if Teku does not have access to a known good state (such as a checkpoint, or a self-calculated state) within the WSP it should warn the operator and (probably) refuse to start.\r\n\r\nWe should/could also define a mechanism for providing checkpoints state snapshots to users wishing to sync.\r\n\r\n### TODOS\r\n\r\n- [x] Accept a weak subjectivity checkpoint (WSC) CLI argument\r\n  - This is in flux, but one suggested interim format is: `blockRoot:epochNumber`\r\n- [x] Handle case where latest finalized block is outside of the weak subjectivity period (WSP) and no in-range WSC is supplied \r\n- [x] Handle case where local chain is inconsistent with the supplied WSC\r\n- [x] Handle case where sync falls out of the WSP\r\n- [x] Prevent any block inconsistent with configured WSC from being imported\r\n- [x] If WSC is configured, validate that peers agree with this checkpoint\r\n- [x] Add some method for clearing stored WS configuration\r\n- [x] Add some method for running the client if we hit a period of non-finalization longer than the WSP\r\n- [x] Clean up logging - make sure appropriate logs are going to console at a reasonable rate\r\n- [x] Disconnect peers that send a block inconsistent with the ws checkpoint\r\n- [x] Rework checks against WSP while the client is running as necessary based on discussion in WS working group channel\r\n- [x] Fully enable WS features (make CLI args visible, use strict error handling)\r\n\r\nOut of scope:\r\n- Rework sync algorithm to work with WSC.  See: #1844 \r\n- Starting up from an actual WS state.  See: #3063\r\n\r\n",
  "closed_by": {
    "login": "mbaxter",
    "id": 658601,
    "node_id": "MDQ6VXNlcjY1ODYwMQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/658601?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mbaxter",
    "html_url": "https://github.com/mbaxter",
    "followers_url": "https://api.github.com/users/mbaxter/followers",
    "following_url": "https://api.github.com/users/mbaxter/following{/other_user}",
    "gists_url": "https://api.github.com/users/mbaxter/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mbaxter/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mbaxter/subscriptions",
    "organizations_url": "https://api.github.com/users/mbaxter/orgs",
    "repos_url": "https://api.github.com/users/mbaxter/repos",
    "events_url": "https://api.github.com/users/mbaxter/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mbaxter/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ConsenSys/teku/issues/2273/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ConsenSys/teku/issues/2273/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ConsenSys/teku/issues/comments/660195636",
    "html_url": "https://github.com/ConsenSys/teku/issues/2273#issuecomment-660195636",
    "issue_url": "https://api.github.com/repos/ConsenSys/teku/issues/2273",
    "id": 660195636,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MDE5NTYzNg==",
    "user": {
      "login": "mbaxter",
      "id": 658601,
      "node_id": "MDQ6VXNlcjY1ODYwMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/658601?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mbaxter",
      "html_url": "https://github.com/mbaxter",
      "followers_url": "https://api.github.com/users/mbaxter/followers",
      "following_url": "https://api.github.com/users/mbaxter/following{/other_user}",
      "gists_url": "https://api.github.com/users/mbaxter/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mbaxter/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mbaxter/subscriptions",
      "organizations_url": "https://api.github.com/users/mbaxter/orgs",
      "repos_url": "https://api.github.com/users/mbaxter/repos",
      "events_url": "https://api.github.com/users/mbaxter/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mbaxter/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-17T16:12:30Z",
    "updated_at": "2020-07-17T16:12:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "We should probably also have checks that cause teku to shut down if sync falls behind the weak subjectivity period.",
    "reactions": {
      "url": "https://api.github.com/repos/ConsenSys/teku/issues/comments/660195636/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ConsenSys/teku/issues/comments/674090036",
    "html_url": "https://github.com/ConsenSys/teku/issues/2273#issuecomment-674090036",
    "issue_url": "https://api.github.com/repos/ConsenSys/teku/issues/2273",
    "id": 674090036,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3NDA5MDAzNg==",
    "user": {
      "login": "benjaminion",
      "id": 20796281,
      "node_id": "MDQ6VXNlcjIwNzk2Mjgx",
      "avatar_url": "https://avatars.githubusercontent.com/u/20796281?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/benjaminion",
      "html_url": "https://github.com/benjaminion",
      "followers_url": "https://api.github.com/users/benjaminion/followers",
      "following_url": "https://api.github.com/users/benjaminion/following{/other_user}",
      "gists_url": "https://api.github.com/users/benjaminion/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/benjaminion/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/benjaminion/subscriptions",
      "organizations_url": "https://api.github.com/users/benjaminion/orgs",
      "repos_url": "https://api.github.com/users/benjaminion/repos",
      "events_url": "https://api.github.com/users/benjaminion/events{/privacy}",
      "received_events_url": "https://api.github.com/users/benjaminion/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-14T14:02:04Z",
    "updated_at": "2020-08-14T14:02:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "Transposing comments from Telegram \"Eth2 Weak Subjectivity WG\" to here:\r\n\r\n> Feature Request:\r\n>\r\n> (1) Take WSS as a CLI parameter input\r\n> (2a) IF the WSS height is > local last finalized height, then ASSERT during block sync that WSS is in the path at the appropriate height. Emit descriptive critical error if this assert fails, then exit client process.\r\n> (2b) IF WSS height <= local last finalized height, then ASSERT that the local state at the WSS height is the same as the WSS input. Emit descriptive critical error if this assert fails, then exit client process.\r\n>\r\n> I'm assuming here that clients start block sync from their last finalized block. If your client starts its sync from elsewhere, you'll have to change the logic 2a & 2b so that it maintains the same functionality for your sync strategy. Happy to discuss this if needed.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ConsenSys/teku/issues/comments/674090036/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
