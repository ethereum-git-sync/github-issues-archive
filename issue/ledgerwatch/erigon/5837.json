{
  "url": "https://api.github.com/repos/ledgerwatch/erigon/issues/5837",
  "repository_url": "https://api.github.com/repos/ledgerwatch/erigon",
  "labels_url": "https://api.github.com/repos/ledgerwatch/erigon/issues/5837/labels{/name}",
  "comments_url": "https://api.github.com/repos/ledgerwatch/erigon/issues/5837/comments",
  "events_url": "https://api.github.com/repos/ledgerwatch/erigon/issues/5837/events",
  "html_url": "https://github.com/ledgerwatch/erigon/issues/5837",
  "id": 1419078707,
  "node_id": "I_kwDOC0FsAM5UlWwz",
  "number": 5837,
  "title": "race in TestServerSetup",
  "user": {
    "login": "AskAlexSharov",
    "id": 46885206,
    "node_id": "MDQ6VXNlcjQ2ODg1MjA2",
    "avatar_url": "https://avatars.githubusercontent.com/u/46885206?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/AskAlexSharov",
    "html_url": "https://github.com/AskAlexSharov",
    "followers_url": "https://api.github.com/users/AskAlexSharov/followers",
    "following_url": "https://api.github.com/users/AskAlexSharov/following{/other_user}",
    "gists_url": "https://api.github.com/users/AskAlexSharov/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/AskAlexSharov/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/AskAlexSharov/subscriptions",
    "organizations_url": "https://api.github.com/users/AskAlexSharov/orgs",
    "repos_url": "https://api.github.com/users/AskAlexSharov/repos",
    "events_url": "https://api.github.com/users/AskAlexSharov/events{/privacy}",
    "received_events_url": "https://api.github.com/users/AskAlexSharov/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 4406003490,
      "node_id": "LA_kwDOC0FsAM8AAAABBp5HIg",
      "url": "https://api.github.com/repos/ledgerwatch/erigon/labels/gateway",
      "name": "gateway",
      "color": "62DB33",
      "default": false,
      "description": "Issue assigned to gateway team"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": {
    "login": "revitteth",
    "id": 693995,
    "node_id": "MDQ6VXNlcjY5Mzk5NQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/693995?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/revitteth",
    "html_url": "https://github.com/revitteth",
    "followers_url": "https://api.github.com/users/revitteth/followers",
    "following_url": "https://api.github.com/users/revitteth/following{/other_user}",
    "gists_url": "https://api.github.com/users/revitteth/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/revitteth/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/revitteth/subscriptions",
    "organizations_url": "https://api.github.com/users/revitteth/orgs",
    "repos_url": "https://api.github.com/users/revitteth/repos",
    "events_url": "https://api.github.com/users/revitteth/events{/privacy}",
    "received_events_url": "https://api.github.com/users/revitteth/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "revitteth",
      "id": 693995,
      "node_id": "MDQ6VXNlcjY5Mzk5NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/693995?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/revitteth",
      "html_url": "https://github.com/revitteth",
      "followers_url": "https://api.github.com/users/revitteth/followers",
      "following_url": "https://api.github.com/users/revitteth/following{/other_user}",
      "gists_url": "https://api.github.com/users/revitteth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/revitteth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/revitteth/subscriptions",
      "organizations_url": "https://api.github.com/users/revitteth/orgs",
      "repos_url": "https://api.github.com/users/revitteth/repos",
      "events_url": "https://api.github.com/users/revitteth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/revitteth/received_events",
      "type": "User",
      "site_admin": false
    },
    {
      "login": "hexoscott",
      "id": 70711990,
      "node_id": "MDQ6VXNlcjcwNzExOTkw",
      "avatar_url": "https://avatars.githubusercontent.com/u/70711990?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hexoscott",
      "html_url": "https://github.com/hexoscott",
      "followers_url": "https://api.github.com/users/hexoscott/followers",
      "following_url": "https://api.github.com/users/hexoscott/following{/other_user}",
      "gists_url": "https://api.github.com/users/hexoscott/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hexoscott/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hexoscott/subscriptions",
      "organizations_url": "https://api.github.com/users/hexoscott/orgs",
      "repos_url": "https://api.github.com/users/hexoscott/repos",
      "events_url": "https://api.github.com/users/hexoscott/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hexoscott/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 5,
  "created_at": "2022-10-22T04:48:07Z",
  "updated_at": "2023-11-27T03:42:55Z",
  "closed_at": "2023-11-27T03:42:55Z",
  "author_association": "COLLABORATOR",
  "active_lock_reason": null,
  "body": "```\r\n==================\r\nWARNING: DATA RACE\r\nWrite at 0x00c0002b4858 by goroutine 9231:\r\n  runtime.racewrite()\r\n      <autogenerated>:1 +0x24\r\n  github.com/ledgerwatch/erigon-lib/kv/mdbx.(*MdbxKV).Close()\r\n      github.com/ledgerwatch/erigon-lib@v0.0.0-20221021064204-d4032de1cf76/kv/mdbx/kv_mdbx.go:411 +0x84\r\n  github.com/ledgerwatch/erigon/p2p/enode.(*DB).Close()\r\n      github.com/ledgerwatch/erigon/p2p/enode/nodedb.go:615 +0x1a8\r\n  github.com/ledgerwatch/erigon/p2p.(*Server).Stop()\r\n      github.com/ledgerwatch/erigon/p2p/server.go:424 +0x11d\r\n  github.com/ledgerwatch/erigon/p2p.TestServerSetupConn.func1.2()\r\n      github.com/ledgerwatch/erigon/p2p/server_test.go:466 +0x39\r\n  runtime.deferreturn()\r\n      runtime/panic.go:476 +0x32\r\n  testing.tRunner()\r\n      testing/testing.go:1446 +0x216\r\n  testing.(*T).Run.func1()\r\n      testing/testing.go:1493 +0x47\r\n\r\nPrevious read at 0x00c0002b4858 by goroutine 9234:\r\n  runtime.raceread()\r\n      <autogenerated>:1 +0x24\r\n  github.com/ledgerwatch/erigon-lib/kv/mdbx.(*MdbxKV).BeginRw.func1()\r\n      github.com/ledgerwatch/erigon-lib@v0.0.0-20221021064204-d4032de1cf76/kv/mdbx/kv_mdbx.go:471 +0x6a\r\n  runtime.deferreturn()\r\n      runtime/panic.go:476 +0x32\r\n  github.com/ledgerwatch/erigon-lib/kv/mdbx.(*MdbxKV).Update()\r\n      github.com/ledgerwatch/erigon-lib@v0.0.0-20221021064204-d4032de1cf76/kv/mdbx/kv_mdbx.go:654 +0xa5\r\n  github.com/ledgerwatch/erigon/p2p/enode.(*DB).storeUint64()\r\n      github.com/ledgerwatch/erigon/p2p/enode/nodedb.go:279 +0x1f6\r\n  github.com/ledgerwatch/erigon/p2p/enode.(*DB).storeLocalSeq()\r\n      github.com/ledgerwatch/erigon/p2p/enode/nodedb.go:536 +0x1d7\r\n  github.com/ledgerwatch/erigon/p2p/enode.(*LocalNode).bumpSeq()\r\n      github.com/ledgerwatch/erigon/p2p/enode/localnode.go:289 +0x270\r\n  github.com/ledgerwatch/erigon/p2p/enode.(*LocalNode).sign()\r\n      github.com/ledgerwatch/erigon/p2p/enode/localnode.go:274 +0x192\r\n  github.com/ledgerwatch/erigon/p2p/enode.(*LocalNode).Node()\r\n      github.com/ledgerwatch/erigon/p2p/enode/localnode.go:97 +0xd0\r\n  github.com/ledgerwatch/erigon/p2p.(*Server).run()\r\n      github.com/ledgerwatch/erigon/p2p/server.go:739 +0xc4\r\n  github.com/ledgerwatch/erigon/p2p.(*Server).Start.func2()\r\n      github.com/ledgerwatch/erigon/p2p/server.go:519 +0x39\r\n\r\nGoroutine 9231 (running) created at:\r\n  testing.(*T).Run()\r\n      testing/testing.go:1493 +0x75d\r\n  github.com/ledgerwatch/erigon/p2p.TestServerSetupConn()\r\n      github.com/ledgerwatch/erigon/p2p/server_test.go:447 +0xc8c\r\n  testing.tRunner()\r\n      testing/testing.go:1446 +0x216\r\n  testing.(*T).Run.func1()\r\n      testing/testing.go:1493 +0x47\r\n\r\nGoroutine 9234 (running) created at:\r\n  github.com/ledgerwatch/erigon/p2p.(*Server).Start()\r\n      github.com/ledgerwatch/erigon/p2p/server.go:519 +0xb1b\r\n  github.com/ledgerwatch/erigon/p2p.(*Server).TestStart()\r\n      github.com/ledgerwatch/erigon/p2p/server_test.go:94 +0x404\r\n  github.com/ledgerwatch/erigon/p2p.TestServerSetupConn.func1()\r\n      github.com/ledgerwatch/erigon/p2p/server_test.go:463 +0x405\r\n  testing.tRunner()\r\n      testing/testing.go:1446 +0x216\r\n  testing.(*T).Run.func1()\r\n      testing/testing.go:1493 +0x47\r\n==================\r\n--- FAIL: TestServerSetupConn (0.04s)\r\n    --- FAIL: TestServerSetupConn/doEncHandshake,close, (0.01s)\r\n```",
  "closed_by": {
    "login": "AskAlexSharov",
    "id": 46885206,
    "node_id": "MDQ6VXNlcjQ2ODg1MjA2",
    "avatar_url": "https://avatars.githubusercontent.com/u/46885206?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/AskAlexSharov",
    "html_url": "https://github.com/AskAlexSharov",
    "followers_url": "https://api.github.com/users/AskAlexSharov/followers",
    "following_url": "https://api.github.com/users/AskAlexSharov/following{/other_user}",
    "gists_url": "https://api.github.com/users/AskAlexSharov/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/AskAlexSharov/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/AskAlexSharov/subscriptions",
    "organizations_url": "https://api.github.com/users/AskAlexSharov/orgs",
    "repos_url": "https://api.github.com/users/AskAlexSharov/repos",
    "events_url": "https://api.github.com/users/AskAlexSharov/events{/privacy}",
    "received_events_url": "https://api.github.com/users/AskAlexSharov/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ledgerwatch/erigon/issues/5837/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ledgerwatch/erigon/issues/5837/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ledgerwatch/erigon/issues/comments/1467868534",
    "html_url": "https://github.com/ledgerwatch/erigon/issues/5837#issuecomment-1467868534",
    "issue_url": "https://api.github.com/repos/ledgerwatch/erigon/issues/5837",
    "id": 1467868534,
    "node_id": "IC_kwDOC0FsAM5XfeV2",
    "user": {
      "login": "hexoscott",
      "id": 70711990,
      "node_id": "MDQ6VXNlcjcwNzExOTkw",
      "avatar_url": "https://avatars.githubusercontent.com/u/70711990?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hexoscott",
      "html_url": "https://github.com/hexoscott",
      "followers_url": "https://api.github.com/users/hexoscott/followers",
      "following_url": "https://api.github.com/users/hexoscott/following{/other_user}",
      "gists_url": "https://api.github.com/users/hexoscott/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hexoscott/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hexoscott/subscriptions",
      "organizations_url": "https://api.github.com/users/hexoscott/orgs",
      "repos_url": "https://api.github.com/users/hexoscott/repos",
      "events_url": "https://api.github.com/users/hexoscott/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hexoscott/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-14T10:55:31Z",
    "updated_at": "2023-03-14T10:55:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "The culprit here is a waitgroup having `Add` called on it from multiple go routines.  We should call add from the same routine that we call wait on, and we're not guaranteeing that here.  I'd imagine in a test scenario we're using the database without waiting for things to have finished before asking it to close.\r\n\r\nQuestion is how should we handle this without the use of a waitgroup?  I've tried using atomics but they're unreliable and cause the same problem of \"check for close, not closed, continue on, close happens, defer called to `Add`, boom!\".  Mutexes would defeat the point and make things synchronous.  \r\n\r\nI've started experimenting with using a go routine spun up inside the call to `Open` which will make using the waitgroup synchronous in some respect by using 3 channels over the calls to `Wait`/`Add`/`Done`, or at least make it easier to handle a call to `Add` happening after a call to `Wait` on the waitgroup but it seems a heavy approach and might end up in the same situation but with more complicated code.\r\n\r\nAny ideas?",
    "reactions": {
      "url": "https://api.github.com/repos/ledgerwatch/erigon/issues/comments/1467868534/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ledgerwatch/erigon/issues/comments/1467892829",
    "html_url": "https://github.com/ledgerwatch/erigon/issues/5837#issuecomment-1467892829",
    "issue_url": "https://api.github.com/repos/ledgerwatch/erigon/issues/5837",
    "id": 1467892829,
    "node_id": "IC_kwDOC0FsAM5XfkRd",
    "user": {
      "login": "AskAlexSharov",
      "id": 46885206,
      "node_id": "MDQ6VXNlcjQ2ODg1MjA2",
      "avatar_url": "https://avatars.githubusercontent.com/u/46885206?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AskAlexSharov",
      "html_url": "https://github.com/AskAlexSharov",
      "followers_url": "https://api.github.com/users/AskAlexSharov/followers",
      "following_url": "https://api.github.com/users/AskAlexSharov/following{/other_user}",
      "gists_url": "https://api.github.com/users/AskAlexSharov/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AskAlexSharov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AskAlexSharov/subscriptions",
      "organizations_url": "https://api.github.com/users/AskAlexSharov/orgs",
      "repos_url": "https://api.github.com/users/AskAlexSharov/repos",
      "events_url": "https://api.github.com/users/AskAlexSharov/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AskAlexSharov/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-14T11:06:38Z",
    "updated_at": "2023-03-14T11:07:12Z",
    "author_association": "COLLABORATOR",
    "body": "General goodness:\r\n- call Add before create new goroutine, call Done in defer. \r\n- cancel goroutine by context, but wait for goroutine to fully finish (by wg.Wait is ok)\r\n- if need return error from goroutine - can use errgroup package. If don’t need then just “go”. \r\n- channels: close channel by writer (producer) when  all writes are done. \r\n- for http (p2p) servers: “graceful shutdown” means don’t accept any new requests, wait for existing requests to finish (cancel existing requests by context: immediately or by timeout) (waitgroup is ok), then close low-level resources like db/snapshots. ",
    "reactions": {
      "url": "https://api.github.com/repos/ledgerwatch/erigon/issues/comments/1467892829/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ledgerwatch/erigon/issues/comments/1468234643",
    "html_url": "https://github.com/ledgerwatch/erigon/issues/5837#issuecomment-1468234643",
    "issue_url": "https://api.github.com/repos/ledgerwatch/erigon/issues/5837",
    "id": 1468234643,
    "node_id": "IC_kwDOC0FsAM5Xg3uT",
    "user": {
      "login": "hexoscott",
      "id": 70711990,
      "node_id": "MDQ6VXNlcjcwNzExOTkw",
      "avatar_url": "https://avatars.githubusercontent.com/u/70711990?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hexoscott",
      "html_url": "https://github.com/hexoscott",
      "followers_url": "https://api.github.com/users/hexoscott/followers",
      "following_url": "https://api.github.com/users/hexoscott/following{/other_user}",
      "gists_url": "https://api.github.com/users/hexoscott/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hexoscott/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hexoscott/subscriptions",
      "organizations_url": "https://api.github.com/users/hexoscott/orgs",
      "repos_url": "https://api.github.com/users/hexoscott/repos",
      "events_url": "https://api.github.com/users/hexoscott/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hexoscott/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-14T14:44:23Z",
    "updated_at": "2023-03-14T14:44:23Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think we're breaking quite a few of those rules in the mdbx stuff.  We're not really in a position to call Add before the go routine is created because it could be off the back of an RPC call for example so the call to db.BeginRo could come from anywhere at any time.\r\n\r\nThis is where the thought for using channels to manage communicating with the waitgroup came from.  The 3 waitgroup actions we care about would all be handled within the same go routine effectively, the one that called `Open` on the db.",
    "reactions": {
      "url": "https://api.github.com/repos/ledgerwatch/erigon/issues/comments/1468234643/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ledgerwatch/erigon/issues/comments/1469293327",
    "html_url": "https://github.com/ledgerwatch/erigon/issues/5837#issuecomment-1469293327",
    "issue_url": "https://api.github.com/repos/ledgerwatch/erigon/issues/5837",
    "id": 1469293327,
    "node_id": "IC_kwDOC0FsAM5Xk6MP",
    "user": {
      "login": "AskAlexSharov",
      "id": 46885206,
      "node_id": "MDQ6VXNlcjQ2ODg1MjA2",
      "avatar_url": "https://avatars.githubusercontent.com/u/46885206?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AskAlexSharov",
      "html_url": "https://github.com/AskAlexSharov",
      "followers_url": "https://api.github.com/users/AskAlexSharov/followers",
      "following_url": "https://api.github.com/users/AskAlexSharov/following{/other_user}",
      "gists_url": "https://api.github.com/users/AskAlexSharov/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AskAlexSharov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AskAlexSharov/subscriptions",
      "organizations_url": "https://api.github.com/users/AskAlexSharov/orgs",
      "repos_url": "https://api.github.com/users/AskAlexSharov/repos",
      "events_url": "https://api.github.com/users/AskAlexSharov/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AskAlexSharov/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-15T04:02:31Z",
    "updated_at": "2023-03-15T04:02:31Z",
    "author_association": "COLLABORATOR",
    "body": "waitgroup inside kv_mdbx.go - it's not much for goroutines, but just to not call Close() when not all txs are finished. because we have many components which using own mdbx db - and some of them are nested from Geth and not really adopted for transactions use. So, i was just lazy to change implementation of higher-level components - so they can guarantee don't call Close before all read/write activity is stopped.\r\n\r\nMy opinion: we don't need any fancy communication patterns - just TestServerSetup must guarantee to wait for all read/write goroutines to finish - and only then call db.Close(). If TestServerSetup can't guarantee something because we spawn goroutines which TestServerSetup can't control - then just don't spawn such goroutiness - can ask TestServerSetup to spawn for us.\r\n\r\nI think if goroutine A created goroutine B - then A is responsible to: cancel/success_finish/wait_for_done of goroutine B.",
    "reactions": {
      "url": "https://api.github.com/repos/ledgerwatch/erigon/issues/comments/1469293327/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ledgerwatch/erigon/issues/comments/1469823755",
    "html_url": "https://github.com/ledgerwatch/erigon/issues/5837#issuecomment-1469823755",
    "issue_url": "https://api.github.com/repos/ledgerwatch/erigon/issues/5837",
    "id": 1469823755,
    "node_id": "IC_kwDOC0FsAM5Xm7sL",
    "user": {
      "login": "hexoscott",
      "id": 70711990,
      "node_id": "MDQ6VXNlcjcwNzExOTkw",
      "avatar_url": "https://avatars.githubusercontent.com/u/70711990?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hexoscott",
      "html_url": "https://github.com/hexoscott",
      "followers_url": "https://api.github.com/users/hexoscott/followers",
      "following_url": "https://api.github.com/users/hexoscott/following{/other_user}",
      "gists_url": "https://api.github.com/users/hexoscott/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hexoscott/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hexoscott/subscriptions",
      "organizations_url": "https://api.github.com/users/hexoscott/orgs",
      "repos_url": "https://api.github.com/users/hexoscott/repos",
      "events_url": "https://api.github.com/users/hexoscott/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hexoscott/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-15T11:20:20Z",
    "updated_at": "2023-03-15T11:20:20Z",
    "author_association": "CONTRIBUTOR",
    "body": "created #7111 to deal with this one",
    "reactions": {
      "url": "https://api.github.com/repos/ledgerwatch/erigon/issues/comments/1469823755/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
