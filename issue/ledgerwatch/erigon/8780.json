{
  "url": "https://api.github.com/repos/ledgerwatch/erigon/issues/8780",
  "repository_url": "https://api.github.com/repos/ledgerwatch/erigon",
  "labels_url": "https://api.github.com/repos/ledgerwatch/erigon/issues/8780/labels{/name}",
  "comments_url": "https://api.github.com/repos/ledgerwatch/erigon/issues/8780/comments",
  "events_url": "https://api.github.com/repos/ledgerwatch/erigon/issues/8780/events",
  "html_url": "https://github.com/ledgerwatch/erigon/issues/8780",
  "id": 2001045096,
  "node_id": "I_kwDOC0FsAM53RYZo",
  "number": 8780,
  "title": " Beacon Node API",
  "user": {
    "login": "Giulio2002",
    "id": 29233688,
    "node_id": "MDQ6VXNlcjI5MjMzNjg4",
    "avatar_url": "https://avatars.githubusercontent.com/u/29233688?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Giulio2002",
    "html_url": "https://github.com/Giulio2002",
    "followers_url": "https://api.github.com/users/Giulio2002/followers",
    "following_url": "https://api.github.com/users/Giulio2002/following{/other_user}",
    "gists_url": "https://api.github.com/users/Giulio2002/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Giulio2002/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Giulio2002/subscriptions",
    "organizations_url": "https://api.github.com/users/Giulio2002/orgs",
    "repos_url": "https://api.github.com/users/Giulio2002/repos",
    "events_url": "https://api.github.com/users/Giulio2002/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Giulio2002/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2023-11-19T21:29:29Z",
  "updated_at": "2024-01-08T10:32:17Z",
  "closed_at": null,
  "author_association": "COLLABORATOR",
  "active_lock_reason": null,
  "body": "# Beacon Node API Implementation Roadmap\r\n\r\nThis document outlines the tasks to implement the Beacon Node API endpoints.\r\n\r\n## Beacon\r\n\r\n- [x] `GET /eth/v1/beacon/genesis` - Retrieve details of the chain's genesis.\r\n- [x] `GET /eth/v1/beacon/states/{state_id}/root` - Get state SSZ HashTreeRoot.\r\n- [x] `GET /eth/v1/beacon/states/{state_id}/fork` - Get Fork object for requested state.\r\n- [x] `GET /eth/v1/beacon/states/{state_id}/finality_checkpoints` - Get state finality checkpoints.\r\n- [x] `GET /eth/v1/beacon/states/{state_id}/validators` - Get validators from state.\r\n- [x] `GET /eth/v1/beacon/states/{state_id}/validators/{validator_id}` - Get validator from state by id.\r\n- [x] `GET /eth/v1/beacon/states/{state_id}/validator_balances` - Get validator balances from state.\r\n- [x] `GET /eth/v1/beacon/states/{state_id}/committees` - Get all committees for a state.\r\n- [x] `GET /eth/v1/beacon/states/{state_id}/sync_committees` - Get sync committees for a state.\r\n- [x] `GET /eth/v1/beacon/states/{state_id}/randao` - Get the RANDAO mix for some epoch in a specified state.\r\n- [x] `GET /eth/v1/beacon/headers` - Get block headers.\r\n- [x] `GET /eth/v1/beacon/headers/{block_id}` - Get block header.\r\n- [ ] `POST /eth/v1/beacon/bLinded_blocks` - Publish a signed block.\r\n- [ ] `POST /eth/v2/beacon/bLinded_blocks` - Publish a signed block.\r\n- [ ] `POST /eth/v1/beacon/blocks` - Publish a signed block.\r\n- [ ] `POST /eth/v2/beacon/blocks` - Publish a signed block.\r\n- [x] `GET /eth/v1/beacon/blocks/{block_id}` - Get block.\r\n- [x] `GET /eth/v2/beacon/blocks/{block_id}` - Get block.\r\n- [x] `GET /eth/v1/beacon/blocks/{block_id}/root` - Get block root.\r\n- [x] `GET /eth/v1/beacon/blocks/{block_id}/attestations` - Get block attestations.\r\n- [ ] `GET /eth/v1/beacon/blob_sidecars/{block_id}` - Get blob sidecars.\r\n- [x] `POST /eth/v1/beacon/rewards/sync_committee/{block_id}` - Get sync committee rewards.\r\n- [ ] `GET /eth/v1/beacon/deposit_snapshot` - Get Deposit Tree Snapshot.\r\n- [x] `GET /eth/v1/beacon/rewards/blocks/{block_id}` - Get block rewards.\r\n- [x] `POST /eth/v1/beacon/rewards/attestations/{epoch}` - Get attestations rewards.\r\n- [x] `GET /eth/v1/beacon/bLinded_blocks/{block_id}` - Get blinded block.\r\n- [ ] `GET /eth/v1/beacon/light_client/bootstrap/{block_root}` - Get 'LightClientBootstrap' structure for a requested block root.\r\n- [ ] `GET /eth/v1/beacon/light_client/updates` - Get 'LightClientUpdate' instances in a requested sync committee period range.\r\n- [ ] `GET /eth/v1/beacon/light_client/finality_update` - Get the latest known 'LightClientFinalityUpdate'.\r\n- [ ] `GET /eth/v1/beacon/light_client/optimistic_update` - Get the latest known 'LightClientOptimisticUpdate'.\r\n- [x] `GET /eth/v1/beacon/pool/attestations` - Get Attestations from operations pool.\r\n- [ ] `POST /eth/v1/beacon/pool/attestations` - Submit Attestation objects to node.\r\n- [x] `GET /eth/v1/beacon/pool/attester_slashings` - Get AttesterSlashings from operations pool.\r\n- [x] `POST /eth/v1/beacon/pool/attester_slashings` - Submit AttesterSlashing object to node's pool.\r\n- [x] `GET /eth/v1/beacon/pool/proposer_slashings` - Get ProposerSlashings from operations pool.\r\n- [x] `POST /eth/v1/beacon/pool/proposer_slashings` - Submit ProposerSlashing object to node's pool.\r\n- [ ] `POST /eth/v1/beacon/pool/sync_committees` - Submit sync committee signatures to node\r\n- [ ] `GET /eth/v1/beacon/pool/sync_committees` - Get sync committee signatures from operations pool.\r\n- [x] `POST /eth/v1/beacon/pool/voluntary_exits` - Submit SignedVoluntaryExit object to node's pool.\r\n- [x] `GET /eth/v1/beacon/pool/voluntary_exits` - Get SignedVoluntaryExit from operations pool.\r\n- [x] `GET /eth/v1/beacon/pool/bls_to_execution_changes` - Get SignedBLSToExecutionChange from operations pool.\r\n- [x] `POST /eth/v1/beacon/pool/bls_to_execution_changes` - Submit SignedBLSToExecutionChange object to node's pool.\r\n\r\n## Builder\r\n\r\n- [x] `GET /eth/v1/builder/states/{state_id}/expected_withdrawals` - Get the withdrawals that are to be included for the block built on the specified state.\r\n\r\n## Config\r\n\r\n- [x] `GET /eth/v1/config/fork_schedule` - Get scheduled upcoming forks.\r\n- [x] `GET /eth/v1/config/spec` - Get spec params.\r\n- [x] `GET /eth/v1/config/deposit_contract` - Get deposit contract address.\r\n\r\n## Debug\r\n\r\n- [x] `GET /eth/v2/debug/beacon/states/{state_id}` - Get full BeaconState object.\r\n- [x] `GET /eth/v2/debug/beacon/heads` - Get fork choice leaves.\r\n- [x] `GET /eth/v1/debug/fork_choice` - Get fork choice array.\r\n\r\n## Events\r\n\r\n- [ ] `GET /eth/v1/events` - Subscribe to beacon node events.\r\n\r\n## Node\r\n\r\n- [ ] `GET /eth/v1/node/identity` - Get node network identity.\r\n- [ ] `GET /eth/v1/node/peers` - Get node network peers.\r\n- [ ] `GET /eth/v1/node/peers/{peer_id}` - Get peer.\r\n- [ ] `GET /eth/v1/node/peer_count` - Get peer count.\r\n- [x] `GET /eth/v1/node/version` - Get version string of the running beacon node.\r\n- [x] `GET /eth/v1/node/syncing` - Get node syncing status.\r\n- [x] `GET /eth/v1/node/health` - Get health check.\r\n\r\n## Validator\r\n\r\n- [x] `POST /eth/v1/validator/duties/attester/{epoch}` - Get attester duties.\r\n- [x] `GET /eth/v1/validator/duties/proposer/{epoch}` - Get block proposers duties.\r\n- [x] `POST /eth/v1/validator/duties/sync/{epoch}` - Get sync committee duties.\r\n- [x] `GET /eth/v2/validator/blocks/{slot}` - Produce a new block, without signature.  (DEPRECATED!)\r\n- [ ] `GET /eth/v3/validator/blocks/{slot}` - Produce a new block, without signature.\r\n- [x] `GET /eth/v1/validator/blinded_blocks/{slot}` - Produce a new blinded block, without signature. (DEPRECATED!)\r\n- [ ] `GET /eth/v1/validator/attestation_data` - Produce an attestation data.\r\n- [ ] `GET /eth/v1/validator/aggregate_attestation` - Get aggregated attestation.\r\n- [ ] `POST /eth/v1/validator/aggregate_and_proofs` - Publish multiple aggregate and proofs.\r\n- [ ] `POST /eth/v1/validator/beacon_committee_subscriptions` - Signal beacon node to prepare for a committee subnet.\r\n- [ ] `POST /eth/v1/validator/sync_committee_subscriptions` - Subscribe to sync committee subnets.\r\n- [ ] `POST /eth/v1/validator/beacon_committee_selections` - Determine if a distributed validator has been selected to aggregate attestations.\r\n- [ ] `GET /eth/v1/validator/sync_committee_contribution` - Produce a sync committee contribution.\r\n- [ ] `POST /eth/v1/validator/sync_committee_selections` - Determine if a distributed validator has been selected to make a sync committee contribution.\r\n- [ ] `POST /eth/v1/validator/contribution_and_proofs` - Publish multiple contribution and proofs.\r\n- [ ] `POST /eth/v1/validator/prepare_beacon_proposer` - Provide beacon node with proposals for the given validators.\r\n- [ ] `POST /eth/v1/validator/register_validator` - Provide beacon node with registrations for the given validators to the external builder network.\r\n- [x] `GET /eth/v1/validator/liveness/{epoch}` - Indicates if a validator has been observed on the network.\r\n\r\n## Rewards\r\n\r\n- [x] `POST /eth/v1/beacon/rewards/sync_committee/{block_id}` - Get sync committee rewards.\r\n- [x] `GET /eth/v1/beacon/rewards/blocks/{block_id}` - Get block rewards.\r\n- [x] `POST /eth/v1/beacon/rewards/attestations/{epoch}` - Get attestations rewards.\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ledgerwatch/erigon/issues/8780/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ledgerwatch/erigon/issues/8780/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ledgerwatch/erigon/issues/comments/1869066191",
    "html_url": "https://github.com/ledgerwatch/erigon/issues/8780#issuecomment-1869066191",
    "issue_url": "https://api.github.com/repos/ledgerwatch/erigon/issues/8780",
    "id": 1869066191,
    "node_id": "IC_kwDOC0FsAM5vZ6_P",
    "user": {
      "login": "Giulio2002",
      "id": 29233688,
      "node_id": "MDQ6VXNlcjI5MjMzNjg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/29233688?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Giulio2002",
      "html_url": "https://github.com/Giulio2002",
      "followers_url": "https://api.github.com/users/Giulio2002/followers",
      "following_url": "https://api.github.com/users/Giulio2002/following{/other_user}",
      "gists_url": "https://api.github.com/users/Giulio2002/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Giulio2002/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Giulio2002/subscriptions",
      "organizations_url": "https://api.github.com/users/Giulio2002/orgs",
      "repos_url": "https://api.github.com/users/Giulio2002/repos",
      "events_url": "https://api.github.com/users/Giulio2002/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Giulio2002/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-12-25T17:41:56Z",
    "updated_at": "2023-12-25T17:41:56Z",
    "author_association": "COLLABORATOR",
    "body": "/validator endpoints: https://github.com/ledgerwatch/erigon/pull/9080",
    "reactions": {
      "url": "https://api.github.com/repos/ledgerwatch/erigon/issues/comments/1869066191/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ledgerwatch/erigon/issues/comments/1872250160",
    "html_url": "https://github.com/ledgerwatch/erigon/issues/8780#issuecomment-1872250160",
    "issue_url": "https://api.github.com/repos/ledgerwatch/erigon/issues/8780",
    "id": 1872250160,
    "node_id": "IC_kwDOC0FsAM5vmEUw",
    "user": {
      "login": "Giulio2002",
      "id": 29233688,
      "node_id": "MDQ6VXNlcjI5MjMzNjg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/29233688?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Giulio2002",
      "html_url": "https://github.com/Giulio2002",
      "followers_url": "https://api.github.com/users/Giulio2002/followers",
      "following_url": "https://api.github.com/users/Giulio2002/following{/other_user}",
      "gists_url": "https://api.github.com/users/Giulio2002/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Giulio2002/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Giulio2002/subscriptions",
      "organizations_url": "https://api.github.com/users/Giulio2002/orgs",
      "repos_url": "https://api.github.com/users/Giulio2002/repos",
      "events_url": "https://api.github.com/users/Giulio2002/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Giulio2002/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-12-29T18:01:36Z",
    "updated_at": "2023-12-29T18:01:36Z",
    "author_association": "COLLABORATOR",
    "body": "Rewards enpoints: https://github.com/ledgerwatch/erigon/pull/9102",
    "reactions": {
      "url": "https://api.github.com/repos/ledgerwatch/erigon/issues/comments/1872250160/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
