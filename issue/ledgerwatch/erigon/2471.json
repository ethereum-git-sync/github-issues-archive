{
  "url": "https://api.github.com/repos/ledgerwatch/erigon/issues/2471",
  "repository_url": "https://api.github.com/repos/ledgerwatch/erigon",
  "labels_url": "https://api.github.com/repos/ledgerwatch/erigon/issues/2471/labels{/name}",
  "comments_url": "https://api.github.com/repos/ledgerwatch/erigon/issues/2471/comments",
  "events_url": "https://api.github.com/repos/ledgerwatch/erigon/issues/2471/events",
  "html_url": "https://github.com/ledgerwatch/erigon/issues/2471",
  "id": 956052617,
  "node_id": "MDU6SXNzdWU5NTYwNTI2MTc=",
  "number": 2471,
  "title": "Feature: tiered chaindata storage",
  "user": {
    "login": "tsutsu",
    "id": 3542676,
    "node_id": "MDQ6VXNlcjM1NDI2NzY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/3542676?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tsutsu",
    "html_url": "https://github.com/tsutsu",
    "followers_url": "https://api.github.com/users/tsutsu/followers",
    "following_url": "https://api.github.com/users/tsutsu/following{/other_user}",
    "gists_url": "https://api.github.com/users/tsutsu/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tsutsu/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tsutsu/subscriptions",
    "organizations_url": "https://api.github.com/users/tsutsu/orgs",
    "repos_url": "https://api.github.com/users/tsutsu/repos",
    "events_url": "https://api.github.com/users/tsutsu/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tsutsu/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 3,
  "created_at": "2021-07-29T17:21:48Z",
  "updated_at": "2021-07-31T01:43:27Z",
  "closed_at": "2021-07-31T01:43:27Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "# Rationale\r\n\r\nDespite Erigon's efficient chaindata storage format, archive-node chaindata disk usage will still grow over time.\r\n\r\nArchive nodes hosted on IaaS VM instances, for maximum read IOPS under heavy query load (e.g. when used as shared backends for node hosting providers), will likely hold chaindata state on direct-attached instance-local ephemeral SSDs (AWS \"instance store\" volumes; GCP \"scratch SSD\" volumes.)\r\n\r\nAnd VMs in such a configuration — at least on these major IaaS providers — do not allow for online growth of this ephemeral direct-attached storage. The VM is stuck with whatever direct-attached storage pool size it was created with. Data must be migrated laboriously from one VM to another to \"enlarge\" the node — as if repotting a plant in a larger pot.\r\n\r\nAnd beyond that, these IaaSes impose direct-attached-storage-pool size limits. I am already running into such a storage limit on GCP (not with Erigon, but with upstream Geth) where our BSC archive node has nearly filled the full 9TiB direct-attached storage pool possible to allocate for a single GCP VM. There is nowhere further to migrate the node from there (except away from IaaS entirely.)\r\n\r\nI'm working on porting BSC's Geth fork patches over to Erigon, to stand up a BSC Erigon node. But this will only delay the inevitable — the node, perhaps after another year or two, will still exceed the maximum direct-attached-storage-pool size.\r\n\r\nThis problem could be avoided if the ephemeral(!) direct-attached-storage-pool were actually being used for its intended purpose: as a discardable, re-warmable cache, rather than as a primary data store. This is would be very difficult to achieve with Geth's LevelDB-based storage (so I'm not going to suggest this change upstream); but I feel that it _may_ be possible to achieve on top of Erigon's libmdbx-based storage.\r\n\r\n# Implementation\r\n\r\nWhat I'm imagining:\r\n\r\n* an optional CLI flag `--chaindata-cache-dir`, only applicable if the node is in archive mode, to specify a chaindata cache location.\r\n\r\n* if the flag is passed, then the `ethdb` abstracted database struct would initialize and hold a second `cache_db` database handle, to a second mdbx database. `ethdb.Batch`es being committed into the database would then actually be committed _twice_ (hopefully in parallel) — once to the \"hot\" database (idiomatically, configured to live on a direct-attached-storage-pool), and once to the \"cold\" database (idiomatically, configured to live on a regular network storage volume.)\r\n\r\n* make the pruning policy specified by `--prune` run against _both_ databases (possible perf optimization: scan the cold DB to find keys to delete, then send the delete batch to both the hot and cold DBs)\r\n\r\n* add a CLI flag `--cache-prune`, which configures _additional_ pruning _only_ for the hot DB\r\n\r\nThis way, a node could be configured to operate as both a full node _and_ an archive node, at the same time. Block ingest reads, and RPC queries for recent blocks, would be run against the hot DB; while only historical RPC queries would hit the cold DB.\r\n\r\nOptionally, `--cache-prune` could also allow for pruning of historical _blocks_ and _transactions_ from the hot DB, in a way that the regular `--prune` cannot; as these would still exist in the cold DB.\r\n\r\nNote that this isn't really anything like upstream Geth's ancient-data freezer — as in this model, the cold DB isn't _just_ for old stuff, but is actually a strict superset of the data in the hot DB. The hot DB could at any time be reconstructed from the cold DB.",
  "closed_by": {
    "login": "AskAlexSharov",
    "id": 46885206,
    "node_id": "MDQ6VXNlcjQ2ODg1MjA2",
    "avatar_url": "https://avatars.githubusercontent.com/u/46885206?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/AskAlexSharov",
    "html_url": "https://github.com/AskAlexSharov",
    "followers_url": "https://api.github.com/users/AskAlexSharov/followers",
    "following_url": "https://api.github.com/users/AskAlexSharov/following{/other_user}",
    "gists_url": "https://api.github.com/users/AskAlexSharov/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/AskAlexSharov/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/AskAlexSharov/subscriptions",
    "organizations_url": "https://api.github.com/users/AskAlexSharov/orgs",
    "repos_url": "https://api.github.com/users/AskAlexSharov/repos",
    "events_url": "https://api.github.com/users/AskAlexSharov/events{/privacy}",
    "received_events_url": "https://api.github.com/users/AskAlexSharov/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ledgerwatch/erigon/issues/2471/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ledgerwatch/erigon/issues/2471/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ledgerwatch/erigon/issues/comments/889580519",
    "html_url": "https://github.com/ledgerwatch/erigon/issues/2471#issuecomment-889580519",
    "issue_url": "https://api.github.com/repos/ledgerwatch/erigon/issues/2471",
    "id": 889580519,
    "node_id": "IC_kwDOC0FsAM41Bevn",
    "user": {
      "login": "AskAlexSharov",
      "id": 46885206,
      "node_id": "MDQ6VXNlcjQ2ODg1MjA2",
      "avatar_url": "https://avatars.githubusercontent.com/u/46885206?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AskAlexSharov",
      "html_url": "https://github.com/AskAlexSharov",
      "followers_url": "https://api.github.com/users/AskAlexSharov/followers",
      "following_url": "https://api.github.com/users/AskAlexSharov/following{/other_user}",
      "gists_url": "https://api.github.com/users/AskAlexSharov/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AskAlexSharov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AskAlexSharov/subscriptions",
      "organizations_url": "https://api.github.com/users/AskAlexSharov/orgs",
      "repos_url": "https://api.github.com/users/AskAlexSharov/repos",
      "events_url": "https://api.github.com/users/AskAlexSharov/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AskAlexSharov/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-07-30T02:23:11Z",
    "updated_at": "2021-07-30T02:23:11Z",
    "author_association": "COLLABORATOR",
    "body": "Thank you.\r\nWe already working on snapshot sync. \r\nSnapshots - databases with historical data - will be separated databases and can be stored anywhere. \r\n\r\nI think this is enough? ",
    "reactions": {
      "url": "https://api.github.com/repos/ledgerwatch/erigon/issues/comments/889580519/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ledgerwatch/erigon/issues/comments/890250389",
    "html_url": "https://github.com/ledgerwatch/erigon/issues/2471#issuecomment-890250389",
    "issue_url": "https://api.github.com/repos/ledgerwatch/erigon/issues/2471",
    "id": 890250389,
    "node_id": "IC_kwDOC0FsAM41ECSV",
    "user": {
      "login": "tsutsu",
      "id": 3542676,
      "node_id": "MDQ6VXNlcjM1NDI2NzY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3542676?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tsutsu",
      "html_url": "https://github.com/tsutsu",
      "followers_url": "https://api.github.com/users/tsutsu/followers",
      "following_url": "https://api.github.com/users/tsutsu/following{/other_user}",
      "gists_url": "https://api.github.com/users/tsutsu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tsutsu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tsutsu/subscriptions",
      "organizations_url": "https://api.github.com/users/tsutsu/orgs",
      "repos_url": "https://api.github.com/users/tsutsu/repos",
      "events_url": "https://api.github.com/users/tsutsu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tsutsu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-07-30T23:22:49Z",
    "updated_at": "2021-07-30T23:22:49Z",
    "author_association": "CONTRIBUTOR",
    "body": "Ah, I didn't realize snapshot sync was on its way. It's probably enough. Just to verify:\r\n\r\n1. given an Erigon node configured as an archive node, will the snapshots contain all historical state versions?\r\n2. is an Erigon archive node with snapshots enabled, able to efficiently prune its working-state chaindata DB of _all_ data held in the snapshots, such that what's left in the working-state DB becomes nearly fixed-size / only growing `O(log N)` over time — while still retaining all archive-node functionality?\r\n2. presuming the Erigon `rpcdaemon` is running with access to both the shared memory of the `erigon` process, and the `chaindata` DB, and the snapshots — is the RPC daemon able to respond for both historical (reading from the snapshots) and \"live\" (`latest`-height) queries?\r\n\r\nIf all of those are true, then yes, nothing needs to be done other than to get snapshot sync fully working. :)",
    "reactions": {
      "url": "https://api.github.com/repos/ledgerwatch/erigon/issues/comments/890250389/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ledgerwatch/erigon/issues/comments/890273854",
    "html_url": "https://github.com/ledgerwatch/erigon/issues/2471#issuecomment-890273854",
    "issue_url": "https://api.github.com/repos/ledgerwatch/erigon/issues/2471",
    "id": 890273854,
    "node_id": "IC_kwDOC0FsAM41EIA-",
    "user": {
      "login": "AskAlexSharov",
      "id": 46885206,
      "node_id": "MDQ6VXNlcjQ2ODg1MjA2",
      "avatar_url": "https://avatars.githubusercontent.com/u/46885206?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AskAlexSharov",
      "html_url": "https://github.com/AskAlexSharov",
      "followers_url": "https://api.github.com/users/AskAlexSharov/followers",
      "following_url": "https://api.github.com/users/AskAlexSharov/following{/other_user}",
      "gists_url": "https://api.github.com/users/AskAlexSharov/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AskAlexSharov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AskAlexSharov/subscriptions",
      "organizations_url": "https://api.github.com/users/AskAlexSharov/orgs",
      "repos_url": "https://api.github.com/users/AskAlexSharov/repos",
      "events_url": "https://api.github.com/users/AskAlexSharov/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AskAlexSharov/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-07-31T01:43:27Z",
    "updated_at": "2021-07-31T01:43:27Z",
    "author_association": "COLLABORATOR",
    "body": "@tsutsu \r\n1. Yes - for archive node, no - for pruned node.\r\n2. Yes (pruned mode already does it - for all data except blocks itself - snapshot feature will get it done for blocks)\r\n3. Snapshots - technically are also databases (no difference from chaindata) - and RPCDaemon can access it and shared memory will work same way (OS will manage to keep Hot part of data in RAM - doesn't matter in which DB stored this Hot data). \r\n\r\n\"nothing needs to be done other than to get snapshot sync fully working\" - yes, @b00ris working on it. ",
    "reactions": {
      "url": "https://api.github.com/repos/ledgerwatch/erigon/issues/comments/890273854/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
