{
  "url": "https://api.github.com/repos/ledgerwatch/erigon/issues/4471",
  "repository_url": "https://api.github.com/repos/ledgerwatch/erigon",
  "labels_url": "https://api.github.com/repos/ledgerwatch/erigon/issues/4471/labels{/name}",
  "comments_url": "https://api.github.com/repos/ledgerwatch/erigon/issues/4471/comments",
  "events_url": "https://api.github.com/repos/ledgerwatch/erigon/issues/4471/events",
  "html_url": "https://github.com/ledgerwatch/erigon/issues/4471",
  "id": 1274071465,
  "node_id": "I_kwDOC0FsAM5L8Mmp",
  "number": 4471,
  "title": "Request for a New RPC Endpoint eth_callMany",
  "user": {
    "login": "hrthaowang",
    "id": 98331735,
    "node_id": "U_kgDOBdxsVw",
    "avatar_url": "https://avatars.githubusercontent.com/u/98331735?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hrthaowang",
    "html_url": "https://github.com/hrthaowang",
    "followers_url": "https://api.github.com/users/hrthaowang/followers",
    "following_url": "https://api.github.com/users/hrthaowang/following{/other_user}",
    "gists_url": "https://api.github.com/users/hrthaowang/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hrthaowang/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hrthaowang/subscriptions",
    "organizations_url": "https://api.github.com/users/hrthaowang/orgs",
    "repos_url": "https://api.github.com/users/hrthaowang/repos",
    "events_url": "https://api.github.com/users/hrthaowang/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hrthaowang/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2022-06-16T20:55:23Z",
  "updated_at": "2022-07-05T09:55:15Z",
  "closed_at": "2022-07-05T09:55:15Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "# Rationale\r\n\r\nWe want to request for a new rpc endpoint `eth_callMany`, which provides a flexible interface for users to simulate arbitrary number of transactions at an arbitrary blockchain index. It's extremely useful for getting the intermediate evm state of a blockchain. For regular `eth_call`, we could only get the end state after all of the transactions in that block. We want an api that's similar with [`eth_callBundle`](https://docs.flashbots.net/flashbots-auction/searchers/advanced/rpc-endpoint#eth_callbundle) but enables the simulations of transactions in the middle of a block. Here is the specification for this API.\r\n\r\n# Specification\r\n\r\n## eth_callMany\r\n\r\nExecutes a list of bundles (a bundle if a collection of transactions), without creating transactions on the blockchain. The `eth_callMany` method can be used similarly as `eth_call` besides three major distinctions.\r\n\r\n  \r\n\r\n1. The method supports simulating transactions at a intermediate state of a block (e.g. inheriting the block state after executing a portion of transactions in that block)\r\n\r\n2. The method supports simulating multiple transactions with sequential dependencies. The transactions could be separated into different blocks.\r\n\r\n3. The method supports overwrites for block headers (e.g. coinbase, difficulties, blockHash, and etc.)\r\n\r\n  \r\n\r\n  \r\n\r\n### Parameters\r\n\r\n  \r\n\r\nThe method takes 3 parameters: a list of bundles where each bundle has a list of unsigned transactions objects and an optional setting for the block header, a simulation context which includes the block identifier, the transaction index, and the standard state overrides, and an optional timeout.\r\n\r\n  \r\n\r\n1.  `Bundles` - a list of Bundle\r\n\r\n- Bundle\r\n    - `transactions`: A list of unsigned transaction call objects following the same format as `eth_call`.\r\n    - `blockOverride`: An optional overwrite of the block header\r\n\r\n| Field | Type | Bytes | Optional | Description |\r\n| -------------- | :----------------------- | :----- | :-------- | :---------------------------------------------------------------------------------------------------------------------------------------------- |\r\n| BlockNumber | Object | NA | Yes | Block number. Defaults to the block number of the first simulated block. Each following block increments its block number by 1 |\r\n| BlockHash | Dict[blockNumber, Hash] | NA | Yes | A dictionary that maps blockNumber to a user-defined hash. It could be queried from the solidity opcode `BLOCKHASH` |\r\n| Coinbase | Address | 20 | Yes | The address of miner. Defaults to the original miner of the first simulated block. |\r\n| Timestamp | Object | 8 | Yes | The timestamp of the current block. Defaults to the timestamp of the first simulated block. Each following block increments its timestamp by 1. |\r\n| Difficulty | Object | 4 | Yes | The difficulty of the current block. Defaults to the difficulty of the first simulated block. |\r\n| GasLimit | Object | 4 | Yes | The gas limit of the current block. Defaults to the difficulty of the first simulated block. |\r\n| BaseFee | Object | 32 | Yes | The base fee of the current block. Defaults to the base fee of the first simulated block. |\r\n```\r\n[{ \"transactions\": [txn1, txn2, txn3], \"blockOverride\": {\r\n    \"blockHash\": {\r\n        10458679: \"0x0000000000000000000000000000000000000000000000000000000000000000\"\r\n    }}\r\n}, bundle2]\r\n\r\n```\r\n\r\n2.  `Object` - Simulation Context\r\n\r\n- blockNumber : `Quantity|Tag` - Block Number or the string `latest` or `pending`.\r\n\r\n\t- The _block number_ is mandatory and defines the context (state) against which the specified transaction should be executed. It is not possible to execute calls against reorged blocks.\r\n\r\n- transactionIndex : `Number` - The transaction index of the simulated transactions\r\n\r\n\t- The _transaction index_ is optional. The default value of the _transaction index_ is -1, which would place the simulated transactions after the entire block.\r\n\r\n\r\n\r\n  \r\nExample:\r\n\r\n```\r\n{\r\n\t'blockNumber': \"latest\",\r\n\t\"transactionIndex\": 0,\r\n}\r\n```\r\n\r\n3. `Object` - State Overrides\r\nThe _state override set_ is an optional address-to-state mapping, which follows the `eth_call` standard.\r\nExample:\r\n```\r\n{\r\n\t\"0xd9c9cd5f6779558b6e0ed4e6acf6b1947e7fa1f3\": {\r\n\t\t\"balance\": \"0xde0b6b3a7640000\"\r\n\t}\r\n}\r\n```\r\n4.  `Number` - Timeoff\r\n\r\nThe upper limit running time for the simulations in milliseconds. Defaults to `5000` milliseconds.\r\n\r\n  \r\n\r\n### Return Values\r\n\r\n  \r\n\r\nThe method returns a list of list of `Binary` containing either the return value of the executed contract call or the reverted error code.\r\n\r\n  \r\n\r\n#### Simple Example\r\n\r\n  \r\n\r\n```\r\n{\r\n\t\"id\" : 1,\r\n\t\"jsonrpc\": \"2.0\",\r\n\t\"result\": [[{\"value\": \"0x0000000000000000000000000000000000000000000000000000000000000001\"}, {\"error\": \"execution reverted\"}]]\r\n}\r\n\r\n```\r\n\r\n  \r\n\r\n### Example Usage\r\n\r\n  \r\n\r\nFor some AMM pools, there might be multiple swap transactions for a pariticular pool in one block. Taking Uniswap V2 as an example, it's impossible to get the intermediate reserves of the pool using `getReserves()` function call. This is a toy example of how users might be able to use the new rpc call to get the intermediate states of a smart contract. The second transaction is the demonstration of how users might change the block header.\r\n\r\n```\r\nreserve_tx = {\r\n\t\"to\": \"0xB4e16d0168e52d35CaCD2c6185b44281Ec28C9Dc\", // address of WETH/USDC Uniswap V2 Pool\r\n\t\"gas\": \"0x13880\",\r\n\t\"maxPriorityFeePerGas\": \"0x59682f00\",\r\n\t\"maxFeePerGas\": \"0x28ade5e73c\",\r\n\t\"data\": \"0x0902f1ac\", // function selector for getReserves()\r\n}\r\n\r\nblockNum_tx = {\r\n\t\"to\": \"0x0000000000000000000000000000000000000000\",\r\n\t\"gas\": \"0x13880\",\r\n\t\"maxPriorityFeePerGas\": \"0x59682f00\",\r\n\t\"maxFeePerGas\": \"0x28ade5e73c\",\r\n\t\"data\": \"0x7f6c6f10\" // function selector for getBlockNum() from the EVMContext contract\r\n}\r\n```\r\n\r\n  \r\n\r\n```\r\nparams = [\r\n\t[{\"transactions\": [reserve_tx, blockNum_tx], \"blockOverride\":{\"blockNumber\": \"0xe39dd0\"}}],\r\n\t{\"blockNumber\": \"0xe39ddf\",\"transactionIndex\": 234},\r\n\t{\"0x0000000000000000000000000000000000000000\": {\"code\": EVMContext.deployedBytecode}\r\n]\r\n// EVMContext is a contract that can query the block context\r\n\r\n$ curl --data '{\"method\":\"eth_callMany\",\"params\":params,\"id\":1,\"jsonrpc\":\"2.0\"}' -H \"Content-Type: application/json\" -X POST localhost:8545\r\n\r\n{\r\n\t\"id\" : 1,\r\n\t\"jsonrpc\": \"2.0\",\r\n\t\"result\": [[{\"value\": \"0x000000000000000000000000000000000000000000000000000048fc0e88a9d600000000000000000000000000000000000000000000092227c18803e8d401a500000000000000000000000000000000000000000000000000000000629e6eed\"}, {\"value\": \"0x0000000000000000000000000000000000000000000000000000000000e39dd0\"}]]\r\n\r\n}\r\n```\r\n\r\n  \r\n\r\nThe result of the first call is the intermediate reserves of the WETH/USDC Uniswap V2 Pool before the 234th transaction. The result of the second call is the overwritten block number from the block override.\r\n\r\n\r\n## debug_traceCallMany\r\nThe specification for `debug_traceCallMany` is quite similar with `eth_callMany` and we follow the [go-ethereum's standard](https://geth.ethereum.org/docs/rpc/ns-debug#debug_tracecall) for the trace config. \r\n\r\n# Implementation\r\nWe have a proof-of-concept implementation at https://github.com/hrthaowang/erigon/tree/callIntraBundleAlpha. We'd love to hear some feedbacks on this specification from the Erigon's team and we are happy to upstream it. ",
  "closed_by": {
    "login": "mandrigin",
    "id": 466427,
    "node_id": "MDQ6VXNlcjQ2NjQyNw==",
    "avatar_url": "https://avatars.githubusercontent.com/u/466427?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mandrigin",
    "html_url": "https://github.com/mandrigin",
    "followers_url": "https://api.github.com/users/mandrigin/followers",
    "following_url": "https://api.github.com/users/mandrigin/following{/other_user}",
    "gists_url": "https://api.github.com/users/mandrigin/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mandrigin/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mandrigin/subscriptions",
    "organizations_url": "https://api.github.com/users/mandrigin/orgs",
    "repos_url": "https://api.github.com/users/mandrigin/repos",
    "events_url": "https://api.github.com/users/mandrigin/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mandrigin/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ledgerwatch/erigon/issues/4471/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ledgerwatch/erigon/issues/4471/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ledgerwatch/erigon/issues/comments/1174864718",
    "html_url": "https://github.com/ledgerwatch/erigon/issues/4471#issuecomment-1174864718",
    "issue_url": "https://api.github.com/repos/ledgerwatch/erigon/issues/4471",
    "id": 1174864718,
    "node_id": "IC_kwDOC0FsAM5GBwNO",
    "user": {
      "login": "mandrigin",
      "id": 466427,
      "node_id": "MDQ6VXNlcjQ2NjQyNw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/466427?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mandrigin",
      "html_url": "https://github.com/mandrigin",
      "followers_url": "https://api.github.com/users/mandrigin/followers",
      "following_url": "https://api.github.com/users/mandrigin/following{/other_user}",
      "gists_url": "https://api.github.com/users/mandrigin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mandrigin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mandrigin/subscriptions",
      "organizations_url": "https://api.github.com/users/mandrigin/orgs",
      "repos_url": "https://api.github.com/users/mandrigin/repos",
      "events_url": "https://api.github.com/users/mandrigin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mandrigin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-05T09:55:15Z",
    "updated_at": "2022-07-05T09:55:15Z",
    "author_association": "COLLABORATOR",
    "body": "@hrthaowang closing the issue since the PR was merged, feel free to reopen",
    "reactions": {
      "url": "https://api.github.com/repos/ledgerwatch/erigon/issues/comments/1174864718/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 1,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
