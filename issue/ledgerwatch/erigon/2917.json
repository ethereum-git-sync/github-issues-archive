{
  "url": "https://api.github.com/repos/ledgerwatch/erigon/issues/2917",
  "repository_url": "https://api.github.com/repos/ledgerwatch/erigon",
  "labels_url": "https://api.github.com/repos/ledgerwatch/erigon/issues/2917/labels{/name}",
  "comments_url": "https://api.github.com/repos/ledgerwatch/erigon/issues/2917/comments",
  "events_url": "https://api.github.com/repos/ledgerwatch/erigon/issues/2917/events",
  "html_url": "https://github.com/ledgerwatch/erigon/issues/2917",
  "id": 1044928912,
  "node_id": "I_kwDOC0FsAM4-SFmQ",
  "number": 2917,
  "title": "Implement txpool_pendingTransactions (similar to parity_pendingTransactions)",
  "user": {
    "login": "AskAlexSharov",
    "id": 46885206,
    "node_id": "MDQ6VXNlcjQ2ODg1MjA2",
    "avatar_url": "https://avatars.githubusercontent.com/u/46885206?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/AskAlexSharov",
    "html_url": "https://github.com/AskAlexSharov",
    "followers_url": "https://api.github.com/users/AskAlexSharov/followers",
    "following_url": "https://api.github.com/users/AskAlexSharov/following{/other_user}",
    "gists_url": "https://api.github.com/users/AskAlexSharov/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/AskAlexSharov/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/AskAlexSharov/subscriptions",
    "organizations_url": "https://api.github.com/users/AskAlexSharov/orgs",
    "repos_url": "https://api.github.com/users/AskAlexSharov/repos",
    "events_url": "https://api.github.com/users/AskAlexSharov/events{/privacy}",
    "received_events_url": "https://api.github.com/users/AskAlexSharov/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1378917657,
      "node_id": "MDU6TGFiZWwxMzc4OTE3NjU3",
      "url": "https://api.github.com/repos/ledgerwatch/erigon/labels/help%20wanted",
      "name": "help wanted",
      "color": "008672",
      "default": true,
      "description": "Extra attention is needed"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 20,
  "created_at": "2021-11-04T16:04:21Z",
  "updated_at": "2023-02-09T04:21:23Z",
  "closed_at": null,
  "author_association": "COLLABORATOR",
  "active_lock_reason": null,
  "body": " https://openethereum.github.io/JSONRPC-parity-module#parity_pendingtransactions\r\n\r\nProbably will need to do in several PR's, add similar method to txpool's grpc interface. \r\nAlso our TxPool has 3 sub-pools: pending, baseFee, queued. (parity and geth have only pending and queued). This fact must reflect in api also. \r\n\r\nWe have txpool_content - but it doesn't have pagination (and we can't break compatibility here) - and if transfer 300K transactions in 1 message it's almost 1Gb. We need keep many limits (rpc and grpc) very hight because of this method. \r\n\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ledgerwatch/erigon/issues/2917/reactions",
    "total_count": 1,
    "+1": 1,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ledgerwatch/erigon/issues/2917/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ledgerwatch/erigon/issues/comments/962492652",
    "html_url": "https://github.com/ledgerwatch/erigon/issues/2917#issuecomment-962492652",
    "issue_url": "https://api.github.com/repos/ledgerwatch/erigon/issues/2917",
    "id": 962492652,
    "node_id": "IC_kwDOC0FsAM45Xnjs",
    "user": {
      "login": "shekhirin",
      "id": 5773434,
      "node_id": "MDQ6VXNlcjU3NzM0MzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5773434?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shekhirin",
      "html_url": "https://github.com/shekhirin",
      "followers_url": "https://api.github.com/users/shekhirin/followers",
      "following_url": "https://api.github.com/users/shekhirin/following{/other_user}",
      "gists_url": "https://api.github.com/users/shekhirin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shekhirin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shekhirin/subscriptions",
      "organizations_url": "https://api.github.com/users/shekhirin/orgs",
      "repos_url": "https://api.github.com/users/shekhirin/repos",
      "events_url": "https://api.github.com/users/shekhirin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shekhirin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-06T18:37:20Z",
    "updated_at": "2021-11-06T19:34:11Z",
    "author_association": "NONE",
    "body": "Hi! I'd like to work on this one and to start need to clarify one thing regarding OpenEtheruem's implementation. Currently `parity_pendingTransactions` doesn't have an ability to do proper pagination (only to provide `limit` parameter) and does have filtering through passing `filter` parameter. Do we need both of these things (pagination and filtering) on Erigon's side?\r\n\r\n\r\nAlso I think it might a bit confusing from user's perspective to have this method named `pendingTransactions` since it collides with `pending` sub-pool name but actually returns various types of transactions from the pool. Also it feels strange to me naming it `pending` because txpool already holds only pending (in terms of awaiting to be included in the block) transactions. What do you think about something generic like `txpool_transactions`?",
    "reactions": {
      "url": "https://api.github.com/repos/ledgerwatch/erigon/issues/comments/962492652/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ledgerwatch/erigon/issues/comments/962537989",
    "html_url": "https://github.com/ledgerwatch/erigon/issues/2917#issuecomment-962537989",
    "issue_url": "https://api.github.com/repos/ledgerwatch/erigon/issues/2917",
    "id": 962537989,
    "node_id": "IC_kwDOC0FsAM45XyoF",
    "user": {
      "login": "AskAlexSharov",
      "id": 46885206,
      "node_id": "MDQ6VXNlcjQ2ODg1MjA2",
      "avatar_url": "https://avatars.githubusercontent.com/u/46885206?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AskAlexSharov",
      "html_url": "https://github.com/AskAlexSharov",
      "followers_url": "https://api.github.com/users/AskAlexSharov/followers",
      "following_url": "https://api.github.com/users/AskAlexSharov/following{/other_user}",
      "gists_url": "https://api.github.com/users/AskAlexSharov/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AskAlexSharov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AskAlexSharov/subscriptions",
      "organizations_url": "https://api.github.com/users/AskAlexSharov/orgs",
      "repos_url": "https://api.github.com/users/AskAlexSharov/repos",
      "events_url": "https://api.github.com/users/AskAlexSharov/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AskAlexSharov/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-07T01:50:01Z",
    "updated_at": "2021-11-07T01:50:01Z",
    "author_association": "COLLABORATOR",
    "body": "1. We can start with some limited number of features. But having pagination and at least 1 filter parameter is essential. Because we already have txpool_content method which return all txs without pagination and without filters.\r\n2. \"method named pendingTransactions since it collides with pending sub-pool name but actually returns various types of transactions from the pool. \" - agree. We don't have to keep compatibility with OE in this method. It's fine to change it - name or request style.\r\n3. I advise you investigate existing best-practices (in the world) of gRpc pagination or filters implementation (likely we will have limited number of hard-coded in .proto file filters). For example: https://cloud.google.com/apis/design/design_patterns  -  and design this feature as gRpc-first API. And then add JSON RPC api \"somehow\" on top of \"good gRpc api\".\r\n4. Pool includes \"pending\" - which already ready to be included to Block - and couple other types of txs - which are not ready to be included to Block (for example user has not enough balance now, but it can change in near future. or txn has too high nonce - can't include it in Block - but maybe txs with lower nonce just didn't came to you from P2P network yet - but they may arrive in near future). Pool design: https://github.com/ledgerwatch/erigon/wiki/Transaction-Pool-Design , pool docs: https://github.com/ledgerwatch/erigon/tree/devel/cmd/txpool\r\n5. `txpool_transactions` or `txpool_search` - everything is fine with me.\r\n6. I just looked inside go-ethereum: they have new method `txpool_contentFrom` - single filter by sender -   https://github.com/ethereum/go-ethereum/blob/master/internal/ethapi/api.go#L179   - maybe as the first step we can just support this method. It already will cover 80% of use-cases. And this method can't return large response - because there is limit on how much txs from same sender can be in pool - AccountSlots=16. No reason for pagination there. Yes, as the first step - let's add txpool_contentFrom - and while we working on this method - think what user-friendly and grpc-friendly API we can provide to cover last 20% of use-cases. \r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ledgerwatch/erigon/issues/comments/962537989/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ledgerwatch/erigon/issues/comments/962596776",
    "html_url": "https://github.com/ledgerwatch/erigon/issues/2917#issuecomment-962596776",
    "issue_url": "https://api.github.com/repos/ledgerwatch/erigon/issues/2917",
    "id": 962596776,
    "node_id": "IC_kwDOC0FsAM45YA-o",
    "user": {
      "login": "shekhirin",
      "id": 5773434,
      "node_id": "MDQ6VXNlcjU3NzM0MzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5773434?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shekhirin",
      "html_url": "https://github.com/shekhirin",
      "followers_url": "https://api.github.com/users/shekhirin/followers",
      "following_url": "https://api.github.com/users/shekhirin/following{/other_user}",
      "gists_url": "https://api.github.com/users/shekhirin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shekhirin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shekhirin/subscriptions",
      "organizations_url": "https://api.github.com/users/shekhirin/orgs",
      "repos_url": "https://api.github.com/users/shekhirin/repos",
      "events_url": "https://api.github.com/users/shekhirin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shekhirin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-07T11:52:55Z",
    "updated_at": "2021-11-07T12:36:01Z",
    "author_association": "NONE",
    "body": "Sounds good. Pagination isn't trivial though: we have transactions stored in BTree that's sorted by `(sender, nonce)`, so it would be convenient to use it for pagination and set `next_page_token` (as recommended in [Google doc](https://cloud.google.com/apis/design/design_patterns#list_pagination)) to transaction id. However, it will break if some transaction got evicted from the pool or new transactions will be included in it before the `next_page_token` transaction id user tries to retrieve.\r\n\r\nRegarding `txpool_contentFrom`: seems like we won't need pagination for it, so something like \r\n```protobuf\r\nmessage SearchRequest {\r\n  message Filter {\r\n    optional Tx.Type type = 1;\r\n    optional bytes from = 2;\r\n  }\r\n  Filter filter = 1;\r\n}\r\nmessage SearchReply { repeated Tx txs = 1; }\r\n```\r\nto start with and extend with pagination and more filters later for `txpool_transactions` might work fine.",
    "reactions": {
      "url": "https://api.github.com/repos/ledgerwatch/erigon/issues/comments/962596776/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ledgerwatch/erigon/issues/comments/1156764229",
    "html_url": "https://github.com/ledgerwatch/erigon/issues/2917#issuecomment-1156764229",
    "issue_url": "https://api.github.com/repos/ledgerwatch/erigon/issues/2917",
    "id": 1156764229,
    "node_id": "IC_kwDOC0FsAM5E8tJF",
    "user": {
      "login": "mtgnoah",
      "id": 5161963,
      "node_id": "MDQ6VXNlcjUxNjE5NjM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5161963?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mtgnoah",
      "html_url": "https://github.com/mtgnoah",
      "followers_url": "https://api.github.com/users/mtgnoah/followers",
      "following_url": "https://api.github.com/users/mtgnoah/following{/other_user}",
      "gists_url": "https://api.github.com/users/mtgnoah/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mtgnoah/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mtgnoah/subscriptions",
      "organizations_url": "https://api.github.com/users/mtgnoah/orgs",
      "repos_url": "https://api.github.com/users/mtgnoah/repos",
      "events_url": "https://api.github.com/users/mtgnoah/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mtgnoah/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-15T17:51:26Z",
    "updated_at": "2022-06-15T17:51:26Z",
    "author_association": "NONE",
    "body": "Was this feature ever finished?",
    "reactions": {
      "url": "https://api.github.com/repos/ledgerwatch/erigon/issues/comments/1156764229/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ledgerwatch/erigon/issues/comments/1157148361",
    "html_url": "https://github.com/ledgerwatch/erigon/issues/2917#issuecomment-1157148361",
    "issue_url": "https://api.github.com/repos/ledgerwatch/erigon/issues/2917",
    "id": 1157148361,
    "node_id": "IC_kwDOC0FsAM5E-K7J",
    "user": {
      "login": "AskAlexSharov",
      "id": 46885206,
      "node_id": "MDQ6VXNlcjQ2ODg1MjA2",
      "avatar_url": "https://avatars.githubusercontent.com/u/46885206?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AskAlexSharov",
      "html_url": "https://github.com/AskAlexSharov",
      "followers_url": "https://api.github.com/users/AskAlexSharov/followers",
      "following_url": "https://api.github.com/users/AskAlexSharov/following{/other_user}",
      "gists_url": "https://api.github.com/users/AskAlexSharov/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AskAlexSharov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AskAlexSharov/subscriptions",
      "organizations_url": "https://api.github.com/users/AskAlexSharov/orgs",
      "repos_url": "https://api.github.com/users/AskAlexSharov/repos",
      "events_url": "https://api.github.com/users/AskAlexSharov/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AskAlexSharov/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-16T02:00:54Z",
    "updated_at": "2022-06-16T02:00:54Z",
    "author_association": "COLLABORATOR",
    "body": "@mtgnoah no, last PR was abandoned ",
    "reactions": {
      "url": "https://api.github.com/repos/ledgerwatch/erigon/issues/comments/1157148361/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ledgerwatch/erigon/issues/comments/1373902633",
    "html_url": "https://github.com/ledgerwatch/erigon/issues/2917#issuecomment-1373902633",
    "issue_url": "https://api.github.com/repos/ledgerwatch/erigon/issues/2917",
    "id": 1373902633,
    "node_id": "IC_kwDOC0FsAM5R5Bcp",
    "user": {
      "login": "SozinM",
      "id": 38132534,
      "node_id": "MDQ6VXNlcjM4MTMyNTM0",
      "avatar_url": "https://avatars.githubusercontent.com/u/38132534?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SozinM",
      "html_url": "https://github.com/SozinM",
      "followers_url": "https://api.github.com/users/SozinM/followers",
      "following_url": "https://api.github.com/users/SozinM/following{/other_user}",
      "gists_url": "https://api.github.com/users/SozinM/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SozinM/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SozinM/subscriptions",
      "organizations_url": "https://api.github.com/users/SozinM/orgs",
      "repos_url": "https://api.github.com/users/SozinM/repos",
      "events_url": "https://api.github.com/users/SozinM/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SozinM/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-06T17:06:51Z",
    "updated_at": "2023-01-06T17:06:51Z",
    "author_association": "NONE",
    "body": "Hi!\r\nI want to take a shoot on this issue.\r\nI've already implemented the search function with a \"from\" filter.\r\nRight now I want to peach my idea of pagination architecture and get some feedback:\r\nThere are 2 big classes Offset Based vs Cursor Based.\r\nOffset based are won't be good if we work with dynamic data so I lean toward Cursor based.\r\n\r\nMy proposal is to return a page token representing (address, nonce) of the last transaction we returned. \r\nThis token should be encrypted/signed base64 encoded (address, nonce) or it should be key (uuid) to a map with (address, nonce) (and maybe a filter).\r\n\r\nIt's better to keep only a one-way cursor to simplify the implementation and as we want only to return data in chunks it would be excessive to have a two-way routing.\r\n\r\nThere are 2 ways to provide a filter: \r\n1. With each request. That will require us to validate that filter corresponds with provided page token\r\n2. With initial request. We will keep the filter in some map and follow-up requests would only contain page_token that will be used to retrieve filter data. (I prefer this approach) \r\n\r\nAlso crucial to note: After the request has started all data changes behind the cursor would be lost for this request and all data changed after the cursor would be included in the request.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ledgerwatch/erigon/issues/comments/1373902633/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ledgerwatch/erigon/issues/comments/1374359919",
    "html_url": "https://github.com/ledgerwatch/erigon/issues/2917#issuecomment-1374359919",
    "issue_url": "https://api.github.com/repos/ledgerwatch/erigon/issues/2917",
    "id": 1374359919,
    "node_id": "IC_kwDOC0FsAM5R6xFv",
    "user": {
      "login": "AskAlexSharov",
      "id": 46885206,
      "node_id": "MDQ6VXNlcjQ2ODg1MjA2",
      "avatar_url": "https://avatars.githubusercontent.com/u/46885206?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AskAlexSharov",
      "html_url": "https://github.com/AskAlexSharov",
      "followers_url": "https://api.github.com/users/AskAlexSharov/followers",
      "following_url": "https://api.github.com/users/AskAlexSharov/following{/other_user}",
      "gists_url": "https://api.github.com/users/AskAlexSharov/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AskAlexSharov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AskAlexSharov/subscriptions",
      "organizations_url": "https://api.github.com/users/AskAlexSharov/orgs",
      "repos_url": "https://api.github.com/users/AskAlexSharov/repos",
      "events_url": "https://api.github.com/users/AskAlexSharov/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AskAlexSharov/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-07T02:58:59Z",
    "updated_at": "2023-01-07T02:58:59Z",
    "author_association": "COLLABORATOR",
    "body": "@SozinM thank you.\r\nI don't understand “final note”. Do you mean: data inside txpool may change between requests and it's fine, we ignore it and user may see same tx on different pages - because it’s position changed inside txpool between requests. ? \r\n\r\nmy thinking: \r\n1. There is hard limit on amount of txs per sender: 16. Not so big. No much reason to paginate within 1 sender. So, no reason to accept “nonce” in request. \r\n2. what is bad with Parity’s interface? What cons do you see? \r\n3. TxPool main feature: do complex sort of txs - so, miner can get top N txs and be sure that miner’s income is maximized. TxPool has take in account tons of parameters: “is there gap in sender’s nonces?”, “does sender has enough balance for all trx?”, ... And my main concern is: API return txs in some other order - by address, by nonce. Why? Why we drop main feature of TxPool? \r\n4. TxPool now using senderID everywhere (instead of address) it’s fine, we can just use sorted-map for addr=>id mapping: https://github.com/ledgerwatch/erigon-lib/blob/d2f5682ee80aba9ff3e151e0dc25a53c0c65e691/txpool/pool.go#L275\r\n5. If use token-based filter - we will use sha256 to prevent other users guess/still your token. \r\n6. let’s formulate: what user’s use-case we trying to serve by this API? @SozinM share your use-case plz. \r\n7. more on use-cases. TxPool has 3 sub-pools and one of users use-case is “Why my tx is not in Pending sub-pool?” “How can I fix it?”\r\n8. if user not provide “sender” in request - then TxPool will need do full-scan over 100K txs. Unclear what secondary index may be useful here - 6 filter fields in parity. \r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ledgerwatch/erigon/issues/comments/1374359919/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ledgerwatch/erigon/issues/comments/1374414706",
    "html_url": "https://github.com/ledgerwatch/erigon/issues/2917#issuecomment-1374414706",
    "issue_url": "https://api.github.com/repos/ledgerwatch/erigon/issues/2917",
    "id": 1374414706,
    "node_id": "IC_kwDOC0FsAM5R6-dy",
    "user": {
      "login": "SozinM",
      "id": 38132534,
      "node_id": "MDQ6VXNlcjM4MTMyNTM0",
      "avatar_url": "https://avatars.githubusercontent.com/u/38132534?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SozinM",
      "html_url": "https://github.com/SozinM",
      "followers_url": "https://api.github.com/users/SozinM/followers",
      "following_url": "https://api.github.com/users/SozinM/following{/other_user}",
      "gists_url": "https://api.github.com/users/SozinM/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SozinM/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SozinM/subscriptions",
      "organizations_url": "https://api.github.com/users/SozinM/orgs",
      "repos_url": "https://api.github.com/users/SozinM/repos",
      "events_url": "https://api.github.com/users/SozinM/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SozinM/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-07T08:25:03Z",
    "updated_at": "2023-01-07T08:25:35Z",
    "author_association": "NONE",
    "body": "I think you get me a bit wrong here. I plan to implement the rest of the Parlia filters and all I wanted is to validate my design of the pagination.\r\n\r\n> I don't understand “final note”. Do you mean: data inside txpool may change between requests and it's fine, we ignore it and user may see same tx on different pages - because it’s position changed inside txpool between requests. ?\r\n\r\nThere would be no pages, only cursor. \r\nIf we return the first 100 transactions that fit the filter and the user added more transactions that we placed in txpool behind the current cursor - the user will not see these transactions in this request context. User need to start a new request in order to see these newly added transactions.\r\n\r\n1. Yes, but I will add an additional filter, and thus I will need pagination. It also would be implemented for the \"from\" filter just for the code to be unified.\r\n2. Don't see any as of right now, plan to implement it for this call fully.\r\n3. Are you propose to make a return order based on the filter? Because as I get from txpool doc - all transactions in the txpool (as of right now) are sorted by (address, nonce) and I was not planning to change the order in any specific manner in this function. only apply the filter and return in the order they are in txpool (specifically in txPool.deprecatedForEach function).\r\n4. I could use senderId instead of an address, no problem here.\r\n5. It's not to prevent from seeing, but to prevent tampering with as required in https://cloud.google.com/apis/design/design_patterns\r\n6. One of the use cases I could imagine - find transactions greater that some value - for MEV searchers. \r\n7. Didn't quite get your point here.\r\n8. For \"nonce\" and \"from\" fields we could use BTree structure BySenderAndNonce in txpool. I don't see any efficient structure to use with other fields right now. We could try to calculate the pool tx would be in based on gas filters and the current baseFee value (Or at least I think we can).",
    "reactions": {
      "url": "https://api.github.com/repos/ledgerwatch/erigon/issues/comments/1374414706/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ledgerwatch/erigon/issues/comments/1374452703",
    "html_url": "https://github.com/ledgerwatch/erigon/issues/2917#issuecomment-1374452703",
    "issue_url": "https://api.github.com/repos/ledgerwatch/erigon/issues/2917",
    "id": 1374452703,
    "node_id": "IC_kwDOC0FsAM5R7Hvf",
    "user": {
      "login": "elee1766",
      "id": 2260857,
      "node_id": "MDQ6VXNlcjIyNjA4NTc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2260857?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/elee1766",
      "html_url": "https://github.com/elee1766",
      "followers_url": "https://api.github.com/users/elee1766/followers",
      "following_url": "https://api.github.com/users/elee1766/following{/other_user}",
      "gists_url": "https://api.github.com/users/elee1766/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/elee1766/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/elee1766/subscriptions",
      "organizations_url": "https://api.github.com/users/elee1766/orgs",
      "repos_url": "https://api.github.com/users/elee1766/repos",
      "events_url": "https://api.github.com/users/elee1766/events{/privacy}",
      "received_events_url": "https://api.github.com/users/elee1766/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-07T11:44:34Z",
    "updated_at": "2023-01-07T11:46:35Z",
    "author_association": "COLLABORATOR",
    "body": "### tl;dr:\r\n\r\npersonally, i'm having trouble seeing why someone would want a paginated filtered subset of the txnpool. To me if someone is doing bulk retreival from the txpool, they probably want it all (no filter), and if they aren't, they probably don't need more than some sane amount of entries (otterscan)\r\n\r\nIn my opinion, the most useful pagination method would be to be able to paginate by offset in order of entry. This would make the task of keeping track of txns from an external application very easy - which i think should be the goal of erigon. \r\n\r\nwhy: because sophisticated MEV players will have their own filters and search methods - so the priority should be an easy way extract the data, rather than provide an interface they wont use. let them build their own complicated index - i dont think that is erigons job\r\n\r\n\r\n\r\n### thought process\r\n\r\nI see the following as possible use cases for such a method, in order of importance. If i am missing anything let me know\r\n\r\n1. Scanning for possible replay attacks or front-running opportunities (mev)\r\n2. Getting the most profitable txns + miner bribe (block building)\r\n3. Indexing the entire mempool (network statistics)\r\n\r\nnow walking through through of these use cases individually \r\n\r\n#### mev\r\n\r\nSophisticated player worth their salt will keep own index of all pending txns, keeping a local database\r\n\r\none is going to \"backfill\" their database and then subscribe to notifications for pending transactions, and also probably poll just in case.\r\n\r\nin the event that they lose their socket connection, they would want to be able to \"catch up\" by asking \"what transactions have been broadcast in the last <x minutes>. This is because one can use that result set to check \"have i received these transactions before?\" and if they have not, to increase their interval.\r\n\r\n#### block building\r\n\r\nI have not built a block since homestead , so forgive me if my information is outdated. \r\n\r\nafaik, builders care either about the highest gas price they can fit into their block, and then include extra transactions based off orders from flashbots or whatever bribe network they use. \r\n\r\n#### network statistics\r\n\r\ntracking the mempool state, like etherscan does. In this case, missing a few pending transcations likely isn't a big deal. In reality this is very similar to the mev use case - except missing txns is fine, so one can probably just backfill+subscribe, not worry about reconnet. On the other hand, something like otterscan could possibly want to be able to display \"pending txns\" for a specific address. - perhaps search is useful there\r\n\r\n\r\n#### also \r\n\r\nThe RPCDaemon already supports the ability to subscribe to pending transactions https://github.com/ledgerwatch/erigon/blob/devel/turbo/rpchelper/filters.go#L37 \r\n\r\nThese are stateful and record all the transactions since you last polled the filter. I'm not a big fan of making stateful endpoints, but thought i would mention that this exists as an option to consider",
    "reactions": {
      "url": "https://api.github.com/repos/ledgerwatch/erigon/issues/comments/1374452703/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ledgerwatch/erigon/issues/comments/1374459999",
    "html_url": "https://github.com/ledgerwatch/erigon/issues/2917#issuecomment-1374459999",
    "issue_url": "https://api.github.com/repos/ledgerwatch/erigon/issues/2917",
    "id": 1374459999,
    "node_id": "IC_kwDOC0FsAM5R7Jhf",
    "user": {
      "login": "AskAlexSharov",
      "id": 46885206,
      "node_id": "MDQ6VXNlcjQ2ODg1MjA2",
      "avatar_url": "https://avatars.githubusercontent.com/u/46885206?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AskAlexSharov",
      "html_url": "https://github.com/AskAlexSharov",
      "followers_url": "https://api.github.com/users/AskAlexSharov/followers",
      "following_url": "https://api.github.com/users/AskAlexSharov/following{/other_user}",
      "gists_url": "https://api.github.com/users/AskAlexSharov/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AskAlexSharov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AskAlexSharov/subscriptions",
      "organizations_url": "https://api.github.com/users/AskAlexSharov/orgs",
      "repos_url": "https://api.github.com/users/AskAlexSharov/repos",
      "events_url": "https://api.github.com/users/AskAlexSharov/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AskAlexSharov/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-07T12:09:47Z",
    "updated_at": "2023-01-07T12:09:47Z",
    "author_association": "COLLABORATOR",
    "body": "FYI: txpool has GRPC interface: https://github.com/ledgerwatch/interfaces/blob/master/txpool/txpool.proto ",
    "reactions": {
      "url": "https://api.github.com/repos/ledgerwatch/erigon/issues/comments/1374459999/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ledgerwatch/erigon/issues/comments/1374460677",
    "html_url": "https://github.com/ledgerwatch/erigon/issues/2917#issuecomment-1374460677",
    "issue_url": "https://api.github.com/repos/ledgerwatch/erigon/issues/2917",
    "id": 1374460677,
    "node_id": "IC_kwDOC0FsAM5R7JsF",
    "user": {
      "login": "AskAlexSharov",
      "id": 46885206,
      "node_id": "MDQ6VXNlcjQ2ODg1MjA2",
      "avatar_url": "https://avatars.githubusercontent.com/u/46885206?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AskAlexSharov",
      "html_url": "https://github.com/AskAlexSharov",
      "followers_url": "https://api.github.com/users/AskAlexSharov/followers",
      "following_url": "https://api.github.com/users/AskAlexSharov/following{/other_user}",
      "gists_url": "https://api.github.com/users/AskAlexSharov/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AskAlexSharov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AskAlexSharov/subscriptions",
      "organizations_url": "https://api.github.com/users/AskAlexSharov/orgs",
      "repos_url": "https://api.github.com/users/AskAlexSharov/repos",
      "events_url": "https://api.github.com/users/AskAlexSharov/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AskAlexSharov/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-07T12:12:17Z",
    "updated_at": "2023-01-07T12:12:17Z",
    "author_association": "COLLABORATOR",
    "body": "7. TxPool has 3 sub-pools: https://github.com/ledgerwatch/erigon/wiki/Transaction-Pool-Design\r\nOnly txs from “pending” sub-pool are ready for mining. \r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ledgerwatch/erigon/issues/comments/1374460677/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ledgerwatch/erigon/issues/comments/1374469243",
    "html_url": "https://github.com/ledgerwatch/erigon/issues/2917#issuecomment-1374469243",
    "issue_url": "https://api.github.com/repos/ledgerwatch/erigon/issues/2917",
    "id": 1374469243,
    "node_id": "IC_kwDOC0FsAM5R7Lx7",
    "user": {
      "login": "elee1766",
      "id": 2260857,
      "node_id": "MDQ6VXNlcjIyNjA4NTc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2260857?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/elee1766",
      "html_url": "https://github.com/elee1766",
      "followers_url": "https://api.github.com/users/elee1766/followers",
      "following_url": "https://api.github.com/users/elee1766/following{/other_user}",
      "gists_url": "https://api.github.com/users/elee1766/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/elee1766/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/elee1766/subscriptions",
      "organizations_url": "https://api.github.com/users/elee1766/orgs",
      "repos_url": "https://api.github.com/users/elee1766/repos",
      "events_url": "https://api.github.com/users/elee1766/events{/privacy}",
      "received_events_url": "https://api.github.com/users/elee1766/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-07T12:44:48Z",
    "updated_at": "2023-01-07T12:44:48Z",
    "author_association": "COLLABORATOR",
    "body": "> FYI: txpool has GRPC interface: https://github.com/ledgerwatch/interfaces/blob/master/txpool/txpool.proto \n\nyeah, I think the grpc interface should be pushed to those looking to do large scale txpool work\n\npossibly, people are scared because grpc is r/w. \n\nis it easy to subset grpc endpoints into ro/rw methods? expose ro endpoint, might be very useful",
    "reactions": {
      "url": "https://api.github.com/repos/ledgerwatch/erigon/issues/comments/1374469243/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ledgerwatch/erigon/issues/comments/1374469521",
    "html_url": "https://github.com/ledgerwatch/erigon/issues/2917#issuecomment-1374469521",
    "issue_url": "https://api.github.com/repos/ledgerwatch/erigon/issues/2917",
    "id": 1374469521,
    "node_id": "IC_kwDOC0FsAM5R7L2R",
    "user": {
      "login": "SozinM",
      "id": 38132534,
      "node_id": "MDQ6VXNlcjM4MTMyNTM0",
      "avatar_url": "https://avatars.githubusercontent.com/u/38132534?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SozinM",
      "html_url": "https://github.com/SozinM",
      "followers_url": "https://api.github.com/users/SozinM/followers",
      "following_url": "https://api.github.com/users/SozinM/following{/other_user}",
      "gists_url": "https://api.github.com/users/SozinM/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SozinM/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SozinM/subscriptions",
      "organizations_url": "https://api.github.com/users/SozinM/orgs",
      "repos_url": "https://api.github.com/users/SozinM/repos",
      "events_url": "https://api.github.com/users/SozinM/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SozinM/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-07T12:45:48Z",
    "updated_at": "2023-01-07T12:45:48Z",
    "author_association": "NONE",
    "body": "Another use case I see from an infra-provider point of view:\r\nThe current implementation of txpool_content is very unfriendly with reverse proxies because we need to crank up limits of max_body_size, and timeout limits. It would be great to have an alternative to this call that would fit in default limits (for example default Nginx limits).\r\nAlso, it's crucial to have filters so our clients do not abuse our egress and get only the data they need.",
    "reactions": {
      "url": "https://api.github.com/repos/ledgerwatch/erigon/issues/comments/1374469521/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ledgerwatch/erigon/issues/comments/1374490129",
    "html_url": "https://github.com/ledgerwatch/erigon/issues/2917#issuecomment-1374490129",
    "issue_url": "https://api.github.com/repos/ledgerwatch/erigon/issues/2917",
    "id": 1374490129,
    "node_id": "IC_kwDOC0FsAM5R7Q4R",
    "user": {
      "login": "elee1766",
      "id": 2260857,
      "node_id": "MDQ6VXNlcjIyNjA4NTc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2260857?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/elee1766",
      "html_url": "https://github.com/elee1766",
      "followers_url": "https://api.github.com/users/elee1766/followers",
      "following_url": "https://api.github.com/users/elee1766/following{/other_user}",
      "gists_url": "https://api.github.com/users/elee1766/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/elee1766/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/elee1766/subscriptions",
      "organizations_url": "https://api.github.com/users/elee1766/orgs",
      "repos_url": "https://api.github.com/users/elee1766/repos",
      "events_url": "https://api.github.com/users/elee1766/events{/privacy}",
      "received_events_url": "https://api.github.com/users/elee1766/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-07T13:57:04Z",
    "updated_at": "2023-01-07T13:57:37Z",
    "author_association": "COLLABORATOR",
    "body": "> Another use case I see from an infra-provider point of view: The current implementation of txpool_content is very unfriendly with reverse proxies because we need to crank up limits of max_body_size, and timeout limits. It would be great to have an alternative to this call that would fit in default limits (for example default Nginx limits). Also, it's crucial to have filters so our clients do not abuse our egress and get only the data they need.\r\n\r\nnot sure i agree here. \r\n\r\nwhy does the customer want this service in the first place? if customers are simply using txpool_content to create their own local databases, perhaps the service should be providing compressed txpool dump for this use case. \r\n\r\nif a service provider wants to give its users a new method to view txns - i think that should be implemented at the service provider level. Needing to support some specific endpoint for service providers seems like a nightmare that is out of scope for erigon (what happens when need to remove the method to accommodate a major architecture change?)\r\n\r\nalso, i think it is up to the service provider to sanitize input to their nodes such that customers do not abuse their egress. I think  \"allowing service providers to blindly forward requests through nginx\" is something erigon should not encourage.\r\n\r\neven small infra services should be at the very least validating the jsonrpc requests themselves before forwarding to erigon, and ultimately we should be using a combination of the grpc and json-rpc to fully leverage available performance.   ",
    "reactions": {
      "url": "https://api.github.com/repos/ledgerwatch/erigon/issues/comments/1374490129/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ledgerwatch/erigon/issues/comments/1374531967",
    "html_url": "https://github.com/ledgerwatch/erigon/issues/2917#issuecomment-1374531967",
    "issue_url": "https://api.github.com/repos/ledgerwatch/erigon/issues/2917",
    "id": 1374531967,
    "node_id": "IC_kwDOC0FsAM5R7bF_",
    "user": {
      "login": "AskAlexSharov",
      "id": 46885206,
      "node_id": "MDQ6VXNlcjQ2ODg1MjA2",
      "avatar_url": "https://avatars.githubusercontent.com/u/46885206?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AskAlexSharov",
      "html_url": "https://github.com/AskAlexSharov",
      "followers_url": "https://api.github.com/users/AskAlexSharov/followers",
      "following_url": "https://api.github.com/users/AskAlexSharov/following{/other_user}",
      "gists_url": "https://api.github.com/users/AskAlexSharov/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AskAlexSharov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AskAlexSharov/subscriptions",
      "organizations_url": "https://api.github.com/users/AskAlexSharov/orgs",
      "repos_url": "https://api.github.com/users/AskAlexSharov/repos",
      "events_url": "https://api.github.com/users/AskAlexSharov/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AskAlexSharov/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-07T16:23:58Z",
    "updated_at": "2023-01-07T16:23:58Z",
    "author_association": "COLLABORATOR",
    "body": "> > FYI: txpool has GRPC interface: https://github.com/ledgerwatch/interfaces/blob/master/txpool/txpool.proto\r\n> \r\n> yeah, I think the grpc interface should be pushed to those looking to do large scale txpool work\r\n> \r\n> possibly, people are scared because grpc is r/w.\r\n> \r\n> is it easy to subset grpc endpoints into ro/rw methods? expose ro endpoint, might be very useful\r\n\r\nAll doable. But we never had this as a goal. Maybe need consider",
    "reactions": {
      "url": "https://api.github.com/repos/ledgerwatch/erigon/issues/comments/1374531967/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ledgerwatch/erigon/issues/comments/1382178140",
    "html_url": "https://github.com/ledgerwatch/erigon/issues/2917#issuecomment-1382178140",
    "issue_url": "https://api.github.com/repos/ledgerwatch/erigon/issues/2917",
    "id": 1382178140,
    "node_id": "IC_kwDOC0FsAM5SYl1c",
    "user": {
      "login": "SozinM",
      "id": 38132534,
      "node_id": "MDQ6VXNlcjM4MTMyNTM0",
      "avatar_url": "https://avatars.githubusercontent.com/u/38132534?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SozinM",
      "html_url": "https://github.com/SozinM",
      "followers_url": "https://api.github.com/users/SozinM/followers",
      "following_url": "https://api.github.com/users/SozinM/following{/other_user}",
      "gists_url": "https://api.github.com/users/SozinM/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SozinM/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SozinM/subscriptions",
      "organizations_url": "https://api.github.com/users/SozinM/orgs",
      "repos_url": "https://api.github.com/users/SozinM/repos",
      "events_url": "https://api.github.com/users/SozinM/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SozinM/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-13T17:37:06Z",
    "updated_at": "2023-01-17T07:12:07Z",
    "author_association": "NONE",
    "body": "@elee1766 \r\n> if a service provider wants to give its users a new method to view txns - i think that should be implemented at the service provider level.\r\n\r\nIt was not my point. My understanding is that providing more flexible ways to access data will improve erigon adoption.\r\nAbout the method, I think it makes sense to implement txpool_contentFrom with the param \"from\" and without pagination.\r\n2 use cases were highlighted in the comments:\r\n1. Analysing of problems with txns. But it's limited to checking which sub pool your transactions are going to.\r\n2. Using this method in the otterscan to show the transactions of the address.\r\n\r\nAlso, I see here a beneficial point that it will bring in the method implemented in ethereum and could help in onboarding for those who are switching from geth client and are using this txpool method.  ",
    "reactions": {
      "url": "https://api.github.com/repos/ledgerwatch/erigon/issues/comments/1382178140/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ledgerwatch/erigon/issues/comments/1382586168",
    "html_url": "https://github.com/ledgerwatch/erigon/issues/2917#issuecomment-1382586168",
    "issue_url": "https://api.github.com/repos/ledgerwatch/erigon/issues/2917",
    "id": 1382586168,
    "node_id": "IC_kwDOC0FsAM5SaJc4",
    "user": {
      "login": "elee1766",
      "id": 2260857,
      "node_id": "MDQ6VXNlcjIyNjA4NTc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2260857?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/elee1766",
      "html_url": "https://github.com/elee1766",
      "followers_url": "https://api.github.com/users/elee1766/followers",
      "following_url": "https://api.github.com/users/elee1766/following{/other_user}",
      "gists_url": "https://api.github.com/users/elee1766/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/elee1766/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/elee1766/subscriptions",
      "organizations_url": "https://api.github.com/users/elee1766/orgs",
      "repos_url": "https://api.github.com/users/elee1766/repos",
      "events_url": "https://api.github.com/users/elee1766/events{/privacy}",
      "received_events_url": "https://api.github.com/users/elee1766/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-13T23:38:11Z",
    "updated_at": "2023-01-13T23:38:11Z",
    "author_association": "COLLABORATOR",
    "body": "> t was not my point. My understanding is that providing more flexible ways to access data will improve erigon adoption.\r\n> About the method, I think it makes sense to implement txpool_contentFrom with the param \"from\" and without pagination.\r\n\r\ni see what you mean now - misunderstood. that makes sense to me. ",
    "reactions": {
      "url": "https://api.github.com/repos/ledgerwatch/erigon/issues/comments/1382586168/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ledgerwatch/erigon/issues/comments/1384921257",
    "html_url": "https://github.com/ledgerwatch/erigon/issues/2917#issuecomment-1384921257",
    "issue_url": "https://api.github.com/repos/ledgerwatch/erigon/issues/2917",
    "id": 1384921257,
    "node_id": "IC_kwDOC0FsAM5SjDip",
    "user": {
      "login": "SozinM",
      "id": 38132534,
      "node_id": "MDQ6VXNlcjM4MTMyNTM0",
      "avatar_url": "https://avatars.githubusercontent.com/u/38132534?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SozinM",
      "html_url": "https://github.com/SozinM",
      "followers_url": "https://api.github.com/users/SozinM/followers",
      "following_url": "https://api.github.com/users/SozinM/following{/other_user}",
      "gists_url": "https://api.github.com/users/SozinM/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SozinM/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SozinM/subscriptions",
      "organizations_url": "https://api.github.com/users/SozinM/orgs",
      "repos_url": "https://api.github.com/users/SozinM/repos",
      "events_url": "https://api.github.com/users/SozinM/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SozinM/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-17T07:05:02Z",
    "updated_at": "2023-01-17T07:05:02Z",
    "author_association": "NONE",
    "body": "@AskAlexSharov WDYT about this? ",
    "reactions": {
      "url": "https://api.github.com/repos/ledgerwatch/erigon/issues/comments/1384921257/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ledgerwatch/erigon/issues/comments/1385239079",
    "html_url": "https://github.com/ledgerwatch/erigon/issues/2917#issuecomment-1385239079",
    "issue_url": "https://api.github.com/repos/ledgerwatch/erigon/issues/2917",
    "id": 1385239079,
    "node_id": "IC_kwDOC0FsAM5SkRIn",
    "user": {
      "login": "AskAlexSharov",
      "id": 46885206,
      "node_id": "MDQ6VXNlcjQ2ODg1MjA2",
      "avatar_url": "https://avatars.githubusercontent.com/u/46885206?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AskAlexSharov",
      "html_url": "https://github.com/AskAlexSharov",
      "followers_url": "https://api.github.com/users/AskAlexSharov/followers",
      "following_url": "https://api.github.com/users/AskAlexSharov/following{/other_user}",
      "gists_url": "https://api.github.com/users/AskAlexSharov/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AskAlexSharov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AskAlexSharov/subscriptions",
      "organizations_url": "https://api.github.com/users/AskAlexSharov/orgs",
      "repos_url": "https://api.github.com/users/AskAlexSharov/repos",
      "events_url": "https://api.github.com/users/AskAlexSharov/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AskAlexSharov/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-17T10:57:15Z",
    "updated_at": "2023-01-17T10:57:15Z",
    "author_association": "COLLABORATOR",
    "body": "My opinion: let's do something (at least start work on it) what can be used by Otterscan to overkill Etherscan in UI. Simple `txpool_contentFrom` is clearly not enough. [parity_pendingtransactions](https://openethereum.github.io/JSONRPC-parity-module#parity_pendingtransactions) is not enough (no order, etc...) but it's clearly way more extensible (can add new filters, orders in future without breaking computability).\r\n\r\n\r\nTechnical details:\r\n1. If for some filters we have no index now - it's ok to manully-filter on server-side, even if it's low-performance.   \r\n2. It's ok to implement some subset in 1 PR. It's ok to create many preparing PR's. I will try to merge fast. \r\n3. About \"why my Tx is not in Pending sub-pool\" - probably it must be another API call which will return deep info about given tx (parity_pendingTransactionsStats ?). But return now at least 1 column like \"current sub-pool\" of enum: Pending|Queued|BaseFee probably must-have. So, I think that internal API must return all txs (not only pending) and be usual filter.\r\n3. GRPC API can return RLP-encoded txn(in same format as we send them to network and store in txpool's db). All additional fields can be hardcoded in txpool.proto \r\n5. I recently implemented something similar, but simpler: `Range(Table, fromPrefix, toPrefix, orderAscend, limit)`\r\n- Methods are here: `kv/kv_interface.go:Range` https://github.com/ledgerwatch/erigon-lib/blob/main/kv/kv_interface.go#L319\r\n- This methods return kv.Stream (it's Iterator pattern. such Iterators more composable, can have several of them in same time, can merge them, etc... Also I using them to abstract fact that some data is in \"snapshots\" and some data is in \"chaindata db\"): `kv/kv_interface.go:Stream` https://github.com/ledgerwatch/erigon-lib/blob/fc3dd4fd27895b1448086b5f7f7755e694e55291/kv/kv_interface.go#L460 \r\n- And in GRPC it looks as server-side stream with 1 request from client: https://github.com/ledgerwatch/interfaces/blob/master/remote/kv.proto#L198\r\n- I understand that UI always requesting something Limited and GrpcStream seems over-kill here, but such Grpc API can be used not only for UI in future. Also now TxPool has \"1 global lock\" and periodically release it - is good idea \"lock, collect N rows, release lock, send to client, lock, ...\". \r\n- Example of conversion GRPC-Stream to `kv.Stream`: `erigon-lib/kv/remotedb/kv_remote.go:rangeOrderLimit` https://github.com/ledgerwatch/erigon-lib/blob/main/kv/remotedb/kv_remote.go#LL635C21-L635C36 \r\n- If you can follow some of this practices - would be nice, but not a requirement. If you see how to improve my things, you are welcome.  \r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ledgerwatch/erigon/issues/comments/1385239079/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ledgerwatch/erigon/issues/comments/1396420808",
    "html_url": "https://github.com/ledgerwatch/erigon/issues/2917#issuecomment-1396420808",
    "issue_url": "https://api.github.com/repos/ledgerwatch/erigon/issues/2917",
    "id": 1396420808,
    "node_id": "IC_kwDOC0FsAM5TO7DI",
    "user": {
      "login": "AskAlexSharov",
      "id": 46885206,
      "node_id": "MDQ6VXNlcjQ2ODg1MjA2",
      "avatar_url": "https://avatars.githubusercontent.com/u/46885206?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AskAlexSharov",
      "html_url": "https://github.com/AskAlexSharov",
      "followers_url": "https://api.github.com/users/AskAlexSharov/followers",
      "following_url": "https://api.github.com/users/AskAlexSharov/following{/other_user}",
      "gists_url": "https://api.github.com/users/AskAlexSharov/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AskAlexSharov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AskAlexSharov/subscriptions",
      "organizations_url": "https://api.github.com/users/AskAlexSharov/orgs",
      "repos_url": "https://api.github.com/users/AskAlexSharov/repos",
      "events_url": "https://api.github.com/users/AskAlexSharov/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AskAlexSharov/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-19T04:20:15Z",
    "updated_at": "2023-01-19T04:20:15Z",
    "author_association": "COLLABORATOR",
    "body": "@SozinM FYI: here is some example implementation of similar filers in .proto: `FilterTree` https://github.com/dgraph-io/dgraph/blob/main/protos/pb.proto#L67",
    "reactions": {
      "url": "https://api.github.com/repos/ledgerwatch/erigon/issues/comments/1396420808/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
