{
  "url": "https://api.github.com/repos/ledgerwatch/erigon/issues/7381",
  "repository_url": "https://api.github.com/repos/ledgerwatch/erigon",
  "labels_url": "https://api.github.com/repos/ledgerwatch/erigon/issues/7381/labels{/name}",
  "comments_url": "https://api.github.com/repos/ledgerwatch/erigon/issues/7381/comments",
  "events_url": "https://api.github.com/repos/ledgerwatch/erigon/issues/7381/events",
  "html_url": "https://github.com/ledgerwatch/erigon/issues/7381",
  "id": 1683162779,
  "node_id": "I_kwDOC0FsAM5kUwab",
  "number": 7381,
  "title": "Integration panic on DB copy - MDBX_MAP_FULL: Environment mapsize limit reached",
  "user": {
    "login": "crypto7world",
    "id": 97796429,
    "node_id": "U_kgDOBdRBTQ",
    "avatar_url": "https://avatars.githubusercontent.com/u/97796429?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/crypto7world",
    "html_url": "https://github.com/crypto7world",
    "followers_url": "https://api.github.com/users/crypto7world/followers",
    "following_url": "https://api.github.com/users/crypto7world/following{/other_user}",
    "gists_url": "https://api.github.com/users/crypto7world/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/crypto7world/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/crypto7world/subscriptions",
    "organizations_url": "https://api.github.com/users/crypto7world/orgs",
    "repos_url": "https://api.github.com/users/crypto7world/repos",
    "events_url": "https://api.github.com/users/crypto7world/events{/privacy}",
    "received_events_url": "https://api.github.com/users/crypto7world/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 4566396003,
      "node_id": "LA_kwDOC0FsAM8AAAABEC2sYw",
      "url": "https://api.github.com/repos/ledgerwatch/erigon/labels/Stale",
      "name": "Stale",
      "color": "ededed",
      "default": false,
      "description": null
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 7,
  "created_at": "2023-04-25T13:19:06Z",
  "updated_at": "2023-06-14T02:32:05Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "#### System information\r\n\r\nErigon version: `./erigon --version`\r\nerigon version 2.43.0-stable-1106475e\r\n\r\nOS & Version: Windows/Linux/OSX\r\nLinux - AmazonLinux2 - Kernel v5.10 - AARCH64\r\n\r\nIntegration Command (with flags/config):\r\n`integration mdbx_to_mdbx --chaindata /mnt/data/erigon2/chaindata/ --chaindata.to /mnt/backup/erigon2/chaindata --datadir /dev/shm/erigon-backup`\r\n\r\nChain/Network: \r\nGoerli\r\n\r\n#### Expected behaviour\r\nThis exact command used to perform a compacted backup of chaindata and was still working in December 2022.\r\nI expected it to continue working.\r\n\r\n#### Actual behaviour\r\nNow I notice it does not work anymore on my development environment. It crashes right at the beginning. The error message report a random bucket at each try.\r\n`panic: bucket: HashedStorage, mdbx_cursor_put: MDBX_MAP_FULL: Environment mapsize limit reached`\r\nor\r\n`panic: bucket: IncarnationMap, mdbx_cursor_put: MDBX_MAP_FULL: Environment mapsize limit reached`\r\nor\r\n`panic: bucket: PlainState, mdbx_cursor_put: MDBX_MAP_FULL: Environment mapsize limit reached`\r\nand so on.\r\n\r\nAn obvious change since December explaining the behavior could be the added flags on the opening of the dst DB:\r\nBEFORE:\r\n```\r\nfunc mdbxToMdbx(ctx context.Context, logger log.Logger, from, to string) error {\r\n\tsrc := mdbx2.NewMDBX(logger).Path(from).Flags(func(flags uint) uint { return mdbx.Readonly | mdbx.Accede }).MustOpen()\r\n\tdst := mdbx2.NewMDBX(logger).Path(to).\r\n\t\tWriteMap().\r\n\t\tFlags(func(flags uint) uint { return flags | mdbx.NoMemInit }).\r\n\t\tMustOpen()\r\n\treturn kv2kv(ctx, src, dst)\r\n}\r\n```\r\nNOW:\r\n```\r\nfunc mdbxToMdbx(ctx context.Context, logger log.Logger, from, to string) error {\r\n\tsrc := mdbx2.NewMDBX(logger).Path(from).Flags(func(flags uint) uint { return mdbx.Readonly | mdbx.Accede }).MustOpen()\r\n\tdst := mdbx2.NewMDBX(logger).Path(to).\r\n\t\tWriteMap().\r\n\t\tFlags(func(flags uint) uint { return flags | mdbx.NoMemInit | mdbx.WriteMap | mdbx.Accede }).\r\n\t\tMustOpen()\r\n\treturn kv2kv(ctx, src, dst)\r\n}\r\n```\r\n\r\nWhether or not Erigon is running in parallel does not change anything (it used to work with Erigon running, which was very handy to perform hot backups).\r\n\r\nCould be related to the fact that the database I'm trying to backup is already a restoration from a previous backup (made in December 2022) created with the same integration command.\r\nErigon seem to behave OK but is logging a warning on startup that may or may not be related:\r\n```\r\nINFO] [04-25|12:48:40.344] Opening Database                         label=chaindata path=/mnt/data/erigon2/chaindata\r\n[INFO] [04-25|12:48:40.344] [db] params: growStep=2GB, mapsSize=7TB, shrinkThreshold=-1, pageSize=4KB, label=chaindata, WriteMap=false, Durable=false, NoReadahead=true,\r\nmdbx_setup_dxb:15949 filesize mismatch (expect 535382781952b/130708687p, have 536870912000b/131072000p)\r\n```\r\n\r\n#### Backtrace\r\nfull output of the `integration` command:\r\n````\r\n[root@ip-10-142-194-63 ~]# integration mdbx_to_mdbx --chaindata /mnt/data/erigon2/chaindata/ --chaindata.to /mnt/backup/erigon2/chaindata --datadir /dev/shm/erigon-backup\r\nINFO[04-25|12:56:01.707] logging to file system                   log dir=/dev/shm/erigon-backup/logs file prefix=erigon log level=info json=false\r\npanic: bucket: HashedStorage, mdbx_cursor_put: MDBX_MAP_FULL: Environment mapsize limit reached\r\n\r\ngoroutine 1 [running]:\r\ngithub.com/ledgerwatch/erigon/cmd/integration/commands.kv2kv({0x1897930, 0x4000793340?}, {0x18a4cc8, 0x40008c5040}, {0x18a4cc8, 0x40008c5110})\r\n        github.com/ledgerwatch/erigon/cmd/integration/commands/refetence_db.go:489 +0xa00\r\ngithub.com/ledgerwatch/erigon/cmd/integration/commands.mdbxToMdbx({0x1897930, 0x4000793340}, {0x18a3de0, 0x40004c5d20}, {0xffffdaad149f, 0x1c}, {0xffffdaad14cb, 0x1d})\r\n        github.com/ledgerwatch/erigon/cmd/integration/commands/refetence_db.go:437 +0x20c\r\ngithub.com/ledgerwatch/erigon/cmd/integration/commands.glob..func4(0x2203fc0?, {0x14af57d?, 0x6?, 0x6?})\r\n        github.com/ledgerwatch/erigon/cmd/integration/commands/refetence_db.go:103 +0x8c\r\ngithub.com/spf13/cobra.(*Command).execute(0x2203fc0, {0x40008a2120, 0x6, 0x6})\r\n        github.com/spf13/cobra@v1.7.0/command.go:944 +0x5c8\r\ngithub.com/spf13/cobra.(*Command).ExecuteC(0x2204580)\r\n        github.com/spf13/cobra@v1.7.0/command.go:1068 +0x368\r\ngithub.com/spf13/cobra.(*Command).Execute(...)\r\n        github.com/spf13/cobra@v1.7.0/command.go:992\r\ngithub.com/spf13/cobra.(*Command).ExecuteContext(...)\r\n        github.com/spf13/cobra@v1.7.0/command.go:985\r\nmain.main()\r\n        github.com/ledgerwatch/erigon/cmd/integration/main.go:15 +0x128\r\n````\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ledgerwatch/erigon/issues/7381/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ledgerwatch/erigon/issues/7381/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ledgerwatch/erigon/issues/comments/1521852247",
    "html_url": "https://github.com/ledgerwatch/erigon/issues/7381#issuecomment-1521852247",
    "issue_url": "https://api.github.com/repos/ledgerwatch/erigon/issues/7381",
    "id": 1521852247,
    "node_id": "IC_kwDOC0FsAM5atZ9X",
    "user": {
      "login": "crypto7world",
      "id": 97796429,
      "node_id": "U_kgDOBdRBTQ",
      "avatar_url": "https://avatars.githubusercontent.com/u/97796429?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/crypto7world",
      "html_url": "https://github.com/crypto7world",
      "followers_url": "https://api.github.com/users/crypto7world/followers",
      "following_url": "https://api.github.com/users/crypto7world/following{/other_user}",
      "gists_url": "https://api.github.com/users/crypto7world/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/crypto7world/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/crypto7world/subscriptions",
      "organizations_url": "https://api.github.com/users/crypto7world/orgs",
      "repos_url": "https://api.github.com/users/crypto7world/repos",
      "events_url": "https://api.github.com/users/crypto7world/events{/privacy}",
      "received_events_url": "https://api.github.com/users/crypto7world/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-04-25T14:05:54Z",
    "updated_at": "2023-04-25T14:05:54Z",
    "author_association": "NONE",
    "body": "I can confirm that rolling back the flags change is fixing the issue. My copy is now in progress.\r\nAs I'm not sure of what those flags are used for so I will not submit a patch (I'm not a Go dev, sorry) but if someone actually understanding what he is doing want to patch it, it is in:\r\n`cmd/integration/commands/refetence_db.go`\r\nline 435 (from commit 1106475e345d936aa1220ace3e95d746ec361fa4 / stable)\r\n\r\nThe change I made is simply:\r\nCURRENT:\r\n```\r\nfunc mdbxToMdbx(ctx context.Context, logger log.Logger, from, to string) error {\r\n\tsrc := mdbx2.NewMDBX(logger).Path(from).Flags(func(flags uint) uint { return mdbx.Readonly | mdbx.Accede }).MustOpen()\r\n\tdst := mdbx2.NewMDBX(logger).Path(to).\r\n\t\tWriteMap().\r\n\t\tFlags(func(flags uint) uint { return flags | mdbx.NoMemInit | mdbx.WriteMap | mdbx.Accede }).\r\n\t\tMustOpen()\r\n\treturn kv2kv(ctx, src, dst)\r\n}\r\n```\r\nNEW:\r\n```\r\nfunc mdbxToMdbx(ctx context.Context, logger log.Logger, from, to string) error {\r\n\tsrc := mdbx2.NewMDBX(logger).Path(from).Flags(func(flags uint) uint { return mdbx.Readonly | mdbx.Accede }).MustOpen()\r\n\tdst := mdbx2.NewMDBX(logger).Path(to).\r\n\t\tWriteMap().\r\n\t\tFlags(func(flags uint) uint { return flags | mdbx.NoMemInit }).\r\n\t\tMustOpen()\r\n\treturn kv2kv(ctx, src, dst)\r\n}\r\n```\r\n\r\nOut of curiosity, I would not mind an explanation of WHY those flag are producing the behavior I observed.",
    "reactions": {
      "url": "https://api.github.com/repos/ledgerwatch/erigon/issues/comments/1521852247/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ledgerwatch/erigon/issues/comments/1522519038",
    "html_url": "https://github.com/ledgerwatch/erigon/issues/7381#issuecomment-1522519038",
    "issue_url": "https://api.github.com/repos/ledgerwatch/erigon/issues/7381",
    "id": 1522519038,
    "node_id": "IC_kwDOC0FsAM5av8v-",
    "user": {
      "login": "keithchew",
      "id": 5557929,
      "node_id": "MDQ6VXNlcjU1NTc5Mjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5557929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/keithchew",
      "html_url": "https://github.com/keithchew",
      "followers_url": "https://api.github.com/users/keithchew/followers",
      "following_url": "https://api.github.com/users/keithchew/following{/other_user}",
      "gists_url": "https://api.github.com/users/keithchew/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/keithchew/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/keithchew/subscriptions",
      "organizations_url": "https://api.github.com/users/keithchew/orgs",
      "repos_url": "https://api.github.com/users/keithchew/repos",
      "events_url": "https://api.github.com/users/keithchew/events{/privacy}",
      "received_events_url": "https://api.github.com/users/keithchew/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-04-25T22:55:52Z",
    "updated_at": "2023-04-25T22:55:52Z",
    "author_association": "NONE",
    "body": "hi @crypto7world just for my knowledge, how long does it take to do this backup copy? can you give me a rough idea and also which chain your are backing up.",
    "reactions": {
      "url": "https://api.github.com/repos/ledgerwatch/erigon/issues/comments/1522519038/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ledgerwatch/erigon/issues/comments/1522704200",
    "html_url": "https://github.com/ledgerwatch/erigon/issues/7381#issuecomment-1522704200",
    "issue_url": "https://api.github.com/repos/ledgerwatch/erigon/issues/7381",
    "id": 1522704200,
    "node_id": "IC_kwDOC0FsAM5awp9I",
    "user": {
      "login": "AskAlexSharov",
      "id": 46885206,
      "node_id": "MDQ6VXNlcjQ2ODg1MjA2",
      "avatar_url": "https://avatars.githubusercontent.com/u/46885206?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AskAlexSharov",
      "html_url": "https://github.com/AskAlexSharov",
      "followers_url": "https://api.github.com/users/AskAlexSharov/followers",
      "following_url": "https://api.github.com/users/AskAlexSharov/following{/other_user}",
      "gists_url": "https://api.github.com/users/AskAlexSharov/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AskAlexSharov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AskAlexSharov/subscriptions",
      "organizations_url": "https://api.github.com/users/AskAlexSharov/orgs",
      "repos_url": "https://api.github.com/users/AskAlexSharov/repos",
      "events_url": "https://api.github.com/users/AskAlexSharov/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AskAlexSharov/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-04-26T03:04:57Z",
    "updated_at": "2023-04-26T03:04:57Z",
    "author_association": "COLLABORATOR",
    "body": "@crypto7world it's because `mdbx_to_mdbx` can't really create target db with all useful flags which Erigon has. So, you better create target db by starting erigon in new datadir for 10 sec with all cli flags you like. \r\n\r\n`mdbx_to_mdbx` opens target db with `mdbx.Accede` mode - which meanns it doesn't overwrite any db flags. And default db size limit is likely too small. (see --db.size.limit). \r\n\r\nMain problem here: \r\n- sometime users using mdbx_to_mdbx for backup, but another to change db pageSize. Means one users want \"copy all db configuration\" another \"do not want copy db configuration\". So, it's a bit unclear for me - which usecase must be default. Even if backup is default - need provide way to perform another use-case (support all that cli flags). \r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ledgerwatch/erigon/issues/comments/1522704200/reactions",
      "total_count": 2,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ledgerwatch/erigon/issues/comments/1522706744",
    "html_url": "https://github.com/ledgerwatch/erigon/issues/7381#issuecomment-1522706744",
    "issue_url": "https://api.github.com/repos/ledgerwatch/erigon/issues/7381",
    "id": 1522706744,
    "node_id": "IC_kwDOC0FsAM5awqk4",
    "user": {
      "login": "AskAlexSharov",
      "id": 46885206,
      "node_id": "MDQ6VXNlcjQ2ODg1MjA2",
      "avatar_url": "https://avatars.githubusercontent.com/u/46885206?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AskAlexSharov",
      "html_url": "https://github.com/AskAlexSharov",
      "followers_url": "https://api.github.com/users/AskAlexSharov/followers",
      "following_url": "https://api.github.com/users/AskAlexSharov/following{/other_user}",
      "gists_url": "https://api.github.com/users/AskAlexSharov/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AskAlexSharov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AskAlexSharov/subscriptions",
      "organizations_url": "https://api.github.com/users/AskAlexSharov/orgs",
      "repos_url": "https://api.github.com/users/AskAlexSharov/repos",
      "events_url": "https://api.github.com/users/AskAlexSharov/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AskAlexSharov/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-04-26T03:08:08Z",
    "updated_at": "2023-04-26T03:08:18Z",
    "author_association": "COLLABORATOR",
    "body": "@crypto7world give me some your feedback about `mdbx_to_mdbx` for backups. Now it using tons of threads to \"read-ahead the data\". Is it working well with \"running erigon\"? No impact on Erigon's performance? What is your disk type?",
    "reactions": {
      "url": "https://api.github.com/repos/ledgerwatch/erigon/issues/comments/1522706744/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ledgerwatch/erigon/issues/comments/1523528708",
    "html_url": "https://github.com/ledgerwatch/erigon/issues/7381#issuecomment-1523528708",
    "issue_url": "https://api.github.com/repos/ledgerwatch/erigon/issues/7381",
    "id": 1523528708,
    "node_id": "IC_kwDOC0FsAM5azzQE",
    "user": {
      "login": "crypto7world",
      "id": 97796429,
      "node_id": "U_kgDOBdRBTQ",
      "avatar_url": "https://avatars.githubusercontent.com/u/97796429?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/crypto7world",
      "html_url": "https://github.com/crypto7world",
      "followers_url": "https://api.github.com/users/crypto7world/followers",
      "following_url": "https://api.github.com/users/crypto7world/following{/other_user}",
      "gists_url": "https://api.github.com/users/crypto7world/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/crypto7world/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/crypto7world/subscriptions",
      "organizations_url": "https://api.github.com/users/crypto7world/orgs",
      "repos_url": "https://api.github.com/users/crypto7world/repos",
      "events_url": "https://api.github.com/users/crypto7world/events{/privacy}",
      "received_events_url": "https://api.github.com/users/crypto7world/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-04-26T14:33:49Z",
    "updated_at": "2023-04-26T14:33:49Z",
    "author_association": "NONE",
    "body": "@keithchew \r\n> hi @crypto7world just for my knowledge, how long does it take to do this backup copy? can you give me a rough idea and also which chain your are backing up.\r\n\r\nIt takes ages. The DB copy alone **for the Goerli testnet** takes ~8 hours. I'm not sure to remember how long it took on my last mainnet backup in December but I believe it was around 26 hours. I will update you on that in the coming days. More on my usecase/resources with my answers to Alex.\r\n\r\n@AskAlexSharov \r\n> @crypto7world it's because mdbx_to_mdbx can't really create target db with all useful flags which Erigon has. So, you better create target db by starting erigon in new datadir for 10 sec with all cli flags you like.\r\n\r\nI didn't think of that but I will try it, if it can make it work without me having to patch `integration` I'm all for it. Thanks for the tip!\r\n\r\n> @crypto7world give me some your feedback about mdbx_to_mdbx for backups. Now it using tons of threads to \"read-ahead the data\". Is it working well with \"running erigon\"? No impact on Erigon's performance? What is your disk type?\r\n\r\nMy usecase is running a semi-custodian staking service on AWS. I'm using Erigon as an EL with Lighthouse as the CL. As I'm not big enough to have multiple nodes running at a profit, mainnet Lighthouse and Erigon are both running on a single EC2 instance **im4gn.xlarge (4 CPU, 16GB RAM, 1875GB directly attached SSD)**.\r\n\r\nIt is of course possible that I lose this single node and I must be able to come back online in a \"reasonable amount of time\" (roughly 24hours), which precludes syncing from scratch. Hence the backup usecase. Using `integration` **allows me to backup Erigon database while having Erigon running**, which is the most important feature for me because I'm staking and don't want to stop Erigon and loose hours of attestations at each backup.\r\n\r\nThe following numbers are taken from the Goerli testnet node, on which I'm currently performing tests. It is an **im4gn.large (2 CPU, 8GB RAM, 937GB directly attached SSD)**. I'm performing the backup from the instance SSD to a temporary gp3 EBS volume (3000 IOPS and 125MB/s throughput baseline). \r\n\r\nThe destination database volume (gp3) seems to receive mainly sequential write IOPS with occasional bursts of read IOPS. It is mainly reported idle by AWS metrics. No issue here I think.\r\n\r\nThe source database volume is impacted a great deal with peaks as high as 10000 read IOPS _as a minute average_ during backup vs ~200 read IOPS max under normal operation (thanks to caching, Erigon does not read so much), so an additional ~9000IOPS. But the specific hardware I'm on can go far beyond that, so no real problem.\r\nIf I look at CPU/RAM, `integration` reports **alloc=15.3MB sys=31.9MB** in logs during the whole process but `top` shows a consumption of **~12% CPU and ~16% RAM**.\r\nIn my usecase I don't care too much honestly, the bottom-line for me is that I'm able to continue emitting timely attestations during backups and that's all that matter.\r\n\r\nI may fare a little better with 16kb page size, as it is the effective IO size of my volume, but I don't have performance issues as it is now so...\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ledgerwatch/erigon/issues/comments/1523528708/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ledgerwatch/erigon/issues/comments/1535211973",
    "html_url": "https://github.com/ledgerwatch/erigon/issues/7381#issuecomment-1535211973",
    "issue_url": "https://api.github.com/repos/ledgerwatch/erigon/issues/7381",
    "id": 1535211973,
    "node_id": "IC_kwDOC0FsAM5bgXnF",
    "user": {
      "login": "allada",
      "id": 1831202,
      "node_id": "MDQ6VXNlcjE4MzEyMDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1831202?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/allada",
      "html_url": "https://github.com/allada",
      "followers_url": "https://api.github.com/users/allada/followers",
      "following_url": "https://api.github.com/users/allada/following{/other_user}",
      "gists_url": "https://api.github.com/users/allada/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/allada/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/allada/subscriptions",
      "organizations_url": "https://api.github.com/users/allada/orgs",
      "repos_url": "https://api.github.com/users/allada/repos",
      "events_url": "https://api.github.com/users/allada/events{/privacy}",
      "received_events_url": "https://api.github.com/users/allada/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-04T18:18:45Z",
    "updated_at": "2023-05-04T18:18:45Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Hence the backup usecase. Using integration allows me to backup Erigon database while having Erigon running, which is the most important feature for me because I'm staking and don't want to stop Erigon and loose hours of attestations at each backup.\r\n\r\nYou might want to look into possibly using `zfs` as a filesystem. It's a little slower to read for erigon, but if configured properly it is about 5-10% slower than ext4, supports disk compression (full nodes provide around 50% compression) and most importantly supports instant snapshots, and you are not \"required\" to stop erigon to create snapshot (but it's good practice to stop erigon for a few seconds only while the `zfs snap` command is run (usually takes ~0.5 seconds).\r\n\r\nWhat I used to do is:\r\n```\r\nzfs snap tank/erigon@snap\r\nzfs send tank/erigon@snap | zstd -v -3 | aws s3 cp - s3://path_to_s3_backup\r\nzfs destroy tank/erigon@snap\r\n```\r\n\r\nThen for restore:\r\n```\r\naws s3 cp s3://path_to_s3_backup - | zstd -v -d | zfs recv tank/erigon -o mountpoint=/path_to_erigon_data\r\nzfs destroy tank/erigon@snap\r\n```\r\n\r\nTo see more advanced zfs and a bunch of hacks on how to make both uploads and downloads of data to s3 extremely fast see:\r\nhttps://github.com/allada/eth-archive-snapshot/blob/master/build_archive_node.sh",
    "reactions": {
      "url": "https://api.github.com/repos/ledgerwatch/erigon/issues/comments/1535211973/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ledgerwatch/erigon/issues/comments/1590350414",
    "html_url": "https://github.com/ledgerwatch/erigon/issues/7381#issuecomment-1590350414",
    "issue_url": "https://api.github.com/repos/ledgerwatch/erigon/issues/7381",
    "id": 1590350414,
    "node_id": "IC_kwDOC0FsAM5eytJO",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2023-06-14T02:32:04Z",
    "updated_at": "2023-06-14T02:32:04Z",
    "author_association": "NONE",
    "body": "This issue is stale because it has been open for 40 days with no activity. Remove stale label or comment, or this will be closed in 7 days.",
    "reactions": {
      "url": "https://api.github.com/repos/ledgerwatch/erigon/issues/comments/1590350414/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
