{
  "url": "https://api.github.com/repos/hyperledger/besu/issues/5211",
  "repository_url": "https://api.github.com/repos/hyperledger/besu",
  "labels_url": "https://api.github.com/repos/hyperledger/besu/issues/5211/labels{/name}",
  "comments_url": "https://api.github.com/repos/hyperledger/besu/issues/5211/comments",
  "events_url": "https://api.github.com/repos/hyperledger/besu/issues/5211/events",
  "html_url": "https://github.com/hyperledger/besu/issues/5211",
  "id": 1621752279,
  "node_id": "I_kwDODE2jmc5gqfnX",
  "number": 5211,
  "title": "Detecting and Measuring Coupling",
  "user": {
    "login": "jflo",
    "id": 345937,
    "node_id": "MDQ6VXNlcjM0NTkzNw==",
    "avatar_url": "https://avatars.githubusercontent.com/u/345937?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jflo",
    "html_url": "https://github.com/jflo",
    "followers_url": "https://api.github.com/users/jflo/followers",
    "following_url": "https://api.github.com/users/jflo/following{/other_user}",
    "gists_url": "https://api.github.com/users/jflo/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jflo/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jflo/subscriptions",
    "organizations_url": "https://api.github.com/users/jflo/orgs",
    "repos_url": "https://api.github.com/users/jflo/repos",
    "events_url": "https://api.github.com/users/jflo/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jflo/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 4328706977,
      "node_id": "LA_kwDODE2jmc8AAAABAgLToQ",
      "url": "https://api.github.com/repos/hyperledger/besu/labels/TeamChupa",
      "name": "TeamChupa",
      "color": "fbca04",
      "default": false,
      "description": "GH issues worked on by Chupacabara Team"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": {
    "login": "jflo",
    "id": 345937,
    "node_id": "MDQ6VXNlcjM0NTkzNw==",
    "avatar_url": "https://avatars.githubusercontent.com/u/345937?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jflo",
    "html_url": "https://github.com/jflo",
    "followers_url": "https://api.github.com/users/jflo/followers",
    "following_url": "https://api.github.com/users/jflo/following{/other_user}",
    "gists_url": "https://api.github.com/users/jflo/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jflo/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jflo/subscriptions",
    "organizations_url": "https://api.github.com/users/jflo/orgs",
    "repos_url": "https://api.github.com/users/jflo/repos",
    "events_url": "https://api.github.com/users/jflo/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jflo/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "jflo",
      "id": 345937,
      "node_id": "MDQ6VXNlcjM0NTkzNw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/345937?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jflo",
      "html_url": "https://github.com/jflo",
      "followers_url": "https://api.github.com/users/jflo/followers",
      "following_url": "https://api.github.com/users/jflo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jflo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jflo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jflo/subscriptions",
      "organizations_url": "https://api.github.com/users/jflo/orgs",
      "repos_url": "https://api.github.com/users/jflo/repos",
      "events_url": "https://api.github.com/users/jflo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jflo/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 0,
  "created_at": "2023-03-13T15:40:51Z",
  "updated_at": "2023-04-04T15:16:57Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "What are we trying to do:  Modularity requires decoupling. Decoupling is a massive subject, how do we know where we will get most value for our time spent?\n\nWe tried measuring coupling directly with Sonar, but custom rules would be required. It has metrics for complexity, however the rules governing coupling were removed:  https://community.sonarsource.com/t/how-to-measure-class-coupling-metric-with-sonarqube/2801/6\n\nIntelliJ Ultimate edition provides tooling for Data Flow Analysis.  This is promising, but would require complete source code for all paths we are interested in to be loaded into the IDE. It also is limited to tracking the flow of exact objects and primitives. It cannot tell that a new object took a traced object in as input, and continue tracking the flow. This is called \"taint analysis\" and is probably going to be critical to analyzing besu, since so much of our code is immutable. IntelliJ and Sonar have a way to provide taint analysis, but it is designed to help find security vulnerabilities. It doesn't seem to allow more flexibility in its use, which is required if we are looking to use this technique for refactoring triage instead of searching for exploits. For example, using a security focused taint analyzer would limit us to study of flow from \"user supplied input\" as it looks for things like SQL injections and XSS attacks.  We couldn't ask questions like \"when a new configuration option is introduced, how will it need to flow to get to where it is used\".\n\nCodeQL is the current favorite tool to look at, since it has explicit support for taint tracking, via its DataFlow apis.  During general use, devs write queries in CodeQL, which run against a generated code database. GitHub already generates these databases, and they can be accessed directly via MS Visual Code. VSCode is the supported tool for developing in CodeQL, so devs will have to become comfortable with that.  Custom CodeQL queries can be checked in to the besu repo and treated as \"problem scans\" if desired, and GithubActions could annotate pull requests with problems found.\n  \nCodeQL can be thought of as two different APIs: an Abstract Syntax Tree api and a DataFlow api.  The AST api is language specific, and understands the building blocks of static source code. The AST api is easy to understand, and the tooling comes with a viewer that allows you to explore existing code to see how it fits into the CodeQL java specific model.  \n\nThe DataFlow api is very different, and often incongruous with the AST api. DataFlow api is used to chart paths that data takes as it flows through the code, and has support for taint tracking. This support is limited by how broad your CodeQL database is; if you have not instrumented dependent libraries, then there is no way to track potential taint of inputs done by that code.  This is a major problem for Besu in particular, which often extends classes provided by Apache Tuweni, or uses other cryptography libraries. Developers need a way to say \"trust me, that is tainted\" and move on with their analysis.  I have been able to leverage this in some cases, but not all- classes which extend Tuweni types like Wei were particularly hard to track taint through. I suspect this is just a misunderstanding of how the disparate AST and DataFlow models interoperate, and have reached out to other CodeQL users for understanding.\n\nAt the suggestion of EF security staff, I'm also adding semgrep to the list of potential tools that can help figure this out.  They have a whole section on taint analysis, but I have not tried it yet.  This description here https://semgrep.dev/docs/writing-rules/data-flow/taint-mode/ sounds promising.",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/hyperledger/besu/issues/5211/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/hyperledger/besu/issues/5211/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[

]
