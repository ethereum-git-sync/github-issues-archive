{
  "url": "https://api.github.com/repos/hyperledger/besu/issues/5791",
  "repository_url": "https://api.github.com/repos/hyperledger/besu",
  "labels_url": "https://api.github.com/repos/hyperledger/besu/issues/5791/labels{/name}",
  "comments_url": "https://api.github.com/repos/hyperledger/besu/issues/5791/comments",
  "events_url": "https://api.github.com/repos/hyperledger/besu/issues/5791/events",
  "html_url": "https://github.com/hyperledger/besu/issues/5791",
  "id": 1863740250,
  "node_id": "I_kwDODE2jmc5vFmta",
  "number": 5791,
  "title": "CICD Improvements",
  "user": {
    "login": "jflo",
    "id": 345937,
    "node_id": "MDQ6VXNlcjM0NTkzNw==",
    "avatar_url": "https://avatars.githubusercontent.com/u/345937?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jflo",
    "html_url": "https://github.com/jflo",
    "followers_url": "https://api.github.com/users/jflo/followers",
    "following_url": "https://api.github.com/users/jflo/following{/other_user}",
    "gists_url": "https://api.github.com/users/jflo/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jflo/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jflo/subscriptions",
    "organizations_url": "https://api.github.com/users/jflo/orgs",
    "repos_url": "https://api.github.com/users/jflo/repos",
    "events_url": "https://api.github.com/users/jflo/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jflo/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 0,
  "created_at": "2023-08-23T17:29:07Z",
  "updated_at": "2023-08-23T17:40:36Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "In light of the errors in build process with the 23.7.1 release, I would like to revisit our CICD process and propose some improvements.\r\n\r\n- Process Questions\r\n\t- Do we need CI to produce SNAPSHOT versions of jar artifacts? As far as I know these are not re-used elsewhere in build process, and are regularly overwritten by whatever PR was most recently built. Is there enough value here to rebuild and republish these to jfrog as frequently as we are? I suspect not.\r\n\t- Same question with regard to docker images/manifests.\r\n\r\n- Proposed Changes to CI\r\n\t- Draft PR workflow\r\n\t\t- Doesn't get any CI run. Draft PRs should be used any time you need to share thoughts or gather feedback from others.\r\n\t- Open PR workflow - no longer in Draft. Asking for deeper thought from peers during review, and should have been evaluated by CI prior to asking peers for that review.\r\n\t\t- run serially to fail fast:\r\n\t\t        - gradlew verification - if gradle is compromised, full stop.\r\n\t\t\t- compile - if it doesn't compile (reproducibly!), don't run more tests. (Applies to test code too)\r\n\t\t\t- dco - if it's not licensed correctly, can't be merged.\r\n\t\t\t- spotless - if it hasn't been formatted correctly, fail. *Any reasons not to just run spotlessApply when this happens?*\r\n\t\t\t- javadoc - right now this fails the build at the same time spotless is checked.\r\n\t\t\t- repolinter - similar to dco, state of repo must meet HL specs\r\n\t\t- then run parallel\r\n\t\t\t- unit tests - **Discussion point** - are we ok with these being re-run every time an author adopts a pr suggestion?\r\n\t\t\t- CodeQL\r\n\t- Open PRs with at least one approval\r\n\t\t- all remaining acceptance/priv/integration/reference tests in parallel: **Discussion point** - do these need to be run earlier? Are they providing more filtering that is important to have done before peer review?\r\n\t- Nightly\r\n\t\t- run everything above up to unit tests\r\n\t\t- SonarQube analysis\r\n\t\t\t- If SonarQube coverage analysis acceptance/integration test results, then they are worth running as well.\r\n\t- Release\r\n\t\t- Requires a git tag\r\n\t\t- Run all the things above except Nightly.\r\n\t\t- push jar artifacts with release tags to jfrog - **Discussion point** - jfrog should be configured to not permit updates to the artifact at a GAV coordinate once it is used.\r\n\t\t- dockerScan\r\n\t\t- push docker images/manifests/tags to dockerhub\r\n\t\t- move latest docker tag\r\n\r\nIf changes adopted, we should also review the default PR comment included for new PRs, which guides users toward crafting a good pr that will likely not fail these later checks.",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/hyperledger/besu/issues/5791/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/hyperledger/besu/issues/5791/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[

]
