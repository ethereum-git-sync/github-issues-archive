{
  "url": "https://api.github.com/repos/hyperledger/besu/issues/2729",
  "repository_url": "https://api.github.com/repos/hyperledger/besu",
  "labels_url": "https://api.github.com/repos/hyperledger/besu/issues/2729/labels{/name}",
  "comments_url": "https://api.github.com/repos/hyperledger/besu/issues/2729/comments",
  "events_url": "https://api.github.com/repos/hyperledger/besu/issues/2729/events",
  "html_url": "https://github.com/hyperledger/besu/issues/2729",
  "id": 989987340,
  "node_id": "MDU6SXNzdWU5ODk5ODczNDA=",
  "number": 2729,
  "title": "Manage the GetAccountRange message (as a client)",
  "user": {
    "login": "matkt",
    "id": 26581503,
    "node_id": "MDQ6VXNlcjI2NTgxNTAz",
    "avatar_url": "https://avatars.githubusercontent.com/u/26581503?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/matkt",
    "html_url": "https://github.com/matkt",
    "followers_url": "https://api.github.com/users/matkt/followers",
    "following_url": "https://api.github.com/users/matkt/following{/other_user}",
    "gists_url": "https://api.github.com/users/matkt/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/matkt/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/matkt/subscriptions",
    "organizations_url": "https://api.github.com/users/matkt/orgs",
    "repos_url": "https://api.github.com/users/matkt/repos",
    "events_url": "https://api.github.com/users/matkt/events{/privacy}",
    "received_events_url": "https://api.github.com/users/matkt/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": {
    "login": "matkt",
    "id": 26581503,
    "node_id": "MDQ6VXNlcjI2NTgxNTAz",
    "avatar_url": "https://avatars.githubusercontent.com/u/26581503?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/matkt",
    "html_url": "https://github.com/matkt",
    "followers_url": "https://api.github.com/users/matkt/followers",
    "following_url": "https://api.github.com/users/matkt/following{/other_user}",
    "gists_url": "https://api.github.com/users/matkt/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/matkt/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/matkt/subscriptions",
    "organizations_url": "https://api.github.com/users/matkt/orgs",
    "repos_url": "https://api.github.com/users/matkt/repos",
    "events_url": "https://api.github.com/users/matkt/events{/privacy}",
    "received_events_url": "https://api.github.com/users/matkt/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "matkt",
      "id": 26581503,
      "node_id": "MDQ6VXNlcjI2NTgxNTAz",
      "avatar_url": "https://avatars.githubusercontent.com/u/26581503?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/matkt",
      "html_url": "https://github.com/matkt",
      "followers_url": "https://api.github.com/users/matkt/followers",
      "following_url": "https://api.github.com/users/matkt/following{/other_user}",
      "gists_url": "https://api.github.com/users/matkt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/matkt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/matkt/subscriptions",
      "organizations_url": "https://api.github.com/users/matkt/orgs",
      "repos_url": "https://api.github.com/users/matkt/repos",
      "events_url": "https://api.github.com/users/matkt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/matkt/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 0,
  "created_at": "2021-09-07T13:29:36Z",
  "updated_at": "2021-12-13T09:20:50Z",
  "closed_at": "2021-12-13T09:20:50Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "We need to be able to send a GetAccountRange message to another node. As specified in the specification https://github.com/ethereum/devp2p/blob/master/caps/snap.md#getaccountrange-0x00\n\nSnapsync will work with the fastsync. We just need to replace the part that corresponds to the download of the worldstate with the snapsync. Most of the work is to modify this part of the code to make it modular\n\nWe will certainly need to modify this **WorldStateDownloader** class depending on the mode and have a **SnapWorldStateDownloader** when we activate snapsnc. This part will take care of sending the snapsync messages to the other node to rebuild the worldstate. We also need to manage the response and to validate the proof\n\nWe also have to create all the messages needed for example :\n\n```java\npublic final class GetAccountRangeMessage extends AbstractMessageData {\n\n  public static GetAccountRangeMessage readFrom(final MessageData message) {\n    if (message instanceof GetAccountRangeMessage) {\n      return (GetAccountRangeMessage) message;\n    }\n    final int code = message.getCode();\n    if (code != SnapV1.GET_ACCOUNT_RANGE) {\n      throw new IllegalArgumentException(\n          String.format(\"Message has code %d and thus is not a GetAccountRangeMessage.\", code));\n    }\n    return new GetAccountRangeMessage(message.getData());\n  }\n\n  public static GetAccountRangeMessage create(\n                                              final long requestId,\n                                              final Hash rootHash,\n                                              final Hash startingHash,\n                                              final Hash endingHash) {\n    final BytesValueRLPOutput tmp = new BytesValueRLPOutput();\n    tmp.startList();\n    tmp.writeLongScalar(requestId);\n    tmp.writeBytes(rootHash);\n    tmp.writeBytes(startingHash);\n    tmp.writeBytes(endingHash);\n    tmp.writeIntScalar(512 * 1024); //to update\n    tmp.endList();\n    return new GetAccountRangeMessage(tmp.encoded());\n  }\n\n  private GetAccountRangeMessage(final Bytes data) {\n    super(data);\n  }\n\n  @Override\n  public int getCode() {\n    return SnapV1.GET_ACCOUNT_RANGE;\n  }\n\n}\n\n\npublic final class SnapV1 {\n\n  public static final int GET_ACCOUNT_RANGE = 0x00;\n\n  private SnapV1() {\n    // Holder for constants only\n  }\n}\n\npublic class GetAccountRangeFromPeerTask extends AbstractPeerRequestTask<Bytes> {\n\n  private static final Logger LOG = LogManager.getLogger();\n\n  private final Hash rootHash;\n  private final Hash startingHash;\n  private final Hash endingHash;\n  private final long minimumBlockNumber;\n\n  private GetAccountRangeFromPeerTask(\n      final EthContext ethContext,\n      final Hash rootHash,\n              final Hash startingHash,\n              final Hash endingHash,\n      final long minimumBlockNumber,\n      final MetricsSystem metricsSystem) {\n    super(ethContext, SnapV1.GET_ACCOUNT_RANGE, metricsSystem);\n    this.rootHash = rootHash;\n    this.startingHash = startingHash;\n    this.endingHash = endingHash;\n    this.minimumBlockNumber = minimumBlockNumber;\n  }\n\n  public static GetAccountRangeFromPeerTask forAccountRange(\n      final EthContext ethContext,\n      final Hash rootHash,\n      final Hash startingHash,\n      final Hash endingHash,\n      final long minimumBlockNumber,\n      final MetricsSystem metricsSystem) {\n    return new GetAccountRangeFromPeerTask(ethContext, rootHash, startingHash, endingHash, minimumBlockNumber, metricsSystem);\n  }\n\n  @Override\n  protected PendingPeerRequest sendRequest() {\n    return sendRequestToPeer(\n        peer -> {\n          LOG.debug(\"Requesting on state root {} account range [{},{}] entries from peer {}.\", rootHash, startingHash, endingHash, peer);\n          return peer.getAccountRange(System.currentTimeMillis(), rootHash, startingHash, endingHash);\n        },\n            minimumBlockNumber);\n  }\n\n  @Override\n  protected Optional<Bytes> processResponse(\n      final boolean streamClosed, final MessageData message, final EthPeer peer) {\n    if (streamClosed) {\n      // We don't record this as a useless response because it's impossible to know if a peer has\n      // the data we're requesting.\n      return Optional.empty();\n    }\n    System.out.println(\"response received\");\n    return Optional.empty();\n  }\n\n}\n\n\nEthpeer.java\n\npublic RequestManager.ResponseStream getAccountRange(\n                                                       final long requestId,\n                                                       final Hash rootHash,\n                                                       final Hash startingHash,\n                                                       final Hash endingHash)\n          throws PeerNotConnected {\n    final GetAccountRangeMessage message = GetAccountRangeMessage.create(requestId, rootHash, startingHash, endingHash);\n    return sendSnapMessage(message);\n  }\n```",
  "closed_by": {
    "login": "matkt",
    "id": 26581503,
    "node_id": "MDQ6VXNlcjI2NTgxNTAz",
    "avatar_url": "https://avatars.githubusercontent.com/u/26581503?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/matkt",
    "html_url": "https://github.com/matkt",
    "followers_url": "https://api.github.com/users/matkt/followers",
    "following_url": "https://api.github.com/users/matkt/following{/other_user}",
    "gists_url": "https://api.github.com/users/matkt/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/matkt/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/matkt/subscriptions",
    "organizations_url": "https://api.github.com/users/matkt/orgs",
    "repos_url": "https://api.github.com/users/matkt/repos",
    "events_url": "https://api.github.com/users/matkt/events{/privacy}",
    "received_events_url": "https://api.github.com/users/matkt/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/hyperledger/besu/issues/2729/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/hyperledger/besu/issues/2729/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[

]
