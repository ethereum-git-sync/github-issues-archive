{
  "url": "https://api.github.com/repos/hyperledger/besu/issues/4636",
  "repository_url": "https://api.github.com/repos/hyperledger/besu",
  "labels_url": "https://api.github.com/repos/hyperledger/besu/issues/4636/labels{/name}",
  "comments_url": "https://api.github.com/repos/hyperledger/besu/issues/4636/comments",
  "events_url": "https://api.github.com/repos/hyperledger/besu/issues/4636/events",
  "html_url": "https://github.com/hyperledger/besu/issues/4636",
  "id": 1442295660,
  "node_id": "I_kwDODE2jmc5V969s",
  "number": 4636,
  "title": "Flat Database Implementation ",
  "user": {
    "login": "matkt",
    "id": 26581503,
    "node_id": "MDQ6VXNlcjI2NTgxNTAz",
    "avatar_url": "https://avatars.githubusercontent.com/u/26581503?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/matkt",
    "html_url": "https://github.com/matkt",
    "followers_url": "https://api.github.com/users/matkt/followers",
    "following_url": "https://api.github.com/users/matkt/following{/other_user}",
    "gists_url": "https://api.github.com/users/matkt/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/matkt/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/matkt/subscriptions",
    "organizations_url": "https://api.github.com/users/matkt/orgs",
    "repos_url": "https://api.github.com/users/matkt/repos",
    "events_url": "https://api.github.com/users/matkt/events{/privacy}",
    "received_events_url": "https://api.github.com/users/matkt/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3013559202,
      "node_id": "MDU6TGFiZWwzMDEzNTU5MjAy",
      "url": "https://api.github.com/repos/hyperledger/besu/labels/mainnet",
      "name": "mainnet",
      "color": "9D578C",
      "default": false,
      "description": ""
    },
    {
      "id": 3918183887,
      "node_id": "LA_kwDODE2jmc7pir3P",
      "url": "https://api.github.com/repos/hyperledger/besu/labels/snapsync",
      "name": "snapsync",
      "color": "84684F",
      "default": false,
      "description": ""
    },
    {
      "id": 4328706977,
      "node_id": "LA_kwDODE2jmc8AAAABAgLToQ",
      "url": "https://api.github.com/repos/hyperledger/besu/labels/TeamChupa",
      "name": "TeamChupa",
      "color": "fbca04",
      "default": false,
      "description": "GH issues worked on by Chupacabara Team"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": {
    "login": "matkt",
    "id": 26581503,
    "node_id": "MDQ6VXNlcjI2NTgxNTAz",
    "avatar_url": "https://avatars.githubusercontent.com/u/26581503?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/matkt",
    "html_url": "https://github.com/matkt",
    "followers_url": "https://api.github.com/users/matkt/followers",
    "following_url": "https://api.github.com/users/matkt/following{/other_user}",
    "gists_url": "https://api.github.com/users/matkt/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/matkt/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/matkt/subscriptions",
    "organizations_url": "https://api.github.com/users/matkt/orgs",
    "repos_url": "https://api.github.com/users/matkt/repos",
    "events_url": "https://api.github.com/users/matkt/events{/privacy}",
    "received_events_url": "https://api.github.com/users/matkt/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "gezero",
      "id": 22477,
      "node_id": "MDQ6VXNlcjIyNDc3",
      "avatar_url": "https://avatars.githubusercontent.com/u/22477?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gezero",
      "html_url": "https://github.com/gezero",
      "followers_url": "https://api.github.com/users/gezero/followers",
      "following_url": "https://api.github.com/users/gezero/following{/other_user}",
      "gists_url": "https://api.github.com/users/gezero/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gezero/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gezero/subscriptions",
      "organizations_url": "https://api.github.com/users/gezero/orgs",
      "repos_url": "https://api.github.com/users/gezero/repos",
      "events_url": "https://api.github.com/users/gezero/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gezero/received_events",
      "type": "User",
      "site_admin": false
    },
    {
      "login": "matkt",
      "id": 26581503,
      "node_id": "MDQ6VXNlcjI2NTgxNTAz",
      "avatar_url": "https://avatars.githubusercontent.com/u/26581503?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/matkt",
      "html_url": "https://github.com/matkt",
      "followers_url": "https://api.github.com/users/matkt/followers",
      "following_url": "https://api.github.com/users/matkt/following{/other_user}",
      "gists_url": "https://api.github.com/users/matkt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/matkt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/matkt/subscriptions",
      "organizations_url": "https://api.github.com/users/matkt/orgs",
      "repos_url": "https://api.github.com/users/matkt/repos",
      "events_url": "https://api.github.com/users/matkt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/matkt/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2022-11-09T15:23:31Z",
  "updated_at": "2023-01-19T16:27:22Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "### Description\r\n\r\nI wanted to share some result about the flat database filling implementation\r\nDuring my investigation I tried three way to fix this problem of incomplet flat database with bonsai\r\nSeekForPrev version in order to keep only the leaf of the trie and removing the flat database. A version is running but the performance are not really good. We can maybe continue to work on this code in background as R&D but I don’t think it will be a solution in a near future.\r\nFull flat database synced during the snapsync. The snapsync is very slow and it’s clearly not good for low machine\r\nPartial full flat database (only storage >480 slots). The snapsync is still very slow on m6 instance . Don’t think it is the solution as it can impact codefi and user with slow machine. The number of contract with storage >480 slots is very important. Increasing this limit to reduce the number of contract will not be a good idea because like that we can evict most used contract and we will not see good improvement\r\nThe three solutions are not very good. So I’m going to test another idea in order to have something ready for the next version if possible. The idea is based on the initial idea that we tried a month ago with Jiri. It is to move only the most used contract into the flat database right after healing. I use the pipeline to have something very well integrated into the existing code. I think I understand why the solution didn’t work last time. This is because we had not marked the storage of thus contracts as full flattened so the reading always had to check in the tree to be sure in case of empty and the performance was not good. Now I mark the contract as full flattened so we can trust the storage of these contracts . This solution can normally improve performance and allow us to have something for the 11th without too much risk.\r\nFor the next steps we will have to prepare another solution in order to complete the flat database in a cleaner way.\r\nI think the solution will be to complete the flat database in the background after the snapsync. This makes it possible not to make the user wait for an endless initial sync. And this will be more acceptable for low power machines. The idea is not very complicated but it takes time to be implemented. And thanks to Gary’s snapshot it can be done. It will be very close to what geth is doing. Because they have their flat database filled after the initial sync too.\r\nThe idea is to validate the flat database by range after the sync. We take for example the leaf of the flat database between 0x0000..1 and 0x1111.1111\r\nThen it is necessary to generate the proof of the path 0x0000..1 and the proof of the path 0x1111.1111 . from Geth, when we start to fix the flat database, we iterate the persisted state data(accounts/storage slots) from database directly. It should be very fast since they are sequential read. Then we construct a range proof for them, to see if they are still matched with the trie root or not. If it’s matched, we move to the next segment, if not, we have to iterate the trie and persist the correct data to database. This procedure is slow.\r\nI think we can use that to fix the flat database as we have now the snapshot. When we fix the flat database for a specific snapshot we just have to apply the next trie log to reach the head and to have a valid flat database.\r\nThe initial tests that I did wanted to avoid doing this because with the latest version we will have to find a mechanism to not use the flat database for the ranges not yet fixed. So I think that putting the most used contracts in the flat database before launching this validation in the background can compensate this. Also the recent improvement we did reduce the importance of the flat database regarding the performance (empty sload, preload etc)\r\nmy summary  : I will try to have the filling of the flat database for the most used contracts with performance improvement for the next release. and that way we will have time with Gary to go further in the next step implementation and fix the flat database in the background. To do that I would like to do it with Gary because he did the snapshot and I think I would like to be in pair on this feature in order to move faster.\r\n\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/hyperledger/besu/issues/4636/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/hyperledger/besu/issues/4636/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/hyperledger/besu/issues/comments/1397249123",
    "html_url": "https://github.com/hyperledger/besu/issues/4636#issuecomment-1397249123",
    "issue_url": "https://api.github.com/repos/hyperledger/besu/issues/4636",
    "id": 1397249123,
    "node_id": "IC_kwDODE2jmc5TSFRj",
    "user": {
      "login": "non-fungible-nelson",
      "id": 85905982,
      "node_id": "MDQ6VXNlcjg1OTA1OTgy",
      "avatar_url": "https://avatars.githubusercontent.com/u/85905982?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/non-fungible-nelson",
      "html_url": "https://github.com/non-fungible-nelson",
      "followers_url": "https://api.github.com/users/non-fungible-nelson/followers",
      "following_url": "https://api.github.com/users/non-fungible-nelson/following{/other_user}",
      "gists_url": "https://api.github.com/users/non-fungible-nelson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/non-fungible-nelson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/non-fungible-nelson/subscriptions",
      "organizations_url": "https://api.github.com/users/non-fungible-nelson/orgs",
      "repos_url": "https://api.github.com/users/non-fungible-nelson/repos",
      "events_url": "https://api.github.com/users/non-fungible-nelson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/non-fungible-nelson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-19T16:25:05Z",
    "updated_at": "2023-01-19T16:25:05Z",
    "author_association": "CONTRIBUTOR",
    "body": "Updating for catch all Flat DB Issue\r\n\r\nReference: #4795 #4744 #4546 \r\n",
    "reactions": {
      "url": "https://api.github.com/repos/hyperledger/besu/issues/comments/1397249123/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/hyperledger/besu/issues/comments/1397252054",
    "html_url": "https://github.com/hyperledger/besu/issues/4636#issuecomment-1397252054",
    "issue_url": "https://api.github.com/repos/hyperledger/besu/issues/4636",
    "id": 1397252054,
    "node_id": "IC_kwDODE2jmc5TSF_W",
    "user": {
      "login": "non-fungible-nelson",
      "id": 85905982,
      "node_id": "MDQ6VXNlcjg1OTA1OTgy",
      "avatar_url": "https://avatars.githubusercontent.com/u/85905982?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/non-fungible-nelson",
      "html_url": "https://github.com/non-fungible-nelson",
      "followers_url": "https://api.github.com/users/non-fungible-nelson/followers",
      "following_url": "https://api.github.com/users/non-fungible-nelson/following{/other_user}",
      "gists_url": "https://api.github.com/users/non-fungible-nelson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/non-fungible-nelson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/non-fungible-nelson/subscriptions",
      "organizations_url": "https://api.github.com/users/non-fungible-nelson/orgs",
      "repos_url": "https://api.github.com/users/non-fungible-nelson/repos",
      "events_url": "https://api.github.com/users/non-fungible-nelson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/non-fungible-nelson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-19T16:26:21Z",
    "updated_at": "2023-01-19T16:26:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "Way forward for our approach @matkt @garyschulte \r\n\r\n3 caveats:\r\n1. Opt-in / non-automatic process for users \r\n2. Offline conversion only \r\n3. Fresh sync will always use flat DB\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/hyperledger/besu/issues/comments/1397252054/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
