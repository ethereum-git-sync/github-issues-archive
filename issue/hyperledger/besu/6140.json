{
  "url": "https://api.github.com/repos/hyperledger/besu/issues/6140",
  "repository_url": "https://api.github.com/repos/hyperledger/besu",
  "labels_url": "https://api.github.com/repos/hyperledger/besu/issues/6140/labels{/name}",
  "comments_url": "https://api.github.com/repos/hyperledger/besu/issues/6140/comments",
  "events_url": "https://api.github.com/repos/hyperledger/besu/issues/6140/events",
  "html_url": "https://github.com/hyperledger/besu/issues/6140",
  "id": 1981161345,
  "node_id": "I_kwDODE2jmc52Fh-B",
  "number": 6140,
  "title": "Chain head block is sometimes not available on the node that actually mined the block",
  "user": {
    "login": "matthew1001",
    "id": 6599269,
    "node_id": "MDQ6VXNlcjY1OTkyNjk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6599269?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/matthew1001",
    "html_url": "https://github.com/matthew1001",
    "followers_url": "https://api.github.com/users/matthew1001/followers",
    "following_url": "https://api.github.com/users/matthew1001/following{/other_user}",
    "gists_url": "https://api.github.com/users/matthew1001/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/matthew1001/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/matthew1001/subscriptions",
    "organizations_url": "https://api.github.com/users/matthew1001/orgs",
    "repos_url": "https://api.github.com/users/matthew1001/repos",
    "events_url": "https://api.github.com/users/matthew1001/events{/privacy}",
    "received_events_url": "https://api.github.com/users/matthew1001/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1537362490,
      "node_id": "MDU6TGFiZWwxNTM3MzYyNDkw",
      "url": "https://api.github.com/repos/hyperledger/besu/labels/bug",
      "name": "bug",
      "color": "d73a4a",
      "default": true,
      "description": "Something isn't working"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 7,
  "created_at": "2023-11-07T11:43:08Z",
  "updated_at": "2023-11-10T13:01:19Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "### Description\r\nI've been experiencing occasional `CHAIN_HEAD_NOT_AVAILABLE` errors in a single-validator QBFT chain. Adding some extra sysout logs to a local build I can see that when this happens, the failing check is logged out before the existing \"Produced [#block-number]\" log entry for that requested block:\r\n\r\n```\r\nMRW: Blockchain head returned nothing for the block hash 0x10b029608b21f63b34884b36e29030332200677ed4ad0890b46342c494e29753?\r\n2023-11-07 11:13:29.056+00:00 | BftProcessorExecutor-QBFT-0 | INFO  | QbftBesuControllerBuilder | Produced #5,182 / 21 tx / 11 pending / 40,001,640 (40.0%) gas / (0x10b029608b21f63b34884b36e29030332200677ed4ad0890b46342c494e29753)\r\n2023-11-07 11:13:29.094+00:00 | EthScheduler-Transactions-0 | WARN  | TransactionPool | rejecting transaction 0x140a7a8af4bd571fdbc251f11e92a84f6796728eff20bff704c1896865a8a87e due to chain head not available yet\r\n```\r\n\r\n### Accept\r\n\r\n### Steps to Reproduce (Bug)\r\n1. Create a 4 node QBFT chain.\r\n2. Only one of the nodes is a validator. On a single laptop this appears to be easy to recreate in 5-10 minutes, probably due to CPU load.\r\n3. Enabled transaction pool trace on the validator node\r\n4. Submit ~ 50TPS to a non-validator node\r\n5. After a short period of time you should hit `EthScheduler-Transactions-0 | TRACE  | TransactionPool | rejecting transaction`\r\n\r\n(Note that this error is a `WARN` error as of https://github.com/hyperledger/besu/issues/6126)\r\n\r\n**Expected behavior:**\r\nNo `CHAIN_HEAD_NOT_AVAILABLE` errors are seen in this sort of load testing\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/hyperledger/besu/issues/6140/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/hyperledger/besu/issues/6140/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/hyperledger/besu/issues/comments/1799019673",
    "html_url": "https://github.com/hyperledger/besu/issues/6140#issuecomment-1799019673",
    "issue_url": "https://api.github.com/repos/hyperledger/besu/issues/6140",
    "id": 1799019673,
    "node_id": "IC_kwDODE2jmc5rOtyZ",
    "user": {
      "login": "matthew1001",
      "id": 6599269,
      "node_id": "MDQ6VXNlcjY1OTkyNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6599269?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/matthew1001",
      "html_url": "https://github.com/matthew1001",
      "followers_url": "https://api.github.com/users/matthew1001/followers",
      "following_url": "https://api.github.com/users/matthew1001/following{/other_user}",
      "gists_url": "https://api.github.com/users/matthew1001/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/matthew1001/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/matthew1001/subscriptions",
      "organizations_url": "https://api.github.com/users/matthew1001/orgs",
      "repos_url": "https://api.github.com/users/matthew1001/repos",
      "events_url": "https://api.github.com/users/matthew1001/events{/privacy}",
      "received_events_url": "https://api.github.com/users/matthew1001/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-11-07T15:57:23Z",
    "updated_at": "2023-11-07T15:59:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "A few notes after initial investigation.\r\n\r\n- `DefaultBlockchain.appendBlock(...)` is synchronized, and calls `appendBlockHelper(...)` to update both the chain itself and the (`volatile`) `chainHeader` reference.\r\n- `TransactionPool.getChainHeadBlockHeader(...)` calls 2 methods in `DefaultBlockchain`:\r\n  - `getBlockHeader(...)`\r\n  - `getChainHeadHash(...)`\r\n  - Neither of these are `synchronized`\r\n\r\nI'm not sure if there is sufficient protection around the call to `getBlockHeader()` being called with the new `chainHeader` hash, but on a chain that hasn't yet committed the new block. `updater.commit()` is called at the end of `appendBlockHelper` but I think by this point `chainHeader` will have been updated to the new chain head, and a caller of `getBlockHeader(...)` could end up reading stale data with the new chain header.\r\n\r\nAs a side note, there is a block cache mechanism that is only used if `numberOfBlocksToCache != 0`, and after a quick skim through the code I can't see any paths that set it `>0`\r\n\r\n@fab-10 any thoughts? I'm currently running the same test with `getBlockHeader()` and `getChainHeadHash()` marked as `synchronized`. I'm not sure this is the fix needed, but it's just a quick way of proving if it is the logic described above that is causing the issue.",
    "reactions": {
      "url": "https://api.github.com/repos/hyperledger/besu/issues/comments/1799019673/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/hyperledger/besu/issues/comments/1801673818",
    "html_url": "https://github.com/hyperledger/besu/issues/6140#issuecomment-1801673818",
    "issue_url": "https://api.github.com/repos/hyperledger/besu/issues/6140",
    "id": 1801673818,
    "node_id": "IC_kwDODE2jmc5rY1xa",
    "user": {
      "login": "fab-10",
      "id": 91944855,
      "node_id": "U_kgDOBXr3lw",
      "avatar_url": "https://avatars.githubusercontent.com/u/91944855?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fab-10",
      "html_url": "https://github.com/fab-10",
      "followers_url": "https://api.github.com/users/fab-10/followers",
      "following_url": "https://api.github.com/users/fab-10/following{/other_user}",
      "gists_url": "https://api.github.com/users/fab-10/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fab-10/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fab-10/subscriptions",
      "organizations_url": "https://api.github.com/users/fab-10/orgs",
      "repos_url": "https://api.github.com/users/fab-10/repos",
      "events_url": "https://api.github.com/users/fab-10/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fab-10/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-11-08T11:10:34Z",
    "updated_at": "2023-11-08T11:10:34Z",
    "author_association": "CONTRIBUTOR",
    "body": "cc: @ahamlat for any perfomance implication of adding synchronization there.",
    "reactions": {
      "url": "https://api.github.com/repos/hyperledger/besu/issues/comments/1801673818/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/hyperledger/besu/issues/comments/1801681427",
    "html_url": "https://github.com/hyperledger/besu/issues/6140#issuecomment-1801681427",
    "issue_url": "https://api.github.com/repos/hyperledger/besu/issues/6140",
    "id": 1801681427,
    "node_id": "IC_kwDODE2jmc5rY3oT",
    "user": {
      "login": "fab-10",
      "id": 91944855,
      "node_id": "U_kgDOBXr3lw",
      "avatar_url": "https://avatars.githubusercontent.com/u/91944855?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fab-10",
      "html_url": "https://github.com/fab-10",
      "followers_url": "https://api.github.com/users/fab-10/followers",
      "following_url": "https://api.github.com/users/fab-10/following{/other_user}",
      "gists_url": "https://api.github.com/users/fab-10/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fab-10/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fab-10/subscriptions",
      "organizations_url": "https://api.github.com/users/fab-10/orgs",
      "repos_url": "https://api.github.com/users/fab-10/repos",
      "events_url": "https://api.github.com/users/fab-10/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fab-10/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-11-08T11:14:59Z",
    "updated_at": "2023-11-08T11:14:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "@matthew1001 how the tests are going? \r\nI am also thinking about an approach limited to the tx, that could retry, a bit later, the validation of a tx in case the data it needs is not yet available.",
    "reactions": {
      "url": "https://api.github.com/repos/hyperledger/besu/issues/comments/1801681427/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/hyperledger/besu/issues/comments/1801742806",
    "html_url": "https://github.com/hyperledger/besu/issues/6140#issuecomment-1801742806",
    "issue_url": "https://api.github.com/repos/hyperledger/besu/issues/6140",
    "id": 1801742806,
    "node_id": "IC_kwDODE2jmc5rZGnW",
    "user": {
      "login": "matthew1001",
      "id": 6599269,
      "node_id": "MDQ6VXNlcjY1OTkyNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6599269?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/matthew1001",
      "html_url": "https://github.com/matthew1001",
      "followers_url": "https://api.github.com/users/matthew1001/followers",
      "following_url": "https://api.github.com/users/matthew1001/following{/other_user}",
      "gists_url": "https://api.github.com/users/matthew1001/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/matthew1001/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/matthew1001/subscriptions",
      "organizations_url": "https://api.github.com/users/matthew1001/orgs",
      "repos_url": "https://api.github.com/users/matthew1001/repos",
      "events_url": "https://api.github.com/users/matthew1001/events{/privacy}",
      "received_events_url": "https://api.github.com/users/matthew1001/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-11-08T11:57:21Z",
    "updated_at": "2023-11-08T11:57:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "@fab-10 I've been running now for many hours and haven't recreated the problem. Before I could recreate within 20-30 minutes very reliably.\r\n\r\nNote that in the PR I've only added `synchronized` to `getBlockHeader()`, not `getChainHeadHash()`, as I don't think the latter is necessary.\r\n\r\nI did wonder about any performance side-effects, but I don't know if `getBlockHeader()` is on very performance-sensitive code paths. The codepath we are hitting this on is the path for adding a remote transaction. Ultimately, if the blocks and chain header need updating atomically then there needs to be a mutex of some sort.\r\n\r\nMy gut feel would be to see if performance testing for the next release shows a noticeable change, and if so this could be reverted and we'd be left with the same issue we currently have, to rethink a fix for.",
    "reactions": {
      "url": "https://api.github.com/repos/hyperledger/besu/issues/comments/1801742806/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/hyperledger/besu/issues/comments/1805278356",
    "html_url": "https://github.com/hyperledger/besu/issues/6140#issuecomment-1805278356",
    "issue_url": "https://api.github.com/repos/hyperledger/besu/issues/6140",
    "id": 1805278356,
    "node_id": "IC_kwDODE2jmc5rmlyU",
    "user": {
      "login": "ahamlat",
      "id": 5099602,
      "node_id": "MDQ6VXNlcjUwOTk2MDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5099602?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ahamlat",
      "html_url": "https://github.com/ahamlat",
      "followers_url": "https://api.github.com/users/ahamlat/followers",
      "following_url": "https://api.github.com/users/ahamlat/following{/other_user}",
      "gists_url": "https://api.github.com/users/ahamlat/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ahamlat/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ahamlat/subscriptions",
      "organizations_url": "https://api.github.com/users/ahamlat/orgs",
      "repos_url": "https://api.github.com/users/ahamlat/repos",
      "events_url": "https://api.github.com/users/ahamlat/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ahamlat/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-11-10T08:14:01Z",
    "updated_at": "2023-11-10T08:18:20Z",
    "author_association": "CONTRIBUTOR",
    "body": "@matthew1001 Regarding block cache and when numberOfBlocksToCache is set, you can check this PR https://github.com/hyperledger/besu/pull/6009. This field is initialized when Besu is started with --cache-last-blocks=n. This is specifically done [here](https://github.com/hyperledger/besu/pull/6009/files#diff-14e02856112fab7c80427ea9ec850bab862108675d799736383e02069ec1be41L589) when BesuControllerBuilder creates the blockchain object.",
    "reactions": {
      "url": "https://api.github.com/repos/hyperledger/besu/issues/comments/1805278356/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/hyperledger/besu/issues/comments/1805324122",
    "html_url": "https://github.com/hyperledger/besu/issues/6140#issuecomment-1805324122",
    "issue_url": "https://api.github.com/repos/hyperledger/besu/issues/6140",
    "id": 1805324122,
    "node_id": "IC_kwDODE2jmc5rmw9a",
    "user": {
      "login": "matthew1001",
      "id": 6599269,
      "node_id": "MDQ6VXNlcjY1OTkyNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6599269?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/matthew1001",
      "html_url": "https://github.com/matthew1001",
      "followers_url": "https://api.github.com/users/matthew1001/followers",
      "following_url": "https://api.github.com/users/matthew1001/following{/other_user}",
      "gists_url": "https://api.github.com/users/matthew1001/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/matthew1001/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/matthew1001/subscriptions",
      "organizations_url": "https://api.github.com/users/matthew1001/orgs",
      "repos_url": "https://api.github.com/users/matthew1001/repos",
      "events_url": "https://api.github.com/users/matthew1001/events{/privacy}",
      "received_events_url": "https://api.github.com/users/matthew1001/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-11-10T08:48:09Z",
    "updated_at": "2023-11-10T08:48:09Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks @ahamlat for the info, I wasn't aware of the new option. We might give that a try in some of our performance tests with something small like `--cache-last-blocks=48` to see if we observe an improvement in high-throughput tests. We're also looking at whether `eth_getBlockReceipts` gives us improvements in our applications, and that might reduce the benefit of `--cache-last-blocks` since getting TX receipts make up a lot of application calls in some tests.",
    "reactions": {
      "url": "https://api.github.com/repos/hyperledger/besu/issues/comments/1805324122/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/hyperledger/besu/issues/comments/1805690731",
    "html_url": "https://github.com/hyperledger/besu/issues/6140#issuecomment-1805690731",
    "issue_url": "https://api.github.com/repos/hyperledger/besu/issues/6140",
    "id": 1805690731,
    "node_id": "IC_kwDODE2jmc5roKdr",
    "user": {
      "login": "ahamlat",
      "id": 5099602,
      "node_id": "MDQ6VXNlcjUwOTk2MDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5099602?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ahamlat",
      "html_url": "https://github.com/ahamlat",
      "followers_url": "https://api.github.com/users/ahamlat/followers",
      "following_url": "https://api.github.com/users/ahamlat/following{/other_user}",
      "gists_url": "https://api.github.com/users/ahamlat/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ahamlat/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ahamlat/subscriptions",
      "organizations_url": "https://api.github.com/users/ahamlat/orgs",
      "repos_url": "https://api.github.com/users/ahamlat/repos",
      "events_url": "https://api.github.com/users/ahamlat/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ahamlat/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-11-10T13:01:19Z",
    "updated_at": "2023-11-10T13:01:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "Actually --cache-last-blocks=n blocks will improve a lot eth_getBlockReceipts with the current implementation, and even better once the implementation is reviewed as I suggested in Discord, because this options also caches the receipts ",
    "reactions": {
      "url": "https://api.github.com/repos/hyperledger/besu/issues/comments/1805690731/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
