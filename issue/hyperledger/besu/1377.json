{
  "url": "https://api.github.com/repos/hyperledger/besu/issues/1377",
  "repository_url": "https://api.github.com/repos/hyperledger/besu",
  "labels_url": "https://api.github.com/repos/hyperledger/besu/issues/1377/labels{/name}",
  "comments_url": "https://api.github.com/repos/hyperledger/besu/issues/1377/comments",
  "events_url": "https://api.github.com/repos/hyperledger/besu/issues/1377/events",
  "html_url": "https://github.com/hyperledger/besu/issues/1377",
  "id": 699145915,
  "node_id": "MDU6SXNzdWU2OTkxNDU5MTU=",
  "number": 1377,
  "title": "Pre-deployed contract constructor code not executing correctly",
  "user": {
    "login": "fmfmartins",
    "id": 14879002,
    "node_id": "MDQ6VXNlcjE0ODc5MDAy",
    "avatar_url": "https://avatars.githubusercontent.com/u/14879002?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/fmfmartins",
    "html_url": "https://github.com/fmfmartins",
    "followers_url": "https://api.github.com/users/fmfmartins/followers",
    "following_url": "https://api.github.com/users/fmfmartins/following{/other_user}",
    "gists_url": "https://api.github.com/users/fmfmartins/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/fmfmartins/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/fmfmartins/subscriptions",
    "organizations_url": "https://api.github.com/users/fmfmartins/orgs",
    "repos_url": "https://api.github.com/users/fmfmartins/repos",
    "events_url": "https://api.github.com/users/fmfmartins/events{/privacy}",
    "received_events_url": "https://api.github.com/users/fmfmartins/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2020-09-11T10:33:14Z",
  "updated_at": "2023-01-29T02:34:45Z",
  "closed_at": "2020-09-16T09:10:16Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "<!-- Have you done the following? -->\r\n<!--   * read the Code of Conduct? By filing an Issue, you are expected to -->  \r\n<!--     comply with it, including treating everyone with respect: -->\r\n<!--     https://github.com/hyperledger/besu/blob/master/CODE-OF-CONDUCT.md -->\r\n<!--   * Reproduced the issue in the latest version of the software -->\r\n<!--   * Read the debugging wiki: https://github.com/hyperledger/besu/wiki/debugging -->\r\n<!--   * Duplicate Issue check:  https://github.com/search?q=+is%3Aissue+repo%3Ahyperledger/Besu -->\r\n<!-- Note:  Not all sections will apply to all issue types. -->\r\n\r\n### Description\r\nI'd like to pre-deploy a smart contract running its constructor code through a custom genesis file.\r\n\r\n### Steps to Reproduce (Bug)\r\n\r\nTake for instance: \r\n\r\n```\r\npragma solidity ^0.5.0;\r\n\r\ncontract Redirect {\r\n    \r\n    address public owner;\r\n    address payable public pool;\r\n    \r\n    constructor () public{\r\n        owner = msg.sender;\r\n         pool = 0x56221D506e1b9F72b7Bf13261C2942A907E169BE;\r\n    }\r\n\r\n    event Received(address, uint);\r\n    \r\n    function () external payable {\r\n        pool.transfer(msg.value);\r\n        emit Received(msg.sender, msg.value);\r\n    }\r\n}\r\n```\r\n\r\nWhen I compile that contract through truffle and get its `bytecode` so that I add it to the genesis file \r\n\r\n```json\r\n\"0x9100b22bf20BD404798BBAd355208B87D8437932\": {\r\n      \"balance\": \"0\",\r\n      \"comment\": \"redirect with constructor\",\r\n      \"code\": \"0x608060405234801561001057600080fd5b50600080546001600160a01b03199081163317909155600180549091167356221d506e1b9f72b7bf13261c2942a907e169be179055610125806100546000396000f3fe60806040526004361060265760003560e01c806316f0115b14609b5780638da5cb5b1460c9575b6001546040516001600160a01b03909116903480156108fc02916000818181858888f19350505050158015605e573d6000803e3d6000fd5b506040805133815234602082015281517f88a5966d370b9919b20f3e2c13ff65706f196a4e32cc2c12bf57088f88525874929181900390910190a1005b34801560a657600080fd5b5060ad60db565b604080516001600160a01b039092168252519081900360200190f35b34801560d457600080fd5b5060ad60ea565b6001546001600160a01b031681565b6000546001600160a01b03168156fea165627a7a723058209938f95efe5d2aae06b4783f556f4129b0b231ac90ff78c2a98e6279d6b664200029\"\r\n}\r\n```\r\n\r\nThen interact with it using `truffle console`..\r\n\r\n\r\n\r\n\r\n**Expected behavior:** [What you expect to happen]\r\n\r\n```node\r\ntruffle(development)> let p = await Redirect.at('0x9100b22bf20BD404798BBAd355208B87D8437932')\r\ntruffle(development)> await p.pool()\r\n'0x56221D506e1b9F72b7Bf13261C2942A907E169BE'\r\n```\r\n\r\n\r\n**Actual behavior:** [What actually happens]\r\n\r\n```node\r\ntruffle(development)> let p = await Redirect.at('0x9100b22bf20BD404798BBAd355208B87D8437932')\r\ntruffle(development)> await p.pool()\r\n'0x60003560E01c806316F0115b14609b5780638dA5'\r\n```\r\n\r\n### Versions (Add all that apply)\r\n\r\nTruffle v5.1.14-nodeLTS.0 (core: 5.1.13)\r\nSolidity - 0.5.7 (solc-js)\r\nNode v12.18.3\r\nWeb3.js v1.2.1\r\n\r\n### Additional Information\r\n\r\nIf I deploy the contract through a regular migration, I get the expected result.\r\n\r\nDocker-compose:\r\n\r\n```yaml\r\n  besu:\r\n    image: hyperledger/besu:latest\r\n    command:\r\n      --data-path=/tmp/tmpDatdir\r\n      --genesis-file=\"/home/besu/genesis.json\"\r\n      --host-allowlist=\"*\"\r\n      --miner-coinbase=0x0000000000000000000000000000000000000000\r\n      --miner-enabled\r\n      --min-gas-price=0\r\n      --revert-reason-enabled\r\n      --rpc-http-api=ETH,NET,WEB3,TRACE,TXPOOL,MINER,DEBUG\r\n      --rpc-http-cors-origins=\"all\"\r\n      --rpc-http-enabled\r\n    ports:\r\n      - 8545:8545\r\n    volumes:\r\n      - ./.docker/besu/genesis.json:/home/besu/genesis.json\r\n```\r\n\r\n",
  "closed_by": {
    "login": "fmfmartins",
    "id": 14879002,
    "node_id": "MDQ6VXNlcjE0ODc5MDAy",
    "avatar_url": "https://avatars.githubusercontent.com/u/14879002?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/fmfmartins",
    "html_url": "https://github.com/fmfmartins",
    "followers_url": "https://api.github.com/users/fmfmartins/followers",
    "following_url": "https://api.github.com/users/fmfmartins/following{/other_user}",
    "gists_url": "https://api.github.com/users/fmfmartins/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/fmfmartins/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/fmfmartins/subscriptions",
    "organizations_url": "https://api.github.com/users/fmfmartins/orgs",
    "repos_url": "https://api.github.com/users/fmfmartins/repos",
    "events_url": "https://api.github.com/users/fmfmartins/events{/privacy}",
    "received_events_url": "https://api.github.com/users/fmfmartins/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/hyperledger/besu/issues/1377/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/hyperledger/besu/issues/1377/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/hyperledger/besu/issues/comments/692385541",
    "html_url": "https://github.com/hyperledger/besu/issues/1377#issuecomment-692385541",
    "issue_url": "https://api.github.com/repos/hyperledger/besu/issues/1377",
    "id": 692385541,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5MjM4NTU0MQ==",
    "user": {
      "login": "shemnon",
      "id": 38109,
      "node_id": "MDQ6VXNlcjM4MTA5",
      "avatar_url": "https://avatars.githubusercontent.com/u/38109?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shemnon",
      "html_url": "https://github.com/shemnon",
      "followers_url": "https://api.github.com/users/shemnon/followers",
      "following_url": "https://api.github.com/users/shemnon/following{/other_user}",
      "gists_url": "https://api.github.com/users/shemnon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shemnon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shemnon/subscriptions",
      "organizations_url": "https://api.github.com/users/shemnon/orgs",
      "repos_url": "https://api.github.com/users/shemnon/repos",
      "events_url": "https://api.github.com/users/shemnon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shemnon/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-15T00:18:10Z",
    "updated_at": "2020-09-15T00:18:10Z",
    "author_association": "MEMBER",
    "body": "genesis blocks do not run pre-deployment code, it's not something that can be done well.\r\n\r\nOne alternative would be to capture the state that resulted from the contract initialization and adding that state as part of the genesis.json.  Our `alloc` statement accepts a `storage` item that is key-value from memory to values.  Here is an example: https://github.com/hyperledger/besu/blob/f64fbad08e66af4d7427bad04bd15df4499200a2/ethereum/evmtool/src/test/benchmarks/evmtool-genesis.json#L74 as well as https://github.com/hyperledger/besu/blob/d6a2394e2d4313f46b47e3ad60566e69ca8e20a4/ethereum/permissioning/src/test/resources/TransactionSmartContractPermissioningControllerTest/preseededSmartPermissioning.json",
    "reactions": {
      "url": "https://api.github.com/repos/hyperledger/besu/issues/comments/692385541/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 1
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/hyperledger/besu/issues/comments/693278690",
    "html_url": "https://github.com/hyperledger/besu/issues/1377#issuecomment-693278690",
    "issue_url": "https://api.github.com/repos/hyperledger/besu/issues/1377",
    "id": 693278690,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5MzI3ODY5MA==",
    "user": {
      "login": "fmfmartins",
      "id": 14879002,
      "node_id": "MDQ6VXNlcjE0ODc5MDAy",
      "avatar_url": "https://avatars.githubusercontent.com/u/14879002?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fmfmartins",
      "html_url": "https://github.com/fmfmartins",
      "followers_url": "https://api.github.com/users/fmfmartins/followers",
      "following_url": "https://api.github.com/users/fmfmartins/following{/other_user}",
      "gists_url": "https://api.github.com/users/fmfmartins/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fmfmartins/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fmfmartins/subscriptions",
      "organizations_url": "https://api.github.com/users/fmfmartins/orgs",
      "repos_url": "https://api.github.com/users/fmfmartins/repos",
      "events_url": "https://api.github.com/users/fmfmartins/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fmfmartins/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-16T09:10:16Z",
    "updated_at": "2020-09-16T09:10:16Z",
    "author_association": "NONE",
    "body": "The alternative that you provided seems to have worked.\r\nThank you.",
    "reactions": {
      "url": "https://api.github.com/repos/hyperledger/besu/issues/comments/693278690/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 1,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/hyperledger/besu/issues/comments/1101068444",
    "html_url": "https://github.com/hyperledger/besu/issues/1377#issuecomment-1101068444",
    "issue_url": "https://api.github.com/repos/hyperledger/besu/issues/1377",
    "id": 1101068444,
    "node_id": "IC_kwDODE2jmc5BoPic",
    "user": {
      "login": "vaigay",
      "id": 77449930,
      "node_id": "MDQ6VXNlcjc3NDQ5OTMw",
      "avatar_url": "https://avatars.githubusercontent.com/u/77449930?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vaigay",
      "html_url": "https://github.com/vaigay",
      "followers_url": "https://api.github.com/users/vaigay/followers",
      "following_url": "https://api.github.com/users/vaigay/following{/other_user}",
      "gists_url": "https://api.github.com/users/vaigay/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vaigay/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vaigay/subscriptions",
      "organizations_url": "https://api.github.com/users/vaigay/orgs",
      "repos_url": "https://api.github.com/users/vaigay/repos",
      "events_url": "https://api.github.com/users/vaigay/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vaigay/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-18T04:03:24Z",
    "updated_at": "2022-04-18T04:03:24Z",
    "author_association": "NONE",
    "body": "> genesis blocks do not run pre-deployment code, it's not something that can be done well.\r\n> \r\n> One alternative would be to capture the state that resulted from the contract initialization and adding that state as part of the genesis.json. Our `alloc` statement accepts a `storage` item that is key-value from memory to values. Here is an example:\r\n> \r\n> https://github.com/hyperledger/besu/blob/f64fbad08e66af4d7427bad04bd15df4499200a2/ethereum/evmtool/src/test/benchmarks/evmtool-genesis.json#L74\r\n> \r\n> as well as https://github.com/hyperledger/besu/blob/d6a2394e2d4313f46b47e3ad60566e69ca8e20a4/ethereum/permissioning/src/test/resources/TransactionSmartContractPermissioningControllerTest/preseededSmartPermissioning.json\r\n\r\nCan you show me how to get hash key of each key-value in storage? Thank you very much\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/hyperledger/besu/issues/comments/1101068444/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/hyperledger/besu/issues/comments/1407542320",
    "html_url": "https://github.com/hyperledger/besu/issues/1377#issuecomment-1407542320",
    "issue_url": "https://api.github.com/repos/hyperledger/besu/issues/1377",
    "id": 1407542320,
    "node_id": "IC_kwDODE2jmc5T5WQw",
    "user": {
      "login": "cauta",
      "id": 15400058,
      "node_id": "MDQ6VXNlcjE1NDAwMDU4",
      "avatar_url": "https://avatars.githubusercontent.com/u/15400058?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cauta",
      "html_url": "https://github.com/cauta",
      "followers_url": "https://api.github.com/users/cauta/followers",
      "following_url": "https://api.github.com/users/cauta/following{/other_user}",
      "gists_url": "https://api.github.com/users/cauta/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cauta/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cauta/subscriptions",
      "organizations_url": "https://api.github.com/users/cauta/orgs",
      "repos_url": "https://api.github.com/users/cauta/repos",
      "events_url": "https://api.github.com/users/cauta/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cauta/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-29T02:34:45Z",
    "updated_at": "2023-01-29T02:34:45Z",
    "author_association": "NONE",
    "body": "@vaigay how can we compute the hash key? Did you find a way?",
    "reactions": {
      "url": "https://api.github.com/repos/hyperledger/besu/issues/comments/1407542320/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
