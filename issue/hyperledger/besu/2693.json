{
  "url": "https://api.github.com/repos/hyperledger/besu/issues/2693",
  "repository_url": "https://api.github.com/repos/hyperledger/besu",
  "labels_url": "https://api.github.com/repos/hyperledger/besu/issues/2693/labels{/name}",
  "comments_url": "https://api.github.com/repos/hyperledger/besu/issues/2693/comments",
  "events_url": "https://api.github.com/repos/hyperledger/besu/issues/2693/events",
  "html_url": "https://github.com/hyperledger/besu/issues/2693",
  "id": 982463553,
  "node_id": "MDU6SXNzdWU5ODI0NjM1NTM=",
  "number": 2693,
  "title": "Flexible Privacy Group can not unlock.",
  "user": {
    "login": "hkiridera",
    "id": 19867156,
    "node_id": "MDQ6VXNlcjE5ODY3MTU2",
    "avatar_url": "https://avatars.githubusercontent.com/u/19867156?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hkiridera",
    "html_url": "https://github.com/hkiridera",
    "followers_url": "https://api.github.com/users/hkiridera/followers",
    "following_url": "https://api.github.com/users/hkiridera/following{/other_user}",
    "gists_url": "https://api.github.com/users/hkiridera/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hkiridera/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hkiridera/subscriptions",
    "organizations_url": "https://api.github.com/users/hkiridera/orgs",
    "repos_url": "https://api.github.com/users/hkiridera/repos",
    "events_url": "https://api.github.com/users/hkiridera/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hkiridera/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1537362490,
      "node_id": "MDU6TGFiZWwxNTM3MzYyNDkw",
      "url": "https://api.github.com/repos/hyperledger/besu/labels/bug",
      "name": "bug",
      "color": "d73a4a",
      "default": true,
      "description": "Something isn't working"
    },
    {
      "id": 1740324632,
      "node_id": "MDU6TGFiZWwxNzQwMzI0NjMy",
      "url": "https://api.github.com/repos/hyperledger/besu/labels/privacy",
      "name": "privacy",
      "color": "d7f99a",
      "default": false,
      "description": "private transactions"
    },
    {
      "id": 2051683573,
      "node_id": "MDU6TGFiZWwyMDUxNjgzNTcz",
      "url": "https://api.github.com/repos/hyperledger/besu/labels/P3",
      "name": "P3",
      "color": "ffff00",
      "default": false,
      "description": "Medium (ex: JSON-RPC request not working with a specific client library due to loose spec assumtion)"
    },
    {
      "id": 2152224197,
      "node_id": "MDU6TGFiZWwyMTUyMjI0MTk3",
      "url": "https://api.github.com/repos/hyperledger/besu/labels/TeamRevenant",
      "name": "TeamRevenant",
      "color": "78e298",
      "default": false,
      "description": "GH issues worked on by Revenant Team"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": {
    "login": "taccatisid",
    "id": 88524035,
    "node_id": "MDQ6VXNlcjg4NTI0MDM1",
    "avatar_url": "https://avatars.githubusercontent.com/u/88524035?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/taccatisid",
    "html_url": "https://github.com/taccatisid",
    "followers_url": "https://api.github.com/users/taccatisid/followers",
    "following_url": "https://api.github.com/users/taccatisid/following{/other_user}",
    "gists_url": "https://api.github.com/users/taccatisid/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/taccatisid/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/taccatisid/subscriptions",
    "organizations_url": "https://api.github.com/users/taccatisid/orgs",
    "repos_url": "https://api.github.com/users/taccatisid/repos",
    "events_url": "https://api.github.com/users/taccatisid/events{/privacy}",
    "received_events_url": "https://api.github.com/users/taccatisid/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "taccatisid",
      "id": 88524035,
      "node_id": "MDQ6VXNlcjg4NTI0MDM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/88524035?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/taccatisid",
      "html_url": "https://github.com/taccatisid",
      "followers_url": "https://api.github.com/users/taccatisid/followers",
      "following_url": "https://api.github.com/users/taccatisid/following{/other_user}",
      "gists_url": "https://api.github.com/users/taccatisid/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/taccatisid/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/taccatisid/subscriptions",
      "organizations_url": "https://api.github.com/users/taccatisid/orgs",
      "repos_url": "https://api.github.com/users/taccatisid/repos",
      "events_url": "https://api.github.com/users/taccatisid/events{/privacy}",
      "received_events_url": "https://api.github.com/users/taccatisid/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2021-08-30T07:05:31Z",
  "updated_at": "2021-09-13T00:21:13Z",
  "closed_at": "2021-09-13T00:21:13Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "# summary\r\n\r\n- This occurs when flexiblePrivacyGroup is used.\r\n- If the lock is acquired with setLockState, it cannot be unlocked.\r\n\r\n# Steps to Reproduce\r\n\r\n- Launches the besu container, which is available in flexible privacy group mode.\r\n- create a privacy group.\r\n- get the lock with lock function.\r\n- release the lock with unlock function, but it can't release the lock.\r\n\r\n## sample script\r\n```\r\nconst Web3 = require(\"web3\");\r\nconst EEAClient = require(\"web3js-quorum\");\r\n\r\nconst { tessera, besu } = require(\"../config/keys.js\");\r\n\r\nconst node1 = new EEAClient(new Web3(besu.node1.url));\r\n\r\nconst privacyProxyAbi = require(\"./PrivacyProxy.json\").output.abi\r\n// https://github.com/ConsenSys/web3js-quorum/blob/master/solidity/PrivacyProxy.json\r\n\r\nmodule.exports = async () => {\r\n  const onChainPrivacyGroupCreationResult = await node1.eth.flexiblePrivacyGroup.create(\r\n    {\r\n      participants: [tessera.node1.publicKey, tessera.node2.publicKey],\r\n      enclaveKey: tessera.node1.publicKey,\r\n      privateKey: besu.node1.privateKey\r\n    }\r\n  );\r\n  console.log(\"Created new on-chain privacy group:\");\r\n  console.log(onChainPrivacyGroupCreationResult.privacyGroupId);\r\n\r\n  console.log(\"-- canExecute before lock--\")\r\n  await canExecute(node1, {\r\n      enclaveKey: tessera.node1.publicKey,\r\n      privacyGroupId: onChainPrivacyGroupCreationResult.privacyGroupId,\r\n      privateKey: besu.node1.privateKey\r\n    }\r\n  )\r\n  \r\n  console.log(\"-- get lock --\")\r\n  await setLockState(node1, {\r\n      enclaveKey: tessera.node1.publicKey,\r\n      privacyGroupId: onChainPrivacyGroupCreationResult.privacyGroupId,\r\n      privateKey: besu.node1.privateKey,\r\n      lock: true\r\n    }\r\n  )\r\n\r\n  console.log(\"-- canExecute after lock--\")\r\n  await canExecute(node1, {\r\n      enclaveKey: tessera.node1.publicKey,\r\n      privacyGroupId: onChainPrivacyGroupCreationResult.privacyGroupId,\r\n      privateKey: besu.node1.privateKey\r\n    }\r\n  )\r\n\r\n  console.log(\"-- get unlock --\")\r\n  await setLockState(node1, {\r\n      enclaveKey: tessera.node1.publicKey,\r\n      privacyGroupId: onChainPrivacyGroupCreationResult.privacyGroupId,\r\n      privateKey: besu.node1.privateKey,\r\n      lock: false\r\n    }\r\n  )\r\n\r\n  console.log(\"-- canExecute after unlock--\")\r\n  await canExecute(node1, {\r\n      enclaveKey: tessera.node1.publicKey,\r\n      privacyGroupId: onChainPrivacyGroupCreationResult.privacyGroupId,\r\n      privateKey: besu.node1.privateKey\r\n    }\r\n  )\r\n}\r\n\r\nasync function setLockState(web3, options) {\r\n  const contract = new web3.eth.Contract(privacyProxyAbi);\r\n  const functionAbi = contract._jsonInterface.find((e) => {\r\n    return e.name === (options.lock ? \"lock\" : \"unlock\");\r\n  });\r\n\r\n  const functionCall = {\r\n    to: \"0x000000000000000000000000000000000000007c\",\r\n    data: functionAbi.signature,\r\n    privateFrom: options.enclaveKey,\r\n    privacyGroupId: options.privacyGroupId,\r\n    privateKey: options.privateKey,\r\n  };\r\n\r\n  let transactionHash = await web3.priv.generateAndSendRawTransaction(functionCall)\r\n  let transactionReceipt = await web3.priv.waitForTransactionReceipt(transactionHash);\r\n  console.log(\"TransactionReceipt.status: \", transactionReceipt.status)\r\n  console.log(\"TransactionReceipt.output: \", transactionReceipt.output)\r\n}\r\n\r\nasync function canExecute(web3, options) {\r\n  const contract = new web3.eth.Contract(privacyProxyAbi);\r\n  const functionAbi = contract._jsonInterface.find((e) => {\r\n    return e.name === (\"canExecute\");\r\n  });\r\n\r\n  const functionCall = {\r\n    to: \"0x000000000000000000000000000000000000007c\",\r\n    data: functionAbi.signature,\r\n    privateFrom: options.enclaveKey,\r\n    privacyGroupId: options.privacyGroupId,\r\n    privateKey: options.privateKey,\r\n  };\r\n\r\n  let transactionHash = await web3.priv.generateAndSendRawTransaction(functionCall)\r\n  let transactionReceipt = await web3.priv.waitForTransactionReceipt(transactionHash);\r\n  console.log(\"TransactionReceipt.status: \", transactionReceipt.status)\r\n  console.log(\"TransactionReceipt.output: \", transactionReceipt.output)\r\n}\r\n\r\nif (require.main === module) {\r\n  module.exports();\r\n}\r\n```\r\n\r\n## console log\r\n```\r\nWaiting for transaction to be mined ...\r\nCreated new on-chain privacy group:\r\nbHPtl5dGLKn/hOUv5Uq7h7VRSJNPe8IT07Kk1H9kcEI=\r\n-- canExecute before lock--\r\nWaiting for transaction to be mined ...\r\nTransactionReceipt.status:  0x1\r\nTransactionReceipt.output:  0x0000000000000000000000000000000000000000000000000000000000000001\r\n-- get lock --\r\nWaiting for transaction to be mined ...\r\nTransactionReceipt.status:  0x1\r\nTransactionReceipt.output:  0x\r\n-- canExecute after lock--\r\nWaiting for transaction to be mined ...\r\nTransactionReceipt.status:  0x0\r\nTransactionReceipt.output:  0x\r\n-- get unlock --\r\nWaiting for transaction to be mined ...\r\nTransactionReceipt.status:  0x0\r\nTransactionReceipt.output:  0x\r\n-- canExecute after unlock--\r\nWaiting for transaction to be mined ...\r\nTransactionReceipt.status:  0x0\r\nTransactionReceipt.output:  0x\r\n```\r\n\r\n# Versions \r\n- BESU: besu/v21.7.2/linux-x86_64/adoptopenjdk-java-11\r\n- web3js-quorum: 21.7.0-rc1",
  "closed_by": {
    "login": "macfarla",
    "id": 2627919,
    "node_id": "MDQ6VXNlcjI2Mjc5MTk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2627919?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/macfarla",
    "html_url": "https://github.com/macfarla",
    "followers_url": "https://api.github.com/users/macfarla/followers",
    "following_url": "https://api.github.com/users/macfarla/following{/other_user}",
    "gists_url": "https://api.github.com/users/macfarla/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/macfarla/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/macfarla/subscriptions",
    "organizations_url": "https://api.github.com/users/macfarla/orgs",
    "repos_url": "https://api.github.com/users/macfarla/repos",
    "events_url": "https://api.github.com/users/macfarla/events{/privacy}",
    "received_events_url": "https://api.github.com/users/macfarla/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/hyperledger/besu/issues/2693/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/hyperledger/besu/issues/2693/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/hyperledger/besu/issues/comments/908966823",
    "html_url": "https://github.com/hyperledger/besu/issues/2693#issuecomment-908966823",
    "issue_url": "https://api.github.com/repos/hyperledger/besu/issues/2693",
    "id": 908966823,
    "node_id": "IC_kwDODE2jmc42Lbun",
    "user": {
      "login": "macfarla",
      "id": 2627919,
      "node_id": "MDQ6VXNlcjI2Mjc5MTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2627919?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/macfarla",
      "html_url": "https://github.com/macfarla",
      "followers_url": "https://api.github.com/users/macfarla/followers",
      "following_url": "https://api.github.com/users/macfarla/following{/other_user}",
      "gists_url": "https://api.github.com/users/macfarla/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/macfarla/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/macfarla/subscriptions",
      "organizations_url": "https://api.github.com/users/macfarla/orgs",
      "repos_url": "https://api.github.com/users/macfarla/repos",
      "events_url": "https://api.github.com/users/macfarla/events{/privacy}",
      "received_events_url": "https://api.github.com/users/macfarla/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-31T07:16:44Z",
    "updated_at": "2021-08-31T07:16:44Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks for reporting this, we will look into it!",
    "reactions": {
      "url": "https://api.github.com/repos/hyperledger/besu/issues/comments/908966823/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
