{
  "url": "https://api.github.com/repos/hyperledger/besu/issues/5147",
  "repository_url": "https://api.github.com/repos/hyperledger/besu",
  "labels_url": "https://api.github.com/repos/hyperledger/besu/issues/5147/labels{/name}",
  "comments_url": "https://api.github.com/repos/hyperledger/besu/issues/5147/comments",
  "events_url": "https://api.github.com/repos/hyperledger/besu/issues/5147/events",
  "html_url": "https://github.com/hyperledger/besu/issues/5147",
  "id": 1606591999,
  "node_id": "I_kwDODE2jmc5fwqX_",
  "number": 5147,
  "title": "Calls to eth_gasEstimate and eth_call being cached somewhere?",
  "user": {
    "login": "antonydenyer",
    "id": 469160,
    "node_id": "MDQ6VXNlcjQ2OTE2MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/469160?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/antonydenyer",
    "html_url": "https://github.com/antonydenyer",
    "followers_url": "https://api.github.com/users/antonydenyer/followers",
    "following_url": "https://api.github.com/users/antonydenyer/following{/other_user}",
    "gists_url": "https://api.github.com/users/antonydenyer/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/antonydenyer/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/antonydenyer/subscriptions",
    "organizations_url": "https://api.github.com/users/antonydenyer/orgs",
    "repos_url": "https://api.github.com/users/antonydenyer/repos",
    "events_url": "https://api.github.com/users/antonydenyer/events{/privacy}",
    "received_events_url": "https://api.github.com/users/antonydenyer/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1537362490,
      "node_id": "MDU6TGFiZWwxNTM3MzYyNDkw",
      "url": "https://api.github.com/repos/hyperledger/besu/labels/bug",
      "name": "bug",
      "color": "d73a4a",
      "default": true,
      "description": "Something isn't working"
    },
    {
      "id": 1921587647,
      "node_id": "MDU6TGFiZWwxOTIxNTg3NjQ3",
      "url": "https://api.github.com/repos/hyperledger/besu/labels/TeamGroot",
      "name": "TeamGroot",
      "color": "1d76db",
      "default": false,
      "description": "GH issues worked on by Groot Team"
    },
    {
      "id": 4609582991,
      "node_id": "LA_kwDODE2jmc8AAAABEsCnjw",
      "url": "https://api.github.com/repos/hyperledger/besu/labels/RPC",
      "name": "RPC",
      "color": "1d76db",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": {
    "login": "jframe",
    "id": 909467,
    "node_id": "MDQ6VXNlcjkwOTQ2Nw==",
    "avatar_url": "https://avatars.githubusercontent.com/u/909467?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jframe",
    "html_url": "https://github.com/jframe",
    "followers_url": "https://api.github.com/users/jframe/followers",
    "following_url": "https://api.github.com/users/jframe/following{/other_user}",
    "gists_url": "https://api.github.com/users/jframe/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jframe/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jframe/subscriptions",
    "organizations_url": "https://api.github.com/users/jframe/orgs",
    "repos_url": "https://api.github.com/users/jframe/repos",
    "events_url": "https://api.github.com/users/jframe/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jframe/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "jframe",
      "id": 909467,
      "node_id": "MDQ6VXNlcjkwOTQ2Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/909467?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jframe",
      "html_url": "https://github.com/jframe",
      "followers_url": "https://api.github.com/users/jframe/followers",
      "following_url": "https://api.github.com/users/jframe/following{/other_user}",
      "gists_url": "https://api.github.com/users/jframe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jframe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jframe/subscriptions",
      "organizations_url": "https://api.github.com/users/jframe/orgs",
      "repos_url": "https://api.github.com/users/jframe/repos",
      "events_url": "https://api.github.com/users/jframe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jframe/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 3,
  "created_at": "2023-03-02T11:04:24Z",
  "updated_at": "2023-04-17T09:53:49Z",
  "closed_at": "2023-04-17T09:53:48Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "When investigating improvements to eth_gasEstimate as part of https://github.com/hyperledger/besu/pull/5142 I found the following strange issue.\r\n\r\n\r\nOn goerli I have deployed the following contract at address `0x9AAe0D2009a14cB6c1140a9C5715Bb345690b0da` \r\n\r\n## Note!!! There are currently no other transactions to this contract at time of writing. ##\r\nSubmitting transactions to this contract it will affect the gas required!!!  \r\n\r\n\r\n```solidity\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\ncontract TestDepth {\r\n    uint256 public x;\r\n\r\n    function depth(uint256 y) public {\r\n        // bool result;\r\n        if (y > 0) {\r\n            bytes memory call = abi.encodeWithSignature(\"depth(uint256)\", --y);\r\n            (bool result,) = address(this).delegatecall(call);\r\n            require(result);\r\n        }\r\n        else {\r\n            // Save the remaining gas in storage so that we can access it later\r\n            x = gasleft();\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n\r\n\r\nWhen performing an `eth_estimateGas` on different clients I get different results. My expectation was that besu was overestimating the required gas compared to other clients. It turns our the estimate provided can be incorrect.\r\n\r\n\r\n### Steps to Reproduce (Bug)\r\n\r\n\r\nUsing the following test code:\r\n```js\r\nfor (const depth of [1,2,3,4,5,10,65]) {\r\n\r\n    const data = contract.encodeFunctionData('depth', [depth]);\r\n\r\n    const estimate = await provider.estimateGas({\r\n        to: \"0x9AAe0D2009a14cB6c1140a9C5715Bb345690b0da\",\r\n        data: data\r\n    })\r\n    \r\n    const result = await provider.call({\r\n\tto: \"0x9AAe0D2009a14cB6c1140a9C5715Bb345690b0da\",\r\n\tdata: data,\r\n\tgasLimit: estimate.toNumber()\r\n    })\r\n\r\n    console.log(`Depth ${depth} has gasEstimate ${estimate.toNumber()} eth_call result ${result}`)\r\n\r\n}\r\n```\r\nWith Geth/v1.10.23-stable-13ddb046/linux-amd64/go1.18.10 \r\n\r\n```\r\nDepth 1 has gasEstimate 45554 eth_call result 0x\r\nDepth 2 has gasEstimate 47387 eth_call result 0x\r\nDepth 3 has gasEstimate 49249 eth_call result 0x\r\nDepth 4 has gasEstimate 51141 eth_call result 0x\r\nDepth 5 has gasEstimate 53063 eth_call result 0x\r\nDepth 10 has gasEstimate 63139 eth_call result 0x\r\nDepth 65 has gasEstimate 246462 eth_call result 0x\r\n```\r\n\r\nWith `besu/ConsenSys/v23.1.1-dev-b0daf148/linux-x86_64/openjdk-java-17` I get some funny results. Occasionally I would get an error between the estimate and call but after a few attempts I consistently get something like:\r\n\r\n```\r\nDepth 1 has gasEstimate 48337 eth_call result 0x\r\nDepth 2 has gasEstimate 21204 eth_call result 0x\r\nDepth 3 has gasEstimate 21204 eth_call result 0x\r\nDepth 4 has gasEstimate 21204 eth_call result 0x\r\nDepth 5 has gasEstimate 21204 eth_call result 0x\r\nDepth 10 has gasEstimate 21204 eth_call result 0x\r\nDepth 65 has gasEstimate 21204 eth_call result 0x\r\n```\r\n\r\nWell this is really strange, the value definitely shouldn't be lower. After investigating further it would appear that there's something very funky going on with either caching on shared state between calls. If I run the script in quick succession the first result changes between `48337` and `21204`! Very odd indeed.\r\n\r\nWhat's also strange is that the eth_call with a gasLimit of `21204` should definitely fail but doesn't! \r\n\r\nBecause of this it means you can do things that are clearly nonsense. \r\n\r\n```js\r\nconst depth = 10\r\nconst data = contract.encodeFunctionData('depth', [depth]);\r\n\r\nconst estimate = await provider.estimateGas({\r\n    to: \"0x9AAe0D2009a14cB6c1140a9C5715Bb345690b0da\",\r\n    data: data\r\n})\r\n\r\nconst result = await provider.call({\r\n  to: \"0x9AAe0D2009a14cB6c1140a9C5715Bb345690b0da\",\r\n  data: data,\r\n  gasLimit: 21204\r\n})\r\n\r\nconsole.log(`Depth ${depth} has gasEstimate ${estimate.toNumber()} eth_call result ${result}`)\r\n```\r\n\r\nAll of this assumes that the contract has been deployed and no transactions have occurred against it. \r\n\r\nI do not believe this to be an issue with OPCODE pricing or gas usage calculation in the EVM. I suspect that somehow the world state from the previous `eth_call` or `eth_estimateGas` is lingering somewhere so as to reduce the amount the gas required.\r\n\r\nIf you deployed the contract, then performed a call to `depth(1)` then the subsequent call to that contract would indeed have a lower gas limit requirement.\r\n\r\nTo test the theory I tried the following:\r\n\r\n```js\r\n\r\nconst sleep = (ms) => new Promise((resolve) => {\r\n  setTimeout(resolve, ms);\r\n});\r\n\r\n\r\nconst nextBlockToBeMined = async () => {\r\n  const block = await provider.getBlock('latest');\r\n\r\n  for (let i = 0; i < 24; i += 1) {\r\n    const nextBlock = await provider.getBlock('latest');\r\n    if (nextBlock.number > block.number) {\r\n      break;\r\n    }\r\n    await sleep(1000);\r\n  }\r\n};\r\n\r\n\r\nfor (const depth of [1,2,3,4,5,10,65]) {\r\n    const data = contract.encodeFunctionData('depth', [depth]);\r\n\r\n    await nextBlockToBeMined()\r\n\r\n    const estimate = await provider.estimateGas({\r\n        to: \"0x9AAe0D2009a14cB6c1140a9C5715Bb345690b0da\",\r\n        data: data\r\n    })\r\n    \r\n    const result = await provider.call({\r\n\tto: \"0x9AAe0D2009a14cB6c1140a9C5715Bb345690b0da\",\r\n\tdata: data,\r\n\tgasLimit: estimate\r\n    })\r\n\r\n    console.log(`Depth ${depth} has gasEstimate ${estimate.toNumber()} eth_call result ${result}`)\r\n}\r\n\r\n```\r\nWhich yielded something more sensible:\r\n\r\n```\r\nDepth 1 has gasEstimate 48337 eth_call result 0x\r\nDepth 2 has gasEstimate 50685 eth_call result 0x\r\nDepth 3 has gasEstimate 53095 eth_call result 0x\r\nDepth 4 has gasEstimate 55567 eth_call result 0x\r\nDepth 5 has gasEstimate 58104 eth_call result 0x\r\nDepth 10 has gasEstimate 71802 eth_call result 0x\r\nDepth 65 has gasEstimate 401088 eth_call result 0x\r\n```\r\n\r\nThe problem now is that there's still something funny going on between `eth_estimateGas` and `eth_call`. Which means I can do silly things like .... \r\n\r\n```js\r\nfor (const depth of [1,2,3,4,5,10,65]) {\r\n    const data = contract.encodeFunctionData('depth', [depth]);\r\n\r\n    await nextBlockToBeMined()\r\n\r\n    const estimate = await provider.estimateGas({\r\n        to: \"0x9AAe0D2009a14cB6c1140a9C5715Bb345690b0da\",\r\n        data: data\r\n    })\r\n    \r\n    const result = await provider.call({\r\n\tto: \"0x9AAe0D2009a14cB6c1140a9C5715Bb345690b0da\",\r\n\tdata: data,\r\n\tgasLimit: estimate - 1000\r\n    })\r\n\r\n    console.log(`Depth ${depth} has gasEstimate ${estimate.toNumber()} eth_call result ${result}`)\r\n\r\n}\r\n```\r\n\r\nAnd everything still works !!! Presumably because the `eth_estimateGas` is somehow committing/caching world state.\r\n\r\nSo I thought I'd write a simple binary search to get the required gas for a call using trial and error with `eth_call`. \r\n\r\n```js\r\nlet high = 45554\r\nlet low = 21204\r\nconst depth = 1\r\nconst data = contract.encodeFunctionData('depth', [depth]);\r\n\r\n\r\nwhile (low + 1 < high) {\r\n  mid = Math.ceil((high + low) / 2);\r\n  await nextBlockToBeMined()\r\n\r\n  try {\r\n    const result = await provider.call({\r\n      to: \"0x9AAe0D2009a14cB6c1140a9C5715Bb345690b0da\",\r\n      data: data,\r\n      gasLimit: mid\r\n    })\r\n    \r\n    if (result != \"0x\") {\r\n      low = mid;\r\n    } else {\r\n      high = mid;\r\n    }\r\n    console.log(`High ${high} Low ${low} Mid ${mid}`)\r\n  } catch {\r\n    console.log(`ERROR High ${high} Low ${low} Mid ${mid}`)\r\n    low = mid;\r\n  }\r\n}\r\n```\r\n\r\nObservations:\r\n\r\n1. When the gas is too low you get an internal server error rather than an rpc error.\r\n2. You need to wait for a block before you can perform an eth_call again (as discussed).\r\n3. You can use a lower gas limit on `eth_call` than you actually need.\r\n4. You can use a lower gas limit than the gas used!\r\n\r\nIt would appear that `eth_call` is just flat out broken when it comes to respecting gas limits.\r\n\r\n## Summary \r\n\r\nTh transaction simulator appears not be calculating gas correctly. I believe the problem to be isolated to just `eth_call` and `eth_estimateGas` I do not believe their is any issues when mining transactions. \r\n\r\n\r\n**Expected behavior:**\r\nConsistent eth_gasEstimate results based on the LATEST block \r\neth_call to correctly use the gasLimit provided and to behave the same as a mined transaction\r\n\r\n**Actual behavior:** \r\nInconsistent eth_gasEstimate results \r\nInvalid eth_gasEstimate results returned\r\nIncorrect eth_call behaviour - calls succeeding when the should fail\r\n\r\n**Frequency:** \r\n90% of the time\r\n\r\n### Versions (Add all that apply)\r\nbesu/ConsenSys/v23.1.1-dev-b0daf148/linux-x86_64/openjdk-java-17\r\n\r\n",
  "closed_by": {
    "login": "antonydenyer",
    "id": 469160,
    "node_id": "MDQ6VXNlcjQ2OTE2MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/469160?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/antonydenyer",
    "html_url": "https://github.com/antonydenyer",
    "followers_url": "https://api.github.com/users/antonydenyer/followers",
    "following_url": "https://api.github.com/users/antonydenyer/following{/other_user}",
    "gists_url": "https://api.github.com/users/antonydenyer/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/antonydenyer/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/antonydenyer/subscriptions",
    "organizations_url": "https://api.github.com/users/antonydenyer/orgs",
    "repos_url": "https://api.github.com/users/antonydenyer/repos",
    "events_url": "https://api.github.com/users/antonydenyer/events{/privacy}",
    "received_events_url": "https://api.github.com/users/antonydenyer/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/hyperledger/besu/issues/5147/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/hyperledger/besu/issues/5147/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/hyperledger/besu/issues/comments/1452368718",
    "html_url": "https://github.com/hyperledger/besu/issues/5147#issuecomment-1452368718",
    "issue_url": "https://api.github.com/repos/hyperledger/besu/issues/5147",
    "id": 1452368718,
    "node_id": "IC_kwDODE2jmc5WkWNO",
    "user": {
      "login": "non-fungible-nelson",
      "id": 85905982,
      "node_id": "MDQ6VXNlcjg1OTA1OTgy",
      "avatar_url": "https://avatars.githubusercontent.com/u/85905982?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/non-fungible-nelson",
      "html_url": "https://github.com/non-fungible-nelson",
      "followers_url": "https://api.github.com/users/non-fungible-nelson/followers",
      "following_url": "https://api.github.com/users/non-fungible-nelson/following{/other_user}",
      "gists_url": "https://api.github.com/users/non-fungible-nelson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/non-fungible-nelson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/non-fungible-nelson/subscriptions",
      "organizations_url": "https://api.github.com/users/non-fungible-nelson/orgs",
      "repos_url": "https://api.github.com/users/non-fungible-nelson/repos",
      "events_url": "https://api.github.com/users/non-fungible-nelson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/non-fungible-nelson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-02T18:42:41Z",
    "updated_at": "2023-03-02T18:42:41Z",
    "author_association": "CONTRIBUTOR",
    "body": "@shemnon - any insight on this? Or not your area of concern.",
    "reactions": {
      "url": "https://api.github.com/repos/hyperledger/besu/issues/comments/1452368718/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/hyperledger/besu/issues/comments/1510592128",
    "html_url": "https://github.com/hyperledger/besu/issues/5147#issuecomment-1510592128",
    "issue_url": "https://api.github.com/repos/hyperledger/besu/issues/5147",
    "id": 1510592128,
    "node_id": "IC_kwDODE2jmc5aCc6A",
    "user": {
      "login": "jframe",
      "id": 909467,
      "node_id": "MDQ6VXNlcjkwOTQ2Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/909467?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jframe",
      "html_url": "https://github.com/jframe",
      "followers_url": "https://api.github.com/users/jframe/followers",
      "following_url": "https://api.github.com/users/jframe/following{/other_user}",
      "gists_url": "https://api.github.com/users/jframe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jframe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jframe/subscriptions",
      "organizations_url": "https://api.github.com/users/jframe/orgs",
      "repos_url": "https://api.github.com/users/jframe/repos",
      "events_url": "https://api.github.com/users/jframe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jframe/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-04-17T02:11:04Z",
    "updated_at": "2023-04-17T02:11:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "I've tested this on a synced goerli node with Besu v23.1.1-dev-b0daf148 and with 23.1.2 and I get these results when running the javascript script. Which is the same as what given in the 2nd script with the wait for the next block to be mined. So not getting the issue on the node I deployed to test this on.\r\n\r\n```\r\nDepth 1 has gasEstimate 48337 eth_call result 0x\r\nDepth 2 has gasEstimate 50685 eth_call result 0x\r\nDepth 3 has gasEstimate 53095 eth_call result 0x\r\nDepth 4 has gasEstimate 55567 eth_call result 0x\r\nDepth 5 has gasEstimate 58104 eth_call result 0x\r\nDepth 10 has gasEstimate 71802 eth_call result 0x\r\nDepth 65 has gasEstimate 401088 eth_call result 0x\r\n```\r\n\r\nThis was with Bonsai though. Were you using Bonsai or Forest to test on?",
    "reactions": {
      "url": "https://api.github.com/repos/hyperledger/besu/issues/comments/1510592128/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/hyperledger/besu/issues/comments/1511040644",
    "html_url": "https://github.com/hyperledger/besu/issues/5147#issuecomment-1511040644",
    "issue_url": "https://api.github.com/repos/hyperledger/besu/issues/5147",
    "id": 1511040644,
    "node_id": "IC_kwDODE2jmc5aEKaE",
    "user": {
      "login": "antonydenyer",
      "id": 469160,
      "node_id": "MDQ6VXNlcjQ2OTE2MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/469160?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/antonydenyer",
      "html_url": "https://github.com/antonydenyer",
      "followers_url": "https://api.github.com/users/antonydenyer/followers",
      "following_url": "https://api.github.com/users/antonydenyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/antonydenyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/antonydenyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/antonydenyer/subscriptions",
      "organizations_url": "https://api.github.com/users/antonydenyer/orgs",
      "repos_url": "https://api.github.com/users/antonydenyer/repos",
      "events_url": "https://api.github.com/users/antonydenyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/antonydenyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-04-17T09:53:48Z",
    "updated_at": "2023-04-17T09:53:48Z",
    "author_association": "MEMBER",
    "body": "Agreed, it appears to have sorted itself out. \r\n\r\nhttps://github.com/hyperledger/besu/pull/5142\r\n\r\nshould provide some coverage to prevent it from happening again.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/hyperledger/besu/issues/comments/1511040644/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
