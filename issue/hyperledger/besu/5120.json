{
  "url": "https://api.github.com/repos/hyperledger/besu/issues/5120",
  "repository_url": "https://api.github.com/repos/hyperledger/besu",
  "labels_url": "https://api.github.com/repos/hyperledger/besu/issues/5120/labels{/name}",
  "comments_url": "https://api.github.com/repos/hyperledger/besu/issues/5120/comments",
  "events_url": "https://api.github.com/repos/hyperledger/besu/issues/5120/events",
  "html_url": "https://github.com/hyperledger/besu/issues/5120",
  "id": 1594568844,
  "node_id": "I_kwDODE2jmc5fCzCM",
  "number": 5120,
  "title": "Block Building - Block processing error: transaction invalid transaction nonce",
  "user": {
    "login": "siladu",
    "id": 2893793,
    "node_id": "MDQ6VXNlcjI4OTM3OTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2893793?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/siladu",
    "html_url": "https://github.com/siladu",
    "followers_url": "https://api.github.com/users/siladu/followers",
    "following_url": "https://api.github.com/users/siladu/following{/other_user}",
    "gists_url": "https://api.github.com/users/siladu/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/siladu/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/siladu/subscriptions",
    "organizations_url": "https://api.github.com/users/siladu/orgs",
    "repos_url": "https://api.github.com/users/siladu/repos",
    "events_url": "https://api.github.com/users/siladu/events{/privacy}",
    "received_events_url": "https://api.github.com/users/siladu/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1537362490,
      "node_id": "MDU6TGFiZWwxNTM3MzYyNDkw",
      "url": "https://api.github.com/repos/hyperledger/besu/labels/bug",
      "name": "bug",
      "color": "d73a4a",
      "default": true,
      "description": "Something isn't working"
    },
    {
      "id": 3013559202,
      "node_id": "MDU6TGFiZWwzMDEzNTU5MjAy",
      "url": "https://api.github.com/repos/hyperledger/besu/labels/mainnet",
      "name": "mainnet",
      "color": "9D578C",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 5,
  "created_at": "2023-02-22T07:04:36Z",
  "updated_at": "2023-03-03T09:08:19Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "I've seen this error occur on 23.1.0 (and earlier versions of main branch)\r\n\r\nThis was from withdrawal-mainnet-shadowfork-2-prysm-besu-1:\r\n```\r\n2023-02-21 19:03:25.702+00:00 | PoS-Block-Builder-33 | WARN  | MergeCoordinator | Block 0x35d864c456718e84226444f0eab5c8f3bf259d45c378488d7b7b1a823b3f6ff2 built for proposal identified by 0x005430bcbbce1988, is not valid reason Optional[Block processing error: transaction invalid transaction nonce 257 below sender account nonce 258. Block 0x35d864c456718e84226444f0eab5c8f3bf259d45c378488d7b7b1a823b3f6ff2 Transaction 0x1598f117a6750deaaf397c162ee528ac794c13cd8b4f23c02eb596a89d9b2554]\r\n```\r\n\r\nAnd this from withdrawal-devnet-7-lodestar-besu-2:\r\nhttps://github.com/hyperledger/besu/issues/5094#issue-1584934845\r\n\r\n```\r\n2023-02-14 11:08:12.344+00:00 | vert.x-worker-thread-0 | INFO  | AbstractEngineNewPayload | Imported #616 / 8 tx / base fee 7 wei / 434,882 (1.4%) gas / (0x7cfd756ed04b64d68c35c4ed965ae3b4d0804f70f64eafbb3abfaa8ab41a14fd) in 0.006s. Peers: 29\r\n2023-02-14 11:08:13.626+00:00 | PoS-Block-Builder-0 | INFO  | AbstractBlockProcessor | Block processing error: transaction invalid transaction nonce 1848 below sender account nonce 1856. Block 0xd4ff381bb41109fb4396d3a1b5807896fbec260291f2b4b8cb97f29f404490b7 Transaction 0xaccca88128b365ddf31a7f074aaad1817f66c246cd66b6282022d2aa1b5965e8\r\n2023-02-14 11:08:13.627+00:00 | PoS-Block-Builder-0 | INFO  | MainnetBlockValidator | Invalid block 616 (0xd4ff381bb41109fb4396d3a1b5807896fbec260291f2b4b8cb97f29f404490b7): Optional[Block processing error: transaction invalid transaction nonce 1848 below sender account nonce 1856. Block 0xd4ff381bb41109fb4396d3a1b5807896fbec260291f2b4b8cb97f29f404490b7 Transaction 0xaccca88128b365ddf31a7f074aaad1817f66c246cd66b6282022d2aa1b5965e8]\r\n2023-02-14 11:08:13.627+00:00 | PoS-Block-Builder-0 | WARN  | MergeCoordinator | Block 0xd4ff381bb41109fb4396d3a1b5807896fbec260291f2b4b8cb97f29f404490b7 built for proposal identified by 0x00540b0f0717b164, is not valid reason Optional[Block processing error: transaction invalid transaction nonce 1848 below sender account nonce 1856. Block 0xd4ff381bb41109fb4396d3a1b5807896fbec260291f2b4b8cb97f29f404490b7 Transaction 0xaccca88128b365ddf31a7f074aaad1817f66c246cd66b6282022d2aa1b5965e8]\r\n2023-02-14 11:08:13.632+00:00 | vert.x-worker-thread-0 | INFO  | AbstractEngineGetPayload | Fetch block proposal by identifier: 0x00540b0f0717b164, hash: 0xd4ff381bb41109fb4396d3a1b5807896fbec260291f2b4b8cb97f29f404490b7, number: 616, coinbase: 0xf97e180c050e5ab072211ad2c213eb5aee4df134, transaction count: 1\r\n```\r\n\r\nMy theory is that we are getting bonsai concurrency errors when we build a block on a different thread concurrently to processing newPayload.\r\nIf for example something in newPayload changes the world state such that it invalidates the transactions we are processing after we have selected them (I'm assuming we should already be validating the nonce as part of the selection but I haven't checked).\r\n\r\nI think we are seeing versions of this issue during block building as well, for example world state root mismatch.\r\n\r\nOne approach might be to isolate block building from newPayload processing at a higher level than bonsai.",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/hyperledger/besu/issues/5120/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/hyperledger/besu/issues/5120/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/hyperledger/besu/issues/comments/1440459070",
    "html_url": "https://github.com/hyperledger/besu/issues/5120#issuecomment-1440459070",
    "issue_url": "https://api.github.com/repos/hyperledger/besu/issues/5120",
    "id": 1440459070,
    "node_id": "IC_kwDODE2jmc5V26k-",
    "user": {
      "login": "fab-10",
      "id": 91944855,
      "node_id": "U_kgDOBXr3lw",
      "avatar_url": "https://avatars.githubusercontent.com/u/91944855?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fab-10",
      "html_url": "https://github.com/fab-10",
      "followers_url": "https://api.github.com/users/fab-10/followers",
      "following_url": "https://api.github.com/users/fab-10/following{/other_user}",
      "gists_url": "https://api.github.com/users/fab-10/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fab-10/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fab-10/subscriptions",
      "organizations_url": "https://api.github.com/users/fab-10/orgs",
      "repos_url": "https://api.github.com/users/fab-10/repos",
      "events_url": "https://api.github.com/users/fab-10/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fab-10/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-02-22T17:20:12Z",
    "updated_at": "2023-02-22T17:20:12Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thinking about this, it could not be an issue, since if a new payload with a fcu arrives while we are building a proposal, then we should just throw away what we have done and restart building on top of the new head. I remember that you had a PR to stop any running block creation in case a new fcu with payload params arrives, I suggest to go on with that PR, so that the block creation is always done on the new head",
    "reactions": {
      "url": "https://api.github.com/repos/hyperledger/besu/issues/comments/1440459070/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/hyperledger/besu/issues/comments/1440869152",
    "html_url": "https://github.com/hyperledger/besu/issues/5120#issuecomment-1440869152",
    "issue_url": "https://api.github.com/repos/hyperledger/besu/issues/5120",
    "id": 1440869152,
    "node_id": "IC_kwDODE2jmc5V4esg",
    "user": {
      "login": "siladu",
      "id": 2893793,
      "node_id": "MDQ6VXNlcjI4OTM3OTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2893793?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/siladu",
      "html_url": "https://github.com/siladu",
      "followers_url": "https://api.github.com/users/siladu/followers",
      "following_url": "https://api.github.com/users/siladu/following{/other_user}",
      "gists_url": "https://api.github.com/users/siladu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/siladu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/siladu/subscriptions",
      "organizations_url": "https://api.github.com/users/siladu/orgs",
      "repos_url": "https://api.github.com/users/siladu/repos",
      "events_url": "https://api.github.com/users/siladu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/siladu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-02-22T22:03:53Z",
    "updated_at": "2023-02-22T22:04:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "@fab-10 \r\n\r\n> Thinking about this, it could not be an issue, since if a new payload with a fcu arrives while we are building a proposal, then we should just throw away what we have done and restart building on top of the new head. \r\n\r\nAgree that a subsequent FCU should start a new building thread, but I suspect this issue occurs when newPayload arrives and changes the bonsai state (before the second FCU arrives)...I think this is the bug: the block building thread's view of the state is not isolated from newPayload when it updates it.\r\n\r\nI think in FOREST mode it wouldn't be a problem because the block building thread could happily continue building on the former state and then CL would never call getPayload for that block.\r\n\r\nAs an aside, If the concurrency bug happens on the final iteration before getPayload is called, would we return nothing or the previously built block?\r\n\r\n>  I remember that you had a PR to stop any running block creation in case a new fcu with payload params arrives, I suggest to go on with that PR, so that the block creation is always done on the new head\r\n\r\nThe PR is still in draft because it didn't actually fix the problem. I thought the problem was related to two block builder threads interacting, but it's actually the interaction between the block building thread and the API thread (newPayload processing)",
    "reactions": {
      "url": "https://api.github.com/repos/hyperledger/besu/issues/comments/1440869152/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/hyperledger/besu/issues/comments/1452388529",
    "html_url": "https://github.com/hyperledger/besu/issues/5120#issuecomment-1452388529",
    "issue_url": "https://api.github.com/repos/hyperledger/besu/issues/5120",
    "id": 1452388529,
    "node_id": "IC_kwDODE2jmc5WkbCx",
    "user": {
      "login": "non-fungible-nelson",
      "id": 85905982,
      "node_id": "MDQ6VXNlcjg1OTA1OTgy",
      "avatar_url": "https://avatars.githubusercontent.com/u/85905982?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/non-fungible-nelson",
      "html_url": "https://github.com/non-fungible-nelson",
      "followers_url": "https://api.github.com/users/non-fungible-nelson/followers",
      "following_url": "https://api.github.com/users/non-fungible-nelson/following{/other_user}",
      "gists_url": "https://api.github.com/users/non-fungible-nelson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/non-fungible-nelson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/non-fungible-nelson/subscriptions",
      "organizations_url": "https://api.github.com/users/non-fungible-nelson/orgs",
      "repos_url": "https://api.github.com/users/non-fungible-nelson/repos",
      "events_url": "https://api.github.com/users/non-fungible-nelson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/non-fungible-nelson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-02T18:52:12Z",
    "updated_at": "2023-03-02T18:52:12Z",
    "author_association": "CONTRIBUTOR",
    "body": "can we status this issue? What are next steps? ",
    "reactions": {
      "url": "https://api.github.com/repos/hyperledger/besu/issues/comments/1452388529/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/hyperledger/besu/issues/comments/1452844055",
    "html_url": "https://github.com/hyperledger/besu/issues/5120#issuecomment-1452844055",
    "issue_url": "https://api.github.com/repos/hyperledger/besu/issues/5120",
    "id": 1452844055,
    "node_id": "IC_kwDODE2jmc5WmKQX",
    "user": {
      "login": "siladu",
      "id": 2893793,
      "node_id": "MDQ6VXNlcjI4OTM3OTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2893793?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/siladu",
      "html_url": "https://github.com/siladu",
      "followers_url": "https://api.github.com/users/siladu/followers",
      "following_url": "https://api.github.com/users/siladu/following{/other_user}",
      "gists_url": "https://api.github.com/users/siladu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/siladu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/siladu/subscriptions",
      "organizations_url": "https://api.github.com/users/siladu/orgs",
      "repos_url": "https://api.github.com/users/siladu/repos",
      "events_url": "https://api.github.com/users/siladu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/siladu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-03T02:11:59Z",
    "updated_at": "2023-03-03T02:11:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "> can we status this issue? What are next steps?\r\n\r\nCurrently thinking it's a low priority bug because it so far hasn't impacted the network and we already have some code in place to:\r\n1. reduce the likelihood of this happening\r\n2. reduce the impact: we now no longer add these to the bad block cache, however you still get some scary looking besu logs.\r\n\r\nI think it might point to a wider issue/root cause with bonsai concurrency...and by the same token, future bonsai fixes may make this problem go away too.",
    "reactions": {
      "url": "https://api.github.com/repos/hyperledger/besu/issues/comments/1452844055/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/hyperledger/besu/issues/comments/1453203006",
    "html_url": "https://github.com/hyperledger/besu/issues/5120#issuecomment-1453203006",
    "issue_url": "https://api.github.com/repos/hyperledger/besu/issues/5120",
    "id": 1453203006,
    "node_id": "IC_kwDODE2jmc5Wnh4-",
    "user": {
      "login": "fab-10",
      "id": 91944855,
      "node_id": "U_kgDOBXr3lw",
      "avatar_url": "https://avatars.githubusercontent.com/u/91944855?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fab-10",
      "html_url": "https://github.com/fab-10",
      "followers_url": "https://api.github.com/users/fab-10/followers",
      "following_url": "https://api.github.com/users/fab-10/following{/other_user}",
      "gists_url": "https://api.github.com/users/fab-10/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fab-10/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fab-10/subscriptions",
      "organizations_url": "https://api.github.com/users/fab-10/orgs",
      "repos_url": "https://api.github.com/users/fab-10/repos",
      "events_url": "https://api.github.com/users/fab-10/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fab-10/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-03T09:08:19Z",
    "updated_at": "2023-03-03T09:08:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "\r\n> As an aside, If the concurrency bug happens on the final iteration before getPayload is called, would we return nothing or the previously built block?\r\n\r\nyes, the best block built is returned, or in the worst case the block with 0 txs\r\n\r\n\r\n> The PR is still in draft because it didn't actually fix the problem. I thought the problem was related to two block builder threads interacting, but it's actually the interaction between the block building thread and the API thread (newPayload processing)\r\n\r\neven if it does not solve this problem, I think it make sense to stop previous block building task, when starting a new one. In devnet I saw many occurrences of overlapping block building tasks, where the previous only stops because it reaches the timeout. Of course this should be very rare on mainnet or official testnets. If you do not mind I would like to resume the work on your PR.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/hyperledger/besu/issues/comments/1453203006/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
