{
  "url": "https://api.github.com/repos/ethereum/yellowpaper/issues/840",
  "repository_url": "https://api.github.com/repos/ethereum/yellowpaper",
  "labels_url": "https://api.github.com/repos/ethereum/yellowpaper/issues/840/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/yellowpaper/issues/840/comments",
  "events_url": "https://api.github.com/repos/ethereum/yellowpaper/issues/840/events",
  "html_url": "https://github.com/ethereum/yellowpaper/issues/840",
  "id": 1118749388,
  "node_id": "I_kwDOARgQGs5CrsLM",
  "number": 840,
  "title": "9.4.3. Jump Destination Validity - \"code\" means data accessible by Program Counter or even non-executable data?",
  "user": {
    "login": "loredanacirstea",
    "id": 4785356,
    "node_id": "MDQ6VXNlcjQ3ODUzNTY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4785356?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/loredanacirstea",
    "html_url": "https://github.com/loredanacirstea",
    "followers_url": "https://api.github.com/users/loredanacirstea/followers",
    "following_url": "https://api.github.com/users/loredanacirstea/following{/other_user}",
    "gists_url": "https://api.github.com/users/loredanacirstea/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/loredanacirstea/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/loredanacirstea/subscriptions",
    "organizations_url": "https://api.github.com/users/loredanacirstea/orgs",
    "repos_url": "https://api.github.com/users/loredanacirstea/repos",
    "events_url": "https://api.github.com/users/loredanacirstea/events{/privacy}",
    "received_events_url": "https://api.github.com/users/loredanacirstea/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 6,
  "created_at": "2022-01-30T23:11:26Z",
  "updated_at": "2022-02-12T22:18:45Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "> 9.4.3. Jump Destination Validity. We previously used D\r\n> as the function to determine the set of valid jump destinations given the code that is being run. We define this\r\n> as any position in the code occupied by a JUMPDEST\r\n> instruction.\r\n> All such positions must be on valid instruction boundaries, rather than sitting in the data portion of PUSH\r\n> operations and must appear within the explicitly defined\r\n> portion of the code (rather than in the implicitly defined\r\n> STOP operations that trail it).\r\n\r\nConsider the following assembly code:\r\n```\r\ndataSize(sub_0)\r\ndataOffset(sub_0)\r\n0x00\r\ncodecopy\r\ndataSize(sub_0)\r\n0x00\r\nreturn\r\nstop\r\n\r\nsub_0: assembly {\r\n  tag1\r\n  jump\r\n stop\r\n stop\r\n  tag1:\r\n  0xeeeeeeee\r\n  0x00\r\n  mstore\r\n  0x20\r\n  0x00\r\n  return\r\n}\r\n```\r\nThis translates to `0x601461000e60003960146000f3006100065600005b63eeeeeeee60005260206000f3`. If this contract is deployed and it receives a transaction/call, it returns `0x00000000000000000000000000000000000000000000000000000000eeeeeeee`. An example of this execution was ran at https://ropsten.etherscan.io/tx/0x6c300851fc63bb91829041acddd49c440720ca095061f4d164e53e9abce4d781.\r\n\r\nConsider that we change the above bytecode by replacing the 2nd `stop` instruction with `PUSH4` (`0x63`). We obtain `0x601461000e60003960146000f3006100065600635b63eeeeeeee60005260206000f3`. If this contract is deployed and it receives a transaction/call, it reverts with `Invalid JUMP destination`: https://ropsten.etherscan.io/tx/0x81c674bb22b7171f1f0bd3ee98b09c35ef5e9874c7fc232821eb1b9542a363c0. This happens even though the `0x63` (`PUSH4`) instruction is never reachable, therefore not executable.\r\n\r\nThis behavior is not obvious, not even from the description of the Yellow Paper and I doubt it is the intended behavior. Nonetheless, clients are implementing it https://github.com/ethereumjs/ethereumjs-monorepo/blob/93c4c4ad182d4b4be54b6346aab70f615fb21bb8/packages/vm/src/evm/interpreter.ts#L263-L283.\r\n\r\n\r\n\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/yellowpaper/issues/840/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/yellowpaper/issues/840/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/yellowpaper/issues/comments/1025442588",
    "html_url": "https://github.com/ethereum/yellowpaper/issues/840#issuecomment-1025442588",
    "issue_url": "https://api.github.com/repos/ethereum/yellowpaper/issues/840",
    "id": 1025442588,
    "node_id": "IC_kwDOARgQGs49HwMc",
    "user": {
      "login": "holiman",
      "id": 142290,
      "node_id": "MDQ6VXNlcjE0MjI5MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/142290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/holiman",
      "html_url": "https://github.com/holiman",
      "followers_url": "https://api.github.com/users/holiman/followers",
      "following_url": "https://api.github.com/users/holiman/following{/other_user}",
      "gists_url": "https://api.github.com/users/holiman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/holiman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/holiman/subscriptions",
      "organizations_url": "https://api.github.com/users/holiman/orgs",
      "repos_url": "https://api.github.com/users/holiman/repos",
      "events_url": "https://api.github.com/users/holiman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/holiman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-31T07:13:35Z",
    "updated_at": "2022-01-31T07:13:35Z",
    "author_association": "MEMBER",
    "body": "I don't see what is unclear here. Consider the code as `code` or `data`, where `data` are the bytes following `PUSHX`. \r\nIf we mark the `data` sections with `x`, then we have: \r\n`0x601461000e60003960146000f3006100065600005b63eeeeeeee60005260206000f3` -> `0x60xx61xxxx60xx3960xx60xxf30061xxxx5600005b63xxxxxxxx60xx5260xx60xxf3`\r\n\r\nThe example  code from the ropsten tx you linked: \r\n`0x6100065600635b63eeeeeeee60005260206000f3`:`0x61xxxx560063xxxxxxxxeeee60xx5260xx60xxf3`\r\n\r\nEven though the second `stop` is not visited, it was still just a 1-byte operation. If you replace it with a `0x63`, then it is still an unvisited op, _but_ it also turns the next four bytes into `data`, among them `tag1` which is now no longer a jumpdest, but a \"jumpdest-looking byte inside pushdata\". \r\n\r\nClients have implemented the distinction between \"code\" versus \"data after PUSH\" from genesis, it's nothing new. It is most definitely intended. The intention is to provide code which \"mutates\" by offsetting the execution by jumping into pushdata, and suddenly executing sequences that behave differently because of it. \r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/yellowpaper/issues/comments/1025442588/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/yellowpaper/issues/comments/1027252917",
    "html_url": "https://github.com/ethereum/yellowpaper/issues/840#issuecomment-1027252917",
    "issue_url": "https://api.github.com/repos/ethereum/yellowpaper/issues/840",
    "id": 1027252917,
    "node_id": "IC_kwDOARgQGs49OqK1",
    "user": {
      "login": "loredanacirstea",
      "id": 4785356,
      "node_id": "MDQ6VXNlcjQ3ODUzNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4785356?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/loredanacirstea",
      "html_url": "https://github.com/loredanacirstea",
      "followers_url": "https://api.github.com/users/loredanacirstea/followers",
      "following_url": "https://api.github.com/users/loredanacirstea/following{/other_user}",
      "gists_url": "https://api.github.com/users/loredanacirstea/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/loredanacirstea/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/loredanacirstea/subscriptions",
      "organizations_url": "https://api.github.com/users/loredanacirstea/orgs",
      "repos_url": "https://api.github.com/users/loredanacirstea/repos",
      "events_url": "https://api.github.com/users/loredanacirstea/events{/privacy}",
      "received_events_url": "https://api.github.com/users/loredanacirstea/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-01T20:23:04Z",
    "updated_at": "2022-02-01T20:23:04Z",
    "author_association": "NONE",
    "body": "I understand your narrative.\r\nHowever, allow me to present a sum of arguments that may persuade you to see with increased clarity my objection:\r\n\r\nIn short: The EVM is intended as a simple, unopinionated (therefore flexible) base layer with the rules of a stack machine. The stack machine rules are applied opcode by opcode. But in this above case, you add additional rules outside the concerns of the stack machine, even before the bytecode is run. Something that is intended as unexecutable data now can become code, because it contains something that is parsed like a `PUSHX`, but it is not.\r\n\r\n1. In the genetic code, for example: there are many cases when a gene has a common code with another gene in such a way that the same code is understood differently in each context. In such case, the control mechanisms modulate the execution. But their rules are not part of the underlying rules of the genetic machinery (while fully conforming to them). The genetic machinery has simple and unopinionated rules.\r\n\r\n2. From the semantic point of view: Data can be code or non-executable data. When data is not executed, it should not be understood as opcodes (I did that in the initial question only for legibility). So `STOP` and `PUSHX` cannot be correctly inferred there, from 0x00 and 0x6X. I am aware that such 2-stage parsing may optimize execution, but at the cost of semantic purity. Plus: checking should probably not be part of the ground-level rules (see points 1 and 6).\r\n\r\n3. From the economics point of view: when we need unexecutable data in the bytecode we are forced to check at compile-time for eventual `PUSHX` and leave X empty spaces from the executable code.\r\n\r\n4. Maybe this is a good opportunity to question further:`JUMPDEST` seems already a waste of 1 opcode that creates additional semantic and checking problems. It does not guarantee that assets will be handled to conform to the intent of the code caller. It can be added in the assembly for readability, but stored? Probably another waste. Plus: it forces the interpreter to do a 2-pass. Presently we are more sophisticated in the area of verifiers. We may not need the crutch of this un-elegant mechanism. Let me know if I need to detail this argument. (Or maybe another (related) issue should be filled about the `JUMPDEST` opcode)\r\n\r\n5. From the point of view of intent: I programmed recently a lot of bit mappers and therefore needed data stored in bytecode and jumped over at execution. Since I program in assembly, I can see why the Solidity programmers would not care about the details (and correctness) of the EVM itself. I did not expect that non-executable data would encroach upon the code. It is about time to circle back and have a discussion about \"traditional implementations\" vs integrity of intent.\r\n\r\n6. From the point of view of separation of concerns: the yellow paper seems to mix computation engine and verification in this particular fragment. It is very much like including too many laws into the constitution.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/yellowpaper/issues/comments/1027252917/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/yellowpaper/issues/comments/1030639534",
    "html_url": "https://github.com/ethereum/yellowpaper/issues/840#issuecomment-1030639534",
    "issue_url": "https://api.github.com/repos/ethereum/yellowpaper/issues/840",
    "id": 1030639534,
    "node_id": "IC_kwDOARgQGs49bk-u",
    "user": {
      "login": "loredanacirstea",
      "id": 4785356,
      "node_id": "MDQ6VXNlcjQ3ODUzNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4785356?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/loredanacirstea",
      "html_url": "https://github.com/loredanacirstea",
      "followers_url": "https://api.github.com/users/loredanacirstea/followers",
      "following_url": "https://api.github.com/users/loredanacirstea/following{/other_user}",
      "gists_url": "https://api.github.com/users/loredanacirstea/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/loredanacirstea/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/loredanacirstea/subscriptions",
      "organizations_url": "https://api.github.com/users/loredanacirstea/orgs",
      "repos_url": "https://api.github.com/users/loredanacirstea/repos",
      "events_url": "https://api.github.com/users/loredanacirstea/events{/privacy}",
      "received_events_url": "https://api.github.com/users/loredanacirstea/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-05T14:59:00Z",
    "updated_at": "2022-02-05T14:59:00Z",
    "author_association": "NONE",
    "body": "@holiman, since you have not answered, it compelled me to do a little bit of digging. And I found https://github.com/ethereum/EIPs/blob/3ca4f87938f0295a06fa07eb530b4f3cd7774fcd/EIPS/eip-3540.md, which says exactly what I say above:\r\n\r\n> On-chain deployed EVM bytecode contains no pre-defined structure today. Code is typically validated in clients to the extent of JUMPDEST analysis at runtime, every single time prior to execution. This poses not only an overhead, but also a challenge for introducing new or deprecating existing features.\r\n>\r\n> The first tangible feature it provides is separation of code and data. This separation is especially beneficial for on-chain code validators (like those utilised by layer-2 scaling tools, such as Optimism), because they can distinguish code and data (this includes deployment code and constructor arguments too). Currently they a) require changes prior to contract deployment; b) implement a fragile method; or c) implement an expensive and restrictive jump analysis. Code and data separation can result in ease of use and significant gas savings for such use cases. Additionally, various (static) analysis tools can also benefit, though off-chain tools can already deal with existing code, so the impact is smaller.\r\n> \r\n> A non-exhaustive list of proposed changes which could benefit from this format:\r\n> \r\n> Including a JUMPDEST-table (to avoid analysis at execution time) and/or removing JUMPDESTs entirely.\r\n> Introducing static jumps (with relative addresses) and jump tables, and disallowing dynamic jumps at the same time.\r\n> Requiring code section(s) to be terminated by STOP. (Assumptions like this can provide significant speed improvements in interpreters, such as a speed up of ~7% seen in evmone.)\r\n\r\nHence, our colleagues @axic, @gumb0, @chfast know very well that while code is data, not all data is code. This is very good.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/yellowpaper/issues/comments/1030639534/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/yellowpaper/issues/comments/1030650963",
    "html_url": "https://github.com/ethereum/yellowpaper/issues/840#issuecomment-1030650963",
    "issue_url": "https://api.github.com/repos/ethereum/yellowpaper/issues/840",
    "id": 1030650963,
    "node_id": "IC_kwDOARgQGs49bnxT",
    "user": {
      "login": "holiman",
      "id": 142290,
      "node_id": "MDQ6VXNlcjE0MjI5MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/142290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/holiman",
      "html_url": "https://github.com/holiman",
      "followers_url": "https://api.github.com/users/holiman/followers",
      "following_url": "https://api.github.com/users/holiman/following{/other_user}",
      "gists_url": "https://api.github.com/users/holiman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/holiman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/holiman/subscriptions",
      "organizations_url": "https://api.github.com/users/holiman/orgs",
      "repos_url": "https://api.github.com/users/holiman/repos",
      "events_url": "https://api.github.com/users/holiman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/holiman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-05T16:06:29Z",
    "updated_at": "2022-02-05T16:06:29Z",
    "author_association": "MEMBER",
    "body": "Well, I didn't answer, because I didn't know what the argument was. Are you arguing for 1. Something to be clarified in YP?2. Something to be changed in Ethereum?Your first post seemed like you saw implementations doing something wrong (ethereumjs), and I just chimed in why there's nothing wrong with what they're doing, and nothing misunderstood. I agree with the EOF eip and the separate code and data. ( nevertheless, immediate data (following push) will still be in the code-section )What is it you want to achieve?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/yellowpaper/issues/comments/1030650963/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/yellowpaper/issues/comments/1037453993",
    "html_url": "https://github.com/ethereum/yellowpaper/issues/840#issuecomment-1037453993",
    "issue_url": "https://api.github.com/repos/ethereum/yellowpaper/issues/840",
    "id": 1037453993,
    "node_id": "IC_kwDOARgQGs491kqp",
    "user": {
      "login": "loredanacirstea",
      "id": 4785356,
      "node_id": "MDQ6VXNlcjQ3ODUzNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4785356?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/loredanacirstea",
      "html_url": "https://github.com/loredanacirstea",
      "followers_url": "https://api.github.com/users/loredanacirstea/followers",
      "following_url": "https://api.github.com/users/loredanacirstea/following{/other_user}",
      "gists_url": "https://api.github.com/users/loredanacirstea/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/loredanacirstea/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/loredanacirstea/subscriptions",
      "organizations_url": "https://api.github.com/users/loredanacirstea/orgs",
      "repos_url": "https://api.github.com/users/loredanacirstea/repos",
      "events_url": "https://api.github.com/users/loredanacirstea/events{/privacy}",
      "received_events_url": "https://api.github.com/users/loredanacirstea/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-12T20:26:12Z",
    "updated_at": "2022-02-12T20:26:12Z",
    "author_association": "NONE",
    "body": "@holiman \r\nWhat I want to achieve is semantically correct behavior. Either:\r\n1) Be explicit with the definition of code vs. data: https://github.com/ethereum/yellowpaper/pull/842\r\n2) Do not be opinionated on how the upper layers must treat JUMPDEST: https://github.com/ethereum/yellowpaper/pull/843\r\n\r\nOf course, I would prefer 2). The main reason is: it is harder for the EVM to verify itself if you impose a pre-execution analysis. And it may even be a non-breaking change to fix this. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/yellowpaper/issues/comments/1037453993/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/yellowpaper/issues/comments/1037527046",
    "html_url": "https://github.com/ethereum/yellowpaper/issues/840#issuecomment-1037527046",
    "issue_url": "https://api.github.com/repos/ethereum/yellowpaper/issues/840",
    "id": 1037527046,
    "node_id": "IC_kwDOARgQGs4912gG",
    "user": {
      "login": "holiman",
      "id": 142290,
      "node_id": "MDQ6VXNlcjE0MjI5MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/142290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/holiman",
      "html_url": "https://github.com/holiman",
      "followers_url": "https://api.github.com/users/holiman/followers",
      "following_url": "https://api.github.com/users/holiman/following{/other_user}",
      "gists_url": "https://api.github.com/users/holiman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/holiman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/holiman/subscriptions",
      "organizations_url": "https://api.github.com/users/holiman/orgs",
      "repos_url": "https://api.github.com/users/holiman/repos",
      "events_url": "https://api.github.com/users/holiman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/holiman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-12T22:18:45Z",
    "updated_at": "2022-02-12T22:18:45Z",
    "author_association": "MEMBER",
    "body": "That would require a hard-fork though. So the YP cannot be changed here. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/yellowpaper/issues/comments/1037527046/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
