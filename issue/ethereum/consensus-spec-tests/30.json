{
  "url": "https://api.github.com/repos/ethereum/consensus-spec-tests/issues/30",
  "repository_url": "https://api.github.com/repos/ethereum/consensus-spec-tests",
  "labels_url": "https://api.github.com/repos/ethereum/consensus-spec-tests/issues/30/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/consensus-spec-tests/issues/30/comments",
  "events_url": "https://api.github.com/repos/ethereum/consensus-spec-tests/issues/30/events",
  "html_url": "https://github.com/ethereum/consensus-spec-tests/issues/30",
  "id": 1369636396,
  "node_id": "I_kwDOCu9hM85Rov4s",
  "number": 30,
  "title": "Add more optimistic sync tests",
  "user": {
    "login": "mkalinin",
    "id": 1892772,
    "node_id": "MDQ6VXNlcjE4OTI3NzI=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1892772?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mkalinin",
    "html_url": "https://github.com/mkalinin",
    "followers_url": "https://api.github.com/users/mkalinin/followers",
    "following_url": "https://api.github.com/users/mkalinin/following{/other_user}",
    "gists_url": "https://api.github.com/users/mkalinin/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mkalinin/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mkalinin/subscriptions",
    "organizations_url": "https://api.github.com/users/mkalinin/orgs",
    "repos_url": "https://api.github.com/users/mkalinin/repos",
    "events_url": "https://api.github.com/users/mkalinin/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mkalinin/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2022-09-12T10:21:40Z",
  "updated_at": "2023-12-27T02:44:15Z",
  "closed_at": null,
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "### Issue\r\nWe need tests covering more sophisticated scenarios of Optimistic Sync.\r\n\r\n### Details\r\nFollow up to https://github.com/ethereum/consensus-specs/pull/2982\r\nTest format https://github.com/ethereum/consensus-specs/pull/2965\r\n\r\nAn idea by @potuz is to have multiple block tree branches that a client is syncing optimistically with, then all these branches but one should be invalidated making client to jump from one invalid branch to the other (LMD weights should be set accordingly, with an edge case where we have the same weight for valid and for invalid branch). Client should end up on a valid branch as canonical chain.",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/consensus-spec-tests/issues/30/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/consensus-spec-tests/issues/30/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/consensus-spec-tests/issues/comments/1244759226",
    "html_url": "https://github.com/ethereum/consensus-spec-tests/issues/30#issuecomment-1244759226",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-spec-tests/issues/30",
    "id": 1244759226,
    "node_id": "IC_kwDOCu9hM85KMYS6",
    "user": {
      "login": "potuz",
      "id": 16044918,
      "node_id": "MDQ6VXNlcjE2MDQ0OTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/16044918?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/potuz",
      "html_url": "https://github.com/potuz",
      "followers_url": "https://api.github.com/users/potuz/followers",
      "following_url": "https://api.github.com/users/potuz/following{/other_user}",
      "gists_url": "https://api.github.com/users/potuz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/potuz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/potuz/subscriptions",
      "organizations_url": "https://api.github.com/users/potuz/orgs",
      "repos_url": "https://api.github.com/users/potuz/repos",
      "events_url": "https://api.github.com/users/potuz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/potuz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-13T00:56:47Z",
    "updated_at": "2022-09-13T00:57:45Z",
    "author_association": "NONE",
    "body": "Here's another weird case:\r\n\r\n1 Block A, SYNCING, it's head\r\n2. Block A <- B SYNCING, is head\r\n3 Block  C arrives, also SYNCING (ACCEPTED),  forks and B is still head. \r\n```\r\nA <- B\r\n\\_____C\r\n```\r\nBlock `D` arrives SYNCING, but it has enough attestations to C so that C becomes head (it's a self forking block)\r\n```\r\nA <- B <--- D\r\n\\______C\r\n```\r\nBlock E arrives its INVALID (LHV: B). It includes a lot of attestations to D so that D would have  become head if this block would have been VALID\r\n```\r\nA <- B <--- D <--- E\r\n \\______C\r\n```\r\nCheck that C is head. \r\n\r\nThere are a few things that this test covers, 1) that clients can handle self forking blocks, 2) that they are calling FCU with the right head block and not the just imported one. \r\n\r\nThere are other checks included here that are a little more subtle: invalid blocks may include valid attestations, but they may be treated different in applications. In the example above, the attestations included by D were all counted in C's weight. That weight will not be removed when the chain D <- E is pruned. The attestations included in E on the other hand is a bit trickier: it's not clear to me if all implementations would agree here, some may process attestations in blocks before realizing the block is INVALID, others may realize it's INVALID and stop processing and ditching attestations from it or not. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-spec-tests/issues/comments/1244759226/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-spec-tests/issues/comments/1246368039",
    "html_url": "https://github.com/ethereum/consensus-spec-tests/issues/30#issuecomment-1246368039",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-spec-tests/issues/30",
    "id": 1246368039,
    "node_id": "IC_kwDOCu9hM85KShEn",
    "user": {
      "login": "mkalinin",
      "id": 1892772,
      "node_id": "MDQ6VXNlcjE4OTI3NzI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1892772?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mkalinin",
      "html_url": "https://github.com/mkalinin",
      "followers_url": "https://api.github.com/users/mkalinin/followers",
      "following_url": "https://api.github.com/users/mkalinin/following{/other_user}",
      "gists_url": "https://api.github.com/users/mkalinin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mkalinin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mkalinin/subscriptions",
      "organizations_url": "https://api.github.com/users/mkalinin/orgs",
      "repos_url": "https://api.github.com/users/mkalinin/repos",
      "events_url": "https://api.github.com/users/mkalinin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mkalinin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-14T07:38:48Z",
    "updated_at": "2022-09-14T07:38:48Z",
    "author_association": "MEMBER",
    "body": "> ditching attestations from it or not\r\n\r\nI don't know for sure but it sounds like if attestations are applied to the fork choice it's really hard (implementation-wise) to revert votes back to the previous state. If so it would mean that attestations made by validators to valid block B and then overridden by attestations made to invalid block D by the same validators won't be weighed in when A <- B chain balance is computed. I don't think it's an issue though, but it would be good to have clients on the same page with respect to this",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-spec-tests/issues/comments/1246368039/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
