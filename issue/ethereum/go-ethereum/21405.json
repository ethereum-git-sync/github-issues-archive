{
  "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/21405",
  "repository_url": "https://api.github.com/repos/ethereum/go-ethereum",
  "labels_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/21405/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/21405/comments",
  "events_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/21405/events",
  "html_url": "https://github.com/ethereum/go-ethereum/issues/21405",
  "id": 672065498,
  "node_id": "MDU6SXNzdWU2NzIwNjU0OTg=",
  "number": 21405,
  "title": "Question about log output: stderr vs stdout",
  "user": {
    "login": "MysticRyuujin",
    "id": 8877131,
    "node_id": "MDQ6VXNlcjg4NzcxMzE=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8877131?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/MysticRyuujin",
    "html_url": "https://github.com/MysticRyuujin",
    "followers_url": "https://api.github.com/users/MysticRyuujin/followers",
    "following_url": "https://api.github.com/users/MysticRyuujin/following{/other_user}",
    "gists_url": "https://api.github.com/users/MysticRyuujin/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/MysticRyuujin/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/MysticRyuujin/subscriptions",
    "organizations_url": "https://api.github.com/users/MysticRyuujin/orgs",
    "repos_url": "https://api.github.com/users/MysticRyuujin/repos",
    "events_url": "https://api.github.com/users/MysticRyuujin/events{/privacy}",
    "received_events_url": "https://api.github.com/users/MysticRyuujin/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2020-08-03T13:11:21Z",
  "updated_at": "2020-08-04T16:13:53Z",
  "closed_at": "2020-08-04T16:13:53Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "I'm trying to figure out why geth does not log to `stdout` but instead logs everything to `stderr` when using `supervisor` on Linux.\r\n\r\nBasically I have a `supervisor` config that looks something like this:\r\n```\r\n[program:geth]\r\ncommand=bash -c '<path_to_geth> <cli_flags>'\r\nautostart=true\r\nautorestart=true\r\nstderr_logfile=/var/log/supervisor/geth.err.log\r\nstdout_logfile=/var/log/supervisor/geth.out.log\r\nstopwaitsecs=300\r\n```\r\n\r\nAlmost everything that geth normally outputs to the console when running interactively gets put into the `geth.error.log` file. I would think that normal console output would go into the `geth.out.log` file and errors would go into the `geth.error.log` file.\r\n\r\nIt's been like this for as long as I've been running geth and I always just kind of ignored it...so I'm just wondering why it might do that?",
  "closed_by": {
    "login": "MysticRyuujin",
    "id": 8877131,
    "node_id": "MDQ6VXNlcjg4NzcxMzE=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8877131?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/MysticRyuujin",
    "html_url": "https://github.com/MysticRyuujin",
    "followers_url": "https://api.github.com/users/MysticRyuujin/followers",
    "following_url": "https://api.github.com/users/MysticRyuujin/following{/other_user}",
    "gists_url": "https://api.github.com/users/MysticRyuujin/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/MysticRyuujin/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/MysticRyuujin/subscriptions",
    "organizations_url": "https://api.github.com/users/MysticRyuujin/orgs",
    "repos_url": "https://api.github.com/users/MysticRyuujin/repos",
    "events_url": "https://api.github.com/users/MysticRyuujin/events{/privacy}",
    "received_events_url": "https://api.github.com/users/MysticRyuujin/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/21405/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/21405/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/668683711",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/21405#issuecomment-668683711",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/21405",
    "id": 668683711,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2ODY4MzcxMQ==",
    "user": {
      "login": "meowsbits",
      "id": 45600330,
      "node_id": "MDQ6VXNlcjQ1NjAwMzMw",
      "avatar_url": "https://avatars.githubusercontent.com/u/45600330?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meowsbits",
      "html_url": "https://github.com/meowsbits",
      "followers_url": "https://api.github.com/users/meowsbits/followers",
      "following_url": "https://api.github.com/users/meowsbits/following{/other_user}",
      "gists_url": "https://api.github.com/users/meowsbits/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meowsbits/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meowsbits/subscriptions",
      "organizations_url": "https://api.github.com/users/meowsbits/orgs",
      "repos_url": "https://api.github.com/users/meowsbits/repos",
      "events_url": "https://api.github.com/users/meowsbits/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meowsbits/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-04T16:03:01Z",
    "updated_at": "2020-08-04T16:08:10Z",
    "author_association": "CONTRIBUTOR",
    "body": "> At program start-up, three streams shall be predefined and need not be opened explicitly: standard input (for reading conventional input), standard output (for writing conventional output), and standard error (for writing diagnostic output). When opened, the standard error stream is not fully buffered; the standard input and standard output streams are fully buffered if and only if the stream can be determined not to refer to an interactive device.\r\n> https://unix.stackexchange.com/a/331808/273201\r\n\r\n- https://www.jstorimer.com/blogs/workingwithcode/7766119-when-to-use-stderr-instead-of-stdout\r\n\r\nGeth logs to `stderr` because the log lines are diagnostic and error messages, not \"conventional program output.\" \r\n\r\nGeth's \"job\" is not to generate conventional output, but to sync a blockchain, which is more-or-less limited doing network and database stuff, not printing any specific values to the `stdout` for consumption, piping, etc. (interaction). You'll note that in the cases of some subcommands, however, stdout is used; eg. `geth dumpgenesis` prints to stdout because that (sub)program's job is to give you (well, stdout) that specific data as a \"conventional\" resource.\r\n\r\nThe standard Go packages `fmt` and `log`, using stdout and stderr respectively, are also suggestive in this regard.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/668683711/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
