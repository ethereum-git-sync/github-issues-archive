{
  "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/22268",
  "repository_url": "https://api.github.com/repos/ethereum/go-ethereum",
  "labels_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/22268/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/22268/comments",
  "events_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/22268/events",
  "html_url": "https://github.com/ethereum/go-ethereum/issues/22268",
  "id": 801842424,
  "node_id": "MDU6SXNzdWU4MDE4NDI0MjQ=",
  "number": 22268,
  "title": "Caller gas above allowance, capping: functions.call() succeeds while functions.transact() fails",
  "user": {
    "login": "lzszsd",
    "id": 46925047,
    "node_id": "MDQ6VXNlcjQ2OTI1MDQ3",
    "avatar_url": "https://avatars.githubusercontent.com/u/46925047?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/lzszsd",
    "html_url": "https://github.com/lzszsd",
    "followers_url": "https://api.github.com/users/lzszsd/followers",
    "following_url": "https://api.github.com/users/lzszsd/following{/other_user}",
    "gists_url": "https://api.github.com/users/lzszsd/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/lzszsd/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/lzszsd/subscriptions",
    "organizations_url": "https://api.github.com/users/lzszsd/orgs",
    "repos_url": "https://api.github.com/users/lzszsd/repos",
    "events_url": "https://api.github.com/users/lzszsd/events{/privacy}",
    "received_events_url": "https://api.github.com/users/lzszsd/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 72233650,
      "node_id": "MDU6TGFiZWw3MjIzMzY1MA==",
      "url": "https://api.github.com/repos/ethereum/go-ethereum/labels/type:bug",
      "name": "type:bug",
      "color": "FF5E5E",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2021-02-05T04:53:08Z",
  "updated_at": "2021-03-10T10:56:06Z",
  "closed_at": "2021-03-10T10:56:05Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "#### System information\r\nGeth\r\nVersion: 1.9.25-stable\r\nGit Commit: e7872729012a4871397307b12cc3f4772ffcbec6\r\nGit Commit Date: 20201211\r\nArchitecture: amd64\r\nProtocol Versions: [65 64 63]\r\nGo Version: go1.15.6\r\nOperating System: windows\r\nGOPATH=\r\nGOROOT=go\r\n\r\n#### Expected behaviour\r\nI am trying to use Web3.py to interact with my deployed contract. The following code is supposed to invoke the function \"recharge\" so that a user can recharge a specific amount of balance.\r\n>         \r\n        (temp_str, balance_int) = platform.functions.recharge(int(amount)).call()\r\n        gas = platform.functions.recharge(int(amount)).estimateGas({'from': node.eth.accounts[0]}) + 1000\r\n        tx_hash = platform.functions.recharge(int(amount)).transact({'from': node.eth.accounts[0], 'gas': gas})\r\n        # time.sleep(10)\r\n        tx_receipt = node.eth.waitForTransactionReceipt(tx_hash)\r\n        print(tx_receipt)\r\n\r\nAnd here is the initialization part of my program, where \"platform\" and \"node\" come from:\r\n> \r\n    import sys\r\n    import os\r\n    import json\r\n    import time\r\n    ...\r\n    from web3 import Web3\r\n    ...\r\n    from eth_utils.address import to_checksum_address\r\n    os.environ[\"CUDA_VISIBLE_DEVICES\"] = \"-1\"\r\n\r\n    ...\r\n\r\n    if __name__ == '__main__':\r\n        node = Web3(Web3.IPCProvider())\r\n        time.sleep(1)\r\n        contract_address = '0xDb2008E1B886056c016e212593B4925522D3F1Ff'\r\n        platform_address = to_checksum_address(contract_address)\r\n        abiTxt = open(\"abi.txt\", \"r\")\r\n        platform_abi = abiTxt.read()\r\n        platform = node.eth.contract(address=platform_address, abi=platform_abi)\r\n        node.geth.miner.start(1)\r\n        node.geth.personal.unlockAccount(node.eth.accounts[0], 'XXX') \r\n        ...\r\n\r\nAnd finally, the related part of the contract:\r\n> \r\n    contract energyTrade{\r\n        ...\r\n        mapping (address => uint) balances;\r\n        ...\r\n        function recharge(uint _amount) public returns(string memory, uint) {\r\n            balances[msg.sender] += _amount;\r\n            return (\"Recharge successfully!\", balances[msg.sender]);\r\n        }\r\nNow let's go back to my first quote of code: **I hope to see** the right return from call() the first time I run the code. However, this does not provide enough information about whether the recharge amount X is really added into the balance in the contract. So **I hope to see** the right current amount, which should be X, when I run it for the second time with the input \"int(amount)\" equal to 0. \r\n\r\nPeer connection and block synchronization have proved stable on the private chain. The contract has been tested and works out well in Remix.         \r\n#### Actual behaviour\r\nHowever, when I ran the mentioned code, the transaction would not WRITE any data into the contract. The second return from call() was 0, which means the first transaction in which the function \"recharge\" was involved had failed. Here is more information I dug out when I was trying to fix the problem:\r\n\r\nReading the geth log, I think this is where the bug stems from, notably the first line:\r\n\r\n> \r\n    WARN [02-04|20:37:47.140] Caller gas above allowance, capping      requested=232211324932526 cap=25000000\r\n    INFO [02-04|20:37:47.192] Submitted transaction                    fullhash=0xc956dab71ff6b077f686b43ba65ef2e3c914398f4\r\n    3a532671cb1fb0134552268 recipient=0xDb2008E1B886056c016e212593B4925522D3F1Ff\r\n    INFO [02-04|20:37:48.461] Commit new mining work                   number=1321 sealhash=\"f13cf7鈥?e52d1\" uncles=0 txs=0 \r\n    gas=0     fees=0          elapsed=2.000s\r\n    INFO [02-04|20:37:48.471] Commit new mining work                   number=1321 sealhash=\"75df5d鈥288fa\" uncles=0 txs=1 \r\n    gas=28061 fees=2.8061e-05 elapsed=2.009s\r\n    INFO [02-04|20:37:48.741] Successfully sealed new block            number=1321 sealhash=\"75df5d鈥288fa\" hash=\"84bd6c \r\n    鈥0\r\n    e94e\" elapsed=270.277ms\r\n    INFO [02-04|20:37:48.741] 馃敆 block reached canonical chain          number=1314 hash=\"0789fa鈥3720c\"\r\n    INFO [02-04|20:37:48.741] 馃敤 mined potential block                  number=1321 hash=\"84bd6c鈥0e94e\"\r\n\r\nWhy is the requested gas such huge? How can I set the global gas cap?\r\n\r\nAnd an important finding is that the third INFO records the normal gas, which is very close to the gas I will consume if I test the function on Remix, and is also identical to the gas(28061) in the transaction receipt:\r\n\r\n> \r\n    AttributeDict({'blockHash': HexBytes('0x84bd6c365f73aa715f2ef703d97fe14e3fb646167bd2bbf1d7659f42dab0e94e'), \r\n    'blockNumber': 1321, 'contractAddress': None, 'cumulativeGasUsed': 28061, 'from': \r\n    '0xA21c63eC1e5aCe46B25fc4e66a8aECc42062b232', 'gasUsed': 28061, 'logs': [], 'logsBloom': \r\n    HexBytes('0x0'), 'root': '0x8d6f08c7b3f8ae78c55d4040289df2b2cf1e8f30705c9661c9926b6ba3ad0692', 'to': \r\n    '0xDb2008E1B886056c016e212593B4925522D3F1Ff', 'transactionHash': \r\n    HexBytes('0xc956dab71ff6b077f686b43ba65ef2e3c914398f43a532671cb1fb0134552268'), 'transactionIndex': 0\r\n    })\r\n\r\nThis is the first time I post an issue, and sorry for the wordiness. But it's really urgent. I have been working on this single problem for a week. Please help!  @gravityblast @bts @shazow @fjl @sauliusgrigaitis (Sorry, not sure about which expert to mention, so I just disturb you all.)\r\n#### Steps to reproduce the behaviour\r\nForgot to post my geth instruction:\r\n\r\n> \r\n    geth --identity \"Energy\" --http --http.corsdomain \"*\" --datadir energy --port 30303 --http.api \"eth,net,web3,personal\" --networkid 12 --gcmode archive --allow-insecure-unlock --nodiscover --syncmode \"fast\" console 2>>energy.log\r\n\r\n#### Backtrace\r\n\r\n````\r\n[backtrace]\r\n````\r\n",
  "closed_by": {
    "login": "MariusVanDerWijden",
    "id": 16664698,
    "node_id": "MDQ6VXNlcjE2NjY0Njk4",
    "avatar_url": "https://avatars.githubusercontent.com/u/16664698?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/MariusVanDerWijden",
    "html_url": "https://github.com/MariusVanDerWijden",
    "followers_url": "https://api.github.com/users/MariusVanDerWijden/followers",
    "following_url": "https://api.github.com/users/MariusVanDerWijden/following{/other_user}",
    "gists_url": "https://api.github.com/users/MariusVanDerWijden/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/MariusVanDerWijden/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/MariusVanDerWijden/subscriptions",
    "organizations_url": "https://api.github.com/users/MariusVanDerWijden/orgs",
    "repos_url": "https://api.github.com/users/MariusVanDerWijden/repos",
    "events_url": "https://api.github.com/users/MariusVanDerWijden/events{/privacy}",
    "received_events_url": "https://api.github.com/users/MariusVanDerWijden/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/22268/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/22268/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/795244947",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/22268#issuecomment-795244947",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/22268",
    "id": 795244947,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc5NTI0NDk0Nw==",
    "user": {
      "login": "MariusVanDerWijden",
      "id": 16664698,
      "node_id": "MDQ6VXNlcjE2NjY0Njk4",
      "avatar_url": "https://avatars.githubusercontent.com/u/16664698?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MariusVanDerWijden",
      "html_url": "https://github.com/MariusVanDerWijden",
      "followers_url": "https://api.github.com/users/MariusVanDerWijden/followers",
      "following_url": "https://api.github.com/users/MariusVanDerWijden/following{/other_user}",
      "gists_url": "https://api.github.com/users/MariusVanDerWijden/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MariusVanDerWijden/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MariusVanDerWijden/subscriptions",
      "organizations_url": "https://api.github.com/users/MariusVanDerWijden/orgs",
      "repos_url": "https://api.github.com/users/MariusVanDerWijden/repos",
      "events_url": "https://api.github.com/users/MariusVanDerWijden/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MariusVanDerWijden/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-10T10:56:05Z",
    "updated_at": "2021-03-10T10:56:05Z",
    "author_association": "MEMBER",
    "body": "I don't think this is an issue in geth. Seems like web3 sends the transaction with to much gas, nothing go-ethereum can do about that. You can try to run geth with higher verbosity, maybe that produce better logs. But I think the best way to debug this is to log out everything that web3 produces.\r\n\r\nI will close this for now, please reopen if you find that this is indeed a bug in go-ethereum",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/795244947/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
