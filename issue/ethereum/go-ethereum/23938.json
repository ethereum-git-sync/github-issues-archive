{
  "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/23938",
  "repository_url": "https://api.github.com/repos/ethereum/go-ethereum",
  "labels_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/23938/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/23938/comments",
  "events_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/23938/events",
  "html_url": "https://github.com/ethereum/go-ethereum/issues/23938",
  "id": 1059061316,
  "node_id": "I_kwDOAOvK984_H_5E",
  "number": 23938,
  "title": "on contract subscription error, the subscription is dropped",
  "user": {
    "login": "yelhouti",
    "id": 5471639,
    "node_id": "MDQ6VXNlcjU0NzE2Mzk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5471639?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/yelhouti",
    "html_url": "https://github.com/yelhouti",
    "followers_url": "https://api.github.com/users/yelhouti/followers",
    "following_url": "https://api.github.com/users/yelhouti/following{/other_user}",
    "gists_url": "https://api.github.com/users/yelhouti/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/yelhouti/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/yelhouti/subscriptions",
    "organizations_url": "https://api.github.com/users/yelhouti/orgs",
    "repos_url": "https://api.github.com/users/yelhouti/repos",
    "events_url": "https://api.github.com/users/yelhouti/events{/privacy}",
    "received_events_url": "https://api.github.com/users/yelhouti/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 72233650,
      "node_id": "MDU6TGFiZWw3MjIzMzY1MA==",
      "url": "https://api.github.com/repos/ethereum/go-ethereum/labels/type:bug",
      "name": "type:bug",
      "color": "FF5E5E",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": {
    "login": "fjl",
    "id": 6915,
    "node_id": "MDQ6VXNlcjY5MTU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6915?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/fjl",
    "html_url": "https://github.com/fjl",
    "followers_url": "https://api.github.com/users/fjl/followers",
    "following_url": "https://api.github.com/users/fjl/following{/other_user}",
    "gists_url": "https://api.github.com/users/fjl/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/fjl/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/fjl/subscriptions",
    "organizations_url": "https://api.github.com/users/fjl/orgs",
    "repos_url": "https://api.github.com/users/fjl/repos",
    "events_url": "https://api.github.com/users/fjl/events{/privacy}",
    "received_events_url": "https://api.github.com/users/fjl/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "fjl",
      "id": 6915,
      "node_id": "MDQ6VXNlcjY5MTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6915?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjl",
      "html_url": "https://github.com/fjl",
      "followers_url": "https://api.github.com/users/fjl/followers",
      "following_url": "https://api.github.com/users/fjl/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjl/subscriptions",
      "organizations_url": "https://api.github.com/users/fjl/orgs",
      "repos_url": "https://api.github.com/users/fjl/repos",
      "events_url": "https://api.github.com/users/fjl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjl/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 12,
  "created_at": "2021-11-20T04:57:04Z",
  "updated_at": "2021-12-09T10:22:44Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "#### System information\r\n\r\nGeth version: ` v1.10.12`\r\nOS & Version: Linux\r\nCommit hash : (if `develop`)\r\n\r\n#### Expected behaviour\r\nWhen I subscribe to an event on some contract, and parsing or verification or anything else fails, I expect to stay subscribed and not go in an infinite loop and errors. \r\n\r\n#### Actual behaviour\r\nThe the error channel of the subscription keeps emitting in an infinite loop logging many times for example \"Failed on event...\" in the code below\r\n\r\n#### Steps to reproduce the behaviour\r\n```\r\n\tch := make(chan *MyToken)\r\n\tsub, err := contract.WatchSwap(nil, ch, nil, nil)\r\n\tif err != nil {\r\n\t\tlogrus.WithError(err).Fatal(\"Failed to subscribe to Swap events\")\r\n\t}\r\n\tlogrus.Info(\"Listening to Swap events\")\r\n\terrCh := sub.Err()\r\n         for {\r\n\t\tselect {\r\n\t\t\tcase _ = <- errCh:\r\n\t\t\t\tlogrus.WithError(err).Info(\"Failed on event, no big deal should just ignore and wait for next event\")\r\n\t\t\tcase swap := <- ch:\r\n\t\t\t\tlogrus.Info(\"Amount0In: \", swap.Amount)\r\n\t\t}\r\n\t}\r\n```",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/23938/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/23938/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/975201106",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/23938#issuecomment-975201106",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/23938",
    "id": 975201106,
    "node_id": "IC_kwDOAOvK9846IGNS",
    "user": {
      "login": "karalabe",
      "id": 129561,
      "node_id": "MDQ6VXNlcjEyOTU2MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/129561?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/karalabe",
      "html_url": "https://github.com/karalabe",
      "followers_url": "https://api.github.com/users/karalabe/followers",
      "following_url": "https://api.github.com/users/karalabe/following{/other_user}",
      "gists_url": "https://api.github.com/users/karalabe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/karalabe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/karalabe/subscriptions",
      "organizations_url": "https://api.github.com/users/karalabe/orgs",
      "repos_url": "https://api.github.com/users/karalabe/repos",
      "events_url": "https://api.github.com/users/karalabe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/karalabe/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-22T07:26:02Z",
    "updated_at": "2021-11-22T07:26:02Z",
    "author_association": "MEMBER",
    "body": "`sub.Err()` is the error channel if the entire subscription failed. At that point it's dead. Apart from the first error value that you can consume and inspect, the channel will afterwards be closed, so if you try to read from it, you'll get an infinite steam of `nil` values (this is how Go channels work). You need to abort at that point.\r\n\r\nOut of curiosity though, what are you doing and how? Are you using our even subscriptions in custom code? If yes, you can't send an error per item, it's just \"blow up altogether\".\r\n\r\n@fjl implemented a `Resubscribe` method which attempts to resubscribe to events after a failure, but my guess is that that might be racey depending on how you use it (you might miss events that happened in between an error and a resub).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/975201106/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/976116460",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/23938#issuecomment-976116460",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/23938",
    "id": 976116460,
    "node_id": "IC_kwDOAOvK9846Llrs",
    "user": {
      "login": "yelhouti",
      "id": 5471639,
      "node_id": "MDQ6VXNlcjU0NzE2Mzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5471639?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yelhouti",
      "html_url": "https://github.com/yelhouti",
      "followers_url": "https://api.github.com/users/yelhouti/followers",
      "following_url": "https://api.github.com/users/yelhouti/following{/other_user}",
      "gists_url": "https://api.github.com/users/yelhouti/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yelhouti/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yelhouti/subscriptions",
      "organizations_url": "https://api.github.com/users/yelhouti/orgs",
      "repos_url": "https://api.github.com/users/yelhouti/repos",
      "events_url": "https://api.github.com/users/yelhouti/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yelhouti/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-23T02:55:49Z",
    "updated_at": "2021-11-23T02:55:49Z",
    "author_association": "NONE",
    "body": "@karalabe I don't understand why it would be implemented this way, I am indeed subscribing to events on some custom code and some events are faulty \"event signature mismatch\" (ie don't match abi signature, don't ask me why XD), I would rather just skip them and wait for the next one.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/976116460/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/978162867",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/23938#issuecomment-978162867",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/23938",
    "id": 978162867,
    "node_id": "IC_kwDOAOvK9846TZSz",
    "user": {
      "login": "fjl",
      "id": 6915,
      "node_id": "MDQ6VXNlcjY5MTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6915?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjl",
      "html_url": "https://github.com/fjl",
      "followers_url": "https://api.github.com/users/fjl/followers",
      "following_url": "https://api.github.com/users/fjl/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjl/subscriptions",
      "organizations_url": "https://api.github.com/users/fjl/orgs",
      "repos_url": "https://api.github.com/users/fjl/repos",
      "events_url": "https://api.github.com/users/fjl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjl/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-24T19:29:34Z",
    "updated_at": "2021-11-24T19:31:50Z",
    "author_association": "MEMBER",
    "body": "It's a really interesting question how this should be handled. The Subscription interface very clearly says that the `Err()` channel only receives one value. It also defines that the error channel will be closed when the subscription ends.\r\n\r\nThere is some precedent for dealing with encoding errors in subscriptions in the JSON-RPC subscription implementation. When the client receives a JSON value that cannot be decoded into the subscription channel type, it will close the subscription and report the error. As you have discovered, the handling is the same for contract event channels (which are implemented as wrappers of another subscription internally).\r\n\r\nMe and @karalabe think it's usually best to make encoding errors 'fatal', because bad values returned by the subscription usually indicate a deeper problem your application should know about. When watching a specific contract with known EVM code, invalid events should never never be emitted, so it's good to make the error fatal. For example, if your app is watching a token, but your client can't process all possible 'token transfer' events, it may lead to incorrect balance reporting or even financial loss.\r\n\r\nHowever, if you would subscribe to events *by topic* only, invalid/mismatching ABI could be seen by the subscription and it would be preferable to ignore the invalid events or deal with them in another way. The subscription interface is indeed not prepared for this case.\r\n\r\nThis is why @karalabe asked:\r\n\r\n> Out of curiosity though, what are you doing and how? Are you using our even subscriptions in custom code?\r\n\r\nAre you using abigen contract bindings? Handwritten bindings for a specific contract? \r\n\r\nIf you are using abigen, the issue should not happen, [it always watches specific contracts by address](https://github.com/ethereum/go-ethereum/blob/66ee9422f56626dccc94b00762b8991c9b3195b0/accounts/abi/bind/base.go#L469) and verifies the bytecode hash.\r\n\r\nIf you are using abigen and the error `event signature mismatch` happens, we need to fix this error instead of ignoring it in the subscription. The error was introduced in this recent commit: https://github.com/ethereum/go-ethereum/commit/92c5d104d0158ed29a2aa4f583c40b7595b72a77#diff-bb1950818b7efffa77c1ff1056325379c639dddf772bce7a98ad2e33309766be\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/978162867/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/978727530",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/23938#issuecomment-978727530",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/23938",
    "id": 978727530,
    "node_id": "IC_kwDOAOvK9846VjJq",
    "user": {
      "login": "yelhouti",
      "id": 5471639,
      "node_id": "MDQ6VXNlcjU0NzE2Mzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5471639?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yelhouti",
      "html_url": "https://github.com/yelhouti",
      "followers_url": "https://api.github.com/users/yelhouti/followers",
      "following_url": "https://api.github.com/users/yelhouti/following{/other_user}",
      "gists_url": "https://api.github.com/users/yelhouti/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yelhouti/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yelhouti/subscriptions",
      "organizations_url": "https://api.github.com/users/yelhouti/orgs",
      "repos_url": "https://api.github.com/users/yelhouti/repos",
      "events_url": "https://api.github.com/users/yelhouti/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yelhouti/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-25T01:50:30Z",
    "updated_at": "2021-11-25T01:50:30Z",
    "author_association": "NONE",
    "body": "@fjl thank you for the detailed explanation. And I agree with the fatal approach.\r\nI also first though that the commit introduced the issue, but I used the same subscription with same ABI using ethers (js) and they both have the same behavior: `event signature mismatch` but it is ignored in the case of ethers.\r\n\r\nHere is a contract with this behavior:\r\n[0x1e67124681b402064cd0abe8ed1b5c79d2e02f64](https://polygonscan.com/address/0x1e67124681b402064cd0abe8ed1b5c79d2e02f64#tokentxns)\r\nand my code without the error handling\r\n```go\r\nclient, err := ethclient.Dial(url)\r\ncontract, err := NewBtcUsdc(common.HexToAddress(\"0x1e67124681b402064cd0abe8ed1b5c79d2e02f64\"), client)\r\nch := make(chan *BtcUsdcSwap)\r\nsub, err := contract.WatchSwap(nil, ch, nil, nil)\r\nfor {\r\n\tselect {\r\n\tcase _ = <- sub.Err():\r\n\t\tlogrus.WithError(err).Info(\"Failed on event\") // which fails for the reasons you explained\r\n\tcase swap := <- ch:\r\n\t\t...\r\n\t}\r\n}\r\n```\r\nThe weird thing is that I can see that the generated code subscribes only to the `Swap` event, but seems like the event name filter is lost somewhere and all events are returned, causing the deserialization error and the crash. What do you think.\r\n\r\nThanks again.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/978727530/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/979043496",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/23938#issuecomment-979043496",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/23938",
    "id": 979043496,
    "node_id": "IC_kwDOAOvK9846WwSo",
    "user": {
      "login": "holiman",
      "id": 142290,
      "node_id": "MDQ6VXNlcjE0MjI5MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/142290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/holiman",
      "html_url": "https://github.com/holiman",
      "followers_url": "https://api.github.com/users/holiman/followers",
      "following_url": "https://api.github.com/users/holiman/following{/other_user}",
      "gists_url": "https://api.github.com/users/holiman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/holiman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/holiman/subscriptions",
      "organizations_url": "https://api.github.com/users/holiman/orgs",
      "repos_url": "https://api.github.com/users/holiman/repos",
      "events_url": "https://api.github.com/users/holiman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/holiman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-25T09:52:22Z",
    "updated_at": "2021-11-25T09:52:22Z",
    "author_association": "MEMBER",
    "body": "You're doing something strange in both examples. In the latter example: \r\n```\r\ncontract, err := NewBtcUsdc(common.HexToAddress(\"0x1e67124681b402064cd0abe8ed1b5c79d2e02f64\"), client)\r\n...\r\n\tcase _ = <- sub.Err():\r\n\t\tlogrus.WithError(err).Info(\"Failed on event\") // which fails for the reasons you explained\r\n```\r\nThe `err` there should be `nil`. How come you are ignoring the return from `sub.Err()` ? \r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/979043496/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/980765722",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/23938#issuecomment-980765722",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/23938",
    "id": 980765722,
    "node_id": "IC_kwDOAOvK9846dUwa",
    "user": {
      "login": "yelhouti",
      "id": 5471639,
      "node_id": "MDQ6VXNlcjU0NzE2Mzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5471639?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yelhouti",
      "html_url": "https://github.com/yelhouti",
      "followers_url": "https://api.github.com/users/yelhouti/followers",
      "following_url": "https://api.github.com/users/yelhouti/following{/other_user}",
      "gists_url": "https://api.github.com/users/yelhouti/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yelhouti/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yelhouti/subscriptions",
      "organizations_url": "https://api.github.com/users/yelhouti/orgs",
      "repos_url": "https://api.github.com/users/yelhouti/repos",
      "events_url": "https://api.github.com/users/yelhouti/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yelhouti/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-27T17:50:55Z",
    "updated_at": "2021-11-27T18:24:22Z",
    "author_association": "NONE",
    "body": "typo when copy paste, it was:\r\n```\r\ncase err = <- sub.Err():\r\n```\r\nOutput is:\r\n> Failed on event                               error=\"event signature mismatch\"",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/980765722/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/984622011",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/23938#issuecomment-984622011",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/23938",
    "id": 984622011,
    "node_id": "IC_kwDOAOvK9846sCO7",
    "user": {
      "login": "holiman",
      "id": 142290,
      "node_id": "MDQ6VXNlcjE0MjI5MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/142290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/holiman",
      "html_url": "https://github.com/holiman",
      "followers_url": "https://api.github.com/users/holiman/followers",
      "following_url": "https://api.github.com/users/holiman/following{/other_user}",
      "gists_url": "https://api.github.com/users/holiman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/holiman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/holiman/subscriptions",
      "organizations_url": "https://api.github.com/users/holiman/orgs",
      "repos_url": "https://api.github.com/users/holiman/repos",
      "events_url": "https://api.github.com/users/holiman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/holiman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-12-02T13:21:00Z",
    "updated_at": "2021-12-02T13:21:00Z",
    "author_association": "MEMBER",
    "body": "I took the ABI from that polygon scanner, and plugged it into our abi decoder. \r\nIt found these events: \r\n```\r\nname: Approval id: 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925 ev: event Approval(address indexed owner, address indexed spender, uint256 value)\r\nname: Burn id: 0xdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496 ev: event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to)\r\nname: Mint id: 0x4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f ev: event Mint(address indexed sender, uint256 amount0, uint256 amount1)\r\nname: Swap id: 0xd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d822 ev: event Swap(address indexed sender, uint256 amount0In, uint256 amount1In, uint256 amount0Out, uint256 amount1Out, address indexed to)\r\nname: Sync id: 0x1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1 ev: event Sync(uint112 reserve0, uint112 reserve1)\r\nname: Transfer id: 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef ev: event Transfer(address indexed from, address indexed to, uint256 value)\r\n```\r\nNow, the error yousee happens when \r\n```\r\n\tif log.Topics[0] != c.abi.Events[event].ID {\r\n\t\treturn fmt.Errorf(\"event signature mismatch\")\r\n\t}\r\n```\r\nAnd looking at `topic[0]` on some of the swap-events on that same scanner:; \r\n![Screenshot 2021-12-02 at 14-19-54 Contract Address 0x1e67124681b402064cd0abe8ed1b5c79d2e02f64 PolygonScan](https://user-images.githubusercontent.com/142290/144429882-26d55724-ede4-412a-8913-ec8bc6c4d8d3.png)\r\n\r\nIt does have `0xd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d822` as the first topic. \r\nSo, still have no idea what's happening here. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/984622011/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/984626152",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/23938#issuecomment-984626152",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/23938",
    "id": 984626152,
    "node_id": "IC_kwDOAOvK9846sDPo",
    "user": {
      "login": "holiman",
      "id": 142290,
      "node_id": "MDQ6VXNlcjE0MjI5MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/142290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/holiman",
      "html_url": "https://github.com/holiman",
      "followers_url": "https://api.github.com/users/holiman/followers",
      "following_url": "https://api.github.com/users/holiman/following{/other_user}",
      "gists_url": "https://api.github.com/users/holiman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/holiman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/holiman/subscriptions",
      "organizations_url": "https://api.github.com/users/holiman/orgs",
      "repos_url": "https://api.github.com/users/holiman/repos",
      "events_url": "https://api.github.com/users/holiman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/holiman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-12-02T13:26:12Z",
    "updated_at": "2021-12-02T13:26:12Z",
    "author_association": "MEMBER",
    "body": "If you were to make the following modification, I think we'd know a bit more: \r\n```diff\r\ndiff --git a/accounts/abi/bind/base.go b/accounts/abi/bind/base.go\r\nindex f4e5a2a900..951397d1a6 100644\r\n--- a/accounts/abi/bind/base.go\r\n+++ b/accounts/abi/bind/base.go\r\n@@ -481,8 +481,8 @@ func (c *BoundContract) WatchLogs(opts *WatchOpts, name string, query ...[]inter\r\n \r\n // UnpackLog unpacks a retrieved log into the provided output structure.\r\n func (c *BoundContract) UnpackLog(out interface{}, event string, log types.Log) error {\r\n-       if log.Topics[0] != c.abi.Events[event].ID {\r\n-               return fmt.Errorf(\"event signature mismatch\")\r\n+       if have, want := log.Topics[0], c.abi.Events[event].ID; have != want {\r\n+               return fmt.Errorf(\"event signature mismatch, have %v want %v\", have.Hex(), want.Hex())\r\n        }\r\n        if len(log.Data) > 0 {\r\n                if err := c.abi.UnpackIntoInterface(out, event, log.Data); err != nil {\r\n@@ -500,8 +500,8 @@ func (c *BoundContract) UnpackLog(out interface{}, event string, log types.Log)\r\n \r\n // UnpackLogIntoMap unpacks a retrieved log into the provided map.\r\n func (c *BoundContract) UnpackLogIntoMap(out map[string]interface{}, event string, log types.Log) error {\r\n-       if log.Topics[0] != c.abi.Events[event].ID {\r\n-               return fmt.Errorf(\"event signature mismatch\")\r\n+       if have, want := log.Topics[0], c.abi.Events[event].ID; have != want {\r\n+               return fmt.Errorf(\"event signature mismatch, have %v want %v\", have.Hex(), want.Hex())\r\n        }\r\n        if len(log.Data) > 0 {\r\n                if err := c.abi.UnpackIntoMap(out, event, log.Data); err != nil {\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/984626152/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/985148500",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/23938#issuecomment-985148500",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/23938",
    "id": 985148500,
    "node_id": "IC_kwDOAOvK9846uCxU",
    "user": {
      "login": "yelhouti",
      "id": 5471639,
      "node_id": "MDQ6VXNlcjU0NzE2Mzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5471639?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yelhouti",
      "html_url": "https://github.com/yelhouti",
      "followers_url": "https://api.github.com/users/yelhouti/followers",
      "following_url": "https://api.github.com/users/yelhouti/following{/other_user}",
      "gists_url": "https://api.github.com/users/yelhouti/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yelhouti/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yelhouti/subscriptions",
      "organizations_url": "https://api.github.com/users/yelhouti/orgs",
      "repos_url": "https://api.github.com/users/yelhouti/repos",
      "events_url": "https://api.github.com/users/yelhouti/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yelhouti/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-12-03T01:52:24Z",
    "updated_at": "2021-12-03T01:52:24Z",
    "author_association": "NONE",
    "body": "I was expecting you to that, but anyway here is the result:\r\n> event signature mismatch, have 0x1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1 want 0xd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d822\r\n\r\nwhich is a sync event, which means that even when I subscribe to Swap events other events are returned by the server which can be expected. web3js... ignore these events since I am not subscribing to them but the go code try to parse even when they do not match.\r\nI should maybe note that i am using websocket which I guess you suspected. Maybe the code just needs to fix that.\r\n\r\nFor people facing the same issue, maybe the generated code can be changed to do the check the topic before calling UnpackLog to ignore other event types",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/985148500/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/985151418",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/23938#issuecomment-985151418",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/23938",
    "id": 985151418,
    "node_id": "IC_kwDOAOvK9846uDe6",
    "user": {
      "login": "yelhouti",
      "id": 5471639,
      "node_id": "MDQ6VXNlcjU0NzE2Mzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5471639?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yelhouti",
      "html_url": "https://github.com/yelhouti",
      "followers_url": "https://api.github.com/users/yelhouti/followers",
      "following_url": "https://api.github.com/users/yelhouti/following{/other_user}",
      "gists_url": "https://api.github.com/users/yelhouti/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yelhouti/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yelhouti/subscriptions",
      "organizations_url": "https://api.github.com/users/yelhouti/orgs",
      "repos_url": "https://api.github.com/users/yelhouti/repos",
      "events_url": "https://api.github.com/users/yelhouti/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yelhouti/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-12-03T02:00:15Z",
    "updated_at": "2021-12-03T02:00:15Z",
    "author_association": "NONE",
    "body": "Another comment is that I can that the generated code uses contract.WatchLogs which appends to the query:\r\nquery = append([][]interface{}{{c.abi.Events[name].ID}}, query...)\r\nbut maybe this is ignored by the server or just optimized to avoid resubscribing for each type of event, and it is legitimate for the server to for the server to expect the client to the filtering (I don't know the spec).\r\nGood luck anyway",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/985151418/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/985395439",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/23938#issuecomment-985395439",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/23938",
    "id": 985395439,
    "node_id": "IC_kwDOAOvK9846u_Dv",
    "user": {
      "login": "fjl",
      "id": 6915,
      "node_id": "MDQ6VXNlcjY5MTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6915?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjl",
      "html_url": "https://github.com/fjl",
      "followers_url": "https://api.github.com/users/fjl/followers",
      "following_url": "https://api.github.com/users/fjl/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjl/subscriptions",
      "organizations_url": "https://api.github.com/users/fjl/orgs",
      "repos_url": "https://api.github.com/users/fjl/repos",
      "events_url": "https://api.github.com/users/fjl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjl/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-12-03T10:15:33Z",
    "updated_at": "2021-12-03T10:15:33Z",
    "author_association": "MEMBER",
    "body": "Interesting. I guess we could fix it by ignoring logs with non-matching topic then.\r\n\r\n@yelhouti do you know which server is behind the endpoint you are using?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/985395439/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/985396930",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/23938#issuecomment-985396930",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/23938",
    "id": 985396930,
    "node_id": "IC_kwDOAOvK9846u_bC",
    "user": {
      "login": "yelhouti",
      "id": 5471639,
      "node_id": "MDQ6VXNlcjU0NzE2Mzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5471639?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yelhouti",
      "html_url": "https://github.com/yelhouti",
      "followers_url": "https://api.github.com/users/yelhouti/followers",
      "following_url": "https://api.github.com/users/yelhouti/following{/other_user}",
      "gists_url": "https://api.github.com/users/yelhouti/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yelhouti/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yelhouti/subscriptions",
      "organizations_url": "https://api.github.com/users/yelhouti/orgs",
      "repos_url": "https://api.github.com/users/yelhouti/repos",
      "events_url": "https://api.github.com/users/yelhouti/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yelhouti/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-12-03T10:17:33Z",
    "updated_at": "2021-12-03T10:19:04Z",
    "author_association": "NONE",
    "body": "its a fork of this project maticmainnet (polygon) i used ankr to create the node.\r\nEdit: here: https://github.com/maticnetwork/bor @fjl ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/985396930/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
