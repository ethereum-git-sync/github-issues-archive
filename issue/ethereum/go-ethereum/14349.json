{
  "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/14349",
  "repository_url": "https://api.github.com/repos/ethereum/go-ethereum",
  "labels_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/14349/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/14349/comments",
  "events_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/14349/events",
  "html_url": "https://github.com/ethereum/go-ethereum/issues/14349",
  "id": 222562079,
  "node_id": "MDU6SXNzdWUyMjI1NjIwNzk=",
  "number": 14349,
  "title": "swarm: Directory manifest type",
  "user": {
    "login": "lmars",
    "id": 488515,
    "node_id": "MDQ6VXNlcjQ4ODUxNQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/488515?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/lmars",
    "html_url": "https://github.com/lmars",
    "followers_url": "https://api.github.com/users/lmars/followers",
    "following_url": "https://api.github.com/users/lmars/following{/other_user}",
    "gists_url": "https://api.github.com/users/lmars/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/lmars/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/lmars/subscriptions",
    "organizations_url": "https://api.github.com/users/lmars/orgs",
    "repos_url": "https://api.github.com/users/lmars/repos",
    "events_url": "https://api.github.com/users/lmars/events{/privacy}",
    "received_events_url": "https://api.github.com/users/lmars/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 72233652,
      "node_id": "MDU6TGFiZWw3MjIzMzY1Mg==",
      "url": "https://api.github.com/repos/ethereum/go-ethereum/labels/type:feature",
      "name": "type:feature",
      "color": "84b6eb",
      "default": false,
      "description": null
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": {
    "login": "acud",
    "id": 12988138,
    "node_id": "MDQ6VXNlcjEyOTg4MTM4",
    "avatar_url": "https://avatars.githubusercontent.com/u/12988138?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/acud",
    "html_url": "https://github.com/acud",
    "followers_url": "https://api.github.com/users/acud/followers",
    "following_url": "https://api.github.com/users/acud/following{/other_user}",
    "gists_url": "https://api.github.com/users/acud/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/acud/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/acud/subscriptions",
    "organizations_url": "https://api.github.com/users/acud/orgs",
    "repos_url": "https://api.github.com/users/acud/repos",
    "events_url": "https://api.github.com/users/acud/events{/privacy}",
    "received_events_url": "https://api.github.com/users/acud/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "acud",
      "id": 12988138,
      "node_id": "MDQ6VXNlcjEyOTg4MTM4",
      "avatar_url": "https://avatars.githubusercontent.com/u/12988138?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/acud",
      "html_url": "https://github.com/acud",
      "followers_url": "https://api.github.com/users/acud/followers",
      "following_url": "https://api.github.com/users/acud/following{/other_user}",
      "gists_url": "https://api.github.com/users/acud/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/acud/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/acud/subscriptions",
      "organizations_url": "https://api.github.com/users/acud/orgs",
      "repos_url": "https://api.github.com/users/acud/repos",
      "events_url": "https://api.github.com/users/acud/events{/privacy}",
      "received_events_url": "https://api.github.com/users/acud/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 9,
  "created_at": "2017-04-18T22:18:28Z",
  "updated_at": "2019-06-03T10:43:10Z",
  "closed_at": "2019-06-03T10:43:10Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "Collections of files are currently modelled using JSON manifests containing a list of entries, with each entry having a path, hash and some file attributes like size, content type, mode etc.\r\n\r\nThe manifests are stored as a trie such that multiple files which share a common prefix are represented by a sub-manifest.\r\n\r\nConsider storing a collection of three files named `foo.txt`, `files/01.txt` and `files/02.txt`, these would be represented by the following:\r\n\r\n```\r\n# <root-hash>\r\n[\r\n  {\"path\": \"f\", \"type\": \"application/bzz-manifest+json\", \"hash\": \"<hash1>\"}\r\n]\r\n\r\n# <hash1>\r\n[\r\n  {\"path\": \"iles/0\", \"type\": \"application/bzz-manifest+json\", \"hash\": \"<hash2>\"},\r\n  {\"path\": \"oo.txt\", \"type\": \"text/plain\", \"hash\": \"<hash>\"}\r\n]\r\n\r\n# <hash2>\r\n[\r\n  {\"path\": \"1.txt\", \"type\": \"text/plain\", \"hash\": \"<hash>\"},\r\n  {\"path\": \"2.txt\", \"type\": \"text/plain\", \"hash\": \"<hash>\"}\r\n]\r\n```\r\n\r\nThis representation leads to added complexity when treating this collection like a Unix filesystem (e.g. [mounting it with FUSE](https://github.com/ethereum/go-ethereum/blob/master/swarm/fuse/swarmfs_unix.go#L112-L146) or [listing files in a directory](https://github.com/ethereum/go-ethereum/blob/master/swarm/api/http/server.go#L452-L499)), and is actually less performant than if the manifests just represented directory indexes (compare looking up `f` -> `iles/0` -> `{1,2}.txt` to an equivalent directory based lookup `files` -> `0{1,2}.txt`).\r\n\r\nFiles can also contain a trailing slash which is also problematic (there is no way to access a file named `files/` in a Unix filesystem as it would be treated like a directory lookup).\r\n\r\nTo solve these issues, we propose adding an explicit \"directory\" manifest type which is more like a traditional Unix filesystem:\r\n\r\n* entries of type `application/bzz-manifest+json` are equivalent to directory inodes (i.e. a list of files or subdirectories)\r\n* all other entries are equivalent to file inodes\r\n* no paths are permitted to contain a `/` character\r\n\r\nThis makes it easier to traverse the collection like a Unix filesystem, and also solves the issue of files which have trailing slashes being inaccessible in a FUSE mount (since they are no longer permitted).\r\n\r\nThe above collection of files would then be represented by:\r\n\r\n```\r\n# <root-hash>\r\n[\r\n  {\"path\": \"files\", \"type\": \"application/bzz-manifest+json\", \"hash\": \"<hash1>\"},\r\n  {\"path\": \"foo.txt\", \"type\": \"text/plain\", \"hash\": \"<hash>\"}\r\n]\r\n\r\n# <hash1>\r\n[\r\n  {\"path\": \"01.txt\", \"type\": \"text/plain\", \"hash\": \"<hash>\"},\r\n  {\"path\": \"02.txt\", \"type\": \"text/plain\", \"hash\": \"<hash>\"}\r\n]\r\n```\r\n\r\n/cc @zelig @homotopycolimit ",
  "closed_by": {
    "login": "nonsense",
    "id": 50459,
    "node_id": "MDQ6VXNlcjUwNDU5",
    "avatar_url": "https://avatars.githubusercontent.com/u/50459?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nonsense",
    "html_url": "https://github.com/nonsense",
    "followers_url": "https://api.github.com/users/nonsense/followers",
    "following_url": "https://api.github.com/users/nonsense/following{/other_user}",
    "gists_url": "https://api.github.com/users/nonsense/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nonsense/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nonsense/subscriptions",
    "organizations_url": "https://api.github.com/users/nonsense/orgs",
    "repos_url": "https://api.github.com/users/nonsense/repos",
    "events_url": "https://api.github.com/users/nonsense/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nonsense/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/14349/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/14349/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/295722396",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/14349#issuecomment-295722396",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/14349",
    "id": 295722396,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5NTcyMjM5Ng==",
    "user": {
      "login": "zelig",
      "id": 769725,
      "node_id": "MDQ6VXNlcjc2OTcyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/769725?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zelig",
      "html_url": "https://github.com/zelig",
      "followers_url": "https://api.github.com/users/zelig/followers",
      "following_url": "https://api.github.com/users/zelig/following{/other_user}",
      "gists_url": "https://api.github.com/users/zelig/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zelig/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zelig/subscriptions",
      "organizations_url": "https://api.github.com/users/zelig/orgs",
      "repos_url": "https://api.github.com/users/zelig/repos",
      "events_url": "https://api.github.com/users/zelig/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zelig/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-20T12:40:51Z",
    "updated_at": "2017-04-20T12:40:51Z",
    "author_association": "MEMBER",
    "body": "ok we should start writing this up in a wiki or gist to see the whole picture.\r\n\r\nIn general the direction is to hide manifests. they should not be the format used for directory indexes.\r\nMy concern is that we still want to allow directory trees organised as a trie and break on slash. \r\nThe primary motivation being the guaranteed limited size of the log(n)) intermediate chunks when a file is accessed.\r\nIn such cases we need to determine what we do for  upload/download and trailing slash.\r\nFor upload from a directory, no trailing slash will be produced and manifest wide option can be provided on each manifest to indicate whether trailing slash is ignored for routing or not.\r\nThe behaviour when downloading such manifest is not problematic (current  swarm is correct)\r\n\r\nWhen downloading the compacted trie style manifest is, however. Even in such cases the problem only occurs if there are paths with and without the slash, e.g., `path` and `path/`. But if this is the case there will be a trie fork on `path`, ie;, `path` will point to a manifest that has entries for '\\path' and  an empty path. If we stipulate that empty path (default entry) always is explicitly represented in the manifest as a reference to a path of another manifest entry. \r\n\r\nA related issue is the ability to set the default entries for each directory as path, e.g., an index.html.\r\nIn the special case that you want a different entry for a `path`  and  `path/`, when you upload from a directory, you then want 2 default entries, one for empty and a separate for trailing slash.\r\n\r\n```\r\n{\r\n# <root-hash>\r\n{\r\n\"default\": \"files/foo.txt\"\r\n\"entries\": [\r\n  {\"path\": \"f\", \"type\": \"application/bzz-manifest+json\", \"hash\": \"<hash0>\"},\r\n]\r\n}\r\n\r\n# hash0\r\n{\r\n\"default\": \"oo.txt\",\r\n\"prefix\": \"/\", \r\n\"entries\": [\r\n  {\"path\": \"iles\", \"type\": \"application/bzz-manifest+json\", \"hash\": \"<hash1>\"},\r\n  {\"path\": \"oo.txt\", \"type\": \"application/bzz-manifest+json\" \"hash\": \"<hash2>\"},\r\n ]\r\n}\r\n# hash1\r\n{\r\n\"prefix\": \"/\",\r\n\"entries\": [\r\n  {\"path\": \"01.txt\", \"type\": \"text/plain\", \"hash\": \"<hash>\"},\r\n  {\"path\": \"02.txt\", \"type\": \"text/plain\", \"hash\": \"<hash>\"}\r\n]\r\n\r\n#hash2 \r\n{\r\n\"entries\": [\r\n{\"path\":\"\", \"hash\": <hash>}, \r\n{\"path\":\"/\", \"hash\": <hash>}}\r\n]\r\n}\r\n```\r\n\r\nthis is equivalent (is downloaded as):\r\n```\r\nroot/\r\n    files/\r\n      01.txt\r\n      02.text\r\n   foo.txt\r\n   foo.txt._trailing_slash_\r\n   ._manifest_\r\n\r\n# cat ._manifest_:\r\n{ \r\n  \"default\": \"foo.txt\",\r\n}\r\n\r\nwould something like this make more sense?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/295722396/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/388057908",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/14349#issuecomment-388057908",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/14349",
    "id": 388057908,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4ODA1NzkwOA==",
    "user": {
      "login": "cobordism",
      "id": 12838530,
      "node_id": "MDQ6VXNlcjEyODM4NTMw",
      "avatar_url": "https://avatars.githubusercontent.com/u/12838530?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cobordism",
      "html_url": "https://github.com/cobordism",
      "followers_url": "https://api.github.com/users/cobordism/followers",
      "following_url": "https://api.github.com/users/cobordism/following{/other_user}",
      "gists_url": "https://api.github.com/users/cobordism/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cobordism/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cobordism/subscriptions",
      "organizations_url": "https://api.github.com/users/cobordism/orgs",
      "repos_url": "https://api.github.com/users/cobordism/repos",
      "events_url": "https://api.github.com/users/cobordism/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cobordism/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-10T13:46:32Z",
    "updated_at": "2018-05-10T13:46:32Z",
    "author_association": "CONTRIBUTOR",
    "body": "There was some talk at the swarm orange summit 2018 about different types of manifest beyond the current simple type.\r\nThere seems to be a feeling that manifests should be more configurable - to allow things like path based routing and regular expression matching for example.... \r\nPerhaps we should have a general SIP about how to extend the Swarm Manifest spec for 0.4",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/388057908/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/429824571",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/14349#issuecomment-429824571",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/14349",
    "id": 429824571,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyOTgyNDU3MQ==",
    "user": {
      "login": "acud",
      "id": 12988138,
      "node_id": "MDQ6VXNlcjEyOTg4MTM4",
      "avatar_url": "https://avatars.githubusercontent.com/u/12988138?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/acud",
      "html_url": "https://github.com/acud",
      "followers_url": "https://api.github.com/users/acud/followers",
      "following_url": "https://api.github.com/users/acud/following{/other_user}",
      "gists_url": "https://api.github.com/users/acud/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/acud/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/acud/subscriptions",
      "organizations_url": "https://api.github.com/users/acud/orgs",
      "repos_url": "https://api.github.com/users/acud/repos",
      "events_url": "https://api.github.com/users/acud/events{/privacy}",
      "received_events_url": "https://api.github.com/users/acud/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-15T12:00:37Z",
    "updated_at": "2018-10-15T12:01:07Z",
    "author_association": "MEMBER",
    "body": "this will generally obsolete the current manifest type and will make it a special case needed only for traversals. it will also obsolete most fields on current manifest type as they will not be needed anymore.\r\n\r\ni think this change will make current traversal code's more complex in order to reach the exact same functionality it posses today. we would have to traverse both types anyway.\r\n\r\na more favourable solution would be to just add a bool flag on the current manifest type.\r\nas far as i understand the only case where the information that a directory is marked as a directory is relevant just when an empty directory has to be created on the filesystem.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/429824571/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/430630069",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/14349#issuecomment-430630069",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/14349",
    "id": 430630069,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMDYzMDA2OQ==",
    "user": {
      "login": "cobordism",
      "id": 12838530,
      "node_id": "MDQ6VXNlcjEyODM4NTMw",
      "avatar_url": "https://avatars.githubusercontent.com/u/12838530?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cobordism",
      "html_url": "https://github.com/cobordism",
      "followers_url": "https://api.github.com/users/cobordism/followers",
      "following_url": "https://api.github.com/users/cobordism/following{/other_user}",
      "gists_url": "https://api.github.com/users/cobordism/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cobordism/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cobordism/subscriptions",
      "organizations_url": "https://api.github.com/users/cobordism/orgs",
      "repos_url": "https://api.github.com/users/cobordism/repos",
      "events_url": "https://api.github.com/users/cobordism/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cobordism/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-17T13:33:49Z",
    "updated_at": "2018-10-17T13:33:49Z",
    "author_association": "CONTRIBUTOR",
    "body": "You mean a bool flag \"ismanifest=true\"? \n\nsure, that's how you'd show that this manifest is of directory type, but the rules are more than just having empty dirs, it must also include no filenames ending in / for example. no?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/430630069/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/430631679",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/14349#issuecomment-430631679",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/14349",
    "id": 430631679,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMDYzMTY3OQ==",
    "user": {
      "login": "acud",
      "id": 12988138,
      "node_id": "MDQ6VXNlcjEyOTg4MTM4",
      "avatar_url": "https://avatars.githubusercontent.com/u/12988138?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/acud",
      "html_url": "https://github.com/acud",
      "followers_url": "https://api.github.com/users/acud/followers",
      "following_url": "https://api.github.com/users/acud/following{/other_user}",
      "gists_url": "https://api.github.com/users/acud/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/acud/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/acud/subscriptions",
      "organizations_url": "https://api.github.com/users/acud/orgs",
      "repos_url": "https://api.github.com/users/acud/repos",
      "events_url": "https://api.github.com/users/acud/events{/privacy}",
      "received_events_url": "https://api.github.com/users/acud/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-17T13:38:18Z",
    "updated_at": "2018-10-17T13:38:18Z",
    "author_association": "MEMBER",
    "body": "in this regard, a trie split and a directory manifest are both cases of manifests. i mean a flag to denote `isDirectory=true`.\r\nrules are to be enforced by tooling, sure.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/430631679/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/431093304",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/14349#issuecomment-431093304",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/14349",
    "id": 431093304,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMTA5MzMwNA==",
    "user": {
      "login": "lmars",
      "id": 488515,
      "node_id": "MDQ6VXNlcjQ4ODUxNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/488515?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lmars",
      "html_url": "https://github.com/lmars",
      "followers_url": "https://api.github.com/users/lmars/followers",
      "following_url": "https://api.github.com/users/lmars/following{/other_user}",
      "gists_url": "https://api.github.com/users/lmars/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lmars/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lmars/subscriptions",
      "organizations_url": "https://api.github.com/users/lmars/orgs",
      "repos_url": "https://api.github.com/users/lmars/repos",
      "events_url": "https://api.github.com/users/lmars/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lmars/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-18T17:24:10Z",
    "updated_at": "2018-10-18T17:24:10Z",
    "author_association": "CONTRIBUTOR",
    "body": "@justelad I think it is worth zooming out and perhaps coming up with a more robust design.\r\n\r\nHaving the trie represented at the level of the manifest is, in my opinion, mixing two different abstractions into one.\r\n\r\nI think the system should be layered:\r\n\r\n1. an `Index` layer that is just a mapping of UTF8 strings to blobs of data with an efficient, chunk-level representation\r\n\r\n2. a `File` layer which associates blobs of data with associated metadata (much like the current `ManifestEntry`, a specific type of `Index` with keys like `mode`, `contentType`, `modTime` etc.)\r\n\r\n3. a `Filesystem` layer that is a high level organisation of `Files` and traversal mechanisms (much like the current `Manifest`, a specific type of `Index` that maps paths to `Files`).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/431093304/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/431098605",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/14349#issuecomment-431098605",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/14349",
    "id": 431098605,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMTA5ODYwNQ==",
    "user": {
      "login": "acud",
      "id": 12988138,
      "node_id": "MDQ6VXNlcjEyOTg4MTM4",
      "avatar_url": "https://avatars.githubusercontent.com/u/12988138?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/acud",
      "html_url": "https://github.com/acud",
      "followers_url": "https://api.github.com/users/acud/followers",
      "following_url": "https://api.github.com/users/acud/following{/other_user}",
      "gists_url": "https://api.github.com/users/acud/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/acud/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/acud/subscriptions",
      "organizations_url": "https://api.github.com/users/acud/orgs",
      "repos_url": "https://api.github.com/users/acud/repos",
      "events_url": "https://api.github.com/users/acud/events{/privacy}",
      "received_events_url": "https://api.github.com/users/acud/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-18T17:40:24Z",
    "updated_at": "2018-10-18T17:40:24Z",
    "author_association": "MEMBER",
    "body": "@lmars I agree with you and I think this is evident from my comment in the swarm manifest SIP. The idea to ditch the trie design was not accepted so far in the team",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/431098605/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/431169354",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/14349#issuecomment-431169354",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/14349",
    "id": 431169354,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMTE2OTM1NA==",
    "user": {
      "login": "cobordism",
      "id": 12838530,
      "node_id": "MDQ6VXNlcjEyODM4NTMw",
      "avatar_url": "https://avatars.githubusercontent.com/u/12838530?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cobordism",
      "html_url": "https://github.com/cobordism",
      "followers_url": "https://api.github.com/users/cobordism/followers",
      "following_url": "https://api.github.com/users/cobordism/following{/other_user}",
      "gists_url": "https://api.github.com/users/cobordism/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cobordism/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cobordism/subscriptions",
      "organizations_url": "https://api.github.com/users/cobordism/orgs",
      "repos_url": "https://api.github.com/users/cobordism/repos",
      "events_url": "https://api.github.com/users/cobordism/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cobordism/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-18T21:25:22Z",
    "updated_at": "2018-10-18T21:25:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "who is 'the team' here? who makes that decision? whose answer / input do you need? ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/431169354/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/498206528",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/14349#issuecomment-498206528",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/14349",
    "id": 498206528,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5ODIwNjUyOA==",
    "user": {
      "login": "nonsense",
      "id": 50459,
      "node_id": "MDQ6VXNlcjUwNDU5",
      "avatar_url": "https://avatars.githubusercontent.com/u/50459?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nonsense",
      "html_url": "https://github.com/nonsense",
      "followers_url": "https://api.github.com/users/nonsense/followers",
      "following_url": "https://api.github.com/users/nonsense/following{/other_user}",
      "gists_url": "https://api.github.com/users/nonsense/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nonsense/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nonsense/subscriptions",
      "organizations_url": "https://api.github.com/users/nonsense/orgs",
      "repos_url": "https://api.github.com/users/nonsense/repos",
      "events_url": "https://api.github.com/users/nonsense/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nonsense/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-06-03T10:43:06Z",
    "updated_at": "2019-06-03T10:43:06Z",
    "author_association": "MEMBER",
    "body": "@lmars @homotopycolimit @zelig let's continue this conversation at https://github.com/ethersphere/swarm as the Swarm codebase lives there from now on.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/498206528/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
