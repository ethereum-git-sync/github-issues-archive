{
  "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/28128",
  "repository_url": "https://api.github.com/repos/ethereum/go-ethereum",
  "labels_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/28128/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/28128/comments",
  "events_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/28128/events",
  "html_url": "https://github.com/ethereum/go-ethereum/issues/28128",
  "id": 1898486004,
  "node_id": "I_kwDOAOvK985xKJj0",
  "number": 28128,
  "title": "JSONLogger emitting two lines on opcode failure",
  "user": {
    "login": "s1na",
    "id": 1591639,
    "node_id": "MDQ6VXNlcjE1OTE2Mzk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1591639?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/s1na",
    "html_url": "https://github.com/s1na",
    "followers_url": "https://api.github.com/users/s1na/followers",
    "following_url": "https://api.github.com/users/s1na/following{/other_user}",
    "gists_url": "https://api.github.com/users/s1na/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/s1na/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/s1na/subscriptions",
    "organizations_url": "https://api.github.com/users/s1na/orgs",
    "repos_url": "https://api.github.com/users/s1na/repos",
    "events_url": "https://api.github.com/users/s1na/events{/privacy}",
    "received_events_url": "https://api.github.com/users/s1na/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 72233650,
      "node_id": "MDU6TGFiZWw3MjIzMzY1MA==",
      "url": "https://api.github.com/repos/ethereum/go-ethereum/labels/type:bug",
      "name": "type:bug",
      "color": "FF5E5E",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": {
    "login": "s1na",
    "id": 1591639,
    "node_id": "MDQ6VXNlcjE1OTE2Mzk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1591639?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/s1na",
    "html_url": "https://github.com/s1na",
    "followers_url": "https://api.github.com/users/s1na/followers",
    "following_url": "https://api.github.com/users/s1na/following{/other_user}",
    "gists_url": "https://api.github.com/users/s1na/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/s1na/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/s1na/subscriptions",
    "organizations_url": "https://api.github.com/users/s1na/orgs",
    "repos_url": "https://api.github.com/users/s1na/repos",
    "events_url": "https://api.github.com/users/s1na/events{/privacy}",
    "received_events_url": "https://api.github.com/users/s1na/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "s1na",
      "id": 1591639,
      "node_id": "MDQ6VXNlcjE1OTE2Mzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1591639?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/s1na",
      "html_url": "https://github.com/s1na",
      "followers_url": "https://api.github.com/users/s1na/followers",
      "following_url": "https://api.github.com/users/s1na/following{/other_user}",
      "gists_url": "https://api.github.com/users/s1na/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/s1na/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/s1na/subscriptions",
      "organizations_url": "https://api.github.com/users/s1na/orgs",
      "repos_url": "https://api.github.com/users/s1na/repos",
      "events_url": "https://api.github.com/users/s1na/events{/privacy}",
      "received_events_url": "https://api.github.com/users/s1na/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 3,
  "created_at": "2023-09-15T13:56:30Z",
  "updated_at": "2023-09-19T08:42:19Z",
  "closed_at": null,
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "As you can see at the end of this trace, we emit an event before opcode execution (notice the weird opcode name too).However operation exec fails and we emit a fault event with the error. This is unnecessary and is incompatible with the spec from [execution-specs](https://github.com/ethereum/execution-specs). I think we should change this logic, remove `CaptureFault` and emit `CaptureState` after opcode execution (while keeping the values such as memory, stack to pre-execution values).\r\n\r\n```\r\n{\"pc\":0,\"op\":127,\"gas\":\"0x54364e77\",\"gasCost\":\"0x3\",\"memSize\":0,\"stack\":[],\"depth\":1,\"refund\":0,\"opName\":\"PUSH32\"}\r\n{\"pc\":33,\"op\":68,\"gas\":\"0x54364e74\",\"gasCost\":\"0x2\",\"memSize\":0,\"stack\":[\"0x0\"],\"depth\":1,\"refund\":0,\"opName\":\"DIFFICULTY\"}\r\n{\"pc\":34,\"op\":127,\"gas\":\"0x54364e72\",\"gasCost\":\"0x3\",\"memSize\":0,\"stack\":[\"0x0\",\"0x20000\"],\"depth\":1,\"refund\":0,\"opName\":\"PUSH32\"}\r\n{\"pc\":67,\"op\":127,\"gas\":\"0x54364e6f\",\"gasCost\":\"0x3\",\"memSize\":0,\"stack\":[\"0x0\",\"0x20000\",\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"],\"depth\":1,\"refund\":0,\"opName\":\"PUSH32\"}\r\n{\"pc\":100,\"op\":127,\"gas\":\"0x54364e6c\",\"gasCost\":\"0x3\",\"memSize\":0,\"stack\":[\"0x0\",\"0x20000\",\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\",\"0x1\"],\"depth\":1,\"refund\":0,\"opName\":\"PUSH32\"}\r\n{\"pc\":133,\"op\":127,\"gas\":\"0x54364e69\",\"gasCost\":\"0x3\",\"memSize\":0,\"stack\":[\"0x0\",\"0x20000\",\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\",\"0x1\",\"0x1\"],\"depth\":1,\"refund\":0,\"opName\":\"PUSH32\"}\r\n{\"pc\":166,\"op\":127,\"gas\":\"0x54364e66\",\"gasCost\":\"0x3\",\"memSize\":0,\"stack\":[\"0x0\",\"0x20000\",\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\",\"0x1\",\"0x1\",\"0x0\"],\"depth\":1,\"refund\":0,\"opName\":\"PUSH32\"}\r\n{\"pc\":199,\"op\":127,\"gas\":\"0x54364e63\",\"gasCost\":\"0x3\",\"memSize\":0,\"stack\":[\"0x0\",\"0x20000\",\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\",\"0x1\",\"0x1\",\"0x0\",\"0x945304eb96065b2a98b57a48a06ae28d285a71b5\"],\"depth\":1,\"refund\":0,\"opName\":\"PUSH32\"}\r\n{\"pc\":232,\"op\":18,\"gas\":\"0x54364e60\",\"gasCost\":\"0x3\",\"memSize\":0,\"stack\":[\"0x0\",\"0x20000\",\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\",\"0x1\",\"0x1\",\"0x0\",\"0x945304eb96065b2a98b57a48a06ae28d285a71b5\",\"0x10000000000000000000000000000000000000000\"],\"depth\":1,\"refund\":0,\"opName\":\"SLT\"}\r\n{\"pc\":233,\"op\":49,\"gas\":\"0x54364e5d\",\"gasCost\":\"0xa28\",\"memSize\":0,\"stack\":[\"0x0\",\"0x20000\",\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\",\"0x1\",\"0x1\",\"0x0\",\"0x0\"],\"depth\":1,\"refund\":0,\"opName\":\"BALANCE\"}\r\n{\"pc\":234,\"op\":182,\"gas\":\"0x54364435\",\"gasCost\":\"0x0\",\"memSize\":0,\"stack\":[\"0x0\",\"0x20000\",\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\",\"0x1\",\"0x1\",\"0x0\",\"0x0\"],\"depth\":1,\"refund\":0,\"opName\":\"opcode 0xb6 not defined\"}\r\n{\"pc\":234,\"op\":182,\"gas\":\"0x54364435\",\"gasCost\":\"0x0\",\"memSize\":0,\"stack\":[\"0x0\",\"0x20000\",\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\",\"0x1\",\"0x1\",\"0x0\",\"0x0\"],\"depth\":1,\"refund\":0,\"opName\":\"opcode 0xb6 not defined\",\"error\":\"invalid opcode: opcode 0xb6 not defined\"}\r\n{\"output\":\"\",\"gasUsed\":\"0x54364e77\",\"error\":\"invalid opcode: opcode 0xb6 not defined\"}\r\n```\r\n\r\nWhile creating this ticket I also noticed that the StructLogger is not emitting a fault event at all. So it's not possible to capture the opcode error.\r\n\r\nA separate issue (this ticket is a braindump of discussion with Guru from execution specs) is even on an opcode validation error where no gas is charged we're emitting the static cost of the opcode.",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/28128/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/28128/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1722807025",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/28128#issuecomment-1722807025",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/28128",
    "id": 1722807025,
    "node_id": "IC_kwDOAOvK985mr_Lx",
    "user": {
      "login": "holiman",
      "id": 142290,
      "node_id": "MDQ6VXNlcjE0MjI5MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/142290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/holiman",
      "html_url": "https://github.com/holiman",
      "followers_url": "https://api.github.com/users/holiman/followers",
      "following_url": "https://api.github.com/users/holiman/following{/other_user}",
      "gists_url": "https://api.github.com/users/holiman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/holiman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/holiman/subscriptions",
      "organizations_url": "https://api.github.com/users/holiman/orgs",
      "repos_url": "https://api.github.com/users/holiman/repos",
      "events_url": "https://api.github.com/users/holiman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/holiman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-09-18T06:13:38Z",
    "updated_at": "2023-09-18T06:13:38Z",
    "author_association": "MEMBER",
    "body": "This is known, and consumers need to deal with it. For example, the goevmlab fuzzer-engine does it here: https://github.com/holiman/goevmlab/blob/master/evms/geth.go#L137 . For the record, Nimbus-eth1 has a similar quirk: https://github.com/holiman/goevmlab/pull/104#issuecomment-1703761097. \r\n\r\nI think we can close this as \"wontfix\", BUT, if you have some neat solution to this problem, then sure, we can get it fixed.   \r\n\r\n> I think we should change this logic, remove CaptureFault and emit CaptureState after opcode execution (while keeping the values such as memory, stack to pre-execution values).\r\n\r\nMaybe, can't really say until I've played with it a bit. \r\n\r\n> While creating this ticket I also noticed that the StructLogger is not emitting a fault event at all. So it's not possible to capture the opcode error.\r\n\r\nSounds like a bug, yes. \r\n\r\n\r\n> A separate issue s even on an opcode validation error where no gas is charged we're emitting the static cost of the opcode.\r\n\r\nI don't follow. When does \"no gas is charged\" ever occur? \r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1722807025/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1725038209",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/28128#issuecomment-1725038209",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/28128",
    "id": 1725038209,
    "node_id": "IC_kwDOAOvK985m0f6B",
    "user": {
      "login": "gurukamath",
      "id": 48196632,
      "node_id": "MDQ6VXNlcjQ4MTk2NjMy",
      "avatar_url": "https://avatars.githubusercontent.com/u/48196632?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gurukamath",
      "html_url": "https://github.com/gurukamath",
      "followers_url": "https://api.github.com/users/gurukamath/followers",
      "following_url": "https://api.github.com/users/gurukamath/following{/other_user}",
      "gists_url": "https://api.github.com/users/gurukamath/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gurukamath/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gurukamath/subscriptions",
      "organizations_url": "https://api.github.com/users/gurukamath/orgs",
      "repos_url": "https://api.github.com/users/gurukamath/repos",
      "events_url": "https://api.github.com/users/gurukamath/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gurukamath/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-09-19T08:17:34Z",
    "updated_at": "2023-09-19T08:17:34Z",
    "author_association": "CONTRIBUTOR",
    "body": "> I don't follow. When does \"no gas is charged\" ever occur?\r\n\r\nI'm not sure if \"no gas is charged\" is the right way to put it but the concrete example I had in mind is one where `stack underflow` happens in an opcode and we are unable to calculate the actual gas cost of the opcode. In such cases, the geth trace emits the static gas part, even though the evm errors before we actually get to charging the gas.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1725038209/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1725073943",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/28128#issuecomment-1725073943",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/28128",
    "id": 1725073943,
    "node_id": "IC_kwDOAOvK985m0ooX",
    "user": {
      "login": "holiman",
      "id": 142290,
      "node_id": "MDQ6VXNlcjE0MjI5MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/142290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/holiman",
      "html_url": "https://github.com/holiman",
      "followers_url": "https://api.github.com/users/holiman/followers",
      "following_url": "https://api.github.com/users/holiman/following{/other_user}",
      "gists_url": "https://api.github.com/users/holiman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/holiman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/holiman/subscriptions",
      "organizations_url": "https://api.github.com/users/holiman/orgs",
      "repos_url": "https://api.github.com/users/holiman/repos",
      "events_url": "https://api.github.com/users/holiman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/holiman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-09-19T08:42:19Z",
    "updated_at": "2023-09-19T08:42:19Z",
    "author_association": "MEMBER",
    "body": "Right -- yes, there are a lot of cases where we are unable to, or it's not even meaningful to speak about gas cost. In many of those cases, we only know the static cost. \r\n\r\nFor example an `MSTORE` which would cause allocation in terabytes, or uint overflow during gas calculation. There's no point in geth trying to determine whether the cost is `n` or `m` bazillion. \r\n\r\nI personally don't consider it behaviour in need of fixing.  ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1725073943/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
