{
  "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/21350",
  "repository_url": "https://api.github.com/repos/ethereum/go-ethereum",
  "labels_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/21350/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/21350/comments",
  "events_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/21350/events",
  "html_url": "https://github.com/ethereum/go-ethereum/issues/21350",
  "id": 662080348,
  "node_id": "MDU6SXNzdWU2NjIwODAzNDg=",
  "number": 21350,
  "title": "Random ordering of equally-priced transactions incentivises competitive spam ",
  "user": {
    "login": "livnev",
    "id": 3964494,
    "node_id": "MDQ6VXNlcjM5NjQ0OTQ=",
    "avatar_url": "https://avatars.githubusercontent.com/u/3964494?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/livnev",
    "html_url": "https://github.com/livnev",
    "followers_url": "https://api.github.com/users/livnev/followers",
    "following_url": "https://api.github.com/users/livnev/following{/other_user}",
    "gists_url": "https://api.github.com/users/livnev/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/livnev/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/livnev/subscriptions",
    "organizations_url": "https://api.github.com/users/livnev/orgs",
    "repos_url": "https://api.github.com/users/livnev/repos",
    "events_url": "https://api.github.com/users/livnev/events{/privacy}",
    "received_events_url": "https://api.github.com/users/livnev/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 41,
  "created_at": "2020-07-20T17:38:36Z",
  "updated_at": "2022-05-28T19:27:38Z",
  "closed_at": "2020-07-30T08:20:04Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "# Current behaviour\r\n\r\nIn the algorithm that a miner uses to order pending transactions into a new block, `go-ethereum` chooses a random order for transactions from different senders which have the same gas price. I believe this randomisation happens [here](https://github.com/ethereum/go-ethereum/blob/master/core/types/transaction.go#L343), due to the fact that [iterating over a map in Go randomises the keys](https://stackoverflow.com/a/55925880) (n.b. I am not familiar at all with the `go-ethereum` code base so this is just my naive guess). If this is indeed due to the default Go behaviour, it is possible that this \"feature\" is an accident, and not introduced for any specific reason (I am keen to hear if this is the case).\r\n\r\n# The problem with it\r\n\r\nIt has long been widely known that transaction submitters will bid higher gas prices in order to be included earlier in a block, often bidding in competition with other unconfirmed transactions. This is known as \"frontrunning\" or PGA (priority gas auction). It is recently becoming more widely known that in addition to this familiar sort of competition, there is also a widely employed method called \"backrunning\", in which a transaction sender wishes to have their transaction ordered immediately after some unconfirmed \"target transaction\".\r\n\r\nCommon examples of \"target transactions\" which make this desirable are price oracle updates that allow liquidation transactions to be triggered immediately afterwards, or trades on AMM (automated market maker) exchanges such as Uniswap where one trade affects the price offered to subsequent trades. In order to maximise their changes of being mined immediately after their target, a typical backrunner will send many identical transactions, with gas price identical to that of the target transaction, sometimes from different accounts, in order to increase the chances that one of their transactions is ordered after the target but before any competitor.\r\n\r\nIn essence, instead of a PGA in which competitors for a profitable transaction end up paying a portion of MEV (miner extractable value) to miners in gas fees by using a high gas price, backrunners transfer MEV to miners by spending more gas, without increasing the gas price. Compared to PGAs, backrunning likely imposes a larger negative externality on the network by consuming the gas limit (i.e. using up network throughput with useless transactions), unlike PGAs which do not have a disproportionate effect on block gas utilisation. For example, a backrunner who is prepared to spend $1,000 to capture a profitable opportunity by sending 1,000 $1-gas transactions is chewing up much more of the network's resources than a frontrunner who spends $1,000 on one high priority transaction. Therefore, it would likely benefit the network if backrunning was converted into frontrunning when possible, as a \"less harmful outlet\" for MEV extraction (the general concept of MEV and its potential negative externalities is out of the scope of this issue).\r\n\r\n# Examples\r\n\r\nThere are countless examples occurring every day, on different smart contract systems. Just a few hours ago, [this transaction](https://etherscan.io/tx/0xb5da8ed72ff6568c75914fdd29563c6d0840122fa49bddf420e5f28811c2dd1f) which mined in block `\r\n10496844` was targeted, with many backrunning transactions targeting it appearing in the same block and in previous blocks (for the curious, [this](https://etherscan.io/tx/0x0c39ea6fd215dcde5a8a8267d4d12f7708c2e04c8b17653417b0786f285cf369) was the ultimate \"winner\"). There have been many even more egregious examples where the target transaction (and consequently any other unconfirmed transactions in the network at the same or lower gas price) was effectively delayed/censored for many blocks by the backrunners. It seems that today a non-negligible part of the block space is occupied by this activity.\r\n\r\n# Possible solutions\r\n\r\nBackrunning seems largely to be made possible due to `go-ethereum`'s method of randomly ordering identically-priced transactions. If transactions were deterministically ordered, or ordered by some other quantity like arrival time, backrunning in its current form would not be possible. If ordering by arrival time, low latency transaction propagation will be incentivised instead in similar scenarios (whether or not this has any harmful side-effects is unclear). If deterministically ordering (e.g. by transaction hash), then participants will be incentivised to \"mine txhashes\" (or similar), which would add a PoW-style game to transaction priority but at least would not use Ethereum network resources. There could also be other approaches to ordering transactions that do not incentivise spam. \r\n\r\nIt is also possible for smart contracts to be designed in a way that removes the incentives for backrunning. For example, a price oracle contract used for liquidation or trading can have price updates take effect only in the following block after a price update transaction. For illustration:\r\n\r\n```\r\n  function poke(uint256 wut) {\r\n    was = val;\r\n    val = wut;\r\n    wen = block.number;\r\n  }\r\n\r\n  function read() {\r\n    if (block.number > wen) return val;\r\n    else return was;\r\n  }\r\n```\r\n\r\nHowever, it is not always clear that a backrunning scenario might be incentivised, or how to prevent it, so it may be preferable for this to be addressed at the client level. Smart contract authors may wish to mitigate this on the smart contract level for the time being (backrunning typically deteriorates the QoS for users of a smart contract, since it can have the effect of delaying user transactions or delaying oracle updates, etc.).  \r\n\r\n# Outstanding questions\r\n\r\n- Was there a reason that random ordering for identically-priced transactions was chosen, or is this purely an implementation detail in `go-ethereum`?\r\n- Are there disadvantages to the other possible tie-breaking methods for transaction ordering?\r\n\r\nthanks to @palkeo, [PhABCD](https://twitter.com/PhABCD/status/1285170944160522241), and others for their research on this topic",
  "closed_by": {
    "login": "adamschmideg",
    "id": 208822,
    "node_id": "MDQ6VXNlcjIwODgyMg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/208822?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/adamschmideg",
    "html_url": "https://github.com/adamschmideg",
    "followers_url": "https://api.github.com/users/adamschmideg/followers",
    "following_url": "https://api.github.com/users/adamschmideg/following{/other_user}",
    "gists_url": "https://api.github.com/users/adamschmideg/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/adamschmideg/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/adamschmideg/subscriptions",
    "organizations_url": "https://api.github.com/users/adamschmideg/orgs",
    "repos_url": "https://api.github.com/users/adamschmideg/repos",
    "events_url": "https://api.github.com/users/adamschmideg/events{/privacy}",
    "received_events_url": "https://api.github.com/users/adamschmideg/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/21350/reactions",
    "total_count": 36,
    "+1": 30,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 6,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/21350/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/661267140",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/21350#issuecomment-661267140",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/21350",
    "id": 661267140,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MTI2NzE0MA==",
    "user": {
      "login": "holiman",
      "id": 142290,
      "node_id": "MDQ6VXNlcjE0MjI5MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/142290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/holiman",
      "html_url": "https://github.com/holiman",
      "followers_url": "https://api.github.com/users/holiman/followers",
      "following_url": "https://api.github.com/users/holiman/following{/other_user}",
      "gists_url": "https://api.github.com/users/holiman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/holiman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/holiman/subscriptions",
      "organizations_url": "https://api.github.com/users/holiman/orgs",
      "repos_url": "https://api.github.com/users/holiman/repos",
      "events_url": "https://api.github.com/users/holiman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/holiman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-20T18:45:02Z",
    "updated_at": "2020-07-20T18:45:02Z",
    "author_association": "MEMBER",
    "body": "Thanks for the detailed write-up! > If deterministically ordering (e.g. by transaction hash), then participants will be incentivised to \"mine txhashes\" (or similar), which would add a PoW-style game to transaction priority but at least would not use Ethereum network resources. That sounds to me like a very nice idea, spontaneously. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/661267140/reactions",
      "total_count": 6,
      "+1": 6,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/661287673",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/21350#issuecomment-661287673",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/21350",
    "id": 661287673,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MTI4NzY3Mw==",
    "user": {
      "login": "Austin-Williams",
      "id": 8031584,
      "node_id": "MDQ6VXNlcjgwMzE1ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8031584?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Austin-Williams",
      "html_url": "https://github.com/Austin-Williams",
      "followers_url": "https://api.github.com/users/Austin-Williams/followers",
      "following_url": "https://api.github.com/users/Austin-Williams/following{/other_user}",
      "gists_url": "https://api.github.com/users/Austin-Williams/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Austin-Williams/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Austin-Williams/subscriptions",
      "organizations_url": "https://api.github.com/users/Austin-Williams/orgs",
      "repos_url": "https://api.github.com/users/Austin-Williams/repos",
      "events_url": "https://api.github.com/users/Austin-Williams/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Austin-Williams/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-20T19:27:03Z",
    "updated_at": "2020-07-20T19:27:03Z",
    "author_association": "NONE",
    "body": "If Geth does move away from randomized choice, I would prefer FIFO instead of \"lowest tx hash\", because the latter benefits those who can afford a lot of parallel computational power.\r\n\r\nFIFO benefits those with lower latency connections to mining nodes, but that arms-race has a limit (you can get a short fiber connection directly from your node to all mining nodes). But the arms-race for \"lowest tx hash\" has no limit -- you can always spend more money for a larger GPU cluster.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/661287673/reactions",
      "total_count": 11,
      "+1": 11,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/661302906",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/21350#issuecomment-661302906",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/21350",
    "id": 661302906,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MTMwMjkwNg==",
    "user": {
      "login": "PhABC",
      "id": 9306422,
      "node_id": "MDQ6VXNlcjkzMDY0MjI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9306422?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PhABC",
      "html_url": "https://github.com/PhABC",
      "followers_url": "https://api.github.com/users/PhABC/followers",
      "following_url": "https://api.github.com/users/PhABC/following{/other_user}",
      "gists_url": "https://api.github.com/users/PhABC/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PhABC/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PhABC/subscriptions",
      "organizations_url": "https://api.github.com/users/PhABC/orgs",
      "repos_url": "https://api.github.com/users/PhABC/repos",
      "events_url": "https://api.github.com/users/PhABC/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PhABC/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-20T20:00:32Z",
    "updated_at": "2020-07-22T04:46:11Z",
    "author_association": "NONE",
    "body": "From some preliminary analyses looking at contracts flagged as running these spam bots, it looks like the spamming of transactions from backrunning bots increased significantly since this April. In total, they reach a total of $2.5m in gas spent, worth about 38,000 blocks. Not all these transactions are spammed, but assuming a 5-10 spam transactions for every valid one, the number is still jarring. As of recently, almost 10% of all gas used in a day is used by these contracts.\r\n\r\nYou can see the data here ; https://explore.duneanalytics.com/public/dashboards/FFFpCKoE41bvFpESiyjUIBJfEMt4GoMFwcidNcAh\r\n\r\n![image](https://user-images.githubusercontent.com/9306422/87980813-23103980-caa2-11ea-8a3f-88214cef5fa5.png)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/661302906/reactions",
      "total_count": 5,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/661380072",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/21350#issuecomment-661380072",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/21350",
    "id": 661380072,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MTM4MDA3Mg==",
    "user": {
      "login": "hendrikhofstadt",
      "id": 1405758,
      "node_id": "MDQ6VXNlcjE0MDU3NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1405758?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hendrikhofstadt",
      "html_url": "https://github.com/hendrikhofstadt",
      "followers_url": "https://api.github.com/users/hendrikhofstadt/followers",
      "following_url": "https://api.github.com/users/hendrikhofstadt/following{/other_user}",
      "gists_url": "https://api.github.com/users/hendrikhofstadt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hendrikhofstadt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hendrikhofstadt/subscriptions",
      "organizations_url": "https://api.github.com/users/hendrikhofstadt/orgs",
      "repos_url": "https://api.github.com/users/hendrikhofstadt/repos",
      "events_url": "https://api.github.com/users/hendrikhofstadt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hendrikhofstadt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-20T22:21:55Z",
    "updated_at": "2020-07-20T22:21:55Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think that hash ordering is not a solution as bots will still spam better hashes as they mine them. They cannot rely on what they see in their local mempool to determine whether they will win with their last submitted hash (especially since the new 2 stage propagation protocol).\r\n\r\nTime based ordering sounds like a fair solution here even though as Lev pointed out there might be unknown side effects. \r\n\r\nI also want to link the list of bots here to allow further research:\r\nhttps://gist.github.com/hendrikhofstadt/6165e6a1a9baf07453cb96edfc8e5ef6\r\n\r\nThese are all running arbitrage strategies. \r\nLiquidation opportunities can be much more lucrative than arbitrage opportunities. Bot operators will backrun the price oracle for opportunities of sometimes 10k+.\r\nThere's a separate list of bots that are not included in my original analysis which specifically run backrunning on DyDx and also caused strong spikes at times.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/661380072/reactions",
      "total_count": 6,
      "+1": 6,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/661417669",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/21350#issuecomment-661417669",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/21350",
    "id": 661417669,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MTQxNzY2OQ==",
    "user": {
      "login": "wjmelements",
      "id": 799573,
      "node_id": "MDQ6VXNlcjc5OTU3Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/799573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wjmelements",
      "html_url": "https://github.com/wjmelements",
      "followers_url": "https://api.github.com/users/wjmelements/followers",
      "following_url": "https://api.github.com/users/wjmelements/following{/other_user}",
      "gists_url": "https://api.github.com/users/wjmelements/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wjmelements/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wjmelements/subscriptions",
      "organizations_url": "https://api.github.com/users/wjmelements/orgs",
      "repos_url": "https://api.github.com/users/wjmelements/repos",
      "events_url": "https://api.github.com/users/wjmelements/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wjmelements/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-20T23:05:30Z",
    "updated_at": "2020-07-20T23:05:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "Not all miners use vanilla geth but most do. So-long as enough miners continue to tie-break randomly there will be incentive to spam.\r\n\r\nFIFO ordering prevents backrun arbitrage theft but encourges competitive nodes not to forward transactions from their competitors.\r\n\r\nI would prefer for the tie to be broken by sender address; this would break the spam strategy which should be the goal here. Unlike transaction hash, you cannot mine a new sender in time because your transaction would not be accepted into the network without ETH in your account.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/661417669/reactions",
      "total_count": 8,
      "+1": 7,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 1,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/661447159",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/21350#issuecomment-661447159",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/21350",
    "id": 661447159,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MTQ0NzE1OQ==",
    "user": {
      "login": "livnev",
      "id": 3964494,
      "node_id": "MDQ6VXNlcjM5NjQ0OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3964494?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/livnev",
      "html_url": "https://github.com/livnev",
      "followers_url": "https://api.github.com/users/livnev/followers",
      "following_url": "https://api.github.com/users/livnev/following{/other_user}",
      "gists_url": "https://api.github.com/users/livnev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/livnev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/livnev/subscriptions",
      "organizations_url": "https://api.github.com/users/livnev/orgs",
      "repos_url": "https://api.github.com/users/livnev/repos",
      "events_url": "https://api.github.com/users/livnev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/livnev/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-20T23:40:35Z",
    "updated_at": "2020-07-20T23:40:35Z",
    "author_association": "NONE",
    "body": "> I think that hash ordering is not a solution as bots will still spam better hashes as they mine them. They cannot rely on what they see in their local mempool to determine whether they will win with their last submitted hash (especially since the new 2 stage propagation protocol).\r\n\r\n@hendrikhofstadt Good point, it sounds like txhash ordering might still generate some spam, but maybe less spam.\r\n\r\n> I would prefer for the tie to be broken by sender address; this would break the spam strategy which should be the goal here. Unlike transaction hash, you cannot mine a new sender in time because your transaction would not be accepted into the network without ETH in your account.\r\n\r\n@wjmelements If tie-breaking is by sender address, can't you still mine an address on demand and fund it with ETH using a higher gas price than the target, returning us to the same spam issue? The funding tx could land in an earlier block or higher in the same block as the target (remember that one can try to delay the execution of the target tx to a later block with spam). However in any case it seems like the optimal strategy might be to pre-mine a huge table of sender addresses so that you can always lookup a close one that is greater than the target, making this a PoW-style game which will be dominated by whoever has the biggest/most performant table.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/661447159/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/661599844",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/21350#issuecomment-661599844",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/21350",
    "id": 661599844,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MTU5OTg0NA==",
    "user": {
      "login": "throwaway-anon",
      "id": 68574770,
      "node_id": "MDQ6VXNlcjY4NTc0Nzcw",
      "avatar_url": "https://avatars.githubusercontent.com/u/68574770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/throwaway-anon",
      "html_url": "https://github.com/throwaway-anon",
      "followers_url": "https://api.github.com/users/throwaway-anon/followers",
      "following_url": "https://api.github.com/users/throwaway-anon/following{/other_user}",
      "gists_url": "https://api.github.com/users/throwaway-anon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/throwaway-anon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/throwaway-anon/subscriptions",
      "organizations_url": "https://api.github.com/users/throwaway-anon/orgs",
      "repos_url": "https://api.github.com/users/throwaway-anon/repos",
      "events_url": "https://api.github.com/users/throwaway-anon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/throwaway-anon/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-21T03:02:55Z",
    "updated_at": "2020-07-21T16:00:26Z",
    "author_association": "NONE",
    "body": "Longtime \"spam\" bot operator here (don't love that label), just throwing in some thoughts:\r\n\r\nPutting aside issues of fairness to competing bots, all of the proposed solutions either don't seem to solve the problem or introduce negative externalities. ~~Ordering by sender address can be gamed using CREATE2 and spending compute to build a lookup table of favorable salts, as has been partially suggested. There is no advantage to generating and preloading regular dust addresses with ETH.~~ (edit: Oops, of course regular dust addresses need to be generated. I think spam would be generated by moving funds around to increasingly more favorable addresses) There is a tradeoff though in how to spend this compute, and I'm not sure that is solves the underlying problem. I imagine that otherwise idle compute time would be spent building out a lookup table for predictable sender addresses (e.g. those that have a history of generating profitable opportunities, or that signal that they are likely to generate one). However, when a transaction that is profitable to backrun hits the txpool, I expect that compute will be reallocated to that address, and for bots to submit transactions with increasingly favorable sender addresses as they are discovered, getting back to the spam issue. Mining transaction hashes would be even worse, as they are more computationally intense to generate. It could be that it is trivial to predict which sender addresses generate opportunities, and that there is less advantage to trying to mine more favorable addresses while a profitable transaction sits in the mempool, in which case spam could be reduced. This could be interesting to model.\r\n\r\nAs @wjmelements pointed out, the other proposed solution of FIFO would probably result in competing nodes selectively routing transactions, but it would also incentivize a huge number of dummy nodes, and I'm not sure that such a thing is good for the health of the network. It's fairly trivial to cheaply deploy a dummy geth node that relays transactions, and that pretends to maintain the state of the blockchain, and if this can increase the chances of getting close to a miner, then you can bet it will be done at scale. \r\n\r\nI recognize the issue here, but there is something intrinsically fair to the \"lottery ticket\" dynamics that currently exist, which doesn't lead to long term winner take all dynamics as in gas auctions. Maybe there are other solution that preserves these dynamics but free up block space?\r\n\r\nAnd of course I am paid to say this, but I think this \"spam\" issue is not as harmful as has been suggested. What about the gas usage of foreign MLM/ponzi shcemes like MMM, Forsage, Lionshare, etc... that continue to clog the network? Surely it is much higher than that generated by these bots. Why should arbitrage and liquidation transactions be singled out, and not these other types of transactions, if we are all paying users? There is also the issue that @wjmelements raised that as long some miners don't upgrade their geth nodes, or use other node software that continues to randomly order, spam will persist. Regardless of what is decided, I don't think that a \"solution\" should be pushed through without consulting the wider community. \r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/661599844/reactions",
      "total_count": 9,
      "+1": 6,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 3,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/661674921",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/21350#issuecomment-661674921",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/21350",
    "id": 661674921,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MTY3NDkyMQ==",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-21T07:01:50Z",
    "updated_at": "2020-07-21T07:02:52Z",
    "author_association": "MEMBER",
    "body": "> Thanks for the detailed write-up! > If deterministically ordering (e.g. by transaction hash), then participants will be incentivised to \"mine txhashes\" (or similar), which would add a PoW-style game to transaction priority but at least would not use Ethereum network resources. That sounds to me like a very nice idea, spontaneously.\r\n\r\n~~This still results in spam as all of the competitors would generate one transaction, submit it to the network, then hash grind until they found a better transaction than the current \"best\".  Once they did, they would submit that and go back to hash grinding.  Even if you are currently winning, you *still* are incentivized to continue to hash grind and beat your own transaction just in case you have a competitor who has a better transaction on the wire that you haven't seen yet.~~ Looks like others already brought this up.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/661674921/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/661679861",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/21350#issuecomment-661679861",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/21350",
    "id": 661679861,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MTY3OTg2MQ==",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-21T07:13:49Z",
    "updated_at": "2020-07-21T07:13:49Z",
    "author_association": "MEMBER",
    "body": "> Time based ordering sounds like a fair solution here even though as Lev pointed out **there might be unknown side effects**.\r\n\r\nWe should not be afraid of the dark.  We know for certain the current solution incentivizes bad behavior, unless someone can provide an attack vector for the new solution then we should prefer an unknown here to a known bad.\r\n\r\n> FIFO ordering prevents backrun arbitrage theft but **encourges competitive nodes not to forward transactions from their competitors**.\r\n\r\nThis is already true across the board.  When you are running a bot for *anything* you want to censor your competitors.  Ethereum is as censorship resistant as we can make it but not perfect.  Switching from random to FIFO won't change the censorship resistance properties of Ethereum nor meaningfully change incentives for bots.\r\n\r\nWhat people are discussing here is basically that \"eclipse attacks are possible against Ethereum\" which I believe is pretty well known.  Switching to FIFO doesn't *create* the opportunity to eclipse attack and switching to FIFO doesn't *incentivize* eclipse attacks any more than they already are.  What we are comparing here isn't FIFO vs some idealistic solution.  We are comparing FIFO to the current solution with known problems.  This is definitely not a time where we should let perfect get in the way of good.\r\n\r\n> What about the gas usage of foreign MLM/ponzi shcemes like MMM, Forsage, Lionshare, etc... that continue to clog the network? Surely it is much higher than that generated by these bots. **Why should arbitrage and liquidation transactions be singled out, and not these other types of transactions, if we are all paying users**?\r\n\r\nWe don't have an easy and censorship resistant way to reduce the spam generated by the former, but we do have an easy and censorship resistant way to reduce the spam of the latter.  The goal of Ethereum isn't to get as many fee generating \"paying users\" as possible.  The goal of Ethereum is provide a useful service to a broad demographic of people.  Any opportunity we get to improve the quality of service for those users we should take.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/661679861/reactions",
      "total_count": 10,
      "+1": 10,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/661689852",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/21350#issuecomment-661689852",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/21350",
    "id": 661689852,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MTY4OTg1Mg==",
    "user": {
      "login": "Agusx1211",
      "id": 12701942,
      "node_id": "MDQ6VXNlcjEyNzAxOTQy",
      "avatar_url": "https://avatars.githubusercontent.com/u/12701942?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Agusx1211",
      "html_url": "https://github.com/Agusx1211",
      "followers_url": "https://api.github.com/users/Agusx1211/followers",
      "following_url": "https://api.github.com/users/Agusx1211/following{/other_user}",
      "gists_url": "https://api.github.com/users/Agusx1211/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Agusx1211/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Agusx1211/subscriptions",
      "organizations_url": "https://api.github.com/users/Agusx1211/orgs",
      "repos_url": "https://api.github.com/users/Agusx1211/repos",
      "events_url": "https://api.github.com/users/Agusx1211/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Agusx1211/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-21T07:36:58Z",
    "updated_at": "2020-07-21T07:36:58Z",
    "author_association": "NONE",
    "body": "> I would prefer for the tie to be broken by sender address; this would break the spam strategy which should be the goal here. Unlike transaction hash, you cannot mine a new sender in time because your transaction would not be accepted into the network without ETH in your account.\r\n\r\nThis doesn't removes the ability to brute-force the order of a front run transaction by spamming the network with transactions from random senders, but it adds another vector for doing that but with some information of the resulting order of such transactions.\r\n\r\nA front runner operator can keep front-running but without spamming the network as much, because now they know what's their best possible candidate if they want a given slot on the block.\r\n\r\nIf the order is totally deterministic (Ej: low addresses go first, high address go last) then front-runners are likely going to have prefunded addresses that are distributed through the block, they could keep reusing those address so there is no need to spam the network funding and defunding EOAs. They could find better EOAs, but once they have fund relatively good addresses it's highly unlikely that they are going to find a better candidate in the span of a single TX.\r\n\r\nI think that should shift the scenario from `multiple txs from a single bot, competing with itself` to `the best tx from each bot, competing with each other`.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/661689852/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/661694739",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/21350#issuecomment-661694739",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/21350",
    "id": 661694739,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MTY5NDczOQ==",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-21T07:47:46Z",
    "updated_at": "2020-07-21T07:47:46Z",
    "author_association": "MEMBER",
    "body": "I agree with your assessment @Agusx1211 that it will result in 1 transaction per bot.\r\n\r\nI believe FIFO will have a similar behavior, but it also incentivizes nodes to be well connected (a good thing for the network) rather than hash grinding (and potentially seeding) a large number of accounts (not good for the network).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/661694739/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/661699082",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/21350#issuecomment-661699082",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/21350",
    "id": 661699082,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MTY5OTA4Mg==",
    "user": {
      "login": "Agusx1211",
      "id": 12701942,
      "node_id": "MDQ6VXNlcjEyNzAxOTQy",
      "avatar_url": "https://avatars.githubusercontent.com/u/12701942?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Agusx1211",
      "html_url": "https://github.com/Agusx1211",
      "followers_url": "https://api.github.com/users/Agusx1211/followers",
      "following_url": "https://api.github.com/users/Agusx1211/following{/other_user}",
      "gists_url": "https://api.github.com/users/Agusx1211/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Agusx1211/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Agusx1211/subscriptions",
      "organizations_url": "https://api.github.com/users/Agusx1211/orgs",
      "repos_url": "https://api.github.com/users/Agusx1211/repos",
      "events_url": "https://api.github.com/users/Agusx1211/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Agusx1211/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-21T07:56:57Z",
    "updated_at": "2020-07-21T07:56:57Z",
    "author_association": "NONE",
    "body": "`sender address` could also reduce the competition between bots, because the front-runner knows their best candidate and they could also know the best candidate of the other bots, if they know that there is a better candidate already on the mempool there is no point on sending a tx that's bound to go second.\r\n\r\nFIFO seems fine to me, but I worry that it may not incentivise well connected nodes, but it instead incentivises nodes that try to eclipse miners (a few milliseconds should be enough). The front-runner could have a lot of nodes that behave \"correctly\" and when they want to send a tx they could tell those nodes to stop relaying competing txs.\r\n\r\n> Switching to FIFO doesn't create the opportunity to eclipse attack and switching to FIFO doesn't incentivize eclipse attacks any more than they already are.\r\n\r\n@MicahZoltu why do you think that's the case?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/661699082/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/661722166",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/21350#issuecomment-661722166",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/21350",
    "id": 661722166,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MTcyMjE2Ng==",
    "user": {
      "login": "hendrikhofstadt",
      "id": 1405758,
      "node_id": "MDQ6VXNlcjE0MDU3NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1405758?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hendrikhofstadt",
      "html_url": "https://github.com/hendrikhofstadt",
      "followers_url": "https://api.github.com/users/hendrikhofstadt/followers",
      "following_url": "https://api.github.com/users/hendrikhofstadt/following{/other_user}",
      "gists_url": "https://api.github.com/users/hendrikhofstadt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hendrikhofstadt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hendrikhofstadt/subscriptions",
      "organizations_url": "https://api.github.com/users/hendrikhofstadt/orgs",
      "repos_url": "https://api.github.com/users/hendrikhofstadt/repos",
      "events_url": "https://api.github.com/users/hendrikhofstadt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hendrikhofstadt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-21T08:44:21Z",
    "updated_at": "2020-07-21T08:44:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think \"network neutrality\" wise FIFO is more fair but tend to agree that the risk of more strongly incentivizing eclipse attacks is not negligible.\r\nHowever I'm pretty sure this would not be a major issue because Miners (could) sell direct interconnects to their nodes which would quickly reduce the ROI for anyone trying to eclipse / strategically DoS nodes.\r\n\r\nI agree with your thoughts on the effective outcome of `sender sorting`. I think @livnev summed it up very well saying that the endgame would be having a huge table of premined addresses ready.\r\n\r\nHowever the way the `tx pool` is currently implemented these txs would not be accepted until the sender account is funded (which would need to happen 1 block in advance). This implementation detail makes sense to prevent DoS on the mempool.\r\nhttps://github.com/ethereum/go-ethereum/blob/6c9f040ebeafcc680b0c457e6f4886e2bca32527/core/tx_pool.go#L546-L548\r\n\r\nThis means that at the current state of geth, bot operators would need to prefund a sufficiently large amount of well distributed addresses with sufficient ETH because they can't just fund them at a higher gas price in the same block as the victim (due to the check above).\r\nThat however creates an incentive to spam high gas price txs to consecutively push the victim tx to a later block and get enough time to fund a better account (potentially from a premined pool).\r\n\r\nI agree that this could significantly reduce the amount of spam for smaller and medium sized opportunities.\r\nHowever for larger opportunities (there have been ones worth 100ETH+) it might create an incentive to fill whole blocks to buy more time for account funding. Still that would just be a short spike and should not affect the gas price for more than a couple of blocks.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/661722166/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/661725047",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/21350#issuecomment-661725047",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/21350",
    "id": 661725047,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MTcyNTA0Nw==",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-21T08:49:42Z",
    "updated_at": "2020-07-21T08:49:42Z",
    "author_association": "MEMBER",
    "body": "@Agusx1211 You make a good point that with FIFO there is incentive to do a partial eclipse attack where you just need to make the route from your competitor to the node slower, but you don't actually need to fully censor them.  Even with that, I *feel* like that is still a win for Ethereum since an effective eclipse node needs to *appear useful to peers*, which (if things are behaving appropriately otherwise) means that it is propagating blocks, transactions, etc. generally speaking.\r\n\r\nSo while I think you are right that FIFO *does* incentivize partial eclipse attacks, I'm not convinced this is unhealthy for the network (and arguably could be healthy for it).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/661725047/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/661725981",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/21350#issuecomment-661725981",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/21350",
    "id": 661725981,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MTcyNTk4MQ==",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-21T08:51:33Z",
    "updated_at": "2020-07-21T08:51:33Z",
    "author_association": "MEMBER",
    "body": "Another thing to keep in mind with sender address sorting is that if the working strategy for a particular bot is to pre-fund accounts, then you end up with the problem of state bloat as participants are incentivized to keep gas money in a wide variety of accounts.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/661725981/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/661727398",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/21350#issuecomment-661727398",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/21350",
    "id": 661727398,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MTcyNzM5OA==",
    "user": {
      "login": "Agusx1211",
      "id": 12701942,
      "node_id": "MDQ6VXNlcjEyNzAxOTQy",
      "avatar_url": "https://avatars.githubusercontent.com/u/12701942?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Agusx1211",
      "html_url": "https://github.com/Agusx1211",
      "followers_url": "https://api.github.com/users/Agusx1211/followers",
      "following_url": "https://api.github.com/users/Agusx1211/following{/other_user}",
      "gists_url": "https://api.github.com/users/Agusx1211/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Agusx1211/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Agusx1211/subscriptions",
      "organizations_url": "https://api.github.com/users/Agusx1211/orgs",
      "repos_url": "https://api.github.com/users/Agusx1211/repos",
      "events_url": "https://api.github.com/users/Agusx1211/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Agusx1211/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-21T08:54:12Z",
    "updated_at": "2020-07-21T08:58:02Z",
    "author_association": "NONE",
    "body": "> That however creates an incentive to spam high gas price txs to consecutively push the victim tx to a later block and get enough time to fund a better account (potentially from a premined pool).\r\n\r\nIsn't this the case with FIFO too? An attacker could try to push the victim to a later block until they are confident about they being on the right spot on the mempool (maybe the front-runner doesn't know it, because it doesn't knows the order on which the miner received the txs).\r\n\r\nAlso, opportunities worth 100ETH+ are a huge beast on their own, those could cause re-orgs by making the miners compete with each other to be the one to claim it.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/661727398/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/661729596",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/21350#issuecomment-661729596",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/21350",
    "id": 661729596,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MTcyOTU5Ng==",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-21T08:58:31Z",
    "updated_at": "2020-07-21T08:58:31Z",
    "author_association": "MEMBER",
    "body": "> An attacker could try to push the victim to a later block until they are confident about they being on the right spot on the mempool (maybe the front-runner doesn't know it, because it doesn't knows the order on which the miner received the txs).\r\n\r\nFIFO would be absolute time that a node saw a transaction for the first time.  This means that once you have lost, you have lost forever unless the miner drops a transaction from the transaction pool (either the current winner or the transaction everyone is backrunning).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/661729596/reactions",
      "total_count": 5,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/661733889",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/21350#issuecomment-661733889",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/21350",
    "id": 661733889,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MTczMzg4OQ==",
    "user": {
      "login": "Agusx1211",
      "id": 12701942,
      "node_id": "MDQ6VXNlcjEyNzAxOTQy",
      "avatar_url": "https://avatars.githubusercontent.com/u/12701942?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Agusx1211",
      "html_url": "https://github.com/Agusx1211",
      "followers_url": "https://api.github.com/users/Agusx1211/followers",
      "following_url": "https://api.github.com/users/Agusx1211/following{/other_user}",
      "gists_url": "https://api.github.com/users/Agusx1211/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Agusx1211/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Agusx1211/subscriptions",
      "organizations_url": "https://api.github.com/users/Agusx1211/orgs",
      "repos_url": "https://api.github.com/users/Agusx1211/repos",
      "events_url": "https://api.github.com/users/Agusx1211/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Agusx1211/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-21T09:06:30Z",
    "updated_at": "2020-07-21T09:08:36Z",
    "author_association": "NONE",
    "body": "Yep, I think you are right. Unless the front-runner finds a way of delaying the transaction for miner A while allowing the transaction on miner B (assuming that miner B has the mempool sorted in such a way that benefits the bot). But I don't think that's possible.\r\n\r\nStill, I think that if it comes to that, incentives for the miners start to appear. And the competition shifts from `who can manipulate the mempool` to `who can mine those txs on the longest chain`.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/661733889/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/661749012",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/21350#issuecomment-661749012",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/21350",
    "id": 661749012,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MTc0OTAxMg==",
    "user": {
      "login": "hendrikhofstadt",
      "id": 1405758,
      "node_id": "MDQ6VXNlcjE0MDU3NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1405758?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hendrikhofstadt",
      "html_url": "https://github.com/hendrikhofstadt",
      "followers_url": "https://api.github.com/users/hendrikhofstadt/followers",
      "following_url": "https://api.github.com/users/hendrikhofstadt/following{/other_user}",
      "gists_url": "https://api.github.com/users/hendrikhofstadt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hendrikhofstadt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hendrikhofstadt/subscriptions",
      "organizations_url": "https://api.github.com/users/hendrikhofstadt/orgs",
      "repos_url": "https://api.github.com/users/hendrikhofstadt/repos",
      "events_url": "https://api.github.com/users/hendrikhofstadt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hendrikhofstadt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-21T09:35:15Z",
    "updated_at": "2020-07-21T09:35:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "@Agusx1211 You're making a very good point with pushing the tx between miners.\r\nYou might also \"collude\" with one miner and try to delay the tx (by filling blocks) until that miner can take it (i.e. mines a candidate) but I guess we already have that dynamic right now. So I would consider that out of scope for this particular issue.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/661749012/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/661878287",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/21350#issuecomment-661878287",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/21350",
    "id": 661878287,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MTg3ODI4Nw==",
    "user": {
      "login": "brockelmore",
      "id": 31553173,
      "node_id": "MDQ6VXNlcjMxNTUzMTcz",
      "avatar_url": "https://avatars.githubusercontent.com/u/31553173?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brockelmore",
      "html_url": "https://github.com/brockelmore",
      "followers_url": "https://api.github.com/users/brockelmore/followers",
      "following_url": "https://api.github.com/users/brockelmore/following{/other_user}",
      "gists_url": "https://api.github.com/users/brockelmore/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brockelmore/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brockelmore/subscriptions",
      "organizations_url": "https://api.github.com/users/brockelmore/orgs",
      "repos_url": "https://api.github.com/users/brockelmore/repos",
      "events_url": "https://api.github.com/users/brockelmore/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brockelmore/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-21T13:58:36Z",
    "updated_at": "2020-07-21T13:58:36Z",
    "author_association": "NONE",
    "body": "What spammers really care about is relative positioning. They don't care about the entire block order, generally just relative ordering `y directly after x`. \r\n\r\nOne idea that was throw around in discussion, was highest gas price pays to signal relative ordering. i.e. top gas price calldata is a list of `[x -> y]` tx hashes, with y.gasPrice <= x.gasPrice and some other constraints. In general, you can think of the gas prices in the mempool like this : [[band 1], [band 2], [band 3]]. If you have the highest gas price, you have the right to order txs inside a band explicitly (and by extension, order top of band 2 and bottom of band 3). \r\n\r\nThis lets you preserve most of the ordering work whenever a new top gas price comes in. i.e. when a new top gas price saying order band 2 to be x -> y, you only have to update band 2. As for miner participation, they would have no obligation in this, so participants bear all risk, but if most miners run stock geth, then it would work to reduce spamming by essentially turning everything into a PGA.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/661878287/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/661881568",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/21350#issuecomment-661881568",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/21350",
    "id": 661881568,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MTg4MTU2OA==",
    "user": {
      "login": "hendrikhofstadt",
      "id": 1405758,
      "node_id": "MDQ6VXNlcjE0MDU3NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1405758?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hendrikhofstadt",
      "html_url": "https://github.com/hendrikhofstadt",
      "followers_url": "https://api.github.com/users/hendrikhofstadt/followers",
      "following_url": "https://api.github.com/users/hendrikhofstadt/following{/other_user}",
      "gists_url": "https://api.github.com/users/hendrikhofstadt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hendrikhofstadt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hendrikhofstadt/subscriptions",
      "organizations_url": "https://api.github.com/users/hendrikhofstadt/orgs",
      "repos_url": "https://api.github.com/users/hendrikhofstadt/repos",
      "events_url": "https://api.github.com/users/hendrikhofstadt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hendrikhofstadt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-21T14:04:22Z",
    "updated_at": "2020-07-21T14:06:56Z",
    "author_association": "CONTRIBUTOR",
    "body": "@brockelmore Interesting! This sounds like a \"segmented\" version of [MEV Auctions](https://ethresear.ch/t/mev-auction-auctioning-transaction-ordering-rights-as-a-solution-to-miner-extractable-value/6788).\r\n\r\nWhat we need to consider is that this would need to be a more complex coordinated effort between all client developers and due to the impact of this change probably also the core devs. I feel like this would be a candidate for an EIP vs a quick fix.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/661881568/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/661885272",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/21350#issuecomment-661885272",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/21350",
    "id": 661885272,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MTg4NTI3Mg==",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-21T14:11:03Z",
    "updated_at": "2020-07-21T14:11:03Z",
    "author_association": "MEMBER",
    "body": "If we want to *support* this sort of thing we could add a `dependsOn` field to transactions that, if present, would indicate the transaction is only valid *after* a particular transaction. This would turn back running into price auction just like front-running.  If we wanted we could further add a field (or perhaps just a bit somewhere) for `atomicWith` meaning the transaction **MUST** be run **immediately** after the target transaction or it is not valid.\r\n\r\nThe nice thing about `atomicWith` is that it means all of the loser transactions would not consume any gas.  Winner pays gas price bid, losers pay nothing (get dropped from pool as invalid transactions).  I think this would be the best solution in terms of minimizing the gas spent on these competitions, and it would be nice for some other things as well (though, many of the \"other\" things are solved with EIP-2711).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/661885272/reactions",
      "total_count": 6,
      "+1": 6,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/661961239",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/21350#issuecomment-661961239",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/21350",
    "id": 661961239,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MTk2MTIzOQ==",
    "user": {
      "login": "throwaway-anon",
      "id": 68574770,
      "node_id": "MDQ6VXNlcjY4NTc0Nzcw",
      "avatar_url": "https://avatars.githubusercontent.com/u/68574770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/throwaway-anon",
      "html_url": "https://github.com/throwaway-anon",
      "followers_url": "https://api.github.com/users/throwaway-anon/followers",
      "following_url": "https://api.github.com/users/throwaway-anon/following{/other_user}",
      "gists_url": "https://api.github.com/users/throwaway-anon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/throwaway-anon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/throwaway-anon/subscriptions",
      "organizations_url": "https://api.github.com/users/throwaway-anon/orgs",
      "repos_url": "https://api.github.com/users/throwaway-anon/repos",
      "events_url": "https://api.github.com/users/throwaway-anon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/throwaway-anon/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-21T16:22:13Z",
    "updated_at": "2020-07-21T16:22:13Z",
    "author_association": "NONE",
    "body": "> The nice thing about `atomicWith` is that it means all of the loser transactions would not consume any gas. Winner pays gas price bid, losers pay nothing (get dropped from pool as invalid transactions). I think this would be the best solution in terms of minimizing the gas spent on these competitions, and it would be nice for some other things as well (though, many of the \"other\" things are solved with EIP-2711).\r\n\r\nThis will end up converting all value that can be extracted through arbitrage/liquidation/front-running to miner profits once competing bots can no longer further optimize for gas usage. I would fully support this if the value went towards making Ethereum better, or back to Ethereum stakeholders (i.e. block producers in eth2), but PoW miners clearly don't have the best interests of the network in mind as evidenced by the recent gas limit increase that was done without consulting community members.\r\n\r\nUnless I'm missing something, I just realized that FIFO still results in spam when backrunning. Just because you have observed a transaction in your mempool doesn't mean that a miner has it in their pool, and so you still need to make sure that your transaction arrives *after* the transaction of interest, and not before. Perhaps the ordering in the `dependsOn` solution suggested by @MicahZoltu could be determined by FIFO, and not gas price? This seems to solve the problem while still compensating arbitrageurs. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/661961239/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/661975464",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/21350#issuecomment-661975464",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/21350",
    "id": 661975464,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MTk3NTQ2NA==",
    "user": {
      "login": "hendrikhofstadt",
      "id": 1405758,
      "node_id": "MDQ6VXNlcjE0MDU3NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1405758?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hendrikhofstadt",
      "html_url": "https://github.com/hendrikhofstadt",
      "followers_url": "https://api.github.com/users/hendrikhofstadt/followers",
      "following_url": "https://api.github.com/users/hendrikhofstadt/following{/other_user}",
      "gists_url": "https://api.github.com/users/hendrikhofstadt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hendrikhofstadt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hendrikhofstadt/subscriptions",
      "organizations_url": "https://api.github.com/users/hendrikhofstadt/orgs",
      "repos_url": "https://api.github.com/users/hendrikhofstadt/repos",
      "events_url": "https://api.github.com/users/hendrikhofstadt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hendrikhofstadt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-21T16:46:32Z",
    "updated_at": "2020-07-21T16:50:12Z",
    "author_association": "CONTRIBUTOR",
    "body": "@throwaway-anon Good point on the FIFO spam. Still that would be significantly less spam as it would just be distributed over a couple of ms but it could still be quite a bit if there are many bots.\r\n\r\nConsidering the above points the sender sorting appears to be the most solid \"quick fix\" so far imo.\r\n\r\n@MicahZoltu 's `dependsOn` concept would indeed ultimately transfer most value to the miner. But to be fair that's also the case with any kind of PGA or spam. Extrapolating the numbers that @PhABC presented above, the increasing amount of spam will ultimately lead to most rewards being lost to miners while causing increased load on the chain.\r\n\r\nSo the endgame is theoretically the same, just that with the proposed change the load on the chain is reduced significantly. Also bot operators would be incentivized to actually take positions (to reduce gas usage) and potentially source off-chain (or other chain) liquidity allowing for more sophisticated strategies vs super low-risk atomic arbitrage.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/661975464/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/661987662",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/21350#issuecomment-661987662",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/21350",
    "id": 661987662,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MTk4NzY2Mg==",
    "user": {
      "login": "throwaway-anon",
      "id": 68574770,
      "node_id": "MDQ6VXNlcjY4NTc0Nzcw",
      "avatar_url": "https://avatars.githubusercontent.com/u/68574770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/throwaway-anon",
      "html_url": "https://github.com/throwaway-anon",
      "followers_url": "https://api.github.com/users/throwaway-anon/followers",
      "following_url": "https://api.github.com/users/throwaway-anon/following{/other_user}",
      "gists_url": "https://api.github.com/users/throwaway-anon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/throwaway-anon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/throwaway-anon/subscriptions",
      "organizations_url": "https://api.github.com/users/throwaway-anon/orgs",
      "repos_url": "https://api.github.com/users/throwaway-anon/repos",
      "events_url": "https://api.github.com/users/throwaway-anon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/throwaway-anon/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-21T17:07:53Z",
    "updated_at": "2020-07-21T17:07:53Z",
    "author_association": "NONE",
    "body": "> @throwaway-anon Good point on the FIFO spam. Still that would be significantly less spam as it would just be distributed over a couple of ms but it could still be quite a bit if there are many bots.\r\n> \r\n> Considering the above points the sender sorting appears to be the most solid \"quick fix\" so far imo.\r\n\r\nI'm still not convinced by this. I think you're underestimating the level of constant address churn spam that this would create in trying to predict which sender addresses will generate backrunnable transactions. You also have the issue that you can still spam to delay a transaction from being mined in order to get a winning address funded, as I think others pointed out above.\r\n\r\n> @MicahZoltu 's `dependsOn` concept would indeed ultimately transfer most value to the miner. But to be fair that's also the case with any kind of PGA or spam. Extrapolating the numbers that @PhABC presented above, the increasing amount of spam will ultimately lead to most rewards being lost to miners while causing increased load on the chain.\r\n\r\nRight, I agree that in the long run that the current system of random ordering does not yield positive expected value for the arbitrageurs, and just leads to spam.  But the question is whether miners or arbitrageurs should be compensated with the new rules. What is the argument for tie-breaking/ordering `dependsOn` by gas price versus FIFO? \r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/661987662/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/662004171",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/21350#issuecomment-662004171",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/21350",
    "id": 662004171,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MjAwNDE3MQ==",
    "user": {
      "login": "AFDudley",
      "id": 660650,
      "node_id": "MDQ6VXNlcjY2MDY1MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/660650?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AFDudley",
      "html_url": "https://github.com/AFDudley",
      "followers_url": "https://api.github.com/users/AFDudley/followers",
      "following_url": "https://api.github.com/users/AFDudley/following{/other_user}",
      "gists_url": "https://api.github.com/users/AFDudley/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AFDudley/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AFDudley/subscriptions",
      "organizations_url": "https://api.github.com/users/AFDudley/orgs",
      "repos_url": "https://api.github.com/users/AFDudley/repos",
      "events_url": "https://api.github.com/users/AFDudley/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AFDudley/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-21T17:36:52Z",
    "updated_at": "2020-07-21T17:36:52Z",
    "author_association": "NONE",
    "body": "I suggest adding `dependsOn` and allowing that to bind to contract state as well, as a later addition. Binding to contract state is more complicated, but could contribute to preventing ordering manipulation as well.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/662004171/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/662012662",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/21350#issuecomment-662012662",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/21350",
    "id": 662012662,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MjAxMjY2Mg==",
    "user": {
      "login": "hendrikhofstadt",
      "id": 1405758,
      "node_id": "MDQ6VXNlcjE0MDU3NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1405758?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hendrikhofstadt",
      "html_url": "https://github.com/hendrikhofstadt",
      "followers_url": "https://api.github.com/users/hendrikhofstadt/followers",
      "following_url": "https://api.github.com/users/hendrikhofstadt/following{/other_user}",
      "gists_url": "https://api.github.com/users/hendrikhofstadt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hendrikhofstadt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hendrikhofstadt/subscriptions",
      "organizations_url": "https://api.github.com/users/hendrikhofstadt/orgs",
      "repos_url": "https://api.github.com/users/hendrikhofstadt/repos",
      "events_url": "https://api.github.com/users/hendrikhofstadt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hendrikhofstadt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-21T17:51:56Z",
    "updated_at": "2020-07-21T17:54:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "@AFDudley  I'm concerned that binding to contract state might make this prone to DoS. With the new snapshot backend complexity of accessing state has decreased but it's effectively still a free CALL (because it loads the other contract's state) + SLOAD (because it reads an element from state) at 0 cost.\r\n\r\n\r\n> I'm still not convinced by this. I think you're underestimating the level of constant address churn spam that this would create in trying to predict which sender addresses will generate backrunnable transactions. You also have the issue that you can still spam to delay a transaction from being mined in order to get a winning address funded, as I think others pointed out above.\r\n\r\nI agree with you.\r\nBut I think there's a ceiling of how many addresses someone would prefund to keep profitable. Even if it's 50k addresses, the impact on ETH state would still be considerably small. I assume that the most capital effective strategy would be if bot operators prefunded addresses close to \"big fish\" and left all other opportunities to PGAs in the next block. But I might underestimate that plus the aftermath of thousands of dust accounts being left.\r\n\r\nOn the point of \"delaying transactions\" I'd still go with what I said before because this is already an issue if you consider that a arbitrageur might collude with a miner. It would of course increase the incentive to run such an attack on larger opportunities but it would come at a high cost because while you delay the tx someone else might have mined a better address. So my assumption was that the risk would exceed the potential profit in most cases and the cases that are left would be negligible exceptions with little impact on the fee market.\r\n\r\nAfter all the sender sorting would just be a \"band aid\" / temporary solution until concepts like `dependsOn` are implemented.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/662012662/reactions",
      "total_count": 3,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 1
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/662018311",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/21350#issuecomment-662018311",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/21350",
    "id": 662018311,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MjAxODMxMQ==",
    "user": {
      "login": "livnev",
      "id": 3964494,
      "node_id": "MDQ6VXNlcjM5NjQ0OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3964494?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/livnev",
      "html_url": "https://github.com/livnev",
      "followers_url": "https://api.github.com/users/livnev/followers",
      "following_url": "https://api.github.com/users/livnev/following{/other_user}",
      "gists_url": "https://api.github.com/users/livnev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/livnev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/livnev/subscriptions",
      "organizations_url": "https://api.github.com/users/livnev/orgs",
      "repos_url": "https://api.github.com/users/livnev/repos",
      "events_url": "https://api.github.com/users/livnev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/livnev/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-21T18:02:54Z",
    "updated_at": "2020-07-21T18:02:54Z",
    "author_association": "NONE",
    "body": "I feel like changes to the protocol (like adding a field to transactions) are definitely out of scope here: if you want to propose something you can make an EIP for that. I think the scope of this issue should be restricted to \"easy\" fixes specific to `go-ethereum` to rectify what seems to be an implementation detail in this specific client that has accidentally incentivised spam.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/662018311/reactions",
      "total_count": 11,
      "+1": 11,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/662242706",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/21350#issuecomment-662242706",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/21350",
    "id": 662242706,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MjI0MjcwNg==",
    "user": {
      "login": "PhABC",
      "id": 9306422,
      "node_id": "MDQ6VXNlcjkzMDY0MjI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9306422?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PhABC",
      "html_url": "https://github.com/PhABC",
      "followers_url": "https://api.github.com/users/PhABC/followers",
      "following_url": "https://api.github.com/users/PhABC/following{/other_user}",
      "gists_url": "https://api.github.com/users/PhABC/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PhABC/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PhABC/subscriptions",
      "organizations_url": "https://api.github.com/users/PhABC/orgs",
      "repos_url": "https://api.github.com/users/PhABC/repos",
      "events_url": "https://api.github.com/users/PhABC/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PhABC/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-22T05:03:18Z",
    "updated_at": "2020-07-22T05:03:18Z",
    "author_association": "NONE",
    "body": "FIFO spam is indeed concerning, but I think there are more cost effective networking strategies for backrunners. For instance, you could broadcast the victim's tx right before yours to all your peers, reliably putting your transaction right behind it. Doing this across the network somewhat guarantees your tx will be after the victim's, assuming your tx isn't re-broadcasted alone in a faster and more significant fashion.\r\n\r\nAlso, considering how small of a change this is, I don't see the harm in trying FIFO and seeing the impact it has on the backrunning market over the coming weeks/months, until something better comes along. We can't do much worse than a random sort anyway.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/662242706/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/662369858",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/21350#issuecomment-662369858",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/21350",
    "id": 662369858,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MjM2OTg1OA==",
    "user": {
      "login": "Agusx1211",
      "id": 12701942,
      "node_id": "MDQ6VXNlcjEyNzAxOTQy",
      "avatar_url": "https://avatars.githubusercontent.com/u/12701942?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Agusx1211",
      "html_url": "https://github.com/Agusx1211",
      "followers_url": "https://api.github.com/users/Agusx1211/followers",
      "following_url": "https://api.github.com/users/Agusx1211/following{/other_user}",
      "gists_url": "https://api.github.com/users/Agusx1211/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Agusx1211/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Agusx1211/subscriptions",
      "organizations_url": "https://api.github.com/users/Agusx1211/orgs",
      "repos_url": "https://api.github.com/users/Agusx1211/repos",
      "events_url": "https://api.github.com/users/Agusx1211/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Agusx1211/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-22T10:15:53Z",
    "updated_at": "2020-07-22T10:15:53Z",
    "author_association": "NONE",
    "body": "> I don't see the harm in trying FIFO and seeing the impact it has on the backrunning market over the coming weeks/months\r\n\r\nIs there any data on how often miners update their nodes? I guess not often because they are probably prioritising stability over performance.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/662369858/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
