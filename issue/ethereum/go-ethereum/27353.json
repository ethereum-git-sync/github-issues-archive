{
  "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/27353",
  "repository_url": "https://api.github.com/repos/ethereum/go-ethereum",
  "labels_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/27353/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/27353/comments",
  "events_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/27353/events",
  "html_url": "https://github.com/ethereum/go-ethereum/issues/27353",
  "id": 1725822299,
  "node_id": "I_kwDOAOvK985m3fVb",
  "number": 27353,
  "title": "Identify stale nodes when behind load balancer",
  "user": {
    "login": "bogdan",
    "id": 122436,
    "node_id": "MDQ6VXNlcjEyMjQzNg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/122436?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bogdan",
    "html_url": "https://github.com/bogdan",
    "followers_url": "https://api.github.com/users/bogdan/followers",
    "following_url": "https://api.github.com/users/bogdan/following{/other_user}",
    "gists_url": "https://api.github.com/users/bogdan/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bogdan/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bogdan/subscriptions",
    "organizations_url": "https://api.github.com/users/bogdan/orgs",
    "repos_url": "https://api.github.com/users/bogdan/repos",
    "events_url": "https://api.github.com/users/bogdan/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bogdan/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 72233652,
      "node_id": "MDU6TGFiZWw3MjIzMzY1Mg==",
      "url": "https://api.github.com/repos/ethereum/go-ethereum/labels/type:feature",
      "name": "type:feature",
      "color": "84b6eb",
      "default": false,
      "description": null
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2023-05-25T13:21:42Z",
  "updated_at": "2023-05-30T15:23:55Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "# Rationale\r\n\r\nWe noticed that some ethereum nodes may be somewhat behind others.\r\nYou may try investigate existing ETH RPC service provider with the following command:\r\n\r\n``` sh\r\nwhile true ; do curl --location --request POST 'https://polygon-mainnet.infura.io/v3/...'   --data-raw '{   \"jsonrpc\":\"2.0\",\"method\":\"eth_blockNumber\", \"params\":[],\"id\":1}'; echo; done\r\n```\r\n\r\nEventually you may see that returned block number goes backwards by 1:\r\n\r\n```\r\n{\"jsonrpc\":\"2.0\",\"id\":1,\"result\":\"0x2922363\"}\r\n{\"jsonrpc\":\"2.0\",\"id\":1,\"result\":\"0x2922362\"}\r\n{\"jsonrpc\":\"2.0\",\"id\":1,\"result\":\"0x2922363\"}\r\n```\r\n\r\nRarely, it gets even more problematic and block number goes back by ~100 blocks for whatever issues the service provider has:\r\n\r\n* network connection problems\r\n* stale not up to date node\r\n* hardware problems \r\n* network reorg\r\n\r\nYou may imagine what would happen if one would try the following commands `eth_blockNumber` => `eth_getLogs`. If the first request goes to up to date node and the last one to not up to date (you may not force the node to be the same as they are usually behind load balancer).\r\n\r\n\r\n# Solution\r\n\r\nMake sure client is always aware what kind of node it is talking to for every single request.\r\nAlways return a current block number and block hash (reorg awareness) for every ETH RPC request.\r\nFor backward compatibility that data may be returned as a HTTP response header or yet another top level response JSON property.\r\n\r\n``` json\r\n{\"jsonrpc\":\"2.0\",\"id\":1, \"head\": {\"blockNumber\":\"0x2922362\", \"blockHash\": \"....\"}, \"result\": ...}\r\n```\r\n\r\n``` sh\r\nX-ETH-BLOCK-NUMBER = 0x2922362\r\nX-ETH-BLOCK-HASH = ...\r\n```",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/27353/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/27353/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1564422867",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/27353#issuecomment-1564422867",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/27353",
    "id": 1564422867,
    "node_id": "IC_kwDOAOvK985dPzLT",
    "user": {
      "login": "q9f",
      "id": 58883403,
      "node_id": "MDQ6VXNlcjU4ODgzNDAz",
      "avatar_url": "https://avatars.githubusercontent.com/u/58883403?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/q9f",
      "html_url": "https://github.com/q9f",
      "followers_url": "https://api.github.com/users/q9f/followers",
      "following_url": "https://api.github.com/users/q9f/following{/other_user}",
      "gists_url": "https://api.github.com/users/q9f/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/q9f/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/q9f/subscriptions",
      "organizations_url": "https://api.github.com/users/q9f/orgs",
      "repos_url": "https://api.github.com/users/q9f/repos",
      "events_url": "https://api.github.com/users/q9f/events{/privacy}",
      "received_events_url": "https://api.github.com/users/q9f/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-26T13:48:07Z",
    "updated_at": "2023-05-26T13:48:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "Isn't that a feature that a service provider like Infura has to provide rather than Geth as a protocol provider?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1564422867/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1564606359",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/27353#issuecomment-1564606359",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/27353",
    "id": 1564606359,
    "node_id": "IC_kwDOAOvK985dQf-X",
    "user": {
      "login": "bogdan",
      "id": 122436,
      "node_id": "MDQ6VXNlcjEyMjQzNg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/122436?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bogdan",
      "html_url": "https://github.com/bogdan",
      "followers_url": "https://api.github.com/users/bogdan/followers",
      "following_url": "https://api.github.com/users/bogdan/following{/other_user}",
      "gists_url": "https://api.github.com/users/bogdan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bogdan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bogdan/subscriptions",
      "organizations_url": "https://api.github.com/users/bogdan/orgs",
      "repos_url": "https://api.github.com/users/bogdan/repos",
      "events_url": "https://api.github.com/users/bogdan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bogdan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-26T16:00:40Z",
    "updated_at": "2023-05-26T16:00:40Z",
    "author_association": "NONE",
    "body": "Service provider level will lack standardization and adoption. Protocol level implementation may lead to more potential features like automatic reorg detection at the libraries level (like ethers.js).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1564606359/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1568377243",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/27353#issuecomment-1568377243",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/27353",
    "id": 1568377243,
    "node_id": "IC_kwDOAOvK985de4mb",
    "user": {
      "login": "holiman",
      "id": 142290,
      "node_id": "MDQ6VXNlcjE0MjI5MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/142290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/holiman",
      "html_url": "https://github.com/holiman",
      "followers_url": "https://api.github.com/users/holiman/followers",
      "following_url": "https://api.github.com/users/holiman/following{/other_user}",
      "gists_url": "https://api.github.com/users/holiman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/holiman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/holiman/subscriptions",
      "organizations_url": "https://api.github.com/users/holiman/orgs",
      "repos_url": "https://api.github.com/users/holiman/repos",
      "events_url": "https://api.github.com/users/holiman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/holiman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-30T12:49:06Z",
    "updated_at": "2023-05-30T12:49:06Z",
    "author_association": "MEMBER",
    "body": "This isn't an easily solved problem. \r\n\r\n- This needs to be changed in the RPC spec, not in geth. Hacking it into geth is not The Way. \r\n- Most rpc calls take a blockhash as input, avoiding this problem altogether (unless you specify e.g. `latest`)\r\n- You might get around this problem by doing batched rpc calls, if the remote endpoint supports it.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1568377243/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1568635783",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/27353#issuecomment-1568635783",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/27353",
    "id": 1568635783,
    "node_id": "IC_kwDOAOvK985df3uH",
    "user": {
      "login": "bogdan",
      "id": 122436,
      "node_id": "MDQ6VXNlcjEyMjQzNg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/122436?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bogdan",
      "html_url": "https://github.com/bogdan",
      "followers_url": "https://api.github.com/users/bogdan/followers",
      "following_url": "https://api.github.com/users/bogdan/following{/other_user}",
      "gists_url": "https://api.github.com/users/bogdan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bogdan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bogdan/subscriptions",
      "organizations_url": "https://api.github.com/users/bogdan/orgs",
      "repos_url": "https://api.github.com/users/bogdan/repos",
      "events_url": "https://api.github.com/users/bogdan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bogdan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-30T15:23:54Z",
    "updated_at": "2023-05-30T15:23:54Z",
    "author_association": "NONE",
    "body": "> This needs to be changed in the RPC spec, not in geth. Hacking it into geth is not The Way.\r\n\r\nyeah, that is a tough issue.\r\n\r\n> You might get around this problem by doing batched rpc calls, if the remote endpoint supports it.\r\n\r\nThat is impossible for my case because second request is using the data from the first one.\r\n\r\n> Most rpc calls take a blockhash as input, avoiding this problem altogether (unless you specify e.g. latest)\r\n\r\nUsing `latest` is a problem because you don't really know what is `latest` for the node you are querying, so you will not be able to know if the block number you have is within `latest` for the given node or not when this block has no events.\r\n\r\nUsing blockhash as input looks promising.\r\nI checked `eth_getLogs` only supports fetching events for a single block specified as hash, but not for a range of blocks. If that can be fixed, that would be great! My expectation here would be support the following request\r\n\r\n``` javascript\r\n{\r\n  fromBlock: \"0x25C3E05\",\r\n  toBlock:\"0x25CF092\",\r\n  address: \"0xa9a6A3626993D487d2Dbda3173cf58cA1a9D9e9f\",\r\n  blockhash: \"0xc34c6d53afdd6b5840f2a70d733ded2d4f349144d8ad6c2f9e991229c516f005\r\n}\r\n```\r\n\r\nThat would cause `eth_getLogs` to verify that `toBlock` hash is equal to `blockhash` and return an error if it is not or block isn't present.\r\n\r\nWhat do you think?\r\n\r\n\r\n\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1568635783/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
