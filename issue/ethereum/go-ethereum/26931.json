{
  "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/26931",
  "repository_url": "https://api.github.com/repos/ethereum/go-ethereum",
  "labels_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/26931/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/26931/comments",
  "events_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/26931/events",
  "html_url": "https://github.com/ethereum/go-ethereum/issues/26931",
  "id": 1632246487,
  "node_id": "I_kwDOAOvK985hShrX",
  "number": 26931,
  "title": "\"geth mempool\" denial of service attack.  reported to ethereum bug bounty at 2023.3.3",
  "user": {
    "login": "lyciumlee",
    "id": 29589768,
    "node_id": "MDQ6VXNlcjI5NTg5NzY4",
    "avatar_url": "https://avatars.githubusercontent.com/u/29589768?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/lyciumlee",
    "html_url": "https://github.com/lyciumlee",
    "followers_url": "https://api.github.com/users/lyciumlee/followers",
    "following_url": "https://api.github.com/users/lyciumlee/following{/other_user}",
    "gists_url": "https://api.github.com/users/lyciumlee/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/lyciumlee/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/lyciumlee/subscriptions",
    "organizations_url": "https://api.github.com/users/lyciumlee/orgs",
    "repos_url": "https://api.github.com/users/lyciumlee/repos",
    "events_url": "https://api.github.com/users/lyciumlee/events{/privacy}",
    "received_events_url": "https://api.github.com/users/lyciumlee/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 72233650,
      "node_id": "MDU6TGFiZWw3MjIzMzY1MA==",
      "url": "https://api.github.com/repos/ethereum/go-ethereum/labels/type:bug",
      "name": "type:bug",
      "color": "FF5E5E",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 3,
  "created_at": "2023-03-20T14:37:00Z",
  "updated_at": "2023-04-26T13:56:12Z",
  "closed_at": "2023-04-26T13:56:12Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "#### System information\r\n\r\nGeth version: `geth version`   Geth (1.11.2)\r\nCL client & version: e.g. lighthouse/nimbus/prysm@v1.0.0\r\nOS & Version: Windows/Linux/OSX\r\nCommit hash : (if `develop`)\r\n\r\n\r\nI have communicated with\r\n @fredriksvantes \r\n\r\nand we all think that in geth 1.11.2 have the bug which may cause DoS attack on mempool.\r\n\r\nI do not know if this bug exist on the newest geth version.\r\n\r\nBut I want get the credit of the ethereum community.\r\n\r\nThis mempool DoS key exploit method is use your own full node to send massive transactions to the other node. An attacker do not need to send the txs to the rpc.\r\n\r\nMore detailed description of the attack/bug scenario and unexpected/buggy behaviour\r\nIn the latest version of Geth (1.11.2), the value of \"maxClientSubscriptionBuffer\" is too small at 20000.\r\nThe variable is on line 60 of rpc/client.go.\r\nWhen the number of pending transactions in the local node's mempool exceeds this value, the RPC subscription feature for new pending transactions will be vulnerable to a denial of service attack.\r\nAlthough there are validity checks on transactions at the RPC interface and when the current node receives pending transactions from other nodes.\r\nWe know that a secure algorithm that satisfies the current validation criteria can stay in the mempool for up to 3 hours.\r\nTherefore, it is possible to use certain techniques to bypass the current blockchain transaction checks, leading to denial of service attacks on nodes and a large number of transactions that will not be added to the chain being present in the network.\r\n\r\n\r\n```\r\nfunc (pool *TxPool) validateTx(tx *types.Transaction, local bool) error {\r\n\t// Accept only legacy transactions until EIP-2718/2930 activates.\r\n\tif !pool.eip2718 && tx.Type() != types.LegacyTxType {\r\n\t\treturn core.ErrTxTypeNotSupported\r\n\t}\r\n\t// Reject dynamic fee transactions until EIP-1559 activates.\r\n\tif !pool.eip1559 && tx.Type() == types.DynamicFeeTxType {\r\n\t\treturn core.ErrTxTypeNotSupported\r\n\t}\r\n\t// Reject transactions over defined size to prevent DOS attacks\r\n\tif tx.Size() > txMaxSize {\r\n\t\treturn ErrOversizedData\r\n\t}\r\n\t// Check whether the init code size has been exceeded.\r\n\tif pool.shanghai && tx.To() == nil && len(tx.Data()) > params.MaxInitCodeSize {\r\n\t\treturn fmt.Errorf(\"%w: code size %v limit %v\", core.ErrMaxInitCodeSizeExceeded, len(tx.Data()), params.MaxInitCodeSize)\r\n\t}\r\n\t// Transactions can't be negative. This may never happen using RLP decoded\r\n\t// transactions but may occur if you create a transaction using the RPC.\r\n\tif tx.Value().Sign() < 0 {\r\n\t\treturn ErrNegativeValue\r\n\t}\r\n\t// Ensure the transaction doesn't exceed the current block limit gas.\r\n\tif pool.currentMaxGas < tx.Gas() {\r\n\t\treturn ErrGasLimit\r\n\t}\r\n\t// Sanity check for extremely large numbers\r\n\tif tx.GasFeeCap().BitLen() > 256 {\r\n\t\treturn core.ErrFeeCapVeryHigh\r\n\t}\r\n\tif tx.GasTipCap().BitLen() > 256 {\r\n\t\treturn core.ErrTipVeryHigh\r\n\t}\r\n\t// Ensure gasFeeCap is greater than or equal to gasTipCap.\r\n\tif tx.GasFeeCapIntCmp(tx.GasTipCap()) < 0 {\r\n\t\treturn core.ErrTipAboveFeeCap\r\n\t}\r\n\t// Make sure the transaction is signed properly.\r\n\tfrom, err := types.Sender(pool.signer, tx)\r\n\tif err != nil {\r\n\t\treturn ErrInvalidSender\r\n\t}\r\n\t// Drop non-local transactions under our own minimal accepted gas price or tip\r\n\tif !local && tx.GasTipCapIntCmp(pool.gasPrice) < 0 {\r\n\t\treturn ErrUnderpriced\r\n\t}\r\n\t// Ensure the transaction adheres to nonce ordering\r\n\tif pool.currentState.GetNonce(from) > tx.Nonce() {\r\n\t\treturn core.ErrNonceTooLow\r\n\t}\r\n\t// Transactor should have enough funds to cover the costs\r\n\t// cost == V + GP * GL\r\n\tif pool.currentState.GetBalance(from).Cmp(tx.Cost()) < 0 {\r\n\t\treturn core.ErrInsufficientFunds\r\n\t}\r\n\t// Ensure the transaction has more gas than the basic tx fee.\r\n\tintrGas, err := core.IntrinsicGas(tx.Data(), tx.AccessList(), tx.To() == nil, true, pool.istanbul, pool.shanghai)\r\n\tif err != nil {\r\n\t\treturn err\r\n\t}\r\n\tif tx.Gas() < intrGas {\r\n\t\treturn core.ErrIntrinsicGas\r\n\t}\r\n\treturn nil\r\n}\r\n```\r\nThe \"validateTx\" function is used to validate whether a transaction that is added to the mempool is valid.\r\n\r\nWhen other nodes add transactions directly to the mempool using the following rules, it will cause denial of service attacks on the node:\r\n\r\nSuppose the attacker's nonce is 0, but they start signing transactions with nonces starting from 2 and increasing sequentially. These transactions all transfer funds to the attacker's own address, but have extremely low gas prices, such as 0.00001 Gwei. We know that in 99% of cases, Ethereum transactions will not have such low gas prices.\r\n\r\n\r\nWhen the mempool is full, users may not subscribe the  new transaction event.\r\n\r\nNew users will be unable to subscribe to pending transactions because the pipeline will be quickly closed, given that \"maxClientSubscriptionBuffer\" is set to 20000.\r\n\r\n\r\n\r\n",
  "closed_by": {
    "login": "holiman",
    "id": 142290,
    "node_id": "MDQ6VXNlcjE0MjI5MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/142290?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/holiman",
    "html_url": "https://github.com/holiman",
    "followers_url": "https://api.github.com/users/holiman/followers",
    "following_url": "https://api.github.com/users/holiman/following{/other_user}",
    "gists_url": "https://api.github.com/users/holiman/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/holiman/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/holiman/subscriptions",
    "organizations_url": "https://api.github.com/users/holiman/orgs",
    "repos_url": "https://api.github.com/users/holiman/repos",
    "events_url": "https://api.github.com/users/holiman/events{/privacy}",
    "received_events_url": "https://api.github.com/users/holiman/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/26931/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/26931/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1476761441",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/26931#issuecomment-1476761441",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/26931",
    "id": 1476761441,
    "node_id": "IC_kwDOAOvK985YBZdh",
    "user": {
      "login": "lightclient",
      "id": 14004106,
      "node_id": "MDQ6VXNlcjE0MDA0MTA2",
      "avatar_url": "https://avatars.githubusercontent.com/u/14004106?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lightclient",
      "html_url": "https://github.com/lightclient",
      "followers_url": "https://api.github.com/users/lightclient/followers",
      "following_url": "https://api.github.com/users/lightclient/following{/other_user}",
      "gists_url": "https://api.github.com/users/lightclient/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lightclient/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lightclient/subscriptions",
      "organizations_url": "https://api.github.com/users/lightclient/orgs",
      "repos_url": "https://api.github.com/users/lightclient/repos",
      "events_url": "https://api.github.com/users/lightclient/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lightclient/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-20T18:50:04Z",
    "updated_at": "2023-03-20T18:50:04Z",
    "author_association": "MEMBER",
    "body": "The txpool by default only has [1024 tx slots](https://github.com/ethereum/go-ethereum/blob/e6b6a8b738069ad0579f6798ee59fde93ed13b43/core/txpool/txpool.go#L192), which means there can be at most 1024 txs pending. This is substantially below the 20000 buffer limit set in the rpc client. Therefore I don't think this is really an issue.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1476761441/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1477896123",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/26931#issuecomment-1477896123",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/26931",
    "id": 1477896123,
    "node_id": "IC_kwDOAOvK985YFue7",
    "user": {
      "login": "fjl",
      "id": 6915,
      "node_id": "MDQ6VXNlcjY5MTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6915?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjl",
      "html_url": "https://github.com/fjl",
      "followers_url": "https://api.github.com/users/fjl/followers",
      "following_url": "https://api.github.com/users/fjl/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjl/subscriptions",
      "organizations_url": "https://api.github.com/users/fjl/orgs",
      "repos_url": "https://api.github.com/users/fjl/repos",
      "events_url": "https://api.github.com/users/fjl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjl/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-21T14:03:52Z",
    "updated_at": "2023-03-21T14:04:00Z",
    "author_association": "MEMBER",
    "body": "What's the suggested fix for this issue? The issue is a limit in the RPC **client**. To mitigate, one could just use another RPC client library, or raise the limit in the client code. I can't see how this is a security issue with geth.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1477896123/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1523467139",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/26931#issuecomment-1523467139",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/26931",
    "id": 1523467139,
    "node_id": "IC_kwDOAOvK985azkOD",
    "user": {
      "login": "holiman",
      "id": 142290,
      "node_id": "MDQ6VXNlcjE0MjI5MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/142290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/holiman",
      "html_url": "https://github.com/holiman",
      "followers_url": "https://api.github.com/users/holiman/followers",
      "following_url": "https://api.github.com/users/holiman/following{/other_user}",
      "gists_url": "https://api.github.com/users/holiman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/holiman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/holiman/subscriptions",
      "organizations_url": "https://api.github.com/users/holiman/orgs",
      "repos_url": "https://api.github.com/users/holiman/repos",
      "events_url": "https://api.github.com/users/holiman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/holiman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-04-26T13:56:12Z",
    "updated_at": "2023-04-26T13:56:12Z",
    "author_association": "MEMBER",
    "body": ">  I can't see how this is a security issue with geth.\r\n\r\nNeither can I",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1523467139/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
