{
  "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/28441",
  "repository_url": "https://api.github.com/repos/ethereum/go-ethereum",
  "labels_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/28441/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/28441/comments",
  "events_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/28441/events",
  "html_url": "https://github.com/ethereum/go-ethereum/issues/28441",
  "id": 1970012991,
  "node_id": "I_kwDOAOvK9851bAM_",
  "number": 28441,
  "title": "`eth_getProof` implementation returns invalid hashes",
  "user": {
    "login": "Wollac",
    "id": 4930426,
    "node_id": "MDQ6VXNlcjQ5MzA0MjY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4930426?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Wollac",
    "html_url": "https://github.com/Wollac",
    "followers_url": "https://api.github.com/users/Wollac/followers",
    "following_url": "https://api.github.com/users/Wollac/following{/other_user}",
    "gists_url": "https://api.github.com/users/Wollac/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Wollac/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Wollac/subscriptions",
    "organizations_url": "https://api.github.com/users/Wollac/orgs",
    "repos_url": "https://api.github.com/users/Wollac/repos",
    "events_url": "https://api.github.com/users/Wollac/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Wollac/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 72233650,
      "node_id": "MDU6TGFiZWw3MjIzMzY1MA==",
      "url": "https://api.github.com/repos/ethereum/go-ethereum/labels/type:bug",
      "name": "type:bug",
      "color": "FF5E5E",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 6,
  "created_at": "2023-10-31T09:28:04Z",
  "updated_at": "2023-11-09T06:13:36Z",
  "closed_at": "2023-11-07T13:53:42Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "#### Description\r\n\r\nWhen `eth_getProof` is called for an account, that does not exist, it returns null hashes for the code and the storage hash. This is inconsistent with the behavior of existing simple accounts and was apparently introduced with #28357. Previously, `codeHash` consistently returned the hash of the empty string `0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470` and `storageHash` returned the empty MPT root hash `0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421`.\r\n\r\n#### Steps to reproduce the behaviour\r\n\r\n```\r\n$ curl localhost:8545 \\ \r\n      -X POST \\\r\n      -H \"Content-Type: application/json\" \\\r\n      -d '{ \"method\": \"eth_getProof\", \"params\": [\"0x0010000000000000000000000000000000000000\", [], \"latest\"], \"id\": 1, \"jsonrpc\": \"2.0\" }'\r\n```\r\n\r\n#### Actual behaviour\r\n\r\nThe previous command returns\r\n```json\r\n{\r\n  \"jsonrpc\": \"2.0\",\r\n  \"id\": 1,\r\n  \"result\": {\r\n    \"address\": \"0x0010000000000000000000000000000000000000\",\r\n    \"accountProof\": [\r\n      ...\r\n    ],\r\n    \"balance\": \"0x0\",\r\n    \"codeHash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\r\n    \"nonce\": \"0x0\",\r\n    \"storageHash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\r\n    \"storageProof\": []\r\n  }\r\n}\r\n```\r\n\r\n#### Expected behaviour\r\n\r\nThe previous command should return the correct hash for \"empty\" data:\r\n```json\r\n{\r\n  \"jsonrpc\": \"2.0\",\r\n  \"id\": 1,\r\n  \"result\": {\r\n    \"address\": \"0x0010000000000000000000000000000000000000\",\r\n    \"accountProof\": [\r\n      ...\r\n    ],\r\n    \"balance\": \"0x0\",\r\n    \"codeHash\": \"0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470\",\r\n    \"nonce\": \"0x0\",\r\n    \"storageHash\": \"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\",\r\n    \"storageProof\": []\r\n  }\r\n}\r\n```\r\n\r\n\r\n\r\n",
  "closed_by": {
    "login": "holiman",
    "id": 142290,
    "node_id": "MDQ6VXNlcjE0MjI5MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/142290?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/holiman",
    "html_url": "https://github.com/holiman",
    "followers_url": "https://api.github.com/users/holiman/followers",
    "following_url": "https://api.github.com/users/holiman/following{/other_user}",
    "gists_url": "https://api.github.com/users/holiman/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/holiman/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/holiman/subscriptions",
    "organizations_url": "https://api.github.com/users/holiman/orgs",
    "repos_url": "https://api.github.com/users/holiman/repos",
    "events_url": "https://api.github.com/users/holiman/events{/privacy}",
    "received_events_url": "https://api.github.com/users/holiman/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/28441/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/28441/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1797982449",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/28441#issuecomment-1797982449",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/28441",
    "id": 1797982449,
    "node_id": "IC_kwDOAOvK985rKwjx",
    "user": {
      "login": "rjl493456442",
      "id": 5959481,
      "node_id": "MDQ6VXNlcjU5NTk0ODE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5959481?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rjl493456442",
      "html_url": "https://github.com/rjl493456442",
      "followers_url": "https://api.github.com/users/rjl493456442/followers",
      "following_url": "https://api.github.com/users/rjl493456442/following{/other_user}",
      "gists_url": "https://api.github.com/users/rjl493456442/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rjl493456442/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rjl493456442/subscriptions",
      "organizations_url": "https://api.github.com/users/rjl493456442/orgs",
      "repos_url": "https://api.github.com/users/rjl493456442/repos",
      "events_url": "https://api.github.com/users/rjl493456442/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rjl493456442/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-11-07T07:52:46Z",
    "updated_at": "2023-11-07T07:53:16Z",
    "author_association": "MEMBER",
    "body": "> This is inconsistent with the behavior of existing simple accounts\r\n\r\nInstead, I think it's pretty good to distinguish \"empty account\" and \"non-existent account\".\r\n\r\n- If the account is existent but with empty code and empty storage, then `0xc5d24...d85a470 ` and `0x56e8...63b421 ` are returned\r\n- If the account is not existent, the code hash and storage root should be null with a \"account non-exsitent\" proof\r\n\r\nIt makes sense to me.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1797982449/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1798565489",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/28441#issuecomment-1798565489",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/28441",
    "id": 1798565489,
    "node_id": "IC_kwDOAOvK985rM-5x",
    "user": {
      "login": "holiman",
      "id": 142290,
      "node_id": "MDQ6VXNlcjE0MjI5MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/142290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/holiman",
      "html_url": "https://github.com/holiman",
      "followers_url": "https://api.github.com/users/holiman/followers",
      "following_url": "https://api.github.com/users/holiman/following{/other_user}",
      "gists_url": "https://api.github.com/users/holiman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/holiman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/holiman/subscriptions",
      "organizations_url": "https://api.github.com/users/holiman/orgs",
      "repos_url": "https://api.github.com/users/holiman/repos",
      "events_url": "https://api.github.com/users/holiman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/holiman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-11-07T13:53:42Z",
    "updated_at": "2023-11-07T13:53:42Z",
    "author_association": "MEMBER",
    "body": "I think it works as expected",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1798565489/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1801757323",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/28441#issuecomment-1801757323",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/28441",
    "id": 1801757323,
    "node_id": "IC_kwDOAOvK985rZKKL",
    "user": {
      "login": "Wollac",
      "id": 4930426,
      "node_id": "MDQ6VXNlcjQ5MzA0MjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4930426?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Wollac",
      "html_url": "https://github.com/Wollac",
      "followers_url": "https://api.github.com/users/Wollac/followers",
      "following_url": "https://api.github.com/users/Wollac/following{/other_user}",
      "gists_url": "https://api.github.com/users/Wollac/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Wollac/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Wollac/subscriptions",
      "organizations_url": "https://api.github.com/users/Wollac/orgs",
      "repos_url": "https://api.github.com/users/Wollac/repos",
      "events_url": "https://api.github.com/users/Wollac/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Wollac/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-11-08T12:06:31Z",
    "updated_at": "2023-11-08T12:06:31Z",
    "author_association": "NONE",
    "body": "@rjl493456442  I don't think I understand your assessment for the following reasons:\r\n\r\n- This is otherwise a breaking change, that was introduced by @holiman fix #28357 in v1.13.4. Previously, `0xc5d24...d85a470`  and `0x56e8...63b421` were returned exactly as described in my issue. Therefore, this new behavior breaks applications that have relied on such results for the last 5 years.\r\n- More importantly, I believe that the new behavior is inconsistent with [EIP-1186](https://eips.ethereum.org/EIPS/eip-1186) describing this API:\r\n  - > `codeHash`: `DATA`, 32 Bytes - hash of the code of the account. For a simple Account without code it will return \"0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470\"\r\n    \r\n    The EIP does not mention the new *special* case of empty accounts having the null hash. Although it, admittedly, doesn't explicitly say the opposite either, it still mentions \"hash of the code\" and aims to be consistent with `eth_getCode`. In this case `eth_getCode` returns `0x0`. So my consistent interpretation of the EIP would be to return `keccak256(0x0)` and not some special value.\r\n  - And perhaps most importantly, `storageHash` was explicitly introduced in this API by the EIP to allow for Merkle (non-)inclusion proofs, stating \"All storage will deliver a MerkleProof starting with this rootHash\".  When this API is used as intended to prove the non-inclusion of a storage key, e.g. `0x0`, for a non-existent account, then this statement is technically no longer correct: The API returns an empty \"proof trie\" in `storageProof` that has a root hash of `0x56e8...63b421`. This no longer matches the supplied `storageHash` of `0x0000...0000`, and such a discrepancy usually indicates an invalid proof.\r\n\r\nOf course, it would be easy for an application using this API to introduce special handling to be compatible with the previous behavior, and it might even be useful in some cases to maintain the distinction between \"empty account\" and \"non-existent account\". However, this seems to me to be a geth-specific response that is not covered by the EIP, and thus could cause compatibility issues with applications or other node/protocol implementations.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1801757323/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1801944565",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/28441#issuecomment-1801944565",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/28441",
    "id": 1801944565,
    "node_id": "IC_kwDOAOvK985rZ331",
    "user": {
      "login": "holiman",
      "id": 142290,
      "node_id": "MDQ6VXNlcjE0MjI5MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/142290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/holiman",
      "html_url": "https://github.com/holiman",
      "followers_url": "https://api.github.com/users/holiman/followers",
      "following_url": "https://api.github.com/users/holiman/following{/other_user}",
      "gists_url": "https://api.github.com/users/holiman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/holiman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/holiman/subscriptions",
      "organizations_url": "https://api.github.com/users/holiman/orgs",
      "repos_url": "https://api.github.com/users/holiman/repos",
      "events_url": "https://api.github.com/users/holiman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/holiman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-11-08T13:58:28Z",
    "updated_at": "2023-11-08T13:58:28Z",
    "author_association": "MEMBER",
    "body": "You are reasoning as if there's nothing in particular different between 'empty account' and 'non-existent account'. IMO there's a world of difference, \r\n- the latter does not exist in the trie. Serving an emptyCodeHash would be a straight-up lie, since there is no such emptyCodeHash at the corresponding place in the account trie. Therefore, the `null-hash` is the only proper answer. \r\n- As for what we do / should serve in the case of exclusion proofs, I'll have to look into it. I have a slight recollection, from when doing #28357, that the exclusion proof logic was a bit strange. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1801944565/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1803059483",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/28441#issuecomment-1803059483",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/28441",
    "id": 1803059483,
    "node_id": "IC_kwDOAOvK985reIEb",
    "user": {
      "login": "jsvisa",
      "id": 3627395,
      "node_id": "MDQ6VXNlcjM2MjczOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3627395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jsvisa",
      "html_url": "https://github.com/jsvisa",
      "followers_url": "https://api.github.com/users/jsvisa/followers",
      "following_url": "https://api.github.com/users/jsvisa/following{/other_user}",
      "gists_url": "https://api.github.com/users/jsvisa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jsvisa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jsvisa/subscriptions",
      "organizations_url": "https://api.github.com/users/jsvisa/orgs",
      "repos_url": "https://api.github.com/users/jsvisa/repos",
      "events_url": "https://api.github.com/users/jsvisa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jsvisa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-11-09T02:19:23Z",
    "updated_at": "2023-11-09T02:19:23Z",
    "author_association": "CONTRIBUTOR",
    "body": "FYI, test the `non-existent account` on the cloud provider or other clients, responses are as below:\r\n\r\n\r\n| Provider | codeHash | storageHash | \r\n| -- | -- | -- |\r\n| [Alchemy](https://alchemy.com/) | `0x0000000000000000000000000000000000000000000000000000000000000000` | `0x0000000000000000000000000000000000000000000000000000000000000000` | \r\n| [Infura](https://infura.io) | `0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470` | `0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421` | \r\n| [ChainBase](https://chainbase.com/) | `0x0000000000000000000000000000000000000000000000000000000000000000` | `0x0000000000000000000000000000000000000000000000000000000000000000` | \r\n| [erigon](https://github.com/ledgerwatch/erigon) |  `0x0000000000000000000000000000000000000000000000000000000000000000` | `0x0000000000000000000000000000000000000000000000000000000000000000` | \r\n| [reth](https://github.com/paradigmxyz/reth) | RPC NOT SUPPORTED YET | \r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1803059483/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1803223820",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/28441#issuecomment-1803223820",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/28441",
    "id": 1803223820,
    "node_id": "IC_kwDOAOvK985rewMM",
    "user": {
      "login": "rjl493456442",
      "id": 5959481,
      "node_id": "MDQ6VXNlcjU5NTk0ODE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5959481?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rjl493456442",
      "html_url": "https://github.com/rjl493456442",
      "followers_url": "https://api.github.com/users/rjl493456442/followers",
      "following_url": "https://api.github.com/users/rjl493456442/following{/other_user}",
      "gists_url": "https://api.github.com/users/rjl493456442/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rjl493456442/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rjl493456442/subscriptions",
      "organizations_url": "https://api.github.com/users/rjl493456442/orgs",
      "repos_url": "https://api.github.com/users/rjl493456442/repos",
      "events_url": "https://api.github.com/users/rjl493456442/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rjl493456442/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-11-09T06:13:36Z",
    "updated_at": "2023-11-09T06:13:36Z",
    "author_association": "MEMBER",
    "body": "@Wollac \r\n\r\n> This is otherwise a breaking change, that was introduced by @holiman fix internal/ethapi: fix codehash lookup in eth_getProof #28357 in v1.13.4. Previously, 0xc5d24...d85a470 and 0x56e8...63b421 were returned exactly as described in my issue. Therefore, this new behavior breaks applications that have relied on such results for the last 5 years.\r\n\r\nYeah, we apologize for the breaking change, but I believe the new behavior is more correct.\r\n\r\n> So my consistent interpretation of the EIP would be to return keccak256(0x0) and not some special value.\r\n\r\nI think we should improve the EIP by clarifing this corner case. But I don't think it makes sense to return a value(keccak256(0x0)) for non-existent account(null is expected).\r\n\r\n> for a non-existent account, then this statement is technically no longer correct: The API returns an empty \"proof trie\" in storageProof that has a root hash of 0x56e8...63b421. This no longer matches the supplied storageHash of 0x0000...0000, and such a discrepancy usually indicates an invalid proof.\r\n\r\nFor this storage trie(two layer structure), I think the storage slot verification involves two steps: (1) verify the account is existent and storage trie is not empty (2) verify the existence or inexistence of storage slot.\r\n\r\nIn the case you mentioned, we can clearly prove this account is not existent, then obviously the step (2) is no longer required.\r\n\r\n> However, this seems to me to be a geth-specific response that is not covered by the EIP, and thus could cause compatibility issues with applications or other node/protocol implementations.\r\n\r\nIt's a fair good point. In my opinion, we should try to clarify EIP and align other client implementations with this behavioral definition.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1803223820/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
