{
  "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20636",
  "repository_url": "https://api.github.com/repos/ethereum/go-ethereum",
  "labels_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20636/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20636/comments",
  "events_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20636/events",
  "html_url": "https://github.com/ethereum/go-ethereum/issues/20636",
  "id": 561421987,
  "node_id": "MDU6SXNzdWU1NjE0MjE5ODc=",
  "number": 20636,
  "title": "\"no contract code at given address\" when call the contract method",
  "user": {
    "login": "ssi91",
    "id": 6726214,
    "node_id": "MDQ6VXNlcjY3MjYyMTQ=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6726214?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ssi91",
    "html_url": "https://github.com/ssi91",
    "followers_url": "https://api.github.com/users/ssi91/followers",
    "following_url": "https://api.github.com/users/ssi91/following{/other_user}",
    "gists_url": "https://api.github.com/users/ssi91/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ssi91/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ssi91/subscriptions",
    "organizations_url": "https://api.github.com/users/ssi91/orgs",
    "repos_url": "https://api.github.com/users/ssi91/repos",
    "events_url": "https://api.github.com/users/ssi91/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ssi91/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2020-02-07T05:00:06Z",
  "updated_at": "2020-02-07T05:14:37Z",
  "closed_at": "2020-02-07T05:14:37Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "Hi there,\r\n\r\nIf I just deploy the contract to the `SimulatedBackend` and just call a simple view-method of the contract (via generated by `abigen` binding) it fails with error `no contract code at given address`.\r\nBut if I send some ETH to the contract address(that is, send transaction) before I call the method it will be OK though.\r\n\r\n#### System information\r\n\r\nGeth version: `Version: 1.9.10-stable`\r\nOS & Version: OSX\r\n\r\n#### Expected behaviour\r\n\r\nSmart-Contracts methods calling shouldn't fall just after it was deployed\r\n\r\n#### Actual behaviour\r\n\r\n```\r\n$ go test -v\r\n=== RUN   TestExampleMethod\r\n--- FAIL: TestExampleMethod (0.00s)\r\n    test_test.go:102: Got error: no contract code at given address\r\n    test_test.go:106: Decimals check: expected 0, got: <nil>\r\n=== RUN   TestExampleMethodWithSendingETH\r\n--- PASS: TestExampleMethodWithSendingETH (0.00s)\r\nFAIL\r\nexit status 1\r\n```\r\n\r\n#### Steps to reproduce the behaviour\r\n\r\nFor example the simplest contract:\r\n```solidity\r\npragma solidity ^0.6.0;\r\n\r\ncontract ExampleContract {\r\n    constructor() public{\r\n\r\n    }\r\n\r\n    function exampleMethod() public view returns (uint) {\r\n        return 0;\r\n    }\r\n}\r\n```\r\nCreate bindings for the contract via `abigen`(version `1.9.10-stable`).  \r\nAnd write simple tests(I've moved deployment of the contract and eth-sending to separate functions). One of them calls the contract's method just after was deployed. And another one with sending eth:\r\n```go\r\npackage contract\r\n\r\nimport (\r\n\t\"context\"\r\n\t\"crypto/ecdsa\"\r\n\t\"github.com/ethereum/go-ethereum/accounts/abi/bind\"\r\n\t\"github.com/ethereum/go-ethereum/accounts/abi/bind/backends\"\r\n\t\"github.com/ethereum/go-ethereum/common\"\r\n\t\"github.com/ethereum/go-ethereum/core\"\r\n\t\"github.com/ethereum/go-ethereum/core/types\"\r\n\t\"github.com/ethereum/go-ethereum/crypto\"\r\n\t\"log\"\r\n\t\"math/big\"\r\n\t\"testing\"\r\n)\r\n\r\ntype SmartContract struct {\r\n\tContract        *ExampleContract\r\n\tContractAddress common.Address\r\n\t// OwnerKey        *ecdsa.PrivateKey\r\n\tSystemKey       *ecdsa.PrivateKey\r\n}\r\n\r\nfunc NewSmartContract() (*backends.SimulatedBackend, *SmartContract, error) {\r\n\tkey, err := crypto.GenerateKey()\r\n\tif err != nil {\r\n\t\tlog.Printf(\"Generate key error: %s\\n\", err)\r\n\t\treturn nil, nil, err\r\n\t}\r\n\r\n\tauth := bind.NewKeyedTransactor(key)\r\n\tbalance := new(big.Int)\r\n\tbalance.SetString(\"100000000000000000000\", 10) // 100 eth in wei\r\n\r\n\talloc := make(core.GenesisAlloc)\r\n\talloc[auth.From] = core.GenesisAccount{\r\n\t\tBalance: balance,\r\n\t}\r\n\r\n\tvar gasLimit uint64 = 9999999\r\n\tbackend := backends.NewSimulatedBackend(alloc, gasLimit)\r\n\r\n\tcontractAddress, _, contract, err := DeployExampleContract(auth, backend)\r\n\r\n\tif err != nil {\r\n\t\tlog.Printf(\"Deploy Contract error: %s\\n\", err)\r\n\t\treturn nil, nil, err\r\n\t}\r\n\r\n\treturn backend, &SmartContract{\r\n\t\tContract:        contract,\r\n\t\tContractAddress: contractAddress,\r\n\t\tSystemKey:       key,\r\n\t}, nil\r\n}\r\n\r\nfunc SendEtherToAddress(ctx context.Context, backend *backends.SimulatedBackend, senderKey *ecdsa.PrivateKey, receiverAddress *common.Address, value *big.Int) (*types.Receipt, error) {\r\n\tnonce, err := backend.PendingNonceAt(ctx, crypto.PubkeyToAddress(senderKey.PublicKey))\r\n\tif err != nil {\r\n\t\tlog.Printf(\"SendEtherToAddress error: %s\\n\", err)\r\n\t\treturn nil, err\r\n\t}\r\n\r\n\tvar gasLimit uint64 = 210000\r\n\r\n\tgasPrice, err := backend.SuggestGasPrice(ctx)\r\n\tif err != nil {\r\n\t\tlog.Printf(\"SendEtherToAddress gas price error: %s\\n\", err)\r\n\t\treturn nil, err\r\n\t}\r\n\r\n\tvar data []byte\r\n\ttx := types.NewTransaction(nonce, *receiverAddress, value, gasLimit, gasPrice, data)\r\n\r\n\tchainID := big.NewInt(1337)\r\n\r\n\tsignedTx, err := types.SignTx(tx, types.NewEIP155Signer(chainID), senderKey)\r\n\tif err != nil {\r\n\t\tlog.Printf(\"SendEtherToAddress sign error: %s\\n\", err)\r\n\t\treturn nil, err\r\n\t}\r\n\r\n\terr = backend.SendTransaction(ctx, signedTx)\r\n\tif err != nil {\r\n\t\tlog.Printf(\"SendEtherToAddress SendTransaction: %s\\n\", err)\r\n\t\treturn nil, err\r\n\t}\r\n\r\n\tbackend.Commit()\r\n\r\n\treturn backend.TransactionReceipt(ctx, signedTx.Hash())\r\n}\r\n\r\nfunc TestExampleMethod(t *testing.T) {\r\n\t_, smartContract, err := NewSmartContract()\r\n\tif err != nil {\r\n\t\tlog.Fatalln(err)\r\n\t}\r\n\r\n\tdecimals, err := smartContract.Contract.ExampleMethod(nil)\r\n\tif err != nil {\r\n\t\tt.Errorf(\"Got error: %s\", err)\r\n\t\t// log.Fatalln(err)\r\n\t}\r\n\tif decimals == nil || decimals.Cmp(big.NewInt(0)) != 0 {\r\n\t\tt.Errorf(\"Decimals check: expected %d, got: %d\\n\", 0, decimals)\r\n\t\t//log.Fatalf(\"Decimals check: expected %d, got: %d\\n\", 0, decimals)\r\n\t}\r\n}\r\n\r\nfunc TestExampleMethodWithSendingETH(t *testing.T) {\r\n\tbackend, smartContract, err := NewSmartContract()\r\n\tif err != nil {\r\n\t\tt.Error(err)\r\n\t}\r\n\r\n\tvar value big.Int\r\n\tvalue.SetString(\"10000000000000000000\", 10)\r\n\t_, err = SendEtherToAddress(context.Background(), backend, smartContract.SystemKey, &smartContract.ContractAddress, &value)\r\n\tif err != nil {\r\n\t\tt.Error(err)\r\n\t}\r\n\r\n\tdecimals, err := smartContract.Contract.ExampleMethod(nil)\r\n\tif err != nil {\r\n\t\tt.Error(err)\r\n\t}\r\n\tif decimals == nil || decimals.Cmp(big.NewInt(0)) != 0 {\r\n\t\tt.Errorf(\"Decimals check: expected %d, got: %d\\n\", 0, decimals)\r\n\t}\r\n}\r\n\r\n```\r\n\r\n#### Backtrace\r\n\r\n````\r\n[backtrace]\r\n````\r\n",
  "closed_by": {
    "login": "ssi91",
    "id": 6726214,
    "node_id": "MDQ6VXNlcjY3MjYyMTQ=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6726214?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ssi91",
    "html_url": "https://github.com/ssi91",
    "followers_url": "https://api.github.com/users/ssi91/followers",
    "following_url": "https://api.github.com/users/ssi91/following{/other_user}",
    "gists_url": "https://api.github.com/users/ssi91/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ssi91/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ssi91/subscriptions",
    "organizations_url": "https://api.github.com/users/ssi91/orgs",
    "repos_url": "https://api.github.com/users/ssi91/repos",
    "events_url": "https://api.github.com/users/ssi91/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ssi91/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20636/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20636/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/583237894",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/20636#issuecomment-583237894",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20636",
    "id": 583237894,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4MzIzNzg5NA==",
    "user": {
      "login": "ssi91",
      "id": 6726214,
      "node_id": "MDQ6VXNlcjY3MjYyMTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6726214?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ssi91",
      "html_url": "https://github.com/ssi91",
      "followers_url": "https://api.github.com/users/ssi91/followers",
      "following_url": "https://api.github.com/users/ssi91/following{/other_user}",
      "gists_url": "https://api.github.com/users/ssi91/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ssi91/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ssi91/subscriptions",
      "organizations_url": "https://api.github.com/users/ssi91/orgs",
      "repos_url": "https://api.github.com/users/ssi91/repos",
      "events_url": "https://api.github.com/users/ssi91/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ssi91/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-02-07T05:14:29Z",
    "updated_at": "2020-02-07T05:14:29Z",
    "author_association": "NONE",
    "body": "damn! I've forgotten `backend.Commit()` after deploy.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/583237894/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
