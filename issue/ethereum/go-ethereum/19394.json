{
  "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/19394",
  "repository_url": "https://api.github.com/repos/ethereum/go-ethereum",
  "labels_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/19394/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/19394/comments",
  "events_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/19394/events",
  "html_url": "https://github.com/ethereum/go-ethereum/issues/19394",
  "id": 429399844,
  "node_id": "MDU6SXNzdWU0MjkzOTk4NDQ=",
  "number": 19394,
  "title": "EIP-1898: allow default block parameter to be blockHash",
  "user": {
    "login": "charles-cooper",
    "id": 3867501,
    "node_id": "MDQ6VXNlcjM4Njc1MDE=",
    "avatar_url": "https://avatars.githubusercontent.com/u/3867501?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/charles-cooper",
    "html_url": "https://github.com/charles-cooper",
    "followers_url": "https://api.github.com/users/charles-cooper/followers",
    "following_url": "https://api.github.com/users/charles-cooper/following{/other_user}",
    "gists_url": "https://api.github.com/users/charles-cooper/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/charles-cooper/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/charles-cooper/subscriptions",
    "organizations_url": "https://api.github.com/users/charles-cooper/orgs",
    "repos_url": "https://api.github.com/users/charles-cooper/repos",
    "events_url": "https://api.github.com/users/charles-cooper/events{/privacy}",
    "received_events_url": "https://api.github.com/users/charles-cooper/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 13,
  "created_at": "2019-04-04T17:33:57Z",
  "updated_at": "2022-06-15T15:54:37Z",
  "closed_at": "2019-10-14T13:04:18Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "In the following JSON-RPC calls, allow the default block parameter to be a block hash per https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1898.md:\r\n\r\n- `eth_getBalance`\r\n- `eth_getStorageAt`\r\n- `eth_getTransactionCount`\r\n- `eth_getCode`\r\n- `eth_call`\r\n- `eth_getProof`\r\n\r\nThis allows clients to unambiguously specify which block they are querying. Wondering if this is feasible to implement or if any changes to the spec need to be made?",
  "closed_by": {
    "login": "holiman",
    "id": 142290,
    "node_id": "MDQ6VXNlcjE0MjI5MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/142290?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/holiman",
    "html_url": "https://github.com/holiman",
    "followers_url": "https://api.github.com/users/holiman/followers",
    "following_url": "https://api.github.com/users/holiman/following{/other_user}",
    "gists_url": "https://api.github.com/users/holiman/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/holiman/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/holiman/subscriptions",
    "organizations_url": "https://api.github.com/users/holiman/orgs",
    "repos_url": "https://api.github.com/users/holiman/repos",
    "events_url": "https://api.github.com/users/holiman/events{/privacy}",
    "received_events_url": "https://api.github.com/users/holiman/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/19394/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/19394/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/481165491",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/19394#issuecomment-481165491",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/19394",
    "id": 481165491,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4MTE2NTQ5MQ==",
    "user": {
      "login": "holiman",
      "id": 142290,
      "node_id": "MDQ6VXNlcjE0MjI5MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/142290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/holiman",
      "html_url": "https://github.com/holiman",
      "followers_url": "https://api.github.com/users/holiman/followers",
      "following_url": "https://api.github.com/users/holiman/following{/other_user}",
      "gists_url": "https://api.github.com/users/holiman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/holiman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/holiman/subscriptions",
      "organizations_url": "https://api.github.com/users/holiman/orgs",
      "repos_url": "https://api.github.com/users/holiman/repos",
      "events_url": "https://api.github.com/users/holiman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/holiman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-04-09T08:59:00Z",
    "updated_at": "2019-04-09T08:59:00Z",
    "author_association": "MEMBER",
    "body": "Although it would be kind of simple to implement this (simply interpret it as hash if it looks like a hash), there's a more subtle problem that the EIP needs to specify. \r\n\r\n- If the hash `h` is not a canonical block, but instead a sidechain block, then we may actually have the block, but not necessarily the state for the block. \r\n\r\nThat is a problem we don't have for `number` or `latest`, since those are implicitly canon blocks. So, the possible ways to handle the situation above is: \r\n\r\n- Return the data (balance/code) if we have the state,  but return zeroes if we don't \r\n- Return the data if we have the state, but return error if we don't \r\n- Always return an error if the hash is not canon\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/481165491/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/481491261",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/19394#issuecomment-481491261",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/19394",
    "id": 481491261,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4MTQ5MTI2MQ==",
    "user": {
      "login": "charles-cooper",
      "id": 3867501,
      "node_id": "MDQ6VXNlcjM4Njc1MDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3867501?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/charles-cooper",
      "html_url": "https://github.com/charles-cooper",
      "followers_url": "https://api.github.com/users/charles-cooper/followers",
      "following_url": "https://api.github.com/users/charles-cooper/following{/other_user}",
      "gists_url": "https://api.github.com/users/charles-cooper/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/charles-cooper/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/charles-cooper/subscriptions",
      "organizations_url": "https://api.github.com/users/charles-cooper/orgs",
      "repos_url": "https://api.github.com/users/charles-cooper/repos",
      "events_url": "https://api.github.com/users/charles-cooper/events{/privacy}",
      "received_events_url": "https://api.github.com/users/charles-cooper/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-04-10T00:46:23Z",
    "updated_at": "2019-04-10T00:47:26Z",
    "author_association": "NONE",
    "body": "\r\n> * If the hash h is not a canonical block, but instead a sidechain block, then we may actually have the block, but not necessarily the state for the block.\r\n> \r\n> That is a problem we don't have for number or latest, since those are implicitly canon blocks.\r\n\r\nGood point!\r\n> * Return the data if we have the state, but return error if we don't\r\n\r\nI think this option is best. Do you have strong opinions either way? If not, I will go ahead and update the EIP.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/481491261/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/482822384",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/19394#issuecomment-482822384",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/19394",
    "id": 482822384,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4MjgyMjM4NA==",
    "user": {
      "login": "ryanschneider",
      "id": 53520,
      "node_id": "MDQ6VXNlcjUzNTIw",
      "avatar_url": "https://avatars.githubusercontent.com/u/53520?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanschneider",
      "html_url": "https://github.com/ryanschneider",
      "followers_url": "https://api.github.com/users/ryanschneider/followers",
      "following_url": "https://api.github.com/users/ryanschneider/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanschneider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanschneider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanschneider/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanschneider/orgs",
      "repos_url": "https://api.github.com/users/ryanschneider/repos",
      "events_url": "https://api.github.com/users/ryanschneider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanschneider/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-04-13T15:36:28Z",
    "updated_at": "2019-04-13T15:36:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "Great to see there's already an EIP going forward since I independently started building this yesterday\r\nin https://github.com/ethereum/go-ethereum/pull/19459. :) \r\n\r\nIn my implementation I just assumed that a block number is always less than MAX_UINT64 and a hash was greater, but I like the approach of the EIP w/ a new optional block parameter.\r\n\r\nAnd if that's the case, then there's no reason why the param can't be:\r\n\r\n```json\r\n{\r\n  \"blockHash\": \"0xd4e56740f876aef8c010b86a40d5f56745a118d0906a34e69aec8c0db1cb8fa3\",\r\n  \"canonical\": true \r\n}\r\n```\r\n\r\nWhich is to say the user can specify whether they require canonical blocks or not, meaning the only thing left for us to decide is which one is the default. :)\r\n\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/482822384/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/482832022",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/19394#issuecomment-482832022",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/19394",
    "id": 482832022,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4MjgzMjAyMg==",
    "user": {
      "login": "charles-cooper",
      "id": 3867501,
      "node_id": "MDQ6VXNlcjM4Njc1MDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3867501?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/charles-cooper",
      "html_url": "https://github.com/charles-cooper",
      "followers_url": "https://api.github.com/users/charles-cooper/followers",
      "following_url": "https://api.github.com/users/charles-cooper/following{/other_user}",
      "gists_url": "https://api.github.com/users/charles-cooper/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/charles-cooper/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/charles-cooper/subscriptions",
      "organizations_url": "https://api.github.com/users/charles-cooper/orgs",
      "repos_url": "https://api.github.com/users/charles-cooper/repos",
      "events_url": "https://api.github.com/users/charles-cooper/events{/privacy}",
      "received_events_url": "https://api.github.com/users/charles-cooper/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-04-13T16:25:39Z",
    "updated_at": "2019-04-13T16:25:39Z",
    "author_association": "NONE",
    "body": "That's a neat solution (although I think the field should be named `require_canonical` :) ).\r\n\r\nI think the default value for `require_canonical` should be false. In the use case of, do a bunch of eth_call/eth_getBalance or whatever, it is better to be able to do all the calls and then a final extra RPC call to check the block is still canonical than to potentially error out in the middle of the transaction (only to have that block get reorged back in!). It steers the client developer towards writing more robust code. Also it appears we both arrived at this conclusion independently as that's the one you chose in your PR so that is extra evidence that we should go with that :)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/482832022/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/482858224",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/19394#issuecomment-482858224",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/19394",
    "id": 482858224,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4Mjg1ODIyNA==",
    "user": {
      "login": "ryanschneider",
      "id": 53520,
      "node_id": "MDQ6VXNlcjUzNTIw",
      "avatar_url": "https://avatars.githubusercontent.com/u/53520?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanschneider",
      "html_url": "https://github.com/ryanschneider",
      "followers_url": "https://api.github.com/users/ryanschneider/followers",
      "following_url": "https://api.github.com/users/ryanschneider/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanschneider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanschneider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanschneider/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanschneider/orgs",
      "repos_url": "https://api.github.com/users/ryanschneider/repos",
      "events_url": "https://api.github.com/users/ryanschneider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanschneider/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-04-13T18:23:14Z",
    "updated_at": "2019-04-13T18:23:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "Although to be fair I only chose it in my PR as the default because it’s\nthe default behavior inside geth’s API. :). I actually haven’t looked up\nhow to tell if a block is canonical or not, but assume it’s easy enough to\ndo so.\n\nI think it would be `requireCanonical` as camelCase seems to be the pattern\nfor arguments, (e.g. in LogFilter).\n\nHey what if we combined your EIP with\nhttps://github.com/ethereum/go-ethereum/pull/18346, since there’s issue\nwith backwards compatibility in that issue, we could make it only return an\nerror if the block number is specified as a JSON object `{blockNumber:\n0x78654321}` but keep the old client behavior if just passed as a raw\nQUANTITY?\n\nOn Sat, Apr 13, 2019 at 9:26 AM Charles Cooper <notifications@github.com>\nwrote:\n\n> That's a neat solution (although I think the field should be named\n> require_canonical :) ).\n>\n> I think the default value for require_canonical should be false. In the\n> use case of, do a bunch of eth_call/eth_getBalance or whatever, it is\n> better to be able to do all the calls and then a final extra RPC call to\n> check the block is still canonical than to potentially error out in the\n> middle of the transaction (only to have that block get reorged back in!).\n> It steers the client developer towards writing more robust code. Also it\n> appears we both arrived at this conclusion independently as that's the one\n> you chose in your PR so that is extra evidence that we should go with that\n> :)\n>\n> —\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/ethereum/go-ethereum/issues/19394#issuecomment-482832022>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AADREK7X64IdAKOCWeOrQ2beGV9dvgq_ks5vggU0gaJpZM4cdVfz>\n> .\n>\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/482858224/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/482886447",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/19394#issuecomment-482886447",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/19394",
    "id": 482886447,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4Mjg4NjQ0Nw==",
    "user": {
      "login": "ryanschneider",
      "id": 53520,
      "node_id": "MDQ6VXNlcjUzNTIw",
      "avatar_url": "https://avatars.githubusercontent.com/u/53520?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanschneider",
      "html_url": "https://github.com/ryanschneider",
      "followers_url": "https://api.github.com/users/ryanschneider/followers",
      "following_url": "https://api.github.com/users/ryanschneider/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanschneider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanschneider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanschneider/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanschneider/orgs",
      "repos_url": "https://api.github.com/users/ryanschneider/repos",
      "events_url": "https://api.github.com/users/ryanschneider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanschneider/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-04-13T21:02:45Z",
    "updated_at": "2019-04-13T21:02:45Z",
    "author_association": "CONTRIBUTOR",
    "body": "Actually, how about these options for the block parameter:\r\n\r\n- `QUANTITY` block number\r\n- `HASH` (32 byte DATA) block hash (either canonical or non-)\r\n- `TAG` either `latest`, `earliest`, or `pending`\r\n- `OBJECT` one of:\r\n  - `{ \"blockNumber\": QUANTITY or TAG }` same as root-level QUANTITY or TAG except that block numbers greater than HEAD return an error ala #18346.\r\n  - `{ \"blockHash\": HASH }` block by hash, either canonical or non-.\r\n  - `{\"canonicalHash\": HASH }` block by hash, returns an error if block is non-canonical.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/482886447/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/482889947",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/19394#issuecomment-482889947",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/19394",
    "id": 482889947,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4Mjg4OTk0Nw==",
    "user": {
      "login": "holiman",
      "id": 142290,
      "node_id": "MDQ6VXNlcjE0MjI5MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/142290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/holiman",
      "html_url": "https://github.com/holiman",
      "followers_url": "https://api.github.com/users/holiman/followers",
      "following_url": "https://api.github.com/users/holiman/following{/other_user}",
      "gists_url": "https://api.github.com/users/holiman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/holiman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/holiman/subscriptions",
      "organizations_url": "https://api.github.com/users/holiman/orgs",
      "repos_url": "https://api.github.com/users/holiman/repos",
      "events_url": "https://api.github.com/users/holiman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/holiman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-04-13T21:24:29Z",
    "updated_at": "2019-04-13T21:24:29Z",
    "author_association": "MEMBER",
    "body": "What's really the case that one would want to do operations on a non-canon block? I mean personally I might do it for exploration, but I'd expect most callers would rather fail asap if the block is not canon. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/482889947/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/482890846",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/19394#issuecomment-482890846",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/19394",
    "id": 482890846,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4Mjg5MDg0Ng==",
    "user": {
      "login": "ryanschneider",
      "id": 53520,
      "node_id": "MDQ6VXNlcjUzNTIw",
      "avatar_url": "https://avatars.githubusercontent.com/u/53520?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanschneider",
      "html_url": "https://github.com/ryanschneider",
      "followers_url": "https://api.github.com/users/ryanschneider/followers",
      "following_url": "https://api.github.com/users/ryanschneider/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanschneider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanschneider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanschneider/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanschneider/orgs",
      "repos_url": "https://api.github.com/users/ryanschneider/repos",
      "events_url": "https://api.github.com/users/ryanschneider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanschneider/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-04-13T21:30:22Z",
    "updated_at": "2019-04-13T21:30:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "As Charles mentioned, it's more so a multi-RPC \"transaction\" can complete w/o error if there's a reorg between two calls.  Likewise if you have multiple nodes in a High Availability configuration, it's ideal that both nodes can answer RPCs about a block even if on one node it's canonical and on the other it's not.\r\n\r\nAlso, it provides parity with `eth_getBlockByHash` which returns both canonical and non-canonical blocks (or at least Uncle blocks).  \r\n\r\nI could go either way on if canonical is default or not, but definitely think it should be possible, and I defer to Charles' opinion that making it the default is optimal as my experience is less w/ building DApps or Exchanges and more with low-level Ethereum infrastructure.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/482890846/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/482891451",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/19394#issuecomment-482891451",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/19394",
    "id": 482891451,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4Mjg5MTQ1MQ==",
    "user": {
      "login": "charles-cooper",
      "id": 3867501,
      "node_id": "MDQ6VXNlcjM4Njc1MDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3867501?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/charles-cooper",
      "html_url": "https://github.com/charles-cooper",
      "followers_url": "https://api.github.com/users/charles-cooper/followers",
      "following_url": "https://api.github.com/users/charles-cooper/following{/other_user}",
      "gists_url": "https://api.github.com/users/charles-cooper/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/charles-cooper/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/charles-cooper/subscriptions",
      "organizations_url": "https://api.github.com/users/charles-cooper/orgs",
      "repos_url": "https://api.github.com/users/charles-cooper/repos",
      "events_url": "https://api.github.com/users/charles-cooper/events{/privacy}",
      "received_events_url": "https://api.github.com/users/charles-cooper/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-04-13T21:33:51Z",
    "updated_at": "2019-04-13T21:33:51Z",
    "author_association": "NONE",
    "body": "> we could make it only return an\r\nerror if the block number is specified as a JSON object `{blockNumber:\r\n0x78654321}` but keep the old client behavior if just passed as a raw\r\nQUANTITY?\r\n\r\nGoing to have to shoot this one down. That's going to be really difficult for client developers to predict and I would rather have backwards compatibility broken once than insert this bomb into the spec.\r\n\r\n> HASH (32 byte DATA) block hash (either canonical or non-)\r\n\r\nI think it's better to use a tagged approach than having the node guess what the client means?\r\n\r\n> What's really the case that one would want to do operations on a non-canon block? I mean personally I might do it for exploration, but I'd expect most callers would rather fail asap if the block is not canon.\r\n\r\nThe case I can think of is that a block gets reorged out and then reorged back in. Generally I think if a client asks for a specific block hash and the block is available, the data should be returned. Then the onus is of course on the client to make sure it's canonical or not, but this way of doing it is more forgiving in the presence of race conditions.\r\n\r\nPerhaps I should make a `discussions-to` for this EIP?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/482891451/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/482894132",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/19394#issuecomment-482894132",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/19394",
    "id": 482894132,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4Mjg5NDEzMg==",
    "user": {
      "login": "charles-cooper",
      "id": 3867501,
      "node_id": "MDQ6VXNlcjM4Njc1MDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3867501?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/charles-cooper",
      "html_url": "https://github.com/charles-cooper",
      "followers_url": "https://api.github.com/users/charles-cooper/followers",
      "following_url": "https://api.github.com/users/charles-cooper/following{/other_user}",
      "gists_url": "https://api.github.com/users/charles-cooper/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/charles-cooper/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/charles-cooper/subscriptions",
      "organizations_url": "https://api.github.com/users/charles-cooper/orgs",
      "repos_url": "https://api.github.com/users/charles-cooper/repos",
      "events_url": "https://api.github.com/users/charles-cooper/events{/privacy}",
      "received_events_url": "https://api.github.com/users/charles-cooper/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-04-13T22:13:34Z",
    "updated_at": "2019-04-13T22:17:49Z",
    "author_association": "NONE",
    "body": "> Also, it provides parity with eth_getBlockByHash which returns both canonical and non-canonical blocks (or at least Uncle blocks).\r\n\r\nThis is also a good point. I believe `eth_getLogs` also works the same way, so returning data for non-canonical blocks would make the behavior the same across all RPCs which allow blockHash.\r\n\r\nPersonally my workflow is usually to poll for new blocks, and then for all new blocks grab all the info I want associated with that block (logs, code, balances, call results etc) and put it into a cache. Since the info associated with that block is immutable, handling reorgs is just a matter of updating a pointer. This separates the concerns of grabbing data and deciding what to do about data. From the point of view of this cache, you want data for blocks you have been told about to be available whether it's canonical or not because the logic for dealing with canonical vs non-canonical data is somewhere else.\r\n\r\nAnd sometimes you really do want to have that non-canonical data around; for instance, an application which takes a preliminary action (e.g., placing a funds hold) when a block is mined and takes another \"committing\" action when the application thinks the block has enough confirmations (e.g., releasing funds). Even if the block is non-canonical, you might not want to rollback that preliminary action until the application thinks that there are enough confirmations that it is very unlikely to be reorged back in.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/482894132/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/485482700",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/19394#issuecomment-485482700",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/19394",
    "id": 485482700,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4NTQ4MjcwMA==",
    "user": {
      "login": "holiman",
      "id": 142290,
      "node_id": "MDQ6VXNlcjE0MjI5MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/142290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/holiman",
      "html_url": "https://github.com/holiman",
      "followers_url": "https://api.github.com/users/holiman/followers",
      "following_url": "https://api.github.com/users/holiman/following{/other_user}",
      "gists_url": "https://api.github.com/users/holiman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/holiman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/holiman/subscriptions",
      "organizations_url": "https://api.github.com/users/holiman/orgs",
      "repos_url": "https://api.github.com/users/holiman/repos",
      "events_url": "https://api.github.com/users/holiman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/holiman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-04-22T17:20:45Z",
    "updated_at": "2019-04-22T17:20:45Z",
    "author_association": "MEMBER",
    "body": "> Generally I think if a client asks for a specific block hash and the block is available, the data should be returned. Then the onus is of course on the client to make sure it's canonical or not, but this way of doing it is more forgiving in the presence of race conditions.\r\n\r\nIs it really more forgiving? If I need to do a sequence of `M` calls to get the data I want out, and while doing so, my block suddenly becomes a sideblock. If geth just processes the rest of the transactions as usual, my results will be consistent, but useless. \r\n\r\nWouldn't it be better if call `N` instead failed, so I can start over from step one and do it from the canon block instead? \r\n\r\nBut I see your point too, just want to make sure we're not committing to an API that has undesirable quirks.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/485482700/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/485490825",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/19394#issuecomment-485490825",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/19394",
    "id": 485490825,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4NTQ5MDgyNQ==",
    "user": {
      "login": "charles-cooper",
      "id": 3867501,
      "node_id": "MDQ6VXNlcjM4Njc1MDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3867501?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/charles-cooper",
      "html_url": "https://github.com/charles-cooper",
      "followers_url": "https://api.github.com/users/charles-cooper/followers",
      "following_url": "https://api.github.com/users/charles-cooper/following{/other_user}",
      "gists_url": "https://api.github.com/users/charles-cooper/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/charles-cooper/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/charles-cooper/subscriptions",
      "organizations_url": "https://api.github.com/users/charles-cooper/orgs",
      "repos_url": "https://api.github.com/users/charles-cooper/repos",
      "events_url": "https://api.github.com/users/charles-cooper/events{/privacy}",
      "received_events_url": "https://api.github.com/users/charles-cooper/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-04-22T17:46:18Z",
    "updated_at": "2019-04-22T17:46:18Z",
    "author_association": "NONE",
    "body": "@holiman I think having the `requireCanonical` parameter covers both use cases. I suppose we could debate the tradeoffs of which behavior to default to all day, but for consistency I think the tiebreaker is to follow other RPCs which get block by hash. I believe the behavior is currently unspecified but in practice is to allow the block to be non-canonical (and I suppose the reasoning for that is that if the user asks for a specific block hash they really mean it!).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/485490825/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/541665202",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/19394#issuecomment-541665202",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/19394",
    "id": 541665202,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0MTY2NTIwMg==",
    "user": {
      "login": "holiman",
      "id": 142290,
      "node_id": "MDQ6VXNlcjE0MjI5MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/142290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/holiman",
      "html_url": "https://github.com/holiman",
      "followers_url": "https://api.github.com/users/holiman/followers",
      "following_url": "https://api.github.com/users/holiman/following{/other_user}",
      "gists_url": "https://api.github.com/users/holiman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/holiman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/holiman/subscriptions",
      "organizations_url": "https://api.github.com/users/holiman/orgs",
      "repos_url": "https://api.github.com/users/holiman/repos",
      "events_url": "https://api.github.com/users/holiman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/holiman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-14T13:04:17Z",
    "updated_at": "2019-10-14T13:04:17Z",
    "author_association": "MEMBER",
    "body": "We can close this now that #19491 is merged, I believe",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/541665202/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
