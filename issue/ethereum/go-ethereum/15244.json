{
  "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/15244",
  "repository_url": "https://api.github.com/repos/ethereum/go-ethereum",
  "labels_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/15244/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/15244/comments",
  "events_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/15244/events",
  "html_url": "https://github.com/ethereum/go-ethereum/issues/15244",
  "id": 262985293,
  "node_id": "MDU6SXNzdWUyNjI5ODUyOTM=",
  "number": 15244,
  "title": "[iOS] GethBigInt integer overflow does not throw an exception.",
  "user": {
    "login": "ronaldmannak",
    "id": 455476,
    "node_id": "MDQ6VXNlcjQ1NTQ3Ng==",
    "avatar_url": "https://avatars.githubusercontent.com/u/455476?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ronaldmannak",
    "html_url": "https://github.com/ronaldmannak",
    "followers_url": "https://api.github.com/users/ronaldmannak/followers",
    "following_url": "https://api.github.com/users/ronaldmannak/following{/other_user}",
    "gists_url": "https://api.github.com/users/ronaldmannak/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ronaldmannak/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ronaldmannak/subscriptions",
    "organizations_url": "https://api.github.com/users/ronaldmannak/orgs",
    "repos_url": "https://api.github.com/users/ronaldmannak/repos",
    "events_url": "https://api.github.com/users/ronaldmannak/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ronaldmannak/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 856638432,
      "node_id": "MDU6TGFiZWw4NTY2Mzg0MzI=",
      "url": "https://api.github.com/repos/ethereum/go-ethereum/labels/status:inactive",
      "name": "status:inactive",
      "color": "ffffff",
      "default": false,
      "description": null
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 5,
  "created_at": "2017-10-05T02:15:28Z",
  "updated_at": "2019-03-02T03:18:00Z",
  "closed_at": "2019-03-02T03:18:00Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "#### System information\r\n\r\nGeth version: `iGeth/v1.7.0-stable/darwin-arm64/go1.7.1`\r\nOS & Version: iOS\r\n\r\n#### Expected behaviour\r\n\r\nWhen fetching balances of addresses, getBalanceAt() returns a GethBigInt. I expect to receive the balance in WEI when invoking getInt64() on the GethBigInt instance. In case an integer overflow occurs, I expect getInt64() to either throw an exception of to return nil. \r\n\r\nAlternatively, I can imagine a custom integer class that's big enough to store large amounts in WEI, or the amounts being returned as a double in ETH or GWEI for example.\r\n\r\n#### Actual behaviour\r\n\r\nFor small wallets, the right amount will be returned. For larger amounts (like the 21.7 ETH in the example above), an integer overflow occurs and instead of 21734488100000000000 (WEI), the getInt64() method returns 3287744026290448384 (WEI) without throwing an exception or returning a nil, to indicate that an integer overflow occurred.\r\n\r\n#### Steps to reproduce the behaviour\r\n````\r\n// Create node configuration\r\nlet config = GethNewNodeConfig()!\r\nconfig.setEthereumNetworkID(4) // Doesn't matter, but best to set it to 4, Rinkeby\r\nconfig.setEthereumGenesis(GethRinkebyGenesis()) // get Rinkeby genesis block\r\n\r\n// Create node in Rinkeby directory so we can change networks on the fly if needed\r\nvar error: NSError?\r\nlet gethNode = GethNewNode(NSSearchPathForDirectoriesInDomains(.documentDirectory, .userDomainMask, true).first! + \"/\" + \"Rinkeby\", config, &error)\r\n\r\n// Start node\r\ntry! gethNode.start()\r\ngethClient = try! gethNode.getEthereumClient()\r\n\r\n// Find balance of testnet ETH address with 21.7344881 ETH.\r\nvar error: NSError?\r\nlet address = GethNewAddressFromHex(\"0xb81Df5747f39bfD5ce9410F1Be9B02851B0cbd6E\", &error)\r\nlet balance = try! gethClient.getBalanceAt(GethNewContext(), account: address!, number: 0)\r\nprint(\"Balance: \\(balance.getInt64())\") // \"Balance: 3287744026290448384\" Expected: 21734488100000000000 (Wei)\r\n````\r\n",
  "closed_by": {
    "login": "stale[bot]",
    "id": 26384082,
    "node_id": "MDM6Qm90MjYzODQwODI=",
    "avatar_url": "https://avatars.githubusercontent.com/in/1724?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/stale%5Bbot%5D",
    "html_url": "https://github.com/apps/stale",
    "followers_url": "https://api.github.com/users/stale%5Bbot%5D/followers",
    "following_url": "https://api.github.com/users/stale%5Bbot%5D/following{/other_user}",
    "gists_url": "https://api.github.com/users/stale%5Bbot%5D/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/stale%5Bbot%5D/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/stale%5Bbot%5D/subscriptions",
    "organizations_url": "https://api.github.com/users/stale%5Bbot%5D/orgs",
    "repos_url": "https://api.github.com/users/stale%5Bbot%5D/repos",
    "events_url": "https://api.github.com/users/stale%5Bbot%5D/events{/privacy}",
    "received_events_url": "https://api.github.com/users/stale%5Bbot%5D/received_events",
    "type": "Bot",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/15244/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/15244/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/334400436",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/15244#issuecomment-334400436",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/15244",
    "id": 334400436,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNDQwMDQzNg==",
    "user": {
      "login": "karalabe",
      "id": 129561,
      "node_id": "MDQ6VXNlcjEyOTU2MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/129561?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/karalabe",
      "html_url": "https://github.com/karalabe",
      "followers_url": "https://api.github.com/users/karalabe/followers",
      "following_url": "https://api.github.com/users/karalabe/following{/other_user}",
      "gists_url": "https://api.github.com/users/karalabe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/karalabe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/karalabe/subscriptions",
      "organizations_url": "https://api.github.com/users/karalabe/orgs",
      "repos_url": "https://api.github.com/users/karalabe/repos",
      "events_url": "https://api.github.com/users/karalabe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/karalabe/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-05T08:46:48Z",
    "updated_at": "2017-10-05T08:46:48Z",
    "author_association": "MEMBER",
    "body": "Yep, you are correct. The API was built analogous to Go's [`big.Int.Int64`](https://golang.org/pkg/math/big/#Int.Int64), however I missed adding the [`big.Int.IsInt64`](https://golang.org/pkg/math/big/#Int.IsInt64) counterpart method.\r\n\r\nThat being said, perhaps it's cleaner to return an error (exception) from `getInt64` rather then adding another method here. Will think about this a bit, thanks for the report!",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/334400436/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/334521538",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/15244#issuecomment-334521538",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/15244",
    "id": 334521538,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNDUyMTUzOA==",
    "user": {
      "login": "ronaldmannak",
      "id": 455476,
      "node_id": "MDQ6VXNlcjQ1NTQ3Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/455476?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ronaldmannak",
      "html_url": "https://github.com/ronaldmannak",
      "followers_url": "https://api.github.com/users/ronaldmannak/followers",
      "following_url": "https://api.github.com/users/ronaldmannak/following{/other_user}",
      "gists_url": "https://api.github.com/users/ronaldmannak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ronaldmannak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ronaldmannak/subscriptions",
      "organizations_url": "https://api.github.com/users/ronaldmannak/orgs",
      "repos_url": "https://api.github.com/users/ronaldmannak/repos",
      "events_url": "https://api.github.com/users/ronaldmannak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ronaldmannak/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-05T16:36:35Z",
    "updated_at": "2017-10-05T16:36:35Z",
    "author_association": "NONE",
    "body": "Thanks PÃ©ter. Do I understand correctly that the original Go version also returns an Int64? The very existence of the getInt64() method is slightly confusing. The correct way of using GethBigInt (at least for Swift/ObjC) would be to never use getInt64(), and instead use the string() method. \r\n\r\nThe returned string can then either be manipulated directly (that wouldn't be my preferred way) or convert the string into a custom Uint256 or BigInt type and generate. \r\n\r\nIs there any reason the getInt64() method should be kept in GethBigInt? Even if the method would throw an exception, integer overflows will happen regularly and only those with really good unit tests would catch it. It might make sense to simply remove the method or at least make it internal if it's needed internally. (Just a thought)\r\n\r\nRelevant Twitter discussion [here](https://twitter.com/chriseidhof/status/915956523033088000)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/334521538/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/334900073",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/15244#issuecomment-334900073",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/15244",
    "id": 334900073,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNDkwMDA3Mw==",
    "user": {
      "login": "ronaldmannak",
      "id": 455476,
      "node_id": "MDQ6VXNlcjQ1NTQ3Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/455476?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ronaldmannak",
      "html_url": "https://github.com/ronaldmannak",
      "followers_url": "https://api.github.com/users/ronaldmannak/followers",
      "following_url": "https://api.github.com/users/ronaldmannak/following{/other_user}",
      "gists_url": "https://api.github.com/users/ronaldmannak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ronaldmannak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ronaldmannak/subscriptions",
      "organizations_url": "https://api.github.com/users/ronaldmannak/orgs",
      "repos_url": "https://api.github.com/users/ronaldmannak/repos",
      "events_url": "https://api.github.com/users/ronaldmannak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ronaldmannak/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-07T01:01:47Z",
    "updated_at": "2017-10-07T01:01:47Z",
    "author_association": "NONE",
    "body": "Related, GethNewBigInt also takes an Int64 as parameter.\r\n\r\n````\r\n/**\r\n * NewBigInt allocates and returns a new BigInt set to x.\r\n */\r\nFOUNDATION_EXPORT GethBigInt* GethNewBigInt(int64_t x);\r\n````\r\n\r\nWhich, again, is unsafe. The only correct way to set a GethBigInt (using [BigInt](https://github.com/attaswift/BigInt)) that I'm aware of is to set GethBigInt to 0 initially and then set the stringValue:\r\n\r\n````\r\nlet reallyBigNumber = \"21734488100000000000\"\r\nguard let bigInt = BigInt(reallyBigNumber), let gethBigInt = GethNewBigInt(0) else { return }\r\n// bigInt = 21734488100000000000, gethBitInt = 0\r\ngethBigInt.setString(bigInt.description, base: 10)\r\n// bigInt = 21734488100000000000, gethBitInt = 21734488100000000000\r\n````\r\n\r\nIt works, but it cumbersome. To prevent people from using GethNewBigInt with an Int64, it would make sense to either make the method private, or change it in:\r\n\r\n````\r\nFOUNDATION_EXPORT GethBigInt* GethNewBigInt(NSString *x);\r\n````",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/334900073/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/357902981",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/15244#issuecomment-357902981",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/15244",
    "id": 357902981,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NzkwMjk4MQ==",
    "user": {
      "login": "svdo",
      "id": 4028554,
      "node_id": "MDQ6VXNlcjQwMjg1NTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4028554?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/svdo",
      "html_url": "https://github.com/svdo",
      "followers_url": "https://api.github.com/users/svdo/followers",
      "following_url": "https://api.github.com/users/svdo/following{/other_user}",
      "gists_url": "https://api.github.com/users/svdo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/svdo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/svdo/subscriptions",
      "organizations_url": "https://api.github.com/users/svdo/orgs",
      "repos_url": "https://api.github.com/users/svdo/repos",
      "events_url": "https://api.github.com/users/svdo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/svdo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-16T09:32:37Z",
    "updated_at": "2018-01-16T09:32:37Z",
    "author_association": "NONE",
    "body": "On another related note, shouldn't it also be possible to pass it a hex string? When I try this:\r\n\r\n```swift\r\n            let reallyBigNumber = \"0x21734488100000000000\"\r\n            let gethBigInt = GethNewBigInt(0)!\r\n            gethBigInt.setString(reallyBigNumber, base: 16)\r\n```\r\n\r\nAfter running this, `gethBigInt.string()` returns `\"0\"`...\r\n\r\n(Using Geth iOS framework 1.7.3 through Cocoapods)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/357902981/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/455743627",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/15244#issuecomment-455743627",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/15244",
    "id": 455743627,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NTc0MzYyNw==",
    "user": {
      "login": "stale[bot]",
      "id": 26384082,
      "node_id": "MDM6Qm90MjYzODQwODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/1724?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stale%5Bbot%5D",
      "html_url": "https://github.com/apps/stale",
      "followers_url": "https://api.github.com/users/stale%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/stale%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/stale%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stale%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stale%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/stale%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/stale%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/stale%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stale%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2019-01-19T03:00:08Z",
    "updated_at": "2019-01-19T03:00:08Z",
    "author_association": "NONE",
    "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/455743627/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
