{
  "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/23575",
  "repository_url": "https://api.github.com/repos/ethereum/go-ethereum",
  "labels_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/23575/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/23575/comments",
  "events_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/23575/events",
  "html_url": "https://github.com/ethereum/go-ethereum/issues/23575",
  "id": 995945626,
  "node_id": "I_kwDOAOvK9847XOya",
  "number": 23575,
  "title": "[JSON RPC] Inconsistency between WS and IPC",
  "user": {
    "login": "dceleda",
    "id": 26231116,
    "node_id": "MDQ6VXNlcjI2MjMxMTE2",
    "avatar_url": "https://avatars.githubusercontent.com/u/26231116?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/dceleda",
    "html_url": "https://github.com/dceleda",
    "followers_url": "https://api.github.com/users/dceleda/followers",
    "following_url": "https://api.github.com/users/dceleda/following{/other_user}",
    "gists_url": "https://api.github.com/users/dceleda/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/dceleda/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/dceleda/subscriptions",
    "organizations_url": "https://api.github.com/users/dceleda/orgs",
    "repos_url": "https://api.github.com/users/dceleda/repos",
    "events_url": "https://api.github.com/users/dceleda/events{/privacy}",
    "received_events_url": "https://api.github.com/users/dceleda/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 268304226,
      "node_id": "MDU6TGFiZWwyNjgzMDQyMjY=",
      "url": "https://api.github.com/repos/ethereum/go-ethereum/labels/type:docs",
      "name": "type:docs",
      "color": "fef2c0",
      "default": false,
      "description": null
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": {
    "login": "fjl",
    "id": 6915,
    "node_id": "MDQ6VXNlcjY5MTU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6915?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/fjl",
    "html_url": "https://github.com/fjl",
    "followers_url": "https://api.github.com/users/fjl/followers",
    "following_url": "https://api.github.com/users/fjl/following{/other_user}",
    "gists_url": "https://api.github.com/users/fjl/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/fjl/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/fjl/subscriptions",
    "organizations_url": "https://api.github.com/users/fjl/orgs",
    "repos_url": "https://api.github.com/users/fjl/repos",
    "events_url": "https://api.github.com/users/fjl/events{/privacy}",
    "received_events_url": "https://api.github.com/users/fjl/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "fjl",
      "id": 6915,
      "node_id": "MDQ6VXNlcjY5MTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6915?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjl",
      "html_url": "https://github.com/fjl",
      "followers_url": "https://api.github.com/users/fjl/followers",
      "following_url": "https://api.github.com/users/fjl/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjl/subscriptions",
      "organizations_url": "https://api.github.com/users/fjl/orgs",
      "repos_url": "https://api.github.com/users/fjl/repos",
      "events_url": "https://api.github.com/users/fjl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjl/received_events",
      "type": "User",
      "site_admin": false
    },
    {
      "login": "s1na",
      "id": 1591639,
      "node_id": "MDQ6VXNlcjE1OTE2Mzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1591639?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/s1na",
      "html_url": "https://github.com/s1na",
      "followers_url": "https://api.github.com/users/s1na/followers",
      "following_url": "https://api.github.com/users/s1na/following{/other_user}",
      "gists_url": "https://api.github.com/users/s1na/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/s1na/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/s1na/subscriptions",
      "organizations_url": "https://api.github.com/users/s1na/orgs",
      "repos_url": "https://api.github.com/users/s1na/repos",
      "events_url": "https://api.github.com/users/s1na/events{/privacy}",
      "received_events_url": "https://api.github.com/users/s1na/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2021-09-14T12:13:07Z",
  "updated_at": "2021-10-07T12:31:28Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "I've tried the same scenario using Web Sockets and IPC and I get different results.\r\n\r\n- Send multiple JSON requests in one message. For example: \r\n{\"id\": 1, \"method\": \"eth_subscribe\", \"params\": [\"newHeads\"]}{\"id\": 1, \"method\": \"eth_subscribe\", \"params\": [\"newPendingTransactions\"]}\r\n- WS ignores the second request. We can even send smth like this: \r\n`{\"id\": 1, \"method\": \"eth_subscribe\", \"params\": [\"newHeads\"]}{incorrect request} `\r\nand only the first one will be handled. No error returned.\r\n- IPC handles both requests and returns two responses. If the second request is incorrect an error will be returned (no other response).\r\n`{\"jsonrpc\":\"2.0\",\"id\":null,\"error\":{\"code\":-32700,\"message\":\"invalid character 'i' looking for beginning of object key string\"}}`\r\n\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/23575/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/23575/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/936127713",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/23575#issuecomment-936127713",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/23575",
    "id": 936127713,
    "node_id": "IC_kwDOAOvK9843zCzh",
    "user": {
      "login": "s1na",
      "id": 1591639,
      "node_id": "MDQ6VXNlcjE1OTE2Mzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1591639?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/s1na",
      "html_url": "https://github.com/s1na",
      "followers_url": "https://api.github.com/users/s1na/followers",
      "following_url": "https://api.github.com/users/s1na/following{/other_user}",
      "gists_url": "https://api.github.com/users/s1na/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/s1na/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/s1na/subscriptions",
      "organizations_url": "https://api.github.com/users/s1na/orgs",
      "repos_url": "https://api.github.com/users/s1na/repos",
      "events_url": "https://api.github.com/users/s1na/events{/privacy}",
      "received_events_url": "https://api.github.com/users/s1na/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-06T12:19:08Z",
    "updated_at": "2021-10-06T12:19:08Z",
    "author_association": "MEMBER",
    "body": "Here's a script for re-producing the issue:\r\n\r\n```js\r\nconst WebSocket = require('ws')\r\n\r\nasync function main() {\r\n    const ws = new WebSocket('ws://127.0.0.1:8546', { maxPayload: 1000 * 1024 * 1024 })\r\n    ws.on('message', (ev) => {\r\n        console.log(ev)\r\n    })\r\n    ws.on('error', (err) => {\r\n        console.log('ws.error', err)\r\n    })\r\n\r\n    await new Promise(resolve => ws.once('open', resolve));\r\n\r\n    const payload = JSON.stringify({\r\n        method: 'eth_blockNumber',\r\n        params: [],\r\n        id: 63,\r\n        jsonrpc: '2.0',\r\n    })\r\n    ws.send(`${payload}{incorrect request}`)\r\n}\r\nmain().then().catch((err) => { throw err })\r\n```\r\n\r\nThe response I get is:\r\n\r\n```\r\n{\"jsonrpc\":\"2.0\",\"id\":63,\"result\":\"0x52a4e7\"}\r\n\r\n```\r\n\r\nI.e. the second request is completely ignored",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/936127713/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/936266048",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/23575#issuecomment-936266048",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/23575",
    "id": 936266048,
    "node_id": "IC_kwDOAOvK9843zklA",
    "user": {
      "login": "fjl",
      "id": 6915,
      "node_id": "MDQ6VXNlcjY5MTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6915?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjl",
      "html_url": "https://github.com/fjl",
      "followers_url": "https://api.github.com/users/fjl/followers",
      "following_url": "https://api.github.com/users/fjl/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjl/subscriptions",
      "organizations_url": "https://api.github.com/users/fjl/orgs",
      "repos_url": "https://api.github.com/users/fjl/repos",
      "events_url": "https://api.github.com/users/fjl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjl/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-06T13:46:12Z",
    "updated_at": "2021-10-06T13:46:12Z",
    "author_association": "MEMBER",
    "body": "Yeah, so this is basically the case we discussed: the RPC server does not read beyond the first object in a WebSocket data frame.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/936266048/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/936353519",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/23575#issuecomment-936353519",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/23575",
    "id": 936353519,
    "node_id": "IC_kwDOAOvK9843z57v",
    "user": {
      "login": "s1na",
      "id": 1591639,
      "node_id": "MDQ6VXNlcjE1OTE2Mzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1591639?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/s1na",
      "html_url": "https://github.com/s1na",
      "followers_url": "https://api.github.com/users/s1na/followers",
      "following_url": "https://api.github.com/users/s1na/following{/other_user}",
      "gists_url": "https://api.github.com/users/s1na/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/s1na/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/s1na/subscriptions",
      "organizations_url": "https://api.github.com/users/s1na/orgs",
      "repos_url": "https://api.github.com/users/s1na/repos",
      "events_url": "https://api.github.com/users/s1na/events{/privacy}",
      "received_events_url": "https://api.github.com/users/s1na/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-06T14:33:05Z",
    "updated_at": "2021-10-06T14:33:05Z",
    "author_association": "MEMBER",
    "body": "Yeah exactly and that happens here:\r\n\r\nhttps://github.com/ethereum/go-ethereum/blob/4e599ee469223ccc452f40f36c85bac3bea9c16b/rpc/json.go#L208-L209\r\n\r\nThing is `{message}{message2}` is not valid JSON and the decoder silently ignores the second part. When I feed in a valid JSON message `[{\"method: ...}, {\"method\": ...}]` I get a correct response for both requests.\r\n\r\n\r\nI personally think how it is right now makes sense, but I could modify the decoder to parse the remainding bytes after decoding the first object. @fjl wdyt?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/936353519/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/937746712",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/23575#issuecomment-937746712",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/23575",
    "id": 937746712,
    "node_id": "IC_kwDOAOvK98435OEY",
    "user": {
      "login": "fjl",
      "id": 6915,
      "node_id": "MDQ6VXNlcjY5MTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6915?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjl",
      "html_url": "https://github.com/fjl",
      "followers_url": "https://api.github.com/users/fjl/followers",
      "following_url": "https://api.github.com/users/fjl/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjl/subscriptions",
      "organizations_url": "https://api.github.com/users/fjl/orgs",
      "repos_url": "https://api.github.com/users/fjl/repos",
      "events_url": "https://api.github.com/users/fjl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjl/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-07T12:31:19Z",
    "updated_at": "2021-10-07T12:31:19Z",
    "author_association": "MEMBER",
    "body": "This is specific to WebSocket because we use a custom codec there. To read a message from WebSocket, we call [ReadJSON](https://pkg.go.dev/github.com/gorilla/websocket#Conn.ReadJSON) on the connection.\r\n\r\nI don't think there is a good way to fix this with the API provided by package websocket. Also, this situation is very uncommon, this will never happen with a well-behaved client library. It would be nice to detect this case and close the connection with an error, but unsure how to implement that.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/937746712/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
