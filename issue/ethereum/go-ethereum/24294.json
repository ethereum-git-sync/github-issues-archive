{
  "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/24294",
  "repository_url": "https://api.github.com/repos/ethereum/go-ethereum",
  "labels_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/24294/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/24294/comments",
  "events_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/24294/events",
  "html_url": "https://github.com/ethereum/go-ethereum/issues/24294",
  "id": 1114278674,
  "node_id": "I_kwDOAOvK985CaosS",
  "number": 24294,
  "title": "Request for Read-Only Geth",
  "user": {
    "login": "hrthaowang",
    "id": 98331735,
    "node_id": "U_kgDOBdxsVw",
    "avatar_url": "https://avatars.githubusercontent.com/u/98331735?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hrthaowang",
    "html_url": "https://github.com/hrthaowang",
    "followers_url": "https://api.github.com/users/hrthaowang/followers",
    "following_url": "https://api.github.com/users/hrthaowang/following{/other_user}",
    "gists_url": "https://api.github.com/users/hrthaowang/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hrthaowang/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hrthaowang/subscriptions",
    "organizations_url": "https://api.github.com/users/hrthaowang/orgs",
    "repos_url": "https://api.github.com/users/hrthaowang/repos",
    "events_url": "https://api.github.com/users/hrthaowang/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hrthaowang/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 72233652,
      "node_id": "MDU6TGFiZWw3MjIzMzY1Mg==",
      "url": "https://api.github.com/repos/ethereum/go-ethereum/labels/type:feature",
      "name": "type:feature",
      "color": "84b6eb",
      "default": false,
      "description": null
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2022-01-25T19:27:23Z",
  "updated_at": "2022-06-14T11:05:06Z",
  "closed_at": "2022-01-31T08:48:57Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "### Rationale\r\n\r\nWe want to request an option for running geth in a read-only mode that supports fetching data from the ethereum by reading the raw level db file from the file system. This is useful for scaling the reads of the archived data.\r\n\r\n![output-onlinepngtools](https://user-images.githubusercontent.com/98331735/151046895-8a21dc6b-de2d-4939-8279-9196f5d1926b.png)\r\n\r\nCurrently, if a user wants to read data from the Ethereum blockchain, he has to connect to the rpc endpoint (provided by alchemy, infura, or self-hosted nodes) and make a request. \r\n\r\nThis does not scale well because of the bottleneck of the server end, because the server needs to handle all kinds of requests from clients. To support the increasing volume of reading, we need to have more geth nodes.\r\n![arch2](https://user-images.githubusercontent.com/98331735/151045536-c284dfc1-f315-4aaf-b0de-54cc2072ca65.png)\r\n\r\n![test](https://user-images.githubusercontent.com/98331735/151045563-eb7f5649-a73d-4e3f-ac74-ea53b495183e.png)\r\n\r\nHowever, if we could create a read-only abstraction that could access the level db (on some file systems even remote) storing the blockchain data directly, then the client would not need to interact with the server to read data. \r\n\r\nIf we want to increase the reading speed, we could intuitively add more clients and make all of the clients reading from the same copy of the database data.\r\nProviding the read-only geth as an option makes the scaling of reading from Ethereum more intuitive and easier.\r\n\r\n![test2](https://user-images.githubusercontent.com/98331735/151045605-d0d48da0-9936-4acb-8cad-b9c1c897b06c.png)\r\n\r\n\r\n### Implementation\r\n\r\nWe could add a boolean variable `readOnly` for the `node.go` and `backend.go`. If that variable is set to be true, geth would remove local files locks and network connections (HTTP Endpoint, P2P, etc.). Therefore, we could have multiple clients reading from the same dataset concurrently. \r\n\r\nHere is a simple and unclean MVP of this functionality. https://github.com/hudson-trading/go-ethereum/pull/1. We understand that there is a lot of copy-pasted code, and we will reorganize the code later. We would like to discuss the possibility and option of developing read-only geth and get to know geth community's thoughts on this. \r\n\r\nThank you!",
  "closed_by": {
    "login": "karalabe",
    "id": 129561,
    "node_id": "MDQ6VXNlcjEyOTU2MQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/129561?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/karalabe",
    "html_url": "https://github.com/karalabe",
    "followers_url": "https://api.github.com/users/karalabe/followers",
    "following_url": "https://api.github.com/users/karalabe/following{/other_user}",
    "gists_url": "https://api.github.com/users/karalabe/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/karalabe/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/karalabe/subscriptions",
    "organizations_url": "https://api.github.com/users/karalabe/orgs",
    "repos_url": "https://api.github.com/users/karalabe/repos",
    "events_url": "https://api.github.com/users/karalabe/events{/privacy}",
    "received_events_url": "https://api.github.com/users/karalabe/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/24294/reactions",
    "total_count": 2,
    "+1": 2,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/24294/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1023025113",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/24294#issuecomment-1023025113",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/24294",
    "id": 1023025113,
    "node_id": "IC_kwDOAOvK9848-h_Z",
    "user": {
      "login": "ligi",
      "id": 111600,
      "node_id": "MDQ6VXNlcjExMTYwMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/111600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ligi",
      "html_url": "https://github.com/ligi",
      "followers_url": "https://api.github.com/users/ligi/followers",
      "following_url": "https://api.github.com/users/ligi/following{/other_user}",
      "gists_url": "https://api.github.com/users/ligi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ligi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ligi/subscriptions",
      "organizations_url": "https://api.github.com/users/ligi/orgs",
      "repos_url": "https://api.github.com/users/ligi/repos",
      "events_url": "https://api.github.com/users/ligi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ligi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-27T09:45:25Z",
    "updated_at": "2022-01-27T09:45:25Z",
    "author_association": "MEMBER",
    "body": "This also came up before - but it is great that you work on a MVP and actually experiment on it. Could be a nice feature for some use-cases. Is levelDB handling multiple clients on the same DB well?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1023025113/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1025503313",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/24294#issuecomment-1025503313",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/24294",
    "id": 1025503313,
    "node_id": "IC_kwDOAOvK9849H_BR",
    "user": {
      "login": "karalabe",
      "id": 129561,
      "node_id": "MDQ6VXNlcjEyOTU2MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/129561?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/karalabe",
      "html_url": "https://github.com/karalabe",
      "followers_url": "https://api.github.com/users/karalabe/followers",
      "following_url": "https://api.github.com/users/karalabe/following{/other_user}",
      "gists_url": "https://api.github.com/users/karalabe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/karalabe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/karalabe/subscriptions",
      "organizations_url": "https://api.github.com/users/karalabe/orgs",
      "repos_url": "https://api.github.com/users/karalabe/repos",
      "events_url": "https://api.github.com/users/karalabe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/karalabe/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-31T08:48:57Z",
    "updated_at": "2022-01-31T08:48:57Z",
    "author_association": "MEMBER",
    "body": "Leveldb does not support reading with multiple concurrent processes. Also a lot of the data a Geth node has is cached in memory only during runtime. The only way to get a consistent data view is to query the node owning the database, which would make that node be the same bottleneck as before.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1025503313/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1025506238",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/24294#issuecomment-1025506238",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/24294",
    "id": 1025506238,
    "node_id": "IC_kwDOAOvK9849H_u-",
    "user": {
      "login": "karalabe",
      "id": 129561,
      "node_id": "MDQ6VXNlcjEyOTU2MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/129561?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/karalabe",
      "html_url": "https://github.com/karalabe",
      "followers_url": "https://api.github.com/users/karalabe/followers",
      "following_url": "https://api.github.com/users/karalabe/following{/other_user}",
      "gists_url": "https://api.github.com/users/karalabe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/karalabe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/karalabe/subscriptions",
      "organizations_url": "https://api.github.com/users/karalabe/orgs",
      "repos_url": "https://api.github.com/users/karalabe/repos",
      "events_url": "https://api.github.com/users/karalabe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/karalabe/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-31T08:53:18Z",
    "updated_at": "2022-01-31T08:53:18Z",
    "author_association": "MEMBER",
    "body": "I'm guessing you could make some sophisticated infrastructure to have multiple Geth nodes serve an intermediate caching layer that might store and serve some data without reaching into Geth. That's how Infura is doing it, but that seems something very different from what Geth's purpose is.\r\n\r\nEven then, I think it would be mostly useful for archive node data; but if you use a live node that constantly mutates the chain and the state, it's quite hard to meaningfully sync the status of different Geth nodes across a single master writer.\r\n\r\nI.e. it's not really in the scope of Geth to work on horizontal read-scalability.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1025506238/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1029296334",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/24294#issuecomment-1029296334",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/24294",
    "id": 1029296334,
    "node_id": "IC_kwDOAOvK9849WdDO",
    "user": {
      "login": "danielmh0",
      "id": 55253812,
      "node_id": "MDQ6VXNlcjU1MjUzODEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/55253812?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/danielmh0",
      "html_url": "https://github.com/danielmh0",
      "followers_url": "https://api.github.com/users/danielmh0/followers",
      "following_url": "https://api.github.com/users/danielmh0/following{/other_user}",
      "gists_url": "https://api.github.com/users/danielmh0/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/danielmh0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/danielmh0/subscriptions",
      "organizations_url": "https://api.github.com/users/danielmh0/orgs",
      "repos_url": "https://api.github.com/users/danielmh0/repos",
      "events_url": "https://api.github.com/users/danielmh0/events{/privacy}",
      "received_events_url": "https://api.github.com/users/danielmh0/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-03T18:50:47Z",
    "updated_at": "2022-02-03T18:50:47Z",
    "author_association": "NONE",
    "body": "@karalabe Leveldb does support multiple readers if there are no writers. We have a fully working prototype here, and it's proven very useful so far: https://github.com/hudson-trading/go-ethereum/pull/2/files (not yet fully cleaned/code-reviewed).\r\n\r\nHow we want to use this in practice: have a live archival node writing to local flash; shut it down every so often; rsync node state to a read-only networked file system (pretty cheap thanks to mostly unchanging sstables). Then you can have massively parallel reads on archival state, without implementing the EVM or building a fancy caching layer. Geth-as-a-library executes calls using the read-only network file system.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1029296334/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
