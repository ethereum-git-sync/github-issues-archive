{
  "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/28244",
  "repository_url": "https://api.github.com/repos/ethereum/go-ethereum",
  "labels_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/28244/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/28244/comments",
  "events_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/28244/events",
  "html_url": "https://github.com/ethereum/go-ethereum/issues/28244",
  "id": 1924278490,
  "node_id": "I_kwDOAOvK985ysija",
  "number": 28244,
  "title": "Go 1.21 slog plans (standard-lib Structured Logger)",
  "user": {
    "login": "protolambda",
    "id": 19571989,
    "node_id": "MDQ6VXNlcjE5NTcxOTg5",
    "avatar_url": "https://avatars.githubusercontent.com/u/19571989?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/protolambda",
    "html_url": "https://github.com/protolambda",
    "followers_url": "https://api.github.com/users/protolambda/followers",
    "following_url": "https://api.github.com/users/protolambda/following{/other_user}",
    "gists_url": "https://api.github.com/users/protolambda/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/protolambda/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/protolambda/subscriptions",
    "organizations_url": "https://api.github.com/users/protolambda/orgs",
    "repos_url": "https://api.github.com/users/protolambda/repos",
    "events_url": "https://api.github.com/users/protolambda/events{/privacy}",
    "received_events_url": "https://api.github.com/users/protolambda/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2023-10-03T14:30:05Z",
  "updated_at": "2023-12-05T12:44:26Z",
  "closed_at": "2023-12-05T12:44:25Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "Go introduces `log/slog` in v1.21, a structured logger very similar to the go-ethereum `log` package.\r\nRather than ignoring the standard-lib, I think it would be nice to create compatibility, and interop more easily with any other Go projects that use the same `slog` interfaces.\r\n\r\n## Slog introduction\r\n\r\nSee https://go.dev/blog/slog (22 Aug 2023) for context from the Go maintainers.\r\n\r\nQuick summary of `slog` functionality to compare it to Geth:\r\n```go\r\npackage ethereum\r\n\r\nimport (\r\n\t\"context\"\r\n\t\"errors\"\r\n\t\"io\"\r\n\t\"log/slog\"\r\n\t\"os\"\r\n\t\"testing\"\r\n\t\"testing/slogtest\"\r\n)\r\n\r\nfunc TestSLog(t *testing.T) {\r\n\t// slog.Level - int level, *with room between levels*.\r\n\t// Can add \"notice\" (google, nimbus) or \"crit\" and \"trace\" (geth today) levels\r\n\r\n\t// slog.Attr - simple Key-Value struct\r\n\r\n\t// slog.Handler interface:\r\n\t// Enabled(context.Context, Level) bool    - check if lvl is enabled\r\n\t// Handle(context.Context, Record) error   - process record\r\n\t// WithAttrs(attrs []Attr) Handler         - extend with context attributes\r\n\t// WithGroup(name string) Handler          - extend and group next attributes\r\n\r\n\t// there are a two default handlers:\r\n\t_ = slog.NewTextHandler(io.Discard, &slog.HandlerOptions{\r\n\t\tAddSource:   false, // with source-code position\r\n\t\tLevel:       nil,   // log-level filterer (that can change its level dynamically)\r\n\t\tReplaceAttr: nil,   // func to replace context attributes (e.g. hide secrets from logs)\r\n\t})\r\n\th := slog.NewJSONHandler(os.Stdout, &slog.HandlerOptions{})\r\n\r\n\t// the handler processes records;\r\n\t// slog.Record - like log.Record\r\n\r\n\t//\r\n\tlogger := slog.New(h)\r\n\tlogger.Handler() // can retrieve the handler\r\n\t// simple logging:\r\n\tlogger.Warn(\"fire\", \"err\", errors.New(\"oh no\"))\r\n\tlogger.Warn(\"hello\", \"a\", 123)\r\n\tlogger.Info(\"world\", \"b\", \"foo\")\r\n\tlogger.Debug(\"test\", \"a\", \"A\", \"B\", \"b\")\r\n\t// with context:\r\n\t// (to provide context values for handler to add to record, not necessarily to time out, no error returned)\r\n\tctx := context.Background()\r\n\tlogger.WarnContext(ctx, \"fire\", \"err\", errors.New(\"oh no\"))\r\n\tlogger.DebugContext(ctx, \"hello\", \"a\", 123)\r\n\tlogger.InfoContext(ctx, \"world\", \"b\", \"foo\")\r\n\tlogger.WarnContext(ctx, \"test\", \"a\", \"A\", \"B\", \"b\")\r\n\t// can log custom levels like: (there's room between each standard log level for exactly this)\r\n\tlogger.Log(ctx, slog.LevelDebug+1, \"custom trace\", \"attribute-context\", \"example\")\r\n\r\n\t// can check if a log level is enabled\r\n\tlogger.Enabled(context.Background(), slog.LevelDebug)\r\n\t// Explicit attribute typing and K/V pairing, for efficiency\r\n\tlogger.LogAttrs(ctx, slog.LevelDebug+1, \"hello\", slog.Attr{Key: \"foobar\", Value: slog.Int64Value(1234)})\r\n\tlogger.With(\"outside\", 123).WithGroup(\"inside\").With(\"inner-attribute\", \"42\").Info(\"group test\")\r\n\r\n\t// global logger logs to Default(), similar to geth log.Root()\r\n\t// But it would be better not to use this as much as possible, for testing readability.\r\n\tslog.Log(context.Background(), slog.LevelDebug, \"hello world\")\r\n\r\n\t{\r\n\t\t// slogtest is a handler-implementation tester, returning the joined error,\r\n\t\t// not a test-logger like you may expect\r\n\t\th := slog.NewJSONHandler(io.Discard, nil)\r\n\t\terr := slogtest.TestHandler(h, func() []map[string]any {\r\n\t\t\treturn nil // return expected structured log (would need to parse from the now discarded data)\r\n\t\t})\r\n\t\tif err != nil { // expected, test is not complete\r\n\t\t\tt.Logf(\"slogtest error: %v\", err)\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\n## `slog` Support\r\n\r\nTo support `slog` I would suggest to:\r\n- Deprecate geth `SetHandler(h)` on `log.Logger`;\r\n  completely swapping the handler dynamically is not necessary, and not supported by `slog`.\r\n- Implement the Geth `log.Logger` interface with a new `slog.Logger` wrapper,\r\n  to pass an `slog.Logger` into any existing Geth code.\r\n- Above wrapper can be compatible with both `log.Logger` and `slog.Logger` interfaces,\r\n  so Geth can pass its logger into dependencies that do leveled logging.\r\n- `slog.Handler` interface implemented by wrapper around `log.Handler`,\r\n  to direct any slog records to existing geth log handlers. (since Geth has many log handlers that we probably want to keep supporting)\r\n- Add a `SlogLevel()` method to Geth `log.Lvl` type, to translate it easily.\r\n- Define `slog.Level` \"crit\" and \"trace\" constant ints.\r\n\r\n## Additional logging improvements\r\n\r\nHappy to split these up in different issues, but if we're making some changes to logging then I think these will be relatively low lift to support as well:\r\n\r\n### Avoid global logger\r\n\r\n- When writing integration tests, adding context attributes to a logger is very valuable.\r\n  E.g. distinguishing node A and node B in a test. This does not work with global logging.\r\n- When running many tests in parallel,\r\n  the test-logger ensures the different log-data is not scrambled as much across tests,\r\n  like what would happen with std-out.\r\n- Changing the global logger to a test-logger in a test is a no-no,\r\n  as a test fails if a test-logger is written to after test-completion.\r\n\r\n### Geth testlog improvements\r\n\r\n- Expose `testlog` as public-facing package: everyone who builds on top of Geth likes to test with this logger too!\r\n  We currently maintain a copy (with a copy of the license) in its own exported package here:\r\n  https://github.com/ethereum-optimism/optimism/tree/develop/op-service/testlog\r\n- Minor testlog improvements: we added dynamic padding to the start, to handle the varying source-file length, to align more of the log messages for a more readable output.\r\n- Make testlog implement the `slog.Handler`",
  "closed_by": {
    "login": "karalabe",
    "id": 129561,
    "node_id": "MDQ6VXNlcjEyOTU2MQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/129561?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/karalabe",
    "html_url": "https://github.com/karalabe",
    "followers_url": "https://api.github.com/users/karalabe/followers",
    "following_url": "https://api.github.com/users/karalabe/following{/other_user}",
    "gists_url": "https://api.github.com/users/karalabe/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/karalabe/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/karalabe/subscriptions",
    "organizations_url": "https://api.github.com/users/karalabe/orgs",
    "repos_url": "https://api.github.com/users/karalabe/repos",
    "events_url": "https://api.github.com/users/karalabe/events{/privacy}",
    "received_events_url": "https://api.github.com/users/karalabe/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/28244/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/28244/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1745246176",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/28244#issuecomment-1745246176",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/28244",
    "id": 1745246176,
    "node_id": "IC_kwDOAOvK985oBlfg",
    "user": {
      "login": "holiman",
      "id": 142290,
      "node_id": "MDQ6VXNlcjE0MjI5MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/142290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/holiman",
      "html_url": "https://github.com/holiman",
      "followers_url": "https://api.github.com/users/holiman/followers",
      "following_url": "https://api.github.com/users/holiman/following{/other_user}",
      "gists_url": "https://api.github.com/users/holiman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/holiman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/holiman/subscriptions",
      "organizations_url": "https://api.github.com/users/holiman/orgs",
      "repos_url": "https://api.github.com/users/holiman/repos",
      "events_url": "https://api.github.com/users/holiman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/holiman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-10-03T15:44:45Z",
    "updated_at": "2023-10-03T15:44:45Z",
    "author_association": "MEMBER",
    "body": "For sure we're keen on `slog`, however, our policy is to support the two latest golang versions. Which right now are `1.21` and `1.20`, so we can't move on `slog` until `1.22` is released. @jwasinger is already looking into it though",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1745246176/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1745262559",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/28244#issuecomment-1745262559",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/28244",
    "id": 1745262559,
    "node_id": "IC_kwDOAOvK985oBpff",
    "user": {
      "login": "protolambda",
      "id": 19571989,
      "node_id": "MDQ6VXNlcjE5NTcxOTg5",
      "avatar_url": "https://avatars.githubusercontent.com/u/19571989?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/protolambda",
      "html_url": "https://github.com/protolambda",
      "followers_url": "https://api.github.com/users/protolambda/followers",
      "following_url": "https://api.github.com/users/protolambda/following{/other_user}",
      "gists_url": "https://api.github.com/users/protolambda/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/protolambda/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/protolambda/subscriptions",
      "organizations_url": "https://api.github.com/users/protolambda/orgs",
      "repos_url": "https://api.github.com/users/protolambda/repos",
      "events_url": "https://api.github.com/users/protolambda/events{/privacy}",
      "received_events_url": "https://api.github.com/users/protolambda/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-10-03T15:53:56Z",
    "updated_at": "2023-10-03T15:53:56Z",
    "author_association": "MEMBER",
    "body": "@holiman deprecating `SetHandler` on the geth logger, in favor of creating a new logger around a handler, would be nice to do pre-Go-1.22, since that handler-setting isn't supported by `slog`, and I don't believe it's really used all that much anyway.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1745262559/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1748946551",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/28244#issuecomment-1748946551",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/28244",
    "id": 1748946551,
    "node_id": "IC_kwDOAOvK985oPs53",
    "user": {
      "login": "jwasinger",
      "id": 3411040,
      "node_id": "MDQ6VXNlcjM0MTEwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3411040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jwasinger",
      "html_url": "https://github.com/jwasinger",
      "followers_url": "https://api.github.com/users/jwasinger/followers",
      "following_url": "https://api.github.com/users/jwasinger/following{/other_user}",
      "gists_url": "https://api.github.com/users/jwasinger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jwasinger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jwasinger/subscriptions",
      "organizations_url": "https://api.github.com/users/jwasinger/orgs",
      "repos_url": "https://api.github.com/users/jwasinger/repos",
      "events_url": "https://api.github.com/users/jwasinger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jwasinger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-10-05T13:52:29Z",
    "updated_at": "2023-10-05T13:52:29Z",
    "author_association": "MEMBER",
    "body": "Hey @protolambda , I have an open draft [PR](https://github.com/ethereum/go-ethereum/pull/28187) on Geth to integrate `slog`.  After reading your suggestions in this issue, and further looking into `slog` examples, there are a few changes I want to push to it.\r\n\r\nRegarding the points you bring up around supporting `slog`:\r\n\r\n> Deprecate geth SetHandler(h) on log.Logger;\r\ncompletely swapping the handler dynamically is not necessary, and not supported by slog.\r\n\r\nThis sounds reasonable.  We can preserve ability to modify the root logger via a method `SetDefault(log.Logger)` in the `log` package (the same as what slog does).\r\n\r\n> * Implement the Geth log.Logger interface with a new slog.Logger wrapper,\r\nto pass an slog.Logger into any existing Geth code.\r\n> * Above wrapper can be compatible with both log.Logger and slog.Logger interfaces, so Geth can pass its logger into dependencies that do leveled logging.\r\n\r\n`slog.Logger` is a struct not an interface.\r\n\r\nMy draft PR currently wraps an `slog.Logger` instance behind a type that implements `log.Logger`.\r\n\r\nSome additional options are:\r\n1) expose a `log` package method to instantiate a `log.Logger` directly from an existing `slog.Logger`.\r\n2) allow `log.Logger` to leak the underlying `slog.Logger` via an interface method.\r\n\r\nI'm more inclined to 1 and not 2.  But would be good to factor in the specific use-cases of users of Geth codebase when evaluating.\r\n\r\n> slog.Handler interface implemented by wrapper around log.Handler,\r\nto direct any slog records to existing geth log handlers. (since Geth has many log handlers that we probably want to keep supporting)\r\n\r\nThis is implemented in the draft PR as well.\r\n\r\n> * Add a SlogLevel() method to Geth log.Lvl type, to translate it easily.\r\n> * Define slog.Level \"crit\" and \"trace\" constant ints.\r\n\r\n:+1: Currently, the draft PR preserves the same values for level constants as Geth does now.  But it makes sense to keep consistency with `slog` conventions.  I will change this in the PR.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1748946551/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1840724176",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/28244#issuecomment-1840724176",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/28244",
    "id": 1840724176,
    "node_id": "IC_kwDOAOvK985ttzjQ",
    "user": {
      "login": "karalabe",
      "id": 129561,
      "node_id": "MDQ6VXNlcjEyOTU2MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/129561?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/karalabe",
      "html_url": "https://github.com/karalabe",
      "followers_url": "https://api.github.com/users/karalabe/followers",
      "following_url": "https://api.github.com/users/karalabe/following{/other_user}",
      "gists_url": "https://api.github.com/users/karalabe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/karalabe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/karalabe/subscriptions",
      "organizations_url": "https://api.github.com/users/karalabe/orgs",
      "repos_url": "https://api.github.com/users/karalabe/repos",
      "events_url": "https://api.github.com/users/karalabe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/karalabe/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-12-05T12:44:25Z",
    "updated_at": "2023-12-05T12:44:25Z",
    "author_association": "MEMBER",
    "body": "Geth's master switched over to using `golang.org/x/exp/slog`, so we're kind of one step closer to doing the integration, but we need to wait for Go 1.22 to make the final switch. Should land in 2 months or so, so, almost there. Closing this issue in the mean time.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1840724176/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
