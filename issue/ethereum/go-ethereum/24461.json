{
  "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/24461",
  "repository_url": "https://api.github.com/repos/ethereum/go-ethereum",
  "labels_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/24461/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/24461/comments",
  "events_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/24461/events",
  "html_url": "https://github.com/ethereum/go-ethereum/issues/24461",
  "id": 1147793798,
  "node_id": "I_kwDOAOvK985EafGG",
  "number": 24461,
  "title": "Setting up archive node sets",
  "user": {
    "login": "holiman",
    "id": 142290,
    "node_id": "MDQ6VXNlcjE0MjI5MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/142290?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/holiman",
    "html_url": "https://github.com/holiman",
    "followers_url": "https://api.github.com/users/holiman/followers",
    "following_url": "https://api.github.com/users/holiman/following{/other_user}",
    "gists_url": "https://api.github.com/users/holiman/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/holiman/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/holiman/subscriptions",
    "organizations_url": "https://api.github.com/users/holiman/orgs",
    "repos_url": "https://api.github.com/users/holiman/repos",
    "events_url": "https://api.github.com/users/holiman/events{/privacy}",
    "received_events_url": "https://api.github.com/users/holiman/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 72233652,
      "node_id": "MDU6TGFiZWw3MjIzMzY1Mg==",
      "url": "https://api.github.com/repos/ethereum/go-ethereum/labels/type:feature",
      "name": "type:feature",
      "color": "84b6eb",
      "default": false,
      "description": null
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2022-02-23T08:25:02Z",
  "updated_at": "2022-05-29T21:10:27Z",
  "closed_at": null,
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "Lifted up from https://github.com/ethereum/go-ethereum/issues/24413#issuecomment-1048536599. Opened here for discussion, to see if there's anything we can/should do to make this easier. \r\n\r\nSome data-providers would benefit from a scenarion like the following:\r\n\r\n1. Node `A` has (all) state for blocks `0-2M`, \r\n2. Node `B` has all state for blocks `2M-3M`,\r\n3. etc.. \r\nN. Node `N` has state from `13M` to `head`\r\n\r\nThis is _possible_, but would require a bit of coding, and some special setup. \r\n\r\nThe way to create a \"archive node from `1M to 2M`, currently, would be to: \r\n1. Use `syncmode=full` until 1M, \r\n2. Do a state-pruning\r\n   - After pruning, you can also copy the datadir for use with the `2M-3M` node, which needs to continue without `gcmode=archive` \r\n3. Use `syncmode=full gcmode=archive` between 1M and 2M\r\n4. Stop the node\r\n5. Run the node with `--nodiscover --maxpeers=0`. \r\n\r\nI guess the one thing lacking to script up such a scenario right now is that we don't have a way to stop at a certain block, e.g. `geth ...args.. --exit-at=2000000`.\r\n\r\nAnother useful option would be to extend `gcmode`, so that one could say e.g. `gcmode=0:full,1000000:archive,2000000:full`, meaning it would be given a set of `N:<mode>`, in increasing order, and automatically switch at the given numbers. \r\nI'll file this up as a potential feature.  \r\n\r\nA third way to achieve this would be to have the blocks in separate rlp dumps, and use the \r\n`geth import <0-1M> --gcmode=...; geth --snapshot prune ...; geth import  <1M-2M.rlp> --gcmode=archive ... `, \r\n\r\nThis third way does not require any new features, and it's pretty optimal from a network perspective, since it doesn't require any network IO. \r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/24461/reactions",
    "total_count": 5,
    "+1": 1,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 4
  },
  "timeline_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/24461/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1049503986",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/24461#issuecomment-1049503986",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/24461",
    "id": 1049503986,
    "node_id": "IC_kwDOAOvK984-jijy",
    "user": {
      "login": "rjl493456442",
      "id": 5959481,
      "node_id": "MDQ6VXNlcjU5NTk0ODE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5959481?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rjl493456442",
      "html_url": "https://github.com/rjl493456442",
      "followers_url": "https://api.github.com/users/rjl493456442/followers",
      "following_url": "https://api.github.com/users/rjl493456442/following{/other_user}",
      "gists_url": "https://api.github.com/users/rjl493456442/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rjl493456442/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rjl493456442/subscriptions",
      "organizations_url": "https://api.github.com/users/rjl493456442/orgs",
      "repos_url": "https://api.github.com/users/rjl493456442/repos",
      "events_url": "https://api.github.com/users/rjl493456442/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rjl493456442/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-24T05:18:17Z",
    "updated_at": "2022-02-24T05:18:17Z",
    "author_association": "MEMBER",
    "body": "It's an interesting idea. \r\n\r\nIn the approach you mentioned, it's still feasible to maintain a bunch of nodes for segmenting full archive states. And the biggest benefit is: we break this assumption that maintaining an archive node requires excellent hardware. And it's kind of\r\nscalable.\r\n\r\nAnd since we will switch to path-based scheme, so I am thinking how can we integrate your idea with this scheme. Under the new scheme, we will only maintain a single latest state with a bunch of reverse diffs. The state can be reverted via applying the reverse diffs. So these nodes can also stop at a specific height and keep all the reverse diffs. Then the entire reverse diff history is shared by a node set, and *state rewind cost* is kind of acceptable.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1049503986/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1049504309",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/24461#issuecomment-1049504309",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/24461",
    "id": 1049504309,
    "node_id": "IC_kwDOAOvK984-jio1",
    "user": {
      "login": "rjl493456442",
      "id": 5959481,
      "node_id": "MDQ6VXNlcjU5NTk0ODE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5959481?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rjl493456442",
      "html_url": "https://github.com/rjl493456442",
      "followers_url": "https://api.github.com/users/rjl493456442/followers",
      "following_url": "https://api.github.com/users/rjl493456442/following{/other_user}",
      "gists_url": "https://api.github.com/users/rjl493456442/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rjl493456442/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rjl493456442/subscriptions",
      "organizations_url": "https://api.github.com/users/rjl493456442/orgs",
      "repos_url": "https://api.github.com/users/rjl493456442/repos",
      "events_url": "https://api.github.com/users/rjl493456442/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rjl493456442/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-24T05:19:03Z",
    "updated_at": "2022-02-24T05:19:03Z",
    "author_association": "MEMBER",
    "body": "Personally I think we can somehow offer the necessary functions in Geth, and the geth cluster(archive cluster) can be implemented in a separate project.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1049504309/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
