{
  "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/25775",
  "repository_url": "https://api.github.com/repos/ethereum/go-ethereum",
  "labels_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/25775/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/25775/comments",
  "events_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/25775/events",
  "html_url": "https://github.com/ethereum/go-ethereum/issues/25775",
  "id": 1374968959,
  "node_id": "I_kwDOAOvK985R9Fx_",
  "number": 25775,
  "title": "Already shutting down, interrupt more to panic",
  "user": {
    "login": "MareG76",
    "id": 34779580,
    "node_id": "MDQ6VXNlcjM0Nzc5NTgw",
    "avatar_url": "https://avatars.githubusercontent.com/u/34779580?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/MareG76",
    "html_url": "https://github.com/MareG76",
    "followers_url": "https://api.github.com/users/MareG76/followers",
    "following_url": "https://api.github.com/users/MareG76/following{/other_user}",
    "gists_url": "https://api.github.com/users/MareG76/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/MareG76/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/MareG76/subscriptions",
    "organizations_url": "https://api.github.com/users/MareG76/orgs",
    "repos_url": "https://api.github.com/users/MareG76/repos",
    "events_url": "https://api.github.com/users/MareG76/events{/privacy}",
    "received_events_url": "https://api.github.com/users/MareG76/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 72233650,
      "node_id": "MDU6TGFiZWw3MjIzMzY1MA==",
      "url": "https://api.github.com/repos/ethereum/go-ethereum/labels/type:bug",
      "name": "type:bug",
      "color": "FF5E5E",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2022-09-15T19:11:54Z",
  "updated_at": "2022-09-20T12:30:17Z",
  "closed_at": "2022-09-20T12:30:17Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "Geth version: 1.10.25\r\nOS & Version: Windows 10\r\n\r\n\r\n#### Expected behaviour\r\nAlmost every version of get lately gives me this problem, after hitting ctrl+c it just won't stop, some times I wait half an hour and nothing\r\n\r\n#### Actual behaviour\r\nIt gives me \"Already shutting down, interrupt more to panic\" and when i interrupt it more I get this:\r\n[https://pastebin.com/HpWBRxMp](url)\r\n\r\n#### Steps to reproduce the behaviour\r\nTry to stop geth on Windows 10 with ctrl+c\r\n\r\n",
  "closed_by": {
    "login": "karalabe",
    "id": 129561,
    "node_id": "MDQ6VXNlcjEyOTU2MQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/129561?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/karalabe",
    "html_url": "https://github.com/karalabe",
    "followers_url": "https://api.github.com/users/karalabe/followers",
    "following_url": "https://api.github.com/users/karalabe/following{/other_user}",
    "gists_url": "https://api.github.com/users/karalabe/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/karalabe/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/karalabe/subscriptions",
    "organizations_url": "https://api.github.com/users/karalabe/orgs",
    "repos_url": "https://api.github.com/users/karalabe/repos",
    "events_url": "https://api.github.com/users/karalabe/events{/privacy}",
    "received_events_url": "https://api.github.com/users/karalabe/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/25775/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/25775/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1249308144",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/25775#issuecomment-1249308144",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/25775",
    "id": 1249308144,
    "node_id": "IC_kwDOAOvK985Kdu3w",
    "user": {
      "login": "holiman",
      "id": 142290,
      "node_id": "MDQ6VXNlcjE0MjI5MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/142290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/holiman",
      "html_url": "https://github.com/holiman",
      "followers_url": "https://api.github.com/users/holiman/followers",
      "following_url": "https://api.github.com/users/holiman/following{/other_user}",
      "gists_url": "https://api.github.com/users/holiman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/holiman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/holiman/subscriptions",
      "organizations_url": "https://api.github.com/users/holiman/orgs",
      "repos_url": "https://api.github.com/users/holiman/repos",
      "events_url": "https://api.github.com/users/holiman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/holiman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-16T12:33:33Z",
    "updated_at": "2022-09-16T12:33:33Z",
    "author_association": "MEMBER",
    "body": "\r\nThe shutdown sequence has become stuck here: \r\n\r\n```\r\ngoroutine 55628060 [semacquire, 5 minutes]:\r\nsync.runtime_Semacquire(0x3?)\r\n        runtime/sema.go:56 +0x25\r\nsync.(*WaitGroup).Wait(0xc003207bc0?)\r\n        sync/waitgroup.go:136 +0x52\r\ngithub.com/ethereum/go-ethereum/eth.(*handler).Stop(0xc0003ea600)\r\n        github.com/ethereum/go-ethereum/eth/handler.go:565 +0x89\r\ngithub.com/ethereum/go-ethereum/eth.(*Ethereum).Stop(0xc0003ea500)\r\n        github.com/ethereum/go-ethereum/eth/backend.go:548 +0x50\r\ngithub.com/ethereum/go-ethereum/node.(*Node).stopServices(0xc0000f8460, {0xc0000b7690, 0x1, 0x28?})\r\n        github.com/ethereum/go-ethereum/node/node.go:303 +0xbe\r\ngithub.com/ethereum/go-ethereum/node.(*Node).Close(0xc0000f8460)\r\n        github.com/ethereum/go-ethereum/node/node.go:223 +0x191\r\ncreated by github.com/ethereum/go-ethereum/cmd/utils.StartNode.func1.1\r\n        github.com/ethereum/go-ethereum/cmd/utils/cmd.go:92 +0x96\r\n```\r\nI.e : \r\n\r\n```golang\r\n        // Disconnect existing sessions.\r\n        // This also closes the gate for any new registrations on the peer set.\r\n        // sessions which are already established but not added to h.peers yet\r\n        // will exit when they try to register.\r\n        h.peers.close()\r\n        h.peerWG.Wait() <-- HERE\r\n```\r\n\r\nThe `peerWG` is added to once for `runEthPeer` and `runSnapExtension`. Here's an `eth` handler, stuck trying to deliver block headers:\r\n\r\n```\r\ngoroutine 11159874 [select, 1276 minutes]:\r\ngithub.com/ethereum/go-ethereum/eth/protocols/eth.(*Peer).dispatchResponse(0xc0a4863860, 0xc08cde7da0, 0xc0536ef678)\r\n        github.com/ethereum/go-ethereum/eth/protocols/eth/dispatcher.go:172 +0x28f\r\ngithub.com/ethereum/go-ethereum/eth/protocols/eth.handleBlockHeaders66({0x7ff77361d580?, 0xc0001dae40?}, {0x7ff7739b8800, 0xc08cde6240}, 0xc0c0aef5914f4320?)\r\n        github.com/ethereum/go-ethereum/eth/protocols/eth/handlers.go:367 +0x178\r\ngithub.com/ethereum/go-ethereum/eth/protocols/eth.handleMessage({0x7ff7739be900, 0xc0003ea600}, 0xc0a4863860)\r\n        github.com/ethereum/go-ethereum/eth/protocols/eth/handler.go:230 +0x597\r\ngithub.com/ethereum/go-ethereum/eth/protocols/eth.Handle({0x7ff7739be900, 0xc0003ea600}, 0xc0a4863860)\r\n        github.com/ethereum/go-ethereum/eth/protocols/eth/handler.go:154 +0x3d\r\ngithub.com/ethereum/go-ethereum/eth/protocols/eth.MakeProtocols.func1.1(0xc0a4863860?)\r\n        github.com/ethereum/go-ethereum/eth/protocols/eth/handler.go:111 +0x27\r\ngithub.com/ethereum/go-ethereum/eth.(*handler).runEthPeer(0xc0003ea600, 0xc0a4863860, 0xc262f38e40)\r\n        github.com/ethereum/go-ethereum/eth/handler.go:475 +0x117a\r\ngithub.com/ethereum/go-ethereum/eth.(*ethHandler).RunPeer(0x42?, 0xc26b531500?, 0x7ff7739b7090?)\r\n        github.com/ethereum/go-ethereum/eth/handler_eth.go:41 +0x19\r\ngithub.com/ethereum/go-ethereum/eth/protocols/eth.MakeProtocols.func1(0xc0fa3eaf00?, {0x7ff7739b7090, 0xc07419c0a0})\r\n        github.com/ethereum/go-ethereum/eth/protocols/eth/handler.go:110 +0x122\r\ngithub.com/ethereum/go-ethereum/p2p.(*Peer).startProtocols.func1()\r\n        github.com/ethereum/go-ethereum/p2p/peer.go:415 +0x8c\r\ncreated by github.com/ethereum/go-ethereum/p2p.(*Peer).startProtocols\r\n        github.com/ethereum/go-ethereum/p2p/peer.go:413 +0xae\r\n```\r\n\r\nThis is where it's been sitting for `21` hours:\r\n\r\n```golang\r\n// dispatchRequest fulfils a pending request and delivers it to the requested\r\n// sink.\r\nfunc (p *Peer) dispatchResponse(res *Response, metadata func() interface{}) error {\r\n        resOp := &response{\r\n                res:  res,\r\n                fail: make(chan error),\r\n        }\r\n        res.recv = time.Now()\r\n        res.Done = make(chan error)\r\n\r\n        select {\r\n        case p.resDispatch <- resOp:\r\n                // Ensure the response is accepted by the dispatcher\r\n                if err := <-resOp.fail; err != nil {\r\n                        return nil\r\n                }\r\n                // Request was accepted, run any postprocessing step to generate metadata\r\n                // on the receiver thread, not the sink thread\r\n                if metadata != nil {\r\n                        res.Meta = metadata()\r\n                }\r\n                // Deliver the filled out response and wait until it's handled. This\r\n                // path is a bit funky as Go's select has no order, so if a response\r\n                // arrives to an already cancelled request, there's a 50-50% changes\r\n                // of picking on channel or the other. To avoid such cases delivering\r\n                // the packet upstream, check for cancellation first and only after\r\n                // block on delivery.\r\n                select { \r\n                case <-res.Req.cancel:\r\n                        return nil // Request cancelled, silently discard response\r\n                default:\r\n                        // Request not yet cancelled, attempt to deliver it, but do watch\r\n                        // for fresh cancellations too\r\n                        select { <--- STUCK ON THIS LINE\r\n                        case res.Req.sink <- res:\r\n                                return <-res.Done // Response delivered, return any errors\r\n                        case <-res.Req.cancel:\r\n                                return nil // Request cancelled, silently discard response\r\n                        }\r\n                }\r\n```\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1249308144/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1249309053",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/25775#issuecomment-1249309053",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/25775",
    "id": 1249309053,
    "node_id": "IC_kwDOAOvK985KdvF9",
    "user": {
      "login": "holiman",
      "id": 142290,
      "node_id": "MDQ6VXNlcjE0MjI5MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/142290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/holiman",
      "html_url": "https://github.com/holiman",
      "followers_url": "https://api.github.com/users/holiman/followers",
      "following_url": "https://api.github.com/users/holiman/following{/other_user}",
      "gists_url": "https://api.github.com/users/holiman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/holiman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/holiman/subscriptions",
      "organizations_url": "https://api.github.com/users/holiman/orgs",
      "repos_url": "https://api.github.com/users/holiman/repos",
      "events_url": "https://api.github.com/users/holiman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/holiman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-16T12:34:42Z",
    "updated_at": "2022-09-16T12:35:33Z",
    "author_association": "MEMBER",
    "body": "I think this should fix it \r\n```diff\r\ndiff --git a/eth/protocols/eth/dispatcher.go b/eth/protocols/eth/dispatcher.go\r\nindex 65a935d555..1486a70022 100644\r\n--- a/eth/protocols/eth/dispatcher.go\r\n+++ b/eth/protocols/eth/dispatcher.go\r\n@@ -174,6 +174,8 @@ func (p *Peer) dispatchResponse(res *Response, metadata func() interface{}) erro\r\n \t\t\t\treturn <-res.Done // Response delivered, return any errors\r\n \t\t\tcase <-res.Req.cancel:\r\n \t\t\t\treturn nil // Request cancelled, silently discard response\r\n+\t\t\tcase <-p.term:\r\n+\t\t\t\treturn errDisconnected\r\n \t\t\t}\r\n \t\t}\r\n```\r\n\r\nThat should fix _the shutdown problem_, but there's some other underlying error here which also needs to be fixed, namely -- why doesn't that request become cancelled earlier? ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1249309053/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
