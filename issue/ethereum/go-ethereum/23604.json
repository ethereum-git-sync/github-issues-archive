{
  "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/23604",
  "repository_url": "https://api.github.com/repos/ethereum/go-ethereum",
  "labels_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/23604/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/23604/comments",
  "events_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/23604/events",
  "html_url": "https://github.com/ethereum/go-ethereum/issues/23604",
  "id": 1000637871,
  "node_id": "I_kwDOAOvK9847pIWv",
  "number": 23604,
  "title": "Binary search for common ancestor should not use remote height as max value",
  "user": {
    "login": "ferranbt",
    "id": 30872539,
    "node_id": "MDQ6VXNlcjMwODcyNTM5",
    "avatar_url": "https://avatars.githubusercontent.com/u/30872539?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ferranbt",
    "html_url": "https://github.com/ferranbt",
    "followers_url": "https://api.github.com/users/ferranbt/followers",
    "following_url": "https://api.github.com/users/ferranbt/following{/other_user}",
    "gists_url": "https://api.github.com/users/ferranbt/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ferranbt/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ferranbt/subscriptions",
    "organizations_url": "https://api.github.com/users/ferranbt/orgs",
    "repos_url": "https://api.github.com/users/ferranbt/repos",
    "events_url": "https://api.github.com/users/ferranbt/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ferranbt/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 72233650,
      "node_id": "MDU6TGFiZWw3MjIzMzY1MA==",
      "url": "https://api.github.com/repos/ethereum/go-ethereum/labels/type:bug",
      "name": "type:bug",
      "color": "FF5E5E",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 3,
  "created_at": "2021-09-20T07:07:09Z",
  "updated_at": "2021-09-20T13:49:40Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "#### System information\r\n\r\nThis behaviour was found on Polygon PoS (upstream v1.10.8) but I think it also affects Go-ethereum.\r\n\r\n#### Expected behaviour\r\n\r\nAt startup, local Geth node is at block A (local header=local full block=local full block=A) and target sync node is at block B. To find an ancestor, local Geth uses binary search in the span (A-max reorgs, B). Does it make sense to search in (A, B) knowing that local Geth should not have any of those blocks? In normal conditions, if local Geth is synced with the correct chain, the ancestor will be A.\r\n\r\n#### Actual behaviour\r\n\r\nWe are experiencing that during the binary search, the common ancestor block is between A and B. I am not sure why is this happening but it might be due to the fact that Geth syncs headers in advance. Finding the wrong common ancestor is leading to huge memory allocations and immediate shutdowns.\r\n\r\nI think a simple fix would be to limit the ancestor binary search span to (A-max reorgs, A). Would you accept a PR with this fix?\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/23604/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/23604/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/922695967",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/23604#issuecomment-922695967",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/23604",
    "id": 922695967,
    "node_id": "IC_kwDOAOvK9842_zkf",
    "user": {
      "login": "holiman",
      "id": 142290,
      "node_id": "MDQ6VXNlcjE0MjI5MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/142290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/holiman",
      "html_url": "https://github.com/holiman",
      "followers_url": "https://api.github.com/users/holiman/followers",
      "following_url": "https://api.github.com/users/holiman/following{/other_user}",
      "gists_url": "https://api.github.com/users/holiman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/holiman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/holiman/subscriptions",
      "organizations_url": "https://api.github.com/users/holiman/orgs",
      "repos_url": "https://api.github.com/users/holiman/repos",
      "events_url": "https://api.github.com/users/holiman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/holiman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-20T07:36:56Z",
    "updated_at": "2021-09-20T07:36:56Z",
    "author_association": "MEMBER",
    "body": "> We are experiencing that during the binary search, the common ancestor block is between A and B.\r\n\r\nThat is because it's erroneously named. There are two things at play here. \r\n\r\n- For the blockchain, the common ancestor is the first block where the two chains have the same block. \r\n- However, the downloader is not really concerned about which is canon and which is side. It just wants to deliver blocks to the blockchain. Therefore, what the downloader tries to do, is not \"identify the common ancestor\", but instead \"for the chain that the remote part is on, what is the earliest block that we already have locally?\". \r\n\r\nThis behaviour was changed, in https://github.com/ethereum/go-ethereum/pull/18085 for example. The reason for this change was that there was consensus-issues on ropsten, which caused very long non-canon sidechains. \r\n\r\nSay you have a fork at block N. Now, there are two chains, N->M1 (canon) and N->M2 (side). Both of them are 10K blocks long. \r\n\r\nIf we look for the \"blockchain common ancestor\", then every time we connect to a peer on M2, the downloader will find N to be the \"common ancestor\". It will thus download the 10K blocks in N->M2, and deliver to the blockchain. The blockchain will start executing them, and find that \"Hey, N+1 is bad\", and promptly ignore them. Then that scenario happens again and again and again. \r\n\r\nSo we changed it. Now, instead, the we only download N->M2 once. The blockchain rejects them (but stores them), and the next time with hit a sidechain-peer, we will not download the entire N->M2 chain all over again. \r\n \r\n\r\n> Finding the wrong common ancestor is leading to huge memory allocations and immediate shutdowns.\r\n\r\nThat doesn't sound great. Any more info about that? ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/922695967/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/922708747",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/23604#issuecomment-922708747",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/23604",
    "id": 922708747,
    "node_id": "IC_kwDOAOvK9842_2sL",
    "user": {
      "login": "ferranbt",
      "id": 30872539,
      "node_id": "MDQ6VXNlcjMwODcyNTM5",
      "avatar_url": "https://avatars.githubusercontent.com/u/30872539?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ferranbt",
      "html_url": "https://github.com/ferranbt",
      "followers_url": "https://api.github.com/users/ferranbt/followers",
      "following_url": "https://api.github.com/users/ferranbt/following{/other_user}",
      "gists_url": "https://api.github.com/users/ferranbt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ferranbt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ferranbt/subscriptions",
      "organizations_url": "https://api.github.com/users/ferranbt/orgs",
      "repos_url": "https://api.github.com/users/ferranbt/repos",
      "events_url": "https://api.github.com/users/ferranbt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ferranbt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-20T08:03:14Z",
    "updated_at": "2021-09-20T09:38:01Z",
    "author_association": "CONTRIBUTOR",
    "body": "Okay, so there must be something else. These are the logs from the machine (note that these were merged from several executions so some of the log times are not correct, block numbers are correct)\r\n```\r\nINFO [09-20|05:52:59.317|core/blockchain.go:475]             Loaded most recent local header          number=18.836.320 hash=02bedd..f07a30 td=217,634,548 age=xd12h16m                                    \r\nINFO [09-20|05:52:59.318|core/blockchain.go:476]             Loaded most recent local full block      number=18.836.320 hash=02bedd..f07a30 td=217,634,548 age=xd12h16m                                    \r\nINFO [09-20|05:52:59.318|core/blockchain.go:477]             Loaded most recent local fast block      number=18.836.320 hash=02bedd..f07a30 td=217,634,548 age=xd12h16m\r\n...\r\nDEBUG[09-17|09:13:29.373|eth/protocols/eth/peer.go:386]      Fetching batch of headers                id=caf04e2767be98c2 conn=staticdial count=1    fromhash=28c773..a217ad skip=63 reverse=true          \r\nDEBUG[09-17|09:13:29.384|eth/downloader/downloader.go:680]   Remote head identified, no pivot         peer=caf04e27 number=19,199,017 hash=28c773..a217ad                                                  \r\nDEBUG[09-17|09:13:29.384|eth/downloader/downloader.go:775]   Looking for common ancestor              peer=caf04e27 local=18,836,320 remote=19,199,017                                                     \r\nDEBUG[09-17|09:13:29.385|eth/protocols/eth/peer.go:404]      Fetching batch of headers                id=caf04e2767be98c2 conn=staticdial count=12   fromnum=19,198,840 skip=15 reverse=false              \r\nDEBUG[09-17|09:13:29.391|eth/protocols/eth/peer.go:404]      Fetching batch of headers                id=caf04e2767be98c2 conn=staticdial count=1    fromnum=18,972,668 skip=0  reverse=false              \r\nDEBUG[09-17|09:13:29.394|eth/protocols/eth/peer.go:404]      Fetching batch of headers                id=caf04e2767be98c2 conn=staticdial count=1    fromnum=18,859,494 skip=0  reverse=false              \r\nDEBUG[09-17|09:13:29.412|eth/protocols/eth/peer.go:404]      Fetching batch of headers                id=caf04e2767be98c2 conn=staticdial count=1    fromnum=18,916,081 skip=0  reverse=false              \r\nDEBUG[09-17|09:13:29.435|eth/protocols/eth/peer.go:404]      Fetching batch of headers                id=caf04e2767be98c2 conn=staticdial count=1    fromnum=18,944,374 skip=0  reverse=false              \r\nDEBUG[09-17|09:13:29.438|eth/protocols/eth/peer.go:404]      Fetching batch of headers                id=caf04e2767be98c2 conn=staticdial count=1    fromnum=18,930,227 skip=0  reverse=false              \r\nDEBUG[09-17|09:13:29.447|eth/protocols/eth/peer.go:404]      Fetching batch of headers                id=caf04e2767be98c2 conn=staticdial count=1    fromnum=18,937,300 skip=0  reverse=false              \r\nDEBUG[09-17|09:13:29.459|eth/protocols/eth/peer.go:404]      Fetching batch of headers                id=caf04e2767be98c2 conn=staticdial count=1    fromnum=18,940,837 skip=0  reverse=false              \r\nDEBUG[09-17|09:13:29.468|eth/protocols/eth/peer.go:404]      Fetching batch of headers                id=caf04e2767be98c2 conn=staticdial count=1    fromnum=18,942,605 skip=0  reverse=false              \r\nDEBUG[09-17|09:13:29.476|eth/protocols/eth/peer.go:404]      Fetching batch of headers                id=caf04e2767be98c2 conn=staticdial count=1    fromnum=18,943,489 skip=0  reverse=false              \r\nDEBUG[09-17|09:13:29.482|eth/protocols/eth/peer.go:404]      Fetching batch of headers                id=caf04e2767be98c2 conn=staticdial count=1    fromnum=18,943,931 skip=0  reverse=false              \r\nDEBUG[09-17|09:13:29.485|eth/protocols/eth/peer.go:404]      Fetching batch of headers                id=caf04e2767be98c2 conn=staticdial count=1    fromnum=18,944,152 skip=0  reverse=false              \r\nDEBUG[09-17|09:13:29.486|eth/protocols/eth/peer.go:404]      Fetching batch of headers                id=caf04e2767be98c2 conn=staticdial count=1    fromnum=18,944,041 skip=0  reverse=false              \r\nDEBUG[09-17|09:13:29.489|eth/protocols/eth/peer.go:404]      Fetching batch of headers                id=caf04e2767be98c2 conn=staticdial count=1    fromnum=18,943,986 skip=0  reverse=false              \r\nDEBUG[09-17|09:13:29.492|eth/protocols/eth/peer.go:404]      Fetching batch of headers                id=caf04e2767be98c2 conn=staticdial count=1    fromnum=18,944,013 skip=0  reverse=false              \r\nDEBUG[09-17|09:13:29.493|eth/protocols/eth/peer.go:404]      Fetching batch of headers                id=caf04e2767be98c2 conn=staticdial count=1    fromnum=18,943,999 skip=0  reverse=false              \r\nDEBUG[09-17|09:13:29.494|eth/protocols/eth/peer.go:404]      Fetching batch of headers                id=caf04e2767be98c2 conn=staticdial count=1    fromnum=18,943,992 skip=0  reverse=false              \r\nDEBUG[09-17|09:13:29.495|eth/protocols/eth/peer.go:404]      Fetching batch of headers                id=caf04e2767be98c2 conn=staticdial count=1    fromnum=18,943,989 skip=0  reverse=false              \r\nDEBUG[09-17|09:13:29.495|eth/protocols/eth/peer.go:404]      Fetching batch of headers                id=caf04e2767be98c2 conn=staticdial count=1    fromnum=18,943,987 skip=0  reverse=false              \r\nDEBUG[09-17|09:13:29.499|eth/protocols/eth/peer.go:404]      Fetching batch of headers                id=caf04e2767be98c2 conn=staticdial count=1    fromnum=18,943,988 skip=0  reverse=false              \r\nDEBUG[09-17|09:13:29.500|eth/downloader/downloader.go:988]   Found common ancestor                    peer=caf04e27 number=18,943,988 hash=f74b7e..fb38ad\r\n...\r\nINFO [09-17|08:45:40.462|ethstats/ethstats.go:200]           Stats daemon started\r\nINFO [09-17|08:45:40.462|eth/downloader/downloader.go:365]   Block synchronisation started\r\nINFO [09-17|08:45:40.774|eth/downloader/queue.go:391]        Downloader queue stats                   receiptTasks=0 blockTasks=255 itemSize=8.64KiB throttle=8192\r\nINFO [09-17|08:45:47.316|p2p/enode/localnode.go:284]         New local node record                    seq=4303 id=a1221d8abc7acb5b ip=3.217.49.94 udp=30303 tcp=30303\r\nINFO [09-17|08:46:52.151|core/blockchain.go:2129]            Importing heavy sidechain segment        blocks=656 start=18,927,136 end=18,927,791\r\n```\r\nAnd this is the heap pprof of the execution:\r\n![profile002](https://user-images.githubusercontent.com/30872539/133972382-d5820096-b6a2-420d-89e6-99a214be956a.png)\r\n\r\nWhat we see is that right after the first batch of downloaded blocks from the downloader it goes directly into the sidechain path and gets stuck there trying to importing a heavy sidechain. When I changed the span in the binary search it worked again.\r\n\r\nWe also see a lot messages like (this is from another execution):\r\n```\r\nERROR[09-20|09:35:46.583] Impossible reorg, please file an issue   oldnum=19,169,548 oldhash=6179e7..1f9017 newnum=19,169,548 newhash=6179e7..1f9017\r\n```\r\nnot sure why it is trying to reorg from the same block?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/922708747/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/922937156",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/23604#issuecomment-922937156",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/23604",
    "id": 922937156,
    "node_id": "IC_kwDOAOvK9843AudE",
    "user": {
      "login": "ferranbt",
      "id": 30872539,
      "node_id": "MDQ6VXNlcjMwODcyNTM5",
      "avatar_url": "https://avatars.githubusercontent.com/u/30872539?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ferranbt",
      "html_url": "https://github.com/ferranbt",
      "followers_url": "https://api.github.com/users/ferranbt/followers",
      "following_url": "https://api.github.com/users/ferranbt/following{/other_user}",
      "gists_url": "https://api.github.com/users/ferranbt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ferranbt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ferranbt/subscriptions",
      "organizations_url": "https://api.github.com/users/ferranbt/orgs",
      "repos_url": "https://api.github.com/users/ferranbt/repos",
      "events_url": "https://api.github.com/users/ferranbt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ferranbt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-20T13:38:52Z",
    "updated_at": "2021-09-20T13:49:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "I have another trace for the problem from another of our nodes (remember that this is Polygon). I have added a couple of logs more (I mixed real outputs from some Println traces I manually added):\r\n```\r\nINFO [09-20|13:05:08.487] Loaded most recent local header          number=19,184,708 hash=9ff64a..d718a2 td=219,472,701 age=3d14h11m\r\nINFO [09-20|13:05:08.487] Loaded most recent local full block      number=19,104,548 hash=e0d86a..d0d6aa td=218,150,856 age=5d20h17m\r\nINFO [09-20|13:05:08.487] Loaded most recent local fast block      number=19,113,098 hash=db56a2..4e5347 td=218,284,470 age=5d14h57m\r\n...\r\nDEBUG [09-20|13:05:22.855] Found common ancestor                    peer=d70f89eb number=19,224,281 hash=a69420..4824c2\r\n```\r\ninsertChain() from 19224282 to 19224490.\r\n```\r\nDEBUG [09-20|13:05:25.028] Pruned ancestor, inserting as sidechain  number=19,224,282 hash=8c0adb..0a170f\r\nDEBUG [09-20|13:05:25.029] Injected sidechain block                 number=19,224,282 hash=8c0adb..0a170f diff=18 elapsed=\"727.779µs\" txs=103 gas=20,519,744 uncles=0 root=5fafd4..3c8d71\r\nDEBUG [09-20|13:05:25.041] Injected sidechain block                 number=19,224,283 hash=685fce..efb93a diff=18 elapsed=\"352.606µs\" txs=110 gas=20,544,523 uncles=0 root=af47b7..c76c1a\r\nDEBUG [09-20|13:05:25.071] Injected sidechain block                 number=19,224,284 hash=8d67d0..68adba diff=18 elapsed=\"62.104µs\"  txs=0   gas=0          uncles=0 root=af47b7..c76c1a\r\nDEBUG [09-20|13:05:25.073] Injected sidechain block                 number=19,224,285 hash=cba627..aa36a3 diff=18 elapsed=\"395.99µs\"  txs=87  gas=20,591,855 uncles=0 root=93fbac..eb522d\r\nDEBUG [09-20|13:05:25.119] Injected sidechain block                 number=19,224,286 hash=57cef5..8fbd8a diff=18 elapsed=\"346.104µs\" txs=51  gas=20,610,133 uncles=0 root=9ab22a..a7fd18\r\nDEBUG [09-20|13:05:25.137] Injected sidechain block                 number=19,224,287 hash=f7840a..0ba7ce diff=18 elapsed=\"803.914µs\" txs=156 gas=20,634,449 uncles=0 root=017cd2..71547f\r\n...\r\nDEBUG [09-20|13:05:27.388] Injected sidechain block                 number=19,224,489 hash=56468e..036174 diff=18 elapsed=\"523.477µs\" txs=303 gas=20,430,562 uncles=0 root=a40a7c..41a252\r\nDEBUG [09-20|13:05:27.398] Injected sidechain block                 number=19,224,490 hash=2f000b..2f2e09 diff=18 elapsed=\"469.807µs\" txs=239 gas=20,403,319 uncles=0 root=8b6888..112a8e\r\nINFO [09-20|13:08:04.507] Importing heavy sidechain segment        blocks=956 start=19,183,783 end=19,184,738\r\n```\r\ninsertChain() from 19183783 to 19184738.\r\nwriteBlockWithState() block 19183783\r\nreorg() (oldblock=19104548, newBlock=19183783)\r\n\r\n---\r\n\r\nNote that it tries to reorg from the current full block to the sync target. At that point it crashes because it cannot allocate 79235 blocks on memory. I would assume that even with enough memory it would show ```Impossible reorg, please file an issue``` with oldnum=newnum.\r\n\r\nI think the problem here might be that downloader is calling ```InsertChain``` on a segment that is not continuous with the one stored. I think the problem is similar to #22955 and #23260.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/922937156/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
