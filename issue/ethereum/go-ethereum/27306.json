{
  "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/27306",
  "repository_url": "https://api.github.com/repos/ethereum/go-ethereum",
  "labels_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/27306/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/27306/comments",
  "events_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/27306/events",
  "html_url": "https://github.com/ethereum/go-ethereum/issues/27306",
  "id": 1717672482,
  "node_id": "I_kwDOAOvK985mYZoi",
  "number": 27306,
  "title": "`eth_getProof` implementation does not conform to EIP-1186",
  "user": {
    "login": "prestwich",
    "id": 10149425,
    "node_id": "MDQ6VXNlcjEwMTQ5NDI1",
    "avatar_url": "https://avatars.githubusercontent.com/u/10149425?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/prestwich",
    "html_url": "https://github.com/prestwich",
    "followers_url": "https://api.github.com/users/prestwich/followers",
    "following_url": "https://api.github.com/users/prestwich/following{/other_user}",
    "gists_url": "https://api.github.com/users/prestwich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/prestwich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/prestwich/subscriptions",
    "organizations_url": "https://api.github.com/users/prestwich/orgs",
    "repos_url": "https://api.github.com/users/prestwich/repos",
    "events_url": "https://api.github.com/users/prestwich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/prestwich/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 72233650,
      "node_id": "MDU6TGFiZWw3MjIzMzY1MA==",
      "url": "https://api.github.com/repos/ethereum/go-ethereum/labels/type:bug",
      "name": "type:bug",
      "color": "FF5E5E",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 9,
  "created_at": "2023-05-19T18:46:22Z",
  "updated_at": "2023-05-30T15:43:56Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "Apologies for excessive links, have tried to cite all sources\r\n\r\n### Description\r\n\r\n[1186] is inconsistent wrt specification of input to `eth_getProof`. It specifies the 2nd element of the param array a an array of 32-byte keys, and refers to the `eth_getStorageAt` call, which is specced in [1474] and on [the ethereum website]. [1474] specifies the input as a [Quantity].\r\n\r\nCurrently Geth accepts as input all of: \r\n- 32-byte hex strings (1186 `eth_getProof` spec)\r\n- [Quantity] encoded integers (1474 `eth_getStorageAt` spec)\r\n- Non-quantity hex strings of length 2 - 31 bytes (neither spec)\r\n\r\nThe issue arises because `response.storageProof.key` is specced as a [Quantity], however, geth simply [mirrors the input] into the response object. When the input is a non-[Quantity] hex string (e.g. `0x000000005` , the returned `response.storageProof[].key` is also not minimal. This is outside the spec for [Quantity], and is off-spec for 1186\r\n\r\nBoth [1186] and [1474] are currently status Stagnant, and may not be reliable. Permissive deserialization seems desirable. Providing non-canonical returns to the user seems undesirable\r\n\r\nThis was previously mentioned in a [besu issue] as a result of failing hive tests with geth producing non-canonical Quantities in responses. I am unsure if it was ever brought up here. The Besu team opted to change their RPC behavior to [always represent this value as an even-length hex string], which is also off-spec.\r\n\r\nRequested change is to always [Quantity]-serialize the `key` element in the response, rather than simply mirroring the input.\r\n\r\n### Expected behaviour\r\n\r\n`eth_getProof` response object should [Quantity]-encode `storageProof.keys, regardless of whether the input was quantity-encoded\r\n\r\nExpected output :\r\n```\r\n{\r\n  \"jsonrpc\": \"2.0\",\r\n  \"id\": 44,\r\n  \"result\": {\r\n    \"address\": \"0x4976fb03c32e5b8cfe2b6ccb31c09ba78ebaba41\",\r\n    \"accountProof\": [\r\n         ...\r\n    ],\r\n    \"balance\": \"0x0\",\r\n    \"codeHash\": \"0x0370d116c18db61a2f90643faa12e3ae22a0b7d518ce868fe3f85e2f0d299fe5\",\r\n    \"nonce\": \"0x1\",\r\n    \"storageHash\": \"0xd14ec04ecff0cf0846dcb185103fbb656f2612f74cee91a547e03ed037cfff0b\",\r\n    \"storageProof\": [\r\n      {\r\n        \"key\": \"0x5\",  // <----- specced encoding\r\n        \"value\": \"0x0\",\r\n        \"proof\": [\r\n            ...\r\n        ]\r\n      }\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\n### Steps to reproduce the behaviour\r\n\r\n```\r\n$ curl localhost:8545 \\     \r\n    -X POST \\                \r\n    -H \"Content-Type: application/json\" \\\r\n    -d '{\"method\":\"eth_getProof\", \"params\":[\"0x4976fb03c32e5b8cfe2b6ccb31c09ba78ebaba41\",[\"0x000000005\"], \"latest\"],\"id\":44,\"jsonrpc\":\"2.0\"}' \\\r\n    | jq\r\n```\r\n\r\n### Actual behaviour\r\n\r\nsee the `0x000000005 `storageProof.key`. This is not a Quantity, and is outside of spec for the endpoint\r\n\r\n```\r\n{\r\n  \"jsonrpc\": \"2.0\",\r\n  \"id\": 44,\r\n  \"result\": {\r\n    \"address\": \"0x4976fb03c32e5b8cfe2b6ccb31c09ba78ebaba41\",\r\n    \"accountProof\": [\r\n         ...\r\n    ],\r\n    \"balance\": \"0x0\",\r\n    \"codeHash\": \"0x0370d116c18db61a2f90643faa12e3ae22a0b7d518ce868fe3f85e2f0d299fe5\",\r\n    \"nonce\": \"0x1\",\r\n    \"storageHash\": \"0xd14ec04ecff0cf0846dcb185103fbb656f2612f74cee91a547e03ed037cfff0b\",\r\n    \"storageProof\": [\r\n      {\r\n        \"key\": \"0x000000005\", // <----- Off-spec encoding\r\n        \"value\": \"0x0\",\r\n        \"proof\": [\r\n            ...\r\n        ]\r\n      }\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\n\r\n[1186]: https://eips.ethereum.org/EIPS/eip-1186\r\n[1474]: https://eips.ethereum.org/EIPS/eip-1474\r\n[Quantity]: https://eips.ethereum.org/EIPS/eip-1474#quantity\r\n[the ethereum website]: https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getstorageat\r\n[mirrors the input]: https://github.com/ethereum/go-ethereum/blob/master/internal/ethapi/api.go#L691-L693\r\n[besu issue]: https://github.com/hyperledger/besu/issues/4504\r\n[always represent this value as an even-length hex string]: https://github.com/hyperledger/besu/pull/4564",
  "closed_by": {
    "login": "fjl",
    "id": 6915,
    "node_id": "MDQ6VXNlcjY5MTU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6915?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/fjl",
    "html_url": "https://github.com/fjl",
    "followers_url": "https://api.github.com/users/fjl/followers",
    "following_url": "https://api.github.com/users/fjl/following{/other_user}",
    "gists_url": "https://api.github.com/users/fjl/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/fjl/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/fjl/subscriptions",
    "organizations_url": "https://api.github.com/users/fjl/orgs",
    "repos_url": "https://api.github.com/users/fjl/repos",
    "events_url": "https://api.github.com/users/fjl/events{/privacy}",
    "received_events_url": "https://api.github.com/users/fjl/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/27306/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/27306/timeline",
  "performed_via_github_app": null,
  "state_reason": "reopened"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1568426526",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/27306#issuecomment-1568426526",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/27306",
    "id": 1568426526,
    "node_id": "IC_kwDOAOvK985dfEoe",
    "user": {
      "login": "fjl",
      "id": 6915,
      "node_id": "MDQ6VXNlcjY5MTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6915?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjl",
      "html_url": "https://github.com/fjl",
      "followers_url": "https://api.github.com/users/fjl/followers",
      "following_url": "https://api.github.com/users/fjl/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjl/subscriptions",
      "organizations_url": "https://api.github.com/users/fjl/orgs",
      "repos_url": "https://api.github.com/users/fjl/repos",
      "events_url": "https://api.github.com/users/fjl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjl/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-30T13:21:08Z",
    "updated_at": "2023-05-30T13:24:03Z",
    "author_association": "MEMBER",
    "body": "It is what it is. The API spec at https://github.com/ethereum/execution-apis defines the storage keys as bytes (not QUANTITY). The EIP might be more correct but it's old, slightly inconsistent and can't be changed anymore.\r\n\r\nThe confusion about this has unfortunately leaked into the spec a little bit, but let's just leave it how it is.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1568426526/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1568432101",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/27306#issuecomment-1568432101",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/27306",
    "id": 1568432101,
    "node_id": "IC_kwDOAOvK985dfF_l",
    "user": {
      "login": "fjl",
      "id": 6915,
      "node_id": "MDQ6VXNlcjY5MTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6915?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjl",
      "html_url": "https://github.com/fjl",
      "followers_url": "https://api.github.com/users/fjl/followers",
      "following_url": "https://api.github.com/users/fjl/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjl/subscriptions",
      "organizations_url": "https://api.github.com/users/fjl/orgs",
      "repos_url": "https://api.github.com/users/fjl/repos",
      "events_url": "https://api.github.com/users/fjl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjl/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-30T13:24:44Z",
    "updated_at": "2023-05-30T13:24:44Z",
    "author_association": "MEMBER",
    "body": "If there is a specific hive test that should be changed to better reflect the spec's intended meaning, we could do that.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1568432101/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1568435002",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/27306#issuecomment-1568435002",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/27306",
    "id": 1568435002,
    "node_id": "IC_kwDOAOvK985dfGs6",
    "user": {
      "login": "fjl",
      "id": 6915,
      "node_id": "MDQ6VXNlcjY5MTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6915?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjl",
      "html_url": "https://github.com/fjl",
      "followers_url": "https://api.github.com/users/fjl/followers",
      "following_url": "https://api.github.com/users/fjl/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjl/subscriptions",
      "organizations_url": "https://api.github.com/users/fjl/orgs",
      "repos_url": "https://api.github.com/users/fjl/repos",
      "events_url": "https://api.github.com/users/fjl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjl/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-30T13:26:32Z",
    "updated_at": "2023-05-30T13:26:41Z",
    "author_association": "MEMBER",
    "body": "Spec links: \r\n\r\n- Input is `bytesMax32`: https://github.com/ethereum/execution-apis/blob/128af6939d03a5f0c0650f19a018998a37a53855/src/eth/state.yaml#L78\r\n- Output `key` is `bytesMax32` as well: https://github.com/ethereum/execution-apis/blob/128af6939d03a5f0c0650f19a018998a37a53855/src/schemas/state.yaml#L48",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1568435002/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1568457733",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/27306#issuecomment-1568457733",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/27306",
    "id": 1568457733,
    "node_id": "IC_kwDOAOvK985dfMQF",
    "user": {
      "login": "prestwich",
      "id": 10149425,
      "node_id": "MDQ6VXNlcjEwMTQ5NDI1",
      "avatar_url": "https://avatars.githubusercontent.com/u/10149425?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/prestwich",
      "html_url": "https://github.com/prestwich",
      "followers_url": "https://api.github.com/users/prestwich/followers",
      "following_url": "https://api.github.com/users/prestwich/following{/other_user}",
      "gists_url": "https://api.github.com/users/prestwich/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/prestwich/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/prestwich/subscriptions",
      "organizations_url": "https://api.github.com/users/prestwich/orgs",
      "repos_url": "https://api.github.com/users/prestwich/repos",
      "events_url": "https://api.github.com/users/prestwich/events{/privacy}",
      "received_events_url": "https://api.github.com/users/prestwich/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-30T13:41:08Z",
    "updated_at": "2023-05-30T13:41:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "Changing output to `bytesMax32` defined as in the execution spec as \"32 hex encoded bytes\" would also be a good resolution to this issue. The problem arises because the node returns keys that are neither valid `Quantity` nor valid `bytesMax32`. Which is to say, whichever spec version we use, the node does not conform to it",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1568457733/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1568482058",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/27306#issuecomment-1568482058",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/27306",
    "id": 1568482058,
    "node_id": "IC_kwDOAOvK985dfSMK",
    "user": {
      "login": "fjl",
      "id": 6915,
      "node_id": "MDQ6VXNlcjY5MTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6915?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjl",
      "html_url": "https://github.com/fjl",
      "followers_url": "https://api.github.com/users/fjl/followers",
      "following_url": "https://api.github.com/users/fjl/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjl/subscriptions",
      "organizations_url": "https://api.github.com/users/fjl/orgs",
      "repos_url": "https://api.github.com/users/fjl/repos",
      "events_url": "https://api.github.com/users/fjl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjl/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-30T13:56:18Z",
    "updated_at": "2023-05-30T13:57:20Z",
    "author_association": "MEMBER",
    "body": "Geth is a bit more lenient than the spec, mostly for historical reasons. So you can, for example, submit a request for storage key `0f1` and it will be treated as `0x00f1`. I agree we do mirror the request value into the output, but an invalid output only occurs for slightly invalid input (missing prefix or odd length).\r\n\r\nHowever Geth's behavior should not be used as the example here. Again, if there is a specific RPC test containing the Geth behavior of mirroring an invalid value, we could always change the test.\r\n\r\nI don't think it's a good idea to change Geth's handling of input for this request, because that would be an incompatible API change. In our internal discussion about this issue, I was in favor of changing the behavior to mirror the 'sanitized' value into the output, but other people in the team were against it.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1568482058/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1568560881",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/27306#issuecomment-1568560881",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/27306",
    "id": 1568560881,
    "node_id": "IC_kwDOAOvK985dflbx",
    "user": {
      "login": "prestwich",
      "id": 10149425,
      "node_id": "MDQ6VXNlcjEwMTQ5NDI1",
      "avatar_url": "https://avatars.githubusercontent.com/u/10149425?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/prestwich",
      "html_url": "https://github.com/prestwich",
      "followers_url": "https://api.github.com/users/prestwich/followers",
      "following_url": "https://api.github.com/users/prestwich/following{/other_user}",
      "gists_url": "https://api.github.com/users/prestwich/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/prestwich/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/prestwich/subscriptions",
      "organizations_url": "https://api.github.com/users/prestwich/orgs",
      "repos_url": "https://api.github.com/users/prestwich/repos",
      "events_url": "https://api.github.com/users/prestwich/events{/privacy}",
      "received_events_url": "https://api.github.com/users/prestwich/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-30T14:43:08Z",
    "updated_at": "2023-05-30T14:43:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "To add some context, I've already encountered this with stored JSON proofs in the wild. I'm not sure which RPC client is sending invalid input, but it results in either Geth's incorrect return types propagating through client libraries, or a set of real-world proof JSON response which ethers-rs cannot parse. In addition, I've already pointed out one case above where the poor specification and incorrect behavior caused incorrect changes in another execution client.  So the idea that Geth's behavior should not be used as an example is a bit ivory-tower-y. RPC client implementers must handle the behavior, and EL implementers must encounter it during compatibility testing\r\n\r\nOkay to recap, (and please correct any of these points if i've misread)\r\n\r\n- Geth produces invalid output for certain inputs\r\n    - This issue arises because the geth node does not strictly validate inputs, and mirrors them to outputs\r\n- This invald output may or may not be supported by any given RPC client\r\n- When Geth produces valid outputs they follow [this spec](https://ethereum.github.io/execution-apis/api-documentation/)\r\n    - Geth does not follow the 1186 spec\r\n- You would not recommend that other EL client implementors follow Geth's behavior, \r\n    - Instead you would recommend they return validly-encoded bytes\r\n- Team acknowledges that the output is incorrect for either spec\r\n    - However, no change will be made to Geth's behavior.\r\n    \r\nPlease tag `wontfix` for future readers 🙏 \r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1568560881/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1568637605",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/27306#issuecomment-1568637605",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/27306",
    "id": 1568637605,
    "node_id": "IC_kwDOAOvK985df4Kl",
    "user": {
      "login": "fjl",
      "id": 6915,
      "node_id": "MDQ6VXNlcjY5MTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6915?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjl",
      "html_url": "https://github.com/fjl",
      "followers_url": "https://api.github.com/users/fjl/followers",
      "following_url": "https://api.github.com/users/fjl/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjl/subscriptions",
      "organizations_url": "https://api.github.com/users/fjl/orgs",
      "repos_url": "https://api.github.com/users/fjl/repos",
      "events_url": "https://api.github.com/users/fjl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjl/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-30T15:25:04Z",
    "updated_at": "2023-05-30T15:27:51Z",
    "author_association": "MEMBER",
    "body": "I closed this because we got stuck on the `QUANTITY` vs `bytesMax32` thing in our internal discussion. It just felt like needless bike-shedding honestly.\r\n\r\nHowever, there is a legitimate issue here where geth can create outputs that do not match the `execution-apis` spec (which is canon!). I think we could fix that in one of two ways:\r\n\r\n- Return the canonicalized value of `key` in responses. We'd still be accepting slightly invalid inputs, but at least the output would be spec compliant.\r\n- Make input validation stricter, i.e. make the `0x` prefix mandatory.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1568637605/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1568644000",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/27306#issuecomment-1568644000",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/27306",
    "id": 1568644000,
    "node_id": "IC_kwDOAOvK985df5ug",
    "user": {
      "login": "prestwich",
      "id": 10149425,
      "node_id": "MDQ6VXNlcjEwMTQ5NDI1",
      "avatar_url": "https://avatars.githubusercontent.com/u/10149425?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/prestwich",
      "html_url": "https://github.com/prestwich",
      "followers_url": "https://api.github.com/users/prestwich/followers",
      "following_url": "https://api.github.com/users/prestwich/following{/other_user}",
      "gists_url": "https://api.github.com/users/prestwich/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/prestwich/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/prestwich/subscriptions",
      "organizations_url": "https://api.github.com/users/prestwich/orgs",
      "repos_url": "https://api.github.com/users/prestwich/repos",
      "events_url": "https://api.github.com/users/prestwich/events{/privacy}",
      "received_events_url": "https://api.github.com/users/prestwich/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-30T15:29:13Z",
    "updated_at": "2023-05-30T15:29:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "Yes, I am not married to either quantity or bytes, but I would really appreciate it if the output were canonical for one of those formats",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1568644000/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1568666570",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/27306#issuecomment-1568666570",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/27306",
    "id": 1568666570,
    "node_id": "IC_kwDOAOvK985df_PK",
    "user": {
      "login": "fjl",
      "id": 6915,
      "node_id": "MDQ6VXNlcjY5MTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6915?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjl",
      "html_url": "https://github.com/fjl",
      "followers_url": "https://api.github.com/users/fjl/followers",
      "following_url": "https://api.github.com/users/fjl/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjl/subscriptions",
      "organizations_url": "https://api.github.com/users/fjl/orgs",
      "repos_url": "https://api.github.com/users/fjl/repos",
      "events_url": "https://api.github.com/users/fjl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjl/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-30T15:43:56Z",
    "updated_at": "2023-05-30T15:43:56Z",
    "author_association": "MEMBER",
    "body": "> You would not recommend that other EL client implementors follow Geth's behavior,\r\n> Instead you would recommend they return validly-encoded bytes\r\n\r\nA spec-compliant server implementation should validate the parameter as `bytesMax32`, which would then rule out invalid outputs even when the input value is simply copied.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1568666570/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
