{
  "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/27533",
  "repository_url": "https://api.github.com/repos/ethereum/go-ethereum",
  "labels_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/27533/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/27533/comments",
  "events_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/27533/events",
  "html_url": "https://github.com/ethereum/go-ethereum/issues/27533",
  "id": 1768351882,
  "node_id": "I_kwDOAOvK985pZuiK",
  "number": 27533,
  "title": "cmd\\geth> go build",
  "user": {
    "login": "sejuaju",
    "id": 101636262,
    "node_id": "U_kgDOBg7Ypg",
    "avatar_url": "https://avatars.githubusercontent.com/u/101636262?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/sejuaju",
    "html_url": "https://github.com/sejuaju",
    "followers_url": "https://api.github.com/users/sejuaju/followers",
    "following_url": "https://api.github.com/users/sejuaju/following{/other_user}",
    "gists_url": "https://api.github.com/users/sejuaju/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/sejuaju/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/sejuaju/subscriptions",
    "organizations_url": "https://api.github.com/users/sejuaju/orgs",
    "repos_url": "https://api.github.com/users/sejuaju/repos",
    "events_url": "https://api.github.com/users/sejuaju/events{/privacy}",
    "received_events_url": "https://api.github.com/users/sejuaju/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 268304226,
      "node_id": "MDU6TGFiZWwyNjgzMDQyMjY=",
      "url": "https://api.github.com/repos/ethereum/go-ethereum/labels/type:docs",
      "name": "type:docs",
      "color": "fef2c0",
      "default": false,
      "description": null
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2023-06-21T19:40:08Z",
  "updated_at": "2023-06-23T04:28:21Z",
  "closed_at": "2023-06-23T04:28:21Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": ".\\verkle.go:61:20: child.ComputeCommitment undefined (type verkle.VerkleNode has no field or method ComputeCommitment)\r\n.\\verkle.go:73:64: child.ComputeCommitment undefined (type verkle.VerkleNode has no field or method ComputeCommitment)",
  "closed_by": {
    "login": "jwasinger",
    "id": 3411040,
    "node_id": "MDQ6VXNlcjM0MTEwNDA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/3411040?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jwasinger",
    "html_url": "https://github.com/jwasinger",
    "followers_url": "https://api.github.com/users/jwasinger/followers",
    "following_url": "https://api.github.com/users/jwasinger/following{/other_user}",
    "gists_url": "https://api.github.com/users/jwasinger/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jwasinger/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jwasinger/subscriptions",
    "organizations_url": "https://api.github.com/users/jwasinger/orgs",
    "repos_url": "https://api.github.com/users/jwasinger/repos",
    "events_url": "https://api.github.com/users/jwasinger/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jwasinger/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/27533/reactions",
    "total_count": 1,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 1,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/27533/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1601620053",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/27533#issuecomment-1601620053",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/27533",
    "id": 1601620053,
    "node_id": "IC_kwDOAOvK985fdshV",
    "user": {
      "login": "jwasinger",
      "id": 3411040,
      "node_id": "MDQ6VXNlcjM0MTEwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3411040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jwasinger",
      "html_url": "https://github.com/jwasinger",
      "followers_url": "https://api.github.com/users/jwasinger/followers",
      "following_url": "https://api.github.com/users/jwasinger/following{/other_user}",
      "gists_url": "https://api.github.com/users/jwasinger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jwasinger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jwasinger/subscriptions",
      "organizations_url": "https://api.github.com/users/jwasinger/orgs",
      "repos_url": "https://api.github.com/users/jwasinger/repos",
      "events_url": "https://api.github.com/users/jwasinger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jwasinger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-06-21T20:23:37Z",
    "updated_at": "2023-06-21T20:23:37Z",
    "author_association": "MEMBER",
    "body": "`(cd cmd/geth && go build)` builds without error for me.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1601620053/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 1,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1602030790",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/27533#issuecomment-1602030790",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/27533",
    "id": 1602030790,
    "node_id": "IC_kwDOAOvK985ffQzG",
    "user": {
      "login": "sejuaju",
      "id": 101636262,
      "node_id": "U_kgDOBg7Ypg",
      "avatar_url": "https://avatars.githubusercontent.com/u/101636262?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sejuaju",
      "html_url": "https://github.com/sejuaju",
      "followers_url": "https://api.github.com/users/sejuaju/followers",
      "following_url": "https://api.github.com/users/sejuaju/following{/other_user}",
      "gists_url": "https://api.github.com/users/sejuaju/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sejuaju/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sejuaju/subscriptions",
      "organizations_url": "https://api.github.com/users/sejuaju/orgs",
      "repos_url": "https://api.github.com/users/sejuaju/repos",
      "events_url": "https://api.github.com/users/sejuaju/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sejuaju/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-06-22T05:26:16Z",
    "updated_at": "2023-06-22T05:30:12Z",
    "author_association": "NONE",
    "body": "\r\nI have tried it but still getting the same error\r\nroot@mai:/mnt/c/Users/main/OneDrive/Desktop/ethereum/go-ethereum# cd cmd/geth && go build\r\n\r\n# github.com/ethereum/go-ethereum/cmd/geth\r\n./verkle.go:61:20: child.ComputeCommitment undefined (type verkle.VerkleNode has no field or method ComputeCommitment)\r\n./verkle.go:73:64: child.ComputeCommitment undefined (type verkle.VerkleNode has no field or method ComputeCommitment)\r\nroot@mai:/mnt/c/Users/main/OneDrive/Desktop/ethereum/go-ethereum/cmd/geth# \r\n\r\n\r\n\r\n// Copyright 2022 The go-ethereum Authors\r\n// This file is part of go-ethereum.\r\n//\r\n// go-ethereum is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// go-ethereum is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with go-ethereum. If not, see <http://www.gnu.org/licenses/>.\r\n\r\npackage main\r\n\r\nimport (\r\n\t\"bytes\"\r\n\t\"encoding/hex\"\r\n\t\"errors\"\r\n\t\"fmt\"\r\n\t\"os\"\r\n\r\n\t\"github.com/ethereum/go-ethereum/cmd/utils\"\r\n\t\"github.com/ethereum/go-ethereum/common\"\r\n\t\"github.com/ethereum/go-ethereum/core/rawdb\"\r\n\t\"github.com/ethereum/go-ethereum/internal/flags\"\r\n\t\"github.com/ethereum/go-ethereum/log\"\r\n\t\"github.com/gballet/go-verkle\"\r\n\tcli \"github.com/urfave/cli/v2\"\r\n)\r\n\r\nvar (\r\n\tzero [32]byte\r\n\r\n\tverkleCommand = &cli.Command{\r\n\t\tName:        \"verkle\",\r\n\t\tUsage:       \"A set of experimental verkle tree management commands\",\r\n\t\tDescription: \"\",\r\n\t\tSubcommands: []*cli.Command{\r\n\t\t\t{\r\n\t\t\t\tName:      \"verify\",\r\n\t\t\t\tUsage:     \"verify the conversion of a MPT into a verkle tree\",\r\n\t\t\t\tArgsUsage: \"<root>\",\r\n\t\t\t\tAction:    verifyVerkle,\r\n\t\t\t\tFlags:     flags.Merge(utils.NetworkFlags, utils.DatabasePathFlags),\r\n\t\t\t\tDescription: `\r\ngeth verkle verify <state-root>\r\nThis command takes a root commitment and attempts to rebuild the tree.\r\n `,\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tName:      \"dump\",\r\n\t\t\t\tUsage:     \"Dump a verkle tree to a DOT file\",\r\n\t\t\t\tArgsUsage: \"<root> <key1> [<key 2> ...]\",\r\n\t\t\t\tAction:    expandVerkle,\r\n\t\t\t\tFlags:     flags.Merge(utils.NetworkFlags, utils.DatabasePathFlags),\r\n\t\t\t\tDescription: `\r\ngeth verkle dump <state-root> <key 1> [<key 2> ...]\r\nThis command will produce a dot file representing the tree, rooted at <root>.\r\nin which key1, key2, ... are expanded.\r\n `,\r\n\t\t\t},\r\n\t\t},\r\n\t}\r\n)\r\n\r\n// recurse into each child to ensure they can be loaded from the db. The tree isn't rebuilt\r\n// (only its nodes are loaded) so there is no need to flush them, the garbage collector should\r\n// take care of that for us.\r\nfunc checkChildren(root verkle.VerkleNode, resolver verkle.NodeResolverFn) error {\r\n\tswitch node := root.(type) {\r\n\tcase *verkle.InternalNode:\r\n\t\tfor i, child := range node.Children() {\r\n\t\t\tchildC := child.ComputeCommitment().Bytes()\r\n\r\n\t\t\tchildS, err := resolver(childC[:])\r\n\t\t\tif bytes.Equal(childC[:], zero[:]) {\r\n\t\t\t\tcontinue\r\n\t\t\t}\r\n\t\t\tif err != nil {\r\n\t\t\t\treturn fmt.Errorf(\"could not find child %x in db: %w\", childC, err)\r\n\t\t\t}\r\n\t\t\t// depth is set to 0, the tree isn't rebuilt so it's not a problem\r\n\t\t\tchildN, err := verkle.ParseNode(childS, 0, childC[:])\r\n\t\t\tif err != nil {\r\n\t\t\t\treturn fmt.Errorf(\"decode error child %x in db: %w\", child.ComputeCommitment().Bytes(), err)\r\n\t\t\t}\r\n\t\t\tif err := checkChildren(childN, resolver); err != nil {\r\n\t\t\t\treturn fmt.Errorf(\"%x%w\", i, err) // write the path to the erroring node\r\n\t\t\t}\r\n\t\t}\r\n\tcase *verkle.LeafNode:\r\n\t\t// sanity check: ensure at least one value is non-zero\r\n\r\n\t\tfor i := 0; i < verkle.NodeWidth; i++ {\r\n\t\t\tif len(node.Value(i)) != 0 {\r\n\t\t\t\treturn nil\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn errors.New(\"Both balance and nonce are 0\")\r\n\tcase verkle.Empty:\r\n\t\t// nothing to do\r\n\tdefault:\r\n\t\treturn fmt.Errorf(\"unsupported type encountered %v\", root)\r\n\t}\r\n\r\n\treturn nil\r\n}\r\n\r\nfunc verifyVerkle(ctx *cli.Context) error {\r\n\tstack, _ := makeConfigNode(ctx)\r\n\tdefer stack.Close()\r\n\r\n\tchaindb := utils.MakeChainDatabase(ctx, stack, true)\r\n\theadBlock := rawdb.ReadHeadBlock(chaindb)\r\n\tif headBlock == nil {\r\n\t\tlog.Error(\"Failed to load head block\")\r\n\t\treturn errors.New(\"no head block\")\r\n\t}\r\n\tif ctx.NArg() > 1 {\r\n\t\tlog.Error(\"Too many arguments given\")\r\n\t\treturn errors.New(\"too many arguments\")\r\n\t}\r\n\tvar (\r\n\t\trootC common.Hash\r\n\t\terr   error\r\n\t)\r\n\tif ctx.NArg() == 1 {\r\n\t\trootC, err = parseRoot(ctx.Args().First())\r\n\t\tif err != nil {\r\n\t\t\tlog.Error(\"Failed to resolve state root\", \"error\", err)\r\n\t\t\treturn err\r\n\t\t}\r\n\t\tlog.Info(\"Rebuilding the tree\", \"root\", rootC)\r\n\t} else {\r\n\t\trootC = headBlock.Root()\r\n\t\tlog.Info(\"Rebuilding the tree\", \"root\", rootC, \"number\", headBlock.NumberU64())\r\n\t}\r\n\r\n\tserializedRoot, err := chaindb.Get(rootC[:])\r\n\tif err != nil {\r\n\t\treturn err\r\n\t}\r\n\troot, err := verkle.ParseNode(serializedRoot, 0, rootC[:])\r\n\tif err != nil {\r\n\t\treturn err\r\n\t}\r\n\r\n\tif err := checkChildren(root, chaindb.Get); err != nil {\r\n\t\tlog.Error(\"Could not rebuild the tree from the database\", \"err\", err)\r\n\t\treturn err\r\n\t}\r\n\r\n\tlog.Info(\"Tree was rebuilt from the database\")\r\n\treturn nil\r\n}\r\n\r\nfunc expandVerkle(ctx *cli.Context) error {\r\n\tstack, _ := makeConfigNode(ctx)\r\n\tdefer stack.Close()\r\n\r\n\tchaindb := utils.MakeChainDatabase(ctx, stack, true)\r\n\tvar (\r\n\t\trootC   common.Hash\r\n\t\tkeylist [][]byte\r\n\t\terr     error\r\n\t)\r\n\tif ctx.NArg() >= 2 {\r\n\t\trootC, err = parseRoot(ctx.Args().First())\r\n\t\tif err != nil {\r\n\t\t\tlog.Error(\"Failed to resolve state root\", \"error\", err)\r\n\t\t\treturn err\r\n\t\t}\r\n\t\tkeylist = make([][]byte, 0, ctx.Args().Len()-1)\r\n\t\targs := ctx.Args().Slice()\r\n\t\tfor i := range args[1:] {\r\n\t\t\tkey, err := hex.DecodeString(args[i+1])\r\n\t\t\tlog.Info(\"decoded key\", \"arg\", args[i+1], \"key\", key)\r\n\t\t\tif err != nil {\r\n\t\t\t\treturn fmt.Errorf(\"error decoding key #%d: %w\", i+1, err)\r\n\t\t\t}\r\n\t\t\tkeylist = append(keylist, key)\r\n\t\t}\r\n\t\tlog.Info(\"Rebuilding the tree\", \"root\", rootC)\r\n\t} else {\r\n\t\treturn fmt.Errorf(\"usage: %s root key1 [key 2...]\", ctx.App.Name)\r\n\t}\r\n\r\n\tserializedRoot, err := chaindb.Get(rootC[:])\r\n\tif err != nil {\r\n\t\treturn err\r\n\t}\r\n\troot, err := verkle.ParseNode(serializedRoot, 0, rootC[:])\r\n\tif err != nil {\r\n\t\treturn err\r\n\t}\r\n\r\n\tfor i, key := range keylist {\r\n\t\tlog.Info(\"Reading key\", \"index\", i, \"key\", keylist[0])\r\n\t\troot.Get(key, chaindb.Get)\r\n\t}\r\n\r\n\tif err := os.WriteFile(\"dump.dot\", []byte(verkle.ToDot(root)), 0600); err != nil {\r\n\t\tlog.Error(\"Failed to dump file\", \"err\", err)\r\n\t} else {\r\n\t\tlog.Info(\"Tree was dumped to file\", \"file\", \"dump.dot\")\r\n\t}\r\n\treturn nil\r\n}\r\n\r\n> `(cd cmd/geth && go build)` builds without error for me.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1602030790/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
