{
  "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/24720",
  "repository_url": "https://api.github.com/repos/ethereum/go-ethereum",
  "labels_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/24720/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/24720/comments",
  "events_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/24720/events",
  "html_url": "https://github.com/ethereum/go-ethereum/issues/24720",
  "id": 1209272495,
  "node_id": "I_kwDOAOvK985IFAiv",
  "number": 24720,
  "title": "Features for incident analysis",
  "user": {
    "login": "holiman",
    "id": 142290,
    "node_id": "MDQ6VXNlcjE0MjI5MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/142290?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/holiman",
    "html_url": "https://github.com/holiman",
    "followers_url": "https://api.github.com/users/holiman/followers",
    "following_url": "https://api.github.com/users/holiman/following{/other_user}",
    "gists_url": "https://api.github.com/users/holiman/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/holiman/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/holiman/subscriptions",
    "organizations_url": "https://api.github.com/users/holiman/orgs",
    "repos_url": "https://api.github.com/users/holiman/repos",
    "events_url": "https://api.github.com/users/holiman/events{/privacy}",
    "received_events_url": "https://api.github.com/users/holiman/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 72233652,
      "node_id": "MDU6TGFiZWw3MjIzMzY1Mg==",
      "url": "https://api.github.com/repos/ethereum/go-ethereum/labels/type:feature",
      "name": "type:feature",
      "color": "84b6eb",
      "default": false,
      "description": null
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 3,
  "created_at": "2022-04-20T07:26:41Z",
  "updated_at": "2022-05-11T21:24:45Z",
  "closed_at": null,
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "Here are some features which would be good to have, going towards the merge: \r\n\r\n- [ ] `GetBlockReceiptsRLP`. Currently, we have no way to obtain the raw rlp receipt-blobs which make up the `receiptsRoot` for a block. \r\n- [ ] Automatically trace new bad blocks to filesystem (memory=disabled, storage=disabled). \r\n- [x] Ability to do `geth db get(put/delete?)` via RPC layer\r\n- [ ] Ability to change the `gcMode` via RPC. Right now, it's either archive=mode or 2-hours-processing-mode. When the node nears an upcoming fork, it would be nice to set it to flush e.g. after `5m` processing, or `512 blocks`, and later be able to set it back to a mode which is less disk-heavy. \r\n- [ ] Ability to \"drop the network\"/ \"go offline from p2p/discovery\" via RPC (keep rpc up though\r\n\r\nDecided to skip: \r\n\r\n- [ ] `debug.flushState()`. Somehow, it would be nice to be able to flush the state for a certain block. As it is now, we have `128*14` seconds, or about `30m` to investigate (e..g get a trace) from a progressing \"good\" node before a state is forgotten. After that point, we can do `reexec`, but the `reexec` never flushes state to disk, so operating on an old state might mean half an hour reexec performed again on every call. \r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/24720/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/24720/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1103891192",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/24720#issuecomment-1103891192",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/24720",
    "id": 1103891192,
    "node_id": "IC_kwDOAOvK985BzAr4",
    "user": {
      "login": "holiman",
      "id": 142290,
      "node_id": "MDQ6VXNlcjE0MjI5MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/142290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/holiman",
      "html_url": "https://github.com/holiman",
      "followers_url": "https://api.github.com/users/holiman/followers",
      "following_url": "https://api.github.com/users/holiman/following{/other_user}",
      "gists_url": "https://api.github.com/users/holiman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/holiman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/holiman/subscriptions",
      "organizations_url": "https://api.github.com/users/holiman/orgs",
      "repos_url": "https://api.github.com/users/holiman/repos",
      "events_url": "https://api.github.com/users/holiman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/holiman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-20T12:46:49Z",
    "updated_at": "2022-04-20T12:46:49Z",
    "author_association": "MEMBER",
    "body": "Another one: \r\nIt would be good to make the prestateTracer compatible with `t8n`. Example\r\n\r\n```json\r\n{\r\n  \"env\": {\r\n    \"currentCoinbase\": \"0xc94f5374fce5edbc8e2a8697c15331677e6ebf0b\",\r\n    \"currentDifficulty\": \"0x20000\",\r\n    \"currentGasLimit\": \"0x750a163df65e8a\",\r\n    \"currentNumber\": \"1\",\r\n    \"currentTimestamp\": \"1000\"\r\n  },\r\n  \"alloc\": {\r\n    \"a94f5374fce5edbc8e2a8697c15331677e6ebf0b\": {\r\n      \"balance\": \"0x5ffd4878be161d74\",\r\n      \"code\": \"0x\",\r\n      \"nonce\": \"0xac\",\r\n      \"storage\": {}\r\n    },\r\n    \"0x8a8eafb1cf62bfbeb1741769dae1a9dd47996192\": {\r\n      \"balance\": \"0xfeedbead\",\r\n      \"nonce\": \"0x00\"\r\n    }\r\n  }\r\n}\r\n```\r\nThis is compatible with `evm t8n`: \r\n```\r\n[user@work evm]$ cat foobar.json | ./evm t8n --input.alloc=stdin --input.txs=./testdata/1/txs.json --input.env=stdin --output.alloc=stdout --trace\r\nINFO [04-20|14:43:00.126] rejected tx                              index=1 hash=0557ba..18d673 from=0x8A8eAFb1cf62BfBeb1741769DAE1a9dd47996192 error=\"nonce too low: address 0x8A8eAFb1cf62BfBeb1741769DAE1a9dd47996192, tx: 0 state: 1\"\r\nINFO [04-20|14:43:00.126] Trie dumping started                     root=84208a..ae4e13\r\nINFO [04-20|14:43:00.127] Trie dumping complete                    accounts=3 elapsed=\"68.344Âµs\"\r\nINFO [04-20|14:43:00.127] Wrote file                               file=result.json\r\n```\r\nIf we can make an online node spit out the such an env+alloc file, then we can more easily try out patches and in general analyze what's happening on a given transaction, in case the evm is misbehaving.\r\n\r\nThis is basically the original reason for why I made `prestateTracer` in the first place, but I suspect it's a bit bitrotted by now. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1103891192/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1106868099",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/24720#issuecomment-1106868099",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/24720",
    "id": 1106868099,
    "node_id": "IC_kwDOAOvK985B-XeD",
    "user": {
      "login": "ryanschneider",
      "id": 53520,
      "node_id": "MDQ6VXNlcjUzNTIw",
      "avatar_url": "https://avatars.githubusercontent.com/u/53520?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanschneider",
      "html_url": "https://github.com/ryanschneider",
      "followers_url": "https://api.github.com/users/ryanschneider/followers",
      "following_url": "https://api.github.com/users/ryanschneider/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanschneider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanschneider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanschneider/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanschneider/orgs",
      "repos_url": "https://api.github.com/users/ryanschneider/repos",
      "events_url": "https://api.github.com/users/ryanschneider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanschneider/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-22T21:12:10Z",
    "updated_at": "2022-04-22T21:12:10Z",
    "author_association": "CONTRIBUTOR",
    "body": "> GetBlockReceiptsRLP. Currently, we have no way to obtain the raw rlp receipt-blobs which make up the receiptsRoot for a block.\r\n\r\nIMO `RLP` isn't the right term any more post-EIP-2718, I used `Binary` in https://github.com/ethereum/go-ethereum/pull/24741 (which just dumps a single receipt, not all the block receipts).\r\n\r\nFor `debug_getBlockReceiptsBinary` I think it should return either an array of tx binaries or even a map of `{index: binary}`, since that's the input to the receipts root trie.  For example on Sepolia block `0x59d58395078eb687813eeade09f4ccd3a40084e607c3b0e0b987794c12be48cc` (https://sepolia.otterscan.io/block/852597):\r\n\r\n```\r\n> debug.getBlockReceiptsBinary(\"0x59d58395078eb687813eeade09f4ccd3a40084e607c3b0e0b987794c12be48cc\")\r\n{\r\n  0: \"0x02f901850182aebbb9010000800000000000000000000000000000000000000000100000020000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000400000000000000000f87cf87a94830bf80a3839b300291915e7c67b70d90823ffedf842a0e1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109ca00000000000000000000000001b57edab586cbdabd4d914869ae8bb78dbc05571a00000000000000000000000000000000000000000000000000de0b6b3a7640000\"\r\n}\r\n```\r\n\r\nI personally prefer the map format since it reinforces the key/value relationship in the receipts root trie, but am totally open to it being a simple array as well.  Either way, it'd be nice if it was paired w/ a `debug.calculateReceiptsRoot` method that took the same form, so one could do:\r\n\r\n```\r\n> receipts = debug.getBlockReceiptsBinary(\"0x59d58395078eb687813eeade09f4ccd3a40084e607c3b0e0b987794c12be48cc\")\r\n> .. potentially tweak the receipts if debugging something ...\r\n> root = debug.calculateReceiptsRoot(receipts)\r\n\"0x7800894d3a17b7f4ce8f17f96740e13696982605164eb4465bdd8a313d0953a5\"\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1106868099/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1107633928",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/24720#issuecomment-1107633928",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/24720",
    "id": 1107633928,
    "node_id": "IC_kwDOAOvK985CBScI",
    "user": {
      "login": "MariusVanDerWijden",
      "id": 16664698,
      "node_id": "MDQ6VXNlcjE2NjY0Njk4",
      "avatar_url": "https://avatars.githubusercontent.com/u/16664698?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MariusVanDerWijden",
      "html_url": "https://github.com/MariusVanDerWijden",
      "followers_url": "https://api.github.com/users/MariusVanDerWijden/followers",
      "following_url": "https://api.github.com/users/MariusVanDerWijden/following{/other_user}",
      "gists_url": "https://api.github.com/users/MariusVanDerWijden/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MariusVanDerWijden/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MariusVanDerWijden/subscriptions",
      "organizations_url": "https://api.github.com/users/MariusVanDerWijden/orgs",
      "repos_url": "https://api.github.com/users/MariusVanDerWijden/repos",
      "events_url": "https://api.github.com/users/MariusVanDerWijden/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MariusVanDerWijden/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-23T19:12:07Z",
    "updated_at": "2022-04-23T19:12:07Z",
    "author_association": "MEMBER",
    "body": "We could, instead of implementing `flushState` also add an additional config flag that stores the state during reexec, so subsequent calls are cached",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1107633928/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
