{
  "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/24025",
  "repository_url": "https://api.github.com/repos/ethereum/go-ethereum",
  "labels_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/24025/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/24025/comments",
  "events_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/24025/events",
  "html_url": "https://github.com/ethereum/go-ethereum/issues/24025",
  "id": 1068237164,
  "node_id": "I_kwDOAOvK984_rAFs",
  "number": 24025,
  "title": "Override of block number in eth_call and tracing",
  "user": {
    "login": "t-anyu",
    "id": 34425594,
    "node_id": "MDQ6VXNlcjM0NDI1NTk0",
    "avatar_url": "https://avatars.githubusercontent.com/u/34425594?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/t-anyu",
    "html_url": "https://github.com/t-anyu",
    "followers_url": "https://api.github.com/users/t-anyu/followers",
    "following_url": "https://api.github.com/users/t-anyu/following{/other_user}",
    "gists_url": "https://api.github.com/users/t-anyu/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/t-anyu/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/t-anyu/subscriptions",
    "organizations_url": "https://api.github.com/users/t-anyu/orgs",
    "repos_url": "https://api.github.com/users/t-anyu/repos",
    "events_url": "https://api.github.com/users/t-anyu/events{/privacy}",
    "received_events_url": "https://api.github.com/users/t-anyu/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 268304226,
      "node_id": "MDU6TGFiZWwyNjgzMDQyMjY=",
      "url": "https://api.github.com/repos/ethereum/go-ethereum/labels/type:docs",
      "name": "type:docs",
      "color": "fef2c0",
      "default": false,
      "description": null
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 7,
  "created_at": "2021-12-01T10:35:11Z",
  "updated_at": "2022-08-25T02:57:28Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "Hey,\r\n\r\nAre there any methods to modify protected global variables such as block.number on debug calls? Or can this be done with EVM tool? For example I'd like to increment block.number during my solidity function call (debug call, not sending).\r\n\r\nOr alternatively can I do joined debug_traceCalls, so that the EVM/geth remembers the state of my last call? Or perhaps if I could implement a special opcode to increment global variables on the contract call?\r\n\r\n\r\nThanks",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/24025/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/24025/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/983544267",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/24025#issuecomment-983544267",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/24025",
    "id": 983544267,
    "node_id": "IC_kwDOAOvK9846n7HL",
    "user": {
      "login": "karalabe",
      "id": 129561,
      "node_id": "MDQ6VXNlcjEyOTU2MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/129561?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/karalabe",
      "html_url": "https://github.com/karalabe",
      "followers_url": "https://api.github.com/users/karalabe/followers",
      "following_url": "https://api.github.com/users/karalabe/following{/other_user}",
      "gists_url": "https://api.github.com/users/karalabe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/karalabe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/karalabe/subscriptions",
      "organizations_url": "https://api.github.com/users/karalabe/orgs",
      "repos_url": "https://api.github.com/users/karalabe/repos",
      "events_url": "https://api.github.com/users/karalabe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/karalabe/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-12-01T11:23:23Z",
    "updated_at": "2021-12-01T11:23:23Z",
    "author_association": "MEMBER",
    "body": "> Or perhaps if I could implement a special opcode to increment global variables on the contract call?\r\n\r\nDefinitely not, it would break way too many thing and be too dangerous to keep around.\r\n\r\n> I'd like to increment block.number during my solidity function call (debug call, not sending).\r\n\r\nWhat would be the purpose of that? Do you have an example?\r\n\r\n> can I do joined debug_traceCalls, so that the EVM/geth remembers the state of my last call?\r\n\r\nThere's no current functionality for it, but it did occur to me a few times that users might want trace a call on top of a intermediate state and it might be a good idea to allow it. Perhaps we could extend traceCall with an initial set of \"prep\" calls that mutates the state before the actual tracing?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/983544267/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/983558817",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/24025#issuecomment-983558817",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/24025",
    "id": 983558817,
    "node_id": "IC_kwDOAOvK9846n-qh",
    "user": {
      "login": "t-anyu",
      "id": 34425594,
      "node_id": "MDQ6VXNlcjM0NDI1NTk0",
      "avatar_url": "https://avatars.githubusercontent.com/u/34425594?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/t-anyu",
      "html_url": "https://github.com/t-anyu",
      "followers_url": "https://api.github.com/users/t-anyu/followers",
      "following_url": "https://api.github.com/users/t-anyu/following{/other_user}",
      "gists_url": "https://api.github.com/users/t-anyu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/t-anyu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/t-anyu/subscriptions",
      "organizations_url": "https://api.github.com/users/t-anyu/orgs",
      "repos_url": "https://api.github.com/users/t-anyu/repos",
      "events_url": "https://api.github.com/users/t-anyu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/t-anyu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-12-01T11:43:04Z",
    "updated_at": "2021-12-01T11:49:21Z",
    "author_association": "NONE",
    "body": "Hey Karalabe,\r\n\r\nThe current purpose is to debugTrace my code which has protection (lock) mechanism based on block.number.  Other purpose that I'm thinking about is for example detecting if a public live contract is malicious.\r\n\r\nThe prep calls would be very useful for my use case. And I think it would be the most flexible method.\r\n\r\nThe special opcode I was referring to would just be for my own usage but just wondered if there were better approaches.\r\n\r\nThanks\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/983558817/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/984718961",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/24025#issuecomment-984718961",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/24025",
    "id": 984718961,
    "node_id": "IC_kwDOAOvK9846sZ5x",
    "user": {
      "login": "fjl",
      "id": 6915,
      "node_id": "MDQ6VXNlcjY5MTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6915?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjl",
      "html_url": "https://github.com/fjl",
      "followers_url": "https://api.github.com/users/fjl/followers",
      "following_url": "https://api.github.com/users/fjl/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjl/subscriptions",
      "organizations_url": "https://api.github.com/users/fjl/orgs",
      "repos_url": "https://api.github.com/users/fjl/repos",
      "events_url": "https://api.github.com/users/fjl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjl/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-12-02T15:12:36Z",
    "updated_at": "2021-12-02T15:13:02Z",
    "author_association": "MEMBER",
    "body": "I think the request here is to have a way of overriding the block number seen by the EVM during eth_call and in tracing. This is a reasonable idea since we already allow other state overrides. \r\n\r\nQuestion is mostly how we could encode it into the override parameter. At the moment, the override parameter is an object with account addresses as keys. There is no way to fit the block number in there. We would have to add another parameter with EVM overrides. It might also be useful to allow overriding the block timestamp and hash, for example.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/984718961/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/984808502",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/24025#issuecomment-984808502",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/24025",
    "id": 984808502,
    "node_id": "IC_kwDOAOvK9846svw2",
    "user": {
      "login": "t-anyu",
      "id": 34425594,
      "node_id": "MDQ6VXNlcjM0NDI1NTk0",
      "avatar_url": "https://avatars.githubusercontent.com/u/34425594?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/t-anyu",
      "html_url": "https://github.com/t-anyu",
      "followers_url": "https://api.github.com/users/t-anyu/followers",
      "following_url": "https://api.github.com/users/t-anyu/following{/other_user}",
      "gists_url": "https://api.github.com/users/t-anyu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/t-anyu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/t-anyu/subscriptions",
      "organizations_url": "https://api.github.com/users/t-anyu/orgs",
      "repos_url": "https://api.github.com/users/t-anyu/repos",
      "events_url": "https://api.github.com/users/t-anyu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/t-anyu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-12-02T16:50:17Z",
    "updated_at": "2021-12-02T16:50:17Z",
    "author_association": "NONE",
    "body": "Hey,\r\n\r\nI'm not familiar with geth's code, but I would suggest using state override set used in eth_call.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/984808502/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/986377057",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/24025#issuecomment-986377057",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/24025",
    "id": 986377057,
    "node_id": "IC_kwDOAOvK9846yuth",
    "user": {
      "login": "t-anyu",
      "id": 34425594,
      "node_id": "MDQ6VXNlcjM0NDI1NTk0",
      "avatar_url": "https://avatars.githubusercontent.com/u/34425594?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/t-anyu",
      "html_url": "https://github.com/t-anyu",
      "followers_url": "https://api.github.com/users/t-anyu/followers",
      "following_url": "https://api.github.com/users/t-anyu/following{/other_user}",
      "gists_url": "https://api.github.com/users/t-anyu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/t-anyu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/t-anyu/subscriptions",
      "organizations_url": "https://api.github.com/users/t-anyu/orgs",
      "repos_url": "https://api.github.com/users/t-anyu/repos",
      "events_url": "https://api.github.com/users/t-anyu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/t-anyu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-12-06T02:15:17Z",
    "updated_at": "2021-12-06T02:15:17Z",
    "author_association": "NONE",
    "body": "> > Or perhaps if I could implement a special opcode to increment global variables on the contract call?\r\n> \r\n> Definitely not, it would break way too many thing and be too dangerous to keep around.\r\n> \r\n> > I'd like to increment block.number during my solidity function call (debug call, not sending).\r\n> \r\n> What would be the purpose of that? Do you have an example?\r\n> \r\n> > can I do joined debug_traceCalls, so that the EVM/geth remembers the state of my last call?\r\n> \r\n> There's no current functionality for it, but it did occur to me a few times that users might want trace a call on top of a intermediate state and it might be a good idea to allow it. Perhaps we could extend traceCall with an initial set of \"prep\" calls that mutates the state before the actual tracing?\r\n\r\nHey karalabe,\r\n\r\nI think the prep calls or ability to join multiple calls together will be quite useful here. I tried to examine a bit of geth's code: would prep calls or ability to execute multiple eth_calls with remembered state be realized for example by keeping statedb the same, but applying core.ApplyMessage(vmenv, message, ...) multiple times on the same vmenv instance? (api.go, line 898)\r\n\r\nThanks",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/986377057/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/989711042",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/24025#issuecomment-989711042",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/24025",
    "id": 989711042,
    "node_id": "IC_kwDOAOvK9846_crC",
    "user": {
      "login": "fjl",
      "id": 6915,
      "node_id": "MDQ6VXNlcjY5MTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6915?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjl",
      "html_url": "https://github.com/fjl",
      "followers_url": "https://api.github.com/users/fjl/followers",
      "following_url": "https://api.github.com/users/fjl/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjl/subscriptions",
      "organizations_url": "https://api.github.com/users/fjl/orgs",
      "repos_url": "https://api.github.com/users/fjl/repos",
      "events_url": "https://api.github.com/users/fjl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjl/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-12-09T10:16:30Z",
    "updated_at": "2021-12-09T10:16:30Z",
    "author_association": "MEMBER",
    "body": "I have created a new issue for your second request. Let's keep this issue about the first request, overriding the block number.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/989711042/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1226711354",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/24025#issuecomment-1226711354",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/24025",
    "id": 1226711354,
    "node_id": "IC_kwDOAOvK985JHiE6",
    "user": {
      "login": "DiveInto",
      "id": 698482,
      "node_id": "MDQ6VXNlcjY5ODQ4Mg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/698482?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DiveInto",
      "html_url": "https://github.com/DiveInto",
      "followers_url": "https://api.github.com/users/DiveInto/followers",
      "following_url": "https://api.github.com/users/DiveInto/following{/other_user}",
      "gists_url": "https://api.github.com/users/DiveInto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DiveInto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DiveInto/subscriptions",
      "organizations_url": "https://api.github.com/users/DiveInto/orgs",
      "repos_url": "https://api.github.com/users/DiveInto/repos",
      "events_url": "https://api.github.com/users/DiveInto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DiveInto/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-25T02:57:28Z",
    "updated_at": "2022-08-25T02:57:28Z",
    "author_association": "NONE",
    "body": "> I think the request here is to have a way of overriding the block number seen by the EVM during eth_call and in tracing. This is a reasonable idea since we already allow other state overrides.\r\n> \r\n> Question is mostly how we could encode it into the override parameter. At the moment, the override parameter is an object with account addresses as keys. There is no way to fit the block number in there. We would have to add another parameter with EVM overrides. It might also be useful to allow overriding the block timestamp and hash, for example.\r\n\r\n\"overriding the block timestamp\" can be useful.\r\n\r\nfor orders with startTime & expirationTime constraints, if an order has a startTime > curBlock.timestamp, overriding the current block's timestamp will be helpful to test the match result at current block, instead of waiting for the order become valid.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1226711354/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
