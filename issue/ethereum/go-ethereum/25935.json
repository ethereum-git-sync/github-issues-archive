{
  "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/25935",
  "repository_url": "https://api.github.com/repos/ethereum/go-ethereum",
  "labels_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/25935/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/25935/comments",
  "events_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/25935/events",
  "html_url": "https://github.com/ethereum/go-ethereum/issues/25935",
  "id": 1398576833,
  "node_id": "I_kwDOAOvK985TXJbB",
  "number": 25935,
  "title": "Testing finalization in a proof-of-stake local net",
  "user": {
    "login": "AaronKutch",
    "id": 32419308,
    "node_id": "MDQ6VXNlcjMyNDE5MzA4",
    "avatar_url": "https://avatars.githubusercontent.com/u/32419308?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/AaronKutch",
    "html_url": "https://github.com/AaronKutch",
    "followers_url": "https://api.github.com/users/AaronKutch/followers",
    "following_url": "https://api.github.com/users/AaronKutch/following{/other_user}",
    "gists_url": "https://api.github.com/users/AaronKutch/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/AaronKutch/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/AaronKutch/subscriptions",
    "organizations_url": "https://api.github.com/users/AaronKutch/orgs",
    "repos_url": "https://api.github.com/users/AaronKutch/repos",
    "events_url": "https://api.github.com/users/AaronKutch/events{/privacy}",
    "received_events_url": "https://api.github.com/users/AaronKutch/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 72233650,
      "node_id": "MDU6TGFiZWw3MjIzMzY1MA==",
      "url": "https://api.github.com/repos/ethereum/go-ethereum/labels/type:bug",
      "name": "type:bug",
      "color": "FF5E5E",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 8,
  "created_at": "2022-10-06T01:08:00Z",
  "updated_at": "2022-10-06T14:58:05Z",
  "closed_at": "2022-10-06T06:37:33Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "We have a bridge that uses RPC calls to `geth`, and we need to make absolutely sure that reorgs do not happen. We previously used `eth_getBlockByNumber` with `latest` plus 35 blocks, but after the merge it appears we should use `eth_getBlockByNumber` with `finalized` to be conservative. Our local tests currently initialize a genesis with \"londonBlock\" being the latest fork and `geth --nodiscover --mine ...` to start a local net that immediately seals blocks.\r\n\r\nAfter looking at the source code, it appears I should want this in my genesis configuration:\r\n```\r\n      \"homesteadBlock\": 0,\r\n      \"eip150Block\": 0,\r\n      \"eip155Block\": 0,\r\n      \"eip158Block\": 0,\r\n      \"byzantiumBlock\": 0,\r\n      \"constantinopleBlock\": 0,\r\n      \"petersburgBlock\": 0,\r\n      \"istanbulBlock\": 0,\r\n      \"muirGlacierBlock\": 0,\r\n      \"berlinBlock\": 0,\r\n      \"londonBlock\": 0,\r\n      \"arrowGlacierBlock\": 0,\r\n      \"grayGlacierBlock\": 0,\r\n      \"terminalTotalDifficulty\": 0, // note all three of these are required for the logs to show a successful merged state at genesis\r\n      \"terminalTotalDifficultyPassed\": true,\r\n      \"mergeNetsplitBlock\": 0,\r\n```\r\nWhen only making changes to include the forks up to the merge, the tests break by `geth` responding with transaction ids after 15 seconds as normal, but it does not create any new blocks. Querying with `finalized` always results in `null` with or without the changes.\r\n\r\nI realized today that maybe we have been doing the local tests wrong and that the local instant sealing is happening simply because the node has no competition, and we should have used the `--dev` flag. However, `--dev` doesn't work for us because it seems to override the genesis and force pre-merge PoW behavior.\r\n\r\nAs an additional note, we do not want to wait for the standard 15 second block and 32 block epochs in local testing, so either there needs to be a PoS equivalent to the current `--mine` or `--dev` behavior that does immediate justification and finalization of blocks, or some way of customizing the periods.",
  "closed_by": {
    "login": "holiman",
    "id": 142290,
    "node_id": "MDQ6VXNlcjE0MjI5MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/142290?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/holiman",
    "html_url": "https://github.com/holiman",
    "followers_url": "https://api.github.com/users/holiman/followers",
    "following_url": "https://api.github.com/users/holiman/following{/other_user}",
    "gists_url": "https://api.github.com/users/holiman/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/holiman/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/holiman/subscriptions",
    "organizations_url": "https://api.github.com/users/holiman/orgs",
    "repos_url": "https://api.github.com/users/holiman/repos",
    "events_url": "https://api.github.com/users/holiman/events{/privacy}",
    "received_events_url": "https://api.github.com/users/holiman/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/25935/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/25935/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1269183669",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/25935#issuecomment-1269183669",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/25935",
    "id": 1269183669,
    "node_id": "IC_kwDOAOvK985LpjS1",
    "user": {
      "login": "garyng2000",
      "id": 241666,
      "node_id": "MDQ6VXNlcjI0MTY2Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/241666?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/garyng2000",
      "html_url": "https://github.com/garyng2000",
      "followers_url": "https://api.github.com/users/garyng2000/followers",
      "following_url": "https://api.github.com/users/garyng2000/following{/other_user}",
      "gists_url": "https://api.github.com/users/garyng2000/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/garyng2000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/garyng2000/subscriptions",
      "organizations_url": "https://api.github.com/users/garyng2000/orgs",
      "repos_url": "https://api.github.com/users/garyng2000/repos",
      "events_url": "https://api.github.com/users/garyng2000/events{/privacy}",
      "received_events_url": "https://api.github.com/users/garyng2000/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-10-06T01:23:35Z",
    "updated_at": "2022-10-06T01:23:35Z",
    "author_association": "NONE",
    "body": "yes, there needs to be a way to continue develop using private network yet have the 'ability' of the post-merge work, without the CL.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1269183669/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1269416086",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/25935#issuecomment-1269416086",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/25935",
    "id": 1269416086,
    "node_id": "IC_kwDOAOvK985LqcCW",
    "user": {
      "login": "holiman",
      "id": 142290,
      "node_id": "MDQ6VXNlcjE0MjI5MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/142290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/holiman",
      "html_url": "https://github.com/holiman",
      "followers_url": "https://api.github.com/users/holiman/followers",
      "following_url": "https://api.github.com/users/holiman/following{/other_user}",
      "gists_url": "https://api.github.com/users/holiman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/holiman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/holiman/subscriptions",
      "organizations_url": "https://api.github.com/users/holiman/orgs",
      "repos_url": "https://api.github.com/users/holiman/repos",
      "events_url": "https://api.github.com/users/holiman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/holiman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-10-06T06:37:33Z",
    "updated_at": "2022-10-06T06:37:33Z",
    "author_association": "MEMBER",
    "body": "Two things: \r\n\r\n> geth --nodiscover --mine ... to start a local net that immediately seals blocks.\r\n\r\nand\r\n\r\n```\r\n      \"terminalTotalDifficulty\": 0, // note all three of these are required for the logs to show a successful merged state at genesis\r\n      \"terminalTotalDifficultyPassed\": true,\r\n      \"mergeNetsplitBlock\": 0,\r\n```\r\nAre conflicting. On one hand, you're telling geth to mine, as if it's a regular clique/ethash network. On the other hand, you're telling geth that the TTD is passed - therefore the CL should direct things like block creation and validation. \r\n\r\nYou need to decide either on keeping the old ways, or doing it in post-merge style, with an attendant CL infrastructure. \r\n\r\n\r\n> yes, there needs to be a way to continue develop using private network yet have the 'ability' of the post-merge work, without the CL.\r\n\r\nThat's simple, just don't configure the merge on the private network. \r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1269416086/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1269421770",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/25935#issuecomment-1269421770",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/25935",
    "id": 1269421770,
    "node_id": "IC_kwDOAOvK985LqdbK",
    "user": {
      "login": "garyng2000",
      "id": 241666,
      "node_id": "MDQ6VXNlcjI0MTY2Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/241666?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/garyng2000",
      "html_url": "https://github.com/garyng2000",
      "followers_url": "https://api.github.com/users/garyng2000/followers",
      "following_url": "https://api.github.com/users/garyng2000/following{/other_user}",
      "gists_url": "https://api.github.com/users/garyng2000/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/garyng2000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/garyng2000/subscriptions",
      "organizations_url": "https://api.github.com/users/garyng2000/orgs",
      "repos_url": "https://api.github.com/users/garyng2000/repos",
      "events_url": "https://api.github.com/users/garyng2000/events{/privacy}",
      "received_events_url": "https://api.github.com/users/garyng2000/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-10-06T06:42:03Z",
    "updated_at": "2022-10-06T06:42:03Z",
    "author_association": "NONE",
    "body": "that is what I am doing for my private network. But let's say if there is another upgrade in the future where the feature changed, I can't keep on using 'pre-merge' setup, unless each individual upgrade is independent.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1269421770/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1269429940",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/25935#issuecomment-1269429940",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/25935",
    "id": 1269429940,
    "node_id": "IC_kwDOAOvK985Lqfa0",
    "user": {
      "login": "holiman",
      "id": 142290,
      "node_id": "MDQ6VXNlcjE0MjI5MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/142290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/holiman",
      "html_url": "https://github.com/holiman",
      "followers_url": "https://api.github.com/users/holiman/followers",
      "following_url": "https://api.github.com/users/holiman/following{/other_user}",
      "gists_url": "https://api.github.com/users/holiman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/holiman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/holiman/subscriptions",
      "organizations_url": "https://api.github.com/users/holiman/orgs",
      "repos_url": "https://api.github.com/users/holiman/repos",
      "events_url": "https://api.github.com/users/holiman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/holiman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-10-06T06:48:30Z",
    "updated_at": "2022-10-06T06:48:30Z",
    "author_association": "MEMBER",
    "body": "Right.. We maintain geth as an ethereum mainnet client. This means that we are happy to support non-ethereum-mainnet usecases  as best we can, but not if the cost of maintenance is too high. \r\n\r\nSo yes, at some point, it may be the case that geth will either not support non-merged network, OR, as you point out, that geth does support non-merged networks, but does not support post-merge forks on such networks. \r\n\r\nI'm not saying that's a given, though, but I agree there's a chance it might happen. So, hope for the best but prepare for the worst, I guess :) ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1269429940/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1269437245",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/25935#issuecomment-1269437245",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/25935",
    "id": 1269437245,
    "node_id": "IC_kwDOAOvK985LqhM9",
    "user": {
      "login": "garyng2000",
      "id": 241666,
      "node_id": "MDQ6VXNlcjI0MTY2Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/241666?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/garyng2000",
      "html_url": "https://github.com/garyng2000",
      "followers_url": "https://api.github.com/users/garyng2000/followers",
      "following_url": "https://api.github.com/users/garyng2000/following{/other_user}",
      "gists_url": "https://api.github.com/users/garyng2000/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/garyng2000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/garyng2000/subscriptions",
      "organizations_url": "https://api.github.com/users/garyng2000/orgs",
      "repos_url": "https://api.github.com/users/garyng2000/repos",
      "events_url": "https://api.github.com/users/garyng2000/events{/privacy}",
      "received_events_url": "https://api.github.com/users/garyng2000/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-10-06T06:54:18Z",
    "updated_at": "2022-10-06T06:54:18Z",
    "author_association": "NONE",
    "body": "actually, the broader question is how one can setup a private network of both CL and EL. Testing/developing on testnets is extremely inefficient (getting the test ETH itself is difficult).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1269437245/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1269443335",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/25935#issuecomment-1269443335",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/25935",
    "id": 1269443335,
    "node_id": "IC_kwDOAOvK985LqisH",
    "user": {
      "login": "holiman",
      "id": 142290,
      "node_id": "MDQ6VXNlcjE0MjI5MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/142290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/holiman",
      "html_url": "https://github.com/holiman",
      "followers_url": "https://api.github.com/users/holiman/followers",
      "following_url": "https://api.github.com/users/holiman/following{/other_user}",
      "gists_url": "https://api.github.com/users/holiman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/holiman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/holiman/subscriptions",
      "organizations_url": "https://api.github.com/users/holiman/orgs",
      "repos_url": "https://api.github.com/users/holiman/repos",
      "events_url": "https://api.github.com/users/holiman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/holiman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-10-06T06:58:49Z",
    "updated_at": "2022-10-06T06:58:49Z",
    "author_association": "MEMBER",
    "body": "> actually, the broader question is how one can setup a private network of both CL and EL.\r\n\r\nRight, I totally agree! And there have been some discussions about that, for example (IIUC) building a clique-based \"CL client\" which basically is a virtual CL inside of geth that directs geth via the beacon api endpoints (catalyst). \r\n\r\nWe definitely need more tooling here. cc @protolambda @fjl  who have been part of the discussions",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1269443335/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1270193092",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/25935#issuecomment-1270193092",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/25935",
    "id": 1270193092,
    "node_id": "IC_kwDOAOvK985LtZvE",
    "user": {
      "login": "AaronKutch",
      "id": 32419308,
      "node_id": "MDQ6VXNlcjMyNDE5MzA4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32419308?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AaronKutch",
      "html_url": "https://github.com/AaronKutch",
      "followers_url": "https://api.github.com/users/AaronKutch/followers",
      "following_url": "https://api.github.com/users/AaronKutch/following{/other_user}",
      "gists_url": "https://api.github.com/users/AaronKutch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AaronKutch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AaronKutch/subscriptions",
      "organizations_url": "https://api.github.com/users/AaronKutch/orgs",
      "repos_url": "https://api.github.com/users/AaronKutch/repos",
      "events_url": "https://api.github.com/users/AaronKutch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AaronKutch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-10-06T14:47:20Z",
    "updated_at": "2022-10-06T14:47:20Z",
    "author_association": "NONE",
    "body": "> Are conflicting. On one hand, you're telling geth to mine, as if it's a regular clique/ethash network. On the other hand, you're telling geth that the TTD is passed - therefore the CL should direct things like block creation and validation.\n\nYes, I know that this is a conflict. I am just showing you how I used to set up tests. The point of this issue is that I can't find a way to do likewise quick tests with post-merge behavior. In most cases post-merge changes nothing about developer workflows, but the safety of our bridge is intimately connected with the finalization process. It seems the 'finalized' and 'safe' options are null until post merge.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1270193092/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1270212695",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/25935#issuecomment-1270212695",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/25935",
    "id": 1270212695,
    "node_id": "IC_kwDOAOvK985LtehX",
    "user": {
      "login": "AaronKutch",
      "id": 32419308,
      "node_id": "MDQ6VXNlcjMyNDE5MzA4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32419308?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AaronKutch",
      "html_url": "https://github.com/AaronKutch",
      "followers_url": "https://api.github.com/users/AaronKutch/followers",
      "following_url": "https://api.github.com/users/AaronKutch/following{/other_user}",
      "gists_url": "https://api.github.com/users/AaronKutch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AaronKutch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AaronKutch/subscriptions",
      "organizations_url": "https://api.github.com/users/AaronKutch/orgs",
      "repos_url": "https://api.github.com/users/AaronKutch/repos",
      "events_url": "https://api.github.com/users/AaronKutch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AaronKutch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-10-06T14:58:05Z",
    "updated_at": "2022-10-06T14:58:05Z",
    "author_association": "NONE",
    "body": "Most other Eth-compatible projects I have messed with have a very customizable '--dev' option, but geths current '--dev' just overrides the genesis with PoW-only assumptions. I think what I want is a third proof-of-stake option in the genesis besides the ethhash and clique options that allows me to customize the epochs, and some kind of '--dev-pos' flag that allows a single node network and does not override the genesis ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1270212695/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
