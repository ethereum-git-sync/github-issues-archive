{
  "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/21704",
  "repository_url": "https://api.github.com/repos/ethereum/go-ethereum",
  "labels_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/21704/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/21704/comments",
  "events_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/21704/events",
  "html_url": "https://github.com/ethereum/go-ethereum/issues/21704",
  "id": 721110812,
  "node_id": "MDU6SXNzdWU3MjExMTA4MTI=",
  "number": 21704,
  "title": "Ask a question about StateDB.updateStateObject",
  "user": {
    "login": "jacklightChen",
    "id": 20631913,
    "node_id": "MDQ6VXNlcjIwNjMxOTEz",
    "avatar_url": "https://avatars.githubusercontent.com/u/20631913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jacklightChen",
    "html_url": "https://github.com/jacklightChen",
    "followers_url": "https://api.github.com/users/jacklightChen/followers",
    "following_url": "https://api.github.com/users/jacklightChen/following{/other_user}",
    "gists_url": "https://api.github.com/users/jacklightChen/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jacklightChen/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jacklightChen/subscriptions",
    "organizations_url": "https://api.github.com/users/jacklightChen/orgs",
    "repos_url": "https://api.github.com/users/jacklightChen/repos",
    "events_url": "https://api.github.com/users/jacklightChen/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jacklightChen/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2020-10-14T03:46:27Z",
  "updated_at": "2020-10-15T07:23:36Z",
  "closed_at": "2020-10-15T07:23:35Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "In `core/state/statedb.go` , `data, err := rlp.EncodeToBytes(obj)`, the value of addr updated in mpt is `rlp(obj)`.                  \r\n(obj is the addr related stateObject)\r\n```\r\n// updateStateObject writes the given object to the trie.\r\nfunc (s *StateDB) updateStateObject(obj *stateObject) {\r\n\t......\r\n\t// Encode the account and update the account trie\r\n\taddr := obj.Address()\r\n\r\n        /// !!! here encode whole stateobject \r\n\tdata, err := rlp.EncodeToBytes(obj)\r\n\t\r\n\tif err != nil {\r\n\t\tpanic(fmt.Errorf(\"can't encode object at %x: %v\", addr[:], err))\r\n\t}\r\n        /// !!! here update trie - key: addr[:] value: rlp(object)\r\n\tif err = s.trie.TryUpdate(addr[:], data); err != nil {\r\n\t\ts.setError(fmt.Errorf(\"updateStateObject (%x) error: %v\", addr[:], err))\r\n\t}\r\n        ......\r\n}\r\n```\r\n#### Question\r\nBut when we load addr from mpt, we just need `obj.data`(namely the Account) and then construct a new stateObject, so why not use `rlp(obj.data)` as value when update stateTrie's account above?\r\n\r\n```\r\nfunc (s *StateDB) getDeletedStateObject(addr common.Address) *stateObject {\r\n\t......\r\n\t// If snapshot unavailable or reading from it failed, load from the database\r\n\tif s.snap == nil || err != nil {\r\n\t\tif metrics.EnabledExpensive {\r\n\t\t\tdefer func(start time.Time) { s.AccountReads += time.Since(start) }(time.Now())\r\n\t\t}\r\n                 /// !!! here wanna get addr value from trie\r\n\t\tenc, err := s.trie.TryGet(addr.Bytes())\r\n\t\tif err != nil {\r\n\t\t\ts.setError(fmt.Errorf(\"getDeleteStateObject (%x) error: %v\", addr.Bytes(), err))\r\n\t\t\treturn nil\r\n\t\t}\r\n\t\tif len(enc) == 0 {\r\n\t\t\treturn nil\r\n\t\t}\r\n                 /// !!! here just need obj.data to decode\r\n\t\tdata = new(Account)\r\n\t\tif err := rlp.DecodeBytes(enc, data); err != nil {\r\n\t\t\tlog.Error(\"Failed to decode state object\", \"addr\", addr, \"err\", err)\r\n\t\t\treturn nil\r\n\t\t}\r\n\t}\r\n\t// Insert into the live set\r\n\tobj := newObject(s, addr, *data)\r\n\ts.setStateObject(obj)\r\n\treturn obj\r\n        ......\r\n}\r\n```\r\n",
  "closed_by": {
    "login": "holiman",
    "id": 142290,
    "node_id": "MDQ6VXNlcjE0MjI5MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/142290?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/holiman",
    "html_url": "https://github.com/holiman",
    "followers_url": "https://api.github.com/users/holiman/followers",
    "following_url": "https://api.github.com/users/holiman/following{/other_user}",
    "gists_url": "https://api.github.com/users/holiman/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/holiman/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/holiman/subscriptions",
    "organizations_url": "https://api.github.com/users/holiman/orgs",
    "repos_url": "https://api.github.com/users/holiman/repos",
    "events_url": "https://api.github.com/users/holiman/events{/privacy}",
    "received_events_url": "https://api.github.com/users/holiman/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/21704/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/21704/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/708955336",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/21704#issuecomment-708955336",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/21704",
    "id": 708955336,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwODk1NTMzNg==",
    "user": {
      "login": "holiman",
      "id": 142290,
      "node_id": "MDQ6VXNlcjE0MjI5MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/142290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/holiman",
      "html_url": "https://github.com/holiman",
      "followers_url": "https://api.github.com/users/holiman/followers",
      "following_url": "https://api.github.com/users/holiman/following{/other_user}",
      "gists_url": "https://api.github.com/users/holiman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/holiman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/holiman/subscriptions",
      "organizations_url": "https://api.github.com/users/holiman/orgs",
      "repos_url": "https://api.github.com/users/holiman/repos",
      "events_url": "https://api.github.com/users/holiman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/holiman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-15T07:23:35Z",
    "updated_at": "2020-10-15T07:23:35Z",
    "author_association": "MEMBER",
    "body": "> so why not use rlp(obj.data) as value when update stateTrie's account above?\r\n\r\nWe do, albeit in a bit non-obvious way. When encoding a `stateObject`, the encoder finds that it implements the `rlp.Encoder` interface, and invokes this method: \r\n\r\n```golang\r\n// EncodeRLP implements rlp.Encoder.\r\nfunc (s *stateObject) EncodeRLP(w io.Writer) error {\r\n\treturn rlp.Encode(w, s.data)\r\n}\r\n```\r\nSo yes, we _could_ replace `rlp.EncodeToBytes(obj)` with `rlp.EncodeToBytes(obj.data)`. It might even be a tiny bit faster, but I wouldn't hold my breath for any huge savings. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/708955336/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
