{
  "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/17988",
  "repository_url": "https://api.github.com/repos/ethereum/go-ethereum",
  "labels_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/17988/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/17988/comments",
  "events_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/17988/events",
  "html_url": "https://github.com/ethereum/go-ethereum/issues/17988",
  "id": 374520549,
  "node_id": "MDU6SXNzdWUzNzQ1MjA1NDk=",
  "number": 17988,
  "title": "p2p: simultaneous connect between two nodes fails on both sides",
  "user": {
    "login": "WinstonPrivacy",
    "id": 36650369,
    "node_id": "MDQ6VXNlcjM2NjUwMzY5",
    "avatar_url": "https://avatars.githubusercontent.com/u/36650369?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/WinstonPrivacy",
    "html_url": "https://github.com/WinstonPrivacy",
    "followers_url": "https://api.github.com/users/WinstonPrivacy/followers",
    "following_url": "https://api.github.com/users/WinstonPrivacy/following{/other_user}",
    "gists_url": "https://api.github.com/users/WinstonPrivacy/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/WinstonPrivacy/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/WinstonPrivacy/subscriptions",
    "organizations_url": "https://api.github.com/users/WinstonPrivacy/orgs",
    "repos_url": "https://api.github.com/users/WinstonPrivacy/repos",
    "events_url": "https://api.github.com/users/WinstonPrivacy/events{/privacy}",
    "received_events_url": "https://api.github.com/users/WinstonPrivacy/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1380070748,
      "node_id": "MDU6TGFiZWwxMzgwMDcwNzQ4",
      "url": "https://api.github.com/repos/ethereum/go-ethereum/labels/area:p2p",
      "name": "area:p2p",
      "color": "ea9adb",
      "default": false,
      "description": ""
    },
    {
      "id": 1486629004,
      "node_id": "MDU6TGFiZWwxNDg2NjI5MDA0",
      "url": "https://api.github.com/repos/ethereum/go-ethereum/labels/priority:2",
      "name": "priority:2",
      "color": "f76ac8",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": {
    "login": "fjl",
    "id": 6915,
    "node_id": "MDQ6VXNlcjY5MTU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6915?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/fjl",
    "html_url": "https://github.com/fjl",
    "followers_url": "https://api.github.com/users/fjl/followers",
    "following_url": "https://api.github.com/users/fjl/following{/other_user}",
    "gists_url": "https://api.github.com/users/fjl/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/fjl/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/fjl/subscriptions",
    "organizations_url": "https://api.github.com/users/fjl/orgs",
    "repos_url": "https://api.github.com/users/fjl/repos",
    "events_url": "https://api.github.com/users/fjl/events{/privacy}",
    "received_events_url": "https://api.github.com/users/fjl/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "fjl",
      "id": 6915,
      "node_id": "MDQ6VXNlcjY5MTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6915?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjl",
      "html_url": "https://github.com/fjl",
      "followers_url": "https://api.github.com/users/fjl/followers",
      "following_url": "https://api.github.com/users/fjl/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjl/subscriptions",
      "organizations_url": "https://api.github.com/users/fjl/orgs",
      "repos_url": "https://api.github.com/users/fjl/repos",
      "events_url": "https://api.github.com/users/fjl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjl/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 13,
  "created_at": "2018-10-26T19:37:13Z",
  "updated_at": "2020-01-09T10:08:27Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "#### System information\r\n\r\nGeth version: N/A\r\nOS & Version: Linux\r\nCommit hash : 16e4d0e0055f7fce620ff6881a1393d955c06cee\r\n\r\n#### Expected behaviour\r\nBug reproduced in unit tests. One peer node is started with a bootstrap id of an already running node. Both nodes have the same RLPx protocol defined. Nodes are supposed to (and usually do) connect and agree on the RLPx protocol.\r\n\r\n#### Actual behaviour\r\nUnit tests randomly fail (~10% of time) when running within a single process (as is usually the case in unit tests). The nodes report \"Rejected peer\" error and drop the connection with each other. The actual error returned within server.go setupConn() is \"already connected\". \r\n\r\nThe issue has been traced down to server.go:724:\r\n\r\n```\r\n\t\t\terr := srv.protoHandshakeChecks(peers, inboundCount, c)\r\n\t\t\tif err == nil {\r\n\t\t\t\t// The handshakes are done and it passed all checks.\r\n\t\t\t\tp := newPeer(c, srv.Protocols)\r\n\t\t\t\t// If message events are enabled, pass the peerFeed\r\n\t\t\t\t// to the peer\r\n\t\t\t\tif srv.EnableMsgEvents {\r\n\t\t\t\t\tp.events = &srv.peerFeed\r\n\t\t\t\t}\r\n\t\t\t\tname := truncateName(c.name)\r\n\t\t\t\tsrv.log.Debug(\"Adding p2p peer\", \"name\", name, \"addr\", c.fd.RemoteAddr(), \"peers\", len(peers)+1)\r\n\t\t\t\tgo srv.runPeer(p)\r\npeers[c.node.ID()] = p\r\n```\r\n\r\nThis is a classic race condition. What is occurring is that a peer (from the first connection) is in the process of being added to the peers map just as the second connection is being established. If the peers map has been updated before setupConn() reaches the addpeer checkpoint, the connection is quietly dropped and everything works fine. Otherwise, the code above is reached, a new peer is started and this overwrites the existing entry in the peers map. \r\n\r\nIf an RLPx protocol (Run) has been started in the first peer, it may already be listening for messages on the first peer. This will always return an EOF. \r\n\r\nPossible solution: Check the map again just prior to inserting a new peer. The map should be protected with a mutex to prevent concurrency problems.\r\n\r\n(Edit: realized the peers is not global, but already assigned to a single server instance.)\r\n",
  "closed_by": {
    "login": "WinstonPrivacy",
    "id": 36650369,
    "node_id": "MDQ6VXNlcjM2NjUwMzY5",
    "avatar_url": "https://avatars.githubusercontent.com/u/36650369?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/WinstonPrivacy",
    "html_url": "https://github.com/WinstonPrivacy",
    "followers_url": "https://api.github.com/users/WinstonPrivacy/followers",
    "following_url": "https://api.github.com/users/WinstonPrivacy/following{/other_user}",
    "gists_url": "https://api.github.com/users/WinstonPrivacy/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/WinstonPrivacy/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/WinstonPrivacy/subscriptions",
    "organizations_url": "https://api.github.com/users/WinstonPrivacy/orgs",
    "repos_url": "https://api.github.com/users/WinstonPrivacy/repos",
    "events_url": "https://api.github.com/users/WinstonPrivacy/events{/privacy}",
    "received_events_url": "https://api.github.com/users/WinstonPrivacy/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/17988/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/17988/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/433525134",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/17988#issuecomment-433525134",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/17988",
    "id": 433525134,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMzUyNTEzNA==",
    "user": {
      "login": "WinstonPrivacy",
      "id": 36650369,
      "node_id": "MDQ6VXNlcjM2NjUwMzY5",
      "avatar_url": "https://avatars.githubusercontent.com/u/36650369?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/WinstonPrivacy",
      "html_url": "https://github.com/WinstonPrivacy",
      "followers_url": "https://api.github.com/users/WinstonPrivacy/followers",
      "following_url": "https://api.github.com/users/WinstonPrivacy/following{/other_user}",
      "gists_url": "https://api.github.com/users/WinstonPrivacy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/WinstonPrivacy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/WinstonPrivacy/subscriptions",
      "organizations_url": "https://api.github.com/users/WinstonPrivacy/orgs",
      "repos_url": "https://api.github.com/users/WinstonPrivacy/repos",
      "events_url": "https://api.github.com/users/WinstonPrivacy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/WinstonPrivacy/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-26T19:55:04Z",
    "updated_at": "2018-10-26T19:55:04Z",
    "author_association": "NONE",
    "body": "Now that I realized the peers map is not global, it seems likely that this bug could affect production ethereum nodes.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/433525134/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/433758587",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/17988#issuecomment-433758587",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/17988",
    "id": 433758587,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMzc1ODU4Nw==",
    "user": {
      "login": "WinstonPrivacy",
      "id": 36650369,
      "node_id": "MDQ6VXNlcjM2NjUwMzY5",
      "avatar_url": "https://avatars.githubusercontent.com/u/36650369?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/WinstonPrivacy",
      "html_url": "https://github.com/WinstonPrivacy",
      "followers_url": "https://api.github.com/users/WinstonPrivacy/followers",
      "following_url": "https://api.github.com/users/WinstonPrivacy/following{/other_user}",
      "gists_url": "https://api.github.com/users/WinstonPrivacy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/WinstonPrivacy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/WinstonPrivacy/subscriptions",
      "organizations_url": "https://api.github.com/users/WinstonPrivacy/orgs",
      "repos_url": "https://api.github.com/users/WinstonPrivacy/repos",
      "events_url": "https://api.github.com/users/WinstonPrivacy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/WinstonPrivacy/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-29T00:48:36Z",
    "updated_at": "2018-10-29T00:48:36Z",
    "author_association": "NONE",
    "body": "I've implemented some code to check the peers map just before updating the existing peer. Unfortunately, this has not fixed the problem. Any suggestions welcome.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/433758587/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/459534602",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/17988#issuecomment-459534602",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/17988",
    "id": 459534602,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1OTUzNDYwMg==",
    "user": {
      "login": "WinstonPrivacy",
      "id": 36650369,
      "node_id": "MDQ6VXNlcjM2NjUwMzY5",
      "avatar_url": "https://avatars.githubusercontent.com/u/36650369?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/WinstonPrivacy",
      "html_url": "https://github.com/WinstonPrivacy",
      "followers_url": "https://api.github.com/users/WinstonPrivacy/followers",
      "following_url": "https://api.github.com/users/WinstonPrivacy/following{/other_user}",
      "gists_url": "https://api.github.com/users/WinstonPrivacy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/WinstonPrivacy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/WinstonPrivacy/subscriptions",
      "organizations_url": "https://api.github.com/users/WinstonPrivacy/orgs",
      "repos_url": "https://api.github.com/users/WinstonPrivacy/repos",
      "events_url": "https://api.github.com/users/WinstonPrivacy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/WinstonPrivacy/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-31T22:40:44Z",
    "updated_at": "2019-01-31T22:40:44Z",
    "author_association": "NONE",
    "body": "Checking in to see if anyone else has encountered this. We are still seeing the same problem.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/459534602/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/459550578",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/17988#issuecomment-459550578",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/17988",
    "id": 459550578,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1OTU1MDU3OA==",
    "user": {
      "login": "fjl",
      "id": 6915,
      "node_id": "MDQ6VXNlcjY5MTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6915?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjl",
      "html_url": "https://github.com/fjl",
      "followers_url": "https://api.github.com/users/fjl/followers",
      "following_url": "https://api.github.com/users/fjl/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjl/subscriptions",
      "organizations_url": "https://api.github.com/users/fjl/orgs",
      "repos_url": "https://api.github.com/users/fjl/repos",
      "events_url": "https://api.github.com/users/fjl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjl/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-31T23:45:11Z",
    "updated_at": "2019-01-31T23:45:11Z",
    "author_association": "MEMBER",
    "body": "Can you share the unit test code to reproduce this issue? I've heard other reports of this issue but haven't been able to reproduce it myself. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/459550578/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/459573326",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/17988#issuecomment-459573326",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/17988",
    "id": 459573326,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1OTU3MzMyNg==",
    "user": {
      "login": "WinstonPrivacy",
      "id": 36650369,
      "node_id": "MDQ6VXNlcjM2NjUwMzY5",
      "avatar_url": "https://avatars.githubusercontent.com/u/36650369?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/WinstonPrivacy",
      "html_url": "https://github.com/WinstonPrivacy",
      "followers_url": "https://api.github.com/users/WinstonPrivacy/followers",
      "following_url": "https://api.github.com/users/WinstonPrivacy/following{/other_user}",
      "gists_url": "https://api.github.com/users/WinstonPrivacy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/WinstonPrivacy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/WinstonPrivacy/subscriptions",
      "organizations_url": "https://api.github.com/users/WinstonPrivacy/orgs",
      "repos_url": "https://api.github.com/users/WinstonPrivacy/repos",
      "events_url": "https://api.github.com/users/WinstonPrivacy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/WinstonPrivacy/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-01T01:35:33Z",
    "updated_at": "2019-02-01T01:35:33Z",
    "author_association": "NONE",
    "body": "That's a big ask as I'm going to have to not only isolate the code but also the unit tests. It only occurs when multiple servers are started in multiple tests... if those same unit tests are run in isolation, the error never occurs. Let me see what I can do.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/459573326/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/459580219",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/17988#issuecomment-459580219",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/17988",
    "id": 459580219,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1OTU4MDIxOQ==",
    "user": {
      "login": "WinstonPrivacy",
      "id": 36650369,
      "node_id": "MDQ6VXNlcjM2NjUwMzY5",
      "avatar_url": "https://avatars.githubusercontent.com/u/36650369?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/WinstonPrivacy",
      "html_url": "https://github.com/WinstonPrivacy",
      "followers_url": "https://api.github.com/users/WinstonPrivacy/followers",
      "following_url": "https://api.github.com/users/WinstonPrivacy/following{/other_user}",
      "gists_url": "https://api.github.com/users/WinstonPrivacy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/WinstonPrivacy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/WinstonPrivacy/subscriptions",
      "organizations_url": "https://api.github.com/users/WinstonPrivacy/orgs",
      "repos_url": "https://api.github.com/users/WinstonPrivacy/repos",
      "events_url": "https://api.github.com/users/WinstonPrivacy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/WinstonPrivacy/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-01T02:14:54Z",
    "updated_at": "2019-02-01T02:14:54Z",
    "author_association": "NONE",
    "body": "Short of trying to isolate this, I thought I would share some logging data to see if it might help pinpoint things. In particular, I am seeing some weird behavior which does not happen on every run. It looks like the nodes are trying to connect to each other twice. The second connection fails because the first was already made and this drops the peers.\r\n\r\nTo illustrate this, I've annotated some logging code. \r\n\r\nWe start by spinning up two nodes (call them \"remote\" and \"local\"). They start just fine and local bootstraps to \"remote\" without any problems. Note in the log below there are some extra output which we've added:\r\n\r\n```\r\n// Start the first node: \"Remote\". All good here.\r\n\r\nt=2019-01-31T23:24:02+0000 lvl=info msg=\"ShadowServer starting.\" Node=Remote port=56831\r\nt=2019-01-31T23:24:02+0000 lvl=info msg=ShadowServer.Listen()    Node=Remote msg=\" Launching shadow privacy service\" addr=:56831\r\nt=2019-01-31T23:24:02+0000 lvl=info msg=startListening                      Node=Remote listenAddr=:56830\r\nt=2019-01-31T23:24:02+0000 lvl=dbug msg=\"UDP listener up\"                   Node=Remote addr=[::]:56830\r\nt=2019-01-31T23:24:02+0000 lvl=info msg=\"ShadowNetwork Hello World\"         Node=Remote enode=6c1f40d09a listen port=:56830\r\nt=2019-01-31T23:24:02+0000 lvl=info msg=\"ShadowNetwork started.\"            Node=Remote Local=6c1f40d09a port=56831\r\n\r\n// Start the second node: \"Local\". All good here as well.\r\n\r\n..t=2019-01-31T23:24:02+0000 lvl=info msg=\"ShadowServer starting.\"            Node=Local  port=56591\r\n\r\n// While local is starting, remote starts its TCP and RLPx listeners...\r\n\r\nt=2019-01-31T23:24:02+0000 lvl=dbug msg=\"TCP listener up\"                   Node=Remote addr=[::]:56830\r\nt=2019-01-31T23:24:02+0000 lvl=dbug msg=\"RLPx listener\"                     Node=Remote maxPendingPeers=50\r\nt=2019-01-31T23:24:02+0000 lvl=dbug msg=\"RLPx listener is waiting\"          Node=Remote\r\n\r\n// Now local starts it's listeners. So far, so good...\r\n\r\nt=2019-01-31T23:24:02+0000 lvl=info msg=startListening                      Node=Local  listenAddr=:56590\r\nt=2019-01-31T23:24:02+0000 lvl=dbug msg=\"UDP listener up\"                   Node=Local  addr=[::]:56590\r\nt=2019-01-31T23:24:02+0000 lvl=dbug msg=\"TCP listener up\"                   Node=Local  addr=[::]:56590\r\nt=2019-01-31T23:24:02+0000 lvl=dbug msg=\"RLPx listener\"                     Node=Local  maxPendingPeers=50\r\nt=2019-01-31T23:24:02+0000 lvl=dbug msg=\"RLPx listener is waiting\"          Node=Local\r\n\r\n// Remote's P2P server is finally up and running and dial tasks start ticking off.\r\n\r\nt=2019-01-31T23:24:02+0000 lvl=info msg=\"Started P2P Server\"                Node=Remote self=0894731ea016f4a6\r\nt=2019-01-31T23:24:02+0000 lvl=trce msg=\"New dial task\"                     Node=Remote task=\"discovery lookup (no results)\"\r\n\r\n// Local catches up and starts its P2P server.\r\n\r\nt=2019-01-31T23:24:02+0000 lvl=info msg=ShadowServer.Listen()               Node=Local  msg=\" Launching shadow privacy service\" addr=:56591\r\nt=2019-01-31T23:24:02+0000 lvl=info msg=\"ShadowNetwork Hello World\"         Node=Local  enode=0201687c0a listen port=:56590\r\nt=2019-01-31T23:24:02+0000 lvl=info msg=\"ShadowNetwork started.\"            Node=Local  Local=0201687c0a port=56591\r\nt=2019-01-31T23:24:02+0000 lvl=info msg=\"Started P2P Server\"                Node=Local  self=cf766f7cf871db7b\r\n\r\n// Local bootstraps to Remote...\r\n\r\nt=2019-01-31T23:24:02+0000 lvl=trce msg=\"New dial task\"                     Node=Local  task=\"discovery lookup (no results)\"\r\nt=2019-01-31T23:24:03+0000 lvl=trce msg=\"Dial task done\"                    Node=Local  task=\"discovery lookup (2 results)\"\r\nt=2019-01-31T23:24:03+0000 lvl=trce msg=\"New dial task\"                     Node=Local  task=\"dyndial 0894731ea016f4a6 127.0.0.1:56830\"\r\nt=2019-01-31T23:24:03+0000 lvl=trce msg=\"New dial task\"                     Node=Local  task=\"discovery lookup (no results)\"\r\n\r\n// Remote accepts the connection.\r\n\r\nt=2019-01-31T23:24:03+0000 lvl=trce msg=\"Accepted connection\"               Node=Remote addr=127.0.0.1:60480\r\nt=2019-01-31T23:24:03+0000 lvl=dbug msg=\"RLPx listener is waiting\"          Node=Remote\r\n\r\n// I added this debug code to try and get some insight into the handshake. We see the posthandshake occurring in server.go:setupConn(). This happens for both the remote and local nodes and they seem to complete successfully.\r\n\r\n\r\n[DEBUG] Waiting for posthandshake...\r\n[DEBUG] Server.run:PostHandshake handler\r\n[DEBUG] Server.run:encHandshakeChecks()\r\n\r\n[DEBUG] Waiting for posthandshake...\r\n[DEBUG] Server.run:PostHandshake handler\r\n[DEBUG] Server.run:encHandshakeChecks()\r\n\r\n[DEBUG] posthandshake completed.\r\n\r\n// Now things get a little weird (or maybe I don't understand what should be happening). Remote dials out to local, even though they both already have a connection. This happens before the final posthandshake completes.\r\n\r\nt=2019-01-31T23:24:03+0000 lvl=trce msg=\"New dial task\"                     Node=Remote task=\"dyndial cf766f7cf871db7b 127.0.0.1:56590\"\r\n\r\n[DEBUG] posthandshake completed.\r\n\r\n[DEBUG] Server.run:encHandshakeChecks()\r\n\r\n// Remote now adds the peer to the peer[] map. This happens in server.go:run(), within the code \"case c := <-srv.addpeer:\"\r\n\r\nt=2019-01-31T23:24:03+0000 lvl=dbug msg=\"Adding p2p peer\"                   Node=Remote name= addr=127.0.0.1:60480 peers=1\r\n[DEBUG] peers[] after adding new node map[cf766f7cf871db7bee6fabc8d9a0d811ba63dcfac3bbdbe78c7154806afbc3eb:Peer cf766f7cf871db7b 127.0.0.1\r\n\r\n// Here we see that Remote has completed the setupConn() routine.\r\n\r\nt=2019-01-31T23:24:03+0000 lvl=trce msg=\"connection set up\"                 Node=Remote id=cf766f7cf871db7bee6fabc8d9a0d811ba63dcfac3bbdbe78c7154806afbc3eb add\r\n\r\n\r\n// Now local starts this same process.\r\n\r\nt=2019-01-31T23:24:03+0000 lvl=trce msg=\"Accepted connection\"               Node=Local  addr=127.0.0.1:43424\r\nt=2019-01-31T23:24:03+0000 lvl=dbug msg=\"RLPx listener is waiting\"          Node=Local\r\n[DEBUG] Server.run:encHandshakeChecks()\r\nt=2019-01-31T23:24:03+0000 lvl=dbug msg=\"Adding p2p peer\"                   Node=Local  name= addr=127.0.0.1:56830 peers=1\r\nt=2019-01-31T23:24:03+0000 lvl=dbug msg=ShadowNetwork.Run()                 Node=Local  msg=\"Starting protocol handler\"         Local=0201687c0a Remote=0894731\r\n[DEBUG] peers after adding new node map[0894731ea016f4a67a5a22bf8d5988d7939d21393363da0cced2d490f08058c2:Peer 0894731ea016f4a6 127.0.0.1\r\nt=2019-01-31T23:24:03+0000 lvl=trce msg=\"connection set up\"                 Node=Local  id=0894731ea016f4a67a5a22bf8d5988d7939d21393363da0cced2d490f08058c2 add\r\nt=2019-01-31T23:24:03+0000 lvl=trce msg=\"Dial task done\"                    Node=Local  task=\"dyndial 0894731ea016f4a6 127.0.0.1:56830\"\r\n\r\n// Both remote and local now have set up their connections. Good right?\r\n\r\n// But wait... here's where the problems seem to occur. Local starts the posthandshake process again. This fails because remote was already added to the peer[] map up above.\r\n\r\n[DEBUG] Waiting for posthandshake...\r\n[DEBUG] Server.run:PostHandshake handler\r\n[DEBUG] Server.run:encHandshakeChecks()\r\n[DEBUG] Server.run:encHandshakeChecks() error: Already connected. peers map[0894731ea016f4a67a5a22bf8d5988d7939d21393363da0cced2d490f08058c2:Peer 0894731ea016f\r\n[DEBUG] posthandshake completed.\r\nt=2019-01-31T23:24:03+0000 lvl=trce msg=\"Rejected peer before protocol handshake\" Node=Local  id=0894731ea016f4a67a5a22bf8d5988d7939d21393363da0cced2d490f08058y connected\"\r\nt=2019-01-31T23:24:03+0000 lvl=trce msg=\"Setting up connection failed\"            Node=Local  addr=127.0.0.1:43424 err=\"already connected\"\r\n\r\n\r\n// Remote does the same thing!\r\n[DEBUG] Waiting for posthandshake...\r\n[DEBUG] Server.run:PostHandshake handler\r\n[DEBUG] Server.run:encHandshakeChecks()\r\n[DEBUG] Server.run:encHandshakeChecks() error: Already connected. peers map[cf766f7cf871db7bee6fabc8d9a0d811ba63dcfac3bbdbe78c7154806afbc3eb:Peer cf766f7cf871d\r\n[DEBUG] posthandshake completed.\r\nt=2019-01-31T23:24:03+0000 lvl=trce msg=\"Rejected peer before protocol handshake\" Node=Remote id=cf766f7cf871db7bee6fabc8d9a0d811ba63dcfac3bbdbe78c7154806afbc3y connected\"\r\nt=2019-01-31T23:24:03+0000 lvl=trce msg=\"Setting up connection failed\"            Node=Remote addr=127.0.0.1:56590 err=\"already connected\"\r\n\r\n\r\n```\r\n\r\nThe end result of this is that we have two nodes which should be connected just fine (and most of the time they are), but one or both of them occasionally drop the connection. This causes our unit tests to break because we expect valid connections.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/459580219/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/459864299",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/17988#issuecomment-459864299",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/17988",
    "id": 459864299,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1OTg2NDI5OQ==",
    "user": {
      "login": "WinstonPrivacy",
      "id": 36650369,
      "node_id": "MDQ6VXNlcjM2NjUwMzY5",
      "avatar_url": "https://avatars.githubusercontent.com/u/36650369?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/WinstonPrivacy",
      "html_url": "https://github.com/WinstonPrivacy",
      "followers_url": "https://api.github.com/users/WinstonPrivacy/followers",
      "following_url": "https://api.github.com/users/WinstonPrivacy/following{/other_user}",
      "gists_url": "https://api.github.com/users/WinstonPrivacy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/WinstonPrivacy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/WinstonPrivacy/subscriptions",
      "organizations_url": "https://api.github.com/users/WinstonPrivacy/orgs",
      "repos_url": "https://api.github.com/users/WinstonPrivacy/repos",
      "events_url": "https://api.github.com/users/WinstonPrivacy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/WinstonPrivacy/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-01T20:54:11Z",
    "updated_at": "2019-02-01T20:54:11Z",
    "author_association": "NONE",
    "body": "We just noticed something else that may be helpful. We're seeing that in the cases where the connections fail, both nodes have initiated an outbound connection with each other at the same time. The second rejected connection for both is inbound. When this occurs, any subsequent RLPx messages are flushed with an EOF error.\r\n\r\nWhen one node accepts an inbound and the other an outbound connection first, the subsequent RLPx calls go through without being dropped (this is in spite of the fact that there are a pair of connection attempts which are dropped, similar to above).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/459864299/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/459992725",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/17988#issuecomment-459992725",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/17988",
    "id": 459992725,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1OTk5MjcyNQ==",
    "user": {
      "login": "WinstonPrivacy",
      "id": 36650369,
      "node_id": "MDQ6VXNlcjM2NjUwMzY5",
      "avatar_url": "https://avatars.githubusercontent.com/u/36650369?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/WinstonPrivacy",
      "html_url": "https://github.com/WinstonPrivacy",
      "followers_url": "https://api.github.com/users/WinstonPrivacy/followers",
      "following_url": "https://api.github.com/users/WinstonPrivacy/following{/other_user}",
      "gists_url": "https://api.github.com/users/WinstonPrivacy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/WinstonPrivacy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/WinstonPrivacy/subscriptions",
      "organizations_url": "https://api.github.com/users/WinstonPrivacy/orgs",
      "repos_url": "https://api.github.com/users/WinstonPrivacy/repos",
      "events_url": "https://api.github.com/users/WinstonPrivacy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/WinstonPrivacy/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-02T19:34:15Z",
    "updated_at": "2019-02-02T19:34:15Z",
    "author_association": "NONE",
    "body": "We found a workaround. By setting \"NoDial\" to true on the bootstrap node's server config, this prevents the race condition and our unit tests work.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/459992725/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/459995693",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/17988#issuecomment-459995693",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/17988",
    "id": 459995693,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1OTk5NTY5Mw==",
    "user": {
      "login": "fjl",
      "id": 6915,
      "node_id": "MDQ6VXNlcjY5MTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6915?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjl",
      "html_url": "https://github.com/fjl",
      "followers_url": "https://api.github.com/users/fjl/followers",
      "following_url": "https://api.github.com/users/fjl/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjl/subscriptions",
      "organizations_url": "https://api.github.com/users/fjl/orgs",
      "repos_url": "https://api.github.com/users/fjl/repos",
      "events_url": "https://api.github.com/users/fjl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjl/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-02T20:13:05Z",
    "updated_at": "2019-02-02T20:13:05Z",
    "author_association": "MEMBER",
    "body": "I think this deserves fixing even if you found a workaround.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/459995693/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/459996991",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/17988#issuecomment-459996991",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/17988",
    "id": 459996991,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1OTk5Njk5MQ==",
    "user": {
      "login": "WinstonPrivacy",
      "id": 36650369,
      "node_id": "MDQ6VXNlcjM2NjUwMzY5",
      "avatar_url": "https://avatars.githubusercontent.com/u/36650369?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/WinstonPrivacy",
      "html_url": "https://github.com/WinstonPrivacy",
      "followers_url": "https://api.github.com/users/WinstonPrivacy/followers",
      "following_url": "https://api.github.com/users/WinstonPrivacy/following{/other_user}",
      "gists_url": "https://api.github.com/users/WinstonPrivacy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/WinstonPrivacy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/WinstonPrivacy/subscriptions",
      "organizations_url": "https://api.github.com/users/WinstonPrivacy/orgs",
      "repos_url": "https://api.github.com/users/WinstonPrivacy/repos",
      "events_url": "https://api.github.com/users/WinstonPrivacy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/WinstonPrivacy/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-02T20:32:38Z",
    "updated_at": "2019-02-02T20:32:38Z",
    "author_association": "NONE",
    "body": "I agree. I've tried several times but haven't been able to get to the\nbottom of it. It seems pretty unlikely to occur in production but as it\ndoes cause havoc with unit testing, it's worthwhile.\n\nOn Sat, Feb 2, 2019 at 2:13 PM Felix Lange <notifications@github.com> wrote:\n\n> I think this deserves fixing even if you found a workaround.\n>\n> —\n> You are receiving this because you modified the open/close state.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/ethereum/go-ethereum/issues/17988#issuecomment-459995693>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/Ai89gd-8F70knJ43lYCmsDQyWR4wkhYUks5vJfF3gaJpZM4X82dn>\n> .\n>\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/459996991/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/564960577",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/17988#issuecomment-564960577",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/17988",
    "id": 564960577,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2NDk2MDU3Nw==",
    "user": {
      "login": "holiman",
      "id": 142290,
      "node_id": "MDQ6VXNlcjE0MjI5MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/142290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/holiman",
      "html_url": "https://github.com/holiman",
      "followers_url": "https://api.github.com/users/holiman/followers",
      "following_url": "https://api.github.com/users/holiman/following{/other_user}",
      "gists_url": "https://api.github.com/users/holiman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/holiman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/holiman/subscriptions",
      "organizations_url": "https://api.github.com/users/holiman/orgs",
      "repos_url": "https://api.github.com/users/holiman/repos",
      "events_url": "https://api.github.com/users/holiman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/holiman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-12-12T11:04:36Z",
    "updated_at": "2019-12-12T11:04:36Z",
    "author_association": "MEMBER",
    "body": "@fjl the `peers` map is created in the `func (srv *Server) run(dialstate dialer) {` in `p2p/server.go`. It seems to have originally been meant for usage only by the goroutine dedicated to serving the loop, but it's also shared with the `dialState` in `dial.go`. Afaict, there are multiple goroutines doing accesses to the `peers` map, without any form of race prevention.  ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/564960577/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/565217783",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/17988#issuecomment-565217783",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/17988",
    "id": 565217783,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2NTIxNzc4Mw==",
    "user": {
      "login": "fjl",
      "id": 6915,
      "node_id": "MDQ6VXNlcjY5MTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6915?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjl",
      "html_url": "https://github.com/fjl",
      "followers_url": "https://api.github.com/users/fjl/followers",
      "following_url": "https://api.github.com/users/fjl/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjl/subscriptions",
      "organizations_url": "https://api.github.com/users/fjl/orgs",
      "repos_url": "https://api.github.com/users/fjl/repos",
      "events_url": "https://api.github.com/users/fjl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjl/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-12-12T22:35:41Z",
    "updated_at": "2019-12-12T22:35:41Z",
    "author_association": "MEMBER",
    "body": "There are no concurrent accesses to the peers map because the `dialState` code is only invoked from `Server.run`.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/565217783/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/572487686",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/17988#issuecomment-572487686",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/17988",
    "id": 572487686,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3MjQ4NzY4Ng==",
    "user": {
      "login": "adamschmideg",
      "id": 208822,
      "node_id": "MDQ6VXNlcjIwODgyMg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/208822?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adamschmideg",
      "html_url": "https://github.com/adamschmideg",
      "followers_url": "https://api.github.com/users/adamschmideg/followers",
      "following_url": "https://api.github.com/users/adamschmideg/following{/other_user}",
      "gists_url": "https://api.github.com/users/adamschmideg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adamschmideg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adamschmideg/subscriptions",
      "organizations_url": "https://api.github.com/users/adamschmideg/orgs",
      "repos_url": "https://api.github.com/users/adamschmideg/repos",
      "events_url": "https://api.github.com/users/adamschmideg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adamschmideg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-09T10:08:04Z",
    "updated_at": "2020-01-09T10:08:04Z",
    "author_association": "MEMBER",
    "body": "@fjl is working on a new Dialer which may resolve this issue",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/572487686/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
