{
  "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/24442",
  "repository_url": "https://api.github.com/repos/ethereum/go-ethereum",
  "labels_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/24442/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/24442/comments",
  "events_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/24442/events",
  "html_url": "https://github.com/ethereum/go-ethereum/issues/24442",
  "id": 1145718352,
  "node_id": "I_kwDOAOvK985ESkZQ",
  "number": 24442,
  "title": "No documentation on how to format ABI in to call, need help ",
  "user": {
    "login": "chromafunk",
    "id": 3601695,
    "node_id": "MDQ6VXNlcjM2MDE2OTU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/3601695?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/chromafunk",
    "html_url": "https://github.com/chromafunk",
    "followers_url": "https://api.github.com/users/chromafunk/followers",
    "following_url": "https://api.github.com/users/chromafunk/following{/other_user}",
    "gists_url": "https://api.github.com/users/chromafunk/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/chromafunk/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/chromafunk/subscriptions",
    "organizations_url": "https://api.github.com/users/chromafunk/orgs",
    "repos_url": "https://api.github.com/users/chromafunk/repos",
    "events_url": "https://api.github.com/users/chromafunk/events{/privacy}",
    "received_events_url": "https://api.github.com/users/chromafunk/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 268304226,
      "node_id": "MDU6TGFiZWwyNjgzMDQyMjY=",
      "url": "https://api.github.com/repos/ethereum/go-ethereum/labels/type:docs",
      "name": "type:docs",
      "color": "fef2c0",
      "default": false,
      "description": null
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2022-02-21T12:12:04Z",
  "updated_at": "2023-11-13T13:42:37Z",
  "closed_at": "2022-02-24T10:13:59Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "can somebody explain ( I can't find this anywhere ) how to format the ABI or the part of the ABI I want to make on this call ?\r\n\r\n\r\n```\r\n// SPDX-License-Identifier: MIT\r\n\r\n\r\npragma solidity >=0.5.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n/// @title Multicall - Aggregate results from multiple read-only function calls\r\n/// @author Michael Elliot <mike@makerdao.com>\r\n/// @author Joshua Levine <joshua@makerdao.com>\r\n/// @author Nick Johnson <arachnid@notdot.net>\r\n\r\ncontract Multicall {\r\n    struct Call {\r\n        address target;\r\n        bytes callData;\r\n    }\r\n    function aggregate(Call[] memory calls) public returns (uint256 blockNumber, bytes[] memory returnData) {\r\n        blockNumber = block.number;\r\n        returnData = new bytes[](calls.length);\r\n        for(uint256 i = 0; i < calls.length; i++) {\r\n            (bool success, bytes memory ret) = calls[i].target.call(calls[i].callData);\r\n            require(success);\r\n            returnData[i] = ret;\r\n        }\r\n    }\r\n    // Helper functions\r\n    function getEthBalance(address addr) public view returns (uint256 balance) {\r\n        balance = addr.balance;\r\n    }\r\n    function getBlockHash(uint256 blockNumber) public view returns (bytes32 blockHash) {\r\n        blockHash = blockhash(blockNumber);\r\n    }\r\n    function getLastBlockHash() public view returns (bytes32 blockHash) {\r\n        blockHash = blockhash(block.number - 1);\r\n    }\r\n    function getCurrentBlockTimestamp() public view returns (uint256 timestamp) {\r\n        timestamp = block.timestamp;\r\n    }\r\n    function getCurrentBlockDifficulty() public view returns (uint256 difficulty) {\r\n        difficulty = block.difficulty;\r\n    }\r\n    function getCurrentBlockGasLimit() public view returns (uint256 gaslimit) {\r\n        gaslimit = block.gaslimit;\r\n    }\r\n    function getCurrentBlockCoinbase() public view returns (address coinbase) {\r\n        coinbase = block.coinbase;\r\n    }\r\n}\r\n\r\n```\r\n\r\n```\r\nnew_multicall, err := mcfantom.NewMcfantom(strategy_config.Muticalladdress,client)\r\nif err != nil {\r\nlog.Fatalf(\"Failed to instantiate a multicall address contract: %v\", err)\r\n}\r\n\r\nhash,err := new_multicall.Aggregate()\r\n```\r\n\r\nI have generated the keyed TransactOpts object, and also created the ABI function file from the multicall contract above with abigen All of this is working correctly, butI can't call the contract and get the results because I don't know how to get the ABI string correctly formatted in the callData struct field\r\n\r\nIf I want to call getReserves, how do I format the ABI string correctly in to callData in order to complete the contract call execution ? \r\n",
  "closed_by": {
    "login": "MariusVanDerWijden",
    "id": 16664698,
    "node_id": "MDQ6VXNlcjE2NjY0Njk4",
    "avatar_url": "https://avatars.githubusercontent.com/u/16664698?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/MariusVanDerWijden",
    "html_url": "https://github.com/MariusVanDerWijden",
    "followers_url": "https://api.github.com/users/MariusVanDerWijden/followers",
    "following_url": "https://api.github.com/users/MariusVanDerWijden/following{/other_user}",
    "gists_url": "https://api.github.com/users/MariusVanDerWijden/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/MariusVanDerWijden/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/MariusVanDerWijden/subscriptions",
    "organizations_url": "https://api.github.com/users/MariusVanDerWijden/orgs",
    "repos_url": "https://api.github.com/users/MariusVanDerWijden/repos",
    "events_url": "https://api.github.com/users/MariusVanDerWijden/events{/privacy}",
    "received_events_url": "https://api.github.com/users/MariusVanDerWijden/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/24442/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/24442/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1049696369",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/24442#issuecomment-1049696369",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/24442",
    "id": 1049696369,
    "node_id": "IC_kwDOAOvK984-kRhx",
    "user": {
      "login": "MariusVanDerWijden",
      "id": 16664698,
      "node_id": "MDQ6VXNlcjE2NjY0Njk4",
      "avatar_url": "https://avatars.githubusercontent.com/u/16664698?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MariusVanDerWijden",
      "html_url": "https://github.com/MariusVanDerWijden",
      "followers_url": "https://api.github.com/users/MariusVanDerWijden/followers",
      "following_url": "https://api.github.com/users/MariusVanDerWijden/following{/other_user}",
      "gists_url": "https://api.github.com/users/MariusVanDerWijden/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MariusVanDerWijden/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MariusVanDerWijden/subscriptions",
      "organizations_url": "https://api.github.com/users/MariusVanDerWijden/orgs",
      "repos_url": "https://api.github.com/users/MariusVanDerWijden/repos",
      "events_url": "https://api.github.com/users/MariusVanDerWijden/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MariusVanDerWijden/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-24T10:13:59Z",
    "updated_at": "2022-02-24T10:13:59Z",
    "author_association": "MEMBER",
    "body": "The easiest way to do it is to use the json abi of the calls that should be produced to automatically pack (with abigen)\r\nYou can also manually pack the callData like this: (However that is prone to errors)\r\n```go\r\nfunc main() {\r\n    AddressArr, err := abi.NewType(\"address[]\", \"\", nil)\r\n    if err != nil {\r\n        panic(err)\r\n    }\r\n    Uint256, err := abi.NewType(\"uint256\", \"\", nil)\r\n    if err != nil {\r\n        panic(err)\r\n    }\r\n    Bool, err := abi.NewType(\"bool\", \"\", nil)\r\n    if err != nil {\r\n        panic(err)\r\n    }\r\n    args := abi.Arguments{\r\n        {Type: AddressArr},\r\n        {Type: Uint256},\r\n        {Type: Bool},\r\n    }\r\n    enc, err := args.Pack(\r\n        []common.Address{\r\n            common.HexToAddress(\"0x3403D13dF08EDB7eB03758c0cC2F800315835B00\"),\r\n            common.HexToAddress(\"0x366A0Ee2F0d6D51E5Ca2a5f8E7edfD74D02F6B3e\"),\r\n        },\r\n        big.NewInt(1135234),\r\n        false,\r\n    )\r\n    if err != nil {\r\n        panic(err)\r\n    }\r\n    fmt.Println(hex.EncodeToString(enc))\r\n}\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1049696369/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1808188993",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/24442#issuecomment-1808188993",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/24442",
    "id": 1808188993,
    "node_id": "IC_kwDOAOvK985rxsZB",
    "user": {
      "login": "karlschriek",
      "id": 25316920,
      "node_id": "MDQ6VXNlcjI1MzE2OTIw",
      "avatar_url": "https://avatars.githubusercontent.com/u/25316920?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/karlschriek",
      "html_url": "https://github.com/karlschriek",
      "followers_url": "https://api.github.com/users/karlschriek/followers",
      "following_url": "https://api.github.com/users/karlschriek/following{/other_user}",
      "gists_url": "https://api.github.com/users/karlschriek/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/karlschriek/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/karlschriek/subscriptions",
      "organizations_url": "https://api.github.com/users/karlschriek/orgs",
      "repos_url": "https://api.github.com/users/karlschriek/repos",
      "events_url": "https://api.github.com/users/karlschriek/events{/privacy}",
      "received_events_url": "https://api.github.com/users/karlschriek/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-11-13T13:42:37Z",
    "updated_at": "2023-11-13T13:42:37Z",
    "author_association": "NONE",
    "body": "> The easiest way to do it is to use the json abi of the calls that should be produced to automatically pack (with abigen)\r\n\r\n@MariusVanDerWijden Could you expand what you mean by this?\r\n\r\nI am trying to solve a problem where I need to be able to input arbitrary `args` as a JSON array (i.e they are not strongly typed within the golang code) in a method call. As far as I can gather from digging into the `abi` code, I would need to do this as follows:\r\n\r\n1. Unmarshall the input JSON string (as array of strings)\r\n2. Cast the string inputs as \"Go\" types. Which means I would have to loop over the `args` and ABI `inputs` arrays and each time convert the (string) arg to the right (\"Go\") type. E.g. if the ABI type is `addresss` then I use `common.HexToAddress` to convert from string to address, if the ABI type is `uint256` then I use `big.NewInt` (together with SetString) to convert from string to big int.\r\n3. Call `Pack` to convert from the \"Go\" types to the packed format.\r\n\r\nAm I going to have to write 2. myself or is there some kind of tooling I can use for this? If I have to do it myself, is there an exhaustive list of types that I can reference somewhere?\r\n\r\nAny other way that I could make this easier? The input JSON is under my control, so I can do pre-formatting if needed.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1808188993/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
