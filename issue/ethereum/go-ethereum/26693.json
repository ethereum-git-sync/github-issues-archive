{
  "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/26693",
  "repository_url": "https://api.github.com/repos/ethereum/go-ethereum",
  "labels_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/26693/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/26693/comments",
  "events_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/26693/events",
  "html_url": "https://github.com/ethereum/go-ethereum/issues/26693",
  "id": 1585147246,
  "node_id": "I_kwDOAOvK985ee21u",
  "number": 26693,
  "title": "New blocks are rejected because of setHead operation",
  "user": {
    "login": "rjl493456442",
    "id": 5959481,
    "node_id": "MDQ6VXNlcjU5NTk0ODE=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5959481?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/rjl493456442",
    "html_url": "https://github.com/rjl493456442",
    "followers_url": "https://api.github.com/users/rjl493456442/followers",
    "following_url": "https://api.github.com/users/rjl493456442/following{/other_user}",
    "gists_url": "https://api.github.com/users/rjl493456442/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/rjl493456442/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/rjl493456442/subscriptions",
    "organizations_url": "https://api.github.com/users/rjl493456442/orgs",
    "repos_url": "https://api.github.com/users/rjl493456442/repos",
    "events_url": "https://api.github.com/users/rjl493456442/events{/privacy}",
    "received_events_url": "https://api.github.com/users/rjl493456442/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 72233650,
      "node_id": "MDU6TGFiZWw3MjIzMzY1MA==",
      "url": "https://api.github.com/repos/ethereum/go-ethereum/labels/type:bug",
      "name": "type:bug",
      "color": "FF5E5E",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2023-02-15T03:21:59Z",
  "updated_at": "2023-02-15T14:30:18Z",
  "closed_at": null,
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "#### System information\r\n\r\nGeth version: `geth version`: all versions\r\n\r\n#### Expected behaviour\r\n\r\nWhenever `SetHead` is performed, chain should be rewound to the specific position and import blocks on top smoothly.\r\n\r\n#### Actual behaviour\r\n\r\n`SetHead` may last for a long time, which locks the blockchain in `setHeadBeyondRoot` function. In the mean time consensus layer will keep feeding us new blocks via engine API. Specifically, in `newPayload` method, the new provided block will pass all checks(e.g. the parent block is existent, parent state is available, etc) and be blocked at `InsertBlockWithoutSetHead` which requires the blockchain lock.\r\n\r\nWhen the `SetHead` is finished, the chain segment above the specified target is all removed, including the parent block of newly arrived payload in engine API. Eventually an `ErrUnknownAncestor = errors.New(\"unknown ancestor\")` error will be returned which marks the new payload as invalid.\r\n\r\nWhat's more, there is a mechanism in engine API to memorize bad blocks to prevent handling them over and over again. Fortunately there is a time frame which gives the \"bad block\" another chance after some threshold. Currently the threshold is 128, it means after 128 attempts, the bad block will be gave another chance to import. But it's still too long in this case, node needs to wait for a long time to recover.\r\n\r\n#### Steps to reproduce the behaviour\r\n\r\nrun `debug.SetHead()` when the node is already synced.\r\n\r\nThe idea for fixing this issue can be two directions:\r\n- Avoid this error in the first place, new payload should somehow be told that the parent block is not existent and queue it in the future block queue\r\n- Relax restrictions on bad blocks for a faster recovery",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/26693/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/26693/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1430859896",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/26693#issuecomment-1430859896",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/26693",
    "id": 1430859896,
    "node_id": "IC_kwDOAOvK985VSTB4",
    "user": {
      "login": "MariusVanDerWijden",
      "id": 16664698,
      "node_id": "MDQ6VXNlcjE2NjY0Njk4",
      "avatar_url": "https://avatars.githubusercontent.com/u/16664698?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MariusVanDerWijden",
      "html_url": "https://github.com/MariusVanDerWijden",
      "followers_url": "https://api.github.com/users/MariusVanDerWijden/followers",
      "following_url": "https://api.github.com/users/MariusVanDerWijden/following{/other_user}",
      "gists_url": "https://api.github.com/users/MariusVanDerWijden/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MariusVanDerWijden/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MariusVanDerWijden/subscriptions",
      "organizations_url": "https://api.github.com/users/MariusVanDerWijden/orgs",
      "repos_url": "https://api.github.com/users/MariusVanDerWijden/repos",
      "events_url": "https://api.github.com/users/MariusVanDerWijden/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MariusVanDerWijden/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-02-15T07:10:27Z",
    "updated_at": "2023-02-15T07:10:27Z",
    "author_association": "MEMBER",
    "body": "The bigger issue might not be our own bad block cache, rather the bad block cache of the consensus layer. I've noticed that they might resend a block a handful of times (5) and stop sending it afterwards. So they seem to mark it as bad as well",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1430859896/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1431042032",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/26693#issuecomment-1431042032",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/26693",
    "id": 1431042032,
    "node_id": "IC_kwDOAOvK985VS_fw",
    "user": {
      "login": "holiman",
      "id": 142290,
      "node_id": "MDQ6VXNlcjE0MjI5MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/142290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/holiman",
      "html_url": "https://github.com/holiman",
      "followers_url": "https://api.github.com/users/holiman/followers",
      "following_url": "https://api.github.com/users/holiman/following{/other_user}",
      "gists_url": "https://api.github.com/users/holiman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/holiman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/holiman/subscriptions",
      "organizations_url": "https://api.github.com/users/holiman/orgs",
      "repos_url": "https://api.github.com/users/holiman/repos",
      "events_url": "https://api.github.com/users/holiman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/holiman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-02-15T09:54:23Z",
    "updated_at": "2023-02-15T09:54:23Z",
    "author_association": "MEMBER",
    "body": "> The bigger issue might not be our own bad block cache \r\n\r\nTrue, but that's not within scope of this specific ticket. The scenario described sounds like an error on our part. After a setHead, is  it correct to return an `ErrUnknownAncestor`? \r\n\r\nIMO, these two situation are semantically equivalent: \r\n\r\n- Node `A` syncs to `M`, then does setHead to back to `N` (say two weeks back). \r\n- Node `B` syncs to `N`, then is shut off. It is restarted two weeks later. \r\n\r\nSo whatever one of them does, the other should do too. \r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1431042032/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1431174096",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/26693#issuecomment-1431174096",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/26693",
    "id": 1431174096,
    "node_id": "IC_kwDOAOvK985VTfvQ",
    "user": {
      "login": "rjl493456442",
      "id": 5959481,
      "node_id": "MDQ6VXNlcjU5NTk0ODE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5959481?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rjl493456442",
      "html_url": "https://github.com/rjl493456442",
      "followers_url": "https://api.github.com/users/rjl493456442/followers",
      "following_url": "https://api.github.com/users/rjl493456442/following{/other_user}",
      "gists_url": "https://api.github.com/users/rjl493456442/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rjl493456442/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rjl493456442/subscriptions",
      "organizations_url": "https://api.github.com/users/rjl493456442/orgs",
      "repos_url": "https://api.github.com/users/rjl493456442/repos",
      "events_url": "https://api.github.com/users/rjl493456442/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rjl493456442/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-02-15T11:08:37Z",
    "updated_at": "2023-02-15T11:08:37Z",
    "author_association": "MEMBER",
    "body": "> After a setHead, is it correct to return an ErrUnknownAncestor?\r\n\r\nHonestly, I think it's a correct behavior. We try to import a future block in this case.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1431174096/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1431448886",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/26693#issuecomment-1431448886",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/26693",
    "id": 1431448886,
    "node_id": "IC_kwDOAOvK985VUi02",
    "user": {
      "login": "Francesreid",
      "id": 101983191,
      "node_id": "U_kgDOBhQj1w",
      "avatar_url": "https://avatars.githubusercontent.com/u/101983191?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Francesreid",
      "html_url": "https://github.com/Francesreid",
      "followers_url": "https://api.github.com/users/Francesreid/followers",
      "following_url": "https://api.github.com/users/Francesreid/following{/other_user}",
      "gists_url": "https://api.github.com/users/Francesreid/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Francesreid/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Francesreid/subscriptions",
      "organizations_url": "https://api.github.com/users/Francesreid/orgs",
      "repos_url": "https://api.github.com/users/Francesreid/repos",
      "events_url": "https://api.github.com/users/Francesreid/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Francesreid/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-02-15T14:22:23Z",
    "updated_at": "2023-02-15T14:30:18Z",
    "author_association": "NONE",
    "body": "Am I not going to get paid? Um yeh I've heard about all the scams people\ndo  Frances Reid\n\nOn Wed, 15 Feb 2023, 09:54 Martin Holst Swende, ***@***.***>\nwrote:\n\n> The bigger issue might not be our own bad block cache\n>\n> True, but that's not within scope of this specific ticket. The scenario\n> described sounds like an error on our part. After a setHead, is it correct\n> to return an ErrUnknownAncestor?\n>\n> IMO, these two situation are semantically equivalent:\n>\n>    - Node A syncs to M, then does setHead to back to N (say two weeks\n>    back).\n>    - Node B syncs to N, then is shut off. It is restarted two weeks later.\n>\n> So whatever one of them does, the other should do too.\n>\n> —\n> Reply to this email directly, view it on GitHub\n> <https://github.com/ethereum/go-ethereum/issues/26693#issuecomment-1431042032>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AYKCHV6DNSVAXXZ6PVOPHFTWXSRV7ANCNFSM6AAAAAAU4KHZEU>\n> .\n> You are receiving this because you are subscribed to this thread.Message\n> ID: ***@***.***>\n>\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1431448886/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
