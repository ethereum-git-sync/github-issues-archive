{
  "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20625",
  "repository_url": "https://api.github.com/repos/ethereum/go-ethereum",
  "labels_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20625/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20625/comments",
  "events_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20625/events",
  "html_url": "https://github.com/ethereum/go-ethereum/issues/20625",
  "id": 560182742,
  "node_id": "MDU6SXNzdWU1NjAxODI3NDI=",
  "number": 20625,
  "title": "Feature request: ability to define for how long old states are kept (in memory OR on disk) before pruning",
  "user": {
    "login": "toruvinn",
    "id": 9994967,
    "node_id": "MDQ6VXNlcjk5OTQ5Njc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/9994967?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/toruvinn",
    "html_url": "https://github.com/toruvinn",
    "followers_url": "https://api.github.com/users/toruvinn/followers",
    "following_url": "https://api.github.com/users/toruvinn/following{/other_user}",
    "gists_url": "https://api.github.com/users/toruvinn/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/toruvinn/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/toruvinn/subscriptions",
    "organizations_url": "https://api.github.com/users/toruvinn/orgs",
    "repos_url": "https://api.github.com/users/toruvinn/repos",
    "events_url": "https://api.github.com/users/toruvinn/events{/privacy}",
    "received_events_url": "https://api.github.com/users/toruvinn/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 72233652,
      "node_id": "MDU6TGFiZWw3MjIzMzY1Mg==",
      "url": "https://api.github.com/repos/ethereum/go-ethereum/labels/type:feature",
      "name": "type:feature",
      "color": "84b6eb",
      "default": false,
      "description": null
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": {
    "login": "gballet",
    "id": 3272758,
    "node_id": "MDQ6VXNlcjMyNzI3NTg=",
    "avatar_url": "https://avatars.githubusercontent.com/u/3272758?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/gballet",
    "html_url": "https://github.com/gballet",
    "followers_url": "https://api.github.com/users/gballet/followers",
    "following_url": "https://api.github.com/users/gballet/following{/other_user}",
    "gists_url": "https://api.github.com/users/gballet/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/gballet/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gballet/subscriptions",
    "organizations_url": "https://api.github.com/users/gballet/orgs",
    "repos_url": "https://api.github.com/users/gballet/repos",
    "events_url": "https://api.github.com/users/gballet/events{/privacy}",
    "received_events_url": "https://api.github.com/users/gballet/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "gballet",
      "id": 3272758,
      "node_id": "MDQ6VXNlcjMyNzI3NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3272758?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gballet",
      "html_url": "https://github.com/gballet",
      "followers_url": "https://api.github.com/users/gballet/followers",
      "following_url": "https://api.github.com/users/gballet/following{/other_user}",
      "gists_url": "https://api.github.com/users/gballet/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gballet/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gballet/subscriptions",
      "organizations_url": "https://api.github.com/users/gballet/orgs",
      "repos_url": "https://api.github.com/users/gballet/repos",
      "events_url": "https://api.github.com/users/gballet/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gballet/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 3,
  "created_at": "2020-02-05T07:10:28Z",
  "updated_at": "2021-07-02T05:51:42Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "Hello. While playing around and pulling data from the chain, I've ran into an issue.\r\n\r\nWhat I personally need to do is call one readonly contract function every block and store the return value in a database. With the default setting of 128 past historical states kept in memory, once my process pulling the data goes down for 128*15 (well, less now) seconds, I lose the ability to access the data. What I would really like is an option to just keep the states for, say, the past week. Then prune them. Some sort of setting that would define the time (or block count) for the states to be kept available for eth_call RPC would solve the issue.\r\n\r\nCurrently keeping a full archival node is a bit of an overkill and requires significant amount of storage, yet I'm sure quite often we do not need to check the state of a really old block.\r\n\r\nThis sounds more like a pruning mechanism enhancement to me - have a node that persists states (archival mode), but a tunable prune function that would remove everything that isn't needed to retrieve states for blocks not older than PruneStatesOlderThan seconds (or blocks, I don't care).\r\n\r\nI also wonder if keeping a separate leveldb instance for tries could be beneficial. The reason for that is that we can divide those types of storage (ancient, not-frozen - and tries) across different filesystems/storages (what would happen if I wiped the trie database, though?).\r\n\r\nThank you.",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20625/reactions",
    "total_count": 4,
    "+1": 4,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20625/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/588874790",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/20625#issuecomment-588874790",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20625",
    "id": 588874790,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4ODg3NDc5MA==",
    "user": {
      "login": "holiman",
      "id": 142290,
      "node_id": "MDQ6VXNlcjE0MjI5MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/142290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/holiman",
      "html_url": "https://github.com/holiman",
      "followers_url": "https://api.github.com/users/holiman/followers",
      "following_url": "https://api.github.com/users/holiman/following{/other_user}",
      "gists_url": "https://api.github.com/users/holiman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/holiman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/holiman/subscriptions",
      "organizations_url": "https://api.github.com/users/holiman/orgs",
      "repos_url": "https://api.github.com/users/holiman/repos",
      "events_url": "https://api.github.com/users/holiman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/holiman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-02-20T09:54:32Z",
    "updated_at": "2020-02-20T09:54:32Z",
    "author_association": "MEMBER",
    "body": "An alternative solution to this, without causing memory issues or disk issues with massive states, is if geth could support a \"plugin\" model, where \r\n\r\n- For each block, run plugin 'x'\r\n- In 'x', you can have programmatic access to the state, and do whatever data collection you want.\r\n- Next block is only processed after the plugin is done. \r\n\r\nThen you could start geth with e.g.  `geth --blockpostprocess=blabla.wasm` . Thoughts? ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/588874790/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/589085567",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/20625#issuecomment-589085567",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20625",
    "id": 589085567,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4OTA4NTU2Nw==",
    "user": {
      "login": "toruvinn",
      "id": 9994967,
      "node_id": "MDQ6VXNlcjk5OTQ5Njc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9994967?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/toruvinn",
      "html_url": "https://github.com/toruvinn",
      "followers_url": "https://api.github.com/users/toruvinn/followers",
      "following_url": "https://api.github.com/users/toruvinn/following{/other_user}",
      "gists_url": "https://api.github.com/users/toruvinn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/toruvinn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/toruvinn/subscriptions",
      "organizations_url": "https://api.github.com/users/toruvinn/orgs",
      "repos_url": "https://api.github.com/users/toruvinn/repos",
      "events_url": "https://api.github.com/users/toruvinn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/toruvinn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-02-20T14:44:14Z",
    "updated_at": "2020-02-20T14:44:14Z",
    "author_association": "NONE",
    "body": "That would work assuming blabla.wasm always executes perfectly and never loses its output.\r\nOn the other hand, assuming wrong blabla.wasm implementation, as long as we have n blocks worth of states, we can always easily \"rewind\" and retry...\r\nThat's useful if we're coding something from scratch and want to test it, even if we're just trying things out to create said blabla.wasm.\r\n\r\nThat said, I'd still kind of welcome a prune function that can remove old, not useful data from disk. That could be helpful with cleaning the database that has some unneeded states flushed to reduce the storage size. Additionally, the ability to store states to a separate leveldb could also help with cleanup.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/589085567/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/872735730",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/20625#issuecomment-872735730",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20625",
    "id": 872735730,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg3MjczNTczMA==",
    "user": {
      "login": "Shirley-Ji",
      "id": 34133322,
      "node_id": "MDQ6VXNlcjM0MTMzMzIy",
      "avatar_url": "https://avatars.githubusercontent.com/u/34133322?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Shirley-Ji",
      "html_url": "https://github.com/Shirley-Ji",
      "followers_url": "https://api.github.com/users/Shirley-Ji/followers",
      "following_url": "https://api.github.com/users/Shirley-Ji/following{/other_user}",
      "gists_url": "https://api.github.com/users/Shirley-Ji/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Shirley-Ji/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Shirley-Ji/subscriptions",
      "organizations_url": "https://api.github.com/users/Shirley-Ji/orgs",
      "repos_url": "https://api.github.com/users/Shirley-Ji/repos",
      "events_url": "https://api.github.com/users/Shirley-Ji/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Shirley-Ji/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-07-02T05:51:42Z",
    "updated_at": "2021-07-02T05:51:42Z",
    "author_association": "NONE",
    "body": "Not sure if there is any updates on this issue?\r\nThere are more and more space used currencly in the archive node, it is very space consuming to keep. In current dapp/browser/wallet service scenarios, actually those old data has been parsed and moved to other places(e.g. hbase, mysql, graphnode) to store and access, keeping the old tx data and contract data is really space consuming.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/872735730/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
