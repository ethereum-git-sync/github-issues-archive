{
  "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/25125",
  "repository_url": "https://api.github.com/repos/ethereum/go-ethereum",
  "labels_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/25125/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/25125/comments",
  "events_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/25125/events",
  "html_url": "https://github.com/ethereum/go-ethereum/issues/25125",
  "id": 1275965618,
  "node_id": "I_kwDOAOvK985MDbCy",
  "number": 25125,
  "title": "Significant performance degradation with GoJa JS tracing debug_traceBlockByNumber",
  "user": {
    "login": "Gilad-Eisenberger",
    "id": 23073138,
    "node_id": "MDQ6VXNlcjIzMDczMTM4",
    "avatar_url": "https://avatars.githubusercontent.com/u/23073138?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Gilad-Eisenberger",
    "html_url": "https://github.com/Gilad-Eisenberger",
    "followers_url": "https://api.github.com/users/Gilad-Eisenberger/followers",
    "following_url": "https://api.github.com/users/Gilad-Eisenberger/following{/other_user}",
    "gists_url": "https://api.github.com/users/Gilad-Eisenberger/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Gilad-Eisenberger/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Gilad-Eisenberger/subscriptions",
    "organizations_url": "https://api.github.com/users/Gilad-Eisenberger/orgs",
    "repos_url": "https://api.github.com/users/Gilad-Eisenberger/repos",
    "events_url": "https://api.github.com/users/Gilad-Eisenberger/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Gilad-Eisenberger/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 8,
  "created_at": "2022-06-19T06:19:22Z",
  "updated_at": "2022-06-23T18:29:46Z",
  "closed_at": "2022-06-23T16:11:48Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "We're experiencing a significant performance degradation with the latest version v1.10.19 .\r\n\r\nOur flows using `debug_traceBlockByNumber` using custom JS tracers are putting significantly higher loads on the nodes when executing a single trace. Each trace now uses **all** cores on the machine while producing the trace. \r\nExecution times remain as they were in previous versions. This means traces now consume significantly more resources to produce, and parallelize much worse than before.\r\n\r\nFor example, running a single `debug_traceBlockByNumber` using the legacy `prestateTracer` (.js version), the trace takes around 8000-9000ms to complete. During the time, it consumes all 56 cores on the node's machine (>80% cpu used). \r\nThe built-in tracer on the same block completes in 3000ms (expected to be faster), however does not consume more than 1 core during processing. \r\nEarlier versions complete the .js trace in the same amount of time, however do not consume more than one core during processing.\r\n\r\nThis is a regression from previous versions, which timing-wise appears related to the GoJa tracer changes, however we cannot confirm the root cause.\r\n\r\nAny help in investigating the root cause would be greatly appreciated. Additionally, any way to limit the concurrency of a single request would be great as well.",
  "closed_by": {
    "login": "fjl",
    "id": 6915,
    "node_id": "MDQ6VXNlcjY5MTU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6915?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/fjl",
    "html_url": "https://github.com/fjl",
    "followers_url": "https://api.github.com/users/fjl/followers",
    "following_url": "https://api.github.com/users/fjl/following{/other_user}",
    "gists_url": "https://api.github.com/users/fjl/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/fjl/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/fjl/subscriptions",
    "organizations_url": "https://api.github.com/users/fjl/orgs",
    "repos_url": "https://api.github.com/users/fjl/repos",
    "events_url": "https://api.github.com/users/fjl/events{/privacy}",
    "received_events_url": "https://api.github.com/users/fjl/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/25125/reactions",
    "total_count": 1,
    "+1": 1,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/25125/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1159626455",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/25125#issuecomment-1159626455",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/25125",
    "id": 1159626455,
    "node_id": "IC_kwDOAOvK985FHn7X",
    "user": {
      "login": "Gilad-Eisenberger",
      "id": 23073138,
      "node_id": "MDQ6VXNlcjIzMDczMTM4",
      "avatar_url": "https://avatars.githubusercontent.com/u/23073138?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Gilad-Eisenberger",
      "html_url": "https://github.com/Gilad-Eisenberger",
      "followers_url": "https://api.github.com/users/Gilad-Eisenberger/followers",
      "following_url": "https://api.github.com/users/Gilad-Eisenberger/following{/other_user}",
      "gists_url": "https://api.github.com/users/Gilad-Eisenberger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Gilad-Eisenberger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Gilad-Eisenberger/subscriptions",
      "organizations_url": "https://api.github.com/users/Gilad-Eisenberger/orgs",
      "repos_url": "https://api.github.com/users/Gilad-Eisenberger/repos",
      "events_url": "https://api.github.com/users/Gilad-Eisenberger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Gilad-Eisenberger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-19T06:21:42Z",
    "updated_at": "2022-06-19T06:21:42Z",
    "author_association": "NONE",
    "body": "Likely related to #23773 &  #24934",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1159626455/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1160074601",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/25125#issuecomment-1160074601",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/25125",
    "id": 1160074601,
    "node_id": "IC_kwDOAOvK985FJVVp",
    "user": {
      "login": "karalabe",
      "id": 129561,
      "node_id": "MDQ6VXNlcjEyOTU2MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/129561?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/karalabe",
      "html_url": "https://github.com/karalabe",
      "followers_url": "https://api.github.com/users/karalabe/followers",
      "following_url": "https://api.github.com/users/karalabe/following{/other_user}",
      "gists_url": "https://api.github.com/users/karalabe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/karalabe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/karalabe/subscriptions",
      "organizations_url": "https://api.github.com/users/karalabe/orgs",
      "repos_url": "https://api.github.com/users/karalabe/repos",
      "events_url": "https://api.github.com/users/karalabe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/karalabe/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-20T07:26:26Z",
    "updated_at": "2022-06-20T07:26:26Z",
    "author_association": "MEMBER",
    "body": "@s1na Could you please take a peek? Thx",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1160074601/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1160345716",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/25125#issuecomment-1160345716",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/25125",
    "id": 1160345716,
    "node_id": "IC_kwDOAOvK985FKXh0",
    "user": {
      "login": "s1na",
      "id": 1591639,
      "node_id": "MDQ6VXNlcjE1OTE2Mzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1591639?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/s1na",
      "html_url": "https://github.com/s1na",
      "followers_url": "https://api.github.com/users/s1na/followers",
      "following_url": "https://api.github.com/users/s1na/following{/other_user}",
      "gists_url": "https://api.github.com/users/s1na/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/s1na/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/s1na/subscriptions",
      "organizations_url": "https://api.github.com/users/s1na/orgs",
      "repos_url": "https://api.github.com/users/s1na/repos",
      "events_url": "https://api.github.com/users/s1na/events{/privacy}",
      "received_events_url": "https://api.github.com/users/s1na/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-20T11:47:08Z",
    "updated_at": "2022-06-20T11:47:08Z",
    "author_association": "MEMBER",
    "body": "Hey @Gilad-Eisenberger. Thanks for reporting this. I want to help get to the bottom of this.\r\n\r\nUnfortunately I don't have access to a machine with 56 cores. I just tried on one with 4 cores and both the duktape tracer and goja tracers consume all 4 cores to do `debug.traceBlockByNumber` for the JS `prestateTracer` (with Goja taking longer but this was a known regression that I'm planning to fix). Other JS tracers seem on-par or faster for Goja.\r\n\r\nI'd like to know if there are inefficiencies in the Goja tracers that are highlighted by your custom tracer. Is it something you can share? Have you tried other JS tracers' resource consumption (e.g. `callTracerLegacy`)? If you checkout commit [af02e97](https://github.com/ethereum/go-ethereum/commit/af02e97929d47238fa0dbd233846270802b99e1a) you have both engines available (e.g. `callTracerLegacy` for goja and `callTracerLegacyDuktape` for duktape).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1160345716/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1160715531",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/25125#issuecomment-1160715531",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/25125",
    "id": 1160715531,
    "node_id": "IC_kwDOAOvK985FLx0L",
    "user": {
      "login": "Gilad-Eisenberger",
      "id": 23073138,
      "node_id": "MDQ6VXNlcjIzMDczMTM4",
      "avatar_url": "https://avatars.githubusercontent.com/u/23073138?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Gilad-Eisenberger",
      "html_url": "https://github.com/Gilad-Eisenberger",
      "followers_url": "https://api.github.com/users/Gilad-Eisenberger/followers",
      "following_url": "https://api.github.com/users/Gilad-Eisenberger/following{/other_user}",
      "gists_url": "https://api.github.com/users/Gilad-Eisenberger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Gilad-Eisenberger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Gilad-Eisenberger/subscriptions",
      "organizations_url": "https://api.github.com/users/Gilad-Eisenberger/orgs",
      "repos_url": "https://api.github.com/users/Gilad-Eisenberger/repos",
      "events_url": "https://api.github.com/users/Gilad-Eisenberger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Gilad-Eisenberger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-20T18:02:37Z",
    "updated_at": "2022-06-20T18:02:37Z",
    "author_association": "NONE",
    "body": "Much appreciated.\r\n\r\nI was able to take some time to run some benchmarking on different configurations, trying out versions 1.10.17 & 1.10.19, with different core configurations (8 & 32, it's the same machine just changing affinity settings to limit the process to specific cores).\r\nIn both cases the tracers are the legacy call & prestate js tracers in the git master branch.\r\n\r\nFor each configuration, I ran increasing parallel requests to trace the same block, at the same time, from 1 to 8 concurrent requests.\r\n\r\n```\r\nTracer      |                          Legacy Call Tracer                         |                        Legacy Prestate Tracer                 \r\nVersion     |              1.10.17             |              1.10.19             |              1.10.17              |              1.10.19         \r\nCore Count  |       8 core    |      32 core   |       8 core    |      32 core   |       8 core    |      32 core    |       8 core    |      32 core\r\n# parallel ---------------------------------------------------------------------------------------------------------------------------------\r\n1           |    5651.841ms   |   5790.074ms   |    5320.909ms   |   3877.548ms   |    5830.081ms   |    6003.797ms   |   14168.277ms   |    7656.352ms\r\n2           |    6917.180ms   |   6612.210ms   |    6481.169ms   |   7457.299ms   |    6728.201ms   |    5796.719ms   |   27332.711ms   |   16156.832ms\r\n3           |    7791.324ms   |   6183.286ms   |    9582.127ms   |   5034.659ms   |    8984.426ms   |   11535.039ms   |   34059.716ms   |   15572.685ms\r\n4           |    9766.498ms   |   6977.169ms   |    8638.260ms   |   4989.417ms   |   14653.078ms   |   12270.590ms   |         Error   |   26252.477ms\r\n5           |   11432.268ms   |   7476.753ms   |    9979.610ms   |   5785.164ms   |   12155.815ms   |   14200.428ms   |                 |   26400.611ms\r\n6           |   12256.071ms   |   7213.083ms   |   11683.305ms   |   6576.304ms   |   14198.681ms   |   11765.026ms   |                 |         Error\r\n7           |   15136.179ms   |   8411.119ms   |   13068.131ms   |   6699.006ms   |   16897.552ms   |   16520.059ms   |                 |   \r\n8           |   16679.434ms   |   8623.590ms   |   14021.331ms   |   7748.165ms   |   21567.975ms   |   11851.511ms   |                 |   \r\n```\r\nIt looks like with callTracer everything is good in both versions. 1.10.19 provides a slight increase in performance. With the prestate tracer, 1.10.19 is much slower, and scales much worse as the concurrency increases. This is also the only configuration I've seen fail.\r\n\r\nAlso, while all configurations seem to use multiple cores, 1.10.19 on prestateTracer seems to max out all cores much sooner.\r\n\r\nI've tried modifying the tracer in an attempt to improve performance, but have not made any significant progress.\r\n\r\nIs this the type of performance difference you're expecting with this tracer on Goja? \r\n\r\nAdditionally, it looks like there's some discrepancy between the total CPU used and performance. This seems to apply to all configurations - but having & using more cores doesn't result in a faster result? Not sure how to investigate this part. I would naively expect the tracing of a block to be single threaded in nature, but it seems to utilize many cores?\r\n\r\nAny thoughts would be apprecaited",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1160715531/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1161389185",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/25125#issuecomment-1161389185",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/25125",
    "id": 1161389185,
    "node_id": "IC_kwDOAOvK985FOWSB",
    "user": {
      "login": "karalabe",
      "id": 129561,
      "node_id": "MDQ6VXNlcjEyOTU2MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/129561?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/karalabe",
      "html_url": "https://github.com/karalabe",
      "followers_url": "https://api.github.com/users/karalabe/followers",
      "following_url": "https://api.github.com/users/karalabe/following{/other_user}",
      "gists_url": "https://api.github.com/users/karalabe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/karalabe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/karalabe/subscriptions",
      "organizations_url": "https://api.github.com/users/karalabe/orgs",
      "repos_url": "https://api.github.com/users/karalabe/repos",
      "events_url": "https://api.github.com/users/karalabe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/karalabe/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-21T07:52:28Z",
    "updated_at": "2022-06-21T07:52:28Z",
    "author_association": "MEMBER",
    "body": "> I would naively expect the tracing of a block to be single threaded in nature, but it seems to utilize many cores?\r\n\r\nInterjecting just to respond to this observation. When running JavaScript tracers, a trace run will usually take a lot more time than just executing the same transaction from Go. So if you're tracing a block (or a chain segment), what we do is that we run ahead with Go's tx execution, creating starting points for the .js tracers; and then on many threads pick up these starting points and run the slow tracers on top.\r\n\r\nSina made some optimizations that - AFAIK - allows us to only look at certain events (of maybe even only certain opcodes for tracers), which might make them closed to Go's speed. But as for why the prestate tracer might be slower, that's odd as it would still need to run mostly the same code, just perhaps stash away the prestate data somewhere. Perhaps Goja's internal data storage/maps are not performing well and thus the many prestate inserts are causing a slowdown?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1161389185/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1161446814",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/25125#issuecomment-1161446814",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/25125",
    "id": 1161446814,
    "node_id": "IC_kwDOAOvK985FOkWe",
    "user": {
      "login": "Gilad-Eisenberger",
      "id": 23073138,
      "node_id": "MDQ6VXNlcjIzMDczMTM4",
      "avatar_url": "https://avatars.githubusercontent.com/u/23073138?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Gilad-Eisenberger",
      "html_url": "https://github.com/Gilad-Eisenberger",
      "followers_url": "https://api.github.com/users/Gilad-Eisenberger/followers",
      "following_url": "https://api.github.com/users/Gilad-Eisenberger/following{/other_user}",
      "gists_url": "https://api.github.com/users/Gilad-Eisenberger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Gilad-Eisenberger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Gilad-Eisenberger/subscriptions",
      "organizations_url": "https://api.github.com/users/Gilad-Eisenberger/orgs",
      "repos_url": "https://api.github.com/users/Gilad-Eisenberger/repos",
      "events_url": "https://api.github.com/users/Gilad-Eisenberger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Gilad-Eisenberger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-21T08:43:02Z",
    "updated_at": "2022-06-21T08:43:02Z",
    "author_association": "NONE",
    "body": "That's helpful information. That explains the multi-core use I was not expecting. \r\n\r\nRemoving the `toHex()` on the prestate tracer's code seems to have the most significant impact. From my understanding the code buffer is passing the go-js boundary 3 times (once as a buffer to the js, then back as a buffer to the go, then finally once more as a string to the js again). I couldn't find an efficient way to convert the original `UInt8Array` to hex since `Buffer` does not seem available, but perhaps that could be an effective workaround.\r\n\r\nOur main concern currently is Gray Glacier that's upcoming and will force us to upgrade all nodes. Thanks for all the help so far.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1161446814/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1164273482",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/25125#issuecomment-1164273482",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/25125",
    "id": 1164273482,
    "node_id": "IC_kwDOAOvK985FZWdK",
    "user": {
      "login": "s1na",
      "id": 1591639,
      "node_id": "MDQ6VXNlcjE1OTE2Mzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1591639?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/s1na",
      "html_url": "https://github.com/s1na",
      "followers_url": "https://api.github.com/users/s1na/followers",
      "following_url": "https://api.github.com/users/s1na/following{/other_user}",
      "gists_url": "https://api.github.com/users/s1na/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/s1na/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/s1na/subscriptions",
      "organizations_url": "https://api.github.com/users/s1na/orgs",
      "repos_url": "https://api.github.com/users/s1na/repos",
      "events_url": "https://api.github.com/users/s1na/events{/privacy}",
      "received_events_url": "https://api.github.com/users/s1na/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-23T11:05:02Z",
    "updated_at": "2022-06-23T11:05:02Z",
    "author_association": "MEMBER",
    "body": "Pointing to `toHex` was a good hint. The problem is as I guessed in conversion of Go `[]byte` to JS `Uint8Array` and back. I have a small benchmark comparing these conversions for Duktape vs Goja and the difference is stark.\r\n\r\nGoja exposes no explicit API to do this so we've had to do with hacky approaches. I modified our conversion functions slightly and it seems to now have performance on-par with duktape on a limited dataset. See https://github.com/ethereum/go-ethereum/pull/25156. I have to test it more both for correctness and speed, but would appreciate it if you could try it with your own tracer and see how it fares.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1164273482/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1164737505",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/25125#issuecomment-1164737505",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/25125",
    "id": 1164737505,
    "node_id": "IC_kwDOAOvK985FbHvh",
    "user": {
      "login": "Gilad-Eisenberger",
      "id": 23073138,
      "node_id": "MDQ6VXNlcjIzMDczMTM4",
      "avatar_url": "https://avatars.githubusercontent.com/u/23073138?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Gilad-Eisenberger",
      "html_url": "https://github.com/Gilad-Eisenberger",
      "followers_url": "https://api.github.com/users/Gilad-Eisenberger/followers",
      "following_url": "https://api.github.com/users/Gilad-Eisenberger/following{/other_user}",
      "gists_url": "https://api.github.com/users/Gilad-Eisenberger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Gilad-Eisenberger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Gilad-Eisenberger/subscriptions",
      "organizations_url": "https://api.github.com/users/Gilad-Eisenberger/orgs",
      "repos_url": "https://api.github.com/users/Gilad-Eisenberger/repos",
      "events_url": "https://api.github.com/users/Gilad-Eisenberger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Gilad-Eisenberger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-23T18:29:46Z",
    "updated_at": "2022-06-23T18:29:46Z",
    "author_association": "NONE",
    "body": "Thanks for the effort. I was able to verify the behavior on a cloud-drive based node, and it looks good, definitely better than before. Thanks again for the assistance and giving this focus.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1164737505/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
