{
  "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/3383",
  "repository_url": "https://api.github.com/repos/ethereum/go-ethereum",
  "labels_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/3383/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/3383/comments",
  "events_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/3383/events",
  "html_url": "https://github.com/ethereum/go-ethereum/issues/3383",
  "id": 192527787,
  "node_id": "MDU6SXNzdWUxOTI1Mjc3ODc=",
  "number": 3383,
  "title": "Contract executing properly in Mist and in Solidity browser, but not in native geth",
  "user": {
    "login": "dbblackdiamond",
    "id": 11542603,
    "node_id": "MDQ6VXNlcjExNTQyNjAz",
    "avatar_url": "https://avatars.githubusercontent.com/u/11542603?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/dbblackdiamond",
    "html_url": "https://github.com/dbblackdiamond",
    "followers_url": "https://api.github.com/users/dbblackdiamond/followers",
    "following_url": "https://api.github.com/users/dbblackdiamond/following{/other_user}",
    "gists_url": "https://api.github.com/users/dbblackdiamond/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/dbblackdiamond/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/dbblackdiamond/subscriptions",
    "organizations_url": "https://api.github.com/users/dbblackdiamond/orgs",
    "repos_url": "https://api.github.com/users/dbblackdiamond/repos",
    "events_url": "https://api.github.com/users/dbblackdiamond/events{/privacy}",
    "received_events_url": "https://api.github.com/users/dbblackdiamond/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 856638432,
      "node_id": "MDU6TGFiZWw4NTY2Mzg0MzI=",
      "url": "https://api.github.com/repos/ethereum/go-ethereum/labels/status:inactive",
      "name": "status:inactive",
      "color": "ffffff",
      "default": false,
      "description": null
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2016-11-30T10:23:51Z",
  "updated_at": "2018-04-16T15:37:46Z",
  "closed_at": "2018-04-16T15:37:46Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "#### System information\r\n\r\nGeth version: `geth version`\r\n`Geth\r\nVersion: 1.5.3-unstable\r\nGit Commit: a0e42aa4e206247efe6df8706a2fb6bbdf6074b4\r\nProtocol Versions: [63 62]\r\nNetwork Id: 1\r\nGo Version: go1.7.3\r\nOS: linux\r\nGOPATH=\r\nGOROOT=/usr/lib/go-1.7\r\n`\r\nOS & Version: Windows/Linux/OSX: Ubuntu 16.04 LTS\r\nCommit hash : (if `develop`)\r\n\r\n#### Expected behaviour\r\nI am working on a voting contract, built on the voting example in the documentation. \r\nHere is the contract:\r\n ````       \r\npragma solidity ^0.4.2;\r\n    \r\ncontract Mortal {\r\n    address owner;\r\n\r\n    event Killed(address indexed from);\r\n\r\n    function Mortal() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function kill() {\r\n        if (msg.sender == owner) {\r\n            Killed(owner);\r\n            suicide(owner);\r\n        }\r\n    }\r\n}\r\n    \r\n/// @title Voting with delegation.\r\ncontract Voting is Mortal {\r\n    struct Voter {\r\n        address voterAddress;\r\n        uint hasRightToVote;\r\n        mapping(uint => uint) voted;\r\n        address delegatedTo;\r\n        uint weight;\r\n        uint bestSlide;\r\n        uint mostFunnySlide;\r\n        uint mostInformativeSlide;\r\n    }\r\n\r\n    struct Slide {\r\n        uint number;\r\n        uint voteCount;\r\n        uint score;\r\n        uint avgScore;\r\n    }\r\n\r\n    address public chairperson;\r\n\r\n    mapping(address => Voter) public voters;\r\n    mapping(uint => Slide) public slides;\r\n\r\n    address[] voterList;\r\n    uint public totalSlides;\r\n    uint public totalVotes;\r\n    uint public totalVoters;\r\n\r\n\r\n    event GivenRightToVote(address indexed chairperson, address indexed voter);\r\n    event hasVoted(address indexed voter, uint indexed slideNumber, uint indexed slideScore);\r\n    event hasDelegated(address indexed voter, address indexed delegate);\r\n    event VoterAlreadyExists(address indexed voter);\r\n    event VoterCreated(address indexed voter);\r\n    event VoterNotExists(address indexed voter);\r\n    event SenderNotChairperson(address indexed sender);\r\n    event callInitVoter(address indexed voter, address indexed sender);\r\n    event invalidVoter(address indexed voter);\r\n    event callGiveRightToVote(address indexed voterAddr);\r\n    event initSlideVote(address indexed voterAddr, uint indexed slide);\r\n    event VoterNoRightToVote(address indexed voter);\r\n\r\n    function Voting(uint numberSlides) {\r\n        uint i;\r\n        for (i = 0; i < numberSlides; i++) slides[i] = Slide(i, 0, 0, 0);\r\n        chairperson = msg.sender;\r\n        initVoter(msg.sender);\r\n        voters[msg.sender].hasRightToVote = 0;\r\n        totalSlides = numberSlides;\r\n        totalVoters = 1;\r\n    }\r\n    \r\n    function getSlide(uint slideNumber) returns (uint number, uint score, uint voteCount) {\r\n        score = slides[slideNumber].score;\r\n        voteCount = slides[slideNumber].voteCount;\r\n        number = slides[slideNumber].number;\r\n        return(number, score, voteCount);\r\n    }\r\n    \r\n    function getSlideVoteCount(uint slideNumber) returns (uint voteCount) {\r\n        voteCount = slides[slideNumber].voteCount;\r\n        return voteCount;\r\n    }\r\n\r\n    function initVoter(address voter) internal {\r\n        callInitVoter(voter, msg.sender);\r\n        if(voter == address(0)) {\r\n            invalidVoter(voter);\r\n            return;\r\n        }\r\n        if(msg.sender == chairperson) {\r\n            if(voters[voter].voterAddress == voter) {\r\n                VoterAlreadyExists(voter);\r\n            } else {\r\n                VoterNotExists(voter);\r\n                voters[voter] = Voter(voter, 0, address(0), 1, 0, 0, 0);\r\n                for(uint i = 0; i < totalSlides; i++) voters[voter].voted[i] = 0;\r\n                totalVoters += 1;\r\n                voterList.push(voter);\r\n                VoterCreated(voter);\r\n            }\r\n        } else {\r\n            SenderNotChairperson(msg.sender);\r\n        }\r\n    }\r\n    \r\n    event unauthorizedCallerGiveRightToVote(address indexed voter);\r\n    function giveRightToVote(address voterAddr) {\r\n        callGiveRightToVote(voterAddr);\r\n        //Making sure it is a correct address\r\n        if(voterAddr == address(0)) {\r\n            invalidVoter(voterAddr);\r\n            return;\r\n        }\r\n        //Making sure only the chairperson can give right to vote\r\n        if(msg.sender == chairperson) {\r\n            //If the voter doesn't exist, then let's create it\r\n            if(voters[voterAddr].voterAddress == address(0)) {\r\n                VoterNotExists(voterAddr);\r\n                initVoter(voterAddr);\r\n                VoterCreated(voterAddr);\r\n            } else {\r\n                VoterAlreadyExists(voterAddr);\r\n            }\r\n            if (voters[voterAddr].hasRightToVote == 0) voters[voterAddr].hasRightToVote = 1;\r\n            GivenRightToVote(chairperson, voterAddr);\r\n        } else {\r\n            //Function was called from an unauthorised source, ie not chairperson\r\n            unauthorizedCallerGiveRightToVote(voterAddr);\r\n            return;\r\n        }\r\n    }\r\n\r\n    event callVote(address indexed voter, uint indexed slide, uint256 indexed score);\r\n    event VoterNotAllowedToVote(address indexed voter);\r\n    event VoterAllowedToVote(address indexed voter);\r\n    event ChairpersonNotAllowedToVote(address indexed voter);\r\n    event VoterExists(address indexed voter);\r\n    event VoterAlreadyVoted(address indexed voterAddr, uint indexed slide);\r\n    event tooManySlides(uint indexed slide);\r\n    function vote(uint slide, uint256 score, address voter) {\r\n        //In final version, replace voterAddr with msg.sender\r\n        callVote(voter, slide, score);\r\n        if(slide > totalSlides) {\r\n            tooManySlides(slide);\r\n            return;\r\n        }\r\n        if(voter == chairperson) {\r\n            ChairpersonNotAllowedToVote(voter);\r\n            return;\r\n        } else {\r\n            if(voter == address(0)) {\r\n                VoterNotExists(voter);\r\n                return;\r\n            } else {\r\n                //voter = voters[voterAddr];\r\n                if(voters[voter].hasRightToVote != 1) {\r\n                    VoterNoRightToVote(voter);\r\n                    return;\r\n                } else {\r\n                    VoterExists(voter);\r\n                    VoterAllowedToVote(voter);\r\n                    //If the voter has already voted on the slide,\r\n                    // we won't let it do it again\r\n                    if(voters[voter].voted[slide] == 1) {\r\n                        VoterAlreadyVoted(voter, slide);\r\n                        return;\r\n                    } else {\r\n                        voters[voter].voted[slide] = 1;\r\n                        totalVotes += voters[voter].weight;\r\n                        slides[slide].voteCount += voters[voter].weight;\r\n                        slides[slide].score += (score * voters[voter].weight);\r\n                    }\r\n                    hasVoted(voter, slide, score);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    event callDelegate(address indexed to, address indexed from);\r\n    event removeRightToVote(address indexed voter);\r\n    event rightToVoteRemoved(address indexed voter);\r\n    event notAllowedToDelegate(address indexed voter);\r\n    // Delegate vote to address _to_\r\n    function delegate(address to) {\r\n        callDelegate(to, msg.sender);\r\n        //Chairperson can't delegate\r\n        if(msg.sender == chairperson) {\r\n            notAllowedToDelegate(msg.sender);\r\n            return;\r\n        }\r\n        \r\n        //Not allowed to delegate to himself\r\n        if(to == msg.sender) {\r\n            notAllowedToDelegate(msg.sender);\r\n            return;\r\n        }\r\n        //Remove right to vote to msg.sender\r\n        if(voters[msg.sender].hasRightToVote == 1) {\r\n            removeRightToVote(msg.sender);\r\n            voters[msg.sender].hasRightToVote = 0;\r\n            rightToVoteRemoved(msg.sender);\r\n        } else {\r\n            notAllowedToDelegate(msg.sender);\r\n            return;\r\n        }\r\n\r\n        voters[msg.sender].delegatedTo = to;\r\n        voters[to].weight += 1;\r\n\r\n        hasDelegated(msg.sender, to);\r\n    }\r\n    \r\n    event callSetBestSlide(uint indexed slide, address indexed voter);\r\n    event BestSlide(uint indexed slide, address indexed voter);\r\n    function setBestSlide(uint slide) {\r\n        callSetBestSlide(slide, msg.sender);\r\n        //A voter can choose a slide only if he is allowed to vote\r\n        if(voters[msg.sender].hasRightToVote == 1) {\r\n            voters[msg.sender].bestSlide = slide;\r\n        }\r\n        BestSlide(slide, msg.sender);\r\n    }\r\n\r\n    event callSetFunnySlide(uint indexed slide, address indexed voter);\r\n    event FunnySlide(uint indexed slide, address indexed voter);\r\n    function setFunnySlide(uint slide) {\r\n        callSetFunnySlide(slide, msg.sender);\r\n        //A voter can choose a slide only if he is allowed to vote\r\n        if(voters[msg.sender].hasRightToVote == 1) {\r\n            voters[msg.sender].mostFunnySlide = slide;\r\n        }\r\n        FunnySlide(slide, msg.sender);\r\n    }\r\n\r\n    event callSetInformativeSlide(uint indexed slide, address indexed voter);\r\n    event InformativeSlide(uint indexed slide, address indexed voter);\r\n    function setInformativeSlide(uint slide) {\r\n        callSetInformativeSlide(slide, msg.sender);\r\n        //A voter can choose a slide only if he is allowed to vote\r\n        if(voters[msg.sender].hasRightToVote == 1) {\r\n            voters[msg.sender].mostInformativeSlide = slide;\r\n        }\r\n        InformativeSlide(slide, msg.sender);\r\n    }\r\n    \r\n    event callGetBestSlides(address indexed voter);\r\n    event VoterNotAllowedToGetBestSlides(address indexed voter);\r\n    event returnBestSlides(uint[] indexed bestSlide);\r\n    function getBestSlides() constant returns (uint[]) {\r\n        callGetBestSlides(msg.sender);\r\n        if(msg.sender != chairperson) {\r\n            VoterNotAllowedToGetBestSlides(msg.sender);\r\n            return;\r\n        }\r\n        uint[] memory bestSlides = new uint[](voterList.length);\r\n        for(uint i = 0; i < voterList.length; i++) bestSlides[i] = voters[voterList[i]].bestSlide;\r\n        returnBestSlides(bestSlides);\r\n        return(bestSlides);\r\n    }\r\n\r\n    function winningSlide() constant returns (uint winningSlide) {\r\n        uint winningScore = 0;\r\n        for (uint p = 0; p < totalSlides; p++) {\r\n            if (slides[p].score > winningScore) {\r\n                winningScore = slides[p].score;\r\n                winningSlide = p;\r\n            }\r\n        }\r\n        return(winningSlide);\r\n    }\r\n    \r\n    // Calls winningProposal() function to get the index\r\n    // of the winner contained in the proposals array and then\r\n    // returns the name of the winner\r\n    function winnerCount() constant returns (uint voteCount) {\r\n        uint winnerSlide;\r\n        winnerSlide = winningSlide();\r\n        voteCount = slides[winnerSlide].voteCount;\r\n        return(voteCount);\r\n    }\r\n    \r\n    function winnerScore() constant returns (uint score) {\r\n        uint winnerSlide = winningSlide();\r\n        score = slides[winnerSlide].score;\r\n        return(score);\r\n    }\r\n\r\n}\r\n````\r\n\r\nOnce I instantiate the contract, I listen for all the event coming from the contract.\r\nWhen I execute `> voting.giveRightToVote(eth.accounts[1], {from: eth.accounts[0]});`, I would expect a bunch of events to be triggered and some variables to be updated.\r\n\r\n#### Actual behaviour\r\nNo events get triggered from the `> voting.giveRightToVote(eth.accounts[1], {from: eth.accounts[0]});` command or any other commands. If I run the same contract in Mist, everything works as expected. Mist shows all the events being triggered and the various variables being updated.  I see the transactions being submitted to geth and being mined, so I know that side is working. I am able to run other contracts without any issue, but for some reason, this one doesn't do what I would expect it to do.\r\n\r\n#### Steps to reproduce the behaviour\r\nI have tried to run this contract on geth 1.5.3 and geth 1.4.8 with the same result.\r\n\r\n#### Backtrace\r\nNot sure how to get the backtrace, but, if being told how to provide it, I can easily do so.\r\n",
  "closed_by": {
    "login": "stale[bot]",
    "id": 26384082,
    "node_id": "MDM6Qm90MjYzODQwODI=",
    "avatar_url": "https://avatars.githubusercontent.com/in/1724?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/stale%5Bbot%5D",
    "html_url": "https://github.com/apps/stale",
    "followers_url": "https://api.github.com/users/stale%5Bbot%5D/followers",
    "following_url": "https://api.github.com/users/stale%5Bbot%5D/following{/other_user}",
    "gists_url": "https://api.github.com/users/stale%5Bbot%5D/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/stale%5Bbot%5D/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/stale%5Bbot%5D/subscriptions",
    "organizations_url": "https://api.github.com/users/stale%5Bbot%5D/orgs",
    "repos_url": "https://api.github.com/users/stale%5Bbot%5D/repos",
    "events_url": "https://api.github.com/users/stale%5Bbot%5D/events{/privacy}",
    "received_events_url": "https://api.github.com/users/stale%5Bbot%5D/received_events",
    "type": "Bot",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/3383/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/3383/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/370440879",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/3383#issuecomment-370440879",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/3383",
    "id": 370440879,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MDQ0MDg3OQ==",
    "user": {
      "login": "stale[bot]",
      "id": 26384082,
      "node_id": "MDM6Qm90MjYzODQwODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/1724?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stale%5Bbot%5D",
      "html_url": "https://github.com/apps/stale",
      "followers_url": "https://api.github.com/users/stale%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/stale%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/stale%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stale%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stale%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/stale%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/stale%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/stale%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stale%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2018-03-05T14:44:21Z",
    "updated_at": "2018-03-05T14:44:21Z",
    "author_association": "NONE",
    "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/370440879/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
