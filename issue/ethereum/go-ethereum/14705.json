{
  "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/14705",
  "repository_url": "https://api.github.com/repos/ethereum/go-ethereum",
  "labels_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/14705/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/14705/comments",
  "events_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/14705/events",
  "html_url": "https://github.com/ethereum/go-ethereum/issues/14705",
  "id": 238478656,
  "node_id": "MDU6SXNzdWUyMzg0Nzg2NTY=",
  "number": 14705,
  "title": "How and where is the reorg() triggered",
  "user": {
    "login": "OniReimu",
    "id": 22544855,
    "node_id": "MDQ6VXNlcjIyNTQ0ODU1",
    "avatar_url": "https://avatars.githubusercontent.com/u/22544855?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/OniReimu",
    "html_url": "https://github.com/OniReimu",
    "followers_url": "https://api.github.com/users/OniReimu/followers",
    "following_url": "https://api.github.com/users/OniReimu/following{/other_user}",
    "gists_url": "https://api.github.com/users/OniReimu/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/OniReimu/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/OniReimu/subscriptions",
    "organizations_url": "https://api.github.com/users/OniReimu/orgs",
    "repos_url": "https://api.github.com/users/OniReimu/repos",
    "events_url": "https://api.github.com/users/OniReimu/events{/privacy}",
    "received_events_url": "https://api.github.com/users/OniReimu/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2017-06-26T08:52:50Z",
  "updated_at": "2018-07-30T07:33:15Z",
  "closed_at": "2017-06-26T09:14:08Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "#### System information\r\n\r\nGeth version: `geth 1.5.9`\r\nOS & Version: Linux/OSX\r\nCommit hash : (if `develop`)\r\n\r\nI've posted the same issue on gitter but no response sofar. Soorry for repost the message here again.\r\n\r\nIn what way geth will trigger the reorg() to reorganize the chain in order to resolve the unexpeced forks? I've lookup the source code in core/blockchain.go - Raw 841 showing the WriteBlock() calling the reorg(), and WriteBlock() is called by InsertChain() in Raw 984 right after the ValidateBlock() and ValidateState(). If the latest incoming block does not satisfy one of the rules then error poping up, WriteBlock() will not run in this case. However, canonical chain reorganization should imply that the latest incoming block shouldn't pass those two validations, shouldn't it? Then How is the reorg() triggered?\r\n\r\nTo be more extended, if I want to do a 51% attack within my private chain, I have locally tampered some data in the local database and there is only one node I tampered mining. Then other nodes of course rejected the latest block because it is seen as invalid. But as times and mining go, would other nodes automatically change their canonical chain to the chain the node I tampered is mining on sometime in the future?\r\nAs currently the chain that the mining node is mining on has been 50+ blocks far beyond from the old canonical chain where other nodes handle. But there is totally no further behaviour to reorganize the canonical chain being seen except for the constantly invalid block error-reminding when other nodes intend to sync.\r\n",
  "closed_by": {
    "login": "karalabe",
    "id": 129561,
    "node_id": "MDQ6VXNlcjEyOTU2MQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/129561?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/karalabe",
    "html_url": "https://github.com/karalabe",
    "followers_url": "https://api.github.com/users/karalabe/followers",
    "following_url": "https://api.github.com/users/karalabe/following{/other_user}",
    "gists_url": "https://api.github.com/users/karalabe/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/karalabe/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/karalabe/subscriptions",
    "organizations_url": "https://api.github.com/users/karalabe/orgs",
    "repos_url": "https://api.github.com/users/karalabe/repos",
    "events_url": "https://api.github.com/users/karalabe/events{/privacy}",
    "received_events_url": "https://api.github.com/users/karalabe/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/14705/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/14705/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/311005685",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/14705#issuecomment-311005685",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/14705",
    "id": 311005685,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxMTAwNTY4NQ==",
    "user": {
      "login": "karalabe",
      "id": 129561,
      "node_id": "MDQ6VXNlcjEyOTU2MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/129561?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/karalabe",
      "html_url": "https://github.com/karalabe",
      "followers_url": "https://api.github.com/users/karalabe/followers",
      "following_url": "https://api.github.com/users/karalabe/following{/other_user}",
      "gists_url": "https://api.github.com/users/karalabe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/karalabe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/karalabe/subscriptions",
      "organizations_url": "https://api.github.com/users/karalabe/orgs",
      "repos_url": "https://api.github.com/users/karalabe/repos",
      "events_url": "https://api.github.com/users/karalabe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/karalabe/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-26T09:14:08Z",
    "updated_at": "2017-06-26T09:14:08Z",
    "author_association": "MEMBER",
    "body": "Nodes will never import a block that fails validation. A 51% attack consists of a 51% of the miners forking off from a block in the past and creating a new chain that eventually beats the \"current canonical\" chain in total difficulty. A reorg is done only if a block being imported on a side fork leads to a higher total difficulty on that particular fork than the canonical fork. The blocks nonetheless still need to be valid.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/311005685/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/408773384",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/14705#issuecomment-408773384",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/14705",
    "id": 408773384,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwODc3MzM4NA==",
    "user": {
      "login": "cryptowhl",
      "id": 41469742,
      "node_id": "MDQ6VXNlcjQxNDY5NzQy",
      "avatar_url": "https://avatars.githubusercontent.com/u/41469742?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cryptowhl",
      "html_url": "https://github.com/cryptowhl",
      "followers_url": "https://api.github.com/users/cryptowhl/followers",
      "following_url": "https://api.github.com/users/cryptowhl/following{/other_user}",
      "gists_url": "https://api.github.com/users/cryptowhl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cryptowhl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cryptowhl/subscriptions",
      "organizations_url": "https://api.github.com/users/cryptowhl/orgs",
      "repos_url": "https://api.github.com/users/cryptowhl/repos",
      "events_url": "https://api.github.com/users/cryptowhl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cryptowhl/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-30T07:33:15Z",
    "updated_at": "2018-07-30T07:33:15Z",
    "author_association": "NONE",
    "body": "@karalabe Hi, when chain reorg occurs in Ethereum, the common way is first find common block, insert the block with the more total difficuty, and keep the transaction within the old chain but not within the new chain back to txpool. my question : is it nessasary to offset state change triggered by these txï¼Ÿ if so, where corresponding source code in go-ethereum? ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/408773384/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
