{
  "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/26406",
  "repository_url": "https://api.github.com/repos/ethereum/go-ethereum",
  "labels_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/26406/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/26406/comments",
  "events_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/26406/events",
  "html_url": "https://github.com/ethereum/go-ethereum/issues/26406",
  "id": 1516594917,
  "node_id": "I_kwDOAOvK985aZWbl",
  "number": 26406,
  "title": "modules provided on authenticated endpoint",
  "user": {
    "login": "chappjc",
    "id": 9373513,
    "node_id": "MDQ6VXNlcjkzNzM1MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/9373513?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/chappjc",
    "html_url": "https://github.com/chappjc",
    "followers_url": "https://api.github.com/users/chappjc/followers",
    "following_url": "https://api.github.com/users/chappjc/following{/other_user}",
    "gists_url": "https://api.github.com/users/chappjc/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/chappjc/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/chappjc/subscriptions",
    "organizations_url": "https://api.github.com/users/chappjc/orgs",
    "repos_url": "https://api.github.com/users/chappjc/repos",
    "events_url": "https://api.github.com/users/chappjc/events{/privacy}",
    "received_events_url": "https://api.github.com/users/chappjc/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 268304226,
      "node_id": "MDU6TGFiZWwyNjgzMDQyMjY=",
      "url": "https://api.github.com/repos/ethereum/go-ethereum/labels/type:docs",
      "name": "type:docs",
      "color": "fef2c0",
      "default": false,
      "description": null
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2023-01-02T17:30:43Z",
  "updated_at": "2023-01-03T15:21:41Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "On the authenticated endpoint (`authrpc`) are there certain modules that will always be provided (beyond the `engine` api), and can an `--authrpc.api=...` config option be added that allows enabling certain modules the user requires?\r\n\r\nFrom https://github.com/ethereum/execution-apis/blob/main/src/engine/authentication.md, it appears that only the `engine` module/namespace is required on the authenticated interface.  `geth` defines `DefaultAuthModules = []string{\"eth\", \"engine\"}`, and uses that only.  Presently the modules listed by `--http.api=...` or `--ws.api=...` apply only to those interfaces.\r\n\r\nA related question: is it ill-advised to use the `authrpc` interface with applications other than a consensus client?  I understand from the markdown spec linked above that the _motivation_ for the authenticated API was the `engine` API, but is it alright to be using it for other purposes where we'd like authentication.",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/26406/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/26406/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1369525429",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/26406#issuecomment-1369525429",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/26406",
    "id": 1369525429,
    "node_id": "IC_kwDOAOvK985RoUy1",
    "user": {
      "login": "karalabe",
      "id": 129561,
      "node_id": "MDQ6VXNlcjEyOTU2MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/129561?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/karalabe",
      "html_url": "https://github.com/karalabe",
      "followers_url": "https://api.github.com/users/karalabe/followers",
      "following_url": "https://api.github.com/users/karalabe/following{/other_user}",
      "gists_url": "https://api.github.com/users/karalabe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/karalabe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/karalabe/subscriptions",
      "organizations_url": "https://api.github.com/users/karalabe/orgs",
      "repos_url": "https://api.github.com/users/karalabe/repos",
      "events_url": "https://api.github.com/users/karalabe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/karalabe/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-03T09:02:01Z",
    "updated_at": "2023-01-03T09:02:01Z",
    "author_association": "MEMBER",
    "body": "I would probably say it's ill advised to use the authrpc for anything else since it's a shared secret (one key for all). If you wanted to use some form of authentication, it might make more sense to have app specific keys that you can revoke / change without impacting other users of the API. That however goes towards a more complex auth infra and I'd say to look for a reverse proxy supporting it vs. hoping Geth will ship enough features for it.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1369525429/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1369885262",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/26406#issuecomment-1369885262",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/26406",
    "id": 1369885262,
    "node_id": "IC_kwDOAOvK985RpspO",
    "user": {
      "login": "chappjc",
      "id": 9373513,
      "node_id": "MDQ6VXNlcjkzNzM1MTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9373513?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chappjc",
      "html_url": "https://github.com/chappjc",
      "followers_url": "https://api.github.com/users/chappjc/followers",
      "following_url": "https://api.github.com/users/chappjc/following{/other_user}",
      "gists_url": "https://api.github.com/users/chappjc/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chappjc/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chappjc/subscriptions",
      "organizations_url": "https://api.github.com/users/chappjc/orgs",
      "repos_url": "https://api.github.com/users/chappjc/repos",
      "events_url": "https://api.github.com/users/chappjc/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chappjc/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-03T15:15:08Z",
    "updated_at": "2023-01-03T15:21:41Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks for the perspective.  I guess I mean not for a shared RPC application, but just one user and their own geth.  I suppose in that case it would be \"what's the point of authentication then?\" and admittedly the use case isn't strong, but the JWT does prevent the browser based abuse described in the second bullet of [api spec doc](https://github.com/ethereum/execution-apis/blob/main/src/engine/authentication.md). (and IPC brings some baggage too)\r\n\r\nI suspect for the application I'm working on, we'll have it use the tried and true http/ws interfaces with appropriate cors/vhosts settings and not the authrpc one because of the module availability ambiguity.  If geth needs to be on a separate machine from the app, both transport encryption and authentication are solvable with external tools like vpns and ssh tunnels.\r\n\r\nDepending on the intended use cases for `authrpc` beyond consensus clients (if any), it would still potentially be nice to have a `--authrpc.api=...` switch instead of just the two default api modules that limit the interface's usefulness.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1369885262/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
