{
  "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/22529",
  "repository_url": "https://api.github.com/repos/ethereum/go-ethereum",
  "labels_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/22529/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/22529/comments",
  "events_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/22529/events",
  "html_url": "https://github.com/ethereum/go-ethereum/issues/22529",
  "id": 835568686,
  "node_id": "MDU6SXNzdWU4MzU1Njg2ODY=",
  "number": 22529,
  "title": "Memory leak on high JSON RPC load",
  "user": {
    "login": "ivica7",
    "id": 17837189,
    "node_id": "MDQ6VXNlcjE3ODM3MTg5",
    "avatar_url": "https://avatars.githubusercontent.com/u/17837189?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ivica7",
    "html_url": "https://github.com/ivica7",
    "followers_url": "https://api.github.com/users/ivica7/followers",
    "following_url": "https://api.github.com/users/ivica7/following{/other_user}",
    "gists_url": "https://api.github.com/users/ivica7/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ivica7/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ivica7/subscriptions",
    "organizations_url": "https://api.github.com/users/ivica7/orgs",
    "repos_url": "https://api.github.com/users/ivica7/repos",
    "events_url": "https://api.github.com/users/ivica7/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ivica7/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 72233650,
      "node_id": "MDU6TGFiZWw3MjIzMzY1MA==",
      "url": "https://api.github.com/repos/ethereum/go-ethereum/labels/type:bug",
      "name": "type:bug",
      "color": "FF5E5E",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 14,
  "created_at": "2021-03-19T05:02:13Z",
  "updated_at": "2021-06-30T10:22:50Z",
  "closed_at": "2021-03-23T15:16:52Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "Version: 1.9.25-stable\r\nGit Commit: e7872729012a4871397307b12cc3f4772ffcbec6\r\nGit Commit Date: 20201211\r\nArchitecture: amd64\r\nProtocol Versions: [65 64 63]\r\nGo Version: go1.15.6\r\nOperating System: linux\r\nRAM: 128Gb\r\n\r\nWe have a private network with clique with some 11M blocks. Raw geth database size is around 8Gb. --cache is 8192. RPC and WS ports are open. The node is not mining, it is exclusively used for the GUI to fetch the data from the blockchain.\r\n\r\nThe problem that we have, as soon as the gui send a heavier load of eth_getLogs and eth_call JSON requests (~8000 calls within 5min) the memory usage dramatically increases. Within 5min it jumps from initial 2Gb to 32Gb and finally it crashes at some point. Moreover, the system continuously decreases in performance, so every further call is further slowing the system down, which leads to even heavier RAM load. When we stop sending JSON RPC requests, the memory is not released.\r\n\r\nI have captured all JSON requests, and if I execute them one by one, there are no problems at all. Mem usage does not increase, the response times are good. But as soon as I start pushing them in parallel to the node the drastic memory increase is guaranteed. \r\n\r\nMy assumption is that there is a memory leak occurring when JSON RPC calls run concurrently.",
  "closed_by": {
    "login": "MariusVanDerWijden",
    "id": 16664698,
    "node_id": "MDQ6VXNlcjE2NjY0Njk4",
    "avatar_url": "https://avatars.githubusercontent.com/u/16664698?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/MariusVanDerWijden",
    "html_url": "https://github.com/MariusVanDerWijden",
    "followers_url": "https://api.github.com/users/MariusVanDerWijden/followers",
    "following_url": "https://api.github.com/users/MariusVanDerWijden/following{/other_user}",
    "gists_url": "https://api.github.com/users/MariusVanDerWijden/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/MariusVanDerWijden/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/MariusVanDerWijden/subscriptions",
    "organizations_url": "https://api.github.com/users/MariusVanDerWijden/orgs",
    "repos_url": "https://api.github.com/users/MariusVanDerWijden/repos",
    "events_url": "https://api.github.com/users/MariusVanDerWijden/events{/privacy}",
    "received_events_url": "https://api.github.com/users/MariusVanDerWijden/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/22529/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/22529/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/803862528",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/22529#issuecomment-803862528",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/22529",
    "id": 803862528,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgwMzg2MjUyOA==",
    "user": {
      "login": "MariusVanDerWijden",
      "id": 16664698,
      "node_id": "MDQ6VXNlcjE2NjY0Njk4",
      "avatar_url": "https://avatars.githubusercontent.com/u/16664698?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MariusVanDerWijden",
      "html_url": "https://github.com/MariusVanDerWijden",
      "followers_url": "https://api.github.com/users/MariusVanDerWijden/followers",
      "following_url": "https://api.github.com/users/MariusVanDerWijden/following{/other_user}",
      "gists_url": "https://api.github.com/users/MariusVanDerWijden/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MariusVanDerWijden/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MariusVanDerWijden/subscriptions",
      "organizations_url": "https://api.github.com/users/MariusVanDerWijden/orgs",
      "repos_url": "https://api.github.com/users/MariusVanDerWijden/repos",
      "events_url": "https://api.github.com/users/MariusVanDerWijden/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MariusVanDerWijden/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-22T08:20:18Z",
    "updated_at": "2021-03-22T08:20:18Z",
    "author_association": "MEMBER",
    "body": "Can you share a sample set of JSON rpc requests with us, so we can replicate it better?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/803862528/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/803886987",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/22529#issuecomment-803886987",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/22529",
    "id": 803886987,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgwMzg4Njk4Nw==",
    "user": {
      "login": "ivica7",
      "id": 17837189,
      "node_id": "MDQ6VXNlcjE3ODM3MTg5",
      "avatar_url": "https://avatars.githubusercontent.com/u/17837189?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ivica7",
      "html_url": "https://github.com/ivica7",
      "followers_url": "https://api.github.com/users/ivica7/followers",
      "following_url": "https://api.github.com/users/ivica7/following{/other_user}",
      "gists_url": "https://api.github.com/users/ivica7/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ivica7/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ivica7/subscriptions",
      "organizations_url": "https://api.github.com/users/ivica7/orgs",
      "repos_url": "https://api.github.com/users/ivica7/repos",
      "events_url": "https://api.github.com/users/ivica7/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ivica7/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-22T08:57:57Z",
    "updated_at": "2021-03-22T08:57:57Z",
    "author_association": "NONE",
    "body": "Sure, I have recorded the requests with the timestamp at the point of the mem leak. Here you go. It's basically eth_getLogs and eth_call. Later we noticed that the mass of the calls was due to a bug in the GUI, so it was a kind of unintentional load test on geth.\r\n\r\nIn the attached log, you'll find the detailed log of the calls during the mem leak including the timestamps. Moreover, there is a second file of some 50 calls. When I push them few times to the geth node, I can reproduce the mem leak.\r\n\r\n[2103_1_geth_memproblems.zip](https://github.com/ethereum/go-ethereum/files/6180741/2103_1_geth_memproblems.zip)\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/803886987/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/803947981",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/22529#issuecomment-803947981",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/22529",
    "id": 803947981,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgwMzk0Nzk4MQ==",
    "user": {
      "login": "MariusVanDerWijden",
      "id": 16664698,
      "node_id": "MDQ6VXNlcjE2NjY0Njk4",
      "avatar_url": "https://avatars.githubusercontent.com/u/16664698?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MariusVanDerWijden",
      "html_url": "https://github.com/MariusVanDerWijden",
      "followers_url": "https://api.github.com/users/MariusVanDerWijden/followers",
      "following_url": "https://api.github.com/users/MariusVanDerWijden/following{/other_user}",
      "gists_url": "https://api.github.com/users/MariusVanDerWijden/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MariusVanDerWijden/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MariusVanDerWijden/subscriptions",
      "organizations_url": "https://api.github.com/users/MariusVanDerWijden/orgs",
      "repos_url": "https://api.github.com/users/MariusVanDerWijden/repos",
      "events_url": "https://api.github.com/users/MariusVanDerWijden/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MariusVanDerWijden/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-22T10:19:30Z",
    "updated_at": "2021-03-22T10:19:30Z",
    "author_association": "MEMBER",
    "body": "Hmm so I can't really repro the memory leak, But I can see that there is a lot of memory being allocated during the filtering. I noticed you'll filter the whole chain on every request. This means that the node needs to retrieve every header for every block for every call. This quickly adds up. In my case (after sending ~300.000 requests, this allocated ~280GB of memory. The memory is immediately freed though once the requests is done. \r\nCould you maybe dump the memory on your node using `debug.writeMemProfile(\"file\")` in the console? That way I could investigate it better.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/803947981/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/803952013",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/22529#issuecomment-803952013",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/22529",
    "id": 803952013,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgwMzk1MjAxMw==",
    "user": {
      "login": "ivica7",
      "id": 17837189,
      "node_id": "MDQ6VXNlcjE3ODM3MTg5",
      "avatar_url": "https://avatars.githubusercontent.com/u/17837189?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ivica7",
      "html_url": "https://github.com/ivica7",
      "followers_url": "https://api.github.com/users/ivica7/followers",
      "following_url": "https://api.github.com/users/ivica7/following{/other_user}",
      "gists_url": "https://api.github.com/users/ivica7/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ivica7/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ivica7/subscriptions",
      "organizations_url": "https://api.github.com/users/ivica7/orgs",
      "repos_url": "https://api.github.com/users/ivica7/repos",
      "events_url": "https://api.github.com/users/ivica7/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ivica7/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-22T10:26:04Z",
    "updated_at": "2021-03-22T10:26:04Z",
    "author_association": "NONE",
    "body": "@maran thanks for looking into this. Yes, we're using lot of Logs and collecting them from block 0 on. With 10M Blocks, it should be around 1G of memory for that only. But once in memory, is this header data reused for other requests, or each request fetches the headers on its own?\r\n\r\nI'll repeat the load test on my side and send you the mem profile.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/803952013/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/803956577",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/22529#issuecomment-803956577",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/22529",
    "id": 803956577,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgwMzk1NjU3Nw==",
    "user": {
      "login": "MariusVanDerWijden",
      "id": 16664698,
      "node_id": "MDQ6VXNlcjE2NjY0Njk4",
      "avatar_url": "https://avatars.githubusercontent.com/u/16664698?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MariusVanDerWijden",
      "html_url": "https://github.com/MariusVanDerWijden",
      "followers_url": "https://api.github.com/users/MariusVanDerWijden/followers",
      "following_url": "https://api.github.com/users/MariusVanDerWijden/following{/other_user}",
      "gists_url": "https://api.github.com/users/MariusVanDerWijden/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MariusVanDerWijden/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MariusVanDerWijden/subscriptions",
      "organizations_url": "https://api.github.com/users/MariusVanDerWijden/orgs",
      "repos_url": "https://api.github.com/users/MariusVanDerWijden/repos",
      "events_url": "https://api.github.com/users/MariusVanDerWijden/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MariusVanDerWijden/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-22T10:33:31Z",
    "updated_at": "2021-03-22T10:33:31Z",
    "author_association": "MEMBER",
    "body": "There is a cache afaict for the headers, which grows with time (~1.9GB on my machine), but it seems most request will still retrieve a new header. Also the mapping blocknumber -> blockhash is not cached and has to be retrieved from DB on every request.\r\n\r\n```\r\n         .          .    517:// GetHeaderByNumber retrieves a block header from the database by number,\r\n         .          .    518:// caching it (associated with its hash) if found.\r\n         .          .    519:func (hc *HeaderChain) GetHeaderByNumber(number uint64) *types.Header {\r\n         .   128.97GB    520:\thash := rawdb.ReadCanonicalHash(hc.chainDb, number)\r\n         .          .    521:\tif hash == (common.Hash{}) {\r\n         .          .    522:\t\treturn nil\r\n         .          .    523:\t}\r\n         .   141.70GB    524:\treturn hc.GetHeader(hash, number)\r\n         .          .    525:}\r\n```\r\n\r\n```\r\n         .          .    483:func (hc *HeaderChain) GetHeader(hash common.Hash, number uint64) *types.Header {\r\n         .          .    484:\t// Short circuit if the header's already in the cache, retrieve otherwise\r\n         .          .    485:\tif header, ok := hc.headerCache.Get(hash); ok {\r\n         .          .    486:\t\treturn header.(*types.Header)\r\n         .          .    487:\t}\r\n         .   137.66GB    488:\theader := rawdb.ReadHeader(hc.chainDb, hash, number)\r\n         .          .    489:\tif header == nil {\r\n         .          .    490:\t\treturn nil\r\n         .          .    491:\t}\r\n         .          .    492:\t// Cache the found header for next time and return\r\n    1.87GB     4.30GB    493:\thc.headerCache.Add(hash, header)\r\n         .          .    494:\treturn header\r\n```\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/803956577/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/803958654",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/22529#issuecomment-803958654",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/22529",
    "id": 803958654,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgwMzk1ODY1NA==",
    "user": {
      "login": "ivica7",
      "id": 17837189,
      "node_id": "MDQ6VXNlcjE3ODM3MTg5",
      "avatar_url": "https://avatars.githubusercontent.com/u/17837189?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ivica7",
      "html_url": "https://github.com/ivica7",
      "followers_url": "https://api.github.com/users/ivica7/followers",
      "following_url": "https://api.github.com/users/ivica7/following{/other_user}",
      "gists_url": "https://api.github.com/users/ivica7/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ivica7/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ivica7/subscriptions",
      "organizations_url": "https://api.github.com/users/ivica7/orgs",
      "repos_url": "https://api.github.com/users/ivica7/repos",
      "events_url": "https://api.github.com/users/ivica7/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ivica7/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-22T10:36:54Z",
    "updated_at": "2021-03-22T10:43:20Z",
    "author_association": "NONE",
    "body": "Here's the memprofile. I pushed the attached ~50 requests ~20 times via two wscat instances. The mem consumption jumped from 770M to 3.2G. If I continue the game, I can bring it to 32G+, which leads to the crash of geth.\r\n\r\n[memprofile.zip](https://github.com/ethereum/go-ethereum/files/6181419/memprofile.zip)\r\n\r\nEDIT: Mem goes only up, when the messages are pushed to geth fast so it comes to parallel execution. If I send the requests slowly, everything is fine. So doesn't seem to be a mem leak actually as you already said.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/803958654/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/803973566",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/22529#issuecomment-803973566",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/22529",
    "id": 803973566,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgwMzk3MzU2Ng==",
    "user": {
      "login": "MariusVanDerWijden",
      "id": 16664698,
      "node_id": "MDQ6VXNlcjE2NjY0Njk4",
      "avatar_url": "https://avatars.githubusercontent.com/u/16664698?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MariusVanDerWijden",
      "html_url": "https://github.com/MariusVanDerWijden",
      "followers_url": "https://api.github.com/users/MariusVanDerWijden/followers",
      "following_url": "https://api.github.com/users/MariusVanDerWijden/following{/other_user}",
      "gists_url": "https://api.github.com/users/MariusVanDerWijden/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MariusVanDerWijden/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MariusVanDerWijden/subscriptions",
      "organizations_url": "https://api.github.com/users/MariusVanDerWijden/orgs",
      "repos_url": "https://api.github.com/users/MariusVanDerWijden/repos",
      "events_url": "https://api.github.com/users/MariusVanDerWijden/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MariusVanDerWijden/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-22T11:00:55Z",
    "updated_at": "2021-03-22T11:00:55Z",
    "author_association": "MEMBER",
    "body": "Yeah, so what I think happens is that whenever a new request comes in, the handler asks the database for the compressed BloomBits for a section. It then tries to decompress the section into 512 bytes. This decompressed Bloom-bitset is stored in the task and kept until the task is finished. If many tasks are started concurrently that blows up, as this memory is guaranteed to be allocated for the duration of the call. \r\n\r\nSo memory comes back down if you stop sending requests?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/803973566/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/803976175",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/22529#issuecomment-803976175",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/22529",
    "id": 803976175,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgwMzk3NjE3NQ==",
    "user": {
      "login": "ivica7",
      "id": 17837189,
      "node_id": "MDQ6VXNlcjE3ODM3MTg5",
      "avatar_url": "https://avatars.githubusercontent.com/u/17837189?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ivica7",
      "html_url": "https://github.com/ivica7",
      "followers_url": "https://api.github.com/users/ivica7/followers",
      "following_url": "https://api.github.com/users/ivica7/following{/other_user}",
      "gists_url": "https://api.github.com/users/ivica7/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ivica7/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ivica7/subscriptions",
      "organizations_url": "https://api.github.com/users/ivica7/orgs",
      "repos_url": "https://api.github.com/users/ivica7/repos",
      "events_url": "https://api.github.com/users/ivica7/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ivica7/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-22T11:04:49Z",
    "updated_at": "2021-03-22T11:05:05Z",
    "author_association": "NONE",
    "body": "@MariusVanDerWijden On OS level, I can only observe that when the memory gets allocated for the process once, it stays allocated. I can only observe that when I send in the requests slowly it doesn't grow. When I send it in fast in parallel, it grows fast and the requests take longer. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/803976175/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/804008489",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/22529#issuecomment-804008489",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/22529",
    "id": 804008489,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgwNDAwODQ4OQ==",
    "user": {
      "login": "MariusVanDerWijden",
      "id": 16664698,
      "node_id": "MDQ6VXNlcjE2NjY0Njk4",
      "avatar_url": "https://avatars.githubusercontent.com/u/16664698?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MariusVanDerWijden",
      "html_url": "https://github.com/MariusVanDerWijden",
      "followers_url": "https://api.github.com/users/MariusVanDerWijden/followers",
      "following_url": "https://api.github.com/users/MariusVanDerWijden/following{/other_user}",
      "gists_url": "https://api.github.com/users/MariusVanDerWijden/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MariusVanDerWijden/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MariusVanDerWijden/subscriptions",
      "organizations_url": "https://api.github.com/users/MariusVanDerWijden/orgs",
      "repos_url": "https://api.github.com/users/MariusVanDerWijden/repos",
      "events_url": "https://api.github.com/users/MariusVanDerWijden/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MariusVanDerWijden/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-22T12:00:34Z",
    "updated_at": "2021-03-22T12:00:34Z",
    "author_association": "MEMBER",
    "body": "Hmm yeah so we talked a bit about this issue internally. The problem is that the OS can not accurately see how much memory geth consumes. We do have metrics builtin that can be used to measure the ram usage accurately.\r\nWhat would really help us triage this issue, is if you could run your node for some time (2 minutes), then execute your RPC calls (until memory gets up 5GB or so) and then let the node run for another 5 minutes to see if the used memory gets garbage collected. \r\nAnd in between print the memory with `debug.writeMemProfile(\"file[1/2/3]\")` so that we can see if the memory gets collected.\r\nAlternatively, If you already collect metrics with `--metrics` that would be good too",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/804008489/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/804133255",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/22529#issuecomment-804133255",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/22529",
    "id": 804133255,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgwNDEzMzI1NQ==",
    "user": {
      "login": "ivica7",
      "id": 17837189,
      "node_id": "MDQ6VXNlcjE3ODM3MTg5",
      "avatar_url": "https://avatars.githubusercontent.com/u/17837189?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ivica7",
      "html_url": "https://github.com/ivica7",
      "followers_url": "https://api.github.com/users/ivica7/followers",
      "following_url": "https://api.github.com/users/ivica7/following{/other_user}",
      "gists_url": "https://api.github.com/users/ivica7/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ivica7/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ivica7/subscriptions",
      "organizations_url": "https://api.github.com/users/ivica7/orgs",
      "repos_url": "https://api.github.com/users/ivica7/repos",
      "events_url": "https://api.github.com/users/ivica7/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ivica7/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-22T15:03:42Z",
    "updated_at": "2021-03-22T15:03:42Z",
    "author_association": "NONE",
    "body": "@MariusVanDerWijden here you go. I did a mem dump every ~1min. After bringing him to 5G, I continued dumping the mem profile for ~5min.\r\n[memprofile.zip](https://github.com/ethereum/go-ethereum/files/6183171/memprofile.zip)\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/804133255/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/804796103",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/22529#issuecomment-804796103",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/22529",
    "id": 804796103,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgwNDc5NjEwMw==",
    "user": {
      "login": "MariusVanDerWijden",
      "id": 16664698,
      "node_id": "MDQ6VXNlcjE2NjY0Njk4",
      "avatar_url": "https://avatars.githubusercontent.com/u/16664698?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MariusVanDerWijden",
      "html_url": "https://github.com/MariusVanDerWijden",
      "followers_url": "https://api.github.com/users/MariusVanDerWijden/followers",
      "following_url": "https://api.github.com/users/MariusVanDerWijden/following{/other_user}",
      "gists_url": "https://api.github.com/users/MariusVanDerWijden/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MariusVanDerWijden/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MariusVanDerWijden/subscriptions",
      "organizations_url": "https://api.github.com/users/MariusVanDerWijden/orgs",
      "repos_url": "https://api.github.com/users/MariusVanDerWijden/repos",
      "events_url": "https://api.github.com/users/MariusVanDerWijden/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MariusVanDerWijden/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-23T10:36:50Z",
    "updated_at": "2021-03-23T10:36:50Z",
    "author_association": "MEMBER",
    "body": "Yeah just as I thought, during extensive load the memory blows up in the bloomhandler since every request allocates 512 bytes that are retained for the duration of the call. After the calls are finished, the memory is deallocated. So there's no memory leak there. One thing we might look into is if we should cap the memory available to allocate for the calls.\r\n\r\nmemprofile-10:\r\n```\r\n(pprof) top30\r\nShowing nodes accounting for 1554.85MB, 96.66% of 1608.54MB total\r\nDropped 107 nodes (cum <= 8.04MB)\r\nShowing top 30 nodes out of 57\r\n      flat  flat%   sum%        cum   cum%\r\n         0     0%     0%  1053.76MB 65.51%  github.com/ethereum/go-ethereum/eth.(*Ethereum).startBloomHandlers.func1\r\n         0     0%     0%  1044.51MB 64.94%  github.com/ethereum/go-ethereum/common/bitutil.DecompressBytes\r\n         0     0%     0%  1044.51MB 64.94%  github.com/ethereum/go-ethereum/common/bitutil.bitsetDecodeBytes\r\n 1044.51MB 64.94% 64.94%  1044.51MB 64.94%  github.com/ethereum/go-ethereum/common/bitutil.bitsetDecodePartialBytes\r\n  353.83MB 22.00% 86.93%   353.83MB 22.00%  github.com/ethereum/go-ethereum/core/bloombits.(*scheduler).scheduleRequests\r\n```\r\n\r\nmemprofile-13:\r\n```\r\nShowing nodes accounting for 156.21MB, 94.17% of 165.89MB total\r\nDropped 42 nodes (cum <= 0.83MB)\r\nShowing top 30 nodes out of 81\r\n      flat  flat%   sum%        cum   cum%\r\n         0     0%     0%   139.37MB 84.01%  gopkg.in/urfave/cli%2ev1.(*App).Run\r\n         0     0%     0%   139.37MB 84.01%  gopkg.in/urfave/cli%2ev1.HandleAction\r\n         0     0%     0%   139.37MB 84.01%  main.geth\r\n         0     0%     0%   137.86MB 83.10%  main.main\r\n         0     0%     0%   137.86MB 83.10%  runtime.main\r\n         0     0%     0%   135.37MB 81.60%  github.com/ethereum/go-ethereum/cmd/utils.RegisterEthService\r\n         0     0%     0%   135.37MB 81.60%  github.com/ethereum/go-ethereum/eth.New\r\n```\r\n\r\nThank you very much for the data @ivica7 ! ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/804796103/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/804946252",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/22529#issuecomment-804946252",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/22529",
    "id": 804946252,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgwNDk0NjI1Mg==",
    "user": {
      "login": "ivica7",
      "id": 17837189,
      "node_id": "MDQ6VXNlcjE3ODM3MTg5",
      "avatar_url": "https://avatars.githubusercontent.com/u/17837189?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ivica7",
      "html_url": "https://github.com/ivica7",
      "followers_url": "https://api.github.com/users/ivica7/followers",
      "following_url": "https://api.github.com/users/ivica7/following{/other_user}",
      "gists_url": "https://api.github.com/users/ivica7/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ivica7/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ivica7/subscriptions",
      "organizations_url": "https://api.github.com/users/ivica7/orgs",
      "repos_url": "https://api.github.com/users/ivica7/repos",
      "events_url": "https://api.github.com/users/ivica7/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ivica7/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-23T14:25:46Z",
    "updated_at": "2021-03-23T14:26:18Z",
    "author_association": "NONE",
    "body": "@MariusVanDerWijden thank you for analyzing the problem so fast! Just wanted to ask: would it make sense to add a limit for how many requests can be processed in parallel. Adding some kind of worker pool? Eventually controlled via a CLI param like `--rpcworkers --wsworkers`. Moreover, is it possible to reuse the data between the requests?\r\n\r\nAnd one more bonus question, if you have time: What I always wanted to know: when filtering events, bloom filters are used. These filters are checked block by block, right? There is no hierarchy of bloom filters, so you can exclude multiple blocks at once? So for our case with 11M blocks, that would mean that there are 11M bloom filter checks when getting logs `from:0`?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/804946252/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/804988407",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/22529#issuecomment-804988407",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/22529",
    "id": 804988407,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgwNDk4ODQwNw==",
    "user": {
      "login": "MariusVanDerWijden",
      "id": 16664698,
      "node_id": "MDQ6VXNlcjE2NjY0Njk4",
      "avatar_url": "https://avatars.githubusercontent.com/u/16664698?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MariusVanDerWijden",
      "html_url": "https://github.com/MariusVanDerWijden",
      "followers_url": "https://api.github.com/users/MariusVanDerWijden/followers",
      "following_url": "https://api.github.com/users/MariusVanDerWijden/following{/other_user}",
      "gists_url": "https://api.github.com/users/MariusVanDerWijden/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MariusVanDerWijden/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MariusVanDerWijden/subscriptions",
      "organizations_url": "https://api.github.com/users/MariusVanDerWijden/orgs",
      "repos_url": "https://api.github.com/users/MariusVanDerWijden/repos",
      "events_url": "https://api.github.com/users/MariusVanDerWijden/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MariusVanDerWijden/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-23T15:16:52Z",
    "updated_at": "2021-03-23T15:16:52Z",
    "author_association": "MEMBER",
    "body": "Yeah, we've been discussing something like that already. I've implemented something similar for tracing here https://github.com/ethereum/go-ethereum/pull/21755 but that isn't finalized yet.\r\n\r\nYes afaict the bloom filters are checked block by block, see https://github.com/ethereum/go-ethereum/blob/e862cbff95ef76daf49779cff94aecaa54538aa4/eth/filters/filter.go#L218\r\nI think that's the big problem in your use case, the `getLogs` take long to execute and retain a lot of memory per request, thus the next requests take even longer, retaining their memory longer, and so on. I would suggest (if that fits to your use case) to limit the `from` field in getLogs to something more reasonable.\r\n\r\nI'll close the issue for now, if that's okay",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/804988407/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/871280467",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/22529#issuecomment-871280467",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/22529",
    "id": 871280467,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg3MTI4MDQ2Nw==",
    "user": {
      "login": "nyetwurk",
      "id": 1088639,
      "node_id": "MDQ6VXNlcjEwODg2Mzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1088639?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nyetwurk",
      "html_url": "https://github.com/nyetwurk",
      "followers_url": "https://api.github.com/users/nyetwurk/followers",
      "following_url": "https://api.github.com/users/nyetwurk/following{/other_user}",
      "gists_url": "https://api.github.com/users/nyetwurk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nyetwurk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nyetwurk/subscriptions",
      "organizations_url": "https://api.github.com/users/nyetwurk/orgs",
      "repos_url": "https://api.github.com/users/nyetwurk/repos",
      "events_url": "https://api.github.com/users/nyetwurk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nyetwurk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-06-30T10:22:50Z",
    "updated_at": "2021-06-30T10:22:50Z",
    "author_association": "CONTRIBUTOR",
    "body": "v1.10.4 is leaking with minimal RPC load now.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/871280467/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
