{
  "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/16179",
  "repository_url": "https://api.github.com/repos/ethereum/go-ethereum",
  "labels_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/16179/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/16179/comments",
  "events_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/16179/events",
  "html_url": "https://github.com/ethereum/go-ethereum/issues/16179",
  "id": 299863992,
  "node_id": "MDU6SXNzdWUyOTk4NjM5OTI=",
  "number": 16179,
  "title": "eth/downloader: after state sync timeout, triggering peer drop and causing peer churn.",
  "user": {
    "login": "JulyKe",
    "id": 12707114,
    "node_id": "MDQ6VXNlcjEyNzA3MTE0",
    "avatar_url": "https://avatars.githubusercontent.com/u/12707114?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/JulyKe",
    "html_url": "https://github.com/JulyKe",
    "followers_url": "https://api.github.com/users/JulyKe/followers",
    "following_url": "https://api.github.com/users/JulyKe/following{/other_user}",
    "gists_url": "https://api.github.com/users/JulyKe/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/JulyKe/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/JulyKe/subscriptions",
    "organizations_url": "https://api.github.com/users/JulyKe/orgs",
    "repos_url": "https://api.github.com/users/JulyKe/repos",
    "events_url": "https://api.github.com/users/JulyKe/events{/privacy}",
    "received_events_url": "https://api.github.com/users/JulyKe/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 856638432,
      "node_id": "MDU6TGFiZWw4NTY2Mzg0MzI=",
      "url": "https://api.github.com/repos/ethereum/go-ethereum/labels/status:inactive",
      "name": "status:inactive",
      "color": "ffffff",
      "default": false,
      "description": null
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2018-02-23T22:00:20Z",
  "updated_at": "2019-04-07T22:23:23Z",
  "closed_at": "2019-04-07T22:23:23Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "Hi there\r\n\r\nWhen I am reproducing the bug eth-15138 with 2 nodes A and B, I occasionally sleep node-B to not respond to the GetNodeDataMsg from node-A, then node-A will detect the timeout and drop the peer node-B, later node-B reconnects, node-A will throw errStallingPeer exception, then disconnect and freshly reconnect. This causes the peer churn.  \r\n\r\n#### Expected behaviour\r\n state sync successfully \r\n\r\n#### Actual behaviour\r\nafter timeout, the peer drop shouldn't affect the peer churn, because eth-13158 requires the peer drop and reconnect happen before timeout. However, my experiment results are the same as that bug, but it happened after timeout. I occasionally reproduced it twice, no more, still now, I don't know the basic reason for it.\r\n\r\n#### Steps to reproduce the behaviour\r\nset timeout=20s, I have 4 accounts in total (2 for each node)\r\nnode-A sends getNodeDataMsg to node-B, which sleeps 25s and not response.\r\nnode-A detects the timeout and starts dropPeer, which is to removePeer node-B\r\nnode-B will reconnect and node-A will sync with node-B freshly\r\nnode-A process the request\r\n\r\n```\r\n- @huanke process the req\r\n- @huanke processNodeData inject a trie node data blob delivered from a remote peer into the state trie\r\n- @huanke sync.Process return if something was committed\r\n- @huanke TrieSync.schedule insert a new state retrieval request into the fetch queue\r\n- @huanke TrieSync.schedule insert a new state retrieval request into the fetch queue\r\n- @huanke stale?  false  --> response length 1\r\n- @huanke for s.sched.Pending() 3\r\n- @huanke stateSync.assignTasks() 1\r\n- @huanke case s.d.trackStateReq <- req 2\r\n```\r\n\r\n**Here just insert 2 new retrieval requests into he fetch queue. However, in the most cases, it will look like below:**\r\n```\r\n@huanke process the req\r\n@huanke before stateSync.processNodeData()  true 1 1\r\n@huanke processNodeData inject a trie node data blob delivered from a remote peer into the state trie\r\n@huanke sync.Process return if something was committed\r\n@huanke trie/sync.Process()  \r\n@huanke fullNode \r\n@huanke child  3\r\n@huanke child  4\r\n@huanke child  10\r\n@huanke child  12\r\n@huanke length of children  4\r\n@huanke length of requests  3\r\n@huanke TrieSync.schedule insert a new state retrieval request into the fetch queue\r\n@huanke TrieSync.schedule insert a new state retrieval request into the fetch queue\r\n@huanke TrieSync.schedule insert a new state retrieval request into the fetch queue\r\n@huanke prog =  false\r\n@huanke after stateSync.processNodeData() 1 0 false\r\n@huanke for s.sched.Pending() 4 0\r\n@huanke stateSync.assignTasks() 1\r\n@huanke ***fillTasks s.tasks:  0  capacity:  384\r\n@huanke ***fillTasks stateReq.tasks:  3  capacity:  384\r\n@huanke case s.d.trackStateReq <- req 3\r\n```\r\n\r\n\r\n\r\n\r\n#### Backtrace\r\n\r\n````\r\n@huanke Starting P2P networking -- p2p/server.Start()\r\nWelcome to the Geth JavaScript console!\r\n\r\ninstance: Geth/node0/v1.6.7-stable-88adb1fc/darwin-amd64/go1.8.5\r\ncoinbase: 0x16c0a3f6832f4b3bb0a6b4e0ca15635da91c588e\r\nat block: 0 (Wed, 31 Dec 1969 18:00:00 CST)\r\n modules: admin:1.0 debug:1.0 eth:1.0 miner:1.0 net:1.0 personal:1.0 rpc:1.0 txpool:1.0 web3:1.0\r\n\r\n> \r\n> @huanke api.AddPeer \r\n@huanke add new peer to newPeerCh 1 63 2\r\n@huanke newPeerCh --> go pm.synchronise(pm.peers.BestPeer())\r\n@huanke Register the peer locally\r\n@huanke downloader.RegisterPeer\r\n\r\n> @huanke peers:  1\r\n@huanke bestPeer :  69762849663877040808791256664309165729247158444886764294822325837640953626207\r\n@huanke if mode = downloader.FastSync\r\n@huanke Downloader.synchronise() fast\r\n@huanke Downloader.syncWithPeer()\r\n@huanke  ************Receive BlockHeadersMsg\r\n@huanke ===> findAncestor \r\n@huanke  ************Receive BlockHeadersMsg\r\n@huanke Downloader.case FastSync: \r\n@huanke ***********Pivot***  0 37 0\r\nd.mode == FastSync\r\n@huanke Downloader.processFastSyncContent() \r\n@huanke ==> skeleton = true\r\n@huanke TrieSync.schedule insert a new state retrieval request into the fetch queue\r\n@huanke  ************Receive BlockHeadersMsg\r\n@huanke ==> skeleton = false\r\n@huanke syncState(), write newStateSync to stateSyncStart Channel\r\n@huanke syncState(), read newStateSync to stateSyncStart Channel\r\n@huanke Downloader.runStateSync()\r\n@huanke stateSync.loop()\r\n@huanke for s.sched.Pending() 1\r\n@huanke stateSync.assignTasks() 1\r\n@huanke case s.d.trackStateReq <- req 1\r\n@huanke go p.peer.RequestNodeData(hashes)\r\n@huanke peer.RequestNodeData()\r\n@huanke case req := <-d.trackStateReq:\r\n@huanke active[req.peer.id] = req  1\r\n@huanke  ************Receive BlockHeadersMsg\r\n@huanke ==> skeleton = false\r\n\r\n> \r\n> @huanke case req := <-timeout: 0\r\n@huanke finished = append(finished, req)\r\n@huanke delete(active, req.peer.id)\r\n@huanke ++++++++finished's length +++++++++ 1\r\n@huanke case deliverReqCh <- deliverReq( finished[0]) : 1\r\n@huanke case req := <-s.deliver:\r\nStalling state sync, dropping peer peer 75f1a7caff5d7623\r\n@huanke Removing Ethereum peer\r\n@huanke Unregistering sync peer\r\n@huanke process the req\r\n@huanke req.timedOut()>>>>>>>>>>>>\r\n@huanke s.tasks[hash] = task\r\n@huanke stale?  false  --> response length 0\r\n@huanke for s.sched.Pending() 1\r\n@huanke stateSync.assignTasks() 0\r\n@huanke case <-s.cancel:\r\n@huanke case <-s.done:\r\n\r\n> @huanke add new peer to newPeerCh 1 63 2\r\n@huanke newPeerCh --> go pm.synchronise(pm.peers.BestPeer())\r\n@huanke Register the peer locally\r\n@huanke downloader.RegisterPeer\r\n\r\n> @huanke peers:  1\r\n@huanke bestPeer :  69762849663877040808791256664309165729247158444886764294822325837640953626207\r\n@huanke if mode = downloader.FastSync\r\n@huanke Downloader.synchronise() fast\r\n@huanke Downloader.syncWithPeer()\r\n@huanke  ************Receive BlockHeadersMsg\r\n@huanke ===> findAncestor \r\n@huanke  ************Receive BlockHeadersMsg\r\n@huanke Downloader.case FastSync: \r\n@huanke ***********Pivot***  0 37 0\r\nd.mode == FastSync\r\n@huanke Downloader.processFastSyncContent() \r\n@huanke ==> skeleton = true\r\n@huanke TrieSync.schedule insert a new state retrieval request into the fetch queue\r\n@huanke syncState(), write newStateSync to stateSyncStart Channel\r\n@huanke syncState(), read newStateSync to stateSyncStart Channel\r\n@huanke Downloader.runStateSync()\r\n@huanke stateSync.loop()\r\n@huanke for s.sched.Pending() 1\r\n@huanke stateSync.assignTasks() 1\r\n@huanke case s.d.trackStateReq <- req 1\r\n@huanke go p.peer.RequestNodeData(hashes)\r\n@huanke peer.RequestNodeData()\r\n@huanke case req := <-d.trackStateReq:\r\n@huanke active[req.peer.id] = req  1\r\n@huanke  ************Receive BlockHeadersMsg\r\n@huanke ==> skeleton = false\r\n@huanke case pack := <-d.stateCh:\r\n@huanke ++++++++finished's length +++++++++ 1\r\n@huanke case deliverReqCh <- deliverReq( finished[0]) : 1\r\n@huanke case req := <-s.deliver:\r\n@huanke process the req\r\n@huanke processNodeData inject a trie node data blob delivered from a remote peer into the state trie\r\n@huanke sync.Process return if something was committed\r\n@huanke TrieSync.schedule insert a new state retrieval request into the fetch queue\r\n@huanke TrieSync.schedule insert a new state retrieval request into the fetch queue\r\n@huanke stale?  false  --> response length 1\r\n@huanke for s.sched.Pending() 3\r\n@huanke stateSync.assignTasks() 1\r\n@huanke case s.d.trackStateReq <- req 2\r\n@huanke go p.peer.RequestNodeData(hashes)\r\n@huanke peer.RequestNodeData()\r\n@huanke case req := <-d.trackStateReq:\r\n@huanke active[req.peer.id] = req  1\r\n@huanke  ************Receive BlockHeadersMsg\r\n@huanke case pack := <-d.stateCh:\r\n@huanke ++++++++finished's length +++++++++ 1\r\n@huanke ==> skeleton = false\r\n@huanke case deliverReqCh <- deliverReq( finished[0]) : 1\r\n@huanke case req := <-s.deliver:\r\n@huanke process the req\r\n@huanke processNodeData inject a trie node data blob delivered from a remote peer into the state trie\r\n@huanke sync.Process return if something was committed\r\n@huanke  ************Receive BlockHeadersMsg\r\n@huanke processNodeData inject a trie node data blob delivered from a remote peer into the state trie\r\n@huanke sync.Process return if something was committed\r\n@huanke stale?  false  --> response length 2\r\n@huanke case <-s.done:\r\n@huanke >>>>> errStallingPeer2\r\n@huanke *****Synchronisation failed, dropping peer peer 75f1a7caff5d7623 err peer is stalling\r\n@huanke Removing Ethereum peer\r\n@huanke Unregistering sync peer\r\n\r\n> \r\n> @huanke add new peer to newPeerCh 1 63 2\r\n@huanke newPeerCh --> go pm.synchronise(pm.peers.BestPeer())\r\n@huanke Register the peer locally\r\n@huanke downloader.RegisterPeer\r\n@huanke peers:  1\r\n@huanke bestPeer :  69762849663877040808791256664309165729247158444886764294822325837640953626207\r\n@huanke if mode = downloader.FastSync\r\n@huanke Downloader.synchronise() fast\r\n@huanke Downloader.syncWithPeer()\r\n@huanke  ************Receive BlockHeadersMsg\r\n@huanke ===> findAncestor \r\n@huanke  ************Receive BlockHeadersMsg\r\n@huanke Downloader.case FastSync: \r\n@huanke ***********Pivot***  0 37 0\r\nd.mode == FastSync\r\n@huanke Downloader.processFastSyncContent() \r\n@huanke ==> skeleton = true\r\n@huanke syncState(), write newStateSync to stateSyncStart Channel\r\n@huanke syncState(), read newStateSync to stateSyncStart Channel\r\n@huanke Downloader.runStateSync()\r\n@huanke stateSync.loop()\r\n@huanke case <-s.done:\r\n@huanke  ************Receive BlockHeadersMsg\r\n@huanke ==> skeleton = false\r\n@huanke  ************Receive BlockHeadersMsg\r\n@huanke ==> skeleton = false\r\n@huanke  ************Receive BlockHeadersMsg\r\n@huanke >>>>> errStallingPeer2\r\n@huanke *****Synchronisation failed, dropping peer peer 75f1a7caff5d7623 err peer is stalling\r\n@huanke Removing Ethereum peer\r\n@huanke Unregistering sync peer\r\n> eth.blockNumber\r\n0\r\n> @huanke add new peer to newPeerCh 1 63 2\r\n@huanke newPeerCh --> go pm.synchronise(pm.peers.BestPeer())\r\n@huanke Register the peer locally\r\n@huanke downloader.RegisterPeer\r\n@huanke peers:  1\r\n@huanke bestPeer :  69762849663877040808791256664309165729247158444886764294822325837640953626207\r\n@huanke if mode = downloader.FastSync\r\n@huanke Downloader.synchronise() fast\r\n@huanke Downloader.syncWithPeer()\r\n@huanke  ************Receive BlockHeadersMsg\r\n@huanke ===> findAncestor \r\n@huanke  ************Receive BlockHeadersMsg\r\n@huanke Downloader.case FastSync: \r\n@huanke ***********Pivot***  0 37 0\r\nd.mode == FastSync\r\n@huanke Downloader.processFastSyncContent() \r\n@huanke syncState(), write newStateSync to stateSyncStart Channel\r\n@huanke syncState(), read newStateSync to stateSyncStart Channel\r\n@huanke Downloader.runStateSync()\r\n@huanke stateSync.loop()\r\n@huanke case <-s.done:\r\n@huanke ==> skeleton = true\r\n@huanke  ************Receive BlockHeadersMsg\r\n@huanke ==> skeleton = false\r\n@huanke  ************Receive BlockHeadersMsg\r\n@huanke ==> skeleton = false\r\n@huanke  ************Receive BlockHeadersMsg\r\n@huanke >>>>> errStallingPeer2\r\n@huanke *****Synchronisation failed, dropping peer peer 75f1a7caff5d7623 err peer is stalling\r\n@huanke Removing Ethereum peer\r\n@huanke Unregistering sync peer\r\n@huanke add new peer to newPeerCh 1 63 2\r\n@huanke newPeerCh --> go pm.synchronise(pm.peers.BestPeer())\r\n@huanke Register the peer locally\r\n@huanke downloader.RegisterPeer\r\n@huanke peers:  1\r\n@huanke bestPeer :  69762849663877040808791256664309165729247158444886764294822325837640953626207\r\n@huanke if mode = downloader.FastSync\r\n@huanke Downloader.synchronise() fast\r\n@huanke Downloader.syncWithPeer()\r\n@huanke  ************Receive BlockHeadersMsg\r\n@huanke ===> findAncestor \r\n@huanke  ************Receive BlockHeadersMsg\r\n@huanke Downloader.case FastSync: \r\n@huanke ***********Pivot***  0 37 0\r\nd.mode == FastSync\r\n@huanke Downloader.processFastSyncContent() \r\n@huanke syncState(), write newStateSync to stateSyncStart Channel\r\n@huanke syncState(), read newStateSync to stateSyncStart Channel\r\n@huanke Downloader.runStateSync()\r\n@huanke stateSync.loop()\r\n@huanke ==> skeleton = true\r\n@huanke case <-s.done:\r\n@huanke  ************Receive BlockHeadersMsg\r\n@huanke ==> skeleton = false\r\n@huanke  ************Receive BlockHeadersMsg\r\n@huanke ==> skeleton = false\r\n@huanke  ************Receive BlockHeadersMsg\r\n@huanke >>>>> errStallingPeer2\r\n@huanke *****Synchronisation failed, dropping peer peer 75f1a7caff5d7623 err peer is stalling\r\n@huanke Removing Ethereum peer\r\n@huanke Unregistering sync peer\r\n@huanke add new peer to newPeerCh 1 63 2\r\n@huanke newPeerCh --> go pm.synchronise(pm.peers.BestPeer())\r\n@huanke Register the peer locally\r\n@huanke downloader.RegisterPeer\r\n@huanke peers:  1\r\n@huanke bestPeer :  69762849663877040808791256664309165729247158444886764294822325837640953626207\r\n@huanke if mode = downloader.FastSync\r\n@huanke Downloader.synchronise() fast\r\n@huanke Downloader.syncWithPeer()\r\n@huanke  ************Receive BlockHeadersMsg\r\n@huanke ===> findAncestor \r\n@huanke  ************Receive BlockHeadersMsg\r\n@huanke Downloader.case FastSync: \r\n@huanke ***********Pivot***  0 37 0\r\nd.mode == FastSync\r\n@huanke Downloader.processFastSyncContent() \r\n@huanke syncState(), write newStateSync to stateSyncStart Channel\r\n@huanke syncState(), read newStateSync to stateSyncStart Channel\r\n@huanke Downloader.runStateSync()\r\n@huanke stateSync.loop()\r\n@huanke ==> skeleton = true\r\n@huanke case <-s.done:\r\n@huanke  ************Receive BlockHeadersMsg\r\n@huanke ==> skeleton = false\r\n@huanke  ************Receive BlockHeadersMsg\r\n@huanke ==> skeleton = false\r\n@huanke  ************Receive BlockHeadersMsg\r\n@huanke >>>>> errStallingPeer2\r\n@huanke *****Synchronisation failed, dropping peer peer 75f1a7caff5d7623 err peer is stalling\r\n@huanke Removing Ethereum peer\r\n@huanke Unregistering sync peer\r\n@huanke add new peer to newPeerCh 1 63 2\r\n@huanke newPeerCh --> go pm.synchronise(pm.peers.BestPeer())\r\n@huanke Register the peer locally\r\n@huanke downloader.RegisterPeer\r\n@huanke peers:  1\r\n@huanke bestPeer :  69762849663877040808791256664309165729247158444886764294822325837640953626207\r\n@huanke if mode = downloader.FastSync\r\n@huanke Downloader.synchronise() fast\r\n@huanke Downloader.syncWithPeer()\r\n@huanke  ************Receive BlockHeadersMsg\r\n@huanke ===> findAncestor \r\n@huanke  ************Receive BlockHeadersMsg\r\n@huanke Downloader.case FastSync: \r\n@huanke ***********Pivot***  0 37 0\r\nd.mode == FastSync\r\n@huanke Downloader.processFastSyncContent() \r\n@huanke syncState(), write newStateSync to stateSyncStart Channel\r\n@huanke syncState(), read newStateSync to stateSyncStart Channel\r\n@huanke Downloader.runStateSync()\r\n@huanke stateSync.loop()\r\n@huanke case <-s.done:\r\n@huanke ==> skeleton = true\r\n@huanke  ************Receive BlockHeadersMsg\r\n@huanke ==> skeleton = false\r\n@huanke  ************Receive BlockHeadersMsg\r\n@huanke ==> skeleton = false\r\n@huanke  ************Receive BlockHeadersMsg\r\n@huanke >>>>> errStallingPeer2\r\n@huanke *****Synchronisation failed, dropping peer peer 75f1a7caff5d7623 err peer is stalling\r\n@huanke Removing Ethereum peer\r\n@huanke Unregistering sync peer\r\n> exit\r\n",
  "closed_by": {
    "login": "stale[bot]",
    "id": 26384082,
    "node_id": "MDM6Qm90MjYzODQwODI=",
    "avatar_url": "https://avatars.githubusercontent.com/in/1724?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/stale%5Bbot%5D",
    "html_url": "https://github.com/apps/stale",
    "followers_url": "https://api.github.com/users/stale%5Bbot%5D/followers",
    "following_url": "https://api.github.com/users/stale%5Bbot%5D/following{/other_user}",
    "gists_url": "https://api.github.com/users/stale%5Bbot%5D/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/stale%5Bbot%5D/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/stale%5Bbot%5D/subscriptions",
    "organizations_url": "https://api.github.com/users/stale%5Bbot%5D/orgs",
    "repos_url": "https://api.github.com/users/stale%5Bbot%5D/repos",
    "events_url": "https://api.github.com/users/stale%5Bbot%5D/events{/privacy}",
    "received_events_url": "https://api.github.com/users/stale%5Bbot%5D/received_events",
    "type": "Bot",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/16179/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/16179/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/466822581",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/16179#issuecomment-466822581",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/16179",
    "id": 466822581,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2NjgyMjU4MQ==",
    "user": {
      "login": "stale[bot]",
      "id": 26384082,
      "node_id": "MDM6Qm90MjYzODQwODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/1724?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stale%5Bbot%5D",
      "html_url": "https://github.com/apps/stale",
      "followers_url": "https://api.github.com/users/stale%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/stale%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/stale%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stale%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stale%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/stale%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/stale%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/stale%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stale%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2019-02-24T22:09:40Z",
    "updated_at": "2019-02-24T22:09:40Z",
    "author_association": "NONE",
    "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/466822581/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 1,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
