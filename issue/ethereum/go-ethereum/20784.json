{
  "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20784",
  "repository_url": "https://api.github.com/repos/ethereum/go-ethereum",
  "labels_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20784/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20784/comments",
  "events_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20784/events",
  "html_url": "https://github.com/ethereum/go-ethereum/issues/20784",
  "id": 584322161,
  "node_id": "MDU6SXNzdWU1ODQzMjIxNjE=",
  "number": 20784,
  "title": "node: consider redesigning some of the API around context",
  "user": {
    "login": "mvdan",
    "id": 3576549,
    "node_id": "MDQ6VXNlcjM1NzY1NDk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/3576549?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mvdan",
    "html_url": "https://github.com/mvdan",
    "followers_url": "https://api.github.com/users/mvdan/followers",
    "following_url": "https://api.github.com/users/mvdan/following{/other_user}",
    "gists_url": "https://api.github.com/users/mvdan/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mvdan/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mvdan/subscriptions",
    "organizations_url": "https://api.github.com/users/mvdan/orgs",
    "repos_url": "https://api.github.com/users/mvdan/repos",
    "events_url": "https://api.github.com/users/mvdan/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mvdan/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": {
    "login": "fjl",
    "id": 6915,
    "node_id": "MDQ6VXNlcjY5MTU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6915?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/fjl",
    "html_url": "https://github.com/fjl",
    "followers_url": "https://api.github.com/users/fjl/followers",
    "following_url": "https://api.github.com/users/fjl/following{/other_user}",
    "gists_url": "https://api.github.com/users/fjl/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/fjl/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/fjl/subscriptions",
    "organizations_url": "https://api.github.com/users/fjl/orgs",
    "repos_url": "https://api.github.com/users/fjl/repos",
    "events_url": "https://api.github.com/users/fjl/events{/privacy}",
    "received_events_url": "https://api.github.com/users/fjl/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "fjl",
      "id": 6915,
      "node_id": "MDQ6VXNlcjY5MTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6915?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjl",
      "html_url": "https://github.com/fjl",
      "followers_url": "https://api.github.com/users/fjl/followers",
      "following_url": "https://api.github.com/users/fjl/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjl/subscriptions",
      "organizations_url": "https://api.github.com/users/fjl/orgs",
      "repos_url": "https://api.github.com/users/fjl/repos",
      "events_url": "https://api.github.com/users/fjl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjl/received_events",
      "type": "User",
      "site_admin": false
    },
    {
      "login": "renaynay",
      "id": 41963722,
      "node_id": "MDQ6VXNlcjQxOTYzNzIy",
      "avatar_url": "https://avatars.githubusercontent.com/u/41963722?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/renaynay",
      "html_url": "https://github.com/renaynay",
      "followers_url": "https://api.github.com/users/renaynay/followers",
      "following_url": "https://api.github.com/users/renaynay/following{/other_user}",
      "gists_url": "https://api.github.com/users/renaynay/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/renaynay/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/renaynay/subscriptions",
      "organizations_url": "https://api.github.com/users/renaynay/orgs",
      "repos_url": "https://api.github.com/users/renaynay/repos",
      "events_url": "https://api.github.com/users/renaynay/events{/privacy}",
      "received_events_url": "https://api.github.com/users/renaynay/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2020-03-19T10:48:16Z",
  "updated_at": "2020-08-15T10:03:53Z",
  "closed_at": "2020-08-15T10:03:53Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "For example, take https://godoc.org/github.com/ethereum/go-ethereum/node#Node.Start and https://godoc.org/github.com/ethereum/go-ethereum/node#Node.Stop. I think both of these could be unified into a single `Node.Start(context.Context) error`, and the semantics would be more idiomatic.\r\n\r\nTo keep backwards compatibility, perhaps we could add `FooContext` companion funcs to `Foo`, similar to `os/exec.CommandContext`. An alternative is to redesign existing APIs in a future v2.\r\n\r\nI'm sure there would easily be many more API candidates for considering. For exampke, in the same godoc page I see `StartRPC`/`StopRPC`.",
  "closed_by": {
    "login": "fjl",
    "id": 6915,
    "node_id": "MDQ6VXNlcjY5MTU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6915?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/fjl",
    "html_url": "https://github.com/fjl",
    "followers_url": "https://api.github.com/users/fjl/followers",
    "following_url": "https://api.github.com/users/fjl/following{/other_user}",
    "gists_url": "https://api.github.com/users/fjl/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/fjl/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/fjl/subscriptions",
    "organizations_url": "https://api.github.com/users/fjl/orgs",
    "repos_url": "https://api.github.com/users/fjl/repos",
    "events_url": "https://api.github.com/users/fjl/events{/privacy}",
    "received_events_url": "https://api.github.com/users/fjl/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20784/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20784/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/601125055",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/20784#issuecomment-601125055",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20784",
    "id": 601125055,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYwMTEyNTA1NQ==",
    "user": {
      "login": "karalabe",
      "id": 129561,
      "node_id": "MDQ6VXNlcjEyOTU2MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/129561?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/karalabe",
      "html_url": "https://github.com/karalabe",
      "followers_url": "https://api.github.com/users/karalabe/followers",
      "following_url": "https://api.github.com/users/karalabe/following{/other_user}",
      "gists_url": "https://api.github.com/users/karalabe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/karalabe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/karalabe/subscriptions",
      "organizations_url": "https://api.github.com/users/karalabe/orgs",
      "repos_url": "https://api.github.com/users/karalabe/repos",
      "events_url": "https://api.github.com/users/karalabe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/karalabe/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-03-19T11:19:44Z",
    "updated_at": "2020-03-19T11:20:18Z",
    "author_association": "MEMBER",
    "body": "Re API stability, I think we gave up a bit on the dream that we guarantee API backward compatibility. The repo root is fairly stable that we don't want to touch and maybe `ethclient` is also a bit more special snowflake since that's what most people use from Go to interface Ethereum, but for the rest, if some modification makes sense, just do it. It's better to clean up the code than to pile even more legacy junk in there. That said, I'll ask @fjl to weigh in here too because he's the saner one of us wrt backwards compatibility :D \r\n\r\nRe this particular suggestion, do you have (a link to) some code that uses this pattern? I do see how this could work out, but truth be told it's the first time I come across it.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/601125055/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/601130166",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/20784#issuecomment-601130166",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20784",
    "id": 601130166,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYwMTEzMDE2Ng==",
    "user": {
      "login": "mvdan",
      "id": 3576549,
      "node_id": "MDQ6VXNlcjM1NzY1NDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3576549?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mvdan",
      "html_url": "https://github.com/mvdan",
      "followers_url": "https://api.github.com/users/mvdan/followers",
      "following_url": "https://api.github.com/users/mvdan/following{/other_user}",
      "gists_url": "https://api.github.com/users/mvdan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mvdan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mvdan/subscriptions",
      "organizations_url": "https://api.github.com/users/mvdan/orgs",
      "repos_url": "https://api.github.com/users/mvdan/repos",
      "events_url": "https://api.github.com/users/mvdan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mvdan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-03-19T11:32:57Z",
    "updated_at": "2020-03-19T11:33:30Z",
    "author_association": "NONE",
    "body": "Some examples from the standard library:\r\n\r\n* https://golang.org/pkg/os/exec/#CommandContext\r\n* https://golang.org/pkg/net/#ListenConfig.Listen\r\n* https://golang.org/pkg/net/#Dialer.DialContext\r\n* https://golang.org/pkg/net/http/#Server.Shutdown\r\n\r\nhttps://blog.golang.org/context is a good introduction, and https://golang.org/pkg/context/ has up to date docs.\r\n\r\nThe TL;DR is that any API which might block for a long time, or which might run forever, should take a context to let the caller control when it stops. This includes any services/daemons one can start and stop, like the Node API above.\r\n\r\nYour API could look like:\r\n\r\n```\r\nctx, cancel := context.WithCancel(parentCtx)\r\ndefer cancel() // stop node when we finish\r\n\r\nif err := node.Start(ctx); err != nil { ... }\r\n\r\n// use node for some limited amount of operations\r\n```\r\n\r\nIt's also common to use context cancellation to set timeouts (common for single operations or shutdown APIs), to handle interrupts (e.g. to stop gracefully when one hits ^C), or to make sure that cancellation is propagated \"downstream\" (e.g. to make cancelling a context API also cancel any other \"children\" context APIs it started).\r\n\r\nThe only wrinkle here is that `cancel()` is never blocking, and doesn't return any error. You could keep the separate `Wait` method, to block until the node is fully down and return any error - that's probably the simplest option here. Other APIs use different mechanisms, like https://golang.org/pkg/net/http/#Server.Shutdown (to gracefully close clients) or https://godoc.org/github.com/chromedp/chromedp#Cancel (to wait until resources are cleaned up and return any errors).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/601130166/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/601607705",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/20784#issuecomment-601607705",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20784",
    "id": 601607705,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYwMTYwNzcwNQ==",
    "user": {
      "login": "fjl",
      "id": 6915,
      "node_id": "MDQ6VXNlcjY5MTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6915?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjl",
      "html_url": "https://github.com/fjl",
      "followers_url": "https://api.github.com/users/fjl/followers",
      "following_url": "https://api.github.com/users/fjl/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjl/subscriptions",
      "organizations_url": "https://api.github.com/users/fjl/orgs",
      "repos_url": "https://api.github.com/users/fjl/repos",
      "events_url": "https://api.github.com/users/fjl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjl/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-03-20T09:32:45Z",
    "updated_at": "2020-03-20T09:50:12Z",
    "author_association": "MEMBER",
    "body": "I think context is not the right thing for managing long-lived services with many background goroutines, the main reason being that there is no good way to wait for the service to actually stop through the context.\r\n\r\nThe thing with contexts is that they're really mostly for unblocking the caller in case of cancellation. There are lots of ways to combine contexts to achieve control of cancellation even for chains of callers. We do use context for some of the request-based APIs, and they do work for us there. We also use contexts inside of some components for shutdown coordination, so that we can cancel any requests created by the component.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/601607705/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/674377721",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/20784#issuecomment-674377721",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20784",
    "id": 674377721,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3NDM3NzcyMQ==",
    "user": {
      "login": "fjl",
      "id": 6915,
      "node_id": "MDQ6VXNlcjY5MTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6915?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjl",
      "html_url": "https://github.com/fjl",
      "followers_url": "https://api.github.com/users/fjl/followers",
      "following_url": "https://api.github.com/users/fjl/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjl/subscriptions",
      "organizations_url": "https://api.github.com/users/fjl/orgs",
      "repos_url": "https://api.github.com/users/fjl/repos",
      "events_url": "https://api.github.com/users/fjl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjl/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-15T10:03:53Z",
    "updated_at": "2020-08-15T10:03:53Z",
    "author_association": "MEMBER",
    "body": "We considered this in the recently merged refactoring, but decided against it because of the reasoning given above. With the new structure in package node, we can always add a method like `Node.Context()` that returns a context which tracks the lifecycle of the node.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/674377721/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
