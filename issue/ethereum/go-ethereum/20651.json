{
  "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20651",
  "repository_url": "https://api.github.com/repos/ethereum/go-ethereum",
  "labels_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20651/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20651/comments",
  "events_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20651/events",
  "html_url": "https://github.com/ethereum/go-ethereum/issues/20651",
  "id": 563720078,
  "node_id": "MDU6SXNzdWU1NjM3MjAwNzg=",
  "number": 20651,
  "title": "les: A possible data race in setCapacity() due to inconsistent field protection",
  "user": {
    "login": "BurtonQin",
    "id": 11943383,
    "node_id": "MDQ6VXNlcjExOTQzMzgz",
    "avatar_url": "https://avatars.githubusercontent.com/u/11943383?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/BurtonQin",
    "html_url": "https://github.com/BurtonQin",
    "followers_url": "https://api.github.com/users/BurtonQin/followers",
    "following_url": "https://api.github.com/users/BurtonQin/following{/other_user}",
    "gists_url": "https://api.github.com/users/BurtonQin/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/BurtonQin/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/BurtonQin/subscriptions",
    "organizations_url": "https://api.github.com/users/BurtonQin/orgs",
    "repos_url": "https://api.github.com/users/BurtonQin/repos",
    "events_url": "https://api.github.com/users/BurtonQin/events{/privacy}",
    "received_events_url": "https://api.github.com/users/BurtonQin/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": {
    "login": "zsfelfoldi",
    "id": 9884311,
    "node_id": "MDQ6VXNlcjk4ODQzMTE=",
    "avatar_url": "https://avatars.githubusercontent.com/u/9884311?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/zsfelfoldi",
    "html_url": "https://github.com/zsfelfoldi",
    "followers_url": "https://api.github.com/users/zsfelfoldi/followers",
    "following_url": "https://api.github.com/users/zsfelfoldi/following{/other_user}",
    "gists_url": "https://api.github.com/users/zsfelfoldi/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/zsfelfoldi/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/zsfelfoldi/subscriptions",
    "organizations_url": "https://api.github.com/users/zsfelfoldi/orgs",
    "repos_url": "https://api.github.com/users/zsfelfoldi/repos",
    "events_url": "https://api.github.com/users/zsfelfoldi/events{/privacy}",
    "received_events_url": "https://api.github.com/users/zsfelfoldi/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "zsfelfoldi",
      "id": 9884311,
      "node_id": "MDQ6VXNlcjk4ODQzMTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9884311?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zsfelfoldi",
      "html_url": "https://github.com/zsfelfoldi",
      "followers_url": "https://api.github.com/users/zsfelfoldi/followers",
      "following_url": "https://api.github.com/users/zsfelfoldi/following{/other_user}",
      "gists_url": "https://api.github.com/users/zsfelfoldi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zsfelfoldi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zsfelfoldi/subscriptions",
      "organizations_url": "https://api.github.com/users/zsfelfoldi/orgs",
      "repos_url": "https://api.github.com/users/zsfelfoldi/repos",
      "events_url": "https://api.github.com/users/zsfelfoldi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zsfelfoldi/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2020-02-12T03:20:03Z",
  "updated_at": "2020-08-13T16:29:47Z",
  "closed_at": "2020-08-13T16:29:47Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "#### System information\r\nGeth version: 1.9.10\r\nOS & Version: Windows/Linux/OSX\r\nCommit hash : 8045504abf64a865be4b1dbc780b796a9f5d11cc\r\n\r\n#### Expected behaviour\r\nA possible data race in func `setCapacity()` in les/clientpool.go.\r\n`f.capLimit` is read/written 9 times; 7 out of 9 times it is protected by `f.lock.Lock()`\r\n; 2 out of 9 times it is read without a Lock, which are in func `setCapacity()`.\r\nhttps://github.com/ethereum/go-ethereum/blob/8045504abf64a865be4b1dbc780b796a9f5d11cc/les/clientpool.go#L484-L494\r\nA data race may happen when `setCapacity()` and other func like `setLimits` are called in parallel.\r\nI wonder if developers forgot to protect `f.capLimit` by `f.lock.Lock()` in func `setCapacity()` or there are some special calling rules on `setCapacity()` to guarantee the protection.\r\n#### Actual behaviour\r\nNo, I found it through static analysis.\r\n\r\n#### Steps to reproduce the behaviour\r\nNo.\r\n\r\n#### Backtrace\r\nNo.\r\n",
  "closed_by": {
    "login": "zsfelfoldi",
    "id": 9884311,
    "node_id": "MDQ6VXNlcjk4ODQzMTE=",
    "avatar_url": "https://avatars.githubusercontent.com/u/9884311?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/zsfelfoldi",
    "html_url": "https://github.com/zsfelfoldi",
    "followers_url": "https://api.github.com/users/zsfelfoldi/followers",
    "following_url": "https://api.github.com/users/zsfelfoldi/following{/other_user}",
    "gists_url": "https://api.github.com/users/zsfelfoldi/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/zsfelfoldi/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/zsfelfoldi/subscriptions",
    "organizations_url": "https://api.github.com/users/zsfelfoldi/orgs",
    "repos_url": "https://api.github.com/users/zsfelfoldi/repos",
    "events_url": "https://api.github.com/users/zsfelfoldi/events{/privacy}",
    "received_events_url": "https://api.github.com/users/zsfelfoldi/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20651/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20651/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/585090950",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/20651#issuecomment-585090950",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20651",
    "id": 585090950,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4NTA5MDk1MA==",
    "user": {
      "login": "BurtonQin",
      "id": 11943383,
      "node_id": "MDQ6VXNlcjExOTQzMzgz",
      "avatar_url": "https://avatars.githubusercontent.com/u/11943383?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/BurtonQin",
      "html_url": "https://github.com/BurtonQin",
      "followers_url": "https://api.github.com/users/BurtonQin/followers",
      "following_url": "https://api.github.com/users/BurtonQin/following{/other_user}",
      "gists_url": "https://api.github.com/users/BurtonQin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/BurtonQin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BurtonQin/subscriptions",
      "organizations_url": "https://api.github.com/users/BurtonQin/orgs",
      "repos_url": "https://api.github.com/users/BurtonQin/repos",
      "events_url": "https://api.github.com/users/BurtonQin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/BurtonQin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-02-12T08:33:14Z",
    "updated_at": "2020-02-12T08:33:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "Similarly, a possible data race is in func `handle()` in les/fetcher.go.\r\n`p.headInfo` is not protected by p.lock.Lock()\r\nhttps://github.com/ethereum/go-ethereum/blob/8045504abf64a865be4b1dbc780b796a9f5d11cc/les/client_handler.go#L128\r\nBut it is protected by `p.lock.Lock()` or `p.lock.Rlock()` in all other places (1 place in fetcher.go, 10 places in peer.go)\r\nhttps://github.com/ethereum/go-ethereum/blob/8045504abf64a865be4b1dbc780b796a9f5d11cc/les/fetcher.go#L348-L351\r\nA data race may happen when func `handle()` and other func like `announce()` are called in parallel.\r\nI wonder if developers forgot to protect `p.headInfo` in func `handle()` or there are some special calling rules on `handle()` to guarantee the protection.\r\nA possible fix is to add a boolean parameter to `f.announce()`, indicating whether it is locked or not. If locked, we won't use `p.lock.Lock()` inside it.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/585090950/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/673577654",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/20651#issuecomment-673577654",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20651",
    "id": 673577654,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3MzU3NzY1NA==",
    "user": {
      "login": "zsfelfoldi",
      "id": 9884311,
      "node_id": "MDQ6VXNlcjk4ODQzMTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9884311?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zsfelfoldi",
      "html_url": "https://github.com/zsfelfoldi",
      "followers_url": "https://api.github.com/users/zsfelfoldi/followers",
      "following_url": "https://api.github.com/users/zsfelfoldi/following{/other_user}",
      "gists_url": "https://api.github.com/users/zsfelfoldi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zsfelfoldi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zsfelfoldi/subscriptions",
      "organizations_url": "https://api.github.com/users/zsfelfoldi/orgs",
      "repos_url": "https://api.github.com/users/zsfelfoldi/repos",
      "events_url": "https://api.github.com/users/zsfelfoldi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zsfelfoldi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-13T16:28:21Z",
    "updated_at": "2020-08-13T16:28:21Z",
    "author_association": "MEMBER",
    "body": "This is actually safe, though probably not the nicest piece of code because it is hard to see why it is safe. `clientPool.setCapacity` should only be called while `clientPool.lock` is locked and this is what really happens because it is called in api.go from a callback of `clientPool.forClients` which already locks the pool lock.\r\nBtw a major refactoring of the client pool is happening right now because new features are being added and the existing code was hacky enough already. It is WIP but close to being finished, hopefully it will make things cleaner.\r\nhttps://github.com/ethereum/go-ethereum/pull/21236",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/673577654/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
