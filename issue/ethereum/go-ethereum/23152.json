{
  "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/23152",
  "repository_url": "https://api.github.com/repos/ethereum/go-ethereum",
  "labels_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/23152/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/23152/comments",
  "events_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/23152/events",
  "html_url": "https://github.com/ethereum/go-ethereum/issues/23152",
  "id": 935682791,
  "node_id": "MDU6SXNzdWU5MzU2ODI3OTE=",
  "number": 23152,
  "title": "geth 1.10 breaks Nick's method which breaks singleton contracts which breaks EIP-1820/2470",
  "user": {
    "login": "saurik",
    "id": 36743,
    "node_id": "MDQ6VXNlcjM2NzQz",
    "avatar_url": "https://avatars.githubusercontent.com/u/36743?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/saurik",
    "html_url": "https://github.com/saurik",
    "followers_url": "https://api.github.com/users/saurik/followers",
    "following_url": "https://api.github.com/users/saurik/following{/other_user}",
    "gists_url": "https://api.github.com/users/saurik/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/saurik/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/saurik/subscriptions",
    "organizations_url": "https://api.github.com/users/saurik/orgs",
    "repos_url": "https://api.github.com/users/saurik/repos",
    "events_url": "https://api.github.com/users/saurik/events{/privacy}",
    "received_events_url": "https://api.github.com/users/saurik/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 72233650,
      "node_id": "MDU6TGFiZWw3MjIzMzY1MA==",
      "url": "https://api.github.com/repos/ethereum/go-ethereum/labels/type:bug",
      "name": "type:bug",
      "color": "FF5E5E",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 5,
  "created_at": "2021-07-02T11:28:53Z",
  "updated_at": "2021-08-28T12:40:20Z",
  "closed_at": "2021-07-05T08:29:02Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "I just read the documentation about geth 1.10, and noticed with quite some dismay the text claiming that so-called \"unprotected\" transactions are not just going to cause warnings, but are no longer allowed to be submitted via RPC and may even be deprecated entirely at some point in the future.\r\n\r\nIn order to deploy cross-chain singleton contracts--of which there are even some standardized examples, such as the EIP-1820 pseudo-introspection registry and the EIP-2470 singleton factory--using \"Nick's method\" (AFAIK the only way to do this) it needs to be possible to submit transactions that are not bound to a chainId.\r\n\r\nReally, at a super high-level of analysis, the entire point of these singleton contracts--which, again, are a required part of the ecosystem due to standards such as EIP-1820 and EIP-2470--is that they aren't bound to a chainId, and so the transactions which create them must not contain a chainId.\r\n\r\nTo quote EIP-1820: \"This transaction MUST NOT use EIP-155 in order to work on any chain.\"... and yet now if you try to submit transactions of this form via geth (which I just tested: I haven't needed to deploy one in months), you get the error \"only replay-protected (EIP-155) transactions allowed over RPC\".\r\n\r\nIt is important that these transactions not be \"deprecated\" from the ecosystem; and, in order for dapps that use singleton contracts to provide easy setup, there needs to be at least some way to submit them via standard RPC endpoints. FWIW, maybe one simple exemption that would at least avoid breaking this specific critical infrastructure be an exemption for transactions which directly deploy contracts?",
  "closed_by": {
    "login": "MariusVanDerWijden",
    "id": 16664698,
    "node_id": "MDQ6VXNlcjE2NjY0Njk4",
    "avatar_url": "https://avatars.githubusercontent.com/u/16664698?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/MariusVanDerWijden",
    "html_url": "https://github.com/MariusVanDerWijden",
    "followers_url": "https://api.github.com/users/MariusVanDerWijden/followers",
    "following_url": "https://api.github.com/users/MariusVanDerWijden/following{/other_user}",
    "gists_url": "https://api.github.com/users/MariusVanDerWijden/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/MariusVanDerWijden/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/MariusVanDerWijden/subscriptions",
    "organizations_url": "https://api.github.com/users/MariusVanDerWijden/orgs",
    "repos_url": "https://api.github.com/users/MariusVanDerWijden/repos",
    "events_url": "https://api.github.com/users/MariusVanDerWijden/events{/privacy}",
    "received_events_url": "https://api.github.com/users/MariusVanDerWijden/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/23152/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/23152/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/873900921",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/23152#issuecomment-873900921",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/23152",
    "id": 873900921,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg3MzkwMDkyMQ==",
    "user": {
      "login": "jannikluhn",
      "id": 29854669,
      "node_id": "MDQ6VXNlcjI5ODU0NjY5",
      "avatar_url": "https://avatars.githubusercontent.com/u/29854669?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jannikluhn",
      "html_url": "https://github.com/jannikluhn",
      "followers_url": "https://api.github.com/users/jannikluhn/followers",
      "following_url": "https://api.github.com/users/jannikluhn/following{/other_user}",
      "gists_url": "https://api.github.com/users/jannikluhn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jannikluhn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jannikluhn/subscriptions",
      "organizations_url": "https://api.github.com/users/jannikluhn/orgs",
      "repos_url": "https://api.github.com/users/jannikluhn/repos",
      "events_url": "https://api.github.com/users/jannikluhn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jannikluhn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-07-05T08:09:08Z",
    "updated_at": "2021-07-05T08:09:08Z",
    "author_association": "MEMBER",
    "body": "see also https://github.com/ethereum/go-ethereum/pull/22481",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/873900921/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/873915662",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/23152#issuecomment-873915662",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/23152",
    "id": 873915662,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg3MzkxNTY2Mg==",
    "user": {
      "login": "MariusVanDerWijden",
      "id": 16664698,
      "node_id": "MDQ6VXNlcjE2NjY0Njk4",
      "avatar_url": "https://avatars.githubusercontent.com/u/16664698?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MariusVanDerWijden",
      "html_url": "https://github.com/MariusVanDerWijden",
      "followers_url": "https://api.github.com/users/MariusVanDerWijden/followers",
      "following_url": "https://api.github.com/users/MariusVanDerWijden/following{/other_user}",
      "gists_url": "https://api.github.com/users/MariusVanDerWijden/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MariusVanDerWijden/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MariusVanDerWijden/subscriptions",
      "organizations_url": "https://api.github.com/users/MariusVanDerWijden/orgs",
      "repos_url": "https://api.github.com/users/MariusVanDerWijden/repos",
      "events_url": "https://api.github.com/users/MariusVanDerWijden/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MariusVanDerWijden/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-07-05T08:29:02Z",
    "updated_at": "2021-07-05T08:29:02Z",
    "author_association": "MEMBER",
    "body": "You can always allow non-eip155 transactions using `--rpc.allow-unprotected-txs`\r\nWe are aware that deprecating non-155 transactions on the consensus layer would break EIP-1820/2470\r\nThere is no EIP yet to deprecate these transactions, and there might not be one in the future.\r\nAllowing non-eip155 transactions unconditionally does create a big risk for users that use their adresses over several different layer1/layer2s\r\n\r\nThis discussion would be better suited to ethmagicians ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/873915662/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/907537224",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/23152#issuecomment-907537224",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/23152",
    "id": 907537224,
    "node_id": "IC_kwDOAOvK9842F-tI",
    "user": {
      "login": "saurik",
      "id": 36743,
      "node_id": "MDQ6VXNlcjM2NzQz",
      "avatar_url": "https://avatars.githubusercontent.com/u/36743?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/saurik",
      "html_url": "https://github.com/saurik",
      "followers_url": "https://api.github.com/users/saurik/followers",
      "following_url": "https://api.github.com/users/saurik/following{/other_user}",
      "gists_url": "https://api.github.com/users/saurik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/saurik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/saurik/subscriptions",
      "organizations_url": "https://api.github.com/users/saurik/orgs",
      "repos_url": "https://api.github.com/users/saurik/repos",
      "events_url": "https://api.github.com/users/saurik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/saurik/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-28T00:28:16Z",
    "updated_at": "2021-08-28T06:13:57Z",
    "author_association": "NONE",
    "body": "The thing that is so frustrating about this--and the reason why I also feel like this is a go-ethereum issue and not something \"suited to ethmagicians\"--is that go-ethereum is the backing implementation of numerous other chains, and not all of them expose --rpc.allow-unprotected-txs. As an example: Avalanche. The value is currently hardcoded with a FIXME comment to add some way to configure it, because they simply didn't have a good way to even get configuration values that deep into the core.\r\n\r\nhttps://github.com/ava-labs/coreth/blob/7695ce2a11111fce03a721034891a56cc9bd6794/eth/backend.go#L199-L205\r\n\r\nIgnoring these critical standards with this patch without seemingly any consideration for them--even a whitelist for the transactions specifically used by EIP-1820/2470, much less a flag on the RPC API to let you manually opt in to the legacy behavior--was totally the wrong call given that EIP-155 \"protected\" transactions don't support this critical functionality, and is absolutely an implementation concern (as opposed to some kind of political concern that needs to be coordinated with other implementations).\r\n\r\nFWIW, to provide a very concrete suggestion: the tradeoff I'd have personally gone with, were this my project, is to explicitly allow \"unprotected\" contract creations when the nonce is 0. This is a rather narrow allowance exemption and covers every use case I've so far seen, heard of, or theorized (though not technically every one possible) for \"nick's method\". I urge go-ethereum to take this issue more seriously and specifically consider the ecosystem-wide ramifications of widespread usage of their code.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/907537224/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/907597017",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/23152#issuecomment-907597017",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/23152",
    "id": 907597017,
    "node_id": "IC_kwDOAOvK9842GNTZ",
    "user": {
      "login": "MariusVanDerWijden",
      "id": 16664698,
      "node_id": "MDQ6VXNlcjE2NjY0Njk4",
      "avatar_url": "https://avatars.githubusercontent.com/u/16664698?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MariusVanDerWijden",
      "html_url": "https://github.com/MariusVanDerWijden",
      "followers_url": "https://api.github.com/users/MariusVanDerWijden/followers",
      "following_url": "https://api.github.com/users/MariusVanDerWijden/following{/other_user}",
      "gists_url": "https://api.github.com/users/MariusVanDerWijden/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MariusVanDerWijden/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MariusVanDerWijden/subscriptions",
      "organizations_url": "https://api.github.com/users/MariusVanDerWijden/orgs",
      "repos_url": "https://api.github.com/users/MariusVanDerWijden/repos",
      "events_url": "https://api.github.com/users/MariusVanDerWijden/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MariusVanDerWijden/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-28T09:00:43Z",
    "updated_at": "2021-08-28T09:00:43Z",
    "author_association": "MEMBER",
    "body": "@saurik  We did take the ecosystem-wide ramifications into consideration. Users didn't know that they were sending replayable transactions on layer2's or other layer1's so someone replayed a lot of those transactions (~5000 afair) and scammed/griefed users out of a lot of funds. With the emergence of more layer1's build on geth/ethereum we will see even more users using the same address on multiple networks. Thus we decided to enforce replay protection to protect users.\r\n\r\nAfter discussing with Nick we also implemented a way to optionally send non-eip155 transactions in order to not break EIP1820. This workaround can be implemented by all downstream projects. \r\nRegarding your suggestion to allow unprotected transactions for Nonce 0, this would be especially bad for new users and users that use an account only once. \r\n\r\nI don't think we should be held accountable for decisions that Avalanche makes regarding their fork of go-ethereum. They are free to implement a way to send non-eip155 transactions.\r\nMy primary concerns are normal, non-technical users that can be griefed.\r\nTechnically inclined users can find a way to send non-eip155 transactions. You can easily fork ava-labs/coreth and modify this line: https://github.com/ava-labs/coreth/blob/7695ce2a11111fce03a721034891a56cc9bd6794/eth/backend.go#L202 to have `true` as the second parameter which would allow you to send unprotected transactions.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/907597017/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/907621217",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/23152#issuecomment-907621217",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/23152",
    "id": 907621217,
    "node_id": "IC_kwDOAOvK9842GTNh",
    "user": {
      "login": "saurik",
      "id": 36743,
      "node_id": "MDQ6VXNlcjM2NzQz",
      "avatar_url": "https://avatars.githubusercontent.com/u/36743?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/saurik",
      "html_url": "https://github.com/saurik",
      "followers_url": "https://api.github.com/users/saurik/followers",
      "following_url": "https://api.github.com/users/saurik/following{/other_user}",
      "gists_url": "https://api.github.com/users/saurik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/saurik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/saurik/subscriptions",
      "organizations_url": "https://api.github.com/users/saurik/orgs",
      "repos_url": "https://api.github.com/users/saurik/repos",
      "events_url": "https://api.github.com/users/saurik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/saurik/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-28T12:40:20Z",
    "updated_at": "2021-08-28T12:40:20Z",
    "author_association": "NONE",
    "body": "> You can easily fork ava-labs/coreth and modify this line:...\r\n\r\n@MariusVanDerWijden Yes, I did that already (hence how I was able to close that issue that linked to this one ;P). It was not, in fact, easy: _I_ was able to do it because I'm a developer who has worked on Avalanche in the past and I have machines to spare sitting around synchronizing the block state for a day, but the goal of distributed systems should be that software should be able to work without a developer or a power user around.\r\n\r\nThe problem is that dapps should be able to allow end users to deploy such contracts: if you end up being targeted to a chain that does not yet have a required contract deployed, the UI should be to allow a user--not a developer or even a power user--to deploy the contract without having to spend the time to figure out, by hook or by crook, how to do it for a particular chain.\r\n\r\nHell: even as a developer this is incredibly frustrating, as now whenever someone tells me about some new chain, instead of just being able to ask \"what's the RPC? let's get you spun up\", I have to actually figure out how to set up a node for that project after having potentially had to patch the code--and even if I didn't have to do that learn how to configure it--and then wait for it to synchronize sufficiently such that I'd be able to deploy my singletons... in a world where I'd expect increasing usage of singletons (and where notably not everyone is using EIP-2470, as as far as I'm concerned they got the schelling point on gas cost wrong).\r\n\r\n> After discussing with Nick we also implemented a way to optionally send non-eip155 transactions in order to not break EIP1820.\r\n\r\nIs this workaround the command line flag? :( The expectation would be some kind of JSON/RPC flag--or a geth-specific bypass method or something (as this is a geth-specific filter behavior so far)--such that it wouldn't require someone technical to get involved. Like \r\n\r\n> Regarding your suggestion to allow unprotected transactions for Nonce 0, this would be especially bad for new users and users that use an account only once.\r\n\r\nSo, I would be shocked to learn that a substantial number of users are deploying contracts at nonce 0 (which was what I said I'd do if this were my project). In fact, I would be shocked to learn that a substantial number of unsophisticated/new users (people who would fail to be using EIP-155 transactions) are deploying contracts using their own accounts _at all_, much less on nonce 0 ;P.\r\n\r\nFWIW, I just scanned 5% of the Avalanche chain and determined that only <0.024% of transactions are contract creations on nonce 0. Hilariously, of those transactions, I personally make up 2% of them ;P. (And before you try to claim that \"Ethereum is different\", I'll agree! Not only is it different, but the numbers look even worse for your assertion: I'm seeing only ~0.007% ;P.)\r\n\r\nTo push even harder, were what you were saying to be true, we'd expect that--before the recent changes were made--we'd see users making such transactions as legacy type 0 without eip-155 (so, v < 35) with at least some frequency... but, I've started pulling Ethereum blocks from early 2020, and, after scanning over half a million transactions, I've only found 5 examples (<0.001%).\r\n\r\nWhat is then further notable about these 5 transactions is that we can kind of look at what they are doing, and I think not only most of them are developers (one of them seems to be with DXdao), but at least a couple of them might even be the same person, as they are using a function signature hash that seems to be unique to the particular contract that they were working on.\r\n\r\nI mean, if we even just take a step back and think about it for a second, even if we ignore the statistics (which seem convincing), and even if we ignore the arguments around \"would end users even try to do this?\", we are still going to run into how, in a world where the only transactions that are allowed to bypass eip-155 are contract creations on nonce 0, one has to wonder how they managed to even get to this point without somehow having software that is capable of EIP-155, as this would have to be their first transaction ever--a contract creation at that--as otherwise they would have been blocked from making some other transaction by their non-EIP-155 transaction that was either not a contract creation or not nonce 0 being blocked.\r\n\r\nMeanwhile, remember that this _is_ nonce 0... the attack on such a user would imply that not only are they an unsophisticated user who was deploying contracts (which I assert is not common, if not rare: if nothing else, it is expensive, so dapps tend to use contract factories), not only were they deploying contracts as their first transaction (which I have shown is rare), not only were they not using EIP-155 (which I've shown is rarer), but to be griefed and have funds taken they need to then be using that account on another chain and have funds stored in that account without having made any other transactions... I can try to run the statistics for you if you'd like to determine if this has literally ever happened even a single time, but, if it has, at this point I'd wonder if it was me who did it ;P.\r\n\r\nSo... do you have any statistics, or maybe some other evidence, or even an argument more sophisticated than the moral equivalent of \"trust me\" to back up your claim that the path I said I'd take--to \"explicitly allow \"unprotected\" contract creations when the nonce is 0\"--would be \"especially bad news\" even for \"users that use an account only once\" much less for \"new users\" (which seems entirely unlikely, for the reasons I stated and the statistics I provided)? ;P\r\n\r\nI'm honestly willing to believe I'm wrong, but it is extremely frustrating to be casually dismissed when the most charitable explanation I have is \"you didn't give my sentence enough attention to notice I explicitly limited the scope of my exemption to contract creations before asserting I was requesting something 'especially bad' for users\".\r\n\r\nI find this *particularly extra frustrating* given that you are continuing to directly contradict the blog post where this feature was announced: you are insisting that you \"carefully considered\" the addition of this feature, claiming \"You can always allow non-eip155 transactions using --rpc.allow-unprotected-txs\" and \"we also implemented a way to optionally send non-eip155 transactions in order to not break EIP1820. This workaround can be implemented by all downstream projects.\"... but yet in the release announcement for this feature it is stated, in absolutely no uncertain terms--the bold in the subsequent paragraph is from the original text--that this is only going to exist temporarily. It honestly feels a bit like you are trying to gaslight me here.\r\n\r\nhttps://blog.ethereum.org/2021/03/03/geth-v1-10-0/\r\n\r\n> Since we realize people/tooling issuing unprotected transactions can’t change overnight, Geth v1.10.0 **supports reverting** to the old behavior and accepting non-EIP155 transactions via --rpc.allow-unprotected-txs. Be advised that this is a temporary mechanism that **will be removed** long term.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/907621217/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
