{
  "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/25965",
  "repository_url": "https://api.github.com/repos/ethereum/go-ethereum",
  "labels_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/25965/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/25965/comments",
  "events_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/25965/events",
  "html_url": "https://github.com/ethereum/go-ethereum/issues/25965",
  "id": 1404428959,
  "node_id": "I_kwDOAOvK985TteKf",
  "number": 25965,
  "title": "snap sync does not work on polygon fork",
  "user": {
    "login": "manav2401",
    "id": 36959497,
    "node_id": "MDQ6VXNlcjM2OTU5NDk3",
    "avatar_url": "https://avatars.githubusercontent.com/u/36959497?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/manav2401",
    "html_url": "https://github.com/manav2401",
    "followers_url": "https://api.github.com/users/manav2401/followers",
    "following_url": "https://api.github.com/users/manav2401/following{/other_user}",
    "gists_url": "https://api.github.com/users/manav2401/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/manav2401/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/manav2401/subscriptions",
    "organizations_url": "https://api.github.com/users/manav2401/orgs",
    "repos_url": "https://api.github.com/users/manav2401/repos",
    "events_url": "https://api.github.com/users/manav2401/events{/privacy}",
    "received_events_url": "https://api.github.com/users/manav2401/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 268304226,
      "node_id": "MDU6TGFiZWwyNjgzMDQyMjY=",
      "url": "https://api.github.com/repos/ethereum/go-ethereum/labels/type:docs",
      "name": "type:docs",
      "color": "fef2c0",
      "default": false,
      "description": null
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2022-10-11T10:53:23Z",
  "updated_at": "2023-03-08T10:26:06Z",
  "closed_at": "2023-03-08T10:26:06Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "Hey team, we’ve been unable to run snap sync on our mainnet (https://github.com/maticnetwork/bor). To be more specific, it completes the state sync phase, but keeps running in a never ending healing phase. We are aware that the sync has to run faster than the block production and state in order to finish. We have performed some experiments and checks at our end (The block time and block gas limit for our mainnet is 2s and 30M respectively). Also, we know that the process is I/O and network heavy and we've allocated more than enough in these machines. \r\n\r\n1. We tried running a node in snap sync on our mumbai testnet to make sure the issue has nothing to do the other components of our PoS chain specifically the consensus. It works well on the testnet. \r\n2. We tried scaling up some of the parameters involved in the sync mechanism like the pivot marker, the size (bytes) of data to be received in the snap sync trie node (and storage) requests, the dynamic timeout to see the behaviours. We did not see any significant changes in the mechanism. Also, we’re not sure which metrics would be appropriate to checkout while modifying these parameters. Well, to be specific, modifying the pivot parameters didn’t really work as it stopped the healing phase and node stopped syncing totally. \r\n3. We conducted an experiment where we took a full synced mainnet node, disconnected it from outer world and only let 1 fresh node sync from it using snap sync. We saw a lot of peer connectivity issues and after some point, the snap sync node wasn’t able to connect to the full synced peer (maybe it figured out that the opposite peer is stale?). This was an attempt to see if the issue is with the state moving fast or not. \r\n\r\nWe’re currently exploring some ways to understand the mechanism and internals through tests as we thought just tweaking the parameters might not help and would make the process much longer. But, it would be great if you can suggest us some important points/places to look at to dig further, or some experiments to conduct and ways to do so (like finding more internal details about the trie nodes and the rate at which they’re being produced vs downloaded, etc). \r\n\r\nLet us know, if there's anything more which we can share from our end. Thanks!\r\n\r\nEDIT: the tag was auto chosen to \"docs\". I'd put it under \"help wanted\". ",
  "closed_by": {
    "login": "holiman",
    "id": 142290,
    "node_id": "MDQ6VXNlcjE0MjI5MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/142290?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/holiman",
    "html_url": "https://github.com/holiman",
    "followers_url": "https://api.github.com/users/holiman/followers",
    "following_url": "https://api.github.com/users/holiman/following{/other_user}",
    "gists_url": "https://api.github.com/users/holiman/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/holiman/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/holiman/subscriptions",
    "organizations_url": "https://api.github.com/users/holiman/orgs",
    "repos_url": "https://api.github.com/users/holiman/repos",
    "events_url": "https://api.github.com/users/holiman/events{/privacy}",
    "received_events_url": "https://api.github.com/users/holiman/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/25965/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/25965/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1274557337",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/25965#issuecomment-1274557337",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/25965",
    "id": 1274557337,
    "node_id": "IC_kwDOAOvK985L-DOZ",
    "user": {
      "login": "holiman",
      "id": 142290,
      "node_id": "MDQ6VXNlcjE0MjI5MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/142290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/holiman",
      "html_url": "https://github.com/holiman",
      "followers_url": "https://api.github.com/users/holiman/followers",
      "following_url": "https://api.github.com/users/holiman/following{/other_user}",
      "gists_url": "https://api.github.com/users/holiman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/holiman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/holiman/subscriptions",
      "organizations_url": "https://api.github.com/users/holiman/orgs",
      "repos_url": "https://api.github.com/users/holiman/repos",
      "events_url": "https://api.github.com/users/holiman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/holiman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-10-11T11:48:40Z",
    "updated_at": "2022-10-11T11:54:19Z",
    "author_association": "MEMBER",
    "body": "> We tried scaling up some of the parameters involved in the sync mechanism like the pivot marker, the size (bytes) of data to be received in the snap sync trie node (and storage) requests, the dynamic timeout to see the behaviours.\r\n\r\n\r\n1. Pivot.  Ideally, you never want to pivot. Pivoting is not something we _want_ to do, it's a necessity due to the fact that the peer(s) do in-memory pruning. The (geth) in-memory pruning does not touch the most recent 128 states, but once it becomes older than 128, we gc as best we can. So, if you want your peers to deliver, you need to ask them about roots that are within the last 128 blocks, otherwise you'll get no responses. \r\n\r\nSo adjusting the pivot block is not really doable, unless the whole peer ecosystem changes the pruning thresholds. \r\n\r\n2. Size of data. Retrieving larger trie node responses during healing may have _some_ effect, but it's not an easy problem. The trienode healing is essentially a classic fast-sync, and we can only start storing to disk once we reach the leaf-level. If we ask for too much data, we will expand the trie-iteration too much on the breadth -- what we ideally want to do is go depth-first. We recently made a fix in this area (https://github.com/ethereum/go-ethereum/pull/25666) , for specifically this problem. \r\n\r\nAnyway, tldr; if you change the trienode heal request/response size, you may shoot yourself in the foot. Changing the size on other types (account/storage) is probably less dangeous, but you should keep an eye out for timeouts -- if a request times out the data is thrown away, so that would be a net loss. \r\n\r\n> We conducted an experiment where we took a full synced mainnet node, disconnected it from outer world and only let 1 fresh node sync from it using snap sync.\r\n\r\nThis should work fine, but a couple of caveats... Let's call the full-synced node `A`. \r\n\r\nIf `A` is shut down, then restarted with e.g `netrestrict` so that it only sees local nodes, then you have a problem. Because the shutdown will cause it to store only trie nodes for three states: `head`, `head-1` and `head-127` (iirc). It will happily try to serve snap-data, and it has a lot of snap data for all the most recent 128 layers, but it will only be able to provide proofs (from the trie) for those three specific states. Requests for any other root will not yield any response. \r\n\r\nSo what you need to do is basically to start it up, and then import 128 blocks, and _then_ take it offline. Or, set it to `gcmode=archive`, let it import 128 blocks in archive-mode, shut it down. After that, you can boot it up, and it will have all the last 128 states available. \r\n\r\nAlso, here are some recent fixes we've made to snap-sync: \r\nhttps://github.com/ethereum/go-ethereum/pulls?q=is%3Apr+is%3Aclosed+label%3Abackport\r\n\r\nWe are going to backport them and make a new release with them. I recommend that you also make use of these fixes. \r\n\r\nLastly, re places to dig further. It would benefit you to understand your own trie-churn, given your time (`2s`) and gas `30M`. If you put the node in archive-mode, each new node will be stored to disk, after each block. During commit, you should thus be able to get some raw figures on exactly \"how many trie updates are performed during a block\". \r\n\r\nNow, let's say it's for example 5k modifications, spread out across the trie. Then you could model how many trie heal requests would be needed to heal that. \r\n\r\nI'll leave this ticket open for a while longer, in case @karalabe has anything to add. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1274557337/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1274602966",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/25965#issuecomment-1274602966",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/25965",
    "id": 1274602966,
    "node_id": "IC_kwDOAOvK985L-OXW",
    "user": {
      "login": "manav2401",
      "id": 36959497,
      "node_id": "MDQ6VXNlcjM2OTU5NDk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/36959497?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/manav2401",
      "html_url": "https://github.com/manav2401",
      "followers_url": "https://api.github.com/users/manav2401/followers",
      "following_url": "https://api.github.com/users/manav2401/following{/other_user}",
      "gists_url": "https://api.github.com/users/manav2401/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/manav2401/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/manav2401/subscriptions",
      "organizations_url": "https://api.github.com/users/manav2401/orgs",
      "repos_url": "https://api.github.com/users/manav2401/repos",
      "events_url": "https://api.github.com/users/manav2401/events{/privacy}",
      "received_events_url": "https://api.github.com/users/manav2401/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-10-11T12:24:27Z",
    "updated_at": "2022-10-11T12:24:27Z",
    "author_association": "NONE",
    "body": "Thanks a lot for the response. \r\n\r\n> So adjusting the pivot block is not really doable, unless the whole peer ecosystem changes the pruning thresholds.\r\n\r\nI see. Also, just to confirm, peers would only respond if they have those blocks in the difflayer which is present due to the `--snapshot` flag, right?\r\n\r\n> Anyway, tldr; if you change the trienode heal request/response size, you may shoot yourself in the foot. Changing the size on other types (account/storage) is probably less dangeous, but you should keep an eye out for timeouts -- if a request times out the data is thrown away, so that would be a net loss.\r\n\r\nAlright. Yes, we did try using a static timeout (~30s I believe) instead of a dynamic logic in there. \r\n\r\nRe that experiment, didn't think of this. We'll try to pull in some changes/fixes which you've done and try re-running that experiment again by making sure that last 128 block states is available with the full synced node. \r\n\r\n> Lastly, re places to dig further. It would benefit you to understand your own trie-churn, given your time (2s) and gas 30M. If you put the node in archive-mode, each new node will be stored to disk, after each block. During commit, you should thus be able to get some raw figures on exactly \"how many trie updates are performed during a block\".\r\n\r\nAny scripts that can help us speed up the process?\r\n\r\nWe'd quickly get moving with these action items and share the results here itself. CC: @JekaMas",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1274602966/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1274623218",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/25965#issuecomment-1274623218",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/25965",
    "id": 1274623218,
    "node_id": "IC_kwDOAOvK985L-TTy",
    "user": {
      "login": "holiman",
      "id": 142290,
      "node_id": "MDQ6VXNlcjE0MjI5MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/142290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/holiman",
      "html_url": "https://github.com/holiman",
      "followers_url": "https://api.github.com/users/holiman/followers",
      "following_url": "https://api.github.com/users/holiman/following{/other_user}",
      "gists_url": "https://api.github.com/users/holiman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/holiman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/holiman/subscriptions",
      "organizations_url": "https://api.github.com/users/holiman/orgs",
      "repos_url": "https://api.github.com/users/holiman/repos",
      "events_url": "https://api.github.com/users/holiman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/holiman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-10-11T12:38:06Z",
    "updated_at": "2022-10-11T12:38:06Z",
    "author_association": "MEMBER",
    "body": "> I see. Also, just to confirm, peers would only respond if they have those blocks in the difflayer which is present due to the --snapshot flag, right?\r\n\r\nIn order for a peer to deliver responses to account/storage requests, they need to have the snapshot layer for that root, and the trie nodes for that root. \r\n\r\nIn order for a peer to deliver responses to trie healing requests, they theoretically only need to have the trie nodes for that root. In practice, however, they required having the snapshot layer too, until this PR (https://github.com/ethereum/go-ethereum/pull/25644). \r\n\r\n\r\n> Any scripts that can help us speed up the process?\r\n\r\nNothing off the top of my head, no. This might also be interesting to look into: https://github.com/ethereum/go-ethereum/pull/25022 \r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1274623218/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1459947496",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/25965#issuecomment-1459947496",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/25965",
    "id": 1459947496,
    "node_id": "IC_kwDOAOvK985XBQfo",
    "user": {
      "login": "holiman",
      "id": 142290,
      "node_id": "MDQ6VXNlcjE0MjI5MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/142290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/holiman",
      "html_url": "https://github.com/holiman",
      "followers_url": "https://api.github.com/users/holiman/followers",
      "following_url": "https://api.github.com/users/holiman/following{/other_user}",
      "gists_url": "https://api.github.com/users/holiman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/holiman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/holiman/subscriptions",
      "organizations_url": "https://api.github.com/users/holiman/orgs",
      "repos_url": "https://api.github.com/users/holiman/repos",
      "events_url": "https://api.github.com/users/holiman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/holiman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-08T10:26:06Z",
    "updated_at": "2023-03-08T10:26:06Z",
    "author_association": "MEMBER",
    "body": "Seems answered, closing",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1459947496/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
