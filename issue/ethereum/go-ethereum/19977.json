{
  "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/19977",
  "repository_url": "https://api.github.com/repos/ethereum/go-ethereum",
  "labels_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/19977/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/19977/comments",
  "events_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/19977/events",
  "html_url": "https://github.com/ethereum/go-ethereum/issues/19977",
  "id": 481992781,
  "node_id": "MDU6SXNzdWU0ODE5OTI3ODE=",
  "number": 19977,
  "title": "scrypt usage not compliant with RFC 7914?",
  "user": {
    "login": "michaelsbradleyjr",
    "id": 194260,
    "node_id": "MDQ6VXNlcjE5NDI2MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/194260?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/michaelsbradleyjr",
    "html_url": "https://github.com/michaelsbradleyjr",
    "followers_url": "https://api.github.com/users/michaelsbradleyjr/followers",
    "following_url": "https://api.github.com/users/michaelsbradleyjr/following{/other_user}",
    "gists_url": "https://api.github.com/users/michaelsbradleyjr/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/michaelsbradleyjr/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/michaelsbradleyjr/subscriptions",
    "organizations_url": "https://api.github.com/users/michaelsbradleyjr/orgs",
    "repos_url": "https://api.github.com/users/michaelsbradleyjr/repos",
    "events_url": "https://api.github.com/users/michaelsbradleyjr/events{/privacy}",
    "received_events_url": "https://api.github.com/users/michaelsbradleyjr/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 7,
  "created_at": "2019-08-18T13:15:31Z",
  "updated_at": "2020-08-27T08:59:30Z",
  "closed_at": "2020-04-23T09:07:04Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "See: https://tools.ietf.org/html/rfc7914. In particular, [Section 2: scrypt Parameters](https://tools.ietf.org/html/rfc7914#section-2):\r\n\r\n> The CPU/Memory cost parameter N (\"costParameter\") must be larger than 1, a power of 2, and less than 2^(128 * r / 8).  The parallelization parameter p (\"parallelizationParameter\") is a positive integer less than or equal to ((2^32-1) * 32) / (128 * r).\r\n\r\ngo-ethereum test data:  https://github.com/ethereum/go-ethereum/blob/master/accounts/keystore/testdata/v3_test_vector.json#L13-L15.\r\n\r\nParameters `{N: 262144, r: 1, p: 8}` are not valid for an RFC-compliant implementation of scrypt.\r\n\r\nCan someone on the geth team shed light on why geth's usage of scrypt is not compliant with the RFC? Was/is it a deliberate decision or an accident?\r\n\r\nContext re: why I'm filing this issue: https://github.com/nodejs/node/pull/28799#issuecomment-522318717.\r\n\r\ngeth's test data has long been adapted for use in test suite's of tools for other runtimes. For example, see: https://github.com/ethereum/web3.js/blob/1.x/test/eth.accounts.encrypt-decrypt.js#L32-L34. The PR that landed that test script/data was made in [mid 2017](https://github.com/ethereum/web3.js/pull/869). Likewise, implementations of scrypt (for those other runtimes; example: [scryptsy](https://github.com/cryptocoinjs/scryptsy)) that are used to build Ethereum tooling don't adhere to the RFC.\r\n\r\nIn the case of Node.js, per the GitHub comment linked above, the built-in RFC-compliant `scrypt` can't handle the N, r, p combination in the test data.",
  "closed_by": {
    "login": "karalabe",
    "id": 129561,
    "node_id": "MDQ6VXNlcjEyOTU2MQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/129561?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/karalabe",
    "html_url": "https://github.com/karalabe",
    "followers_url": "https://api.github.com/users/karalabe/followers",
    "following_url": "https://api.github.com/users/karalabe/following{/other_user}",
    "gists_url": "https://api.github.com/users/karalabe/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/karalabe/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/karalabe/subscriptions",
    "organizations_url": "https://api.github.com/users/karalabe/orgs",
    "repos_url": "https://api.github.com/users/karalabe/repos",
    "events_url": "https://api.github.com/users/karalabe/events{/privacy}",
    "received_events_url": "https://api.github.com/users/karalabe/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/19977/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/19977/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/522323596",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/19977#issuecomment-522323596",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/19977",
    "id": 522323596,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyMjMyMzU5Ng==",
    "user": {
      "login": "michaelsbradleyjr",
      "id": 194260,
      "node_id": "MDQ6VXNlcjE5NDI2MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/194260?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/michaelsbradleyjr",
      "html_url": "https://github.com/michaelsbradleyjr",
      "followers_url": "https://api.github.com/users/michaelsbradleyjr/followers",
      "following_url": "https://api.github.com/users/michaelsbradleyjr/following{/other_user}",
      "gists_url": "https://api.github.com/users/michaelsbradleyjr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/michaelsbradleyjr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/michaelsbradleyjr/subscriptions",
      "organizations_url": "https://api.github.com/users/michaelsbradleyjr/orgs",
      "repos_url": "https://api.github.com/users/michaelsbradleyjr/repos",
      "events_url": "https://api.github.com/users/michaelsbradleyjr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/michaelsbradleyjr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-18T13:46:28Z",
    "updated_at": "2019-08-18T14:22:04Z",
    "author_association": "NONE",
    "body": "It seems that Go's implementation of scrypt, used by geth, doesn't adhere to the RFC:\r\n\r\nhttps://github.com/golang/crypto/blob/master/scrypt/scrypt.go#L200\r\n\r\nThat is, it doesn't enforce `N < 2^(128 * r / 8)` as far as I can tell (I'm not fluent in Go). In the [Go playground](https://play.golang.org/p/M927ae0ZcQJ) I find that `N`'s upper limit when `r` is `1` is `16777215` such that `{N: 262144, r: 1, p: 8}` won't cause scrypt to choke.\r\n\r\nI suspect the answer to my question (\"Can someone shed light...?\") boils down to: *\"geth's test data reflects what Go's scrypt allows for.\"*\r\n\r\nOn the other hand, the Rust implementation of scrypt used by parity does seem to restrict `N` according to the RFC:\r\n\r\nhttps://docs.rs/rust-crypto/0.2.36/src/crypto/scrypt.rs.html#193-196\r\n\r\nI don't know Rust, so I can't speak to whether those lines are an exact match for `N < 2^(128 * r / 8)` but I will try geth's test data with parity and see what happens.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/522323596/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/522333525",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/19977#issuecomment-522333525",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/19977",
    "id": 522333525,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyMjMzMzUyNQ==",
    "user": {
      "login": "michaelsbradleyjr",
      "id": 194260,
      "node_id": "MDQ6VXNlcjE5NDI2MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/194260?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/michaelsbradleyjr",
      "html_url": "https://github.com/michaelsbradleyjr",
      "followers_url": "https://api.github.com/users/michaelsbradleyjr/followers",
      "following_url": "https://api.github.com/users/michaelsbradleyjr/following{/other_user}",
      "gists_url": "https://api.github.com/users/michaelsbradleyjr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/michaelsbradleyjr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/michaelsbradleyjr/subscriptions",
      "organizations_url": "https://api.github.com/users/michaelsbradleyjr/orgs",
      "repos_url": "https://api.github.com/users/michaelsbradleyjr/repos",
      "events_url": "https://api.github.com/users/michaelsbradleyjr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/michaelsbradleyjr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-18T15:57:37Z",
    "updated_at": "2019-08-18T16:09:16Z",
    "author_association": "NONE",
    "body": "I conducted the experiment with parity vs. geth:\r\n\r\nWith a wallet based on [geth's test data](https://github.com/ethereum/go-ethereum/blob/master/accounts/keystore/testdata/v3_test_vector.json#L3-L22), but regen'd so as to include the address (otherwise an exact match):\r\n```\r\n{\r\n   \"version\":3,\r\n   \"id\":\"3198bc9c-6672-4ab3-9995-4942343ae5b6\",\r\n   \"address\":\"008aeeda4d805471df9b2a5b0f38a0c3bcba786b\",\r\n   \"crypto\":{\r\n      \"ciphertext\":\"d172bf743a674da9cdad04534d56926ef8358534d458fffccd4e6ad2fbde479c\",\r\n      \"cipherparams\":{\r\n         \"iv\":\"83dbcc02d8ccb40e466191a123791e0e\"\r\n      },\r\n      \"cipher\":\"aes-128-ctr\",\r\n      \"kdf\":\"scrypt\",\r\n      \"kdfparams\":{\r\n         \"dklen\":32,\r\n         \"salt\":\"ab0c7876052600dd703518d6fc3fe8984592145b591fc8fb5c6d43190334ba19\",\r\n         \"n\":262144,\r\n         \"r\":1,\r\n         \"p\":8\r\n      },\r\n      \"mac\":\"2103ac29920d71da29f15d75b4a16dbe95cfd7ff8faea1056c33131d846e3097\"\r\n   }\r\n}\r\n```\r\n\r\nWith that wallet in the keystore and web3.js connected to geth, this works in a Node.js REPL:\r\n\r\n```\r\n> web3.eth.personal.unlockAccount('0x008AeEda4D805471dF9b2A5B0f38A0C3bCBA786b', 'testpassword', null).then(v => console.log(v)).catch(err => console.error(err))\r\n// prints true\r\n```\r\n\r\nBut it does not work when web3.js is connected to a parity client that has loaded the same wallet. When using `--logging=debug` with parity client, I see this in the output when attempting to unlock:\r\n\r\n```\r\n2019-08-18 10:48:24  jsonrpc-eventloop-0 DEBUG rpc  Response: {\"jsonrpc\":\"2.0\",\"error\":{\"code\":-32023,\"message\":\"Unable to unlock the account.\",\"data\":\"EthCrypto(Scrypt(InvalidN))\"},\"id\":42}.\r\n```\r\n\r\n-------\r\n\r\nI think the right thing would be for geth to start checking the kdf params for correctness re: the scrypt RFC before calling golang's scrypt implementation; and that geth's test wallets should be refactored so that they're all valid with respect to the RFC.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/522333525/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/522521538",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/19977#issuecomment-522521538",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/19977",
    "id": 522521538,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyMjUyMTUzOA==",
    "user": {
      "login": "karalabe",
      "id": 129561,
      "node_id": "MDQ6VXNlcjEyOTU2MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/129561?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/karalabe",
      "html_url": "https://github.com/karalabe",
      "followers_url": "https://api.github.com/users/karalabe/followers",
      "following_url": "https://api.github.com/users/karalabe/following{/other_user}",
      "gists_url": "https://api.github.com/users/karalabe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/karalabe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/karalabe/subscriptions",
      "organizations_url": "https://api.github.com/users/karalabe/orgs",
      "repos_url": "https://api.github.com/users/karalabe/repos",
      "events_url": "https://api.github.com/users/karalabe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/karalabe/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-19T11:03:15Z",
    "updated_at": "2019-08-19T11:03:15Z",
    "author_association": "MEMBER",
    "body": "> I think the right thing would be for geth to start checking the kdf params for correctness re: the scrypt RFC before calling golang's scrypt implementation; and that geth's test wallets should be refactored so that they're all valid with respect to the RFC.\r\n\r\nGeth uses `{N=262144, R=8, P=1}` for wallets, optionally supporting `{N=4096, R=8, P=6}` for low powered devices if explicitly requested. Geth will never generate a wallet other than these two, so I don't think it's too big of an issue that we can handle more keys than the IETF standard specs, as long as they are cryptographically correct.\r\n\r\nAs for invalidating the tests, we don't plan on overriding Go's crypto constraints. I'm not saying that those should not be updated, but please open an issue against upstream Go. That is the place to fix standardization issues, not downstream packages. If they accept the proposal, we'll gladly pull in the changes.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/522521538/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/522586439",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/19977#issuecomment-522586439",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/19977",
    "id": 522586439,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyMjU4NjQzOQ==",
    "user": {
      "login": "michaelsbradleyjr",
      "id": 194260,
      "node_id": "MDQ6VXNlcjE5NDI2MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/194260?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/michaelsbradleyjr",
      "html_url": "https://github.com/michaelsbradleyjr",
      "followers_url": "https://api.github.com/users/michaelsbradleyjr/followers",
      "following_url": "https://api.github.com/users/michaelsbradleyjr/following{/other_user}",
      "gists_url": "https://api.github.com/users/michaelsbradleyjr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/michaelsbradleyjr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/michaelsbradleyjr/subscriptions",
      "organizations_url": "https://api.github.com/users/michaelsbradleyjr/orgs",
      "repos_url": "https://api.github.com/users/michaelsbradleyjr/repos",
      "events_url": "https://api.github.com/users/michaelsbradleyjr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/michaelsbradleyjr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-19T13:55:12Z",
    "updated_at": "2019-08-20T04:35:25Z",
    "author_association": "NONE",
    "body": "I opened an issue upstream a few minutes after I opened this one. See [#33703](https://github.com/golang/go/issues/33703).\r\n\r\nI also opened an upstream issue, of sorts, with ethereum/wiki, see [#674](https://github.com/ethereum/wiki/issues/674). \r\n\r\nAs I mentioned in the latter issue, portability seems to be a concern. A wallet with `{N=262144, R=1, P=8}` as found in geth's tests won't work with parity nor with wallet implementations in JavaScript that rely on Node's built-in scrypt, i.e. without a clumsy fallback to an scrypt implementation that's non-compliant in the same way as Go's.\r\n\r\nAs you note, in practice, because geth only generates wallets with valid params it's probably not a huge issue for geth users. I also understand your decision to wait on an upstream change. But this was a rather confusing puzzle to piece together, and it already has implications for JS libs such as web3.js and ethereumjs-wallet.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/522586439/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/618279849",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/19977#issuecomment-618279849",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/19977",
    "id": 618279849,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxODI3OTg0OQ==",
    "user": {
      "login": "karalabe",
      "id": 129561,
      "node_id": "MDQ6VXNlcjEyOTU2MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/129561?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/karalabe",
      "html_url": "https://github.com/karalabe",
      "followers_url": "https://api.github.com/users/karalabe/followers",
      "following_url": "https://api.github.com/users/karalabe/following{/other_user}",
      "gists_url": "https://api.github.com/users/karalabe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/karalabe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/karalabe/subscriptions",
      "organizations_url": "https://api.github.com/users/karalabe/orgs",
      "repos_url": "https://api.github.com/users/karalabe/repos",
      "events_url": "https://api.github.com/users/karalabe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/karalabe/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-04-23T09:07:04Z",
    "updated_at": "2020-04-23T09:07:04Z",
    "author_association": "MEMBER",
    "body": "The RFC's author says that's an error in the spec https://github.com/golang/go/issues/33703#issuecomment-568198927 and the code is actually correct. They'll probably fix up the spec whenever.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/618279849/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/619950774",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/19977#issuecomment-619950774",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/19977",
    "id": 619950774,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxOTk1MDc3NA==",
    "user": {
      "login": "tniessen",
      "id": 3109072,
      "node_id": "MDQ6VXNlcjMxMDkwNzI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3109072?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tniessen",
      "html_url": "https://github.com/tniessen",
      "followers_url": "https://api.github.com/users/tniessen/followers",
      "following_url": "https://api.github.com/users/tniessen/following{/other_user}",
      "gists_url": "https://api.github.com/users/tniessen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tniessen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tniessen/subscriptions",
      "organizations_url": "https://api.github.com/users/tniessen/orgs",
      "repos_url": "https://api.github.com/users/tniessen/repos",
      "events_url": "https://api.github.com/users/tniessen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tniessen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-04-27T12:20:01Z",
    "updated_at": "2020-04-27T12:20:01Z",
    "author_association": "NONE",
    "body": "> They'll probably fix up the spec whenever.\r\n\r\nI found the mistake in the RFC and filed errata a few months ago. See [5971](https://www.rfc-editor.org/errata/eid5971), [5972](https://www.rfc-editor.org/errata/eid5972), and [5973](https://www.rfc-editor.org/errata/eid5973).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/619950774/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/620135555",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/19977#issuecomment-620135555",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/19977",
    "id": 620135555,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMDEzNTU1NQ==",
    "user": {
      "login": "karalabe",
      "id": 129561,
      "node_id": "MDQ6VXNlcjEyOTU2MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/129561?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/karalabe",
      "html_url": "https://github.com/karalabe",
      "followers_url": "https://api.github.com/users/karalabe/followers",
      "following_url": "https://api.github.com/users/karalabe/following{/other_user}",
      "gists_url": "https://api.github.com/users/karalabe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/karalabe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/karalabe/subscriptions",
      "organizations_url": "https://api.github.com/users/karalabe/orgs",
      "repos_url": "https://api.github.com/users/karalabe/repos",
      "events_url": "https://api.github.com/users/karalabe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/karalabe/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-04-27T17:48:55Z",
    "updated_at": "2020-04-27T17:48:55Z",
    "author_association": "MEMBER",
    "body": "@tniessen Thank you for the corrections and the confirmation!",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/620135555/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
