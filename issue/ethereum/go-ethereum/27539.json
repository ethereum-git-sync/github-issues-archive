{
  "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/27539",
  "repository_url": "https://api.github.com/repos/ethereum/go-ethereum",
  "labels_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/27539/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/27539/comments",
  "events_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/27539/events",
  "html_url": "https://github.com/ethereum/go-ethereum/issues/27539",
  "id": 1769467352,
  "node_id": "I_kwDOAOvK985pd-3Y",
  "number": 27539,
  "title": "ethapi,backends: Export `revertError` for EstimateGas failures",
  "user": {
    "login": "Willyham",
    "id": 169475,
    "node_id": "MDQ6VXNlcjE2OTQ3NQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/169475?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Willyham",
    "html_url": "https://github.com/Willyham",
    "followers_url": "https://api.github.com/users/Willyham/followers",
    "following_url": "https://api.github.com/users/Willyham/following{/other_user}",
    "gists_url": "https://api.github.com/users/Willyham/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Willyham/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Willyham/subscriptions",
    "organizations_url": "https://api.github.com/users/Willyham/orgs",
    "repos_url": "https://api.github.com/users/Willyham/repos",
    "events_url": "https://api.github.com/users/Willyham/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Willyham/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 72233652,
      "node_id": "MDU6TGFiZWw3MjIzMzY1Mg==",
      "url": "https://api.github.com/repos/ethereum/go-ethereum/labels/type:feature",
      "name": "type:feature",
      "color": "84b6eb",
      "default": false,
      "description": null
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2023-06-22T11:14:50Z",
  "updated_at": "2023-11-14T12:07:33Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "# Rationale\r\n\r\nAssume a simple contract which may revert with a custom error:\r\n\r\n```\r\npragma solidity ^0.8.20;\r\n\r\ncontract Foo {\r\n   uint256 public bar = 0;\r\n   error CustomError(); \r\n \r\n   function setBar(uint256 bar_) public {\r\n      if (bar_ > 100) {\r\n        revert CustomError();\r\n      }\r\n     bar = bar_;\r\n   }\r\n}\r\n```\r\n\r\nCalling `EstimateGas` on the function when `bar_ > 100` will cause either a `*backends.revertError` or `*ethapi.revertError` to be returned, depending on the network being used. This error struct contains the message `execution reverted` along with the `reason` field set to the 4byte selector of `CustomError`. This is the expected behaviour.\r\n\r\nHowever, because the `revertError` type is not exported, callers cannot inspect the `reason` field without resorting to unsafe pointers. It would be very helpful (almost crucial) in code to be able to determine the reason for a failure.\r\n\r\nI understand there is a larger issue around custom errors for non-gas-estimations being tracked here #26823.\r\n\r\n# Implementation\r\n\r\nOn the face of it it seems like a relatively simple change to export these structs to they may be inspected by callers. A further improvement would then be to update `abigen` to produce code which can map the selectors to some kind of enum/const of the custom errors, but this can be tackled later.\r\n\r\nI am happy to implement this feature if it seems directionally correct.",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/27539/reactions",
    "total_count": 3,
    "+1": 3,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/27539/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1612661229",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/27539#issuecomment-1612661229",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/27539",
    "id": 1612661229,
    "node_id": "IC_kwDOAOvK985gH0Ht",
    "user": {
      "login": "MariusVanDerWijden",
      "id": 16664698,
      "node_id": "MDQ6VXNlcjE2NjY0Njk4",
      "avatar_url": "https://avatars.githubusercontent.com/u/16664698?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MariusVanDerWijden",
      "html_url": "https://github.com/MariusVanDerWijden",
      "followers_url": "https://api.github.com/users/MariusVanDerWijden/followers",
      "following_url": "https://api.github.com/users/MariusVanDerWijden/following{/other_user}",
      "gists_url": "https://api.github.com/users/MariusVanDerWijden/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MariusVanDerWijden/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MariusVanDerWijden/subscriptions",
      "organizations_url": "https://api.github.com/users/MariusVanDerWijden/orgs",
      "repos_url": "https://api.github.com/users/MariusVanDerWijden/repos",
      "events_url": "https://api.github.com/users/MariusVanDerWijden/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MariusVanDerWijden/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-06-29T08:56:32Z",
    "updated_at": "2023-06-29T08:56:32Z",
    "author_association": "MEMBER",
    "body": "One idea would be to move the `revertError` to `accounts/abi` and export it, this way it could be used from the `bind` and the `rpc` to unmarshal and handle these errors.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1612661229/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1612666639",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/27539#issuecomment-1612666639",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/27539",
    "id": 1612666639,
    "node_id": "IC_kwDOAOvK985gH1cP",
    "user": {
      "login": "fjl",
      "id": 6915,
      "node_id": "MDQ6VXNlcjY5MTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6915?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjl",
      "html_url": "https://github.com/fjl",
      "followers_url": "https://api.github.com/users/fjl/followers",
      "following_url": "https://api.github.com/users/fjl/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjl/subscriptions",
      "organizations_url": "https://api.github.com/users/fjl/orgs",
      "repos_url": "https://api.github.com/users/fjl/repos",
      "events_url": "https://api.github.com/users/fjl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjl/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-06-29T09:00:26Z",
    "updated_at": "2023-06-29T09:00:33Z",
    "author_association": "MEMBER",
    "body": "However, please note that using it in the `internal/ethapi` implementation of the API will not have an immediate effect for Go callers, because the error will be encoded as JSON. So we could also add logic to `accounts/abi/bind` to decode the revert error.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1612666639/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1707095712",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/27539#issuecomment-1707095712",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/27539",
    "id": 1707095712,
    "node_id": "IC_kwDOAOvK985lwDag",
    "user": {
      "login": "Willyham",
      "id": 169475,
      "node_id": "MDQ6VXNlcjE2OTQ3NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/169475?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Willyham",
      "html_url": "https://github.com/Willyham",
      "followers_url": "https://api.github.com/users/Willyham/followers",
      "following_url": "https://api.github.com/users/Willyham/following{/other_user}",
      "gists_url": "https://api.github.com/users/Willyham/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Willyham/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Willyham/subscriptions",
      "organizations_url": "https://api.github.com/users/Willyham/orgs",
      "repos_url": "https://api.github.com/users/Willyham/repos",
      "events_url": "https://api.github.com/users/Willyham/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Willyham/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-09-05T18:16:28Z",
    "updated_at": "2023-09-05T18:16:28Z",
    "author_association": "NONE",
    "body": "For anyone looking for a workaround for this, we are now doing:\r\n\r\n```\r\ntype ErrorReasoner interface {\r\n\tErrorData() interface{}\r\n}\r\n\r\n// extractErrorMessage extract the error message in a failed transaction thrown by a contract for easier debugging.\r\nfunc extractErrorMessage(err error) (string, bool) {\r\n\tasErr, ok := err.(ErrorReasoner)\r\n\tif !ok {\r\n\t\treturn \"\", false\r\n\t}\r\n\terrorCode, ok := asErr.ErrorData().(string)\r\n\tif !ok {\r\n\t\treturn \"\", false\r\n\t}\r\n\tif len(errorCode) < 10 || errorCode[0:2] != \"0x\" {\r\n\t\treturn \"\", false\r\n\t}\r\n\terrorCode = errorCode[0:10]\r\n\r\n\terrorSignature, ok := findErrorSignature(errorCode)\r\n\tif !ok {\r\n\t\treturn errorCode, false\r\n\t}\r\n\terrorCode = errorSignature + \" \" + errorCode\r\n\treturn errorCode, true\r\n}\r\n\r\n// Given the first 4 bytes of the keccak256 of a solidity error signature, finds the error signature string from all our contracts.\r\nfunc findErrorSignature(hashCode string) (string, bool) {\r\n\tmetadata := []*bind.MetaData{\r\n            <...contracts>\r\n\t}\r\n\r\n\tfor _, metadatum := range metadata {\r\n\t\tabi, err := metadatum.GetAbi()\r\n\t\tif err != nil {\r\n\t\t\tcontinue\r\n\t\t}\r\n\t\tfor _, errInfo := range abi.Errors {\r\n\t\t\terrHashPrefix := errInfo.ID.String()[:10]\r\n\t\t\tif hashCode == errHashPrefix {\r\n\t\t\t\treturn errInfo.Sig, true\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn \"\", false\r\n}\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1707095712/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1810083800",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/27539#issuecomment-1810083800",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/27539",
    "id": 1810083800,
    "node_id": "IC_kwDOAOvK985r46_Y",
    "user": {
      "login": "karlschriek",
      "id": 25316920,
      "node_id": "MDQ6VXNlcjI1MzE2OTIw",
      "avatar_url": "https://avatars.githubusercontent.com/u/25316920?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/karlschriek",
      "html_url": "https://github.com/karlschriek",
      "followers_url": "https://api.github.com/users/karlschriek/followers",
      "following_url": "https://api.github.com/users/karlschriek/following{/other_user}",
      "gists_url": "https://api.github.com/users/karlschriek/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/karlschriek/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/karlschriek/subscriptions",
      "organizations_url": "https://api.github.com/users/karlschriek/orgs",
      "repos_url": "https://api.github.com/users/karlschriek/repos",
      "events_url": "https://api.github.com/users/karlschriek/events{/privacy}",
      "received_events_url": "https://api.github.com/users/karlschriek/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-11-14T12:07:32Z",
    "updated_at": "2023-11-14T12:07:32Z",
    "author_association": "NONE",
    "body": "@Willyham this look really useful, I would like to give it a go. Do you have any advice on how this part is supposed to work?\r\n\r\n```\r\n\tmetadata := []*bind.MetaData{\r\n            <...contracts>\r\n\t}\r\n```\r\nThe MetaData struct looks like this, which does not really tell me very much.\r\n\r\n```\r\ntype MetaData struct {\r\n\tmu   sync.Mutex\r\n\tSigs map[string]string\r\n\tBin  string\r\n\tABI  string\r\n\tab   *abi.ABI\r\n}\r\n\r\n```\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1810083800/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
