{
  "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/1838",
  "repository_url": "https://api.github.com/repos/ethereum/go-ethereum",
  "labels_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/1838/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/1838/comments",
  "events_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/1838/events",
  "html_url": "https://github.com/ethereum/go-ethereum/issues/1838",
  "id": 107708046,
  "node_id": "MDU6SXNzdWUxMDc3MDgwNDY=",
  "number": 1838,
  "title": "New database corruption recovery",
  "user": {
    "login": "karalabe",
    "id": 129561,
    "node_id": "MDQ6VXNlcjEyOTU2MQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/129561?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/karalabe",
    "html_url": "https://github.com/karalabe",
    "followers_url": "https://api.github.com/users/karalabe/followers",
    "following_url": "https://api.github.com/users/karalabe/following{/other_user}",
    "gists_url": "https://api.github.com/users/karalabe/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/karalabe/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/karalabe/subscriptions",
    "organizations_url": "https://api.github.com/users/karalabe/orgs",
    "repos_url": "https://api.github.com/users/karalabe/repos",
    "events_url": "https://api.github.com/users/karalabe/events{/privacy}",
    "received_events_url": "https://api.github.com/users/karalabe/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 72233652,
      "node_id": "MDU6TGFiZWw3MjIzMzY1Mg==",
      "url": "https://api.github.com/repos/ethereum/go-ethereum/labels/type:feature",
      "name": "type:feature",
      "color": "84b6eb",
      "default": false,
      "description": null
    },
    {
      "id": 856638432,
      "node_id": "MDU6TGFiZWw4NTY2Mzg0MzI=",
      "url": "https://api.github.com/repos/ethereum/go-ethereum/labels/status:inactive",
      "name": "status:inactive",
      "color": "ffffff",
      "default": false,
      "description": null
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2015-09-22T12:52:05Z",
  "updated_at": "2018-12-14T13:17:20Z",
  "closed_at": "2018-04-16T19:37:25Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "The root cause for opening this issue is a phenomenon that a corrupt database will need to be fully synced for the corruption to be corrected. This can be annoying since it takes a lot of time, and ant interruption starts sync from scratch. The fix is not trivial as a corruption could lead to arbitrary data loss, so we must make sure all our data is still valid after such an event.\n\nQuote from gitter:\n\n> I'm till trying to wrap my head around this issue, but I don't think there's an easy solution out...\n> So, the problem arises when the LastBlock key goes missing from the database\n> The issue is, that this cannot happen in a normal scenario, since we always write it, never delete\n> So if it goes missing, it means we can actually miss out any arbitrary data from the database\n> There's no guarantee I can find, that existing data that we didn't even touch doesn't get lost\n> Since in theory if a crash happens during database reorg, we might corrupt any arbitrary data\n> So in my opinion, the only valid recovery option if the last block is missing, is to iterate over the canonical chain\n> ie. fetch blocks from 0, 1, 2, 3 ...\n> and test that all associated state data is still existent\n> if yes, proceed\n> if not, set the laststate to this -1, and dump everything above it\n> Currently the chain insertion simply checks if the block exists, and if yes, ignores it\n> however, the fast that the block key is in there, does not mean that all the state related to the block is still in there\n> hence we could experience arbitrary corruptions later on, possible caused loong ago\n> karalabe 15:43\n> so my opinion would be to have the following recovery algo:\n> If LastBlock is not found\n> If we're in non-archive mode, iterate the headers until we find blocks; if we're in archive mode, iterate the full blocks\n> For every full block, check that the entire state defined by it's state root can be found\n> Set the lastblock to the last block that satisfies the above query\n> This can be done offline without needing network access, so it should be fast enough\n> Not super fast, but imho we can argument a database corruption with a proper slower check to make sure there's no junk\n> After this, I'd also modify the chain import so that even if a block is known, unless it's TD < our TD, it gets a full import\n> That is requred to fill in any data that want missing doe to the coccurption\n> But this is imho not a trivial fix, and this would also need to properly work together with the header ops\n> So I think the best course of action would be to get the headers done first, open anissue with this dump in the mean time\n> and when the core is stabilized a bit, then do a new recovery mechansm\n> karalabe 15:48\n> Also along these lines, if we create a method to check the full state existence related to a root key, I'd also place that in as a sanity check to geth booting\n> Then after boot we would have a guarantee that at least our head is valid (maybe even back a few blocks if it's fast enough)\n> These could go a long way to prevent corruption issues and to handle them if they do occur\n> \n> Or, actually a much nicer check would be to add a special key to the database, which simply signals if it's clean or not:\n> when we start, we shove a \"open\" -> \"whatev\" entry into the database\n> and delete then before we close geth\n> karalabe 15:53\n> if the key is present when starting, the db wasn't cleanly shut down, recover\n",
  "closed_by": {
    "login": "stale[bot]",
    "id": 26384082,
    "node_id": "MDM6Qm90MjYzODQwODI=",
    "avatar_url": "https://avatars.githubusercontent.com/in/1724?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/stale%5Bbot%5D",
    "html_url": "https://github.com/apps/stale",
    "followers_url": "https://api.github.com/users/stale%5Bbot%5D/followers",
    "following_url": "https://api.github.com/users/stale%5Bbot%5D/following{/other_user}",
    "gists_url": "https://api.github.com/users/stale%5Bbot%5D/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/stale%5Bbot%5D/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/stale%5Bbot%5D/subscriptions",
    "organizations_url": "https://api.github.com/users/stale%5Bbot%5D/orgs",
    "repos_url": "https://api.github.com/users/stale%5Bbot%5D/repos",
    "events_url": "https://api.github.com/users/stale%5Bbot%5D/events{/privacy}",
    "received_events_url": "https://api.github.com/users/stale%5Bbot%5D/received_events",
    "type": "Bot",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/1838/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/1838/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/370520777",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/1838#issuecomment-370520777",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/1838",
    "id": 370520777,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MDUyMDc3Nw==",
    "user": {
      "login": "stale[bot]",
      "id": 26384082,
      "node_id": "MDM6Qm90MjYzODQwODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/1724?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stale%5Bbot%5D",
      "html_url": "https://github.com/apps/stale",
      "followers_url": "https://api.github.com/users/stale%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/stale%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/stale%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stale%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stale%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/stale%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/stale%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/stale%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stale%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2018-03-05T18:44:26Z",
    "updated_at": "2018-03-05T18:44:26Z",
    "author_association": "NONE",
    "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/370520777/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
