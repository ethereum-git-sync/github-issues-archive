{
  "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/28617",
  "repository_url": "https://api.github.com/repos/ethereum/go-ethereum",
  "labels_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/28617/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/28617/comments",
  "events_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/28617/events",
  "html_url": "https://github.com/ethereum/go-ethereum/issues/28617",
  "id": 2013804873,
  "node_id": "I_kwDOAOvK9854CDlJ",
  "number": 28617,
  "title": "Integrating state snapshot into pathdb",
  "user": {
    "login": "rjl493456442",
    "id": 5959481,
    "node_id": "MDQ6VXNlcjU5NTk0ODE=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5959481?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/rjl493456442",
    "html_url": "https://github.com/rjl493456442",
    "followers_url": "https://api.github.com/users/rjl493456442/followers",
    "following_url": "https://api.github.com/users/rjl493456442/following{/other_user}",
    "gists_url": "https://api.github.com/users/rjl493456442/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/rjl493456442/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/rjl493456442/subscriptions",
    "organizations_url": "https://api.github.com/users/rjl493456442/orgs",
    "repos_url": "https://api.github.com/users/rjl493456442/repos",
    "events_url": "https://api.github.com/users/rjl493456442/events{/privacy}",
    "received_events_url": "https://api.github.com/users/rjl493456442/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1132689577,
      "node_id": "MDU6TGFiZWwxMTMyNjg5NTc3",
      "url": "https://api.github.com/repos/ethereum/go-ethereum/labels/status:triage",
      "name": "status:triage",
      "color": "6be514",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2023-11-28T07:15:23Z",
  "updated_at": "2023-12-01T09:18:08Z",
  "closed_at": null,
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "The state snapshot and trie database function as distinct components within the system. It's important to note that the state updates between these two components occur asynchronously.\r\n\r\nTherefore, it's pretty common that the persistent state of trie is different with the one of state snapshot.\r\n\r\n--- \r\n\r\nOriginally trie database can only support hash-based scheme, which is completely async with state snapshot. In order to handle the unclean shutdown, some complicated and nasty recovery mechanism is introduced to ensure both trie database and state snapshot can be recovered after panic.\r\n\r\nIt turns out this recovery mechanism is unnecessary complexity in path-based scheme which can be get rid of totally. It's beneficial enough to integrate state snapshot into pathdb for better robustness and simplicity.\r\n\r\n---\r\n\r\nBesides, integration of state snapshot and pathdb is required to build new archive node over path-based scheme.\r\n\r\nThe overall idea of new archive node design is to maintain extra indexes for each state. The block number of state mutations are tracked in the index.\r\n\r\ne.g. \r\n\r\nstate x => [100, 200, 300]. This index means state x is mutated in block 100, 200, 300. \r\n\r\nIn the mean time, there is a corresponding state history persisted for each block, which tracks the **original value** of the modified state.\r\n\r\nTherefore, in order to access state x at block 150, state history(200) is resolved and the value recorded is the one in block 150.\r\n\r\nIf state x at block 350 is accessed, then the value in the latest state should be provided, which is exactly resolved from the state snapshot.\r\n\r\nintegrating state snapshot into pathdb will simplify the whole thing to implement archive node idea.\r\n\r\n\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/28617/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/28617/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1835744616",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/28617#issuecomment-1835744616",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/28617",
    "id": 1835744616,
    "node_id": "IC_kwDOAOvK985taz1o",
    "user": {
      "login": "MariusVanDerWijden",
      "id": 16664698,
      "node_id": "MDQ6VXNlcjE2NjY0Njk4",
      "avatar_url": "https://avatars.githubusercontent.com/u/16664698?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MariusVanDerWijden",
      "html_url": "https://github.com/MariusVanDerWijden",
      "followers_url": "https://api.github.com/users/MariusVanDerWijden/followers",
      "following_url": "https://api.github.com/users/MariusVanDerWijden/following{/other_user}",
      "gists_url": "https://api.github.com/users/MariusVanDerWijden/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MariusVanDerWijden/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MariusVanDerWijden/subscriptions",
      "organizations_url": "https://api.github.com/users/MariusVanDerWijden/orgs",
      "repos_url": "https://api.github.com/users/MariusVanDerWijden/repos",
      "events_url": "https://api.github.com/users/MariusVanDerWijden/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MariusVanDerWijden/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-12-01T09:18:07Z",
    "updated_at": "2023-12-01T09:18:07Z",
    "author_association": "MEMBER",
    "body": "I just thought about EIP-4788 which modifies the storage of an address on every block. This would mean that the index for this address would be len(blocks). We could probably keep this in mind to make historical lookups faster for this account",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1835744616/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
