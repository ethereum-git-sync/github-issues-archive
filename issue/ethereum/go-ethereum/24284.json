{
  "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/24284",
  "repository_url": "https://api.github.com/repos/ethereum/go-ethereum",
  "labels_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/24284/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/24284/comments",
  "events_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/24284/events",
  "html_url": "https://github.com/ethereum/go-ethereum/issues/24284",
  "id": 1112913162,
  "node_id": "I_kwDOAOvK985CVbUK",
  "number": 24284,
  "title": "go-ethereum does not implement the EIP-1559 spec correctly",
  "user": {
    "login": "samsondav",
    "id": 4147639,
    "node_id": "MDQ6VXNlcjQxNDc2Mzk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4147639?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/samsondav",
    "html_url": "https://github.com/samsondav",
    "followers_url": "https://api.github.com/users/samsondav/followers",
    "following_url": "https://api.github.com/users/samsondav/following{/other_user}",
    "gists_url": "https://api.github.com/users/samsondav/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/samsondav/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/samsondav/subscriptions",
    "organizations_url": "https://api.github.com/users/samsondav/orgs",
    "repos_url": "https://api.github.com/users/samsondav/repos",
    "events_url": "https://api.github.com/users/samsondav/events{/privacy}",
    "received_events_url": "https://api.github.com/users/samsondav/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 72233650,
      "node_id": "MDU6TGFiZWw3MjIzMzY1MA==",
      "url": "https://api.github.com/repos/ethereum/go-ethereum/labels/type:bug",
      "name": "type:bug",
      "color": "FF5E5E",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2022-01-24T17:05:33Z",
  "updated_at": "2022-01-24T22:09:30Z",
  "closed_at": "2022-01-24T21:13:05Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "Reading the spec [here](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1559.md\r\n), it is indicated that FeeCap can be kept constant as the most that a client is willing to pay, and TipCap be manipulated to ensure timely inclusion.\r\n\r\nHowever in practice that doesn't work.\r\n\r\nLooking at [the code](https://github.com/ethereum/go-ethereum/blob/bff330335b94af3643ac2fb809793f77de3069d4/core/tx_list.go#L298) it appears that you _must_ bump both TipCap **and** FeeCap together or the transaction will be rejected.\r\n\r\nThis seems like a mistake. From my understanding, FeeCap is \"the maximum I would ever be willing to pay for this transaction\". \r\n\r\n### Expected behaviour\r\n\r\nIt should be possible to increase the TipCap while keeping FeeCap the same. In short, the following series of transactions should be ok:\r\n\r\n`FeeCap: 10GWei, TipCap: 1Gwei`\r\n\r\nWait some time, it didn't get included yet. We want to bump to get faster inclusion but still ensure the maximum we can possibly pay is 10GWei.\r\n\r\n`FeeCap: 10GWei, TipCap: 2GWei`\r\n\r\nIt should be accepted into the mempool.\r\n\r\n### Actual behaviour\r\n\r\nIn practice the second transaction returns `replacement transaction underpriced` errors.\r\n",
  "closed_by": {
    "login": "karalabe",
    "id": 129561,
    "node_id": "MDQ6VXNlcjEyOTU2MQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/129561?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/karalabe",
    "html_url": "https://github.com/karalabe",
    "followers_url": "https://api.github.com/users/karalabe/followers",
    "following_url": "https://api.github.com/users/karalabe/following{/other_user}",
    "gists_url": "https://api.github.com/users/karalabe/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/karalabe/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/karalabe/subscriptions",
    "organizations_url": "https://api.github.com/users/karalabe/orgs",
    "repos_url": "https://api.github.com/users/karalabe/repos",
    "events_url": "https://api.github.com/users/karalabe/events{/privacy}",
    "received_events_url": "https://api.github.com/users/karalabe/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/24284/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/24284/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1020551947",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/24284#issuecomment-1020551947",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/24284",
    "id": 1020551947,
    "node_id": "IC_kwDOAOvK98481GML",
    "user": {
      "login": "karalabe",
      "id": 129561,
      "node_id": "MDQ6VXNlcjEyOTU2MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/129561?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/karalabe",
      "html_url": "https://github.com/karalabe",
      "followers_url": "https://api.github.com/users/karalabe/followers",
      "following_url": "https://api.github.com/users/karalabe/following{/other_user}",
      "gists_url": "https://api.github.com/users/karalabe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/karalabe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/karalabe/subscriptions",
      "organizations_url": "https://api.github.com/users/karalabe/orgs",
      "repos_url": "https://api.github.com/users/karalabe/repos",
      "events_url": "https://api.github.com/users/karalabe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/karalabe/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-24T21:13:05Z",
    "updated_at": "2022-01-24T21:13:05Z",
    "author_association": "MEMBER",
    "body": "In your example, if the basefee is say 9gwei, then it doesn't matter if you bumped the tip from 1 to 2, it's gonna end up with 1 in the end either way. The goal of requiring a bump on both was to avoid these kind of scenarios where is \"seems\" that you bumped the price, but you didn't really. Those are very hard to reason about and we don't really see the value in taking that risk. A replacement transaction pre-1559 needed a 10% bump overall. Post 1559 requiring a bump on both the total and the tip cap ensures that we retain the original behavior of actually paying more for a replacement and avoiding spam.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1020551947/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1020568601",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/24284#issuecomment-1020568601",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/24284",
    "id": 1020568601,
    "node_id": "IC_kwDOAOvK98481KQZ",
    "user": {
      "login": "samsondav",
      "id": 4147639,
      "node_id": "MDQ6VXNlcjQxNDc2Mzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4147639?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/samsondav",
      "html_url": "https://github.com/samsondav",
      "followers_url": "https://api.github.com/users/samsondav/followers",
      "following_url": "https://api.github.com/users/samsondav/following{/other_user}",
      "gists_url": "https://api.github.com/users/samsondav/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/samsondav/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/samsondav/subscriptions",
      "organizations_url": "https://api.github.com/users/samsondav/orgs",
      "repos_url": "https://api.github.com/users/samsondav/repos",
      "events_url": "https://api.github.com/users/samsondav/events{/privacy}",
      "received_events_url": "https://api.github.com/users/samsondav/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-24T21:31:34Z",
    "updated_at": "2022-01-24T22:09:30Z",
    "author_association": "NONE",
    "body": "@karalabe but that would be intentional? FeeCap is the total max you are willing to pay. I would expect it not to be mined at all if the base fee is 9GWei and the tip is 2GWei, it would get mined once base fee comes down\r\n\r\n> we don't really see the value in taking that risk\r\n\r\nWell, there would be tremendous value in it for us.\r\n\r\nThe problem is that this artificial limitation has neutered our ability to use EIP-1559 in the way it was originally intended.\r\n\r\nThis artificial limitation to prevent people from using it \"wrongly\" in the case that they didn't understand what it does also prevents us from using it \"correctly\".\r\n\r\nIn our use case we want to set an absolute maximum we are willing to pay, and bump the priority fee until inclusion. If the base fee is 9GWei and bumping the priority fee would have no effect, **then that's fine**. We want the Fee Cap to be just that - a maximum cap on the total fee we would pay.\r\n\r\nAs a result of this limitation we have to change our software to be aware of up-to-date block fees and make dynamic adjustments to it (because we have to start from a FeeCap that is much lower than our actual real desired cap, just to give ourselves headroom to bump the priority fee) whereas if this limitation was not present, we could safely send transactions without any knowledge of the current state of the chain.\r\n\r\n**The upshot of this limitation is that it is now required to have knowledge of the current state of the chain to send a transaction, whereas if there was no 10% forced bump on FeeCap, it would be possible to send transactions and bump without any knowledge of the base fee at all**\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1020568601/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
