{
  "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/24073",
  "repository_url": "https://api.github.com/repos/ethereum/go-ethereum",
  "labels_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/24073/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/24073/comments",
  "events_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/24073/events",
  "html_url": "https://github.com/ethereum/go-ethereum/issues/24073",
  "id": 1072595286,
  "node_id": "I_kwDOAOvK984_7oFW",
  "number": 24073,
  "title": "Data loss during MarshalBinary and UnmarshalBinary for Receipt",
  "user": {
    "login": "quentinlesceller",
    "id": 11842328,
    "node_id": "MDQ6VXNlcjExODQyMzI4",
    "avatar_url": "https://avatars.githubusercontent.com/u/11842328?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/quentinlesceller",
    "html_url": "https://github.com/quentinlesceller",
    "followers_url": "https://api.github.com/users/quentinlesceller/followers",
    "following_url": "https://api.github.com/users/quentinlesceller/following{/other_user}",
    "gists_url": "https://api.github.com/users/quentinlesceller/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/quentinlesceller/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/quentinlesceller/subscriptions",
    "organizations_url": "https://api.github.com/users/quentinlesceller/orgs",
    "repos_url": "https://api.github.com/users/quentinlesceller/repos",
    "events_url": "https://api.github.com/users/quentinlesceller/events{/privacy}",
    "received_events_url": "https://api.github.com/users/quentinlesceller/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 72233650,
      "node_id": "MDU6TGFiZWw3MjIzMzY1MA==",
      "url": "https://api.github.com/repos/ethereum/go-ethereum/labels/type:bug",
      "name": "type:bug",
      "color": "FF5E5E",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 3,
  "created_at": "2021-12-06T20:46:11Z",
  "updated_at": "2021-12-07T19:26:08Z",
  "closed_at": "2021-12-07T19:26:08Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "Hi everyone,\r\n\r\nI believe that since https://github.com/ethereum/go-ethereum/pull/22806 and the release of geth v1.10.10, I noticed that some data in the `Receipt` type are lost during marshalling. Previously the test below used to work correctly.\r\n\r\n#### System information\r\n\r\nGeth version: >=1.10.10\r\nOS & Version: Tested on Linux and macOS\r\n\r\n#### Expected behaviour\r\n\r\nReceipt should be marshalled and unmarshaled without data loss.\r\n\r\n#### Actual behaviour\r\n\r\nWhen using MarshalBinary then UnmarshalBinary, the following fields are lost.\r\n\r\n```golang\r\n\r\ntype Receipt struct {\r\n        ....\r\n        ...\r\n\t// Implementation fields: These fields are added by geth when processing a transaction.\r\n\t// They are stored in the chain database.\r\n\tTxHash          common.Hash    `json:\"transactionHash\" gencodec:\"required\"`\r\n\tContractAddress common.Address `json:\"contractAddress\"`\r\n\tGasUsed         uint64         `json:\"gasUsed\" gencodec:\"required\"`\r\n\r\n\t// Inclusion information: These fields provide information about the inclusion of the\r\n\t// transaction corresponding to this receipt.\r\n\tBlockHash        common.Hash `json:\"blockHash,omitempty\"`\r\n\tBlockNumber      *big.Int    `json:\"blockNumber,omitempty\"`\r\n\tTransactionIndex uint        `json:\"transactionIndex\"`\r\n}\r\n```\r\n\r\n#### Steps to reproduce the behaviour\r\n\r\nAdd the following test in `core/types/receipt_test.go`:\r\n\r\n```golang\r\nfunc TestReceiptMarshalBinary2(t *testing.T) {\r\n\tlegacyFullReceipt := Receipt{\r\n\t\tType:              1,\r\n\t\tPostState:         nil,\r\n\t\tStatus:            ReceiptStatusSuccessful,\r\n\t\tCumulativeGasUsed: 30047541,\r\n\t\tTxHash:            common.HexToHash(\"0xf9a460cd85018d7ae76af7c170596d24c6c95fac959c15ac3237bf563b277348\"),\r\n\t\tContractAddress:   common.HexToAddress(\"0xf9a460cd85018d7ae76af7c170596d24c6c95fac959c15ac3237bf563b277348\"),\r\n\t\tGasUsed:           46507,\r\n\t\tBlockHash:         common.HexToHash(\"0x64182164092a4d0d80e04d905b6298f8bb14625f2830466bffb26b583bcbdeb5\"),\r\n\t\tBlockNumber:       big.NewInt(13753711),\r\n\t\tTransactionIndex:  368,\r\n\t}\r\n\tlegacyReceipt.Bloom = CreateBloom(Receipts{&legacyFullReceipt})\r\n\thave, err := legacyFullReceipt.MarshalBinary()\r\n\tif err != nil {\r\n\t\tt.Fatalf(\"marshal binary error: %v\", err)\r\n\t}\r\n\tgotLegacyFullReceipt := new(Receipt)\r\n\tif err := gotLegacyFullReceipt.UnmarshalBinary(have); err != nil {\r\n\t\tt.Fatalf(\"unmarshal binary error: %v\", err)\r\n\t}\r\n\tif !reflect.DeepEqual(gotLegacyFullReceipt, legacyFullReceipt) {\r\n\t\tt.Errorf(\"receipt unmarshalled from binary mismatch, got %v want %v\", gotLegacyFullReceipt, legacyFullReceipt)\r\n\t}\r\n}\r\n```\r\n\r\n\r\n#### Backtrace\r\n\r\n````\r\nRunning tool: /opt/homebrew/bin/go test -timeout 30s -run ^TestReceiptMarshalBinary2$ github.com/ethereum/go-ethereum/core/types\r\n\r\n--- FAIL: TestReceiptMarshalBinary2 (0.00s)\r\n    /Users/quentin/go/src/github.com/ethereum/go-ethereum/core/types/receipt_test.go:391: receipt unmarshalled from binary mismatch, got &{1 [] 1 30047541 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] [] 0x0000000000000000000000000000000000000000000000000000000000000000 0x0000000000000000000000000000000000000000 0 0x0000000000000000000000000000000000000000000000000000000000000000 <nil> 0} want {1 [] 1 30047541 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] [] 0xf9a460cd85018d7ae76af7c170596d24c6c95fac959c15ac3237bf563b277348 0x70596d24C6c95FAC959c15aC3237Bf563B277348 46507 0x64182164092a4d0d80e04d905b6298f8bb14625f2830466bffb26b583bcbdeb5 13753711 368}\r\n````\r\n",
  "closed_by": {
    "login": "quentinlesceller",
    "id": 11842328,
    "node_id": "MDQ6VXNlcjExODQyMzI4",
    "avatar_url": "https://avatars.githubusercontent.com/u/11842328?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/quentinlesceller",
    "html_url": "https://github.com/quentinlesceller",
    "followers_url": "https://api.github.com/users/quentinlesceller/followers",
    "following_url": "https://api.github.com/users/quentinlesceller/following{/other_user}",
    "gists_url": "https://api.github.com/users/quentinlesceller/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/quentinlesceller/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/quentinlesceller/subscriptions",
    "organizations_url": "https://api.github.com/users/quentinlesceller/orgs",
    "repos_url": "https://api.github.com/users/quentinlesceller/repos",
    "events_url": "https://api.github.com/users/quentinlesceller/events{/privacy}",
    "received_events_url": "https://api.github.com/users/quentinlesceller/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/24073/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/24073/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/987222658",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/24073#issuecomment-987222658",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/24073",
    "id": 987222658,
    "node_id": "IC_kwDOAOvK984619KC",
    "user": {
      "login": "quentinlesceller",
      "id": 11842328,
      "node_id": "MDQ6VXNlcjExODQyMzI4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11842328?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/quentinlesceller",
      "html_url": "https://github.com/quentinlesceller",
      "followers_url": "https://api.github.com/users/quentinlesceller/followers",
      "following_url": "https://api.github.com/users/quentinlesceller/following{/other_user}",
      "gists_url": "https://api.github.com/users/quentinlesceller/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/quentinlesceller/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/quentinlesceller/subscriptions",
      "organizations_url": "https://api.github.com/users/quentinlesceller/orgs",
      "repos_url": "https://api.github.com/users/quentinlesceller/repos",
      "events_url": "https://api.github.com/users/quentinlesceller/events{/privacy}",
      "received_events_url": "https://api.github.com/users/quentinlesceller/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-12-06T21:14:57Z",
    "updated_at": "2021-12-06T21:14:57Z",
    "author_association": "NONE",
    "body": "After reading some more on this. It seems like this is the expected behaviour? That's unfortunate because we used these values internally and I don't see at first glance a way to serialise it without losing data.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/987222658/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/987593659",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/24073#issuecomment-987593659",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/24073",
    "id": 987593659,
    "node_id": "IC_kwDOAOvK98463Xu7",
    "user": {
      "login": "rjl493456442",
      "id": 5959481,
      "node_id": "MDQ6VXNlcjU5NTk0ODE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5959481?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rjl493456442",
      "html_url": "https://github.com/rjl493456442",
      "followers_url": "https://api.github.com/users/rjl493456442/followers",
      "following_url": "https://api.github.com/users/rjl493456442/following{/other_user}",
      "gists_url": "https://api.github.com/users/rjl493456442/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rjl493456442/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rjl493456442/subscriptions",
      "organizations_url": "https://api.github.com/users/rjl493456442/orgs",
      "repos_url": "https://api.github.com/users/rjl493456442/repos",
      "events_url": "https://api.github.com/users/rjl493456442/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rjl493456442/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-12-07T05:58:35Z",
    "updated_at": "2021-12-07T06:00:32Z",
    "author_association": "MEMBER",
    "body": "From the description of the function `// MarshalBinary returns the consensus encoding of the receipt.` it's aimed to return the **consensus encoding**. Thus it omits the \"unnecessary\" fields when marshaling the receipt to derive a binary with consensus definition.\r\n\r\nWhat's more, there are a few other receipt encodings in Geth, like storage encoding(which aims to store the minimal fields and recover all other fields in runtime) and json encoding. You might be interested in this https://github.com/ethereum/go-ethereum/blob/master/core/types/gen_receipt_json.go \r\n\r\nAlso in order to get all receipts fields, you need to use https://github.com/ethereum/go-ethereum/blob/master/core/rawdb/accessors_chain.go#L560 this API.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/987593659/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/988205216",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/24073#issuecomment-988205216",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/24073",
    "id": 988205216,
    "node_id": "IC_kwDOAOvK98465tCg",
    "user": {
      "login": "quentinlesceller",
      "id": 11842328,
      "node_id": "MDQ6VXNlcjExODQyMzI4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11842328?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/quentinlesceller",
      "html_url": "https://github.com/quentinlesceller",
      "followers_url": "https://api.github.com/users/quentinlesceller/followers",
      "following_url": "https://api.github.com/users/quentinlesceller/following{/other_user}",
      "gists_url": "https://api.github.com/users/quentinlesceller/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/quentinlesceller/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/quentinlesceller/subscriptions",
      "organizations_url": "https://api.github.com/users/quentinlesceller/orgs",
      "repos_url": "https://api.github.com/users/quentinlesceller/repos",
      "events_url": "https://api.github.com/users/quentinlesceller/events{/privacy}",
      "received_events_url": "https://api.github.com/users/quentinlesceller/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-12-07T19:26:08Z",
    "updated_at": "2021-12-07T19:26:08Z",
    "author_association": "NONE",
    "body": "Hi @rjl493456442,\r\n\r\nThank you for your answer. The main problem that we had is that the new encoding broke our usage since we use go rpc.\r\nI guess that if it is a consensus thing we will probably use jsonrpc. Closing.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/988205216/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
