{
  "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/21630",
  "repository_url": "https://api.github.com/repos/ethereum/go-ethereum",
  "labels_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/21630/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/21630/comments",
  "events_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/21630/events",
  "html_url": "https://github.com/ethereum/go-ethereum/issues/21630",
  "id": 709710382,
  "node_id": "MDU6SXNzdWU3MDk3MTAzODI=",
  "number": 21630,
  "title": "out of gas, what should I do?",
  "user": {
    "login": "emmeair",
    "id": 33251836,
    "node_id": "MDQ6VXNlcjMzMjUxODM2",
    "avatar_url": "https://avatars.githubusercontent.com/u/33251836?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/emmeair",
    "html_url": "https://github.com/emmeair",
    "followers_url": "https://api.github.com/users/emmeair/followers",
    "following_url": "https://api.github.com/users/emmeair/following{/other_user}",
    "gists_url": "https://api.github.com/users/emmeair/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/emmeair/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/emmeair/subscriptions",
    "organizations_url": "https://api.github.com/users/emmeair/orgs",
    "repos_url": "https://api.github.com/users/emmeair/repos",
    "events_url": "https://api.github.com/users/emmeair/events{/privacy}",
    "received_events_url": "https://api.github.com/users/emmeair/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2020-09-27T10:08:18Z",
  "updated_at": "2020-09-29T11:19:43Z",
  "closed_at": "2020-09-29T11:19:43Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "Hello, I would like to ask if I initiate a transaction and return the hash of the order, can I use golang to get the status of the transaction? Can I use websocket monitoring to achieve the goal? Are there any examples of use? I also want to know if ws is sending a heartbeat by default? Or do it by yourself\r\n\r\n\r\nI still want to ask\r\n\r\n```json\r\n[\r\n  {\r\n    \"traceAddress\": [],\r\n    \"action\": {\r\n      \"input\": \"0xa9059cbb0000000000000000000000007b7f78e6be2f5c2485cc1e86bbee9cf99dad68cf000000000000000000000000000000000000000000000000000000000007a120\",\r\n      \"gas\": \"0x0\",\r\n      \"from\": \"0x2248bd550e892eac31d0c8d34ed3911d36e18b2d\",\r\n      \"to\": \"0xdac17f958d2ee523a2206206994597c13d831ec7\",\r\n      \"value\": \"0x0\",\r\n      \"callType\": \"call\"\r\n    },\r\n    \"type\": \"call\",\r\n    \"error\": \"Out of gas\",\r\n    \"subtraces\": 0\r\n  }\r\n]\r\n```\r\nIs this a reminder that my account does not have more gas to complete the transaction?\r\nI heard that gas can be added to continue completing the order. Is there an example?\r\n\r\n```\"gas\": \"0x0\"```Why is it 0? I attach my code below\r\n\r\n```golang\r\n\r\n\tclient, err := ethclient.Dial(\"***\")\r\n\tif err != nil {\r\n\t\tlog.Fatal(err)\r\n\t}\r\n\tprivateKey, err := crypto.HexToECDSA(\"***\")\r\n\tif err != nil {\r\n\t\tlog.Fatal(err)\r\n\t}\r\n\r\n\tpublicKey := privateKey.Public()\r\n\tpublicKeyECDSA, ok := publicKey.(*ecdsa.PublicKey)\r\n\tif !ok {\r\n\t\tlog.Fatal(\"cannot assert type: publicKey is not of type *ecdsa.PublicKey\")\r\n\t}\r\n\r\n\tfromAddress := crypto.PubkeyToAddress(*publicKeyECDSA)\r\n\tnonce, err := client.PendingNonceAt(context.Background(), fromAddress)\r\n\tif err != nil {\r\n\t\tlog.Fatal(err)\r\n\t}\r\n\r\n\tvalue := big.NewInt(0) // in wei (0 eth)\r\n\tgasPrice, err := client.SuggestGasPrice(context.Background())\r\n\tif err != nil {\r\n\t\tlog.Fatal(err)\r\n\t}\r\n\r\n\ttoAddress := common.HexToAddress(\"****\")\r\n\ttokenAddress := common.HexToAddress(\"0xdac17f958d2ee523a2206206994597c13d831ec7\")\r\n\r\n\ttransferFnSignature := []byte(\"transfer(address,uint256)\")\r\n\thash := sha3.NewLegacyKeccak256()\r\n\r\n\thash.Write(transferFnSignature)\r\n\tmethodID := hash.Sum(nil)[:4]\r\n\r\n\tpaddedAddress := common.LeftPadBytes(toAddress.Bytes(), 32)\r\n\r\n\tamount := new(big.Int)\r\n\tamount.SetString(\"500000\", 10) //0.5usdt\r\n\tpaddedAmount := common.LeftPadBytes(amount.Bytes(), 32)\r\n\r\n\tvar data []byte\r\n\tdata = append(data, methodID...)\r\n\tdata = append(data, paddedAddress...)\r\n\tdata = append(data, paddedAmount...)\r\n\r\n\tgasLimit, err := client.EstimateGas(context.Background(), ethereum.CallMsg{\r\n\t\tTo:   &toAddress,\r\n\t\tData: data,\r\n\t})\r\n\r\n\tif err != nil {\r\n\t\tlog.Fatal(err)\r\n\t}\r\n\r\n\ttx := types.NewTransaction(nonce, tokenAddress, value, gasLimit, gasPrice, data)\r\n\r\n```",
  "closed_by": {
    "login": "MariusVanDerWijden",
    "id": 16664698,
    "node_id": "MDQ6VXNlcjE2NjY0Njk4",
    "avatar_url": "https://avatars.githubusercontent.com/u/16664698?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/MariusVanDerWijden",
    "html_url": "https://github.com/MariusVanDerWijden",
    "followers_url": "https://api.github.com/users/MariusVanDerWijden/followers",
    "following_url": "https://api.github.com/users/MariusVanDerWijden/following{/other_user}",
    "gists_url": "https://api.github.com/users/MariusVanDerWijden/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/MariusVanDerWijden/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/MariusVanDerWijden/subscriptions",
    "organizations_url": "https://api.github.com/users/MariusVanDerWijden/orgs",
    "repos_url": "https://api.github.com/users/MariusVanDerWijden/repos",
    "events_url": "https://api.github.com/users/MariusVanDerWijden/events{/privacy}",
    "received_events_url": "https://api.github.com/users/MariusVanDerWijden/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/21630/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/21630/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/700637548",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/21630#issuecomment-700637548",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/21630",
    "id": 700637548,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwMDYzNzU0OA==",
    "user": {
      "login": "MariusVanDerWijden",
      "id": 16664698,
      "node_id": "MDQ6VXNlcjE2NjY0Njk4",
      "avatar_url": "https://avatars.githubusercontent.com/u/16664698?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MariusVanDerWijden",
      "html_url": "https://github.com/MariusVanDerWijden",
      "followers_url": "https://api.github.com/users/MariusVanDerWijden/followers",
      "following_url": "https://api.github.com/users/MariusVanDerWijden/following{/other_user}",
      "gists_url": "https://api.github.com/users/MariusVanDerWijden/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MariusVanDerWijden/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MariusVanDerWijden/subscriptions",
      "organizations_url": "https://api.github.com/users/MariusVanDerWijden/orgs",
      "repos_url": "https://api.github.com/users/MariusVanDerWijden/repos",
      "events_url": "https://api.github.com/users/MariusVanDerWijden/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MariusVanDerWijden/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-29T11:19:43Z",
    "updated_at": "2020-09-29T11:19:43Z",
    "author_association": "MEMBER",
    "body": "Yes you can go to get the status of the transaction. You can use the following code to send your tx + check for status:\r\n```go\r\n\ttx := types.NewTransaction(nonce, toAddress, value, gasLimit, gasPrice, nil)\r\n\r\n\t// SimBackend has chainid 1337, Mainnet has chainid 1, you can also get it by calling client.ChainID\r\n\tchainID := big.NewInt(1337)\r\n\t// secret key of your account\r\n\tprivateKey := sk\r\n\r\n\tsignedTx, err := types.SignTx(tx, types.NewEIP155Signer(chainID), privateKey)\r\n\tif err != nil {\r\n\t\tlog.Fatal(err)\r\n\t}\r\n\r\n\tif err := client.SendTransaction(context.Background(), signedTx); err != nil {\r\n\t\tfmt.Println(err)\r\n\t\treturn\r\n\t}\r\n\t// We have to advance the simulated blockchain\r\n\tclient.Commit()\r\n\t// Wait for the chain result\r\n\trec, err := bind.WaitMined(context.Background(), client, signedTx)\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\tif rec.Status != types.ReceiptStatusSuccessful {\r\n\t\tpanic(\"tx failed\")\r\n\t}\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/700637548/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
