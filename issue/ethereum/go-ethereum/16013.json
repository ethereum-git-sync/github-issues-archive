{
  "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/16013",
  "repository_url": "https://api.github.com/repos/ethereum/go-ethereum",
  "labels_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/16013/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/16013/comments",
  "events_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/16013/events",
  "html_url": "https://github.com/ethereum/go-ethereum/issues/16013",
  "id": 294130884,
  "node_id": "MDU6SXNzdWUyOTQxMzA4ODQ=",
  "number": 16013,
  "title": " Wiki documentation is not consistent with actual api in geth shh command",
  "user": {
    "login": "pablochacin",
    "id": 720259,
    "node_id": "MDQ6VXNlcjcyMDI1OQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/720259?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/pablochacin",
    "html_url": "https://github.com/pablochacin",
    "followers_url": "https://api.github.com/users/pablochacin/followers",
    "following_url": "https://api.github.com/users/pablochacin/following{/other_user}",
    "gists_url": "https://api.github.com/users/pablochacin/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/pablochacin/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/pablochacin/subscriptions",
    "organizations_url": "https://api.github.com/users/pablochacin/orgs",
    "repos_url": "https://api.github.com/users/pablochacin/repos",
    "events_url": "https://api.github.com/users/pablochacin/events{/privacy}",
    "received_events_url": "https://api.github.com/users/pablochacin/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 264067675,
      "node_id": "MDU6TGFiZWwyNjQwNjc2NzU=",
      "url": "https://api.github.com/repos/ethereum/go-ethereum/labels/area:whisper",
      "name": "area:whisper",
      "color": "d4c5f9",
      "default": false,
      "description": null
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": {
    "login": "gballet",
    "id": 3272758,
    "node_id": "MDQ6VXNlcjMyNzI3NTg=",
    "avatar_url": "https://avatars.githubusercontent.com/u/3272758?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/gballet",
    "html_url": "https://github.com/gballet",
    "followers_url": "https://api.github.com/users/gballet/followers",
    "following_url": "https://api.github.com/users/gballet/following{/other_user}",
    "gists_url": "https://api.github.com/users/gballet/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/gballet/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gballet/subscriptions",
    "organizations_url": "https://api.github.com/users/gballet/orgs",
    "repos_url": "https://api.github.com/users/gballet/repos",
    "events_url": "https://api.github.com/users/gballet/events{/privacy}",
    "received_events_url": "https://api.github.com/users/gballet/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "gballet",
      "id": 3272758,
      "node_id": "MDQ6VXNlcjMyNzI3NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3272758?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gballet",
      "html_url": "https://github.com/gballet",
      "followers_url": "https://api.github.com/users/gballet/followers",
      "following_url": "https://api.github.com/users/gballet/following{/other_user}",
      "gists_url": "https://api.github.com/users/gballet/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gballet/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gballet/subscriptions",
      "organizations_url": "https://api.github.com/users/gballet/orgs",
      "repos_url": "https://api.github.com/users/gballet/repos",
      "events_url": "https://api.github.com/users/gballet/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gballet/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 8,
  "created_at": "2018-02-03T17:50:41Z",
  "updated_at": "2020-08-31T15:00:30Z",
  "closed_at": "2020-08-31T14:50:07Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "#### System information\r\n\r\nGeth version: `Geth/v1.7.3-stable-4bb3c89d/linux-amd64/go1.9`\r\nOS & Version: Linux\r\n\r\n#### Expected behaviour\r\n\r\nDocumentation at [Whisper Usage](https://github.com/ethereum/go-ethereum/wiki/Whisper-Usage) wiki page does not match the api in geth ssh command with Whisper 5.\r\n\r\nConcretely, in the [Receive Asymmetrically Encrypted Messages use case](https://github.com/ethereum/go-ethereum/wiki/Whisper-Usage#receive-asymmetrically-encrypted-messages) creating a message filter is described as:\r\n `f = shh.NewMessageFilter({pubKey: id})\r\n\"e6b79234d9deba9f0d963e0367fd58f7e34a13dfe9b45c3876efb1dd19f9633a\"`\r\n\r\nand then retrieving messages as:\r\n`shh.getFilterMessages(f)`\r\n\r\n#### Actual behavior\r\nCreating a filter has a [different signature](https://github.com/ethereum/web3.js/blob/develop/lib/web3/methods/shh.js): it expects a callback function and does not return an id but a Filter object. Also notice the method name begins with lower case.\r\n```\r\n> shh.newMessageFilter({pubkey: id}, function(err,data){})\r\n{\r\n  callbacks: [],\r\n  filterId: null,\r\n  formatter: null,\r\n  getLogsCallbacks: [],\r\n  implementation: {\r\n    getLogs: function(),\r\n    newFilter: function(),\r\n    poll: function(),\r\n    uninstallFilter: function()\r\n  },\r\n  options: {\r\n    pubkey: \"1daea3d4b5e8e3a4945074b38fbdf400a8324398b64e5109f5b14d1e08f2b9fb\"\r\n  },\r\n  pollFilters: [],\r\n  requestManager: {\r\n    polls: {},\r\n    provider: {\r\n      newAccount: function(),\r\n      openWallet: function(),\r\n      send: function github.com/ethereum/go-ethereum/console.(*bridge).Send-fm(),\r\n      sendAsync: function github.com/ethereum/go-ethereum/console.(*bridge).Send-fm(),\r\n      sign: function(),\r\n      unlockAccount: function()\r\n    },\r\n    timeout: null,\r\n    poll: function(),\r\n    reset: function(keepIsSyncing),\r\n    send: function(data),\r\n    sendAsync: function(data, callback),\r\n    sendBatch: function(data, callback),\r\n    setProvider: function(p),\r\n    startPolling: function(data, pollId, callback, uninstall),\r\n    stopPolling: function(pollId)\r\n  },\r\n  get: function(callback),\r\n  stopWatching: function(callback),\r\n  watch: function(callback)\r\n}\r\n````\r\nAdditionally, there is no *getFilterMessages* method, but  a *watch* method in the Filter object\r\n",
  "closed_by": {
    "login": "gballet",
    "id": 3272758,
    "node_id": "MDQ6VXNlcjMyNzI3NTg=",
    "avatar_url": "https://avatars.githubusercontent.com/u/3272758?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/gballet",
    "html_url": "https://github.com/gballet",
    "followers_url": "https://api.github.com/users/gballet/followers",
    "following_url": "https://api.github.com/users/gballet/following{/other_user}",
    "gists_url": "https://api.github.com/users/gballet/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/gballet/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gballet/subscriptions",
    "organizations_url": "https://api.github.com/users/gballet/orgs",
    "repos_url": "https://api.github.com/users/gballet/repos",
    "events_url": "https://api.github.com/users/gballet/events{/privacy}",
    "received_events_url": "https://api.github.com/users/gballet/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/16013/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/16013/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/364639296",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/16013#issuecomment-364639296",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/16013",
    "id": 364639296,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NDYzOTI5Ng==",
    "user": {
      "login": "pablochacin",
      "id": 720259,
      "node_id": "MDQ6VXNlcjcyMDI1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/720259?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pablochacin",
      "html_url": "https://github.com/pablochacin",
      "followers_url": "https://api.github.com/users/pablochacin/followers",
      "following_url": "https://api.github.com/users/pablochacin/following{/other_user}",
      "gists_url": "https://api.github.com/users/pablochacin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pablochacin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pablochacin/subscriptions",
      "organizations_url": "https://api.github.com/users/pablochacin/orgs",
      "repos_url": "https://api.github.com/users/pablochacin/repos",
      "events_url": "https://api.github.com/users/pablochacin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pablochacin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-10T09:40:47Z",
    "updated_at": "2018-02-10T09:40:47Z",
    "author_association": "NONE",
    "body": "As I haven't found yet a way to contribute the update to the documentation (wiki is not editable) below there is an updated version of the Usage Page",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/364639296/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/364639309",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/16013#issuecomment-364639309",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/16013",
    "id": 364639309,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NDYzOTMwOQ==",
    "user": {
      "login": "pablochacin",
      "id": 720259,
      "node_id": "MDQ6VXNlcjcyMDI1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/720259?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pablochacin",
      "html_url": "https://github.com/pablochacin",
      "followers_url": "https://api.github.com/users/pablochacin/followers",
      "following_url": "https://api.github.com/users/pablochacin/following{/other_user}",
      "gists_url": "https://api.github.com/users/pablochacin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pablochacin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pablochacin/subscriptions",
      "organizations_url": "https://api.github.com/users/pablochacin/orgs",
      "repos_url": "https://api.github.com/users/pablochacin/repos",
      "events_url": "https://api.github.com/users/pablochacin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pablochacin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-10T09:41:01Z",
    "updated_at": "2018-02-10T09:41:01Z",
    "author_association": "NONE",
    "body": "## Whisper API Overview\r\n\r\nThis is a summary of all functions that are available to the ÐApp developpers.\r\n\r\n### version\r\n\r\nReturns the Whisper version this node offers.\r\n\r\ngeth console call:\r\n\r\n<pre><code> > shh.version\r\n</code></pre>\r\n\r\n### info\r\n\r\nReturns the Whisper statistics for diagnostics.\r\n\r\ngeth console call:\r\n\r\n<pre><code> > shh.info\r\n</code></pre>\r\n\r\n### setMaxMessageSize\r\n\r\nSets the maximal message length allowed by this node.\r\n\r\ngeth console call:\r\n\r\n<pre><code> > shh.setMaxMessageSize(999999)\r\n</code></pre>\r\n\r\n### setMinPow\r\n\r\nSets the minimal PoW required by this node.\r\n\r\ngeth console call:\r\n\r\n<pre><code> > shh.setMinPoW(2.12)\r\n</code></pre>\r\n\r\n### markTrustedPeer\r\n\r\nMarks specific peer trusted, which will allow it to send historic (expired) messages.\r\n\r\ngeth console call:\r\n\r\n<pre><code> > shh.markTrustedPeer(\"enode://d25474361659861e9e651bc728a17e807a3359ca0d344afd544ed0f11a31faecaf4d74b55db53c6670fd624f08d5c79adfc8da5dd4a11b9213db49a3b750845e@52.178.209.125:30379\")\r\n\r\n</code></pre>\r\n\r\n### hasKeyPair\r\n\r\nChecks if the whisper node is configured with the private key of the specified public pair.\r\n\r\ngeth console call:\r\n\r\n<pre><code> > shh.hasKeyPair(\"5e57b9ffc2387e18636e0a3d0c56b023264c16e78a2adcba1303cefc685e610f\")\r\n</code></pre>\r\n\r\n### deleteKeyPair\r\n\r\nDeletes the specifies key if it exists.\r\n\r\ngeth console call:\r\n\r\n<pre><code> > shh.deleteKeyPair(\"5e57b9ffc2387e18636e0a3d0c56b023264c16e78a2adcba1303cefc685e610f\")\r\n</code></pre>\r\n\r\n### newKeyPair\r\n\r\nGenerates a new cryptographic identity for the client, and injects it into the known identities for message decryption.\r\n\r\ngeth console call:\r\n\r\n<pre><code> > shh.newKeyPair()\r\n</code></pre>\r\n\r\n### getPublicKey\r\n\r\nReturns the public key for identity id.\r\n\r\ngeth console call:\r\n\r\n<pre><code> > shh.getPublicKey(\"86e658cbc6da63120b79b5eec0c67d5dcfb6865a8f983eff08932477282b77bb\")\r\n</code></pre>\r\n\r\n### getPrivateKey\r\n\r\nReturns the private key for identity id.\r\n\r\ngeth console call:\r\n\r\n<pre><code> > shh.getPrivateKey(\"86e658cbc6da63120b79b5eec0c67d5dcfb6865a8f983eff08932477282b77bb\")\r\n</code></pre>\r\n\r\n### newSymKey\r\n\r\nGenerates a random symmetric key and stores it under id, which is then returned. Will be used in the future for session key exchange.\r\n\r\ngeth console call:\r\n\r\n<pre><code> > shh.newSymKey()\r\n</code></pre>\r\n\r\n### addSymKey\r\n\r\nStores the key, and returns its id.\r\n\r\ngeth console call:\r\n\r\n<pre><code> > shh.addSymKey(\"0xf6dcf21ed6a17bd78d8c4c63195ab997b3b65ea683705501eae82d32667adc92\")\r\n</code></pre>\r\n\r\n### generateSymKeyFromPassword\r\n\r\nGenerates the key from password, stores it, and returns its id.\r\n\r\ngeth console call:\r\n\r\n<pre><code> > shh.generateSymKeyFromPassword(\"test\")\r\n</code></pre>\r\n\r\n### getSymKey\r\n\r\nReturns the symmetric key associated with the given id.\r\n\r\ngeth console call:\r\n\r\n<pre><code> > shh.getSymKey(\"f6dcf21ed6a17bd78d8c4c63195ab997b3b65ea683705501eae82d32667adc92\")\r\n</code></pre>\r\n\r\n### hasSymKey\r\n\r\nReturns true if there is a key associated with the name string. Otherwise, returns false.\r\n\r\ngeth console call:\r\n\r\n<pre><code> > shh.hasSymKey(\"f6dcf21ed6a17bd78d8c4c63195ab997b3b65ea683705501eae82d32667adc92\")\r\n</code></pre>\r\n\r\n### deleteSymKey\r\n\r\nDeletes the key associated with the name string if it exists.\r\n\r\ngeth console call:\r\n\r\n<pre><code> > shh.deleteSymKey(\"f6dcf21ed6a17bd78d8c4c63195ab997b3b65ea683705501eae82d32667adc92\")\r\n</code></pre>\r\n\r\n\r\n### newMessageFilter\r\n\r\nCreates and registers a new message filter to watch for inbound whisper messages. Filtered messages are sent to a callback function. Errors when creating the filter are sent to an error callback function.\r\nReturns the newly created Filter.\r\n\r\ngeth console call:\r\n\r\n<pre><code> > shh.newMessageFilter({pow: 12.3, topics: ['0x5a4ea131', '0x11223344'], privateKeyId: 'b874f3bbaf031214a567485b703a025cec27d26b2c4457d6b139e56ad8734cea', sig: '0x048229fb947363cf13bb9f9532e124f08840cd6287ecae6b537cda2947ec2b23dbdc3a07bdf7cd2bfb288c25c4d0d0461d91c719da736a22b7bebbcf912298d1e6'}, function(error,message){}, function(error){})\r\n{\r\n  callbacks: [function(error,message)],\r\n  filterId: \"3d7ade7b5226bd19187dc1d18f2e589d548ac4f28a18027096e3200363090df4\",\r\n\r\n  ... // fields omitted for brevity\r\n\r\n  },\r\n  options: {\r\n    privateKeyID: \"15b0b3eb32164fbfdef94af8cea21c934170a77c31eaeda67331b2ab2b962af2\"\r\n  },\r\n\r\n  ...  // fields omitted for brevity\r\n\r\n  get: function(callback),\r\n  stopWatching: function(callback),\r\n  watch: function(callback)\r\n}\r\n</code></pre>\r\n\r\nThe argument of the fiter function is a JSON object with the following format:\r\n\r\n\tsymKeyID    string\r\n\tpublicKeyId string\r\n\tsig         string\r\n\tminPoW      float64\r\n\ttopics      [][]byte\r\n\tallowP2P    bool\r\n\r\nsymKeyID: When using symmetric key encryption, holds the symmetric key ID.\r\n\r\npublicKeyId: When using asymmetric key encryption, holds the id of the key pair.\r\n\r\nsig: Public key of the signature.\r\n\r\nminPoW: Minimal PoW requirement for incoming messages.\r\n\r\ntopics: Array of possible topics (or partial topics).\r\n\r\nallowP2P: Indicates if this filter allows processing of direct peer-to-peer messages (which are not to be forwarded any further, because they might be expired). This might be the case in some very rare cases, e.g. if you intend to communicate to MailServers, etc.\r\n\r\n### stopWatching\r\n\r\nRemoves a callback function specified as watcher and prevents further calls to this function.\r\n\r\ngeth console call:\r\n\r\n<pre><code> > f.stopWatching(function(error,messages){})\r\ntrue\r\n</code></pre>\r\n\r\n### Watch\r\n\r\nAdds additional watchers to a filter\r\n\r\ngeth console call:\r\n\r\n<pre><code>> f.watch(function(error,message){})\r\n{\r\n  callbacks: [function(err,data), function(err,data)],\r\n  filterId: \"3d7ade7b5226bd19187dc1d18f2e589d548ac4f28a18027096e3200363090df4\",\r\n  formatter: null,\r\n  getLogsCallbacks: [],\r\n\r\n...   rest of filter fields as before\r\n}\r\n</code></pre>\r\n\r\n### Post\r\n\r\nCreates a whisper message and injects it into the network for distribution.\r\nPlease see parameter description below.\r\n\r\ngeth console call:\r\n\r\n<pre><code> > shh.post({ttl: 7, topic: '0x07678231', powTarget: 2.01, powTime: 2, payload: '0x68656c6c6f', pubKey: '0x048229fb947363cf13bb9f9532e124f08840cd6287ecae6b537cda2947ec2b23dbdc3a07bdf7cd2bfb288c25c4d0d0461d91c719da736a22b7bebbcf912298d1e6'})\r\n</code></pre>\r\n\r\nThe argument of Post function is a JSON object with the following format:\r\n\r\n\tsymKeyID   string\r\n\tpubKey     []byte\r\n\tsig        string\r\n\tttl        uint32\r\n\ttopic      [4]byte\r\n\tpadding    []byte\r\n\tpayload    []byte\r\n\tpowTime    uint32\r\n\tpowTarget  float64\r\n\ttargetPeer string\r\n\t\r\nsymKeyID: When using symmetric key encryption, holds the symmetric key ID.\r\n\r\npubKey: When using asymmetric key encryption, holds the public key.\r\n\r\nttl: Time-to-live in seconds.\r\n\r\nsig: ID of the signing key.\r\n\r\ntopic: Message topic (four bytes of arbitrary data).\r\n\r\npayload: Payload to be encrypted.\r\n\r\npadding: Optional padding (byte array of arbitrary length).\r\n\r\npowTime: Maximal time in seconds to be spent on prrof of work.\r\n\r\npowTarget: Minimal PoW target required for this message.\r\n\r\ntargetPeer: Optional peer ID (for peer-to-peer message only).\r\n\r\n## Usage\r\n\r\nEvery node should treat all the messages equally, including those generated by the node itself. Therefore most users might subscribe for certain messages before sending their own. After subscription is complete, users might call GetMessages if they want to intercept the floating messages that match a the newly installed subscription filter. It might be necessary to install the encryption keys prior to subscription.\r\n\r\n### Testing the Whisper node (geth) on private network\r\n\r\nIn order to connect to private network you need to know the enode of the bootstrap node. As of today (April 28, 2017) we have a test node with the following enode:\r\nenode://d25474361659861e9e651bc728a17e807a3359ca0d344afd544ed0f11a31faecaf4d74b55db53c6670fd624f08d5c79adfc8da5dd4a11b9213db49a3b750845e@52.178.209.125:30379\r\n\r\nAlternatively, you can run the diagnostic tool (wnode) as bootstrap node:\r\n\r\n\t> wnode -forwarder -standalone\r\n\t\r\nMore info on wnode tool you can find in a separate document [here](https://github.com/ethereum/go-ethereum/wiki/Whisper).\r\n\r\nStart your geth with the following parameters:\r\n\r\n\t> geth --shh --testnet --nodiscover console\r\n\t\r\nThen connect to the bootstrap node, e.g.:\r\n\tadmin.addPeer(\"enode://0f7f440d473c92e3734e5b93e30eb131f5a065a3673b0d191481267e777e508884ae6bd9d1aca3b995bc5044917248009877488c30f7fdd7c2f63823e4dd55dc@127.0.0.1:30379\")\r\n\r\nNow you can start playing with Whisper using geth.\r\n\r\n### Use Cases\r\n\r\nBelow you will find several examples which illustrate the sequence of events in different scenarios. \r\nEach geth console command is followed by the corresponding result output, if it is relevant.\r\n\r\n#### Receive Asymmetrically Encrypted Messages\r\n\r\nGenerate a key pair, and save its ID.\r\n\r\n\t> id = shh.newKeyPair()\r\n\t\"46af9c31a30c2eeb4e6fbb5d02a0b64b62d147e576f1503372a02d4f80ebb4e1\"\r\n\r\nRetrieve and save your public key.\r\n\r\n\t> shh.getPublicKey('46af9c31a30c2eeb4e6fbb5d02a0b64b62d147e576f1503372a02d4f80ebb4e1')\r\n\t\"0x048d7938066b4fb9465879c837762a767648e9473e0a6a470d719f71024d4a59450b2151b303b5f90ea35fd2e8cd91968783da17add12973e9867c626750bae3e9\"\r\n\r\nSubcribe to messages, encrypted with certain public key.\r\nIn this case we create the simplest possible subscription:\r\n\r\n<pre><code>> cb = function(error, messages){console.log(JSON.stringify(messages))}\r\n> f = shh.newMessageFilter({privateKeyId: id}, function(error, messages){})\r\n{\r\n  callbacks: [function(err,data)],\r\n  filterId: \"3d7ade7b5226bd19187dc1d18f2e589d548ac4f28a18027096e3200363090df4\",\r\n  formatter: null,\r\n  getLogsCallbacks: [],\r\n  implementation: {\r\n    getLogs: function(),\r\n    newFilter: function(),\r\n    poll: function(),\r\n    uninstallFilter: function(\r\n  },\r\n  options: {\r\n    privateKeyID: \"46af9c31a30c2eeb4e6fbb5d02a0b64b62d147e576f1503372a02d4f80ebb4e1\"\r\n  },\r\n\r\n  ,,,\r\n}\r\n</code></pre>\r\n\r\nAdvertise your public key.\r\nIn this case: \r\n0x048d7938066b4fb9465879c837762a767648e9473e0a6a470d719f71024d4a59450b2151b303b5f90ea35fd2e8cd91968783da17add12973e9867c626750bae3e9\r\n\r\n\r\nThe callback function you specified as watcher for the filfer will receive the messages:\r\n\r\n\t[{\r\n\t\thash: \"0x1426abdaefe906c10d2e94a8bdb85b6626cb5e9c3c94ff36667903811836e7a1\",\r\n\t\tpadding: \"0x52fdfc072182654f163f5f0f9a621d729566c74d10037c4d7bbb0407d1e2c64981855ad8681d0d86d1e91e00167939cb6694d2c422acd208a0072939487f6999eb9d18a44784045d87f3c67cf22746e995af5a25367951baa2ff6cd471c483f15fb90badb37c5821b6d95526a41a9504680b4e7c8b76\",\r\n\t\tpayload: \"0x7777777777777777\",\r\n\t\tpow: 4.4667393675027265,\r\n\t\treceipientPublicKey: \"0x048d7938066b4fb9465879c837762a767648e9473e0a6a470d719f71024d4a59450b2151b303b5f90ea35fd2e8cd91968783da17add12973e9867c626750bae3e9\",\r\n\t\tsig: \"\",\r\n\t\ttimestamp: 1492885562,\r\n\t\ttopic: \"0x00000000\",\r\n\t\tttl: 7\r\n\t}]\r\n\r\n#### Send (asymmetric encryption)\r\n\r\n\t> shh.post({ttl: 7, powTarget: 2.5 powTime: 2, payload: '0x7777777777777777', pubKey: '0x048d7938066b4fb9465879c837762a767648e9473e0a6a470d719f71024d4a59450b2151b303b5f90ea35fd2e8cd91968783da17add12973e9867c626750bae3e9'})\r\n\r\nIn this message neither Topic nor Signature is set. Payload is equivalent to an ASCII string \"wwwwwwww\".\r\n\r\n#### Receive Symmetrically Encrypted Messages\r\n\r\nIn order to engage in symmetrically encrypted communication, both the parties must share the same symmetric key. In this example we assume that the parties have already exchanged the password and the Topic via a secure communication channel.\r\n\r\nDerive symmetric key from the password, and save its ID.\r\n\r\n\t> id = shh.generateSymKeyFromPassword('test')\r\n\t\"de6bc568f8601fac6ff2085d17c02754348ddbf4122ab1bd543a40c68d3a45fe\"\r\n\r\nSubcribe to messages, encrypted with this symmetric key.\r\n\r\n        > cb = function(error, messages){console.log(JSON.stringify(messages))}\r\n\t> f = shh.newMessageFilter({topics: ['0x07678231'], symKeyID: id}, cb)\r\n\t\"07b3ab8986aa321046010f093c8ab2ba4bd441e8435f58c7c75d5398e96faf42\"\r\n\r\nThe callback function will receive the messafes:\r\n\r\n\t[{\r\n\t\thash: \"0x300b946c074e2b408b461ad685efba3686dcee90d37cdb45f975c91b2ee23489\",\r\n\t\tpadding: \"0xcbe0255aa5b7d44bec40f84c892b9bffd43629b0223beea5f4f74391f445d15afd4294040374f6924b98cbf8713f8d962d7c8d019192c24224e2cafccae3a61fb586b14323a6bc8f9e7df1d929333ff993933bea6f5b3af6de0374366c4719e43a1b067d89bc7f01f1f573981659a44ff17a4c7215a3b539eb\",\r\n\t\tpayload: \"0x68656c6c6f\",\r\n\t\tpow: 6.19198790627362,\r\n\t\treceipientPublicKey: \"\",\r\n\t\tsig: \"0x048d7938066b4fb9465879c837762a767648e9473e0a6a470d719f71024d4a59450b2151b303b5f90ea35fd2e8cd91968783da17add12973e9867c626750bae3e9\",\r\n\t\ttimestamp: 1492888296,\r\n\t\ttopic: \"0x07678231\",\r\n\t\tttl: 7\r\n\t}]\r\n\r\n#### Send (symmetric encryption)\r\n\r\n\t> shh.post({ttl: 7, topic: '0x07678231', powTarget: 2.01, powTime: 2, payload: '0x68656c6c6f', symKeyID: id})\r\n\r\nor\r\n\r\n\t> shh.post({ttl: 7, topic: '0x07678231', powTarget: 2.01, powTime: 2, payload: '0x68656c6c6f', symKeyID: 'de6bc568f8601fac6ff2085d17c02754348ddbf4122ab1bd543a40c68d3a45fe'})\r\n\t\r\nIf you want to sign messages you should first generate the signing key (same as asymmetric key)\r\n\r\n\t> s = shh.newKeyPair()\r\n\t\"46af9c31a30c2eeb4e6fbb5d02a0b64b62d147e576f1503372a02d4f80ebb4e1\"\r\n\t\r\nand then add another parameter to the post \r\n\r\n\t> shh.post({sig: s, ttl: 7, topic: '0x07678231', powTarget: 2.01, powTime: 2, payload: '0x68656c6c6f', symKeyID: id})\r\n\r\n#### Engage in a Chat with One-Time Session Key (for plausible deniability)\r\n\r\nGenerate symmetric key, and save its ID.\r\n\r\n\t> id = shh.newSymKey()\r\n\t\"ee3ece1e35c0d3e5bd2e878dd66bf0c25b7e10df3d6b092591adca69189a6c32\"\r\n\r\nRetrieve the newly created symmetric key.\r\n\r\n\t> shh.getSymKey(id)\r\n\t\"3f4e735996b400637b3530d41d8bf8e0cbeafaf299aa0ad408c579569fd0af8c\"\r\n\r\nSend the raw key and Topic to you peer via a secure communication channel.\r\nThe peer should install the raw key:\r\n\r\n\t> id = shh.addSymKey('0x3f4e735996b400637b3530d41d8bf8e0cbeafaf299aa0ad408c579569fd0af8c')\r\n\t\"be14387971d31c6a2997dac5062978294f52a145e5a0a0a2caa4b37dbec9bb13\"\r\n\r\nBoth peers (or even multiple participants) subscribe to messages, encrypted with certain key and topic.\r\n\r\n\t> f = shh.newMessageFilter({type: topics: ['0x07678231'],  symKeyID: id}, function(error, messages){ }))\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/364639309/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/399451999",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/16013#issuecomment-399451999",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/16013",
    "id": 399451999,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5OTQ1MTk5OQ==",
    "user": {
      "login": "avatar-lavventura",
      "id": 18537398,
      "node_id": "MDQ6VXNlcjE4NTM3Mzk4",
      "avatar_url": "https://avatars.githubusercontent.com/u/18537398?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/avatar-lavventura",
      "html_url": "https://github.com/avatar-lavventura",
      "followers_url": "https://api.github.com/users/avatar-lavventura/followers",
      "following_url": "https://api.github.com/users/avatar-lavventura/following{/other_user}",
      "gists_url": "https://api.github.com/users/avatar-lavventura/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/avatar-lavventura/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/avatar-lavventura/subscriptions",
      "organizations_url": "https://api.github.com/users/avatar-lavventura/orgs",
      "repos_url": "https://api.github.com/users/avatar-lavventura/repos",
      "events_url": "https://api.github.com/users/avatar-lavventura/events{/privacy}",
      "received_events_url": "https://api.github.com/users/avatar-lavventura/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-22T13:59:28Z",
    "updated_at": "2018-06-22T14:20:22Z",
    "author_association": "NONE",
    "body": "@pablochacin How could I filter messages that sent when receiver's `geth` is closed.  `shh_getFilterMessages` does not exist any more so I was not able to figure it out .\r\n\r\nFor example messages seen in the memory. My filter only catches new coming messages but I cannot get messages that sent before I start my newMessageFilter.\r\n\r\n```\r\nshh.info\r\n{\r\n  maxMessageSize: 1048576,\r\n  memory: 2730,\r\n  messages: 0,\r\n  minPow: 0.2\r\n}\r\n```\r\n\r\n---------------\r\n\r\nExample of `shh.newMessageFilter`.\r\n```\r\nweb3.shh.newMessageFilter(\r\n        {privateKeyID:kId}, \r\n        function(err, res) {console.log(web3.toUtf8(res.payload))});\r\n```\r\n\r\nPlease also see for more detail information: https://ethereum.stackexchange.com/questions/51859/whisper-protocol-how-could-i-get-received-messages-when-geth-was-offline",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/399451999/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/403222922",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/16013#issuecomment-403222922",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/16013",
    "id": 403222922,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMzIyMjkyMg==",
    "user": {
      "login": "randomshinichi",
      "id": 9956122,
      "node_id": "MDQ6VXNlcjk5NTYxMjI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9956122?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/randomshinichi",
      "html_url": "https://github.com/randomshinichi",
      "followers_url": "https://api.github.com/users/randomshinichi/followers",
      "following_url": "https://api.github.com/users/randomshinichi/following{/other_user}",
      "gists_url": "https://api.github.com/users/randomshinichi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/randomshinichi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/randomshinichi/subscriptions",
      "organizations_url": "https://api.github.com/users/randomshinichi/orgs",
      "repos_url": "https://api.github.com/users/randomshinichi/repos",
      "events_url": "https://api.github.com/users/randomshinichi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/randomshinichi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-07T15:21:28Z",
    "updated_at": "2018-07-07T15:21:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "@pablochacin \r\nIn Use Cases, receive asymmetrically encrypted messages:\r\nthe newMessageFilter does not use the defined cb\r\n```\r\n> cb = function(error, messages){console.log(JSON.stringify(messages))}\r\n> f = shh.newMessageFilter({privateKeyId: id}, cb)\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/403222922/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/532140120",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/16013#issuecomment-532140120",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/16013",
    "id": 532140120,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzMjE0MDEyMA==",
    "user": {
      "login": "holiman",
      "id": 142290,
      "node_id": "MDQ6VXNlcjE0MjI5MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/142290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/holiman",
      "html_url": "https://github.com/holiman",
      "followers_url": "https://api.github.com/users/holiman/followers",
      "following_url": "https://api.github.com/users/holiman/following{/other_user}",
      "gists_url": "https://api.github.com/users/holiman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/holiman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/holiman/subscriptions",
      "organizations_url": "https://api.github.com/users/holiman/orgs",
      "repos_url": "https://api.github.com/users/holiman/repos",
      "events_url": "https://api.github.com/users/holiman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/holiman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-09-17T09:26:39Z",
    "updated_at": "2019-09-17T09:26:39Z",
    "author_association": "MEMBER",
    "body": "Ping @gballet ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/532140120/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/532159863",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/16013#issuecomment-532159863",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/16013",
    "id": 532159863,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzMjE1OTg2Mw==",
    "user": {
      "login": "gballet",
      "id": 3272758,
      "node_id": "MDQ6VXNlcjMyNzI3NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3272758?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gballet",
      "html_url": "https://github.com/gballet",
      "followers_url": "https://api.github.com/users/gballet/followers",
      "following_url": "https://api.github.com/users/gballet/following{/other_user}",
      "gists_url": "https://api.github.com/users/gballet/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gballet/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gballet/subscriptions",
      "organizations_url": "https://api.github.com/users/gballet/orgs",
      "repos_url": "https://api.github.com/users/gballet/repos",
      "events_url": "https://api.github.com/users/gballet/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gballet/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-09-17T10:22:49Z",
    "updated_at": "2019-09-17T10:22:49Z",
    "author_association": "MEMBER",
    "body": "Thanks for the contribution. The thing is, there are discrepancies between what the web3 v1.x API does and what the older one present in the console does. The documentation is correct, in that it covers the newer API. I have an outstanding PR that will introduce a more modern javascript interpreter. I will take care of this issue after this is over.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/532159863/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/683827927",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/16013#issuecomment-683827927",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/16013",
    "id": 683827927,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4MzgyNzkyNw==",
    "user": {
      "login": "gballet",
      "id": 3272758,
      "node_id": "MDQ6VXNlcjMyNzI3NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3272758?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gballet",
      "html_url": "https://github.com/gballet",
      "followers_url": "https://api.github.com/users/gballet/followers",
      "following_url": "https://api.github.com/users/gballet/following{/other_user}",
      "gists_url": "https://api.github.com/users/gballet/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gballet/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gballet/subscriptions",
      "organizations_url": "https://api.github.com/users/gballet/orgs",
      "repos_url": "https://api.github.com/users/gballet/repos",
      "events_url": "https://api.github.com/users/gballet/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gballet/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-31T14:50:07Z",
    "updated_at": "2020-08-31T14:50:07Z",
    "author_association": "MEMBER",
    "body": "Switching to goja has addressed only some of the requirements needed to use the 1.x api in the `geth` console.\r\n\r\nMeanwhile, Whisper support is being discontinued in `geth` and the code base is moved to [its own repository](github.com/ethereum/whisper). Whisper will therefore no longer be accessible from the console, and only the 1.x api will be able to interact with it through the RPC API exposed by `wnode`. I'm closing this issue as it is no longer relevant.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/683827927/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/683834334",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/16013#issuecomment-683834334",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/16013",
    "id": 683834334,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4MzgzNDMzNA==",
    "user": {
      "login": "avatar-lavventura",
      "id": 18537398,
      "node_id": "MDQ6VXNlcjE4NTM3Mzk4",
      "avatar_url": "https://avatars.githubusercontent.com/u/18537398?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/avatar-lavventura",
      "html_url": "https://github.com/avatar-lavventura",
      "followers_url": "https://api.github.com/users/avatar-lavventura/followers",
      "following_url": "https://api.github.com/users/avatar-lavventura/following{/other_user}",
      "gists_url": "https://api.github.com/users/avatar-lavventura/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/avatar-lavventura/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/avatar-lavventura/subscriptions",
      "organizations_url": "https://api.github.com/users/avatar-lavventura/orgs",
      "repos_url": "https://api.github.com/users/avatar-lavventura/repos",
      "events_url": "https://api.github.com/users/avatar-lavventura/events{/privacy}",
      "received_events_url": "https://api.github.com/users/avatar-lavventura/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-31T15:00:30Z",
    "updated_at": "2020-08-31T15:00:30Z",
    "author_association": "NONE",
    "body": "=> ` its own repository.` link is dead . Will there in any `Python` API? \r\n=> Can we still use the latest version of `Whisper`along with the `geth` that has the latest version before `goja `? @gballet ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/683834334/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
