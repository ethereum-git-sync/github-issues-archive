{
  "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/26199",
  "repository_url": "https://api.github.com/repos/ethereum/go-ethereum",
  "labels_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/26199/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/26199/comments",
  "events_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/26199/events",
  "html_url": "https://github.com/ethereum/go-ethereum/issues/26199",
  "id": 1452774315,
  "node_id": "I_kwDOAOvK985Wl5Or",
  "number": 26199,
  "title": "Inconsistent hashes for DynamicFeeTx transactions (core/types)",
  "user": {
    "login": "ArnaudBrousseau",
    "id": 208469,
    "node_id": "MDQ6VXNlcjIwODQ2OQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/208469?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ArnaudBrousseau",
    "html_url": "https://github.com/ArnaudBrousseau",
    "followers_url": "https://api.github.com/users/ArnaudBrousseau/followers",
    "following_url": "https://api.github.com/users/ArnaudBrousseau/following{/other_user}",
    "gists_url": "https://api.github.com/users/ArnaudBrousseau/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ArnaudBrousseau/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ArnaudBrousseau/subscriptions",
    "organizations_url": "https://api.github.com/users/ArnaudBrousseau/orgs",
    "repos_url": "https://api.github.com/users/ArnaudBrousseau/repos",
    "events_url": "https://api.github.com/users/ArnaudBrousseau/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ArnaudBrousseau/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 72233650,
      "node_id": "MDU6TGFiZWw3MjIzMzY1MA==",
      "url": "https://api.github.com/repos/ethereum/go-ethereum/labels/type:bug",
      "name": "type:bug",
      "color": "FF5E5E",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 3,
  "created_at": "2022-11-17T06:12:57Z",
  "updated_at": "2022-11-17T15:19:20Z",
  "closed_at": "2022-11-17T08:24:01Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "#### System information\r\nOS & Version: OSX\r\nCommit hash : `add337e0f7bad02f3cf535c66cd31f252b0b5c99` (latest master)\r\n\r\n#### In short, what's wrong?\r\nWhen attempting to compute a tx hash for `DynamicFeeTx` transactions (for signing purposes), the two methods available (transaction.Hash, signer.Hash(tx)) aren't yielding the same hashes. The (subtle) difference(s) in the hashes' pre-images makes me believe this is a bug rather than intended behavior, but please let me know if that's not the case!\r\n\r\n#### Steps to reproduce\r\n\r\nI've written a small failing test to capture this:\r\n```diff\r\ndiff --git a/core/types/transaction_test.go b/core/types/transaction_test.go\r\nindex 4b96c6b91..bc939d2eb 100644\r\n--- a/core/types/transaction_test.go\r\n+++ b/core/types/transaction_test.go\r\n@@ -532,6 +532,31 @@ func assertEqual(orig *Transaction, cpy *Transaction) error {\r\n \treturn nil\r\n }\r\n \r\n+func TestHashConsistencyForDynamicFeeTx(t *testing.T) {\r\n+\tto := common.HexToAddress(\"0x40f008f4c17075EFcA092aE650655f6693AECEd0\")\r\n+\r\n+\ttx := NewTx(&DynamicFeeTx{\r\n+\t\tChainID:   big.NewInt(1),\r\n+\t\tNonce:     0,\r\n+\t\tGasTipCap: big.NewInt(1000000000),\r\n+\t\tGasFeeCap: big.NewInt(1000000000),\r\n+\t\tGas:       21000,\r\n+\t\tTo:        &to,\r\n+\t\tValue:     big.NewInt(50000000000000000),\r\n+\t})\r\n+\r\n+\tsigner := NewLondonSigner(tx.ChainId())\r\n+\tsignerHash := fmt.Sprintf(\"%02x\", signer.Hash(tx).Bytes())\r\n+\ttxHash := fmt.Sprintf(\"%02x\", tx.Hash().Bytes())\r\n+\r\n+\tif signerHash != txHash {\r\n+\t\tt.Errorf(\"hashes do not match: signer.Hash(tx) (%s) != tx.Hash() (%s)\", signerHash, txHash)\r\n+\t}\r\n+\r\n+\t// FIXME! This test is failing with:\r\n+\t// hashes do not match: signer.Hash(tx) (a1b1869ac0c5e3b26d98f2aaf29e7d973d80bc71c6d3deb7550838e28d48d700) != tx.Hash() (66c7075fdbac0dcd08c9d8fc2d981fb4791702247d38d2d5f5a9a917a38089a6)\r\n+}\r\n+\r\n func TestTransactionSizes(t *testing.T) {\r\n \tsigner := NewLondonSigner(big.NewInt(123))\r\n \tkey, _ := crypto.HexToECDSA(\"b71c71a67e1177ad4e901695e1b4b9ee17ae16c6668d313eac2f96dbcda3f291\")\r\n```\r\n\r\n#### More details / speculation\r\nTaking the failing test output values as an example, we have:\r\n|        | `signer.Hash(tx)` | `tx.Hash()` |\r\n|---|----|----|\r\n| hash value | `a1b1869ac0c5e3b26d98f2aaf29e7d973d80bc71c6d3deb7550838e28d48d700` | `66c7075fdbac0dcd08c9d8fc2d981fb4791702247d38d2d5f5a9a917a38089a6` | \r\n| pre-image |  `02ee0180843b9aca00843b9aca008252089440f008f4c17075efca092ae650655f6693aeced087b1a2bc2ec5000080c0` | `02f10180843b9aca00843b9aca008252089440f008f4c17075efca092ae650655f6693aeced087b1a2bc2ec5000080c0808080` |\r\n| source | [londonSigner.Hash](https://github.com/ethereum/go-ethereum/blob/a007ab786cc0feaf304d767af9f4e3fc4eb79d72/core/types/transaction_signing.go#L220-L237) | [transaction.Hash](https://github.com/ethereum/go-ethereum/blob/c4a662176ec11b9d5718904ccefee753637ab377/core/types/transaction.go#L360-L373) |\r\n\r\n(to double-check the pre-images in the table above, head to https://emn178.github.io/online-tools/keccak_256.html)\r\n\r\nThe two differences in the hashes' pre-images are:\r\n* The tx hash pre-image ends with extra 3 bytes (\"808080\") -> I believe this encodes 3 extra signature-related values: r=0, s=0, v=0\r\n* tx hash starts with `02f1`, vs  `02ee` vs `02f1` -> explained by the above: `f1` = `ee` + 3 in hex (we have 3 extra values/bytes to RLP encode: r, s, and v)\r\n\r\nLast note: speculating, but I'd bet `signer.Hash(tx)` is the correct hash to use. The `tx.Hash()` pre-image seems fishy with the last 3 bytes (`808080`) encoding a non-existent signature.",
  "closed_by": {
    "login": "holiman",
    "id": 142290,
    "node_id": "MDQ6VXNlcjE0MjI5MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/142290?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/holiman",
    "html_url": "https://github.com/holiman",
    "followers_url": "https://api.github.com/users/holiman/followers",
    "following_url": "https://api.github.com/users/holiman/following{/other_user}",
    "gists_url": "https://api.github.com/users/holiman/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/holiman/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/holiman/subscriptions",
    "organizations_url": "https://api.github.com/users/holiman/orgs",
    "repos_url": "https://api.github.com/users/holiman/repos",
    "events_url": "https://api.github.com/users/holiman/events{/privacy}",
    "received_events_url": "https://api.github.com/users/holiman/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/26199/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/26199/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1318261146",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/26199#issuecomment-1318261146",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/26199",
    "id": 1318261146,
    "node_id": "IC_kwDOAOvK985OkxGa",
    "user": {
      "login": "holiman",
      "id": 142290,
      "node_id": "MDQ6VXNlcjE0MjI5MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/142290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/holiman",
      "html_url": "https://github.com/holiman",
      "followers_url": "https://api.github.com/users/holiman/followers",
      "following_url": "https://api.github.com/users/holiman/following{/other_user}",
      "gists_url": "https://api.github.com/users/holiman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/holiman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/holiman/subscriptions",
      "organizations_url": "https://api.github.com/users/holiman/orgs",
      "repos_url": "https://api.github.com/users/holiman/repos",
      "events_url": "https://api.github.com/users/holiman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/holiman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-17T08:24:01Z",
    "updated_at": "2022-11-17T08:24:19Z",
    "author_association": "MEMBER",
    "body": "This was an interesting case. \r\nMy repro\r\n```\r\nfunc TestFoo(t *testing.T) {\r\n\ttx := NewTx(&DynamicFeeTx{\r\n\t\tChainID:   big.NewInt(1),\r\n\t\tNonce:     0,\r\n\t\tGasTipCap: big.NewInt(100),\r\n\t\tGasFeeCap: big.NewInt(100),\r\n\t\tGas:       100,\r\n\t\tTo:        nil,\r\n\t\tValue:     big.NewInt(100),\r\n\t})\r\n\tsigner := NewLondonSigner(tx.ChainId())\r\n\tfmt.Printf(\"hash: %v\\n\", signer.Hash(tx))\r\n\tfmt.Printf(\"hash: %v\\n\", tx.Hash())\r\n}\r\n```\r\n\r\nSo, looking at what actually goes into the rlp-encoding of the hashes,\r\n```\r\nprefixedRlpHash 2 c90180646464806480c0\r\nhash: 0x1ddfb87615d4ad987d213a43adbcc61db1d0a46d00286588475cd9ed6294ca89\r\nprefixedRlpHash 2 cc0180646464806480c0808080\r\nhash: 0x52c70c2aedc3e19731cf46bc6390fc86cc8952b9e200c2f68446452d1f266296\r\n```\r\nSo the  `signer.Hash` uses `c90180646464806480c0`, the `tx.Hash` uses `cc0180646464806480c0808080`. \r\n\r\nLooking at the method docs for `signer.Hash` reveals: \r\n\r\n> Hash returns 'signature hash', i.e. the transaction hash that is signed by the\r\n> private key. This hash does not uniquely identify the transaction.\r\n\r\n\r\nThe hash _that is signed_ does not include the `v`, `r`, `s` - values, since those are what is added by the signing function. Whereas, the `tx.Hash` encompasses _all_ the fields, including the ones containing the signature. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1318261146/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1318777575",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/26199#issuecomment-1318777575",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/26199",
    "id": 1318777575,
    "node_id": "IC_kwDOAOvK985OmvLn",
    "user": {
      "login": "ArnaudBrousseau",
      "id": 208469,
      "node_id": "MDQ6VXNlcjIwODQ2OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/208469?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ArnaudBrousseau",
      "html_url": "https://github.com/ArnaudBrousseau",
      "followers_url": "https://api.github.com/users/ArnaudBrousseau/followers",
      "following_url": "https://api.github.com/users/ArnaudBrousseau/following{/other_user}",
      "gists_url": "https://api.github.com/users/ArnaudBrousseau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ArnaudBrousseau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ArnaudBrousseau/subscriptions",
      "organizations_url": "https://api.github.com/users/ArnaudBrousseau/orgs",
      "repos_url": "https://api.github.com/users/ArnaudBrousseau/repos",
      "events_url": "https://api.github.com/users/ArnaudBrousseau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ArnaudBrousseau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-17T15:10:08Z",
    "updated_at": "2022-11-17T15:10:08Z",
    "author_association": "NONE",
    "body": "@holiman thanks for looking into this! I agree with you: the hash of an unsigned transaction should not be based on a pre-image which includes `v`, `r`, `s`. The current APIs have too many sharp edges IMO:\r\n* `signer.Hash`: correct hash to be signed by a remote signer. _Signing this hash will result in a valid transaction!_ ✅ \r\n* `tx.Hash()`: incorrect from the POV of a remote signer. Is this hash useful for unsigned transactions? I can see the use case for a **signed** transaction, but for an unsigned transaction, it's weird to include nullified `r`, `s`, and `v` values in the RLP encoding used to compute the hash. _Signing this hash results in an invalid signature!_ 🔴 \r\n* `tx.MarshalBinary()`: also incorrect from the POV of a remote signer, since it yields the pre-image of `tx.Hash()` (`02cc0180646464806480c0808080` in your minimal repro). In other words, if I take this value, apply keccak256 on it, I get `tx.Hash()`, not `signer.Hash()`. _Signing this results in an invalid signature!_ 🔴 \r\n\r\nAssuming `tx.Hash()` and `tx.MarshalBinary()` have use-cases for unsigned payloads as-they-are (I'm being generous), I find myself missing a `signer.HashPreImage(...)` method. Something that yields `02c90180646464806480c0` (the payload to sign). That's precious for a remote signer (compared to a hash) because this payload can be decoded, and context information can be inferred from it (destination, amount for example)\r\n\r\nThe best I can come up with right now to get the \"payload to sign\" from an unsigned transaction:\r\n```\r\nfunc HashPreImage(unsignedTx *Transaction) {\r\n    innerRLP, _ := rlp.EncodeToBytes(\r\n        []interface{}{\r\n            tx.ChainId(),\r\n            tx.Nonce(),\r\n            tx.GasTipCap(),\r\n            tx.GasFeeCap(),\r\n            tx.Gas(),\r\n            tx.To(),\r\n            tx.Value(),\r\n            tx.Data(),\r\n            tx.AccessList(),\r\n        },\r\n    )\r\n    hashPreImage := []byte{tx.Type()}\r\n    hashPreImage = append(hashPreImage, innerRLP...)\r\n    return hashPreImage\r\n}\r\n```\r\n\r\nWhat do you think? Is there a better way to accomplish what I want to do here? Worth a PR to add this method to the different signers?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1318777575/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1318790610",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/26199#issuecomment-1318790610",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/26199",
    "id": 1318790610,
    "node_id": "IC_kwDOAOvK985OmyXS",
    "user": {
      "login": "ArnaudBrousseau",
      "id": 208469,
      "node_id": "MDQ6VXNlcjIwODQ2OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/208469?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ArnaudBrousseau",
      "html_url": "https://github.com/ArnaudBrousseau",
      "followers_url": "https://api.github.com/users/ArnaudBrousseau/followers",
      "following_url": "https://api.github.com/users/ArnaudBrousseau/following{/other_user}",
      "gists_url": "https://api.github.com/users/ArnaudBrousseau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ArnaudBrousseau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ArnaudBrousseau/subscriptions",
      "organizations_url": "https://api.github.com/users/ArnaudBrousseau/orgs",
      "repos_url": "https://api.github.com/users/ArnaudBrousseau/repos",
      "events_url": "https://api.github.com/users/ArnaudBrousseau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ArnaudBrousseau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-17T15:19:19Z",
    "updated_at": "2022-11-17T15:19:19Z",
    "author_association": "NONE",
    "body": "Just to give an example from another library (ethJS):\r\n* it minimizes confusion by throwing an error if `tx.hash()` is called on an unsigned tx ([here](https://github.com/ethereumjs/ethereumjs-monorepo/blob/5274b49e07ced73259617861e5115ddbc188427f/packages/tx/src/eip1559Transaction.ts#L319-L322))\r\n* It has `getMessageToSign(false)` ([here](https://github.com/ethereumjs/ethereumjs-monorepo/blob/5274b49e07ced73259617861e5115ddbc188427f/packages/tx/src/eip1559Transaction.ts#L286-L310)) to support remote signers\r\n\r\nHappy to make PRs here if you think either of these would be a good improvement to make inside of go-ethereum!",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1318790610/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
