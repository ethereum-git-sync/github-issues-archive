{
  "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/21024",
  "repository_url": "https://api.github.com/repos/ethereum/go-ethereum",
  "labels_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/21024/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/21024/comments",
  "events_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/21024/events",
  "html_url": "https://github.com/ethereum/go-ethereum/issues/21024",
  "id": 612141924,
  "node_id": "MDU6SXNzdWU2MTIxNDE5MjQ=",
  "number": 21024,
  "title": "FR: Database over network",
  "user": {
    "login": "cerealkill",
    "id": 2923413,
    "node_id": "MDQ6VXNlcjI5MjM0MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2923413?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cerealkill",
    "html_url": "https://github.com/cerealkill",
    "followers_url": "https://api.github.com/users/cerealkill/followers",
    "following_url": "https://api.github.com/users/cerealkill/following{/other_user}",
    "gists_url": "https://api.github.com/users/cerealkill/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cerealkill/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cerealkill/subscriptions",
    "organizations_url": "https://api.github.com/users/cerealkill/orgs",
    "repos_url": "https://api.github.com/users/cerealkill/repos",
    "events_url": "https://api.github.com/users/cerealkill/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cerealkill/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2020-05-04T20:19:21Z",
  "updated_at": "2020-05-05T06:17:07Z",
  "closed_at": "2020-05-05T06:17:06Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "## Feature request\r\n### Intro/Problem\r\nHi Geth team, first of all, thanks for the great work. I run Nethermind on a VPS and my instance has run out of storage. Unfo the provider doesn't offer larger instances, but offers storage instances that I can connect over NFS/SMB or any other network-file-system.\r\n### Feature\r\nExecute the client with recent blocks on one storage and use a remote database to scale. Best if the user can determine when the  database starts storing on execution. i.e. \r\n`mainnet.cfg`\r\n```json\r\n{\r\n...\r\n\"RemoteDBURL\": \"192.168.2.43:134\",\r\n\"RemoteDBFromLatest\": 50,\r\n...\r\n}\r\n```\r\nThis would start storing blocks on this second, remote, slower database.\r\n### Dream feature\r\nThe best scaling scenario would be to have multiple storages that can be added later, as chains get larger, and benefit from paralellism, maybe even redundancy, IPFS-style.\r\ni.e. \r\n`mainnet.cfg`\r\n```json\r\n{\r\n...\r\n\"RemoteDBEnabled\": true,\r\n\"RemoteDBFromLatest\": 50\r\n\"RemoteDBConfig: [\r\n  {\"RemoteDBIndex\": 0,\r\n    \"RemoteDBURL\": \"192.168.2.43:134\",\r\n    \"RemoteDBCapacity\": 10001337\r\n  },\r\n  {\"RemoteDBIndex\": 1,\r\n    \"RemoteDBURL\": \"192.168.2.45:134\",\r\n    \"RemoteDBCapacity\": 1337\r\n  }],\r\n...\r\n}\r\n```",
  "closed_by": {
    "login": "holiman",
    "id": 142290,
    "node_id": "MDQ6VXNlcjE0MjI5MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/142290?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/holiman",
    "html_url": "https://github.com/holiman",
    "followers_url": "https://api.github.com/users/holiman/followers",
    "following_url": "https://api.github.com/users/holiman/following{/other_user}",
    "gists_url": "https://api.github.com/users/holiman/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/holiman/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/holiman/subscriptions",
    "organizations_url": "https://api.github.com/users/holiman/orgs",
    "repos_url": "https://api.github.com/users/holiman/repos",
    "events_url": "https://api.github.com/users/holiman/events{/privacy}",
    "received_events_url": "https://api.github.com/users/holiman/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/21024/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/21024/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/623874878",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/21024#issuecomment-623874878",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/21024",
    "id": 623874878,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMzg3NDg3OA==",
    "user": {
      "login": "holiman",
      "id": 142290,
      "node_id": "MDQ6VXNlcjE0MjI5MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/142290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/holiman",
      "html_url": "https://github.com/holiman",
      "followers_url": "https://api.github.com/users/holiman/followers",
      "following_url": "https://api.github.com/users/holiman/following{/other_user}",
      "gists_url": "https://api.github.com/users/holiman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/holiman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/holiman/subscriptions",
      "organizations_url": "https://api.github.com/users/holiman/orgs",
      "repos_url": "https://api.github.com/users/holiman/repos",
      "events_url": "https://api.github.com/users/holiman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/holiman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-05T06:17:06Z",
    "updated_at": "2020-05-05T06:17:06Z",
    "author_association": "MEMBER",
    "body": "Hi, \r\nThe go-ethereum repository is the repo for the `geth` client. For `nethermind`, file a ticket here instead: https://github.com/NethermindEth/nethermind \r\n\r\nIn general, the feature you describe is not really doable. A client needs to have a very fast lookup of state. Geth does have the ability to place old blocks into a so called 'ancient' folder, which can reside on an NFS share, or an HDD. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/623874878/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 1,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
