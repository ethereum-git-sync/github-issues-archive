{
  "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/807",
  "repository_url": "https://api.github.com/repos/ethereum/go-ethereum",
  "labels_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/807/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/807/comments",
  "events_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/807/events",
  "html_url": "https://github.com/ethereum/go-ethereum/issues/807",
  "id": 70710043,
  "node_id": "MDU6SXNzdWU3MDcxMDA0Mw==",
  "number": 807,
  "title": "accounts not being created in the correct order in the array.",
  "user": {
    "login": "alexvandesande",
    "id": 112898,
    "node_id": "MDQ6VXNlcjExMjg5OA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/112898?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/alexvandesande",
    "html_url": "https://github.com/alexvandesande",
    "followers_url": "https://api.github.com/users/alexvandesande/followers",
    "following_url": "https://api.github.com/users/alexvandesande/following{/other_user}",
    "gists_url": "https://api.github.com/users/alexvandesande/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/alexvandesande/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/alexvandesande/subscriptions",
    "organizations_url": "https://api.github.com/users/alexvandesande/orgs",
    "repos_url": "https://api.github.com/users/alexvandesande/repos",
    "events_url": "https://api.github.com/users/alexvandesande/events{/privacy}",
    "received_events_url": "https://api.github.com/users/alexvandesande/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 7,
  "created_at": "2015-04-24T14:54:11Z",
  "updated_at": "2020-02-14T15:05:52Z",
  "closed_at": "2015-07-04T10:40:23Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "Here's a nice snippet of code for checking all your accounts, in order:\n\n``` javascript\nfunction checkAllBalances() { \n    var i =0; \n    eth.accounts.forEach( function(e){\n        console.log(\"\\tAccount[\"+i+\"]: \\t\" +  e + \" \\tbalance: \\t\" + web3.fromWei(eth.getBalance(e), \"ether\") + \" ether\"); \n        i++; \n    })\n}; \n\ncheckAllBalances();\n```\n\nCheck all your balances and note their order. Now do a \n\n```\nadmin.newAccount()\n```\n\nand run a \n\n```\ncheckAllBalances();\n```\n\nIdeally, the newest account should be added in the end of the array. Instead its seemingly added at random, some times in be [0] slot, sometimes in the last slot, sometimes somewhere in the middle. It's not a but in the checkBalances code, you can check each manually by doing a eth.accounts[x].\n\nCurrently my accounts were created in this order:\n\n```\nindex      order created\n  0                 4th\n  1                 1st\n  2                 3rd\n  3                 2nd\n  4                 5th\n```\n",
  "closed_by": {
    "login": "obscuren",
    "id": 6264126,
    "node_id": "MDQ6VXNlcjYyNjQxMjY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6264126?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/obscuren",
    "html_url": "https://github.com/obscuren",
    "followers_url": "https://api.github.com/users/obscuren/followers",
    "following_url": "https://api.github.com/users/obscuren/following{/other_user}",
    "gists_url": "https://api.github.com/users/obscuren/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/obscuren/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/obscuren/subscriptions",
    "organizations_url": "https://api.github.com/users/obscuren/orgs",
    "repos_url": "https://api.github.com/users/obscuren/repos",
    "events_url": "https://api.github.com/users/obscuren/events{/privacy}",
    "received_events_url": "https://api.github.com/users/obscuren/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/807/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/807/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/96012535",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/807#issuecomment-96012535",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/807",
    "id": 96012535,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk2MDEyNTM1",
    "user": {
      "login": "tgerring",
      "id": 731472,
      "node_id": "MDQ6VXNlcjczMTQ3Mg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/731472?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tgerring",
      "html_url": "https://github.com/tgerring",
      "followers_url": "https://api.github.com/users/tgerring/followers",
      "following_url": "https://api.github.com/users/tgerring/following{/other_user}",
      "gists_url": "https://api.github.com/users/tgerring/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tgerring/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tgerring/subscriptions",
      "organizations_url": "https://api.github.com/users/tgerring/orgs",
      "repos_url": "https://api.github.com/users/tgerring/repos",
      "events_url": "https://api.github.com/users/tgerring/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tgerring/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-24T17:54:44Z",
    "updated_at": "2015-04-24T17:55:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "They're being listed in alphabetical order which makes me think this is a result of how they're displayed rather than how they're created.\n\n```\n> checkAllBalances();\n    Account[0]:     0xd1ade25ccd3d550a7eb532ac759cac7be09c2719  balance:    25.11095 ether\n    Account[1]:     0xf4dd5c3794f1fd0cdc0327a83aa472609c806e99  balance:    6 ether\n```\n\n```\n> admin.newAccount()\nThe new account will be encrypted with a passphrase.\nPlease enter a passphrase now.\nPassphrase: \nRepeat Passphrase: \n'0xda65665fc30803cb1fb7e6d86691e20b1826dee0'\n> checkAllBalances();\n    Account[0]:     0xd1ade25ccd3d550a7eb532ac759cac7be09c2719  balance:    25.11095 ether\n    Account[1]:     0xda65665fc30803cb1fb7e6d86691e20b1826dee0  balance:    0 ether\n    Account[2]:     0xf4dd5c3794f1fd0cdc0327a83aa472609c806e99  balance:    6 ether\n\n```\n\n```\n> admin.newAccount()\nThe new account will be encrypted with a passphrase.\nPlease enter a passphrase now.\nPassphrase: \nRepeat Passphrase: \n'0xe470b1a7d2c9c5c6f03bbaa8fa20db6d404a0c32'\n> checkAllBalances();\n    Account[0]:     0xd1ade25ccd3d550a7eb532ac759cac7be09c2719  balance:    25.11095 ether\n    Account[1]:     0xda65665fc30803cb1fb7e6d86691e20b1826dee0  balance:    0 ether\n    Account[2]:     0xe470b1a7d2c9c5c6f03bbaa8fa20db6d404a0c32  balance:    0 ether\n    Account[3]:     0xf4dd5c3794f1fd0cdc0327a83aa472609c806e99  balance:    6 ether\n```\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/96012535/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/96677508",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/807#issuecomment-96677508",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/807",
    "id": 96677508,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk2Njc3NTA4",
    "user": {
      "login": "tgerring",
      "id": 731472,
      "node_id": "MDQ6VXNlcjczMTQ3Mg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/731472?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tgerring",
      "html_url": "https://github.com/tgerring",
      "followers_url": "https://api.github.com/users/tgerring/followers",
      "following_url": "https://api.github.com/users/tgerring/following{/other_user}",
      "gists_url": "https://api.github.com/users/tgerring/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tgerring/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tgerring/subscriptions",
      "organizations_url": "https://api.github.com/users/tgerring/orgs",
      "repos_url": "https://api.github.com/users/tgerring/repos",
      "events_url": "https://api.github.com/users/tgerring/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tgerring/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-27T14:33:01Z",
    "updated_at": "2015-04-27T21:50:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "@obscuren Does the account keystore have a natural alphanum ordering on output or are we maintaining any sort of index?\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/96677508/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/96833926",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/807#issuecomment-96833926",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/807",
    "id": 96833926,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk2ODMzOTI2",
    "user": {
      "login": "obscuren",
      "id": 6264126,
      "node_id": "MDQ6VXNlcjYyNjQxMjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6264126?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/obscuren",
      "html_url": "https://github.com/obscuren",
      "followers_url": "https://api.github.com/users/obscuren/followers",
      "following_url": "https://api.github.com/users/obscuren/following{/other_user}",
      "gists_url": "https://api.github.com/users/obscuren/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/obscuren/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/obscuren/subscriptions",
      "organizations_url": "https://api.github.com/users/obscuren/orgs",
      "repos_url": "https://api.github.com/users/obscuren/repos",
      "events_url": "https://api.github.com/users/obscuren/events{/privacy}",
      "received_events_url": "https://api.github.com/users/obscuren/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-27T21:58:08Z",
    "updated_at": "2015-04-27T21:58:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "The key stores use `GetKeyAddresses` (https://github.com/ethereum/go-ethereum/blob/develop/crypto/key_store_plain.go#L115) which uses `ioutil.ReadDir`. Investigating a little shows it uses `sort.Sort(byName(list))` https://golang.org/src/io/ioutil/ioutil.go?s=3208:3259#L90\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/96833926/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/111780042",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/807#issuecomment-111780042",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/807",
    "id": 111780042,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMTc4MDA0Mg==",
    "user": {
      "login": "zelig",
      "id": 769725,
      "node_id": "MDQ6VXNlcjc2OTcyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/769725?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zelig",
      "html_url": "https://github.com/zelig",
      "followers_url": "https://api.github.com/users/zelig/followers",
      "following_url": "https://api.github.com/users/zelig/following{/other_user}",
      "gists_url": "https://api.github.com/users/zelig/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zelig/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zelig/subscriptions",
      "organizations_url": "https://api.github.com/users/zelig/orgs",
      "repos_url": "https://api.github.com/users/zelig/repos",
      "events_url": "https://api.github.com/users/zelig/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zelig/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-06-14T04:16:07Z",
    "updated_at": "2015-06-14T11:36:53Z",
    "author_association": "MEMBER",
    "body": "I've been thinking about this and give my 2c\n\nCurrently the ordering is alphanumeric and the notion of primary account is defined as the first. \nThis is problematic because the it should not change, but by creating an account that will come before alphabetically, the primary account changes. This is clearly bad. \n\nSome suggested before that the keyfiles should be sorted by creation time to give the indexing. This might make sense for locally created accounts or accounts created by importing a wallet or private key, since they create a new file. But also problematic: we want the individual key files to be portable, this is not reliable. Therefore there is no way to have portability and fixed indexing purely based on file properties. Note that this is true irrespective of whether we store the property in the json or let the file system (name, metadata) carry the info. \n\nAs a consequence we also have no way to fix the notion of default account.\n\nThere are 2 solutions:\n\nGive up portability of individual key files with simple copy and we require explicit import of keys into a node and it will just create a new file that is guaranteed to be sequentially after the ones already on the account. This solution is really cumbersome, high maintenance. It is just a question of time that people will request ability to modify primary account which will require json encoding which will necessitate further complication in the spec (in that primariness is not preserved via export-import)\nAnd surely the next thing will be named accounts, etc etc, we should stop this before its late.\n\nPro portability arguments also apply to file corruption, compormised keys and key deletion. So I hope this is decided.\n\nMy suggestion is radically simple. \n- allow full independence of encrypted keyfiles; guarantee full portability of individual keyfiles across nodes as well as across client implementations; and \n- interpret the indexing in the response for `geth account list` and web.js `eth.accounts` as random (i.e non-sematic like the order of keys iterating over a map) and document it well\n- abolish any notion of persistent order or indexing of accounts that native in `geth`, forget the notion of primary account or default account and tell users to use registrar or wallett dapp.\n\nOn the level of geth (as in the ethereum stack backend), there is only a set of addresses. It will be up to Dapps, wrappers or users to remember which password belongs to which address and how you retrieve them.  Luckily we got the best tool to help you with that:\n\n```\nmyregistrar.reserve.sendTransaction(\"primary\")\nmyregistrar.setAddress.sendTransaction(\"primary\", eth.accounts[9], true, {from: myregistrar.addr(\"mum's account\")})\n```\n\nOf just use a full wallet contract. \nSo we dont even need to change the documentation much only where primary account is defined.\n\nFor completeness we need to make sure etherbase has no default value and must always be explicitly given when mining. In the special case there is exactly one account, it could theoretically default to that, but even that is wrong cos etherbase can also be an external address, so it really shouldnt matter if it belongs to a local account or external.\n\nThis requires only \n- code removal\n- minimal change to documentation \n- extra check for etherbase (allow setting in admin console would also be nice)\n\nThis looks both necessary and realistic for frontier\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/111780042/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/112369699",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/807#issuecomment-112369699",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/807",
    "id": 112369699,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMjM2OTY5OQ==",
    "user": {
      "login": "tgerring",
      "id": 731472,
      "node_id": "MDQ6VXNlcjczMTQ3Mg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/731472?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tgerring",
      "html_url": "https://github.com/tgerring",
      "followers_url": "https://api.github.com/users/tgerring/followers",
      "following_url": "https://api.github.com/users/tgerring/following{/other_user}",
      "gists_url": "https://api.github.com/users/tgerring/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tgerring/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tgerring/subscriptions",
      "organizations_url": "https://api.github.com/users/tgerring/orgs",
      "repos_url": "https://api.github.com/users/tgerring/repos",
      "events_url": "https://api.github.com/users/tgerring/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tgerring/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-06-16T09:55:19Z",
    "updated_at": "2015-06-16T09:55:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks for the detailed analysis @zelig!\n\nA couple of thoughts I have:\n\n_\"Interpret the indexing in the response for geth account list and web.js eth.accounts as random (i.e non-sematic like the order of keys iterating over a map) and document it well\"_\n\nWe should be careful with this and at least provide some guarantee of when it might change, i.e. program restart or account import/creation. Otherwise, the user may encounter unpredictable behaviour when running scripts on the console and the indexing changes underneath them\n\n_\"extra check for etherbase (allow setting in admin console would also be nice)\"_\n\nI think we need the option to set the etherbase from console regardless of what happens to account management. Currently, it's entirely a bit useless having it default to `eth.accounts[0]`\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/112369699/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/112759524",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/807#issuecomment-112759524",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/807",
    "id": 112759524,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMjc1OTUyNA==",
    "user": {
      "login": "zelig",
      "id": 769725,
      "node_id": "MDQ6VXNlcjc2OTcyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/769725?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zelig",
      "html_url": "https://github.com/zelig",
      "followers_url": "https://api.github.com/users/zelig/followers",
      "following_url": "https://api.github.com/users/zelig/following{/other_user}",
      "gists_url": "https://api.github.com/users/zelig/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zelig/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zelig/subscriptions",
      "organizations_url": "https://api.github.com/users/zelig/orgs",
      "repos_url": "https://api.github.com/users/zelig/repos",
      "events_url": "https://api.github.com/users/zelig/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zelig/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-06-17T11:19:13Z",
    "updated_at": "2015-06-17T11:19:13Z",
    "author_association": "MEMBER",
    "body": "thanks @tgerring I agree with both. I will implement creation date ordering but emphasize caveats in docs. We eliminate the notion of primary account or replace it with namereg notion. Finally etherbase will need to be explicitly specified, and yes setting it will be supported on the console though the admin API.\nhttps://github.com/ethereum/go-ethereum/pull/1283\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/112759524/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
