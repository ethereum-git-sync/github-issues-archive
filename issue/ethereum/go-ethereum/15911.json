{
  "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/15911",
  "repository_url": "https://api.github.com/repos/ethereum/go-ethereum",
  "labels_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/15911/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/15911/comments",
  "events_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/15911/events",
  "html_url": "https://github.com/ethereum/go-ethereum/issues/15911",
  "id": 289384494,
  "node_id": "MDU6SXNzdWUyODkzODQ0OTQ=",
  "number": 15911,
  "title": "Wrong gas consumed for inner calls",
  "user": {
    "login": "denisgranha",
    "id": 4806080,
    "node_id": "MDQ6VXNlcjQ4MDYwODA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4806080?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/denisgranha",
    "html_url": "https://github.com/denisgranha",
    "followers_url": "https://api.github.com/users/denisgranha/followers",
    "following_url": "https://api.github.com/users/denisgranha/following{/other_user}",
    "gists_url": "https://api.github.com/users/denisgranha/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/denisgranha/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/denisgranha/subscriptions",
    "organizations_url": "https://api.github.com/users/denisgranha/orgs",
    "repos_url": "https://api.github.com/users/denisgranha/repos",
    "events_url": "https://api.github.com/users/denisgranha/events{/privacy}",
    "received_events_url": "https://api.github.com/users/denisgranha/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 7,
  "created_at": "2018-01-17T19:27:25Z",
  "updated_at": "2018-01-24T11:58:23Z",
  "closed_at": "2018-01-19T13:01:00Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "I'm not running any node, I'm performing transactions against a Gnosis Multisig in the Rinkeby Network with Metamask 3.13.4\r\nBasically what I found is that need to send more gas in the transaction than what is actually consumed, if I send a more accurate amount of gas to perform the transaction it will throw an out of gas\r\n\r\nThe transactions are the following:\r\n1. Create the Gnosis Multisig through https://wallet.gnosis.pm and metamask in Kovan\r\ne.g: https://rinkeby.etherscan.io/tx/0xa7ec07b916f3846c7b6484b4f44c91887ee1953ad88ecdbf6f2b2c70fb052e7e\r\n\r\n2. Add multisig owner with accurate gas amount 240k gas: https://rinkeby.etherscan.io/tx/0x1a19f2fdad80aad642d04525db7ee77b773b6ff61e82e15eade346a4cc336a3c\r\n\r\n3. Add multisig owner with high gas amount 1M: https://rinkeby.etherscan.io/tx/0xea1c0fda7dc7cb995941902b612bdf5f61997597ec9335af2725c7f13558c22a\r\n\r\nYou can see that the add owner transaction consumes around 222k gas in the third transaction but it consumes 197k in the second one.\r\nWhat we have here is that the related delegated call is not executed in the transaction with the lower gas, with Kovan (Parity) had the same behaviour (same amount of gas) but with the difference that [Kovan throws and out of gas in ether scan](https://kovan.etherscan.io/tx/0x3a7ddd5ed7bae3c2ad8343e42e0d32b0cf1759cfc3c6d946d6cd21c31ae41160) but [Rinkeby don't](https://rinkeby.etherscan.io/tx/0x1a19f2fdad80aad642d04525db7ee77b773b6ff61e82e15eade346a4cc336a3c)\r\n\r\nI have two concerns:\r\n1. Why if the transaction with the higher gas consumes 222k gas at the end and sending 240k doesn't get a full execution.\r\n2. Why if the delegated call fails the main transaction doesn't have any out of gas? One of both Geth or [Parity has an incorrect behaviour](https://github.com/paritytech/parity/issues/7602)\r\n\r\n\r\nFor reference:\r\n\r\nThis is the main function https://github.com/gnosis/MultiSigWallet/blob/master/contracts/MultiSigWallet.sol#L189\r\n\r\nThat does a delegated call against the same Multisig Contract [in this line](https://github.com/gnosis/MultiSigWallet/blob/master/contracts/MultiSigWallet.sol#L233) against the [add owner function](https://github.com/gnosis/MultiSigWallet/blob/master/contracts/MultiSigWallet.sol#L122)\r\n",
  "closed_by": {
    "login": "holiman",
    "id": 142290,
    "node_id": "MDQ6VXNlcjE0MjI5MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/142290?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/holiman",
    "html_url": "https://github.com/holiman",
    "followers_url": "https://api.github.com/users/holiman/followers",
    "following_url": "https://api.github.com/users/holiman/following{/other_user}",
    "gists_url": "https://api.github.com/users/holiman/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/holiman/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/holiman/subscriptions",
    "organizations_url": "https://api.github.com/users/holiman/orgs",
    "repos_url": "https://api.github.com/users/holiman/repos",
    "events_url": "https://api.github.com/users/holiman/events{/privacy}",
    "received_events_url": "https://api.github.com/users/holiman/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/15911/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/15911/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/358960205",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/15911#issuecomment-358960205",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/15911",
    "id": 358960205,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1ODk2MDIwNQ==",
    "user": {
      "login": "holiman",
      "id": 142290,
      "node_id": "MDQ6VXNlcjE0MjI5MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/142290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/holiman",
      "html_url": "https://github.com/holiman",
      "followers_url": "https://api.github.com/users/holiman/followers",
      "following_url": "https://api.github.com/users/holiman/following{/other_user}",
      "gists_url": "https://api.github.com/users/holiman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/holiman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/holiman/subscriptions",
      "organizations_url": "https://api.github.com/users/holiman/orgs",
      "repos_url": "https://api.github.com/users/holiman/repos",
      "events_url": "https://api.github.com/users/holiman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/holiman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-19T13:01:00Z",
    "updated_at": "2018-01-19T13:01:00Z",
    "author_association": "MEMBER",
    "body": "It's not a \"delegated call\", there's no such thing. There exists something called `DELEGATECALL`, but the gnosis multisig just uses call:s. \r\n\r\nThe reasons for contracts to behave subtly different depending on the gas supplied can be tricky to determine without going deep into either the source code or actually stepping through the execution op by op. A `SSTORE` which sets something to `0` will have a \"runtime cost\" of 20K gas, but 15K will be returned after the call is done, so if those things are happening, then the  supplied gas must be larger than the gas that will eventually be actually used (deducted). \r\n\r\nAn inner call (a call from a contract) can go OOG without the outer, envelope call, going  OOG. \r\n\r\nI suggest you try to debug this in remix, or ask gnosis about what the problem can be. This is not an issue in go-ethereum. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/358960205/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/358985565",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/15911#issuecomment-358985565",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/15911",
    "id": 358985565,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1ODk4NTU2NQ==",
    "user": {
      "login": "denisgranha",
      "id": 4806080,
      "node_id": "MDQ6VXNlcjQ4MDYwODA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4806080?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/denisgranha",
      "html_url": "https://github.com/denisgranha",
      "followers_url": "https://api.github.com/users/denisgranha/followers",
      "following_url": "https://api.github.com/users/denisgranha/following{/other_user}",
      "gists_url": "https://api.github.com/users/denisgranha/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/denisgranha/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/denisgranha/subscriptions",
      "organizations_url": "https://api.github.com/users/denisgranha/orgs",
      "repos_url": "https://api.github.com/users/denisgranha/repos",
      "events_url": "https://api.github.com/users/denisgranha/events{/privacy}",
      "received_events_url": "https://api.github.com/users/denisgranha/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-19T14:46:48Z",
    "updated_at": "2018-01-19T14:48:30Z",
    "author_association": "NONE",
    "body": "Hello @holiman , thank you for your response\r\n\r\nYou are right, I meant inner calls, not delegate call\r\n\r\nAbout the amount of gas needed, I know that if the contract releases storage you get gas back so the final execution will be cheaper, but the thing is that in this execution there is not such thing as release of storage, unless there is something else:\r\n\r\n1. This is the main function called:\r\n```\r\nfunction submitTransaction(address destination, uint value, bytes data)\r\n        public\r\n        returns (uint transactionId)\r\n    {\r\n        transactionId = addTransaction(destination, value, data);\r\n        confirmTransaction(transactionId);\r\n    }\r\n```\r\n\r\n2. It executes addTransaction\r\n```\r\n    function addTransaction(address destination, uint value, bytes data)\r\n        internal\r\n        notNull(destination)\r\n        returns (uint transactionId)\r\n    {\r\n        transactionId = transactionCount;\r\n        transactions[transactionId] = Transaction({\r\n            destination: destination,\r\n            value: value,\r\n            data: data,\r\n            executed: false\r\n        });\r\n        transactionCount += 1;\r\n        Submission(transactionId);\r\n    }\r\n```\r\nWe save the transaction data in the transactions mapping and update the value of transaction count\r\n3.  Execute confirmTransaction:\r\n```\r\nfunction confirmTransaction(uint transactionId)\r\n        public\r\n        ownerExists(msg.sender)\r\n        transactionExists(transactionId)\r\n        notConfirmed(transactionId, msg.sender)\r\n    {\r\n        confirmations[transactionId][msg.sender] = true;\r\n        Confirmation(msg.sender, transactionId);\r\n        executeTransaction(transactionId);\r\n    }\r\n```\r\nHere we have another storage operation, we save the user confirmation in the confirmations mapping\r\n4. Execute executeTransaction:\r\n```\r\n function executeTransaction(uint transactionId)\r\n        public\r\n        ownerExists(msg.sender)\r\n        confirmed(transactionId, msg.sender)\r\n        notExecuted(transactionId)\r\n    {\r\n        if (isConfirmed(transactionId)) {\r\n            Transaction storage txn = transactions[transactionId];\r\n            txn.executed = true;\r\n            if (txn.destination.call.value(txn.value)(txn.data))\r\n                Execution(transactionId);\r\n            else {\r\n                ExecutionFailure(transactionId);\r\n                txn.executed = false;\r\n            }\r\n        }\r\n    }\r\n```\r\nHere we have more storage ops and an inner call to the multisig contract itself\r\n5. Inner call to the Multisig contract, addOwner function\r\n```\r\n    function addOwner(address owner)\r\n        public\r\n        onlyWallet\r\n        ownerDoesNotExist(owner)\r\n        notNull(owner)\r\n        validRequirement(owners.length + 1, required)\r\n    {\r\n        isOwner[owner] = true;\r\n        owners.push(owner);\r\n        OwnerAddition(owner);\r\n    }\r\n```\r\nHere we have two more params to be stored, but cannot see any release in any part of the code.\r\n\r\nEven if there is any release of storage in the code, are you suggesting that the compiled bytecode does? I cannot see any negative amount of gas in https://rinkeby.etherscan.io/vmtrace?txhash=0xea1c0fda7dc7cb995941902b612bdf5f61997597ec9335af2725c7f13558c22a\r\n\r\nThank you",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/358985565/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/358993646",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/15911#issuecomment-358993646",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/15911",
    "id": 358993646,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1ODk5MzY0Ng==",
    "user": {
      "login": "holiman",
      "id": 142290,
      "node_id": "MDQ6VXNlcjE0MjI5MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/142290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/holiman",
      "html_url": "https://github.com/holiman",
      "followers_url": "https://api.github.com/users/holiman/followers",
      "following_url": "https://api.github.com/users/holiman/following{/other_user}",
      "gists_url": "https://api.github.com/users/holiman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/holiman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/holiman/subscriptions",
      "organizations_url": "https://api.github.com/users/holiman/orgs",
      "repos_url": "https://api.github.com/users/holiman/repos",
      "events_url": "https://api.github.com/users/holiman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/holiman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-19T15:14:04Z",
    "updated_at": "2018-01-19T15:14:04Z",
    "author_association": "MEMBER",
    "body": "So it appears that it is the inner call, `txn.destination.call.value(txn.value)(txn.data)` that fails. Are you sure it's _truly_ failing due to OOG, and not because of any of the conditions: `ownerDoesNotExist(owner)`, `validRequirement(owners.length + 1, required)`. I'm asking because I'm not 100% certain myself on how reliable the parity trace error causes are; if they distinguish between these diferent errors: OOG / Invalid op / invalid jump / REVERT .  ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/358993646/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/359370843",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/15911#issuecomment-359370843",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/15911",
    "id": 359370843,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1OTM3MDg0Mw==",
    "user": {
      "login": "denisgranha",
      "id": 4806080,
      "node_id": "MDQ6VXNlcjQ4MDYwODA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4806080?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/denisgranha",
      "html_url": "https://github.com/denisgranha",
      "followers_url": "https://api.github.com/users/denisgranha/followers",
      "following_url": "https://api.github.com/users/denisgranha/following{/other_user}",
      "gists_url": "https://api.github.com/users/denisgranha/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/denisgranha/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/denisgranha/subscriptions",
      "organizations_url": "https://api.github.com/users/denisgranha/orgs",
      "repos_url": "https://api.github.com/users/denisgranha/repos",
      "events_url": "https://api.github.com/users/denisgranha/events{/privacy}",
      "received_events_url": "https://api.github.com/users/denisgranha/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-22T09:39:48Z",
    "updated_at": "2018-01-22T09:39:48Z",
    "author_association": "NONE",
    "body": "Yes, It's the exact same operation, with the same account signing the transaction. One fails and the other don't, the only change is the gas amount",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/359370843/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/359564004",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/15911#issuecomment-359564004",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/15911",
    "id": 359564004,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1OTU2NDAwNA==",
    "user": {
      "login": "AlexeyAkhunov",
      "id": 13686139,
      "node_id": "MDQ6VXNlcjEzNjg2MTM5",
      "avatar_url": "https://avatars.githubusercontent.com/u/13686139?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AlexeyAkhunov",
      "html_url": "https://github.com/AlexeyAkhunov",
      "followers_url": "https://api.github.com/users/AlexeyAkhunov/followers",
      "following_url": "https://api.github.com/users/AlexeyAkhunov/following{/other_user}",
      "gists_url": "https://api.github.com/users/AlexeyAkhunov/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AlexeyAkhunov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AlexeyAkhunov/subscriptions",
      "organizations_url": "https://api.github.com/users/AlexeyAkhunov/orgs",
      "repos_url": "https://api.github.com/users/AlexeyAkhunov/repos",
      "events_url": "https://api.github.com/users/AlexeyAkhunov/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AlexeyAkhunov/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-22T21:04:12Z",
    "updated_at": "2018-01-22T21:04:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "There is no mystery here :) When Solidity compiles the call() statement (have a look into the opcodes with solc --opcodes), it calculates the gas budget for the inner call as the current remaining gas minus 34710. 34710 is a \"magic number\", which include allowance for callGas (700) + callVeryLow (3, to pay for SUB) + callValueTransferGas (9000) + callNewAccountGas (25000, in case the destination address does not exist and needs creating).\r\n\r\nTherefore, if you send tx with 240'000 gas, the budget for the inner call will be at most 205290, which is less than 223k that you require.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/359564004/reactions",
      "total_count": 3,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 3,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/359716651",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/15911#issuecomment-359716651",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/15911",
    "id": 359716651,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1OTcxNjY1MQ==",
    "user": {
      "login": "denisgranha",
      "id": 4806080,
      "node_id": "MDQ6VXNlcjQ4MDYwODA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4806080?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/denisgranha",
      "html_url": "https://github.com/denisgranha",
      "followers_url": "https://api.github.com/users/denisgranha/followers",
      "following_url": "https://api.github.com/users/denisgranha/following{/other_user}",
      "gists_url": "https://api.github.com/users/denisgranha/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/denisgranha/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/denisgranha/subscriptions",
      "organizations_url": "https://api.github.com/users/denisgranha/orgs",
      "repos_url": "https://api.github.com/users/denisgranha/repos",
      "events_url": "https://api.github.com/users/denisgranha/events{/privacy}",
      "received_events_url": "https://api.github.com/users/denisgranha/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-23T08:36:08Z",
    "updated_at": "2018-01-23T08:36:08Z",
    "author_association": "NONE",
    "body": "Good morning @AlexeyAkhunov ! Thanks for getting involved\r\n\r\nSo, the inner call costs 34710 more, but this value is not payed at the end?\r\nWhy don't include that in the estimateGas function?\r\n\r\nThe problem is that with this inner calls, estimateGas function is useless\r\n\r\nWe want to estimate all the operations in https://wallet.gnosis.pm/\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/359716651/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/360108714",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/15911#issuecomment-360108714",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/15911",
    "id": 360108714,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MDEwODcxNA==",
    "user": {
      "login": "Georgi87",
      "id": 259400,
      "node_id": "MDQ6VXNlcjI1OTQwMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/259400?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Georgi87",
      "html_url": "https://github.com/Georgi87",
      "followers_url": "https://api.github.com/users/Georgi87/followers",
      "following_url": "https://api.github.com/users/Georgi87/following{/other_user}",
      "gists_url": "https://api.github.com/users/Georgi87/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Georgi87/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Georgi87/subscriptions",
      "organizations_url": "https://api.github.com/users/Georgi87/orgs",
      "repos_url": "https://api.github.com/users/Georgi87/repos",
      "events_url": "https://api.github.com/users/Georgi87/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Georgi87/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-24T11:57:45Z",
    "updated_at": "2018-01-24T11:58:23Z",
    "author_association": "NONE",
    "body": "At the time the .call operation is executed the remaining gas - 34710 is used to execute the addOwner operation. This amount is not sufficient if we only send the actually used gas amount, because this doesn't take the 34710 gas into account. We have to set the gas amount like this: gas costs used until .call operation + gas costs used for .call operation + 34710. Until the estimateGas function is fixed, one can only assume a high amount of gas to make sure it will actually process. Fortunately revert doesn't consume the remaining gas anymore and settting high gas amounts is not such a big issue. Still suboptimal.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/360108714/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
