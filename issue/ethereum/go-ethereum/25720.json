{
  "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/25720",
  "repository_url": "https://api.github.com/repos/ethereum/go-ethereum",
  "labels_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/25720/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/25720/comments",
  "events_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/25720/events",
  "html_url": "https://github.com/ethereum/go-ethereum/issues/25720",
  "id": 1365814938,
  "node_id": "I_kwDOAOvK985RaK6a",
  "number": 25720,
  "title": "Will log subscribe events API disabled in Geth after merge? ",
  "user": {
    "login": "ktjooho",
    "id": 18390988,
    "node_id": "MDQ6VXNlcjE4MzkwOTg4",
    "avatar_url": "https://avatars.githubusercontent.com/u/18390988?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ktjooho",
    "html_url": "https://github.com/ktjooho",
    "followers_url": "https://api.github.com/users/ktjooho/followers",
    "following_url": "https://api.github.com/users/ktjooho/following{/other_user}",
    "gists_url": "https://api.github.com/users/ktjooho/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ktjooho/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ktjooho/subscriptions",
    "organizations_url": "https://api.github.com/users/ktjooho/orgs",
    "repos_url": "https://api.github.com/users/ktjooho/repos",
    "events_url": "https://api.github.com/users/ktjooho/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ktjooho/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 268304226,
      "node_id": "MDU6TGFiZWwyNjgzMDQyMjY=",
      "url": "https://api.github.com/repos/ethereum/go-ethereum/labels/type:docs",
      "name": "type:docs",
      "color": "fef2c0",
      "default": false,
      "description": null
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 5,
  "created_at": "2022-09-08T08:46:51Z",
  "updated_at": "2022-09-09T14:19:59Z",
  "closed_at": "2022-09-09T13:59:58Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "Log event would be delivered when blockchain insert function(writeBlockAndSetHead ) is called as far as I know. \r\nwriteBlockAndSetHead function won't be called after PoS finalised as BlockFetcher's  insertChain callback fn property will be disabled. \r\nBelow code is insertChain callback setup part. \r\n```go\r\nhandler.go (line : 232 ~ )\r\ninserter := func(blocks types.Blocks) (int, error) {\r\n\t\t// All the block fetcher activities should be disabled\r\n\t\t// after the transition. Print the warning log.\r\n\t\tif h.merger.PoSFinalized() {\r\n\t\t\tvar ctx []interface{}\r\n\t\t\tctx = append(ctx, \"blocks\", len(blocks))\r\n\t\t\tif len(blocks) > 0 {\r\n\t\t\t\tctx = append(ctx, \"firsthash\", blocks[0].Hash())\r\n\t\t\t\tctx = append(ctx, \"firstnumber\", blocks[0].Number())\r\n\t\t\t\tctx = append(ctx, \"lasthash\", blocks[len(blocks)-1].Hash())\r\n\t\t\t\tctx = append(ctx, \"lastnumber\", blocks[len(blocks)-1].Number())\r\n\t\t\t}\r\n\t\t\tlog.Warn(\"Unexpected insertion activity\", ctx...)\r\n\t\t\treturn 0, errors.New(\"unexpected behavior after transition\")\r\n\t\t}\r\n\t\t// If sync hasn't reached the checkpoint yet, deny importing weird blocks.\r\n\t\t//\r\n\t\t// Ideally we would also compare the head block's timestamp and similarly reject\r\n\t\t// the propagated block if the head is too old. Unfortunately there is a corner\r\n\t\t// case when starting new networks, where the genesis might be ancient (0 unix)\r\n\t\t// which would prevent full nodes from accepting it.\r\n\t\tif h.chain.CurrentBlock().NumberU64() < h.checkpointNumber {\r\n\t\t\tlog.Warn(\"Unsynced yet, discarded propagated block\", \"number\", blocks[0].Number(), \"hash\", blocks[0].Hash())\r\n\t\t\treturn 0, nil\r\n\t\t}\r\n\t\t// If snap sync is running, deny importing weird blocks. This is a problematic\r\n\t\t// clause when starting up a new network, because snap-syncing miners might not\r\n\t\t// accept each others' blocks until a restart. Unfortunately we haven't figured\r\n\t\t// out a way yet where nodes can decide unilaterally whether the network is new\r\n\t\t// or not. This should be fixed if we figure out a solution.\r\n\t\tif atomic.LoadUint32(&h.snapSync) == 1 {\r\n\t\t\tlog.Warn(\"Snap syncing, discarded propagated block\", \"number\", blocks[0].Number(), \"hash\", blocks[0].Hash())\r\n\t\t\treturn 0, nil\r\n\t\t}\r\n\t\tif h.merger.TDDReached() {\r\n\t\t\t// The blocks from the p2p network is regarded as untrusted\r\n\t\t\t// after the transition. In theory block gossip should be disabled\r\n\t\t\t// entirely whenever the transition is started. But in order to\r\n\t\t\t// handle the transition boundary reorg in the consensus-layer,\r\n\t\t\t// the legacy blocks are still accepted, but only for the terminal\r\n\t\t\t// pow blocks. Spec: https://github.com/ethereum/EIPs/blob/master/EIPS/eip-3675.md#halt-the-importing-of-pow-blocks\r\n\t\t\tfor i, block := range blocks {\r\n\t\t\t\tptd := h.chain.GetTd(block.ParentHash(), block.NumberU64()-1)\r\n\t\t\t\tif ptd == nil {\r\n\t\t\t\t\treturn 0, nil\r\n\t\t\t\t}\r\n\t\t\t\ttd := new(big.Int).Add(ptd, block.Difficulty())\r\n\t\t\t\tif !h.chain.Config().IsTerminalPoWBlock(ptd, td) {\r\n\t\t\t\t\tlog.Info(\"Filtered out non-termimal pow block\", \"number\", block.NumberU64(), \"hash\", block.Hash())\r\n\t\t\t\t\treturn 0, nil\r\n\t\t\t\t}\r\n\t\t\t\tif err := h.chain.InsertBlockWithoutSetHead(block); err != nil {\r\n\t\t\t\t\treturn i, err\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn 0, nil\r\n\t\t}\r\n\t\tn, err := h.chain.InsertChain(blocks)\r\n\t\tif err == nil {\r\n\t\t\tatomic.StoreUint32(&h.acceptTxs, 1) // Mark initial sync done on any fetcher import\r\n\t\t}\r\n\t\treturn n, err\r\n\t}\r\n```\r\nIt looks like 'InsertBlock... ' function will never be called after merge.\r\nConsensus client node api doesn't have a log api. (https://ethereum.github.io/beacon-APIs/#/Beacon). \r\nMaybe I missed some. Could you please make sure whether this api spec will be changed..? \r\nThanks.",
  "closed_by": {
    "login": "holiman",
    "id": 142290,
    "node_id": "MDQ6VXNlcjE0MjI5MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/142290?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/holiman",
    "html_url": "https://github.com/holiman",
    "followers_url": "https://api.github.com/users/holiman/followers",
    "following_url": "https://api.github.com/users/holiman/following{/other_user}",
    "gists_url": "https://api.github.com/users/holiman/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/holiman/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/holiman/subscriptions",
    "organizations_url": "https://api.github.com/users/holiman/orgs",
    "repos_url": "https://api.github.com/users/holiman/repos",
    "events_url": "https://api.github.com/users/holiman/events{/privacy}",
    "received_events_url": "https://api.github.com/users/holiman/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/25720/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/25720/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1241909163",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/25720#issuecomment-1241909163",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/25720",
    "id": 1241909163,
    "node_id": "IC_kwDOAOvK985KBger",
    "user": {
      "login": "rjl493456442",
      "id": 5959481,
      "node_id": "MDQ6VXNlcjU5NTk0ODE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5959481?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rjl493456442",
      "html_url": "https://github.com/rjl493456442",
      "followers_url": "https://api.github.com/users/rjl493456442/followers",
      "following_url": "https://api.github.com/users/rjl493456442/following{/other_user}",
      "gists_url": "https://api.github.com/users/rjl493456442/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rjl493456442/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rjl493456442/subscriptions",
      "organizations_url": "https://api.github.com/users/rjl493456442/orgs",
      "repos_url": "https://api.github.com/users/rjl493456442/repos",
      "events_url": "https://api.github.com/users/rjl493456442/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rjl493456442/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-09T12:20:02Z",
    "updated_at": "2022-09-09T12:20:59Z",
    "author_association": "MEMBER",
    "body": "After the transition, the block processing will be divided into two parts: (1) execute the block and insert it into database (it's done by function `InsertBlockWithoutSetHead`) (2) mark this block and its ancestors as canonical (it's done by `SetCanonical`).\r\n\r\nThe logs of the new canonical blocks (the new head block and its ancestor until the fork point) will be fired in `SetCanonical`).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1241909163/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1241914731",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/25720#issuecomment-1241914731",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/25720",
    "id": 1241914731,
    "node_id": "IC_kwDOAOvK985KBh1r",
    "user": {
      "login": "rjl493456442",
      "id": 5959481,
      "node_id": "MDQ6VXNlcjU5NTk0ODE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5959481?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rjl493456442",
      "html_url": "https://github.com/rjl493456442",
      "followers_url": "https://api.github.com/users/rjl493456442/followers",
      "following_url": "https://api.github.com/users/rjl493456442/following{/other_user}",
      "gists_url": "https://api.github.com/users/rjl493456442/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rjl493456442/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rjl493456442/subscriptions",
      "organizations_url": "https://api.github.com/users/rjl493456442/orgs",
      "repos_url": "https://api.github.com/users/rjl493456442/repos",
      "events_url": "https://api.github.com/users/rjl493456442/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rjl493456442/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-09T12:26:00Z",
    "updated_at": "2022-09-09T12:26:00Z",
    "author_association": "MEMBER",
    "body": "The block fetcher will indeed be disabled after the transition. \r\n\r\nSpecifically, once the first pos event received from the consensus layer, we think transition happens and will reject all blocks from p2p network, but expect the terminal block in order to handle the reorg around the transition point.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1241914731/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1242022045",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/25720#issuecomment-1242022045",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/25720",
    "id": 1242022045,
    "node_id": "IC_kwDOAOvK985KB8Cd",
    "user": {
      "login": "ktjooho",
      "id": 18390988,
      "node_id": "MDQ6VXNlcjE4MzkwOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/18390988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ktjooho",
      "html_url": "https://github.com/ktjooho",
      "followers_url": "https://api.github.com/users/ktjooho/followers",
      "following_url": "https://api.github.com/users/ktjooho/following{/other_user}",
      "gists_url": "https://api.github.com/users/ktjooho/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ktjooho/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ktjooho/subscriptions",
      "organizations_url": "https://api.github.com/users/ktjooho/orgs",
      "repos_url": "https://api.github.com/users/ktjooho/repos",
      "events_url": "https://api.github.com/users/ktjooho/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ktjooho/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-09T14:08:14Z",
    "updated_at": "2022-09-09T14:08:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "I got it!! Thanks a lot😃",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1242022045/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
