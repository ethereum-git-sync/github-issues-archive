{
  "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20112",
  "repository_url": "https://api.github.com/repos/ethereum/go-ethereum",
  "labels_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20112/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20112/comments",
  "events_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20112/events",
  "html_url": "https://github.com/ethereum/go-ethereum/issues/20112",
  "id": 497022178,
  "node_id": "MDU6SXNzdWU0OTcwMjIxNzg=",
  "number": 20112,
  "title": "Private Chain, Gas issues.",
  "user": {
    "login": "insxnic",
    "id": 53305690,
    "node_id": "MDQ6VXNlcjUzMzA1Njkw",
    "avatar_url": "https://avatars.githubusercontent.com/u/53305690?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/insxnic",
    "html_url": "https://github.com/insxnic",
    "followers_url": "https://api.github.com/users/insxnic/followers",
    "following_url": "https://api.github.com/users/insxnic/following{/other_user}",
    "gists_url": "https://api.github.com/users/insxnic/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/insxnic/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/insxnic/subscriptions",
    "organizations_url": "https://api.github.com/users/insxnic/orgs",
    "repos_url": "https://api.github.com/users/insxnic/repos",
    "events_url": "https://api.github.com/users/insxnic/events{/privacy}",
    "received_events_url": "https://api.github.com/users/insxnic/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2019-09-23T10:44:42Z",
  "updated_at": "2019-09-23T14:17:29Z",
  "closed_at": "2019-09-23T13:43:54Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "## System information\r\n\r\nGeth version: `Geth 1.9.5`\r\nOS & Version: Linux\r\n\r\nSO I made a private chain and I'm having some issues with my gas cost reductions the original is this:\r\n\r\n```\r\nconst (\r\n\tGasLimitBoundDivisor uint64 = 1024    // The bound divisor of the gas limit, used in update calculations.\r\n\tMinGasLimit          uint64 = 5000    // Minimum the gas limit may ever be.\r\n\tGenesisGasLimit      uint64 = 4712388 // Gas limit of the Genesis block.\r\n\r\n\tMaximumExtraDataSize  uint64 = 32    // Maximum size extra data may be after Genesis.\r\n\tExpByteGas            uint64 = 10    // Times ceil(log256(exponent)) for the EXP instruction.\r\n\tSloadGas              uint64 = 50    // Multiplied by the number of 32-byte words that are copied (round up) for any *COPY operation and added.\r\n\tCallValueTransferGas  uint64 = 9000  // Paid for CALL when the value transfer is non-zero.\r\n\tCallNewAccountGas     uint64 = 25000 // Paid for CALL when the destination address didn't exist prior.\r\n\tTxGas                 uint64 = 21000 // Per transaction not creating a contract. NOTE: Not payable on data of calls between transactions.\r\n\tTxGasContractCreation uint64 = 53000 // Per transaction that creates a contract. NOTE: Not payable on data of calls between transactions.\r\n\tTxDataZeroGas         uint64 = 4     // Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions.\r\n\tQuadCoeffDiv          uint64 = 512   // Divisor for the quadratic particle of the memory cost equation.\r\n\tLogDataGas            uint64 = 8     // Per byte in a LOG* operation's data.\r\n\tCallStipend           uint64 = 2300  // Free gas given at beginning of call.\r\n\r\n\tSha3Gas     uint64 = 30 // Once per SHA3 operation.\r\n\tSha3WordGas uint64 = 6  // Once per word of the SHA3 operation's data.\r\n\r\n\tSstoreSetGas    uint64 = 20000 // Once per SLOAD operation.\r\n\tSstoreResetGas  uint64 = 5000  // Once per SSTORE operation if the zeroness changes from zero.\r\n\tSstoreClearGas  uint64 = 5000  // Once per SSTORE operation if the zeroness doesn't change.\r\n\tSstoreRefundGas uint64 = 15000 // Once per SSTORE operation if the zeroness changes to zero.\r\n\r\n\tNetSstoreNoopGas  uint64 = 200   // Once per SSTORE operation if the value doesn't change.\r\n\tNetSstoreInitGas  uint64 = 20000 // Once per SSTORE operation from clean zero.\r\n\tNetSstoreCleanGas uint64 = 5000  // Once per SSTORE operation from clean non-zero.\r\n\tNetSstoreDirtyGas uint64 = 200   // Once per SSTORE operation from dirty.\r\n\r\n\tNetSstoreClearRefund      uint64 = 15000 // Once per SSTORE operation for clearing an originally existing storage slot\r\n\tNetSstoreResetRefund      uint64 = 4800  // Once per SSTORE operation for resetting to the original non-zero value\r\n\tNetSstoreResetClearRefund uint64 = 19800 // Once per SSTORE operation for resetting to the original zero value\r\n\r\n\tSstoreSentryGasEIP2200   uint64 = 2300  // Minimum gas required to be present for an SSTORE call, not consumed\r\n\tSstoreNoopGasEIP2200     uint64 = 800   // Once per SSTORE operation if the value doesn't change.\r\n\tSstoreDirtyGasEIP2200    uint64 = 800   // Once per SSTORE operation if a dirty value is changed.\r\n\tSstoreInitGasEIP2200     uint64 = 20000 // Once per SSTORE operation from clean zero to non-zero\r\n\tSstoreInitRefundEIP2200  uint64 = 19200 // Once per SSTORE operation for resetting to the original zero value\r\n\tSstoreCleanGasEIP2200    uint64 = 5000  // Once per SSTORE operation from clean non-zero to something else\r\n\tSstoreCleanRefundEIP2200 uint64 = 4200  // Once per SSTORE operation for resetting to the original non-zero value\r\n\tSstoreClearRefundEIP2200 uint64 = 15000 // Once per SSTORE operation for clearing an originally existing storage slot\r\n\r\n\tJumpdestGas   uint64 = 1     // Once per JUMPDEST operation.\r\n\tEpochDuration uint64 = 30000 // Duration between proof-of-work epochs.\r\n\r\n\tCreateDataGas            uint64 = 200   //\r\n\tCallCreateDepth          uint64 = 1024  // Maximum depth of call/create stack.\r\n\tExpGas                   uint64 = 10    // Once per EXP instruction\r\n\tLogGas                   uint64 = 375   // Per LOG* operation.\r\n\tCopyGas                  uint64 = 3     //\r\n\tStackLimit               uint64 = 1024  // Maximum size of VM stack allowed.\r\n\tTierStepGas              uint64 = 0     // Once per operation, for a selection of them.\r\n\tLogTopicGas              uint64 = 375   // Multiplied by the * of the LOG*, per LOG transaction. e.g. LOG0 incurs 0 * c_txLogTopicGas, LOG4 incurs 4 * c_txLogTopicGas.\r\n\tCreateGas                uint64 = 32000 // Once per CREATE operation & contract-creation transaction.\r\n\tCreate2Gas               uint64 = 32000 // Once per CREATE2 operation\r\n\tSelfdestructRefundGas    uint64 = 24000 // Refunded following a selfdestruct operation.\r\n\tMemoryGas                uint64 = 3     // Times the address of the (highest referenced byte in memory + 1). NOTE: referencing happens on read, write and in instructions such as RETURN and CALL.\r\n\tTxDataNonZeroGasFrontier uint64 = 68    // Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions.\r\n\tTxDataNonZeroGasEIP2028  uint64 = 16    // Per byte of non zero data attached to a transaction after EIP 2028 (part in Istanbul)\r\n\r\n\t// These have been changed during the course of the chain\r\n\tCallGasFrontier              uint64 = 40  // Once per CALL operation & message call transaction.\r\n\tCallGasEIP150                uint64 = 700 // Static portion of gas for CALL-derivates after EIP 150 (Tangerine)\r\n\tBalanceGasFrontier           uint64 = 20  // The cost of a BALANCE operation\r\n\tBalanceGasEIP150             uint64 = 400 // The cost of a BALANCE operation after Tangerine\r\n\tBalanceGasEIP1884            uint64 = 700 // The cost of a BALANCE operation after EIP 1884 (part of Istanbul)\r\n\tExtcodeSizeGasFrontier       uint64 = 20  // Cost of EXTCODESIZE before EIP 150 (Tangerine)\r\n\tExtcodeSizeGasEIP150         uint64 = 700 // Cost of EXTCODESIZE after EIP 150 (Tangerine)\r\n\tSloadGasFrontier             uint64 = 50\r\n\tSloadGasEIP150               uint64 = 200\r\n\tSloadGasEIP1884              uint64 = 800  // Cost of SLOAD after EIP 1884 (part of Istanbul)\r\n\tExtcodeHashGasConstantinople uint64 = 400  // Cost of EXTCODEHASH (introduced in Constantinople)\r\n\tExtcodeHashGasEIP1884        uint64 = 700  // Cost of EXTCODEHASH after EIP 1884 (part in Istanbul)\r\n\tSelfdestructGasEIP150        uint64 = 5000 // Cost of SELFDESTRUCT post EIP 150 (Tangerine)\r\n\r\n\t// EXP has a dynamic portion depending on the size of the exponent\r\n\tExpByteFrontier uint64 = 10 // was set to 10 in Frontier\r\n\tExpByteEIP158   uint64 = 50 // was raised to 50 during Eip158 (Spurious Dragon)\r\n\r\n\t// Extcodecopy has a dynamic AND a static cost. This represents only the\r\n\t// static portion of the gas. It was changed during EIP 150 (Tangerine)\r\n\tExtcodeCopyBaseFrontier uint64 = 20\r\n\tExtcodeCopyBaseEIP150   uint64 = 700\r\n\r\n\t// CreateBySelfdestructGas is used when the refunded account is one that does\r\n\t// not exist. This logic is similar to call.\r\n\t// Introduced in Tangerine Whistle (Eip 150)\r\n\tCreateBySelfdestructGas uint64 = 25000\r\n\r\n\tMaxCodeSize = 24576 // Maximum bytecode to permit for a contract\r\n\r\n\t// Precompiled contract gas prices\r\n\r\n\tEcrecoverGas        uint64 = 3000 // Elliptic curve sender recovery gas price\r\n\tSha256BaseGas       uint64 = 60   // Base price for a SHA256 operation\r\n\tSha256PerWordGas    uint64 = 12   // Per-word price for a SHA256 operation\r\n\tRipemd160BaseGas    uint64 = 600  // Base price for a RIPEMD160 operation\r\n\tRipemd160PerWordGas uint64 = 120  // Per-word price for a RIPEMD160 operation\r\n\tIdentityBaseGas     uint64 = 15   // Base price for a data copy operation\r\n\tIdentityPerWordGas  uint64 = 3    // Per-work price for a data copy operation\r\n\tModExpQuadCoeffDiv  uint64 = 20   // Divisor for the quadratic particle of the big int modular exponentiation\r\n\r\n\tBn256AddGasByzantium             uint64 = 500    // Byzantium gas needed for an elliptic curve addition\r\n\tBn256AddGasIstanbul              uint64 = 150    // Gas needed for an elliptic curve addition\r\n\tBn256ScalarMulGasByzantium       uint64 = 40000  // Byzantium gas needed for an elliptic curve scalar multiplication\r\n\tBn256ScalarMulGasIstanbul        uint64 = 6000   // Gas needed for an elliptic curve scalar multiplication\r\n\tBn256PairingBaseGasByzantium     uint64 = 100000 // Byzantium base price for an elliptic curve pairing check\r\n\tBn256PairingBaseGasIstanbul      uint64 = 45000  // Base price for an elliptic curve pairing check\r\n\tBn256PairingPerPointGasByzantium uint64 = 80000  // Byzantium per-point price for an elliptic curve pairing check\r\n\tBn256PairingPerPointGasIstanbul  uint64 = 34000  // Per-point price for an elliptic curve pairing check\r\n)\r\n```\r\n\r\nI modified it to:\r\n\r\n```\r\nconst (\r\n\tGasLimitBoundDivisor uint64 = 1024    // The bound divisor of the gas limit, used in update calculations.\r\n\tMinGasLimit          uint64 = 800000  // Minimum the gas limit may ever be.\r\n\tGenesisGasLimit      uint64 = 8712388 // Gas limit of the Genesis block.\r\n\r\n\tMaximumExtraDataSize  uint64 = 32    // Maximum size extra data may be after Genesis.\r\n\tExpByteGas            uint64 = 10    // Times ceil(log256(exponent)) for the EXP instruction.\r\n\tSloadGas              uint64 = 50    // Multiplied by the number of 32-byte words that are copied (round up) for any *COPY operation and added.\r\n\tCallValueTransferGas  uint64 = 9000  // Paid for CALL when the value transfer is non-zero.\r\n\tCallNewAccountGas     uint64 = 25000 // Paid for CALL when the destination address didn't exist prior.\r\n\tTxGas                 uint64 = 21000 // Per transaction not creating a contract. NOTE: Not payable on data of calls between transactions.\r\n\tTxGasContractCreation uint64 = 53000 // Per transaction that creates a contract. NOTE: Not payable on data of calls between transactions.\r\n\tTxDataZeroGas         uint64 = 4     // Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions.\r\n\tQuadCoeffDiv          uint64 = 512   // Divisor for the quadratic particle of the memory cost equation.\r\n\tLogDataGas            uint64 = 8     // Per byte in a LOG* operation's data.\r\n\tCallStipend           uint64 = 2300  // Free gas given at beginning of call.\r\n\r\n\tSha3Gas     uint64 = 30 // Once per SHA3 operation.\r\n\tSha3WordGas uint64 = 6  // Once per word of the SHA3 operation's data.\r\n\r\n\tSstoreSetGas    uint64 = 20000 // Once per SLOAD operation.\r\n\tSstoreResetGas  uint64 = 5000  // Once per SSTORE operation if the zeroness changes from zero.\r\n\tSstoreClearGas  uint64 = 5000  // Once per SSTORE operation if the zeroness doesn't change.\r\n\tSstoreRefundGas uint64 = 15000 // Once per SSTORE operation if the zeroness changes to zero.\r\n\r\n\tNetSstoreNoopGas  uint64 = 200   // Once per SSTORE operation if the value doesn't change.\r\n\tNetSstoreInitGas  uint64 = 20000 // Once per SSTORE operation from clean zero.\r\n\tNetSstoreCleanGas uint64 = 5000  // Once per SSTORE operation from clean non-zero.\r\n\tNetSstoreDirtyGas uint64 = 200   // Once per SSTORE operation from dirty.\r\n\r\n\tNetSstoreClearRefund      uint64 = 15000 // Once per SSTORE operation for clearing an originally existing storage slot\r\n\tNetSstoreResetRefund      uint64 = 4800  // Once per SSTORE operation for resetting to the original non-zero value\r\n\tNetSstoreResetClearRefund uint64 = 19800 // Once per SSTORE operation for resetting to the original zero value\r\n\r\n\tSstoreSentryGasEIP2200   uint64 = 2300  // Minimum gas required to be present for an SSTORE call, not consumed\r\n\tSstoreNoopGasEIP2200     uint64 = 800   // Once per SSTORE operation if the value doesn't change.\r\n\tSstoreDirtyGasEIP2200    uint64 = 800   // Once per SSTORE operation if a dirty value is changed.\r\n\tSstoreInitGasEIP2200     uint64 = 20000 // Once per SSTORE operation from clean zero to non-zero\r\n\tSstoreInitRefundEIP2200  uint64 = 19200 // Once per SSTORE operation for resetting to the original zero value\r\n\tSstoreCleanGasEIP2200    uint64 = 5000  // Once per SSTORE operation from clean non-zero to something else\r\n\tSstoreCleanRefundEIP2200 uint64 = 4200  // Once per SSTORE operation for resetting to the original non-zero value\r\n\tSstoreClearRefundEIP2200 uint64 = 15000 // Once per SSTORE operation for clearing an originally existing storage slot\r\n\r\n\tJumpdestGas   uint64 = 1     // Once per JUMPDEST operation.\r\n\tEpochDuration uint64 = 30000 // Duration between proof-of-work epochs.\r\n\r\n\tCreateDataGas            uint64 = 200   //\r\n\tCallCreateDepth          uint64 = 1024  // Maximum depth of call/create stack.\r\n\tExpGas                   uint64 = 10    // Once per EXP instruction\r\n\tLogGas                   uint64 = 375   // Per LOG* operation.\r\n\tCopyGas                  uint64 = 3     //\r\n\tStackLimit               uint64 = 1024  // Maximum size of VM stack allowed.\r\n\tTierStepGas              uint64 = 0     // Once per operation, for a selection of them.\r\n\tLogTopicGas              uint64 = 375   // Multiplied by the * of the LOG*, per LOG transaction. e.g. LOG0 incurs 0 * c_txLogTopicGas, LOG4 incurs 4 * c_txLogTopicGas.\r\n\tCreateGas                uint64 = 22000 // Once per CREATE operation & contract-creation transaction.\r\n\tCreate2Gas               uint64 = 22000 // Once per CREATE2 operation\r\n\tSelfdestructRefundGas    uint64 = 24000 // Refunded following a selfdestruct operation.\r\n\tMemoryGas                uint64 = 3     // Times the address of the (highest referenced byte in memory + 1). NOTE: referencing happens on read, write and in instructions such as RETURN and CALL.\r\n\tTxDataNonZeroGasFrontier uint64 = 32    // Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions.\r\n\tTxDataNonZeroGasEIP2028  uint64 = 12    // Per byte of non zero data attached to a transaction after EIP 2028 (part in Istanbul)\r\n\r\n\t// These have been changed during the course of the chain\r\n\tCallGasFrontier              uint64 = 40  // Once per CALL operation & message call transaction.\r\n\tCallGasEIP150                uint64 = 700 // Static portion of gas for CALL-derivates after EIP 150 (Tangerine)\r\n\tBalanceGasFrontier           uint64 = 20  // The cost of a BALANCE operation\r\n\tBalanceGasEIP150             uint64 = 400 // The cost of a BALANCE operation after Tangerine\r\n\tBalanceGasEIP1884            uint64 = 700 // The cost of a BALANCE operation after EIP 1884 (part of Istanbul)\r\n\tExtcodeSizeGasFrontier       uint64 = 20  // Cost of EXTCODESIZE before EIP 150 (Tangerine)\r\n\tExtcodeSizeGasEIP150         uint64 = 700 // Cost of EXTCODESIZE after EIP 150 (Tangerine)\r\n\tSloadGasFrontier             uint64 = 50\r\n\tSloadGasEIP150               uint64 = 200\r\n\tSloadGasEIP1884              uint64 = 800  // Cost of SLOAD after EIP 1884 (part of Istanbul)\r\n\tExtcodeHashGasConstantinople uint64 = 400  // Cost of EXTCODEHASH (introduced in Constantinople)\r\n\tExtcodeHashGasEIP1884        uint64 = 700  // Cost of EXTCODEHASH after EIP 1884 (part in Istanbul)\r\n\tSelfdestructGasEIP150        uint64 = 5000 // Cost of SELFDESTRUCT post EIP 150 (Tangerine)\r\n\r\n\t// EXP has a dynamic portion depending on the size of the exponent\r\n\tExpByteFrontier uint64 = 10 // was set to 10 in Frontier\r\n\tExpByteEIP158   uint64 = 50 // was raised to 50 during Eip158 (Spurious Dragon)\r\n\r\n\t// Extcodecopy has a dynamic AND a static cost. This represents only the\r\n\t// static portion of the gas. It was changed during EIP 150 (Tangerine)\r\n\tExtcodeCopyBaseFrontier uint64 = 20\r\n\tExtcodeCopyBaseEIP150   uint64 = 700\r\n\r\n\t// CreateBySelfdestructGas is used when the refunded account is one that does\r\n\t// not exist. This logic is similar to call.\r\n\t// Introduced in Tangerine Whistle (Eip 150)\r\n\tCreateBySelfdestructGas uint64 = 25000\r\n\tMaxCodeSize                    = 24576 // Maximum bytecode to permit for a contract\r\n\r\n\t// Precompiled contract gas prices\r\n\tEcrecoverGas                     uint64 = 2500  // Elliptic curve sender recovery gas price\r\n\tSha256BaseGas                    uint64 = 40    // Base price for a SHA256 operation\r\n\tSha256PerWordGas                 uint64 = 4     // Per-word price for a SHA256 operation\r\n\tRipemd160BaseGas                 uint64 = 600   // Base price for a RIPEMD160 operation\r\n\tRipemd160PerWordGas              uint64 = 50    // Per-word price for a RIPEMD160 operation\r\n\tIdentityBaseGas                  uint64 = 10    // Base price for a data copy operation\r\n\tIdentityPerWordGas               uint64 = 1     // Per-work price for a data copy operation\r\n\tModExpQuadCoeffDiv               uint64 = 10    // Divisor for the quadratic particle of the big int modular exponentiation\r\n\tBn256AddGasByzantium             uint64 = 250   // Byzantium gas needed for an elliptic curve addition\r\n\tBn256AddGasIstanbul              uint64 = 75    // Gas needed for an elliptic curve addition\r\n\tBn256ScalarMulGasByzantium       uint64 = 2000  // Byzantium gas needed for an elliptic curve scalar multiplication\r\n\tBn256ScalarMulGasIstanbul        uint64 = 3000  // Gas needed for an elliptic curve scalar multiplication\r\n\tBn256PairingBaseGasByzantium     uint64 = 50000 // Byzantium base price for an elliptic curve pairing check\r\n\tBn256PairingBaseGasIstanbul      uint64 = 22000 // Base price for an elliptic curve pairing check\r\n\tBn256PairingPerPointGasByzantium uint64 = 40000 // Byzantium per-point price for an elliptic curve pairing check\r\n\tBn256PairingPerPointGasIstanbul  uint64 = 15000 // Per-point price for an elliptic curve pairing check\r\n)\r\n```\r\n\r\nIt was working as intended until smart contract deployment.. Now nodes cannot sync and the error is:\r\n\r\n```\r\nERROR[09-23|10:34:52.762]\r\n########## BAD BLOCK #########\r\nChain config: {ChainID: 41890 Homestead: 0 DAO: 0 DAOSupport: true EIP150: 0 EIP155: 0 EIP158: 0 Byzantium: 0 Constantinople: 200 Petersburg: 250 Istanbul: 350 Engine: ethash }\r\nNumber: 403\r\nHash: 0x7055412b4a56d9e6b8337b99c79854dca76d943ee6ee2be52a6cee99d47b34ae\r\n0: cumulative: 483076 gas: 483076 contract: 0x986F4B8495392E841E2Bc6cbAD1cd23de6E3169d status: 1 tx: 0x62279690a48410a8c559cabb7a412e5d72cb7ba6b3ce6a6dbdf96ad740daeb6a logs: [] bloomstate:\r\nError: invalid merkle root (remote: 2a0d3054697def030adddc23f41b84ae3add041e5ff40745a3b7e0b205021f66 local: 61ca3e376d1cdaa68cdeb41051fef801c85e09afbdee46e19550beaef663651f)\r\n############################## \r\nWARN [09-23|10:34:52.764] Synchronisation failed, dropping peer    peer=f227374bcd5f39ff err=\"retrieved hash chain is invalid\"\r\n```\r\n\r\nPlease could you help me, I really want to learn more about ethereum & I'm new to golang I probably just made a stupid mistake.. Sorry If I am wasting time.\r\n",
  "closed_by": {
    "login": "karalabe",
    "id": 129561,
    "node_id": "MDQ6VXNlcjEyOTU2MQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/129561?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/karalabe",
    "html_url": "https://github.com/karalabe",
    "followers_url": "https://api.github.com/users/karalabe/followers",
    "following_url": "https://api.github.com/users/karalabe/following{/other_user}",
    "gists_url": "https://api.github.com/users/karalabe/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/karalabe/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/karalabe/subscriptions",
    "organizations_url": "https://api.github.com/users/karalabe/orgs",
    "repos_url": "https://api.github.com/users/karalabe/repos",
    "events_url": "https://api.github.com/users/karalabe/events{/privacy}",
    "received_events_url": "https://api.github.com/users/karalabe/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20112/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20112/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/534105016",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/20112#issuecomment-534105016",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20112",
    "id": 534105016,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzNDEwNTAxNg==",
    "user": {
      "login": "karalabe",
      "id": 129561,
      "node_id": "MDQ6VXNlcjEyOTU2MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/129561?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/karalabe",
      "html_url": "https://github.com/karalabe",
      "followers_url": "https://api.github.com/users/karalabe/followers",
      "following_url": "https://api.github.com/users/karalabe/following{/other_user}",
      "gists_url": "https://api.github.com/users/karalabe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/karalabe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/karalabe/subscriptions",
      "organizations_url": "https://api.github.com/users/karalabe/orgs",
      "repos_url": "https://api.github.com/users/karalabe/repos",
      "events_url": "https://api.github.com/users/karalabe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/karalabe/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-09-23T13:43:54Z",
    "updated_at": "2019-09-23T13:43:54Z",
    "author_association": "MEMBER",
    "body": "I'm sorry, but we are unable to support code changes that touch on consensus parameters. The EVM is intricate enough in itself, we can't debug potential issues with no repro, no code, no data available, just some parameters modified.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/534105016/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/534119462",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/20112#issuecomment-534119462",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20112",
    "id": 534119462,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzNDExOTQ2Mg==",
    "user": {
      "login": "insxnic",
      "id": 53305690,
      "node_id": "MDQ6VXNlcjUzMzA1Njkw",
      "avatar_url": "https://avatars.githubusercontent.com/u/53305690?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/insxnic",
      "html_url": "https://github.com/insxnic",
      "followers_url": "https://api.github.com/users/insxnic/followers",
      "following_url": "https://api.github.com/users/insxnic/following{/other_user}",
      "gists_url": "https://api.github.com/users/insxnic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/insxnic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/insxnic/subscriptions",
      "organizations_url": "https://api.github.com/users/insxnic/orgs",
      "repos_url": "https://api.github.com/users/insxnic/repos",
      "events_url": "https://api.github.com/users/insxnic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/insxnic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-09-23T14:17:29Z",
    "updated_at": "2019-09-23T14:17:29Z",
    "author_association": "NONE",
    "body": "I appreciate the time anyway, thank you. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/534119462/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
