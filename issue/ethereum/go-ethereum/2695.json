{
  "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/2695",
  "repository_url": "https://api.github.com/repos/ethereum/go-ethereum",
  "labels_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/2695/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/2695/comments",
  "events_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/2695/events",
  "html_url": "https://github.com/ethereum/go-ethereum/issues/2695",
  "id": 160214253,
  "node_id": "MDU6SXNzdWUxNjAyMTQyNTM=",
  "number": 2695,
  "title": "RPC Filter APIs for processing events dont work well with the need to read from committed blocks",
  "user": {
    "login": "dabooz",
    "id": 14004614,
    "node_id": "MDQ6VXNlcjE0MDA0NjE0",
    "avatar_url": "https://avatars.githubusercontent.com/u/14004614?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/dabooz",
    "html_url": "https://github.com/dabooz",
    "followers_url": "https://api.github.com/users/dabooz/followers",
    "following_url": "https://api.github.com/users/dabooz/following{/other_user}",
    "gists_url": "https://api.github.com/users/dabooz/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/dabooz/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/dabooz/subscriptions",
    "organizations_url": "https://api.github.com/users/dabooz/orgs",
    "repos_url": "https://api.github.com/users/dabooz/repos",
    "events_url": "https://api.github.com/users/dabooz/events{/privacy}",
    "received_events_url": "https://api.github.com/users/dabooz/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 72233652,
      "node_id": "MDU6TGFiZWw3MjIzMzY1Mg==",
      "url": "https://api.github.com/repos/ethereum/go-ethereum/labels/type:feature",
      "name": "type:feature",
      "color": "84b6eb",
      "default": false,
      "description": null
    },
    {
      "id": 856638432,
      "node_id": "MDU6TGFiZWw4NTY2Mzg0MzI=",
      "url": "https://api.github.com/repos/ethereum/go-ethereum/labels/status:inactive",
      "name": "status:inactive",
      "color": "ffffff",
      "default": false,
      "description": null
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 5,
  "created_at": "2016-06-14T15:39:30Z",
  "updated_at": "2018-04-16T16:37:29Z",
  "closed_at": "2018-04-16T16:37:29Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "#### System information\n\nGeth version: all\nOS & Version: all\nCommit hash : \n#### Expected behaviour\n\nThis is really a design problem with the RPC API, not specific to the go implementation. If this issue needs to be forwarded to another issue repo, please let me know how and where.\n\nIn order to observe stable contract state and a stable event streams, eth apps need to be sure that they only read from committed blocks. This usually means reading from blocks not newer than a small number of blocks from the top of the chain. This makes the eth_getFilterChanges() API useless, eth_getFilterLogs() is all you need since the end block has to be fixed, and can never be \"latest\". Further, since the blocks that a given filter instance reads from are not modifiable, eth apps that process event streams must constantly obtain new filters to cover the new blocks as they are created over time. This is harder than it needs to be for eth apps. If there were an API to create a filter that read to the latest-x (where x is the number of committed blocks you want), then we could use a single filter with eth_getFilterChanges to see stable event streams without having to throw away and re-obtain new filters every few blocks.\n#### Actual behaviour\n#### Steps to reproduce the behaviour\n#### Backtrace\n\n```\n[backtrace]\n```\n",
  "closed_by": {
    "login": "stale[bot]",
    "id": 26384082,
    "node_id": "MDM6Qm90MjYzODQwODI=",
    "avatar_url": "https://avatars.githubusercontent.com/in/1724?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/stale%5Bbot%5D",
    "html_url": "https://github.com/apps/stale",
    "followers_url": "https://api.github.com/users/stale%5Bbot%5D/followers",
    "following_url": "https://api.github.com/users/stale%5Bbot%5D/following{/other_user}",
    "gists_url": "https://api.github.com/users/stale%5Bbot%5D/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/stale%5Bbot%5D/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/stale%5Bbot%5D/subscriptions",
    "organizations_url": "https://api.github.com/users/stale%5Bbot%5D/orgs",
    "repos_url": "https://api.github.com/users/stale%5Bbot%5D/repos",
    "events_url": "https://api.github.com/users/stale%5Bbot%5D/events{/privacy}",
    "received_events_url": "https://api.github.com/users/stale%5Bbot%5D/received_events",
    "type": "Bot",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/2695/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/2695/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/226757860",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/2695#issuecomment-226757860",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/2695",
    "id": 226757860,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNjc1Nzg2MA==",
    "user": {
      "login": "frozeman",
      "id": 232662,
      "node_id": "MDQ6VXNlcjIzMjY2Mg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/232662?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frozeman",
      "html_url": "https://github.com/frozeman",
      "followers_url": "https://api.github.com/users/frozeman/followers",
      "following_url": "https://api.github.com/users/frozeman/following{/other_user}",
      "gists_url": "https://api.github.com/users/frozeman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frozeman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frozeman/subscriptions",
      "organizations_url": "https://api.github.com/users/frozeman/orgs",
      "repos_url": "https://api.github.com/users/frozeman/repos",
      "events_url": "https://api.github.com/users/frozeman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frozeman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-17T12:37:33Z",
    "updated_at": "2016-06-17T12:37:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "I don't really follow your description. why is `eth_getFilterChanges('latest', 'latest')` a bad idea to get incoming blocks and its events?\n\nwe already added that your also get notified about revisions. You now get logs with `removed: true` if it was removed due to a fork\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/226757860/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/228930136",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/2695#issuecomment-228930136",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/2695",
    "id": 228930136,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyODkzMDEzNg==",
    "user": {
      "login": "phleemac",
      "id": 11630200,
      "node_id": "MDQ6VXNlcjExNjMwMjAw",
      "avatar_url": "https://avatars.githubusercontent.com/u/11630200?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/phleemac",
      "html_url": "https://github.com/phleemac",
      "followers_url": "https://api.github.com/users/phleemac/followers",
      "following_url": "https://api.github.com/users/phleemac/following{/other_user}",
      "gists_url": "https://api.github.com/users/phleemac/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/phleemac/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/phleemac/subscriptions",
      "organizations_url": "https://api.github.com/users/phleemac/orgs",
      "repos_url": "https://api.github.com/users/phleemac/repos",
      "events_url": "https://api.github.com/users/phleemac/events{/privacy}",
      "received_events_url": "https://api.github.com/users/phleemac/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-28T02:16:27Z",
    "updated_at": "2016-06-28T02:16:27Z",
    "author_association": "NONE",
    "body": "@frozeman Could you please give more details about the `removed: true` field?  I couldn't find any mentions of it in the [https://github.com/ethereum/wiki/wiki/JSON-RPC](https://github.com/ethereum/wiki/wiki/JSON-RPC)\n\nAnother discrepancy is the `tag` field from `eth_getFilterChanges`.  It is mentioned in the wiki page but not in the actual result I've got using Geth:\n\n> Geth\n> Version: 1.4.7-stable-667a386d\n> Protocol Versions: [63 62 61]\n> Network Id: 1\n> Go Version: go1.6.2\n> OS: linux\n> GOPATH=\n> GOROOT=/opt/google/go\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/228930136/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/229139767",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/2695#issuecomment-229139767",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/2695",
    "id": 229139767,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyOTEzOTc2Nw==",
    "user": {
      "login": "dabooz",
      "id": 14004614,
      "node_id": "MDQ6VXNlcjE0MDA0NjE0",
      "avatar_url": "https://avatars.githubusercontent.com/u/14004614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dabooz",
      "html_url": "https://github.com/dabooz",
      "followers_url": "https://api.github.com/users/dabooz/followers",
      "following_url": "https://api.github.com/users/dabooz/following{/other_user}",
      "gists_url": "https://api.github.com/users/dabooz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dabooz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dabooz/subscriptions",
      "organizations_url": "https://api.github.com/users/dabooz/orgs",
      "repos_url": "https://api.github.com/users/dabooz/repos",
      "events_url": "https://api.github.com/users/dabooz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dabooz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-28T18:30:02Z",
    "updated_at": "2016-06-28T18:30:02Z",
    "author_association": "NONE",
    "body": "@frozeman \nA dapp that is working from an event stream becomes exponentially difficult to write if it has to have compensation logic to deal with the fact that an event which it thought occurred in the past actually never occurred at all.\n\nMy point about eth_getFilterChanges is this:\nIf the dapp needs to have a stable event stream (i.e. events dont go away because forks are resolved before events are surfaced to the event handler in the dapp), then the only choice is to NOT read events from blocks that are newer than some x number of blocks from the top of the chain. Usually this is 5 blocks. The only filter API which allows me to read up to a specific block is getFilterLogs() with a start and end block where end is obviously never latest. As time moves on, new blocks are added to the chain and the old end is no longer the end. The end is now whatever the new top is minus 5 blocks is. But my filter stops at the old end, so now I have to throw away that filter and create a new one that covers the new blocks, ending 5 from the top. I would read the events again with getFilterLogs(). This pattern continues forever. Notice that I dont use getFilterChanges(), that's why I say it's useless. I can't use it at all because it always ends at latest. Latest is very hard for dapps to deal with. What I really want is an API like getFIlterChanges() where the end block is dynamically managed for me (it's not latest, it's latest minus x where x is something I specify, probably 5). In doing this, I can avoid throwing away filters all the time and creating new ones. I will have less code to manage as a dapp.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/229139767/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/233422498",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/2695#issuecomment-233422498",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/2695",
    "id": 233422498,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzMzQyMjQ5OA==",
    "user": {
      "login": "frozeman",
      "id": 232662,
      "node_id": "MDQ6VXNlcjIzMjY2Mg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/232662?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frozeman",
      "html_url": "https://github.com/frozeman",
      "followers_url": "https://api.github.com/users/frozeman/followers",
      "following_url": "https://api.github.com/users/frozeman/following{/other_user}",
      "gists_url": "https://api.github.com/users/frozeman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frozeman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frozeman/subscriptions",
      "organizations_url": "https://api.github.com/users/frozeman/orgs",
      "repos_url": "https://api.github.com/users/frozeman/repos",
      "events_url": "https://api.github.com/users/frozeman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frozeman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-18T18:51:21Z",
    "updated_at": "2016-07-18T18:52:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "@phleemac sorry for the unclear docs, this type thing was discussed a long time ago, but never added in geth or cross clients. I think only cpp had it.\n\nThe `removed: true/false` though is a default now and should be added by all clients. \nI updated the docs.\n\n@dabooz now i get it. This would need to be implemented in geth directly and maybe @bas-vk has an idea here, if that could be added easily.\n\n@bas-vk to shorten it, he wants a way tp get events from -5 blocks etc. back, so that he doesn't have to deal with chain reorgs. Tho one needs to mention, that even at -10 blocks chain reports still can happen.\n\nOtherwise with the new `removed: true` tag in the log you can see if a log was removed and revert its actions in your UI.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/233422498/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/370461452",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/2695#issuecomment-370461452",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/2695",
    "id": 370461452,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MDQ2MTQ1Mg==",
    "user": {
      "login": "stale[bot]",
      "id": 26384082,
      "node_id": "MDM6Qm90MjYzODQwODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/1724?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stale%5Bbot%5D",
      "html_url": "https://github.com/apps/stale",
      "followers_url": "https://api.github.com/users/stale%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/stale%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/stale%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stale%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stale%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/stale%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/stale%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/stale%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stale%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2018-03-05T15:44:38Z",
    "updated_at": "2018-03-05T15:44:38Z",
    "author_association": "NONE",
    "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/370461452/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
