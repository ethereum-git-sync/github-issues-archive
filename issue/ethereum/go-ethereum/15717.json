{
  "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/15717",
  "repository_url": "https://api.github.com/repos/ethereum/go-ethereum",
  "labels_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/15717/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/15717/comments",
  "events_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/15717/events",
  "html_url": "https://github.com/ethereum/go-ethereum/issues/15717",
  "id": 283537704,
  "node_id": "MDU6SXNzdWUyODM1Mzc3MDQ=",
  "number": 15717,
  "title": "Research alternatives to leveldb (like badger)",
  "user": {
    "login": "cdetrio",
    "id": 997681,
    "node_id": "MDQ6VXNlcjk5NzY4MQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/997681?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cdetrio",
    "html_url": "https://github.com/cdetrio",
    "followers_url": "https://api.github.com/users/cdetrio/followers",
    "following_url": "https://api.github.com/users/cdetrio/following{/other_user}",
    "gists_url": "https://api.github.com/users/cdetrio/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cdetrio/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cdetrio/subscriptions",
    "organizations_url": "https://api.github.com/users/cdetrio/orgs",
    "repos_url": "https://api.github.com/users/cdetrio/repos",
    "events_url": "https://api.github.com/users/cdetrio/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cdetrio/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1132689577,
      "node_id": "MDU6TGFiZWwxMTMyNjg5NTc3",
      "url": "https://api.github.com/repos/ethereum/go-ethereum/labels/status:triage",
      "name": "status:triage",
      "color": "6be514",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 37,
  "created_at": "2017-12-20T11:49:24Z",
  "updated_at": "2021-01-21T10:00:29Z",
  "closed_at": "2021-01-21T10:00:29Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "As [discussed](https://github.com/ethereum/pm/issues/28#issuecomment-351972476) on All Core Devs meeting 30, there is already an experimental branch that replaces leveldb with [badger](https://github.com/dgraph-io/badger): https://github.com/fjl/go-ethereum/tree/badger-exp\r\n\r\nBadger has since been updated, so it would be interesting to try again with the latest badger and run some benchmarks, especially with a large database (30gb+).",
  "closed_by": {
    "login": "ligi",
    "id": 111600,
    "node_id": "MDQ6VXNlcjExMTYwMA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/111600?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ligi",
    "html_url": "https://github.com/ligi",
    "followers_url": "https://api.github.com/users/ligi/followers",
    "following_url": "https://api.github.com/users/ligi/following{/other_user}",
    "gists_url": "https://api.github.com/users/ligi/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ligi/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ligi/subscriptions",
    "organizations_url": "https://api.github.com/users/ligi/orgs",
    "repos_url": "https://api.github.com/users/ligi/repos",
    "events_url": "https://api.github.com/users/ligi/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ligi/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/15717/reactions",
    "total_count": 3,
    "+1": 3,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/15717/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/353045468",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/15717#issuecomment-353045468",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/15717",
    "id": 353045468,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MzA0NTQ2OA==",
    "user": {
      "login": "fjl",
      "id": 6915,
      "node_id": "MDQ6VXNlcjY5MTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6915?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjl",
      "html_url": "https://github.com/fjl",
      "followers_url": "https://api.github.com/users/fjl/followers",
      "following_url": "https://api.github.com/users/fjl/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjl/subscriptions",
      "organizations_url": "https://api.github.com/users/fjl/orgs",
      "repos_url": "https://api.github.com/users/fjl/repos",
      "events_url": "https://api.github.com/users/fjl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjl/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-20T12:01:29Z",
    "updated_at": "2017-12-20T12:02:04Z",
    "author_association": "MEMBER",
    "body": "Badger's API has changed a lot since the experiment. It now features a transaction-based API, i.e. the only way to use the database is:\n\n```go\nerr := db.Update(func(tx *badger.Txn) error {\n    // write to tx\n})\n```\n\nThis is incompatible with our use of leveldb. I tried to convert go-ethereum to use this style of database access in the past, but there's just too much code that uses the DB directly. Notably, converting to this style would also give us the option to try out boltdb (a mature KV store) and most SQL databases. It might be worth doing this.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/353045468/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/353965462",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/15717#issuecomment-353965462",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/15717",
    "id": 353965462,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1Mzk2NTQ2Mg==",
    "user": {
      "login": "ghost",
      "id": 10137,
      "node_id": "MDQ6VXNlcjEwMTM3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10137?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghost",
      "html_url": "https://github.com/ghost",
      "followers_url": "https://api.github.com/users/ghost/followers",
      "following_url": "https://api.github.com/users/ghost/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
      "organizations_url": "https://api.github.com/users/ghost/orgs",
      "repos_url": "https://api.github.com/users/ghost/repos",
      "events_url": "https://api.github.com/users/ghost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghost/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-26T12:52:07Z",
    "updated_at": "2017-12-26T12:52:07Z",
    "author_association": "NONE",
    "body": "no.... that won't really solve anything really. the problem you're thinking of is that it's quite slow to search but thats because its not indexed. To do this on the level that etherscan works, you would need to use something like solr/lucene to index the blockchain transactions, block ids, addresses, ect. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/353965462/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/357955143",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/15717#issuecomment-357955143",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/15717",
    "id": 357955143,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1Nzk1NTE0Mw==",
    "user": {
      "login": "ArchetypicalDude",
      "id": 34767424,
      "node_id": "MDQ6VXNlcjM0NzY3NDI0",
      "avatar_url": "https://avatars.githubusercontent.com/u/34767424?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ArchetypicalDude",
      "html_url": "https://github.com/ArchetypicalDude",
      "followers_url": "https://api.github.com/users/ArchetypicalDude/followers",
      "following_url": "https://api.github.com/users/ArchetypicalDude/following{/other_user}",
      "gists_url": "https://api.github.com/users/ArchetypicalDude/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ArchetypicalDude/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ArchetypicalDude/subscriptions",
      "organizations_url": "https://api.github.com/users/ArchetypicalDude/orgs",
      "repos_url": "https://api.github.com/users/ArchetypicalDude/repos",
      "events_url": "https://api.github.com/users/ArchetypicalDude/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ArchetypicalDude/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-16T13:12:36Z",
    "updated_at": "2018-01-16T13:12:36Z",
    "author_association": "NONE",
    "body": "Hi guys,\r\n\r\nI did some tinkering the last few days with LevelDB's BlockSize and CompactionTableSize. Could get some minor improvements on block processing speed on a fully synced node, but really nothing to write home about.\r\n\r\nI am pretty inexperienced in go but I'm beginning to find my way through the geth code. I'm planning to spend a few hours per day the next weeks to try and find some database improvements, including trying some different database implementations like badger.\r\n\r\nJust thought I'd let you know. Very thankful for any suggestions on how to best proceed, for now I'm just hacking away :)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/357955143/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/366507947",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/15717#issuecomment-366507947",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/15717",
    "id": 366507947,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NjUwNzk0Nw==",
    "user": {
      "login": "ArchetypicalDude",
      "id": 34767424,
      "node_id": "MDQ6VXNlcjM0NzY3NDI0",
      "avatar_url": "https://avatars.githubusercontent.com/u/34767424?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ArchetypicalDude",
      "html_url": "https://github.com/ArchetypicalDude",
      "followers_url": "https://api.github.com/users/ArchetypicalDude/followers",
      "following_url": "https://api.github.com/users/ArchetypicalDude/following{/other_user}",
      "gists_url": "https://api.github.com/users/ArchetypicalDude/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ArchetypicalDude/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ArchetypicalDude/subscriptions",
      "organizations_url": "https://api.github.com/users/ArchetypicalDude/orgs",
      "repos_url": "https://api.github.com/users/ArchetypicalDude/repos",
      "events_url": "https://api.github.com/users/ArchetypicalDude/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ArchetypicalDude/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-18T10:59:42Z",
    "updated_at": "2018-02-18T11:02:00Z",
    "author_association": "NONE",
    "body": "Finally got a full sync with badger working :) Will commit the code somewhere shortly after I have cleaned up a bit. Had to build another badger-specific-cache to really utilize batch writes and vandalized quite a bit of the existing cache-code...\r\n\r\n> INFO [02-18|09:24:38] Imported new chain segment               blocks=1  txs=182  mgas=7.923   elapsed=190.492ms mgasps=41.590  number=5111857 hash=7afaee…29989d cache=303.06mB\r\nINFO [02-18|09:25:26] Imported new chain segment               blocks=1  txs=96   mgas=7.927   elapsed=109.296ms mgasps=72.524  number=5111858 hash=b879d0…a64438 cache=303.23mB\r\nINFO [02-18|09:25:50] Imported new chain segment               blocks=1  txs=178  mgas=7.950   elapsed=177.426ms mgasps=44.809  number=5111859 hash=124149…a8bddb cache=303.99mB\r\nINFO [02-18|09:25:59] Imported new chain segment               blocks=1  txs=169  mgas=7.958   elapsed=166.438ms mgasps=47.813  number=5111860 hash=e9f4d7…ef06ea cache=304.16mB\r\nINFO [02-18|09:26:11] Imported new chain segment               blocks=1  txs=138  mgas=5.386   elapsed=98.170ms  mgasps=54.868  number=5111861 hash=5d320b…1455fa cache=304.00mB\r\nINFO [02-18|09:26:26] Imported new chain segment               blocks=1  txs=124  mgas=7.948   elapsed=143.951ms mgasps=55.214  number=5111862 hash=ccf757…ce47cc cache=304.19mB\r\nINFO [02-18|09:26:29] Imported new chain segment               blocks=1  txs=80   mgas=3.336   elapsed=67.780ms  mgasps=49.219  number=5111863 hash=e93110…73a09d cache=304.03mB\r\nINFO [02-18|09:26:50] Imported new chain segment               blocks=1  txs=102  mgas=5.134   elapsed=100.398ms mgasps=51.138  number=5111864 hash=70442f…57f599 cache=304.02mB\r\nINFO [02-18|09:27:16] Imported new chain segment               blocks=1  txs=165  mgas=7.981   elapsed=202.147ms mgasps=39.480  number=5111865 hash=dc7d83…636a6e cache=304.70mB\r\nINFO [02-18|09:27:26] Imported new chain segment               blocks=1  txs=83   mgas=3.670   elapsed=69.384ms  mgasps=52.893  number=5111866 hash=9c0386…e9e366 cache=304.85mB\r\nINFO [02-18|09:27:29] Imported new chain segment               blocks=1  txs=129  mgas=7.882   elapsed=120.171ms mgasps=65.589  number=5111867 hash=ea1cf1…ea37be cache=304.75mB\r\nINFO [02-18|09:27:40] Imported new chain segment               blocks=1  txs=20   mgas=2.126   elapsed=28.243ms  mgasps=75.264  number=5111868 hash=01c3ce…e947bb cache=304.58mB\r\nINFO [02-18|09:27:44] Imported new chain segment               blocks=1  txs=63   mgas=7.892   elapsed=68.542ms  mgasps=115.143 number=5111869 hash=5a99d0…214815 cache=303.95mB\r\nINFO [02-18|09:28:12] Imported new chain segment               blocks=1  txs=37   mgas=7.997   elapsed=74.055ms  mgasps=107.988 number=5111870 hash=370821…beec02 cache=303.77mB\r\nINFO [02-18|09:28:15] Imported new chain segment               blocks=1  txs=124  mgas=7.981   elapsed=154.709ms mgasps=51.584  number=5111871 hash=d7fa00…b855bf cache=303.93mB\r\nINFO [02-18|09:28:22] Imported new chain segment               blocks=1  txs=36   mgas=7.951   elapsed=126.091ms mgasps=63.057  number=5111872 hash=aa818b…f990d2 cache=303.74mB\r\nINFO [02-18|09:28:35] Imported new chain segment               blocks=1  txs=140  mgas=7.988   elapsed=142.994ms mgasps=55.863  number=5111873 hash=7181b3…6579c9 cache=303.75mB\r\nINFO [02-18|09:28:40] Imported new chain segment               blocks=1  txs=86   mgas=3.859   elapsed=76.347ms  mgasps=50.551  number=5111874 hash=71a0c9…bd138f cache=304.24mB",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/366507947/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/366515891",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/15717#issuecomment-366515891",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/15717",
    "id": 366515891,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NjUxNTg5MQ==",
    "user": {
      "login": "holiman",
      "id": 142290,
      "node_id": "MDQ6VXNlcjE0MjI5MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/142290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/holiman",
      "html_url": "https://github.com/holiman",
      "followers_url": "https://api.github.com/users/holiman/followers",
      "following_url": "https://api.github.com/users/holiman/following{/other_user}",
      "gists_url": "https://api.github.com/users/holiman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/holiman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/holiman/subscriptions",
      "organizations_url": "https://api.github.com/users/holiman/orgs",
      "repos_url": "https://api.github.com/users/holiman/repos",
      "events_url": "https://api.github.com/users/holiman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/holiman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-18T13:23:37Z",
    "updated_at": "2018-02-18T13:23:37Z",
    "author_association": "MEMBER",
    "body": "Super! It'll be very interesting to see some benchmark comparisons",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/366515891/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/366937562",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/15717#issuecomment-366937562",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/15717",
    "id": 366937562,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NjkzNzU2Mg==",
    "user": {
      "login": "ArchetypicalDude",
      "id": 34767424,
      "node_id": "MDQ6VXNlcjM0NzY3NDI0",
      "avatar_url": "https://avatars.githubusercontent.com/u/34767424?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ArchetypicalDude",
      "html_url": "https://github.com/ArchetypicalDude",
      "followers_url": "https://api.github.com/users/ArchetypicalDude/followers",
      "following_url": "https://api.github.com/users/ArchetypicalDude/following{/other_user}",
      "gists_url": "https://api.github.com/users/ArchetypicalDude/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ArchetypicalDude/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ArchetypicalDude/subscriptions",
      "organizations_url": "https://api.github.com/users/ArchetypicalDude/orgs",
      "repos_url": "https://api.github.com/users/ArchetypicalDude/repos",
      "events_url": "https://api.github.com/users/ArchetypicalDude/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ArchetypicalDude/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-20T10:42:04Z",
    "updated_at": "2018-02-20T10:42:04Z",
    "author_association": "NONE",
    "body": "Here it is, still a bit messy I guess:\r\nhttps://github.com/ArchetypicalDude/go-ethereum/commit/acdd9939ea8f686918ef247da3983b4a7d57a988\r\n\r\nFeel free to tell me any benchmarks you would be interested in!",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/366937562/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/371138600",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/15717#issuecomment-371138600",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/15717",
    "id": 371138600,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MTEzODYwMA==",
    "user": {
      "login": "ArchetypicalDude",
      "id": 34767424,
      "node_id": "MDQ6VXNlcjM0NzY3NDI0",
      "avatar_url": "https://avatars.githubusercontent.com/u/34767424?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ArchetypicalDude",
      "html_url": "https://github.com/ArchetypicalDude",
      "followers_url": "https://api.github.com/users/ArchetypicalDude/followers",
      "following_url": "https://api.github.com/users/ArchetypicalDude/following{/other_user}",
      "gists_url": "https://api.github.com/users/ArchetypicalDude/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ArchetypicalDude/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ArchetypicalDude/subscriptions",
      "organizations_url": "https://api.github.com/users/ArchetypicalDude/orgs",
      "repos_url": "https://api.github.com/users/ArchetypicalDude/repos",
      "events_url": "https://api.github.com/users/ArchetypicalDude/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ArchetypicalDude/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-07T13:30:35Z",
    "updated_at": "2018-03-07T13:30:35Z",
    "author_association": "NONE",
    "body": "So time is pretty scarce at the moment, I'll just write down the results which seem most interesting to me. Did a fast-sync from scratch on a fairly powerful machine (i7, 32gb ram, SSD) until block 5207200, ~101 million state entries were downloaded. Geth-version was 1.8.3 from the master branch:\r\n\r\n- LevelDb: Duration ~4h 45m, chaindata-size 69gb\r\n- BadgerDb: Duration ~2h 35m, chaindata-size 159gb\r\n- Once synced, block processing time/mgasps is pretty much exactly the same\r\n-  Block processing duration is more dependent on number of transactions in the block, not so much on gas used in the block\r\n- No hiccups/crashes/problems at all while syncing, geth 1.8 is really great work!\r\n\r\nSo I'd say BadgerDb offers better write performance, which is reflected in the shorter syncing-duration. Read performance is not particularly great, so there is no speed up in transaction/block processing, where lots of reads on the state database need to be performed. Not yet really sure why badger uses that much more disk space. Maybe I messed something up, maybe there is just more write amplification in the way data is stored inside BadgerDb. Will look further into these things, I enjoy hacking on go-ethereum very much. Will also try out BoltDb for sure.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/371138600/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/372032202",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/15717#issuecomment-372032202",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/15717",
    "id": 372032202,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MjAzMjIwMg==",
    "user": {
      "login": "cdetrio",
      "id": 997681,
      "node_id": "MDQ6VXNlcjk5NzY4MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/997681?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cdetrio",
      "html_url": "https://github.com/cdetrio",
      "followers_url": "https://api.github.com/users/cdetrio/followers",
      "following_url": "https://api.github.com/users/cdetrio/following{/other_user}",
      "gists_url": "https://api.github.com/users/cdetrio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cdetrio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cdetrio/subscriptions",
      "organizations_url": "https://api.github.com/users/cdetrio/orgs",
      "repos_url": "https://api.github.com/users/cdetrio/repos",
      "events_url": "https://api.github.com/users/cdetrio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cdetrio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-10T14:02:00Z",
    "updated_at": "2018-03-10T14:02:00Z",
    "author_association": "MEMBER",
    "body": "@ArchetypicalDude that's great! It'd be helpful to have more detailed performance profiling, e.g. quartile and 95% measurements of the write latency. These are already available for geth leveldb usage, in go-metrics https://github.com/ethereum/go-ethereum/wiki/Metrics-and-Monitoring\r\n\r\nAlso wondering, does your branch change all geth DB usage to badger's transaction-based API?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/372032202/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/372366380",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/15717#issuecomment-372366380",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/15717",
    "id": 372366380,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MjM2NjM4MA==",
    "user": {
      "login": "ArchetypicalDude",
      "id": 34767424,
      "node_id": "MDQ6VXNlcjM0NzY3NDI0",
      "avatar_url": "https://avatars.githubusercontent.com/u/34767424?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ArchetypicalDude",
      "html_url": "https://github.com/ArchetypicalDude",
      "followers_url": "https://api.github.com/users/ArchetypicalDude/followers",
      "following_url": "https://api.github.com/users/ArchetypicalDude/following{/other_user}",
      "gists_url": "https://api.github.com/users/ArchetypicalDude/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ArchetypicalDude/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ArchetypicalDude/subscriptions",
      "organizations_url": "https://api.github.com/users/ArchetypicalDude/orgs",
      "repos_url": "https://api.github.com/users/ArchetypicalDude/repos",
      "events_url": "https://api.github.com/users/ArchetypicalDude/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ArchetypicalDude/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-12T16:11:29Z",
    "updated_at": "2018-03-12T16:11:29Z",
    "author_association": "NONE",
    "body": "I'll have a closer look at the existing metrics and monitoring starting tomorrow and will provide more detailed numbers :)\r\n\r\nAll data that is written to disk through the ethdb/interface.go is using the transaction-based API. Exception from that is only a very simple cache: PUTS (batch and single write operations) are first put into a map[string][]byte and are then flushed to disk in a single transaction when the map gets large enough. I think the database gets even bigger when using a transaction for every single key-value-pair, but I'll have to test that more accurately.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/372366380/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/374576889",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/15717#issuecomment-374576889",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/15717",
    "id": 374576889,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NDU3Njg4OQ==",
    "user": {
      "login": "ArchetypicalDude",
      "id": 34767424,
      "node_id": "MDQ6VXNlcjM0NzY3NDI0",
      "avatar_url": "https://avatars.githubusercontent.com/u/34767424?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ArchetypicalDude",
      "html_url": "https://github.com/ArchetypicalDude",
      "followers_url": "https://api.github.com/users/ArchetypicalDude/followers",
      "following_url": "https://api.github.com/users/ArchetypicalDude/following{/other_user}",
      "gists_url": "https://api.github.com/users/ArchetypicalDude/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ArchetypicalDude/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ArchetypicalDude/subscriptions",
      "organizations_url": "https://api.github.com/users/ArchetypicalDude/orgs",
      "repos_url": "https://api.github.com/users/ArchetypicalDude/repos",
      "events_url": "https://api.github.com/users/ArchetypicalDude/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ArchetypicalDude/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-20T12:17:33Z",
    "updated_at": "2018-03-20T12:17:33Z",
    "author_association": "NONE",
    "body": "Implemented the metrics-module and stripped out my ghettocache to make results from the different key-value-stores more comparable (it didn't really improve things anyway). Also added a branch which uses BoltDB. Meters and Timers should get updated at the exact same function calls throughout the different implementations. I also added one Meter and two Timers to get batch operations into the statistics. Before only single PUTs were measured. They are available under:\r\n\r\n- eth/db/chaindata/user/batchPuts\r\n- eth/db/chaindata/user/batchWriteTimes\r\n- eth/db/chaindata/user/batchWrites\r\n\r\nI pulled the following stats while fast-syncing when the database gets really hammered via \"debug.metrics(false).eth.db.chaindata\". Used hardware is almost identical.\r\n**LevelDB:**\r\n\r\n> {\r\n  compact: {\r\n    input: {\r\n      Avg01Min: \"713.27M (11.89M/s)\",\r\n      Avg05Min: \"5.19G (17.29M/s)\",\r\n      Avg15Min: \"11.57G (12.85M/s)\",\r\n      Overall: \"28.30G (9.99M/s)\"\r\n    },\r\n    output: {\r\n      Avg01Min: \"713.10M (11.88M/s)\",\r\n      Avg05Min: \"5.25G (17.49M/s)\",\r\n      Avg15Min: \"13.35G (14.84M/s)\",\r\n      Overall: \"42.53G (15.02M/s)\"\r\n    },\r\n    time: {\r\n      Avg01Min: \"47.86G (797.73M/s)\",\r\n      Avg05Min: \"304.45G (1.01G/s)\",\r\n      Avg15Min: \"822.00G (913.33M/s)\",\r\n      Overall: \"2.74T (969.04M/s)\"\r\n    }\r\n  },\r\n  user: {\r\n    batchPuts: {\r\n      Avg01Min: \"0 (0.00/s)\",\r\n      Avg05Min: \"198.69K (662.30/s)\",\r\n      Avg15Min: \"6.37M (7.07K/s)\",\r\n      Maximum: \"37.771µs\",\r\n      Minimum: \"91ns\",\r\n      Overall: \"50.33M (17.79K/s)\",\r\n      Percentiles: {\r\n        20: \"100ns\",\r\n        5: \"95ns\",\r\n        50: \"113ns\",\r\n        80: \"179ns\",\r\n        95: \"242ns\"\r\n      }\r\n    },\r\n    batchWriteTimes: {\r\n      Avg01Min: \"0 (0.00/s)\",\r\n      Avg05Min: \"785 (2.62/s)\",\r\n      Avg15Min: \"25.14K (27.93/s)\",\r\n      Maximum: \"142.565341ms\",\r\n      Minimum: \"454.047µs\",\r\n      Overall: \"201.12K (71.08/s)\",\r\n      Percentiles: {\r\n        20: \"2.213877ms\",\r\n        5: \"985.895µs\",\r\n        50: \"3.222191ms\",\r\n        80: \"5.679979ms\",\r\n        95: \"10.00759ms\"\r\n      }\r\n    },\r\n    batchWrites: {\r\n      Avg01Min: \"29 (0.49/s)\",\r\n      Avg05Min: \"115.63M (385.44K/s)\",\r\n      Avg15Min: \"3.66G (4.07M/s)\",\r\n      Overall: \"29.06G (10.27M/s)\"\r\n    },\r\n    dels: {\r\n      Avg01Min: \"0 (0.00/s)\",\r\n      Avg05Min: \"0 (0.00/s)\",\r\n      Avg15Min: \"0 (0.00/s)\",\r\n      Maximum: \"0s\",\r\n\t  Minimum: \"0s\",\r\n      Overall: \"0 (0.00/s)\",\r\n      Percentiles: {\r\n        20: \"0s\",\r\n        5: \"0s\",\r\n        50: \"0s\",\r\n        80: \"0s\",\r\n        95: \"0s\"\r\n      }\r\n    },\r\n    gets: {\r\n      Avg01Min: \"123.67K (2.06K/s)\",\r\n      Avg05Min: \"739.38K (2.46K/s)\",\r\n      Avg15Min: \"3.04M (3.38K/s)\",\r\n      Maximum: \"127.309714ms\",\r\n      Minimum: \"4.86µs\",\r\n      Overall: \"9.00M (3.18K/s)\",\r\n      Percentiles: {\r\n        20: \"6.11µs\",\r\n        5: \"5.583µs\",\r\n        50: \"7.396µs\",\r\n        80: \"18.321µs\",\r\n        95: \"39.912µs\"\r\n      }\r\n    },\r\n    misses: {\r\n      Avg01Min: \"12.54K (209.05/s)\",\r\n      Avg05Min: \"153.60K (511.99/s)\",\r\n      Avg15Min: \"765.22K (850.24/s)\",\r\n      Overall: \"3.65M (1.29K/s)\"\r\n    },\r\n    puts: {\r\n      Avg01Min: \"0 (0.00/s)\",\r\n      Avg05Min: \"7.82K (26.05/s)\",\r\n      Avg15Min: \"260.17K (289.07/s)\",\r\n      Maximum: \"70.281715ms\",\r\n      Minimum: \"4.668µs\",\r\n      Overall: \"2.13M (751.22/s)\",\r\n      Percentiles: {\r\n        20: \"1.090531ms\",\r\n        5: \"1.078427ms\",\r\n        50: \"1.107979ms\",\r\n        80: \"1.139172ms\",\r\n        95: \"4.262309ms\"\r\n      }\r\n    },\r\n    reads: {\r\n      Avg01Min: \"49.43M (823.79K/s)\",\r\n      Avg05Min: \"237.58M (791.95K/s)\",\r\n      Avg15Min: \"892.23M (991.37K/s)\",\r\n      Overall: \"2.57G (907.39K/s)\"\r\n    },\r\n    writes: {\r\n      Avg01Min: \"0 (0.00/s)\",\r\n      Avg05Min: \"950.92K (3.17K/s)\",\r\n      Avg15Min: \"31.65M (35.17K/s)\",\r\n      Overall: \"258.72M (91.43K/s)\"\r\n    }\r\n  }\r\n}\r\n\r\n**BadgerDB**\r\n\r\n> {\r\n  user: {\r\n    batchPuts: {\r\n      Avg01Min: \"2.42M (40.40K/s)\",\r\n      Avg05Min: \"12.61M (42.03K/s)\",\r\n      Avg15Min: \"39.24M (43.61K/s)\",\r\n      Maximum: \"79.679µs\",\r\n      Minimum: \"170ns\",\r\n      Overall: \"114.33M (45.59K/s)\",\r\n      Percentiles: {\r\n        20: \"217ns\",\r\n        5: \"199ns\",\r\n        50: \"337ns\",\r\n        80: \"566ns\",\r\n        95: \"1.59µs\"\r\n      }\r\n    },\r\n    batchWriteTimes: {\r\n      Avg01Min: \"7.26K (121.04/s)\",\r\n      Avg05Min: \"39.05K (130.16/s)\",\r\n      Avg15Min: \"118.73K (131.92/s)\",\r\n      Maximum: \"62.114471ms\",\r\n      Minimum: \"236.188µs\",\r\n      Overall: \"324.80K (129.51/s)\",\r\n      Percentiles: {\r\n        20: \"695.077µs\",\r\n        5: \"538.789µs\",\r\n        50: \"993.681µs\",\r\n        80: \"1.70043ms\",\r\n        95: \"6.248979ms\"\r\n      }\r\n    },\r\n    batchWrites: {\r\n      Avg01Min: \"1.06G (17.63M/s)\",\r\n      Avg05Min: \"5.48G (18.26M/s)\",\r\n      Avg15Min: \"15.72G (17.47M/s)\",\r\n      Overall: \"40.69G (16.22M/s)\"\r\n    },\r\n    dels: {\r\n      Avg01Min: \"0 (0.00/s)\",\r\n      Avg05Min: \"0 (0.00/s)\",\r\n      Avg15Min: \"0 (0.00/s)\",\r\n      Maximum: \"0s\",\r\n      Minimum: \"0s\",\r\n      Overall: \"0 (0.00/s)\",\r\n      Percentiles: {\r\n        20: \"0s\",\r\n        5: \"0s\",\r\n        50: \"0s\",\r\n        80: \"0s\",\r\n        95: \"0s\"\r\n      }\r\n    },\r\n    gets: {\r\n      Avg01Min: \"395.55K (6.59K/s)\",\r\n      Avg05Min: \"1.55M (5.16K/s)\",\r\n      Avg15Min: \"5.97M (6.64K/s)\",\r\n      Maximum: \"12.899981ms\",\r\n      Minimum: \"3.748µs\",\r\n      Overall: \"26.39M (10.52K/s)\",\r\n      Percentiles: {\r\n        20: \"6.305µs\",\r\n\t\t5: \"4.746µs\",\r\n        50: \"9.289µs\",\r\n        80: \"17.561µs\",\r\n        95: \"150.561µs\"\r\n      }\r\n    },\r\n    misses: {\r\n      Avg01Min: \"278.58K (4.64K/s)\",\r\n      Avg05Min: \"1.03M (3.44K/s)\",\r\n      Avg15Min: \"3.13M (3.48K/s)\",\r\n      Overall: \"12.18M (4.85K/s)\"\r\n    },\r\n    puts: {\r\n      Avg01Min: \"56.46K (940.99/s)\",\r\n      Avg05Min: \"511.22K (1.70K/s)\",\r\n      Avg15Min: \"3.93M (4.37K/s)\",\r\n      Maximum: \"6.566727ms\",\r\n      Minimum: \"13.199µs\",\r\n      Overall: \"21.47M (8.56K/s)\",\r\n      Percentiles: {\r\n        20: \"17.822µs\",\r\n        5: \"15.082µs\",\r\n        50: \"25.272µs\",\r\n        80: \"32.307µs\",\r\n        95: \"50.532µs\"\r\n      }\r\n    },\r\n    reads: {\r\n      Avg01Min: \"48.80M (813.34K/s)\",\r\n      Avg05Min: \"155.94M (519.79K/s)\",\r\n      Avg15Min: \"995.87M (1.11M/s)\",\r\n      Overall: \"5.14G (2.05M/s)\"\r\n    },\r\n    writes: {\r\n      Avg01Min: \"6.81M (113.57K/s)\",\r\n      Avg05Min: \"62.04M (206.79K/s)\",\r\n      Avg15Min: \"480.16M (533.52K/s)\",\r\n      Overall: \"2.63G (1.05M/s)\"\r\n    }\r\n  }\r\n}\r\n\r\n**BoltDB**\r\n\r\n> {\r\n  user: {\r\n    batchPuts: {\r\n      Avg01Min: \"264.76K (4.41K/s)\",\r\n      Avg05Min: \"1.44M (4.78K/s)\",\r\n      Avg15Min: \"4.31M (4.79K/s)\",\r\n      Maximum: \"8.028µs\",\r\n      Minimum: \"159ns\",\r\n      Overall: \"33.42M (5.16K/s)\",\r\n      Percentiles: {\r\n        20: \"213ns\",\r\n        5: \"186ns\",\r\n        50: \"301ns\",\r\n        80: \"651ns\",\r\n        95: \"1.347µs\"\r\n      }\r\n    },\r\n    batchWriteTimes: {\r\n      Avg01Min: \"320 (5.34/s)\",\r\n      Avg05Min: \"1.72K (5.72/s)\",\r\n      Avg15Min: \"5.21K (5.79/s)\",\r\n      Maximum: \"2.207547538s\",\r\n      Minimum: \"5.628727ms\",\r\n      Overall: \"32.48K (5.01/s)\",\r\n      Percentiles: {\r\n        20: \"114.440897ms\",\r\n        5: \"54.547638ms\",\r\n        50: \"206.08641ms\",\r\n        80: \"376.989253ms\",\r\n        95: \"694.516231ms\"\r\n      }\r\n    },\r\n    batchWrites: {\r\n      Avg01Min: \"36.33M (605.45K/s)\",\r\n      Avg05Min: \"197.85M (659.48K/s)\",\r\n      Avg15Min: \"607.09M (674.54K/s)\",\r\n      Overall: \"3.76G (580.65K/s)\"\r\n    },\r\n    dels: {\r\n      Avg01Min: \"0 (0.00/s)\",\r\n      Avg05Min: \"0 (0.00/s)\",\r\n      Avg15Min: \"0 (0.00/s)\",\r\n      Maximum: \"0s\",\r\n      Minimum: \"0s\",\r\n      Overall: \"0 (0.00/s)\",\r\n      Percentiles: {\r\n        20: \"0s\",\r\n        5: \"0s\",\r\n        50: \"0s\",\r\n        80: \"0s\",\r\n        95: \"0s\"\r\n      }\r\n    },\r\n    gets: {\r\n      Avg01Min: \"111.84K (1.86K/s)\",\r\n      Avg05Min: \"2.03M (6.76K/s)\",\r\n\t  Avg15Min: \"6.85M (7.61K/s)\",\r\n      Maximum: \"5.775065ms\",\r\n      Minimum: \"1.683µs\",\r\n      Overall: \"48.82M (7.53K/s)\",\r\n      Percentiles: {\r\n        20: \"2.516µs\",\r\n        5: \"2.06µs\",\r\n        50: \"3.197µs\",\r\n        80: \"5.647µs\",\r\n        95: \"13.839µs\"\r\n      }\r\n    },\r\n    misses: {\r\n      Avg01Min: \"0 (0.00/s)\",\r\n      Avg05Min: \"0 (0.00/s)\",\r\n      Avg15Min: \"0 (0.00/s)\",\r\n      Overall: \"0 (0.00/s)\"\r\n    },\r\n    puts: {\r\n      Avg01Min: \"39.26K (654.41/s)\",\r\n      Avg05Min: \"196.59K (655.31/s)\",\r\n      Avg15Min: \"596.19K (662.43/s)\",\r\n      Maximum: \"194.418117ms\",\r\n      Minimum: \"441.926µs\",\r\n      Overall: \"4.55M (701.19/s)\",\r\n      Percentiles: {\r\n        20: \"642.257µs\",\r\n        5: \"564.563µs\",\r\n        50: \"774.047µs\",\r\n        80: \"996.149µs\",\r\n        95: \"1.372207ms\"\r\n      }\r\n    },\r\n    reads: {\r\n      Avg01Min: \"938.51K (15.64K/s)\",\r\n      Avg05Min: \"6.27M (20.90K/s)\",\r\n      Avg15Min: \"65.96M (73.29K/s)\",\r\n      Overall: \"629.47M (97.10K/s)\"\r\n    },\r\n    writes: {\r\n      Avg01Min: \"4.83M (80.57K/s)\",\r\n      Avg05Min: \"24.19M (80.65K/s)\",\r\n      Avg15Min: \"73.36M (81.51K/s)\",\r\n      Overall: \"557.17M (85.95K/s)\"\r\n    }\r\n  }\r\n}",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/374576889/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/374577948",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/15717#issuecomment-374577948",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/15717",
    "id": 374577948,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NDU3Nzk0OA==",
    "user": {
      "login": "holiman",
      "id": 142290,
      "node_id": "MDQ6VXNlcjE0MjI5MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/142290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/holiman",
      "html_url": "https://github.com/holiman",
      "followers_url": "https://api.github.com/users/holiman/followers",
      "following_url": "https://api.github.com/users/holiman/following{/other_user}",
      "gists_url": "https://api.github.com/users/holiman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/holiman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/holiman/subscriptions",
      "organizations_url": "https://api.github.com/users/holiman/orgs",
      "repos_url": "https://api.github.com/users/holiman/repos",
      "events_url": "https://api.github.com/users/holiman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/holiman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-20T12:21:46Z",
    "updated_at": "2018-03-20T12:21:46Z",
    "author_association": "MEMBER",
    "body": "Great work!\r\nWhat would you say are the key metrics to look at above? I'm not quite sure how to read those stats. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/374577948/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/374732950",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/15717#issuecomment-374732950",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/15717",
    "id": 374732950,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NDczMjk1MA==",
    "user": {
      "login": "siong1987",
      "id": 5866,
      "node_id": "MDQ6VXNlcjU4NjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5866?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/siong1987",
      "html_url": "https://github.com/siong1987",
      "followers_url": "https://api.github.com/users/siong1987/followers",
      "following_url": "https://api.github.com/users/siong1987/following{/other_user}",
      "gists_url": "https://api.github.com/users/siong1987/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/siong1987/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/siong1987/subscriptions",
      "organizations_url": "https://api.github.com/users/siong1987/orgs",
      "repos_url": "https://api.github.com/users/siong1987/repos",
      "events_url": "https://api.github.com/users/siong1987/events{/privacy}",
      "received_events_url": "https://api.github.com/users/siong1987/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-20T19:48:18Z",
    "updated_at": "2018-03-20T19:50:24Z",
    "author_association": "NONE",
    "body": "@ArchetypicalDude this is awesome. i took some time to put the data into the table below.\r\n\r\n|  | LevelDB | Badger | BoltDB |\r\n| --- | ---: | ---: | ---: |\r\n| batchPuts (Overall) | 50.33M (17.79K/s) | **114.33M (45.59K/s)** | 33.42M (5.16K/s) |\r\n| batchWriteTimes (Overall) | 201.12K (71.08/s) | **324.80K (129.51/s)** | 32.48K (5.01/s) |\r\n| batchWrites (Overall) | 29.06G (10.27M/s) | **40.69G (16.22M/s)** | 3.76G (580.65K/s) |\r\n| dels (Overall) | 0 (0.00/s) | 0 (0.00/s) | 0 (0.00/s) |\r\n| gets (Overall) | 9.00M (3.18K/s) | 26.39M (10.52K/s) | **48.82M (7.53K/s)** |\r\n| misses (Overall) | 3.65M (1.29K/s) | **12.18M (4.85K/s)** | 0 (0.00/s) |\r\n| puts (Overall) | 2.13M (751.22/s) | **21.47M (8.56K/s)** | 4.55M (701.19/s) |\r\n| reads (Overall) | 2.57G (907.39K/s) | **5.14G (2.05M/s)** | 629.47M (97.10K/s) |\r\n| writes (Overall) | 258.72M (91.43K/s) | **2.63G (1.05M/s)** | 557.17M (85.95K/s) |\r\n\r\n@holiman good question. would love to learn more on how to explore this data, @ArchetypicalDude?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/374732950/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 1
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/375897352",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/15717#issuecomment-375897352",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/15717",
    "id": 375897352,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NTg5NzM1Mg==",
    "user": {
      "login": "ArchetypicalDude",
      "id": 34767424,
      "node_id": "MDQ6VXNlcjM0NzY3NDI0",
      "avatar_url": "https://avatars.githubusercontent.com/u/34767424?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ArchetypicalDude",
      "html_url": "https://github.com/ArchetypicalDude",
      "followers_url": "https://api.github.com/users/ArchetypicalDude/followers",
      "following_url": "https://api.github.com/users/ArchetypicalDude/following{/other_user}",
      "gists_url": "https://api.github.com/users/ArchetypicalDude/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ArchetypicalDude/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ArchetypicalDude/subscriptions",
      "organizations_url": "https://api.github.com/users/ArchetypicalDude/orgs",
      "repos_url": "https://api.github.com/users/ArchetypicalDude/repos",
      "events_url": "https://api.github.com/users/ArchetypicalDude/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ArchetypicalDude/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-24T15:20:00Z",
    "updated_at": "2018-03-24T15:20:00Z",
    "author_association": "NONE",
    "body": "Hey guys, late reply because I'm travelling. Thanks for your interest and putting the data in a table!\r\n\r\nSo the go-ethereum metrics module consists of meters and timers. Meters measure how much data or how many operations get executed in a certain timeframe and timers measure how long the operations take. I think looking at the timers is more interesting for the moment as they tell us how long it takes to persist data to the hard drive and how long it takes to read that data again.\r\n\r\nPersisting data (PUT and batch write operations) is for example interesting when fast-syncing a client, as this is in part dependent on how fast you can write data to the hard disk. Reading data (GET operations) from the disk is interesting when validating transactions against your copy of the blockchain, as you have to traverse the state trie.\r\n\r\nI think looking at the 95-percentiles of the \"puts\", \"gets\" and \"batchWriteTimes\" tells us the most about the different key-value-stores. BadgerDB has very good write performance, BoltDB has very good read performance and LevelDB is a good mixture of both.\r\n\r\nI hope I don't have any misunderstandings in my explanations. I'm also hesitant to draw any final conclusions as to which key-value store might be the best fit for go-ethereum. All the metrics collected are dependent on how well the operations are batched, data is cached, hardware used and so on. Also very important is how much disk space is used by the different datastores: LevelDB is at ~70GB when fully synced, BoltDB and BadgerDB use more than 160GB. Unfortunately couldn't yet figure out where this difference comes from.\r\n\r\nI'll have to be offline most of the time for the next two weeks but am sure to further look into this stuff when I get back home.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/375897352/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/376944534",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/15717#issuecomment-376944534",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/15717",
    "id": 376944534,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3Njk0NDUzNA==",
    "user": {
      "login": "siong1987",
      "id": 5866,
      "node_id": "MDQ6VXNlcjU4NjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5866?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/siong1987",
      "html_url": "https://github.com/siong1987",
      "followers_url": "https://api.github.com/users/siong1987/followers",
      "following_url": "https://api.github.com/users/siong1987/following{/other_user}",
      "gists_url": "https://api.github.com/users/siong1987/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/siong1987/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/siong1987/subscriptions",
      "organizations_url": "https://api.github.com/users/siong1987/orgs",
      "repos_url": "https://api.github.com/users/siong1987/repos",
      "events_url": "https://api.github.com/users/siong1987/events{/privacy}",
      "received_events_url": "https://api.github.com/users/siong1987/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-28T16:12:19Z",
    "updated_at": "2018-03-28T16:12:19Z",
    "author_association": "NONE",
    "body": "@ArchetypicalDude great update! thank you for the work.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/376944534/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/378860601",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/15717#issuecomment-378860601",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/15717",
    "id": 378860601,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODg2MDYwMQ==",
    "user": {
      "login": "manishrjain",
      "id": 1782324,
      "node_id": "MDQ6VXNlcjE3ODIzMjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1782324?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/manishrjain",
      "html_url": "https://github.com/manishrjain",
      "followers_url": "https://api.github.com/users/manishrjain/followers",
      "following_url": "https://api.github.com/users/manishrjain/following{/other_user}",
      "gists_url": "https://api.github.com/users/manishrjain/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/manishrjain/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/manishrjain/subscriptions",
      "organizations_url": "https://api.github.com/users/manishrjain/orgs",
      "repos_url": "https://api.github.com/users/manishrjain/repos",
      "events_url": "https://api.github.com/users/manishrjain/events{/privacy}",
      "received_events_url": "https://api.github.com/users/manishrjain/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-05T08:33:43Z",
    "updated_at": "2018-04-05T08:37:33Z",
    "author_association": "NONE",
    "body": "Hey guys, author of Badger here.\r\n\r\n@ArchetypicalDude : This looks like really solid work. I'm giving a talk on Badger in Gophercon China in Shanghai -- while this might be too last minute; I'd like to play around with these benchmarks and generate numbers for Badger -- see if I have something solid before the talk.\r\n\r\nOne thing I noticed is that the table loading is set to memory map. That might eat away on the read performance. Ideally, the LSM tree is small enough to be kept in memory, at which point, the read performance should match up to BoltDB. So, I'd like to try that.\r\n\r\nAlso, the reason Badger is taking more disk space, is because every PUT is written to disk first, and then later garbage collected as the same keys get overwritten. But, you'd need to manually call the GC to do that cleanup (typically, during times of less activity in your application). In this case, you might not have called GC, and therefore, the data was just exactly how many writes you called, and not reflective of how much data is valid.\r\n\r\nCan you point me regarding how to run your code and how to generate these read/write benchmark numbers?\r\n\r\nP.S. I don't quite understand this:\r\n```\r\ngets (Overall) | 9.00M (3.18K/s) | 26.39M (10.52K/s) | 48.82M (7.53K/s)\r\n-- | -- | -- | --\r\n```\r\n\r\nWhat does the first number (in M) indicate? Does a higher `K/s` not mean better?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/378860601/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/379152798",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/15717#issuecomment-379152798",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/15717",
    "id": 379152798,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTE1Mjc5OA==",
    "user": {
      "login": "siong1987",
      "id": 5866,
      "node_id": "MDQ6VXNlcjU4NjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5866?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/siong1987",
      "html_url": "https://github.com/siong1987",
      "followers_url": "https://api.github.com/users/siong1987/followers",
      "following_url": "https://api.github.com/users/siong1987/following{/other_user}",
      "gists_url": "https://api.github.com/users/siong1987/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/siong1987/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/siong1987/subscriptions",
      "organizations_url": "https://api.github.com/users/siong1987/orgs",
      "repos_url": "https://api.github.com/users/siong1987/repos",
      "events_url": "https://api.github.com/users/siong1987/events{/privacy}",
      "received_events_url": "https://api.github.com/users/siong1987/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-06T05:34:10Z",
    "updated_at": "2018-04-06T06:04:07Z",
    "author_association": "NONE",
    "body": "@manishrjain https://github.com/siong1987/go-ethereum/pull/1 < I created this PR based on @ArchetypicalDude's commits so that I can easily visualize what has been changed with the Github UI.\r\n\r\nto run it, you can follow the `go-ethereum`'s installation guide here: https://github.com/ethereum/go-ethereum/wiki/Installation-Instructions-for-Ubuntu\r\n\r\nto get the metrics, the guide is here: https://github.com/ethereum/go-ethereum/wiki/Metrics-and-Monitoring\r\n\r\nnot sure that this is super helpful.\r\n\r\nfor the metrics, it was my bad to use the `Overall` metric. to see who is the winner, you can look more closely at the breakdown here:\r\n\r\nBoltDB:\r\n```javascript\r\ngets: {\r\n  Avg01Min: \"111.84K (1.86K/s)\",\r\n  Avg05Min: \"2.03M (6.76K/s)\",\r\n  Avg15Min: \"6.85M (7.61K/s)\",\r\n  Maximum: \"5.775065ms\",\r\n  Minimum: \"1.683µs\",\r\n  Overall: \"48.82M (7.53K/s)\",\r\n  Percentiles: {\r\n    20: \"2.516µs\",\r\n    5: \"2.06µs\",\r\n    50: \"3.197µs\",\r\n    80: \"5.647µs\",\r\n    95: \"13.839µs\"\r\n  }\r\n}\r\n```\r\n\r\nLevelDB:\r\n```javascript\r\ngets: {\r\n  Avg01Min: \"123.67K (2.06K/s)\",\r\n  Avg05Min: \"739.38K (2.46K/s)\",\r\n  Avg15Min: \"3.04M (3.38K/s)\",\r\n  Maximum: \"127.309714ms\",\r\n  Minimum: \"4.86µs\",\r\n  Overall: \"9.00M (3.18K/s)\",\r\n  Percentiles: {\r\n    20: \"6.11µs\",\r\n    5: \"5.583µs\",\r\n    50: \"7.396µs\",\r\n    80: \"18.321µs\",\r\n    95: \"39.912µs\"\r\n  }\r\n}\r\n```\r\n\r\nBadger:\r\n```javascript\r\ngets: {\r\n  Avg01Min: \"395.55K (6.59K/s)\",\r\n  Avg05Min: \"1.55M (5.16K/s)\",\r\n  Avg15Min: \"5.97M (6.64K/s)\",\r\n  Maximum: \"12.899981ms\",\r\n  Minimum: \"3.748µs\",\r\n  Overall: \"26.39M (10.52K/s)\",\r\n  Percentiles: {\r\n    20: \"6.305µs\",\r\n    5: \"4.746µs\",\r\n    50: \"9.289µs\",\r\n    80: \"17.561µs\",\r\n    95: \"150.561µs\"\r\n  }\r\n}\r\n```\r\n\r\nas you can see from the percentiles measurements:\r\n\r\n| Database       | BoltDB | LevelDB | Badger |\r\n| -------------: |---:| ---:| ---: |\r\n| 5 percentile gets | 2.06µs | 5.583µs | 4.746µs |\r\n| 20 percentile gets | 2.516µs | 6.11µs | 6.305µs |\r\n| 50 percentile gets | 3.197µs | 7.396µs | 9.289µs |\r\n| 80 percentile gets | 5.647µs | 18.321µs | 17.561µs |\r\n| 95 percentile gets | 13.839µs | 39.912µs | 150.561µs |",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/379152798/reactions",
      "total_count": 5,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 5,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/379153166",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/15717#issuecomment-379153166",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/15717",
    "id": 379153166,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTE1MzE2Ng==",
    "user": {
      "login": "siong1987",
      "id": 5866,
      "node_id": "MDQ6VXNlcjU4NjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5866?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/siong1987",
      "html_url": "https://github.com/siong1987",
      "followers_url": "https://api.github.com/users/siong1987/followers",
      "following_url": "https://api.github.com/users/siong1987/following{/other_user}",
      "gists_url": "https://api.github.com/users/siong1987/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/siong1987/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/siong1987/subscriptions",
      "organizations_url": "https://api.github.com/users/siong1987/orgs",
      "repos_url": "https://api.github.com/users/siong1987/repos",
      "events_url": "https://api.github.com/users/siong1987/events{/privacy}",
      "received_events_url": "https://api.github.com/users/siong1987/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-06T05:36:55Z",
    "updated_at": "2018-04-06T05:36:55Z",
    "author_association": "NONE",
    "body": "@manishrjain also, thanks for the tips on configuring Badger to get better performance out of it. i will try those configurations that you suggested and report back here.\r\n\r\n@ArchetypicalDude i currently have plenty of time on my hands, wanna collaborate together on this?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/379153166/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/379155171",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/15717#issuecomment-379155171",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/15717",
    "id": 379155171,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTE1NTE3MQ==",
    "user": {
      "login": "manishrjain",
      "id": 1782324,
      "node_id": "MDQ6VXNlcjE3ODIzMjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1782324?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/manishrjain",
      "html_url": "https://github.com/manishrjain",
      "followers_url": "https://api.github.com/users/manishrjain/followers",
      "following_url": "https://api.github.com/users/manishrjain/following{/other_user}",
      "gists_url": "https://api.github.com/users/manishrjain/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/manishrjain/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/manishrjain/subscriptions",
      "organizations_url": "https://api.github.com/users/manishrjain/orgs",
      "repos_url": "https://api.github.com/users/manishrjain/repos",
      "events_url": "https://api.github.com/users/manishrjain/events{/privacy}",
      "received_events_url": "https://api.github.com/users/manishrjain/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-06T05:49:57Z",
    "updated_at": "2018-04-06T05:49:57Z",
    "author_association": "NONE",
    "body": "@siong1987 : If read performance is more important than write, you could also try setting `ValueThreshold` to a much higher value than the current 32 bytes. That way, LSM tree would store the values within it, and the value log would just act like a write-ahead log -- like any other typical LSM tree. This would also perform better on hard disks.\r\n\r\nThere're also some optimizations going into the upcoming v2.0, which would improve read performance.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/379155171/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/380387992",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/15717#issuecomment-380387992",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/15717",
    "id": 380387992,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MDM4Nzk5Mg==",
    "user": {
      "login": "karalabe",
      "id": 129561,
      "node_id": "MDQ6VXNlcjEyOTU2MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/129561?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/karalabe",
      "html_url": "https://github.com/karalabe",
      "followers_url": "https://api.github.com/users/karalabe/followers",
      "following_url": "https://api.github.com/users/karalabe/following{/other_user}",
      "gists_url": "https://api.github.com/users/karalabe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/karalabe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/karalabe/subscriptions",
      "organizations_url": "https://api.github.com/users/karalabe/orgs",
      "repos_url": "https://api.github.com/users/karalabe/repos",
      "events_url": "https://api.github.com/users/karalabe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/karalabe/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-11T09:27:24Z",
    "updated_at": "2018-04-11T09:27:24Z",
    "author_association": "MEMBER",
    "body": "I don't think measuring database gets is that relevant to be honest. Try running a `geth import chain.rlp` where `chain.rlp` is the first 1.9M blocks for starters. That might give you a baseline number to start with.\r\n\r\nThen you might want to import the first 3M blocks, which contain the spam txs and cleanups too. There your memory will run out for disk caching and actual performance will surface harder.\r\n\r\nLastly blocks above 4M are the really heavy ones. Those might be a lot more interesting to test with (also the database gets over 100GB there, so that's where the juicy parts start).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/380387992/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/381026377",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/15717#issuecomment-381026377",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/15717",
    "id": 381026377,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MTAyNjM3Nw==",
    "user": {
      "login": "ArchetypicalDude",
      "id": 34767424,
      "node_id": "MDQ6VXNlcjM0NzY3NDI0",
      "avatar_url": "https://avatars.githubusercontent.com/u/34767424?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ArchetypicalDude",
      "html_url": "https://github.com/ArchetypicalDude",
      "followers_url": "https://api.github.com/users/ArchetypicalDude/followers",
      "following_url": "https://api.github.com/users/ArchetypicalDude/following{/other_user}",
      "gists_url": "https://api.github.com/users/ArchetypicalDude/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ArchetypicalDude/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ArchetypicalDude/subscriptions",
      "organizations_url": "https://api.github.com/users/ArchetypicalDude/orgs",
      "repos_url": "https://api.github.com/users/ArchetypicalDude/repos",
      "events_url": "https://api.github.com/users/ArchetypicalDude/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ArchetypicalDude/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-13T05:17:13Z",
    "updated_at": "2018-04-13T05:17:13Z",
    "author_association": "NONE",
    "body": "Hi guys,\r\n\r\nfinally back to business and ready to put in a few hours per day for the next weeks.\r\n\r\n@manishrjain \r\nThanks so much for chiming in and for creating BadgerDB in the first place! I'll start with trying out your suggestions regarding the garbage collector, table loading mode and ValueThreshold!\r\n\r\n@siong1987 \r\nI'd be very glad to work with you on this! I'm kind of used to working independently at the moment but we'll manage somehow. I'll just start by working on the tasks listed above for now :)\r\n\r\n@karalabe \r\nThanks for the input! Also noticed that the node gets worked hardest during the spam blocks and above 4M. I did all my testing with importing the whole blockchain to have all scenarios covered. If \"database research\" doesn't provide any meaningful results during the next two to three weeks I'll focus my efforts somewhere else, maybe you have some suggestions on how to help the go-ethereum-team best? Was thinking I'll turn to either PoS, sharding or stateless client efforts next.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/381026377/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/381281333",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/15717#issuecomment-381281333",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/15717",
    "id": 381281333,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MTI4MTMzMw==",
    "user": {
      "login": "siong1987",
      "id": 5866,
      "node_id": "MDQ6VXNlcjU4NjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5866?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/siong1987",
      "html_url": "https://github.com/siong1987",
      "followers_url": "https://api.github.com/users/siong1987/followers",
      "following_url": "https://api.github.com/users/siong1987/following{/other_user}",
      "gists_url": "https://api.github.com/users/siong1987/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/siong1987/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/siong1987/subscriptions",
      "organizations_url": "https://api.github.com/users/siong1987/orgs",
      "repos_url": "https://api.github.com/users/siong1987/repos",
      "events_url": "https://api.github.com/users/siong1987/events{/privacy}",
      "received_events_url": "https://api.github.com/users/siong1987/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-13T23:09:14Z",
    "updated_at": "2018-04-13T23:09:37Z",
    "author_association": "NONE",
    "body": "@ArchetypicalDude \r\nno worries. let me know how i can help.\r\n\r\nalso, i notice that BadgerDB doesn't support compression and let the user decide whether they want to compress their data or not. i actually like this decision a lot. i wonder if we start using snappy with BadgerDB, the DB size will be smaller?\r\n\r\nhttps://github.com/dgraph-io/badger/issues/411\r\n\r\nthe million dollar question: how compressable ethereum data is? cc: @karalabe ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/381281333/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/382356853",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/15717#issuecomment-382356853",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/15717",
    "id": 382356853,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MjM1Njg1Mw==",
    "user": {
      "login": "ArchetypicalDude",
      "id": 34767424,
      "node_id": "MDQ6VXNlcjM0NzY3NDI0",
      "avatar_url": "https://avatars.githubusercontent.com/u/34767424?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ArchetypicalDude",
      "html_url": "https://github.com/ArchetypicalDude",
      "followers_url": "https://api.github.com/users/ArchetypicalDude/followers",
      "following_url": "https://api.github.com/users/ArchetypicalDude/following{/other_user}",
      "gists_url": "https://api.github.com/users/ArchetypicalDude/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ArchetypicalDude/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ArchetypicalDude/subscriptions",
      "organizations_url": "https://api.github.com/users/ArchetypicalDude/orgs",
      "repos_url": "https://api.github.com/users/ArchetypicalDude/repos",
      "events_url": "https://api.github.com/users/ArchetypicalDude/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ArchetypicalDude/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-18T11:36:19Z",
    "updated_at": "2018-04-18T12:04:50Z",
    "author_association": "NONE",
    "body": "I added a CLI-Command to manually start badger's garbage collector. You can run it via 'geth badgerGarbageCollect'. Internally it just runs PurgeOlderVersions() and RunValueLogGC(0.5).\r\n\r\nIt does not result in a smaller DB size unfortunately. Maybe @manishrjain has any idea what's wrong here.\r\nThis might be related: https://github.com/dgraph-io/badger/issues/444\r\n```\r\nINFO [04-18|13:17:36] Starting database garbage collection; db.size lsm=25449348738 vlog=180410199890\r\nINFO [04-18|13:19:44] RunValueLogGC error                      err=\"Value log GC attempt didn't result in any cleanup\"\r\nINFO [04-18|13:19:44] Database garbage collection done; db.size lsm=25449348738 vlog=180410199890\r\n```\r\nI also couldn't benchmark yet with `opts.TableLoadingMode = options.LoadToRAM` because the LSM-tree is already 25GB big and I'm simply running out of memory on the current testing environment.\r\n\r\nAlso to get the benchmark stats you can run geth with the '--metrics' and 'console' flags.\r\n\r\n```\r\n./geth --metrics console\r\n```\r\nAnd then inside the console I am using \r\n```\r\ndebug.metrics(false).eth.db.chaindata\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/382356853/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/385143447",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/15717#issuecomment-385143447",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/15717",
    "id": 385143447,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NTE0MzQ0Nw==",
    "user": {
      "login": "manishrjain",
      "id": 1782324,
      "node_id": "MDQ6VXNlcjE3ODIzMjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1782324?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/manishrjain",
      "html_url": "https://github.com/manishrjain",
      "followers_url": "https://api.github.com/users/manishrjain/followers",
      "following_url": "https://api.github.com/users/manishrjain/following{/other_user}",
      "gists_url": "https://api.github.com/users/manishrjain/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/manishrjain/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/manishrjain/subscriptions",
      "organizations_url": "https://api.github.com/users/manishrjain/orgs",
      "repos_url": "https://api.github.com/users/manishrjain/repos",
      "events_url": "https://api.github.com/users/manishrjain/events{/privacy}",
      "received_events_url": "https://api.github.com/users/manishrjain/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-28T05:56:01Z",
    "updated_at": "2018-04-28T05:56:01Z",
    "author_association": "NONE",
    "body": "Any way I can run this thing with Badger? Sorry, I'm a crypto n00b, so exact pointers would be helpful.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/385143447/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/385176335",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/15717#issuecomment-385176335",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/15717",
    "id": 385176335,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NTE3NjMzNQ==",
    "user": {
      "login": "ArchetypicalDude",
      "id": 34767424,
      "node_id": "MDQ6VXNlcjM0NzY3NDI0",
      "avatar_url": "https://avatars.githubusercontent.com/u/34767424?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ArchetypicalDude",
      "html_url": "https://github.com/ArchetypicalDude",
      "followers_url": "https://api.github.com/users/ArchetypicalDude/followers",
      "following_url": "https://api.github.com/users/ArchetypicalDude/following{/other_user}",
      "gists_url": "https://api.github.com/users/ArchetypicalDude/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ArchetypicalDude/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ArchetypicalDude/subscriptions",
      "organizations_url": "https://api.github.com/users/ArchetypicalDude/orgs",
      "repos_url": "https://api.github.com/users/ArchetypicalDude/repos",
      "events_url": "https://api.github.com/users/ArchetypicalDude/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ArchetypicalDude/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-28T13:35:01Z",
    "updated_at": "2018-04-28T13:39:21Z",
    "author_association": "NONE",
    "body": "I implemented snappy compression in the latest commit and that did bring down chaindata-size from ~195GB to ~115GB :) LevelDB does this by default, so that's where the huge difference came from. So the data is very much compressible and it would be super interesting to test different compression algorithms! Absolutely a noob in that field though, have to understand a lot about how go-ethereum handles data first.\r\n\r\nI also got the garbage collector to run. It actually works very well when database size is still small: disk space gets freed up and the vlog-files get rewritten. Once the database gets larger (~100GB but I don't have a hard number, sorry about that) it always returns \"Value log GC attempt didn't result in any cleanup\" and even though there were some initial cleanups, the database grows to the exact same size once all blocks are imported. Same size as if I didn't run the garbage collector at all.\r\n\r\n@manishrjain \r\nI guess pretty much everybody is a noob when it comes to crypto! Here are the installation instructions for the go-ethereum client (look under \"building from source\"): https://github.com/ethereum/go-ethereum/wiki/Installation-Instructions-for-Ubuntu\r\n\r\nAnd if you want to run with badger, just clone from my fork under https://github.com/ArchetypicalDude/go-ethereum, everything else is exactly the same.\r\nAll the interesting changes regarding badgerDB are under /go-ethereum/ethdb/badger.go\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/385176335/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/385550383",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/15717#issuecomment-385550383",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/15717",
    "id": 385550383,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NTU1MDM4Mw==",
    "user": {
      "login": "siong1987",
      "id": 5866,
      "node_id": "MDQ6VXNlcjU4NjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5866?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/siong1987",
      "html_url": "https://github.com/siong1987",
      "followers_url": "https://api.github.com/users/siong1987/followers",
      "following_url": "https://api.github.com/users/siong1987/following{/other_user}",
      "gists_url": "https://api.github.com/users/siong1987/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/siong1987/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/siong1987/subscriptions",
      "organizations_url": "https://api.github.com/users/siong1987/orgs",
      "repos_url": "https://api.github.com/users/siong1987/repos",
      "events_url": "https://api.github.com/users/siong1987/events{/privacy}",
      "received_events_url": "https://api.github.com/users/siong1987/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-30T22:42:01Z",
    "updated_at": "2018-04-30T22:42:01Z",
    "author_association": "NONE",
    "body": "awesome. let's me share some data that i have, this is being run on the digital ocean standard droplet with 4 vCPUs and 8GB memory. the time is measured by importing from block 1 to 2500000.\r\n\r\n| Implementation        | Time           | Chain Size  | Source |\r\n| ------------- |-------------:| -----:| -----|\r\n| LevelDB      | ~ 27h 1m | 21 GB | https://github.com/siong1987/go-ethereum |\r\n| BadgerDB | ~ 30h 34m | 39 GB | https://github.com/siong1987/go-ethereum/pull/1 |\r\n| BadgerDB with Snappy | timeout | timeout | https://github.com/siong1987/go-ethereum/pull/2 |\r\n\r\nlike what @ArchetypicalDude saw in his data, snappy helped to make the chain size smaller but it died because it was taking a lot more memory than my BadgerDB implementation without Snappy.\r\n\r\n@ArchetypicalDude \r\nI definitely do not see the time improvement that you were seeing in your earlier test. BadgerDB is actually slower than the default LevelDB implementation. btw, i am using the 1.8.6 version, it comes with the 40% block processing improvement by @holiman here #15225.\r\n\r\n@manishrjain \r\nare you based in SF? i can probably drop by to show you how i do it. i might spend some time write up a blog post about my workflow on digital ocean so that others can use it too.\r\n\r\nmy next step is to get a 16GB memory droplet on digital ocean and run the same tests again.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/385550383/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/385567710",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/15717#issuecomment-385567710",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/15717",
    "id": 385567710,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NTU2NzcxMA==",
    "user": {
      "login": "manishrjain",
      "id": 1782324,
      "node_id": "MDQ6VXNlcjE3ODIzMjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1782324?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/manishrjain",
      "html_url": "https://github.com/manishrjain",
      "followers_url": "https://api.github.com/users/manishrjain/followers",
      "following_url": "https://api.github.com/users/manishrjain/following{/other_user}",
      "gists_url": "https://api.github.com/users/manishrjain/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/manishrjain/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/manishrjain/subscriptions",
      "organizations_url": "https://api.github.com/users/manishrjain/orgs",
      "repos_url": "https://api.github.com/users/manishrjain/repos",
      "events_url": "https://api.github.com/users/manishrjain/events{/privacy}",
      "received_events_url": "https://api.github.com/users/manishrjain/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-01T00:24:14Z",
    "updated_at": "2018-05-01T00:35:31Z",
    "author_association": "NONE",
    "body": "@siong1987 : Yes, I'm in SF at 1 Embarcadero Center. Do feel free to drop by. Can you send me an email at my first name @dgraph.io, so we can schedule a meeting? Looking forward to it!\r\n\r\nP.S. I'd be surprised if Badger writes are slower than LevelDB. Something isn't right there.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/385567710/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/386096934",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/15717#issuecomment-386096934",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/15717",
    "id": 386096934,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NjA5NjkzNA==",
    "user": {
      "login": "manishrjain",
      "id": 1782324,
      "node_id": "MDQ6VXNlcjE3ODIzMjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1782324?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/manishrjain",
      "html_url": "https://github.com/manishrjain",
      "followers_url": "https://api.github.com/users/manishrjain/followers",
      "following_url": "https://api.github.com/users/manishrjain/following{/other_user}",
      "gists_url": "https://api.github.com/users/manishrjain/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/manishrjain/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/manishrjain/subscriptions",
      "organizations_url": "https://api.github.com/users/manishrjain/orgs",
      "repos_url": "https://api.github.com/users/manishrjain/repos",
      "events_url": "https://api.github.com/users/manishrjain/events{/privacy}",
      "received_events_url": "https://api.github.com/users/manishrjain/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-02T19:42:21Z",
    "updated_at": "2018-05-02T19:42:21Z",
    "author_association": "NONE",
    "body": "Thanks @siong1987 for coming in and showing me how to run geth with your Badger changes.\r\n\r\nSo, based on what I'm seeing, Badger has very little load, because all the writes are done one by one, with little or no batching.\r\n\r\nI ran an HTTP server on port 8080 (`go http.ListenAndServe(\"localhost:8080\", nil)` in geth.main), which exposes `/debug/events` and `/debug/requests`.\r\n\r\nPicking from `/debug/events`\r\n\r\n```\r\nValue Log\r\n\r\n11:54:57.930241 | .    24 | ... Flushing 1 blocks of total size: 120\r\n-- | -- | --\r\n11:54:57.930247 | .     6 | ... Done\r\n11:54:57.930458 | .   212 | ... Flushing 1 blocks of total size: 131\r\n11:54:57.930464 | .     5 | ... Done\r\n11:54:57.930682 | .   218 | ... Flushing 1 blocks of total size: 950\r\n11:54:57.930687 | .     5 | ... Done\r\n11:54:57.930736 | .    49 | ... Flushing 1 blocks of total size: 122\r\n11:54:57.930750 | .    13 | ... Done\r\n```\r\n\r\nEvery write to value log is tiny, barely 1KB -- given there's a system call involved, this is going to be slow. Badger integration in geth has set `SyncWrites` to false; if that was true, this would be *very slow*.\r\n\r\nSimilarly,\r\n\r\n```\r\n12:40:12.144301 | .     8 | ... Writing to memtable\r\n-- | -- | --\r\n12:40:12.144307 | .     6 | ... 2 entries written\r\n```\r\n\r\nThere are not a lot of writes happening in one go. If batching and concurrency can be introduced, it can significantly speed up the DB operations. My understanding is that DB writes are a bottleneck, so DB ops speeding up would mean the whole import process would become faster.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/386096934/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/388493645",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/15717#issuecomment-388493645",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/15717",
    "id": 388493645,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4ODQ5MzY0NQ==",
    "user": {
      "login": "manishrjain",
      "id": 1782324,
      "node_id": "MDQ6VXNlcjE3ODIzMjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1782324?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/manishrjain",
      "html_url": "https://github.com/manishrjain",
      "followers_url": "https://api.github.com/users/manishrjain/followers",
      "following_url": "https://api.github.com/users/manishrjain/following{/other_user}",
      "gists_url": "https://api.github.com/users/manishrjain/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/manishrjain/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/manishrjain/subscriptions",
      "organizations_url": "https://api.github.com/users/manishrjain/orgs",
      "repos_url": "https://api.github.com/users/manishrjain/repos",
      "events_url": "https://api.github.com/users/manishrjain/events{/privacy}",
      "received_events_url": "https://api.github.com/users/manishrjain/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-11T21:45:17Z",
    "updated_at": "2018-05-11T21:45:17Z",
    "author_association": "NONE",
    "body": "Btw, I'd encourage you guys to upgrade to v1.5.0 of Badger. It has a whole bunch of improvements when it comes to space reclaims. Also, gets rid of `Purge..` functions, all that is now automatically taken care of by LSM compactions.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/388493645/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/391681539",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/15717#issuecomment-391681539",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/15717",
    "id": 391681539,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5MTY4MTUzOQ==",
    "user": {
      "login": "ArchetypicalDude",
      "id": 34767424,
      "node_id": "MDQ6VXNlcjM0NzY3NDI0",
      "avatar_url": "https://avatars.githubusercontent.com/u/34767424?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ArchetypicalDude",
      "html_url": "https://github.com/ArchetypicalDude",
      "followers_url": "https://api.github.com/users/ArchetypicalDude/followers",
      "following_url": "https://api.github.com/users/ArchetypicalDude/following{/other_user}",
      "gists_url": "https://api.github.com/users/ArchetypicalDude/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ArchetypicalDude/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ArchetypicalDude/subscriptions",
      "organizations_url": "https://api.github.com/users/ArchetypicalDude/orgs",
      "repos_url": "https://api.github.com/users/ArchetypicalDude/repos",
      "events_url": "https://api.github.com/users/ArchetypicalDude/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ArchetypicalDude/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-24T11:31:57Z",
    "updated_at": "2018-05-24T11:31:57Z",
    "author_association": "NONE",
    "body": "@siong1987 \r\n\r\nAs I said, FULL syncing the blockchain won't be any faster with Badger because you need lots of reads and read performance is not Badger's strong point. FAST syncing definitely is faster because there is way less database reads and verification of the downloaded and written data. On a powerful machine with SSDs, 256GB Ram and 100 peers my latest fast sync took exactly:\r\n\r\nBadgerDB: Head Block 5622279, **1h 27m 11s**, source: https://github.com/ArchetypicalDude/go-ethereum/commit/790acc07a0dde0e330da82b49da36db5af134a15\r\nLevelDB: Head Block 5623803, **6h 27m 11s**, source: https://github.com/ethereum/go-ethereum/releases/tag/v1.8.8\r\n\r\n@karalabe @vbuterin \r\nI tried to create more comparable benchmarks by fast syncing in a private network but couldn't get it to work: The downloader keeps dropping perfectly fine peers. Tried to find out why this is happening for a few days but got frustrated at some point. Downloader.go is >1500 lines long and just too complicated for my level of experience. Given its poor performance and stability I'd say someone should think about rewriting it from scratch. At least I'd think more carefully about what to merge into the foundations \"stable\" releases. \r\n\r\nI also tried to collect data on block processing times on a fully synced node in both the LevelDB and BadgerDB implementations. After 24h of fairly stable processing times (50ms - 400ms) there show up spikes up to 1.5 seconds (independent of database used). After 48h the spikes get more frequent and reach up to 3 seconds. After 56 hours I get the first \"Synchronisation failed, dropping peer\"-Warnings and block processing times spike way up to > 10s until the node can't even stay in sync any more. This is on fairly modern machines with 32GB ram, Gigabit connection and on the latest stable release of go-ethereum. I am a bit worried this might be detrimental for overall network health and would be very thankful if someone with more experience than me could look into these issues.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/391681539/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/395395605",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/15717#issuecomment-395395605",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/15717",
    "id": 395395605,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5NTM5NTYwNQ==",
    "user": {
      "login": "metabench",
      "id": 1186693,
      "node_id": "MDQ6VXNlcjExODY2OTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1186693?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/metabench",
      "html_url": "https://github.com/metabench",
      "followers_url": "https://api.github.com/users/metabench/followers",
      "following_url": "https://api.github.com/users/metabench/following{/other_user}",
      "gists_url": "https://api.github.com/users/metabench/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/metabench/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/metabench/subscriptions",
      "organizations_url": "https://api.github.com/users/metabench/orgs",
      "repos_url": "https://api.github.com/users/metabench/repos",
      "events_url": "https://api.github.com/users/metabench/events{/privacy}",
      "received_events_url": "https://api.github.com/users/metabench/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-07T12:01:49Z",
    "updated_at": "2018-06-07T12:01:49Z",
    "author_association": "NONE",
    "body": "Is there a way that the database side of Geth could be further encapsulated? I have just suggested https://github.com/ethereum/go-ethereum/issues/16919, sharding on the DB level. A way that this could be done with minimal changes to the geth code is to have geth call a database access service, and that service would then handle the database calls itself, so that work on the DB access could be done independently from the main Geth.\r\n\r\nI already have DB code in node that over the slightly longer term I'm interested in running as a cluster (https://github.com/metabench/nextleveldb-server), but I would also be interested in writing a microservice in node that passes DB calls from Geth onto an existing database such as CockroachDB or MongoDB.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/395395605/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
