{
  "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/16373",
  "repository_url": "https://api.github.com/repos/ethereum/go-ethereum",
  "labels_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/16373/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/16373/comments",
  "events_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/16373/events",
  "html_url": "https://github.com/ethereum/go-ethereum/issues/16373",
  "id": 307752207,
  "node_id": "MDU6SXNzdWUzMDc3NTIyMDc=",
  "number": 16373,
  "title": "rpc call \"personal_signAndSendTransaction\" sending tokens but losing ether 3 hours later",
  "user": {
    "login": "jingfei05",
    "id": 13552731,
    "node_id": "MDQ6VXNlcjEzNTUyNzMx",
    "avatar_url": "https://avatars.githubusercontent.com/u/13552731?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jingfei05",
    "html_url": "https://github.com/jingfei05",
    "followers_url": "https://api.github.com/users/jingfei05/followers",
    "following_url": "https://api.github.com/users/jingfei05/following{/other_user}",
    "gists_url": "https://api.github.com/users/jingfei05/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jingfei05/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jingfei05/subscriptions",
    "organizations_url": "https://api.github.com/users/jingfei05/orgs",
    "repos_url": "https://api.github.com/users/jingfei05/repos",
    "events_url": "https://api.github.com/users/jingfei05/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jingfei05/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 856638432,
      "node_id": "MDU6TGFiZWw4NTY2Mzg0MzI=",
      "url": "https://api.github.com/repos/ethereum/go-ethereum/labels/status:inactive",
      "name": "status:inactive",
      "color": "ffffff",
      "default": false,
      "description": null
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 5,
  "created_at": "2018-03-22T17:55:16Z",
  "updated_at": "2019-05-10T22:26:18Z",
  "closed_at": "2019-05-10T22:26:18Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "Hi there,\r\n\r\nplease note that this is an issue tracker reserved for bug reports and feature requests.\r\n\r\nFor general questions please use the gitter channel or the Ethereum stack exchange at https://ethereum.stackexchange.com.\r\n\r\n#### System information\r\n\r\nGeth version: `geth version` \r\n> Version: 1.8.1-stable\r\n\r\nOS & Version: Windows/Linux/OSX\r\nLinux\r\nDistributor ID: Ubuntu\r\nDescription:    Ubuntu 16.04.3 LTS\r\nRelease:        16.04\r\nCodename:       xenial\r\n\r\nGo Version: go1.9.4\r\n\r\nCommit hash : (if `develop`)\r\nGit Commit: 1e67410e88d2685bc54611a7c9f75c327b553ccc\r\n\r\n#### Expected behaviour\r\n1. Geth connect to testnet Ropsten and all addresses, contract, and transactions are on Ropsten.\r\n2. sending tokens to my wallet address using following RPC call.\r\n**RPC call:** personal_signAndSendTransaction\r\nToken Transaction received by the destination account.                       OK\r\nif we use the same json data but using eth_SendTransaction would send the token as well but the difference is that all ether in the sending address will be sent out to the same address.  Please see the solidity contract code in backtrace. I have gone thru the code many times already can see anything wrong with it. It's quite standard contract.\r\n\r\n#### Actual behaviour\r\nThe expected token transactions was sent but three hours later, three ether transactions occurred and a total of 3x0.19958 ethers were take away from the address: 0x2f6e4dd0286aacdbfa88db0e92cc7a1c89709175.\r\nAll ethers sent to a unknown address:\r\n0xbc3edbdfe92dfe06bc005d499b2a35649baec237 \r\n\r\n0x7c6121679ddeae6aa42759acbf4a8032560438440f69a1103d983e3110c90941 | 2882698 | 8 hrs 58 mins ago | 0x2f6e4dd0286aacdbfa88db0e92cc7a1c89709175 | OUT | 0xbc3edbdfe92dfe06bc005d499b2a35649baec237 | 0.19958 Ether | 0.00042\r\n-- | -- | -- | -- | -- | -- | -- | --\r\n0x342b729dbf7763aff4d606cf4f2f99e10dda6910a876136753bd27975e13ad8b | 2882698 | 8 hrs 58 mins ago | 0x2f6e4dd0286aacdbfa88db0e92cc7a1c89709175 | OUT | 0xbc3edbdfe92dfe06bc005d499b2a35649baec237 | 0.19958 Ether | 0.00042\r\n0x38fde4291f48fac9bcf42a79570f04b7841f2cb58a01d8148e9dbf13e434c08f | 2882698 | 8 hrs 58 mins ago | 0x2f6e4dd0286aacdbfa88db0e92cc7a1c89709175 | OUT | 0xbc3edbdfe92dfe06bc005d499b2a35649baec237 | 0.19958 Ether | 0.00042\r\n#### Steps to reproduce the behaviour\r\n{\r\n\t\"jsonrpc\":\"2.0\",\r\n\t\"method\":\"personal_signAndSendTransaction\",\r\n\t\"params\":[\r\n\t\t{\r\n\t\t\t\"from\": \"0x2f6e4dd0286aacdbfa88db0e92cc7a1c89709175\",\r\n\t\t\t\"to\": \"0x567527C374602B9d206DDfaf001dECA3F595b7b5\",\r\n\t\t\t\"gasLimit\" : \"0xcc40\",\r\n\t\t\t\"value\": \"0x0\",\r\n\t\t\t\"data\": \"0xa9059cbb0000000000000000000000005fec1b24b198ecf5feb9e44ec79314594225c85300000000000000000000000000000000000000000000021e27c1806e59a40000\"\t\t\r\n\t\t},\r\n\t\t\t\"bitontop123\"\r\n\t],\r\n\t\"id\":1\r\n}\r\n\r\nTxHash:\r\n0xb6f795f717fd5f95c2c4157802c9946e68c6c2caa61a83aee280d20f634e3646 \r\nTxReceipt Status:   Success\r\nBlock Height:          2881961 (3846 block confirmations)\r\nTimeStamp:            11 hrs 59 mins ago (Mar-22-2018 05:15:55 AM +UTC)\r\nFrom:                     0x2f6e4dd0286aacdbfa88db0e92cc7a1c89709175\r\nTo:                         Contract 0x567527c374602b9d206ddfaf001deca3f595b7b5  \r\nToken Transfer:      10,001 ERC20 (TESTOKEN)  from 0x2f6e4dd0286aacdbfa88db0e92cc7a1c89709175to  0x5fec1b24b198ecf5feb9e44ec79314594225c853\r\nValue:                     0 Ether ($0.00) \r\nGas Limit:               90000 \r\nGas Used By Txn:   38036 \r\nGas Price:               0.00000002 Ether (20 Gwei) \r\nActual Tx Cost/Fee:              0.00076072 Ether ($0.000000) \r\nNonce:                   1436 \r\nInputData:              Function: transfer(address _to, uint256 _value) ***\r\n                               MethodID: 0xa9059cbb\r\n                               [0]:  0000000000000000000000005fec1b24b198ecf5feb9e44ec79314594225c853\r\n                               [1]:  00000000000000000000000000000000000000000000021e27c1806e59a40000\r\n===================================================================\r\n#### Backtrace\r\npragma solidity ^0.4.16;\r\n\r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\r\n\r\ncontract AIBETHToken {\r\n    // Public variables of the token\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals = 18;\r\n    // 18 decimals is the strongly suggested default, avoid changing it\r\n    uint256 public totalSupply;\r\n\r\n    address public coinOwner;\r\n    uint256 public receivedMoney;\r\n    mapping (address => uint256) public pendingWithdrawals;\r\n\r\n    // This creates an array with all balances\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n    // This generates a public event on the blockchain that will notify clients\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    // This notifies clients about the amount burnt\r\n    event Burn(address indexed from, uint256 value);\r\n\r\n    /**\r\n     * Constructor function\r\n     *\r\n     * Initializes contract with initial supply tokens to the creator of the contract\r\n     */\r\n    function AIBETHToken(\r\n        uint256 initialSupply,\r\n        string tokenName,\r\n        string tokenSymbol\r\n    ) public payable {\r\n        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\r\n        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\r\n        name = tokenName;                                   // Set the name for display purposes\r\n        symbol = tokenSymbol;                               // Set the symbol for display purposes\r\n    }\r\n\r\n    /**\r\n     * Internal transfer, only can be called by this contract\r\n     */\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        // Prevent transfer to 0x0 address. Use burn() instead\r\n        require(_to != 0x0);\r\n        // Check if the sender has enough\r\n        require(balanceOf[_from] >= _value);\r\n        // Check for overflows\r\n        require(balanceOf[_to] + _value > balanceOf[_to]);\r\n        // Save this for an assertion in the future\r\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n        // Subtract from the sender\r\n        balanceOf[_from] -= _value;\r\n        // Add the same to the recipient\r\n        balanceOf[_to] += _value;\r\n        Transfer(_from, _to, _value);\r\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\r\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n    }\r\n\r\n    /**\r\n     * Transfer tokens\r\n     *\r\n     * Send `_value` tokens to `_to` from your account\r\n     *\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transfer(address _to, uint256 _value) public {\r\n        _transfer(msg.sender, _to, _value);\r\n    }\r\n\r\n    /**\r\n     * Transfer tokens from other address\r\n     *\r\n     * Send `_value` tokens to `_to` on behalf of `_from`\r\n     *\r\n     * @param _from The address of the sender\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\r\n        allowance[_from][msg.sender] -= _value;\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Set allowance for other address\r\n     *\r\n     * Allows `_spender` to spend no more than `_value` tokens on your behalf\r\n     *\r\n     * @param _spender The address authorized to spend\r\n     * @param _value the max amount they can spend\r\n     */\r\n    function approve(address _spender, uint256 _value) public\r\n        returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Set allowance for other address and notify\r\n     *\r\n     * Allows `_spender` to spend no more than `_value` tokens on your behalf, and then ping the contract about it\r\n     *\r\n     * @param _spender The address authorized to spend\r\n     * @param _value the max amount they can spend\r\n     * @param _extraData some extra information to send to the approved contract\r\n     */\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\r\n        public\r\n        returns (bool success) {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Destroy tokens\r\n     *\r\n     * Remove `_value` tokens from the system irreversibly\r\n     *\r\n     * @param _value the amount of money to burn\r\n     */\r\n    function burn(uint256 _value) public returns (bool success) {\r\n        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\r\n        balanceOf[msg.sender] -= _value;            // Subtract from the sender\r\n        totalSupply -= _value;                      // Updates totalSupply\r\n        Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Destroy tokens from other account\r\n     *\r\n     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\r\n     *\r\n     * @param _from the address of the sender\r\n     * @param _value the amount of money to burn\r\n     */\r\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\r\n        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\r\n        require(_value <= allowance[_from][msg.sender]);    // Check allowance\r\n        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\r\n        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\r\n        totalSupply -= _value;                              // Update totalSupply\r\n        Burn(_from, _value);\r\n        return true;\r\n    }\r\n\r\n    function sendReceivedMoneyToOwner() public payable returns (bool) {\r\n\r\n        if (msg.value > receivedMoney) {\r\n            pendingWithdrawals[coinOwner] += msg.value;\r\n            coinOwner = msg.sender;\r\n            receivedMoney = msg.value;\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function withdraw() public {\r\n        uint amount = pendingWithdrawals[msg.sender];\r\n        // Remember to zero the pending refund before\r\n\r\n        // sending to prevent re-entrancy attacks\r\n        pendingWithdrawals[msg.sender] = 0;\r\n\r\n        //msg.sender.transfer(amount);\r\n        if(!msg.sender.send(amount))\r\n        {\r\n            revert();  //throw;  BUT throw is deprecated!\r\n        }\r\n    }\r\n}\r\n````\r\n[backtrace]\r\n````\r\n",
  "closed_by": {
    "login": "stale[bot]",
    "id": 26384082,
    "node_id": "MDM6Qm90MjYzODQwODI=",
    "avatar_url": "https://avatars.githubusercontent.com/in/1724?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/stale%5Bbot%5D",
    "html_url": "https://github.com/apps/stale",
    "followers_url": "https://api.github.com/users/stale%5Bbot%5D/followers",
    "following_url": "https://api.github.com/users/stale%5Bbot%5D/following{/other_user}",
    "gists_url": "https://api.github.com/users/stale%5Bbot%5D/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/stale%5Bbot%5D/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/stale%5Bbot%5D/subscriptions",
    "organizations_url": "https://api.github.com/users/stale%5Bbot%5D/orgs",
    "repos_url": "https://api.github.com/users/stale%5Bbot%5D/repos",
    "events_url": "https://api.github.com/users/stale%5Bbot%5D/events{/privacy}",
    "received_events_url": "https://api.github.com/users/stale%5Bbot%5D/received_events",
    "type": "Bot",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/16373/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/16373/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/375552773",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/16373#issuecomment-375552773",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/16373",
    "id": 375552773,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NTU1Mjc3Mw==",
    "user": {
      "login": "karalabe",
      "id": 129561,
      "node_id": "MDQ6VXNlcjEyOTU2MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/129561?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/karalabe",
      "html_url": "https://github.com/karalabe",
      "followers_url": "https://api.github.com/users/karalabe/followers",
      "following_url": "https://api.github.com/users/karalabe/following{/other_user}",
      "gists_url": "https://api.github.com/users/karalabe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/karalabe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/karalabe/subscriptions",
      "organizations_url": "https://api.github.com/users/karalabe/orgs",
      "repos_url": "https://api.github.com/users/karalabe/repos",
      "events_url": "https://api.github.com/users/karalabe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/karalabe/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-23T05:52:53Z",
    "updated_at": "2018-03-23T05:53:04Z",
    "author_association": "MEMBER",
    "body": "My guess is that you exposed your node to the public internet and unlocked your account. There are bots actively searching for unlocked accounts and try to empty them. They probably don't bother differentiating between testnet clients and mainnet ones.\r\n\r\nThe same account holds mainnet funds too https://etherscan.io/address/0xbc3edbdfe92dfe06bc005d499b2a35649baec237 .",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/375552773/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/375805572",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/16373#issuecomment-375805572",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/16373",
    "id": 375805572,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NTgwNTU3Mg==",
    "user": {
      "login": "jingfei05",
      "id": 13552731,
      "node_id": "MDQ6VXNlcjEzNTUyNzMx",
      "avatar_url": "https://avatars.githubusercontent.com/u/13552731?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jingfei05",
      "html_url": "https://github.com/jingfei05",
      "followers_url": "https://api.github.com/users/jingfei05/followers",
      "following_url": "https://api.github.com/users/jingfei05/following{/other_user}",
      "gists_url": "https://api.github.com/users/jingfei05/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jingfei05/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jingfei05/subscriptions",
      "organizations_url": "https://api.github.com/users/jingfei05/orgs",
      "repos_url": "https://api.github.com/users/jingfei05/repos",
      "events_url": "https://api.github.com/users/jingfei05/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jingfei05/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-23T21:39:20Z",
    "updated_at": "2018-03-23T21:39:20Z",
    "author_association": "NONE",
    "body": "Thanks for the providing suggestion on this issue.  When i am using the eth_sendTransactions, i did unlock the account but forgot to lock it because it's just a testnet so no access restrictions to the geth node.  It seems the bot has been in action to monitoring my testing node and always ready to take ether away because the account is unlocked in a certain period. I did do a test that after an unlock, the account will be locked again after a time period but not sure how long.\r\n\r\nHowever, according to the following description of personal_sendTransaction as following:\r\n```\r\nThe transaction is the same argument as for eth_sendTransaction and contains the from address. If the passphrase can be used to decrypt the private key belogging to tx.from the transaction is verified, signed and send onto the network. The account is not unlocked globally in the node and cannot be used in other RPC calls.\r\n```\r\nThe personal_sendTransaction command is not globally unlock the account, so it's not making sense that the bot can take ether from the address 3 hours later.  It is possible that the bot has a chance to take the ether because the personal_sendTransaction RPC call is not atomic. Three hours later, this is kind of insane, so i am wondering if it's related to the bot, then does that mean there is security flaw in this personal_sendTransaction RPC call? Of course, normal geth node is not opening access for this command.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/375805572/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/376421463",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/16373#issuecomment-376421463",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/16373",
    "id": 376421463,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NjQyMTQ2Mw==",
    "user": {
      "login": "karalabe",
      "id": 129561,
      "node_id": "MDQ6VXNlcjEyOTU2MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/129561?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/karalabe",
      "html_url": "https://github.com/karalabe",
      "followers_url": "https://api.github.com/users/karalabe/followers",
      "following_url": "https://api.github.com/users/karalabe/following{/other_user}",
      "gists_url": "https://api.github.com/users/karalabe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/karalabe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/karalabe/subscriptions",
      "organizations_url": "https://api.github.com/users/karalabe/orgs",
      "repos_url": "https://api.github.com/users/karalabe/repos",
      "events_url": "https://api.github.com/users/karalabe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/karalabe/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-27T07:13:44Z",
    "updated_at": "2018-03-27T07:13:44Z",
    "author_association": "MEMBER",
    "body": "If you unlocked your account, a malicious user can sign transactions in advance with it, and keep those signed transactions privately. When your account gets funded, the attacker can publish the hidden-but-already-signed transactions to take the funds off.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/376421463/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/377038618",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/16373#issuecomment-377038618",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/16373",
    "id": 377038618,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NzAzODYxOA==",
    "user": {
      "login": "jingfei05",
      "id": 13552731,
      "node_id": "MDQ6VXNlcjEzNTUyNzMx",
      "avatar_url": "https://avatars.githubusercontent.com/u/13552731?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jingfei05",
      "html_url": "https://github.com/jingfei05",
      "followers_url": "https://api.github.com/users/jingfei05/followers",
      "following_url": "https://api.github.com/users/jingfei05/following{/other_user}",
      "gists_url": "https://api.github.com/users/jingfei05/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jingfei05/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jingfei05/subscriptions",
      "organizations_url": "https://api.github.com/users/jingfei05/orgs",
      "repos_url": "https://api.github.com/users/jingfei05/repos",
      "events_url": "https://api.github.com/users/jingfei05/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jingfei05/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-28T21:13:04Z",
    "updated_at": "2018-03-28T21:13:04Z",
    "author_association": "NONE",
    "body": "I see. Thanks for the explanation.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/377038618/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/478159617",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/16373#issuecomment-478159617",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/16373",
    "id": 478159617,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3ODE1OTYxNw==",
    "user": {
      "login": "stale[bot]",
      "id": 26384082,
      "node_id": "MDM6Qm90MjYzODQwODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/1724?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stale%5Bbot%5D",
      "html_url": "https://github.com/apps/stale",
      "followers_url": "https://api.github.com/users/stale%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/stale%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/stale%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stale%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stale%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/stale%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/stale%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/stale%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stale%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2019-03-29T21:46:11Z",
    "updated_at": "2019-03-29T21:46:11Z",
    "author_association": "NONE",
    "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/478159617/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
