{
  "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20207",
  "repository_url": "https://api.github.com/repos/ethereum/go-ethereum",
  "labels_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20207/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20207/comments",
  "events_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20207/events",
  "html_url": "https://github.com/ethereum/go-ethereum/issues/20207",
  "id": 512807118,
  "node_id": "MDU6SXNzdWU1MTI4MDcxMTg=",
  "number": 20207,
  "title": "abigen --abi token.abi --pkg token --out token_abi.go export multiple same same function",
  "user": {
    "login": "ying2025",
    "id": 28092539,
    "node_id": "MDQ6VXNlcjI4MDkyNTM5",
    "avatar_url": "https://avatars.githubusercontent.com/u/28092539?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ying2025",
    "html_url": "https://github.com/ying2025",
    "followers_url": "https://api.github.com/users/ying2025/followers",
    "following_url": "https://api.github.com/users/ying2025/following{/other_user}",
    "gists_url": "https://api.github.com/users/ying2025/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ying2025/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ying2025/subscriptions",
    "organizations_url": "https://api.github.com/users/ying2025/orgs",
    "repos_url": "https://api.github.com/users/ying2025/repos",
    "events_url": "https://api.github.com/users/ying2025/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ying2025/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 72233650,
      "node_id": "MDU6TGFiZWw3MjIzMzY1MA==",
      "url": "https://api.github.com/repos/ethereum/go-ethereum/labels/type:bug",
      "name": "type:bug",
      "color": "FF5E5E",
      "default": false,
      "description": ""
    },
    {
      "id": 72233652,
      "node_id": "MDU6TGFiZWw3MjIzMzY1Mg==",
      "url": "https://api.github.com/repos/ethereum/go-ethereum/labels/type:feature",
      "name": "type:feature",
      "color": "84b6eb",
      "default": false,
      "description": null
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2019-10-26T08:20:07Z",
  "updated_at": "2019-11-14T07:26:11Z",
  "closed_at": "2019-11-14T07:26:11Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "https://matrix.org/_matrix/media/r0/download/matrix.org/BCpYQZsBDVugwWELuIQEmSfc\r\n![image](https://user-images.githubusercontent.com/28092539/67616517-4e644180-f80c-11e9-96ea-7f61533116a2.png)\r\n  \r\nAnd the contract code is following.\r\n               pragma solidity ^0.4.24;\r\n//  RentHouse Foundation.\r\ncontract RentToken {\r\n    using SafeMath for uint256;\r\n    uint8 public constant decimals = 8;\r\n\r\n    string public constant symbol = \"RentToken\";\r\n    string public constant name = \"BLT\";\r\n\r\n    uint256 public _totalSupply = 40 * (10 ** 8) * (10 ** 8); // total supply is 4 billion\r\n    uint256 public _maxIncreaseAmount = 2 * (10 ** 8) * (10 ** 8); //  every time max increase 20 millions\r\n    uint256 public _increaseInterval = 1  years;  // 6 month interval can increase\r\n\r\n    // Owner of this contract\r\n    address public owner;\r\n\r\n    // Balances AAC for each account\r\n    mapping(address => uint256) public  balances;\r\n\r\n    // Owner of account approves the transfer of an amount to another account\r\n    mapping(address => mapping (address => uint256)) public  allowed;\r\n\r\n    // List of approved investors\r\n    mapping(address => bool) public approvedInvestorList;\r\n\r\n    // deposit\r\n    mapping(address => uint256) public deposit;\r\n\r\n\r\n    // totalTokenSold\r\n    uint256 public totalTokenSold = 0;\r\n    uint256 public releaseTokenTime = block.timestamp;\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    /**\r\n     * @dev Fix for the ERC20 short address attack.\r\n     */\r\n    modifier onlyPayloadSize(uint size) {\r\n      if(msg.data.length < size + 4) {\r\n        revert();\r\n      }\r\n      _;\r\n    }\r\n    /**\r\n    *  @dev Only owner can modifer \r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /// @dev Constructor\r\n    constructor()\r\n        public {\r\n        owner = msg.sender;\r\n        balances[owner] = _totalSupply;\r\n    }\r\n\r\n    /// @dev Gets totalSupply\r\n    /// @return Total supply\r\n    function totalSupply()\r\n        public\r\n        view\r\n        returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    function isToken() public pure returns(bool isIndeed) {\r\n        return true;\r\n    }\r\n    /// @dev Gets account's balance\r\n    /// @param _addr Address of the account\r\n    /// @return Account balance\r\n    function balanceOf(address _addr)\r\n        public\r\n        view\r\n        returns (uint256) {\r\n        return balances[_addr];\r\n    }\r\n\r\n    /// @dev check address is approved investor\r\n    /// @param _addr address\r\n    function isApprovedInvestor(address _addr)\r\n        public\r\n        view\r\n        returns (bool) {\r\n        return approvedInvestorList[_addr];\r\n    }\r\n\r\n    /// @dev get ETH deposit\r\n    /// @param _addr address get deposit\r\n    /// @return amount deposit of an buyer\r\n    function getDeposit(address _addr)\r\n        public\r\n        view\r\n        returns(uint256){\r\n        return deposit[_addr];\r\n    }\r\n\r\n\r\n    /// @dev Transfers the balance from msg.sender to an account\r\n    /// @param _to Recipient address\r\n    /// @param _amount Transfered amount in unit\r\n    /// @return Transfer status\r\n    function transfer(address _to, uint256 _amount)\r\n        public\r\n\r\n        returns (bool) {\r\n        // if sender's balance has enough unit and amount >= 0,\r\n        //      and the sum is not overflow,\r\n        // then do transfer\r\n        require(_amount > 0);\r\n        balances[msg.sender] = balances[msg.sender].Sub(_amount);\r\n        balances[_to] = balances[_to].Add(_amount);\r\n         Transfer(msg.sender, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    // Send _value amount of tokens from address _from to address _to\r\n    // The transferFrom method is used for a withdraw workflow, allowing contracts to send\r\n    // tokens on your behalf, for example to \"deposit\" to a contract address and/or to charge\r\n    // fees in Sub-currencies; the command should fail unless the _from account has\r\n    // deliberately authorized the sender of the message via some mechanism; we propose\r\n    // these standardized APIs for approval:\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount\r\n    )\r\n    public\r\n\r\n    returns (bool success) {\r\n        require(_amount > 0);\r\n        if (balances[_from] >= _amount) {\r\n            balances[_from] = balances[_from].Sub(_amount);\r\n            balances[_to] = balances[_to].Add(_amount);\r\n             Transfer(_from, _to, _amount);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\r\n    // If this function is called again it overwrites the current allowance with _value.\r\n    function approve(address _spender, uint256 _amount)\r\n        public\r\n\r\n        returns (bool success) {\r\n        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\r\n        allowed[msg.sender][_spender] = _amount;\r\n        Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n    // get allowance\r\n    function allowance(address _owner, address _spender)\r\n        public\r\n        view\r\n        returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    function increaseAmount() internal onlyOwner  {\r\n        uint256  nowTime = block.timestamp;\r\n        uint256 nextTime = releaseTokenTime.Add(_increaseInterval);\r\n        require(nextTime > nowTime);\r\n        _totalSupply = _totalSupply.Add(_maxIncreaseAmount);\r\n        uint256   timeInterval = 365 days;\r\n        _increaseInterval = _increaseInterval.Add(timeInterval);\r\n    } \r\n\r\n    function decreaseAmount(uint amount) internal onlyOwner {\r\n        _totalSupply = _totalSupply.Sub(amount);\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * SafeMath\r\n * Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  function Mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function Div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function Sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function Add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n\r\n",
  "closed_by": {
    "login": "gballet",
    "id": 3272758,
    "node_id": "MDQ6VXNlcjMyNzI3NTg=",
    "avatar_url": "https://avatars.githubusercontent.com/u/3272758?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/gballet",
    "html_url": "https://github.com/gballet",
    "followers_url": "https://api.github.com/users/gballet/followers",
    "following_url": "https://api.github.com/users/gballet/following{/other_user}",
    "gists_url": "https://api.github.com/users/gballet/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/gballet/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gballet/subscriptions",
    "organizations_url": "https://api.github.com/users/gballet/orgs",
    "repos_url": "https://api.github.com/users/gballet/repos",
    "events_url": "https://api.github.com/users/gballet/events{/privacy}",
    "received_events_url": "https://api.github.com/users/gballet/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20207/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20207/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/546876815",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/20207#issuecomment-546876815",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20207",
    "id": 546876815,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0Njg3NjgxNQ==",
    "user": {
      "login": "rjl493456442",
      "id": 5959481,
      "node_id": "MDQ6VXNlcjU5NTk0ODE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5959481?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rjl493456442",
      "html_url": "https://github.com/rjl493456442",
      "followers_url": "https://api.github.com/users/rjl493456442/followers",
      "following_url": "https://api.github.com/users/rjl493456442/following{/other_user}",
      "gists_url": "https://api.github.com/users/rjl493456442/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rjl493456442/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rjl493456442/subscriptions",
      "organizations_url": "https://api.github.com/users/rjl493456442/orgs",
      "repos_url": "https://api.github.com/users/rjl493456442/repos",
      "events_url": "https://api.github.com/users/rjl493456442/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rjl493456442/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-28T10:05:51Z",
    "updated_at": "2019-10-28T10:05:51Z",
    "author_association": "MEMBER",
    "body": "They are different member functions of different structs",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/546876815/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/546885299",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/20207#issuecomment-546885299",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20207",
    "id": 546885299,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0Njg4NTI5OQ==",
    "user": {
      "login": "xpofei",
      "id": 10338831,
      "node_id": "MDQ6VXNlcjEwMzM4ODMx",
      "avatar_url": "https://avatars.githubusercontent.com/u/10338831?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/xpofei",
      "html_url": "https://github.com/xpofei",
      "followers_url": "https://api.github.com/users/xpofei/followers",
      "following_url": "https://api.github.com/users/xpofei/following{/other_user}",
      "gists_url": "https://api.github.com/users/xpofei/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/xpofei/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/xpofei/subscriptions",
      "organizations_url": "https://api.github.com/users/xpofei/orgs",
      "repos_url": "https://api.github.com/users/xpofei/repos",
      "events_url": "https://api.github.com/users/xpofei/events{/privacy}",
      "received_events_url": "https://api.github.com/users/xpofei/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-28T10:29:30Z",
    "updated_at": "2019-10-28T10:29:30Z",
    "author_association": "NONE",
    "body": "This is because the _totalSupply variable is public and has the same name as function totalSupply. Trying to change the name of _totalSupply or making it private will solve this problem.\r\nIf abigen converts the _totalSupply variable to _TotalSupply() method in golang, this method will not be exported.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/546885299/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/548286165",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/20207#issuecomment-548286165",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20207",
    "id": 548286165,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0ODI4NjE2NQ==",
    "user": {
      "login": "karalabe",
      "id": 129561,
      "node_id": "MDQ6VXNlcjEyOTU2MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/129561?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/karalabe",
      "html_url": "https://github.com/karalabe",
      "followers_url": "https://api.github.com/users/karalabe/followers",
      "following_url": "https://api.github.com/users/karalabe/following{/other_user}",
      "gists_url": "https://api.github.com/users/karalabe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/karalabe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/karalabe/subscriptions",
      "organizations_url": "https://api.github.com/users/karalabe/orgs",
      "repos_url": "https://api.github.com/users/karalabe/repos",
      "events_url": "https://api.github.com/users/karalabe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/karalabe/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-31T09:37:10Z",
    "updated_at": "2019-10-31T09:37:10Z",
    "author_association": "MEMBER",
    "body": "Yeah, so with Go not supporting overloaded methods, the only way to handle clashes is to add some prefix/suffix. For overloaded Solidity methods the wrapper currently adds numbre suffixes. I guess we could extend that logic for the variables to?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/548286165/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/548290681",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/20207#issuecomment-548290681",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20207",
    "id": 548290681,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0ODI5MDY4MQ==",
    "user": {
      "login": "karalabe",
      "id": 129561,
      "node_id": "MDQ6VXNlcjEyOTU2MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/129561?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/karalabe",
      "html_url": "https://github.com/karalabe",
      "followers_url": "https://api.github.com/users/karalabe/followers",
      "following_url": "https://api.github.com/users/karalabe/following{/other_user}",
      "gists_url": "https://api.github.com/users/karalabe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/karalabe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/karalabe/subscriptions",
      "organizations_url": "https://api.github.com/users/karalabe/orgs",
      "repos_url": "https://api.github.com/users/karalabe/repos",
      "events_url": "https://api.github.com/users/karalabe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/karalabe/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-31T09:49:50Z",
    "updated_at": "2019-10-31T09:49:50Z",
    "author_association": "MEMBER",
    "body": "An alternative more elegant solution is to extend abigen to support aliasing. I.e. you could explicitly specify that name `xyz` should be converted to `abc`, and then the user could manually resolve conflicts in stead of us having to dream up names.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/548290681/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
