{
  "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/27062",
  "repository_url": "https://api.github.com/repos/ethereum/go-ethereum",
  "labels_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/27062/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/27062/comments",
  "events_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/27062/events",
  "html_url": "https://github.com/ethereum/go-ethereum/issues/27062",
  "id": 1658493937,
  "node_id": "I_kwDOAOvK985i2pvx",
  "number": 27062,
  "title": "EncodeRLP of type Receipt not working",
  "user": {
    "login": "LAMOUR0913",
    "id": 49829213,
    "node_id": "MDQ6VXNlcjQ5ODI5MjEz",
    "avatar_url": "https://avatars.githubusercontent.com/u/49829213?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/LAMOUR0913",
    "html_url": "https://github.com/LAMOUR0913",
    "followers_url": "https://api.github.com/users/LAMOUR0913/followers",
    "following_url": "https://api.github.com/users/LAMOUR0913/following{/other_user}",
    "gists_url": "https://api.github.com/users/LAMOUR0913/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/LAMOUR0913/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/LAMOUR0913/subscriptions",
    "organizations_url": "https://api.github.com/users/LAMOUR0913/orgs",
    "repos_url": "https://api.github.com/users/LAMOUR0913/repos",
    "events_url": "https://api.github.com/users/LAMOUR0913/events{/privacy}",
    "received_events_url": "https://api.github.com/users/LAMOUR0913/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 72233650,
      "node_id": "MDU6TGFiZWw3MjIzMzY1MA==",
      "url": "https://api.github.com/repos/ethereum/go-ethereum/labels/type:bug",
      "name": "type:bug",
      "color": "FF5E5E",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2023-04-07T07:48:57Z",
  "updated_at": "2023-04-07T08:13:13Z",
  "closed_at": "2023-04-07T08:13:12Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "#### System information\r\n\r\nGeth version: `1.11.5`\r\n\r\nI am in the process of redoing the receiptRoot in the block.\r\nBelow is my first writing.\r\n```go\r\n                 receiptRLP := new(bytes.Buffer)\r\n\t\terr := receipt.EncodeRLP(receiptRLP)\r\n\t\tif err != nil {\r\n\t\t\tfmt.Println(\"err\", err)\r\n\t\t\treturn\r\n\t\t}\r\n\t\tkeyRLPTemp, _ := rlp.EncodeToBytes(uint(i))\r\n\t\ttrie.Update(keyRLPTemp, receiptRLP.Bytes())\r\n```\r\nBut I had a problem calculating the receiptRoot, and the results were inconsistent with the expected results.\r\nI know that in the calculation receiptRoot and transactionsRoot, the only difference is that the value updated to trie is different.\r\n\r\nI believe my thinking is right, so I try to use the original method to reconstruct receiptRoot.\r\n```go\r\n        hasher := trie.NewStackTrie(nil)\r\n        var receipts []*types.Receipt\r\n\tfor i := 0; i < block.Transactions().Len(); i++ {\r\n\t\ttransactionRLP := new(bytes.Buffer)\r\n\t\tblock.Transactions().EncodeIndex(i, transactionRLP)\r\n\t\treceipt, _ := client.TransactionReceipt(context.Background(), crypto.Keccak256Hash(transactionRLP.Bytes()))\r\n\t\treceipts = append(receipts, receipt)\r\n\t}\r\n       resultReceipt := types.DeriveSha(types.Receipts(receipts), hasher)\r\n       fmt.Println(\"resultReceipt\", resultReceipt)\r\n```\r\n\r\nVery good, the results are in line with expectations.\r\nAfter searching, my first writing method called method `EncodeRLP` of class `Receipt`. The second writing method calls the`EncodeIndex` method of class `Receipts`. Although the operation is the same, the specific implementation of the method is different.\r\n```go\r\n// Receipts RLP \r\n// encoding of specific elements in a receipt array\r\nfunc (rs Receipts) EncodeIndex(i int, w *bytes.Buffer) {\r\n\tr := rs[i]\r\n\tdata := &receiptRLP{r.statusEncoding(), r.CumulativeGasUsed, r.Bloom, r.Logs}\r\n\tswitch r.Type {\r\n\tcase LegacyTxType:\r\n\t\trlp.Encode(w, data)\r\n\tcase AccessListTxType:\r\n\t\tw.WriteByte(AccessListTxType)\r\n\t\trlp.Encode(w, data)\r\n\tcase DynamicFeeTxType:\r\n\t\tw.WriteByte(DynamicFeeTxType)\r\n\t\trlp.Encode(w, data)\r\n\tdefault:\r\n\t\t// For unsupported types, write nothing. Since this is for\r\n\t\t// DeriveSha, the error will be caught matching the derived hash\r\n\t\t// to the block.\r\n\t}\r\n}\r\n\r\n// Receipt\r\nfunc (r *Receipt) EncodeRLP(w io.Writer) error {\r\n\tdata := &receiptRLP{r.statusEncoding(), r.CumulativeGasUsed, r.Bloom, r.Logs}\r\n\tif r.Type == LegacyTxType {\r\n\t\treturn rlp.Encode(w, data)\r\n\t}\r\n\tbuf := encodeBufferPool.Get().(*bytes.Buffer)\r\n\tdefer encodeBufferPool.Put(buf)\r\n\tbuf.Reset()\r\n\tif err := r.encodeTyped(data, buf); err != nil {\r\n\t\treturn err\r\n\t}\r\n\treturn rlp.Encode(w, buf.Bytes())\r\n}\r\n```\r\n\r\nObviously, only the processing logic of type `LegacyTxType` is added to the method `EncodeRLP`, so that both are the same operation, but the results are inconsistent.\r\n",
  "closed_by": {
    "login": "s1na",
    "id": 1591639,
    "node_id": "MDQ6VXNlcjE1OTE2Mzk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1591639?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/s1na",
    "html_url": "https://github.com/s1na",
    "followers_url": "https://api.github.com/users/s1na/followers",
    "following_url": "https://api.github.com/users/s1na/following{/other_user}",
    "gists_url": "https://api.github.com/users/s1na/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/s1na/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/s1na/subscriptions",
    "organizations_url": "https://api.github.com/users/s1na/orgs",
    "repos_url": "https://api.github.com/users/s1na/repos",
    "events_url": "https://api.github.com/users/s1na/events{/privacy}",
    "received_events_url": "https://api.github.com/users/s1na/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/27062/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/27062/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1500056757",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/27062#issuecomment-1500056757",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/27062",
    "id": 1500056757,
    "node_id": "IC_kwDOAOvK985ZaQy1",
    "user": {
      "login": "s1na",
      "id": 1591639,
      "node_id": "MDQ6VXNlcjE1OTE2Mzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1591639?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/s1na",
      "html_url": "https://github.com/s1na",
      "followers_url": "https://api.github.com/users/s1na/followers",
      "following_url": "https://api.github.com/users/s1na/following{/other_user}",
      "gists_url": "https://api.github.com/users/s1na/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/s1na/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/s1na/subscriptions",
      "organizations_url": "https://api.github.com/users/s1na/orgs",
      "repos_url": "https://api.github.com/users/s1na/repos",
      "events_url": "https://api.github.com/users/s1na/events{/privacy}",
      "received_events_url": "https://api.github.com/users/s1na/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-04-07T08:13:12Z",
    "updated_at": "2023-04-07T08:13:12Z",
    "author_association": "MEMBER",
    "body": "Please use `receipt.MarshalBinary`, this one covers other tx types too. The reason a new method was needed is that tx and receipt encoding of new tx types might not be necessarily simple RLP and is left up to the types to decide.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1500056757/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
