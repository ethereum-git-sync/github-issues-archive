{
  "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/1783",
  "repository_url": "https://api.github.com/repos/ethereum/go-ethereum",
  "labels_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/1783/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/1783/comments",
  "events_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/1783/events",
  "html_url": "https://github.com/ethereum/go-ethereum/issues/1783",
  "id": 105628318,
  "node_id": "MDU6SXNzdWUxMDU2MjgzMTg=",
  "number": 1783,
  "title": "core: improve test coverage",
  "user": {
    "login": "Gustav-Simonsson",
    "id": 293096,
    "node_id": "MDQ6VXNlcjI5MzA5Ng==",
    "avatar_url": "https://avatars.githubusercontent.com/u/293096?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Gustav-Simonsson",
    "html_url": "https://github.com/Gustav-Simonsson",
    "followers_url": "https://api.github.com/users/Gustav-Simonsson/followers",
    "following_url": "https://api.github.com/users/Gustav-Simonsson/following{/other_user}",
    "gists_url": "https://api.github.com/users/Gustav-Simonsson/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Gustav-Simonsson/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Gustav-Simonsson/subscriptions",
    "organizations_url": "https://api.github.com/users/Gustav-Simonsson/orgs",
    "repos_url": "https://api.github.com/users/Gustav-Simonsson/repos",
    "events_url": "https://api.github.com/users/Gustav-Simonsson/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Gustav-Simonsson/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": {
    "login": "Gustav-Simonsson",
    "id": 293096,
    "node_id": "MDQ6VXNlcjI5MzA5Ng==",
    "avatar_url": "https://avatars.githubusercontent.com/u/293096?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Gustav-Simonsson",
    "html_url": "https://github.com/Gustav-Simonsson",
    "followers_url": "https://api.github.com/users/Gustav-Simonsson/followers",
    "following_url": "https://api.github.com/users/Gustav-Simonsson/following{/other_user}",
    "gists_url": "https://api.github.com/users/Gustav-Simonsson/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Gustav-Simonsson/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Gustav-Simonsson/subscriptions",
    "organizations_url": "https://api.github.com/users/Gustav-Simonsson/orgs",
    "repos_url": "https://api.github.com/users/Gustav-Simonsson/repos",
    "events_url": "https://api.github.com/users/Gustav-Simonsson/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Gustav-Simonsson/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "Gustav-Simonsson",
      "id": 293096,
      "node_id": "MDQ6VXNlcjI5MzA5Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/293096?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Gustav-Simonsson",
      "html_url": "https://github.com/Gustav-Simonsson",
      "followers_url": "https://api.github.com/users/Gustav-Simonsson/followers",
      "following_url": "https://api.github.com/users/Gustav-Simonsson/following{/other_user}",
      "gists_url": "https://api.github.com/users/Gustav-Simonsson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Gustav-Simonsson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Gustav-Simonsson/subscriptions",
      "organizations_url": "https://api.github.com/users/Gustav-Simonsson/orgs",
      "repos_url": "https://api.github.com/users/Gustav-Simonsson/repos",
      "events_url": "https://api.github.com/users/Gustav-Simonsson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Gustav-Simonsson/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2015-09-09T16:01:27Z",
  "updated_at": "2017-01-26T19:31:09Z",
  "closed_at": "2017-01-26T19:31:05Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "Issue to track coverage of core packages and subsequent tests & cleanup\n\nCore packages code not covered by https://github.com/ethereum/tests\n\nThis list includes functions not used by consensus-critical code but used by e.g. RPC API - please cross out those once verified that they cannot affect consensus.\n\nAlso it exposes some unused code and parts of code that cannot be reached in current use, e.g. some internal RLP decoding error clauses which cannot happen unless there is DB corruption or some other internal bug that can't really be triggered by a valid test scenario.\n\ncore/types/block.go:\n- [ ] `NewBlock` when there are no txs.\n- [ ] `(b *Block)` ValidateFields (used by eth/handler.go when a block message is received)\n\ncore/types/block.go:\n- [ ] `(self *Receipt) Logs()`\n- [ ] `(self *Receipt) RlpEncode()` when RLP encoding fails\n- [ ] `(self *Receipts) RlpEncode()`\n\ncore/types/transaction.go:\n- [x] `IsContractAddr` (unused, removing)\n- [ ] `NewContractCreation` (not consensus protocol, coverage should be added in xeth as it's used by APIs)\n- [x] `NewTransaction` (not used by consensus protocol. covered by core/types and eth/handler tests)\n- [x] `(tx *Transaction) Cost` not used by consensus protocol, covered by core unit tests.\n- [ ] `(tx *Transaction) publicKey()` when public key _after_ recovery is invalid.\n- [ ] `(tx *Transaction) WithSignature` not used by consensus protocol. partly covered by core unit tests but needs test for when crypto.Sign fails.\n- [ ] `(tx *Transaction) SignECDSA` same as above\n\ncore/state/managed_state.go: no coverage except for constructor\ncore/state/state_object.go:\n- [x] `(self *StateObject) Reset()` unused, removing\n- [ ] `NewStateObjectFromBytes` error on RLP decoding\n- [ ] `(c *StateObject) setAddr` error on RLP decoding\n- [x] `(c *StateObject) GetInstr` unused, removing\n- [x] `(self *StateObject) Set` unused, removing\n- [x] `(c *StateObject) N()` unused, removing\n- [x] `(c *StateObject) Init()` unused, removing\n- [x] `(c *StateObject) Code()` used by xeth\n- [x] `(self *StateObject) SetInitCode` unused, removing\n- [x] `(self *StateObject) EachStorage` used by VM debug printing\n- [x] `(c *StateObject) RlpDecode` unused, removing\n\ncore/state/statedb.go:\n- [x] `(self *StateDB) HasAccount` not used by consensus protocol. used by tx pool and tests\n- [ ] `(self *StateDB) GetNonce` if stateObject == nil\n- [ ] `(self *StateDB) GetState` if stateObject == nil\n- [ ] `(self *StateDB) IsDeleted` if stateObject == nil\n- [x] `(self *StateDB) SetCode` not used by consensus protocol, used when first writing genesis block before connecting to network.\n- [ ] `(self *StateDB) Delete` if stateObject == nil\n- [x] `(s *StateDB) Cmp` unused, removing\n- [x] `(s *StateDB) Trie()` unused, removing\n- [x] `(s *StateDB) Reset()` unused, removing\n\ncore/vm/context.go:\n- [ ] `(self *Context) SetCode` used in VM but seems to not be tracked due to interface?\n\ncore/vm/errors.go:\n- [x] `StackErr` unused, removing\n- [x] `(self StackError) Error()` unused, removing\n- [x] `IsStackErr` unused, removing\n\ncore/vm/memory.go:\n- [ ] `(m *Memory) Set if size > uint64(len(m.store))`\n- [ ] `(self *Memory) Get    if len(self.store) <= offset (no-op return)`\n- [ ] `(self *Memory) GetPtr if len(self.store) <= offset (no-op return)`\n- [x] `(m *Memory) Data()` not used by consensus protocol, used by debugging code\n\ncore/vm/stack.go:\n- [x] `(st *stack) Data()` not used by consensus protocol, used by debugging code\n\ncore/vm/vm.go:\n- [x] `case SSTORE:` stack underflow, new test added to cover this\n- [x] `(self *Vm) Env()` used by VirtualMachine interface \n\ncore/block_cache.go : 0 coverage\n\ncore/block_processor.go:\n- [ ] `(self *BlockProcessor) ChainManager()`\n- [x] `(self *BlockProcessor) ApplyTransactions` if transientProcess. always set to false when used by consensus protocol. only true when called from miner worker.\n- [x] `(sm *BlockProcessor) RetryProcess` Not used by consensus protocol. Used by RPC API for debugging.\n- [ ] `(sm *BlockProcessor) Process` if sm.bc.HasBlock(block.Hash())\n- [ ] `(sm *BlockProcessor) GetBlockReceipts` not used by consensus protocol. used by RPC API and gas price oracle.\n- [ ] `(sm *BlockProcessor) GetLogs` not used by consensus protocol. used by RPC API, tests.\n- [ ] `ValidateHeader` if uncle ts is too big - **NEEDS CONSENSUS TEST**\n\ncore/canary.go:: 0 coverage\n\ncore/chain_manager.go:\n- [x] `NewChainManager` writing of genesis block. used when starting sync from scratch. well verified but would be nice to cover by unit test. not really part of consensus protocol.\n- [ ] `NewChainManager` if bc.setLastState() failed\n- [x] `NewChainManager` if bad block hash was found. **indirectly tested through consensus test, but we should definitely add a unit test for bad blocks in general.** unit test: https://github.com/ethereum/go-ethereum/pull/1803\n- [x] `(bc *ChainManager) SetHead` covered by bad hashes unit test above\n- [x] `(self *ChainManager) GasLimit()`\n- [x] `(self *ChainManager) LastBlockHash()`\n- [ ] `(self *ChainManager) Status()`\n- [x] `(bc *ChainManager) recover()` will be removed by https://github.com/ethereum/go-ethereum/pull/1756\n- [x] `(bc *ChainManager) setLastState()` if last block was not found\n- [x] `(bc *ChainManager) Reset()` will be removed by https://github.com/ethereum/go-ethereum/pull/1756\n- [ ] `(bc *ChainManager) removeBlock`\n- [ ] `(bc *ChainManager) ResetWithGenesisBlock`\n- [x] `(self *ChainManager) Export` : https://github.com/ethereum/go-ethereum/pull/1809\n- [x] `(self *ChainManager) ExportN`\n- [ ] `(bc *ChainManager) insert` if error when writing head\n- [ ] `(bc *ChainManager) insert` if error when writing checkpoint\n- [ ] `(bc *ChainManager) Genesis()`\n- [ ] `(self *ChainManager) GetBlockHashesFromHash`\n- [ ] `(self *ChainManager) GetUnclesInChain`\n- [ ] `(bc *ChainManager) Stop()`\n- [ ] `(self *ChainManager) procFutureBlocks()`\n- [ ] `(self *ChainManager) WriteBlock` if error when merging chains\n- [ ] `(self *ChainManager) WriteBlock` if error when writing block to db\n- [ ] `(self *ChainManager) InsertChain` if interrupt during chain processing\n- [ ] `(self *ChainManager) InsertChain` if bad hash found\n- [ ] `(self *ChainManager) InsertChain` if block processing returns a \"known block\" error\n- [ ] `(self *ChainManager) InsertChain` if block processing finds block is not-too-far-in-future and adds block to futureBlocks queue\n- [ ] `(self *ChainManager) InsertChain` if block processing returns \"parent error\" and parent is among future queued blocks\n- [ ] `(self *ChainManager) InsertChain` if writing block to db gives error\n- [ ] `(self *ChainManager) InsertChain` if status is \"SplitStatTy\"\n- [ ] `(self *ChainManager) diff` if if oldBlock.NumberU64() > newBlock.NumberU64()\n- [ ] `(self *ChainManager) diff` if oldBlock == nil\n- [ ] `(self *ChainManager) diff` if newBlock == nil\n- [ ] `(self *ChainManager) diff` if oldBlock == nil in construction of new chain\n- [ ] `(self *ChainManager) diff` if newBlock == nil in construction of new chain\n- [ ] `(self *ChainManager) merge` if call to diff function failed\n- [ ] `(self *ChainManager) update()` if quit chan matches in select\n- [x] `verifyNonces` if length of blocks is less than number of workers - covered by unit tests\n- [x] `verifyNonces` if quit chan matches in select - covered by unit tests\n\ncore/chain_util.go:\n- [x] `CalcDifficulty` `if periodCount.Cmp(common.Big1) > 0` (though covered by core package tests which uses the common difficulty tests. However, in those tests, `if diff.Cmp(params.MinimumDifficulty) < 0` is not covered.\n- [ ] `GetBlockByHash` if RLP decoding of block fails\n- [ ] `GetBlockByNumber` if hash retrieved from number is empty\n- [ ] `WriteCanonNumber` if writing to DB failed\n- [ ] `WriteHead`       if writing to DB failed\n- [ ] `WriteBlock`      if writing to DB failed\n\ncore/default_genesis.go: 0 coverage\ncore/genesis.go: 0 coverage\n\ncore/error.go:\n- [ ] `IsUncleErr`\n- [ ] `IsValidationErr`\n- [ ] `IsBlockNonceErr`\n- [ ] `IsTDError`\n\ncore/state_transition.go:\n- [ ] `(self *StateTransition) To()` if `self.msg` or `self.msg.To()` is empty\n- [ ] `(self *StateTransition) BuyGas()` if `self.From()` returns error\n\ncore/transaction_pool.go: 18% coverage, not really in scope of consensus tests\n\ncore/transaction_util.go: \n- [ ] `PutTransactions` if RLP encoding of tx fails\n- [ ] `PutTransactions` batch write\n- [ ] `PutReceipts` if RLP encoding of tx fails\n- [ ] `PutReceipts` batch write\n- [ ] `GetReceipt`\n- [ ] `GetBlockReceipts` if RLP decoding fails\n- [ ] `PutBlockReceipts` if RLP encoding fails\n- [ ] `PutBlockReceipts` if DB write fails\n\ncore/vm_env.go:\n- [ ] `(self *VMEnv) Origin()`\n- [ ] `(self *VMEnv) Difficulty()`\n- [ ] `(self *VMEnv) GasLimit()` \n- [ ] `(self *VMEnv) Value()`\n- [ ] `(self *VMEnv) SetVmType`\n- [ ] `(self *VMEnv) GetHash`\n- [ ] `(self *VMEnv) Transfer`\n- [ ] `(self *VMEnv) CallCode`\n- [ ] `(self *VMEnv) StructLogs()`\n- [ ] `(self *VMEnv) AddStructLog`\n",
  "closed_by": {
    "login": "fjl",
    "id": 6915,
    "node_id": "MDQ6VXNlcjY5MTU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6915?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/fjl",
    "html_url": "https://github.com/fjl",
    "followers_url": "https://api.github.com/users/fjl/followers",
    "following_url": "https://api.github.com/users/fjl/following{/other_user}",
    "gists_url": "https://api.github.com/users/fjl/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/fjl/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/fjl/subscriptions",
    "organizations_url": "https://api.github.com/users/fjl/orgs",
    "repos_url": "https://api.github.com/users/fjl/repos",
    "events_url": "https://api.github.com/users/fjl/events{/privacy}",
    "received_events_url": "https://api.github.com/users/fjl/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/1783/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/1783/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/275488013",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/1783#issuecomment-275488013",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/1783",
    "id": 275488013,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NTQ4ODAxMw==",
    "user": {
      "login": "fjl",
      "id": 6915,
      "node_id": "MDQ6VXNlcjY5MTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6915?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjl",
      "html_url": "https://github.com/fjl",
      "followers_url": "https://api.github.com/users/fjl/followers",
      "following_url": "https://api.github.com/users/fjl/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjl/subscriptions",
      "organizations_url": "https://api.github.com/users/fjl/orgs",
      "repos_url": "https://api.github.com/users/fjl/repos",
      "events_url": "https://api.github.com/users/fjl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjl/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-26T19:31:05Z",
    "updated_at": "2017-01-26T19:31:05Z",
    "author_association": "MEMBER",
    "body": "This is outdated. Many functions referenced here don't exist anymore.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/275488013/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
