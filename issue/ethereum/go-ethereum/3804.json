{
  "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/3804",
  "repository_url": "https://api.github.com/repos/ethereum/go-ethereum",
  "labels_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/3804/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/3804/comments",
  "events_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/3804/events",
  "html_url": "https://github.com/ethereum/go-ethereum/issues/3804",
  "id": 215731802,
  "node_id": "MDU6SXNzdWUyMTU3MzE4MDI=",
  "number": 3804,
  "title": "Return \"VM error\" in core.ApplyMessage",
  "user": {
    "login": "wuestholz",
    "id": 51156,
    "node_id": "MDQ6VXNlcjUxMTU2",
    "avatar_url": "https://avatars.githubusercontent.com/u/51156?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/wuestholz",
    "html_url": "https://github.com/wuestholz",
    "followers_url": "https://api.github.com/users/wuestholz/followers",
    "following_url": "https://api.github.com/users/wuestholz/following{/other_user}",
    "gists_url": "https://api.github.com/users/wuestholz/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/wuestholz/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/wuestholz/subscriptions",
    "organizations_url": "https://api.github.com/users/wuestholz/orgs",
    "repos_url": "https://api.github.com/users/wuestholz/repos",
    "events_url": "https://api.github.com/users/wuestholz/events{/privacy}",
    "received_events_url": "https://api.github.com/users/wuestholz/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 11,
  "created_at": "2017-03-21T13:01:30Z",
  "updated_at": "2017-09-05T22:01:33Z",
  "closed_at": "2017-09-05T22:01:32Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "Currently, `core.ApplyMessage` only returns the \"consensus error\". It would be useful to also return the \"VM error\". This would require a minor change in `core.ApplyMessage`, `core.TransitionDb` and their callers. I'd be happy to make those changes. Are there any concerns about making such a change?",
  "closed_by": {
    "login": "fjl",
    "id": 6915,
    "node_id": "MDQ6VXNlcjY5MTU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6915?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/fjl",
    "html_url": "https://github.com/fjl",
    "followers_url": "https://api.github.com/users/fjl/followers",
    "following_url": "https://api.github.com/users/fjl/following{/other_user}",
    "gists_url": "https://api.github.com/users/fjl/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/fjl/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/fjl/subscriptions",
    "organizations_url": "https://api.github.com/users/fjl/orgs",
    "repos_url": "https://api.github.com/users/fjl/repos",
    "events_url": "https://api.github.com/users/fjl/events{/privacy}",
    "received_events_url": "https://api.github.com/users/fjl/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/3804/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/3804/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/288722928",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/3804#issuecomment-288722928",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/3804",
    "id": 288722928,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4ODcyMjkyOA==",
    "user": {
      "login": "karalabe",
      "id": 129561,
      "node_id": "MDQ6VXNlcjEyOTU2MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/129561?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/karalabe",
      "html_url": "https://github.com/karalabe",
      "followers_url": "https://api.github.com/users/karalabe/followers",
      "following_url": "https://api.github.com/users/karalabe/following{/other_user}",
      "gists_url": "https://api.github.com/users/karalabe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/karalabe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/karalabe/subscriptions",
      "organizations_url": "https://api.github.com/users/karalabe/orgs",
      "repos_url": "https://api.github.com/users/karalabe/repos",
      "events_url": "https://api.github.com/users/karalabe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/karalabe/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-23T13:43:08Z",
    "updated_at": "2017-03-23T13:43:08Z",
    "author_association": "MEMBER",
    "body": "@obscuren any feedback on this?\r\n\r\nI'm guessing that would be a different error path (i.e. not the same error return as consensus errors for obvious reasons). It might be a useful thing for the gas estimation too.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/288722928/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/289768618",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/3804#issuecomment-289768618",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/3804",
    "id": 289768618,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4OTc2ODYxOA==",
    "user": {
      "login": "wuestholz",
      "id": 51156,
      "node_id": "MDQ6VXNlcjUxMTU2",
      "avatar_url": "https://avatars.githubusercontent.com/u/51156?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wuestholz",
      "html_url": "https://github.com/wuestholz",
      "followers_url": "https://api.github.com/users/wuestholz/followers",
      "following_url": "https://api.github.com/users/wuestholz/following{/other_user}",
      "gists_url": "https://api.github.com/users/wuestholz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wuestholz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wuestholz/subscriptions",
      "organizations_url": "https://api.github.com/users/wuestholz/orgs",
      "repos_url": "https://api.github.com/users/wuestholz/repos",
      "events_url": "https://api.github.com/users/wuestholz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wuestholz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-28T13:26:13Z",
    "updated_at": "2017-03-28T13:26:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "@karalabe @obscuren Yes, these seem to be different errors. I have created a PR here that should implement that change: https://github.com/ethereum/go-ethereum/pull/13844. It would be great if you could have a look.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/289768618/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/289773111",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/3804#issuecomment-289773111",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/3804",
    "id": 289773111,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4OTc3MzExMQ==",
    "user": {
      "login": "obscuren",
      "id": 6264126,
      "node_id": "MDQ6VXNlcjYyNjQxMjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6264126?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/obscuren",
      "html_url": "https://github.com/obscuren",
      "followers_url": "https://api.github.com/users/obscuren/followers",
      "following_url": "https://api.github.com/users/obscuren/following{/other_user}",
      "gists_url": "https://api.github.com/users/obscuren/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/obscuren/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/obscuren/subscriptions",
      "organizations_url": "https://api.github.com/users/obscuren/orgs",
      "repos_url": "https://api.github.com/users/obscuren/repos",
      "events_url": "https://api.github.com/users/obscuren/events{/privacy}",
      "received_events_url": "https://api.github.com/users/obscuren/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-28T13:41:20Z",
    "updated_at": "2017-03-28T13:41:20Z",
    "author_association": "CONTRIBUTOR",
    "body": "`ApplyMessage` should not be returning Virtual Machine errors. If you want to get virtual machine level errors you should be using the `runtime` package instead.\r\n\r\nMay I ask why you need VM errors, perhaps I can point you in the right direction.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/289773111/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/289774430",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/3804#issuecomment-289774430",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/3804",
    "id": 289774430,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4OTc3NDQzMA==",
    "user": {
      "login": "obscuren",
      "id": 6264126,
      "node_id": "MDQ6VXNlcjYyNjQxMjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6264126?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/obscuren",
      "html_url": "https://github.com/obscuren",
      "followers_url": "https://api.github.com/users/obscuren/followers",
      "following_url": "https://api.github.com/users/obscuren/following{/other_user}",
      "gists_url": "https://api.github.com/users/obscuren/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/obscuren/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/obscuren/subscriptions",
      "organizations_url": "https://api.github.com/users/obscuren/orgs",
      "repos_url": "https://api.github.com/users/obscuren/repos",
      "events_url": "https://api.github.com/users/obscuren/events{/privacy}",
      "received_events_url": "https://api.github.com/users/obscuren/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-28T13:45:39Z",
    "updated_at": "2017-03-28T13:45:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "`ApplyMessage` errors are, as you correctly pointed out, **consensus errors only** for obvious reasons. If an error is returned by `ApplyMessage` we can safely assume that applying the transaction will result in invalid state transition.\r\n\r\nGoing your suggested route means that this assumption no longer holds. We'd have to check for errors (types) to figure out whether the returned error is a consensus error or merely an EVM returned error. This is tedious and error prone.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/289774430/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/289776259",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/3804#issuecomment-289776259",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/3804",
    "id": 289776259,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4OTc3NjI1OQ==",
    "user": {
      "login": "wuestholz",
      "id": 51156,
      "node_id": "MDQ6VXNlcjUxMTU2",
      "avatar_url": "https://avatars.githubusercontent.com/u/51156?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wuestholz",
      "html_url": "https://github.com/wuestholz",
      "followers_url": "https://api.github.com/users/wuestholz/followers",
      "following_url": "https://api.github.com/users/wuestholz/following{/other_user}",
      "gists_url": "https://api.github.com/users/wuestholz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wuestholz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wuestholz/subscriptions",
      "organizations_url": "https://api.github.com/users/wuestholz/orgs",
      "repos_url": "https://api.github.com/users/wuestholz/repos",
      "events_url": "https://api.github.com/users/wuestholz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wuestholz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-28T13:51:59Z",
    "updated_at": "2017-03-28T13:51:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "@obscuren Thank you very much for the clarification. I was using the `runtime` package so far by invoking `evm.Call` or `evm.Create` directly. However, `core.ApplyMessage` seems to also provide some additional features, such as checking for consensus errors and performing refunds. That's why I was tempted to reuse that existing functionality. Is there similar such functionality in the `runtime` package or would it make sense to move that functionality there?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/289776259/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/289797030",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/3804#issuecomment-289797030",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/3804",
    "id": 289797030,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4OTc5NzAzMA==",
    "user": {
      "login": "obscuren",
      "id": 6264126,
      "node_id": "MDQ6VXNlcjYyNjQxMjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6264126?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/obscuren",
      "html_url": "https://github.com/obscuren",
      "followers_url": "https://api.github.com/users/obscuren/followers",
      "following_url": "https://api.github.com/users/obscuren/following{/other_user}",
      "gists_url": "https://api.github.com/users/obscuren/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/obscuren/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/obscuren/subscriptions",
      "organizations_url": "https://api.github.com/users/obscuren/orgs",
      "repos_url": "https://api.github.com/users/obscuren/repos",
      "events_url": "https://api.github.com/users/obscuren/events{/privacy}",
      "received_events_url": "https://api.github.com/users/obscuren/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-28T14:56:08Z",
    "updated_at": "2017-03-28T14:56:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "`Call` and `Create` in package `runtime` are explicit functions, `ApplyMessage` on the other hand is dynamic (it does whatever the message/tx tells it to) + some other functionality. That functionality doesn't really belong in the `runtime` package.\r\n\r\nIf you really need EVM errors *and* need all of the functionality provided by the state transition model you're out of luck I'm afraid.\r\n\r\nI've been thinking about this, though not specifically this issue but rather EVM errors in general; another approach would be to collect all errors generated during the runtime of the EVM (including sub-calls) and expose them through an API. So for example instead of using `ApplyMessage` directly you'd \"reimplement\" it:\r\n\r\n```go\r\nst := core.NewStateTransition(evm, msg, gp)\r\nst.TransitionDb()\r\nerrors := st.EVM().Errors()\r\n```\r\n\r\n*(please note `st.EVM().Errors()` doesn't exist)*\r\n\r\n`errors` would then contain all of the errors generated during the runtime of the virtual machine.\r\n\r\nYou are welcome to implement this but please bear in mind that this may not have a negative impact on the runtime (within a 1.5% margin). You may compare implementations using `go test ./tests -run=- -bench . -benchmem` and can compare results by redirecting the output of `go test` to a file and use the `benchcmp` tool. My workflow usually:\r\n\r\n```sh\r\n# hack\r\n$ git commit -am \"tmp\"\r\n# subsequent changes will: git commit --amend --no-edit\r\n$ go test ./tests -run=- -bench . -benchmem > /tmp/new.txt\r\n$ git checkout HEAD^1\r\n$ go test ./tests -run=- -bench . -benchmem > /tmp/old.txt\r\n$ benchcmp /tmp/old.txt /tmp/new.txt\r\n# results\r\n```\r\n\r\nHope this helps. \r\n\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/289797030/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/290051020",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/3804#issuecomment-290051020",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/3804",
    "id": 290051020,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5MDA1MTAyMA==",
    "user": {
      "login": "wuestholz",
      "id": 51156,
      "node_id": "MDQ6VXNlcjUxMTU2",
      "avatar_url": "https://avatars.githubusercontent.com/u/51156?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wuestholz",
      "html_url": "https://github.com/wuestholz",
      "followers_url": "https://api.github.com/users/wuestholz/followers",
      "following_url": "https://api.github.com/users/wuestholz/following{/other_user}",
      "gists_url": "https://api.github.com/users/wuestholz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wuestholz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wuestholz/subscriptions",
      "organizations_url": "https://api.github.com/users/wuestholz/orgs",
      "repos_url": "https://api.github.com/users/wuestholz/repos",
      "events_url": "https://api.github.com/users/wuestholz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wuestholz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-29T10:35:44Z",
    "updated_at": "2017-03-29T10:35:44Z",
    "author_association": "CONTRIBUTOR",
    "body": "@obscuren Thank you very much for elaborating and for the suggestions!\r\n\r\nI re-read your earlier comment and I'm not quite sure I understand your reasoning completely. In my PR I added a separate return value for the VM error. It seems like this shouldn't be too tedious for a caller. In particular, one would not need to look at the types of errors to distinguish between the two types of issues (i.e., consensus vs. VM execution). Do I miss something?\r\n\r\nNote that, for now, I only want to know if the outermost call resulted in an error. An alternative design would store that error in a field of `StateTransition`. For instance, that would involve changing the following code (in `TransitionDb`):\r\n\r\n```\r\nif vmerr != nil {\r\n\t\tlog.Debug(\"VM returned with error\", \"err\", err)\r\n```\r\n\r\nto something like this:\r\n\r\n```\r\nif vmerr != nil {\r\n\t\tlog.Debug(\"VM returned with error\", \"err\", err)\r\n                self.vmerr = vmerr\r\n```\r\n\r\nWould you prefer that design?\r\n\r\nI'd be happy to make those changes.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/290051020/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/290322929",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/3804#issuecomment-290322929",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/3804",
    "id": 290322929,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5MDMyMjkyOQ==",
    "user": {
      "login": "obscuren",
      "id": 6264126,
      "node_id": "MDQ6VXNlcjYyNjQxMjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6264126?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/obscuren",
      "html_url": "https://github.com/obscuren",
      "followers_url": "https://api.github.com/users/obscuren/followers",
      "following_url": "https://api.github.com/users/obscuren/following{/other_user}",
      "gists_url": "https://api.github.com/users/obscuren/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/obscuren/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/obscuren/subscriptions",
      "organizations_url": "https://api.github.com/users/obscuren/orgs",
      "repos_url": "https://api.github.com/users/obscuren/repos",
      "events_url": "https://api.github.com/users/obscuren/events{/privacy}",
      "received_events_url": "https://api.github.com/users/obscuren/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-30T07:13:33Z",
    "updated_at": "2017-03-30T07:13:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "> It seems like this shouldn't be too tedious for a caller. In particular, one would not need to look at the types of errors to distinguish between the two types of issues (i.e., consensus vs. VM execution). Do I miss something?\r\n\r\nwe loose the simple assumption that errors indicate invalid state transition (i.e. consensus failure). With your proposal we add technical debt to a critical part of the system.\r\n\r\nImage that you'd have to do\r\n\r\n```go\r\nerr := core.ApplyMessage(...)\r\nif err != nil && err != SomeVMError {\r\n     panic(\"oh noes\")\r\n}\r\n```\r\n\r\nIn every part of the code which calls `ApplyMessage`. This is a problem for maintaining in the long run as it's easy to *just* dismiss that error in future calls not to mention external contributors and API users. It also sets to bar for what is \"acceptable\" to return as error, basically anything. Imagine having to do:\r\n\r\n```go\r\nerr := core.ApplyMessage(...)\r\nif err != nil && (err != VmErrorOne || err != VMErrorTwo || err != ...) { /* ... */ }\r\n```\r\n\r\nThis will become a maintenance hell and I'm willing to bet that at some point will result in erroneous code. \r\n\r\nWhat we have to understand here is that the errors returned by the EVM usually don't matter to the state transition -- with the exception of the very first *balance error* -- and that the transition may carry on.\r\n\r\nUnfortunately I'd have to object to the second proposal as well. VM errors really should not be kept by the `StateTransition` and feels very hacky.\r\n\r\nDo you see a problem with my earlier proposal? ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/290322929/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/290357578",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/3804#issuecomment-290357578",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/3804",
    "id": 290357578,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5MDM1NzU3OA==",
    "user": {
      "login": "wuestholz",
      "id": 51156,
      "node_id": "MDQ6VXNlcjUxMTU2",
      "avatar_url": "https://avatars.githubusercontent.com/u/51156?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wuestholz",
      "html_url": "https://github.com/wuestholz",
      "followers_url": "https://api.github.com/users/wuestholz/followers",
      "following_url": "https://api.github.com/users/wuestholz/following{/other_user}",
      "gists_url": "https://api.github.com/users/wuestholz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wuestholz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wuestholz/subscriptions",
      "organizations_url": "https://api.github.com/users/wuestholz/orgs",
      "repos_url": "https://api.github.com/users/wuestholz/repos",
      "events_url": "https://api.github.com/users/wuestholz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wuestholz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-30T09:40:16Z",
    "updated_at": "2017-03-30T09:40:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "@obscuren Thank you very much for the detailed explanation. I fully agree with what you are saying about a solution that \"mixes\" different errors in a single return value. However, that's not what I had in mind.\r\n\r\nBoth solutions that I proposed clearly separate the two types of errors by either returning them via two different return values or by exposing the VM error via a separate getter on `StateTransition` (e.g., `VMErrorLastMessage()`. Your code snippets would, for instance, look like this:\r\n\r\n```\r\nerr, vmerr := core.ApplyMessage(...)\r\nif err != nil {\r\n     panic(\"oh noes\")\r\n}\r\nif vmerr != SomeVMError {\r\n    ...\r\n}\r\n```\r\n\r\nNote, that it would probably be better to change the order of the two types or errors (e.g., `err, vmerr`  to `vmerr, err` in the above snippet) to communicate more clearly that `err` is critical for this API and should not be ignored. The VM error can then be seen as additional information that some clients may find useful, just like the gas used or the return value of the call. Would that make more sense to you?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/290357578/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/290403385",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/3804#issuecomment-290403385",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/3804",
    "id": 290403385,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5MDQwMzM4NQ==",
    "user": {
      "login": "wuestholz",
      "id": 51156,
      "node_id": "MDQ6VXNlcjUxMTU2",
      "avatar_url": "https://avatars.githubusercontent.com/u/51156?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wuestholz",
      "html_url": "https://github.com/wuestholz",
      "followers_url": "https://api.github.com/users/wuestholz/followers",
      "following_url": "https://api.github.com/users/wuestholz/following{/other_user}",
      "gists_url": "https://api.github.com/users/wuestholz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wuestholz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wuestholz/subscriptions",
      "organizations_url": "https://api.github.com/users/wuestholz/orgs",
      "repos_url": "https://api.github.com/users/wuestholz/repos",
      "events_url": "https://api.github.com/users/wuestholz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wuestholz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-30T13:00:55Z",
    "updated_at": "2017-03-30T13:00:55Z",
    "author_association": "CONTRIBUTOR",
    "body": "@obscuren About your earlier proposal: it seems it would require some extra bookkeeping to know if any of the errors is the outermost one (i.e., there could be many inner errors that are handled while not resulting in a failure of the outermost call). Other than that and the potential performance impact I don't see an issue. My alternative proposal is in some sense inspired by it since it only keeps track of the outermost error, which avoids the performance penalty. Would that be fine with you if the getter for accessing that error would be in `st.EVM()`?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/290403385/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/327316233",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/3804#issuecomment-327316233",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/3804",
    "id": 327316233,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyNzMxNjIzMw==",
    "user": {
      "login": "fjl",
      "id": 6915,
      "node_id": "MDQ6VXNlcjY5MTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6915?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjl",
      "html_url": "https://github.com/fjl",
      "followers_url": "https://api.github.com/users/fjl/followers",
      "following_url": "https://api.github.com/users/fjl/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjl/subscriptions",
      "organizations_url": "https://api.github.com/users/fjl/orgs",
      "repos_url": "https://api.github.com/users/fjl/repos",
      "events_url": "https://api.github.com/users/fjl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjl/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-05T22:01:33Z",
    "updated_at": "2017-09-05T22:01:33Z",
    "author_association": "MEMBER",
    "body": "This is now implemented, though not quite in the same way.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/327316233/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
