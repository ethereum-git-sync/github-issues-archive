{
  "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/26981",
  "repository_url": "https://api.github.com/repos/ethereum/go-ethereum",
  "labels_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/26981/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/26981/comments",
  "events_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/26981/events",
  "html_url": "https://github.com/ethereum/go-ethereum/issues/26981",
  "id": 1640745284,
  "node_id": "I_kwDOAOvK985hy8lE",
  "number": 26981,
  "title": "Can we archive states for the last N months only?",
  "user": {
    "login": "jongrun",
    "id": 31625057,
    "node_id": "MDQ6VXNlcjMxNjI1MDU3",
    "avatar_url": "https://avatars.githubusercontent.com/u/31625057?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jongrun",
    "html_url": "https://github.com/jongrun",
    "followers_url": "https://api.github.com/users/jongrun/followers",
    "following_url": "https://api.github.com/users/jongrun/following{/other_user}",
    "gists_url": "https://api.github.com/users/jongrun/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jongrun/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jongrun/subscriptions",
    "organizations_url": "https://api.github.com/users/jongrun/orgs",
    "repos_url": "https://api.github.com/users/jongrun/repos",
    "events_url": "https://api.github.com/users/jongrun/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jongrun/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 268304226,
      "node_id": "MDU6TGFiZWwyNjgzMDQyMjY=",
      "url": "https://api.github.com/repos/ethereum/go-ethereum/labels/type:docs",
      "name": "type:docs",
      "color": "fef2c0",
      "default": false,
      "description": null
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2023-03-26T03:19:03Z",
  "updated_at": "2023-04-06T15:47:48Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "In current version, we have two extreme options: \r\n- either run archive node with ALL historical states\r\n- or full node with only recent state (last 128 blocks in momery for mini reorg)\r\n\r\nBut in archive node case, some too-old states (e.g. 3 months ago) may not be used in most cases. Is there any solution to store states for only the last N months or last N blocks? Looking forward to your reply.\r\n\r\nThere is a similar question in stackexchange: [Run archive node to store states for the last N months only](https://ethereum.stackexchange.com/questions/107483/run-archive-node-to-store-states-for-the-last-n-months-only).",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/26981/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/26981/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1484894761",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/26981#issuecomment-1484894761",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/26981",
    "id": 1484894761,
    "node_id": "IC_kwDOAOvK985YgbIp",
    "user": {
      "login": "holiman",
      "id": 142290,
      "node_id": "MDQ6VXNlcjE0MjI5MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/142290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/holiman",
      "html_url": "https://github.com/holiman",
      "followers_url": "https://api.github.com/users/holiman/followers",
      "following_url": "https://api.github.com/users/holiman/following{/other_user}",
      "gists_url": "https://api.github.com/users/holiman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/holiman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/holiman/subscriptions",
      "organizations_url": "https://api.github.com/users/holiman/orgs",
      "repos_url": "https://api.github.com/users/holiman/repos",
      "events_url": "https://api.github.com/users/holiman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/holiman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-27T10:26:00Z",
    "updated_at": "2023-03-27T10:27:36Z",
    "author_association": "MEMBER",
    "body": ">  Is there any solution to store states for only the last N months or last N blocks? \r\n\r\nThe answer is No. (see footnote)\r\n\r\nHowever, it is possible to migrate from \"one mega-gigantic super-server containing everything\" to different models, like for example suggested here: https://github.com/ethereum/go-ethereum/issues/24461. \r\n\r\n\r\n(footnote) Actually, if `N` is small enough, you could mod geth to use more memory and have stuff in memory longer. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1484894761/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1486409208",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/26981#issuecomment-1486409208",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/26981",
    "id": 1486409208,
    "node_id": "IC_kwDOAOvK985YmM34",
    "user": {
      "login": "rjl493456442",
      "id": 5959481,
      "node_id": "MDQ6VXNlcjU5NTk0ODE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5959481?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rjl493456442",
      "html_url": "https://github.com/rjl493456442",
      "followers_url": "https://api.github.com/users/rjl493456442/followers",
      "following_url": "https://api.github.com/users/rjl493456442/following{/other_user}",
      "gists_url": "https://api.github.com/users/rjl493456442/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rjl493456442/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rjl493456442/subscriptions",
      "organizations_url": "https://api.github.com/users/rjl493456442/orgs",
      "repos_url": "https://api.github.com/users/rjl493456442/repos",
      "events_url": "https://api.github.com/users/rjl493456442/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rjl493456442/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-28T08:11:36Z",
    "updated_at": "2023-03-28T08:11:36Z",
    "author_association": "MEMBER",
    "body": "In the current storage scheme, it's not easy to retain the last N states. But in the upcoming new storage scheme(path-based), it's totally possible.\r\n\r\nThe archival node upon path-based can retain the state history(e.g. last N states) and the access to these historical states should be trivial. \r\n\r\nBut note, it takes time. We must manage to merge the initial version path-based scheme first, then work on the archival mode.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1486409208/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1498680269",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/26981#issuecomment-1498680269",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/26981",
    "id": 1498680269,
    "node_id": "IC_kwDOAOvK985ZVAvN",
    "user": {
      "login": "jongrun",
      "id": 31625057,
      "node_id": "MDQ6VXNlcjMxNjI1MDU3",
      "avatar_url": "https://avatars.githubusercontent.com/u/31625057?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jongrun",
      "html_url": "https://github.com/jongrun",
      "followers_url": "https://api.github.com/users/jongrun/followers",
      "following_url": "https://api.github.com/users/jongrun/following{/other_user}",
      "gists_url": "https://api.github.com/users/jongrun/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jongrun/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jongrun/subscriptions",
      "organizations_url": "https://api.github.com/users/jongrun/orgs",
      "repos_url": "https://api.github.com/users/jongrun/repos",
      "events_url": "https://api.github.com/users/jongrun/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jongrun/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-04-06T08:26:09Z",
    "updated_at": "2023-04-06T15:47:48Z",
    "author_association": "NONE",
    "body": "\r\n\r\n> In the current storage scheme, it's not easy to retain the last N states. But in the upcoming new storage scheme(path-based), it's totally possible.\r\n> \r\n> The archival node upon path-based can retain the state history(e.g. last N states) and the access to these historical states should be trivial.\r\n> \r\n> But note, it takes time. We must manage to merge the initial version path-based scheme first, then work on the archival mode.\r\n\r\n@rjl493456442 The path-based scheme uses accountAddress+path as key, and a node can't be reused in two tries. My confusion is how to implement the archival node upon a scheme that trie nodes should not be reused?\r\nIf we use the trie history, which is used for deep reorg, as the entrance for reading history states, is it efficient? So I'm wondering if there is any rough idea for the archival node upon pbss? Looking forward to your reply~",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1498680269/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1499047829",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/26981#issuecomment-1499047829",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/26981",
    "id": 1499047829,
    "node_id": "IC_kwDOAOvK985ZWaeV",
    "user": {
      "login": "Skylerspencer",
      "id": 118951670,
      "node_id": "U_kgDOBxcO9g",
      "avatar_url": "https://avatars.githubusercontent.com/u/118951670?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Skylerspencer",
      "html_url": "https://github.com/Skylerspencer",
      "followers_url": "https://api.github.com/users/Skylerspencer/followers",
      "following_url": "https://api.github.com/users/Skylerspencer/following{/other_user}",
      "gists_url": "https://api.github.com/users/Skylerspencer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Skylerspencer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Skylerspencer/subscriptions",
      "organizations_url": "https://api.github.com/users/Skylerspencer/orgs",
      "repos_url": "https://api.github.com/users/Skylerspencer/repos",
      "events_url": "https://api.github.com/users/Skylerspencer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Skylerspencer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-04-06T13:15:07Z",
    "updated_at": "2023-04-06T13:15:07Z",
    "author_association": "NONE",
    "body": "Yep\n\nOn Thu, Apr 6, 2023, 2:26 AM jongrun ***@***.***> wrote:\n\n> In the current storage scheme, it's not easy to retain the last N states.\n> But in the upcoming new storage scheme(path-based), it's totally possible.\n>\n> The archival node upon path-based can retain the state history(e.g. last N\n> states) and the access to these historical states should be trivial.\n>\n> But note, it takes time. We must manage to merge the initial version\n> path-based scheme first, then work on the archival mode.\n>\n> @rjl493456442 <https://github.com/rjl493456442> The path-based scheme\n> uses accountAddress+path as key, and a node can't be reused in two tries.\n> My confusion is that how to implement the archival node upon a scheme that\n> trie nodes should not be reused?\n>\n> —\n> Reply to this email directly, view it on GitHub\n> <https://github.com/ethereum/go-ethereum/issues/26981#issuecomment-1498680269>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/A4LQ55S5ETKHSNNFEGJVGOLW7Z43FANCNFSM6AAAAAAWH5DUPA>\n> .\n> You are receiving this because you are subscribed to this thread.Message\n> ID: ***@***.***>\n>\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1499047829/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
