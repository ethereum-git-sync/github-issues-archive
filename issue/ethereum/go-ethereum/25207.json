{
  "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/25207",
  "repository_url": "https://api.github.com/repos/ethereum/go-ethereum",
  "labels_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/25207/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/25207/comments",
  "events_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/25207/events",
  "html_url": "https://github.com/ethereum/go-ethereum/issues/25207",
  "id": 1289742693,
  "node_id": "I_kwDOAOvK985M3-ll",
  "number": 25207,
  "title": "Reduce StateDB load count in GetTransactionCount()",
  "user": {
    "login": "dbadoy",
    "id": 72970043,
    "node_id": "MDQ6VXNlcjcyOTcwMDQz",
    "avatar_url": "https://avatars.githubusercontent.com/u/72970043?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/dbadoy",
    "html_url": "https://github.com/dbadoy",
    "followers_url": "https://api.github.com/users/dbadoy/followers",
    "following_url": "https://api.github.com/users/dbadoy/following{/other_user}",
    "gists_url": "https://api.github.com/users/dbadoy/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/dbadoy/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/dbadoy/subscriptions",
    "organizations_url": "https://api.github.com/users/dbadoy/orgs",
    "repos_url": "https://api.github.com/users/dbadoy/repos",
    "events_url": "https://api.github.com/users/dbadoy/events{/privacy}",
    "received_events_url": "https://api.github.com/users/dbadoy/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 3,
  "created_at": "2022-06-30T07:53:42Z",
  "updated_at": "2022-06-30T10:27:26Z",
  "closed_at": "2022-06-30T10:27:26Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "GetTransactionCount() in internal/ethapi/api.go,\r\nHow about use the state.StateDB in txNoncer for get nonce, if not exist address’s transaction in txPool(pending, queue) ? \r\nIt would be effect to reduce the StateDB load count.\r\nLike this,\r\n\r\n```go\r\n// GetTransactionCount returns the number of transactions the given address has sent for the given block number\r\nfunc (s *TransactionAPI) GetTransactionCount(ctx context.Context, address common.Address, blockNrOrHash rpc.BlockNumberOrHash) (*hexutil.Uint64, error) {\r\n    // Ask transaction pool for the nonce which includes pending transactions\r\n    if blockNr, ok := blockNrOrHash.Number(); ok && blockNr == rpc.PendingBlockNumber {\r\n        nonce, err := s.b.GetPoolNonce(ctx, address)\r\n        if err != nil {\r\n\t        return nil, err\r\n        }\r\n        return (*hexutil.Uint64)(&nonce), nil\r\n    }\r\n    // * Added\r\n    // Ask txNoncer if not exist that transaction from address in transaction pool.\r\n    pending, queue := s.b.TxPoolContentFrom(address)\r\n    if len(pending) == 0 && len(queue) == 0 {\r\n        nonce, err := s.b.GetPoolNonce(ctx, address)\r\n        if err != nil {\r\n\t        return nil, err\r\n        }\r\n        return (*hexutil.Uint64)(&nonce), nil\r\n    }\r\n    // Resolve block number and use its state to ask for the nonce\r\n    state, _, err := s.b.StateAndHeaderByNumberOrHash(ctx, blockNrOrHash)\r\n    if state == nil || err != nil {\r\n        return nil, err\r\n    }\r\n    nonce := state.GetNonce(address)\r\n    return (*hexutil.Uint64)(&nonce), state.Error()\r\n}\r\n```\r\n\r\nor something …\r\n```go\r\n// go/ethereum/core/tx_pool.go\r\n// get address stats in TxPool\r\nfunc (pool *TxPool) StatsOf(address common.Address) (int, int) {\r\n    pool.mu.Lock()\r\n    defer pool.mu.Unlock()\r\n    return pool.statsOf(address)\r\n}\r\nfunc (pool *TxPool) statsOf(address common.Address) (int, int) {\r\n    return len(pool.pending[address]), len(pool.queue[address])\r\n}\r\n\r\n// go/ethereum/eth/api_backend.go\r\nfunc (b *EthAPIBackend) StatsOf(ctx context.Context, address common.Address) (pending int, queued int) {\r\n    return b.eth.TxPool().StatsOf(address)\r\n}\r\n\r\n// GetTransactionCount returns the number of transactions the given address has sent for the given block number\r\nfunc (s *TransactionAPI) GetTransactionCount(ctx context.Context, address common.Address, blockNrOrHash rpc.BlockNumberOrHash) (*hexutil.Uint64, error) {\r\n    // Ask transaction pool for the nonce which includes pending transactions\r\n    if blockNr, ok := blockNrOrHash.Number(); ok && blockNr == rpc.PendingBlockNumber {\r\n        nonce, err := s.b.GetPoolNonce(ctx, address)\r\n        if err != nil {\r\n\t        return nil, err\r\n        }\r\n        return (*hexutil.Uint64)(&nonce), nil\r\n    }\r\n    // Ask txNoncer if not exist that transaction from address in transaction pool.\r\n    pending, queue := s.b.StatsOf(address)\r\n    if pending == 0 && queue == 0 {\r\n        nonce, err := s.b.GetPoolNonce(ctx, address)\r\n        if err != nil {\r\n\t        return nil, err\r\n        }\r\n        return (*hexutil.Uint64)(&nonce), nil\r\n    }\r\n    // Resolve block number and use its state to ask for the nonce\r\n    state, _, err := s.b.StateAndHeaderByNumberOrHash(ctx, blockNrOrHash)\r\n    if state == nil || err != nil {\r\n        return nil, err\r\n    }\r\n    nonce := state.GetNonce(address)\r\n    return (*hexutil.Uint64)(&nonce), state.Error()\r\n}\r\n```",
  "closed_by": {
    "login": "dbadoy",
    "id": 72970043,
    "node_id": "MDQ6VXNlcjcyOTcwMDQz",
    "avatar_url": "https://avatars.githubusercontent.com/u/72970043?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/dbadoy",
    "html_url": "https://github.com/dbadoy",
    "followers_url": "https://api.github.com/users/dbadoy/followers",
    "following_url": "https://api.github.com/users/dbadoy/following{/other_user}",
    "gists_url": "https://api.github.com/users/dbadoy/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/dbadoy/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/dbadoy/subscriptions",
    "organizations_url": "https://api.github.com/users/dbadoy/orgs",
    "repos_url": "https://api.github.com/users/dbadoy/repos",
    "events_url": "https://api.github.com/users/dbadoy/events{/privacy}",
    "received_events_url": "https://api.github.com/users/dbadoy/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/25207/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/25207/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1170936233",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/25207#issuecomment-1170936233",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/25207",
    "id": 1170936233,
    "node_id": "IC_kwDOAOvK985FyxGp",
    "user": {
      "login": "karalabe",
      "id": 129561,
      "node_id": "MDQ6VXNlcjEyOTU2MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/129561?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/karalabe",
      "html_url": "https://github.com/karalabe",
      "followers_url": "https://api.github.com/users/karalabe/followers",
      "following_url": "https://api.github.com/users/karalabe/following{/other_user}",
      "gists_url": "https://api.github.com/users/karalabe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/karalabe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/karalabe/subscriptions",
      "organizations_url": "https://api.github.com/users/karalabe/orgs",
      "repos_url": "https://api.github.com/users/karalabe/repos",
      "events_url": "https://api.github.com/users/karalabe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/karalabe/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-30T08:40:51Z",
    "updated_at": "2022-06-30T08:40:51Z",
    "author_association": "MEMBER",
    "body": "Both versions abuse the txpool as a cache for a statedb, which is bad imho. When accessing stuff from an existing block, we should not rely on some quirky behavior of the pool.\r\n\r\nOne possible solution would be to check if the requested tx count is from the rpc.LatestBlockNumber, and if so, cache the statedb within the `TransactionAPI` struct. When asking again, compare the cached hash with current block's hash.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1170936233/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1170942163",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/25207#issuecomment-1170942163",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/25207",
    "id": 1170942163,
    "node_id": "IC_kwDOAOvK985FyyjT",
    "user": {
      "login": "karalabe",
      "id": 129561,
      "node_id": "MDQ6VXNlcjEyOTU2MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/129561?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/karalabe",
      "html_url": "https://github.com/karalabe",
      "followers_url": "https://api.github.com/users/karalabe/followers",
      "following_url": "https://api.github.com/users/karalabe/following{/other_user}",
      "gists_url": "https://api.github.com/users/karalabe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/karalabe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/karalabe/subscriptions",
      "organizations_url": "https://api.github.com/users/karalabe/orgs",
      "repos_url": "https://api.github.com/users/karalabe/repos",
      "events_url": "https://api.github.com/users/karalabe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/karalabe/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-30T08:46:32Z",
    "updated_at": "2022-06-30T08:46:32Z",
    "author_association": "MEMBER",
    "body": "Do you have any specific bottlenecks/measurements around this code that you feel it should be optimized?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1170942163/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1171044053",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/25207#issuecomment-1171044053",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/25207",
    "id": 1171044053,
    "node_id": "IC_kwDOAOvK985FzLbV",
    "user": {
      "login": "dbadoy",
      "id": 72970043,
      "node_id": "MDQ6VXNlcjcyOTcwMDQz",
      "avatar_url": "https://avatars.githubusercontent.com/u/72970043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dbadoy",
      "html_url": "https://github.com/dbadoy",
      "followers_url": "https://api.github.com/users/dbadoy/followers",
      "following_url": "https://api.github.com/users/dbadoy/following{/other_user}",
      "gists_url": "https://api.github.com/users/dbadoy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dbadoy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dbadoy/subscriptions",
      "organizations_url": "https://api.github.com/users/dbadoy/orgs",
      "repos_url": "https://api.github.com/users/dbadoy/repos",
      "events_url": "https://api.github.com/users/dbadoy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dbadoy/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-30T10:26:22Z",
    "updated_at": "2022-06-30T10:26:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "No, I haven't. I just thought about better way in GetTransactionCount().\r\nI'll close this issue. Thanks to kindly reply ! ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1171044053/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
