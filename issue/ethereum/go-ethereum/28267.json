{
  "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/28267",
  "repository_url": "https://api.github.com/repos/ethereum/go-ethereum",
  "labels_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/28267/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/28267/comments",
  "events_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/28267/events",
  "html_url": "https://github.com/ethereum/go-ethereum/issues/28267",
  "id": 1929324966,
  "node_id": "I_kwDOAOvK985y_ymm",
  "number": 28267,
  "title": "Make Client use an rpc.Client interface instead of struct so that I can write an instrumented client",
  "user": {
    "login": "samlaf",
    "id": 9342524,
    "node_id": "MDQ6VXNlcjkzNDI1MjQ=",
    "avatar_url": "https://avatars.githubusercontent.com/u/9342524?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/samlaf",
    "html_url": "https://github.com/samlaf",
    "followers_url": "https://api.github.com/users/samlaf/followers",
    "following_url": "https://api.github.com/users/samlaf/following{/other_user}",
    "gists_url": "https://api.github.com/users/samlaf/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/samlaf/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/samlaf/subscriptions",
    "organizations_url": "https://api.github.com/users/samlaf/orgs",
    "repos_url": "https://api.github.com/users/samlaf/repos",
    "events_url": "https://api.github.com/users/samlaf/events{/privacy}",
    "received_events_url": "https://api.github.com/users/samlaf/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 72233652,
      "node_id": "MDU6TGFiZWw3MjIzMzY1Mg==",
      "url": "https://api.github.com/repos/ethereum/go-ethereum/labels/type:feature",
      "name": "type:feature",
      "color": "84b6eb",
      "default": false,
      "description": null
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2023-10-06T02:15:15Z",
  "updated_at": "2023-10-19T08:48:23Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "# Rationale\r\n\r\nI need to make an instrumented eth client to export prometheus metrics counting the number calls to each `eth_` method.\r\nThis should be easy but it ends up being pretty hard because geth's ethclient wraps a rpc.Client struct instead of an interface.\r\n```\r\ntype Client struct {\r\n\tc *rpc.Client\r\n}\r\n```\r\n\r\n# Implementation\r\n\r\nIf the Client took an interface instead of `rpc.Client`, I could just implement an instrumented rpc.Client that would wrap geth's rpc.Client and change CallContext to wrap CallContext and increase the prometheus metric counts. (and same for BatchCallContext)\r\n\r\n```\r\nclient := &Client{c: &MyRpcClient{...})\r\ntype MyRpcClient struct {\r\n   *rpc.Client\r\n   rpcRequestTotal *prometheus.CounterVec\r\n}\r\n\r\nfunc (c *Client) CallContext(ctx context.Context, result interface{}, method string, args ...interface{}) error {\r\n   c.rpcRequestsTotal.With(prometheus.Labels{\"method\": method}).Inc()\r\n   return c.Client.CallContext(ctx, result, method, args...)\r\n}\r\n\r\nHowever I can't do it like this right now because rpc.Client is not an interface, so I have to instead wrap the geth Client above all of this, and reimplement every single call individually to be instrumented (instead of just having to wrap CallContext and CallBatchContext).\r\n\r\nIs there an interface somewhere for the rpc Client? Could we change the Client to use that instead if so? If not, I could write and submit a PR.",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/28267/reactions",
    "total_count": 2,
    "+1": 2,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/28267/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1749992589",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/28267#issuecomment-1749992589",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/28267",
    "id": 1749992589,
    "node_id": "IC_kwDOAOvK985oTsSN",
    "user": {
      "login": "karalabe",
      "id": 129561,
      "node_id": "MDQ6VXNlcjEyOTU2MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/129561?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/karalabe",
      "html_url": "https://github.com/karalabe",
      "followers_url": "https://api.github.com/users/karalabe/followers",
      "following_url": "https://api.github.com/users/karalabe/following{/other_user}",
      "gists_url": "https://api.github.com/users/karalabe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/karalabe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/karalabe/subscriptions",
      "organizations_url": "https://api.github.com/users/karalabe/orgs",
      "repos_url": "https://api.github.com/users/karalabe/repos",
      "events_url": "https://api.github.com/users/karalabe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/karalabe/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-10-06T05:10:11Z",
    "updated_at": "2023-10-06T05:10:11Z",
    "author_association": "MEMBER",
    "body": "CC @fjl \r\n\r\nThe internal client is kind of internal, so we could turn it into an interface and provide a new constructor to initialize it. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1749992589/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1770350892",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/28267#issuecomment-1770350892",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/28267",
    "id": 1770350892,
    "node_id": "IC_kwDOAOvK985phWks",
    "user": {
      "login": "fjl",
      "id": 6915,
      "node_id": "MDQ6VXNlcjY5MTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6915?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjl",
      "html_url": "https://github.com/fjl",
      "followers_url": "https://api.github.com/users/fjl/followers",
      "following_url": "https://api.github.com/users/fjl/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjl/subscriptions",
      "organizations_url": "https://api.github.com/users/fjl/orgs",
      "repos_url": "https://api.github.com/users/fjl/repos",
      "events_url": "https://api.github.com/users/fjl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjl/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-10-19T08:48:22Z",
    "updated_at": "2023-10-19T08:48:22Z",
    "author_association": "MEMBER",
    "body": "The interface between ethclient and the RPC client is ~5 methods, some of them having a hairy signature. It's not the most ideal solution to put an interface there.\r\n\r\nI think it might be better to add a call hook into `rpc.Client` instead. We could find other uses for that, logging all calls for example.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1770350892/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
