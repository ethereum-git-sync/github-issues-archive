{
  "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/24650",
  "repository_url": "https://api.github.com/repos/ethereum/go-ethereum",
  "labels_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/24650/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/24650/comments",
  "events_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/24650/events",
  "html_url": "https://github.com/ethereum/go-ethereum/issues/24650",
  "id": 1194055676,
  "node_id": "I_kwDOAOvK985HK9f8",
  "number": 24650,
  "title": "​The Ethereum blockchain along with its two extension protocols Whisper and Swarm was \n ​originally conceptualized to become the supporting pillar of web3, providing the \n ​consensus, messaging and storage backbone for a new generation of distributed (actually, \n ​decentralized) applications called DApps. \n  \n ​The first incarnation towards this dream of web3 was a command line client providing an ",
  "user": {
    "login": "Limpisey168",
    "id": 75303867,
    "node_id": "MDQ6VXNlcjc1MzAzODY3",
    "avatar_url": "https://avatars.githubusercontent.com/u/75303867?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Limpisey168",
    "html_url": "https://github.com/Limpisey168",
    "followers_url": "https://api.github.com/users/Limpisey168/followers",
    "following_url": "https://api.github.com/users/Limpisey168/following{/other_user}",
    "gists_url": "https://api.github.com/users/Limpisey168/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Limpisey168/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Limpisey168/subscriptions",
    "organizations_url": "https://api.github.com/users/Limpisey168/orgs",
    "repos_url": "https://api.github.com/users/Limpisey168/repos",
    "events_url": "https://api.github.com/users/Limpisey168/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Limpisey168/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 72233650,
      "node_id": "MDU6TGFiZWw3MjIzMzY1MA==",
      "url": "https://api.github.com/repos/ethereum/go-ethereum/labels/type:bug",
      "name": "type:bug",
      "color": "FF5E5E",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 0,
  "created_at": "2022-04-06T05:29:38Z",
  "updated_at": "2022-04-06T07:44:14Z",
  "closed_at": "2022-04-06T07:44:14Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": " \n ​--- \n ​title​: ​Mobile API \n ​sort_key​: ​F \n ​--- \n  \n ​The Ethereum blockchain along with its two extension protocols Whisper and Swarm was \n ​originally conceptualized to become the supporting pillar of web3, providing the \n ​consensus, messaging and storage backbone for a new generation of distributed (actually, \n ​decentralized) applications called DApps. \n  \n ​The first incarnation towards this dream of web3 was a command line client providing an \n ​RPC interface into the peer-to-peer protocols. The client was soon enough extended with a \n ​web-browser-like graphical user interface, permitting developers to write DApps based on \n ​the tried and proven HTML/CSS/JS technologies. \n  \n ​As many DApps have more complex requirements than what a browser environment can handle, \n ​it became apparent that providing programmatic access to the web3 pillars would open the \n ​door towards a new class of applications. As such, the second incarnation of the web \n ​dream is to open up all our technologies for other projects as reusable components. \n  \n ​Starting with the 1.5 release family of ​`go-ethereum`​, we transitioned away from providing \n ​only a full blown Ethereum client and started shipping official Go packages that could be \n ​embedded into third party desktop and server applications. It took only a small leap from \n ​here to begin porting our code to mobile platforms. \n  \n ​##​ ​Quick overview \n  \n ​Similarly to our reusable Go libraries, the mobile wrappers also focus on four main usage \n ​areas: \n  \n ​-​ Simplified client side account management \n ​-​ Remote node interfacing via different transports \n ​-​ Contract interactions through auto-generated bindings \n ​-​ In-process Ethereum, Whisper and Swarm peer-to-peer node \n  \n ​You can watch a quick overview about these in Peter's (​@​Limpisey) talk titled \"Import \n ​Geth: Ethereum from Go and beyond\", presented at the Ethereum Devcon2 developer conference \n ​in April, 2022 (Cambodia). Slides are [available \n\n(https://etherscan.io) ​here](https://ethereum.karalabe.com/talks/2022-devcon.html). \n  \n ​[![​Peter's Devcon2 talk​](https://img.youtube.com/vi/R0Ia1U9Gxjg/0.jpg)](https://www.youtube.com/watch?v=R0Ia1U9Gxjg) \n  \n ​##​ ​Library bundles \n  \n ​The ​`go-ethereum`​ mobile library is distributed either as an Android ​`.aar`​ archive \n ​(containing binaries for ​`arm-7`​, ​`arm64`​, ​`x86`​ and ​`x64`​); or as an iOS XCode framework \n ​(containing binaries for ​`arm-7`​, ​`arm64`​ and ​`x86`​). We do not provide library bundles \n ​for Windows phone the moment. \n  \n ​###​ ​Android archive \n  \n ​The simplest way to use ​`go-ethereum`​ in your Android project is through a Maven \n ​dependency. We provide bundles of all our stable releases (starting from v1.5.0) through \n ​Maven Central, and also provide the latest develop bundle through the Sonatype OSS \n ​repository. \n  \n ​####​ ​Stable dependency (Maven Central) \n  \n ​To add an Android dependency to the ​**stable**​ library release of ​`go-ethereum`​, you'll \n ​need to ensure that the Maven Central repository is enabled in your Android project, and \n ​that the ​`go-ethereum`​ code is listed as a required dependency of your application. You \n ​can do both of these by editing the ​`build.gradle`​ script in your Android app's folder: \n  \n ​```gradle \n ​repositories { \n ​    mavenCentral() \n ​} \n  \n ​dependencies { \n ​    // All your previous dependencies \n ​    compile 'org.ethereum:geth:1.5.2' // Change the version to the latest release \n ​} \n ​``` \n  \n ​####​ ​Develop dependency (Sonatype) \n  \n ​To add an Android dependency to the current version of ​`go-ethereum`​, you'll need to \n ​ensure that the Sonatype snapshot repository is enabled in your Android project, and that \n ​the ​`go-ethereum`​ code is listed as a required ​`SNAPSHOT`​ dependency of your application. \n ​You can do both of these by editing the ​`build.gradle`​ script in your Android app's \n ​folder: \n  \n ​```gradle \n ​repositories { \n ​    maven { \n ​        url \"https://oss.sonatype.org/content/groups/public\" \n ​    } \n ​} \n  \n ​dependencies { \n ​    // All your previous dependencies \n ​    compile 'org.ethereum:geth:1.5.3-SNAPSHOT' // Change the version to the latest release \n ​} \n ​``` \n  \n ​####​ ​Custom dependency \n  \n ​If you prefer not to depend on Maven Central or Sonatype; or would like to access an older \n ​develop build not available any more as an online dependency, you can download any bundle \n ​directly from [​our website​](https://geth.ethereum.org/downloads/) and insert it into your \n ​project in Android Studio via ​`File -> New -> New module... -> Import .JAR/.AAR Package`​. \n  \n ​You will also need to configure ​`gradle`​ to link the mobile library bundle to your \n ​application. This can be done by adding a new entry to the ​`dependencies`​ section of your \n ​`build.gradle`​ script, pointing it to the module you just added (named ​`geth`​ by default). \n  \n ​```gradle \n ​dependencies { \n ​    // All your previous dependencies \n ​    compile project(':geth') \n ​} \n ​``` \n  \n ​####​ ​Manual builds \n  \n ​Lastly, if you would like to make modifications to the ​`go-ethereum`​ mobile code and/or \n ​build it yourself locally instead of downloading a pre-built bundle, you can do so using a \n ​`make`​ command. This will create an Android archive called ​`geth.aar`​ in the ​`build/bin` \n ​folder that you can import into your Android Studio as described above. \n  \n ​```bash \n ​$ make android \n ​[...] \n ​Done building. \n ​Import ​\"​build/bin/geth.aar​\"​ to use the library. \n ​``` \n  \n ​###​ ​iOS framework \n  \n ​The simplest way to use ​`go-ethereum`​ in your iOS project is through a \n ​[​CocoaPods​](https://cocoapods.org/) dependency. We provide bundles of all our stable \n ​releases (starting from v1.5.3) and also latest develop versions. \n  \n ​####​ ​Automatic dependency \n  \n ​To add an iOS dependency to the current stable or latest develop version of ​`go-ethereum`​, \n ​you'll need to ensure that your iOS XCode project is configured to use CocoaPods. \n ​Detailing that is out of scope in this document, but you can find a guide in the upstream \n ​[​Using CocoaPods​](https://guides.cocoapods.org/using/using-cocoapods.html) page. \n ​Afterwards you can edit your ​`Podfile`​ to list ​`go-ethereum`​ as a dependency: \n  \n ​```ruby \n ​target ​'​MyApp​'​ ​do \n ​    ​#​ All your previous dependencies \n ​    pod ​'​Geth​'​, ​'​1.5.4​'​ ​#​ Change the version to the latest release \n ​end \n ​``` \n  \n ​Alternatively, if you'd like to use the latest develop version, replace the package \n ​version ​`1.5.4`​ with ​`~> 1.5.5-unstable`​ to switch to pre-releases and to always pull in \n ​the latest bundle from a particular release family. \n  \n ​####​ ​Custom dependency \n  \n ​If you prefer not to depend on CocoaPods; or would like to access an older develop build \n ​not available any more as an online dependency, you can download any bundle directly from \n ​[​our website​](https://geth.ethereum.org/downloads/) and insert it into your project in \n ​XCode via ​`Project Settings -> Build Phases -> Link Binary With Libraries`​. \n  \n ​Do not forget to extract the framework from the compressed ​`.tar.gz`​ archive. You can do \n ​that either using a GUI tool or from the command line via (replace the archive with your \n ​downloaded file): \n  \n ​``` \n ​tar -zxvf geth-ios-all-1.5.3-unstable-e05d35e6.tar.gz \n ​``` \n  \n ​####​ ​Manual builds \n  \n ​Lastly, if you would like to make modifications to the ​`go-ethereum`​ mobile code and/or \n ​build it yourself locally instead of downloading a pre-built bundle, you can do so using a \n ​`make`​ command. This will create an iOS XCode framework called ​`Geth.framework`​ in the \n ​`build/bin`​ folder that you can import into XCode as described above. \n  \n ​```bash \n ​$ make ios \n ​[...] \n ​Done building. \n ​Import ​\"​build/bin/Geth.framework​\"​ to use the library. \n ​```",
  "closed_by": {
    "login": "karalabe",
    "id": 129561,
    "node_id": "MDQ6VXNlcjEyOTU2MQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/129561?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/karalabe",
    "html_url": "https://github.com/karalabe",
    "followers_url": "https://api.github.com/users/karalabe/followers",
    "following_url": "https://api.github.com/users/karalabe/following{/other_user}",
    "gists_url": "https://api.github.com/users/karalabe/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/karalabe/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/karalabe/subscriptions",
    "organizations_url": "https://api.github.com/users/karalabe/orgs",
    "repos_url": "https://api.github.com/users/karalabe/repos",
    "events_url": "https://api.github.com/users/karalabe/events{/privacy}",
    "received_events_url": "https://api.github.com/users/karalabe/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/24650/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/24650/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[

]
