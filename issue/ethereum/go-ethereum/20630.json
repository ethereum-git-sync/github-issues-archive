{
  "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20630",
  "repository_url": "https://api.github.com/repos/ethereum/go-ethereum",
  "labels_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20630/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20630/comments",
  "events_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20630/events",
  "html_url": "https://github.com/ethereum/go-ethereum/issues/20630",
  "id": 560745689,
  "node_id": "MDU6SXNzdWU1NjA3NDU2ODk=",
  "number": 20630,
  "title": "p2p/discover: bootnodes not retried often enough when table becomes empty",
  "user": {
    "login": "tkporter",
    "id": 20362969,
    "node_id": "MDQ6VXNlcjIwMzYyOTY5",
    "avatar_url": "https://avatars.githubusercontent.com/u/20362969?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tkporter",
    "html_url": "https://github.com/tkporter",
    "followers_url": "https://api.github.com/users/tkporter/followers",
    "following_url": "https://api.github.com/users/tkporter/following{/other_user}",
    "gists_url": "https://api.github.com/users/tkporter/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tkporter/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tkporter/subscriptions",
    "organizations_url": "https://api.github.com/users/tkporter/orgs",
    "repos_url": "https://api.github.com/users/tkporter/repos",
    "events_url": "https://api.github.com/users/tkporter/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tkporter/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1380070748,
      "node_id": "MDU6TGFiZWwxMzgwMDcwNzQ4",
      "url": "https://api.github.com/repos/ethereum/go-ethereum/labels/area:p2p",
      "name": "area:p2p",
      "color": "ea9adb",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": {
    "login": "fjl",
    "id": 6915,
    "node_id": "MDQ6VXNlcjY5MTU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6915?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/fjl",
    "html_url": "https://github.com/fjl",
    "followers_url": "https://api.github.com/users/fjl/followers",
    "following_url": "https://api.github.com/users/fjl/following{/other_user}",
    "gists_url": "https://api.github.com/users/fjl/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/fjl/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/fjl/subscriptions",
    "organizations_url": "https://api.github.com/users/fjl/orgs",
    "repos_url": "https://api.github.com/users/fjl/repos",
    "events_url": "https://api.github.com/users/fjl/events{/privacy}",
    "received_events_url": "https://api.github.com/users/fjl/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "fjl",
      "id": 6915,
      "node_id": "MDQ6VXNlcjY5MTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6915?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjl",
      "html_url": "https://github.com/fjl",
      "followers_url": "https://api.github.com/users/fjl/followers",
      "following_url": "https://api.github.com/users/fjl/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjl/subscriptions",
      "organizations_url": "https://api.github.com/users/fjl/orgs",
      "repos_url": "https://api.github.com/users/fjl/repos",
      "events_url": "https://api.github.com/users/fjl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjl/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 7,
  "created_at": "2020-02-06T02:49:37Z",
  "updated_at": "2023-02-22T15:33:54Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "#### System information\r\n\r\nGeth version: a fork of `1.9.8-stable`\r\nOS & Version: OSX\r\nCommit hash : `d62e9b285777c036c108b89fac0c78f7855ba314`\r\n\r\n#### Expected behaviour\r\n\r\nA node should repeatedly try using a bootnode for discovery if the bootnode is not accessible at node startup\r\n\r\n#### Actual behaviour\r\n\r\nWhen the bootnode is unreachable at the start of the node, one `discoverTask` is created to the bootnode and never again. Looking at https://github.com/ethereum/go-ethereum/pull/20573, I'm not sure if this is already a known issue, but this is closely related.\r\n\r\n#### Detailed breakdown:\r\n\r\nWhen starting a `discoveryTask`, `lookupRunning` is set to true in this if statement: https://github.com/ethereum/go-ethereum/blob/976a0f5558e20ed7cb7ba2cd68d7429d1ef01db9/p2p/dial.go#L184\r\n\r\nSo no other discoverTasks can be run at the same time. However, the discoverTask never finishes.\r\n\r\nThe task begins in `Do()`:\r\nhttps://github.com/ethereum/go-ethereum/blob/976a0f5558e20ed7cb7ba2cd68d7429d1ef01db9/p2p/dial.go#L325\r\n\r\nwhich calls ReadNodes(): https://github.com/ethereum/go-ethereum/blob/976a0f5558e20ed7cb7ba2cd68d7429d1ef01db9/p2p/enode/iter.go#L36\r\n\r\nReadNodes uses the `FairMix` iterator, and calls Next(): https://github.com/ethereum/go-ethereum/blob/976a0f5558e20ed7cb7ba2cd68d7429d1ef01db9/p2p/enode/iter.go#L203\r\n\r\nNext will block for a value from `source.next` here: https://github.com/ethereum/go-ethereum/blob/976a0f5558e20ed7cb7ba2cd68d7429d1ef01db9/p2p/enode/iter.go#L218\r\n\r\nWhich is given by a separate goroutine `runSource`: https://github.com/ethereum/go-ethereum/blob/976a0f5558e20ed7cb7ba2cd68d7429d1ef01db9/p2p/enode/iter.go#L276\r\n\r\n`runSource` uses another iterator, which is the `lookupIterator` in this case. I found that the `lookupIterator` `Next()` will result in an infinite loop that will case `runSource` to hang, and subsequently the channel `source.next` to never receive a value.\r\nThe infinite loop happens here https://github.com/ethereum/go-ethereum/blob/976a0f5558e20ed7cb7ba2cd68d7429d1ef01db9/p2p/discover/lookup.go#L209 as it switches between that if statement and the next one for each iteration.\r\nThis causes `FairMix`'s `Next()` to time out, which is expected-- the only bad part is that the timeout calls `m.nextFromAny()` which reads from `m.fromAny` here: https://github.com/ethereum/go-ethereum/blob/976a0f5558e20ed7cb7ba2cd68d7429d1ef01db9/p2p/enode/iter.go#L241, which will never be written to in `runSource` https://github.com/ethereum/go-ethereum/blob/976a0f5558e20ed7cb7ba2cd68d7429d1ef01db9/p2p/enode/iter.go#L283 because of that infinite loop in its iterator `Next()` call.\r\n\r\n#### Steps to reproduce the behaviour\r\n\r\nStart a node with `--bootnode` pointing to a bootnode that is inaccessible, then make the bootnode accessible & the node will not send any `discoverTask`s to the bootnode.\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20630/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20630/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/582840123",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/20630#issuecomment-582840123",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20630",
    "id": 582840123,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4Mjg0MDEyMw==",
    "user": {
      "login": "fjl",
      "id": 6915,
      "node_id": "MDQ6VXNlcjY5MTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6915?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjl",
      "html_url": "https://github.com/fjl",
      "followers_url": "https://api.github.com/users/fjl/followers",
      "following_url": "https://api.github.com/users/fjl/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjl/subscriptions",
      "organizations_url": "https://api.github.com/users/fjl/orgs",
      "repos_url": "https://api.github.com/users/fjl/repos",
      "events_url": "https://api.github.com/users/fjl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjl/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-02-06T10:35:18Z",
    "updated_at": "2020-02-06T10:35:18Z",
    "author_association": "MEMBER",
    "body": "This is definitely known, but it's also expected behavior. Discovery cannot work without bootstrapping and the lookup iterator will block until the table contains some nodes to do the lookup with.\r\n\r\nWe have a rewrite of the dialer coming up in #20592, but that PR mostly improves the latency of acting on discovery results. If there are no discovery results, no peer connections can be created.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/582840123/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/582841369",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/20630#issuecomment-582841369",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20630",
    "id": 582841369,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4Mjg0MTM2OQ==",
    "user": {
      "login": "fjl",
      "id": 6915,
      "node_id": "MDQ6VXNlcjY5MTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6915?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjl",
      "html_url": "https://github.com/fjl",
      "followers_url": "https://api.github.com/users/fjl/followers",
      "following_url": "https://api.github.com/users/fjl/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjl/subscriptions",
      "organizations_url": "https://api.github.com/users/fjl/orgs",
      "repos_url": "https://api.github.com/users/fjl/repos",
      "events_url": "https://api.github.com/users/fjl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjl/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-02-06T10:38:17Z",
    "updated_at": "2020-02-06T10:38:17Z",
    "author_association": "MEMBER",
    "body": "Maybe I am misunderstanding your issue. AFAIK the lookupIterator will try to access the bootnodes repeatedly if they do not work. Please provide log output of `geth --vmodule=p2p/*=5`. The logs will show if that's the case. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/582841369/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/583069370",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/20630#issuecomment-583069370",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20630",
    "id": 583069370,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4MzA2OTM3MA==",
    "user": {
      "login": "tkporter",
      "id": 20362969,
      "node_id": "MDQ6VXNlcjIwMzYyOTY5",
      "avatar_url": "https://avatars.githubusercontent.com/u/20362969?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tkporter",
      "html_url": "https://github.com/tkporter",
      "followers_url": "https://api.github.com/users/tkporter/followers",
      "following_url": "https://api.github.com/users/tkporter/following{/other_user}",
      "gists_url": "https://api.github.com/users/tkporter/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tkporter/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tkporter/subscriptions",
      "organizations_url": "https://api.github.com/users/tkporter/orgs",
      "repos_url": "https://api.github.com/users/tkporter/repos",
      "events_url": "https://api.github.com/users/tkporter/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tkporter/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-02-06T19:26:25Z",
    "updated_at": "2020-02-06T19:27:37Z",
    "author_association": "NONE",
    "body": "Thanks for the response. I see `dialTask`s to the bootnode are attempted, but not `discoverTask`s apart from the initial one.\r\n\r\nHere are the logs you asked for when running\r\n`geth --vmodule=p2p/*=5 --bootnodes=enode://f1acc5e79e47b26a3257697ae9640662fd8e01f3edcf590676132bc12a653d04916f269a075063be79ab0079271882688e478c51ded4e9a63aadc72f454b8c37@35.247.9.127:0?discport=30301` when the bootnode is unreachable. I started up the bootnode (to be clear, it's `cmd/bootnode`, not a full node) mid-run (I show where in the logs), and nothing is indicated on my node or bootnode that there have been discovery v4 messages. When I re-run geth once the bootnode is already up, everything works as expected.\r\n\r\n[p2plogs.txt](https://github.com/ethereum/go-ethereum/files/4167324/p2plogs.txt)\r\n\r\nI think I see what you're saying about `lookupIterator`, do you mean that https://github.com/ethereum/go-ethereum/blob/2c37142d2f177d0cccc114486040f0913a3900c7/p2p/discover/lookup.go#L194 should result in a call to https://github.com/ethereum/go-ethereum/blob/2c37142d2f177d0cccc114486040f0913a3900c7/p2p/discover/v4_udp.go#L418?\r\n\r\nI haven't taken time to look why that wasn't working, but it feels to me like it wasn't working as I expect it should because I saw an infinite loop between https://github.com/ethereum/go-ethereum/blob/2c37142d2f177d0cccc114486040f0913a3900c7/p2p/discover/lookup.go#L193 and https://github.com/ethereum/go-ethereum/blob/2c37142d2f177d0cccc114486040f0913a3900c7/p2p/discover/lookup.go#L197\r\n\r\nI can try to look more into what the issue is there when I have some time",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/583069370/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/583311244",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/20630#issuecomment-583311244",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20630",
    "id": 583311244,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4MzMxMTI0NA==",
    "user": {
      "login": "fjl",
      "id": 6915,
      "node_id": "MDQ6VXNlcjY5MTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6915?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjl",
      "html_url": "https://github.com/fjl",
      "followers_url": "https://api.github.com/users/fjl/followers",
      "following_url": "https://api.github.com/users/fjl/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjl/subscriptions",
      "organizations_url": "https://api.github.com/users/fjl/orgs",
      "repos_url": "https://api.github.com/users/fjl/repos",
      "events_url": "https://api.github.com/users/fjl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjl/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-02-07T09:41:08Z",
    "updated_at": "2020-02-07T09:41:08Z",
    "author_association": "MEMBER",
    "body": "Thank you for the logs. It looks like the part that's broken is that `newRandomLookup` doesn't retry re-inserting the bootnodes when the discovery table is empty. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/583311244/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/714792557",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/20630#issuecomment-714792557",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20630",
    "id": 714792557,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcxNDc5MjU1Nw==",
    "user": {
      "login": "oneeman",
      "id": 4543438,
      "node_id": "MDQ6VXNlcjQ1NDM0Mzg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4543438?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/oneeman",
      "html_url": "https://github.com/oneeman",
      "followers_url": "https://api.github.com/users/oneeman/followers",
      "following_url": "https://api.github.com/users/oneeman/following{/other_user}",
      "gists_url": "https://api.github.com/users/oneeman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/oneeman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/oneeman/subscriptions",
      "organizations_url": "https://api.github.com/users/oneeman/orgs",
      "repos_url": "https://api.github.com/users/oneeman/repos",
      "events_url": "https://api.github.com/users/oneeman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/oneeman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-22T22:16:11Z",
    "updated_at": "2020-10-22T22:24:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "@fjl I was looking at this and thought that it should have been fixed by #21396 (though it doesn't reinsert the bootnoodes), since that change means the bootnode won't be dropped there if it's the only node in the table (which is what happens in this scenario).  But I found that it didn't fix the issue, and after looking into it I saw (from the logs saying `Removed dead node`) that the bootnode is being removed from the table as part of `doRevalidate()` (which runs every 10 seconds): https://github.com/ethereum/go-ethereum/blob/fb2c79df1995b4e8dfe79f9c75464d29d23aaaf4/p2p/discover/table.go#L348-L354\r\n\r\nI figured it would make sense to change this, to go along with the change in #21396, and I could submit a PR for it, but I wasn't sure what the exact thing to do is, whether it's to avoid removing it (a) if it's the only one in the bucket and there are no replacements, (b) if the bucket is less than half-full as in #21396 and there are no replacements, or (c) something else.  So I thought I'd ask to see what your thoughts on it were before proceeding.  Thanks!",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/714792557/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/854117596",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/20630#issuecomment-854117596",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20630",
    "id": 854117596,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg1NDExNzU5Ng==",
    "user": {
      "login": "wbt",
      "id": 563406,
      "node_id": "MDQ6VXNlcjU2MzQwNg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/563406?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wbt",
      "html_url": "https://github.com/wbt",
      "followers_url": "https://api.github.com/users/wbt/followers",
      "following_url": "https://api.github.com/users/wbt/following{/other_user}",
      "gists_url": "https://api.github.com/users/wbt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wbt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wbt/subscriptions",
      "organizations_url": "https://api.github.com/users/wbt/orgs",
      "repos_url": "https://api.github.com/users/wbt/repos",
      "events_url": "https://api.github.com/users/wbt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wbt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-06-03T19:22:02Z",
    "updated_at": "2021-06-03T19:22:02Z",
    "author_association": "CONTRIBUTOR",
    "body": "I have been noticing a related bug which might have similar root cause to this one but might not.\r\nSetup (done on a Windows 10 development machine): \r\n1. Start a node to act as a bootnode on a nonstandard local chain and copy the enode address.\r\n2. With that first node running, in a separate terminal (PowerShell) start another with the --bootnodes parameter as the quoted enode address from the prior step.\r\n3. The second node will connect sync, etc. and act normally as expected. Let this run for a while.\r\n4. Hibernate the machine overnight.\r\n5. Bring the computer out of hibernation.\r\n6. The second node will no longer have any peers/connection to the original bootnode, and will not be able to discover it. \r\n7. This will continue indefinitely.\r\n8. Use CTRL+C to stop the second node, only.\r\n9. Restart the second node using the exact same command as before.\r\n10. The second node will again connect to the first and do catch-up resync, then stay connected until the next hibernate.\r\n\r\nExpected behavior: \r\nThe enode address is retained.  If the second node loses access to the bootnode and has no remaining peers, it'll try the bootnode again, just like it did at startup.\r\n\r\nIs that the same issue as this, or should it be spun off as a separate one?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/854117596/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1440265708",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/20630#issuecomment-1440265708",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20630",
    "id": 1440265708,
    "node_id": "IC_kwDOAOvK985V2LXs",
    "user": {
      "login": "wbt",
      "id": 563406,
      "node_id": "MDQ6VXNlcjU2MzQwNg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/563406?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wbt",
      "html_url": "https://github.com/wbt",
      "followers_url": "https://api.github.com/users/wbt/followers",
      "following_url": "https://api.github.com/users/wbt/following{/other_user}",
      "gists_url": "https://api.github.com/users/wbt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wbt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wbt/subscriptions",
      "organizations_url": "https://api.github.com/users/wbt/orgs",
      "repos_url": "https://api.github.com/users/wbt/repos",
      "events_url": "https://api.github.com/users/wbt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wbt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-02-22T15:33:54Z",
    "updated_at": "2023-02-22T15:33:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "Any thoughts on pulling in oneeman's [fix](https://github.com/celo-org/celo-blockchain/pull/1194) or response to the question above?  \r\n\r\nFrom my perspective (not a geth maintainer) option (b) seems to make the most sense - I'd want the bootnodes specified at startup to remain in the list and continue to be retried even if they are occasionally offline, but we don't want the table filled up completely with dead bootnodes while other live nodes are available on the network (unless `--nodiscover` is also used, in which case the potential harm from a table full of dead nodes seems like less of an issue). ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1440265708/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
