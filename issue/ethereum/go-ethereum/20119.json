{
  "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20119",
  "repository_url": "https://api.github.com/repos/ethereum/go-ethereum",
  "labels_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20119/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20119/comments",
  "events_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20119/events",
  "html_url": "https://github.com/ethereum/go-ethereum/issues/20119",
  "id": 497603036,
  "node_id": "MDU6SXNzdWU0OTc2MDMwMzY=",
  "number": 20119,
  "title": "Crash in gasSStoreEIP2200 due to panic in SubRefund",
  "user": {
    "login": "wuestholz",
    "id": 51156,
    "node_id": "MDQ6VXNlcjUxMTU2",
    "avatar_url": "https://avatars.githubusercontent.com/u/51156?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/wuestholz",
    "html_url": "https://github.com/wuestholz",
    "followers_url": "https://api.github.com/users/wuestholz/followers",
    "following_url": "https://api.github.com/users/wuestholz/following{/other_user}",
    "gists_url": "https://api.github.com/users/wuestholz/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/wuestholz/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/wuestholz/subscriptions",
    "organizations_url": "https://api.github.com/users/wuestholz/orgs",
    "repos_url": "https://api.github.com/users/wuestholz/repos",
    "events_url": "https://api.github.com/users/wuestholz/events{/privacy}",
    "received_events_url": "https://api.github.com/users/wuestholz/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1132689577,
      "node_id": "MDU6TGFiZWwxMTMyNjg5NTc3",
      "url": "https://api.github.com/repos/ethereum/go-ethereum/labels/status:triage",
      "name": "status:triage",
      "color": "6be514",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 19,
  "created_at": "2019-09-24T10:34:41Z",
  "updated_at": "2023-12-07T14:34:44Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "I observed a crash in `gasSStoreEIP2200` due to a panic in `SubRefund`. Unfortunately, I don't have a convenient repro for this since it happend during a run of our Harvey fuzzer on the following contract: https://github.com/SmartContractSecurity/SWC-registry/blob/8a3878fec7785d1d06e0857784170340fdfb438b/test_cases/solidity/assert_violations/gas_model/gas_model.sol.\r\n\r\nHowever, looking at the code of `gasSStoreEIP2200` and `SubRefund` I wonder why this error isn't returned by `SubRefund` and handled in `gasSStoreEIP2200` (maybe by terminating the execution with an error).\r\n\r\n#### System information\r\n\r\nOS & Version: Windows\r\nCommit hash : a308f01\r\n\r\n#### Expected behaviour\r\n\r\nThe execution of a transaction shouldn't crash.\r\n\r\n#### Actual behaviour\r\n\r\nThe execution of a transaction crashes\r\n\r\n",
  "closed_by": {
    "login": "wuestholz",
    "id": 51156,
    "node_id": "MDQ6VXNlcjUxMTU2",
    "avatar_url": "https://avatars.githubusercontent.com/u/51156?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/wuestholz",
    "html_url": "https://github.com/wuestholz",
    "followers_url": "https://api.github.com/users/wuestholz/followers",
    "following_url": "https://api.github.com/users/wuestholz/following{/other_user}",
    "gists_url": "https://api.github.com/users/wuestholz/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/wuestholz/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/wuestholz/subscriptions",
    "organizations_url": "https://api.github.com/users/wuestholz/orgs",
    "repos_url": "https://api.github.com/users/wuestholz/repos",
    "events_url": "https://api.github.com/users/wuestholz/events{/privacy}",
    "received_events_url": "https://api.github.com/users/wuestholz/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20119/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20119/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/534509925",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/20119#issuecomment-534509925",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20119",
    "id": 534509925,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzNDUwOTkyNQ==",
    "user": {
      "login": "wuestholz",
      "id": 51156,
      "node_id": "MDQ6VXNlcjUxMTU2",
      "avatar_url": "https://avatars.githubusercontent.com/u/51156?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wuestholz",
      "html_url": "https://github.com/wuestholz",
      "followers_url": "https://api.github.com/users/wuestholz/followers",
      "following_url": "https://api.github.com/users/wuestholz/following{/other_user}",
      "gists_url": "https://api.github.com/users/wuestholz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wuestholz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wuestholz/subscriptions",
      "organizations_url": "https://api.github.com/users/wuestholz/orgs",
      "repos_url": "https://api.github.com/users/wuestholz/repos",
      "events_url": "https://api.github.com/users/wuestholz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wuestholz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-09-24T11:10:44Z",
    "updated_at": "2019-09-24T11:10:44Z",
    "author_association": "CONTRIBUTOR",
    "body": "I observed the same crash when fuzzing this slight simpler contract:\r\n\r\n```\r\npragma solidity ^0.5.11;\r\n\r\ncontract Foo {\r\n  int x = 1;\r\n  function IncrX() public {\r\n    x++;\r\n  }\r\n}\r\n```\r\n\r\nThis is the corresponding (optimized) bytecode:\r\n\r\n```\r\n60806040526001600055348015601457600080fd5b506075806100236000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c806343c9250414602d575b600080fd5b60336035565b005b60008054600101905556fea265627a7a723158204ab640601aa22be0d859e025aa75f73ee1738552892def5cfef1eaaaa49a8f3f64736f6c634300050b0032\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/534509925/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/534519636",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/20119#issuecomment-534519636",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20119",
    "id": 534519636,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzNDUxOTYzNg==",
    "user": {
      "login": "karalabe",
      "id": 129561,
      "node_id": "MDQ6VXNlcjEyOTU2MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/129561?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/karalabe",
      "html_url": "https://github.com/karalabe",
      "followers_url": "https://api.github.com/users/karalabe/followers",
      "following_url": "https://api.github.com/users/karalabe/following{/other_user}",
      "gists_url": "https://api.github.com/users/karalabe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/karalabe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/karalabe/subscriptions",
      "organizations_url": "https://api.github.com/users/karalabe/orgs",
      "repos_url": "https://api.github.com/users/karalabe/repos",
      "events_url": "https://api.github.com/users/karalabe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/karalabe/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-09-24T11:41:40Z",
    "updated_at": "2019-09-24T11:41:40Z",
    "author_association": "MEMBER",
    "body": "I've tried to repro this on a local dev chain, but couldn't:\r\n\r\n```\r\n$ geth --dev console\r\n```\r\n```\r\n> eth.sendTransaction({from: eth.accounts[0], data: \"0x60806040526001600055348015601457600080fd5b506075806100236000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c806343c9250414602d575b600080fd5b60336035565b005b60008054600101905556fea265627a7a723158204ab640601aa22be0d859e025aa75f73ee1738552892def5cfef1eaaaa49a8f3f64736f6c634300050b0032\"})\r\n\r\nINFO [09-24|14:35:40.094] Submitted contract creation              fullhash=0x448b70c65a88f4e8c521d93f21a700828d3950189e717fe81422c0c589aa317a contract=0x72Dcd3a8f8Ac8b6979D29460FE74C3E60b4bC4Ef\r\n\"0x448b70c65a88f4e8c521d93f21a700828d3950189e717fe81422c0c589aa317a\"\r\n```\r\n```\r\n> eth.getTransactionReceipt(\"0x448b70c65a88f4e8c521d93f21a700828d3950189e717fe81422c0c589aa317a\")\r\n{\r\n  blockHash: \"0xef393ee285224b9d5734763a7bf652eba3b157cd740b3194ae592c04c103db9e\",\r\n  blockNumber: 1,\r\n  contractAddress: \"0x72dcd3a8f8ac8b6979d29460fe74c3e60b4bc4ef\",\r\n  cumulativeGasUsed: 98769,\r\n  from: \"0xb69023240c0a2a90b622a2f2861f3203e060995b\",\r\n  gasUsed: 98769,\r\n  logs: [],\r\n  logsBloom: \"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n  status: \"0x1\",\r\n  to: null,\r\n  transactionHash: \"0x448b70c65a88f4e8c521d93f21a700828d3950189e717fe81422c0c589aa317a\",\r\n  transactionIndex: 0\r\n}\r\n```\r\n```\r\n> eth.sendTransaction({from: eth.accounts[0], to: \"0xB69023240c0a2A90B622a2F2861f3203E060995b\", data: \"0x43c92504\"})\r\n\r\nINFO [09-24|14:38:07.606] Submitted transaction                    fullhash=0xa718c60296c67bc36e5578e4fc6c2053cd2f8d1f6481cefde113dc77f1877d79 recipient=0xB69023240c0a2A90B622a2F2861f3203E060995b\r\n\"0xa718c60296c67bc36e5578e4fc6c2053cd2f8d1f6481cefde113dc77f1877d79\"\r\n```\r\n```\r\n> eth.getTransactionReceipt(\"0xa718c60296c67bc36e5578e4fc6c2053cd2f8d1f6481cefde113dc77f1877d79\")\r\n{\r\n  blockHash: \"0x0b83654bef61de393c41100f5ec602ae4dddde7fee085bfb45dab39e30c82266\",\r\n  blockNumber: 2,\r\n  contractAddress: null,\r\n  cumulativeGasUsed: 21064,\r\n  from: \"0xb69023240c0a2a90b622a2f2861f3203e060995b\",\r\n  gasUsed: 21064,\r\n  logs: [],\r\n  logsBloom: \"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n  status: \"0x1\",\r\n  to: \"0xb69023240c0a2a90b622a2f2861f3203e060995b\",\r\n  transactionHash: \"0xa718c60296c67bc36e5578e4fc6c2053cd2f8d1f6481cefde113dc77f1877d79\",\r\n  transactionIndex: 0\r\n}00000000000\",\r\n  status: \"0x1\",\r\n  to: \"0xb69023240c0a2a90b622a2f2861f3203e060995b\",\r\n  transactionHash: \"0xa718c60296c67bc36e5578e4fc6c2053cd2f8d1f6481cefde113dc77f1877d79\",\r\n  transactionIndex: 0\r\n}\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/534519636/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/534521079",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/20119#issuecomment-534521079",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20119",
    "id": 534521079,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzNDUyMTA3OQ==",
    "user": {
      "login": "karalabe",
      "id": 129561,
      "node_id": "MDQ6VXNlcjEyOTU2MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/129561?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/karalabe",
      "html_url": "https://github.com/karalabe",
      "followers_url": "https://api.github.com/users/karalabe/followers",
      "following_url": "https://api.github.com/users/karalabe/following{/other_user}",
      "gists_url": "https://api.github.com/users/karalabe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/karalabe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/karalabe/subscriptions",
      "organizations_url": "https://api.github.com/users/karalabe/orgs",
      "repos_url": "https://api.github.com/users/karalabe/repos",
      "events_url": "https://api.github.com/users/karalabe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/karalabe/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-09-24T11:46:09Z",
    "updated_at": "2019-09-24T11:46:09Z",
    "author_association": "MEMBER",
    "body": "Hmm, the gas used is funky. Are you sure your byte code mathes the solidity file? Either way, I did redeploy the bytecode from my compilation via remix and the gas used for Incr seems better:\r\n\r\n```\r\n> eth.sendTransaction({from: eth.accounts[0], data: \"0x60806040526001600055348015601457600080fd5b506075806100236000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c806343c9250414602d575b600080fd5b60336035565b005b60008054600101905556fea265627a7a7231582034712a5ef24e29b8291d4e74cd8b28d183c19bdfbc28566401b76a7c13a7f53964736f6c634300050b0032\"})\r\nINFO [09-24|14:43:52.803] Submitted contract creation              fullhash=0x599707bd62188c082bc439ca85d7bdf14d592808400b5dd263b44686bf1242d0 contract=0xC02e6Ce1874B4F02a9cd08760046Ab00967a770a\r\n```\r\n\r\n```\r\n> eth.sendTransaction({from: eth.accounts[0], to: \"0xC02e6Ce1874B4F02a9cd08760046Ab00967a770a\", data: \"0x43c92504\"})\r\n```\r\n\r\n```\r\n> eth.getTransactionReceipt(\"0x344c3f69f2856530dac184af85990de3330a27f6b43a8e1bfe4d35df0a39e357\")\r\n{\r\n  blockHash: \"0x7599a550342758b67a4b57a1b38bc7f00c69f186dab76865696a85ab634b6979\",\r\n  blockNumber: 4,\r\n  contractAddress: null,\r\n  cumulativeGasUsed: 27001,\r\n  from: \"0xb69023240c0a2a90b622a2f2861f3203e060995b\",\r\n  gasUsed: 27001,\r\n  logs: [],\r\n  logsBloom: \"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n  status: \"0x1\",\r\n  to: \"0xc02e6ce1874b4f02a9cd08760046ab00967a770a\",\r\n  transactionHash: \"0x344c3f69f2856530dac184af85990de3330a27f6b43a8e1bfe4d35df0a39e357\",\r\n  transactionIndex: 0\r\n}\r\n```\r\n\r\nStill no crash though.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/534521079/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/534523487",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/20119#issuecomment-534523487",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20119",
    "id": 534523487,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzNDUyMzQ4Nw==",
    "user": {
      "login": "karalabe",
      "id": 129561,
      "node_id": "MDQ6VXNlcjEyOTU2MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/129561?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/karalabe",
      "html_url": "https://github.com/karalabe",
      "followers_url": "https://api.github.com/users/karalabe/followers",
      "following_url": "https://api.github.com/users/karalabe/following{/other_user}",
      "gists_url": "https://api.github.com/users/karalabe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/karalabe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/karalabe/subscriptions",
      "organizations_url": "https://api.github.com/users/karalabe/orgs",
      "repos_url": "https://api.github.com/users/karalabe/repos",
      "events_url": "https://api.github.com/users/karalabe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/karalabe/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-09-24T11:53:30Z",
    "updated_at": "2019-09-24T11:53:30Z",
    "author_association": "MEMBER",
    "body": "Perhaps you are running a more complex suite with contract interactions? Could you share a repro that we could run standalone?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/534523487/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/534679858",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/20119#issuecomment-534679858",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20119",
    "id": 534679858,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzNDY3OTg1OA==",
    "user": {
      "login": "wuestholz",
      "id": 51156,
      "node_id": "MDQ6VXNlcjUxMTU2",
      "avatar_url": "https://avatars.githubusercontent.com/u/51156?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wuestholz",
      "html_url": "https://github.com/wuestholz",
      "followers_url": "https://api.github.com/users/wuestholz/followers",
      "following_url": "https://api.github.com/users/wuestholz/following{/other_user}",
      "gists_url": "https://api.github.com/users/wuestholz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wuestholz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wuestholz/subscriptions",
      "organizations_url": "https://api.github.com/users/wuestholz/orgs",
      "repos_url": "https://api.github.com/users/wuestholz/repos",
      "events_url": "https://api.github.com/users/wuestholz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wuestholz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-09-24T18:08:09Z",
    "updated_at": "2019-09-24T18:08:09Z",
    "author_association": "CONTRIBUTOR",
    "body": "@karalabe Thanks a lot for looking into this so quickly. It took me a while to reproduce it, but here's the resulting code:\r\n\r\n```\r\ngetHash := func(n uint64) common.Hash {\r\n\treturn common.BytesToHash(crypto.Keccak256([]byte(new(big.Int).SetUint64(n).String())))\r\n}\r\n\r\nto := common.HexToAddress(\"0x0901d12ebe1b195e5aa8748e62bd7734ae19b51f\")\r\ngp, _ := math.ParseBig256(\"0x773594000\")\r\nbn, _ := math.ParseBig256(\"0x661a55\")\r\ndi, _ := math.ParseBig256(\"0xc8372c8c4a6f6\")\r\nbt, _ := math.ParseBig256(\"0x5be99aa8\")\r\no := common.HexToAddress(\"0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa0\")\r\ngasPool := new(core.GasPool).AddGas(0x7d0000)\r\n\r\nctx := vm.Context{\r\n\tCanTransfer: core.CanTransfer,\r\n\tTransfer:    core.Transfer,\r\n\tGetHash:     getHash,\r\n\tGasPrice:    gp,\r\n\tOrigin:      o,\r\n\tGasLimit:    0x27100,\r\n\tBlockNumber: bn,\r\n\tCoinbase:    common.HexToAddress(\"0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa0\"),\r\n\tDifficulty:  di,\r\n\tTime:        bt,\r\n}\r\n\r\nchainConfig := &params.ChainConfig{\r\n\tChainID:             big.NewInt(1),\r\n\tHomesteadBlock:      big.NewInt(0),\r\n\tDAOForkBlock:        big.NewInt(0),\r\n\tDAOForkSupport:      false,\r\n\tEIP150Block:         big.NewInt(0),\r\n\tEIP155Block:         big.NewInt(0),\r\n\tEIP158Block:         big.NewInt(0),\r\n\tByzantiumBlock:      big.NewInt(0),\r\n\tConstantinopleBlock: big.NewInt(0),\r\n\tPetersburgBlock:     big.NewInt(0),\r\n\tIstanbulBlock:       big.NewInt(0),\r\n\tEthash:              new(params.EthashConfig),\r\n}\r\n\r\nevmConfig := vm.Config{}\r\n\r\ndb := rawdb.NewMemoryDatabase()\r\nsdb, _ := state.New(common.Hash{}, state.NewDatabase(db))\r\nbal, _ := math.ParseBig256(\"0x000000000000000000000000000000000000010000000000000b3a8e651d3fff\")\r\nsdb.SetBalance(o, bal)\r\nsdb.SetNonce(to, 1)\r\ncode, _ := hex.DecodeString(\"6080604052348015600f57600080fd5b506004361060285760003560e01c806343c9250414602d575b600080fd5b60336035565b005b60008054600101905556fea265627a7a723158204ab640601aa22be0d859e025aa75f73ee1738552892def5cfef1eaaaa49a8f3f64736f6c634300050b0032\")\r\nsdb.SetCode(to, code)\r\nsdb.SetState(to, common.HexToHash(\"0x0\"), common.HexToHash(\"0x1\"))\r\nsdb.Commit(false)\r\n\r\n// Without the following line it doesn't crash:\r\nsdb.SetState(to, common.HexToHash(\"0x0\"), common.HexToHash(\"0x0\"))\r\n\r\nevm := vm.NewEVM(ctx, sdb.Copy() , chainConfig, evmConfig)\r\n\r\nin := \"43c9250400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\"\r\ndata, _ := hex.DecodeString(in)\r\ntc := common.BytesToAddress(to.Bytes())\r\nmsg := types.NewMessage(o, &tc, 0, big.NewInt(0), 0x27100, gp, data, false)\r\ncore.ApplyMessage(evm, msg, gasPool)\r\n```\r\n\r\nIt seems like the `SetState` instruction after the `Commit` is crucial for some reason. Not quite sure why.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/534679858/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/534744762",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/20119#issuecomment-534744762",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20119",
    "id": 534744762,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzNDc0NDc2Mg==",
    "user": {
      "login": "karalabe",
      "id": 129561,
      "node_id": "MDQ6VXNlcjEyOTU2MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/129561?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/karalabe",
      "html_url": "https://github.com/karalabe",
      "followers_url": "https://api.github.com/users/karalabe/followers",
      "following_url": "https://api.github.com/users/karalabe/following{/other_user}",
      "gists_url": "https://api.github.com/users/karalabe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/karalabe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/karalabe/subscriptions",
      "organizations_url": "https://api.github.com/users/karalabe/orgs",
      "repos_url": "https://api.github.com/users/karalabe/repos",
      "events_url": "https://api.github.com/users/karalabe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/karalabe/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-09-24T20:56:56Z",
    "updated_at": "2019-09-24T20:58:42Z",
    "author_association": "MEMBER",
    "body": "Ah, I think I see what the issue is.\r\n\r\nWhen you call `sdb.Commit(false)`, you essentially simulate a new block being started. This is valid and does exactly what block processing does.\r\n\r\nHowever, afterwards you do a SetState, but you **do not** Finalize/IntermediateRoot/Commit it, rather execute a transaction on top. This would be equivalent to one transaction getting suspended halfway through and a second one executed on top. You are breaking transaction boundary invariants.\r\n\r\nIn EIP2200, your refund depends on whether a storage slot was dirty or not (if it was dirty, you get back more gas for restoring it's original value). The refund counter during normal operation cannot go into negative numbers, because the operation that makes a slot dirty in the first place costs a lot of gas. In your code above however, you made the slot dirty \"out of bounds\" by calling `sdb.SetState`, never spending any gas on it. So when you reset the slot to its original value afterwards in a real transaction, you get back more gas than you spent.\r\n\r\nHere's your test case, cleaned up a bit (I put it into `core/blockchain_test.go`):\r\n\r\n```go\r\nfunc TestRefund(t *testing.T) {\r\n\tctx := vm.Context{\r\n\t\tCanTransfer: CanTransfer,\r\n\t\tTransfer:    Transfer,\r\n\t\tGetHash: func(n uint64) common.Hash {\r\n\t\t\treturn common.BytesToHash(crypto.Keccak256([]byte(new(big.Int).SetUint64(n).String())))\r\n\t\t},\r\n\t\tGasPrice:    new(big.Int),\r\n\t\tGasLimit:    0x27100,\r\n\t\tBlockNumber: hexutil.MustDecodeBig(\"0x661a55\"),\r\n\t}\r\n\tcontract := common.HexToAddress(\"0x0901d12ebe1b195e5aa8748e62bd7734ae19b51f\")\r\n\r\n\tsdb, _ := state.New(common.Hash{}, state.NewDatabase(rawdb.NewMemoryDatabase()))\r\n\tsdb.SetCode(contract, hexutil.MustDecode(\"0x6080604052348015600f57600080fd5b506004361060285760003560e01c806343c9250414602d575b600080fd5b60336035565b005b60008054600101905556fea265627a7a723158204ab640601aa22be0d859e025aa75f73ee1738552892def5cfef1eaaaa49a8f3f64736f6c634300050b0032\"))\r\n\tsdb.SetState(contract, common.HexToHash(\"0x0\"), common.HexToHash(\"0x1\"))\r\n\tsdb.Commit(false)\r\n\r\n\tsdb.SetState(contract, common.HexToHash(\"0x0\"), common.HexToHash(\"0x0\"))\r\n\tsdb.Finalise(false) // Make sure the transaction after this point starts with a clean slate\r\n\r\n\tvar (\r\n\t\tevm  = vm.NewEVM(ctx, sdb, params.AllEthashProtocolChanges, vm.Config{})\r\n\t\tdata = hexutil.MustDecode(\"0x43c9250400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\")\r\n\t\tmsg  = types.NewMessage(common.Address{}, &contract, 0, big.NewInt(0), 0x27100, new(big.Int), data, false)\r\n\t)\r\n\tApplyMessage(evm, msg, new(GasPool).AddGas(0x7d0000))\r\n}\r\n```\r\n\r\nThis does not crash, because I added an `sdb.Finalize` flattening any dirtyness (if you remove that, it will panic). This simulates an end of a previous transaction. You **must** finalize any modifications before you can execute an EVM call on top, otherwise you are executing code that **cannot** happen based on the execution model of the EVM.\r\n\r\n---\r\n\r\nAs to why crash and not error out. Because it's a broken invariant. It **cannot** happen that the refund counter goes into negative. If it does, there's a programming error somewhere and it must be investigated and remedied immediately.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/534744762/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/534884329",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/20119#issuecomment-534884329",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20119",
    "id": 534884329,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzNDg4NDMyOQ==",
    "user": {
      "login": "wuestholz",
      "id": 51156,
      "node_id": "MDQ6VXNlcjUxMTU2",
      "avatar_url": "https://avatars.githubusercontent.com/u/51156?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wuestholz",
      "html_url": "https://github.com/wuestholz",
      "followers_url": "https://api.github.com/users/wuestholz/followers",
      "following_url": "https://api.github.com/users/wuestholz/following{/other_user}",
      "gists_url": "https://api.github.com/users/wuestholz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wuestholz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wuestholz/subscriptions",
      "organizations_url": "https://api.github.com/users/wuestholz/orgs",
      "repos_url": "https://api.github.com/users/wuestholz/repos",
      "events_url": "https://api.github.com/users/wuestholz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wuestholz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-09-25T07:03:41Z",
    "updated_at": "2019-09-25T07:03:41Z",
    "author_association": "CONTRIBUTOR",
    "body": "@karalabe Thanks again for looking into this and the detailed explanation! I wasn't aware of that invariant, but that makes sense and also explains why the issue only surfaced after I activated the Istanbul changes.\r\n\r\nI assume that after `ApplyMessage` you again end up in a \"fully finalized\" state with no dirty writes.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/534884329/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/534912406",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/20119#issuecomment-534912406",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20119",
    "id": 534912406,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzNDkxMjQwNg==",
    "user": {
      "login": "karalabe",
      "id": 129561,
      "node_id": "MDQ6VXNlcjEyOTU2MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/129561?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/karalabe",
      "html_url": "https://github.com/karalabe",
      "followers_url": "https://api.github.com/users/karalabe/followers",
      "following_url": "https://api.github.com/users/karalabe/following{/other_user}",
      "gists_url": "https://api.github.com/users/karalabe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/karalabe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/karalabe/subscriptions",
      "organizations_url": "https://api.github.com/users/karalabe/orgs",
      "repos_url": "https://api.github.com/users/karalabe/repos",
      "events_url": "https://api.github.com/users/karalabe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/karalabe/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-09-25T08:27:23Z",
    "updated_at": "2019-09-25T08:27:23Z",
    "author_association": "MEMBER",
    "body": "This \"side effect\" where slots get dirtied was introduced for Istanbul (actually, for Constantinople too, but reverted by Petersburg). That's why you've hit it only now, because before Istanbul, there was no notion of different gas pricing based on the contents of the slot.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/534912406/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/537579396",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/20119#issuecomment-537579396",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20119",
    "id": 537579396,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzNzU3OTM5Ng==",
    "user": {
      "login": "wuestholz",
      "id": 51156,
      "node_id": "MDQ6VXNlcjUxMTU2",
      "avatar_url": "https://avatars.githubusercontent.com/u/51156?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wuestholz",
      "html_url": "https://github.com/wuestholz",
      "followers_url": "https://api.github.com/users/wuestholz/followers",
      "following_url": "https://api.github.com/users/wuestholz/following{/other_user}",
      "gists_url": "https://api.github.com/users/wuestholz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wuestholz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wuestholz/subscriptions",
      "organizations_url": "https://api.github.com/users/wuestholz/orgs",
      "repos_url": "https://api.github.com/users/wuestholz/repos",
      "events_url": "https://api.github.com/users/wuestholz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wuestholz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-02T16:43:04Z",
    "updated_at": "2019-10-02T21:16:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "@karalabe I came across another such crash for the following piece of code:\r\n\r\n```\r\ngetHash := func(n uint64) common.Hash {\r\n\treturn common.BytesToHash(crypto.Keccak256([]byte(new(big.Int).SetUint64(n).String())))\r\n}\r\n\r\nto := common.HexToAddress(\"0x0901d12ebe1b195e5aa8748e62bd7734ae19b51f\")\r\ngp, _ := math.ParseBig256(\"0x2fc60325c\")\r\ngp2, _ := math.ParseBig256(\"0xbb73954fa\")\r\nbn, _ := math.ParseBig256(\"0x661a7f\")\r\ndi, _ := math.ParseBig256(\"0xa7d7343662e26\")\r\nbt, _ := math.ParseBig256(\"0x5bf7a462\")\r\no := common.HexToAddress(\"0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe\")\r\no2 := common.HexToAddress(\"0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa2\")\r\ngasPool := new(core.GasPool).AddGas(0x7d0000)\r\n\r\nctx := vm.Context{\r\n\tCanTransfer: core.CanTransfer,\r\n\tTransfer:    core.Transfer,\r\n\tGetHash:     getHash,\r\n\tGasPrice:    gp,\r\n\tOrigin:      o,\r\n\tGasLimit:    0x7d000,\r\n\tBlockNumber: bn,\r\n\tCoinbase:    common.HexToAddress(\"0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa0\"),\r\n\tDifficulty:  di,\r\n\tTime:        bt,\r\n}\r\n\r\nchainConfig := &params.ChainConfig{\r\n\tChainID:             big.NewInt(1),\r\n\tHomesteadBlock:      big.NewInt(0),\r\n\tDAOForkBlock:        big.NewInt(0),\r\n\tDAOForkSupport:      false,\r\n\tEIP150Block:         big.NewInt(0),\r\n\tEIP155Block:         big.NewInt(0),\r\n\tEIP158Block:         big.NewInt(0),\r\n\tByzantiumBlock:      big.NewInt(0),\r\n\tConstantinopleBlock: big.NewInt(0),\r\n\tPetersburgBlock:     big.NewInt(0),\r\n\tIstanbulBlock:       big.NewInt(0),\r\n\tEthash:              new(params.EthashConfig),\r\n}\r\n\r\nevmConfig := vm.Config{}\r\n\r\ndb := rawdb.NewMemoryDatabase()\r\nsdb, _ := state.New(common.Hash{}, state.NewDatabase(db))\r\nbal, _ := math.ParseBig256(\"0x0000000000000000000000000000000000ffffffffffffffffac8146179a7fff\")\r\nsdb.SetBalance(o, bal)\r\nsdb.SetNonce(to, 1)\r\ncode, _ := hex.DecodeString(\"60606040523615610097576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630e3391ec1461009957806313678f70146100eb5780638db0cb2114610121578063955e136f1461017b578063a035b1fe146101cd578063a7695848146101f3578063cfe25be01461028c578063f2853292146102c2578063fb92488b146102f8575bfe5b34156100a157fe5b6100a9610318565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156100f357fe5b61011f600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061033e565b005b341561012957fe5b610179600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919050506103b7565b005b6101cb600480803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610550565b005b34156101d557fe5b6101dd61069a565b6040518082815260200191505060405180910390f35b34156101fb57fe5b6102036106a0565b6040518080602001828103825283818151815260200191508051906020019080838360008314610252575b8051825260208311156102525760208201915060208101905060208303925061022e565b505050905090810190601f16801561027e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561029457fe5b6102c0600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061073e565b005b34156102ca57fe5b6102f6600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506107e7565b005b341561030057fe5b6103166004808035906020019091905050610889565b005b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561039b5760006000fd5b8073ffffffffffffffffffffffffffffffffffffffff16ff5b50565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16313373ffffffffffffffffffffffffffffffffffffffff16311115156104165760006000fd5b806000908051906020019061042c92919061092a565b5033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f61ad394942e3b5e898c6ee4bbd13ed40a2a64d0c82990b3ce067ffc3997b9c503382604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360008314610512575b805182526020831115610512576020820191506020810190506020830392506104ee565b505050905090810190601f16801561053e5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a15b50565b6002543410156105605760006000fd5b806000908051906020019061057692919061092a565b5033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f61ad394942e3b5e898c6ee4bbd13ed40a2a64d0c82990b3ce067ffc3997b9c503382604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018060200182810382528381815181526020019150805190602001908083836000831461065c575b80518252602083111561065c57602082019150602081019050602083039250610638565b505050905090810190601f1680156106885780820380516001836020036101000a031916815260200191505b50935050505060405180910390a15b50565b60025481565b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107365780601f1061070b57610100808354040283529160200191610736565b820191906000526020600020905b81548152906001019060200180831161071957829003601f168201915b505050505081565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561079b5760006000fd5b8073ffffffffffffffffffffffffffffffffffffffff166108fc670de0b6b3a76400009081150290604051809050600060405180830381858888f1935050505015156107e357fe5b5b50565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156108445760006000fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156108e65760006000fd5b806002819055507fa6dc15bdb68da224c66db4b3838d9a2b205138e8cff6774e57d0af91e196d6226002546040518082815260200191505060405180910390a15b50565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061096b57805160ff1916838001178555610999565b82800160010185558215610999579182015b8281111561099857825182559160200191906001019061097d565b5b5090506109a691906109aa565b5090565b6109cc91905b808211156109c85760008160009055506001016109b0565b5090565b905600a165627a7a72305820898aa45f7eb811ccffb977046caf5344261459d9dfea6db4d4441ccfa68b86ea0029\")\r\nsdb.SetCode(to, code)\r\nsdb.SetState(to, common.HexToHash(\"0x0000000000000000000000000000000000000000000000000000000000000000\"), common.HexToHash(\"0x0000000000000000000000000000000000000000000000000000000000000047\"))\r\nsdb.SetState(to, common.HexToHash(\"0x0000000000000000000000000000000000000000000000000000000000000001\"), common.HexToHash(\"0x0000000000000000000000000901d12ebe1b195e5aa8748e62bd7734ae19b51f\"))\r\nsdb.SetState(to, common.HexToHash(\"0x0000000000000000000000000000000000000000000000000000000000000002\"), common.HexToHash(\"0x00000000000000000000000000000000000000000000000000b1a2bc2ec50000\"))\r\nsdb.SetState(to, common.HexToHash(\"0x0000000000000000000000000000000000000000000000000000000000000003\"), common.HexToHash(\"0x000000000000000000000000dcac757ec162e8b4d9766ab75b4e4f57b0f32205\"))\r\nsdb.SetState(to, common.HexToHash(\"0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563\"), common.HexToHash(\"0x426520746865206669727374206f6e6520746f2073686f7720796f7572207374\"))\r\nsdb.SetState(to, common.HexToHash(\"0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e564\"), common.HexToHash(\"0x61636b0000000000000000000000000000000000000000000000000000000000\"))\r\nsdb.Finalise(true)\r\n\r\nsdb2 := sdb.Copy()\r\nevm := vm.NewEVM(ctx, sdb2, chainConfig, evmConfig)\r\n\r\nin := \"955e136f00000000000001b94478286b21bbb4ae0150506392aaaaaaaaaaaaaaaaaaaaab00000000000000000000000000000000000000000000000000000000000000000000000000000000000000250000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c0000000000000000c200000000000000000000\"\r\ndata, _ := hex.DecodeString(in)\r\ntc := common.BytesToAddress(to.Bytes())\r\nval, _ := math.ParseBig256(\"0xffff00000000000006f4527ae609e5\")\r\nmsg := types.NewMessage(o, &tc, 0, val, 0x7d000, gp, data, false)\r\n_, _, _, appErr := core.ApplyMessage(evm, msg, gasPool)\r\nfmt.Printf(\"AppErr1: %v\\n\", appErr)\r\n\r\nctx2 := vm.Context{\r\n\tCanTransfer: core.CanTransfer,\r\n\tTransfer:    core.Transfer,\r\n\tGetHash:     getHash,\r\n\tGasPrice:    gp2,\r\n\tOrigin:      o2,\r\n\tGasLimit:    0x7d000,\r\n\tBlockNumber: bn,\r\n\tCoinbase:    common.HexToAddress(\"0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa0\"),\r\n\tDifficulty:  di,\r\n\tTime:        bt,\r\n}\r\n\r\nsdb3 := sdb2.Copy()\r\nbal2, _ := math.ParseBig256(\"0x000000000000000000000000000000000000012e469127d14f63ecff0de82a31\")\r\nsdb3.SetBalance(o2, bal2)\r\nsdb3.Finalise(false)\r\n\r\nevm2 := vm.NewEVM(ctx2, sdb3.Copy(), chainConfig, evmConfig)\r\n\r\nin2 := \"8db0cb21000000000000000000000000000000000000000000000000000000000000002d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000001290000000000000000000000000000000000000000000000\"\r\ndata2, _ := hex.DecodeString(in2)\r\ntc2 := common.BytesToAddress(to.Bytes())\r\nval2, _ := math.ParseBig256(\"0x0\")\r\nmsg2 := types.NewMessage(o2, &tc2, 0, val2, 0x7d000, gp2, data2, false)\r\n_, _, _, appErr2 := core.ApplyMessage(evm2, msg2, gasPool)\r\nfmt.Printf(\"AppErr2: %v\\n\", appErr2)\r\n```\r\n\r\nAny idea why that might happen? It seems like all state DBs are finalized before applying the transactions.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/537579396/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/537593470",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/20119#issuecomment-537593470",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20119",
    "id": 537593470,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzNzU5MzQ3MA==",
    "user": {
      "login": "holiman",
      "id": 142290,
      "node_id": "MDQ6VXNlcjE0MjI5MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/142290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/holiman",
      "html_url": "https://github.com/holiman",
      "followers_url": "https://api.github.com/users/holiman/followers",
      "following_url": "https://api.github.com/users/holiman/following{/other_user}",
      "gists_url": "https://api.github.com/users/holiman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/holiman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/holiman/subscriptions",
      "organizations_url": "https://api.github.com/users/holiman/orgs",
      "repos_url": "https://api.github.com/users/holiman/repos",
      "events_url": "https://api.github.com/users/holiman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/holiman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-02T17:18:05Z",
    "updated_at": "2019-10-02T17:18:05Z",
    "author_association": "MEMBER",
    "body": "`sdb2` is not finalized. You do `applyMessage` on it, then copy it to a new sdb without finalizing",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/537593470/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/537594940",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/20119#issuecomment-537594940",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20119",
    "id": 537594940,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzNzU5NDk0MA==",
    "user": {
      "login": "karalabe",
      "id": 129561,
      "node_id": "MDQ6VXNlcjEyOTU2MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/129561?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/karalabe",
      "html_url": "https://github.com/karalabe",
      "followers_url": "https://api.github.com/users/karalabe/followers",
      "following_url": "https://api.github.com/users/karalabe/following{/other_user}",
      "gists_url": "https://api.github.com/users/karalabe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/karalabe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/karalabe/subscriptions",
      "organizations_url": "https://api.github.com/users/karalabe/orgs",
      "repos_url": "https://api.github.com/users/karalabe/repos",
      "events_url": "https://api.github.com/users/karalabe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/karalabe/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-02T17:21:32Z",
    "updated_at": "2019-10-02T17:21:32Z",
    "author_association": "MEMBER",
    "body": "Though, if sdb3 is then finalized, should it matter? Could it be that you reuse the same gasPool instance in 2 transaction invocations?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/537594940/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/537658572",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/20119#issuecomment-537658572",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20119",
    "id": 537658572,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzNzY1ODU3Mg==",
    "user": {
      "login": "wuestholz",
      "id": 51156,
      "node_id": "MDQ6VXNlcjUxMTU2",
      "avatar_url": "https://avatars.githubusercontent.com/u/51156?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wuestholz",
      "html_url": "https://github.com/wuestholz",
      "followers_url": "https://api.github.com/users/wuestholz/followers",
      "following_url": "https://api.github.com/users/wuestholz/following{/other_user}",
      "gists_url": "https://api.github.com/users/wuestholz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wuestholz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wuestholz/subscriptions",
      "organizations_url": "https://api.github.com/users/wuestholz/orgs",
      "repos_url": "https://api.github.com/users/wuestholz/repos",
      "events_url": "https://api.github.com/users/wuestholz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wuestholz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-02T20:08:33Z",
    "updated_at": "2019-10-02T20:08:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "@holiman @karalabe Thanks a lot for looking into this so quickly!\r\n\r\nYeah, I was thinking the same as @karalabe. I would assume that the `Finalize` for `sdb3` would make sure the above invariant is preserved.\r\n\r\nAbout the gas pool: it crashes even when using a second gas pool.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/537658572/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/537821816",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/20119#issuecomment-537821816",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20119",
    "id": 537821816,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzNzgyMTgxNg==",
    "user": {
      "login": "wuestholz",
      "id": 51156,
      "node_id": "MDQ6VXNlcjUxMTU2",
      "avatar_url": "https://avatars.githubusercontent.com/u/51156?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wuestholz",
      "html_url": "https://github.com/wuestholz",
      "followers_url": "https://api.github.com/users/wuestholz/followers",
      "following_url": "https://api.github.com/users/wuestholz/following{/other_user}",
      "gists_url": "https://api.github.com/users/wuestholz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wuestholz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wuestholz/subscriptions",
      "organizations_url": "https://api.github.com/users/wuestholz/orgs",
      "repos_url": "https://api.github.com/users/wuestholz/repos",
      "events_url": "https://api.github.com/users/wuestholz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wuestholz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-03T07:22:43Z",
    "updated_at": "2019-10-03T07:27:05Z",
    "author_association": "CONTRIBUTOR",
    "body": "@holiman I just tried adding `sdb2.Finalise(false)` before `sdb3 := sdb2.Copy()`. This prevents the crash, but I don't understand why... Doing `sdb3.Finalise(false)` *after* the copy still crashes.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/537821816/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/538917588",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/20119#issuecomment-538917588",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20119",
    "id": 538917588,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzODkxNzU4OA==",
    "user": {
      "login": "wuestholz",
      "id": 51156,
      "node_id": "MDQ6VXNlcjUxMTU2",
      "avatar_url": "https://avatars.githubusercontent.com/u/51156?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wuestholz",
      "html_url": "https://github.com/wuestholz",
      "followers_url": "https://api.github.com/users/wuestholz/followers",
      "following_url": "https://api.github.com/users/wuestholz/following{/other_user}",
      "gists_url": "https://api.github.com/users/wuestholz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wuestholz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wuestholz/subscriptions",
      "organizations_url": "https://api.github.com/users/wuestholz/orgs",
      "repos_url": "https://api.github.com/users/wuestholz/repos",
      "events_url": "https://api.github.com/users/wuestholz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wuestholz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-07T09:31:24Z",
    "updated_at": "2019-10-07T09:31:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "@karalabe @holiman I just tried to simply the code some more:\r\n\r\n```golang\r\n// We set up the initial state.\r\ndb := rawdb.NewMemoryDatabase()\r\nsdb, _ := state.New(common.Hash{}, state.NewDatabase(db))\r\nto := common.HexToAddress(\"0xaaa1\")\r\nsdb.SetNonce(to, 1)\r\ncode, _ := hex.DecodeString(\"60606040523615610097576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630e3391ec1461009957806313678f70146100eb5780638db0cb2114610121578063955e136f1461017b578063a035b1fe146101cd578063a7695848146101f3578063cfe25be01461028c578063f2853292146102c2578063fb92488b146102f8575bfe5b34156100a157fe5b6100a9610318565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156100f357fe5b61011f600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061033e565b005b341561012957fe5b610179600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919050506103b7565b005b6101cb600480803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610550565b005b34156101d557fe5b6101dd61069a565b6040518082815260200191505060405180910390f35b34156101fb57fe5b6102036106a0565b6040518080602001828103825283818151815260200191508051906020019080838360008314610252575b8051825260208311156102525760208201915060208101905060208303925061022e565b505050905090810190601f16801561027e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561029457fe5b6102c0600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061073e565b005b34156102ca57fe5b6102f6600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506107e7565b005b341561030057fe5b6103166004808035906020019091905050610889565b005b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561039b5760006000fd5b8073ffffffffffffffffffffffffffffffffffffffff16ff5b50565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16313373ffffffffffffffffffffffffffffffffffffffff16311115156104165760006000fd5b806000908051906020019061042c92919061092a565b5033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f61ad394942e3b5e898c6ee4bbd13ed40a2a64d0c82990b3ce067ffc3997b9c503382604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360008314610512575b805182526020831115610512576020820191506020810190506020830392506104ee565b505050905090810190601f16801561053e5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a15b50565b6002543410156105605760006000fd5b806000908051906020019061057692919061092a565b5033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f61ad394942e3b5e898c6ee4bbd13ed40a2a64d0c82990b3ce067ffc3997b9c503382604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018060200182810382528381815181526020019150805190602001908083836000831461065c575b80518252602083111561065c57602082019150602081019050602083039250610638565b505050905090810190601f1680156106885780820380516001836020036101000a031916815260200191505b50935050505060405180910390a15b50565b60025481565b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107365780601f1061070b57610100808354040283529160200191610736565b820191906000526020600020905b81548152906001019060200180831161071957829003601f168201915b505050505081565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561079b5760006000fd5b8073ffffffffffffffffffffffffffffffffffffffff166108fc670de0b6b3a76400009081150290604051809050600060405180830381858888f1935050505015156107e357fe5b5b50565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156108445760006000fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156108e65760006000fd5b806002819055507fa6dc15bdb68da224c66db4b3838d9a2b205138e8cff6774e57d0af91e196d6226002546040518082815260200191505060405180910390a15b50565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061096b57805160ff1916838001178555610999565b82800160010185558215610999579182015b8281111561099857825182559160200191906001019061097d565b5b5090506109a691906109aa565b5090565b6109cc91905b808211156109c85760008160009055506001016109b0565b5090565b905600a165627a7a72305820898aa45f7eb811ccffb977046caf5344261459d9dfea6db4d4441ccfa68b86ea0029\")\r\nsdb.SetCode(to, code)\r\nsdb.SetState(to, common.HexToHash(\"0x0\"), common.HexToHash(\"0x1\"))\r\no := common.HexToAddress(\"0xaaa2\")\r\nbal, _ := math.ParseBig256(\"0xfffffffffffffffffffffff\")\r\nsdb.SetBalance(o, bal)\r\nsdb.Finalise(false)\r\n\r\nsdb2 := sdb.Copy()\r\n\r\n// We run the first transaction.\r\ngetHash := func(n uint64) common.Hash {\r\n\treturn common.Hash{}\r\n}\r\nctx := vm.Context{\r\n\tCanTransfer: core.CanTransfer,\r\n\tTransfer:    core.Transfer,\r\n\tGetHash:     getHash,\r\n\tGasPrice:    big.NewInt(0),\r\n\tOrigin:      o,\r\n\tGasLimit:    0x7d000,\r\n\tBlockNumber: big.NewInt(1),\r\n\tCoinbase:    common.HexToAddress(\"0xaaa0\"),\r\n\tDifficulty:  big.NewInt(0),\r\n\tTime:        big.NewInt(0),\r\n}\r\nchainConfig := &params.ChainConfig{\r\n\tChainID:             big.NewInt(1),\r\n\tHomesteadBlock:      big.NewInt(0),\r\n\tDAOForkBlock:        big.NewInt(0),\r\n\tDAOForkSupport:      false,\r\n\tEIP150Block:         big.NewInt(0),\r\n\tEIP155Block:         big.NewInt(0),\r\n\tEIP158Block:         big.NewInt(0),\r\n\tByzantiumBlock:      big.NewInt(0),\r\n\tConstantinopleBlock: big.NewInt(0),\r\n\tPetersburgBlock:     big.NewInt(0),\r\n\tIstanbulBlock:       big.NewInt(0),\r\n\tEthash:              new(params.EthashConfig),\r\n}\r\nevm := vm.NewEVM(ctx, sdb2, chainConfig, vm.Config{})\r\ndata, _ := hex.DecodeString(\"955e136f\")\r\ntoCopy := common.BytesToAddress(to.Bytes())\r\nmsg := types.NewMessage(o, &toCopy, 0, big.NewInt(0xffffffffffffff), 0x7d000, big.NewInt(0), data, false)\r\n_, _, _, appErr := core.ApplyMessage(evm, msg, new(core.GasPool).AddGas(0x7d0000))\r\nfmt.Printf(\"AppErr1: %v\\n\", appErr)\r\n\r\n// \"Fix 1\": uncommenting the following line.\r\n// sdb2.Finalise(false)\r\nsdb3 := sdb2.Copy()\r\n// sdb3.Finalise(false)\r\no2 := common.HexToAddress(\"0xaaa3\")\r\nbal2, _ := math.ParseBig256(\"0xfffffffffffffffffffffff\")\r\nsdb3.SetBalance(o2, bal2)\r\n// \"Fix 2\": using \"Commit\" instead of \"Finalize\" in the following line.\r\nsdb3.Finalise(false)\r\n\r\nsdb4 := sdb3.Copy()\r\n\r\n// We run the second transaction which crashes.\r\nctx2 := vm.Context{\r\n\tCanTransfer: core.CanTransfer,\r\n\tTransfer:    core.Transfer,\r\n\tGetHash:     getHash,\r\n\tGasPrice:    big.NewInt(0),\r\n\tOrigin:      o2,\r\n\tGasLimit:    0x7d000,\r\n\tBlockNumber: big.NewInt(1),\r\n\tCoinbase:    common.HexToAddress(\"0xaaa0\"),\r\n\tDifficulty:  big.NewInt(0),\r\n\tTime:        big.NewInt(0),\r\n}\r\nevm2 := vm.NewEVM(ctx2, sdb4, chainConfig, vm.Config{})\r\ndata2, _ := hex.DecodeString(\"8db0cb21000000000000000000000000000000000000000000000000000000000000002d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000129\")\r\ntoCopy2 := common.BytesToAddress(to.Bytes())\r\nmsg2 := types.NewMessage(o2, &toCopy2, 0, big.NewInt(0), 0x7d000, big.NewInt(0), data2, false)\r\n_, _, _, appErr2 := core.ApplyMessage(evm2, msg2, new(core.GasPool).AddGas(0x7d0000))\r\nfmt.Printf(\"AppErr2: %v\\n\", appErr2)\r\n```\r\n\r\nWhile doing so, I also discovered another \"fix\" (see comment \"fix 2\"): using `Commit` instead of `Finalize`. However, I don't understand why either of the two \"fixes\" prevent the crash. Do you have an explanation?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/538917588/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/548246434",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/20119#issuecomment-548246434",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20119",
    "id": 548246434,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0ODI0NjQzNA==",
    "user": {
      "login": "wuestholz",
      "id": 51156,
      "node_id": "MDQ6VXNlcjUxMTU2",
      "avatar_url": "https://avatars.githubusercontent.com/u/51156?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wuestholz",
      "html_url": "https://github.com/wuestholz",
      "followers_url": "https://api.github.com/users/wuestholz/followers",
      "following_url": "https://api.github.com/users/wuestholz/following{/other_user}",
      "gists_url": "https://api.github.com/users/wuestholz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wuestholz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wuestholz/subscriptions",
      "organizations_url": "https://api.github.com/users/wuestholz/orgs",
      "repos_url": "https://api.github.com/users/wuestholz/repos",
      "events_url": "https://api.github.com/users/wuestholz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wuestholz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-31T07:25:22Z",
    "updated_at": "2019-10-31T07:25:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "@karalabe @holiman Are you planning to look into the somewhat strange behavior above? It would be great if I could understand why this happens to make sure I use the API correctly in our Harvey fuzzer. Thanks again!\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/548246434/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1090061967",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/20119#issuecomment-1090061967",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20119",
    "id": 1090061967,
    "node_id": "IC_kwDOAOvK985A-QaP",
    "user": {
      "login": "wuestholz",
      "id": 51156,
      "node_id": "MDQ6VXNlcjUxMTU2",
      "avatar_url": "https://avatars.githubusercontent.com/u/51156?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wuestholz",
      "html_url": "https://github.com/wuestholz",
      "followers_url": "https://api.github.com/users/wuestholz/followers",
      "following_url": "https://api.github.com/users/wuestholz/following{/other_user}",
      "gists_url": "https://api.github.com/users/wuestholz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wuestholz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wuestholz/subscriptions",
      "organizations_url": "https://api.github.com/users/wuestholz/orgs",
      "repos_url": "https://api.github.com/users/wuestholz/repos",
      "events_url": "https://api.github.com/users/wuestholz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wuestholz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-06T09:34:47Z",
    "updated_at": "2022-04-06T09:39:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "I ported the above code to the latest go-ethereum version in case someone wants to reproduce this:\r\n\r\n```go\r\n// We set up the initial state.\r\ndb := rawdb.NewMemoryDatabase()\r\nsdb, _ := state.New(common.Hash{}, state.NewDatabase(db), nil)\r\nto := common.HexToAddress(\"0xaaa1\")\r\nsdb.SetNonce(to, 1)\r\ncode, _ := hex.DecodeString(\"60606040523615610097576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630e3391ec1461009957806313678f70146100eb5780638db0cb2114610121578063955e136f1461017b578063a035b1fe146101cd578063a7695848146101f3578063cfe25be01461028c578063f2853292146102c2578063fb92488b146102f8575bfe5b34156100a157fe5b6100a9610318565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156100f357fe5b61011f600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061033e565b005b341561012957fe5b610179600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919050506103b7565b005b6101cb600480803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610550565b005b34156101d557fe5b6101dd61069a565b6040518082815260200191505060405180910390f35b34156101fb57fe5b6102036106a0565b6040518080602001828103825283818151815260200191508051906020019080838360008314610252575b8051825260208311156102525760208201915060208101905060208303925061022e565b505050905090810190601f16801561027e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561029457fe5b6102c0600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061073e565b005b34156102ca57fe5b6102f6600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506107e7565b005b341561030057fe5b6103166004808035906020019091905050610889565b005b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561039b5760006000fd5b8073ffffffffffffffffffffffffffffffffffffffff16ff5b50565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16313373ffffffffffffffffffffffffffffffffffffffff16311115156104165760006000fd5b806000908051906020019061042c92919061092a565b5033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f61ad394942e3b5e898c6ee4bbd13ed40a2a64d0c82990b3ce067ffc3997b9c503382604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360008314610512575b805182526020831115610512576020820191506020810190506020830392506104ee565b505050905090810190601f16801561053e5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a15b50565b6002543410156105605760006000fd5b806000908051906020019061057692919061092a565b5033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f61ad394942e3b5e898c6ee4bbd13ed40a2a64d0c82990b3ce067ffc3997b9c503382604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018060200182810382528381815181526020019150805190602001908083836000831461065c575b80518252602083111561065c57602082019150602081019050602083039250610638565b505050905090810190601f1680156106885780820380516001836020036101000a031916815260200191505b50935050505060405180910390a15b50565b60025481565b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107365780601f1061070b57610100808354040283529160200191610736565b820191906000526020600020905b81548152906001019060200180831161071957829003601f168201915b505050505081565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561079b5760006000fd5b8073ffffffffffffffffffffffffffffffffffffffff166108fc670de0b6b3a76400009081150290604051809050600060405180830381858888f1935050505015156107e357fe5b5b50565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156108445760006000fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156108e65760006000fd5b806002819055507fa6dc15bdb68da224c66db4b3838d9a2b205138e8cff6774e57d0af91e196d6226002546040518082815260200191505060405180910390a15b50565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061096b57805160ff1916838001178555610999565b82800160010185558215610999579182015b8281111561099857825182559160200191906001019061097d565b5b5090506109a691906109aa565b5090565b6109cc91905b808211156109c85760008160009055506001016109b0565b5090565b905600a165627a7a72305820898aa45f7eb811ccffb977046caf5344261459d9dfea6db4d4441ccfa68b86ea0029\")\r\nsdb.SetCode(to, code)\r\nsdb.SetState(to, common.HexToHash(\"0x0\"), common.HexToHash(\"0x1\"))\r\no := common.HexToAddress(\"0xaaa2\")\r\nbal, _ := math.ParseBig256(\"0xfffffffffffffffffffffff\")\r\nsdb.SetBalance(o, bal)\r\nsdb.Finalise(false)\r\n\r\nsdb2 := sdb.Copy()\r\n\r\n// We run the first transaction.\r\ngetHash := func(n uint64) common.Hash {\r\n\treturn common.Hash{}\r\n}\r\ntxCtx := vm.TxContext{\r\n\tOrigin:   o,\r\n\tGasPrice: big.NewInt(0),\r\n}\r\nblockCtx := vm.BlockContext{\r\n\tCanTransfer: core.CanTransfer,\r\n\tTransfer:    core.Transfer,\r\n\tGetHash:     getHash,\r\n\tGasLimit:    0x7d000,\r\n\tBlockNumber: big.NewInt(1),\r\n\tCoinbase:    common.HexToAddress(\"0xaaa0\"),\r\n\tDifficulty:  big.NewInt(0),\r\n\tTime:        big.NewInt(0),\r\n\tBaseFee:     big.NewInt(0),\r\n}\r\nchainConfig := &params.ChainConfig{\r\n\tChainID:             big.NewInt(1),\r\n\tHomesteadBlock:      big.NewInt(0),\r\n\tDAOForkBlock:        big.NewInt(0),\r\n\tDAOForkSupport:      false,\r\n\tEIP150Block:         big.NewInt(0),\r\n\tEIP155Block:         big.NewInt(0),\r\n\tEIP158Block:         big.NewInt(0),\r\n\tByzantiumBlock:      big.NewInt(0),\r\n\tConstantinopleBlock: big.NewInt(0),\r\n\tPetersburgBlock:     big.NewInt(0),\r\n\tIstanbulBlock:       big.NewInt(0),\r\n\tMuirGlacierBlock:    big.NewInt(0),\r\n\tBerlinBlock:         big.NewInt(0),\r\n\tLondonBlock:         big.NewInt(0),\r\n\tEthash:              new(params.EthashConfig),\r\n}\r\nevm := vm.NewEVM(blockCtx, txCtx, sdb2, chainConfig, vm.Config{})\r\ndata, _ := hex.DecodeString(\"955e136f\")\r\ntoCopy := common.BytesToAddress(to.Bytes())\r\nmsg := types.NewMessage(o, &toCopy, 0, big.NewInt(0xffffffffffffff), 0x7d000, big.NewInt(0), big.NewInt(0), big.NewInt(0), data, nil, false)\r\n_, appErr := core.ApplyMessage(evm, msg, new(core.GasPool).AddGas(0x7d0000))\r\nfmt.Printf(\"AppErr1: %v\\n\", appErr)\r\n\r\n// \"Fix 1\": uncommenting the following line.\r\n// sdb2.Finalise(false)\r\nsdb3 := sdb2.Copy()\r\n// sdb3.Finalise(false)\r\no2 := common.HexToAddress(\"0xaaa3\")\r\nbal2, _ := math.ParseBig256(\"0xfffffffffffffffffffffff\")\r\nsdb3.SetBalance(o2, bal2)\r\n// \"Fix 2\": using \"Commit\" instead of \"Finalize\" in the following line.\r\nsdb3.Finalise(false)\r\n\r\nsdb4 := sdb3.Copy()\r\n\r\n// We run the second transaction which crashes.\r\ntxCtx2 := vm.TxContext{\r\n\tOrigin:   o2,\r\n\tGasPrice: big.NewInt(0),\r\n}\r\nblockCtx2 := vm.BlockContext{\r\n\tCanTransfer: core.CanTransfer,\r\n\tTransfer:    core.Transfer,\r\n\tGetHash:     getHash,\r\n\tGasLimit:    0x7d000,\r\n\tBlockNumber: big.NewInt(1),\r\n\tCoinbase:    common.HexToAddress(\"0xaaa0\"),\r\n\tDifficulty:  big.NewInt(0),\r\n\tTime:        big.NewInt(0),\r\n\tBaseFee:     big.NewInt(0),\r\n}\r\nevm2 := vm.NewEVM(blockCtx2, txCtx2, sdb4, chainConfig, vm.Config{})\r\ndata2, _ := hex.DecodeString(\"8db0cb21000000000000000000000000000000000000000000000000000000000000002d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000129\")\r\ntoCopy2 := common.BytesToAddress(to.Bytes())\r\nmsg2 := types.NewMessage(o2, &toCopy2, 0, big.NewInt(0), 0x7d000, big.NewInt(0), big.NewInt(0), big.NewInt(0), data2, nil, false)\r\n_, appErr2 := core.ApplyMessage(evm2, msg2, new(core.GasPool).AddGas(0x7d0000))\r\nfmt.Printf(\"AppErr2: %v\\n\", appErr2)\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1090061967/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1709891157",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/20119#issuecomment-1709891157",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20119",
    "id": 1709891157,
    "node_id": "IC_kwDOAOvK985l6t5V",
    "user": {
      "login": "wuestholz",
      "id": 51156,
      "node_id": "MDQ6VXNlcjUxMTU2",
      "avatar_url": "https://avatars.githubusercontent.com/u/51156?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wuestholz",
      "html_url": "https://github.com/wuestholz",
      "followers_url": "https://api.github.com/users/wuestholz/followers",
      "following_url": "https://api.github.com/users/wuestholz/following{/other_user}",
      "gists_url": "https://api.github.com/users/wuestholz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wuestholz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wuestholz/subscriptions",
      "organizations_url": "https://api.github.com/users/wuestholz/orgs",
      "repos_url": "https://api.github.com/users/wuestholz/repos",
      "events_url": "https://api.github.com/users/wuestholz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wuestholz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-09-07T10:17:13Z",
    "updated_at": "2023-09-07T10:17:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "I ported the above code to the latest go-ethereum version in case someone wants to reproduce this:\r\n\r\n```golang\r\n// We set up the initial state.\r\ndb := rawdb.NewMemoryDatabase()\r\nsdb, _ := state.New(common.Hash{}, state.NewDatabase(db), nil)\r\nto := common.HexToAddress(\"0xaaa1\")\r\nsdb.SetNonce(to, 1)\r\ncode, _ := hex.DecodeString(\"60606040523615610097576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630e3391ec1461009957806313678f70146100eb5780638db0cb2114610121578063955e136f1461017b578063a035b1fe146101cd578063a7695848146101f3578063cfe25be01461028c578063f2853292146102c2578063fb92488b146102f8575bfe5b34156100a157fe5b6100a9610318565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156100f357fe5b61011f600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061033e565b005b341561012957fe5b610179600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919050506103b7565b005b6101cb600480803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610550565b005b34156101d557fe5b6101dd61069a565b6040518082815260200191505060405180910390f35b34156101fb57fe5b6102036106a0565b6040518080602001828103825283818151815260200191508051906020019080838360008314610252575b8051825260208311156102525760208201915060208101905060208303925061022e565b505050905090810190601f16801561027e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561029457fe5b6102c0600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061073e565b005b34156102ca57fe5b6102f6600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506107e7565b005b341561030057fe5b6103166004808035906020019091905050610889565b005b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561039b5760006000fd5b8073ffffffffffffffffffffffffffffffffffffffff16ff5b50565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16313373ffffffffffffffffffffffffffffffffffffffff16311115156104165760006000fd5b806000908051906020019061042c92919061092a565b5033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f61ad394942e3b5e898c6ee4bbd13ed40a2a64d0c82990b3ce067ffc3997b9c503382604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360008314610512575b805182526020831115610512576020820191506020810190506020830392506104ee565b505050905090810190601f16801561053e5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a15b50565b6002543410156105605760006000fd5b806000908051906020019061057692919061092a565b5033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f61ad394942e3b5e898c6ee4bbd13ed40a2a64d0c82990b3ce067ffc3997b9c503382604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018060200182810382528381815181526020019150805190602001908083836000831461065c575b80518252602083111561065c57602082019150602081019050602083039250610638565b505050905090810190601f1680156106885780820380516001836020036101000a031916815260200191505b50935050505060405180910390a15b50565b60025481565b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107365780601f1061070b57610100808354040283529160200191610736565b820191906000526020600020905b81548152906001019060200180831161071957829003601f168201915b505050505081565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561079b5760006000fd5b8073ffffffffffffffffffffffffffffffffffffffff166108fc670de0b6b3a76400009081150290604051809050600060405180830381858888f1935050505015156107e357fe5b5b50565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156108445760006000fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156108e65760006000fd5b806002819055507fa6dc15bdb68da224c66db4b3838d9a2b205138e8cff6774e57d0af91e196d6226002546040518082815260200191505060405180910390a15b50565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061096b57805160ff1916838001178555610999565b82800160010185558215610999579182015b8281111561099857825182559160200191906001019061097d565b5b5090506109a691906109aa565b5090565b6109cc91905b808211156109c85760008160009055506001016109b0565b5090565b905600a165627a7a72305820898aa45f7eb811ccffb977046caf5344261459d9dfea6db4d4441ccfa68b86ea0029\")\r\nsdb.SetCode(to, code)\r\nsdb.SetState(to, common.HexToHash(\"0x0\"), common.HexToHash(\"0x1\"))\r\no := common.HexToAddress(\"0xaaa2\")\r\nbal, _ := math.ParseBig256(\"0xfffffffffffffffffffffff\")\r\nsdb.SetBalance(o, bal)\r\nsdb.Finalise(false)\r\n\r\nsdb2 := sdb.Copy()\r\n\r\n// We run the first transaction.\r\ngetHash := func(n uint64) common.Hash {\r\n\treturn common.Hash{}\r\n}\r\ntxCtx := vm.TxContext{\r\n\tOrigin:   o,\r\n\tGasPrice: big.NewInt(0),\r\n}\r\nblockCtx := vm.BlockContext{\r\n\tCanTransfer: core.CanTransfer,\r\n\tTransfer:    core.Transfer,\r\n\tGetHash:     getHash,\r\n\tGasLimit:    0x7d000,\r\n\tBlockNumber: big.NewInt(1),\r\n\tCoinbase:    common.HexToAddress(\"0xaaa0\"),\r\n\tDifficulty:  big.NewInt(0),\r\n\tTime:        0,\r\n\tBaseFee:     big.NewInt(0),\r\n}\r\nnewUint64 := func(val uint64) *uint64 { return &val }\r\nchainConfig := &params.ChainConfig{\r\n\tChainID:                       big.NewInt(1),\r\n\tHomesteadBlock:                big.NewInt(0),\r\n\tDAOForkBlock:                  big.NewInt(0),\r\n\tDAOForkSupport:                false,\r\n\tEIP150Block:                   big.NewInt(0),\r\n\tEIP155Block:                   big.NewInt(0),\r\n\tEIP158Block:                   big.NewInt(0),\r\n\tByzantiumBlock:                big.NewInt(0),\r\n\tConstantinopleBlock:           big.NewInt(0),\r\n\tPetersburgBlock:               big.NewInt(0),\r\n\tIstanbulBlock:                 big.NewInt(0),\r\n\tMuirGlacierBlock:              big.NewInt(0),\r\n\tBerlinBlock:                   big.NewInt(0),\r\n\tLondonBlock:                   big.NewInt(0),\r\n\tArrowGlacierBlock:             big.NewInt(0),\r\n\tGrayGlacierBlock:              big.NewInt(0),\r\n\tTerminalTotalDifficulty:       big.NewInt(0),\r\n\tTerminalTotalDifficultyPassed: true,\r\n\tShanghaiTime:                  newUint64(0),\r\n\tEthash:                        new(params.EthashConfig),\r\n}\r\nevm := vm.NewEVM(blockCtx, txCtx, sdb2, chainConfig, vm.Config{})\r\ndata, _ := hex.DecodeString(\"955e136f\")\r\ntoCopy := common.BytesToAddress(to.Bytes())\r\nmsg := &core.Message{\r\n\tTo:                &toCopy,\r\n\tFrom:              o,\r\n\tNonce:             0,\r\n\tValue:             big.NewInt(0xffffffffffffff),\r\n\tGasLimit:          0x7d000,\r\n\tGasPrice:          big.NewInt(0),\r\n\tGasFeeCap:         big.NewInt(0),\r\n\tGasTipCap:         big.NewInt(0),\r\n\tData:              data,\r\n\tAccessList:        nil,\r\n\tSkipAccountChecks: true,\r\n}\r\n_, appErr := core.ApplyMessage(evm, msg, new(core.GasPool).AddGas(0x7d0000))\r\nfmt.Printf(\"AppErr1: %v\\n\", appErr)\r\n\r\n// \"Fix 1\": uncommenting the following line.\r\n// sdb2.Finalise(false)\r\nsdb3 := sdb2.Copy()\r\no2 := common.HexToAddress(\"0xaaa3\")\r\nbal2, _ := math.ParseBig256(\"0xfffffffffffffffffffffff\")\r\nsdb3.SetBalance(o2, bal2)\r\n// \"Fix 2\": using \"Commit\" instead of \"Finalize\" in the following line.\r\nsdb3.Finalise(false)\r\n\r\nsdb4 := sdb3.Copy()\r\n\r\n// We run the second transaction which crashes.\r\ntxCtx2 := vm.TxContext{\r\n\tOrigin:   o2,\r\n\tGasPrice: big.NewInt(0),\r\n}\r\nblockCtx2 := vm.BlockContext{\r\n\tCanTransfer: core.CanTransfer,\r\n\tTransfer:    core.Transfer,\r\n\tGetHash:     getHash,\r\n\tGasLimit:    0x7d000,\r\n\tBlockNumber: big.NewInt(1),\r\n\tCoinbase:    common.HexToAddress(\"0xaaa0\"),\r\n\tDifficulty:  big.NewInt(0),\r\n\tTime:        0,\r\n\tBaseFee:     big.NewInt(0),\r\n}\r\nevm2 := vm.NewEVM(blockCtx2, txCtx2, sdb4, chainConfig, vm.Config{})\r\ndata2, _ := hex.DecodeString(\"8db0cb21000000000000000000000000000000000000000000000000000000000000002d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000129\")\r\ntoCopy2 := common.BytesToAddress(to.Bytes())\r\nmsg2 := &core.Message{\r\n\tTo:                &toCopy2,\r\n\tFrom:              o2,\r\n\tNonce:             0,\r\n\tValue:             big.NewInt(0),\r\n\tGasLimit:          0x7d000,\r\n\tGasPrice:          big.NewInt(0),\r\n\tGasFeeCap:         big.NewInt(0),\r\n\tGasTipCap:         big.NewInt(0),\r\n\tData:              data2,\r\n\tAccessList:        nil,\r\n\tSkipAccountChecks: true,\r\n}\r\n_, appErr2 := core.ApplyMessage(evm2, msg2, new(core.GasPool).AddGas(0x7d0000))\r\nfmt.Printf(\"AppErr2: %v\\n\", appErr2)\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1709891157/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1845106029",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/20119#issuecomment-1845106029",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20119",
    "id": 1845106029,
    "node_id": "IC_kwDOAOvK985t-hVt",
    "user": {
      "login": "karalabe",
      "id": 129561,
      "node_id": "MDQ6VXNlcjEyOTU2MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/129561?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/karalabe",
      "html_url": "https://github.com/karalabe",
      "followers_url": "https://api.github.com/users/karalabe/followers",
      "following_url": "https://api.github.com/users/karalabe/following{/other_user}",
      "gists_url": "https://api.github.com/users/karalabe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/karalabe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/karalabe/subscriptions",
      "organizations_url": "https://api.github.com/users/karalabe/orgs",
      "repos_url": "https://api.github.com/users/karalabe/repos",
      "events_url": "https://api.github.com/users/karalabe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/karalabe/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-12-07T10:41:41Z",
    "updated_at": "2023-12-07T10:41:41Z",
    "author_association": "MEMBER",
    "body": "We've investigated this today. Found the issue, though unsure yet how to fix it. The Copy method loses some dirtyness tracking when called on a dirty statedb, so a Finalize won't pick it up (optimization to only iterate over dirty items). Calling Commit however does pick it up and fix it (or IntermediateRoot too).\r\n\r\nWe're a bit pondering what direction to take the fix. We could require Copy to run on only Finalized statedb (that's what we do and its a lot cleaner). We could have Copy implicitly call Finalize, but that feels surprising (still, it does somewhat do that even now). Or we could make Copy retain more dirty tracking information (can get weird).\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1845106029/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1845196053",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/20119#issuecomment-1845196053",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20119",
    "id": 1845196053,
    "node_id": "IC_kwDOAOvK985t-3UV",
    "user": {
      "login": "wuestholz",
      "id": 51156,
      "node_id": "MDQ6VXNlcjUxMTU2",
      "avatar_url": "https://avatars.githubusercontent.com/u/51156?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wuestholz",
      "html_url": "https://github.com/wuestholz",
      "followers_url": "https://api.github.com/users/wuestholz/followers",
      "following_url": "https://api.github.com/users/wuestholz/following{/other_user}",
      "gists_url": "https://api.github.com/users/wuestholz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wuestholz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wuestholz/subscriptions",
      "organizations_url": "https://api.github.com/users/wuestholz/orgs",
      "repos_url": "https://api.github.com/users/wuestholz/repos",
      "events_url": "https://api.github.com/users/wuestholz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wuestholz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-12-07T11:43:35Z",
    "updated_at": "2023-12-07T14:34:44Z",
    "author_association": "CONTRIBUTOR",
    "body": "@karalabe Thanks a lot for taking another look! 🙏\r\n\r\nOut of the three options, I like the second one the least (implicity calling `Finalize`). :) It feels like the third option (retain more dirty tracking, possibly under some option) may be the most flexible option (from a user's perspective), but I can also understand if there are good reasons to prefer the first option.\r\n\r\nSome time ago, I also ran into another issue (https://github.com/ethereum/go-ethereum/issues/28176) that may be related. Do you know if the other issue would also be fixed by the change you're considering?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1845196053/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
