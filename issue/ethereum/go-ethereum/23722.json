{
  "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/23722",
  "repository_url": "https://api.github.com/repos/ethereum/go-ethereum",
  "labels_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/23722/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/23722/comments",
  "events_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/23722/events",
  "html_url": "https://github.com/ethereum/go-ethereum/issues/23722",
  "id": 1024421701,
  "node_id": "I_kwDOAOvK9849D29F",
  "number": 23722,
  "title": "Ability to backfill state information",
  "user": {
    "login": "thomasj02",
    "id": 2532431,
    "node_id": "MDQ6VXNlcjI1MzI0MzE=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2532431?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/thomasj02",
    "html_url": "https://github.com/thomasj02",
    "followers_url": "https://api.github.com/users/thomasj02/followers",
    "following_url": "https://api.github.com/users/thomasj02/following{/other_user}",
    "gists_url": "https://api.github.com/users/thomasj02/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/thomasj02/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/thomasj02/subscriptions",
    "organizations_url": "https://api.github.com/users/thomasj02/orgs",
    "repos_url": "https://api.github.com/users/thomasj02/repos",
    "events_url": "https://api.github.com/users/thomasj02/events{/privacy}",
    "received_events_url": "https://api.github.com/users/thomasj02/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 72233652,
      "node_id": "MDU6TGFiZWw3MjIzMzY1Mg==",
      "url": "https://api.github.com/repos/ethereum/go-ethereum/labels/type:feature",
      "name": "type:feature",
      "color": "84b6eb",
      "default": false,
      "description": null
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 3,
  "created_at": "2021-10-12T21:19:46Z",
  "updated_at": "2021-10-25T16:34:05Z",
  "closed_at": "2021-10-25T16:34:05Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "Users who do fast sync or snap sync, even when pruning is disabled, are only able to access state information after the pivot block. There's no way for a user to access information even one block before the pivot without syncing an archive node.\r\n\r\nI'd like to propose a feature to backfill state information. From a UI perspective, the user can specify a block number N, and all state information for blocks N to the latest block are downloaded.\r\n\r\nI'm a new geth developer, but I would be willing to help with implementing this feature if someone can provide guidance.",
  "closed_by": {
    "login": "holiman",
    "id": 142290,
    "node_id": "MDQ6VXNlcjE0MjI5MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/142290?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/holiman",
    "html_url": "https://github.com/holiman",
    "followers_url": "https://api.github.com/users/holiman/followers",
    "following_url": "https://api.github.com/users/holiman/following{/other_user}",
    "gists_url": "https://api.github.com/users/holiman/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/holiman/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/holiman/subscriptions",
    "organizations_url": "https://api.github.com/users/holiman/orgs",
    "repos_url": "https://api.github.com/users/holiman/repos",
    "events_url": "https://api.github.com/users/holiman/events{/privacy}",
    "received_events_url": "https://api.github.com/users/holiman/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/23722/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/23722/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/942098972",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/23722#issuecomment-942098972",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/23722",
    "id": 942098972,
    "node_id": "IC_kwDOAOvK9844J0oc",
    "user": {
      "login": "s1na",
      "id": 1591639,
      "node_id": "MDQ6VXNlcjE1OTE2Mzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1591639?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/s1na",
      "html_url": "https://github.com/s1na",
      "followers_url": "https://api.github.com/users/s1na/followers",
      "following_url": "https://api.github.com/users/s1na/following{/other_user}",
      "gists_url": "https://api.github.com/users/s1na/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/s1na/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/s1na/subscriptions",
      "organizations_url": "https://api.github.com/users/s1na/orgs",
      "repos_url": "https://api.github.com/users/s1na/repos",
      "events_url": "https://api.github.com/users/s1na/events{/privacy}",
      "received_events_url": "https://api.github.com/users/s1na/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-13T09:16:36Z",
    "updated_at": "2021-10-13T09:16:36Z",
    "author_association": "MEMBER",
    "body": "The issue is we can't download state entries for blocks before the pivot block. That's because other nodes on the network prune their state and won't serve us those entries. That said even with a full (non-archive) sync geth maintains \"state checkpoints\" every once in a while so that you can re-generate the state for block N by re-executing blocks from the last checkpoint.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/942098972/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/942483818",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/23722#issuecomment-942483818",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/23722",
    "id": 942483818,
    "node_id": "IC_kwDOAOvK9844LSlq",
    "user": {
      "login": "thomasj02",
      "id": 2532431,
      "node_id": "MDQ6VXNlcjI1MzI0MzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2532431?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/thomasj02",
      "html_url": "https://github.com/thomasj02",
      "followers_url": "https://api.github.com/users/thomasj02/followers",
      "following_url": "https://api.github.com/users/thomasj02/following{/other_user}",
      "gists_url": "https://api.github.com/users/thomasj02/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/thomasj02/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/thomasj02/subscriptions",
      "organizations_url": "https://api.github.com/users/thomasj02/orgs",
      "repos_url": "https://api.github.com/users/thomasj02/repos",
      "events_url": "https://api.github.com/users/thomasj02/events{/privacy}",
      "received_events_url": "https://api.github.com/users/thomasj02/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-13T16:34:11Z",
    "updated_at": "2021-10-13T16:34:11Z",
    "author_association": "NONE",
    "body": "Thanks, that makes sense. I assume that archive nodes or nodes that are keeping significant history are rare enough that it's just not practical?\r\n\r\nRe-generating the state seems totally reasonable if a non-full user can get the state checkpoint data. Are the state checkpoints you're referring to the same thing as snapshots?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/942483818/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/943119631",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/23722#issuecomment-943119631",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/23722",
    "id": 943119631,
    "node_id": "IC_kwDOAOvK9844Nt0P",
    "user": {
      "login": "s1na",
      "id": 1591639,
      "node_id": "MDQ6VXNlcjE1OTE2Mzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1591639?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/s1na",
      "html_url": "https://github.com/s1na",
      "followers_url": "https://api.github.com/users/s1na/followers",
      "following_url": "https://api.github.com/users/s1na/following{/other_user}",
      "gists_url": "https://api.github.com/users/s1na/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/s1na/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/s1na/subscriptions",
      "organizations_url": "https://api.github.com/users/s1na/orgs",
      "repos_url": "https://api.github.com/users/s1na/repos",
      "events_url": "https://api.github.com/users/s1na/events{/privacy}",
      "received_events_url": "https://api.github.com/users/s1na/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-14T08:12:15Z",
    "updated_at": "2021-10-14T08:12:15Z",
    "author_association": "MEMBER",
    "body": "> Thanks, that makes sense. I assume that archive nodes or nodes that are keeping significant history are rare enough that it's just not practical?\r\n\r\nYep pretty much infeasible AFAIK.\r\n\r\nNo snapshots are an accelerating data structure where you store only the leaves of the state trie and read them via single disk access. These checkpoints are blocks for which you have the full state trie and exactly which blocks you have is different based on a couple of factors and they're not the same between users (you can see your nodes checkpoints by `debug_getAccessibleState`, see https://github.com/ethereum/go-ethereum/pull/23646). So you can't really expect multiple nodes to be able to feed you state for the same old block.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/943119631/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
