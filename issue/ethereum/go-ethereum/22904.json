{
  "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/22904",
  "repository_url": "https://api.github.com/repos/ethereum/go-ethereum",
  "labels_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/22904/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/22904/comments",
  "events_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/22904/events",
  "html_url": "https://github.com/ethereum/go-ethereum/issues/22904",
  "id": 895024703,
  "node_id": "MDU6SXNzdWU4OTUwMjQ3MDM=",
  "number": 22904,
  "title": "Mainnet Geth crashes in panic `Refund counter below zero (gas: 15000 > refund: 0)`",
  "user": {
    "login": "AyushyaChitransh",
    "id": 13914634,
    "node_id": "MDQ6VXNlcjEzOTE0NjM0",
    "avatar_url": "https://avatars.githubusercontent.com/u/13914634?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/AyushyaChitransh",
    "html_url": "https://github.com/AyushyaChitransh",
    "followers_url": "https://api.github.com/users/AyushyaChitransh/followers",
    "following_url": "https://api.github.com/users/AyushyaChitransh/following{/other_user}",
    "gists_url": "https://api.github.com/users/AyushyaChitransh/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/AyushyaChitransh/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/AyushyaChitransh/subscriptions",
    "organizations_url": "https://api.github.com/users/AyushyaChitransh/orgs",
    "repos_url": "https://api.github.com/users/AyushyaChitransh/repos",
    "events_url": "https://api.github.com/users/AyushyaChitransh/events{/privacy}",
    "received_events_url": "https://api.github.com/users/AyushyaChitransh/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 72233650,
      "node_id": "MDU6TGFiZWw3MjIzMzY1MA==",
      "url": "https://api.github.com/repos/ethereum/go-ethereum/labels/type:bug",
      "name": "type:bug",
      "color": "FF5E5E",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 7,
  "created_at": "2021-05-19T06:03:09Z",
  "updated_at": "2022-06-12T14:49:47Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "#### System information\r\n\r\n```\r\nGeth\r\nVersion: 1.10.3-stable\r\nGit Commit: 991384a7f6719e1125ca0be7fb27d0c4d1c5d2d3\r\nArchitecture: amd64\r\nGo Version: go1.15\r\nOperating System: linux\r\n```\r\n\r\n#### Expected behaviour\r\nStable and continuous sync without crash.\r\n\r\n#### Actual behaviour\r\nSystem crashes in a day or two.\r\n\r\n#### Steps to reproduce the behaviour\r\nThis has been second or third occurrence and it is causing disruption in stable environment.\r\n\r\n#### Logs\r\n\r\nOccurrence 1: \r\n```\r\nINFO [05-15|18:58:25.181] Imported new chain segment               blocks=1  txs=628  mgas=14.972  elapsed=1.580s      mgasps=9.472   number=12,440,771   hash=e6737b..2a24a1 dirty=0.00B\r\n2021/05/15 18:58:27 http: Accept error: accept tcp [::]:8545: accept4: too many open files; retrying in 5ms\r\n2021/05/15 18:58:28 http: Accept error: accept tcp [::]:8545: accept4: too many open files; retrying in 5ms\r\npanic: Refund counter below zero (gas: 15000 > refund: 0)\r\n\r\ngoroutine 870136696 [running]:\r\ngithub.com/ethereum/go-ethereum/core/state.(*StateDB).SubRefund(0xc0d359d6c0, 0x3a98)\r\n        github.com/ethereum/go-ethereum/core/state/statedb.go:234 +0x14d\r\ngithub.com/ethereum/go-ethereum/core/vm.gasSStoreEIP2929(0xc0ac912a80, 0xc0f56fe300, 0xc081f47c20, 0xc0c5286720, 0x0, 0x0, 0x0, 0x0)\r\n        github.com/ethereum/go-ethereum/core/vm/operations_acl.go:90 +0x7cc\r\ngithub.com/ethereum/go-ethereum/core/vm.(*EVMInterpreter).Run(0xc0ce137200, 0xc0f56fe300, 0xc0ebe01db0, 0x44, 0x44, 0xc036f4be00, 0x0, 0x0, 0x0, 0x0, ...)\r\n        github.com/ethereum/go-ethereum/core/vm/interpreter.go:267 +0x8a7\r\ngithub.com/ethereum/go-ethereum/core/vm.run(0xc0ac912a80, 0xc0f56fe300, 0xc0ebe01db0, 0x44, 0x44, 0xaf02e18f4f319900, 0x0, 0x0, 0x0, 0x0, ...)\r\n        github.com/ethereum/go-ethereum/core/vm/evm.go:73 +0x224\r\ngithub.com/ethereum/go-ethereum/core/vm.(*EVM).Call(0xc0ac912a80, 0x1597d60, 0xc036f4b320, 0x3123c4e2e28b3ccf, 0x301b9b0e21ef80da, 0xc06ad3037c, 0xc0ebe01db0, 0x44, 0x44, 0x1481d, ...)\r\n        github.com/ethereum/go-ethereum/core/vm/evm.go:258 +0x697\r\ngithub.com/ethereum/go-ethereum/core.(*StateTransition).TransitionDb(0xc11e9797a0, 0x15c4c00, 0xc0b3f23700, 0xc0d2ea9f48)\r\n        github.com/ethereum/go-ethereum/core/state_transition.go:274 +0x6e6\r\ngithub.com/ethereum/go-ethereum/core.ApplyMessage(0xc0ac912a80, 0x15c4c00, 0xc0b3f23700, 0xc0d2ea9f48, 0xbf3f0ab1, 0xc0c546fd00, 0x98b5d83b32511da6)\r\n        github.com/ethereum/go-ethereum/core/state_transition.go:171 +0x57\r\ngithub.com/ethereum/go-ethereum/core.applyTransaction(0xc036f4b160, 0x812f0c5672d9d8a1, 0xb0f008b51d87af44, 0xbf3f0ab1, 0xfbdc1, 0xc0c546fcc0, 0x19cc1, 0xc0c546fc80, 0xc0ebe01db0, 0x44, ...)\r\n        github.com/ethereum/go-ethereum/core/state_processor.go:98 +0x1a5\r\ngithub.com/ethereum/go-ethereum/core.(*StateProcessor).Process(0xc031112440, 0xc0985ec990, 0xc0d359d6c0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, ...)\r\n        github.com/ethereum/go-ethereum/core/state_processor.go:79 +0x625\r\ngithub.com/ethereum/go-ethereum/core.(*BlockChain).insertChain(0xc0407ce000, 0xc0a94f1670, 0x1, 0x1, 0x3cf6f9dae89ce801, 0x0, 0x0, 0x0)\r\n        github.com/ethereum/go-ethereum/core/blockchain.go:1863 +0x1174\r\ngithub.com/ethereum/go-ethereum/core.(*BlockChain).InsertChain(0xc0407ce000, 0xc0a94f1670, 0x1, 0x1, 0x0, 0x0, 0x0)\r\n        github.com/ethereum/go-ethereum/core/blockchain.go:1634 +0xcab\r\ngithub.com/ethereum/go-ethereum/eth.newHandler.func3(0xc0a94f1670, 0x1, 0x1, 0x2100201, 0xc0dbab7b90, 0xc0c56144e8)\r\n        github.com/ethereum/go-ethereum/eth/handler.go:216 +0x745\r\ngithub.com/ethereum/go-ethereum/eth/fetcher.(*BlockFetcher).importBlocks.func1(0xc00025d0a0, 0x6099800f30697a18, 0x25c8b3f5b4747043, 0x96d75761ef25a0a0, 0x43880041d4a6c746, 0xc0985ec990, 0xc08c0bc940, 0x40)\r\n        github.com/ethereum/go-ethereum/eth/fetcher/block_fetcher.go:817 +0x5bd\r\ncreated by github.com/ethereum/go-ethereum/eth/fetcher.(*BlockFetcher).importBlocks\r\n        github.com/ethereum/go-ethereum/eth/fetcher/block_fetcher.go:791 +0x2be\r\n```\r\n\r\nOccurrence 2:\r\n````\r\n2021/05/19 03:41:16 http: Accept error: accept tcp [::]:8545: accept4: too many open files; retrying in 10ms\r\npanic: Refund counter below zero (gas: 15000 > refund: 0)\r\n\r\ngoroutine 328297069 [running]:\r\ngithub.com/ethereum/go-ethereum/core/state.(*StateDB).SubRefund(0xc04c454d00, 0x3a98)\r\n        github.com/ethereum/go-ethereum/core/state/statedb.go:234 +0x14d\r\ngithub.com/ethereum/go-ethereum/core/vm.gasSStoreEIP2929(0xc025190000, 0xc045de0900, 0xc11eca7a40, 0xc099e86180, 0x0, 0x0, 0x0, 0x0)\r\n        github.com/ethereum/go-ethereum/core/vm/operations_acl.go:90 +0x7cc\r\ngithub.com/ethereum/go-ethereum/core/vm.(*EVMInterpreter).Run(0xc0cffb6900, 0xc045de0900, 0xc085b7eaf0, 0x44, 0x44, 0xc0eeb8b400, 0x0, 0x0, 0x0, 0x0, ...)\r\n        github.com/ethereum/go-ethereum/core/vm/interpreter.go:267 +0x8a7\r\ngithub.com/ethereum/go-ethereum/core/vm.run(0xc025190000, 0xc045de0900, 0xc085b7eaf0, 0x44, 0x44, 0x8f1f0277db1ae400, 0x0, 0x0, 0x0, 0x0, ...)\r\n        github.com/ethereum/go-ethereum/core/vm/evm.go:73 +0x224\r\ngithub.com/ethereum/go-ethereum/core/vm.(*EVM).Call(0xc025190000, 0x1597d60, 0xc0eeb8a7e0, 0x9a496519a7a57234, 0xd8a8bb547a9981cd, 0xc03de5c652, 0xc085b7eaf0, 0x44, 0x44, 0x228d3, ...)\r\n        github.com/ethereum/go-ethereum/core/vm/evm.go:258 +0x697\r\ngithub.com/ethereum/go-ethereum/core.(*StateTransition).TransitionDb(0xc0f06a4c40, 0x15c4c00, 0xc1041e5b80, 0xc0fbaa4b98)\r\n        github.com/ethereum/go-ethereum/core/state_transition.go:274 +0x6e6\r\ngithub.com/ethereum/go-ethereum/core.ApplyMessage(0xc025190000, 0x15c4c00, 0xc1041e5b80, 0xc0fbaa4b98, 0xcde24d0e, 0xc03653f680, 0x913a18ed70b8ed2f)\r\n        github.com/ethereum/go-ethereum/core/state_transition.go:171 +0x57\r\ngithub.com/ethereum/go-ethereum/core.applyTransaction(0xc0eeb8a5e0, 0xa3418b33247e80c7, 0x9d2b0f929294844d, 0xcde24d0e, 0x8034, 0xc03653f640, 0x27d6b, 0xc03653f600, 0xc085b7eaf0, 0x44, ...)\r\n        github.com/ethereum/go-ethereum/core/state_processor.go:98 +0x1a5\r\ngithub.com/ethereum/go-ethereum/core.(*StateProcessor).Process(0xc044f5c620, 0xc0bc1a5950, 0xc04c454d00, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, ...)\r\n        github.com/ethereum/go-ethereum/core/state_processor.go:79 +0x625\r\ngithub.com/ethereum/go-ethereum/core.(*BlockChain).insertChain(0xc00011f200, 0xc045dddd38, 0x1, 0x1, 0x7bdc2569db652c01, 0x0, 0x0, 0x0)\r\n        github.com/ethereum/go-ethereum/core/blockchain.go:1863 +0x1174\r\ngithub.com/ethereum/go-ethereum/core.(*BlockChain).InsertChain(0xc00011f200, 0xc045dddd38, 0x1, 0x1, 0x0, 0x0, 0x0)\r\n        github.com/ethereum/go-ethereum/core/blockchain.go:1634 +0xcab\r\ngithub.com/ethereum/go-ethereum/eth.newHandler.func3(0xc045dddd38, 0x1, 0x1, 0x2100201, 0xc0cc0b1b00, 0xc122b184e8)\r\n        github.com/ethereum/go-ethereum/eth/handler.go:216 +0x745\r\ngithub.com/ethereum/go-ethereum/eth/fetcher.(*BlockFetcher).importBlocks.func1(0xc0459fe700, 0xef91d9fefa162b7, 0x4f7ba7b4c575d7f, 0x43afbbcca2a710a8, 0xb6a804949904d6c9, 0xc0bc1a5950, 0xc0aae6a340, 0x40)\r\n        github.com/ethereum/go-ethereum/eth/fetcher/block_fetcher.go:817 +0x5bd\r\ncreated by github.com/ethereum/go-ethereum/eth/fetcher.(*BlockFetcher).importBlocks\r\n        github.com/ethereum/go-ethereum/eth/fetcher/block_fetcher.go:791 +0x2be\r\n````\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/22904/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/22904/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/843834174",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/22904#issuecomment-843834174",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/22904",
    "id": 843834174,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0MzgzNDE3NA==",
    "user": {
      "login": "karalabe",
      "id": 129561,
      "node_id": "MDQ6VXNlcjEyOTU2MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/129561?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/karalabe",
      "html_url": "https://github.com/karalabe",
      "followers_url": "https://api.github.com/users/karalabe/followers",
      "following_url": "https://api.github.com/users/karalabe/following{/other_user}",
      "gists_url": "https://api.github.com/users/karalabe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/karalabe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/karalabe/subscriptions",
      "organizations_url": "https://api.github.com/users/karalabe/orgs",
      "repos_url": "https://api.github.com/users/karalabe/repos",
      "events_url": "https://api.github.com/users/karalabe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/karalabe/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-19T07:39:35Z",
    "updated_at": "2021-05-19T07:39:35Z",
    "author_association": "MEMBER",
    "body": "You logs contain `2021/05/15 18:58:28 http: Accept error: accept tcp [::]:8545: accept4: too many open files; retrying in 5ms`, which means the OS is refusing to give file descriptors for Geth. That's a problem because it can happen that the database runs out and starts returning errors and missing data whilst the data is there nonetheless.\r\n\r\nAre you hitting your node with thousands of HTTP requests, all from new connections? You should really not be doing that. You should also check the `ulimit` you allow for Geth, if it's too low, you can starve it.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/843834174/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/847216547",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/22904#issuecomment-847216547",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/22904",
    "id": 847216547,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0NzIxNjU0Nw==",
    "user": {
      "login": "AyushyaChitransh",
      "id": 13914634,
      "node_id": "MDQ6VXNlcjEzOTE0NjM0",
      "avatar_url": "https://avatars.githubusercontent.com/u/13914634?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AyushyaChitransh",
      "html_url": "https://github.com/AyushyaChitransh",
      "followers_url": "https://api.github.com/users/AyushyaChitransh/followers",
      "following_url": "https://api.github.com/users/AyushyaChitransh/following{/other_user}",
      "gists_url": "https://api.github.com/users/AyushyaChitransh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AyushyaChitransh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AyushyaChitransh/subscriptions",
      "organizations_url": "https://api.github.com/users/AyushyaChitransh/orgs",
      "repos_url": "https://api.github.com/users/AyushyaChitransh/repos",
      "events_url": "https://api.github.com/users/AyushyaChitransh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AyushyaChitransh/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-24T17:37:43Z",
    "updated_at": "2021-05-24T17:37:43Z",
    "author_association": "CONTRIBUTOR",
    "body": "Yes, I am hitting with too many requests on geth. And this I have been doing for past two years, and have never faced any issues. This issue has started causing problems in this release, previous releases were able to handle connections more efficiently.\r\n\r\nThe new behavior of RPC makes me think that something incorrect or faulty might have seeped into go-ethereum in these new releases. Because previous versions of geth were more efficient in handling connections.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/847216547/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/848540602",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/22904#issuecomment-848540602",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/22904",
    "id": 848540602,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0ODU0MDYwMg==",
    "user": {
      "login": "karalabe",
      "id": 129561,
      "node_id": "MDQ6VXNlcjEyOTU2MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/129561?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/karalabe",
      "html_url": "https://github.com/karalabe",
      "followers_url": "https://api.github.com/users/karalabe/followers",
      "following_url": "https://api.github.com/users/karalabe/following{/other_user}",
      "gists_url": "https://api.github.com/users/karalabe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/karalabe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/karalabe/subscriptions",
      "organizations_url": "https://api.github.com/users/karalabe/orgs",
      "repos_url": "https://api.github.com/users/karalabe/repos",
      "events_url": "https://api.github.com/users/karalabe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/karalabe/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-26T07:35:23Z",
    "updated_at": "2021-05-26T07:35:23Z",
    "author_association": "MEMBER",
    "body": "If you see \"too many open files\" errors, it's already bad, very bad. Your OS is denying Geth access to resources it needs. Based on those messages, you are making way too many concurrent HTTP requests. After an HTTP connection (or TCP to be more precise) is closed, TCP connections go into a 1 or 2 minute WAIT mode (done by the OS, nothing to do with Geth), where it's still counted against Geth's quota, but useless otherwise. \r\n\r\nA simple fix is to reuse connections and don't create a new one for every request. I'd assume that would be the behavior of almost all HTTP client libraries, to please check what you're using and make sure to reuse your client objects instead of creating a new one.\r\n\r\nYou should also check the `ulimit` your OS set and see if it too low compared to your use case. If you are going to hit Geth with thousands of requests, you'll need a proportional number of file descriptor allowance from the OS.\r\n\r\nIn order to say it's Geth's fault, you'll need to provide us with a lot more infos. One is a startup log which prints the number of file descriptors you get: `Allocated cache and file handles         database=/xxx/geth/chaindata cache=foo handles=bar`. The second is the frequency of HTTP requests you make. The third is if you have any outer process limiting Geth (docker, cgroups, etc), and what those limits are.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/848540602/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/849533111",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/22904#issuecomment-849533111",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/22904",
    "id": 849533111,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0OTUzMzExMQ==",
    "user": {
      "login": "AyushyaChitransh",
      "id": 13914634,
      "node_id": "MDQ6VXNlcjEzOTE0NjM0",
      "avatar_url": "https://avatars.githubusercontent.com/u/13914634?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AyushyaChitransh",
      "html_url": "https://github.com/AyushyaChitransh",
      "followers_url": "https://api.github.com/users/AyushyaChitransh/followers",
      "following_url": "https://api.github.com/users/AyushyaChitransh/following{/other_user}",
      "gists_url": "https://api.github.com/users/AyushyaChitransh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AyushyaChitransh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AyushyaChitransh/subscriptions",
      "organizations_url": "https://api.github.com/users/AyushyaChitransh/orgs",
      "repos_url": "https://api.github.com/users/AyushyaChitransh/repos",
      "events_url": "https://api.github.com/users/AyushyaChitransh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AyushyaChitransh/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-27T10:49:26Z",
    "updated_at": "2021-05-27T10:49:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "Here are the startup logs\r\n```\r\nINFO [05-27|06:22:08.479] Enabling recording of key preimages since archive mode is used\r\nINFO [05-27|06:22:08.479] Set global gas cap                       cap=25,000,000\r\nINFO [05-27|06:22:08.479] Allocated trie memory caches             clean=2.00GiB dirty=0.00B\r\nINFO [05-27|06:22:08.480] Allocated cache and file handles         database=/data/mainnetdata/geth/chaindata cache=4.00GiB handles=2048\r\nINFO [05-27|06:23:03.871] Opened ancient database                  database=/data/mainnetdata/geth/chaindata/ancient readonly=false\r\nINFO [05-27|06:23:03.890] Initialised chain configuration          config=\"{ChainID: 1 Homestead: 1150000 DAO: 1920000 DAOSupport: true EIP150: 2463000 EIP155: 2675000 EIP158: 2675000 Byzantium: 4370000 Constantinople: 7280000 Petersburg: 7280000 Istanbul: 9069000, Muir Glacier: 9200000, Berlin: 12244000, YOLO v3: <nil>, Engine: ethash}\"\r\nINFO [05-27|06:23:42.112] Disk storage enabled for ethash caches   dir=/data/mainnetdata/geth/ethash count=3\r\nINFO [05-27|06:23:42.112] Disk storage enabled for ethash DAGs     dir=/root/.ethash                 count=2\r\nINFO [05-27|06:23:42.122] Initialising Ethereum protocol           network=1 dbversion=8\r\nINFO [05-27|06:23:44.241] Loaded most recent local header          number=12,513,979 hash=d35047..9d6336 td=25,321,529,938,120,083,530,539 age=2h52m56s\r\nINFO [05-27|06:23:44.241] Loaded most recent local full block      number=12,513,979 hash=d35047..9d6336 td=25,321,529,938,120,083,530,539 age=2h52m56s\r\nINFO [05-27|06:23:44.241] Loaded most recent local fast block      number=12,513,979 hash=d35047..9d6336 td=25,321,529,938,120,083,530,539 age=2h52m56s\r\nINFO [05-27|06:23:44.264] Loaded local transaction journal         transactions=0 dropped=0\r\nINFO [05-27|06:23:44.264] Regenerated local transaction journal    transactions=0 accounts=0\r\nWARN [05-27|06:23:44.272] Old unclean shutdowns found              count=5\r\nWARN [05-27|06:23:44.272] Unclean shutdown detected                booted=2021-05-17T02:41:42+0000 age=1w3d3h\r\nWARN [05-27|06:23:44.272] Unclean shutdown detected                booted=2021-05-19T05:56:19+0000 age=1w1d27m\r\nWARN [05-27|06:23:44.272] Unclean shutdown detected                booted=2021-05-23T05:42:22+0000 age=4d41m22s\r\nWARN [05-27|06:23:44.272] Unclean shutdown detected                booted=2021-05-24T02:19:49+0000 age=3d4h3m\r\nWARN [05-27|06:23:44.272] Unclean shutdown detected                booted=2021-05-24T17:29:13+0000 age=2d12h54m\r\nWARN [05-27|06:23:44.272] Unclean shutdown detected                booted=2021-05-25T08:26:59+0000 age=1d21h56m\r\nWARN [05-27|06:23:44.273] Unclean shutdown detected                booted=2021-05-26T00:02:02+0000 age=1d6h21m\r\nWARN [05-27|06:23:44.273] Unclean shutdown detected                booted=2021-05-26T13:13:59+0000 age=17h9m45s\r\nWARN [05-27|06:23:44.273] Unclean shutdown detected                booted=2021-05-26T13:47:11+0000 age=16h36m33s\r\nWARN [05-27|06:23:44.273] Unclean shutdown detected                booted=2021-05-26T15:37:09+0000 age=14h46m35s\r\nWARN [05-27|06:23:44.273] Unclean shutdown detected                booted=2021-05-26T20:12:11+0000 age=10h11m33s\r\nINFO [05-27|06:23:44.278] Starting peer-to-peer node               instance=Geth/v1.10.3-stable-991384a7/linux-amd64/go1.15\r\n```\r\n\r\nNumber of requests we make to geth is around 280-300 requests per second. \r\n\r\nThe system does not host any docker process, nor any cgroups. \r\n\r\nGeth had been operational at this load for pas many years and even at higher capacity probably. The slowness we detected was when we used to throttle up the requests and in response we used to get response at a lower rate due to which we were able to figure out that geth is reaching its limits. And even in that case, geth never crashed.\r\n\r\nMy main concern is to avoid geth getting crashed. So that even if geth is receiving too many requests, it would serve lessr of them. But what happens now is that geth crashes and we have to resync from the time it got crashed. \r\n\r\nWe miss the stable nature of running geth even in adverse conditions.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/849533111/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/849807923",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/22904#issuecomment-849807923",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/22904",
    "id": 849807923,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0OTgwNzkyMw==",
    "user": {
      "login": "karalabe",
      "id": 129561,
      "node_id": "MDQ6VXNlcjEyOTU2MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/129561?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/karalabe",
      "html_url": "https://github.com/karalabe",
      "followers_url": "https://api.github.com/users/karalabe/followers",
      "following_url": "https://api.github.com/users/karalabe/following{/other_user}",
      "gists_url": "https://api.github.com/users/karalabe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/karalabe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/karalabe/subscriptions",
      "organizations_url": "https://api.github.com/users/karalabe/orgs",
      "repos_url": "https://api.github.com/users/karalabe/repos",
      "events_url": "https://api.github.com/users/karalabe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/karalabe/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-27T17:24:43Z",
    "updated_at": "2021-05-27T17:24:43Z",
    "author_association": "MEMBER",
    "body": "Based on your logs, the database got 2K descriptors max (`handles=2048`). We allocate half to the db, so it means Geth in total got an allowance of 4K from the OS. That's not enough if you are hitting it with 300 requests per second. Please raise your `ulimit` to something like 128000. There's really no reason to keep it low, that's only meant for systems where you share resources with many different users and want to enforce some fairness. Ubuntu for example sets the default ulimit to 512000.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/849807923/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/858436767",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/22904#issuecomment-858436767",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/22904",
    "id": 858436767,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg1ODQzNjc2Nw==",
    "user": {
      "login": "holiman",
      "id": 142290,
      "node_id": "MDQ6VXNlcjE0MjI5MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/142290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/holiman",
      "html_url": "https://github.com/holiman",
      "followers_url": "https://api.github.com/users/holiman/followers",
      "following_url": "https://api.github.com/users/holiman/following{/other_user}",
      "gists_url": "https://api.github.com/users/holiman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/holiman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/holiman/subscriptions",
      "organizations_url": "https://api.github.com/users/holiman/orgs",
      "repos_url": "https://api.github.com/users/holiman/repos",
      "events_url": "https://api.github.com/users/holiman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/holiman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-06-10T08:46:51Z",
    "updated_at": "2021-06-10T08:46:51Z",
    "author_association": "MEMBER",
    "body": "When reading state data during execution fails, we store the error as `s.dbErr` in a stateobject. This error is not read until hte `Commit` phase, where we bubble this error out to the caller.\r\n\r\nThis is a bit problematic, because, before we get to the Commit phase, several thing can happen: \r\n- In the case of this PR, we hit  a crash because the (empty) data causes an intrinsic to fail (refundcounter below zero), which causes a panic. \r\n- We could also hit a bad block error, because the resulting stateroot is wrong. \r\n\r\nFor both of these cases, it would be better if we could detect the error earlier in the pipelne, avoid crashing, and for the case of bad blocks: when we show that there was a bad block, we can also show that \"yes, we also had an IO error reading data from the db\", which would help us analyze these types of errors. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/858436767/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/858437453",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/22904#issuecomment-858437453",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/22904",
    "id": 858437453,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg1ODQzNzQ1Mw==",
    "user": {
      "login": "holiman",
      "id": 142290,
      "node_id": "MDQ6VXNlcjE0MjI5MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/142290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/holiman",
      "html_url": "https://github.com/holiman",
      "followers_url": "https://api.github.com/users/holiman/followers",
      "following_url": "https://api.github.com/users/holiman/following{/other_user}",
      "gists_url": "https://api.github.com/users/holiman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/holiman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/holiman/subscriptions",
      "organizations_url": "https://api.github.com/users/holiman/orgs",
      "repos_url": "https://api.github.com/users/holiman/repos",
      "events_url": "https://api.github.com/users/holiman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/holiman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-06-10T08:47:43Z",
    "updated_at": "2021-06-10T08:47:43Z",
    "author_association": "MEMBER",
    "body": "A separate idea is that we could try to detect these errors in leveldb better, and make the RPC throttle down the number of connections to make more file descriptors resources  availalbe to leveldb.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/858437453/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
