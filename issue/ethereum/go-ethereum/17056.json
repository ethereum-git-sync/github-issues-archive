{
  "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/17056",
  "repository_url": "https://api.github.com/repos/ethereum/go-ethereum",
  "labels_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/17056/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/17056/comments",
  "events_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/17056/events",
  "html_url": "https://github.com/ethereum/go-ethereum/issues/17056",
  "id": 334859117,
  "node_id": "MDU6SXNzdWUzMzQ4NTkxMTc=",
  "number": 17056,
  "title": "Add signer programatically results in \"retrieved hash chain is invalid\"",
  "user": {
    "login": "REPTILEHAUS",
    "id": 4680621,
    "node_id": "MDQ6VXNlcjQ2ODA2MjE=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4680621?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/REPTILEHAUS",
    "html_url": "https://github.com/REPTILEHAUS",
    "followers_url": "https://api.github.com/users/REPTILEHAUS/followers",
    "following_url": "https://api.github.com/users/REPTILEHAUS/following{/other_user}",
    "gists_url": "https://api.github.com/users/REPTILEHAUS/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/REPTILEHAUS/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/REPTILEHAUS/subscriptions",
    "organizations_url": "https://api.github.com/users/REPTILEHAUS/orgs",
    "repos_url": "https://api.github.com/users/REPTILEHAUS/repos",
    "events_url": "https://api.github.com/users/REPTILEHAUS/events{/privacy}",
    "received_events_url": "https://api.github.com/users/REPTILEHAUS/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 856638432,
      "node_id": "MDU6TGFiZWw4NTY2Mzg0MzI=",
      "url": "https://api.github.com/repos/ethereum/go-ethereum/labels/status:inactive",
      "name": "status:inactive",
      "color": "ffffff",
      "default": false,
      "description": null
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 5,
  "created_at": "2018-06-22T12:23:24Z",
  "updated_at": "2019-10-13T20:33:24Z",
  "closed_at": "2019-10-13T20:33:24Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "I'm trying to extend clique and to add a signer programatically, my initial PoC looks something like this which i have placed into the ```snapshot.go``` file in clique, when i do this, compile and restard geth i get errors like this\r\n\r\n```\r\nERROR[06-22|14:21:01.550788] \r\n########## BAD BLOCK #########\r\nChain config: {ChainID: 2018 Homestead: 1 DAO: <nil> DAOSupport: false EIP150: 2 EIP155: 3 EIP158: 3 Byzantium: 4 Constantinople: <nil> Engine: clique}\r\n\r\nNumber: 33016\r\nHash: 0x8a5fe26a802a4b47e61f9209135531e82b1209bc7a8ccc70d4636fc8ad9e8e69\r\n\r\nError: invalid difficulty\r\n##############################\r\n \r\nWARN [06-22|14:21:01.550861] Synchronisation failed, dropping peer    peer=70fbf40c8e416af6 err=\"retrieved hash chain is invalid\"\r\n```\r\nhere is my PoC\r\n\r\n```\r\n\t\tstringAddress := \"62ecc061160c145705388ab49984e0728beaae4c\"\r\n\t\taddress, err := hex.DecodeString(stringAddress)\r\n\t\tbyteArrayAddress := common.BytesToAddress(address[:])\r\n\r\n\t\tfor i, exists := range s.signers() {\r\n\r\n\t\t\tif hex.EncodeToString(exists[:]) != stringAddress {\r\n\t\t\t\tsnap.Signers[byteArrayAddress] = struct{}{}\r\n\t\t\t\tif snap.cast(byteArrayAddress, true) {\r\n\t\t\t\t\tsnap.Votes = append(snap.Votes, &Vote{\r\n\t\t\t\t\t\tSigner:    signer,\r\n\t\t\t\t\t\tBlock:     number,\r\n\t\t\t\t\t\tAddress:   byteArrayAddress,\r\n\t\t\t\t\t\tAuthorize: true,\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tfmt.Println(i, \" signers in action \", hex.EncodeToString(exists[:]))\r\n\t\t}\r\n```\r\n\r\nI have commented out the voting logic in this function so that voting can be solely controlled by me, i.e if this address is not in the current signers then append it to the signers array and give it full authorization to sign. Anyone able to point me in the right direction with this or validate that I am in the right place to implement such functionality.",
  "closed_by": {
    "login": "stale[bot]",
    "id": 26384082,
    "node_id": "MDM6Qm90MjYzODQwODI=",
    "avatar_url": "https://avatars.githubusercontent.com/in/1724?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/stale%5Bbot%5D",
    "html_url": "https://github.com/apps/stale",
    "followers_url": "https://api.github.com/users/stale%5Bbot%5D/followers",
    "following_url": "https://api.github.com/users/stale%5Bbot%5D/following{/other_user}",
    "gists_url": "https://api.github.com/users/stale%5Bbot%5D/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/stale%5Bbot%5D/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/stale%5Bbot%5D/subscriptions",
    "organizations_url": "https://api.github.com/users/stale%5Bbot%5D/orgs",
    "repos_url": "https://api.github.com/users/stale%5Bbot%5D/repos",
    "events_url": "https://api.github.com/users/stale%5Bbot%5D/events{/privacy}",
    "received_events_url": "https://api.github.com/users/stale%5Bbot%5D/received_events",
    "type": "Bot",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/17056/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/17056/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/399864869",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/17056#issuecomment-399864869",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/17056",
    "id": 399864869,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5OTg2NDg2OQ==",
    "user": {
      "login": "karalabe",
      "id": 129561,
      "node_id": "MDQ6VXNlcjEyOTU2MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/129561?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/karalabe",
      "html_url": "https://github.com/karalabe",
      "followers_url": "https://api.github.com/users/karalabe/followers",
      "following_url": "https://api.github.com/users/karalabe/following{/other_user}",
      "gists_url": "https://api.github.com/users/karalabe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/karalabe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/karalabe/subscriptions",
      "organizations_url": "https://api.github.com/users/karalabe/orgs",
      "repos_url": "https://api.github.com/users/karalabe/repos",
      "events_url": "https://api.github.com/users/karalabe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/karalabe/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-25T07:55:44Z",
    "updated_at": "2018-06-25T07:55:44Z",
    "author_association": "MEMBER",
    "body": "This seems like a very dangerous hack. The consensus engine has a lot of moving parts around signer authorizations/deauthorization:\r\n\r\n * In each block, the current signer can vote only.\r\n * Votes are reset on every epoch block.\r\n * Block difficulty depends on signer list/order (you're failing this one).\r\n\r\nI'm not really sure what you're trying to do though. If you're trying to control the singer list via an EVM contract, it would be easier to monitor the contract from the outside, and just call the correct RPC APIs when addition/removal proposals are needed.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/399864869/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/399867644",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/17056#issuecomment-399867644",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/17056",
    "id": 399867644,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5OTg2NzY0NA==",
    "user": {
      "login": "REPTILEHAUS",
      "id": 4680621,
      "node_id": "MDQ6VXNlcjQ2ODA2MjE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4680621?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/REPTILEHAUS",
      "html_url": "https://github.com/REPTILEHAUS",
      "followers_url": "https://api.github.com/users/REPTILEHAUS/followers",
      "following_url": "https://api.github.com/users/REPTILEHAUS/following{/other_user}",
      "gists_url": "https://api.github.com/users/REPTILEHAUS/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/REPTILEHAUS/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/REPTILEHAUS/subscriptions",
      "organizations_url": "https://api.github.com/users/REPTILEHAUS/orgs",
      "repos_url": "https://api.github.com/users/REPTILEHAUS/repos",
      "events_url": "https://api.github.com/users/REPTILEHAUS/events{/privacy}",
      "received_events_url": "https://api.github.com/users/REPTILEHAUS/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-25T08:06:32Z",
    "updated_at": "2018-06-25T08:07:59Z",
    "author_association": "NONE",
    "body": "@karalabe thats exactly what im trying to achieve (contract based voting). I cant seem to find much about it at all online which is why i was attempting to disect clique and create my own consensus algo based off it.\r\n\r\nSo does your approach of calling RPC APIs mean that it would have to be controlled by some kind of external JS middleware that listens for contract events..? any pointers greatly appreciated, it is quite a mountain of code to get familiarised with.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/399867644/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/399868638",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/17056#issuecomment-399868638",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/17056",
    "id": 399868638,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5OTg2ODYzOA==",
    "user": {
      "login": "karalabe",
      "id": 129561,
      "node_id": "MDQ6VXNlcjEyOTU2MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/129561?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/karalabe",
      "html_url": "https://github.com/karalabe",
      "followers_url": "https://api.github.com/users/karalabe/followers",
      "following_url": "https://api.github.com/users/karalabe/following{/other_user}",
      "gists_url": "https://api.github.com/users/karalabe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/karalabe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/karalabe/subscriptions",
      "organizations_url": "https://api.github.com/users/karalabe/orgs",
      "repos_url": "https://api.github.com/users/karalabe/repos",
      "events_url": "https://api.github.com/users/karalabe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/karalabe/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-25T08:10:47Z",
    "updated_at": "2018-06-25T08:10:47Z",
    "author_association": "MEMBER",
    "body": "Well, there are two possible paths that I see. The simpler one is that EVM based voting is purely a signer \"nicety\", which makes miners' lives easier, but it is not a protocol enforced thing. This one can be done either via an outside middleware, or something even built into Geth and optionally enabled.\r\n\r\nThe more complex one is if you want to have the EVM contract as the binding authority. For that though you'd need to completely replace the voting mechanism of Clique and to authorize blocks based on an EVM contract. The problematic part here is that fast/light sync do not have access to contract state when syncing, so how will they know the list of authorized signers?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/399868638/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/399873866",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/17056#issuecomment-399873866",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/17056",
    "id": 399873866,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5OTg3Mzg2Ng==",
    "user": {
      "login": "REPTILEHAUS",
      "id": 4680621,
      "node_id": "MDQ6VXNlcjQ2ODA2MjE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4680621?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/REPTILEHAUS",
      "html_url": "https://github.com/REPTILEHAUS",
      "followers_url": "https://api.github.com/users/REPTILEHAUS/followers",
      "following_url": "https://api.github.com/users/REPTILEHAUS/following{/other_user}",
      "gists_url": "https://api.github.com/users/REPTILEHAUS/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/REPTILEHAUS/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/REPTILEHAUS/subscriptions",
      "organizations_url": "https://api.github.com/users/REPTILEHAUS/orgs",
      "repos_url": "https://api.github.com/users/REPTILEHAUS/repos",
      "events_url": "https://api.github.com/users/REPTILEHAUS/events{/privacy}",
      "received_events_url": "https://api.github.com/users/REPTILEHAUS/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-25T08:30:27Z",
    "updated_at": "2018-06-28T09:03:37Z",
    "author_association": "NONE",
    "body": "I'd like to use a contract as the main controlling authority - the gist of it is that I plan to have a contract based on another chain which will be the authority, all voting (maybe epochs also) etc will be done inside of this contract and my chain is connecting to it from my main nodes to the other chains IPC (nodes are on the same machine). So in a nutshell this contract on a different chain will be where all the magic takes place and will  provide the new signers to my main chain.\r\n\r\nfast/light sync might be an issue but id be willing to sacrifice that in order to get this up and running, the main necessity is that full sync would work as per usual. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/399873866/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/526946955",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/17056#issuecomment-526946955",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/17056",
    "id": 526946955,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyNjk0Njk1NQ==",
    "user": {
      "login": "stale[bot]",
      "id": 26384082,
      "node_id": "MDM6Qm90MjYzODQwODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/1724?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stale%5Bbot%5D",
      "html_url": "https://github.com/apps/stale",
      "followers_url": "https://api.github.com/users/stale%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/stale%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/stale%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stale%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stale%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/stale%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/stale%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/stale%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stale%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2019-09-01T19:35:54Z",
    "updated_at": "2019-09-01T19:35:54Z",
    "author_association": "NONE",
    "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/526946955/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
