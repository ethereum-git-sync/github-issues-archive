{
  "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20675",
  "repository_url": "https://api.github.com/repos/ethereum/go-ethereum",
  "labels_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20675/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20675/comments",
  "events_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20675/events",
  "html_url": "https://github.com/ethereum/go-ethereum/issues/20675",
  "id": 565946387,
  "node_id": "MDU6SXNzdWU1NjU5NDYzODc=",
  "number": 20675,
  "title": "les: a potential circular wait of *lightFetcher.requestTrigger",
  "user": {
    "login": "lzhfromustc",
    "id": 43191155,
    "node_id": "MDQ6VXNlcjQzMTkxMTU1",
    "avatar_url": "https://avatars.githubusercontent.com/u/43191155?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/lzhfromustc",
    "html_url": "https://github.com/lzhfromustc",
    "followers_url": "https://api.github.com/users/lzhfromustc/followers",
    "following_url": "https://api.github.com/users/lzhfromustc/following{/other_user}",
    "gists_url": "https://api.github.com/users/lzhfromustc/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/lzhfromustc/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/lzhfromustc/subscriptions",
    "organizations_url": "https://api.github.com/users/lzhfromustc/orgs",
    "repos_url": "https://api.github.com/users/lzhfromustc/repos",
    "events_url": "https://api.github.com/users/lzhfromustc/events{/privacy}",
    "received_events_url": "https://api.github.com/users/lzhfromustc/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1153621723,
      "node_id": "MDU6TGFiZWwxMTUzNjIxNzIz",
      "url": "https://api.github.com/repos/ethereum/go-ethereum/labels/status:on-hold",
      "name": "status:on-hold",
      "color": "d89165",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2020-02-16T18:20:46Z",
  "updated_at": "2020-02-20T18:15:49Z",
  "closed_at": "2020-02-20T18:15:49Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "#### System information\r\n\r\nGeth version: master branch\r\nOS & Version: All OS\r\nCommit hash : 37531b18847774a7f057496bc34f2a48053fa417\r\n\r\n#### Actual behaviour\r\nIn short, I seek for your help to understand a channel's usage, because it may trigger a circular wait bug. I am sorry for not having input to trigger this bug.\r\n\r\n`f.requestTrigger` is a channel made with 1 buffer. Could you help me take a look at the following code, and see whether `f.requestTrigger <- struct{}{}` can block (i.e. buffer is already full)? If it can, then it is likely to be buggy. If not, this Issue can be closed.\r\n\r\nhttps://github.com/ethereum/go-ethereum/blob/37531b18847774a7f057496bc34f2a48053fa417/les/fetcher.go#L251-L253\r\nhttps://github.com/ethereum/go-ethereum/blob/37531b18847774a7f057496bc34f2a48053fa417/les/fetcher.go#L353-L356\r\n",
  "closed_by": {
    "login": "lzhfromustc",
    "id": 43191155,
    "node_id": "MDQ6VXNlcjQzMTkxMTU1",
    "avatar_url": "https://avatars.githubusercontent.com/u/43191155?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/lzhfromustc",
    "html_url": "https://github.com/lzhfromustc",
    "followers_url": "https://api.github.com/users/lzhfromustc/followers",
    "following_url": "https://api.github.com/users/lzhfromustc/following{/other_user}",
    "gists_url": "https://api.github.com/users/lzhfromustc/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/lzhfromustc/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/lzhfromustc/subscriptions",
    "organizations_url": "https://api.github.com/users/lzhfromustc/orgs",
    "repos_url": "https://api.github.com/users/lzhfromustc/repos",
    "events_url": "https://api.github.com/users/lzhfromustc/events{/privacy}",
    "received_events_url": "https://api.github.com/users/lzhfromustc/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20675/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20675/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/586736512",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/20675#issuecomment-586736512",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20675",
    "id": 586736512,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4NjczNjUxMg==",
    "user": {
      "login": "lzhfromustc",
      "id": 43191155,
      "node_id": "MDQ6VXNlcjQzMTkxMTU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/43191155?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lzhfromustc",
      "html_url": "https://github.com/lzhfromustc",
      "followers_url": "https://api.github.com/users/lzhfromustc/followers",
      "following_url": "https://api.github.com/users/lzhfromustc/following{/other_user}",
      "gists_url": "https://api.github.com/users/lzhfromustc/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lzhfromustc/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lzhfromustc/subscriptions",
      "organizations_url": "https://api.github.com/users/lzhfromustc/orgs",
      "repos_url": "https://api.github.com/users/lzhfromustc/repos",
      "events_url": "https://api.github.com/users/lzhfromustc/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lzhfromustc/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-02-16T18:21:17Z",
    "updated_at": "2020-02-16T18:21:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "If it can block, a circular wait bug in the following pattern can be formed;\r\n\r\n```Go\r\nvar m sync.Mutex\r\n\r\nfunc main() {\r\n\tch := make(chan bool, 1)\r\n\tgo f1()\r\n\tgo f2()\r\n}\r\n\r\nfunc f1() {\r\n\tfor {\r\n\t\tm.Lock()\r\n\t\tch <- true // LINE A\r\n\t\tm.Unlock()\r\n\t}\r\n}\r\n\r\nfunc f2() {\r\n\tfor {\r\n\t\t<-ch\r\n\t\tm.Lock() // LINE B\r\n\t\tm.Unlock()\r\n\t}\r\n}\r\n```\r\n\r\nWhen f1() is at LINE A, and ch's buffer is full, and f2() is at LINE B, both f1() and f2() will be blocked.\r\n\r\nIn les/fetcher.go, `f.requestTrigger` can circular wait with `f.lock.Lock()`\r\n\r\n```Go\r\nfunc newLightFetcher(h *clientHandler) *lightFetcher {\r\n\tf := &lightFetcher{\r\n\t\t...\r\n\t\trequestTrigger: make(chan struct{}, 1),\r\n\t\t...\r\n\t}\r\n\r\n\t...\r\n\tgo f.syncLoop()\r\n\treturn f\r\n}\r\n\r\nfunc (f *lightFetcher) syncLoop() {\r\n\t...\r\n\tfor {\r\n\t\tselect {\r\n\t\tcase <-f.closeCh:\r\n\t\t\t...\r\n\t\tcase <-f.requestTrigger:\r\n\t\t\t\r\n\t\t\tf.lock.Lock() // LINE B\r\n\t\t\t...\r\n\t\t\tf.lock.Unlock()\r\n\r\n\t\t\tif rq != nil {\r\n\t\t\t\tif _, ok := <-f.handler.backend.reqDist.queue(rq); ok {\r\n\t\t\t\t\tif syncing {\r\n\t\t\t\t\t\t...\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tgo func() {\r\n\t\t\t\t\t\t\t...\r\n\t\t\t\t\t\t\t// keep starting new requests while possible\r\n\t\t\t\t\t\t\tf.requestTrigger <- struct{}{}\r\n\t\t\t\t\t\t}()\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tf.requestTrigger <- struct{}{}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\tcase ...:\r\n\t\t\t...\r\n\t\tcase p := <-f.syncDone:\r\n\t\t\t...\r\n\t\t\tf.requestTrigger <- struct{}{}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// announce processes a new announcement message received from a peer, adding new\r\n// nodes to the peer's block tree and removing old nodes if necessary\r\nfunc (f *lightFetcher) announce(...) {\r\n\tf.lock.Lock()\r\n\tdefer f.lock.Unlock()\r\n\t...\r\n\tif !f.requestTriggered {\r\n\t\t...\r\n\t\tf.requestTrigger <- struct{}{} // LINE A\r\n\t}\r\n}\r\n```\r\n ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/586736512/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/588843421",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/20675#issuecomment-588843421",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20675",
    "id": 588843421,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4ODg0MzQyMQ==",
    "user": {
      "login": "adamschmideg",
      "id": 208822,
      "node_id": "MDQ6VXNlcjIwODgyMg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/208822?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adamschmideg",
      "html_url": "https://github.com/adamschmideg",
      "followers_url": "https://api.github.com/users/adamschmideg/followers",
      "following_url": "https://api.github.com/users/adamschmideg/following{/other_user}",
      "gists_url": "https://api.github.com/users/adamschmideg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adamschmideg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adamschmideg/subscriptions",
      "organizations_url": "https://api.github.com/users/adamschmideg/orgs",
      "repos_url": "https://api.github.com/users/adamschmideg/repos",
      "events_url": "https://api.github.com/users/adamschmideg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adamschmideg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-02-20T09:30:57Z",
    "updated_at": "2020-02-20T09:30:57Z",
    "author_association": "MEMBER",
    "body": "Our plan is to have a new fetcher merged soon #20692 ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/588843421/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/588862633",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/20675#issuecomment-588862633",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20675",
    "id": 588862633,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4ODg2MjYzMw==",
    "user": {
      "login": "rjl493456442",
      "id": 5959481,
      "node_id": "MDQ6VXNlcjU5NTk0ODE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5959481?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rjl493456442",
      "html_url": "https://github.com/rjl493456442",
      "followers_url": "https://api.github.com/users/rjl493456442/followers",
      "following_url": "https://api.github.com/users/rjl493456442/following{/other_user}",
      "gists_url": "https://api.github.com/users/rjl493456442/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rjl493456442/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rjl493456442/subscriptions",
      "organizations_url": "https://api.github.com/users/rjl493456442/orgs",
      "repos_url": "https://api.github.com/users/rjl493456442/repos",
      "events_url": "https://api.github.com/users/rjl493456442/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rjl493456442/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-02-20T09:45:24Z",
    "updated_at": "2020-02-20T09:46:24Z",
    "author_association": "MEMBER",
    "body": "@lzhfromustc Hi, first this code is quite old and will be replaced very soon.\r\n\r\nAnd regarding your question, you can check `f.requestTriggered`. It uses this flag to control `f.requestTrigger` channel.\r\n\r\nFor example, if we get a request from the queue and start to process it, the `f.requestTriggered` will be set and `f.requestTrigger` won't be triggered. \r\n\r\nWhen all cached requests are processed, then `f.requestTriggered` will be set as false and `f.requestTrigger` can be triggered again.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/588862633/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/589234218",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/20675#issuecomment-589234218",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20675",
    "id": 589234218,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4OTIzNDIxOA==",
    "user": {
      "login": "lzhfromustc",
      "id": 43191155,
      "node_id": "MDQ6VXNlcjQzMTkxMTU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/43191155?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lzhfromustc",
      "html_url": "https://github.com/lzhfromustc",
      "followers_url": "https://api.github.com/users/lzhfromustc/followers",
      "following_url": "https://api.github.com/users/lzhfromustc/following{/other_user}",
      "gists_url": "https://api.github.com/users/lzhfromustc/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lzhfromustc/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lzhfromustc/subscriptions",
      "organizations_url": "https://api.github.com/users/lzhfromustc/orgs",
      "repos_url": "https://api.github.com/users/lzhfromustc/repos",
      "events_url": "https://api.github.com/users/lzhfromustc/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lzhfromustc/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-02-20T18:15:34Z",
    "updated_at": "2020-02-20T18:15:34Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks for explanation! I see with `f.requestTriggered`, it is impossible for `f.requestTrigger <- struct{}{}` in `announce()` to be blocked. I will close this issue",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/589234218/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
