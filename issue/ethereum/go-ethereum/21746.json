{
  "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/21746",
  "repository_url": "https://api.github.com/repos/ethereum/go-ethereum",
  "labels_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/21746/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/21746/comments",
  "events_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/21746/events",
  "html_url": "https://github.com/ethereum/go-ethereum/issues/21746",
  "id": 728251148,
  "node_id": "MDU6SXNzdWU3MjgyNTExNDg=",
  "number": 21746,
  "title": "gas estimation fails for calls that do not revert on internal failures",
  "user": {
    "login": "3esmit",
    "id": 224810,
    "node_id": "MDQ6VXNlcjIyNDgxMA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/224810?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/3esmit",
    "html_url": "https://github.com/3esmit",
    "followers_url": "https://api.github.com/users/3esmit/followers",
    "following_url": "https://api.github.com/users/3esmit/following{/other_user}",
    "gists_url": "https://api.github.com/users/3esmit/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/3esmit/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/3esmit/subscriptions",
    "organizations_url": "https://api.github.com/users/3esmit/orgs",
    "repos_url": "https://api.github.com/users/3esmit/repos",
    "events_url": "https://api.github.com/users/3esmit/events{/privacy}",
    "received_events_url": "https://api.github.com/users/3esmit/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2020-10-23T14:09:46Z",
  "updated_at": "2023-05-03T06:50:44Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "When trying to use ERC-2470, the eth_estimateGas is not giving enough gas for the create2 call succeed. \r\n\r\nTest on ropsten: https://ropsten.etherscan.io/address/0xce0042B868300000d44A59004Da54A005ffdcf9f\r\n\r\nSee [discussion on ERC-2470](https://ethereum-magicians.org/t/erc-2470-singleton-factory/3933/37?u=3esmit)\r\n\r\nThis also happens on MulitisigWallet executeTransaction, because this wallet does not revert when the internal call fails, instead it send an event with this result, see https://github.com/gnosis/MultiSigWallet/blob/develop/contracts/MultiSigWallet.sol#L230-L239, so the estimate always fail when this transaction more than minimal gas. \r\n\r\nThe estimateGas should start with the maximum gas (blockGasLimit) and return the usedGas of the simulated call, instead of starting from the less gas possible. Whenever a transaction can use more gas, this is the intended way to be called, not the opposite. ",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/21746/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/21746/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/718596794",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/21746#issuecomment-718596794",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/21746",
    "id": 718596794,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcxODU5Njc5NA==",
    "user": {
      "login": "karalabe",
      "id": 129561,
      "node_id": "MDQ6VXNlcjEyOTU2MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/129561?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/karalabe",
      "html_url": "https://github.com/karalabe",
      "followers_url": "https://api.github.com/users/karalabe/followers",
      "following_url": "https://api.github.com/users/karalabe/following{/other_user}",
      "gists_url": "https://api.github.com/users/karalabe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/karalabe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/karalabe/subscriptions",
      "organizations_url": "https://api.github.com/users/karalabe/orgs",
      "repos_url": "https://api.github.com/users/karalabe/repos",
      "events_url": "https://api.github.com/users/karalabe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/karalabe/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-29T10:18:52Z",
    "updated_at": "2020-10-29T10:18:52Z",
    "author_association": "MEMBER",
    "body": "We've discussed this quite extensively, and there might be a solution that can cover your use case whilst not breaking generality.\r\n\r\nWe don't want to look at the amount of gas used, nor internal calls because we assume that the outer call / context should be the only driving factor if estimation succeeds or fails. Otherwise you open yourself up to all kinds of nasty attacks or never ending corner cases.\r\n\r\nIn your specific use case, the problem is that the outer call succeeds even if an internal call fails. Given that currently the only information we have is the tx status flag, this cannot solve your problem. However, we can also take into consideration the \"side effects\" a transaction has when evaluating the binary search.\r\n\r\nBefore starting to do the search, we can run the transaction with the maximum gas limit (i.e. block limit). If the call succeeds (i.e. outer call says it's ok), we can gather the side effects of the call (get the root hash of the new state via statedb.IntermediateHash; get the hash of the receipt (**with gas used set to zero**)). These 2 hashes encompass every side effect the transaction had on the Ethereum network; let's call it `desired goal`.\r\n\r\nAfterwards, we can do the binary search, but instead of looking for the tx status == `success`, we look at side-effect == `desired goal`. And move upwards if it's different, or downward if it's the same. The net result will be that we do a binary search to find the least amount of gas that will result in the same state transition as if we can with max gas allowance.\r\n\r\nIgnoring the `gas used` fields may or may not be necessary, but it seems saner for us to avoid looking at the gas when estimating the gas.\r\n\r\nWhat do you think? Would this work? Do you see any obvious pitfalls with it? Would you want to take a stab at implementing it?\r\n\r\nCC @holiman, please think this over if you see any obvious attack vector.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/718596794/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/718909161",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/21746#issuecomment-718909161",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/21746",
    "id": 718909161,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcxODkwOTE2MQ==",
    "user": {
      "login": "3esmit",
      "id": 224810,
      "node_id": "MDQ6VXNlcjIyNDgxMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/224810?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/3esmit",
      "html_url": "https://github.com/3esmit",
      "followers_url": "https://api.github.com/users/3esmit/followers",
      "following_url": "https://api.github.com/users/3esmit/following{/other_user}",
      "gists_url": "https://api.github.com/users/3esmit/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/3esmit/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/3esmit/subscriptions",
      "organizations_url": "https://api.github.com/users/3esmit/orgs",
      "repos_url": "https://api.github.com/users/3esmit/repos",
      "events_url": "https://api.github.com/users/3esmit/events{/privacy}",
      "received_events_url": "https://api.github.com/users/3esmit/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-29T17:34:00Z",
    "updated_at": "2020-10-29T17:34:00Z",
    "author_association": "NONE",
    "body": "I was looking in the gas estimation function, and looks like it should be possible to accumulate into a \"error line\" during all EVM processing that appends any errors occurring in all calls.\r\n\r\nThen, when GasEstimate is called, it would return the value of gas which returns less errors, or the less gas that returns no error.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/718909161/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
