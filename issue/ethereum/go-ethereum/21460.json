{
  "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/21460",
  "repository_url": "https://api.github.com/repos/ethereum/go-ethereum",
  "labels_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/21460/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/21460/comments",
  "events_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/21460/events",
  "html_url": "https://github.com/ethereum/go-ethereum/issues/21460",
  "id": 681317994,
  "node_id": "MDU6SXNzdWU2ODEzMTc5OTQ=",
  "number": 21460,
  "title": "Combat \"hammer\" eviction attack",
  "user": {
    "login": "wjmelements",
    "id": 799573,
    "node_id": "MDQ6VXNlcjc5OTU3Mw==",
    "avatar_url": "https://avatars.githubusercontent.com/u/799573?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/wjmelements",
    "html_url": "https://github.com/wjmelements",
    "followers_url": "https://api.github.com/users/wjmelements/followers",
    "following_url": "https://api.github.com/users/wjmelements/following{/other_user}",
    "gists_url": "https://api.github.com/users/wjmelements/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/wjmelements/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/wjmelements/subscriptions",
    "organizations_url": "https://api.github.com/users/wjmelements/orgs",
    "repos_url": "https://api.github.com/users/wjmelements/repos",
    "events_url": "https://api.github.com/users/wjmelements/events{/privacy}",
    "received_events_url": "https://api.github.com/users/wjmelements/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1153621723,
      "node_id": "MDU6TGFiZWwxMTUzNjIxNzIz",
      "url": "https://api.github.com/repos/ethereum/go-ethereum/labels/status:on-hold",
      "name": "status:on-hold",
      "color": "d89165",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 5,
  "created_at": "2020-08-18T20:26:51Z",
  "updated_at": "2023-05-03T06:47:59Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "It's currently fairly easy to evict most pending transactions from most of the network by issuing many high gas limit transactions from a handful of accounts and then cancel them all cheaply. The high gas limits ensure that few of the transactions will confirm before the cancel step. The cancel step replaces only the first unconfirmed transaction of each account with a transaction that drains the account, thereby evicting all subsequent transactions. Those subsequent transactions can thus evict a large number of competitor transactions quickly and cheaply. It is [believed](https://www.coindesk.com/mempool-manipulation-enabled-theft-of-8m-in-makerdao-collateral-on-black-thursday-report) that a similar strategy was used against makerdao collateral on Black Thursday.",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/21460/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/21460/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/696588736",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/21460#issuecomment-696588736",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/21460",
    "id": 696588736,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5NjU4ODczNg==",
    "user": {
      "login": "holiman",
      "id": 142290,
      "node_id": "MDQ6VXNlcjE0MjI5MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/142290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/holiman",
      "html_url": "https://github.com/holiman",
      "followers_url": "https://api.github.com/users/holiman/followers",
      "following_url": "https://api.github.com/users/holiman/following{/other_user}",
      "gists_url": "https://api.github.com/users/holiman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/holiman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/holiman/subscriptions",
      "organizations_url": "https://api.github.com/users/holiman/orgs",
      "repos_url": "https://api.github.com/users/holiman/repos",
      "events_url": "https://api.github.com/users/holiman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/holiman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-22T08:43:45Z",
    "updated_at": "2020-09-22T08:43:45Z",
    "author_association": "MEMBER",
    "body": "Any solution to this problem would either make replacement txs impossible _or_ very expensive. So it's basically UX versus security. If we make replacements very expensive (say, replace only accepted if it's worth more than 100% of the original one), then a user who submits a tx with wrong (very high) gasprice is screwed. \r\n\r\nI guess we may have to revise the limits at some point, to prevent these types of shenanigans. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/696588736/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/698055909",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/21460#issuecomment-698055909",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/21460",
    "id": 698055909,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5ODA1NTkwOQ==",
    "user": {
      "login": "wjmelements",
      "id": 799573,
      "node_id": "MDQ6VXNlcjc5OTU3Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/799573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wjmelements",
      "html_url": "https://github.com/wjmelements",
      "followers_url": "https://api.github.com/users/wjmelements/followers",
      "following_url": "https://api.github.com/users/wjmelements/following{/other_user}",
      "gists_url": "https://api.github.com/users/wjmelements/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wjmelements/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wjmelements/subscriptions",
      "organizations_url": "https://api.github.com/users/wjmelements/orgs",
      "repos_url": "https://api.github.com/users/wjmelements/repos",
      "events_url": "https://api.github.com/users/wjmelements/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wjmelements/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-24T01:21:51Z",
    "updated_at": "2020-09-24T01:21:51Z",
    "author_association": "CONTRIBUTOR",
    "body": "Could we reduce the limit on pending transactions per-account to make this more expensive?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/698055909/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/734210890",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/21460#issuecomment-734210890",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/21460",
    "id": 734210890,
    "node_id": "MDEyOklzc3VlQ29tbWVudDczNDIxMDg5MA==",
    "user": {
      "login": "karalabe",
      "id": 129561,
      "node_id": "MDQ6VXNlcjEyOTU2MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/129561?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/karalabe",
      "html_url": "https://github.com/karalabe",
      "followers_url": "https://api.github.com/users/karalabe/followers",
      "following_url": "https://api.github.com/users/karalabe/following{/other_user}",
      "gists_url": "https://api.github.com/users/karalabe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/karalabe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/karalabe/subscriptions",
      "organizations_url": "https://api.github.com/users/karalabe/orgs",
      "repos_url": "https://api.github.com/users/karalabe/repos",
      "events_url": "https://api.github.com/users/karalabe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/karalabe/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-11-26T10:21:37Z",
    "updated_at": "2020-11-26T10:21:37Z",
    "author_association": "MEMBER",
    "body": "- Option 1 is to disable replacement transactions altogether, but IMHO that is a bit nasty because it's a nice UX to be able to override an old transactions if for example your gas price is too low.\r\n- Option 2 is to only allow repricing, but not changing the value. This would break support for cancellations where you change the entire tx to something else.\r\n- Option 3 is to make replacements more expensive, maybe drastically so. This imho would go to the detriment of normal users, but won't much prevent attacks, you just change the amount of gains the attacker needs before it's worth triggering it.\r\n\r\nMy proposal is option 4, whereby a transaction replacement also takes into consideration the subsequent transactions getting invalidated. (Important to note, the only way to invalidate a tx is to run out of balance.). What we can do, is to check if a replacement tx lowers the remaining balance compared to the original transaction, and if it does, whether the balance gets lowered enough to kick out subsequent txs. If yes, the replacement should be rejected.\r\n\r\nThis proposal does not interfere with normal users using Ethereum, but it ensures that once a tx with a certain nonce enters the pool it stays there.\r\n\r\n---\r\n\r\nYes, it could still be kicked out using another account, but that should outbid the original ones. We could add a new rule to txpool so that higher fee txs from other accounts would need to be 10% more expensive to kick out old txs already pooled... but this might backfire with fee spikes, so not sure if it's a good idea.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/734210890/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/734248276",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/21460#issuecomment-734248276",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/21460",
    "id": 734248276,
    "node_id": "MDEyOklzc3VlQ29tbWVudDczNDI0ODI3Ng==",
    "user": {
      "login": "fjl",
      "id": 6915,
      "node_id": "MDQ6VXNlcjY5MTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6915?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjl",
      "html_url": "https://github.com/fjl",
      "followers_url": "https://api.github.com/users/fjl/followers",
      "following_url": "https://api.github.com/users/fjl/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjl/subscriptions",
      "organizations_url": "https://api.github.com/users/fjl/orgs",
      "repos_url": "https://api.github.com/users/fjl/repos",
      "events_url": "https://api.github.com/users/fjl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjl/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-11-26T11:37:49Z",
    "updated_at": "2020-11-26T11:47:14Z",
    "author_association": "MEMBER",
    "body": "Here's some more info about the proposal @karalabe outlined above. I'm adding this because I got confused initially and didn't understand how it could work.\r\n\r\nIn Ethereum, all TXs must originate in an EOA and contracts can never 'take value' out of an EOA. This means the balance of an EOA can never decrease unless it sends a TX, i.e. if it has balance V at the head block, and we have some TXs Ta, Tb, Tc spending value Va, Vb, Vc, we know that the remaining balance will be at least V-Va-Vb-Vc. It might be higher (due to incoming transfers), but that doesn't really matter because we're looking for a worst-case prediction of balance here.\r\n\r\nTo implement this proposal, we'd basically just start tracking the 'expected minimum balance' of all accounts in the pool, just like we already track the 'expected nonce' in the txNoncer. Then, when inserting transactions, we could easily check whether any TX replacement will lower the expected balance and potentially reject the replacement as @karalabe wrote.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/734248276/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/734252159",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/21460#issuecomment-734252159",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/21460",
    "id": 734252159,
    "node_id": "MDEyOklzc3VlQ29tbWVudDczNDI1MjE1OQ==",
    "user": {
      "login": "fjl",
      "id": 6915,
      "node_id": "MDQ6VXNlcjY5MTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6915?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjl",
      "html_url": "https://github.com/fjl",
      "followers_url": "https://api.github.com/users/fjl/followers",
      "following_url": "https://api.github.com/users/fjl/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjl/subscriptions",
      "organizations_url": "https://api.github.com/users/fjl/orgs",
      "repos_url": "https://api.github.com/users/fjl/repos",
      "events_url": "https://api.github.com/users/fjl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjl/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-11-26T11:46:39Z",
    "updated_at": "2020-11-26T11:46:53Z",
    "author_association": "MEMBER",
    "body": "The benefit of this scheme is that cancelling TXs will still work for most people, as long as they're not piling up future transactions. This is very good. Thinking about it more, this 'expected minimum balance' is also generally useful for deciding whether TXs should be pooled. Right now, it's actually possible to pile up TXs where all but the first one spend non-existing balance. This change would allow us to prevent pooling of such transactions.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/734252159/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
