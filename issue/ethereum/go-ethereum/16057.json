{
  "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/16057",
  "repository_url": "https://api.github.com/repos/ethereum/go-ethereum",
  "labels_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/16057/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/16057/comments",
  "events_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/16057/events",
  "html_url": "https://github.com/ethereum/go-ethereum/issues/16057",
  "id": 296064629,
  "node_id": "MDU6SXNzdWUyOTYwNjQ2Mjk=",
  "number": 16057,
  "title": "Filter network connections with bootnodes",
  "user": {
    "login": "Firescar96",
    "id": 5351374,
    "node_id": "MDQ6VXNlcjUzNTEzNzQ=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5351374?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Firescar96",
    "html_url": "https://github.com/Firescar96",
    "followers_url": "https://api.github.com/users/Firescar96/followers",
    "following_url": "https://api.github.com/users/Firescar96/following{/other_user}",
    "gists_url": "https://api.github.com/users/Firescar96/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Firescar96/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Firescar96/subscriptions",
    "organizations_url": "https://api.github.com/users/Firescar96/orgs",
    "repos_url": "https://api.github.com/users/Firescar96/repos",
    "events_url": "https://api.github.com/users/Firescar96/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Firescar96/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2018-02-10T02:15:13Z",
  "updated_at": "2018-08-14T22:17:25Z",
  "closed_at": "2018-02-23T14:34:51Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "#### Expected behaviour\r\nI set up a PoA network with three nodes on AWS, all publicly accessible. A fourth node is running using the lightweight `bootnode` client. The bootnode should rapidly facilitate connections between these nodes.\r\n\r\n#### Actual behaviour\r\nThere is no ability to specify a network id so when I tried to add another node after a few days via the bootnode I couldn't. The bootnode becomes saturated with nodes on other networks and is unable to do matchmaking for me anymore\r\n\r\n#### Discussion\r\nFull nodes do not form persistent connections with nodes on other networks. When I run `admin.peers` from the geth console of a full node it usually only shows peers with the same network id. Other potential peers are ephemeral. How can I help to provide the same behavior to bootnodes, or is it recommended that I just use a full node as a bootnode?\r\n",
  "closed_by": {
    "login": "fjl",
    "id": 6915,
    "node_id": "MDQ6VXNlcjY5MTU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6915?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/fjl",
    "html_url": "https://github.com/fjl",
    "followers_url": "https://api.github.com/users/fjl/followers",
    "following_url": "https://api.github.com/users/fjl/following{/other_user}",
    "gists_url": "https://api.github.com/users/fjl/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/fjl/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/fjl/subscriptions",
    "organizations_url": "https://api.github.com/users/fjl/orgs",
    "repos_url": "https://api.github.com/users/fjl/repos",
    "events_url": "https://api.github.com/users/fjl/events{/privacy}",
    "received_events_url": "https://api.github.com/users/fjl/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/16057/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/16057/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/364641670",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/16057#issuecomment-364641670",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/16057",
    "id": 364641670,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NDY0MTY3MA==",
    "user": {
      "login": "karalabe",
      "id": 129561,
      "node_id": "MDQ6VXNlcjEyOTU2MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/129561?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/karalabe",
      "html_url": "https://github.com/karalabe",
      "followers_url": "https://api.github.com/users/karalabe/followers",
      "following_url": "https://api.github.com/users/karalabe/following{/other_user}",
      "gists_url": "https://api.github.com/users/karalabe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/karalabe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/karalabe/subscriptions",
      "organizations_url": "https://api.github.com/users/karalabe/orgs",
      "repos_url": "https://api.github.com/users/karalabe/repos",
      "events_url": "https://api.github.com/users/karalabe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/karalabe/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-10T10:26:07Z",
    "updated_at": "2018-02-10T10:26:07Z",
    "author_association": "MEMBER",
    "body": "Hi there!\r\n\r\nYes, we are aware of this limitation. Unfortunately the currently stable discovery protocol within Ethereum does not facilitate filtering for specific capabilities of nodes, and as such everyone gets conflated into one big mess.\r\n\r\nFor quite a while now the light client in Geth has been shipping with a next generation experimental discovery protocol that **can** do filtering and lookups based on certain user criteria. Light servers, light clients and light bootnodes already use that. Unfortunately it's not yet been stabilized and standardized to the point where we'd be confident to switch over the entire network to it. It's sadly a fairly low priority task among all the other juicy scaling issues.\r\n\r\nOn the upside, we've been working on standardizing Ethereum Node Records (https://github.com/ethereum/EIPs/pull/778), which would define a way for any Ethereum node to list its capabilities; and also to allow remotely retrieving those (https://github.com/ethereum/EIPs/pull/868). These two alone are not fully enough to fix your use case, but these would allow a third extension not yet published to add new discovery mechanisms (e.g. DNS based ones), which would serve as both a fallback as well as alternative way to find peers.\r\n\r\nTL;DR We don't have a better solution for now, but we're exploring and implementing multiple concurrent solutions.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/364641670/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/413034091",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/16057#issuecomment-413034091",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/16057",
    "id": 413034091,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMzAzNDA5MQ==",
    "user": {
      "login": "marcosmartinez7",
      "id": 14795944,
      "node_id": "MDQ6VXNlcjE0Nzk1OTQ0",
      "avatar_url": "https://avatars.githubusercontent.com/u/14795944?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/marcosmartinez7",
      "html_url": "https://github.com/marcosmartinez7",
      "followers_url": "https://api.github.com/users/marcosmartinez7/followers",
      "following_url": "https://api.github.com/users/marcosmartinez7/following{/other_user}",
      "gists_url": "https://api.github.com/users/marcosmartinez7/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/marcosmartinez7/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/marcosmartinez7/subscriptions",
      "organizations_url": "https://api.github.com/users/marcosmartinez7/orgs",
      "repos_url": "https://api.github.com/users/marcosmartinez7/repos",
      "events_url": "https://api.github.com/users/marcosmartinez7/events{/privacy}",
      "received_events_url": "https://api.github.com/users/marcosmartinez7/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-14T22:17:25Z",
    "updated_at": "2018-08-14T22:17:25Z",
    "author_association": "NONE",
    "body": "Hi, is there any progress with this about filtering the interactions between the bootnodes?\r\n\r\nKind regards\r\nMarcos",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/413034091/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
