{
  "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/24078",
  "repository_url": "https://api.github.com/repos/ethereum/go-ethereum",
  "labels_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/24078/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/24078/comments",
  "events_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/24078/events",
  "html_url": "https://github.com/ethereum/go-ethereum/issues/24078",
  "id": 1073338667,
  "node_id": "I_kwDOAOvK984_-dkr",
  "number": 24078,
  "title": "eth_getLogs allows to query events from unmined block",
  "user": {
    "login": "bogdan",
    "id": 122436,
    "node_id": "MDQ6VXNlcjEyMjQzNg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/122436?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bogdan",
    "html_url": "https://github.com/bogdan",
    "followers_url": "https://api.github.com/users/bogdan/followers",
    "following_url": "https://api.github.com/users/bogdan/following{/other_user}",
    "gists_url": "https://api.github.com/users/bogdan/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bogdan/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bogdan/subscriptions",
    "organizations_url": "https://api.github.com/users/bogdan/orgs",
    "repos_url": "https://api.github.com/users/bogdan/repos",
    "events_url": "https://api.github.com/users/bogdan/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bogdan/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 72233650,
      "node_id": "MDU6TGFiZWw3MjIzMzY1MA==",
      "url": "https://api.github.com/repos/ethereum/go-ethereum/labels/type:bug",
      "name": "type:bug",
      "color": "FF5E5E",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2021-12-07T13:13:37Z",
  "updated_at": "2022-05-29T21:13:23Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "#### System information\r\n\r\nGeth version: v1.10.13\r\nOS & Version: OSX\r\n\r\n#### Steps to reproduce the behaviour\r\n\r\nGiven there are multiple geth nodes behind an HTTP load balancer and suppose that one of them gets behind other by 20 blocks for whatever reason - network connection issue, human error, slow hardware etc.\r\n\r\n1. Client calls `eth_blockNumber`. \r\n2. The request is routed an up to date ethereum node \r\n3. Node returns XX2100 block number\r\n4. Client calls `eth_getLogs` with  block range XX2050-XX2090 (assuming 10 confirmation blocks),\r\n5. The request gets routed to a node that is 20 blocks behind up to date one\r\n \r\n#### Expected behaviour\r\n\r\n`eth_getLogs` return an error that head block is behind a specified block range.\r\n\r\n#### Actual behaviour\r\n\r\nThe outdated node doesn't return event from blocks XX2080-XX2090. Client has no way to know about the issue as such a block range can really have no events.\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/24078/reactions",
    "total_count": 2,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 2
  },
  "timeline_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/24078/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/988072547",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/24078#issuecomment-988072547",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/24078",
    "id": 988072547,
    "node_id": "IC_kwDOAOvK98465Mpj",
    "user": {
      "login": "s1na",
      "id": 1591639,
      "node_id": "MDQ6VXNlcjE1OTE2Mzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1591639?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/s1na",
      "html_url": "https://github.com/s1na",
      "followers_url": "https://api.github.com/users/s1na/followers",
      "following_url": "https://api.github.com/users/s1na/following{/other_user}",
      "gists_url": "https://api.github.com/users/s1na/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/s1na/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/s1na/subscriptions",
      "organizations_url": "https://api.github.com/users/s1na/orgs",
      "repos_url": "https://api.github.com/users/s1na/repos",
      "events_url": "https://api.github.com/users/s1na/events{/privacy}",
      "received_events_url": "https://api.github.com/users/s1na/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-12-07T16:14:18Z",
    "updated_at": "2021-12-07T16:14:18Z",
    "author_association": "MEMBER",
    "body": "Something you could try (at cost of performance) is to query the logs block by block, i.e. `getLogs({\"blockHash\": \"0xabab...\"})` which returns an error if it encounters a block it doesn't recognize.\r\n\r\nBecause the head might be somewhere between the queried block range it feels weird either to return an error for the whole range or an error and only the logs up till the head block.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/988072547/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/988082802",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/24078#issuecomment-988082802",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/24078",
    "id": 988082802,
    "node_id": "IC_kwDOAOvK98465PJy",
    "user": {
      "login": "bogdan",
      "id": 122436,
      "node_id": "MDQ6VXNlcjEyMjQzNg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/122436?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bogdan",
      "html_url": "https://github.com/bogdan",
      "followers_url": "https://api.github.com/users/bogdan/followers",
      "following_url": "https://api.github.com/users/bogdan/following{/other_user}",
      "gists_url": "https://api.github.com/users/bogdan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bogdan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bogdan/subscriptions",
      "organizations_url": "https://api.github.com/users/bogdan/orgs",
      "repos_url": "https://api.github.com/users/bogdan/repos",
      "events_url": "https://api.github.com/users/bogdan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bogdan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-12-07T16:27:18Z",
    "updated_at": "2021-12-07T16:30:38Z",
    "author_association": "NONE",
    "body": "> Something you could try (at cost of performance) is to query the logs block by block, i.e. getLogs({\"blockHash\": \"0xabab...\"}) which returns an error if it encounters a block it doesn't recognize.\r\n\r\nThe cost is quite significant here when you work with fast PoS block generating network.\r\n\r\n> Because the head might be somewhere between the queried block range it feels weird either to return an error for the whole range or an error and only the logs up till the head block.\r\n\r\nThe alternative may be is to return a head block number as part of `eth_getLogs`  response. That might be also more backward compatible.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/988082802/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/998572710",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/24078#issuecomment-998572710",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/24078",
    "id": 998572710,
    "node_id": "IC_kwDOAOvK9847hQKm",
    "user": {
      "login": "ligi",
      "id": 111600,
      "node_id": "MDQ6VXNlcjExMTYwMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/111600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ligi",
      "html_url": "https://github.com/ligi",
      "followers_url": "https://api.github.com/users/ligi/followers",
      "following_url": "https://api.github.com/users/ligi/following{/other_user}",
      "gists_url": "https://api.github.com/users/ligi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ligi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ligi/subscriptions",
      "organizations_url": "https://api.github.com/users/ligi/orgs",
      "repos_url": "https://api.github.com/users/ligi/repos",
      "events_url": "https://api.github.com/users/ligi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ligi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-12-21T08:30:00Z",
    "updated_at": "2021-12-21T08:30:00Z",
    "author_association": "MEMBER",
    "body": "What kind of balancer are you using? Would a web3-aware balancer like [dshackle](https://github.com/emeraldpay/dshackle) also solve your problem?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/998572710/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/998753581",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/24078#issuecomment-998753581",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/24078",
    "id": 998753581,
    "node_id": "IC_kwDOAOvK9847h8Ut",
    "user": {
      "login": "bogdan",
      "id": 122436,
      "node_id": "MDQ6VXNlcjEyMjQzNg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/122436?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bogdan",
      "html_url": "https://github.com/bogdan",
      "followers_url": "https://api.github.com/users/bogdan/followers",
      "following_url": "https://api.github.com/users/bogdan/following{/other_user}",
      "gists_url": "https://api.github.com/users/bogdan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bogdan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bogdan/subscriptions",
      "organizations_url": "https://api.github.com/users/bogdan/orgs",
      "repos_url": "https://api.github.com/users/bogdan/repos",
      "events_url": "https://api.github.com/users/bogdan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bogdan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-12-21T12:51:40Z",
    "updated_at": "2021-12-21T12:51:40Z",
    "author_association": "NONE",
    "body": "I am using Infura at the moment and I am not sure what kind of load balancer do they use.\r\nI'd better want to eliminate such problems as a class because if I am writing an open source library I am not sure which service provider will be used by a client.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/998753581/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
