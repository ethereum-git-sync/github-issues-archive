{
  "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/23959",
  "repository_url": "https://api.github.com/repos/ethereum/go-ethereum",
  "labels_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/23959/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/23959/comments",
  "events_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/23959/events",
  "html_url": "https://github.com/ethereum/go-ethereum/issues/23959",
  "id": 1061462130,
  "node_id": "I_kwDOAOvK984_RKBy",
  "number": 23959,
  "title": "Add SimulatedBackend configuration options",
  "user": {
    "login": "divergencetech",
    "id": 94644849,
    "node_id": "O_kgDOBaQqcQ",
    "avatar_url": "https://avatars.githubusercontent.com/u/94644849?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/divergencetech",
    "html_url": "https://github.com/divergencetech",
    "followers_url": "https://api.github.com/users/divergencetech/followers",
    "following_url": "https://api.github.com/users/divergencetech/following{/other_user}",
    "gists_url": "https://api.github.com/users/divergencetech/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/divergencetech/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/divergencetech/subscriptions",
    "organizations_url": "https://api.github.com/users/divergencetech/orgs",
    "repos_url": "https://api.github.com/users/divergencetech/repos",
    "events_url": "https://api.github.com/users/divergencetech/events{/privacy}",
    "received_events_url": "https://api.github.com/users/divergencetech/received_events",
    "type": "Organization",
    "site_admin": false
  },
  "labels": [
    {
      "id": 72233652,
      "node_id": "MDU6TGFiZWw3MjIzMzY1Mg==",
      "url": "https://api.github.com/repos/ethereum/go-ethereum/labels/type:feature",
      "name": "type:feature",
      "color": "84b6eb",
      "default": false,
      "description": null
    },
    {
      "id": 1132689577,
      "node_id": "MDU6TGFiZWwxMTMyNjg5NTc3",
      "url": "https://api.github.com/repos/ethereum/go-ethereum/labels/status:triage",
      "name": "status:triage",
      "color": "6be514",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2021-11-23T16:06:39Z",
  "updated_at": "2022-03-14T16:32:41Z",
  "closed_at": "2021-11-27T22:07:42Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "# Rationale\r\n\r\nThe SimulatedBackend is used in testing so should be configurable in order to match a wide variety of situations. While the default values are almost always fit for purpose, niche use-cases require additional configuration. My particular use-case is Solidity code coverage with contracts instrumented by https://github.com/sc-forks/solidity-coverage. This requires access to the `vm.Config.Tracer` to inspect the opcode execution however the SimulatedBackend uses a zero-value `vm.Config{}` when instantiating its blockchain:\r\n\r\nhttps://github.com/ethereum/go-ethereum/blob/6c4dc6c38827296dec5a49a6ea25fd7f0eb4ac77/accounts/abi/bind/backends/simulated.go#L81\r\n\r\nModifying the config via `SimulatedBackend().Blockchain().GetVMConfig()` doesn't seem to work, presumably because the Tracer has already been seen to be nil.\r\n\r\n# Implementation\r\n\r\nI am willing to implement the feature.\r\n\r\nAny configuration directives can be exposed with variadic options ([example](https://dave.cheney.net/2014/10/17/functional-options-for-friendly-apis)) that change the `NewSimulatedBackend*()` constructors in a backwards-compatible manner. This approach doesn't require a full suite of options to begin with so is quick to implement with a minimal set, but easy to extend later.\r\n\r\nExample:\r\n\r\n``` Go\r\n// A config defines configuration directives for new SimulatedBackends.\r\n// Its default value is defined in NewSimulatedBackendWithDatabase() and\r\n// is modified with Options.\r\ntype config struct {\r\n  vmConfig vm.Config\r\n  …\r\n}\r\n\r\n// An Option configures a new SimulatedBackend.\r\ntype Option interface {\r\n  update(*config)\r\n}\r\n\r\nfunc NewSimulatedBackendWithDatabase(database ethdb.Database, alloc core.GenesisAlloc, gasLimit uint64, opts ...Option) *SimulatedBackend {\r\n  cfg := &config{\r\n    vmConfig: vm.Config{}, // not technically needed as it's the zero value, but demonstrative\r\n    … // all existing values\r\n  }\r\n  for _, o := range opts {\r\n    o.update(cfg)\r\n  }\r\n  … // existing code, drawing from cfg\r\n}\r\n\r\n// WithVMConfig specifies the VM config used by a SimulatedBackend's underlying\r\n// blockchain.\r\nfunc WithVMConfig(cfg vm.Config) Option {\r\n  return vmConfigOpt(cfg)\r\n}\r\n\r\ntype vmConfigOpt vm.Config\r\n\r\nfunc (o vmConfigOpt) update(cfg *config) {\r\n  cfg.vmConfig = vm.Config(o)\r\n}\r\n\r\n// End user:\r\nopt := backends.WithVMConfig(vm.Config{\r\n…\r\n})\r\nsim := backends.NewSimulatedBackendWithDatabase(db, alloc, limit, opt)\r\n// and existing code remains unchanged because opts are variadic\r\nsim := backends.NewSimulatedBackendWithDatabase(db, alloc, limit)\r\n```",
  "closed_by": {
    "login": "divergencetech",
    "id": 94644849,
    "node_id": "O_kgDOBaQqcQ",
    "avatar_url": "https://avatars.githubusercontent.com/u/94644849?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/divergencetech",
    "html_url": "https://github.com/divergencetech",
    "followers_url": "https://api.github.com/users/divergencetech/followers",
    "following_url": "https://api.github.com/users/divergencetech/following{/other_user}",
    "gists_url": "https://api.github.com/users/divergencetech/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/divergencetech/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/divergencetech/subscriptions",
    "organizations_url": "https://api.github.com/users/divergencetech/orgs",
    "repos_url": "https://api.github.com/users/divergencetech/repos",
    "events_url": "https://api.github.com/users/divergencetech/events{/privacy}",
    "received_events_url": "https://api.github.com/users/divergencetech/received_events",
    "type": "Organization",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/23959/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/23959/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/980799769",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/23959#issuecomment-980799769",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/23959",
    "id": 980799769,
    "node_id": "IC_kwDOAOvK9846ddEZ",
    "user": {
      "login": "divergencetech",
      "id": 94644849,
      "node_id": "O_kgDOBaQqcQ",
      "avatar_url": "https://avatars.githubusercontent.com/u/94644849?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/divergencetech",
      "html_url": "https://github.com/divergencetech",
      "followers_url": "https://api.github.com/users/divergencetech/followers",
      "following_url": "https://api.github.com/users/divergencetech/following{/other_user}",
      "gists_url": "https://api.github.com/users/divergencetech/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/divergencetech/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/divergencetech/subscriptions",
      "organizations_url": "https://api.github.com/users/divergencetech/orgs",
      "repos_url": "https://api.github.com/users/divergencetech/repos",
      "events_url": "https://api.github.com/users/divergencetech/events{/privacy}",
      "received_events_url": "https://api.github.com/users/divergencetech/received_events",
      "type": "Organization",
      "site_admin": false
    },
    "created_at": "2021-11-27T22:07:42Z",
    "updated_at": "2021-11-27T22:07:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "I dug into the code and found that my assumptions were wrong so this is now obsolete. I needed to set `vm.Config.Debug` as well as provide a `Tracer`.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/980799769/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1067036209",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/23959#issuecomment-1067036209",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/23959",
    "id": 1067036209,
    "node_id": "IC_kwDOAOvK984_ma4x",
    "user": {
      "login": "deitch",
      "id": 282526,
      "node_id": "MDQ6VXNlcjI4MjUyNg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/282526?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/deitch",
      "html_url": "https://github.com/deitch",
      "followers_url": "https://api.github.com/users/deitch/followers",
      "following_url": "https://api.github.com/users/deitch/following{/other_user}",
      "gists_url": "https://api.github.com/users/deitch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/deitch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/deitch/subscriptions",
      "organizations_url": "https://api.github.com/users/deitch/orgs",
      "repos_url": "https://api.github.com/users/deitch/repos",
      "events_url": "https://api.github.com/users/deitch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/deitch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-14T16:32:41Z",
    "updated_at": "2022-03-14T16:32:41Z",
    "author_association": "NONE",
    "body": "@divergencetech how did you set it and use it? Do you mind sharing an example? I have been struggling with figuring out why a contract call is not executing properly in the `SimulatedBackend`, debug tracing would (I presume) be helpful, but I cannot figure out how to set it.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1067036209/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
