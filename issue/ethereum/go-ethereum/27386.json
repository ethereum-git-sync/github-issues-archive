{
  "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/27386",
  "repository_url": "https://api.github.com/repos/ethereum/go-ethereum",
  "labels_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/27386/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/27386/comments",
  "events_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/27386/events",
  "html_url": "https://github.com/ethereum/go-ethereum/issues/27386",
  "id": 1732423852,
  "node_id": "I_kwDOAOvK985nQrCs",
  "number": 27386,
  "title": "Spike in goroutines when CL blocked on setting new head",
  "user": {
    "login": "s1na",
    "id": 1591639,
    "node_id": "MDQ6VXNlcjE1OTE2Mzk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1591639?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/s1na",
    "html_url": "https://github.com/s1na",
    "followers_url": "https://api.github.com/users/s1na/followers",
    "following_url": "https://api.github.com/users/s1na/following{/other_user}",
    "gists_url": "https://api.github.com/users/s1na/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/s1na/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/s1na/subscriptions",
    "organizations_url": "https://api.github.com/users/s1na/orgs",
    "repos_url": "https://api.github.com/users/s1na/repos",
    "events_url": "https://api.github.com/users/s1na/events{/privacy}",
    "received_events_url": "https://api.github.com/users/s1na/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 72233650,
      "node_id": "MDU6TGFiZWw3MjIzMzY1MA==",
      "url": "https://api.github.com/repos/ethereum/go-ethereum/labels/type:bug",
      "name": "type:bug",
      "color": "FF5E5E",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": {
    "login": "karalabe",
    "id": 129561,
    "node_id": "MDQ6VXNlcjEyOTU2MQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/129561?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/karalabe",
    "html_url": "https://github.com/karalabe",
    "followers_url": "https://api.github.com/users/karalabe/followers",
    "following_url": "https://api.github.com/users/karalabe/following{/other_user}",
    "gists_url": "https://api.github.com/users/karalabe/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/karalabe/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/karalabe/subscriptions",
    "organizations_url": "https://api.github.com/users/karalabe/orgs",
    "repos_url": "https://api.github.com/users/karalabe/repos",
    "events_url": "https://api.github.com/users/karalabe/events{/privacy}",
    "received_events_url": "https://api.github.com/users/karalabe/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "karalabe",
      "id": 129561,
      "node_id": "MDQ6VXNlcjEyOTU2MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/129561?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/karalabe",
      "html_url": "https://github.com/karalabe",
      "followers_url": "https://api.github.com/users/karalabe/followers",
      "following_url": "https://api.github.com/users/karalabe/following{/other_user}",
      "gists_url": "https://api.github.com/users/karalabe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/karalabe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/karalabe/subscriptions",
      "organizations_url": "https://api.github.com/users/karalabe/orgs",
      "repos_url": "https://api.github.com/users/karalabe/repos",
      "events_url": "https://api.github.com/users/karalabe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/karalabe/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 6,
  "created_at": "2023-05-30T14:45:40Z",
  "updated_at": "2023-05-31T10:18:07Z",
  "closed_at": null,
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "When CL requests setting new head which involves processing many blocks, during this time CL will keep sending other requests which pile up as goroutines until the stuck routine is released. This shows in the charts here:\r\n\r\n<img width=\"325\" alt=\"Screenshot 2023-05-30 at 16 30 12\" src=\"https://github.com/ethereum/go-ethereum/assets/1591639/0a0745df-a0b9-42ed-b617-5e066892bed3\">\r\n<img width=\"385\" alt=\"Screenshot 2023-05-30 at 16 30 34\" src=\"https://github.com/ethereum/go-ethereum/assets/1591639/2790a4a4-2d52-40bc-9fa3-2c2bdfd7a433\">\r\n\r\nThis is where the first request gets stuck:\r\n\r\n```\r\ngoroutine 60 [semacquire, 20 minutes]:\r\nsync.runtime_Semacquire(0xde9fc0?)\r\n        runtime/sema.go:62 +0x25\r\nsync.(*WaitGroup).Wait(0xc015094680?)\r\n        sync/waitgroup.go:139 +0x52\r\ngithub.com/ethereum/go-ethereum/eth/downloader.(*Downloader).Cancel(0xc015094680)\r\n        github.com/ethereum/go-ethereum/eth/downloader/downloader.go:700 +0x30\r\ngithub.com/ethereum/go-ethereum/eth/downloader.(*beaconBackfiller).suspend(0xc01f27e580)\r\n        github.com/ethereum/go-ethereum/eth/downloader/beaconsync.go:74 +0xb9\r\ngithub.com/ethereum/go-ethereum/eth/downloader.(*skeleton).sync.func3()\r\n        github.com/ethereum/go-ethereum/eth/downloader/skeleton.go:370 +0x2f\r\ngithub.com/ethereum/go-ethereum/eth/downloader.(*skeleton).sync(0xc00daacb60, 0xc0add9a240?)\r\n        github.com/ethereum/go-ethereum/eth/downloader/skeleton.go:448 +0xed3\r\ngithub.com/ethereum/go-ethereum/eth/downloader.(*skeleton).startup(0xc00daacb60)\r\n        github.com/ethereum/go-ethereum/eth/downloader/skeleton.go:271 +0x211\r\ncreated by github.com/ethereum/go-ethereum/eth/downloader.newSkeleton\r\n        github.com/ethereum/go-ethereum/eth/downloader/skeleton.go:233 +0x1da\r\n ```\r\n \r\nThis is where the rest of them are locked out:\r\n\r\n```\r\ngoroutine 155145 [semacquire, 3 minutes]:\r\nsync.runtime_SemacquireMutex(0x0?, 0xe0?, 0x20?)\r\n        runtime/sema.go:77 +0x25\r\nsync.(*Mutex).lockSlow(0xc001946138)\r\n        sync/mutex.go:171 +0x165\r\nsync.(*Mutex).Lock(...)\r\n        sync/mutex.go:90\r\ngithub.com/ethereum/go-ethereum/eth/catalyst.(*ConsensusAPI).newPayload(_, {{0xf6, 0xc8, 0xc4, 0x45, 0x37, 0xbd, 0xc4, 0x50, 0x47, ...}, ...})\r\n        github.com/ethereum/go-ethereum/eth/catalyst/api.go:450 +0x91\r\ngithub.com/ethereum/go-ethereum/eth/catalyst.(*ConsensusAPI).NewPayloadV2(_, {{0xf6, 0xc8, 0xc4, 0x45, 0x37, 0xbd, 0xc4, 0x50, 0x47, ...}, ...})\r\n        github.com/ethereum/go-ethereum/eth/catalyst/api.go:433 +0x178\r\n```",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/27386/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/27386/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1569561552",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/27386#issuecomment-1569561552",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/27386",
    "id": 1569561552,
    "node_id": "IC_kwDOAOvK985djZvQ",
    "user": {
      "login": "holiman",
      "id": 142290,
      "node_id": "MDQ6VXNlcjE0MjI5MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/142290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/holiman",
      "html_url": "https://github.com/holiman",
      "followers_url": "https://api.github.com/users/holiman/followers",
      "following_url": "https://api.github.com/users/holiman/following{/other_user}",
      "gists_url": "https://api.github.com/users/holiman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/holiman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/holiman/subscriptions",
      "organizations_url": "https://api.github.com/users/holiman/orgs",
      "repos_url": "https://api.github.com/users/holiman/repos",
      "events_url": "https://api.github.com/users/holiman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/holiman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-31T06:18:00Z",
    "updated_at": "2023-05-31T06:18:00Z",
    "author_association": "MEMBER",
    "body": "Here are two benchmarker machines that are doing a full-sync\r\n\r\n![Screenshot 2023-05-31 at 08-17-08 Dual Geth - Grafana](https://github.com/ethereum/go-ethereum/assets/142290/c9ffe53c-dd0b-4b09-9cad-68c497aec41d)\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1569561552/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1569564209",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/27386#issuecomment-1569564209",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/27386",
    "id": 1569564209,
    "node_id": "IC_kwDOAOvK985djaYx",
    "user": {
      "login": "holiman",
      "id": 142290,
      "node_id": "MDQ6VXNlcjE0MjI5MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/142290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/holiman",
      "html_url": "https://github.com/holiman",
      "followers_url": "https://api.github.com/users/holiman/followers",
      "following_url": "https://api.github.com/users/holiman/following{/other_user}",
      "gists_url": "https://api.github.com/users/holiman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/holiman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/holiman/subscriptions",
      "organizations_url": "https://api.github.com/users/holiman/orgs",
      "repos_url": "https://api.github.com/users/holiman/repos",
      "events_url": "https://api.github.com/users/holiman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/holiman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-31T06:21:11Z",
    "updated_at": "2023-05-31T06:21:11Z",
    "author_association": "MEMBER",
    "body": "Sorry, my bad, only the yellow one is doing a full-sync, the green one is already synced (via snap). No idea what the green goroutine-spikes are all about",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1569564209/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1569754617",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/27386#issuecomment-1569754617",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/27386",
    "id": 1569754617,
    "node_id": "IC_kwDOAOvK985dkI35",
    "user": {
      "login": "karalabe",
      "id": 129561,
      "node_id": "MDQ6VXNlcjEyOTU2MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/129561?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/karalabe",
      "html_url": "https://github.com/karalabe",
      "followers_url": "https://api.github.com/users/karalabe/followers",
      "following_url": "https://api.github.com/users/karalabe/following{/other_user}",
      "gists_url": "https://api.github.com/users/karalabe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/karalabe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/karalabe/subscriptions",
      "organizations_url": "https://api.github.com/users/karalabe/orgs",
      "repos_url": "https://api.github.com/users/karalabe/repos",
      "events_url": "https://api.github.com/users/karalabe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/karalabe/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-31T08:41:59Z",
    "updated_at": "2023-05-31T08:41:59Z",
    "author_association": "MEMBER",
    "body": "Huh, interestingly, I thought the issue is in the downloader, but in reality it's unrelated.\r\n\r\nIf the blockchain is busy importing blocks (or compacting or whatever), then all newPayload calls will block. It's even written in the method doc :D \r\n\r\n```\r\n\t// 1. NewPayload( execdata-N ) is invoked from the CL. It goes all the way down to\r\n\t//      api.eth.BlockChain().InsertBlockWithoutSetHead, where it is blocked on\r\n\t//      e.g database compaction.\r\n```\r\n\r\nSo it's not an unforseen issue, just a non-cared-about issue because I guess we didn't expect a previous chain insertion to keep the (blockchain) lock for 15 mins.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1569754617/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1569763531",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/27386#issuecomment-1569763531",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/27386",
    "id": 1569763531,
    "node_id": "IC_kwDOAOvK985dkLDL",
    "user": {
      "login": "karalabe",
      "id": 129561,
      "node_id": "MDQ6VXNlcjEyOTU2MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/129561?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/karalabe",
      "html_url": "https://github.com/karalabe",
      "followers_url": "https://api.github.com/users/karalabe/followers",
      "following_url": "https://api.github.com/users/karalabe/following{/other_user}",
      "gists_url": "https://api.github.com/users/karalabe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/karalabe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/karalabe/subscriptions",
      "organizations_url": "https://api.github.com/users/karalabe/orgs",
      "repos_url": "https://api.github.com/users/karalabe/repos",
      "events_url": "https://api.github.com/users/karalabe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/karalabe/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-31T08:46:22Z",
    "updated_at": "2023-05-31T08:46:22Z",
    "author_association": "MEMBER",
    "body": "Hmm, if the chain is still way behind and we're getting blocks with missing parents, we should detect that directly though the database and should not hit the chain importer at all. In that case we might get stuck on BeaconExtend. Would need a bit more stack dump to confirm.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1569763531/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1569894886",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/27386#issuecomment-1569894886",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/27386",
    "id": 1569894886,
    "node_id": "IC_kwDOAOvK985dkrHm",
    "user": {
      "login": "karalabe",
      "id": 129561,
      "node_id": "MDQ6VXNlcjEyOTU2MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/129561?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/karalabe",
      "html_url": "https://github.com/karalabe",
      "followers_url": "https://api.github.com/users/karalabe/followers",
      "following_url": "https://api.github.com/users/karalabe/following{/other_user}",
      "gists_url": "https://api.github.com/users/karalabe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/karalabe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/karalabe/subscriptions",
      "organizations_url": "https://api.github.com/users/karalabe/orgs",
      "repos_url": "https://api.github.com/users/karalabe/repos",
      "events_url": "https://api.github.com/users/karalabe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/karalabe/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-31T10:06:49Z",
    "updated_at": "2023-05-31T10:06:49Z",
    "author_association": "MEMBER",
    "body": "Seems the issue is quite convoluted and surfaced by a faulty beacon updater (factor round robining a batch of good and one bad beacon client).\r\n\r\nThe triggering behavior is that the beacon client feeding the head updates periodically sent an old update, causing very frequent reorgs to be triggered by the benchmarkers.\r\n\r\nWhen a reorg is triggered, a previous sync cycle is cancelled. To prevent discarding a potentially 256MB of cached block data, the downloader will keep importing those blocks (and delaying the cancellation). This delay however will hang the beacon syncer that maintains the skeleton/beacon header chain from shutting down.\r\n\r\nWhile that goroutine is stuck on shutdown (and before it gets a chance to restart with a new head), newPayload beaconExtend requests are not consumed. The suck beaconExtend will hold the newPayload lock, causing subsequent newPayloads to keep piling up.\r\n\r\n---\r\n\r\nIntroducing a force interrupt in the downloader would fix things, but I'm not sure it's healthy to discard downloaded data - since a buggy consensus update (like in this case) would trigger tons of restarts and discarded data.\r\n\r\nOne potential \"dirty\" fix would be to detect the case when the skeleton syncer is unavailable to consume the head update due to trying to restart, and have a hard coded timeout of say 1-3s after which the call just assumes that the we're stuck on catch-up import and return SYNCING blindly.\r\n\r\nIt is a bit wonky to introduce a timeout, maybe we could do without one and just consider the skeleton syncer being offline as this specific scenario. Need to think through what the implications would be in the general runtime case.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1569894886/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1569913613",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/27386#issuecomment-1569913613",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/27386",
    "id": 1569913613,
    "node_id": "IC_kwDOAOvK985dkvsN",
    "user": {
      "login": "holiman",
      "id": 142290,
      "node_id": "MDQ6VXNlcjE0MjI5MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/142290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/holiman",
      "html_url": "https://github.com/holiman",
      "followers_url": "https://api.github.com/users/holiman/followers",
      "following_url": "https://api.github.com/users/holiman/following{/other_user}",
      "gists_url": "https://api.github.com/users/holiman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/holiman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/holiman/subscriptions",
      "organizations_url": "https://api.github.com/users/holiman/orgs",
      "repos_url": "https://api.github.com/users/holiman/repos",
      "events_url": "https://api.github.com/users/holiman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/holiman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-31T10:17:55Z",
    "updated_at": "2023-05-31T10:18:07Z",
    "author_association": "MEMBER",
    "body": "Logs from bench06 (green one), first pretty soon after a drop, the second one after ~5 minutes of ramping up routines. \r\n\r\n[bench06.stacks.txt](https://github.com/ethereum/go-ethereum/files/11611797/bench06.stacks.txt)\r\n[bench06.stacks.2.txt](https://github.com/ethereum/go-ethereum/files/11611796/bench06.stacks.2.txt)\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1569913613/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
