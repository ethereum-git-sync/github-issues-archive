{
  "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/25614",
  "repository_url": "https://api.github.com/repos/ethereum/go-ethereum",
  "labels_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/25614/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/25614/comments",
  "events_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/25614/events",
  "html_url": "https://github.com/ethereum/go-ethereum/issues/25614",
  "id": 1352623181,
  "node_id": "I_kwDOAOvK985Qn2RN",
  "number": 25614,
  "title": "Intent to Implement: Recovery of Missing Logs",
  "user": {
    "login": "wjmelements",
    "id": 799573,
    "node_id": "MDQ6VXNlcjc5OTU3Mw==",
    "avatar_url": "https://avatars.githubusercontent.com/u/799573?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/wjmelements",
    "html_url": "https://github.com/wjmelements",
    "followers_url": "https://api.github.com/users/wjmelements/followers",
    "following_url": "https://api.github.com/users/wjmelements/following{/other_user}",
    "gists_url": "https://api.github.com/users/wjmelements/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/wjmelements/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/wjmelements/subscriptions",
    "organizations_url": "https://api.github.com/users/wjmelements/orgs",
    "repos_url": "https://api.github.com/users/wjmelements/repos",
    "events_url": "https://api.github.com/users/wjmelements/events{/privacy}",
    "received_events_url": "https://api.github.com/users/wjmelements/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 72233652,
      "node_id": "MDU6TGFiZWw3MjIzMzY1Mg==",
      "url": "https://api.github.com/repos/ethereum/go-ethereum/labels/type:feature",
      "name": "type:feature",
      "color": "84b6eb",
      "default": false,
      "description": null
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 9,
  "created_at": "2022-08-26T18:49:50Z",
  "updated_at": "2022-09-19T17:39:43Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "# Rationale\r\n\r\n### Why should this feature exist?\r\nMinor database corruption should be automatically recoverable without resyncing.\r\n### What are the use-cases?\r\nThere is a 831-block gap between the receipts in my ancients and the receipts in leveldb. This prevents freezing.\r\n```\r\nSep 01 17:02:00 pine geth[3250214]: ERROR[09-01|17:02:00.292] Error in block freeze operation          err=\"block receipts missing, can't freeze block 14191561\"\r\n```\r\nBut the gap is from so long ago that I don't want to resync if I don't have to. To my knowledge, `geth removedb` is the official recommended fix for this problem.\r\n\r\n# Implementation\r\n\r\n### Do you have ideas regarding the implementation of this feature?\r\nYes. I plan to detect the missing logs in `ReadReceiptsRLP`. When missing logs are detected, a goroutine will be started to initiate recovery. The boundaries of the missing logs will be found with a binary search and then inserted with `InsertReceiptChain`. I believe I will have to modify Downloader to have an end block or make a separate downloader for this.\r\n\r\n### Are you willing to implement this feature?\r\nYes, and I have started an implementation. I am looking for early feedback on the Downloader approach, so I don't accidentally break my reproducing environment.",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/25614/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/25614/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1228961899",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/25614#issuecomment-1228961899",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/25614",
    "id": 1228961899,
    "node_id": "IC_kwDOAOvK985JQHhr",
    "user": {
      "login": "wjmelements",
      "id": 799573,
      "node_id": "MDQ6VXNlcjc5OTU3Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/799573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wjmelements",
      "html_url": "https://github.com/wjmelements",
      "followers_url": "https://api.github.com/users/wjmelements/followers",
      "following_url": "https://api.github.com/users/wjmelements/following{/other_user}",
      "gists_url": "https://api.github.com/users/wjmelements/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wjmelements/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wjmelements/subscriptions",
      "organizations_url": "https://api.github.com/users/wjmelements/orgs",
      "repos_url": "https://api.github.com/users/wjmelements/repos",
      "events_url": "https://api.github.com/users/wjmelements/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wjmelements/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-26T21:26:01Z",
    "updated_at": "2022-08-26T21:26:01Z",
    "author_association": "CONTRIBUTOR",
    "body": "Besides ancients being kept behind, the log gap also causes a problem when syncing deposits from Eth1 for Eth2.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1228961899/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1230727607",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/25614#issuecomment-1230727607",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/25614",
    "id": 1230727607,
    "node_id": "IC_kwDOAOvK985JW2m3",
    "user": {
      "login": "wjmelements",
      "id": 799573,
      "node_id": "MDQ6VXNlcjc5OTU3Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/799573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wjmelements",
      "html_url": "https://github.com/wjmelements",
      "followers_url": "https://api.github.com/users/wjmelements/followers",
      "following_url": "https://api.github.com/users/wjmelements/following{/other_user}",
      "gists_url": "https://api.github.com/users/wjmelements/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wjmelements/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wjmelements/subscriptions",
      "organizations_url": "https://api.github.com/users/wjmelements/orgs",
      "repos_url": "https://api.github.com/users/wjmelements/repos",
      "events_url": "https://api.github.com/users/wjmelements/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wjmelements/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-29T18:58:33Z",
    "updated_at": "2022-08-29T18:58:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "The trie healer in snap sync doesn't heal receipts. Yet another approach to solving the issue might augment the healer such that it can receive requests to heal receipts. I am not currently pursuing this approach because it seems that the healer is fairly specialized at healing the trie.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1230727607/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1230917740",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/25614#issuecomment-1230917740",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/25614",
    "id": 1230917740,
    "node_id": "IC_kwDOAOvK985JXlBs",
    "user": {
      "login": "wjmelements",
      "id": 799573,
      "node_id": "MDQ6VXNlcjc5OTU3Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/799573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wjmelements",
      "html_url": "https://github.com/wjmelements",
      "followers_url": "https://api.github.com/users/wjmelements/followers",
      "following_url": "https://api.github.com/users/wjmelements/following{/other_user}",
      "gists_url": "https://api.github.com/users/wjmelements/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wjmelements/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wjmelements/subscriptions",
      "organizations_url": "https://api.github.com/users/wjmelements/orgs",
      "repos_url": "https://api.github.com/users/wjmelements/repos",
      "events_url": "https://api.github.com/users/wjmelements/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wjmelements/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-29T22:10:49Z",
    "updated_at": "2022-08-29T22:10:49Z",
    "author_association": "CONTRIBUTOR",
    "body": "To work around the import dependency graph, the precise error I am detecting in `core/rawdb` will likely need to be propagated upward to its consumers, some of whom will report it to the recovery system. So `error` will need to be added to the return of `ReadReceiptsRLP` and its consumers. This will slightly increase the size of my changeset, mostly in the number of files touched.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1230917740/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1231141039",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/25614#issuecomment-1231141039",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/25614",
    "id": 1231141039,
    "node_id": "IC_kwDOAOvK985JYbiv",
    "user": {
      "login": "karalabe",
      "id": 129561,
      "node_id": "MDQ6VXNlcjEyOTU2MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/129561?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/karalabe",
      "html_url": "https://github.com/karalabe",
      "followers_url": "https://api.github.com/users/karalabe/followers",
      "following_url": "https://api.github.com/users/karalabe/following{/other_user}",
      "gists_url": "https://api.github.com/users/karalabe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/karalabe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/karalabe/subscriptions",
      "organizations_url": "https://api.github.com/users/karalabe/orgs",
      "repos_url": "https://api.github.com/users/karalabe/repos",
      "events_url": "https://api.github.com/users/karalabe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/karalabe/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-30T04:57:26Z",
    "updated_at": "2022-08-30T04:57:26Z",
    "author_association": "MEMBER",
    "body": "I'm unsure this is a good idea. If the database is corrupted, something went horribly wrong. It should never get corrupted.\r\n\r\nAdding mechanisms to detect and correctly fix faults will be a huge effort to create and maintain and they will probably never completely cover all the corner cases. In these cases we really should be spending time to figure out what happened and why the gap exists and fix the underlying issue, not the symptom.\r\n\r\nE.g. `ReadReceiptsRLP` can also be useed AFAI by the RPC to request stuff, where you can actually request non existing stuff. Or perhaps already pruned sidechains, or perhaps in the future pruned legacy chain segments. In all these cases, you don't want to trigger a fixup. This is just an example that correctly detecting that data is missing and should not be is already an interesting challenge.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1231141039/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1231885185",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/25614#issuecomment-1231885185",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/25614",
    "id": 1231885185,
    "node_id": "IC_kwDOAOvK985JbROB",
    "user": {
      "login": "wjmelements",
      "id": 799573,
      "node_id": "MDQ6VXNlcjc5OTU3Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/799573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wjmelements",
      "html_url": "https://github.com/wjmelements",
      "followers_url": "https://api.github.com/users/wjmelements/followers",
      "following_url": "https://api.github.com/users/wjmelements/following{/other_user}",
      "gists_url": "https://api.github.com/users/wjmelements/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wjmelements/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wjmelements/subscriptions",
      "organizations_url": "https://api.github.com/users/wjmelements/orgs",
      "repos_url": "https://api.github.com/users/wjmelements/repos",
      "events_url": "https://api.github.com/users/wjmelements/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wjmelements/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-30T16:17:18Z",
    "updated_at": "2022-08-30T16:17:18Z",
    "author_association": "CONTRIBUTOR",
    "body": "> where you can actually request non existing stuff. Or perhaps already pruned sidechains, or perhaps in the future pruned legacy chain segments. In all these cases, you don't want to trigger a fixup\r\n\r\nI think I am handling those cases by only triggering the fixup when the headers in the range are both known and canonical.\r\n\r\nBut you've steered me in another direction: perhaps the repair should be manual, triggered by a `debug_` command. I can still detect and report receipt gaps to the log, but the actual repair would be manual.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1231885185/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1232082590",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/25614#issuecomment-1232082590",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/25614",
    "id": 1232082590,
    "node_id": "IC_kwDOAOvK985JcBae",
    "user": {
      "login": "wjmelements",
      "id": 799573,
      "node_id": "MDQ6VXNlcjc5OTU3Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/799573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wjmelements",
      "html_url": "https://github.com/wjmelements",
      "followers_url": "https://api.github.com/users/wjmelements/followers",
      "following_url": "https://api.github.com/users/wjmelements/following{/other_user}",
      "gists_url": "https://api.github.com/users/wjmelements/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wjmelements/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wjmelements/subscriptions",
      "organizations_url": "https://api.github.com/users/wjmelements/orgs",
      "repos_url": "https://api.github.com/users/wjmelements/repos",
      "events_url": "https://api.github.com/users/wjmelements/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wjmelements/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-30T19:35:38Z",
    "updated_at": "2022-08-30T19:35:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think I know how the gap can happen; the receipts are downloaded after the headers in SnapSync, and while it may be retried on failure, shutdown can happen before then, and if the header chain is complete after snap sync starts again, snap sync won't go looking for missing receipts. Automated recovery would fix the issue, but I am still pursuing the manual approach, to minimize the risk of such automation further corrupting the database.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1232082590/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1232245898",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/25614#issuecomment-1232245898",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/25614",
    "id": 1232245898,
    "node_id": "IC_kwDOAOvK985JcpSK",
    "user": {
      "login": "wjmelements",
      "id": 799573,
      "node_id": "MDQ6VXNlcjc5OTU3Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/799573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wjmelements",
      "html_url": "https://github.com/wjmelements",
      "followers_url": "https://api.github.com/users/wjmelements/followers",
      "following_url": "https://api.github.com/users/wjmelements/following{/other_user}",
      "gists_url": "https://api.github.com/users/wjmelements/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wjmelements/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wjmelements/subscriptions",
      "organizations_url": "https://api.github.com/users/wjmelements/orgs",
      "repos_url": "https://api.github.com/users/wjmelements/repos",
      "events_url": "https://api.github.com/users/wjmelements/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wjmelements/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-30T22:44:31Z",
    "updated_at": "2022-08-30T22:44:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "I don't believe I should use the `receiptTaskPool ` of `downloader.Downloader` because the missing receipts are in the stale range and I don't think `debug_resyncReceiptRange` method should change `queue.resultOffset` since that has its own lifecycle. Safely reducing the `resultOffset` within a normal managed lifecycle would not be good either, since the downloader would sync from this point. So I am favoring a separate downloader (tentatively named Scavenger) specialized for such one-off requests.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1232245898/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1238704163",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/25614#issuecomment-1238704163",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/25614",
    "id": 1238704163,
    "node_id": "IC_kwDOAOvK985J1SAj",
    "user": {
      "login": "wjmelements",
      "id": 799573,
      "node_id": "MDQ6VXNlcjc5OTU3Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/799573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wjmelements",
      "html_url": "https://github.com/wjmelements",
      "followers_url": "https://api.github.com/users/wjmelements/followers",
      "following_url": "https://api.github.com/users/wjmelements/following{/other_user}",
      "gists_url": "https://api.github.com/users/wjmelements/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wjmelements/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wjmelements/subscriptions",
      "organizations_url": "https://api.github.com/users/wjmelements/orgs",
      "repos_url": "https://api.github.com/users/wjmelements/repos",
      "events_url": "https://api.github.com/users/wjmelements/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wjmelements/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-06T22:12:20Z",
    "updated_at": "2022-09-06T22:12:20Z",
    "author_association": "CONTRIBUTOR",
    "body": "A similar issue I am seeing on another node:\r\n```\r\nSep 06 15:09:41 adm geth[1213331]: INFO [09-06|15:09:41.110] Loaded most recent local header          number=15,437,129 hash=6f2521..0d7e54 td=57,516,172,497,790,252,883,625 age=1w22h15m\r\nSep 06 15:09:41 adm geth[1213331]: INFO [09-06|15:09:41.111] Loaded most recent local full block      number=15,437,129 hash=6f2521..0d7e54 td=57,516,172,497,790,252,883,625 age=1w22h15m\r\nSep 06 15:09:41 adm geth[1213331]: INFO [09-06|15:09:41.111] Loaded most recent local fast block      number=15,437,129 hash=6f2521..0d7e54 td=57,516,172,497,790,252,883,625 age=1w22h15m\r\nSep 06 15:09:41 adm geth[1213331]: INFO [09-06|15:09:41.111] Loaded last fast-sync pivot marker       number=15,356,506\r\nSep 06 15:09:41 adm geth[1213331]: WARN [09-06|15:09:41.116] Head state missing, repairing            number=15,437,129 hash=6f2521..0d7e54 snaproot=fdb3ec..80f225\r\nSep 06 15:10:13 adm geth[1213331]: ERROR[09-06|15:10:13.190] Error in block freeze operation          err=\"canonical hash missing, can't freeze block 14793693\"\r\n```\r\nIn this case the canonical hash is missing, which is considerably more severe. I don't plan to fix that in my change.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1238704163/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1251336520",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/25614#issuecomment-1251336520",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/25614",
    "id": 1251336520,
    "node_id": "IC_kwDOAOvK985KleFI",
    "user": {
      "login": "wjmelements",
      "id": 799573,
      "node_id": "MDQ6VXNlcjc5OTU3Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/799573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wjmelements",
      "html_url": "https://github.com/wjmelements",
      "followers_url": "https://api.github.com/users/wjmelements/followers",
      "following_url": "https://api.github.com/users/wjmelements/following{/other_user}",
      "gists_url": "https://api.github.com/users/wjmelements/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wjmelements/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wjmelements/subscriptions",
      "organizations_url": "https://api.github.com/users/wjmelements/orgs",
      "repos_url": "https://api.github.com/users/wjmelements/repos",
      "events_url": "https://api.github.com/users/wjmelements/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wjmelements/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-19T17:39:43Z",
    "updated_at": "2022-09-19T17:39:43Z",
    "author_association": "CONTRIBUTOR",
    "body": "I have a WIP that seemed to work, but later the freezer table ran into another issue where it was missing the canonical hash for some blocks (not the ones previously missing receipts). So it seems the corruption was broader than previously understood.\r\n\r\n> In these cases we really should be spending time to figure out what happened and why the gap exists and fix the underlying issue, not the symptom.\r\n\r\nWhen I was going through the p2p code the mystery widened because it seems that for most (maybe all?) of my peers the receipt bandwidth is 1 per request, so the gap of 831 was less-likely to be just one chunk that was missed or not retried. An entire segment likely wasn't queued for receipt fetching in the first place. I still suspect this is from bad shutdown timing during initial sync.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1251336520/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
