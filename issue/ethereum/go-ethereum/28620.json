{
  "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/28620",
  "repository_url": "https://api.github.com/repos/ethereum/go-ethereum",
  "labels_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/28620/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/28620/comments",
  "events_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/28620/events",
  "html_url": "https://github.com/ethereum/go-ethereum/issues/28620",
  "id": 2014792950,
  "node_id": "I_kwDOAOvK9854F0z2",
  "number": 28620,
  "title": "Switch summaries to histograms?",
  "user": {
    "login": "Aracki",
    "id": 6129986,
    "node_id": "MDQ6VXNlcjYxMjk5ODY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6129986?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Aracki",
    "html_url": "https://github.com/Aracki",
    "followers_url": "https://api.github.com/users/Aracki/followers",
    "following_url": "https://api.github.com/users/Aracki/following{/other_user}",
    "gists_url": "https://api.github.com/users/Aracki/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Aracki/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Aracki/subscriptions",
    "organizations_url": "https://api.github.com/users/Aracki/orgs",
    "repos_url": "https://api.github.com/users/Aracki/repos",
    "events_url": "https://api.github.com/users/Aracki/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Aracki/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 268304226,
      "node_id": "MDU6TGFiZWwyNjgzMDQyMjY=",
      "url": "https://api.github.com/repos/ethereum/go-ethereum/labels/type:docs",
      "name": "type:docs",
      "color": "fef2c0",
      "default": false,
      "description": null
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 5,
  "created_at": "2023-11-28T16:09:11Z",
  "updated_at": "2023-12-07T09:37:24Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "Is there a plan to start using histograms over summaries for RPC duration metrics?\r\n\r\nEven though there are advantages of summaries, I guess it would be big improvement if we can aggregate percentiles over time (especially for checking specific percentiles of specific methods).",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/28620/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/28620/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1835762411",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/28620#issuecomment-1835762411",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/28620",
    "id": 1835762411,
    "node_id": "IC_kwDOAOvK985ta4Lr",
    "user": {
      "login": "holiman",
      "id": 142290,
      "node_id": "MDQ6VXNlcjE0MjI5MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/142290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/holiman",
      "html_url": "https://github.com/holiman",
      "followers_url": "https://api.github.com/users/holiman/followers",
      "following_url": "https://api.github.com/users/holiman/following{/other_user}",
      "gists_url": "https://api.github.com/users/holiman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/holiman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/holiman/subscriptions",
      "organizations_url": "https://api.github.com/users/holiman/orgs",
      "repos_url": "https://api.github.com/users/holiman/repos",
      "events_url": "https://api.github.com/users/holiman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/holiman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-12-01T09:31:06Z",
    "updated_at": "2023-12-01T09:31:06Z",
    "author_association": "MEMBER",
    "body": "What we are using is `ResettingSample`\r\n\r\n```\r\n // ResettingSample converts an ordinary sample into one that resets whenever its\r\n// snapshot is retrieved. This will break for multi-monitor systems, but when only\r\n// a single metric is being pushed out, this ensure that low-frequency events don't\r\n// skew th charts indefinitely.\r\n```\r\nBut we are actually using it to back a histogram: \r\n\r\n```golang\r\n\th := fmt.Sprintf(\"%s/%s/%s\", serveTimeHistName, method, note)\r\n\tsampler := func() metrics.Sample {\r\n\t\treturn metrics.ResettingSample(\r\n\t\t\tmetrics.NewExpDecaySample(1028, 0.015),\r\n\t\t)\r\n\t}\r\n\tmetrics.GetOrRegisterHistogramLazy(h, nil, sampler).Update(elapsed.Microseconds())\r\n}\r\n```\r\nSo we _are_ aleady using histograms. \r\n\r\nCould you be more specific as to what you would like to be different? \r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1835762411/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1836307112",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/28620#issuecomment-1836307112",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/28620",
    "id": 1836307112,
    "node_id": "IC_kwDOAOvK985tc9Ko",
    "user": {
      "login": "Aracki",
      "id": 6129986,
      "node_id": "MDQ6VXNlcjYxMjk5ODY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6129986?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Aracki",
      "html_url": "https://github.com/Aracki",
      "followers_url": "https://api.github.com/users/Aracki/followers",
      "following_url": "https://api.github.com/users/Aracki/following{/other_user}",
      "gists_url": "https://api.github.com/users/Aracki/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Aracki/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Aracki/subscriptions",
      "organizations_url": "https://api.github.com/users/Aracki/orgs",
      "repos_url": "https://api.github.com/users/Aracki/repos",
      "events_url": "https://api.github.com/users/Aracki/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Aracki/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-12-01T15:28:06Z",
    "updated_at": "2023-12-01T15:29:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "It's still Prometheus Summary and not Histogram (https://prometheus.io/docs/practices/histograms/).\r\n\r\nWe'd like geth start using Histograms like we have for Lighthouse for example. \r\n\r\nAll the `beacon_block_processing_.*_bucket` metrics have `le` label which enable us to use [`histogram_quantile`](https://prometheus.io/docs/prometheus/latest/querying/functions/#histogram_quantile) Prometheus function to calculate percentiles on Server (Prometheus) side.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1836307112/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1838062154",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/28620#issuecomment-1838062154",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/28620",
    "id": 1838062154,
    "node_id": "IC_kwDOAOvK985tjppK",
    "user": {
      "login": "holiman",
      "id": 142290,
      "node_id": "MDQ6VXNlcjE0MjI5MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/142290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/holiman",
      "html_url": "https://github.com/holiman",
      "followers_url": "https://api.github.com/users/holiman/followers",
      "following_url": "https://api.github.com/users/holiman/following{/other_user}",
      "gists_url": "https://api.github.com/users/holiman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/holiman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/holiman/subscriptions",
      "organizations_url": "https://api.github.com/users/holiman/orgs",
      "repos_url": "https://api.github.com/users/holiman/repos",
      "events_url": "https://api.github.com/users/holiman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/holiman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-12-04T08:31:42Z",
    "updated_at": "2023-12-04T08:31:42Z",
    "author_association": "MEMBER",
    "body": "Sorry, even after skimming through the prometheus docs, I still don't fully know exactly what the difference is, over the wire. If you have an example of either where we already have it, or how the over-the-wire message would look, then we can figure out what the corresponding meter is.  ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1838062154/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1838487111",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/28620#issuecomment-1838487111",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/28620",
    "id": 1838487111,
    "node_id": "IC_kwDOAOvK985tlRZH",
    "user": {
      "login": "Aracki",
      "id": 6129986,
      "node_id": "MDQ6VXNlcjYxMjk5ODY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6129986?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Aracki",
      "html_url": "https://github.com/Aracki",
      "followers_url": "https://api.github.com/users/Aracki/followers",
      "following_url": "https://api.github.com/users/Aracki/following{/other_user}",
      "gists_url": "https://api.github.com/users/Aracki/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Aracki/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Aracki/subscriptions",
      "organizations_url": "https://api.github.com/users/Aracki/orgs",
      "repos_url": "https://api.github.com/users/Aracki/repos",
      "events_url": "https://api.github.com/users/Aracki/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Aracki/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-12-04T11:57:54Z",
    "updated_at": "2023-12-04T11:57:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "Actually in Geth I don't see any Histograms used. All things in code called Histograms are actually Summaries. That should be changed which will cause confusion in future. \r\n\r\nIf we switch to histograms, for each method we would have something like:\r\n```\r\nrpc_duration{method=\"eth_getBalance\", le=\"1\"}\r\nrpc_duration{method=\"eth_getBalance\", le=\"3\"}\r\nrpc_duration{method=\"eth_getBalance\", le=\"10\"}\r\nrpc_duration{method=\"eth_getBalance\", le=\"50\"}\r\nrpc_duration{method=\"eth_getBalance\", le=\"100\"}\r\nrpc_duration{method=\"eth_getBalance\", le=\"1000\"}\r\n...\r\n```\r\n\r\nThat way, observations are very cheap on Geth side as it only needs to increment counters. For each rpc request which took less than <1ns (le=less equal), it will just increment counter for bucket `le=1` and so on.\r\n\r\nThen on server side (Prometheus), we could calculate P95 with:\r\n```\r\nhistogram_quantile(0.95, sum(rate(rpc_duration{method=\"eth_getBalance\"}[5m]) >= 0) by (le))\r\n```\r\n\r\nThat comes with a lot of advantages and flexibility on server side as explained. Another comparison table taken from https://www.timescale.com/blog/four-types-prometheus-metrics-to-collect/ can be useful to easily understand the differences. Histograms are preferred way over Summaries.\r\n\r\n<img width=\"736\" alt=\"image\" src=\"https://github.com/ethereum/go-ethereum/assets/6129986/67c4e92b-f83a-4ab9-9d53-dfcae3ac4b58\">\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1838487111/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1845002785",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/28620#issuecomment-1845002785",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/28620",
    "id": 1845002785,
    "node_id": "IC_kwDOAOvK985t-IIh",
    "user": {
      "login": "fjl",
      "id": 6915,
      "node_id": "MDQ6VXNlcjY5MTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6915?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjl",
      "html_url": "https://github.com/fjl",
      "followers_url": "https://api.github.com/users/fjl/followers",
      "following_url": "https://api.github.com/users/fjl/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjl/subscriptions",
      "organizations_url": "https://api.github.com/users/fjl/orgs",
      "repos_url": "https://api.github.com/users/fjl/repos",
      "events_url": "https://api.github.com/users/fjl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjl/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-12-07T09:36:45Z",
    "updated_at": "2023-12-07T09:37:24Z",
    "author_association": "MEMBER",
    "body": "@Aracki is right, the go-ethereum metrics package histograms are a bit weird and do not get exported in the right way to make them usable as histograms within Prometheus. Instead, we do the aggregation on the client side and only export the p99, p999, p9999 properties as plain values. I stumbled on this before but couldn't figure out how to fix it. It's not easy to fix because the structure of the metrics library isn't set up correctly for this.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1845002785/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
