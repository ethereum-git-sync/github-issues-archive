{
  "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/27714",
  "repository_url": "https://api.github.com/repos/ethereum/go-ethereum",
  "labels_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/27714/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/27714/comments",
  "events_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/27714/events",
  "html_url": "https://github.com/ethereum/go-ethereum/issues/27714",
  "id": 1802090148,
  "node_id": "I_kwDOAOvK985rabak",
  "number": 27714,
  "title": "\"panic: invalid transaction v, r, s values\" for valid transaction",
  "user": {
    "login": "ethissue",
    "id": 138940395,
    "node_id": "U_kgDOCEgP6w",
    "avatar_url": "https://avatars.githubusercontent.com/u/138940395?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ethissue",
    "html_url": "https://github.com/ethissue",
    "followers_url": "https://api.github.com/users/ethissue/followers",
    "following_url": "https://api.github.com/users/ethissue/following{/other_user}",
    "gists_url": "https://api.github.com/users/ethissue/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ethissue/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ethissue/subscriptions",
    "organizations_url": "https://api.github.com/users/ethissue/orgs",
    "repos_url": "https://api.github.com/users/ethissue/repos",
    "events_url": "https://api.github.com/users/ethissue/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ethissue/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 72233650,
      "node_id": "MDU6TGFiZWw3MjIzMzY1MA==",
      "url": "https://api.github.com/repos/ethereum/go-ethereum/labels/type:bug",
      "name": "type:bug",
      "color": "FF5E5E",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 7,
  "created_at": "2023-07-13T03:32:56Z",
  "updated_at": "2023-07-14T08:49:50Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "#### System information\r\n\r\nGeth version: v1.12.0 as library\r\nCL client & version: -\r\nOS & Version: Linux & macOS\r\nCommit hash : v1.12.0\r\n\r\n#### Expected behaviour\r\n\r\nA valid transaction stored in a block on the mainnet should be parseable.\r\n\r\n#### Actual behaviour\r\n\r\n```client.getTransactionByHash``` panics for a valid transaction stored in a block on the mainnet with ```panic: invalid transaction v, r, s values```\r\n\r\nSame thing happens for this particular transaction with the popular ethers.js library, [this](https://github.com/ethers-io/ethers.js/issues/4223) issue.\r\n\r\n#### Steps to reproduce the behaviour\r\n\r\nComplete, ready to run copy-paste code:\r\n\r\n```sh\r\n#!/bin/sh\r\n\r\n# SET TMP PROJECT PATH\r\nTMP_PATH=/tmp/ethissue\r\n\r\n# CREATE CLEAN TMP PROJECT WITH VERSION TO BE TESTED\r\nrm -rf $TMP_PATH\r\nmkdir -p $TMP_PATH\r\ncd $TMP_PATH\r\ngo mod init ethissue\r\n\r\n# WRITE TEST SCRIPT\r\ncat <<EOF > \"${TMP_PATH}/main.go\"\r\npackage main\r\n\r\nimport (\r\n  \"context\"\r\n  \"fmt\"\r\n\r\n  \"github.com/ethereum/go-ethereum/common\"\r\n  \"github.com/ethereum/go-ethereum/core/types\"\r\n  \"github.com/ethereum/go-ethereum/ethclient\"\r\n)\r\n\r\nfunc main() {\r\n  client, _ := ethclient.Dial(\"https://eth.llamarpc.com\")\r\n\r\n  // previous transaction in relation to the bad tx (block 100,019)\r\n  goodTxBefore, _, err := client.TransactionByHash(context.Background(), common.HexToHash(\"0x6d837b8496d4ae6bfad610e6647cc66faa2d1f3676f2fca24174c1c7cc1bb233\"))\r\n  if err != nil {\r\n    panic(err)\r\n  }\r\n  sender, err := types.Sender(types.LatestSignerForChainID(goodTxBefore.ChainId()), goodTxBefore)\r\n  if err != nil {\r\n    panic(err)\r\n  }\r\n  fmt.Println(sender)\r\n\r\n  // next transaction in relation to the bad tx (block 100,031)\r\n  goodTxAfter, _, err := client.TransactionByHash(context.Background(), common.HexToHash(\"0x92fd0b59813c1ed4ee485414a9545edfb701fc1e81ed252e00484895637c4a3f\"))\r\n  if err != nil {\r\n    panic(err)\r\n  }\r\n  sender, err = types.Sender(types.LatestSignerForChainID(goodTxAfter.ChainId()), goodTxAfter)\r\n  if err != nil {\r\n    panic(err)\r\n  }\r\n  fmt.Println(sender)\r\n\r\n  // bad transaction (block 100,023)\r\n  badTxBetween2goodTxes, _, err := client.TransactionByHash(context.Background(), common.HexToHash(\"0xce8a2163e2563c7fc783371985fff9fd8194d7e27c4be1adb06520ca2e816e9a\"))\r\n  if err != nil {\r\n    panic(err)\r\n  }\r\n  sender, err = types.Sender(types.LatestSignerForChainID(badTxBetween2goodTxes.ChainId()), badTxBetween2goodTxes)\r\n  if err != nil {\r\n    panic(err)\r\n  }\r\n  fmt.Println(sender)\r\n}\r\nEOF\r\n\r\n# FETCH DEPS\r\ngo get\r\n\r\n# RUN AND INSPECT OUTPUT\r\ngo run \"${TMP_PATH}/main.go\"\r\n\r\n```\r\n\r\n#### Backtrace\r\n\r\n````\r\ngithub.com/ethereum/go-ethereum/core/types.recoverPlain (/gopath/pkg/mod/github.com/ethereum/go-ethereum@v1.12.0/core/types/transaction_signing.go:564)\r\ngithub.com/ethereum/go-ethereum/core/types.HomesteadSigner.Sender (/gopath/pkg/mod/github.com/ethereum/go-ethereum@v1.12.0/core/types/transaction_signing.go:501)\r\ngithub.com/ethereum/go-ethereum/core/types.eip2930Signer.Sender (/gopath/pkg/mod/github.com/ethereum/go-ethereum@v1.12.0/core/types/transaction_signing.go:335)\r\ngithub.com/ethereum/go-ethereum/core/types.londonSigner.Sender (/gopath/pkg/mod/github.com/ethereum/go-ethereum@v1.12.0/core/types/transaction_signing.go:260)\r\ngithub.com/ethereum/go-ethereum/core/types.cancunSigner.Sender (/gopath/pkg/mod/github.com/ethereum/go-ethereum@v1.12.0/core/types/transaction_signing.go:192)\r\ngithub.com/ethereum/go-ethereum/core/types.(*cancunSigner).Sender (:1)\r\ngithub.com/ethereum/go-ethereum/core/types.Sender (/gopath/pkg/mod/github.com/ethereum/go-ethereum@v1.12.0/core/types/transaction_signing.go:147)\r\nmain.safeBlockArchiver (/project/scraper/safeblockarchiver.go:77)\r\n````\r\n\r\nWhen submitting logs: please submit them as text and not screenshots.\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/27714/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/27714/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1633601828",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/27714#issuecomment-1633601828",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/27714",
    "id": 1633601828,
    "node_id": "IC_kwDOAOvK985hXskk",
    "user": {
      "login": "karalabe",
      "id": 129561,
      "node_id": "MDQ6VXNlcjEyOTU2MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/129561?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/karalabe",
      "html_url": "https://github.com/karalabe",
      "followers_url": "https://api.github.com/users/karalabe/followers",
      "following_url": "https://api.github.com/users/karalabe/following{/other_user}",
      "gists_url": "https://api.github.com/users/karalabe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/karalabe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/karalabe/subscriptions",
      "organizations_url": "https://api.github.com/users/karalabe/orgs",
      "repos_url": "https://api.github.com/users/karalabe/repos",
      "events_url": "https://api.github.com/users/karalabe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/karalabe/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-07-13T06:01:59Z",
    "updated_at": "2023-07-13T06:01:59Z",
    "author_association": "MEMBER",
    "body": "Seems your source data is corrupted if both Geth and Ethers complains that it's bad? Please send us the RLP encoded transaction so we may take a look.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1633601828/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1633604703",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/27714#issuecomment-1633604703",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/27714",
    "id": 1633604703,
    "node_id": "IC_kwDOAOvK985hXtRf",
    "user": {
      "login": "karalabe",
      "id": 129561,
      "node_id": "MDQ6VXNlcjEyOTU2MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/129561?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/karalabe",
      "html_url": "https://github.com/karalabe",
      "followers_url": "https://api.github.com/users/karalabe/followers",
      "following_url": "https://api.github.com/users/karalabe/following{/other_user}",
      "gists_url": "https://api.github.com/users/karalabe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/karalabe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/karalabe/subscriptions",
      "organizations_url": "https://api.github.com/users/karalabe/orgs",
      "repos_url": "https://api.github.com/users/karalabe/repos",
      "events_url": "https://api.github.com/users/karalabe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/karalabe/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-07-13T06:05:12Z",
    "updated_at": "2023-07-13T06:05:12Z",
    "author_association": "MEMBER",
    "body": "Ah, your code is runnable as is, will take a look.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1633604703/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1633638560",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/27714#issuecomment-1633638560",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/27714",
    "id": 1633638560,
    "node_id": "IC_kwDOAOvK985hX1ig",
    "user": {
      "login": "karalabe",
      "id": 129561,
      "node_id": "MDQ6VXNlcjEyOTU2MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/129561?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/karalabe",
      "html_url": "https://github.com/karalabe",
      "followers_url": "https://api.github.com/users/karalabe/followers",
      "following_url": "https://api.github.com/users/karalabe/following{/other_user}",
      "gists_url": "https://api.github.com/users/karalabe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/karalabe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/karalabe/subscriptions",
      "organizations_url": "https://api.github.com/users/karalabe/orgs",
      "repos_url": "https://api.github.com/users/karalabe/repos",
      "events_url": "https://api.github.com/users/karalabe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/karalabe/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-07-13T06:36:06Z",
    "updated_at": "2023-07-13T06:45:57Z",
    "author_association": "MEMBER",
    "body": "Ok, I now kind of understand where the issue comes from.\r\n\r\n`types.LatestSignerForChainID` will create the latest supported signer with the caveat that if you do provide a chain ID, it will be the latest hard fork, and if you don't, it will be the latest that still operated on non-replay protected transactions (Homestead). In either case however, it will never be a Frontier signer.\r\n\r\nNow, the quirk is that in Frontier (the initial Ethereum release), there was an ambiguity in the signatures and 2 different signatures could be valid for certain txs. That wasn't really an issue in itself, but it was annoying that the same tx could have 2 hashes based on how it's signed, so the signature scheme was fixed in Homestead to only allow one of the two possible variations.\r\n\r\nThis specific signature has the \"wrong\" variation that is valid in Frontier (the phase the chain is in during the inclusion block), but is invalid in Homestead on onward (the signer that LatestSignerForChainID constructs).\r\n\r\nNow how to fix this? Well, if you know which block a specific transaction belongs to, you could use `types.MakeSigner`, which will not blindly try to guess a most permissive signer, rather will use the one requested for the specific block.\r\n\r\nIf you don't know, it's a bit interesting, we'll have to consider whether to swap out the behavior of this method to use the Frontier signer perhaps, but unsure what the implications are, so will get back on that (cc @fjl @holiman).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1633638560/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1633667671",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/27714#issuecomment-1633667671",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/27714",
    "id": 1633667671,
    "node_id": "IC_kwDOAOvK985hX8pX",
    "user": {
      "login": "karalabe",
      "id": 129561,
      "node_id": "MDQ6VXNlcjEyOTU2MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/129561?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/karalabe",
      "html_url": "https://github.com/karalabe",
      "followers_url": "https://api.github.com/users/karalabe/followers",
      "following_url": "https://api.github.com/users/karalabe/following{/other_user}",
      "gists_url": "https://api.github.com/users/karalabe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/karalabe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/karalabe/subscriptions",
      "organizations_url": "https://api.github.com/users/karalabe/orgs",
      "repos_url": "https://api.github.com/users/karalabe/repos",
      "events_url": "https://api.github.com/users/karalabe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/karalabe/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-07-13T06:54:02Z",
    "updated_at": "2023-07-13T06:54:22Z",
    "author_association": "MEMBER",
    "body": "Note, you can still explicitly try to recover the signature with `types.FrontierSigner{}` if `types.LatestSignerForChainID` fails to do so (and you would also have the reasoning why it happens), it's just a bit wonky to have to try two methods.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1633667671/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1633908016",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/27714#issuecomment-1633908016",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/27714",
    "id": 1633908016,
    "node_id": "IC_kwDOAOvK985hY3Uw",
    "user": {
      "login": "fjl",
      "id": 6915,
      "node_id": "MDQ6VXNlcjY5MTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6915?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjl",
      "html_url": "https://github.com/fjl",
      "followers_url": "https://api.github.com/users/fjl/followers",
      "following_url": "https://api.github.com/users/fjl/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjl/subscriptions",
      "organizations_url": "https://api.github.com/users/fjl/orgs",
      "repos_url": "https://api.github.com/users/fjl/repos",
      "events_url": "https://api.github.com/users/fjl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjl/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-07-13T09:39:44Z",
    "updated_at": "2023-07-13T09:39:44Z",
    "author_association": "MEMBER",
    "body": "The `TransactionSender` method of ethclient can be used to work around this.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1633908016/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1635042822",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/27714#issuecomment-1635042822",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/27714",
    "id": 1635042822,
    "node_id": "IC_kwDOAOvK985hdMYG",
    "user": {
      "login": "ethissue",
      "id": 138940395,
      "node_id": "U_kgDOCEgP6w",
      "avatar_url": "https://avatars.githubusercontent.com/u/138940395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ethissue",
      "html_url": "https://github.com/ethissue",
      "followers_url": "https://api.github.com/users/ethissue/followers",
      "following_url": "https://api.github.com/users/ethissue/following{/other_user}",
      "gists_url": "https://api.github.com/users/ethissue/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ethissue/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ethissue/subscriptions",
      "organizations_url": "https://api.github.com/users/ethissue/orgs",
      "repos_url": "https://api.github.com/users/ethissue/repos",
      "events_url": "https://api.github.com/users/ethissue/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ethissue/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-07-13T23:13:02Z",
    "updated_at": "2023-07-13T23:13:02Z",
    "author_association": "NONE",
    "body": "> Ok, I now kind of understand where the issue comes from.\r\n> \r\n> `types.LatestSignerForChainID` will create the latest supported signer with the caveat that if you do provide a chain ID, it will be the latest hard fork, and if you don't, it will be the latest that still operated on non-replay protected transactions (Homestead). In either case however, it will never be a Frontier signer.\r\n> \r\n> Now, the quirk is that in Frontier (the initial Ethereum release), there was an ambiguity in the signatures and 2 different signatures could be valid for certain txs. That wasn't really an issue in itself, but it was annoying that the same tx could have 2 hashes based on how it's signed, so the signature scheme was fixed in Homestead to only allow one of the two possible variations.\r\n> \r\n> This specific signature has the \"wrong\" variation that is valid in Frontier (the phase the chain is in during the inclusion block), but is invalid in Homestead on onward (the signer that LatestSignerForChainID constructs).\r\n> \r\n> Now how to fix this? Well, if you know which block a specific transaction belongs to, you could use `types.MakeSigner`, which will not blindly try to guess a most permissive signer, rather will use the one requested for the specific block.\r\n> \r\n> If you don't know, it's a bit interesting, we'll have to consider whether to swap out the behavior of this method to use the Frontier signer perhaps, but unsure what the implications are, so will get back on that (cc @fjl @holiman).\r\n\r\nThank you for the details @karalabe .\r\n\r\nMaybe adding another function like ```types.SenderOfTxInBlock(tx, blockHeight)``` which also takes the blockHeight as a param. Then based on that and the chainID of the TX the sender can be precisely calculated without errors like this, as the correct signer can be determined based on these two params.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1635042822/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1635524917",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/27714#issuecomment-1635524917",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/27714",
    "id": 1635524917,
    "node_id": "IC_kwDOAOvK985hfCE1",
    "user": {
      "login": "karalabe",
      "id": 129561,
      "node_id": "MDQ6VXNlcjEyOTU2MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/129561?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/karalabe",
      "html_url": "https://github.com/karalabe",
      "followers_url": "https://api.github.com/users/karalabe/followers",
      "following_url": "https://api.github.com/users/karalabe/following{/other_user}",
      "gists_url": "https://api.github.com/users/karalabe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/karalabe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/karalabe/subscriptions",
      "organizations_url": "https://api.github.com/users/karalabe/orgs",
      "repos_url": "https://api.github.com/users/karalabe/repos",
      "events_url": "https://api.github.com/users/karalabe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/karalabe/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-07-14T08:49:50Z",
    "updated_at": "2023-07-14T08:49:50Z",
    "author_association": "MEMBER",
    "body": "> Maybe adding another function like types.SenderOfTxInBlock(tx, blockHeight) which also takes the blockHeight as a param.\r\n\r\nThat's what `types.MakeSinger` does. It takes the chain config (which contains the fork definitions so it knows what forks happend at which height) and a block number (for pre-merge forks) and a block timestamp (for post-merge forks).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1635524917/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
