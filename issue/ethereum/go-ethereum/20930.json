{
  "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20930",
  "repository_url": "https://api.github.com/repos/ethereum/go-ethereum",
  "labels_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20930/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20930/comments",
  "events_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20930/events",
  "html_url": "https://github.com/ethereum/go-ethereum/issues/20930",
  "id": 600774317,
  "node_id": "MDU6SXNzdWU2MDA3NzQzMTc=",
  "number": 20930,
  "title": "core: the conditions of reorg are different between writeBlockWithState and WriteHeader",
  "user": {
    "login": "icodezjb",
    "id": 8869892,
    "node_id": "MDQ6VXNlcjg4Njk4OTI=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8869892?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/icodezjb",
    "html_url": "https://github.com/icodezjb",
    "followers_url": "https://api.github.com/users/icodezjb/followers",
    "following_url": "https://api.github.com/users/icodezjb/following{/other_user}",
    "gists_url": "https://api.github.com/users/icodezjb/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/icodezjb/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/icodezjb/subscriptions",
    "organizations_url": "https://api.github.com/users/icodezjb/orgs",
    "repos_url": "https://api.github.com/users/icodezjb/repos",
    "events_url": "https://api.github.com/users/icodezjb/events{/privacy}",
    "received_events_url": "https://api.github.com/users/icodezjb/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2020-04-16T06:12:39Z",
  "updated_at": "2020-06-18T08:21:10Z",
  "closed_at": "2020-06-18T08:21:09Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "Hi there,\r\n\r\non `master` branchï¼Œ I found these\r\n\r\n####  `core/blockchain.go`: in the function `writeBlockWithState`\r\n- conclusion1: if the `block.Number` < `currentBlock.Number`, then reorg `Must Be` ture\r\n```go\r\n        reorg := externTd.Cmp(localTd) > 0\r\n\tcurrentBlock = bc.CurrentBlock()\r\n\tif !reorg && externTd.Cmp(localTd) == 0 {\r\n\t\t// Split same-difficulty blocks by number, then preferentially select\r\n\t\t// the block generated by the local miner as the canonical block.\r\n\t\tif block.NumberU64() < currentBlock.NumberU64() {\r\n\t\t\treorg = true\r\n\t\t} else if block.NumberU64() == currentBlock.NumberU64() {\r\n\t\t\tvar currentPreserve, blockPreserve bool\r\n\t\t\tif bc.shouldPreserve != nil {\r\n\t\t\t\tcurrentPreserve, blockPreserve = bc.shouldPreserve(currentBlock), bc.shouldPreserve(block)\r\n\t\t\t}\r\n\t\t\treorg = !currentPreserve && (blockPreserve || mrand.Float64() < 0.5)\r\n\t\t}\r\n\t}\r\n```\r\n\r\n#### `core/headerchain.go`: in the function `WriteHeader`\r\n- conclusion2: if the `header.Number` < `currentHeader.Number`, then reorg `May Be` ture ,\r\nbecause of `mrand.Float64()`\r\n```go\r\n        // If the total difficulty is higher than our known, add it to the canonical chain\r\n\t// Second clause in the if statement reduces the vulnerability to selfish mining.\r\n\t// Please refer to http://www.cs.cornell.edu/~ie53/publications/btcProcFC.pdf\r\n\tif externTd.Cmp(localTd) > 0 || (externTd.Cmp(localTd) == 0 && mrand.Float64() < 0.5) {\r\n\t\t// If the header can be added into canonical chain, adjust the\r\n\t\t// header chain markers(canonical indexes and head header flag).\r\n\t\t//\r\n\t\t// Note all markers should be written atomically.\r\n\r\n\t\t// Delete any canonical number assignments above the new head\r\n\t\tmarkerBatch := hc.chainDb.NewBatch()\r\n\t\tfor i := number + 1; ; i++ {\r\n\t\t\thash := rawdb.ReadCanonicalHash(hc.chainDb, i)\r\n\t\t\tif hash == (common.Hash{}) {\r\n\t\t\t\tbreak\r\n\t\t\t}\r\n\t\t\trawdb.DeleteCanonicalHash(markerBatch, i)\r\n\t\t}\r\n\r\n\t\t// Overwrite any stale canonical number assignments\r\n\t\tvar (\r\n\t\t\theadHash   = header.ParentHash\r\n\t\t\theadNumber = header.Number.Uint64() - 1\r\n\t\t\theadHeader = hc.GetHeader(headHash, headNumber)\r\n\t\t)\r\n\t\tfor rawdb.ReadCanonicalHash(hc.chainDb, headNumber) != headHash {\r\n\t\t\trawdb.WriteCanonicalHash(markerBatch, headHash, headNumber)\r\n\r\n\t\t\theadHash = headHeader.ParentHash\r\n\t\t\theadNumber = headHeader.Number.Uint64() - 1\r\n\t\t\theadHeader = hc.GetHeader(headHash, headNumber)\r\n\t\t}\r\n\t\t// Extend the canonical chain with the new header\r\n\t\trawdb.WriteCanonicalHash(markerBatch, hash, number)\r\n\t\trawdb.WriteHeadHeaderHash(markerBatch, hash)\r\n\t\tif err := markerBatch.Write(); err != nil {\r\n\t\t\tlog.Crit(\"Failed to write header markers into disk\", \"err\", err)\r\n\t\t}\r\n\t\t// Last step update all in-memory head header markers\r\n\t\thc.currentHeaderHash = hash\r\n\t\thc.currentHeader.Store(types.CopyHeader(header))\r\n\t\theadHeaderGauge.Update(header.Number.Int64())\r\n\r\n\t\tstatus = CanonStatTy\r\n\t} else {\r\n\t\tstatus = SideStatTy\r\n\t}\r\n```\r\n \r\nconclusion1 and conclusion2 are not exactly the same\r\n",
  "closed_by": {
    "login": "rjl493456442",
    "id": 5959481,
    "node_id": "MDQ6VXNlcjU5NTk0ODE=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5959481?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/rjl493456442",
    "html_url": "https://github.com/rjl493456442",
    "followers_url": "https://api.github.com/users/rjl493456442/followers",
    "following_url": "https://api.github.com/users/rjl493456442/following{/other_user}",
    "gists_url": "https://api.github.com/users/rjl493456442/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/rjl493456442/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/rjl493456442/subscriptions",
    "organizations_url": "https://api.github.com/users/rjl493456442/orgs",
    "repos_url": "https://api.github.com/users/rjl493456442/repos",
    "events_url": "https://api.github.com/users/rjl493456442/events{/privacy}",
    "received_events_url": "https://api.github.com/users/rjl493456442/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20930/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20930/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/645861810",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/20930#issuecomment-645861810",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/20930",
    "id": 645861810,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0NTg2MTgxMA==",
    "user": {
      "login": "rjl493456442",
      "id": 5959481,
      "node_id": "MDQ6VXNlcjU5NTk0ODE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5959481?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rjl493456442",
      "html_url": "https://github.com/rjl493456442",
      "followers_url": "https://api.github.com/users/rjl493456442/followers",
      "following_url": "https://api.github.com/users/rjl493456442/following{/other_user}",
      "gists_url": "https://api.github.com/users/rjl493456442/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rjl493456442/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rjl493456442/subscriptions",
      "organizations_url": "https://api.github.com/users/rjl493456442/orgs",
      "repos_url": "https://api.github.com/users/rjl493456442/repos",
      "events_url": "https://api.github.com/users/rjl493456442/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rjl493456442/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-18T08:21:09Z",
    "updated_at": "2020-06-18T08:21:09Z",
    "author_association": "MEMBER",
    "body": "It's fixed by #20931",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/645861810/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
