{
  "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/27499",
  "repository_url": "https://api.github.com/repos/ethereum/go-ethereum",
  "labels_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/27499/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/27499/comments",
  "events_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/27499/events",
  "html_url": "https://github.com/ethereum/go-ethereum/issues/27499",
  "id": 1761359374,
  "node_id": "I_kwDOAOvK985o_DYO",
  "number": 27499,
  "title": "Unpacking indexed arguments of an event log dynamically",
  "user": {
    "login": "yaziciahmet",
    "id": 75089142,
    "node_id": "MDQ6VXNlcjc1MDg5MTQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/75089142?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/yaziciahmet",
    "html_url": "https://github.com/yaziciahmet",
    "followers_url": "https://api.github.com/users/yaziciahmet/followers",
    "following_url": "https://api.github.com/users/yaziciahmet/following{/other_user}",
    "gists_url": "https://api.github.com/users/yaziciahmet/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/yaziciahmet/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/yaziciahmet/subscriptions",
    "organizations_url": "https://api.github.com/users/yaziciahmet/orgs",
    "repos_url": "https://api.github.com/users/yaziciahmet/repos",
    "events_url": "https://api.github.com/users/yaziciahmet/events{/privacy}",
    "received_events_url": "https://api.github.com/users/yaziciahmet/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 268304226,
      "node_id": "MDU6TGFiZWwyNjgzMDQyMjY=",
      "url": "https://api.github.com/repos/ethereum/go-ethereum/labels/type:docs",
      "name": "type:docs",
      "color": "fef2c0",
      "default": false,
      "description": null
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2023-06-16T21:14:51Z",
  "updated_at": "2023-06-20T22:42:58Z",
  "closed_at": "2023-06-20T07:59:46Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "I am trying to parse the logs of a contract in a fully dynamic manner. Meaning that the only thing I have is the abi of the contract, and the filter query to filter out logs. I would like to parse the returned events dynamically. Here is my attempt so far:\r\n\r\n```\r\nfunc (c *Client) getHistoricalEvents(abiStr string, filterQuery ethereum.FilterQuery) ([]map[string]any, error) {\r\n    contractAbi, err := abi.JSON(strings.NewReader(abiStr))\r\n\tif err != nil {\r\n\t\treturn nil, err\r\n\t}\r\n\r\n\tlogs, err := c.client.FilterLogs(c.ctx, filterQuery)\r\n\tif err != nil {\r\n\t\treturn nil, err\r\n\t}\r\n\r\n\t\r\n\tvar events []map[string]any\r\n\tfor _, log := range logs {\r\n\t\tevent := map[string]any{}\r\n\t\tfor _, evInfo := range contractAbi.Events {\r\n\t\t\tif evInfo.ID.Hex() != log.Topics[0].Hex() {\r\n\t\t\t\tcontinue\r\n\t\t\t}\r\n\r\n\t\t\tif err := contractAbi.UnpackIntoMap(event, evInfo.Name, log.Data); err != nil {\r\n\t\t\t\treturn nil, err\r\n\t\t\t}\r\n\r\n\t\t\tindexedArgCount := 0\r\n\t\t\tfor _, arg := range evInfo.Inputs {\r\n\t\t\t\tif arg.Indexed {\r\n\t\t\t\t\t// i + 1 index due to first topic being function signature\r\n\t\t\t\t\tindexedArgCount += 1\r\n\t\t\t\t\tevent[arg.Name] = log.Topics[indexedArgCount].Hex()\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tbreak\r\n\t\t}\r\n\r\n\t\tevents = append(events, event)\r\n\t}\r\n\r\n\treturn events, nil\r\n}\r\n\r\n```\r\n\r\nWhat I am doing above as steps is simply following:\r\n1. Convert and validate that the provided abi is valid\r\n2. Filter logs by the provided filter query\r\n3. Iterate over returned logs\r\n4. Find which event signature matches the log\r\n5. Unpack the log.Data into map, as stated in the docs, this only unpacks the unindexed arguments\r\n6. Range over the input arguments, and add indexed arguments to the map as well\r\n\r\nThere is one thing I want to do. In the loop where I range over the arguments to add the indexed variables into map as well, I add the variables as hex values. I would much prefer if I was able to get the type of the value and do a proper conversion, and set it to the map that way. I see that type Argument has `Type.GetType()` function which returns reflect.Type, but I am not sure how can I utilize that. So my question in a nutshell is, how can I unpack the indexed arguments with types, and not just have the hex value of them?\r\n\r\nThanks for any type of help!",
  "closed_by": {
    "login": "yaziciahmet",
    "id": 75089142,
    "node_id": "MDQ6VXNlcjc1MDg5MTQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/75089142?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/yaziciahmet",
    "html_url": "https://github.com/yaziciahmet",
    "followers_url": "https://api.github.com/users/yaziciahmet/followers",
    "following_url": "https://api.github.com/users/yaziciahmet/following{/other_user}",
    "gists_url": "https://api.github.com/users/yaziciahmet/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/yaziciahmet/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/yaziciahmet/subscriptions",
    "organizations_url": "https://api.github.com/users/yaziciahmet/orgs",
    "repos_url": "https://api.github.com/users/yaziciahmet/repos",
    "events_url": "https://api.github.com/users/yaziciahmet/events{/privacy}",
    "received_events_url": "https://api.github.com/users/yaziciahmet/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/27499/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/27499/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1595577786",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/27499#issuecomment-1595577786",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/27499",
    "id": 1595577786,
    "node_id": "IC_kwDOAOvK985fGpW6",
    "user": {
      "login": "jsvisa",
      "id": 3627395,
      "node_id": "MDQ6VXNlcjM2MjczOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3627395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jsvisa",
      "html_url": "https://github.com/jsvisa",
      "followers_url": "https://api.github.com/users/jsvisa/followers",
      "following_url": "https://api.github.com/users/jsvisa/following{/other_user}",
      "gists_url": "https://api.github.com/users/jsvisa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jsvisa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jsvisa/subscriptions",
      "organizations_url": "https://api.github.com/users/jsvisa/orgs",
      "repos_url": "https://api.github.com/users/jsvisa/repos",
      "events_url": "https://api.github.com/users/jsvisa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jsvisa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-06-17T02:06:06Z",
    "updated_at": "2023-06-17T02:06:06Z",
    "author_association": "CONTRIBUTOR",
    "body": "I see, you want to unpack the indexed params with any typo. AFAIK, you need to declare a golang struct, then unpack topics into a variable that is declared with thia struct",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1595577786/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1595707629",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/27499#issuecomment-1595707629",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/27499",
    "id": 1595707629,
    "node_id": "IC_kwDOAOvK985fHJDt",
    "user": {
      "login": "yaziciahmet",
      "id": 75089142,
      "node_id": "MDQ6VXNlcjc1MDg5MTQy",
      "avatar_url": "https://avatars.githubusercontent.com/u/75089142?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yaziciahmet",
      "html_url": "https://github.com/yaziciahmet",
      "followers_url": "https://api.github.com/users/yaziciahmet/followers",
      "following_url": "https://api.github.com/users/yaziciahmet/following{/other_user}",
      "gists_url": "https://api.github.com/users/yaziciahmet/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yaziciahmet/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yaziciahmet/subscriptions",
      "organizations_url": "https://api.github.com/users/yaziciahmet/orgs",
      "repos_url": "https://api.github.com/users/yaziciahmet/repos",
      "events_url": "https://api.github.com/users/yaziciahmet/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yaziciahmet/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-06-17T10:54:53Z",
    "updated_at": "2023-06-17T11:06:28Z",
    "author_association": "NONE",
    "body": "Yes, but the thing is, I want to be able to do this in a dynamic manner. With the application I am building, the contract is provided as user input and I have no way of knowing into what struct I should unpack to at compile time. That is why I am using `UnpackIntoMap` in the first place. But that function only unpacks nonindexed arguments. Hence, I am going over `evInfo.Inputs`, and matching the indexed arguments with their respective index in the `log.Topics` slice. But I don't have any type information with this way. I only have the hex value, and I don't know how can I ensure and convert to its corresponding data type.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1595707629/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1598050900",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/27499#issuecomment-1598050900",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/27499",
    "id": 1598050900,
    "node_id": "IC_kwDOAOvK985fQFJU",
    "user": {
      "login": "jsvisa",
      "id": 3627395,
      "node_id": "MDQ6VXNlcjM2MjczOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3627395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jsvisa",
      "html_url": "https://github.com/jsvisa",
      "followers_url": "https://api.github.com/users/jsvisa/followers",
      "following_url": "https://api.github.com/users/jsvisa/following{/other_user}",
      "gists_url": "https://api.github.com/users/jsvisa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jsvisa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jsvisa/subscriptions",
      "organizations_url": "https://api.github.com/users/jsvisa/orgs",
      "repos_url": "https://api.github.com/users/jsvisa/repos",
      "events_url": "https://api.github.com/users/jsvisa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jsvisa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-06-20T03:16:35Z",
    "updated_at": "2023-06-20T03:18:09Z",
    "author_association": "CONTRIBUTOR",
    "body": "@yaziciahmet you can use `abi.ParseTopicsIntoMap` to parse the topics https://github.com/ethereum/go-ethereum/blob/8358293a569823616fff55b87b98355f68083dc0/accounts/abi/topics.go#L124-L129\r\n\r\nand here is an example:\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t\"bytes\"\r\n\t\"fmt\"\r\n\t\"math/big\"\r\n\r\n\t\"github.com/ethereum/go-ethereum/accounts/abi\"\r\n\t\"github.com/ethereum/go-ethereum/common\"\r\n\t\"github.com/ethereum/go-ethereum/core/types\"\r\n)\r\n\r\nvar jsonEventTransfer = []byte(`[\r\n{\r\n  \"anonymous\": false,\r\n  \"inputs\": [\r\n    { \"indexed\": true, \"name\": \"from\", \"type\": \"address\" },\r\n    { \"indexed\": true, \"name\": \"to\", \"type\": \"address\" },\r\n    { \"indexed\": false, \"name\": \"value\", \"type\": \"uint256\" }\r\n  ],\r\n  \"name\": \"Transfer\",\r\n  \"type\": \"event\"\r\n}\r\n]\r\n`)\r\n\r\nfunc main() {\r\n\tcontractAbi, err := abi.JSON(bytes.NewReader(jsonEventTransfer))\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\r\n\ti2h := func(i int) common.Hash { return common.BigToHash(big.NewInt(int64(i))) }\r\n\r\n\t// Transfer(address indexed from, address indexed to, uint256 value);\r\n\ttopic := common.HexToHash(\"0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\")\r\n\tlog := types.Log{Topics: []common.Hash{topic, i2h(2), i2h(1)}, Data: i2h(11).Bytes()}\r\n\r\n\tevent := map[string]any{}\r\n\tfor _, evInfo := range contractAbi.Events {\r\n\t\tif evInfo.ID.Hex() != log.Topics[0].Hex() {\r\n\t\t\tcontinue\r\n\t\t}\r\n\r\n\t\tindexed := make([]abi.Argument, 0)\r\n\t\tfor _, input := range evInfo.Inputs {\r\n\t\t\tif input.Indexed {\r\n\t\t\t\tindexed = append(indexed, input)\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// parse topics without event name\r\n\t\tif err := abi.ParseTopicsIntoMap(event, indexed, log.Topics[1:]); err != nil {\r\n\t\t\tpanic(err)\r\n\t\t}\r\n                // parse data\r\n\t\tif err := contractAbi.UnpackIntoMap(event, evInfo.Name, log.Data); err != nil {\r\n\t\t\tpanic(err)\r\n\t\t}\r\n\r\n\t\tbreak\r\n\t}\r\n\r\n\tfmt.Println(event)\r\n}\r\n```\r\n\r\nThe output like below:\r\n\r\n```\r\nmap[from:0x0000000000000000000000000000000000000002 to:0x0000000000000000000000000000000000000001 value:11]\r\n\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1598050900/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1598301160",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/27499#issuecomment-1598301160",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/27499",
    "id": 1598301160,
    "node_id": "IC_kwDOAOvK985fRCPo",
    "user": {
      "login": "yaziciahmet",
      "id": 75089142,
      "node_id": "MDQ6VXNlcjc1MDg5MTQy",
      "avatar_url": "https://avatars.githubusercontent.com/u/75089142?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yaziciahmet",
      "html_url": "https://github.com/yaziciahmet",
      "followers_url": "https://api.github.com/users/yaziciahmet/followers",
      "following_url": "https://api.github.com/users/yaziciahmet/following{/other_user}",
      "gists_url": "https://api.github.com/users/yaziciahmet/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yaziciahmet/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yaziciahmet/subscriptions",
      "organizations_url": "https://api.github.com/users/yaziciahmet/orgs",
      "repos_url": "https://api.github.com/users/yaziciahmet/repos",
      "events_url": "https://api.github.com/users/yaziciahmet/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yaziciahmet/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-06-20T07:59:46Z",
    "updated_at": "2023-06-20T07:59:46Z",
    "author_association": "NONE",
    "body": "Exactly what I was looking for, thank you very much!",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1598301160/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
