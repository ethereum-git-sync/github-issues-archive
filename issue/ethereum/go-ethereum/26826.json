{
  "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/26826",
  "repository_url": "https://api.github.com/repos/ethereum/go-ethereum",
  "labels_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/26826/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/26826/comments",
  "events_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/26826/events",
  "html_url": "https://github.com/ethereum/go-ethereum/issues/26826",
  "id": 1614800703,
  "node_id": "I_kwDOAOvK985gP-c_",
  "number": 26826,
  "title": "Possible memory leak scenario in priceHeap",
  "user": {
    "login": "nothingmin",
    "id": 67548026,
    "node_id": "MDQ6VXNlcjY3NTQ4MDI2",
    "avatar_url": "https://avatars.githubusercontent.com/u/67548026?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nothingmin",
    "html_url": "https://github.com/nothingmin",
    "followers_url": "https://api.github.com/users/nothingmin/followers",
    "following_url": "https://api.github.com/users/nothingmin/following{/other_user}",
    "gists_url": "https://api.github.com/users/nothingmin/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nothingmin/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nothingmin/subscriptions",
    "organizations_url": "https://api.github.com/users/nothingmin/orgs",
    "repos_url": "https://api.github.com/users/nothingmin/repos",
    "events_url": "https://api.github.com/users/nothingmin/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nothingmin/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 72233650,
      "node_id": "MDU6TGFiZWw3MjIzMzY1MA==",
      "url": "https://api.github.com/repos/ethereum/go-ethereum/labels/type:bug",
      "name": "type:bug",
      "color": "FF5E5E",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 3,
  "created_at": "2023-03-08T07:46:18Z",
  "updated_at": "2023-03-13T11:51:55Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "#### System information\r\n\r\nGeth version: `1.10`\r\n\r\n#### Expected behaviour\r\nTransactions in urgent priceHeap is removed\r\n\r\n#### Actual behaviour\r\nTransactions in urgent priceHeap is not removed\r\n\r\nHeap\r\n```\r\nALL                            20535535  1790.480 MB\r\nbig.Int                        12794665   761.690 MB\r\ntypes.Transaction               2558461   447.726 MB  // It is not cache since I set BodyCacheLimit and BlockCacheLimit to 1 \r\ntypes.LegacyTx                  2558461   214.715 MB\r\nmemdb.DB                              2   147.751 MB\r\ncommon.Address                  2558461    48.799 MB\r\ntable.block                          70    35.193 MB\r\ntypes.Receipt                     53398    22.407 MB\r\nv2.Filter                           230    22.326 MB\r\ncore.txPricedList                     1    19.695 MB\r\n```\r\n\r\ntxpool\r\n```\r\n{\r\n  pending: 4371,\r\n  queued: 537\r\n}\r\n````\r\nyou can see we have large too large txPricedList even we don't have that much transactions in txpool.\r\n\r\n#### Steps to reproduce the behaviour\r\n1. LondonHardFork is not applied\r\n2. Set large GlobalSlots, GlobalQueue in TxPoolConfig that mempool is not full\r\n\r\n\r\n#### reason\r\nThese are the ways the transactions in urgent priceHeap that are not in txpool is removed.\r\n1. `Reheap()`\r\n2. `Discard(slots int, force bool)`\r\n4. `Underpriced(tx *types.Transaction)`\r\nIn case of function `Discard `and `Underpriced`, It's not executed if tx pool is not full.\r\nAnd `Reheap ` is not executed when LondonHardFork is applied because `SetBaseFee` is not executed.\r\nTherefore urgent in txPriceList is never get flushed",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/26826/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/26826/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1459715490",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/26826#issuecomment-1459715490",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/26826",
    "id": 1459715490,
    "node_id": "IC_kwDOAOvK985XAX2i",
    "user": {
      "login": "holiman",
      "id": 142290,
      "node_id": "MDQ6VXNlcjE0MjI5MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/142290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/holiman",
      "html_url": "https://github.com/holiman",
      "followers_url": "https://api.github.com/users/holiman/followers",
      "following_url": "https://api.github.com/users/holiman/following{/other_user}",
      "gists_url": "https://api.github.com/users/holiman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/holiman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/holiman/subscriptions",
      "organizations_url": "https://api.github.com/users/holiman/orgs",
      "repos_url": "https://api.github.com/users/holiman/repos",
      "events_url": "https://api.github.com/users/holiman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/holiman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-08T08:25:26Z",
    "updated_at": "2023-03-08T08:25:26Z",
    "author_association": "MEMBER",
    "body": ">  And Reheap is not executed when LondonHardFork is applied because SetBaseFee is not executed.\r\n\r\nThat's not quite true, we also call it from `Removed`. And `Removed` tracks the amount of stales, so even if the pool never becomes full, if there's a lot of transaction-churn, the stale-counter will still work\r\n```\r\n\r\n// Removed notifies the prices transaction list that an old transaction dropped\r\n// from the pool. The list will just keep a counter of stale objects and update\r\n// the heap if a large enough ratio of transactions go stale.\r\nfunc (l *pricedList) Removed(count int) {\r\n\t// Bump the stale counter, but exit if still too low (< 25%)\r\n\tstales := atomic.AddInt64(&l.stales, int64(count))\r\n\tif int(stales) <= (len(l.urgent.list)+len(l.floating.list))/4 {\r\n\t\treturn\r\n\t}\r\n\t// Seems we've reached a critical number of stale transactions, reheap\r\n\tl.Reheap()\r\n}\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1459715490/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1459764797",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/26826#issuecomment-1459764797",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/26826",
    "id": 1459764797,
    "node_id": "IC_kwDOAOvK985XAj49",
    "user": {
      "login": "nothingmin",
      "id": 67548026,
      "node_id": "MDQ6VXNlcjY3NTQ4MDI2",
      "avatar_url": "https://avatars.githubusercontent.com/u/67548026?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nothingmin",
      "html_url": "https://github.com/nothingmin",
      "followers_url": "https://api.github.com/users/nothingmin/followers",
      "following_url": "https://api.github.com/users/nothingmin/following{/other_user}",
      "gists_url": "https://api.github.com/users/nothingmin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nothingmin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nothingmin/subscriptions",
      "organizations_url": "https://api.github.com/users/nothingmin/orgs",
      "repos_url": "https://api.github.com/users/nothingmin/repos",
      "events_url": "https://api.github.com/users/nothingmin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nothingmin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-08T08:49:23Z",
    "updated_at": "2023-03-08T08:49:23Z",
    "author_association": "NONE",
    "body": "```\r\n// demoteUnexecutables removes invalid and processed transactions from the pools\r\n// executable/pending queue and any subsequent transactions that become unexecutable\r\n// are moved back into the future queue.\r\n//\r\n// Note: transactions are not marked as removed in the priced list because re-heaping\r\n// is always explicitly triggered by SetBaseFee and it would be unnecessary and wasteful\r\n// to trigger a re-heap is this function\r\nfunc (pool *TxPool) demoteUnexecutables() {\r\n```\r\nTransactions included in block(processed transactions) does not execute `Removed(count int)`\r\n\r\nSo in my case, if you receive many transactions and if those transactions are processed, `stales `never exceed `(len(l.urgent.list)+len(l.floating.list))/4`",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1459764797/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1466001188",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/26826#issuecomment-1466001188",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/26826",
    "id": 1466001188,
    "node_id": "IC_kwDOAOvK985XYWck",
    "user": {
      "login": "MariusVanDerWijden",
      "id": 16664698,
      "node_id": "MDQ6VXNlcjE2NjY0Njk4",
      "avatar_url": "https://avatars.githubusercontent.com/u/16664698?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MariusVanDerWijden",
      "html_url": "https://github.com/MariusVanDerWijden",
      "followers_url": "https://api.github.com/users/MariusVanDerWijden/followers",
      "following_url": "https://api.github.com/users/MariusVanDerWijden/following{/other_user}",
      "gists_url": "https://api.github.com/users/MariusVanDerWijden/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MariusVanDerWijden/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MariusVanDerWijden/subscriptions",
      "organizations_url": "https://api.github.com/users/MariusVanDerWijden/orgs",
      "repos_url": "https://api.github.com/users/MariusVanDerWijden/repos",
      "events_url": "https://api.github.com/users/MariusVanDerWijden/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MariusVanDerWijden/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-13T11:51:55Z",
    "updated_at": "2023-03-13T11:51:55Z",
    "author_association": "MEMBER",
    "body": "Hmm since this only happens when London is not activated, I don't think we need to fix it atm. After London the priceHeap is reheaped after every block, so the memory is not leaked for long",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/1466001188/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 1,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
