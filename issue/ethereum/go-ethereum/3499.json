{
  "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/3499",
  "repository_url": "https://api.github.com/repos/ethereum/go-ethereum",
  "labels_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/3499/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/3499/comments",
  "events_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/3499/events",
  "html_url": "https://github.com/ethereum/go-ethereum/issues/3499",
  "id": 197867140,
  "node_id": "MDU6SXNzdWUxOTc4NjcxNDA=",
  "number": 3499,
  "title": "swarm: implement status page and upload page etc.",
  "user": {
    "login": "cobordism",
    "id": 12838530,
    "node_id": "MDQ6VXNlcjEyODM4NTMw",
    "avatar_url": "https://avatars.githubusercontent.com/u/12838530?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cobordism",
    "html_url": "https://github.com/cobordism",
    "followers_url": "https://api.github.com/users/cobordism/followers",
    "following_url": "https://api.github.com/users/cobordism/following{/other_user}",
    "gists_url": "https://api.github.com/users/cobordism/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cobordism/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cobordism/subscriptions",
    "organizations_url": "https://api.github.com/users/cobordism/orgs",
    "repos_url": "https://api.github.com/users/cobordism/repos",
    "events_url": "https://api.github.com/users/cobordism/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cobordism/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 72233652,
      "node_id": "MDU6TGFiZWw3MjIzMzY1Mg==",
      "url": "https://api.github.com/repos/ethereum/go-ethereum/labels/type:feature",
      "name": "type:feature",
      "color": "84b6eb",
      "default": false,
      "description": null
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 9,
  "created_at": "2016-12-28T15:06:15Z",
  "updated_at": "2018-12-14T13:16:27Z",
  "closed_at": "2018-10-04T14:59:17Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "In the spirit of moving more functionality into the http interface, swarm should implement the following:\r\n\r\n\r\n- `localhost:8500/version` -- showing swarm version information\r\n- `localhost:8500/favicon.ico` -- returning the swarm favicon. (/favicon.ico is the most common not-found request)\r\n- `localhost:8500/status`  -- showing status information, connected peers, storage space used etc.\r\n\r\nFurther more, in the would-be-nice category:\r\n- `localhost:8500/up` -- web interface for uploading / managing content (i.e. the http version of `swarm up`)\r\n- `localhost:8500/admin` -- admin interface to change things like maxpeers, BucketSize, ethapi, SWAP settings etc. etc.\r\n",
  "closed_by": {
    "login": "acud",
    "id": 12988138,
    "node_id": "MDQ6VXNlcjEyOTg4MTM4",
    "avatar_url": "https://avatars.githubusercontent.com/u/12988138?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/acud",
    "html_url": "https://github.com/acud",
    "followers_url": "https://api.github.com/users/acud/followers",
    "following_url": "https://api.github.com/users/acud/following{/other_user}",
    "gists_url": "https://api.github.com/users/acud/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/acud/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/acud/subscriptions",
    "organizations_url": "https://api.github.com/users/acud/orgs",
    "repos_url": "https://api.github.com/users/acud/repos",
    "events_url": "https://api.github.com/users/acud/events{/privacy}",
    "received_events_url": "https://api.github.com/users/acud/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/3499/reactions",
    "total_count": 2,
    "+1": 2,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/3499/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/269489402",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/3499#issuecomment-269489402",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/3499",
    "id": 269489402,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2OTQ4OTQwMg==",
    "user": {
      "login": "cobordism",
      "id": 12838530,
      "node_id": "MDQ6VXNlcjEyODM4NTMw",
      "avatar_url": "https://avatars.githubusercontent.com/u/12838530?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cobordism",
      "html_url": "https://github.com/cobordism",
      "followers_url": "https://api.github.com/users/cobordism/followers",
      "following_url": "https://api.github.com/users/cobordism/following{/other_user}",
      "gists_url": "https://api.github.com/users/cobordism/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cobordism/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cobordism/subscriptions",
      "organizations_url": "https://api.github.com/users/cobordism/orgs",
      "repos_url": "https://api.github.com/users/cobordism/repos",
      "events_url": "https://api.github.com/users/cobordism/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cobordism/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-28T15:07:26Z",
    "updated_at": "2016-12-28T15:07:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "moreover, we should have a special page for '/' i.e. localhost:8500/ and not just an error message.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/269489402/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/269979818",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/3499#issuecomment-269979818",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/3499",
    "id": 269979818,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2OTk3OTgxOA==",
    "user": {
      "login": "jmozah",
      "id": 940575,
      "node_id": "MDQ6VXNlcjk0MDU3NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/940575?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jmozah",
      "html_url": "https://github.com/jmozah",
      "followers_url": "https://api.github.com/users/jmozah/followers",
      "following_url": "https://api.github.com/users/jmozah/following{/other_user}",
      "gists_url": "https://api.github.com/users/jmozah/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jmozah/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jmozah/subscriptions",
      "organizations_url": "https://api.github.com/users/jmozah/orgs",
      "repos_url": "https://api.github.com/users/jmozah/repos",
      "events_url": "https://api.github.com/users/jmozah/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jmozah/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-02T14:32:47Z",
    "updated_at": "2017-01-02T14:32:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "Along the same lines...some page to show local files in swarm, their chunk details etc will be great\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/269979818/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/270545768",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/3499#issuecomment-270545768",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/3499",
    "id": 270545768,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MDU0NTc2OA==",
    "user": {
      "login": "zelig",
      "id": 769725,
      "node_id": "MDQ6VXNlcjc2OTcyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/769725?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zelig",
      "html_url": "https://github.com/zelig",
      "followers_url": "https://api.github.com/users/zelig/followers",
      "following_url": "https://api.github.com/users/zelig/following{/other_user}",
      "gists_url": "https://api.github.com/users/zelig/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zelig/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zelig/subscriptions",
      "organizations_url": "https://api.github.com/users/zelig/orgs",
      "repos_url": "https://api.github.com/users/zelig/repos",
      "events_url": "https://api.github.com/users/zelig/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zelig/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-05T02:13:49Z",
    "updated_at": "2017-01-05T02:13:49Z",
    "author_association": "MEMBER",
    "body": "I support this.\r\n\r\n@fjl wanted to implement a health page (basically your status, which is better name i think). Not sure where its at.\r\n\r\nI would prefer to keep all these suggestions as separate issues. \r\nThey all have different problems and use cases. Especially the up and admin UIs.\r\n\r\nBut most importantly, I would like a principled solution here. \r\n* My first idea would be to go along the lines of https://github.com/ethereum/go-ethereum/issues/3447 to support branded gateways.\r\n* the server should be format sensitive (respect the Accept header). \r\nThe client should only support json structured output \r\n* a command line option can be supplied pointing to a local directory or a manifest hash, which is then used to render the htmls. \r\n* by default it would just render json as text for html requests.\r\n\r\n\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/270545768/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/270897428",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/3499#issuecomment-270897428",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/3499",
    "id": 270897428,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MDg5NzQyOA==",
    "user": {
      "login": "cobordism",
      "id": 12838530,
      "node_id": "MDQ6VXNlcjEyODM4NTMw",
      "avatar_url": "https://avatars.githubusercontent.com/u/12838530?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cobordism",
      "html_url": "https://github.com/cobordism",
      "followers_url": "https://api.github.com/users/cobordism/followers",
      "following_url": "https://api.github.com/users/cobordism/following{/other_user}",
      "gists_url": "https://api.github.com/users/cobordism/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cobordism/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cobordism/subscriptions",
      "organizations_url": "https://api.github.com/users/cobordism/orgs",
      "repos_url": "https://api.github.com/users/cobordism/repos",
      "events_url": "https://api.github.com/users/cobordism/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cobordism/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-06T12:50:04Z",
    "updated_at": "2017-01-06T12:50:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "@zelig I believe there are two different issues here. \r\nOne issue is to format error pages coming from requests to bzz or bzzr requests --- things like 404s and \"Manifest entry for X not found\" (and the related question of rendering manifests as discussed in comments here https://github.com/ethereum/go-ethereum/issues/3401)\r\n\r\nThe other issue does not concern errors from accessing any bzz:/X url but instead constitute *additional* pages the http interface can provide such as /status and /admin\r\nI agree that there are all separate, but perhaps the first PR could provide basic scaffolding for such pages in general, i.e. the part than any special pages must have in common like: \"catch special URL requests and pass them to appropriate handler functions\". Along with dummy implementations of some (like /admin ), basic implementation of others (like /status) and full implementations of others (/version and /favicon.ico).\r\n\r\nThen later specialised PRs would replace the dummy and placeholder pages with ones that have more polish/functionality.\r\n\r\nDoes that make sense? Admittedly maybe the workflow as it appears in my head is not actually the most practical for people with experience. All feedback welcome :)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/270897428/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/271495792",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/3499#issuecomment-271495792",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/3499",
    "id": 271495792,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MTQ5NTc5Mg==",
    "user": {
      "login": "zelig",
      "id": 769725,
      "node_id": "MDQ6VXNlcjc2OTcyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/769725?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zelig",
      "html_url": "https://github.com/zelig",
      "followers_url": "https://api.github.com/users/zelig/followers",
      "following_url": "https://api.github.com/users/zelig/following{/other_user}",
      "gists_url": "https://api.github.com/users/zelig/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zelig/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zelig/subscriptions",
      "organizations_url": "https://api.github.com/users/zelig/orgs",
      "repos_url": "https://api.github.com/users/zelig/repos",
      "events_url": "https://api.github.com/users/zelig/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zelig/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-10T06:17:32Z",
    "updated_at": "2017-01-10T06:17:32Z",
    "author_association": "MEMBER",
    "body": "@homotopycolimit\r\nI agree they are two different issues, i am just saying i would like a parallel solution in terms of confgurability of what is displayed and format sensitivity of requests.\r\nLets break down this into appropriate smaller issues.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/271495792/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/339125153",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/3499#issuecomment-339125153",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/3499",
    "id": 339125153,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzOTEyNTE1Mw==",
    "user": {
      "login": "holisticode",
      "id": 88287,
      "node_id": "MDQ6VXNlcjg4Mjg3",
      "avatar_url": "https://avatars.githubusercontent.com/u/88287?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/holisticode",
      "html_url": "https://github.com/holisticode",
      "followers_url": "https://api.github.com/users/holisticode/followers",
      "following_url": "https://api.github.com/users/holisticode/following{/other_user}",
      "gists_url": "https://api.github.com/users/holisticode/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/holisticode/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/holisticode/subscriptions",
      "organizations_url": "https://api.github.com/users/holisticode/orgs",
      "repos_url": "https://api.github.com/users/holisticode/repos",
      "events_url": "https://api.github.com/users/holisticode/events{/privacy}",
      "received_events_url": "https://api.github.com/users/holisticode/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-24T20:44:10Z",
    "updated_at": "2017-10-24T20:46:40Z",
    "author_association": "MEMBER",
    "body": "Swarm handles incoming messages checking the scheme (bzz, bzzi, bzzr). In this context there is the notion of \"invalid scheme\". In order to address the above proposals, probably either we need to abandon the notion of \"invalid scheme\" (or we'd first have to check that a provided request URI contains a handled action (`version`, `status`), or we could introduce a new scheme, e.g `bzzl` (bzz local or something), in order to keep this general behavior \r\n\r\nThings like `favicon.ico` though would defy the notion of adding a specific scheme, so maybe we should consider abandoning the invalid scheme approach?\r\n\r\n@lmars @homotopycolimit @zelig ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/339125153/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/339138327",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/3499#issuecomment-339138327",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/3499",
    "id": 339138327,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzOTEzODMyNw==",
    "user": {
      "login": "holisticode",
      "id": 88287,
      "node_id": "MDQ6VXNlcjg4Mjg3",
      "avatar_url": "https://avatars.githubusercontent.com/u/88287?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/holisticode",
      "html_url": "https://github.com/holisticode",
      "followers_url": "https://api.github.com/users/holisticode/followers",
      "following_url": "https://api.github.com/users/holisticode/following{/other_user}",
      "gists_url": "https://api.github.com/users/holisticode/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/holisticode/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/holisticode/subscriptions",
      "organizations_url": "https://api.github.com/users/holisticode/orgs",
      "repos_url": "https://api.github.com/users/holisticode/repos",
      "events_url": "https://api.github.com/users/holisticode/events{/privacy}",
      "received_events_url": "https://api.github.com/users/holisticode/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-24T21:31:23Z",
    "updated_at": "2017-10-24T21:39:17Z",
    "author_association": "MEMBER",
    "body": "A few other options I could think of:\r\n* Check the request URI **before** parsing the URI for the scheme (breaks current flow a bit)\r\n* Introduce a separate socket endpoing (e.g. 8051) for things like `status`, `admin` and `up` \r\n\r\nI personally like the idea of having `favicon.ico` a specific rule for the current endpoint (8500, are there any other similar requirements of static endpoints to be expected?) and implement everything else with a different endpoint (8501).\r\n\r\nAnother question: should there be some authentication for \"write\" endpoints like `admin` and `up`?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/339138327/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/339484139",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/3499#issuecomment-339484139",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/3499",
    "id": 339484139,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzOTQ4NDEzOQ==",
    "user": {
      "login": "lmars",
      "id": 488515,
      "node_id": "MDQ6VXNlcjQ4ODUxNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/488515?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lmars",
      "html_url": "https://github.com/lmars",
      "followers_url": "https://api.github.com/users/lmars/followers",
      "following_url": "https://api.github.com/users/lmars/following{/other_user}",
      "gists_url": "https://api.github.com/users/lmars/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lmars/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lmars/subscriptions",
      "organizations_url": "https://api.github.com/users/lmars/orgs",
      "repos_url": "https://api.github.com/users/lmars/repos",
      "events_url": "https://api.github.com/users/lmars/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lmars/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-25T21:57:04Z",
    "updated_at": "2017-10-25T21:57:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "Given there are many different use cases, it may be worth implementing this as some form of handler / plugin system.\r\n\r\nFor example, either on the command line or in the config, you can register \"handlers\" which are separate programs listening on their own TCP or Unix sockets which can intercept and handle HTTP requests to the gateway:\r\n\r\n```\r\nswarm \\\r\n  --http-handler /status:http://localhost:8000 \\\r\n  --http-handler /admin:~/.ethereum/bzz-admin.ipc\r\n```\r\n\r\nthen, going to `/status` will get forwarded to `http://localhost:8000` and `/admin` to the Unix socket `~/.ethereum/bzz-admin.ipc`.\r\n\r\nAnother option is to register paths to programs, and they are booted and there is some standard API for handing over requests to them:\r\n\r\n```\r\nswarm \\\r\n  --http-handler /status:/usr/local/bin/swarm-status-daemon \\\r\n  --http-handler /admin:/usr/local/bin/swarm-admin-daemon\r\n```\r\n\r\nI'm just trying to design something that is flexible enough that different people can have different status / admin / branded pages on their gateway without needing to fork the swarm codebase.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/339484139/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/427052004",
    "html_url": "https://github.com/ethereum/go-ethereum/issues/3499#issuecomment-427052004",
    "issue_url": "https://api.github.com/repos/ethereum/go-ethereum/issues/3499",
    "id": 427052004,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNzA1MjAwNA==",
    "user": {
      "login": "acud",
      "id": 12988138,
      "node_id": "MDQ6VXNlcjEyOTg4MTM4",
      "avatar_url": "https://avatars.githubusercontent.com/u/12988138?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/acud",
      "html_url": "https://github.com/acud",
      "followers_url": "https://api.github.com/users/acud/followers",
      "following_url": "https://api.github.com/users/acud/following{/other_user}",
      "gists_url": "https://api.github.com/users/acud/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/acud/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/acud/subscriptions",
      "organizations_url": "https://api.github.com/users/acud/orgs",
      "repos_url": "https://api.github.com/users/acud/repos",
      "events_url": "https://api.github.com/users/acud/events{/privacy}",
      "received_events_url": "https://api.github.com/users/acud/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-04T14:59:17Z",
    "updated_at": "2018-10-04T14:59:17Z",
    "author_association": "MEMBER",
    "body": "closing in favour of:\r\nhttps://github.com/ethersphere/go-ethereum/issues/159\r\nhttps://github.com/ethersphere/go-ethereum/issues/158",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/go-ethereum/issues/comments/427052004/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
