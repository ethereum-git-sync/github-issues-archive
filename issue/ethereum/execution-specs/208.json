{
  "url": "https://api.github.com/repos/ethereum/execution-specs/issues/208",
  "repository_url": "https://api.github.com/repos/ethereum/execution-specs",
  "labels_url": "https://api.github.com/repos/ethereum/execution-specs/issues/208/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/execution-specs/issues/208/comments",
  "events_url": "https://api.github.com/repos/ethereum/execution-specs/issues/208/events",
  "html_url": "https://github.com/ethereum/execution-specs/issues/208",
  "id": 910934454,
  "node_id": "MDU6SXNzdWU5MTA5MzQ0NTQ=",
  "number": 208,
  "title": "test_ RPCs",
  "user": {
    "login": "qbzzt",
    "id": 12722969,
    "node_id": "MDQ6VXNlcjEyNzIyOTY5",
    "avatar_url": "https://avatars.githubusercontent.com/u/12722969?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/qbzzt",
    "html_url": "https://github.com/qbzzt",
    "followers_url": "https://api.github.com/users/qbzzt/followers",
    "following_url": "https://api.github.com/users/qbzzt/following{/other_user}",
    "gists_url": "https://api.github.com/users/qbzzt/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/qbzzt/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/qbzzt/subscriptions",
    "organizations_url": "https://api.github.com/users/qbzzt/orgs",
    "repos_url": "https://api.github.com/users/qbzzt/repos",
    "events_url": "https://api.github.com/users/qbzzt/events{/privacy}",
    "received_events_url": "https://api.github.com/users/qbzzt/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 12,
  "created_at": "2021-06-03T23:29:33Z",
  "updated_at": "2021-06-07T13:29:41Z",
  "closed_at": null,
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "In the consensus testing project (https://github.com/ethereum/retesteth/) we have a number of RPC methods that are required to communicate with a client for our tests (https://github.com/ethereum/retesteth/wiki/RPC-Methods). May I add them to this project, in the hope that more clients will implement them?",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/execution-specs/issues/208/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/execution-specs/issues/208/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/execution-specs/issues/comments/854258051",
    "html_url": "https://github.com/ethereum/execution-specs/issues/208#issuecomment-854258051",
    "issue_url": "https://api.github.com/repos/ethereum/execution-specs/issues/208",
    "id": 854258051,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg1NDI1ODA1MQ==",
    "user": {
      "login": "lightclient",
      "id": 14004106,
      "node_id": "MDQ6VXNlcjE0MDA0MTA2",
      "avatar_url": "https://avatars.githubusercontent.com/u/14004106?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lightclient",
      "html_url": "https://github.com/lightclient",
      "followers_url": "https://api.github.com/users/lightclient/followers",
      "following_url": "https://api.github.com/users/lightclient/following{/other_user}",
      "gists_url": "https://api.github.com/users/lightclient/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lightclient/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lightclient/subscriptions",
      "organizations_url": "https://api.github.com/users/lightclient/orgs",
      "repos_url": "https://api.github.com/users/lightclient/repos",
      "events_url": "https://api.github.com/users/lightclient/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lightclient/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-06-03T23:53:25Z",
    "updated_at": "2021-06-03T23:53:25Z",
    "author_association": "MEMBER",
    "body": "@qbzzt unfortunately I'm not sure the best way to do this. Right now, the spec _mainly_ contains the `eth` RPC namespace. It's not clear to me where we should draw the line. There are other useful namespaces like `test`, `personal`, and `wallet`. I can see arguments for/against. Maybe @MicahZoltu @gregthegreek @timbeiko @tkstanczak have thoughts?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/execution-specs/issues/comments/854258051/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/execution-specs/issues/comments/854504073",
    "html_url": "https://github.com/ethereum/execution-specs/issues/208#issuecomment-854504073",
    "issue_url": "https://api.github.com/repos/ethereum/execution-specs/issues/208",
    "id": 854504073,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg1NDUwNDA3Mw==",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-06-04T09:07:42Z",
    "updated_at": "2021-06-04T09:07:42Z",
    "author_association": "MEMBER",
    "body": "We initially said we wanted to focus on the `eth_` namespace in order to figure out how we want things to look/work and establish a good workflow before expanding out into other areas.\r\n\r\nAt the same time, if someone is actively looking to contribute, but only toward a specific namespace (like `test`), the value of having a motivated editor may outweigh the downside of not waiting like originally planned.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/execution-specs/issues/comments/854504073/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/execution-specs/issues/comments/854738118",
    "html_url": "https://github.com/ethereum/execution-specs/issues/208#issuecomment-854738118",
    "issue_url": "https://api.github.com/repos/ethereum/execution-specs/issues/208",
    "id": 854738118,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg1NDczODExOA==",
    "user": {
      "login": "timbeiko",
      "id": 9390255,
      "node_id": "MDQ6VXNlcjkzOTAyNTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9390255?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/timbeiko",
      "html_url": "https://github.com/timbeiko",
      "followers_url": "https://api.github.com/users/timbeiko/followers",
      "following_url": "https://api.github.com/users/timbeiko/following{/other_user}",
      "gists_url": "https://api.github.com/users/timbeiko/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/timbeiko/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/timbeiko/subscriptions",
      "organizations_url": "https://api.github.com/users/timbeiko/orgs",
      "repos_url": "https://api.github.com/users/timbeiko/repos",
      "events_url": "https://api.github.com/users/timbeiko/events{/privacy}",
      "received_events_url": "https://api.github.com/users/timbeiko/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-06-04T13:50:00Z",
    "updated_at": "2021-06-04T13:50:00Z",
    "author_association": "MEMBER",
    "body": "I'll caveat all this with saying that this repo will likely undergo pretty extensive changes post-London as we figure out how to merge the Eth1 and Eth2 specs. It seems likely we'll end up with a set of consensus specs and non-consensus ones. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/execution-specs/issues/comments/854738118/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/execution-specs/issues/comments/854755241",
    "html_url": "https://github.com/ethereum/execution-specs/issues/208#issuecomment-854755241",
    "issue_url": "https://api.github.com/repos/ethereum/execution-specs/issues/208",
    "id": 854755241,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg1NDc1NTI0MQ==",
    "user": {
      "login": "qbzzt",
      "id": 12722969,
      "node_id": "MDQ6VXNlcjEyNzIyOTY5",
      "avatar_url": "https://avatars.githubusercontent.com/u/12722969?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/qbzzt",
      "html_url": "https://github.com/qbzzt",
      "followers_url": "https://api.github.com/users/qbzzt/followers",
      "following_url": "https://api.github.com/users/qbzzt/following{/other_user}",
      "gists_url": "https://api.github.com/users/qbzzt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/qbzzt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/qbzzt/subscriptions",
      "organizations_url": "https://api.github.com/users/qbzzt/orgs",
      "repos_url": "https://api.github.com/users/qbzzt/repos",
      "events_url": "https://api.github.com/users/qbzzt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/qbzzt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-06-04T14:07:01Z",
    "updated_at": "2021-06-04T14:07:01Z",
    "author_association": "MEMBER",
    "body": "> At the same time, if someone is actively looking to contribute, but only toward a specific namespace (like `test`), the value of having a motivated editor may outweigh the downside of not waiting like originally planned.\r\n\r\nThat is what I'm asking to do - not for you to write it, but for me to do it. Our testing project wants to have this documented to encourage more client developers to implement it so we'll be able to test directly (currently only besu does). I'll be doing the work.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/execution-specs/issues/comments/854755241/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/execution-specs/issues/comments/854768174",
    "html_url": "https://github.com/ethereum/execution-specs/issues/208#issuecomment-854768174",
    "issue_url": "https://api.github.com/repos/ethereum/execution-specs/issues/208",
    "id": 854768174,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg1NDc2ODE3NA==",
    "user": {
      "login": "lightclient",
      "id": 14004106,
      "node_id": "MDQ6VXNlcjE0MDA0MTA2",
      "avatar_url": "https://avatars.githubusercontent.com/u/14004106?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lightclient",
      "html_url": "https://github.com/lightclient",
      "followers_url": "https://api.github.com/users/lightclient/followers",
      "following_url": "https://api.github.com/users/lightclient/following{/other_user}",
      "gists_url": "https://api.github.com/users/lightclient/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lightclient/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lightclient/subscriptions",
      "organizations_url": "https://api.github.com/users/lightclient/orgs",
      "repos_url": "https://api.github.com/users/lightclient/repos",
      "events_url": "https://api.github.com/users/lightclient/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lightclient/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-06-04T14:25:59Z",
    "updated_at": "2021-06-04T14:25:59Z",
    "author_association": "MEMBER",
    "body": "IIRC, geth has deprecated support for the `test` namespace in favor of `t8n`. Is that the case?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/execution-specs/issues/comments/854768174/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/execution-specs/issues/comments/854770046",
    "html_url": "https://github.com/ethereum/execution-specs/issues/208#issuecomment-854770046",
    "issue_url": "https://api.github.com/repos/ethereum/execution-specs/issues/208",
    "id": 854770046,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg1NDc3MDA0Ng==",
    "user": {
      "login": "qbzzt",
      "id": 12722969,
      "node_id": "MDQ6VXNlcjEyNzIyOTY5",
      "avatar_url": "https://avatars.githubusercontent.com/u/12722969?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/qbzzt",
      "html_url": "https://github.com/qbzzt",
      "followers_url": "https://api.github.com/users/qbzzt/followers",
      "following_url": "https://api.github.com/users/qbzzt/following{/other_user}",
      "gists_url": "https://api.github.com/users/qbzzt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/qbzzt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/qbzzt/subscriptions",
      "organizations_url": "https://api.github.com/users/qbzzt/orgs",
      "repos_url": "https://api.github.com/users/qbzzt/repos",
      "events_url": "https://api.github.com/users/qbzzt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/qbzzt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-06-04T14:28:34Z",
    "updated_at": "2021-06-04T14:28:34Z",
    "author_association": "MEMBER",
    "body": "> IIRC, geth has deprecated support for the `test` namespace in favor of `t8n`. Is that the case?\r\n\r\nYes, it has been that way for a while which is why we didn't care about documenting it. But now Besu is using it.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/execution-specs/issues/comments/854770046/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/execution-specs/issues/comments/854778863",
    "html_url": "https://github.com/ethereum/execution-specs/issues/208#issuecomment-854778863",
    "issue_url": "https://api.github.com/repos/ethereum/execution-specs/issues/208",
    "id": 854778863,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg1NDc3ODg2Mw==",
    "user": {
      "login": "lightclient",
      "id": 14004106,
      "node_id": "MDQ6VXNlcjE0MDA0MTA2",
      "avatar_url": "https://avatars.githubusercontent.com/u/14004106?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lightclient",
      "html_url": "https://github.com/lightclient",
      "followers_url": "https://api.github.com/users/lightclient/followers",
      "following_url": "https://api.github.com/users/lightclient/following{/other_user}",
      "gists_url": "https://api.github.com/users/lightclient/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lightclient/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lightclient/subscriptions",
      "organizations_url": "https://api.github.com/users/lightclient/orgs",
      "repos_url": "https://api.github.com/users/lightclient/repos",
      "events_url": "https://api.github.com/users/lightclient/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lightclient/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-06-04T14:38:45Z",
    "updated_at": "2021-06-04T14:38:45Z",
    "author_association": "MEMBER",
    "body": "IMO, the fact that geth actively removed the namespace from their client in pursuit of a different approach is a good enough reason to not include it in this repo. More broadly, is there a reason to continue pursuing the `test` namespace over `t8n`?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/execution-specs/issues/comments/854778863/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/execution-specs/issues/comments/854799279",
    "html_url": "https://github.com/ethereum/execution-specs/issues/208#issuecomment-854799279",
    "issue_url": "https://api.github.com/repos/ethereum/execution-specs/issues/208",
    "id": 854799279,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg1NDc5OTI3OQ==",
    "user": {
      "login": "garyschulte",
      "id": 1238512,
      "node_id": "MDQ6VXNlcjEyMzg1MTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1238512?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/garyschulte",
      "html_url": "https://github.com/garyschulte",
      "followers_url": "https://api.github.com/users/garyschulte/followers",
      "following_url": "https://api.github.com/users/garyschulte/following{/other_user}",
      "gists_url": "https://api.github.com/users/garyschulte/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/garyschulte/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/garyschulte/subscriptions",
      "organizations_url": "https://api.github.com/users/garyschulte/orgs",
      "repos_url": "https://api.github.com/users/garyschulte/repos",
      "events_url": "https://api.github.com/users/garyschulte/events{/privacy}",
      "received_events_url": "https://api.github.com/users/garyschulte/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-06-04T15:05:54Z",
    "updated_at": "2021-06-04T15:07:55Z",
    "author_association": "NONE",
    "body": "> IMO, the fact that geth actively removed the namespace from their client in pursuit of a different approach is a good enough reason to not include it in this repo. More broadly, is there a reason to continue pursuing the `test` namespace over `t8n`?\r\n\r\nThere may be additional client diversity benefits regarding test development and correctness, but from a client testing perspective we need some conformed way to run the reference tests against clients.\r\n\r\nIn the absence of the `test` namespace, how should we validate that the reference tests pass for a given client?  Besu actually has its own implementation of a reference test runner, but in some places it uses mocks and reference test-specific implementations.  The net result is that the Besu reference test runner is much more permissive than `retesteth` and I have found many more test regressions using the retesteth runner than our in-house implementation.  \r\n\r\nIMO, if we want to be able to use the reference tests with a reference test engine, there should be a low friction way to do it.  ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/execution-specs/issues/comments/854799279/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/execution-specs/issues/comments/854882940",
    "html_url": "https://github.com/ethereum/execution-specs/issues/208#issuecomment-854882940",
    "issue_url": "https://api.github.com/repos/ethereum/execution-specs/issues/208",
    "id": 854882940,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg1NDg4Mjk0MA==",
    "user": {
      "login": "garyschulte",
      "id": 1238512,
      "node_id": "MDQ6VXNlcjEyMzg1MTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1238512?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/garyschulte",
      "html_url": "https://github.com/garyschulte",
      "followers_url": "https://api.github.com/users/garyschulte/followers",
      "following_url": "https://api.github.com/users/garyschulte/following{/other_user}",
      "gists_url": "https://api.github.com/users/garyschulte/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/garyschulte/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/garyschulte/subscriptions",
      "organizations_url": "https://api.github.com/users/garyschulte/orgs",
      "repos_url": "https://api.github.com/users/garyschulte/repos",
      "events_url": "https://api.github.com/users/garyschulte/events{/privacy}",
      "received_events_url": "https://api.github.com/users/garyschulte/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-06-04T17:12:28Z",
    "updated_at": "2021-06-04T17:12:28Z",
    "author_association": "NONE",
    "body": "> I'll caveat all this with saying that this repo will likely undergo pretty extensive changes post-London as we figure out how to merge the Eth1 and Eth2 specs. It seems likely we'll end up with a set of consensus specs and non-consensus ones.\r\n\r\nSeems we could add a third test-specific spec.  Json-schema specs are composable, so ...",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/execution-specs/issues/comments/854882940/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/execution-specs/issues/comments/854898844",
    "html_url": "https://github.com/ethereum/execution-specs/issues/208#issuecomment-854898844",
    "issue_url": "https://api.github.com/repos/ethereum/execution-specs/issues/208",
    "id": 854898844,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg1NDg5ODg0NA==",
    "user": {
      "login": "winsvega",
      "id": 4492341,
      "node_id": "MDQ6VXNlcjQ0OTIzNDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4492341?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/winsvega",
      "html_url": "https://github.com/winsvega",
      "followers_url": "https://api.github.com/users/winsvega/followers",
      "following_url": "https://api.github.com/users/winsvega/following{/other_user}",
      "gists_url": "https://api.github.com/users/winsvega/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/winsvega/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/winsvega/subscriptions",
      "organizations_url": "https://api.github.com/users/winsvega/orgs",
      "repos_url": "https://api.github.com/users/winsvega/repos",
      "events_url": "https://api.github.com/users/winsvega/events{/privacy}",
      "received_events_url": "https://api.github.com/users/winsvega/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-06-04T17:43:46Z",
    "updated_at": "2021-06-04T17:43:46Z",
    "author_association": "MEMBER",
    "body": "the main benefit for us (test writers) having test RPC methods  \r\nthat in case you could implement those rpc methods in such a way that it uses the core client logic - that would mean we would be teststing the client core logic directly. \r\n\r\nt8ntool does not provide access to the client logic. there fore all blockchain logic is done on retesteth side (an actually there are a lot of failures currenlty with gasLimit checkups) \r\n\r\nif we were to use besu RPC we would be able to generate besu's version of gasLimit formula checks not having all this issues. \r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/execution-specs/issues/comments/854898844/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/execution-specs/issues/comments/855921337",
    "html_url": "https://github.com/ethereum/execution-specs/issues/208#issuecomment-855921337",
    "issue_url": "https://api.github.com/repos/ethereum/execution-specs/issues/208",
    "id": 855921337,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg1NTkyMTMzNw==",
    "user": {
      "login": "lightclient",
      "id": 14004106,
      "node_id": "MDQ6VXNlcjE0MDA0MTA2",
      "avatar_url": "https://avatars.githubusercontent.com/u/14004106?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lightclient",
      "html_url": "https://github.com/lightclient",
      "followers_url": "https://api.github.com/users/lightclient/followers",
      "following_url": "https://api.github.com/users/lightclient/following{/other_user}",
      "gists_url": "https://api.github.com/users/lightclient/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lightclient/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lightclient/subscriptions",
      "organizations_url": "https://api.github.com/users/lightclient/orgs",
      "repos_url": "https://api.github.com/users/lightclient/repos",
      "events_url": "https://api.github.com/users/lightclient/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lightclient/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-06-07T13:19:43Z",
    "updated_at": "2021-06-07T13:19:53Z",
    "author_association": "MEMBER",
    "body": "> In the absence of the test namespace, how should we validate that the reference tests pass for a given client?\r\n\r\nI think the current best way is to use the [hive method](https://github.com/ethereum/hive/blob/master/docs/clients.md#eth1-client-requirements). Basically, take the `BlockchainTests` and convert them to a genesis (header + alloc) and then apply blocks in order. At the end, ensure the latest block header is the expected one.\r\n\r\nThe way I understand it, the flow is generally:\r\n1. Write an `ethereum/tests` test.\r\n2. Use `retesteth` to fill the test.\r\n3. `retesteth` uses `t8n` to calculate the transition specifics (e.g. tx trie root, new state root, gas used, etc). For miner-attributable errors (failed validity condition), `t8n` continues to output a result so that `retesteth` can build invalid blocks.\r\n4. The `BlockchainTest` style tests have i) a genesis config (header + alloc) ii) a list of blocks to apply and iii) the expected final block. With that, hive can setup the environment for clients and then run `{client} --import block-N.rlp`. Once Hive runs out of blocks, it will check that latest block hash is the expected block hash.\r\n\r\nSo, everything driven by the initial `ethereum/tests` testcase.\r\n\r\n> If we were to use besu RPC we would be able to generate besu's version of gasLimit formula checks not having all this issues.\r\n\r\nI'm not quite sure I understand the `gasLimit` checks you're referring to? The fact that it can move at most `limit // 1024` up or down per block? Or did you mean the `baseFee`? I  think I generally understand your point though - the `baseFee` for example is calculated for every block based on the `gasUsed` and `gasLimit` of the previous block. From the `retesteth` side, it would be nice if there were a black box to ask what the next `baseFee` will be. This way, `retesteth` doesn't do any computation itself. IUC (maybe @holiman can chime in), the reason `t8n` _doesn't_ have these facilities builtin is that would not allow for invalid blocks to be made. E.g. currently you can specify any arbitrary values for `baseFee`. `retesteth` will fill the tests, but when the blocks are imported into a properly implemented client they will be rejected. If `t8n` filled those parameters automatically, this couldn't be easily tests. The general philosophy, it seems, is for the initial `ethereum/test` to drive everything. Calculating each `baseFee`-like parameter by hand is quite the burden though, so `retesteth` alleviates it to a degree.\r\n\r\nWould it be possible to have a method `test_calcBaseFee` and `test_calcGasLimit`? Or maybe a cli interface for calculating some of these one of parameters? I think that would allow `retesteth` to follow the `t8n`-`hive` flow, without needing to implement consensus-specific functions.\r\n\r\n> that would mean we would be testing the client core logic directly.\r\n\r\nCould you elaborate here? It seems like the hive framework does test the core logic directly? Or do I misunderstand your point?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/execution-specs/issues/comments/855921337/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/execution-specs/issues/comments/855930092",
    "html_url": "https://github.com/ethereum/execution-specs/issues/208#issuecomment-855930092",
    "issue_url": "https://api.github.com/repos/ethereum/execution-specs/issues/208",
    "id": 855930092,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg1NTkzMDA5Mg==",
    "user": {
      "login": "lightclient",
      "id": 14004106,
      "node_id": "MDQ6VXNlcjE0MDA0MTA2",
      "avatar_url": "https://avatars.githubusercontent.com/u/14004106?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lightclient",
      "html_url": "https://github.com/lightclient",
      "followers_url": "https://api.github.com/users/lightclient/followers",
      "following_url": "https://api.github.com/users/lightclient/following{/other_user}",
      "gists_url": "https://api.github.com/users/lightclient/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lightclient/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lightclient/subscriptions",
      "organizations_url": "https://api.github.com/users/lightclient/orgs",
      "repos_url": "https://api.github.com/users/lightclient/repos",
      "events_url": "https://api.github.com/users/lightclient/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lightclient/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-06-07T13:29:27Z",
    "updated_at": "2021-06-07T13:29:41Z",
    "author_association": "MEMBER",
    "body": "It's also possible that I still misunderstand how the `test` namespace is useful to `retesteth`. If so, please let me know :) I think it would be particularly useful to explain what the RPC end points provide that the above flow does not.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/execution-specs/issues/comments/855930092/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
