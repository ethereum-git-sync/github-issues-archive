{
  "url": "https://api.github.com/repos/ethereum/execution-apis/issues/271",
  "repository_url": "https://api.github.com/repos/ethereum/execution-apis",
  "labels_url": "https://api.github.com/repos/ethereum/execution-apis/issues/271/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/execution-apis/issues/271/comments",
  "events_url": "https://api.github.com/repos/ethereum/execution-apis/issues/271/events",
  "html_url": "https://github.com/ethereum/execution-apis/issues/271",
  "id": 1320802886,
  "node_id": "I_kwDOFoG9Gs5OudpG",
  "number": 271,
  "title": "[RFC] Engine API: is payload statuses worth reworking?",
  "user": {
    "login": "mkalinin",
    "id": 1892772,
    "node_id": "MDQ6VXNlcjE4OTI3NzI=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1892772?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mkalinin",
    "html_url": "https://github.com/mkalinin",
    "followers_url": "https://api.github.com/users/mkalinin/followers",
    "following_url": "https://api.github.com/users/mkalinin/following{/other_user}",
    "gists_url": "https://api.github.com/users/mkalinin/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mkalinin/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mkalinin/subscriptions",
    "organizations_url": "https://api.github.com/users/mkalinin/orgs",
    "repos_url": "https://api.github.com/users/mkalinin/repos",
    "events_url": "https://api.github.com/users/mkalinin/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mkalinin/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2022-07-28T11:40:21Z",
  "updated_at": "2022-08-01T14:08:28Z",
  "closed_at": null,
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "Currently, Engine API has the following payload statuses:\r\n* `VALID` - payload is valid, requires full validation\r\n* `INVALID` - payload is invalid, doesn't require full validation (block header values might be invalid)\r\n* `INVALID_BLOCK_HASH` - recently became equal to `INVALID`, see https://github.com/ethereum/execution-apis/issues/270\r\n* `ACCEPTED` - a side chain payload hasn't been validated, but ancestors of this payload are locally available\r\n* `SYNCING` - parent block of a payload is unknown; or equals to `ACCEPTED` if EL doesn't support `ACCEPTED`\r\n\r\nThe problem of utilizing `ACCEPTED` is that it does not preclude EL from pulling pieces of state from the network in order to obtain a parent state of a payload in question.\r\n\r\nApart from EL's implementation complexity, I am curious if we had a clear status meaning \"I can compute parent state *locally*\" would CL make use of it? If a state can be locally computed it should take less time and preclude the possibility of DA issues.\r\n\r\nIf yes then we could have the following statuses (names are picked for clarity not for brevity, so we can leave the same names):\r\n* `VALID`\r\n* `INVALID`\r\n* `MISSING_DATA` - parent block is unknown or parent state can't be locally computed, reorg to this block implies `SYNCING`\r\n* `HAS_REQUIRED_DATA (ACCEPTED)` - parent state is unknown but is locally computable\r\n* `VALIDATING (SYNCING)` - EL is either computing a parent state or pulling data from the network and will validate a payload once parent state is obtained\r\n\r\nELs are free to choose to not `HAS_REQUIRED_DATA ` and always response `MISSING_DATA` instead. But if EL do support the former, CL may optimise for such a support.\r\n\r\nThis proposal changes a set of statuses for Engine API methods in the following way:\r\n* `newPayload: VALID | INVALID | MISSING_DATA | HAS_REQUIRED_DATA (ACCEPTED)`\r\n* `forkchoiceUpdated: VALID | INVALID | VALIDATING (SYNCING)`\r\n\r\n**UPD**\r\nThese changes (if we decide to take them) aren't considered to be incorporated before the Merge\r\n\r\n**UPD 2**\r\nWe might even want to split `VALIDATING` into two separate statuses: `SYNCING` and `EXECUTING`. The latter would mean that the execution is in progress but all required data are locally available. This would allow CL to avoid remembering whether the payload is either `MISSING_DATA` or `HAS_REQUIRED_DATA`, and solely rely on `fcU` status to understand what EL is doing.",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/execution-apis/issues/271/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/execution-apis/issues/271/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/execution-apis/issues/comments/1198069046",
    "html_url": "https://github.com/ethereum/execution-apis/issues/271#issuecomment-1198069046",
    "issue_url": "https://api.github.com/repos/ethereum/execution-apis/issues/271",
    "id": 1198069046,
    "node_id": "IC_kwDOFoG9Gs5HaRU2",
    "user": {
      "login": "potuz",
      "id": 16044918,
      "node_id": "MDQ6VXNlcjE2MDQ0OTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/16044918?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/potuz",
      "html_url": "https://github.com/potuz",
      "followers_url": "https://api.github.com/users/potuz/followers",
      "following_url": "https://api.github.com/users/potuz/following{/other_user}",
      "gists_url": "https://api.github.com/users/potuz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/potuz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/potuz/subscriptions",
      "organizations_url": "https://api.github.com/users/potuz/orgs",
      "repos_url": "https://api.github.com/users/potuz/repos",
      "events_url": "https://api.github.com/users/potuz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/potuz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-28T12:22:14Z",
    "updated_at": "2022-07-28T12:22:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "Optimistic sync has proven to be one of the trickiest paths in our code. Only a few within the team know how the pieces patch together and the full myriad of subtle edge cases that can appear. While I appreciate that the API could be improved, I would be very much opposed to any change on these paths before the merge unless it's strictly necessary.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/execution-apis/issues/comments/1198069046/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/execution-apis/issues/comments/1199674159",
    "html_url": "https://github.com/ethereum/execution-apis/issues/271#issuecomment-1199674159",
    "issue_url": "https://api.github.com/repos/ethereum/execution-apis/issues/271",
    "id": 1199674159,
    "node_id": "IC_kwDOFoG9Gs5HgZMv",
    "user": {
      "login": "tersec",
      "id": 11422416,
      "node_id": "MDQ6VXNlcjExNDIyNDE2",
      "avatar_url": "https://avatars.githubusercontent.com/u/11422416?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tersec",
      "html_url": "https://github.com/tersec",
      "followers_url": "https://api.github.com/users/tersec/followers",
      "following_url": "https://api.github.com/users/tersec/following{/other_user}",
      "gists_url": "https://api.github.com/users/tersec/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tersec/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tersec/subscriptions",
      "organizations_url": "https://api.github.com/users/tersec/orgs",
      "repos_url": "https://api.github.com/users/tersec/repos",
      "events_url": "https://api.github.com/users/tersec/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tersec/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-29T16:25:29Z",
    "updated_at": "2022-07-29T16:25:29Z",
    "author_association": "CONTRIBUTOR",
    "body": "Well, partly because of this trickiness, but also in general because it's probably not ideal for it to be an effective requirement for reliable syncing without specifying ELs be in full-sync modes, creating the potential for non-optimistic sync to function would be useful. This change would facilitate that by clarifying for a CL that it should relatively bounded in time for an EL to return either `VALID` or `INVALID`.\r\n\r\nOne (not the only, but one) reason it's not that feasible to do anything beyond optimistic sync currently in a broadly compatible way is exactly that it depends on understanding the EL state in a way the engine API doesn't allow and the rest of the JSON-RPC `eth` namespace doesn't specify with sufficiently precise detail.\r\n\r\nThis would begin doing that.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/execution-apis/issues/comments/1199674159/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
