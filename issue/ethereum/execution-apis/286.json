{
  "url": "https://api.github.com/repos/ethereum/execution-apis/issues/286",
  "repository_url": "https://api.github.com/repos/ethereum/execution-apis",
  "labels_url": "https://api.github.com/repos/ethereum/execution-apis/issues/286/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/execution-apis/issues/286/comments",
  "events_url": "https://api.github.com/repos/ethereum/execution-apis/issues/286/events",
  "html_url": "https://github.com/ethereum/execution-apis/issues/286",
  "id": 1334283066,
  "node_id": "I_kwDOFoG9Gs5Ph4s6",
  "number": 286,
  "title": "Proposal: Error handling specification #1",
  "user": {
    "login": "JosephK95",
    "id": 86999601,
    "node_id": "MDQ6VXNlcjg2OTk5NjAx",
    "avatar_url": "https://avatars.githubusercontent.com/u/86999601?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/JosephK95",
    "html_url": "https://github.com/JosephK95",
    "followers_url": "https://api.github.com/users/JosephK95/followers",
    "following_url": "https://api.github.com/users/JosephK95/following{/other_user}",
    "gists_url": "https://api.github.com/users/JosephK95/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/JosephK95/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/JosephK95/subscriptions",
    "organizations_url": "https://api.github.com/users/JosephK95/orgs",
    "repos_url": "https://api.github.com/users/JosephK95/repos",
    "events_url": "https://api.github.com/users/JosephK95/events{/privacy}",
    "received_events_url": "https://api.github.com/users/JosephK95/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 5,
  "created_at": "2022-08-10T08:42:19Z",
  "updated_at": "2022-08-26T17:03:03Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "Hi all,\r\n\r\nI am working on a project that validates whether four Ethereum client implementations (Geth, Erigon, Nethermind, Besu) behave consistently to one another.\r\n\r\nAnd while doing the experiments, I found out that the clients handle error cases in very much different ways:\r\n\r\n----------------------------------------------------------------------------------\r\n\r\n1. Invalid block argument to `getBlockTransactionCount`\r\n- (Geth, Erigon, Besu) returns `null`\r\n- (Nethermind) returns an `Error`\r\n\r\n2. Invalid block argument to `getPastLogs`\r\n- (Geth, Erigon, Besu) returns `[]`\r\n- (Nethermind) returns an `Error`\r\n\r\n3. Invalid block argument to `getTransactionFromBlock`\r\n- (Geth, Erigon, Besu) returns `null`\r\n- (Nethermind) returns an `Error`\r\n\r\n4. Invalid block argument to `getBlockUncleCount`\r\n- (Geth, Erigon, Besu) returns `null`\r\n- (Nethermind) returns an `Error`\r\n\r\n5. Invalid block argument to `getUncle`\r\n- (Geth, Erigon, Besu) returns `null`\r\n- (Nethermind) returns an `Error`\r\n\r\n6. Invalid block argument to `getCode`  (1)\r\n- (Geth, Nethermind, Besu) returns an `Error`\r\n- (Erigon) returns the code of the address\r\n\r\n7. Invalid block argument to `getCode` (2)\r\n- (Geth, Erigon, Nethermind) returns an `Error`\r\n- (Besu) returns `null`\r\n\r\n8. Invalid block argument to `getBalance` \r\n- (Geth, Erigon, Nethermind) returns an `Error`\r\n- (Besu) returns `null`\r\n\r\n9. Invalid block argument to `getTransactionCount`\r\n- (Geth, Erigon, Nethermind) returns an `Error`\r\n- (Besu) returns `0`\r\n\r\n10. Invalid block argument to `getStorageAt`\r\n- (Geth, Erigon, Nethermind) returns an `Error`\r\n- (Besu) returns `null`\r\n\r\n----------------------------------------------------------------------------------\r\n\r\n11. Unknown account to `getProof`\r\n- (Geth, Nethermind) returns an account object\r\n- (Besu) returns an `Error`\r\n- Note: Erigon does not support `eth_getProof`\r\n\r\n----------------------------------------------------------------------------------\r\n\r\n12. Wrong range to `getPastLogs`\r\n- (Geth, Besu) returns `[]`\r\n- (Erigon, Nethermind) returns an `Error`\r\n\r\n13. Wrong range to `getFeeHistory`\r\n- (Geth, Erigon) returns `{ \"oldestBlock\": \"0x0\", \"gasUsedRatio\": null }`\r\n- (Nethermind, Besu) returns an `Error`\r\n\r\n----------------------------------------------------------------------------------\r\n\r\n14. Invalid index to `getTransactionFromBlock`\r\n- (Geth, Erigon, Besu) returns `null`\r\n- (Nethermind) returns an `Error`\r\n\r\n15. Invalid index to `getUncle`\r\n- (Geth, Erigon, Besu) returns `null`\r\n- (Nethermind) returns an `Error`\r\n\r\nI assume these discrepancies derived from the lack of error handling specification in this document. So, how about specifying the expected results (e.g., Error, null, 0, [ ], ...) so that different client implementations behave consistently in error cases as well?\r\n\r\nExample test cases can be found in the following link: [https://github.com/JosephK95/RPCTests](url)\r\n\r\nThanks and please let me know if there is anything I can help you with.",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/execution-apis/issues/286/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/execution-apis/issues/286/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/execution-apis/issues/comments/1212425586",
    "html_url": "https://github.com/ethereum/execution-apis/issues/286#issuecomment-1212425586",
    "issue_url": "https://api.github.com/repos/ethereum/execution-apis/issues/286",
    "id": 1212425586,
    "node_id": "IC_kwDOFoG9Gs5IRCVy",
    "user": {
      "login": "lightclient",
      "id": 14004106,
      "node_id": "MDQ6VXNlcjE0MDA0MTA2",
      "avatar_url": "https://avatars.githubusercontent.com/u/14004106?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lightclient",
      "html_url": "https://github.com/lightclient",
      "followers_url": "https://api.github.com/users/lightclient/followers",
      "following_url": "https://api.github.com/users/lightclient/following{/other_user}",
      "gists_url": "https://api.github.com/users/lightclient/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lightclient/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lightclient/subscriptions",
      "organizations_url": "https://api.github.com/users/lightclient/orgs",
      "repos_url": "https://api.github.com/users/lightclient/repos",
      "events_url": "https://api.github.com/users/lightclient/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lightclient/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-11T19:54:38Z",
    "updated_at": "2022-08-11T19:54:38Z",
    "author_association": "MEMBER",
    "body": "@JosephK95 thank you for these reports, this is very helpful. Just curious - are you intending to convert these into tests for this repository or did you just want to log these issues with us?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/execution-apis/issues/comments/1212425586/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/execution-apis/issues/comments/1212711592",
    "html_url": "https://github.com/ethereum/execution-apis/issues/286#issuecomment-1212711592",
    "issue_url": "https://api.github.com/repos/ethereum/execution-apis/issues/286",
    "id": 1212711592,
    "node_id": "IC_kwDOFoG9Gs5ISIKo",
    "user": {
      "login": "JosephK95",
      "id": 86999601,
      "node_id": "MDQ6VXNlcjg2OTk5NjAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/86999601?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JosephK95",
      "html_url": "https://github.com/JosephK95",
      "followers_url": "https://api.github.com/users/JosephK95/followers",
      "following_url": "https://api.github.com/users/JosephK95/following{/other_user}",
      "gists_url": "https://api.github.com/users/JosephK95/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JosephK95/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JosephK95/subscriptions",
      "organizations_url": "https://api.github.com/users/JosephK95/orgs",
      "repos_url": "https://api.github.com/users/JosephK95/repos",
      "events_url": "https://api.github.com/users/JosephK95/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JosephK95/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-12T04:12:47Z",
    "updated_at": "2022-08-12T07:50:56Z",
    "author_association": "NONE",
    "body": "Hi, @lightclient.\r\n\r\nThanks for your response. My initial purpose was to share the issues with you so that you can consider reflecting them into the specification.\r\n\r\nI thought you could specify the expected return values in corner cases just like the Ethereum website did for some of the APIs: https://ethereum.org/ko/developers/docs/apis/json-rpc/\r\n\r\nFor example, the website specifies the following for the return value of `eth_getTransactionByBlockNumberAndIndex`:\r\n<pre>\r\nReturns\r\n\r\nObject - A transaction object, or null when no transaction was found:\r\n</pre>\r\n\r\nWhile the decision making can be somewhat subjective, I personally think the justifications from Geth sound reasonable: https://github.com/ethereum/go-ethereum/issues/25495\r\n\r\nAnd while reading your comment, I thought it would be honorable if our project can somehow contribute to the tests in your repository.\r\n\r\nConsidering that we have techniques to automatically generate valid chains and JavaScript test cases that trigger RPC requests, could you inform us which form of tests would fit your needs that we can contribute to?\r\n\r\nThanks.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/execution-apis/issues/comments/1212711592/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/execution-apis/issues/comments/1213091431",
    "html_url": "https://github.com/ethereum/execution-apis/issues/286#issuecomment-1213091431",
    "issue_url": "https://api.github.com/repos/ethereum/execution-apis/issues/286",
    "id": 1213091431,
    "node_id": "IC_kwDOFoG9Gs5ITk5n",
    "user": {
      "login": "lightclient",
      "id": 14004106,
      "node_id": "MDQ6VXNlcjE0MDA0MTA2",
      "avatar_url": "https://avatars.githubusercontent.com/u/14004106?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lightclient",
      "html_url": "https://github.com/lightclient",
      "followers_url": "https://api.github.com/users/lightclient/followers",
      "following_url": "https://api.github.com/users/lightclient/following{/other_user}",
      "gists_url": "https://api.github.com/users/lightclient/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lightclient/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lightclient/subscriptions",
      "organizations_url": "https://api.github.com/users/lightclient/orgs",
      "repos_url": "https://api.github.com/users/lightclient/repos",
      "events_url": "https://api.github.com/users/lightclient/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lightclient/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-12T13:06:54Z",
    "updated_at": "2022-08-12T13:06:54Z",
    "author_association": "MEMBER",
    "body": "Could you please publish your `examples.tar.gz` to a repository so I can view without downloading and extracting a tar?\r\n\r\nI am grateful for your contributions and would be very happy to have you contribute your tests to this repository. Unfortunately, it may be difficult to do so. Although the testing format is very simple (see the `tests` directory [here](https://github.com/ethereum/execution-apis/tree/main/tests), then you can view a test with the `io` extension), it relies heavily on the chain generation step.\r\n\r\nLike you, I have written a tool ([rpctestgen](https://github.com/lightclient/rpctestgen)) to build a chain and execute the RPC calls. My hesitation is that I anticipate more changes to these files over time as we fill in the tests with more test cases. Because all of the tests are currently generated using a single `chain.rlp` and `genesis.json` file, I would need i) rerun your tool in the future (meaning I need to ensure it continues working in perpetuity) or ii) we would need to sort out a new layout for the tests so each test case defines which chain it will run against. ii) will probably require doing i) regardless though, because RPC methods will occasionally change and in those cases we'd need to regenerate tests anyways. \r\n\r\nSo, tldr; I'm apprehensive about accepting new tests from a generator that I don't maintain, because I will need to keep an eye on it going forward.\r\n\r\n--\r\n\r\nIf you are interested in writing your tests in `rpctestgen`, I would be happy to provide guidance. But the feedback you have provided is already extremely useful.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/execution-apis/issues/comments/1213091431/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/execution-apis/issues/comments/1221233700",
    "html_url": "https://github.com/ethereum/execution-apis/issues/286#issuecomment-1221233700",
    "issue_url": "https://api.github.com/repos/ethereum/execution-apis/issues/286",
    "id": 1221233700,
    "node_id": "IC_kwDOFoG9Gs5Iyowk",
    "user": {
      "login": "JosephK95",
      "id": 86999601,
      "node_id": "MDQ6VXNlcjg2OTk5NjAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/86999601?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JosephK95",
      "html_url": "https://github.com/JosephK95",
      "followers_url": "https://api.github.com/users/JosephK95/followers",
      "following_url": "https://api.github.com/users/JosephK95/following{/other_user}",
      "gists_url": "https://api.github.com/users/JosephK95/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JosephK95/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JosephK95/subscriptions",
      "organizations_url": "https://api.github.com/users/JosephK95/orgs",
      "repos_url": "https://api.github.com/users/JosephK95/repos",
      "events_url": "https://api.github.com/users/JosephK95/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JosephK95/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-20T05:03:40Z",
    "updated_at": "2022-08-20T05:03:40Z",
    "author_association": "NONE",
    "body": "Hi, @lightclient.\r\n\r\nThanks for your detailed response.\r\nYou can find the example test cases in the following repository: [https://github.com/JosephK95/RPCTests](url)\r\n\r\nCould you give me some examples on how the changes of RPC methods can invalidate original test cases?\r\n(I am just asking to understand your points more clearly.)\r\n\r\nAlso, could you let us know if you have any plans to update your specification and standardize the expected values for error cases?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/execution-apis/issues/comments/1221233700/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/execution-apis/issues/comments/1228726194",
    "html_url": "https://github.com/ethereum/execution-apis/issues/286#issuecomment-1228726194",
    "issue_url": "https://api.github.com/repos/ethereum/execution-apis/issues/286",
    "id": 1228726194,
    "node_id": "IC_kwDOFoG9Gs5JPN-y",
    "user": {
      "login": "lightclient",
      "id": 14004106,
      "node_id": "MDQ6VXNlcjE0MDA0MTA2",
      "avatar_url": "https://avatars.githubusercontent.com/u/14004106?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lightclient",
      "html_url": "https://github.com/lightclient",
      "followers_url": "https://api.github.com/users/lightclient/followers",
      "following_url": "https://api.github.com/users/lightclient/following{/other_user}",
      "gists_url": "https://api.github.com/users/lightclient/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lightclient/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lightclient/subscriptions",
      "organizations_url": "https://api.github.com/users/lightclient/orgs",
      "repos_url": "https://api.github.com/users/lightclient/repos",
      "events_url": "https://api.github.com/users/lightclient/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lightclient/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-26T17:03:03Z",
    "updated_at": "2022-08-26T17:03:03Z",
    "author_association": "MEMBER",
    "body": "Sorry for the late response @JosephK95, must've missed this.\r\n\r\n> Could you give me some examples on how the changes of RPC methods can invalidate original test cases?\r\n\r\nSo here, I was specifically referring to changing the underlying chain. For example, suppose we have a test for `eth_getBalance`. The genesis lists `0xaa` with `1 wei`. I generate the test fixtures for this repo and it statically lists the response as something like `{\"balance\": \"0x1\"}`, along with the `genesis.json` + `chain.rlp`. Now, if for some reason I need to test something else where the balance is different and I update the genesis to list `0xaa` with `2 wei`, I need to regenerate the test fixtures to account for the update. If we also have test fixtures generated using your tool, I would then now need to run your tool again. Essentially meaning _someone_ would need to ensure it continues running.\r\n\r\nThe other situation we may need to regenerate tests is if the RPC method definition is changed in some way. For example, a new field `\"unit\": \"wei\"` is added to the above response. We could manually add those, but would much prefer they are generated automatically.\r\n\r\n> Also, could you let us know if you have any plans to update your specification and standardize the expected values for error cases?\r\n\r\nWe do intend to continue maintaining this specification. I don't have the bandwidth in the short term to work on standardizing expected values for error cases. I would gladly accept a PR of test cases so that individual client teams [can see](https://hivetests2.ethdevops.io) that their client deviates from the expected response.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/execution-apis/issues/comments/1228726194/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
