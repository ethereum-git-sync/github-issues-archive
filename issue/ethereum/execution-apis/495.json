{
  "url": "https://api.github.com/repos/ethereum/execution-apis/issues/495",
  "repository_url": "https://api.github.com/repos/ethereum/execution-apis",
  "labels_url": "https://api.github.com/repos/ethereum/execution-apis/issues/495/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/execution-apis/issues/495/comments",
  "events_url": "https://api.github.com/repos/ethereum/execution-apis/issues/495/events",
  "html_url": "https://github.com/ethereum/execution-apis/issues/495",
  "id": 2008046235,
  "node_id": "I_kwDOFoG9Gs53sFqb",
  "number": 495,
  "title": "Deprecating the pending state",
  "user": {
    "login": "s1na",
    "id": 1591639,
    "node_id": "MDQ6VXNlcjE1OTE2Mzk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1591639?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/s1na",
    "html_url": "https://github.com/s1na",
    "followers_url": "https://api.github.com/users/s1na/followers",
    "following_url": "https://api.github.com/users/s1na/following{/other_user}",
    "gists_url": "https://api.github.com/users/s1na/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/s1na/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/s1na/subscriptions",
    "organizations_url": "https://api.github.com/users/s1na/orgs",
    "repos_url": "https://api.github.com/users/s1na/repos",
    "events_url": "https://api.github.com/users/s1na/events{/privacy}",
    "received_events_url": "https://api.github.com/users/s1na/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 7,
  "created_at": "2023-11-23T11:37:23Z",
  "updated_at": "2024-01-29T22:32:28Z",
  "closed_at": null,
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "This issue is to keep track of the conversation started at the JSON-RPC session at devconnect.\r\n\r\nMost state-related methods which take in a blocktag allow users to specify \"pending\". The semantic difference to \"latest\" is that the EL keeps track of a pending state by applying all of the pending transactions on top of the current state.\r\n\r\nWe're questioning the practical use of this tag as it depends heavily on the local view of the txpool. The mempool is fluid, there is no guarantee that the transactions there will be mined. Moreover different nodes within an RPC provider infrastructure have different views on the mempool and some notable ones do not serve pending state.\r\n\r\nThe path to deprecating \"pending\" we are proposing is to create an empty pending block. This means the block context fields such as number and timestamp will reflect the \"next\" block, but state is from that of \"latest\". This also means that there will be no guarantees that the client can deliver pending logs. The only exception would be `eth_getTransactionCount` which should return the latest nonce for an account, considering also txes in the mempool.\r\n\r\nThis will alleviate some load from nodes to build the pending block and maintain its state while keeping most of the current use-cases.\r\n\r\nLooking into the future: by adding block context overrides to relevant methods such as `eth_call`, `eth_estimateGas` and `eth_createAccessList` we remove the need for creating an empty pending block. Users can simulate on top of \"latest\" but pass in overrides for the next block. Furthermore if clients implement `eth_multicall`, it will be possible to simulate the pending state by passing higher weighted pending txes to multicall.",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/execution-apis/issues/495/reactions",
    "total_count": 4,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 4,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/execution-apis/issues/495/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/execution-apis/issues/comments/1824897726",
    "html_url": "https://github.com/ethereum/execution-apis/issues/495#issuecomment-1824897726",
    "issue_url": "https://api.github.com/repos/ethereum/execution-apis/issues/495",
    "id": 1824897726,
    "node_id": "IC_kwDOFoG9Gs5sxbq-",
    "user": {
      "login": "protolambda",
      "id": 19571989,
      "node_id": "MDQ6VXNlcjE5NTcxOTg5",
      "avatar_url": "https://avatars.githubusercontent.com/u/19571989?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/protolambda",
      "html_url": "https://github.com/protolambda",
      "followers_url": "https://api.github.com/users/protolambda/followers",
      "following_url": "https://api.github.com/users/protolambda/following{/other_user}",
      "gists_url": "https://api.github.com/users/protolambda/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/protolambda/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/protolambda/subscriptions",
      "organizations_url": "https://api.github.com/users/protolambda/orgs",
      "repos_url": "https://api.github.com/users/protolambda/repos",
      "events_url": "https://api.github.com/users/protolambda/events{/privacy}",
      "received_events_url": "https://api.github.com/users/protolambda/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-11-23T21:00:51Z",
    "updated_at": "2023-11-23T21:00:51Z",
    "author_association": "MEMBER",
    "body": "In the OP-Stack we've been aliasing the `pending` RPC label to `latest`, to:\r\n- Save the cost of computing a pending-block (low block-time of 2 seconds makes recomputing a 30M gas block quite expensive).\r\n- Serve sensible data, when the tx-pool is private.\r\n\r\nThis has been working well enough for L2 users (although maybe better than L1 due to the lower block time). I support the aliasing of it to `latest` as deprecation strategy on L1.\r\n\r\nAnd we still support `eth_getTransactionCount`, since it's attached to the mem-pool, not the actual pending state, so is not as costly to maintain. And since it does not reveal the full transaction data, generally not regarded as privacy issue, and a good UX trade-off.\r\n\r\nSo far we've left computation of `pending` state still as opt-in feature for individual node users, which then allows them to inspect the block-building of their local mempool (which just contains a copy of their own transactions, that the node passed on privately to the sequencer endpoint), which they can tune the gas-limit of as well (again to save unnecessary re-computation cost). But from user-issues it appears that nobody is actually using the opt-in feature.\r\n\r\nWith the removal of Clique from EL clients, removing the `pending` flag unblocks the cleanup of a lot of legacy pre-engine-API block-building, so I'm very much in favor from the perspective of reducing code complexity.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/execution-apis/issues/comments/1824897726/reactions",
      "total_count": 2,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 1,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/execution-apis/issues/comments/1825371667",
    "html_url": "https://github.com/ethereum/execution-apis/issues/495#issuecomment-1825371667",
    "issue_url": "https://api.github.com/repos/ethereum/execution-apis/issues/495",
    "id": 1825371667,
    "node_id": "IC_kwDOFoG9Gs5szPYT",
    "user": {
      "login": "s1na",
      "id": 1591639,
      "node_id": "MDQ6VXNlcjE1OTE2Mzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1591639?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/s1na",
      "html_url": "https://github.com/s1na",
      "followers_url": "https://api.github.com/users/s1na/followers",
      "following_url": "https://api.github.com/users/s1na/following{/other_user}",
      "gists_url": "https://api.github.com/users/s1na/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/s1na/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/s1na/subscriptions",
      "organizations_url": "https://api.github.com/users/s1na/orgs",
      "repos_url": "https://api.github.com/users/s1na/repos",
      "events_url": "https://api.github.com/users/s1na/events{/privacy}",
      "received_events_url": "https://api.github.com/users/s1na/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-11-24T09:23:31Z",
    "updated_at": "2023-11-24T09:23:31Z",
    "author_association": "MEMBER",
    "body": "Adding a note that this means it will not be possible to retrieve pending logs anymore. I personally think if pending state/logs are required they can be computed using eth_multicall over the mempool set.\r\n\r\nLink to geth implementation: https://github.com/ethereum/go-ethereum/pull/28440",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/execution-apis/issues/comments/1825371667/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/execution-apis/issues/comments/1825377155",
    "html_url": "https://github.com/ethereum/execution-apis/issues/495#issuecomment-1825377155",
    "issue_url": "https://api.github.com/repos/ethereum/execution-apis/issues/495",
    "id": 1825377155,
    "node_id": "IC_kwDOFoG9Gs5szQuD",
    "user": {
      "login": "lmittmann",
      "id": 3458786,
      "node_id": "MDQ6VXNlcjM0NTg3ODY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3458786?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lmittmann",
      "html_url": "https://github.com/lmittmann",
      "followers_url": "https://api.github.com/users/lmittmann/followers",
      "following_url": "https://api.github.com/users/lmittmann/following{/other_user}",
      "gists_url": "https://api.github.com/users/lmittmann/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lmittmann/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lmittmann/subscriptions",
      "organizations_url": "https://api.github.com/users/lmittmann/orgs",
      "repos_url": "https://api.github.com/users/lmittmann/repos",
      "events_url": "https://api.github.com/users/lmittmann/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lmittmann/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-11-24T09:27:44Z",
    "updated_at": "2023-11-24T09:27:44Z",
    "author_association": "NONE",
    "body": "The `pending` header is very useful for simulating transactions for the `pending` block when constructing the VM's block context.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/execution-apis/issues/comments/1825377155/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/execution-apis/issues/comments/1825408249",
    "html_url": "https://github.com/ethereum/execution-apis/issues/495#issuecomment-1825408249",
    "issue_url": "https://api.github.com/repos/ethereum/execution-apis/issues/495",
    "id": 1825408249,
    "node_id": "IC_kwDOFoG9Gs5szYT5",
    "user": {
      "login": "s1na",
      "id": 1591639,
      "node_id": "MDQ6VXNlcjE1OTE2Mzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1591639?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/s1na",
      "html_url": "https://github.com/s1na",
      "followers_url": "https://api.github.com/users/s1na/followers",
      "following_url": "https://api.github.com/users/s1na/following{/other_user}",
      "gists_url": "https://api.github.com/users/s1na/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/s1na/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/s1na/subscriptions",
      "organizations_url": "https://api.github.com/users/s1na/orgs",
      "repos_url": "https://api.github.com/users/s1na/repos",
      "events_url": "https://api.github.com/users/s1na/events{/privacy}",
      "received_events_url": "https://api.github.com/users/s1na/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-11-24T09:50:53Z",
    "updated_at": "2023-11-24T09:50:53Z",
    "author_association": "MEMBER",
    "body": "> The pending header is very useful for simulating transactions for the pending block when constructing the VM's block context.\r\n\r\nInteresting. The fields that might be useful are: `timestamp`, `number`, `baseFeePerGas` and `gasLimit`. They are all computable off-band based on previous header but I see the point that they are consensus logic and better handled within the node.\r\n\r\nIf my assumption is right I think a path forward is to return a pending header with 0 transactions. It will fill the fields above but every other field will be trash.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/execution-apis/issues/comments/1825408249/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/execution-apis/issues/comments/1825497699",
    "html_url": "https://github.com/ethereum/execution-apis/issues/495#issuecomment-1825497699",
    "issue_url": "https://api.github.com/repos/ethereum/execution-apis/issues/495",
    "id": 1825497699,
    "node_id": "IC_kwDOFoG9Gs5szuJj",
    "user": {
      "login": "niklasnatter",
      "id": 13310795,
      "node_id": "MDQ6VXNlcjEzMzEwNzk1",
      "avatar_url": "https://avatars.githubusercontent.com/u/13310795?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/niklasnatter",
      "html_url": "https://github.com/niklasnatter",
      "followers_url": "https://api.github.com/users/niklasnatter/followers",
      "following_url": "https://api.github.com/users/niklasnatter/following{/other_user}",
      "gists_url": "https://api.github.com/users/niklasnatter/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/niklasnatter/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/niklasnatter/subscriptions",
      "organizations_url": "https://api.github.com/users/niklasnatter/orgs",
      "repos_url": "https://api.github.com/users/niklasnatter/repos",
      "events_url": "https://api.github.com/users/niklasnatter/events{/privacy}",
      "received_events_url": "https://api.github.com/users/niklasnatter/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-11-24T10:55:16Z",
    "updated_at": "2023-11-24T10:55:16Z",
    "author_association": "NONE",
    "body": "> The `pending` header is very useful for simulating transactions for the `pending` block when constructing the VM's block context.\r\n\r\nOne relevant example for this is using the `eth_createAccessList` with the `pending` block tag. A lot of contracts that use checkpoints (eg. Uniswap v3 for oracle observations) do a binary search that uses the current block number. Falling back to `latest` will lead to wrong entries in the access list in this case.\r\n\r\nA more flexible way to cover these cases could be supporting `blockOverrides` (like already implemented for `eth_call` in go-ethereum: https://github.com/ethereum/go-ethereum/pull/26414) for the relevant RPC methods.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/execution-apis/issues/comments/1825497699/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/execution-apis/issues/comments/1825564588",
    "html_url": "https://github.com/ethereum/execution-apis/issues/495#issuecomment-1825564588",
    "issue_url": "https://api.github.com/repos/ethereum/execution-apis/issues/495",
    "id": 1825564588,
    "node_id": "IC_kwDOFoG9Gs5sz-es",
    "user": {
      "login": "s1na",
      "id": 1591639,
      "node_id": "MDQ6VXNlcjE1OTE2Mzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1591639?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/s1na",
      "html_url": "https://github.com/s1na",
      "followers_url": "https://api.github.com/users/s1na/followers",
      "following_url": "https://api.github.com/users/s1na/following{/other_user}",
      "gists_url": "https://api.github.com/users/s1na/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/s1na/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/s1na/subscriptions",
      "organizations_url": "https://api.github.com/users/s1na/orgs",
      "repos_url": "https://api.github.com/users/s1na/repos",
      "events_url": "https://api.github.com/users/s1na/events{/privacy}",
      "received_events_url": "https://api.github.com/users/s1na/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-11-24T11:51:37Z",
    "updated_at": "2023-11-24T11:51:37Z",
    "author_association": "MEMBER",
    "body": "Gotcha. I will update the description above to clearly specify: \"we will use a pending block with zero transactions\" when \"pending\" is passed. This should cover most cases.\r\n\r\nThat said, I agree we should push `blockOverrides` to be implemented across the board by the time we fully remove \"pending\".",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/execution-apis/issues/comments/1825564588/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/execution-apis/issues/comments/1830672595",
    "html_url": "https://github.com/ethereum/execution-apis/issues/495#issuecomment-1830672595",
    "issue_url": "https://api.github.com/repos/ethereum/execution-apis/issues/495",
    "id": 1830672595,
    "node_id": "IC_kwDOFoG9Gs5tHdjT",
    "user": {
      "login": "ryanschneider",
      "id": 53520,
      "node_id": "MDQ6VXNlcjUzNTIw",
      "avatar_url": "https://avatars.githubusercontent.com/u/53520?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanschneider",
      "html_url": "https://github.com/ryanschneider",
      "followers_url": "https://api.github.com/users/ryanschneider/followers",
      "following_url": "https://api.github.com/users/ryanschneider/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanschneider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanschneider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanschneider/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanschneider/orgs",
      "repos_url": "https://api.github.com/users/ryanschneider/repos",
      "events_url": "https://api.github.com/users/ryanschneider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanschneider/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-11-28T20:29:04Z",
    "updated_at": "2023-11-28T20:29:04Z",
    "author_association": "NONE",
    "body": "> And we still support `eth_getTransactionCount`\r\n\r\nI would advocate _against_ this since I think it gives users a false sense of \"correctness\", instead I think we should be encouraging users/wallets to do their own \"off chain/out of pool\" nonce management.  In fact I'd be in favor of a new 2718 tx type that supports a different nonce/replay protection scheme.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/execution-apis/issues/comments/1830672595/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
