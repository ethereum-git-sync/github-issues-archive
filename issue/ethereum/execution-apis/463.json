{
  "url": "https://api.github.com/repos/ethereum/execution-apis/issues/463",
  "repository_url": "https://api.github.com/repos/ethereum/execution-apis",
  "labels_url": "https://api.github.com/repos/ethereum/execution-apis/issues/463/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/execution-apis/issues/463/comments",
  "events_url": "https://api.github.com/repos/ethereum/execution-apis/issues/463/events",
  "html_url": "https://github.com/ethereum/execution-apis/issues/463",
  "id": 1861789308,
  "node_id": "I_kwDOFoG9Gs5u-KZ8",
  "number": 463,
  "title": "`eth_call` underspecified return error message",
  "user": {
    "login": "emlautarom1",
    "id": 31224949,
    "node_id": "MDQ6VXNlcjMxMjI0OTQ5",
    "avatar_url": "https://avatars.githubusercontent.com/u/31224949?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/emlautarom1",
    "html_url": "https://github.com/emlautarom1",
    "followers_url": "https://api.github.com/users/emlautarom1/followers",
    "following_url": "https://api.github.com/users/emlautarom1/following{/other_user}",
    "gists_url": "https://api.github.com/users/emlautarom1/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/emlautarom1/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/emlautarom1/subscriptions",
    "organizations_url": "https://api.github.com/users/emlautarom1/orgs",
    "repos_url": "https://api.github.com/users/emlautarom1/repos",
    "events_url": "https://api.github.com/users/emlautarom1/events{/privacy}",
    "received_events_url": "https://api.github.com/users/emlautarom1/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 5,
  "created_at": "2023-08-22T16:15:04Z",
  "updated_at": "2023-10-31T05:30:21Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "The `eth_call` method can result in a execution error when, for example, a contract uses a `revert` operation. The current spec does not define how should the return error look like, making it hard for users to parse the execution failure cause.\r\n\r\nThe following screenshot perfectly describes the current situation for users: \r\n\r\n![E5PEFfrXoAAjaGU](https://github.com/ethereum/execution-apis/assets/31224949/56225995-fb62-4977-a550-75a411175010)\r\n\r\n> Source: https://twitter.com/smpalladino/status/1410686918296313869/photo/1.\r\n\r\nIt would be great if all clients could agree in a single, standardized format for error messages.",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/execution-apis/issues/463/reactions",
    "total_count": 1,
    "+1": 1,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/execution-apis/issues/463/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/execution-apis/issues/comments/1781049561",
    "html_url": "https://github.com/ethereum/execution-apis/issues/463#issuecomment-1781049561",
    "issue_url": "https://api.github.com/repos/ethereum/execution-apis/issues/463",
    "id": 1781049561,
    "node_id": "IC_kwDOFoG9Gs5qKKjZ",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-10-26T12:44:00Z",
    "updated_at": "2023-10-26T12:44:00Z",
    "author_association": "MEMBER",
    "body": "Historically, JSON-RPC errors were reserved for protocol errors and not applied to EVM execution errors.  If we want to maintain this pattern, then the JSON-RPC response would be a success with something in the `result` field.  I generally think we should continue following this pattern as upcoming API feature additions like `eth_multicall` may have a subset of calls that revert and some that are a success so from the protocol level, a success should be returned.\r\n\r\nAs to what to put in the `result` field of the JSON-RPC response, I don't think the Ethereum client (JSON-RPC server) should try to do any sort of revert byte decoding.  The JSON-RPC server doesn't have enough context to do this correctly so at best it would just be making educated guesses.  The client (e.g., web app) has far more context and is in a much better position to properly decode the bytes.\r\n\r\nIt does seem like there needs to be some way to indicate that the result was erroneous, and prepending some ASCII text to a hex encoded byte array feels like just about the worst way to achieve this.  An ideal solution, if we were building something from the ground up, would be to have the JSON-RPC `result` be an object like `{ success: false, reason: 'Execution Reverted', data: '0x...' }`.\r\n\r\nThis would allow clients to discriminate on the `success` and if we want to add other failure modes in the future we can include additional strings to a union of possible values for the `reason` field which can also be discriminated on.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/execution-apis/issues/comments/1781049561/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/execution-apis/issues/comments/1781485075",
    "html_url": "https://github.com/ethereum/execution-apis/issues/463#issuecomment-1781485075",
    "issue_url": "https://api.github.com/repos/ethereum/execution-apis/issues/463",
    "id": 1781485075,
    "node_id": "IC_kwDOFoG9Gs5qL04T",
    "user": {
      "login": "emlautarom1",
      "id": 31224949,
      "node_id": "MDQ6VXNlcjMxMjI0OTQ5",
      "avatar_url": "https://avatars.githubusercontent.com/u/31224949?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/emlautarom1",
      "html_url": "https://github.com/emlautarom1",
      "followers_url": "https://api.github.com/users/emlautarom1/followers",
      "following_url": "https://api.github.com/users/emlautarom1/following{/other_user}",
      "gists_url": "https://api.github.com/users/emlautarom1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/emlautarom1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/emlautarom1/subscriptions",
      "organizations_url": "https://api.github.com/users/emlautarom1/orgs",
      "repos_url": "https://api.github.com/users/emlautarom1/repos",
      "events_url": "https://api.github.com/users/emlautarom1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/emlautarom1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-10-26T16:47:47Z",
    "updated_at": "2023-10-26T16:47:47Z",
    "author_association": "NONE",
    "body": "> It does seem like there needs to be some way to indicate that the result was erroneous, and prepending some ASCII text to a hex encoded byte array feels like just about the worst way to achieve this.\r\n\r\n100% agree since it forces clients to perform prefix/regex checks.\r\n\r\n> I don't think the Ethereum client (JSON-RPC server) should try to do any sort of revert byte decoding. The JSON-RPC server doesn't have enough context to do this correctly so at best it would just be making educated guesses. \r\n\r\nServers can decode information from these error messages using well defined formats (see: https://docs.soliditylang.org/en/v0.8.22/control-structures.html#revert). Still, these formats are subject to change, so I think it should be considered an optional feature, maybe by including a `message` field in case of failure.\r\n\r\nFor a failure case, the response would look something like:\r\n\r\n```jsonc\r\n{\r\n    \"success\": false,\r\n    \"reason\": \"Execution Reverted\",\r\n    \"message\": \"Contract check failed\", // optional on a per-client basis (not enforced by spec)\r\n    \"data\": \"0x...\"\r\n}\r\n```\r\n\r\nwhile on success, it would look like:\r\n\r\n```jsonc\r\n{\r\n    \"success\": true,\r\n    \"gas\": \"0x123456\"\r\n}\r\n```\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/execution-apis/issues/comments/1781485075/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/execution-apis/issues/comments/1782354544",
    "html_url": "https://github.com/ethereum/execution-apis/issues/463#issuecomment-1782354544",
    "issue_url": "https://api.github.com/repos/ethereum/execution-apis/issues/463",
    "id": 1782354544,
    "node_id": "IC_kwDOFoG9Gs5qPJJw",
    "user": {
      "login": "mfw78",
      "id": 53399572,
      "node_id": "MDQ6VXNlcjUzMzk5NTcy",
      "avatar_url": "https://avatars.githubusercontent.com/u/53399572?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mfw78",
      "html_url": "https://github.com/mfw78",
      "followers_url": "https://api.github.com/users/mfw78/followers",
      "following_url": "https://api.github.com/users/mfw78/following{/other_user}",
      "gists_url": "https://api.github.com/users/mfw78/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mfw78/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mfw78/subscriptions",
      "organizations_url": "https://api.github.com/users/mfw78/orgs",
      "repos_url": "https://api.github.com/users/mfw78/repos",
      "events_url": "https://api.github.com/users/mfw78/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mfw78/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-10-27T06:12:34Z",
    "updated_at": "2023-10-27T06:12:34Z",
    "author_association": "NONE",
    "body": "This is a great initiative to standardise this part of the JSON-RPC spec, and has been the source of many headaches.\r\n\r\n> ```\r\n> \r\n> while on success, it would look like:\r\n> \r\n> ```js\r\n> {\r\n>     \"success\": true,\r\n>     \"gas\": \"0x123456\"\r\n> }\r\n> ```\r\n\r\nJust confirming on the `success` case that there would also be `data`, such that:\r\n\r\n```js\r\n{\r\n    \"success\": true,\r\n    \"gas\": \"0x123456\",\r\n    \"data\": \"0x...\"\r\n}\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/execution-apis/issues/comments/1782354544/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/execution-apis/issues/comments/1785598624",
    "html_url": "https://github.com/ethereum/execution-apis/issues/463#issuecomment-1785598624",
    "issue_url": "https://api.github.com/repos/ethereum/execution-apis/issues/463",
    "id": 1785598624,
    "node_id": "IC_kwDOFoG9Gs5qbhKg",
    "user": {
      "login": "s1na",
      "id": 1591639,
      "node_id": "MDQ6VXNlcjE1OTE2Mzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1591639?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/s1na",
      "html_url": "https://github.com/s1na",
      "followers_url": "https://api.github.com/users/s1na/followers",
      "following_url": "https://api.github.com/users/s1na/following{/other_user}",
      "gists_url": "https://api.github.com/users/s1na/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/s1na/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/s1na/subscriptions",
      "organizations_url": "https://api.github.com/users/s1na/orgs",
      "repos_url": "https://api.github.com/users/s1na/repos",
      "events_url": "https://api.github.com/users/s1na/events{/privacy}",
      "received_events_url": "https://api.github.com/users/s1na/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-10-30T16:35:14Z",
    "updated_at": "2023-10-30T16:35:14Z",
    "author_association": "MEMBER",
    "body": "I agree it'd be good to standardize this between clients, and not only this. The way I'd approach this is to add an error code for \"execution reverted\" and let clients flexible on the actual wording. But agree with adding a separate field for the decoded revert message.\r\n\r\nWe can take this further by defining an error code for all failures that can happen as part of EVM execution, e.g. stack over/underflow. All clients necessarily will share the same failures because this is consensus-critical code. Only their error messages could be different. Adding an error code would allow for different messages (e.g. some clients might wish to add context like opcode information).\r\n\r\nFor context, this is roughly the list of all these faults:\r\n\r\n```golang\r\nconst (\r\n \tVMErrorCodeOutOfGas = 1 + iota\r\n \tVMErrorCodeCodeStoreOutOfGas\r\n \tVMErrorCodeDepth\r\n \tVMErrorCodeInsufficientBalance\r\n \tVMErrorCodeContractAddressCollision\r\n \tVMErrorCodeExecutionReverted\r\n \tVMErrorCodeMaxInitCodeSizeExceeded\r\n \tVMErrorCodeMaxCodeSizeExceeded\r\n \tVMErrorCodeInvalidJump\r\n \tVMErrorCodeWriteProtection\r\n \tVMErrorCodeReturnDataOutOfBounds\r\n \tVMErrorCodeGasUintOverflow\r\n \tVMErrorCodeInvalidCode\r\n \tVMErrorCodeNonceUintOverflow\r\n \tVMErrorCodeStackUnderflow\r\n \tVMErrorCodeStackOverflow\r\n \tVMErrorCodeInvalidOpCode\r\n )\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/execution-apis/issues/comments/1785598624/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/execution-apis/issues/comments/1786474800",
    "html_url": "https://github.com/ethereum/execution-apis/issues/463#issuecomment-1786474800",
    "issue_url": "https://api.github.com/repos/ethereum/execution-apis/issues/463",
    "id": 1786474800,
    "node_id": "IC_kwDOFoG9Gs5qe3Ew",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-10-31T05:30:21Z",
    "updated_at": "2023-10-31T05:30:21Z",
    "author_association": "MEMBER",
    "body": "We potentially have the opportunity to get this \"right\" with `eth_multicall` (https://github.com/ethereum/execution-apis/pull/383), if we decide we want to delay release of that feature until we settle on how EVM errors are handled.  In the case of `eth_multicall`, it would *not* be a JSON-RPC error because a subset of the calls may fail while others succeed and this would be a successful JSON-RPC request/response just as a valid block can have some reverting transactions.\r\n\r\nIf we decide to implement this in `eth_multicall`, then I think the right way to do it would be to have the call result (for each call in the multicall) be an object like:\r\n```ts\r\n{\r\n\tsuccess: true,\r\n\tdata: `0x${string}`,\r\n} | {\r\n\tsuccess: false,\r\n\terror_code: Omit<Errors, RevertedError>,\r\n\tmessage: string,\r\n} | {\r\n\tsuccess: false,\r\n\terror_code: RevertedError,\r\n\tmessage: string,\r\n\tdata?: `0x${string}`,\r\n}\r\n```\r\nIn the success case, we would just include whatever the call returndata was.\r\n\r\nIn the failure case, we would have an `error_code` that contains the specific VM error that occurred (from the list provided by Sina) and if the error was a revert then we would put the revertdata in the `data` field.  The `message` field would be a freeform string where the client can put any additional information they like such as stack traces, etc.\r\n\r\nMy preference would be to have the `Errors` type be a string union, so that it is easy for a developer to read, rather than having numeric codes that then have to be looked up in a table on the client side of the connection.\r\n\r\n----\r\n\r\nNote: The list provided by @s1na above doesn't include all possible per-transaction errors, like invalid signature and contract-caller.  For `eth_multicall`, I believe we are ignoring both of these so it doesn't matter, but we may want to make sure there are no other ways an individual transaction can fail other than the list provided.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/execution-apis/issues/comments/1786474800/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
