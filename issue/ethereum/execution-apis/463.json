{
  "url": "https://api.github.com/repos/ethereum/execution-apis/issues/463",
  "repository_url": "https://api.github.com/repos/ethereum/execution-apis",
  "labels_url": "https://api.github.com/repos/ethereum/execution-apis/issues/463/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/execution-apis/issues/463/comments",
  "events_url": "https://api.github.com/repos/ethereum/execution-apis/issues/463/events",
  "html_url": "https://github.com/ethereum/execution-apis/issues/463",
  "id": 1861789308,
  "node_id": "I_kwDOFoG9Gs5u-KZ8",
  "number": 463,
  "title": "`eth_call` underspecified return error message",
  "user": {
    "login": "emlautarom1",
    "id": 31224949,
    "node_id": "MDQ6VXNlcjMxMjI0OTQ5",
    "avatar_url": "https://avatars.githubusercontent.com/u/31224949?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/emlautarom1",
    "html_url": "https://github.com/emlautarom1",
    "followers_url": "https://api.github.com/users/emlautarom1/followers",
    "following_url": "https://api.github.com/users/emlautarom1/following{/other_user}",
    "gists_url": "https://api.github.com/users/emlautarom1/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/emlautarom1/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/emlautarom1/subscriptions",
    "organizations_url": "https://api.github.com/users/emlautarom1/orgs",
    "repos_url": "https://api.github.com/users/emlautarom1/repos",
    "events_url": "https://api.github.com/users/emlautarom1/events{/privacy}",
    "received_events_url": "https://api.github.com/users/emlautarom1/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2023-08-22T16:15:04Z",
  "updated_at": "2023-10-26T16:47:48Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "The `eth_call` method can result in a execution error when, for example, a contract uses a `revert` operation. The current spec does not define how should the return error look like, making it hard for users to parse the execution failure cause.\r\n\r\nThe following screenshot perfectly describes the current situation for users: \r\n\r\n![E5PEFfrXoAAjaGU](https://github.com/ethereum/execution-apis/assets/31224949/56225995-fb62-4977-a550-75a411175010)\r\n\r\n> Source: https://twitter.com/smpalladino/status/1410686918296313869/photo/1.\r\n\r\nIt would be great if all clients could agree in a single, standardized format for error messages.",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/execution-apis/issues/463/reactions",
    "total_count": 1,
    "+1": 1,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/execution-apis/issues/463/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/execution-apis/issues/comments/1781049561",
    "html_url": "https://github.com/ethereum/execution-apis/issues/463#issuecomment-1781049561",
    "issue_url": "https://api.github.com/repos/ethereum/execution-apis/issues/463",
    "id": 1781049561,
    "node_id": "IC_kwDOFoG9Gs5qKKjZ",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-10-26T12:44:00Z",
    "updated_at": "2023-10-26T12:44:00Z",
    "author_association": "MEMBER",
    "body": "Historically, JSON-RPC errors were reserved for protocol errors and not applied to EVM execution errors.  If we want to maintain this pattern, then the JSON-RPC response would be a success with something in the `result` field.  I generally think we should continue following this pattern as upcoming API feature additions like `eth_multicall` may have a subset of calls that revert and some that are a success so from the protocol level, a success should be returned.\r\n\r\nAs to what to put in the `result` field of the JSON-RPC response, I don't think the Ethereum client (JSON-RPC server) should try to do any sort of revert byte decoding.  The JSON-RPC server doesn't have enough context to do this correctly so at best it would just be making educated guesses.  The client (e.g., web app) has far more context and is in a much better position to properly decode the bytes.\r\n\r\nIt does seem like there needs to be some way to indicate that the result was erroneous, and prepending some ASCII text to a hex encoded byte array feels like just about the worst way to achieve this.  An ideal solution, if we were building something from the ground up, would be to have the JSON-RPC `result` be an object like `{ success: false, reason: 'Execution Reverted', data: '0x...' }`.\r\n\r\nThis would allow clients to discriminate on the `success` and if we want to add other failure modes in the future we can include additional strings to a union of possible values for the `reason` field which can also be discriminated on.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/execution-apis/issues/comments/1781049561/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/execution-apis/issues/comments/1781485075",
    "html_url": "https://github.com/ethereum/execution-apis/issues/463#issuecomment-1781485075",
    "issue_url": "https://api.github.com/repos/ethereum/execution-apis/issues/463",
    "id": 1781485075,
    "node_id": "IC_kwDOFoG9Gs5qL04T",
    "user": {
      "login": "emlautarom1",
      "id": 31224949,
      "node_id": "MDQ6VXNlcjMxMjI0OTQ5",
      "avatar_url": "https://avatars.githubusercontent.com/u/31224949?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/emlautarom1",
      "html_url": "https://github.com/emlautarom1",
      "followers_url": "https://api.github.com/users/emlautarom1/followers",
      "following_url": "https://api.github.com/users/emlautarom1/following{/other_user}",
      "gists_url": "https://api.github.com/users/emlautarom1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/emlautarom1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/emlautarom1/subscriptions",
      "organizations_url": "https://api.github.com/users/emlautarom1/orgs",
      "repos_url": "https://api.github.com/users/emlautarom1/repos",
      "events_url": "https://api.github.com/users/emlautarom1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/emlautarom1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-10-26T16:47:47Z",
    "updated_at": "2023-10-26T16:47:47Z",
    "author_association": "NONE",
    "body": "> It does seem like there needs to be some way to indicate that the result was erroneous, and prepending some ASCII text to a hex encoded byte array feels like just about the worst way to achieve this.\r\n\r\n100% agree since it forces clients to perform prefix/regex checks.\r\n\r\n> I don't think the Ethereum client (JSON-RPC server) should try to do any sort of revert byte decoding. The JSON-RPC server doesn't have enough context to do this correctly so at best it would just be making educated guesses. \r\n\r\nServers can decode information from these error messages using well defined formats (see: https://docs.soliditylang.org/en/v0.8.22/control-structures.html#revert). Still, these formats are subject to change, so I think it should be considered an optional feature, maybe by including a `message` field in case of failure.\r\n\r\nFor a failure case, the response would look something like:\r\n\r\n```jsonc\r\n{\r\n    \"success\": false,\r\n    \"reason\": \"Execution Reverted\",\r\n    \"message\": \"Contract check failed\", // optional on a per-client basis (not enforced by spec)\r\n    \"data\": \"0x...\"\r\n}\r\n```\r\n\r\nwhile on success, it would look like:\r\n\r\n```jsonc\r\n{\r\n    \"success\": true,\r\n    \"gas\": \"0x123456\"\r\n}\r\n```\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/execution-apis/issues/comments/1781485075/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
