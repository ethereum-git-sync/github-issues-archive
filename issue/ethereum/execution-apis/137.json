{
  "url": "https://api.github.com/repos/ethereum/execution-apis/issues/137",
  "repository_url": "https://api.github.com/repos/ethereum/execution-apis",
  "labels_url": "https://api.github.com/repos/ethereum/execution-apis/issues/137/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/execution-apis/issues/137/comments",
  "events_url": "https://api.github.com/repos/ethereum/execution-apis/issues/137/events",
  "html_url": "https://github.com/ethereum/execution-apis/issues/137",
  "id": 1063618028,
  "node_id": "I_kwDOFoG9Gs4_ZYXs",
  "number": 137,
  "title": "Engine API: proposal to add `engine_getBlockBodies` method",
  "user": {
    "login": "mkalinin",
    "id": 1892772,
    "node_id": "MDQ6VXNlcjE4OTI3NzI=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1892772?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mkalinin",
    "html_url": "https://github.com/mkalinin",
    "followers_url": "https://api.github.com/users/mkalinin/followers",
    "following_url": "https://api.github.com/users/mkalinin/following{/other_user}",
    "gists_url": "https://api.github.com/users/mkalinin/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mkalinin/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mkalinin/subscriptions",
    "organizations_url": "https://api.github.com/users/mkalinin/orgs",
    "repos_url": "https://api.github.com/users/mkalinin/repos",
    "events_url": "https://api.github.com/users/mkalinin/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mkalinin/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 11,
  "created_at": "2021-11-25T13:53:47Z",
  "updated_at": "2021-11-30T15:24:21Z",
  "closed_at": null,
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "# Specification\r\n\r\n## Structures\r\n\r\n### BlockBodyV1\r\n* `transactions`: `Array of DATA` - Array of transaction objects, each object is a byte list (`DATA`) representing `TransactionType || TransactionPayload` or `LegacyTransaction` as defined in [EIP-2718](https://eips.ethereum.org/EIPS/eip-2718)\r\n\r\n## Core\r\n\r\n### engine_getBlockBodiesV1\r\n\r\n#### Request\r\n\r\n* method: `engine_getBlockBodiesV1 `\r\n* params: \r\n  1. `Array of DATA`, 32 Bytes - Array of block hashes.\r\n\r\n#### Response\r\n\r\n* result: `Array of BlockBody` - Array of `BlockBody` objects.\r\n* error: code and message set in case an exception happens while processing the method call.\r\n\r\n#### Specification\r\n1. Given array of block hashes client software **MUST** respond with array of `BlockBody` objects with the corresponding hashes respecting the order of block hashes in the input array.\r\n2. Client software **SHOULD** trim array of block bodies in the response in case if any block body is missing.\r\n\r\n# Rationale\r\n\r\nAllows to replace `ExecutionPayload`s with `ExecutionPayloadHeader`s when persisting blocks on CL side and request transaction lists from EL client to serve beacon blocks to either user or remote peer. Max size of `ExecutionPayloadHeader` is 532 bytes, this results in 667MB increase of the space occupied by beacon blocks during 6 months period comparing to what we have today before the Merge. The increase of the space required to store blocks with full payload objects may be up to 2.5TB considering payload max size of 2MB for the same period of time.\r\n\r\nThis proposal attempts to reduce implementation complexity on EL side as semantics of this method maps on the semantics of existing [`GetBlockBodies`](https://github.com/ethereum/devp2p/blob/master/caps/eth.md#getblockbodies-0x05) message in ETH protocol.\r\n\r\nThe limit on the size of the input array isn't required considering trustful relationship between the layers which is gonna be secured by authentication of Engine API communication channel. Network requests in CL clients are currently limited by [`MAX_REQUEST_BLOCKS == 1024`](https://github.com/ethereum/consensus-specs/blob/dev/specs/phase0/p2p-interface.md#configuration). It's not expected that the size of the input array exceeds this limit in a normal case, though, a sanity limit that is greater than `MAX_REQUEST_BLOCKS` parameter value may also be considered.\r\n\r\n\r\ncc @djrtwo @arnetheduck\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/execution-apis/issues/137/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/execution-apis/issues/137/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/execution-apis/issues/comments/979984002",
    "html_url": "https://github.com/ethereum/execution-apis/issues/137#issuecomment-979984002",
    "issue_url": "https://api.github.com/repos/ethereum/execution-apis/issues/137",
    "id": 979984002,
    "node_id": "IC_kwDOFoG9Gs46aV6C",
    "user": {
      "login": "lightclient",
      "id": 14004106,
      "node_id": "MDQ6VXNlcjE0MDA0MTA2",
      "avatar_url": "https://avatars.githubusercontent.com/u/14004106?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lightclient",
      "html_url": "https://github.com/lightclient",
      "followers_url": "https://api.github.com/users/lightclient/followers",
      "following_url": "https://api.github.com/users/lightclient/following{/other_user}",
      "gists_url": "https://api.github.com/users/lightclient/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lightclient/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lightclient/subscriptions",
      "organizations_url": "https://api.github.com/users/lightclient/orgs",
      "repos_url": "https://api.github.com/users/lightclient/repos",
      "events_url": "https://api.github.com/users/lightclient/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lightclient/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-26T13:36:51Z",
    "updated_at": "2021-11-26T13:36:51Z",
    "author_association": "MEMBER",
    "body": "How does this handle the case where a block body in the middle of the request is not found? e.g.\r\n\r\n```\r\nrequest:   [A, B, C]\r\navailable: [A, C]\r\n```\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/execution-apis/issues/comments/979984002/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/execution-apis/issues/comments/979997199",
    "html_url": "https://github.com/ethereum/execution-apis/issues/137#issuecomment-979997199",
    "issue_url": "https://api.github.com/repos/ethereum/execution-apis/issues/137",
    "id": 979997199,
    "node_id": "IC_kwDOFoG9Gs46aZIP",
    "user": {
      "login": "mkalinin",
      "id": 1892772,
      "node_id": "MDQ6VXNlcjE4OTI3NzI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1892772?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mkalinin",
      "html_url": "https://github.com/mkalinin",
      "followers_url": "https://api.github.com/users/mkalinin/followers",
      "following_url": "https://api.github.com/users/mkalinin/following{/other_user}",
      "gists_url": "https://api.github.com/users/mkalinin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mkalinin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mkalinin/subscriptions",
      "organizations_url": "https://api.github.com/users/mkalinin/orgs",
      "repos_url": "https://api.github.com/users/mkalinin/repos",
      "events_url": "https://api.github.com/users/mkalinin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mkalinin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-26T13:58:52Z",
    "updated_at": "2021-11-26T13:58:52Z",
    "author_association": "MEMBER",
    "body": "> How does this handle the case where a block body in the middle of the request is not found? e.g.\r\n> \r\n> ```\r\n> request:   [A, B, C]\r\n> available: [A, C]\r\n> ```\r\n\r\nIt stops at `A` and returns `[A]`",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/execution-apis/issues/comments/979997199/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/execution-apis/issues/comments/980076043",
    "html_url": "https://github.com/ethereum/execution-apis/issues/137#issuecomment-980076043",
    "issue_url": "https://api.github.com/repos/ethereum/execution-apis/issues/137",
    "id": 980076043,
    "node_id": "IC_kwDOFoG9Gs46asYL",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-26T15:59:44Z",
    "updated_at": "2021-11-26T15:59:44Z",
    "author_association": "MEMBER",
    "body": "Nice call on just focusing on pruning of TXs rather than the full payload. Allows to piggyback much more on existing RLP structures rather than requiring both sides to do a translation.\r\n\r\nThis looks good in general to me",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/execution-apis/issues/comments/980076043/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/execution-apis/issues/comments/980965351",
    "html_url": "https://github.com/ethereum/execution-apis/issues/137#issuecomment-980965351",
    "issue_url": "https://api.github.com/repos/ethereum/execution-apis/issues/137",
    "id": 980965351,
    "node_id": "IC_kwDOFoG9Gs46eFfn",
    "user": {
      "login": "arnetheduck",
      "id": 1382986,
      "node_id": "MDQ6VXNlcjEzODI5ODY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1382986?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/arnetheduck",
      "html_url": "https://github.com/arnetheduck",
      "followers_url": "https://api.github.com/users/arnetheduck/followers",
      "following_url": "https://api.github.com/users/arnetheduck/following{/other_user}",
      "gists_url": "https://api.github.com/users/arnetheduck/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/arnetheduck/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/arnetheduck/subscriptions",
      "organizations_url": "https://api.github.com/users/arnetheduck/orgs",
      "repos_url": "https://api.github.com/users/arnetheduck/repos",
      "events_url": "https://api.github.com/users/arnetheduck/events{/privacy}",
      "received_events_url": "https://api.github.com/users/arnetheduck/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-28T08:08:48Z",
    "updated_at": "2021-11-28T08:31:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "> It stops at A and returns [A]\r\n\r\nthis would depend, no? why not return `[A, C]`?\r\n\r\n> Array of block hashes.\r\n\r\nThis deviates from the CL protocol a bit: we generally avoid using hashes for historical blocks for several reasons, but in particular because it does not exploit the \"linearity\" of a finalized block history - what we do instead is request by slot / block number - hashes are (comparatively) expensive to look up: for a range of blocks (ie 1024 blocks), this causes a lot of unnecessary seeking - what we want to do instead is serve data from flat storage in linear order which is significantly more efficient (also in EL:s where clients \"freeze\" storage after a certain amount of time has passed). \r\n\r\nThere are two ways to go about that:\r\n\r\n* the EL learns about actual slot numbers - this is different from \"block height\" in the EL in that it accounts for empty slots as well\r\n* the CL uses data from the ExecutionHeader to translate slots to block numbers\r\n\r\nThe latter has been seen as preferable from a backwards compatibility point of view, because everything else in the EL goes by block number.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/execution-apis/issues/comments/980965351/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/execution-apis/issues/comments/981665879",
    "html_url": "https://github.com/ethereum/execution-apis/issues/137#issuecomment-981665879",
    "issue_url": "https://api.github.com/repos/ethereum/execution-apis/issues/137",
    "id": 981665879,
    "node_id": "IC_kwDOFoG9Gs46gwhX",
    "user": {
      "login": "mkalinin",
      "id": 1892772,
      "node_id": "MDQ6VXNlcjE4OTI3NzI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1892772?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mkalinin",
      "html_url": "https://github.com/mkalinin",
      "followers_url": "https://api.github.com/users/mkalinin/followers",
      "following_url": "https://api.github.com/users/mkalinin/following{/other_user}",
      "gists_url": "https://api.github.com/users/mkalinin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mkalinin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mkalinin/subscriptions",
      "organizations_url": "https://api.github.com/users/mkalinin/orgs",
      "repos_url": "https://api.github.com/users/mkalinin/repos",
      "events_url": "https://api.github.com/users/mkalinin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mkalinin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-29T14:06:24Z",
    "updated_at": "2021-11-29T14:06:24Z",
    "author_association": "MEMBER",
    "body": "The general idea of this proposal is to piggy-back on already existing logic in EL to make this change almost free in terms of implementation.\r\n\r\n> this would depend, no? why not return [A, C]?\r\n\r\nThis is because there is no straightforward way to map payload bodies in the response on hashes in the request. It would either need to add `block_hash` to the `BlockBody` structure or CL would need to compute `transactions_root` from received data. I am wondering how CL should handle this case for say `BeaconBlocksByRoot` request? If it should respond with `[A, C]` then, yes, we would need EL to reflect this logic.\r\n\r\n> the CL uses data from the ExecutionHeader to translate slots to block numbers\r\n\r\nUsing `block_hash` is important because of the piggy-backing on the existing logic. What if CL grabs a span of blocks from its database, then parses block hashes from it, and send a request to EL? CL's complexity here (not sure how big it is) is decoding and then encoding each block to parse the hash and incorporate payload's body, but this seems to be unavoidable.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/execution-apis/issues/comments/981665879/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/execution-apis/issues/comments/981726326",
    "html_url": "https://github.com/ethereum/execution-apis/issues/137#issuecomment-981726326",
    "issue_url": "https://api.github.com/repos/ethereum/execution-apis/issues/137",
    "id": 981726326,
    "node_id": "IC_kwDOFoG9Gs46g_R2",
    "user": {
      "login": "arnetheduck",
      "id": 1382986,
      "node_id": "MDQ6VXNlcjEzODI5ODY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1382986?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/arnetheduck",
      "html_url": "https://github.com/arnetheduck",
      "followers_url": "https://api.github.com/users/arnetheduck/followers",
      "following_url": "https://api.github.com/users/arnetheduck/following{/other_user}",
      "gists_url": "https://api.github.com/users/arnetheduck/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/arnetheduck/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/arnetheduck/subscriptions",
      "organizations_url": "https://api.github.com/users/arnetheduck/orgs",
      "repos_url": "https://api.github.com/users/arnetheduck/repos",
      "events_url": "https://api.github.com/users/arnetheduck/events{/privacy}",
      "received_events_url": "https://api.github.com/users/arnetheduck/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-29T15:11:14Z",
    "updated_at": "2021-11-29T15:11:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "> The general idea of this proposal is to piggy-back on already existing logic in EL to make this change almost free in terms of implementation.\r\n\r\nI would investigate whether this is really the case with existing client implementations, as finding blocks by block number should be [well supported](https://geth.ethereum.org/docs/rpc/ns-debug#debug_getblockrlp) already - a requirement to keep a by-hash index for this request for an indefinite future is quite heavy, and removing a request from a spec is a lot harder than adding a new one.\r\n\r\n> transactions_root from received data\r\n\r\nYes, this would be the case, or perhaps have an encoding for \"no block found\" if we keep a 1:1 response length. It's also a question of trust I guess, whether the CL blindly should forward whatever the EL gives it or _always_ verify the hash regardless. \r\n\r\n> BeaconBlocksByRoot\r\n\r\nThis request is special in that it only supports unfinalized blocks and therefore the number of blocks requested tends to be small and efficiency is less of a concern.\r\n\r\n It's used only when you receive an attestation or block that refers to a root you have not observed which is .. rare - in particular, we don't know the slot or block number of the block when serving this request. In particular, we made `BlocksByRange` the \"default\" sync mechanism because this aligns well with a world in which chains finalize.\r\n\r\n> What if CL grabs a span of blocks from its database, then parses block hashes from it, and send a request to EL?\r\n\r\nIt's certainly possible, but it introduces a lot of work and structural inefficiency both for the EL and the CL that will be hard to rectify.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/execution-apis/issues/comments/981726326/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/execution-apis/issues/comments/981747649",
    "html_url": "https://github.com/ethereum/execution-apis/issues/137#issuecomment-981747649",
    "issue_url": "https://api.github.com/repos/ethereum/execution-apis/issues/137",
    "id": 981747649,
    "node_id": "IC_kwDOFoG9Gs46hEfB",
    "user": {
      "login": "mkalinin",
      "id": 1892772,
      "node_id": "MDQ6VXNlcjE4OTI3NzI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1892772?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mkalinin",
      "html_url": "https://github.com/mkalinin",
      "followers_url": "https://api.github.com/users/mkalinin/followers",
      "following_url": "https://api.github.com/users/mkalinin/following{/other_user}",
      "gists_url": "https://api.github.com/users/mkalinin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mkalinin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mkalinin/subscriptions",
      "organizations_url": "https://api.github.com/users/mkalinin/orgs",
      "repos_url": "https://api.github.com/users/mkalinin/repos",
      "events_url": "https://api.github.com/users/mkalinin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mkalinin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-29T15:33:00Z",
    "updated_at": "2021-11-29T15:33:00Z",
    "author_association": "MEMBER",
    "body": "> finding blocks by block number \r\n\r\nFinding blocks by block number doesn't cover all the possible cases, it only works when the query is being made over canonical chain.\r\n\r\n> verify the hash regardless\r\n\r\nIn general, we assume the communication to be trustful. But I think verifying the hash might be a sanity check that is nice to have.\r\n\r\n> introduces a lot of work and structural inefficiency both for the EL and the CL that will be hard to rectify\r\n\r\nI don't see the complexity on EL side as it already has to handle `GetBlockBodies` request which is a very similar method to the proposed one. What additional complexity on CL does a block hashes request have comparing to a request by block numbers? Considering that decoding/encoding is anyway required for incorporating payload bodies into beacon blocks.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/execution-apis/issues/comments/981747649/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/execution-apis/issues/comments/981782904",
    "html_url": "https://github.com/ethereum/execution-apis/issues/137#issuecomment-981782904",
    "issue_url": "https://api.github.com/repos/ethereum/execution-apis/issues/137",
    "id": 981782904,
    "node_id": "IC_kwDOFoG9Gs46hNF4",
    "user": {
      "login": "arnetheduck",
      "id": 1382986,
      "node_id": "MDQ6VXNlcjEzODI5ODY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1382986?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/arnetheduck",
      "html_url": "https://github.com/arnetheduck",
      "followers_url": "https://api.github.com/users/arnetheduck/followers",
      "following_url": "https://api.github.com/users/arnetheduck/following{/other_user}",
      "gists_url": "https://api.github.com/users/arnetheduck/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/arnetheduck/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/arnetheduck/subscriptions",
      "organizations_url": "https://api.github.com/users/arnetheduck/orgs",
      "repos_url": "https://api.github.com/users/arnetheduck/repos",
      "events_url": "https://api.github.com/users/arnetheduck/events{/privacy}",
      "received_events_url": "https://api.github.com/users/arnetheduck/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-29T16:10:44Z",
    "updated_at": "2021-11-29T18:13:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "> I don't see the complexity on EL side\r\n\r\nI mean computational work, not implementation work: doing hundreds of hash lookups over millions of blocks is extremely slow compared to a linear scan over a range of blocks stored consecutively - practically, it's the difference between supporting HDD:s over SSD:s by and large.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/execution-apis/issues/comments/981782904/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/execution-apis/issues/comments/981785481",
    "html_url": "https://github.com/ethereum/execution-apis/issues/137#issuecomment-981785481",
    "issue_url": "https://api.github.com/repos/ethereum/execution-apis/issues/137",
    "id": 981785481,
    "node_id": "IC_kwDOFoG9Gs46hNuJ",
    "user": {
      "login": "arnetheduck",
      "id": 1382986,
      "node_id": "MDQ6VXNlcjEzODI5ODY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1382986?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/arnetheduck",
      "html_url": "https://github.com/arnetheduck",
      "followers_url": "https://api.github.com/users/arnetheduck/followers",
      "following_url": "https://api.github.com/users/arnetheduck/following{/other_user}",
      "gists_url": "https://api.github.com/users/arnetheduck/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/arnetheduck/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/arnetheduck/subscriptions",
      "organizations_url": "https://api.github.com/users/arnetheduck/orgs",
      "repos_url": "https://api.github.com/users/arnetheduck/repos",
      "events_url": "https://api.github.com/users/arnetheduck/events{/privacy}",
      "received_events_url": "https://api.github.com/users/arnetheduck/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-29T16:13:18Z",
    "updated_at": "2021-11-29T16:13:18Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Finding blocks by block number doesn't cover all the possible cases, it only works when the query is being made over canonical chain.\r\n\r\nyes - this is a good point - there are two ways  to solve this while keeping a by-slot request:\r\n\r\n* allow both types of addressing (this is what the CL spec does)\r\n* accept duplication in CL and EL of unfinalized data\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/execution-apis/issues/comments/981785481/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/execution-apis/issues/comments/982341987",
    "html_url": "https://github.com/ethereum/execution-apis/issues/137#issuecomment-982341987",
    "issue_url": "https://api.github.com/repos/ethereum/execution-apis/issues/137",
    "id": 982341987,
    "node_id": "IC_kwDOFoG9Gs46jVlj",
    "user": {
      "login": "mkalinin",
      "id": 1892772,
      "node_id": "MDQ6VXNlcjE4OTI3NzI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1892772?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mkalinin",
      "html_url": "https://github.com/mkalinin",
      "followers_url": "https://api.github.com/users/mkalinin/followers",
      "following_url": "https://api.github.com/users/mkalinin/following{/other_user}",
      "gists_url": "https://api.github.com/users/mkalinin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mkalinin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mkalinin/subscriptions",
      "organizations_url": "https://api.github.com/users/mkalinin/orgs",
      "repos_url": "https://api.github.com/users/mkalinin/repos",
      "events_url": "https://api.github.com/users/mkalinin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mkalinin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-30T07:02:02Z",
    "updated_at": "2021-11-30T07:02:02Z",
    "author_association": "MEMBER",
    "body": "> I mean computational work, not implementation work: doing hundreds of hash lookups over millions of blocks is extremely slow compared to a linear scan over a range of blocks stored consecutively - practically, it's the difference between supporting HDD:s over SSD:s by and large.\r\n\r\nI see. This kind of work will anyway exist in EL -- `GetBlockBodies` is staying in ETH protocol and is heavily used by peers in the network.\r\n\r\n> there are two ways to solve this while keeping a by-slot request\r\n\r\nA complexity of a by-slot request is in mapping a slot number on a block height. A parameter set of `BeaconBlocksByRange` request can't be mapped on a supposed set of `engine_getBlockBodies` because of skipped slots. If CL is responsible in slot -> height translation it will literally be an iteration over beacon blocks in order to parse block numbers and then passing them in the request to EL. If the translation is done this way then there is no difference in translating slot numbers directly to block hashes.\r\n\r\nMaking EL responsible for slot->block number translation is much more invasive and isn't considered for inclusion into the minimal viable merge spec. I would say if this proposal isn't beneficial for CL and proposed `engine_getBlockBodies` isn't expected to be utilized then we should rather forget about this proposal and get back to the question of pruning payloads after the merge. Even though there is a notion of slots on EL (for EVM purposes) it will likely be complicated to apply it to the block store and make respective index that would allow for advanced by-slot search.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/execution-apis/issues/comments/982341987/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/execution-apis/issues/comments/982740675",
    "html_url": "https://github.com/ethereum/execution-apis/issues/137#issuecomment-982740675",
    "issue_url": "https://api.github.com/repos/ethereum/execution-apis/issues/137",
    "id": 982740675,
    "node_id": "IC_kwDOFoG9Gs46k27D",
    "user": {
      "login": "arnetheduck",
      "id": 1382986,
      "node_id": "MDQ6VXNlcjEzODI5ODY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1382986?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/arnetheduck",
      "html_url": "https://github.com/arnetheduck",
      "followers_url": "https://api.github.com/users/arnetheduck/followers",
      "following_url": "https://api.github.com/users/arnetheduck/following{/other_user}",
      "gists_url": "https://api.github.com/users/arnetheduck/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/arnetheduck/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/arnetheduck/subscriptions",
      "organizations_url": "https://api.github.com/users/arnetheduck/orgs",
      "repos_url": "https://api.github.com/users/arnetheduck/repos",
      "events_url": "https://api.github.com/users/arnetheduck/events{/privacy}",
      "received_events_url": "https://api.github.com/users/arnetheduck/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-30T15:24:21Z",
    "updated_at": "2021-11-30T15:24:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "> This kind of work will anyway exist in EL\r\n\r\nRight, but it doesn't have to, in a post-finalization world - it's very common to download blocks epoch by epoch, or really 1024 consecutive blocks at a time, in CL:s and I expect that trend to continue.\r\n\r\n> A complexity of a by-slot request i\r\n\r\nSorry, my bad - I mean by-block-height - we have the block height on the CL side anyway.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/execution-apis/issues/comments/982740675/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
