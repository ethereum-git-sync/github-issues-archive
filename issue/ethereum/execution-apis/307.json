{
  "url": "https://api.github.com/repos/ethereum/execution-apis/issues/307",
  "repository_url": "https://api.github.com/repos/ethereum/execution-apis",
  "labels_url": "https://api.github.com/repos/ethereum/execution-apis/issues/307/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/execution-apis/issues/307/comments",
  "events_url": "https://api.github.com/repos/ethereum/execution-apis/issues/307/events",
  "html_url": "https://github.com/ethereum/execution-apis/issues/307",
  "id": 1376293533,
  "node_id": "I_kwDOFoG9Gs5SCJKd",
  "number": 307,
  "title": "[RFC] Engine API: Add block value in response to engine_getPayload",
  "user": {
    "login": "allboxes",
    "id": 93405581,
    "node_id": "U_kgDOBZFBjQ",
    "avatar_url": "https://avatars.githubusercontent.com/u/93405581?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/allboxes",
    "html_url": "https://github.com/allboxes",
    "followers_url": "https://api.github.com/users/allboxes/followers",
    "following_url": "https://api.github.com/users/allboxes/following{/other_user}",
    "gists_url": "https://api.github.com/users/allboxes/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/allboxes/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/allboxes/subscriptions",
    "organizations_url": "https://api.github.com/users/allboxes/orgs",
    "repos_url": "https://api.github.com/users/allboxes/repos",
    "events_url": "https://api.github.com/users/allboxes/events{/privacy}",
    "received_events_url": "https://api.github.com/users/allboxes/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 18,
  "created_at": "2022-09-16T18:14:41Z",
  "updated_at": "2022-12-26T23:46:09Z",
  "closed_at": "2022-12-26T23:46:09Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "Currently the CL is blind to the value of the locally built block and therefore, if configured with a builder, will always propose the remotely built block.\r\n\r\nIn order to allow the CL to intelligently decide between using the local or remote block, the EL could provide the value of its block in its response to engine_getPayload.  The EL can be free to determine the value of its block as it sees fit (summing tx fees, checking `feeRecipient` balance pre/post execution, etc..).\r\n\r\nThe change will help to ensure validators propose the highest paying block in general, but more importantly will increase the cost of censorship by builders.",
  "closed_by": {
    "login": "allboxes",
    "id": 93405581,
    "node_id": "U_kgDOBZFBjQ",
    "avatar_url": "https://avatars.githubusercontent.com/u/93405581?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/allboxes",
    "html_url": "https://github.com/allboxes",
    "followers_url": "https://api.github.com/users/allboxes/followers",
    "following_url": "https://api.github.com/users/allboxes/following{/other_user}",
    "gists_url": "https://api.github.com/users/allboxes/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/allboxes/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/allboxes/subscriptions",
    "organizations_url": "https://api.github.com/users/allboxes/orgs",
    "repos_url": "https://api.github.com/users/allboxes/repos",
    "events_url": "https://api.github.com/users/allboxes/events{/privacy}",
    "received_events_url": "https://api.github.com/users/allboxes/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/execution-apis/issues/307/reactions",
    "total_count": 10,
    "+1": 10,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/execution-apis/issues/307/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/execution-apis/issues/comments/1250849945",
    "html_url": "https://github.com/ethereum/execution-apis/issues/307#issuecomment-1250849945",
    "issue_url": "https://api.github.com/repos/ethereum/execution-apis/issues/307",
    "id": 1250849945,
    "node_id": "IC_kwDOFoG9Gs5KjnSZ",
    "user": {
      "login": "mkalinin",
      "id": 1892772,
      "node_id": "MDQ6VXNlcjE4OTI3NzI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1892772?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mkalinin",
      "html_url": "https://github.com/mkalinin",
      "followers_url": "https://api.github.com/users/mkalinin/followers",
      "following_url": "https://api.github.com/users/mkalinin/following{/other_user}",
      "gists_url": "https://api.github.com/users/mkalinin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mkalinin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mkalinin/subscriptions",
      "organizations_url": "https://api.github.com/users/mkalinin/orgs",
      "repos_url": "https://api.github.com/users/mkalinin/repos",
      "events_url": "https://api.github.com/users/mkalinin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mkalinin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-19T10:36:22Z",
    "updated_at": "2022-09-19T10:36:22Z",
    "author_association": "MEMBER",
    "body": "Suggested approach is to add `engine_getPayloadV2` with the new response type including `feeRecipientBalance`",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/execution-apis/issues/comments/1250849945/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/execution-apis/issues/comments/1251201829",
    "html_url": "https://github.com/ethereum/execution-apis/issues/307#issuecomment-1251201829",
    "issue_url": "https://api.github.com/repos/ethereum/execution-apis/issues/307",
    "id": 1251201829,
    "node_id": "IC_kwDOFoG9Gs5Kk9Ml",
    "user": {
      "login": "allboxes",
      "id": 93405581,
      "node_id": "U_kgDOBZFBjQ",
      "avatar_url": "https://avatars.githubusercontent.com/u/93405581?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/allboxes",
      "html_url": "https://github.com/allboxes",
      "followers_url": "https://api.github.com/users/allboxes/followers",
      "following_url": "https://api.github.com/users/allboxes/following{/other_user}",
      "gists_url": "https://api.github.com/users/allboxes/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/allboxes/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/allboxes/subscriptions",
      "organizations_url": "https://api.github.com/users/allboxes/orgs",
      "repos_url": "https://api.github.com/users/allboxes/repos",
      "events_url": "https://api.github.com/users/allboxes/events{/privacy}",
      "received_events_url": "https://api.github.com/users/allboxes/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-19T15:45:02Z",
    "updated_at": "2022-09-19T15:45:02Z",
    "author_association": "CONTRIBUTOR",
    "body": "`feeRecipientBalance` meaning the new balance of the `feeRecipient` or the change in balance?  It seems like the CL would need the change in the balance (\"`feeRecipientBalanceDelta`\")",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/execution-apis/issues/comments/1251201829/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/execution-apis/issues/comments/1252274147",
    "html_url": "https://github.com/ethereum/execution-apis/issues/307#issuecomment-1252274147",
    "issue_url": "https://api.github.com/repos/ethereum/execution-apis/issues/307",
    "id": 1252274147,
    "node_id": "IC_kwDOFoG9Gs5KpC_j",
    "user": {
      "login": "mkalinin",
      "id": 1892772,
      "node_id": "MDQ6VXNlcjE4OTI3NzI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1892772?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mkalinin",
      "html_url": "https://github.com/mkalinin",
      "followers_url": "https://api.github.com/users/mkalinin/followers",
      "following_url": "https://api.github.com/users/mkalinin/following{/other_user}",
      "gists_url": "https://api.github.com/users/mkalinin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mkalinin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mkalinin/subscriptions",
      "organizations_url": "https://api.github.com/users/mkalinin/orgs",
      "repos_url": "https://api.github.com/users/mkalinin/repos",
      "events_url": "https://api.github.com/users/mkalinin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mkalinin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-20T12:20:02Z",
    "updated_at": "2022-09-20T12:20:02Z",
    "author_association": "MEMBER",
    "body": "> `feeRecipientBalance` meaning the new balance of the `feeRecipient` or the change in balance? It seems like the CL would need the change in the balance (\"`feeRecipientBalanceDelta`\")\r\n\r\nCan't we simply compare balances? Balance value with respect to the diff has lower proving complexity. For instance, to prove the diff we would have to have merkle proofs linked to pre and post block state roots. Proving the value does require only the latter.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/execution-apis/issues/comments/1252274147/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/execution-apis/issues/comments/1252281983",
    "html_url": "https://github.com/ethereum/execution-apis/issues/307#issuecomment-1252281983",
    "issue_url": "https://api.github.com/repos/ethereum/execution-apis/issues/307",
    "id": 1252281983,
    "node_id": "IC_kwDOFoG9Gs5KpE5_",
    "user": {
      "login": "lightclient",
      "id": 14004106,
      "node_id": "MDQ6VXNlcjE0MDA0MTA2",
      "avatar_url": "https://avatars.githubusercontent.com/u/14004106?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lightclient",
      "html_url": "https://github.com/lightclient",
      "followers_url": "https://api.github.com/users/lightclient/followers",
      "following_url": "https://api.github.com/users/lightclient/following{/other_user}",
      "gists_url": "https://api.github.com/users/lightclient/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lightclient/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lightclient/subscriptions",
      "organizations_url": "https://api.github.com/users/lightclient/orgs",
      "repos_url": "https://api.github.com/users/lightclient/repos",
      "events_url": "https://api.github.com/users/lightclient/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lightclient/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-20T12:27:16Z",
    "updated_at": "2022-09-20T12:27:16Z",
    "author_association": "MEMBER",
    "body": "A bit of additional context: https://github.com/ethereum/execution-apis/pull/150",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/execution-apis/issues/comments/1252281983/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/execution-apis/issues/comments/1253950606",
    "html_url": "https://github.com/ethereum/execution-apis/issues/307#issuecomment-1253950606",
    "issue_url": "https://api.github.com/repos/ethereum/execution-apis/issues/307",
    "id": 1253950606,
    "node_id": "IC_kwDOFoG9Gs5KvcSO",
    "user": {
      "login": "allboxes",
      "id": 93405581,
      "node_id": "U_kgDOBZFBjQ",
      "avatar_url": "https://avatars.githubusercontent.com/u/93405581?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/allboxes",
      "html_url": "https://github.com/allboxes",
      "followers_url": "https://api.github.com/users/allboxes/followers",
      "following_url": "https://api.github.com/users/allboxes/following{/other_user}",
      "gists_url": "https://api.github.com/users/allboxes/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/allboxes/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/allboxes/subscriptions",
      "organizations_url": "https://api.github.com/users/allboxes/orgs",
      "repos_url": "https://api.github.com/users/allboxes/repos",
      "events_url": "https://api.github.com/users/allboxes/events{/privacy}",
      "received_events_url": "https://api.github.com/users/allboxes/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-21T16:31:51Z",
    "updated_at": "2022-09-21T16:40:51Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Can't we simply compare balances? Balance value with respect to the diff has lower proving complexity. For instance, to prove the diff we would have to have merkle proofs linked to pre and post block state roots. Proving the value does require only the latter.\r\n\r\nI see there is a parallel discussion on proving external builder payments here: https://github.com/ethereum/builder-specs/pull/51\r\n\r\nProving external builder's bids seems useful, but do we need to be concerned with proving in the execution API or can we assume honesty there?  \r\n\r\nIf we can assume honesty from the execution API then it seems simpler to provide the balance delta (\"bid\") directly to the CL so it can compare it against any builders bid's (which may or may not have been proved through a separate builder flow).  I can see it working either way though.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/execution-apis/issues/comments/1253950606/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/execution-apis/issues/comments/1254855762",
    "html_url": "https://github.com/ethereum/execution-apis/issues/307#issuecomment-1254855762",
    "issue_url": "https://api.github.com/repos/ethereum/execution-apis/issues/307",
    "id": 1254855762,
    "node_id": "IC_kwDOFoG9Gs5Ky5RS",
    "user": {
      "login": "mkalinin",
      "id": 1892772,
      "node_id": "MDQ6VXNlcjE4OTI3NzI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1892772?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mkalinin",
      "html_url": "https://github.com/mkalinin",
      "followers_url": "https://api.github.com/users/mkalinin/followers",
      "following_url": "https://api.github.com/users/mkalinin/following{/other_user}",
      "gists_url": "https://api.github.com/users/mkalinin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mkalinin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mkalinin/subscriptions",
      "organizations_url": "https://api.github.com/users/mkalinin/orgs",
      "repos_url": "https://api.github.com/users/mkalinin/repos",
      "events_url": "https://api.github.com/users/mkalinin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mkalinin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-22T10:50:53Z",
    "updated_at": "2022-09-22T10:50:53Z",
    "author_association": "MEMBER",
    "body": "> I see there is a parallel discussion on proving external builder payments here: [ethereum/builder-specs#51](https://github.com/ethereum/builder-specs/pull/51)\r\n\r\nFrom the proposed change:\r\n\r\n> Merkle proof of post balance of the `fee_recipient` account\r\n\r\nSo, we actually need the post balance to compare local payload with external one",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/execution-apis/issues/comments/1254855762/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/execution-apis/issues/comments/1257204945",
    "html_url": "https://github.com/ethereum/execution-apis/issues/307#issuecomment-1257204945",
    "issue_url": "https://api.github.com/repos/ethereum/execution-apis/issues/307",
    "id": 1257204945,
    "node_id": "IC_kwDOFoG9Gs5K72zR",
    "user": {
      "login": "g11tech",
      "id": 76567250,
      "node_id": "MDQ6VXNlcjc2NTY3MjUw",
      "avatar_url": "https://avatars.githubusercontent.com/u/76567250?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/g11tech",
      "html_url": "https://github.com/g11tech",
      "followers_url": "https://api.github.com/users/g11tech/followers",
      "following_url": "https://api.github.com/users/g11tech/following{/other_user}",
      "gists_url": "https://api.github.com/users/g11tech/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/g11tech/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/g11tech/subscriptions",
      "organizations_url": "https://api.github.com/users/g11tech/orgs",
      "repos_url": "https://api.github.com/users/g11tech/repos",
      "events_url": "https://api.github.com/users/g11tech/events{/privacy}",
      "received_events_url": "https://api.github.com/users/g11tech/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-25T14:13:26Z",
    "updated_at": "2022-09-25T14:13:26Z",
    "author_association": "MEMBER",
    "body": "\r\n> So, we actually need the post balance to compare local payload with external one\r\n\r\nCorrect :heavy_check_mark: It would  be good to bundle `post` balance of `fee_recipient` \r\n\r\nAs the EL<>CL connection is already trusted, so no merkle proof required for `engine` response BUT... it would be good to have the merkle proof since this is yet an `unexecuted` block (not in the strickest sense though since EL would have executed the block after construction) and hence `getProof`/`getBalance` for post balance can't be  done. \r\n(but still prudent to include `getProof`/`getBalance` on the engine api methods for pre balance fetchers/verification)\r\n\r\nThe post balance  from here can directly be compared with the builder's balance (+ extra merkle proof verification for builder balance) and the greater one can be simply picked (since one will have both `builder` and `engine` responses while making the decision)\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/execution-apis/issues/comments/1257204945/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/execution-apis/issues/comments/1257557720",
    "html_url": "https://github.com/ethereum/execution-apis/issues/307#issuecomment-1257557720",
    "issue_url": "https://api.github.com/repos/ethereum/execution-apis/issues/307",
    "id": 1257557720,
    "node_id": "IC_kwDOFoG9Gs5K9M7Y",
    "user": {
      "login": "mkalinin",
      "id": 1892772,
      "node_id": "MDQ6VXNlcjE4OTI3NzI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1892772?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mkalinin",
      "html_url": "https://github.com/mkalinin",
      "followers_url": "https://api.github.com/users/mkalinin/followers",
      "following_url": "https://api.github.com/users/mkalinin/following{/other_user}",
      "gists_url": "https://api.github.com/users/mkalinin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mkalinin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mkalinin/subscriptions",
      "organizations_url": "https://api.github.com/users/mkalinin/orgs",
      "repos_url": "https://api.github.com/users/mkalinin/repos",
      "events_url": "https://api.github.com/users/mkalinin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mkalinin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-26T06:49:27Z",
    "updated_at": "2022-09-26T06:49:27Z",
    "author_association": "MEMBER",
    "body": "Interesting thought. Could a builder software leverage the proof obtained from `getPayload`?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/execution-apis/issues/comments/1257557720/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/execution-apis/issues/comments/1276449438",
    "html_url": "https://github.com/ethereum/execution-apis/issues/307#issuecomment-1276449438",
    "issue_url": "https://api.github.com/repos/ethereum/execution-apis/issues/307",
    "id": 1276449438,
    "node_id": "IC_kwDOFoG9Gs5MFRKe",
    "user": {
      "login": "allboxes",
      "id": 93405581,
      "node_id": "U_kgDOBZFBjQ",
      "avatar_url": "https://avatars.githubusercontent.com/u/93405581?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/allboxes",
      "html_url": "https://github.com/allboxes",
      "followers_url": "https://api.github.com/users/allboxes/followers",
      "following_url": "https://api.github.com/users/allboxes/following{/other_user}",
      "gists_url": "https://api.github.com/users/allboxes/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/allboxes/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/allboxes/subscriptions",
      "organizations_url": "https://api.github.com/users/allboxes/orgs",
      "repos_url": "https://api.github.com/users/allboxes/repos",
      "events_url": "https://api.github.com/users/allboxes/events{/privacy}",
      "received_events_url": "https://api.github.com/users/allboxes/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-10-12T16:33:08Z",
    "updated_at": "2022-10-12T16:33:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Suggested approach is to add engine_getPayloadV2 with the new response type including feeRecipientBalance\r\n\r\nThinking about starting to work on PR for this.  @potuz mentioned an idea which I think could make implementation a lot cheaper...  We could leave the existing methods/data structures alone and add a new method which just retrieves the value/post balance of a given `payloadId`.\r\n\r\nWe can use the value cached at the time of the last `engine_getPayloadV1` call to avoid synchrony issues.\r\n\r\nThis way all the existing tests etc don't have to be touched.  Any thoughts on this?\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/execution-apis/issues/comments/1276449438/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/execution-apis/issues/comments/1276751327",
    "html_url": "https://github.com/ethereum/execution-apis/issues/307#issuecomment-1276751327",
    "issue_url": "https://api.github.com/repos/ethereum/execution-apis/issues/307",
    "id": 1276751327,
    "node_id": "IC_kwDOFoG9Gs5MGa3f",
    "user": {
      "login": "g11tech",
      "id": 76567250,
      "node_id": "MDQ6VXNlcjc2NTY3MjUw",
      "avatar_url": "https://avatars.githubusercontent.com/u/76567250?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/g11tech",
      "html_url": "https://github.com/g11tech",
      "followers_url": "https://api.github.com/users/g11tech/followers",
      "following_url": "https://api.github.com/users/g11tech/following{/other_user}",
      "gists_url": "https://api.github.com/users/g11tech/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/g11tech/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/g11tech/subscriptions",
      "organizations_url": "https://api.github.com/users/g11tech/orgs",
      "repos_url": "https://api.github.com/users/g11tech/repos",
      "events_url": "https://api.github.com/users/g11tech/events{/privacy}",
      "received_events_url": "https://api.github.com/users/g11tech/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-10-12T21:23:28Z",
    "updated_at": "2022-10-12T21:23:28Z",
    "author_association": "MEMBER",
    "body": "> Interesting thought. Could a builder software leverage the proof obtained from `getPayload`?\r\n\r\nyes they can directly pass it in the `BuilderBid`",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/execution-apis/issues/comments/1276751327/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/execution-apis/issues/comments/1276752965",
    "html_url": "https://github.com/ethereum/execution-apis/issues/307#issuecomment-1276752965",
    "issue_url": "https://api.github.com/repos/ethereum/execution-apis/issues/307",
    "id": 1276752965,
    "node_id": "IC_kwDOFoG9Gs5MGbRF",
    "user": {
      "login": "g11tech",
      "id": 76567250,
      "node_id": "MDQ6VXNlcjc2NTY3MjUw",
      "avatar_url": "https://avatars.githubusercontent.com/u/76567250?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/g11tech",
      "html_url": "https://github.com/g11tech",
      "followers_url": "https://api.github.com/users/g11tech/followers",
      "following_url": "https://api.github.com/users/g11tech/following{/other_user}",
      "gists_url": "https://api.github.com/users/g11tech/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/g11tech/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/g11tech/subscriptions",
      "organizations_url": "https://api.github.com/users/g11tech/orgs",
      "repos_url": "https://api.github.com/users/g11tech/repos",
      "events_url": "https://api.github.com/users/g11tech/events{/privacy}",
      "received_events_url": "https://api.github.com/users/g11tech/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-10-12T21:25:29Z",
    "updated_at": "2022-10-12T21:26:09Z",
    "author_association": "MEMBER",
    "body": "> > Suggested approach is to add engine_getPayloadV2 with the new response type including feeRecipientBalance\r\n> \r\n> Thinking about starting to work on PR for this. @potuz mentioned an idea which I think could make implementation a lot cheaper... We could leave the existing methods/data structures alone and add a new method which just retrieves the value/post balance of a given `payloadId`.\r\n> \r\n> We can use the value cached at the time of the last `engine_getPayloadV1` call to avoid synchrony issues.\r\n> \r\n> This way all the existing tests etc don't have to be touched. Any thoughts on this?\r\n\r\ntbh a proof would be so much better and would like to have it bundled in the same response to save round trip time and random api error changes, and as @mkalinin observed, builders can use it directly",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/execution-apis/issues/comments/1276752965/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/execution-apis/issues/comments/1279088489",
    "html_url": "https://github.com/ethereum/execution-apis/issues/307#issuecomment-1279088489",
    "issue_url": "https://api.github.com/repos/ethereum/execution-apis/issues/307",
    "id": 1279088489,
    "node_id": "IC_kwDOFoG9Gs5MPVdp",
    "user": {
      "login": "mkalinin",
      "id": 1892772,
      "node_id": "MDQ6VXNlcjE4OTI3NzI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1892772?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mkalinin",
      "html_url": "https://github.com/mkalinin",
      "followers_url": "https://api.github.com/users/mkalinin/followers",
      "following_url": "https://api.github.com/users/mkalinin/following{/other_user}",
      "gists_url": "https://api.github.com/users/mkalinin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mkalinin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mkalinin/subscriptions",
      "organizations_url": "https://api.github.com/users/mkalinin/orgs",
      "repos_url": "https://api.github.com/users/mkalinin/repos",
      "events_url": "https://api.github.com/users/mkalinin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mkalinin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-10-14T14:29:50Z",
    "updated_at": "2022-10-14T14:29:50Z",
    "author_association": "MEMBER",
    "body": "> > Suggested approach is to add engine_getPayloadV2 with the new response type including feeRecipientBalance\r\n> \r\n> Thinking about starting to work on PR for this. @potuz mentioned an idea which I think could make implementation a lot cheaper... We could leave the existing methods/data structures alone and add a new method which just retrieves the value/post balance of a given `payloadId`.\r\n> \r\n> We can use the value cached at the time of the last `engine_getPayloadV1` call to avoid synchrony issues.\r\n> \r\n> This way all the existing tests etc don't have to be touched. Any thoughts on this?\r\n\r\nWith introduction of `engine_getPayloadV2` all existing tests won't be touched as well, we will have to create new ones. I feel like having reading from the same instance of payload build process via different methods may be a complexity vs returning everything at once and destroying the process thereafter. Although, ELs are using timeout to get rid of the result of the recent build process, I feel that a new method returning all at once would be cleaner, CLs won't have to handle the case when the payload is requested successfully but the balance request failed as @g11tech mentioned",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/execution-apis/issues/comments/1279088489/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/execution-apis/issues/comments/1279321455",
    "html_url": "https://github.com/ethereum/execution-apis/issues/307#issuecomment-1279321455",
    "issue_url": "https://api.github.com/repos/ethereum/execution-apis/issues/307",
    "id": 1279321455,
    "node_id": "IC_kwDOFoG9Gs5MQOVv",
    "user": {
      "login": "allboxes",
      "id": 93405581,
      "node_id": "U_kgDOBZFBjQ",
      "avatar_url": "https://avatars.githubusercontent.com/u/93405581?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/allboxes",
      "html_url": "https://github.com/allboxes",
      "followers_url": "https://api.github.com/users/allboxes/followers",
      "following_url": "https://api.github.com/users/allboxes/following{/other_user}",
      "gists_url": "https://api.github.com/users/allboxes/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/allboxes/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/allboxes/subscriptions",
      "organizations_url": "https://api.github.com/users/allboxes/orgs",
      "repos_url": "https://api.github.com/users/allboxes/repos",
      "events_url": "https://api.github.com/users/allboxes/events{/privacy}",
      "received_events_url": "https://api.github.com/users/allboxes/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-10-14T18:18:20Z",
    "updated_at": "2022-10-14T19:00:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "Fair enough, I can see the value in both approaches and don't have a good enough view into all the CL/EL codebases to feel strongly about creating a standalone value retrieval method, so I'll draft up a `engine_getPayloadV2` PR.\r\n\r\n@g11tech can you elaborate a bit on why a proof is valuable here?  If the only value is for builders, I'd lean towards putting that complexity on the builders, who are likely already heavily modifying the block building code to generate their blocks, and keeping as much complexity out of the core EL implementations as possible.\r\n\r\nETA:  Just re-read the comments on the builder API adding payment proof and it sounds like relay is already validating the scores of the builder blocks and they can just generate the proof there, so builders won't even necessarily need to implement a proof.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/execution-apis/issues/comments/1279321455/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/execution-apis/issues/comments/1279811782",
    "html_url": "https://github.com/ethereum/execution-apis/issues/307#issuecomment-1279811782",
    "issue_url": "https://api.github.com/repos/ethereum/execution-apis/issues/307",
    "id": 1279811782,
    "node_id": "IC_kwDOFoG9Gs5MSGDG",
    "user": {
      "login": "g11tech",
      "id": 76567250,
      "node_id": "MDQ6VXNlcjc2NTY3MjUw",
      "avatar_url": "https://avatars.githubusercontent.com/u/76567250?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/g11tech",
      "html_url": "https://github.com/g11tech",
      "followers_url": "https://api.github.com/users/g11tech/followers",
      "following_url": "https://api.github.com/users/g11tech/following{/other_user}",
      "gists_url": "https://api.github.com/users/g11tech/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/g11tech/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/g11tech/subscriptions",
      "organizations_url": "https://api.github.com/users/g11tech/orgs",
      "repos_url": "https://api.github.com/users/g11tech/repos",
      "events_url": "https://api.github.com/users/g11tech/events{/privacy}",
      "received_events_url": "https://api.github.com/users/g11tech/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-10-15T19:07:59Z",
    "updated_at": "2022-10-15T19:07:59Z",
    "author_association": "MEMBER",
    "body": "> Fair enough, I can see the value in both approaches and don't have a good enough view into all the CL/EL codebases to feel strongly about creating a standalone value retrieval method, so I'll draft up a `engine_getPayloadV2` PR.\r\n> \r\n> @g11tech can you elaborate a bit on why a proof is valuable here? If the only value is for builders, I'd lean towards putting that complexity on the builders, who are likely already heavily modifying the block building code to generate their blocks, and keeping as much complexity out of the core EL implementations as possible.\r\n> \r\n> ETA: Just re-read the comments on the builder API adding payment proof and it sounds like relay is already validating the scores of the builder blocks and they can just generate the proof there, so builders won't even necessarily need to implement a proof.\r\n\r\nif we assume the el<>cl link to be 100% trusted (which we already do as per the architecture of el/cl coupling), yes we do not require a proof, if thats too much of a burden. as per my understanding most ELs have getProof implemented so should not really be difficult to add this step (for the mev builders to add to their implementaions)\r\n\r\nSo i am ok with this just being a value that can be directly compared against other engine/builder candidates :+1: ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/execution-apis/issues/comments/1279811782/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/execution-apis/issues/comments/1280058228",
    "html_url": "https://github.com/ethereum/execution-apis/issues/307#issuecomment-1280058228",
    "issue_url": "https://api.github.com/repos/ethereum/execution-apis/issues/307",
    "id": 1280058228,
    "node_id": "IC_kwDOFoG9Gs5MTCN0",
    "user": {
      "login": "allboxes",
      "id": 93405581,
      "node_id": "U_kgDOBZFBjQ",
      "avatar_url": "https://avatars.githubusercontent.com/u/93405581?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/allboxes",
      "html_url": "https://github.com/allboxes",
      "followers_url": "https://api.github.com/users/allboxes/followers",
      "following_url": "https://api.github.com/users/allboxes/following{/other_user}",
      "gists_url": "https://api.github.com/users/allboxes/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/allboxes/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/allboxes/subscriptions",
      "organizations_url": "https://api.github.com/users/allboxes/orgs",
      "repos_url": "https://api.github.com/users/allboxes/repos",
      "events_url": "https://api.github.com/users/allboxes/events{/privacy}",
      "received_events_url": "https://api.github.com/users/allboxes/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-10-16T21:09:55Z",
    "updated_at": "2022-10-16T21:09:55Z",
    "author_association": "CONTRIBUTOR",
    "body": "https://github.com/ethereum/go-ethereum/pull/25998 Geth has started implementing this with the total of the transaction fees (i.e. `feeRecipient` balance diff) as the value returned with getPayload.  Additionally it sounds like MEV-Boost will also lean towards proving the final payment amount to the `feeRecipient` as opposed to the final balance (https://github.com/ethereum/builder-specs/pull/51#issuecomment-1280027362), so is everyone ok if we use the balance diff a.k.a. block value as the new value returned with `ExecutionPayloadV2`?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/execution-apis/issues/comments/1280058228/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/execution-apis/issues/comments/1280777394",
    "html_url": "https://github.com/ethereum/execution-apis/issues/307#issuecomment-1280777394",
    "issue_url": "https://api.github.com/repos/ethereum/execution-apis/issues/307",
    "id": 1280777394,
    "node_id": "IC_kwDOFoG9Gs5MVxyy",
    "user": {
      "login": "g11tech",
      "id": 76567250,
      "node_id": "MDQ6VXNlcjc2NTY3MjUw",
      "avatar_url": "https://avatars.githubusercontent.com/u/76567250?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/g11tech",
      "html_url": "https://github.com/g11tech",
      "followers_url": "https://api.github.com/users/g11tech/followers",
      "following_url": "https://api.github.com/users/g11tech/following{/other_user}",
      "gists_url": "https://api.github.com/users/g11tech/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/g11tech/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/g11tech/subscriptions",
      "organizations_url": "https://api.github.com/users/g11tech/orgs",
      "repos_url": "https://api.github.com/users/g11tech/repos",
      "events_url": "https://api.github.com/users/g11tech/events{/privacy}",
      "received_events_url": "https://api.github.com/users/g11tech/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-10-17T12:25:55Z",
    "updated_at": "2022-10-17T12:25:55Z",
    "author_association": "MEMBER",
    "body": "> [ethereum/go-ethereum#25998](https://github.com/ethereum/go-ethereum/pull/25998) Geth has started implementing this with the total of the transaction fees (i.e. `feeRecipient` balance diff) as the value returned with getPayload. Additionally it sounds like MEV-Boost will also lean towards proving the final payment amount to the `feeRecipient` as opposed to the final balance ([ethereum/builder-specs#51 (comment)](https://github.com/ethereum/builder-specs/pull/51#issuecomment-1280027362)), so is everyone ok if we use the balance diff a.k.a. block value as the new value returned with `ExecutionPayloadV2`?\r\n\r\nYes I think the fees paid out, i.e. balance diff of ONLY fees make sense as well and will be in line with the \"payment transaction scoring\" of the builder blocks",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/execution-apis/issues/comments/1280777394/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/execution-apis/issues/comments/1290353824",
    "html_url": "https://github.com/ethereum/execution-apis/issues/307#issuecomment-1290353824",
    "issue_url": "https://api.github.com/repos/ethereum/execution-apis/issues/307",
    "id": 1290353824,
    "node_id": "IC_kwDOFoG9Gs5M6Tyg",
    "user": {
      "login": "LukaszRozmej",
      "id": 12445221,
      "node_id": "MDQ6VXNlcjEyNDQ1MjIx",
      "avatar_url": "https://avatars.githubusercontent.com/u/12445221?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/LukaszRozmej",
      "html_url": "https://github.com/LukaszRozmej",
      "followers_url": "https://api.github.com/users/LukaszRozmej/followers",
      "following_url": "https://api.github.com/users/LukaszRozmej/following{/other_user}",
      "gists_url": "https://api.github.com/users/LukaszRozmej/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/LukaszRozmej/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/LukaszRozmej/subscriptions",
      "organizations_url": "https://api.github.com/users/LukaszRozmej/orgs",
      "repos_url": "https://api.github.com/users/LukaszRozmej/repos",
      "events_url": "https://api.github.com/users/LukaszRozmej/events{/privacy}",
      "received_events_url": "https://api.github.com/users/LukaszRozmej/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-10-25T10:51:46Z",
    "updated_at": "2022-10-25T10:51:46Z",
    "author_association": "NONE",
    "body": "`feeReceipient` balance changes can come from two things: fees, direct transfer to that address. Do we want to include both or just the former here? I see Geth did the former only, in pre-merge MEV in flashbots spec it was the sum that was used to compare blocks.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/execution-apis/issues/comments/1290353824/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/execution-apis/issues/comments/1365510286",
    "html_url": "https://github.com/ethereum/execution-apis/issues/307#issuecomment-1365510286",
    "issue_url": "https://api.github.com/repos/ethereum/execution-apis/issues/307",
    "id": 1365510286,
    "node_id": "IC_kwDOFoG9Gs5RZAiO",
    "user": {
      "login": "allboxes",
      "id": 93405581,
      "node_id": "U_kgDOBZFBjQ",
      "avatar_url": "https://avatars.githubusercontent.com/u/93405581?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/allboxes",
      "html_url": "https://github.com/allboxes",
      "followers_url": "https://api.github.com/users/allboxes/followers",
      "following_url": "https://api.github.com/users/allboxes/following{/other_user}",
      "gists_url": "https://api.github.com/users/allboxes/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/allboxes/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/allboxes/subscriptions",
      "organizations_url": "https://api.github.com/users/allboxes/orgs",
      "repos_url": "https://api.github.com/users/allboxes/repos",
      "events_url": "https://api.github.com/users/allboxes/events{/privacy}",
      "received_events_url": "https://api.github.com/users/allboxes/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-12-26T23:46:08Z",
    "updated_at": "2022-12-26T23:46:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "Block value (and withdrawals) added to spec with `engine_getPayloadV2` https://github.com/ethereum/execution-apis/pull/314",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/execution-apis/issues/comments/1365510286/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
