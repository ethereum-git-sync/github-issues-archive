{
  "url": "https://api.github.com/repos/ethereum/distributed-validator-specs/issues/16",
  "repository_url": "https://api.github.com/repos/ethereum/distributed-validator-specs",
  "labels_url": "https://api.github.com/repos/ethereum/distributed-validator-specs/issues/16/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/distributed-validator-specs/issues/16/comments",
  "events_url": "https://api.github.com/repos/ethereum/distributed-validator-specs/issues/16/events",
  "html_url": "https://github.com/ethereum/distributed-validator-specs/issues/16",
  "id": 1084546830,
  "node_id": "I_kwDOGSVrRM5ApN8O",
  "number": 16,
  "title": "Clarify when the DVC's anti-slashing DB intialisation should take place.",
  "user": {
    "login": "saltiniroberto",
    "id": 38655434,
    "node_id": "MDQ6VXNlcjM4NjU1NDM0",
    "avatar_url": "https://avatars.githubusercontent.com/u/38655434?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/saltiniroberto",
    "html_url": "https://github.com/saltiniroberto",
    "followers_url": "https://api.github.com/users/saltiniroberto/followers",
    "following_url": "https://api.github.com/users/saltiniroberto/following{/other_user}",
    "gists_url": "https://api.github.com/users/saltiniroberto/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/saltiniroberto/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/saltiniroberto/subscriptions",
    "organizations_url": "https://api.github.com/users/saltiniroberto/orgs",
    "repos_url": "https://api.github.com/users/saltiniroberto/repos",
    "events_url": "https://api.github.com/users/saltiniroberto/events{/privacy}",
    "received_events_url": "https://api.github.com/users/saltiniroberto/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 6,
  "created_at": "2021-12-20T09:18:17Z",
  "updated_at": "2022-01-04T15:44:06Z",
  "closed_at": null,
  "author_association": "COLLABORATOR",
  "active_lock_reason": null,
  "body": "The [Anti-Slashing Measures at the DVC](https://github.com/ethereum/distributed-validator-specs/blob/dev/src/dvspec/README.md#anti-slashing-measures-at-the-dvc) section of the [Ethereum Distributed Validator Specification](https://github.com/ethereum/distributed-validator-specs/blob/dev/src/dvspec/README.md) requires that DVCs initialises its anti-slashing DB to the VC's anti-slashing DB.\r\n\r\nCurrently, the specification is open for interpretation on the following points:\r\n1. Should the DVC's anti-slashing DB initialisation occur every time that the DVC is started?\r\n2. Should the DVC's anti-slashing DB initialisation occur only the first time that the DVC is started?\r\n3. Should the VC's anti-slashing protection be disabled and rely entirely on the DVC's anti-slashing protection?\r\n   - If so and if behaviour 1 above is the desired one, then the VC still needs to keep updating its anti-slashing DB albeit no check is preferred when signing.",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/distributed-validator-specs/issues/16/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/distributed-validator-specs/issues/16/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/distributed-validator-specs/issues/comments/997747565",
    "html_url": "https://github.com/ethereum/distributed-validator-specs/issues/16#issuecomment-997747565",
    "issue_url": "https://api.github.com/repos/ethereum/distributed-validator-specs/issues/16",
    "id": 997747565,
    "node_id": "IC_kwDOGSVrRM47eGtt",
    "user": {
      "login": "saltiniroberto",
      "id": 38655434,
      "node_id": "MDQ6VXNlcjM4NjU1NDM0",
      "avatar_url": "https://avatars.githubusercontent.com/u/38655434?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/saltiniroberto",
      "html_url": "https://github.com/saltiniroberto",
      "followers_url": "https://api.github.com/users/saltiniroberto/followers",
      "following_url": "https://api.github.com/users/saltiniroberto/following{/other_user}",
      "gists_url": "https://api.github.com/users/saltiniroberto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/saltiniroberto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/saltiniroberto/subscriptions",
      "organizations_url": "https://api.github.com/users/saltiniroberto/orgs",
      "repos_url": "https://api.github.com/users/saltiniroberto/repos",
      "events_url": "https://api.github.com/users/saltiniroberto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/saltiniroberto/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-12-20T09:26:00Z",
    "updated_at": "2021-12-20T09:26:00Z",
    "author_association": "COLLABORATOR",
    "body": "Overall, I think that:\r\n - if we believe that one of the DBs is more reliable than the other, then we should just use the DB that we think is the most reliable for enforcing anti-slashing protection.\r\n - if we believe that the two DBs have the same level of reliability, then we need to design a procedure for reconciling the two DBs if they happen to disagree. Otherwise, the liveness of protocol is likely to be affected.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/distributed-validator-specs/issues/comments/997747565/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/distributed-validator-specs/issues/comments/998440825",
    "html_url": "https://github.com/ethereum/distributed-validator-specs/issues/16#issuecomment-998440825",
    "issue_url": "https://api.github.com/repos/ethereum/distributed-validator-specs/issues/16",
    "id": 998440825,
    "node_id": "IC_kwDOGSVrRM47gv95",
    "user": {
      "login": "adiasg",
      "id": 25324105,
      "node_id": "MDQ6VXNlcjI1MzI0MTA1",
      "avatar_url": "https://avatars.githubusercontent.com/u/25324105?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adiasg",
      "html_url": "https://github.com/adiasg",
      "followers_url": "https://api.github.com/users/adiasg/followers",
      "following_url": "https://api.github.com/users/adiasg/following{/other_user}",
      "gists_url": "https://api.github.com/users/adiasg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adiasg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adiasg/subscriptions",
      "organizations_url": "https://api.github.com/users/adiasg/orgs",
      "repos_url": "https://api.github.com/users/adiasg/repos",
      "events_url": "https://api.github.com/users/adiasg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adiasg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-12-21T03:26:44Z",
    "updated_at": "2021-12-21T03:26:44Z",
    "author_association": "MEMBER",
    "body": "@saltiniroberto thanks for raising this issue! \r\n\r\nThe intended interpretation was:\r\n> 1. Should the DVC's anti-slashing DB initialisation occur every time that the DVC is started?\r\n\r\nThe DVC's anti-slashing DB should be initialized every time the DVC is (re)started.\r\n\r\nThe purpose of an anti-slashing DB at the DVC is to allow for the DVC to validate a proposed consensus value for unslashability against the validator's previously signed messages. While the VC holds such an anti-slashing DB, it does not (currently) provide an API method to access the DB anyhow. An idea to solve this is to replicate the VC's anti-slashing DB at the DVC, and operate the two clients together. When operating together, the VC should only ever sign data provided by the DVC. In this scenario, the DVC's DB should be a superset of the VC's DB (they'll be in perfect sync unless the VC fails to sign a provided value).\r\n\r\n> if we believe that one of the DBs is more reliable than the other, then we should just use the DB that we think is the most reliable for enforcing anti-slashing protection.\r\n\r\nAs mentioned above, the motivation of an anti-slashing DB at the DVC is to allow for validation of proposed consensus values _without_ changing the current VC implementation. \r\n\r\n> we need to design a procedure for reconciling the two DBs if they happen to disagree. Otherwise, the liveness of protocol is likely to be affected.\r\n\r\nAdmittedly, we made an assumption that the DBs disagreeing is an impossible scenario. In case that happens, both clients need to be shut down, the DB needs to be copied over from the VC to the DVC, and the clients restarted. \r\nBut we do need better recovery strategies from this scenario! We are still discussing proposals to modify the [standard VC interface](https://github.com/ethereum/beacon-APIs/tree/master/apis/validator) to allow for the possibility of automatic recovery of the DVC software.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/distributed-validator-specs/issues/comments/998440825/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/distributed-validator-specs/issues/comments/998476552",
    "html_url": "https://github.com/ethereum/distributed-validator-specs/issues/16#issuecomment-998476552",
    "issue_url": "https://api.github.com/repos/ethereum/distributed-validator-specs/issues/16",
    "id": 998476552,
    "node_id": "IC_kwDOGSVrRM47g4sI",
    "user": {
      "login": "saltiniroberto",
      "id": 38655434,
      "node_id": "MDQ6VXNlcjM4NjU1NDM0",
      "avatar_url": "https://avatars.githubusercontent.com/u/38655434?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/saltiniroberto",
      "html_url": "https://github.com/saltiniroberto",
      "followers_url": "https://api.github.com/users/saltiniroberto/followers",
      "following_url": "https://api.github.com/users/saltiniroberto/following{/other_user}",
      "gists_url": "https://api.github.com/users/saltiniroberto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/saltiniroberto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/saltiniroberto/subscriptions",
      "organizations_url": "https://api.github.com/users/saltiniroberto/orgs",
      "repos_url": "https://api.github.com/users/saltiniroberto/repos",
      "events_url": "https://api.github.com/users/saltiniroberto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/saltiniroberto/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-12-21T05:08:58Z",
    "updated_at": "2021-12-21T05:08:58Z",
    "author_association": "COLLABORATOR",
    "body": "@adiasg \r\nThanks the clarification.\r\n \r\nWhat do you think of option 3 above?\r\n\r\nThe idea with Option 3 is to use the VC's anti slashing DB at most for initialisation purposes and then rely only on the DVC's anti slashing DB for protect against slashing. \r\n\r\nThis may require a modification to the VC's code to allow disabling the anti slashing protection, but this should be quite easy to do. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/distributed-validator-specs/issues/comments/998476552/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/distributed-validator-specs/issues/comments/998487247",
    "html_url": "https://github.com/ethereum/distributed-validator-specs/issues/16#issuecomment-998487247",
    "issue_url": "https://api.github.com/repos/ethereum/distributed-validator-specs/issues/16",
    "id": 998487247,
    "node_id": "IC_kwDOGSVrRM47g7TP",
    "user": {
      "login": "adiasg",
      "id": 25324105,
      "node_id": "MDQ6VXNlcjI1MzI0MTA1",
      "avatar_url": "https://avatars.githubusercontent.com/u/25324105?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adiasg",
      "html_url": "https://github.com/adiasg",
      "followers_url": "https://api.github.com/users/adiasg/followers",
      "following_url": "https://api.github.com/users/adiasg/following{/other_user}",
      "gists_url": "https://api.github.com/users/adiasg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adiasg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adiasg/subscriptions",
      "organizations_url": "https://api.github.com/users/adiasg/orgs",
      "repos_url": "https://api.github.com/users/adiasg/repos",
      "events_url": "https://api.github.com/users/adiasg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adiasg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-12-21T05:34:30Z",
    "updated_at": "2021-12-21T05:34:30Z",
    "author_association": "MEMBER",
    "body": "Allowing for a configuration where the VC's anti-slashing protection is inactive is dangerous because misconfigurations can lead to slashing. The preference would be to have active (and mandatory) slashing protection as close to the staking keys as possible - so an amended proposal (that we have been discussing) is to have the DB only at the VC and allow the DVC to check unslashability through a modified API endpoint at the VC.\r\n\r\nThe nuances for the amended proposal are that it requires the VC to run a server that accepts incoming requests - something that does not fit in the security model of the VC. We're thinking of ways to circumvent this while still retaining the benefits of having a single slashing DB (for example, by modifying the VC so that it exports the anti-slashing DB with every request it makes to the DVC).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/distributed-validator-specs/issues/comments/998487247/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/distributed-validator-specs/issues/comments/1004896972",
    "html_url": "https://github.com/ethereum/distributed-validator-specs/issues/16#issuecomment-1004896972",
    "issue_url": "https://api.github.com/repos/ethereum/distributed-validator-specs/issues/16",
    "id": 1004896972,
    "node_id": "IC_kwDOGSVrRM475YLM",
    "user": {
      "login": "OisinKyne",
      "id": 4981644,
      "node_id": "MDQ6VXNlcjQ5ODE2NDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4981644?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/OisinKyne",
      "html_url": "https://github.com/OisinKyne",
      "followers_url": "https://api.github.com/users/OisinKyne/followers",
      "following_url": "https://api.github.com/users/OisinKyne/following{/other_user}",
      "gists_url": "https://api.github.com/users/OisinKyne/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/OisinKyne/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/OisinKyne/subscriptions",
      "organizations_url": "https://api.github.com/users/OisinKyne/orgs",
      "repos_url": "https://api.github.com/users/OisinKyne/repos",
      "events_url": "https://api.github.com/users/OisinKyne/events{/privacy}",
      "received_events_url": "https://api.github.com/users/OisinKyne/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-04T15:16:16Z",
    "updated_at": "2022-01-04T15:16:16Z",
    "author_association": "NONE",
    "body": "Hey guys\r\n\r\nOn this topic of anti-slashing DBs at the DVC level, I have a few thoughts.\r\n\r\n- We definitely should not turn off anti slashing at the VC level, I believe that's how staked.us got burned by assuming their proprietary anti-slashing would work.... it did not. \r\n\r\n- On when should a DVC anti slashing DB get repopulated, I don't necessarily think it needs to be every restart, I think it should be at a minimum if a DVC restarts and sees no initialised anti-slashing DB on its filesystem, then it would need to initialise one for each of the configured DVs its servicing. \r\n    - This could be by importing a dump from a VC\r\n    - However how I would like to do it if feasible would be for a DVC to simply query the beacon node API automatically, to see if it can find the most recent attestation from the validator pubkey/index. Within that attestation will be `source`+`target` values, which should be sufficient for bootstrapping a DVC anti-slashing DB (assuming we can rely on VCs + byzantine fault tolerance to save us if our auto population fails/is stale). \r\n    - To be even more careful, we could also go the route some client teams have of [`--enable-doppleganger`](https://docs.prylabs.network/docs/prysm-usage/parameters/), which basically just tells a client to wait an epoch, see what happens for the validators duty during that epoch, and then move on from there. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/distributed-validator-specs/issues/comments/1004896972/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/distributed-validator-specs/issues/comments/1004919268",
    "html_url": "https://github.com/ethereum/distributed-validator-specs/issues/16#issuecomment-1004919268",
    "issue_url": "https://api.github.com/repos/ethereum/distributed-validator-specs/issues/16",
    "id": 1004919268,
    "node_id": "IC_kwDOGSVrRM475dnk",
    "user": {
      "login": "adiasg",
      "id": 25324105,
      "node_id": "MDQ6VXNlcjI1MzI0MTA1",
      "avatar_url": "https://avatars.githubusercontent.com/u/25324105?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adiasg",
      "html_url": "https://github.com/adiasg",
      "followers_url": "https://api.github.com/users/adiasg/followers",
      "following_url": "https://api.github.com/users/adiasg/following{/other_user}",
      "gists_url": "https://api.github.com/users/adiasg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adiasg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adiasg/subscriptions",
      "organizations_url": "https://api.github.com/users/adiasg/orgs",
      "repos_url": "https://api.github.com/users/adiasg/repos",
      "events_url": "https://api.github.com/users/adiasg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adiasg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-04T15:44:06Z",
    "updated_at": "2022-01-04T15:44:06Z",
    "author_association": "MEMBER",
    "body": "> I don't necessarily think it needs to be every restart, I think it should be at a minimum if a DVC restarts and sees no initialised anti-slashing DB on its filesystem, then it would need to initialise one for each of the configured DVs its servicing.\r\n\r\nIf the VC is operated while the DVC is offline, the two slashing DBs will be inconsistent states.  Importing the slashing DB at every DVC start is a good sanity check to avoid such situations.\r\n\r\n> However how I would like to do it if feasible would be for a DVC to simply query the beacon node API automatically, to see if it can find the most recent attestation from the validator pubkey/index. Within that attestation will be source+target values, which should be sufficient for bootstrapping a DVC anti-slashing DB (assuming we can rely on VCs + byzantine fault tolerance to save us if our auto population fails/is stale).\r\n\r\nThis is possible, and there's been some efforts around [slashing DB rebuild](https://github.com/adiasg/eth2-slashing-protection-rebuild) (see branch [`parse_chain`](https://github.com/adiasg/eth2-slashing-protection-rebuild/tree/parse_chain) for your suggestion). The risk is that there may be past messages created by the VC that don't appear in the canonical chain, so a \"full\" rebuild of the slashing DB cannot be achieved.\r\n\r\nIn general, I think allowing for situations where both the slashing DBs can exist in inconsistent states is risky. We should explore options that allow for automatic import/sync of the slashing DB from the VC to the DVC - one option is described [here](https://github.com/ethereum/distributed-validator-specs/issues/16#issuecomment-998487247). This may require (hopefully minor) changes to the VC implementation, but will be worth the advantages to DV infrastructure.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/distributed-validator-specs/issues/comments/1004919268/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
