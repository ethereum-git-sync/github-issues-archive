{
  "url": "https://api.github.com/repos/ethereum/execution-spec-tests/issues/390",
  "repository_url": "https://api.github.com/repos/ethereum/execution-spec-tests",
  "labels_url": "https://api.github.com/repos/ethereum/execution-spec-tests/issues/390/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/execution-spec-tests/issues/390/comments",
  "events_url": "https://api.github.com/repos/ethereum/execution-spec-tests/issues/390/events",
  "html_url": "https://github.com/ethereum/execution-spec-tests/issues/390",
  "id": 2090252875,
  "node_id": "I_kwDOIQGLK858lrpL",
  "number": 390,
  "title": "feat(forks): define an enum that contains all available forks",
  "user": {
    "login": "danceratopz",
    "id": 91727015,
    "node_id": "U_kgDOBXekpw",
    "avatar_url": "https://avatars.githubusercontent.com/u/91727015?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/danceratopz",
    "html_url": "https://github.com/danceratopz",
    "followers_url": "https://api.github.com/users/danceratopz/followers",
    "following_url": "https://api.github.com/users/danceratopz/following{/other_user}",
    "gists_url": "https://api.github.com/users/danceratopz/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/danceratopz/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/danceratopz/subscriptions",
    "organizations_url": "https://api.github.com/users/danceratopz/orgs",
    "repos_url": "https://api.github.com/users/danceratopz/repos",
    "events_url": "https://api.github.com/users/danceratopz/events{/privacy}",
    "received_events_url": "https://api.github.com/users/danceratopz/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 6008517589,
      "node_id": "LA_kwDOIQGLK88AAAABZiKz1Q",
      "url": "https://api.github.com/repos/ethereum/execution-spec-tests/labels/scope:forks",
      "name": "scope:forks",
      "color": "0E525A",
      "default": false,
      "description": "Scope: ethereum_test_forks package"
    },
    {
      "id": 6008623232,
      "node_id": "LA_kwDOIQGLK88AAAABZiRQgA",
      "url": "https://api.github.com/repos/ethereum/execution-spec-tests/labels/type:feat",
      "name": "type:feat",
      "color": "0e8a16",
      "default": false,
      "description": "type: Feature"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 0,
  "created_at": "2024-01-19T10:51:15Z",
  "updated_at": "2024-01-19T10:52:06Z",
  "closed_at": null,
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "Define an enum that contains all available forks. \r\n\r\nThe initial aim was to use these forks in validity markers (whose arguments are currently string, not fork types). This would allow auto-complete and static type checking.\r\n\r\nHowever, it might be possible to use this enum everywhere instead of importing each fork individually. Currently, we have (which can be a bit cumbersome if importing many forks):\r\n```python\r\nfrom ethereum_test_forks import Paris, Shanghai\r\n```\r\n\r\nIf we define our enum cleverly, we could simply:\r\n```python\r\nfrom ethereum_test_forks import Forks\r\n```\r\nand use `Forks.Paris` and `Forks.Shanghai`. This is perhaps not quite as compact, but definitely more useful when writing code. We'd need to see if it's possible to modify the enum class to return the fork class object directly, otherwise we'd have to use `Forks.Paris.value`, which is not acceptable.\r\n\r\nAlso we'd have a unified way of defining forks in regular code and in validity markers.\r\n\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/execution-spec-tests/issues/390/reactions",
    "total_count": 1,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 1,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/execution-spec-tests/issues/390/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[

]
