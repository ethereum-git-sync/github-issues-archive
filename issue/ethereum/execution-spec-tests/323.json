{
  "url": "https://api.github.com/repos/ethereum/execution-spec-tests/issues/323",
  "repository_url": "https://api.github.com/repos/ethereum/execution-spec-tests",
  "labels_url": "https://api.github.com/repos/ethereum/execution-spec-tests/issues/323/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/execution-spec-tests/issues/323/comments",
  "events_url": "https://api.github.com/repos/ethereum/execution-spec-tests/issues/323/events",
  "html_url": "https://github.com/ethereum/execution-spec-tests/issues/323",
  "id": 1919673502,
  "node_id": "I_kwDOIQGLK85ya-Se",
  "number": 323,
  "title": "Python tool to create a test from a real devnet issue",
  "user": {
    "login": "marioevz",
    "id": 11726710,
    "node_id": "MDQ6VXNlcjExNzI2NzEw",
    "avatar_url": "https://avatars.githubusercontent.com/u/11726710?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/marioevz",
    "html_url": "https://github.com/marioevz",
    "followers_url": "https://api.github.com/users/marioevz/followers",
    "following_url": "https://api.github.com/users/marioevz/following{/other_user}",
    "gists_url": "https://api.github.com/users/marioevz/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/marioevz/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/marioevz/subscriptions",
    "organizations_url": "https://api.github.com/users/marioevz/orgs",
    "repos_url": "https://api.github.com/users/marioevz/repos",
    "events_url": "https://api.github.com/users/marioevz/events{/privacy}",
    "received_events_url": "https://api.github.com/users/marioevz/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 6008518917,
      "node_id": "LA_kwDOIQGLK88AAAABZiK5BQ",
      "url": "https://api.github.com/repos/ethereum/execution-spec-tests/labels/scope:tools",
      "name": "scope:tools",
      "color": "3F2F1C",
      "default": false,
      "description": "Scope: ethereum_test_tools package"
    },
    {
      "id": 6008623232,
      "node_id": "LA_kwDOIQGLK88AAAABZiRQgA",
      "url": "https://api.github.com/repos/ethereum/execution-spec-tests/labels/type:feat",
      "name": "type:feat",
      "color": "0e8a16",
      "default": false,
      "description": "type: Feature"
    },
    {
      "id": 6008698715,
      "node_id": "LA_kwDOIQGLK88AAAABZiV3Ww",
      "url": "https://api.github.com/repos/ethereum/execution-spec-tests/labels/scope:fw",
      "name": "scope:fw",
      "color": "30EAF1",
      "default": false,
      "description": "Scope: Framework (evm|tools|forks|pytest)"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 0,
  "created_at": "2023-09-29T17:36:35Z",
  "updated_at": "2023-10-03T14:33:18Z",
  "closed_at": null,
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "Create a python tool in this repository that is capable of creating a blockchain test from an invalid block on any devnet, testnet or shadowfork.\r\n\r\nThe tool must perform the following sequence:\r\n1) Query the block `N` to fetch the transactions and header properties of the block where the `INVALID` issue was found\r\n2) Create a set of touched addresses `L` and for each transaction add the sender and recipient addresses to the list\r\n3) Fetch the account information (balance, nonce, code, storage) of all addresses in `L` at block `N - 1` and add them to the `alloc` of the test\r\n4) Run the block `N` as block 1 of a blockchain test, with the `alloc` information at genesis\r\n5) Analyze the execution trace of all transactions and for each call to a different account (`CALL`, `CALLCODE`, `DELEGATECALL`, `STATICCALL`, `SELFDESTRUCT`), account information fetch (`BALANCE`, `EXTCODESIZE`, `EXTCODECOPY`, `EXTCODEHASH`), or contract creation (`CREATE`, `CREATE2`), add the target address to `L`\r\n6) If `L` now contains more addresses, go to (3), otherwise proceed\r\n7) Blockchain test comprises the Genesis with the `alloc` collected and the Block 1 with the transactions of block `N` with as many properties carried over as possible (Number might be difficult, and if any of the transactions query `NUMBER` opcode, this might result in deviation of execution)\r\n8) (Optional) `alloc` can be compressed by running the block and then analyzing the trace and then discard the storage keys that are never read on all accounts.\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/execution-spec-tests/issues/323/reactions",
    "total_count": 1,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 1,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/execution-spec-tests/issues/323/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[

]
