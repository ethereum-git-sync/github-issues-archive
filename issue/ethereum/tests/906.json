{
  "url": "https://api.github.com/repos/ethereum/tests/issues/906",
  "repository_url": "https://api.github.com/repos/ethereum/tests",
  "labels_url": "https://api.github.com/repos/ethereum/tests/issues/906/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/tests/issues/906/comments",
  "events_url": "https://api.github.com/repos/ethereum/tests/issues/906/events",
  "html_url": "https://github.com/ethereum/tests/issues/906",
  "id": 954064223,
  "node_id": "MDU6SXNzdWU5NTQwNjQyMjM=",
  "number": 906,
  "title": "Clarify hard fork names in transaction tests",
  "user": {
    "login": "norswap",
    "id": 202175,
    "node_id": "MDQ6VXNlcjIwMjE3NQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/202175?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/norswap",
    "html_url": "https://github.com/norswap",
    "followers_url": "https://api.github.com/users/norswap/followers",
    "following_url": "https://api.github.com/users/norswap/following{/other_user}",
    "gists_url": "https://api.github.com/users/norswap/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/norswap/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/norswap/subscriptions",
    "organizations_url": "https://api.github.com/users/norswap/orgs",
    "repos_url": "https://api.github.com/users/norswap/repos",
    "events_url": "https://api.github.com/users/norswap/events{/privacy}",
    "received_events_url": "https://api.github.com/users/norswap/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 10,
  "created_at": "2021-07-27T16:37:34Z",
  "updated_at": "2021-09-11T12:26:33Z",
  "closed_at": "2021-09-11T12:26:33Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "Currently, in the `TransactionTests`, multiple names are confusing:\r\n\r\nSee for instance [this logic](https://github.com/norswap/nanoeth/blob/master/test/com/norswap/nanoeth/transactions/OfficialTransactionData.java#L57-L72) I implemented in my toy client:\r\n\r\n```java\r\n    /** Returns the starting block height for the given version. */\r\n    private static int blockHeight (String version) {\r\n        return switch (version) {\r\n            case \"Byzantium\"            -> BYZANTIUM.startBlock;\r\n            case \"Constantinople\"       -> CONSTANTINOPLE.startBlock;\r\n            case \"ConstantinopleFix\"    -> CONSTANTINOPLE.startBlock;\r\n            case \"EIP150\"               -> TANGERINE_WHISTLE.startBlock;\r\n            case \"EIP158\"               -> SPURIOUS_DRAGON.startBlock; // (*)\r\n            case \"Frontier\"             -> FRONTIER.startBlock;\r\n            case \"Homestead\"            -> HOMESTEAD.startBlock;\r\n            case \"Istanbul\"             -> ISTANBUL.startBlock;\r\n            default -> throw new AssertionError(\"unreachable\");\r\n\r\n            // (*) if interpreted as EIP-161 that supersedes EIP-158\r\n        };\r\n    }\r\n```\r\n\r\nThe left column are the names used in the transaction test JSON files. \r\n1. The \"EIP\" names should be the proper forks name, and \"ConstantinopleFix\" should probably be called \"SaintPetersburg\".\r\n2. I think EIP158 was never actually implemented on mainnet, as it was superceded by EIP-161. I'm not sure how a client is supposed to test the \"EIP158\" results. Was EIP158 deployed earlier on test nets perhaps?\r\n3. Was the \"Berlin\" fork skipped on purpose because all results are expected to be the same? If not, is there some automated way to run the tests in a client at a Berlin block height and update the test files?",
  "closed_by": {
    "login": "winsvega",
    "id": 4492341,
    "node_id": "MDQ6VXNlcjQ0OTIzNDE=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4492341?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/winsvega",
    "html_url": "https://github.com/winsvega",
    "followers_url": "https://api.github.com/users/winsvega/followers",
    "following_url": "https://api.github.com/users/winsvega/following{/other_user}",
    "gists_url": "https://api.github.com/users/winsvega/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/winsvega/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/winsvega/subscriptions",
    "organizations_url": "https://api.github.com/users/winsvega/orgs",
    "repos_url": "https://api.github.com/users/winsvega/repos",
    "events_url": "https://api.github.com/users/winsvega/events{/privacy}",
    "received_events_url": "https://api.github.com/users/winsvega/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/tests/issues/906/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/tests/issues/906/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/tests/issues/comments/887672205",
    "html_url": "https://github.com/ethereum/tests/issues/906#issuecomment-887672205",
    "issue_url": "https://api.github.com/repos/ethereum/tests/issues/906",
    "id": 887672205,
    "node_id": "IC_kwDOAO0i58406M2N",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-07-27T16:52:11Z",
    "updated_at": "2021-07-27T16:52:11Z",
    "author_association": "MEMBER",
    "body": "This was previously discussed in #488, and probably the people sharing your view are still on that opinion.  Here was my suggestion https://github.com/ethereum/tests/issues/488#issuecomment-528288516.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/tests/issues/comments/887672205/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/tests/issues/comments/887680386",
    "html_url": "https://github.com/ethereum/tests/issues/906#issuecomment-887680386",
    "issue_url": "https://api.github.com/repos/ethereum/tests/issues/906",
    "id": 887680386,
    "node_id": "IC_kwDOAO0i58406O2C",
    "user": {
      "login": "norswap",
      "id": 202175,
      "node_id": "MDQ6VXNlcjIwMjE3NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/202175?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/norswap",
      "html_url": "https://github.com/norswap",
      "followers_url": "https://api.github.com/users/norswap/followers",
      "following_url": "https://api.github.com/users/norswap/following{/other_user}",
      "gists_url": "https://api.github.com/users/norswap/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/norswap/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/norswap/subscriptions",
      "organizations_url": "https://api.github.com/users/norswap/orgs",
      "repos_url": "https://api.github.com/users/norswap/repos",
      "events_url": "https://api.github.com/users/norswap/events{/privacy}",
      "received_events_url": "https://api.github.com/users/norswap/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-07-27T17:04:48Z",
    "updated_at": "2021-07-27T17:04:48Z",
    "author_association": "NONE",
    "body": "I see, I guess it's going to stay the same! I can live with it.\r\n\r\nThe argument that it's closed doesn't really work for new client implementations, as you need to implement everything including networking, JSON-RPC, etc to be able to run retesteth.\r\n\r\nFeel free to close then, although I'd still like to know the answer of question (3) about the Berlin fork.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/tests/issues/comments/887680386/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/tests/issues/comments/892502736",
    "html_url": "https://github.com/ethereum/tests/issues/906#issuecomment-892502736",
    "issue_url": "https://api.github.com/repos/ethereum/tests/issues/906",
    "id": 892502736,
    "node_id": "IC_kwDOAO0i5841MoLQ",
    "user": {
      "login": "winsvega",
      "id": 4492341,
      "node_id": "MDQ6VXNlcjQ0OTIzNDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4492341?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/winsvega",
      "html_url": "https://github.com/winsvega",
      "followers_url": "https://api.github.com/users/winsvega/followers",
      "following_url": "https://api.github.com/users/winsvega/following{/other_user}",
      "gists_url": "https://api.github.com/users/winsvega/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/winsvega/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/winsvega/subscriptions",
      "organizations_url": "https://api.github.com/users/winsvega/orgs",
      "repos_url": "https://api.github.com/users/winsvega/repos",
      "events_url": "https://api.github.com/users/winsvega/events{/privacy}",
      "received_events_url": "https://api.github.com/users/winsvega/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-04T09:18:32Z",
    "updated_at": "2021-08-04T09:18:32Z",
    "author_association": "MEMBER",
    "body": "About the https://github.com/ethereum/tests/issues/488\r\nfork names in the tests are internal for the tests. the names can be different in clients. there is a config with replacement map for each client. in retesteth. \r\n\r\nimplementing retesteth support does not mean implementing the whole client. retesteth just feed the test data via rpc / t8ntool protocol. so devs don't have to implement test parser. \r\n\r\nabout the transaction tests. \r\nthere is currently no way to generate transaction tests. so they stay unupdated. \r\n we are introducing transaction exceptions in state tests for clients to reject transactions on the given state. \r\n\r\n\"I'm not sure how a client is supposed to test the \"EIP158\" regardless of its name in tests the fork represent the actual fork happend on mainnet.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/tests/issues/comments/892502736/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/tests/issues/comments/892634081",
    "html_url": "https://github.com/ethereum/tests/issues/906#issuecomment-892634081",
    "issue_url": "https://api.github.com/repos/ethereum/tests/issues/906",
    "id": 892634081,
    "node_id": "IC_kwDOAO0i5841NIPh",
    "user": {
      "login": "norswap",
      "id": 202175,
      "node_id": "MDQ6VXNlcjIwMjE3NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/202175?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/norswap",
      "html_url": "https://github.com/norswap",
      "followers_url": "https://api.github.com/users/norswap/followers",
      "following_url": "https://api.github.com/users/norswap/following{/other_user}",
      "gists_url": "https://api.github.com/users/norswap/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/norswap/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/norswap/subscriptions",
      "organizations_url": "https://api.github.com/users/norswap/orgs",
      "repos_url": "https://api.github.com/users/norswap/repos",
      "events_url": "https://api.github.com/users/norswap/events{/privacy}",
      "received_events_url": "https://api.github.com/users/norswap/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-04T12:55:59Z",
    "updated_at": "2021-08-04T12:55:59Z",
    "author_association": "NONE",
    "body": "Understood.\r\n\r\n> implementing retesteth support does not mean implementing the whole client. retesteth just feed the test data via rpc / t8ntool protocol. so devs don't have to implement test parser.\r\n\r\nTo clarify, if one wants to write a new Ethereum client, this means you have to implement the JSON-RPC endpoint before you can run any tests on your WIP implementation. My implementation is very early stage, so I can only create transactions and validate their format & signature. So I'm only interested in pure transaction tests. It sounds like I could implement a JSON-RPC end points that just gets these tests - I'll look into it.\r\n\r\n> we are introducing transaction exceptions in state tests for clients to reject transactions on the given state.\r\n\r\nThat wouldn't be useful for my (specific) use case, since I can't run transactions yet. I just want to see a lot of different transaction formats so that I can test if I can validate them correctly. Anything stateful would require a ton more implementation (almost a full client, excepted the networking layer).\r\n\r\nSo what I am saying is that stateless transaction tests are valuable for new ethereum client implementations.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/tests/issues/comments/892634081/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/tests/issues/comments/892668560",
    "html_url": "https://github.com/ethereum/tests/issues/906#issuecomment-892668560",
    "issue_url": "https://api.github.com/repos/ethereum/tests/issues/906",
    "id": 892668560,
    "node_id": "IC_kwDOAO0i5841NQqQ",
    "user": {
      "login": "qbzzt",
      "id": 12722969,
      "node_id": "MDQ6VXNlcjEyNzIyOTY5",
      "avatar_url": "https://avatars.githubusercontent.com/u/12722969?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/qbzzt",
      "html_url": "https://github.com/qbzzt",
      "followers_url": "https://api.github.com/users/qbzzt/followers",
      "following_url": "https://api.github.com/users/qbzzt/following{/other_user}",
      "gists_url": "https://api.github.com/users/qbzzt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/qbzzt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/qbzzt/subscriptions",
      "organizations_url": "https://api.github.com/users/qbzzt/orgs",
      "repos_url": "https://api.github.com/users/qbzzt/repos",
      "events_url": "https://api.github.com/users/qbzzt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/qbzzt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-04T13:41:21Z",
    "updated_at": "2021-08-04T13:41:21Z",
    "author_association": "MEMBER",
    "body": "By \"stateless transaction test\" you mean that you just want the transaction bytes in RLP format and what they mean?\r\n\r\nYou can get this from our state tests. For example, take https://github.com/ethereum/tests/blob/develop/GeneralStateTests/VMTests/vmLogTest/log1.json. You can see the transaction's fields in `log1.transaction`. Some fields are lists because they can have multiple values.\r\n\r\n```json\r\n{\r\n         \"data\":[\r\n            \"0x693c61390000000000000000000000000000000000000000000000000000000000000000\",\r\n            \"0x693c61390000000000000000000000000000000000000000000000000000000000000001\",\r\n            \"0x693c61390000000000000000000000000000000000000000000000000000000000000002\",\r\n            \"0x693c61390000000000000000000000000000000000000000000000000000000000000003\",\r\n            \"0x693c61390000000000000000000000000000000000000000000000000000000000000004\",\r\n            \"0x693c61390000000000000000000000000000000000000000000000000000000000000005\",\r\n            \"0x693c61390000000000000000000000000000000000000000000000000000000000000006\",\r\n            \"0x693c61390000000000000000000000000000000000000000000000000000000000000007\",\r\n            \"0x693c61390000000000000000000000000000000000000000000000000000000000000008\"\r\n         ],\r\n         \"gasPrice\":\"0x0a\",\r\n         \"gasLimit\":[\r\n            \"0x04c4b400\"\r\n         ],\r\n         \"nonce\":\"0x00\",\r\n         \"secretKey\":\"0x45a915e4d060149eb4365960e6a7a45f334393093061116b197e3240065ff2d8\",\r\n         \"to\":\"0xcccccccccccccccccccccccccccccccccccccccc\",\r\n         \"value\":[\r\n            \"0x01\"\r\n         ]\r\n}\r\n```\r\n\r\nThen, if you look in `log1.post.Berlin[0]`, you'll see\r\n\r\n```json\r\n            {\r\n               \"indexes\":{\r\n                  \"data\":0,\r\n                  \"gas\":0,\r\n                  \"value\":0\r\n               },\r\n               \"hash\":\"0x67aa350ca5bc00d8be8b39d4199c4e02a1b00997d1a773e0e09d461f9a547436\",\r\n               \"txbytes\":\"0xf885800a8404c4b40094cccccccccccccccccccccccccccccccccccccccc01a4693c613900000000000000000000000000000000000000000000000000000000000000001ba0e8ff56322287185f6afd3422a825b47bf5c1a4ccf0dc0389cdc03f7c1c32b7eaa0776b02f9f5773238d3ff36b74a123f409cd6420908d7855bbe4c8ff63e00d698\",\r\n               \"logs\":\"0xae5bdbf9098f61cb46facba16127337099fc06e9bb56c37394d42995e9c53488\"\r\n            }\r\n```\r\n\r\nSo the transaction bytes are `log1.post.Berlin[0].txbytes` and the values for `data`, `gasLimit`, and `value` are at location zero in their respective lists (`log1.transaction.data`, `log1.transaction.gasLimit`, and `log1.transaction.value`). You can interpret the other entries in `log1.post.Berlin` the same way, using the `indexes` field to know where to look in the lists in the transaction.\r\n\r\nFor your use case the difference between Berlin and London is irrelevant, since they encode transactions the same way in most cases.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/tests/issues/comments/892668560/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/tests/issues/comments/892793783",
    "html_url": "https://github.com/ethereum/tests/issues/906#issuecomment-892793783",
    "issue_url": "https://api.github.com/repos/ethereum/tests/issues/906",
    "id": 892793783,
    "node_id": "IC_kwDOAO0i5841NvO3",
    "user": {
      "login": "winsvega",
      "id": 4492341,
      "node_id": "MDQ6VXNlcjQ0OTIzNDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4492341?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/winsvega",
      "html_url": "https://github.com/winsvega",
      "followers_url": "https://api.github.com/users/winsvega/followers",
      "following_url": "https://api.github.com/users/winsvega/following{/other_user}",
      "gists_url": "https://api.github.com/users/winsvega/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/winsvega/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/winsvega/subscriptions",
      "organizations_url": "https://api.github.com/users/winsvega/orgs",
      "repos_url": "https://api.github.com/users/winsvega/repos",
      "events_url": "https://api.github.com/users/winsvega/events{/privacy}",
      "received_events_url": "https://api.github.com/users/winsvega/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-04T16:20:04Z",
    "updated_at": "2021-08-04T16:33:01Z",
    "author_association": "MEMBER",
    "body": "to make transaction structure tests that you saying we need to come up with a protocol that I can feed to t8ntool or by rpc \r\nwith the meyoaning of \r\n\"is this transaction structure could possibly be legit:   0xfc24586....235adda990\"  \r\n\r\nby possibly legit I mean according to the YP. (without dependence on state)\r\nso nonce is not validated against sender's account nonce. balance is not validated either. \r\nwhat is left to check is if transaction fields are in valid range of data   `0...2**256`  or whatever the limits are. \r\nand as I remember in transaction tests intrinsic gas price is taken in account. \r\n\r\nthe problem is that devs do not export internal logic for such thing. nor by rpc nor by other things. there were 2 years discussion before I could get t8ntool from the geth team. to at least get state transitions. \r\n\r\nthe paradigm that I want is that I get confiramtion from clients on wether the transaction structure is legit or not. if I would be the one verifing the structure myself it will just introduce more error points. \r\n\r\nif you wish we can come up with transaction structure tests using your prototype and t8ntool command like tool that you could export. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/tests/issues/comments/892793783/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/tests/issues/comments/892805219",
    "html_url": "https://github.com/ethereum/tests/issues/906#issuecomment-892805219",
    "issue_url": "https://api.github.com/repos/ethereum/tests/issues/906",
    "id": 892805219,
    "node_id": "IC_kwDOAO0i5841NyBj",
    "user": {
      "login": "norswap",
      "id": 202175,
      "node_id": "MDQ6VXNlcjIwMjE3NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/202175?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/norswap",
      "html_url": "https://github.com/norswap",
      "followers_url": "https://api.github.com/users/norswap/followers",
      "following_url": "https://api.github.com/users/norswap/following{/other_user}",
      "gists_url": "https://api.github.com/users/norswap/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/norswap/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/norswap/subscriptions",
      "organizations_url": "https://api.github.com/users/norswap/orgs",
      "repos_url": "https://api.github.com/users/norswap/repos",
      "events_url": "https://api.github.com/users/norswap/events{/privacy}",
      "received_events_url": "https://api.github.com/users/norswap/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-04T16:36:57Z",
    "updated_at": "2021-08-04T16:36:57Z",
    "author_association": "NONE",
    "body": "@qbzzt That's nice! Questions:\r\n1. Does it include negative tests also? That's one of the most important things to test, that you don't let through invalid things, especially on tricky boundary cases.\r\n2. I am guessing however that these tests are not geared towards testing the format of transctions right? (Which the `TransactionTests` tests are, e.g. `AddresMoreThan20.json`)\r\n\r\n@winsvega \r\nI *think* I get what you're saying, but I'm not sure. You're saying existing clients have no entry point to run these tests? Or they have no entry points to validate transactions, such that you'd be confident to use them as test cases? (in that case, I guess you could just try them on a local test net however).\r\n\r\nFor me personally, just having the JSON files is useful already. Parsing them is not difficult. Maybe it doesn't fit with how this repo is used with retesteth, but that's just my perspective :)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/tests/issues/comments/892805219/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/tests/issues/comments/893131965",
    "html_url": "https://github.com/ethereum/tests/issues/906#issuecomment-893131965",
    "issue_url": "https://api.github.com/repos/ethereum/tests/issues/906",
    "id": 893131965,
    "node_id": "IC_kwDOAO0i5841PBy9",
    "user": {
      "login": "qbzzt",
      "id": 12722969,
      "node_id": "MDQ6VXNlcjEyNzIyOTY5",
      "avatar_url": "https://avatars.githubusercontent.com/u/12722969?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/qbzzt",
      "html_url": "https://github.com/qbzzt",
      "followers_url": "https://api.github.com/users/qbzzt/followers",
      "following_url": "https://api.github.com/users/qbzzt/following{/other_user}",
      "gists_url": "https://api.github.com/users/qbzzt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/qbzzt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/qbzzt/subscriptions",
      "organizations_url": "https://api.github.com/users/qbzzt/orgs",
      "repos_url": "https://api.github.com/users/qbzzt/repos",
      "events_url": "https://api.github.com/users/qbzzt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/qbzzt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-05T03:17:41Z",
    "updated_at": "2021-08-05T03:17:41Z",
    "author_association": "MEMBER",
    "body": "> * Does it include negative tests also? That's one of the most important things to test, that you don't let through invalid things, especially on tricky boundary cases.\r\n\r\nNo negative tests that fail on the data structure. You can find those in the [TransactionTests](https://github.com/ethereum/tests/tree/develop/TransactionTests), the ones without a hash for any fork are invalid data.\r\n\r\n> * I am guessing however that these tests are not geared towards testing the format of transctions right? (Which the `TransactionTests` tests are, e.g. `AddresMoreThan20.json`)\r\n\r\nYes. The state tests are geared towards testing complete clients, not just data parsing, so they don't include invalid examples. \r\n\r\nThe `TransactionTests` haven't been touched in over two years, probably because there hasn't been new client development and the existing clients didn't modify that part of the code so they didn't need to test it either. Note that that's just my theory, I wasn't involved in testing until last year.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/tests/issues/comments/893131965/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/tests/issues/comments/893908570",
    "html_url": "https://github.com/ethereum/tests/issues/906#issuecomment-893908570",
    "issue_url": "https://api.github.com/repos/ethereum/tests/issues/906",
    "id": 893908570,
    "node_id": "IC_kwDOAO0i5841R_Za",
    "user": {
      "login": "winsvega",
      "id": 4492341,
      "node_id": "MDQ6VXNlcjQ0OTIzNDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4492341?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/winsvega",
      "html_url": "https://github.com/winsvega",
      "followers_url": "https://api.github.com/users/winsvega/followers",
      "following_url": "https://api.github.com/users/winsvega/following{/other_user}",
      "gists_url": "https://api.github.com/users/winsvega/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/winsvega/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/winsvega/subscriptions",
      "organizations_url": "https://api.github.com/users/winsvega/orgs",
      "repos_url": "https://api.github.com/users/winsvega/repos",
      "events_url": "https://api.github.com/users/winsvega/events{/privacy}",
      "received_events_url": "https://api.github.com/users/winsvega/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-06T00:14:16Z",
    "updated_at": "2021-08-06T00:14:16Z",
    "author_association": "MEMBER",
    "body": "Now we have some invalid transactions in state tests.\r\n\r\n```\r\nFor me personally, just having the JSON files is useful already. Parsing them is not difficult. Maybe it doesn't fit with how this repo is used with retesteth, but that's just my perspective :)\r\n```\r\nSo to the other devs. But have you ever thought how those JSONs appeared initially?\r\nIts not handwritten. We used aleth implementation. Now to generate the tests I can write my own transaction implementation but that would be bad as I might make a mistake. Like ori just recently found what might be a bug in my difficulty formula on edge case.\r\n\r\nWhat we need is a way to ask client if it considers certain transaction valid struct or not. But devs prefere their own tests or just ready made jsons\r\n \r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/tests/issues/comments/893908570/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/tests/issues/comments/917399039",
    "html_url": "https://github.com/ethereum/tests/issues/906#issuecomment-917399039",
    "issue_url": "https://api.github.com/repos/ethereum/tests/issues/906",
    "id": 917399039,
    "node_id": "IC_kwDOAO0i5842rmX_",
    "user": {
      "login": "winsvega",
      "id": 4492341,
      "node_id": "MDQ6VXNlcjQ0OTIzNDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4492341?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/winsvega",
      "html_url": "https://github.com/winsvega",
      "followers_url": "https://api.github.com/users/winsvega/followers",
      "following_url": "https://api.github.com/users/winsvega/following{/other_user}",
      "gists_url": "https://api.github.com/users/winsvega/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/winsvega/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/winsvega/subscriptions",
      "organizations_url": "https://api.github.com/users/winsvega/orgs",
      "repos_url": "https://api.github.com/users/winsvega/repos",
      "events_url": "https://api.github.com/users/winsvega/events{/privacy}",
      "received_events_url": "https://api.github.com/users/winsvega/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-11T12:26:33Z",
    "updated_at": "2021-09-11T12:26:33Z",
    "author_association": "MEMBER",
    "body": "the transaction tests are being reworked. fork names identical to state tests. \r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/tests/issues/comments/917399039/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
