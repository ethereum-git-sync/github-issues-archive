{
  "url": "https://api.github.com/repos/ethereum/tests/issues/1119",
  "repository_url": "https://api.github.com/repos/ethereum/tests",
  "labels_url": "https://api.github.com/repos/ethereum/tests/issues/1119/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/tests/issues/1119/comments",
  "events_url": "https://api.github.com/repos/ethereum/tests/issues/1119/events",
  "html_url": "https://github.com/ethereum/tests/issues/1119",
  "id": 1503621897,
  "node_id": "I_kwDOAO0i585Zn3MJ",
  "number": 1119,
  "title": "EIP3541 abort on invalid 0xef header test vectors",
  "user": {
    "login": "winsvega",
    "id": 4492341,
    "node_id": "MDQ6VXNlcjQ0OTIzNDE=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4492341?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/winsvega",
    "html_url": "https://github.com/winsvega",
    "followers_url": "https://api.github.com/users/winsvega/followers",
    "following_url": "https://api.github.com/users/winsvega/following{/other_user}",
    "gists_url": "https://api.github.com/users/winsvega/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/winsvega/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/winsvega/subscriptions",
    "organizations_url": "https://api.github.com/users/winsvega/orgs",
    "repos_url": "https://api.github.com/users/winsvega/repos",
    "events_url": "https://api.github.com/users/winsvega/events{/privacy}",
    "received_events_url": "https://api.github.com/users/winsvega/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2022-12-19T21:22:37Z",
  "updated_at": "2022-12-28T16:22:24Z",
  "closed_at": null,
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "https://eips.ethereum.org/EIPS/eip-3540#contract-creation-restrictions\r\n\r\n## **EIP3541** (Abort on 0xef bytecode)\r\nKeep in mind that in future new versions will become valid. the filler must be adjustable.\r\n\r\n### 0xef fails (all 0xef followed by not 00 fails)\r\n- [ ] check that transaction creation deploy code having first byte as 0xef aborts as if it was invalid opcode (transaction or create fails)\r\n- [ ] check that CREATE creation deploy code having first byte as 0xef aborts as if it was invalid opcode\r\n- [ ] check that CREATE2 creation deploy code having first byte as 0xef aborts as if it was invalid opcode\r\n- [ ] check that if code in the state already has 0xef as first byte it is aborted as if it was invalid opcode\r\n(above rules does not apply to 0xef00 first bytest combination)\r\n- [ ] check that having 0xef in the middle of contract code leads to abort as if it was invalid opcode\r\n- [ ] check that having 0xef00 in the middle of contract code leads to abort as if it was invalid opcode\r\n\r\n### 0xef0000 (version is 0x00,0x02-0xff fails)\r\n- [ ] check that transaction creation deploy code having first byte as 0xef0000 aborts as if it was invalid opcode (transaction or create fails)\r\n- [ ] check that CREATE creation deploy code having first byte as 0xef0000 aborts as if it was invalid opcode\r\n- [ ] check that CREATE2 creation deploy code having first byte as 0xef0000 aborts as if it was invalid opcode\r\n- [ ] check that if code in the state already has 0xef0000 as first byte it is aborted as if it was invalid opcode\r\n- [ ] all of above for version 0x02 - 0xff fails  (0xef00--)\r\n\r\n## The below are the EOFv1 version header format check\r\nMust followed by some reasonable body bytes so not to trigger an error of missing body bytes but the actual value range error.\r\n\r\n### 0xef000100 (subsection version is 0x00,0x02-0xff fails)\r\n- [ ] check that transaction creation deploy code having first byte as 0xef000100 aborts as if it was invalid opcode (transaction or create fails)\r\n- [ ] check that CREATE creation deploy code having first byte as 0xef000100 aborts as if it was invalid opcode\r\n- [ ] check that CREATE2 creation deploy code having first byte as 0xef000100 aborts as if it was invalid opcode\r\n- [ ] check that if code in the state already has 0xef000100 as first byte it is aborted as if it was invalid opcode\r\n- [ ] check that having 0xef000100 in the middle of contract code leads to abort as if it was invalid opcode\r\n- [ ] all of above for subversion 0x02 - 0xff fails  (0xef0001--)\r\n\r\n### 0xef000101 (subsection header invalid)\r\n#### type_size field validity (0x0000-0x0001-0x0002 is invalid )\r\n \r\n- [ ] check that transaction creation deploy code having first byte as 0xef000101---- aborts as if it was invalid opcode (transaction or create fails)\r\n- [ ] check that CREATE creation deploy code having first byte as 0xef000101---- aborts as if it was invalid opcode\r\n- [ ] check that CREATE2 creation deploy code having first byte as 0xef000101---- aborts as if it was invalid opcode\r\n- [ ] check that if code in the state already has 0xef000101---- as first byte it is aborted as if it was invalid opcode\r\n- [ ] check that having 0xef000101----  in the middle of contract code leads to abort as if it was invalid opcode (not sure how long futher we should drug this case. just checking that version parser wont accedentially work in legacy code. perhaps is ok to withdraw it)\r\nwhere ---- is  [0x0000, 0x0001, 0x0002]\r\n\r\n#### kind_code field validity (0x00,0x01,0x03-0xff is invalid)\r\n- [ ] check that transaction creation deploy code having first byte as 0xef0001010003[--] aborts as if it was invalid opcode (transaction or create fails)\r\n- [ ] check that CREATE creation deploy code having first byte as 0xef0001010003[--] aborts as if it was invalid opcode\r\n- [ ] check that CREATE2 creation deploy code having first byte as 0xef0001010003[--] aborts as if it was invalid opcode\r\n- [ ] check that if code in the state already has 0xef0001010003[--] as first byte it is aborted as if it was invalid opcode\r\nwhere -- is [0x00,0x01,0x03-0xff]\r\n\r\n#### num_code_sections validity (0x0000 is invalid)\r\n- [ ] check that transaction creation deploy code having first byte as 0xef000101000302[----] aborts as if it was invalid opcode (transaction or create fails)\r\n- [ ] check that CREATE creation deploy code having first byte as 0xef000101000302[----] aborts as if it was invalid opcode\r\n- [ ] check that CREATE2 creation deploy code having first byte as 0xef000101000302[----] aborts as if it was invalid opcode\r\n- [ ] check that if code in the state already has 0xef000101000302[----] as first byte it is aborted as if it was invalid opcode\r\nwhere ---- is [0x0000]\r\n\r\n#### code_size validity (0x0000 is invalid)\r\n- [ ] check that transaction creation deploy code having first byte as 0xef0001010003020001[----] aborts as if it was invalid opcode (transaction or create fails)\r\n- [ ] check that CREATE creation deploy code having first byte as 0xef0001010003020001[----] aborts as if it was invalid opcode\r\n- [ ] check that CREATE2 creation deploy code having first byte as 0xef0001010003020001[----] aborts as if it was invalid opcode\r\n- [ ] check that if code in the state already has 0xef0001010003020001[----] as first byte it is aborted as if it was invalid opcode\r\nwhere -- is [0x0000]\r\n\r\n#### kind_data validity (only 0x03 is valid)\r\n- [ ] check that transaction creation deploy code having first byte as 0xef00010100030200010001[--] aborts as if it was invalid opcode (transaction or create fails)\r\n- [ ] check that CREATE creation deploy code having first byte as 0xef00010100030200010001[--] aborts as if it was invalid opcode\r\n- [ ] check that CREATE2 creation deploy code having first byte as 0xef00010100030200010001[--] aborts as if it was invalid opcode\r\n- [ ] check that if code in the state already has 0xef00010100030200010001[--] as first byte it is aborted as if it was invalid opcode\r\nwhere -- is [0x00-0x02, 0x04-0xff]\r\n\r\n#### terminator validity (only 0x00 is valid)\r\n- [ ] check that transaction creation deploy code having first byte as 0xef00010100030200010001030000[--] aborts as if it was invalid opcode (transaction or create fails)\r\n- [ ] check that CREATE creation deploy code having first byte as 0xef00010100030200010001030000[--] aborts as if it was invalid opcode\r\n- [ ] check that CREATE2 creation deploy code having first byte as 0xef00010100030200010001030000[--] aborts as if it was invalid opcode\r\n- [ ] check that if code in the state already has 0xef00010100030200010001030000[--] as first byte it is aborted as if it was invalid opcode\r\nwhere -- is [0x01-0xff]\r\n\r\n## **EIP3540** (EOFV1)\r\n### EOF Header verification\r\n- [ ] check\r\n\r\n\r\nInside transaction creation\r\nInside contract\r\nIn initcode\r\nInside contract called by EOF code\r\nInside contract called by Legacy code\r\n\r\nHas restricted opcode (callcode/selfdestruct) \r\n\r\nIt is treated as invalid.\r\n\r\n-----\r\n\r\nCheck that if valid eof code calls subcontract that is not eof and has restricted opcode it is ok.\r\n\r\n----\r\n\r\nCheck that EOF code follows static context. (Throws on state change)\r\n\r\n----\r\n\r\nCheck what rules apply (can call restricted opcodes or not, eof rules if any)\r\nIf a legacycall delegatecall eof code\r\nIf eof code delegatecall legacy\r\n\r\n-----\r\n\r\nEof code creates a contract in init code of which is legacy code. Should not be permited. \r\n\r\n----\r\n\r\nCheck if eof code follows calldepth rules.\r\nE.g. if eof call calls into legacy or eof and so on check that calldepth limit is ok\r\n\r\n----\r\n\r\nCheck that eof context remain eof (restricted opcodes not permited) if eof code subcalls(delegatecall too) legacy code that goes oog, revert, suicide. After subcall fails the resumed eof code must remain eof. And vice versa if legacy code subcalls eof code and that one reverts or oog, the legacy code continue execution and restricted opcode still permited\r\n\r\n----\r\n\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/tests/issues/1119/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/tests/issues/1119/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/tests/issues/comments/1361242858",
    "html_url": "https://github.com/ethereum/tests/issues/1119#issuecomment-1361242858",
    "issue_url": "https://api.github.com/repos/ethereum/tests/issues/1119",
    "id": 1361242858,
    "node_id": "IC_kwDOAO0i585RIurq",
    "user": {
      "login": "winsvega",
      "id": 4492341,
      "node_id": "MDQ6VXNlcjQ0OTIzNDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4492341?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/winsvega",
      "html_url": "https://github.com/winsvega",
      "followers_url": "https://api.github.com/users/winsvega/followers",
      "following_url": "https://api.github.com/users/winsvega/following{/other_user}",
      "gists_url": "https://api.github.com/users/winsvega/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/winsvega/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/winsvega/subscriptions",
      "organizations_url": "https://api.github.com/users/winsvega/orgs",
      "repos_url": "https://api.github.com/users/winsvega/repos",
      "events_url": "https://api.github.com/users/winsvega/events{/privacy}",
      "received_events_url": "https://api.github.com/users/winsvega/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-12-21T12:16:44Z",
    "updated_at": "2022-12-21T12:22:22Z",
    "author_association": "MEMBER",
    "body": "Check eof code deployment collision with existing legacy or eof contracts.\r\n\r\n----\r\n\r\nCheck that every single bytecode except restricted behaive the same way (gas usage state interaction, if gasusage is changed for inside eof, test it too) inside of eof code. Make this test a template because there will be eofv2 or smth. \r\n\r\nCheck that invalid opcodes and restricted ones inside eof code lead to execution throw. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/tests/issues/comments/1361242858/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/tests/issues/comments/1362099706",
    "html_url": "https://github.com/ethereum/tests/issues/1119#issuecomment-1362099706",
    "issue_url": "https://api.github.com/repos/ethereum/tests/issues/1119",
    "id": 1362099706,
    "node_id": "IC_kwDOAO0i585RL_36",
    "user": {
      "login": "winsvega",
      "id": 4492341,
      "node_id": "MDQ6VXNlcjQ0OTIzNDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4492341?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/winsvega",
      "html_url": "https://github.com/winsvega",
      "followers_url": "https://api.github.com/users/winsvega/followers",
      "following_url": "https://api.github.com/users/winsvega/following{/other_user}",
      "gists_url": "https://api.github.com/users/winsvega/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/winsvega/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/winsvega/subscriptions",
      "organizations_url": "https://api.github.com/users/winsvega/orgs",
      "repos_url": "https://api.github.com/users/winsvega/repos",
      "events_url": "https://api.github.com/users/winsvega/events{/privacy}",
      "received_events_url": "https://api.github.com/users/winsvega/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-12-21T21:20:03Z",
    "updated_at": "2022-12-21T21:20:03Z",
    "author_association": "MEMBER",
    "body": "actually consider translating all existing tests into eof format that should cover most of the cases above as we have this vectors already. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/tests/issues/comments/1362099706/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/tests/issues/comments/1366769926",
    "html_url": "https://github.com/ethereum/tests/issues/1119#issuecomment-1366769926",
    "issue_url": "https://api.github.com/repos/ethereum/tests/issues/1119",
    "id": 1366769926,
    "node_id": "IC_kwDOAO0i585Rd0EG",
    "user": {
      "login": "gumb0",
      "id": 1863135,
      "node_id": "MDQ6VXNlcjE4NjMxMzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1863135?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gumb0",
      "html_url": "https://github.com/gumb0",
      "followers_url": "https://api.github.com/users/gumb0/followers",
      "following_url": "https://api.github.com/users/gumb0/following{/other_user}",
      "gists_url": "https://api.github.com/users/gumb0/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gumb0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gumb0/subscriptions",
      "organizations_url": "https://api.github.com/users/gumb0/orgs",
      "repos_url": "https://api.github.com/users/gumb0/repos",
      "events_url": "https://api.github.com/users/gumb0/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gumb0/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-12-28T16:21:42Z",
    "updated_at": "2022-12-28T16:21:42Z",
    "author_association": "MEMBER",
    "body": ">  check that transaction creation deploy code having first byte as 0xef000100 aborts as if it was invalid opcode (transaction or create fails)\r\n\r\nNote that both initcode and deployed code must be validated (in creation transaction, CREATE and CREATE2).\r\n\r\n>  type_size field validity (0x0000-0x0001-0x0002 is invalid )\r\n\r\nNote the typo in current EIP-3540 - minimum possible type_size is 4. Also it must be divisible by 4 and equal to number of code sections * 4.\r\n(See also [EOF Unified spec](https://notes.ethereum.org/ttCtHNsWSwe0EVk-jsW7-A) for more concise expression of all rules)\r\n\r\n> num_code_sections validity (0x0000 is invalid)\r\n\r\nAlso max number of code sections is 1024.\r\n\r\n> EOF Header verification\r\n>...\r\n> Inside contract called by EOF code\r\n> Inside contract called by Legacy code\r\n\r\nNot that already deployed contracts are valid and don't need validation before execution.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/tests/issues/comments/1366769926/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/tests/issues/comments/1366770392",
    "html_url": "https://github.com/ethereum/tests/issues/1119#issuecomment-1366770392",
    "issue_url": "https://api.github.com/repos/ethereum/tests/issues/1119",
    "id": 1366770392,
    "node_id": "IC_kwDOAO0i585Rd0LY",
    "user": {
      "login": "gumb0",
      "id": 1863135,
      "node_id": "MDQ6VXNlcjE4NjMxMzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1863135?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gumb0",
      "html_url": "https://github.com/gumb0",
      "followers_url": "https://api.github.com/users/gumb0/followers",
      "following_url": "https://api.github.com/users/gumb0/following{/other_user}",
      "gists_url": "https://api.github.com/users/gumb0/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gumb0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gumb0/subscriptions",
      "organizations_url": "https://api.github.com/users/gumb0/orgs",
      "repos_url": "https://api.github.com/users/gumb0/repos",
      "events_url": "https://api.github.com/users/gumb0/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gumb0/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-12-28T16:22:24Z",
    "updated_at": "2022-12-28T16:22:24Z",
    "author_association": "MEMBER",
    "body": "I think we cover many cases of invalid container format in stEIP3540 tests already.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/tests/issues/comments/1366770392/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
