{
  "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1531",
  "repository_url": "https://api.github.com/repos/ethereum/consensus-specs",
  "labels_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1531/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1531/comments",
  "events_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1531/events",
  "html_url": "https://github.com/ethereum/consensus-specs/issues/1531",
  "id": 538938503,
  "node_id": "MDU6SXNzdWU1Mzg5Mzg1MDM=",
  "number": 1531,
  "title": "[Networking] Add `hello` message",
  "user": {
    "login": "mcdee",
    "id": 511384,
    "node_id": "MDQ6VXNlcjUxMTM4NA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/511384?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mcdee",
    "html_url": "https://github.com/mcdee",
    "followers_url": "https://api.github.com/users/mcdee/followers",
    "following_url": "https://api.github.com/users/mcdee/following{/other_user}",
    "gists_url": "https://api.github.com/users/mcdee/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mcdee/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mcdee/subscriptions",
    "organizations_url": "https://api.github.com/users/mcdee/orgs",
    "repos_url": "https://api.github.com/users/mcdee/repos",
    "events_url": "https://api.github.com/users/mcdee/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mcdee/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1295438707,
      "node_id": "MDU6TGFiZWwxMjk1NDM4NzA3",
      "url": "https://api.github.com/repos/ethereum/consensus-specs/labels/scope:networking",
      "name": "scope:networking",
      "color": "F596AA",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 14,
  "created_at": "2019-12-17T09:21:36Z",
  "updated_at": "2020-08-03T12:50:03Z",
  "closed_at": "2020-08-03T12:50:03Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "At current when two peers first connect they exchange some information about the current state of their chains with the `status` message, but there is some information that can be useful to help peers know how to interact with each other.  This should not be added to the `status` message, as the information is static per connection and sending it with every status update would be wasteful.  Instead, a new handshake message `hello` is proposed.\r\n\r\nAn initial stab at the contents of a `hello` message might be:\r\n\r\n  - genesis state root (32 bytes)\r\n  - genesis fork version (4 bytes)\r\n  - client name/semver e.g. `prysm/1.2.3` (bytes)\r\n  - supported version(s) of the networking spec (repeated uint32)\r\n\r\nThis provides a basis for understanding if the two peers could talk to each other, even if either or both of them have no state information beyond genesis.  It also allows for peers to tweak their behaviour depending on known idiosyncrasies in particular client/spec versions.",
  "closed_by": {
    "login": "djrtwo",
    "id": 1433595,
    "node_id": "MDQ6VXNlcjE0MzM1OTU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/djrtwo",
    "html_url": "https://github.com/djrtwo",
    "followers_url": "https://api.github.com/users/djrtwo/followers",
    "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
    "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
    "organizations_url": "https://api.github.com/users/djrtwo/orgs",
    "repos_url": "https://api.github.com/users/djrtwo/repos",
    "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
    "received_events_url": "https://api.github.com/users/djrtwo/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1531/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1531/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/566507664",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1531#issuecomment-566507664",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1531",
    "id": 566507664,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2NjUwNzY2NA==",
    "user": {
      "login": "AgeManning",
      "id": 7454587,
      "node_id": "MDQ6VXNlcjc0NTQ1ODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7454587?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AgeManning",
      "html_url": "https://github.com/AgeManning",
      "followers_url": "https://api.github.com/users/AgeManning/followers",
      "following_url": "https://api.github.com/users/AgeManning/following{/other_user}",
      "gists_url": "https://api.github.com/users/AgeManning/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AgeManning/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AgeManning/subscriptions",
      "organizations_url": "https://api.github.com/users/AgeManning/orgs",
      "repos_url": "https://api.github.com/users/AgeManning/repos",
      "events_url": "https://api.github.com/users/AgeManning/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AgeManning/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-12-17T11:46:18Z",
    "updated_at": "2019-12-17T11:46:18Z",
    "author_association": "CONTRIBUTOR",
    "body": "If all clients supported the identify libp2p protocol: https://github.com/libp2p/specs/tree/master/identify\r\nWould this be sufficient information for what you are chasing. \r\n\r\nIs the fork version already in `Status`?\r\n\r\nPerhaps we could add the genesis state root to the `agent_version` in identify? \r\n\r\nI ask, because it's something most libp2p-compatible clients would support, and already gives us a clients' supported libp2p protocols and versions. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/566507664/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/566510662",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1531#issuecomment-566510662",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1531",
    "id": 566510662,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2NjUxMDY2Mg==",
    "user": {
      "login": "mcdee",
      "id": 511384,
      "node_id": "MDQ6VXNlcjUxMTM4NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/511384?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mcdee",
      "html_url": "https://github.com/mcdee",
      "followers_url": "https://api.github.com/users/mcdee/followers",
      "following_url": "https://api.github.com/users/mcdee/following{/other_user}",
      "gists_url": "https://api.github.com/users/mcdee/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mcdee/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mcdee/subscriptions",
      "organizations_url": "https://api.github.com/users/mcdee/orgs",
      "repos_url": "https://api.github.com/users/mcdee/repos",
      "events_url": "https://api.github.com/users/mcdee/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mcdee/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-12-17T11:56:31Z",
    "updated_at": "2019-12-17T11:56:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks for the link I was unaware of this function.  There are two areas to understand for suitability:\r\n\r\n  1. when/how is this triggered, how much control does the application have?\r\n  2. can we fit the data we want in to the structures supplied?\r\n\r\nI'll have a read through and see exactly how this works and report back.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/566510662/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/566515390",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1531#issuecomment-566515390",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1531",
    "id": 566515390,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2NjUxNTM5MA==",
    "user": {
      "login": "AgeManning",
      "id": 7454587,
      "node_id": "MDQ6VXNlcjc0NTQ1ODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7454587?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AgeManning",
      "html_url": "https://github.com/AgeManning",
      "followers_url": "https://api.github.com/users/AgeManning/followers",
      "following_url": "https://api.github.com/users/AgeManning/following{/other_user}",
      "gists_url": "https://api.github.com/users/AgeManning/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AgeManning/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AgeManning/subscriptions",
      "organizations_url": "https://api.github.com/users/AgeManning/orgs",
      "repos_url": "https://api.github.com/users/AgeManning/repos",
      "events_url": "https://api.github.com/users/AgeManning/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AgeManning/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-12-17T12:10:36Z",
    "updated_at": "2019-12-17T12:10:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "The application can configure an interval which periodically updates the information. It's also used to help peers discover their external IP's as well as each other's capabilities.\r\n\r\nThe `agent_version` is configurable and is an arbitrary string, I believe of arbitrary length. The protocols and versions are the libp2p protocols we support, in addition to the stream multiplexers and potentially the encryption protocols. \r\n\r\nFor us, it would tell us, which RPC protocols we support, which versions and encodings and also whether we support gossipsub or not. \r\n\r\nThere might also be some relevant information about this here: https://docs.libp2p.io/concepts/nat/",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/566515390/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/566536877",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1531#issuecomment-566536877",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1531",
    "id": 566536877,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2NjUzNjg3Nw==",
    "user": {
      "login": "mcdee",
      "id": 511384,
      "node_id": "MDQ6VXNlcjUxMTM4NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/511384?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mcdee",
      "html_url": "https://github.com/mcdee",
      "followers_url": "https://api.github.com/users/mcdee/followers",
      "following_url": "https://api.github.com/users/mcdee/following{/other_user}",
      "gists_url": "https://api.github.com/users/mcdee/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mcdee/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mcdee/subscriptions",
      "organizations_url": "https://api.github.com/users/mcdee/orgs",
      "repos_url": "https://api.github.com/users/mcdee/repos",
      "events_url": "https://api.github.com/users/mcdee/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mcdee/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-12-17T13:16:17Z",
    "updated_at": "2019-12-17T13:16:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "Looking at https://github.com/libp2p/go-libp2p/blob/master/p2p/protocol/identify/id.go it appears the only thing that can be set by applications is the `agent_version` value.  Although we could use this as a compound field it would be, in my opinion, fragile compared to a well-formed message.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/566536877/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/566658042",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1531#issuecomment-566658042",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1531",
    "id": 566658042,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2NjY1ODA0Mg==",
    "user": {
      "login": "dryajov",
      "id": 1094341,
      "node_id": "MDQ6VXNlcjEwOTQzNDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1094341?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dryajov",
      "html_url": "https://github.com/dryajov",
      "followers_url": "https://api.github.com/users/dryajov/followers",
      "following_url": "https://api.github.com/users/dryajov/following{/other_user}",
      "gists_url": "https://api.github.com/users/dryajov/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dryajov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dryajov/subscriptions",
      "organizations_url": "https://api.github.com/users/dryajov/orgs",
      "repos_url": "https://api.github.com/users/dryajov/repos",
      "events_url": "https://api.github.com/users/dryajov/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dryajov/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-12-17T17:10:45Z",
    "updated_at": "2019-12-17T17:11:17Z",
    "author_association": "NONE",
    "body": "@AgeManning I would say that the info provided by `identify` is mostly internal to libp2p, the way `AgentVersion` has been used so far is to identify the libp2p implementation, e.g. `go-libp2p/3.3.4`. This is free form and we could overload it to identify the Eth2 client, but this isn't how it's been used so far and I would be inclined to say that it makes more sense in the context of libp2p itself rather than any application specific information. \r\n\r\nAnother issue with using `identify` for this purpose, is the fact that client implementations/version can rely on the same libp2p implementation, in that case it's very hard to tell whether they are still compatible at the application layer. In addition, we rely on `multistream-select` for protocol selection, which is aware of versioning and AFAIK the current spec relies on that to version individual endpoints. The drawback here is that it requires additional roundtrips to select compatible protocols, if this information is communicated with the `Hello` message, those roundtrips wouldn't be necessary.\r\n\r\nWith all this, I see a lot of value in having a `Hello` message as proposed in this this issue. We can always add this info to the `Status` message, but it seems like that is exchanged on a periodic basis, and the info outlined here is static, as @mcdee states, in this case, sending it only once, makes the most sense.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/566658042/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/566780432",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1531#issuecomment-566780432",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1531",
    "id": 566780432,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2Njc4MDQzMg==",
    "user": {
      "login": "AgeManning",
      "id": 7454587,
      "node_id": "MDQ6VXNlcjc0NTQ1ODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7454587?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AgeManning",
      "html_url": "https://github.com/AgeManning",
      "followers_url": "https://api.github.com/users/AgeManning/followers",
      "following_url": "https://api.github.com/users/AgeManning/following{/other_user}",
      "gists_url": "https://api.github.com/users/AgeManning/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AgeManning/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AgeManning/subscriptions",
      "organizations_url": "https://api.github.com/users/AgeManning/orgs",
      "repos_url": "https://api.github.com/users/AgeManning/repos",
      "events_url": "https://api.github.com/users/AgeManning/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AgeManning/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-12-17T22:36:14Z",
    "updated_at": "2019-12-17T22:36:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "For clarity, I'm not against a `Hello` message, I think it would be useful. \r\n\r\nSome interesting points:\r\n > I would say that the info provided by identify is mostly internal to libp2p, the way AgentVersion has been used so far is to identify the libp2p implementation, e.g. go-libp2p/3.3.4. This is free form and we could overload it to identify the Eth2 client, but this isn't how it's been used so far and I would be inclined to say that it makes more sense in the context of libp2p itself rather than any application specific information.\r\n\r\nSubstrate, for example, use the client version here.\r\n\r\n> Another issue with using identify for this purpose, is the fact that client implementations/version can rely on the same libp2p implementation, in that case it's very hard to tell whether they are still compatible at the application layer. In addition, we rely on multistream-select for protocol selection, which is aware of versioning and AFAIK the current spec relies on that to version individual endpoints. The drawback here is that it requires additional roundtrips to select compatible protocols, if this information is communicated with the Hello message, those roundtrips wouldn't be necessary.\r\n\r\nThe agent-version would tell us if they are compatible at the application layer. Agree that attempting to connect to each end-point makes unnecessary round-trips. Which is why `identify` tells us all the protocols (and versions) in the same round-trip that a `Hello` message would do. \r\n\r\nThe only difference I see between a `Hello` message and `Identify` is the extra two bits of information, genesis state-root and genesis-fork version. `Identify` also gives us external IP's to help with NATing but in principle we have this information from discv5.\r\n\r\nWith this being said, I also don't particularly like the idea of using `identify` if we think a more purpose built protocol suits us better. \r\n\r\nIs the fork-version in the current Status message not sufficient?\r\n\r\nThe reason we want to include genesis state-root is for peers that say they are on the same fork version, but for some reason have an incorrect genesis state? In the current implementation, requesting a block from such a peer, would be invalid and the peer would be dropped. Having the genesis state-root given in advance would prevent this step correct? Is there another purpose I'm missing?\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/566780432/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/566812314",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1531#issuecomment-566812314",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1531",
    "id": 566812314,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2NjgxMjMxNA==",
    "user": {
      "login": "dryajov",
      "id": 1094341,
      "node_id": "MDQ6VXNlcjEwOTQzNDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1094341?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dryajov",
      "html_url": "https://github.com/dryajov",
      "followers_url": "https://api.github.com/users/dryajov/followers",
      "following_url": "https://api.github.com/users/dryajov/following{/other_user}",
      "gists_url": "https://api.github.com/users/dryajov/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dryajov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dryajov/subscriptions",
      "organizations_url": "https://api.github.com/users/dryajov/orgs",
      "repos_url": "https://api.github.com/users/dryajov/repos",
      "events_url": "https://api.github.com/users/dryajov/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dryajov/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-12-18T00:33:06Z",
    "updated_at": "2019-12-18T00:33:06Z",
    "author_association": "NONE",
    "body": "Thanks for the perspective @AgeManning!\r\n\r\n> For clarity, I'm not against a Hello message, I think it would be useful.\r\n\r\nGreat, I think it's useful too.\r\n\r\nWith regards to `identify`, traditionally this info has been internal to the libp2p stack, some implementations don't even expose it to external apps. \r\n\r\n> Which is why identify tells us all the protocols (and versions) in the same round-trip that a Hello message would do.\r\n\r\nI would call this a happy coincidence (perhaps by design) that we've chosen a scheme of one protocol string per endpoint and it works in our favor because identify does communicate the protocols it knows about. But should the app know about the version of `mplex` we're on, or what other protocols are mounted by the stack by perhaps other unrelated parts of the app? What I mean is that we seem to be overloading internals for application use. \r\n\r\nJust leaving the above for perspective, because given the below quote, we seem to agree.\r\n\r\n> With this being said, I also don't particularly like the idea of using identify if we think a more purpose built protocol suits us better.\r\n\r\n> The reason we want to include genesis state-root is for peers that say they are on the same fork version, but for some reason have an incorrect genesis state? In the current implementation, requesting a block from such a peer, would be invalid and the peer would be dropped. Having the genesis state-root given in advance would prevent this step correct? Is there another purpose I'm missing?\r\n \r\nWhat does fork mean in the context of Eth2? Is it a protocol upgrade? If that's the case, would there be a situation where there is just no fork active, i.e. no upgrades made so far? What would the fork value be in that case `nil/0`? If that's the case, then the genesis field makes sense because we can readily determine if the client is a mainnet client, or some random experiment or testnet peer...",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/566812314/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/566965218",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1531#issuecomment-566965218",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1531",
    "id": 566965218,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2Njk2NTIxOA==",
    "user": {
      "login": "arnetheduck",
      "id": 1382986,
      "node_id": "MDQ6VXNlcjEzODI5ODY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1382986?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/arnetheduck",
      "html_url": "https://github.com/arnetheduck",
      "followers_url": "https://api.github.com/users/arnetheduck/followers",
      "following_url": "https://api.github.com/users/arnetheduck/following{/other_user}",
      "gists_url": "https://api.github.com/users/arnetheduck/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/arnetheduck/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/arnetheduck/subscriptions",
      "organizations_url": "https://api.github.com/users/arnetheduck/orgs",
      "repos_url": "https://api.github.com/users/arnetheduck/repos",
      "events_url": "https://api.github.com/users/arnetheduck/events{/privacy}",
      "received_events_url": "https://api.github.com/users/arnetheduck/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-12-18T10:08:25Z",
    "updated_at": "2019-12-18T10:08:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "Ideally, clients will have some notion of what they're connecting to before they make the connection - thus it would be good to include some of this information in the discovery protocol instead (fork/genesis).\r\n\r\nre multistream, the intent is to move to a newer version that cuts down on roundtrips and makes it cheaper overall - negotiating protocols and versions is in the domain of what libp2p should take care of for us and would ideally be solved there instead of also doing it in the application layer.\r\n\r\n`status` is generally cheap (compared to block data). adding a new message with special semantics I feel should be quantified with numbers at this point - for example in terms of overhead compared to other data flowing on the network. when looking at those numbers, it would be interesting to discuss and provide guidelines for when `status` should / needs to be used - this discussion should probably include `sync` as well, since syncing is the main use case when one might want to refresh the remote status information.\r\n\r\n`genesis_fork_version` is included in `genesis_state_root`, why would both be needed? worth keeping in mind also that `head_fork_version` is not static.\r\n\r\n`semver` has been suggested and discarded several times in the network protocol setting, due to the difficulty of providing good semantics around it.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/566965218/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/566982009",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1531#issuecomment-566982009",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1531",
    "id": 566982009,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2Njk4MjAwOQ==",
    "user": {
      "login": "mcdee",
      "id": 511384,
      "node_id": "MDQ6VXNlcjUxMTM4NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/511384?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mcdee",
      "html_url": "https://github.com/mcdee",
      "followers_url": "https://api.github.com/users/mcdee/followers",
      "following_url": "https://api.github.com/users/mcdee/following{/other_user}",
      "gists_url": "https://api.github.com/users/mcdee/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mcdee/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mcdee/subscriptions",
      "organizations_url": "https://api.github.com/users/mcdee/orgs",
      "repos_url": "https://api.github.com/users/mcdee/repos",
      "events_url": "https://api.github.com/users/mcdee/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mcdee/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-12-18T10:54:19Z",
    "updated_at": "2019-12-18T10:54:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Ideally, clients will have some notion of what they're connecting to before they make the connection - thus it would be good to include some of this information in the discovery protocol instead (fork/genesis).\r\n\r\nlibp2p's `identify` protocol has a single text field that is available to the protocol layer; without making it a seriously compound field I don't see that we can use it today.  If it was expanded by the lib2p folks to include additional user-defined fields it would be a possibility.\r\n\r\n> re multistream, the intent is to move to a newer version that cuts down on roundtrips and makes it cheaper overall - negotiating protocols and versions is in the domain of what libp2p should take care of for us and would ideally be solved there instead of also doing it in the application layer.\r\n\r\nThis would be a nice way of doing things, but again doesn't exist today.\r\n\r\n> ...adding a new message with special semantics I feel should be quantified with numbers at this point...\r\n\r\n\r\nWell for any long-running network the overhead of `hello` would tend to 0, whereas the overhead of `status` would likely remain constant.  But if it is considered the additional network burden is acceptable there is no technical reason why the information could not be added to the `status` message.\r\n\r\n> `genesis_fork_version` is included in `genesis_state_root`, why would both be needed?\r\n\r\nIt allows a node a very fast check to see if the peer even has the possibility of being compatible, and does not require the connecting peer to have built the genesis state.\r\n\r\n> `semver` has been suggested and discarded several times in the network protocol setting, due to the difficulty of providing good semantics around it.\r\n\r\nThe requirement is for a value that can be used to uniquely identify a software version.  It could be something else (e.g. hash of last commit) if preferred.  However, note this has nothing to do with the supported protocols themselves; these are provided in the last entry as an array of `uint32`",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/566982009/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/566993880",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1531#issuecomment-566993880",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1531",
    "id": 566993880,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2Njk5Mzg4MA==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-12-18T11:29:54Z",
    "updated_at": "2019-12-18T11:29:54Z",
    "author_association": "MEMBER",
    "body": "I'd also suggest to read https://eips.ethereum.org/EIPS/eip-2124 as it may give some good ideas regarding compatibility negotiation. This may be a well solved problem in Eth2 (I don't know), but getting a second perspective from Eth1 my not hurt.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/566993880/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/566994345",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1531#issuecomment-566994345",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1531",
    "id": 566994345,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2Njk5NDM0NQ==",
    "user": {
      "login": "arnetheduck",
      "id": 1382986,
      "node_id": "MDQ6VXNlcjEzODI5ODY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1382986?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/arnetheduck",
      "html_url": "https://github.com/arnetheduck",
      "followers_url": "https://api.github.com/users/arnetheduck/followers",
      "following_url": "https://api.github.com/users/arnetheduck/following{/other_user}",
      "gists_url": "https://api.github.com/users/arnetheduck/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/arnetheduck/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/arnetheduck/subscriptions",
      "organizations_url": "https://api.github.com/users/arnetheduck/orgs",
      "repos_url": "https://api.github.com/users/arnetheduck/repos",
      "events_url": "https://api.github.com/users/arnetheduck/events{/privacy}",
      "received_events_url": "https://api.github.com/users/arnetheduck/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-12-18T11:31:29Z",
    "updated_at": "2019-12-18T11:35:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "> libp2p's identify protocol \r\n\r\ndiscovery is the process before libp2p identify comes into play: the selection of peers to connect to - we're using `discv5` for this purpose, and the idea would be to add custom ENR records with information like this, so that you don't have to \"ping\"/connect to a client to know which network they're on / what protocols they support, as suggested in the EIP linked by @axic (thanks!)\r\n\r\n> of being compatible\r\n\r\nthe semantics of `fork_version` are somewhat underspecified but generally, the `genesis_state` and `genesis_fork_version` are not that interesting: consider ETH and ETC - they'd have the same genesis information but you want to know which is which when connecting.\r\n\r\n> supported protocols\r\n\r\nthe requests are versioned individually and negotiated by libp2p: https://github.com/ethereum/eth2.0-specs/blob/dev/specs/networking/p2p-interface.md#protocol-identification - there is no such thing as a \"global\" spec version - there was considerable discussion on this point earlier on.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/566994345/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/567374396",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1531#issuecomment-567374396",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1531",
    "id": 567374396,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2NzM3NDM5Ng==",
    "user": {
      "login": "arnetheduck",
      "id": 1382986,
      "node_id": "MDQ6VXNlcjEzODI5ODY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1382986?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/arnetheduck",
      "html_url": "https://github.com/arnetheduck",
      "followers_url": "https://api.github.com/users/arnetheduck/followers",
      "following_url": "https://api.github.com/users/arnetheduck/following{/other_user}",
      "gists_url": "https://api.github.com/users/arnetheduck/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/arnetheduck/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/arnetheduck/subscriptions",
      "organizations_url": "https://api.github.com/users/arnetheduck/orgs",
      "repos_url": "https://api.github.com/users/arnetheduck/repos",
      "events_url": "https://api.github.com/users/arnetheduck/events{/privacy}",
      "received_events_url": "https://api.github.com/users/arnetheduck/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-12-19T07:42:06Z",
    "updated_at": "2019-12-19T07:42:06Z",
    "author_association": "CONTRIBUTOR",
    "body": "Some more background: https://github.com/ethereum/eth2.0-specs/blob/dev/specs/networking/p2p-interface.md#why-segregate-requests-into-dedicated-protocol-ids",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/567374396/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/573931086",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1531#issuecomment-573931086",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1531",
    "id": 573931086,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3MzkzMTA4Ng==",
    "user": {
      "login": "mcdee",
      "id": 511384,
      "node_id": "MDQ6VXNlcjUxMTM4NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/511384?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mcdee",
      "html_url": "https://github.com/mcdee",
      "followers_url": "https://api.github.com/users/mcdee/followers",
      "following_url": "https://api.github.com/users/mcdee/following{/other_user}",
      "gists_url": "https://api.github.com/users/mcdee/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mcdee/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mcdee/subscriptions",
      "organizations_url": "https://api.github.com/users/mcdee/orgs",
      "repos_url": "https://api.github.com/users/mcdee/repos",
      "events_url": "https://api.github.com/users/mcdee/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mcdee/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-13T23:55:19Z",
    "updated_at": "2020-01-13T23:55:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "> > libp2p's identify protocol\r\n> \r\n> discovery is the process before libp2p identify comes into play: the selection of peers to connect to - we're using `discv5` for this purpose, and the idea would be to add custom ENR records with information like this, so that you don't have to \"ping\"/connect to a client to know which network they're on / what protocols they support, as suggested in the EIP linked by @axic (thanks!)\r\n\r\nWhat is the current state of discv5?  If it's ready to go and we can add node version there that would be great.  Although if we are going to continue to use `libp2p`'s discovery mechanism as well there would remain the requirement for a separate message.\r\n\r\n> > of being compatible\r\n> \r\n> the semantics of `fork_version` are somewhat underspecified but generally, the `genesis_state` and `genesis_fork_version` are not that interesting: consider ETH and ETC - they'd have the same genesis information but you want to know which is which when connecting.\r\n\r\nAlthough they are not enough to guarantee that we're on the correct network they are enough to quickly decide that we're not on the correct network in the negative case.  At the point an Ethereum 2 node first starts up and before it connects to any peers this information is all it knows, so it can be enough for the node to decide if it at least wants to try syncing with a potential peer.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/573931086/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/668004540",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1531#issuecomment-668004540",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1531",
    "id": 668004540,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2ODAwNDU0MA==",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-03T12:50:03Z",
    "updated_at": "2020-08-03T12:50:03Z",
    "author_association": "MEMBER",
    "body": "I'm closing this issue. A `hello` protocol will _not_ be introduced prior to phase 0. If there is a compelling reason based on phase 0 production issues to add this in subsequent phases, we'll open this up again then",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/668004540/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
