{
  "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1797",
  "repository_url": "https://api.github.com/repos/ethereum/consensus-specs",
  "labels_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1797/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1797/comments",
  "events_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1797/events",
  "html_url": "https://github.com/ethereum/consensus-specs/issues/1797",
  "id": 615012369,
  "node_id": "MDU6SXNzdWU2MTUwMTIzNjk=",
  "number": 1797,
  "title": "Use of `assert` to validate method arguments",
  "user": {
    "login": "franck44",
    "id": 14901362,
    "node_id": "MDQ6VXNlcjE0OTAxMzYy",
    "avatar_url": "https://avatars.githubusercontent.com/u/14901362?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/franck44",
    "html_url": "https://github.com/franck44",
    "followers_url": "https://api.github.com/users/franck44/followers",
    "following_url": "https://api.github.com/users/franck44/following{/other_user}",
    "gists_url": "https://api.github.com/users/franck44/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/franck44/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/franck44/subscriptions",
    "organizations_url": "https://api.github.com/users/franck44/orgs",
    "repos_url": "https://api.github.com/users/franck44/repos",
    "events_url": "https://api.github.com/users/franck44/events{/privacy}",
    "received_events_url": "https://api.github.com/users/franck44/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1063043868,
      "node_id": "MDU6TGFiZWwxMDYzMDQzODY4",
      "url": "https://api.github.com/repos/ethereum/consensus-specs/labels/general:enhancement",
      "name": "general:enhancement",
      "color": "086788",
      "default": false,
      "description": "New feature or request"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2020-05-08T22:08:59Z",
  "updated_at": "2020-06-17T23:02:47Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "The Eth2 specs frequently use `assert` statements to validate methods arguments.\r\nThis is a known source of security vulnerabilities and may result in insecure implementations:\r\n\r\n-  [CWE-617: Reachable Assertion](https://cwe.mitre.org/data/definitions/617.html)\r\n-  And also [MET01-J. Never use assertions to validate method arguments](https://wiki.sei.cmu.edu/confluence/display/java/MET01-J.+Never+use+assertions+to+validate+method+arguments) from the The CERT Oracle Secure Coding Standard for Java.\r\n\r\nThe specs, as guidelines for implementers, may benefit from following standard coding practices to limit the number of security vulnerabilities. After all, the Beacon Chain is a critical component of the Eth2 infrastructure, and critical software components may be coded/specified following the highest coding standards.\r\n\r\nNote: this issue is a follow-up of [issue 1789](https://github.com/ethereum/eth2.0-specs/issues/1789).",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1797/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1797/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/627370507",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1797#issuecomment-627370507",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1797",
    "id": 627370507,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyNzM3MDUwNw==",
    "user": {
      "login": "dankrad",
      "id": 6130607,
      "node_id": "MDQ6VXNlcjYxMzA2MDc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6130607?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dankrad",
      "html_url": "https://github.com/dankrad",
      "followers_url": "https://api.github.com/users/dankrad/followers",
      "following_url": "https://api.github.com/users/dankrad/following{/other_user}",
      "gists_url": "https://api.github.com/users/dankrad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dankrad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dankrad/subscriptions",
      "organizations_url": "https://api.github.com/users/dankrad/orgs",
      "repos_url": "https://api.github.com/users/dankrad/repos",
      "events_url": "https://api.github.com/users/dankrad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dankrad/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-12T14:10:43Z",
    "updated_at": "2020-05-12T14:10:43Z",
    "author_association": "MEMBER",
    "body": "I think that is just a misinterpretation of the \"assert\" statement as used in the spec. When translated into client code, it should just become an exception or a similar thing that flags something invalid has happened during the state transition, and the whole transition should therefore be rejected.\r\n\r\nSince the spec is not a program that is run in a production environment, the flagged suggestions don't really apply to it. And if not done using assertions, it would make tracking down bugs while testing the spec itself harder. So I'm not sure if there is a better solution, unless you can suggest one?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/627370507/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/628379171",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1797#issuecomment-628379171",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1797",
    "id": 628379171,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyODM3OTE3MQ==",
    "user": {
      "login": "franck44",
      "id": 14901362,
      "node_id": "MDQ6VXNlcjE0OTAxMzYy",
      "avatar_url": "https://avatars.githubusercontent.com/u/14901362?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/franck44",
      "html_url": "https://github.com/franck44",
      "followers_url": "https://api.github.com/users/franck44/followers",
      "following_url": "https://api.github.com/users/franck44/following{/other_user}",
      "gists_url": "https://api.github.com/users/franck44/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/franck44/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/franck44/subscriptions",
      "organizations_url": "https://api.github.com/users/franck44/orgs",
      "repos_url": "https://api.github.com/users/franck44/repos",
      "events_url": "https://api.github.com/users/franck44/events{/privacy}",
      "received_events_url": "https://api.github.com/users/franck44/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-14T04:28:43Z",
    "updated_at": "2020-05-14T04:28:43Z",
    "author_association": "NONE",
    "body": "Thanks for your feedback @dankrad \r\n\r\n> I think that is just a misinterpretation of the \"assert\" statement as used in the spec. When translated into client code, it should just become an exception or a similar thing that flags something invalid has happened during the state transition, and the whole transition should therefore be rejected.\r\n\r\nI interpreted the `assert` as the Python statement as the specs are provided in Python.\r\n\r\n> Since the spec is not a program that is run in a production environment, the flagged suggestions don't really apply to it.\r\n\r\nI am not so sure. Again most of the specs are written in Python, so the only semantics I can see to apply is the semantics of the Python language.\r\n\r\n> And if not done using assertions, it would make tracking down bugs while testing the spec itself harder. \r\n\r\n\r\n1. as you rightly mention, `assert` are useful for debugging and track down glitches. However they are unsafe in production code\r\n2. the semantics of the `assert` as it is right now seems to enforce a reject of the `transition`. As I can see in the code, a `state_transition` is implemented by gradually modifying the `state` variable so returning to a good state may be harder than it seems, and the state to return to is not specified in the specs\r\n3. the fact that `assert` statements are used as exception generators may enforce some constraints on the client code: the language should provide an exception mechanism. Our friends using functional programming may prefer more idiomatic and monadic solutions like returning the result of a computation as a `Try` (which indicates `Success` or `Failure` the latter being a sort of exception explanations). Moreover, using `assert` to generate exception implicitly means that we trust that the client code will properly catch exceptions which is probably optimistic and a thus a source of security vulnerabilities.\r\n\r\n> So I'm not sure if there is a better solution, unless you can suggest one?\r\n\r\nYes I have a suggestion. \r\n\r\nFor writing specifications and for instance constraints on the input parameters of a function, it is common to use **pre conditions**. The semantics is that the function can be called only if the parameters satisfy the pre-condition(s). This allows for a modular reasoning on the validity of functions calls (we can check that a caller satisfies the pre-conditions of a callee for instance using a static analyser).\r\n\r\nIf you want some examples of the use of pre/post-conditions, we are currently writing a formal specification of the Eth2.0 specs in order to prove that it is `sound`.\r\nThe [repo](https://github.com/PegaSysEng/eth2.0-dafny) is publicly available.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/628379171/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/645573990",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1797#issuecomment-645573990",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1797",
    "id": 645573990,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0NTU3Mzk5MA==",
    "user": {
      "login": "protolambda",
      "id": 19571989,
      "node_id": "MDQ6VXNlcjE5NTcxOTg5",
      "avatar_url": "https://avatars.githubusercontent.com/u/19571989?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/protolambda",
      "html_url": "https://github.com/protolambda",
      "followers_url": "https://api.github.com/users/protolambda/followers",
      "following_url": "https://api.github.com/users/protolambda/following{/other_user}",
      "gists_url": "https://api.github.com/users/protolambda/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/protolambda/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/protolambda/subscriptions",
      "organizations_url": "https://api.github.com/users/protolambda/orgs",
      "repos_url": "https://api.github.com/users/protolambda/repos",
      "events_url": "https://api.github.com/users/protolambda/events{/privacy}",
      "received_events_url": "https://api.github.com/users/protolambda/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-17T19:23:46Z",
    "updated_at": "2020-06-17T19:23:46Z",
    "author_association": "MEMBER",
    "body": "@franck44 Maybe you can take a few functions of the beacon spec, and change them how you would like them to look like without asserts? Can you please open a PR to show your approach?\r\n\r\nIf we can agree on those as example, and share that with client implementers for feedback, we can change the other parts of the spec to not have any asserts.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/645573990/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/645670331",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1797#issuecomment-645670331",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1797",
    "id": 645670331,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0NTY3MDMzMQ==",
    "user": {
      "login": "franck44",
      "id": 14901362,
      "node_id": "MDQ6VXNlcjE0OTAxMzYy",
      "avatar_url": "https://avatars.githubusercontent.com/u/14901362?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/franck44",
      "html_url": "https://github.com/franck44",
      "followers_url": "https://api.github.com/users/franck44/followers",
      "following_url": "https://api.github.com/users/franck44/following{/other_user}",
      "gists_url": "https://api.github.com/users/franck44/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/franck44/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/franck44/subscriptions",
      "organizations_url": "https://api.github.com/users/franck44/orgs",
      "repos_url": "https://api.github.com/users/franck44/repos",
      "events_url": "https://api.github.com/users/franck44/events{/privacy}",
      "received_events_url": "https://api.github.com/users/franck44/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-17T23:02:47Z",
    "updated_at": "2020-06-17T23:02:47Z",
    "author_association": "NONE",
    "body": "@protolambda This is what we have done in our [Dafny specs](https://github.com/PegaSysEng/eth2.0-dafny).\r\nThe repo is public.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/645670331/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
