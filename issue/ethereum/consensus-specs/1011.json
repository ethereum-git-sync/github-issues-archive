{
  "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1011",
  "repository_url": "https://api.github.com/repos/ethereum/consensus-specs",
  "labels_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1011/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1011/comments",
  "events_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1011/events",
  "html_url": "https://github.com/ethereum/consensus-specs/issues/1011",
  "id": 438682875,
  "node_id": "MDU6SXNzdWU0Mzg2ODI4NzU=",
  "number": 1011,
  "title": "BeaconNode <--> ValidatorClient API - Messages",
  "user": {
    "login": "spble",
    "id": 233229,
    "node_id": "MDQ6VXNlcjIzMzIyOQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/233229?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/spble",
    "html_url": "https://github.com/spble",
    "followers_url": "https://api.github.com/users/spble/followers",
    "following_url": "https://api.github.com/users/spble/following{/other_user}",
    "gists_url": "https://api.github.com/users/spble/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/spble/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/spble/subscriptions",
    "organizations_url": "https://api.github.com/users/spble/orgs",
    "repos_url": "https://api.github.com/users/spble/repos",
    "events_url": "https://api.github.com/users/spble/events{/privacy}",
    "received_events_url": "https://api.github.com/users/spble/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1063052501,
      "node_id": "MDU6TGFiZWwxMDYzMDUyNTAx",
      "url": "https://api.github.com/repos/ethereum/consensus-specs/labels/general:RFC",
      "name": "general:RFC",
      "color": "00D1B2",
      "default": false,
      "description": "Request for Comments"
    },
    {
      "id": 1342077502,
      "node_id": "MDU6TGFiZWwxMzQyMDc3NTAy",
      "url": "https://api.github.com/repos/ethereum/consensus-specs/labels/scope:validator-api",
      "name": "scope:validator-api",
      "color": "1d76db",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 26,
  "created_at": "2019-04-30T09:31:08Z",
  "updated_at": "2019-05-13T13:04:28Z",
  "closed_at": "2019-05-13T13:04:28Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "# ETH2.0 Beacon Node & Validator Client RPC Proposal\r\n\r\n## Outline\r\n\r\nThis issue proposes a minimal communications specification between a beacon node and validator client, targeting _phase 0_ of the Eth2.0 specification. The protocol is designed to be a simple local communications interface, permitting two separate binaries to communicate.\r\n\r\nThis specification is intended to describe communication abstractly, without choosing any particular protocol. The protocol used (e.g. gRPC/JSON-RPC) is discussed in a separate issue: #1012.\r\n\r\nThis issue follows on from a discussion during the [Client Architecture](https://notes.ethereum.org/iuPB2YjKQMGua0nwCZJVAQ) session at the [Sydney Implementers meeting](https://notes.ethereum.org/7w7diW1-St2_Yu-YHjg6NA). This also follow from the [Client Architecture Roundtable](https://hackmd.io/s/rJl05Lk6X) in Prague.\r\nThere is an editable version of this document, here: https://hackmd.io/r7D61hs4RWKm8nz_O2iinQ\r\n\r\n###  Background\r\nThe beacon node maintains the state of the beacon chain by communicating with other beacon nodes in the Ethereum Serenity network. Conceptually, it does not maintain keypairs that participate with the beacon chain.\r\n\r\nThe validator client is conceptually a separate entity which utilises private keys to perform validator related tasks on the beacon chain, which we call validator \"duties\". This includes the production of beacon blocks and signing of attestations.\r\n\r\nSince it is recommended to separate these concerns in the client implementations, it is necessary for us to clearly define the communication between them.\r\n\r\nThe goal of this specification is to promote interoperability between beacon nodes and validator clients derived from different projects. For example, the validator client from Lighthouse, could communicate with a running instance of the beacon node from Prysm.\r\n\r\nThis proposal has been adapted from the [Lighthouse gRPC protocol specification](https://github.com/sigp/lighthouse/blob/master/protos/src/services.proto).\r\n\r\nThere is also another [WIP proposal for a Minimum Validator Interface](https://notes.ethereum.org/Ia2kvjy0RX2J-GxrWfoCAQ), which describes additional functions possibly necessary for phase 1 and beyond.\r\n\r\n## Specification \r\n\r\n### Entities \r\nThe following are the two entities that participate in this protocol:\r\n - **`BeaconNode`**:\r\n A beacon node instance, run with a `--rpc` flag to enable the RPC interface. Runs stand-alone.\r\n\r\n - **`ValidatorClient`**:\r\nA validator client instance, which must connect to at least one instance of `BeaconNode`.\r\n\r\n\r\n\r\n### Endpoints\r\nThis section summarises API endpoints which are published by an instance of `BeaconNode`, for the exclusive use of `ValidatorClient` implementations.\r\n \r\nThis proposal is a minimum set of messages necessary to enable effective communication, without any extra features. Anything extra is beyond the scope of this document.\r\n\r\n#### Summary Table\r\n| Name      | Type | Parameters |  Returns |  \r\n| --------  | ---  | -----      |  -----   | \r\n| [`get_client_version`](#get_client_version) | GET | N/A        |  `client_version` | \r\n| [`get_genesis_time`](#get_genesis_time) | GET | N/A        |  `genesis_time` | \r\n| [`get_syncing_status`](#get_syncing_status) | GET | N/A        |  `syncing_status` | \r\n| [`get_duties`](#get_duties) | GET | `validator_pubkeys` |  `syncing_status`, `current_version`, [`ValidatorDuty`]| \r\n| [`produce_block`](#produce_block) | GET | `slot`, `randao_reveal` | `beacon_block` | \r\n| [`publish_block`](#publish_block) | POST |  `beacon_block` |  N/A  | \r\n| [`produce_attestation`](#produce_attestation) | GET | `slot`, `shard` |  `indexed_attestation` | \r\n| [`publish_attestation`](#publish_attestation) | POST | `indexed_attestation` | N/A | Publishes the IndexedAttestation after having been signed by the ValidatorClient |\r\n\r\n#### Status Codes\r\nFor each of these endpoints the underlying transport protocol should provide status codes. Assuming this will be based on HTTP, one of the following standard status codes will always be included as part of a response:\r\n\r\n| Code | Meaning |\r\n| ---  | ---     |\r\n| `200`  | The API call succeeded. |\r\n| `40X`  | The request was malformed.   |\r\n| `500`  | The `BeaconNode` cannot complete the request due to an internal error. |\r\n| `503`  | The `BeaconNode` is currently syncing, try again later. _A call can be made to `get_syncing_status` to in order to find out how much has been synchronised._ |\r\n\r\n#### `get_client_version`\r\nRequests that the `BeaconNode` identify information about its implementation in a format similar to a [HTTP User-Agent](https://tools.ietf.org/html/rfc7231#section-5.5.3) field.\r\n\r\n - **Parameters**: N/A\r\n - **Returns**:\r\n \r\n | Name         | Type          | Description |\r\n | ---          | ---              | --- |\r\n | `client_version`  | bytes32 | An ASCII-encoded hex string which uniquely defines the implementation of the `BeaconNode` and its current software version. |\r\n \r\n **Note**: _Unlike most other endpoints, `get_client_version` does not return an error `503` while the `BeaconNode` is syncing, but instead returns status code `200`._\r\n\r\n\r\n#### `get_genesis_time`\r\n Requests the `genesis_time` parameter from the `BeaconNode`, which should be consistent across all `BeaconNodes` that follow the same beacon chain.\r\n \r\n - **Parameters**: N/A\r\n - **Returns**:\r\n \r\n | Name         | Type          | Description |\r\n | ---          | ---              | --- |\r\n | `genesis_time`  | uint64 | The [`genesis_time`](https://github.com/ethereum/eth2.0-specs/blob/dev/specs/core/0_beacon-chain.md#on-genesis), which is a fairly static configuration option for the `BeaconNode`. |\r\n \r\n **Note**: _Unlike most other endpoints, `get_genesis_time` does not return an error `503` while the `BeaconNode` is syncing, but instead returns status code `200`._\r\n\r\n\r\n#### `get_syncing_status`\r\n Requests the `BeaconNode` to describe if it's currently syncing or not, and if it is, what block it is up to. This is modelled after the Eth1.0 JSON-RPC [`eth_syncing`](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_syncing) call.\r\n  - **Parameters**: N/A\r\n - **Returns**:\r\n \r\n | Name         | Type          | Description |\r\n | ---          | ---              | --- |\r\n | `syncing`  | `false` OR `SyncingStatus` | Either `false` if the node is not syncing, or a [`SyncingStatus`](#SyncingStatus) object if it is. |\r\n \r\n  **Note**: _Unlike most other endpoints, `get_syncing_status` does not return an error `503` while the `BeaconNode` is syncing, but instead returns status code `200` with the `SyncingStatus` object._\r\n \r\n\r\n#### `get_duties`\r\n  Requests the BeaconNode to provide a set of “duties”, which are actions that should be performed by ValidatorClients. This API call should be polled at every slot, to ensure that any chain reorganisations are catered for, and to ensure that the currently connected `BeaconNode` is properly synchronised.\r\n  \r\n - **Parameters**: \r\n \r\n | Name                 | Type      | Description   | \r\n | ---                  | ---       |  ---          |\r\n | `validator_pubkeys`  | [bytes48] | A list of unique validator public keys, where each item is a `0x` encoded hex string. |\r\n \r\n - **Returns**:\r\n \r\n | Name                 | Type              | Description   |\r\n | ---                  | ---               | ---           |\r\n | `current_version`    | bytes4            | The `current_version`, as described by the current [`Fork`](#Fork). |\r\n | `validator_duties`   | [`ValidatorDuty`] | A list where each item is a custom [`ValidatorDuty`](#ValidatorDuty) object. |\r\n \r\n \r\n #### `produce_block`\r\n Requests a `BeaconNode` to produce a valid block, which can then be signed by a ValidatorClient.\r\n \r\n - **Parameters**: \r\n \r\n | Name             | Type      | Description |\r\n | ---              | ---       | --- |\r\n | `slot`           | uint64    | The slot for which the block should be proposed. |\r\n | `randao_reveal`  | bytes     | The ValidatorClient's randao reveal value. |\r\n \r\n - **Returns**:\r\n \r\n | Name             | Type          | Description |\r\n | ---              | ---           | --- |\r\n | `beacon_block`   | `BeaconBlock` | A proposed [`BeaconBlock`](#BeaconBlock) object, but with the `signature` field left blank.\r\n \r\n \r\n #### `publish_block`\r\n Instructs the `BeaconNode` to publish a newly signed beacon block to the beacon network, to be included in the beacon chain.\r\n - **Parameters**: \r\n \r\n | Name             | Type      | Description |\r\n | ---              | ---       | --- |\r\n | `beacon_block`   | `BeaconBlock` | The [`BeaconBlock`](#BeaconBlock) object, as sent from the `BeaconNode` originally, but now with the `signature` field completed.\r\n \r\n - **Returns**: N/A\r\n \r\n \r\n ####  `produce_attestation`\r\n Requests that the `BeaconNode` produce an `IndexedAttestation`, with a blank `signature` field, which the `ValidatorClient` will then sign.\r\n \r\n - **Parameters**: \r\n \r\n | Name             | Type      | Description |\r\n | ---              | ---       | --- |\r\n | `slot`           | uint64    | The slot for which the attestation should be proposed. |\r\n | `shard`          | uint64    | The shard number for which the attestation is to be proposed. |\r\n \r\n - **Returns**:\r\n \r\n | Name             | Type          | Description |\r\n | ---              | ---           | --- |\r\n | `indexed_attestation`   | `IndexedAttestation` | An [`IndexedAttestation`](#IndexedAttestation) structure with the `signature` field left blank. |\r\n \r\n #### `publish_attestation`\r\n Instructs the `BeaconNode` to publish a newly signed `IndexedAttestation` object, to be incorporated into the beacon chain.\r\n \r\n - **Parameters**: \r\n \r\n | Name             | Type          | Description |\r\n | ---              | ---           | --- |\r\n | `indexed_attestation`   | `IndexedAttestation` | An [`IndexedAttestation`](#IndexedAttestation) structure, as originally provided by the `BeaconNode`, but now with the `signature` field completed. |\r\n  - **Returns**: N/A\r\n \r\n\r\n\r\n -----\r\n\r\n### Data Structures\r\nTwo new data objects are proposed for the sake of implementation, and several other data objects from the Eth2.0 specs are referenced.\r\n\r\nThe `bytes` data types are encoded hex strings, with `0x` preceeding them. `uint64` are decimal encoded integers, and `None` may be `null`, which is distinct from `0`.\r\n\r\n#### `ValidatorDuty`\r\n```asm\r\n{\r\n    \r\n    # The validator's public key, uniquely identifying them\r\n    'validator_pubkey': 'bytes48',\r\n    # The index of the validator in the committee\r\n    'committee_index': 'uint64',\r\n    # The slot at which the validator must attest.\r\n    'attestation_slot': 'uint64',\r\n    # The shard in which the validator must attest\r\n    'attestation_shard': 'uint64',\r\n    # The slot in which a validator must propose a block. This field can also be None.\r\n    'block_production_slot': 'uint64' or None\r\n}\r\n```\r\n\r\n#### `SyncingStatus`\r\nAs described by the [Eth1.0 JSON-RPC](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_syncing).:\r\n```asm\r\n{\r\n    # The block at which syncing started (will only be reset, after the sync reached his head)\r\n    'startingBlock': 'uint64',\r\n    # The current block\r\n    'currentBlock': 'uint64',\r\n    # The estimated highest block, or current target block number\r\n    'highestBlock': 'uint64'    \r\n}\r\n```\r\n\r\n#### `Fork`\r\nAs described by [Fork](https://github.com/ethereum/eth2.0-specs/blob/dev/specs/core/0_beacon-chain.md#Fork) in the Eth2.0 specs.\r\n\r\n#### `BeaconBlock`\r\nAs described by [BeaconBlock](https://github.com/ethereum/eth2.0-specs/blob/dev/specs/core/0_beacon-chain.md#BeaconBlock) in the Eth2.0 specs.\r\n\r\n#### `IndexedAttestation`\r\nAs described by [IndexedAttestation](https://github.com/ethereum/eth2.0-specs/blob/dev/specs/core/0_beacon-chain.md#IndexedAttestation) in the Eth2.0 specs.\r\n  \r\n  \r\n \r\n  \r\n## Optional Extras\r\n\r\n#### Endpoint: `get_fork`\r\n Requests the `BeaconNode` to provide which fork version it is currently on.\r\n - **Parameters**: N/A\r\n - **Returns**:\r\n \r\n | Name         | Type          | Description |\r\n | ---          | ---              | --- |\r\n | `fork`  | [`Fork`](#Fork) | Provides the current version information for the fork which the `BeaconNode` is currently following. |\r\n | `chain_id` | uint64  | Sometimes called the network id, this number discerns the active chain for the `BeaconNode`. Analagous to Eth1.0 JSON-RPC [`net_version`](https://github.com/ethereum/wiki/wiki/JSON-RPC#net_version). |\r\n  ",
  "closed_by": {
    "login": "spble",
    "id": 233229,
    "node_id": "MDQ6VXNlcjIzMzIyOQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/233229?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/spble",
    "html_url": "https://github.com/spble",
    "followers_url": "https://api.github.com/users/spble/followers",
    "following_url": "https://api.github.com/users/spble/following{/other_user}",
    "gists_url": "https://api.github.com/users/spble/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/spble/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/spble/subscriptions",
    "organizations_url": "https://api.github.com/users/spble/orgs",
    "repos_url": "https://api.github.com/users/spble/repos",
    "events_url": "https://api.github.com/users/spble/events{/privacy}",
    "received_events_url": "https://api.github.com/users/spble/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1011/reactions",
    "total_count": 2,
    "+1": 1,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 1,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1011/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/488041552",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1011#issuecomment-488041552",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1011",
    "id": 488041552,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4ODA0MTU1Mg==",
    "user": {
      "login": "GregTheGreek",
      "id": 16929357,
      "node_id": "MDQ6VXNlcjE2OTI5MzU3",
      "avatar_url": "https://avatars.githubusercontent.com/u/16929357?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/GregTheGreek",
      "html_url": "https://github.com/GregTheGreek",
      "followers_url": "https://api.github.com/users/GregTheGreek/followers",
      "following_url": "https://api.github.com/users/GregTheGreek/following{/other_user}",
      "gists_url": "https://api.github.com/users/GregTheGreek/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/GregTheGreek/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/GregTheGreek/subscriptions",
      "organizations_url": "https://api.github.com/users/GregTheGreek/orgs",
      "repos_url": "https://api.github.com/users/GregTheGreek/repos",
      "events_url": "https://api.github.com/users/GregTheGreek/events{/privacy}",
      "received_events_url": "https://api.github.com/users/GregTheGreek/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-04-30T17:27:03Z",
    "updated_at": "2019-04-30T17:27:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "This is great! \r\n\r\nFor `get_duties` i would add that array order must be maintained.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/488041552/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/488153060",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1011#issuecomment-488153060",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1011",
    "id": 488153060,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4ODE1MzA2MA==",
    "user": {
      "login": "ralexstokes",
      "id": 3113781,
      "node_id": "MDQ6VXNlcjMxMTM3ODE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3113781?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ralexstokes",
      "html_url": "https://github.com/ralexstokes",
      "followers_url": "https://api.github.com/users/ralexstokes/followers",
      "following_url": "https://api.github.com/users/ralexstokes/following{/other_user}",
      "gists_url": "https://api.github.com/users/ralexstokes/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ralexstokes/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ralexstokes/subscriptions",
      "organizations_url": "https://api.github.com/users/ralexstokes/orgs",
      "repos_url": "https://api.github.com/users/ralexstokes/repos",
      "events_url": "https://api.github.com/users/ralexstokes/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ralexstokes/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-04-30T23:39:23Z",
    "updated_at": "2019-04-30T23:39:23Z",
    "author_association": "MEMBER",
    "body": "another option is that we define the interfaces such that the beacon node returns everything the validator client provides in the request, such that the response is a strict superset of the request.\r\n\r\nthis is kind of the route that (afaiui) graphQL takes, where a server will \"fill in the blanks\" for a given client.\r\n\r\ni would argue this is helpful for a few reasons (probably others):\r\n\r\n1. debuggability -- the complete packet of info can be in one place, rather than having to manually thread a request and response message\r\n2. safety -- this came to mind after reading: https://github.com/ethereum/eth2.0-specs/issues/1011#issuecomment-488041552; a payload of \"duties\" lacking the full context is dangerous imo. as a validator, i should know for which pubkeys i should perform which duties... the current suggestion assumes i'll keep an ordered list somewhere that i can check against which seems error prone in the case that (i) nodes cycle, (ii) i have a bug in my list-checking code, etc.\r\n3. backwards compatibility -- the fewer constraints we place on the API today, the less change will be necessary in the future\r\n\r\ni think this notion of safety is pretty important so i would extend the design principle across every API (and really this stands for any RPC we will define for the whole endeavor) -- the only downside is the additional communication overhead but i don't see it being that major",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/488153060/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/488157402",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1011#issuecomment-488157402",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1011",
    "id": 488157402,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4ODE1NzQwMg==",
    "user": {
      "login": "Mikerah",
      "id": 4249799,
      "node_id": "MDQ6VXNlcjQyNDk3OTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4249799?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Mikerah",
      "html_url": "https://github.com/Mikerah",
      "followers_url": "https://api.github.com/users/Mikerah/followers",
      "following_url": "https://api.github.com/users/Mikerah/following{/other_user}",
      "gists_url": "https://api.github.com/users/Mikerah/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Mikerah/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Mikerah/subscriptions",
      "organizations_url": "https://api.github.com/users/Mikerah/orgs",
      "repos_url": "https://api.github.com/users/Mikerah/repos",
      "events_url": "https://api.github.com/users/Mikerah/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Mikerah/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-01T00:02:59Z",
    "updated_at": "2019-05-01T00:02:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "Can you put this issue into a PR? It would make it much easier to review and add comments directly to this spec. Great work!",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/488157402/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/488184338",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1011#issuecomment-488184338",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1011",
    "id": 488184338,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4ODE4NDMzOA==",
    "user": {
      "login": "GregTheGreek",
      "id": 16929357,
      "node_id": "MDQ6VXNlcjE2OTI5MzU3",
      "avatar_url": "https://avatars.githubusercontent.com/u/16929357?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/GregTheGreek",
      "html_url": "https://github.com/GregTheGreek",
      "followers_url": "https://api.github.com/users/GregTheGreek/followers",
      "following_url": "https://api.github.com/users/GregTheGreek/following{/other_user}",
      "gists_url": "https://api.github.com/users/GregTheGreek/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/GregTheGreek/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/GregTheGreek/subscriptions",
      "organizations_url": "https://api.github.com/users/GregTheGreek/orgs",
      "repos_url": "https://api.github.com/users/GregTheGreek/repos",
      "events_url": "https://api.github.com/users/GregTheGreek/events{/privacy}",
      "received_events_url": "https://api.github.com/users/GregTheGreek/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-01T02:47:39Z",
    "updated_at": "2019-05-01T02:48:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "@ralexstokes I think this is probably better to ask existing teams from eth1.x what would make sense (ethers.js, web3.js,... Etc)\r\n\r\nI'll forward this off to my tooling group and see if they have Any input. \r\n\r\nEdit; I realize this isn't beacon chain RPC as I thought... Lol none the less I'll pass it along",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/488184338/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/488200539",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1011#issuecomment-488200539",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1011",
    "id": 488200539,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4ODIwMDUzOQ==",
    "user": {
      "login": "spble",
      "id": 233229,
      "node_id": "MDQ6VXNlcjIzMzIyOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/233229?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/spble",
      "html_url": "https://github.com/spble",
      "followers_url": "https://api.github.com/users/spble/followers",
      "following_url": "https://api.github.com/users/spble/following{/other_user}",
      "gists_url": "https://api.github.com/users/spble/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/spble/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/spble/subscriptions",
      "organizations_url": "https://api.github.com/users/spble/orgs",
      "repos_url": "https://api.github.com/users/spble/repos",
      "events_url": "https://api.github.com/users/spble/events{/privacy}",
      "received_events_url": "https://api.github.com/users/spble/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-01T03:31:58Z",
    "updated_at": "2019-05-01T03:31:58Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Can you put this issue into a PR? It would make it much easier to review and add comments directly to this spec. Great work!\r\n\r\nThanks! I was originally going to do it as a PR, and happy to do so, I'm just not sure of a sensible place for the doc to reside. Open to suggestion!",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/488200539/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/488205914",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1011#issuecomment-488205914",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1011",
    "id": 488205914,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4ODIwNTkxNA==",
    "user": {
      "login": "Mikerah",
      "id": 4249799,
      "node_id": "MDQ6VXNlcjQyNDk3OTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4249799?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Mikerah",
      "html_url": "https://github.com/Mikerah",
      "followers_url": "https://api.github.com/users/Mikerah/followers",
      "following_url": "https://api.github.com/users/Mikerah/following{/other_user}",
      "gists_url": "https://api.github.com/users/Mikerah/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Mikerah/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Mikerah/subscriptions",
      "organizations_url": "https://api.github.com/users/Mikerah/orgs",
      "repos_url": "https://api.github.com/users/Mikerah/repos",
      "events_url": "https://api.github.com/users/Mikerah/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Mikerah/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-01T04:00:59Z",
    "updated_at": "2019-05-01T04:00:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "Perhaps, you can place it under `specs/validator`?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/488205914/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/488746472",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1011#issuecomment-488746472",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1011",
    "id": 488746472,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4ODc0NjQ3Mg==",
    "user": {
      "login": "GregTheGreek",
      "id": 16929357,
      "node_id": "MDQ6VXNlcjE2OTI5MzU3",
      "avatar_url": "https://avatars.githubusercontent.com/u/16929357?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/GregTheGreek",
      "html_url": "https://github.com/GregTheGreek",
      "followers_url": "https://api.github.com/users/GregTheGreek/followers",
      "following_url": "https://api.github.com/users/GregTheGreek/following{/other_user}",
      "gists_url": "https://api.github.com/users/GregTheGreek/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/GregTheGreek/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/GregTheGreek/subscriptions",
      "organizations_url": "https://api.github.com/users/GregTheGreek/orgs",
      "repos_url": "https://api.github.com/users/GregTheGreek/repos",
      "events_url": "https://api.github.com/users/GregTheGreek/events{/privacy}",
      "received_events_url": "https://api.github.com/users/GregTheGreek/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-02T16:46:24Z",
    "updated_at": "2019-05-02T16:46:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "Are we sure we want to be using `indexedAttestations`? rather `Attestation` or `AttestationData`",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/488746472/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/489210213",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1011#issuecomment-489210213",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1011",
    "id": 489210213,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4OTIxMDIxMw==",
    "user": {
      "login": "wemeetagain",
      "id": 1348242,
      "node_id": "MDQ6VXNlcjEzNDgyNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1348242?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wemeetagain",
      "html_url": "https://github.com/wemeetagain",
      "followers_url": "https://api.github.com/users/wemeetagain/followers",
      "following_url": "https://api.github.com/users/wemeetagain/following{/other_user}",
      "gists_url": "https://api.github.com/users/wemeetagain/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wemeetagain/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wemeetagain/subscriptions",
      "organizations_url": "https://api.github.com/users/wemeetagain/orgs",
      "repos_url": "https://api.github.com/users/wemeetagain/repos",
      "events_url": "https://api.github.com/users/wemeetagain/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wemeetagain/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-03T19:18:48Z",
    "updated_at": "2019-05-03T19:18:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think the `get_duties` call could/should be split out into proposer assignment and committee assignment.\r\n\r\nIt seems like the committee only needs to be checked once per epoch (and can be looked up one epoch beforehand), whereas the block production assignment must be checked every slot.\r\n\r\nI'm thinking something that mirrors the two functions here: https://github.com/ethereum/eth2.0-specs/blob/dev/specs/validator/0_beacon-chain-validator.md#validator-assignments",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/489210213/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/489237998",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1011#issuecomment-489237998",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1011",
    "id": 489237998,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4OTIzNzk5OA==",
    "user": {
      "login": "mpetrunic",
      "id": 8836210,
      "node_id": "MDQ6VXNlcjg4MzYyMTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8836210?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mpetrunic",
      "html_url": "https://github.com/mpetrunic",
      "followers_url": "https://api.github.com/users/mpetrunic/followers",
      "following_url": "https://api.github.com/users/mpetrunic/following{/other_user}",
      "gists_url": "https://api.github.com/users/mpetrunic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mpetrunic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mpetrunic/subscriptions",
      "organizations_url": "https://api.github.com/users/mpetrunic/orgs",
      "repos_url": "https://api.github.com/users/mpetrunic/repos",
      "events_url": "https://api.github.com/users/mpetrunic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mpetrunic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-03T20:59:17Z",
    "updated_at": "2019-05-03T20:59:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "How about introducing namespacing for methods (similar to eth1)?\r\n Since in the future there will be a lot more methods exposed from beacon node (for block explorers for example) and it will be hard to differentiate purpose.\r\nSome proposal would be:\r\n- beacon_get_client_version\r\n- beacon_get_genesis_time\r\n- beacon_get_syncing_status\r\n- validator_get_duties\r\n- validator_produce_block\r\n- validator_publish_block\r\n- validator_produce_attestation\r\n- validator_publish_attestation\r\n\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/489237998/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/489337757",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1011#issuecomment-489337757",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1011",
    "id": 489337757,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4OTMzNzc1Nw==",
    "user": {
      "login": "wemeetagain",
      "id": 1348242,
      "node_id": "MDQ6VXNlcjEzNDgyNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1348242?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wemeetagain",
      "html_url": "https://github.com/wemeetagain",
      "followers_url": "https://api.github.com/users/wemeetagain/followers",
      "following_url": "https://api.github.com/users/wemeetagain/following{/other_user}",
      "gists_url": "https://api.github.com/users/wemeetagain/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wemeetagain/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wemeetagain/subscriptions",
      "organizations_url": "https://api.github.com/users/wemeetagain/orgs",
      "repos_url": "https://api.github.com/users/wemeetagain/repos",
      "events_url": "https://api.github.com/users/wemeetagain/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wemeetagain/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-04T15:40:23Z",
    "updated_at": "2019-05-04T15:41:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "`produce_block` is a very high level method that incorporates many component pieces.\r\nDoes anyone have thoughts about exposing a lower level interface that allows the validator to create a block itself?\r\nLikewise with `produce_attestation` and letting the validator create an `Attestation` according to the steps here: https://github.com/ethereum/eth2.0-specs/blob/dev/specs/validator/0_beacon-chain-validator.md#construct-attestation",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/489337757/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/489786700",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1011#issuecomment-489786700",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1011",
    "id": 489786700,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4OTc4NjcwMA==",
    "user": {
      "login": "FrankSzendzielarz",
      "id": 33515470,
      "node_id": "MDQ6VXNlcjMzNTE1NDcw",
      "avatar_url": "https://avatars.githubusercontent.com/u/33515470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/FrankSzendzielarz",
      "html_url": "https://github.com/FrankSzendzielarz",
      "followers_url": "https://api.github.com/users/FrankSzendzielarz/followers",
      "following_url": "https://api.github.com/users/FrankSzendzielarz/following{/other_user}",
      "gists_url": "https://api.github.com/users/FrankSzendzielarz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/FrankSzendzielarz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/FrankSzendzielarz/subscriptions",
      "organizations_url": "https://api.github.com/users/FrankSzendzielarz/orgs",
      "repos_url": "https://api.github.com/users/FrankSzendzielarz/repos",
      "events_url": "https://api.github.com/users/FrankSzendzielarz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/FrankSzendzielarz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-06T21:31:25Z",
    "updated_at": "2019-05-06T21:31:25Z",
    "author_association": "MEMBER",
    "body": "Regarding the actual message format, I'd suggest only little things, like keeping consistent datatypes - so get syncing status would be more useful if it just returned the syncing status, which could include the info that it was not syncing, or simply return null. Returning false or object makes implementation a bit more complicated as you have to check if you get Bool or Object. \r\n\r\nAlso - I am not up to speed on the actual Eth 2.0 stuff  but are there cases for PUT as well as POST here?\r\n\r\nFinally, (referring to the other issue on the actual protocol), I'd suggest a  REST-like structure  of the messages and roles (eventually one node may serve multiple APIs not just this beacon one):\r\n\r\nhttps://beaconapi20190506111547.azurewebsites.net/\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/489786700/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/489892269",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1011#issuecomment-489892269",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1011",
    "id": 489892269,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4OTg5MjI2OQ==",
    "user": {
      "login": "spble",
      "id": 233229,
      "node_id": "MDQ6VXNlcjIzMzIyOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/233229?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/spble",
      "html_url": "https://github.com/spble",
      "followers_url": "https://api.github.com/users/spble/followers",
      "following_url": "https://api.github.com/users/spble/following{/other_user}",
      "gists_url": "https://api.github.com/users/spble/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/spble/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/spble/subscriptions",
      "organizations_url": "https://api.github.com/users/spble/orgs",
      "repos_url": "https://api.github.com/users/spble/repos",
      "events_url": "https://api.github.com/users/spble/events{/privacy}",
      "received_events_url": "https://api.github.com/users/spble/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-07T03:20:42Z",
    "updated_at": "2019-05-07T03:21:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Are we sure we want to be using `indexedAttestations`? rather `Attestation` or `AttestationData`\r\n\r\n@GregTheGreek - I think this was resolved on Gitter. `IndexedAttestation` is easiest because it also includes the size of the committee, which is necessary for formulating the custody bits.\r\n\r\nIt could also be possible for the `BeaconNode` to send `AttestationData`, then the `ValidatorClient` return `IndexedAttestation`, however to keep things simple and symmetric, we chose to just keep it is as an `IndexedAttestation` in both directions.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/489892269/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 1,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/489892919",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1011#issuecomment-489892919",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1011",
    "id": 489892919,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4OTg5MjkxOQ==",
    "user": {
      "login": "spble",
      "id": 233229,
      "node_id": "MDQ6VXNlcjIzMzIyOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/233229?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/spble",
      "html_url": "https://github.com/spble",
      "followers_url": "https://api.github.com/users/spble/followers",
      "following_url": "https://api.github.com/users/spble/following{/other_user}",
      "gists_url": "https://api.github.com/users/spble/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/spble/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/spble/subscriptions",
      "organizations_url": "https://api.github.com/users/spble/orgs",
      "repos_url": "https://api.github.com/users/spble/repos",
      "events_url": "https://api.github.com/users/spble/events{/privacy}",
      "received_events_url": "https://api.github.com/users/spble/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-07T03:24:26Z",
    "updated_at": "2019-05-07T03:24:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "> I think the `get_duties` call could/should be split out into proposer assignment and committee assignment.\r\n\r\n@wemeetagain - I think our plan is to check both pieces of information every slot, since both the committee and block production could theoretically change at any point due to forks.\r\n\r\n> produce_block is a very high level method that incorporates many component pieces.\r\nDoes anyone have thoughts about exposing a lower level interface that allows the validator to create a block itself?\r\n\r\nWe decided to keep the API minimal, and keep functionality in the `ValidatorClient` only to what is absolutely necessary. Your proposal to have lower level interfaces which allow the `ValidatorClient` to create blocks itself requires a great deal more functionality be moved into the `ValidatorClient`. So that we don't need to have all the heavy logic in the `ValidatorClient`, such as committee selection, etc., we decided to keep that all in the `BeaconNode`, and have it produce the block. That way the `ValidatorClient` only needs to check that it won't be slashed, then sign and return the data.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/489892919/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/489893062",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1011#issuecomment-489893062",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1011",
    "id": 489893062,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4OTg5MzA2Mg==",
    "user": {
      "login": "spble",
      "id": 233229,
      "node_id": "MDQ6VXNlcjIzMzIyOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/233229?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/spble",
      "html_url": "https://github.com/spble",
      "followers_url": "https://api.github.com/users/spble/followers",
      "following_url": "https://api.github.com/users/spble/following{/other_user}",
      "gists_url": "https://api.github.com/users/spble/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/spble/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/spble/subscriptions",
      "organizations_url": "https://api.github.com/users/spble/orgs",
      "repos_url": "https://api.github.com/users/spble/repos",
      "events_url": "https://api.github.com/users/spble/events{/privacy}",
      "received_events_url": "https://api.github.com/users/spble/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-07T03:25:20Z",
    "updated_at": "2019-05-07T03:25:20Z",
    "author_association": "CONTRIBUTOR",
    "body": "> How about introducing namespacing for methods (similar to eth1)?\r\n\r\n@mpetrunic - This is a fantastic idea. I will introduce namespacing in my next revision of this API proposal.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/489893062/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/489893387",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1011#issuecomment-489893387",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1011",
    "id": 489893387,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4OTg5MzM4Nw==",
    "user": {
      "login": "spble",
      "id": 233229,
      "node_id": "MDQ6VXNlcjIzMzIyOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/233229?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/spble",
      "html_url": "https://github.com/spble",
      "followers_url": "https://api.github.com/users/spble/followers",
      "following_url": "https://api.github.com/users/spble/following{/other_user}",
      "gists_url": "https://api.github.com/users/spble/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/spble/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/spble/subscriptions",
      "organizations_url": "https://api.github.com/users/spble/orgs",
      "repos_url": "https://api.github.com/users/spble/repos",
      "events_url": "https://api.github.com/users/spble/events{/privacy}",
      "received_events_url": "https://api.github.com/users/spble/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-07T03:27:26Z",
    "updated_at": "2019-05-07T03:27:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Regarding the actual message format, I'd suggest only little things, like keeping consistent datatypes - so get syncing status would be more useful if it just returned the syncing status, which could include the info that it was not syncing, or simply return null. Returning false or object makes implementation a bit more complicated as you have to check if you get Bool or Object.\r\n\r\n@FrankSzendzielarz - This is a good point, I will keep the data types of the return values consistent in my next revision of the proposal.\r\n\r\nI also agree that HTTP-REST is a better choice than JSON-RPC, which is discussed in more detail in #1012.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/489893387/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/489894932",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1011#issuecomment-489894932",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1011",
    "id": 489894932,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4OTg5NDkzMg==",
    "user": {
      "login": "spble",
      "id": 233229,
      "node_id": "MDQ6VXNlcjIzMzIyOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/233229?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/spble",
      "html_url": "https://github.com/spble",
      "followers_url": "https://api.github.com/users/spble/followers",
      "following_url": "https://api.github.com/users/spble/following{/other_user}",
      "gists_url": "https://api.github.com/users/spble/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/spble/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/spble/subscriptions",
      "organizations_url": "https://api.github.com/users/spble/orgs",
      "repos_url": "https://api.github.com/users/spble/repos",
      "events_url": "https://api.github.com/users/spble/events{/privacy}",
      "received_events_url": "https://api.github.com/users/spble/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-07T03:37:16Z",
    "updated_at": "2019-05-07T03:37:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Perhaps, you can place it under `specs/validator`?\r\n\r\nGood idea @Mikerah.\r\n\r\n@djrtwo - Do you think it makes sense to submit a PR with a Markdown RFC in `specs/validator`?\r\nIf so, I'll go ahead and merge the comments/discussions from this thread and #1012 into that.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/489894932/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/489914208",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1011#issuecomment-489914208",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1011",
    "id": 489914208,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4OTkxNDIwOA==",
    "user": {
      "login": "paulhauner",
      "id": 6660660,
      "node_id": "MDQ6VXNlcjY2NjA2NjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6660660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paulhauner",
      "html_url": "https://github.com/paulhauner",
      "followers_url": "https://api.github.com/users/paulhauner/followers",
      "following_url": "https://api.github.com/users/paulhauner/following{/other_user}",
      "gists_url": "https://api.github.com/users/paulhauner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paulhauner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paulhauner/subscriptions",
      "organizations_url": "https://api.github.com/users/paulhauner/orgs",
      "repos_url": "https://api.github.com/users/paulhauner/repos",
      "events_url": "https://api.github.com/users/paulhauner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paulhauner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-07T05:30:14Z",
    "updated_at": "2019-05-07T05:30:14Z",
    "author_association": "MEMBER",
    "body": "> > How about introducing namespacing for methods (similar to eth1)?\r\n> \r\n> @mpetrunic - This is a fantastic idea. I will introduce namespacing in my next revision of this API proposal.\r\n\r\nIf we roll with REST-HTTP (#1012) we can achieve this with urls (e.g., `/beacon/foo`, `/validator/bar`).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/489914208/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/489920256",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1011#issuecomment-489920256",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1011",
    "id": 489920256,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4OTkyMDI1Ng==",
    "user": {
      "login": "FrankSzendzielarz",
      "id": 33515470,
      "node_id": "MDQ6VXNlcjMzNTE1NDcw",
      "avatar_url": "https://avatars.githubusercontent.com/u/33515470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/FrankSzendzielarz",
      "html_url": "https://github.com/FrankSzendzielarz",
      "followers_url": "https://api.github.com/users/FrankSzendzielarz/followers",
      "following_url": "https://api.github.com/users/FrankSzendzielarz/following{/other_user}",
      "gists_url": "https://api.github.com/users/FrankSzendzielarz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/FrankSzendzielarz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/FrankSzendzielarz/subscriptions",
      "organizations_url": "https://api.github.com/users/FrankSzendzielarz/orgs",
      "repos_url": "https://api.github.com/users/FrankSzendzielarz/repos",
      "events_url": "https://api.github.com/users/FrankSzendzielarz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/FrankSzendzielarz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-07T06:01:51Z",
    "updated_at": "2019-05-07T07:23:55Z",
    "author_association": "MEMBER",
    "body": "@spble @djrtwo \"Do you think it makes sense to submit a PR with a Markdown RFC in specs/validator?\r\nIf so, I'll go ahead and merge the comments/discussions from this thread and #1012 into that.\" \r\n\r\nLet me know but if you want I can fine tune the swagger and give you the auto generated MD from the swagger codegen. Have a look at the docs folder in the golang zip in #1012 if it suits. (or the attachment here)\r\n[docs.zip](https://github.com/ethereum/eth2.0-specs/files/3151256/docs.zip)\r\n\r\nIn fact, @djrtwo if the Swagger http approach works, could do *all* specs as actual code in a test web first, and auto-gen the MD on the basis of the code.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/489920256/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/489921249",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1011#issuecomment-489921249",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1011",
    "id": 489921249,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4OTkyMTI0OQ==",
    "user": {
      "login": "FrankSzendzielarz",
      "id": 33515470,
      "node_id": "MDQ6VXNlcjMzNTE1NDcw",
      "avatar_url": "https://avatars.githubusercontent.com/u/33515470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/FrankSzendzielarz",
      "html_url": "https://github.com/FrankSzendzielarz",
      "followers_url": "https://api.github.com/users/FrankSzendzielarz/followers",
      "following_url": "https://api.github.com/users/FrankSzendzielarz/following{/other_user}",
      "gists_url": "https://api.github.com/users/FrankSzendzielarz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/FrankSzendzielarz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/FrankSzendzielarz/subscriptions",
      "organizations_url": "https://api.github.com/users/FrankSzendzielarz/orgs",
      "repos_url": "https://api.github.com/users/FrankSzendzielarz/repos",
      "events_url": "https://api.github.com/users/FrankSzendzielarz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/FrankSzendzielarz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-07T06:06:24Z",
    "updated_at": "2019-05-07T06:06:24Z",
    "author_association": "MEMBER",
    "body": "@mpetrunic eg https://beaconapi20190506111547.azurewebsites.net/swagger/ui/index 😀",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/489921249/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/489950174",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1011#issuecomment-489950174",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1011",
    "id": 489950174,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4OTk1MDE3NA==",
    "user": {
      "login": "mpetrunic",
      "id": 8836210,
      "node_id": "MDQ6VXNlcjg4MzYyMTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8836210?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mpetrunic",
      "html_url": "https://github.com/mpetrunic",
      "followers_url": "https://api.github.com/users/mpetrunic/followers",
      "following_url": "https://api.github.com/users/mpetrunic/following{/other_user}",
      "gists_url": "https://api.github.com/users/mpetrunic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mpetrunic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mpetrunic/subscriptions",
      "organizations_url": "https://api.github.com/users/mpetrunic/orgs",
      "repos_url": "https://api.github.com/users/mpetrunic/repos",
      "events_url": "https://api.github.com/users/mpetrunic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mpetrunic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-07T06:56:07Z",
    "updated_at": "2019-05-07T06:56:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "> @mpetrunic eg https://beaconapi20190506111547.azurewebsites.net/swagger/ui/index\r\n\r\nI would pull validator endpoints under root `/validator` (remove beacon prefix). Also block and attestation endpoints should go under validator root. Mainly because those routes are not going to be used by general public (etherjs, block explorers etc) so there is no need for people to scroll trough them. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/489950174/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/489963931",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1011#issuecomment-489963931",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1011",
    "id": 489963931,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4OTk2MzkzMQ==",
    "user": {
      "login": "FrankSzendzielarz",
      "id": 33515470,
      "node_id": "MDQ6VXNlcjMzNTE1NDcw",
      "avatar_url": "https://avatars.githubusercontent.com/u/33515470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/FrankSzendzielarz",
      "html_url": "https://github.com/FrankSzendzielarz",
      "followers_url": "https://api.github.com/users/FrankSzendzielarz/followers",
      "following_url": "https://api.github.com/users/FrankSzendzielarz/following{/other_user}",
      "gists_url": "https://api.github.com/users/FrankSzendzielarz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/FrankSzendzielarz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/FrankSzendzielarz/subscriptions",
      "organizations_url": "https://api.github.com/users/FrankSzendzielarz/orgs",
      "repos_url": "https://api.github.com/users/FrankSzendzielarz/repos",
      "events_url": "https://api.github.com/users/FrankSzendzielarz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/FrankSzendzielarz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-07T07:18:19Z",
    "updated_at": "2019-05-07T07:20:02Z",
    "author_association": "MEMBER",
    "body": "@mpetrunic I can change that to reflect what is agreed on here. I am not familiar with the actual spec but it strikes me that for at least testnets you will have single implementations running either as Beacon or Validator - in which case I think the above API is the api the Beacon would be offering. If this is the case , I'd say the beacon prefix should remain in place. (but yeah - whatever is appropriate)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/489963931/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/489980984",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1011#issuecomment-489980984",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1011",
    "id": 489980984,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4OTk4MDk4NA==",
    "user": {
      "login": "mpetrunic",
      "id": 8836210,
      "node_id": "MDQ6VXNlcjg4MzYyMTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8836210?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mpetrunic",
      "html_url": "https://github.com/mpetrunic",
      "followers_url": "https://api.github.com/users/mpetrunic/followers",
      "following_url": "https://api.github.com/users/mpetrunic/following{/other_user}",
      "gists_url": "https://api.github.com/users/mpetrunic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mpetrunic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mpetrunic/subscriptions",
      "organizations_url": "https://api.github.com/users/mpetrunic/orgs",
      "repos_url": "https://api.github.com/users/mpetrunic/repos",
      "events_url": "https://api.github.com/users/mpetrunic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mpetrunic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-07T08:13:10Z",
    "updated_at": "2019-05-07T08:13:10Z",
    "author_association": "CONTRIBUTOR",
    "body": "@FrankSzendzielarz Let me give you some example of what I meant:\r\nGET /beacon/Block - should return latest(head) beacon block \r\nGET /validator/Block - should produce block without signature\r\n\r\nCurrently only these methods belong in beacon root :\r\nGET /beacon/client/version\r\nGET /beacon/client/genesistime\r\nGET /beacon/client/syncstatus",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/489980984/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/489984758",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1011#issuecomment-489984758",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1011",
    "id": 489984758,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4OTk4NDc1OA==",
    "user": {
      "login": "FrankSzendzielarz",
      "id": 33515470,
      "node_id": "MDQ6VXNlcjMzNTE1NDcw",
      "avatar_url": "https://avatars.githubusercontent.com/u/33515470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/FrankSzendzielarz",
      "html_url": "https://github.com/FrankSzendzielarz",
      "followers_url": "https://api.github.com/users/FrankSzendzielarz/followers",
      "following_url": "https://api.github.com/users/FrankSzendzielarz/following{/other_user}",
      "gists_url": "https://api.github.com/users/FrankSzendzielarz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/FrankSzendzielarz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/FrankSzendzielarz/subscriptions",
      "organizations_url": "https://api.github.com/users/FrankSzendzielarz/orgs",
      "repos_url": "https://api.github.com/users/FrankSzendzielarz/repos",
      "events_url": "https://api.github.com/users/FrankSzendzielarz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/FrankSzendzielarz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-07T08:24:56Z",
    "updated_at": "2019-05-07T08:24:56Z",
    "author_association": "MEMBER",
    "body": "@mpetrunic Ah I see. Yes that makes sense. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/489984758/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/490467098",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1011#issuecomment-490467098",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1011",
    "id": 490467098,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5MDQ2NzA5OA==",
    "user": {
      "login": "mpetrunic",
      "id": 8836210,
      "node_id": "MDQ6VXNlcjg4MzYyMTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8836210?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mpetrunic",
      "html_url": "https://github.com/mpetrunic",
      "followers_url": "https://api.github.com/users/mpetrunic/followers",
      "following_url": "https://api.github.com/users/mpetrunic/following{/other_user}",
      "gists_url": "https://api.github.com/users/mpetrunic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mpetrunic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mpetrunic/subscriptions",
      "organizations_url": "https://api.github.com/users/mpetrunic/orgs",
      "repos_url": "https://api.github.com/users/mpetrunic/repos",
      "events_url": "https://api.github.com/users/mpetrunic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mpetrunic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-08T12:31:21Z",
    "updated_at": "2019-05-08T12:31:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "@spble During implementation I noticed some \"bottlenecks\". I think we should add method `validator_get_validator_index(publicKey)` and in `get_duties` we expect validatorIndex instead of public key. \r\nGetting index from public key is relatively expensive operation as it requires O(n) search trough validator registry (> 65536 records). Of course beacon chain could cache publicKey<->index mapping but still it probably makes much more sense for validator to obain his index on start and store it in memory.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/490467098/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/491151300",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1011#issuecomment-491151300",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1011",
    "id": 491151300,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5MTE1MTMwMA==",
    "user": {
      "login": "paulhauner",
      "id": 6660660,
      "node_id": "MDQ6VXNlcjY2NjA2NjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6660660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paulhauner",
      "html_url": "https://github.com/paulhauner",
      "followers_url": "https://api.github.com/users/paulhauner/followers",
      "following_url": "https://api.github.com/users/paulhauner/following{/other_user}",
      "gists_url": "https://api.github.com/users/paulhauner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paulhauner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paulhauner/subscriptions",
      "organizations_url": "https://api.github.com/users/paulhauner/orgs",
      "repos_url": "https://api.github.com/users/paulhauner/repos",
      "events_url": "https://api.github.com/users/paulhauner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paulhauner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-10T04:27:42Z",
    "updated_at": "2019-05-10T04:27:42Z",
    "author_association": "MEMBER",
    "body": "@mpetrunic good point! I have two potentially interesting thoughts around this:\r\n\r\n### Searching for pubkeys in the validator registry\r\nLighthouse also found this `O(n)` search problem whilst bench-marking deposits processing at large numbers of validators (300k, 4M). When processing a `Deposit`, you need to do the same search through the `validator_registry` to see if the validator already exists. We found this was massively blowing-up our block processing times so we ended up including a [public key cache](https://github.com/sigp/lighthouse/blob/master/eth2/types/src/beacon_state/pubkey_cache.rs) with our `BeaconState`.\r\n\r\nAs a result, we have a map hanging around to do `O(1)` lookups of `pubkey -> validator index` which suits this purpose perfectly.\r\n\r\n### ID'ing validators via pubkey vs. validator index\r\n\r\nThere is an argument that we could use the `validator_index` as a canonical reference to a specific validator, but I'm a little cautious of it because it seems like we might face edge-cases or design decisions that break the invariant that it's impossible for the same `validator_index` to point to a different `pubkey`.\r\n\r\nGiven that a `pubkey` is a really solid unique-ID for a validator, I'm tempted to rely upon it. IIRC @djrtwo was leaning towards `validator_index` so maybe he'd like to throw a hat in the ring.\r\n\r\nOf course, I'm keen to hear other's thoughts too.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/491151300/reactions",
      "total_count": 2,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 1
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/491813460",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1011#issuecomment-491813460",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1011",
    "id": 491813460,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5MTgxMzQ2MA==",
    "user": {
      "login": "spble",
      "id": 233229,
      "node_id": "MDQ6VXNlcjIzMzIyOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/233229?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/spble",
      "html_url": "https://github.com/spble",
      "followers_url": "https://api.github.com/users/spble/followers",
      "following_url": "https://api.github.com/users/spble/following{/other_user}",
      "gists_url": "https://api.github.com/users/spble/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/spble/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/spble/subscriptions",
      "organizations_url": "https://api.github.com/users/spble/orgs",
      "repos_url": "https://api.github.com/users/spble/repos",
      "events_url": "https://api.github.com/users/spble/events{/privacy}",
      "received_events_url": "https://api.github.com/users/spble/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-13T13:03:58Z",
    "updated_at": "2019-05-13T13:03:58Z",
    "author_association": "CONTRIBUTOR",
    "body": "Since consensus in #1012 was to use a REST API, I have written up a new proposal using the OpenAPI specification. I have tried to incorporate all the suggestions in this thread, though the identification of validators via pubkey vs index remains an open question; I have left it as pubkey for now.\r\n\r\nI've opened a PR #1069 which contains the proposed spec, so I will close this issue for now and we can discuss/refine the spec further on the PR.\r\n\r\nA 'live' version of the API spec can be [viewed on SwaggerHub](https://app.swaggerhub.com/apis/spble/beacon_node_api_for_validator/0.1).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/491813460/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
