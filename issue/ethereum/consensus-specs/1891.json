{
  "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1891",
  "repository_url": "https://api.github.com/repos/ethereum/consensus-specs",
  "labels_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1891/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1891/comments",
  "events_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1891/events",
  "html_url": "https://github.com/ethereum/consensus-specs/issues/1891",
  "id": 638109723,
  "node_id": "MDU6SXNzdWU2MzgxMDk3MjM=",
  "number": 1891,
  "title": "on_block(b) and (store) progress",
  "user": {
    "login": "franck44",
    "id": 14901362,
    "node_id": "MDQ6VXNlcjE0OTAxMzYy",
    "avatar_url": "https://avatars.githubusercontent.com/u/14901362?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/franck44",
    "html_url": "https://github.com/franck44",
    "followers_url": "https://api.github.com/users/franck44/followers",
    "following_url": "https://api.github.com/users/franck44/following{/other_user}",
    "gists_url": "https://api.github.com/users/franck44/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/franck44/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/franck44/subscriptions",
    "organizations_url": "https://api.github.com/users/franck44/orgs",
    "repos_url": "https://api.github.com/users/franck44/repos",
    "events_url": "https://api.github.com/users/franck44/events{/privacy}",
    "received_events_url": "https://api.github.com/users/franck44/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1324776822,
      "node_id": "MDU6TGFiZWwxMzI0Nzc2ODIy",
      "url": "https://api.github.com/repos/ethereum/consensus-specs/labels/scope:fork-choice",
      "name": "scope:fork-choice",
      "color": "81C7D4",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": {
    "login": "adiasg",
    "id": 25324105,
    "node_id": "MDQ6VXNlcjI1MzI0MTA1",
    "avatar_url": "https://avatars.githubusercontent.com/u/25324105?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/adiasg",
    "html_url": "https://github.com/adiasg",
    "followers_url": "https://api.github.com/users/adiasg/followers",
    "following_url": "https://api.github.com/users/adiasg/following{/other_user}",
    "gists_url": "https://api.github.com/users/adiasg/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/adiasg/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/adiasg/subscriptions",
    "organizations_url": "https://api.github.com/users/adiasg/orgs",
    "repos_url": "https://api.github.com/users/adiasg/repos",
    "events_url": "https://api.github.com/users/adiasg/events{/privacy}",
    "received_events_url": "https://api.github.com/users/adiasg/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "adiasg",
      "id": 25324105,
      "node_id": "MDQ6VXNlcjI1MzI0MTA1",
      "avatar_url": "https://avatars.githubusercontent.com/u/25324105?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adiasg",
      "html_url": "https://github.com/adiasg",
      "followers_url": "https://api.github.com/users/adiasg/followers",
      "following_url": "https://api.github.com/users/adiasg/following{/other_user}",
      "gists_url": "https://api.github.com/users/adiasg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adiasg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adiasg/subscriptions",
      "organizations_url": "https://api.github.com/users/adiasg/orgs",
      "repos_url": "https://api.github.com/users/adiasg/repos",
      "events_url": "https://api.github.com/users/adiasg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adiasg/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 8,
  "created_at": "2020-06-13T06:52:32Z",
  "updated_at": "2023-12-27T01:10:28Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "\r\n#### Context\r\nThis [commit](https://github.com/ethereum/eth2.0-specs/commit/74c900f814b75d026699d92c51b8f198979a9a93) adds a condition to guarantee that in `state_transition(state,block)`,  `state.slot < block.slot`.\r\nIt is related to the [spec update v0.11.3](https://github.com/ethereum/eth2.0-specs/releases/tag/v0.11.3).\r\n\r\nIt is supposed to fix a problem \"process without progress\". \r\nIt is unclear to me what it actually fixes.\r\n\r\n#### Progress with `state_transition`\r\nAs far as I understand, the fix guarantees that, for a sequence of state_transitions, the slot number progresses. In other words it prevents executions like (I write `s - b -> s'` for `s' = state_transition(s,b)`)\r\n\r\n``` s0 - b0 -> s1 - b1 -> s2 ... ```\r\n\r\nwith `b0.slot == b1.slot == b2.slot`.\r\n\r\nThis seems to assume that progress is made by executing `state_transition` successively, and each time using the previously computed state.\r\n\r\n#### Progress with `on_block`\r\n\r\nHowever this does not seem to align with how `state_transition` is used in the Beacon chain.\r\nAs far as I can tell, `state_transition` is only called in `on_block(b)` with `b` a block.\r\nIn `on_block(b)`, the `pre_state` that `b` claims to attach to is computed.\r\nAnd later `state_transition(pre_state,b)` is called.\r\n\r\nSo if I am correct, nothing prevents me from calling `on_block(b)` many times with the same block.\r\nThis will trigger a computation with `state_transition` to compute the successor state of `pre_state` with `b` ,  `state_transition(pre_state,b)`.\r\nNow assume the store is `S`, and `b` has already been added to the store (it is in `S.blocks`).\r\nThere seems to be a possibility of an infinite sequence of `on_block(b)` without the store being modified (because `b` is already in):\r\n\r\n``` S - on_block(b) -> S - on_block(b) -> S ..... ```\r\n\r\n#### Security vulnerability\r\n\r\nAn exploit may be a DoS attack by sending the same block `b` many many times.\r\n\r\n#### How the issues can be mitigated\r\n\r\nFirst the change in the  [commit](https://github.com/ethereum/eth2.0-specs/commit/74c900f814b75d026699d92c51b8f198979a9a93) that adds a condition to guarantee that in `state_transition(state,block)`,  `state.slot < block.slot` may be pushed upwards to `on_block` by requesting that `pre_state.slot < b.slot` in the pre-conditions of this function. This avoids the needs for all the `asserts` on the `slot` number that are below `on_block` (a formal proof can be established using our Dafny specification of the eth2,0 specs).\r\n\r\nSecond, to avoid the possibility of processing the same block again and again in `on_block` without progress on the store, we may require that the block `b` (or its hash) is not already in the store's keys, and add the pre-condition\r\n\r\n``` \r\non_block(b)\r\n   requires hash_tree_root(b) !in S\r\n```\r\n\r\nto `on_block(b)`.\r\n\r\n#### How the issues was uncovered\r\n\r\nIssue was uncovered while specifying and proving some invariants on the [Dafny specification](https://github.com/PegaSysEng/eth2.0-dafny) of the Eth2.0 specs.\r\n\r\n\r\n\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1891/reactions",
    "total_count": 1,
    "+1": 1,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1891/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/643650398",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1891#issuecomment-643650398",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1891",
    "id": 643650398,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0MzY1MDM5OA==",
    "user": {
      "login": "ericsson49",
      "id": 10426192,
      "node_id": "MDQ6VXNlcjEwNDI2MTky",
      "avatar_url": "https://avatars.githubusercontent.com/u/10426192?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ericsson49",
      "html_url": "https://github.com/ericsson49",
      "followers_url": "https://api.github.com/users/ericsson49/followers",
      "following_url": "https://api.github.com/users/ericsson49/following{/other_user}",
      "gists_url": "https://api.github.com/users/ericsson49/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ericsson49/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ericsson49/subscriptions",
      "organizations_url": "https://api.github.com/users/ericsson49/orgs",
      "repos_url": "https://api.github.com/users/ericsson49/repos",
      "events_url": "https://api.github.com/users/ericsson49/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ericsson49/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-13T17:04:48Z",
    "updated_at": "2020-06-13T17:04:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "`state_transition` is also called by `compute_new_state_root` which specifies how a validator should compute state_root. So, it also should be updated, if `pre_state.slot < b.slot` moved to `on_blocks`.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/643650398/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/643665471",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1891#issuecomment-643665471",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1891",
    "id": 643665471,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0MzY2NTQ3MQ==",
    "user": {
      "login": "ericsson49",
      "id": 10426192,
      "node_id": "MDQ6VXNlcjEwNDI2MTky",
      "avatar_url": "https://avatars.githubusercontent.com/u/10426192?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ericsson49",
      "html_url": "https://github.com/ericsson49",
      "followers_url": "https://api.github.com/users/ericsson49/followers",
      "following_url": "https://api.github.com/users/ericsson49/following{/other_user}",
      "gists_url": "https://api.github.com/users/ericsson49/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ericsson49/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ericsson49/subscriptions",
      "organizations_url": "https://api.github.com/users/ericsson49/orgs",
      "repos_url": "https://api.github.com/users/ericsson49/repos",
      "events_url": "https://api.github.com/users/ericsson49/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ericsson49/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-13T19:11:48Z",
    "updated_at": "2020-06-13T19:11:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "As for preventing DoS attacks, I think it's better done on the implementation level.\r\n\r\nThere are three kind of outcomes of `on_block` (and `on_attestation`): valid, invalid or 'early'. The latter happens when a block arrived before its slot (e.g. because of clock disparities) or before its parent (can be missed for some reason, but can arrive later via a different route or requested).\r\n\r\nSo, `hash_tree_root(b) !in store.blocks` check would prevent DoS-attacks with blocks recognized as valid or invalid, however, it's a more tricky with 'early' blocks. E.g. one can send lots of blocks with some random `parent_root`. However, they cannot be always immediately classified as valid/invalid, since a block, referenced by the `parent_root` may arrive in future.\r\nThus, an implementer should maintain a buffer of blocks (and attestations), awaiting some other event to happen (a particular slot or a block with a particular root to arrive).\r\nIt also would be dangerous to mark 'early' blocks/attestation as invalid and be persistent in doing so (i.e. remember their status in some store), as message reordering is possible, and 'early' blocks/attestations which later become valid are quite possible.\r\n\r\nSo, handling of duplicate blocks (and attestations) is somewhat non-trivial in practice and may differ from implementation to implementation (e.g. 'early' blocks/attestation queues can have different sizes or a policy to choose a block/attestation to drop when such a queue becomes to big can differ).\r\n\r\nTherefore, I believe adding DoS preventing checks would just complicate the specs and perhaps may restrict implementers in how they implement DoS counter-measures. However, it would be definitely useful to clarify such risks and aspects of block/attestation processing in a 'recommendation' section (like [p2p-interface.md](https://github.com/ethereum/eth2.0-specs/blob/dev/specs/phase0/p2p-interface.md) uses MAY to suggest a reasonable behavior).\r\n\r\nIn theory, it would be great to specify exactly how to handle various kinds of blocks and attestations in various circumstances, however, I expect it's extremely difficult to do and hardly ever possible to test/verify.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/643665471/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/643668365",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1891#issuecomment-643668365",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1891",
    "id": 643668365,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0MzY2ODM2NQ==",
    "user": {
      "login": "ericsson49",
      "id": 10426192,
      "node_id": "MDQ6VXNlcjEwNDI2MTky",
      "avatar_url": "https://avatars.githubusercontent.com/u/10426192?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ericsson49",
      "html_url": "https://github.com/ericsson49",
      "followers_url": "https://api.github.com/users/ericsson49/followers",
      "following_url": "https://api.github.com/users/ericsson49/following{/other_user}",
      "gists_url": "https://api.github.com/users/ericsson49/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ericsson49/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ericsson49/subscriptions",
      "organizations_url": "https://api.github.com/users/ericsson49/orgs",
      "repos_url": "https://api.github.com/users/ericsson49/repos",
      "events_url": "https://api.github.com/users/ericsson49/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ericsson49/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-13T19:37:19Z",
    "updated_at": "2020-06-13T19:37:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "There is also one more tricky case. The fork choice allows a situation, when a block's root is in `store.blocks`, but it's not in `store.block_states`, e.g. if a block has an invalid signature.\r\nThis is an inconsistent state of `Store` (I don't believe it's dangerous, though I think an attestation with `target.root` referencing such invalid block may be accepted by fork choice in some cases).\r\nIn practice, implementers are likely to implement `on_block` as a transaction, with 'Store' changes rolled back, if a block is invalid. So, the inconsistency won't be possible, in such case.\r\nThis is another reason I do not believe the problem is really dangerous (though I've opened an [issue](https://github.com/ethereum/eth2.0-specs/issues/1409) about that).\r\n\r\nHowever, such transactional semantic of `on_block` conflicts with the `hash_tree_root(block) in store.blocks` check, if the block under consideration is invalid, as store updates should be rolled back.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/643668365/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/644332501",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1891#issuecomment-644332501",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1891",
    "id": 644332501,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0NDMzMjUwMQ==",
    "user": {
      "login": "adiasg",
      "id": 25324105,
      "node_id": "MDQ6VXNlcjI1MzI0MTA1",
      "avatar_url": "https://avatars.githubusercontent.com/u/25324105?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adiasg",
      "html_url": "https://github.com/adiasg",
      "followers_url": "https://api.github.com/users/adiasg/followers",
      "following_url": "https://api.github.com/users/adiasg/following{/other_user}",
      "gists_url": "https://api.github.com/users/adiasg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adiasg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adiasg/subscriptions",
      "organizations_url": "https://api.github.com/users/adiasg/orgs",
      "repos_url": "https://api.github.com/users/adiasg/repos",
      "events_url": "https://api.github.com/users/adiasg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adiasg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-15T19:28:28Z",
    "updated_at": "2020-06-15T19:28:28Z",
    "author_association": "MEMBER",
    "body": "> @franck44: \r\nIt is supposed to fix a problem \"process without progress\".\r\nIt is unclear to me what it actually fixes.\r\n\r\nPrior to v0.11.3, a malicious proposer for slot `X` could make two blocks `b1` and `b2`, with `b2.parent_root` as the root of `b1` and `b2.state_root` as the state root of `state_transition(pre_state_slot_X, b1)`. This can cause a chain split between clients if they handle this situation in different ways. For example, one client may not detect this situation and apply both blocks in its chain, while another client may detect that the slot number is replayed and reject `b2`.  These two clients will now differ in their chain heads, leading to a chain split in the network.\r\n\r\nv0.11.3 explicitly disallows this situation by forcing all clients to reject the second block with the same slot, preventing it from being applied in the same chain. \r\n\r\n---\r\n\r\n> @franck44: \r\nSo if I am correct, nothing prevents me from calling on_block(b) many times with the same block.\r\n\r\nAs far as the beacon chain fork choice is concerned, that is perfectly fine behavior. The purpose of the specification is to define the behavior of clients, and not exactly to provide an optimized version of a well-engineered client. This is in the interest of maintaining the simplicity of the specification.\r\n\r\nSpecifically in this case, since `on_block(b)` is an idempotent operation, an optimized client can choose to not re-run `on_block(b)`. Note that this still maintains the exact same behavior (w.r.t. the `state` and `store`) as the specification!",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/644332501/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/644430270",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1891#issuecomment-644430270",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1891",
    "id": 644430270,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0NDQzMDI3MA==",
    "user": {
      "login": "franck44",
      "id": 14901362,
      "node_id": "MDQ6VXNlcjE0OTAxMzYy",
      "avatar_url": "https://avatars.githubusercontent.com/u/14901362?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/franck44",
      "html_url": "https://github.com/franck44",
      "followers_url": "https://api.github.com/users/franck44/followers",
      "following_url": "https://api.github.com/users/franck44/following{/other_user}",
      "gists_url": "https://api.github.com/users/franck44/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/franck44/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/franck44/subscriptions",
      "organizations_url": "https://api.github.com/users/franck44/orgs",
      "repos_url": "https://api.github.com/users/franck44/repos",
      "events_url": "https://api.github.com/users/franck44/events{/privacy}",
      "received_events_url": "https://api.github.com/users/franck44/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-15T22:53:21Z",
    "updated_at": "2020-06-15T22:53:21Z",
    "author_association": "NONE",
    "body": "> Prior to v0.11.3, a malicious proposer for slot X could make two blocks b1 and b2, with \r\n\r\n> b2.parent_root as the root of b1 and b2.state_root as the state root of state_transition(pre_state_slot_X, b1). This can cause a chain split between clients if they handle this situation in different ways. For example, one client may not detect this situation and apply both blocks in its chain, while another client may detect that the slot number is replayed and reject b2. These two clients will now differ in their chain heads, leading to a chain split in the network.\r\n> \r\n> v0.11.3 explicitly disallows this situation by forcing all clients to reject the second block with the same slot, preventing it from being applied in the same chain.\r\n\r\nOk thanks @adiasg.\r\nThis is an example of a scenario that is classified as bad, and the v0.11.3 is supposed to fix this *particular* problem.\r\nIt would be nice to have a more logical specification of the properties the beacon chain should satisfy.\r\nThe result of this fix is that the scenario you exemplified (with b1 ad b2) is not possible any more.\r\nBut what property (or invariant) should be maintain?\r\nIs it that the beacon chain is always ... a chain [of blocks]? And if yes, we may try to formulate a logical statement that captures this property.\r\n\r\n> Specifically in this case, since on_block(b) is an idempotent operation, an optimized client can choose to not re-run on_block(b). Note that this still maintains the exact same behavior (w.r.t. the state and store) as the specification!\r\n\r\nThis seems a bit optimistic to me to delegate choices to clients: it is not obvious that playing the same block will result in the store not being modified. So clients should not rely on this, and probably not have infer that at all.\r\nThe fact that it maintains the same behaviours is also not trivial at all (at least for me).\r\n\r\nThe specs are sometimes soft and would probably benefit from more rigour and formal treatment.\r\n ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/644430270/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/645083352",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1891#issuecomment-645083352",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1891",
    "id": 645083352,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0NTA4MzM1Mg==",
    "user": {
      "login": "franck44",
      "id": 14901362,
      "node_id": "MDQ6VXNlcjE0OTAxMzYy",
      "avatar_url": "https://avatars.githubusercontent.com/u/14901362?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/franck44",
      "html_url": "https://github.com/franck44",
      "followers_url": "https://api.github.com/users/franck44/followers",
      "following_url": "https://api.github.com/users/franck44/following{/other_user}",
      "gists_url": "https://api.github.com/users/franck44/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/franck44/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/franck44/subscriptions",
      "organizations_url": "https://api.github.com/users/franck44/orgs",
      "repos_url": "https://api.github.com/users/franck44/repos",
      "events_url": "https://api.github.com/users/franck44/events{/privacy}",
      "received_events_url": "https://api.github.com/users/franck44/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-17T00:49:12Z",
    "updated_at": "2020-06-17T00:49:12Z",
    "author_association": "NONE",
    "body": "@adiasg \r\n\r\n> Prior to v0.11.3, a malicious proposer for slot X could make two blocks b1 and b2, with b2.parent_root as the root of b1 and b2.state_root as the state root of state_transition(pre_state_slot_X, b1). This can cause a chain split between clients if they handle this situation in different ways. For example, one client may not detect this situation and apply both blocks in its chain, while another client may detect that the slot number is replayed and reject b2. These two clients will now differ in their chain heads, leading to a chain split in the network.\r\n\r\n> v0.11.3 explicitly disallows this situation by forcing all clients to reject the second block with the same slot, preventing it from being applied in the same chain.\r\n\r\n\r\nIf I understand well, a desirable property of the chain is that, the slot numbers of the ancestors of any block, should form a total strict order (no two blocks with the same slot number).\r\n\r\nOur work on a formal specification of the Eth2.0 specs may provide some insight into this problem. We have formally proved this property [here](https://github.com/PegaSysEng/eth2.0-dafny/blob/546c2d9974aff7cd7c99aa2772c6ff95f09d5b4f/src/dafny/beacon/ForkChoice.dfy#L303).\r\n\r\nThis goes beyond the informal argument that such a situation may not occur after the fix of v0.11.3, as it provides a formal, logical, machine-checkable proof of a well-specified property (invariant). ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/645083352/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/645544403",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1891#issuecomment-645544403",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1891",
    "id": 645544403,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0NTU0NDQwMw==",
    "user": {
      "login": "adiasg",
      "id": 25324105,
      "node_id": "MDQ6VXNlcjI1MzI0MTA1",
      "avatar_url": "https://avatars.githubusercontent.com/u/25324105?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adiasg",
      "html_url": "https://github.com/adiasg",
      "followers_url": "https://api.github.com/users/adiasg/followers",
      "following_url": "https://api.github.com/users/adiasg/following{/other_user}",
      "gists_url": "https://api.github.com/users/adiasg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adiasg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adiasg/subscriptions",
      "organizations_url": "https://api.github.com/users/adiasg/orgs",
      "repos_url": "https://api.github.com/users/adiasg/repos",
      "events_url": "https://api.github.com/users/adiasg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adiasg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-17T18:27:14Z",
    "updated_at": "2020-06-17T18:27:14Z",
    "author_association": "MEMBER",
    "body": "@franck44 Thanks for the Dafny proof! \r\n\r\nFormal verification of the spec is definitely important, and Runtime Verification has been helping us with this. In fact, the bug that v0.11.3 fixes was found through their verification efforts! The Coq and K models that have been produced will be made public when they are ready to be shared.\r\n\r\nWhile it is desirable to have each and every modification to the spec to be incorporated and verified through a formal model, this introduces a large overhead on the spec writers. For this reason, the spec repository will usually be upstream from the formal models.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/645544403/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/645691379",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1891#issuecomment-645691379",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1891",
    "id": 645691379,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0NTY5MTM3OQ==",
    "user": {
      "login": "franck44",
      "id": 14901362,
      "node_id": "MDQ6VXNlcjE0OTAxMzYy",
      "avatar_url": "https://avatars.githubusercontent.com/u/14901362?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/franck44",
      "html_url": "https://github.com/franck44",
      "followers_url": "https://api.github.com/users/franck44/followers",
      "following_url": "https://api.github.com/users/franck44/following{/other_user}",
      "gists_url": "https://api.github.com/users/franck44/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/franck44/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/franck44/subscriptions",
      "organizations_url": "https://api.github.com/users/franck44/orgs",
      "repos_url": "https://api.github.com/users/franck44/repos",
      "events_url": "https://api.github.com/users/franck44/events{/privacy}",
      "received_events_url": "https://api.github.com/users/franck44/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-18T00:12:22Z",
    "updated_at": "2020-06-18T00:12:22Z",
    "author_association": "NONE",
    "body": "Thanks @adiasg.\r\n\r\nNote that our proof does not only resolve the problem and scenario uncovered in the testing work by RV, but provide a more comprehensive statement (invariant) of what should hold, and a formal proof that it holds. \r\n\r\n> While it is desirable to have each and every modification to the spec to be incorporated and verified through a formal model, this introduces a large overhead on the spec writers. For this reason, the spec repository will usually be upstream from the formal models.\r\n\r\nThe purpose of our work is to discharge the spec writers of the hard part of the verification, which is figuring out the invariants, and building the proofs.\r\nWe (as formal methods people) write the proofs, there is no need for the spec writers to write them.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/645691379/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
