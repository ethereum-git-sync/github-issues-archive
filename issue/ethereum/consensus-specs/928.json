{
  "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/928",
  "repository_url": "https://api.github.com/repos/ethereum/consensus-specs",
  "labels_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/928/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/928/comments",
  "events_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/928/events",
  "html_url": "https://github.com/ethereum/consensus-specs/issues/928",
  "id": 433156203,
  "node_id": "MDU6SXNzdWU0MzMxNTYyMDM=",
  "number": 928,
  "title": "CI: yaml-test-generation trigger",
  "user": {
    "login": "protolambda",
    "id": 19571989,
    "node_id": "MDQ6VXNlcjE5NTcxOTg5",
    "avatar_url": "https://avatars.githubusercontent.com/u/19571989?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/protolambda",
    "html_url": "https://github.com/protolambda",
    "followers_url": "https://api.github.com/users/protolambda/followers",
    "following_url": "https://api.github.com/users/protolambda/following{/other_user}",
    "gists_url": "https://api.github.com/users/protolambda/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/protolambda/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/protolambda/subscriptions",
    "organizations_url": "https://api.github.com/users/protolambda/orgs",
    "repos_url": "https://api.github.com/users/protolambda/repos",
    "events_url": "https://api.github.com/users/protolambda/events{/privacy}",
    "received_events_url": "https://api.github.com/users/protolambda/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1295439957,
      "node_id": "MDU6TGFiZWwxMjk1NDM5OTU3",
      "url": "https://api.github.com/repos/ethereum/consensus-specs/labels/scope:CI/tests/pyspec",
      "name": "scope:CI/tests/pyspec",
      "color": "BDC0BA",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2019-04-15T08:28:13Z",
  "updated_at": "2019-06-14T02:14:26Z",
  "closed_at": "2019-06-14T02:14:26Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "To make good use of the test-generation from #851, we need to output the generated tests to an repository. Similar to the `eth2.0-test-generators -> eth2.0-tests` workflow, but with the following improvements:\r\n- Use [Git LFS](https://git-lfs.github.com/) for the yaml test vectors repository. With the large increase in tests, and test-suite size, we need something that can host ~1 gigabyte of files (See ETH 1.0 tests as size reference). Use of Git LFS improves cloning and git speed. We're not interested in diffing on github (you can still do so offline), as it's all generated code anyway, we're not making changes to it directly.\r\n- Versioning based on combination of spec-version (`vA.B.C`), and an extra number `X` based on any changes in the generation of tests. Proposed format: `vA.B.C-genX` example: `v0.6.1-gen2`. Clients can safely upgrade from one `gen` to another if `A.B.C` is still the same. I.e. tests are improved/extended, without functionality changes.\r\n\r\nWhat to implement:\r\n- Create a new repository for test outputs, with Git LFS from the start. Proposed name: `eth2.0-spec-tests`\r\n-  Deprecate the old `eth2.0-tests` and `eth2.0-test-generators` repositories\r\n    - To summarize the transition away from `eth2.0-test-generators`:\r\n      - it does not have consistent clean access to the most up-to-date pyspec package\r\n      - introduces an overhead on versioning\r\n      - cannot be updated in sync with specs when viable\r\n      - test-writer life could be much easier with all tooling available in #851 (configs for forks, constant presets, base-generator, utility packages, pyspec)\r\n  - `eth2.0-tests` is just deprecated. The new format is not that different when you look at existing features, but improves structuring, and scales better to larger amounts of tests\r\n- Update the CI script to:\r\n  - on every merge from `eth2.0-specs/dev` into `eth2.0-specs/test-gen`:\r\n     - build the tests `make gen_yaml_tests`\r\n     - push the output to `eth2.0-spec-tests/master` (git commit, LFS is automatic if activated correctly) \r\n  - We manually create git tags (or use github releases, which does the same) to version the `eth2.0-spec-tests` repository. It's just a matter of `git tag -S -a v1.2.3-gen4 && git push v1.2.3-gen4`\r\n\r\nI believe this `test-gen` branch based trigger works best, as it does not create a dependency on the release cycle, and makes it easy to re-trigger in case of a problem. The `master` branch on the `eth2.0-spec-tests` repository will just not be as frozen as the one in the specs. We'll have spec-tests releases anyway, so that doesn't matter.\r\n\r\n\r\n",
  "closed_by": {
    "login": "protolambda",
    "id": 19571989,
    "node_id": "MDQ6VXNlcjE5NTcxOTg5",
    "avatar_url": "https://avatars.githubusercontent.com/u/19571989?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/protolambda",
    "html_url": "https://github.com/protolambda",
    "followers_url": "https://api.github.com/users/protolambda/followers",
    "following_url": "https://api.github.com/users/protolambda/following{/other_user}",
    "gists_url": "https://api.github.com/users/protolambda/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/protolambda/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/protolambda/subscriptions",
    "organizations_url": "https://api.github.com/users/protolambda/orgs",
    "repos_url": "https://api.github.com/users/protolambda/repos",
    "events_url": "https://api.github.com/users/protolambda/events{/privacy}",
    "received_events_url": "https://api.github.com/users/protolambda/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/928/reactions",
    "total_count": 1,
    "+1": 1,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/928/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/484304426",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/928#issuecomment-484304426",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/928",
    "id": 484304426,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4NDMwNDQyNg==",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-04-17T23:57:49Z",
    "updated_at": "2019-04-17T23:57:49Z",
    "author_association": "MEMBER",
    "body": "How do you want to release tests upon formal releases? Just manually?\r\n\r\nHow do you want to handle the case where a bug is fixed in master and back-ported to dev? In this case we would want to release tests against the master which might have no dev counterpart",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/484304426/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/484508521",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/928#issuecomment-484508521",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/928",
    "id": 484508521,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4NDUwODUyMQ==",
    "user": {
      "login": "protolambda",
      "id": 19571989,
      "node_id": "MDQ6VXNlcjE5NTcxOTg5",
      "avatar_url": "https://avatars.githubusercontent.com/u/19571989?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/protolambda",
      "html_url": "https://github.com/protolambda",
      "followers_url": "https://api.github.com/users/protolambda/followers",
      "following_url": "https://api.github.com/users/protolambda/following{/other_user}",
      "gists_url": "https://api.github.com/users/protolambda/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/protolambda/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/protolambda/subscriptions",
      "organizations_url": "https://api.github.com/users/protolambda/orgs",
      "repos_url": "https://api.github.com/users/protolambda/repos",
      "events_url": "https://api.github.com/users/protolambda/events{/privacy}",
      "received_events_url": "https://api.github.com/users/protolambda/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-04-18T13:28:35Z",
    "updated_at": "2019-04-18T13:28:35Z",
    "author_association": "MEMBER",
    "body": "> How do you want to release tests upon formal releases?\r\n\r\nCreate a release (annotated signed git tag) on the tests repo, on the master branch. Yes, manually. It's a very small task, that only repeats every ~2-3 weeks.\r\n\r\n> How do you want to handle the case where a bug is fixed in master and back-ported to dev?\r\nGood point, we may need to create a separate trigger to update the tests-repo master branch, without going from dev.\r\n\r\nWe can make it work like this:\r\n- `specs#dev` -> `specs#dev-tests` triggers a CI job that outputs to `tests#dev` (branched of `tests#dev`) \r\n- `specs#master` > `specs#fix-tests` triggers a CI job that outputs to `tests#fix` (branched of `tests#master`)\r\n\r\nWorkflow:\r\n- on specs PR, just merge from feature branch into dev, no CI trigger\r\n- when dev is considered to have working test-generation, do a  `specs#dev` -> `specs#dev-tests`, and try the tests with a client/spec that is up to date with dev (ZRNT could do this)\r\n- for a specs release, we do a `specs#dev` -> `specs#dev-tests`, and then merge the CI output from  `tests#dev` to  `tests#master`,  and mark it as release\r\n- for a specs fix on master, we do a `specs#master` > `specs#fix-tests`, which builds the tests for the current master branch, enables us to check the resulting `tests#fix` branch, and then we merge `tests#fix` to  `tests#master`\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/484508521/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/485053659",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/928#issuecomment-485053659",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/928",
    "id": 485053659,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4NTA1MzY1OQ==",
    "user": {
      "login": "protolambda",
      "id": 19571989,
      "node_id": "MDQ6VXNlcjE5NTcxOTg5",
      "avatar_url": "https://avatars.githubusercontent.com/u/19571989?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/protolambda",
      "html_url": "https://github.com/protolambda",
      "followers_url": "https://api.github.com/users/protolambda/followers",
      "following_url": "https://api.github.com/users/protolambda/following{/other_user}",
      "gists_url": "https://api.github.com/users/protolambda/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/protolambda/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/protolambda/subscriptions",
      "organizations_url": "https://api.github.com/users/protolambda/orgs",
      "repos_url": "https://api.github.com/users/protolambda/repos",
      "events_url": "https://api.github.com/users/protolambda/events{/privacy}",
      "received_events_url": "https://api.github.com/users/protolambda/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-04-20T03:04:21Z",
    "updated_at": "2019-04-20T03:04:21Z",
    "author_association": "MEMBER",
    "body": "See PR #968",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/485053659/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/501942146",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/928#issuecomment-501942146",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/928",
    "id": 501942146,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwMTk0MjE0Ng==",
    "user": {
      "login": "protolambda",
      "id": 19571989,
      "node_id": "MDQ6VXNlcjE5NTcxOTg5",
      "avatar_url": "https://avatars.githubusercontent.com/u/19571989?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/protolambda",
      "html_url": "https://github.com/protolambda",
      "followers_url": "https://api.github.com/users/protolambda/followers",
      "following_url": "https://api.github.com/users/protolambda/following{/other_user}",
      "gists_url": "https://api.github.com/users/protolambda/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/protolambda/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/protolambda/subscriptions",
      "organizations_url": "https://api.github.com/users/protolambda/orgs",
      "repos_url": "https://api.github.com/users/protolambda/repos",
      "events_url": "https://api.github.com/users/protolambda/events{/privacy}",
      "received_events_url": "https://api.github.com/users/protolambda/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-06-14T02:14:26Z",
    "updated_at": "2019-06-14T02:14:26Z",
    "author_association": "MEMBER",
    "body": "Outdated. We've different configurations/modes now. CI runs tests, and state-transition generators are unified, so no need to run for ensuring that they work, as the they are already running in test-mode. The few other generators don't change as much. It's trade-offs around, but it works, and gets us fast CI, and working large size test-vector generation. Closing this issue.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/501942146/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
