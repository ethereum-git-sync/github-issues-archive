{
  "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1309",
  "repository_url": "https://api.github.com/repos/ethereum/consensus-specs",
  "labels_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1309/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1309/comments",
  "events_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1309/events",
  "html_url": "https://github.com/ethereum/consensus-specs/issues/1309",
  "id": 471186700,
  "node_id": "MDU6SXNzdWU0NzExODY3MDA=",
  "number": 1309,
  "title": "ETH2 fee market challenges",
  "user": {
    "login": "vbuterin",
    "id": 2230894,
    "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vbuterin",
    "html_url": "https://github.com/vbuterin",
    "followers_url": "https://api.github.com/users/vbuterin/followers",
    "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
    "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
    "organizations_url": "https://api.github.com/users/vbuterin/orgs",
    "repos_url": "https://api.github.com/users/vbuterin/repos",
    "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vbuterin/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1252242617,
      "node_id": "MDU6TGFiZWwxMjUyMjQyNjE3",
      "url": "https://api.github.com/repos/ethereum/consensus-specs/labels/phase2",
      "name": "phase2",
      "color": "90B44B",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 6,
  "created_at": "2019-07-22T16:48:39Z",
  "updated_at": "2019-12-15T22:55:32Z",
  "closed_at": "2019-12-15T22:55:32Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "Our current roadmap for eth2 is one where few users hold ETH \"directly\" (mostly as validator slots), and most users interact with the system through \"execution environments\" (EEs), which sit on top of the base layer and provide functionality like state management, cross-shard transactions, privacy, etc. Moving ETH between EEs is expected to take a full crosslink cycle (~6 min), but actions within an EE can be very quick. A major reason why this is done is to simplify the base-layer protocol so that the consensus code that all validator nodes need to run can be much smaller.\r\n\r\nBut this presents a challenge: how do users pay fees? Currently, a user pays transaction fees directly from their ethereum account (which the protocol recognizes) to a miner as part of the transaction. However, in eth2 we run into a problem: _users will likely not have access to any base-level \"ether\"_, because all of their coins are in these execution environments.\r\n\r\nThere are three possible categories of solutions:\r\n\r\n1. Block producers understand EE protocols (ie. they \"speak\" shadow chains, ZK rollup, plasma.....), so they can accept fees paid through these protocols directly.\r\n2. Users also hold a small balance coins in a special EE that block producers understand, and pay fees through conditional transactions (\"if a tx with hash H was included in this block, pay the producer 7124535 wei per gas that it consumed\") out of that balance\r\n3. Relayer markets, where an intermediary actor speaks the EE protocol and accepts fees within the EE protocol and pays fees using a special EE that block producers understand\r\n\r\n[This list seems to me exhaustive; if it is not, I'd love to know!]\r\n\r\nIMO (1) is nonviable as it removes much of the benefit of making this abstraction in the first place; the number of EE protocols would just keep increasing over time, raising the complexity of being a block producer, and increasing the incentive for validators to centralize so they can collect the most fees.\r\n\r\n(2) is very promising, though care must be taken to avoid making it inefficient (eg. you do NOT need to have two actual transactions, one for the original tx and one for the fee). Here is a possible setup for how this could work:\r\n\r\n* There exists a special EE, called the \"fee market EE\", where users hold ETH, and user can make ERC20-style authorizations (\"I authorize EE #1727 to take coins from me\"). All withdrawals and revocations of authorizations come with a 2-week waiting period.\r\n* There exists a standard format of receipt that EEs are expected to issue, saying \"user X wants to pay a fee of Y to address Z (often the proposer of the block)\".\r\n* Payment\r\n    * Option A: these receipts get aggregated and turned into a single receipt within a block, and this can get Merkle-proven into the fee market EE and used to make the transfer.\r\n    * Option B: future randomness can be used to probabilistically pay, so only ~1% of the time a receipt will be taken and used to charge 100x the normal fee\r\n    * Option C: users can self-declare how much they need to pay within a given span of epochs; only if their declaration is incorrect can others challenge them by providing a collection of receipts that show they need to pay more, and by doing so steal the user's deposit\r\n\r\nHowever, (2) has a key weakness: privacy. The special EE would not be privacy-preserving (unless of course we make it privacy-preserving, but that would be more complex and require standardizing on one scheme!), and so it would link together all of the transactions that users make.\r\n\r\nRelayer markets involve a special class of actors that create a transaction containing a list of other users' transactions, collecting the fees from those transactions through EEs that they speak (which could be privacy-preserving) and paying the base-layer fees themselves. This is currently [being explored](https://ethresear.ch/t/burn-relay-registry-decentralized-transaction-abstraction-on-layer-2/5820) for eth1 use cases. The main concern that's been publicly discussed so far is centralization - whether or not being a relayer is a natural monopoly.\r\n\r\nThere is a natural class of actor that could serve as a relayer, which is a light client server that is already being compensated through channel payments to provide Merkle branches to light clients. The fee market EE could support basic payment channel functionality to allow a light client server market to be more easily universalized.",
  "closed_by": {
    "login": "JustinDrake",
    "id": 731743,
    "node_id": "MDQ6VXNlcjczMTc0Mw==",
    "avatar_url": "https://avatars.githubusercontent.com/u/731743?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/JustinDrake",
    "html_url": "https://github.com/JustinDrake",
    "followers_url": "https://api.github.com/users/JustinDrake/followers",
    "following_url": "https://api.github.com/users/JustinDrake/following{/other_user}",
    "gists_url": "https://api.github.com/users/JustinDrake/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/JustinDrake/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/JustinDrake/subscriptions",
    "organizations_url": "https://api.github.com/users/JustinDrake/orgs",
    "repos_url": "https://api.github.com/users/JustinDrake/repos",
    "events_url": "https://api.github.com/users/JustinDrake/events{/privacy}",
    "received_events_url": "https://api.github.com/users/JustinDrake/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1309/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1309/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/513941718",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1309#issuecomment-513941718",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1309",
    "id": 513941718,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxMzk0MTcxOA==",
    "user": {
      "login": "dankrad",
      "id": 6130607,
      "node_id": "MDQ6VXNlcjYxMzA2MDc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6130607?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dankrad",
      "html_url": "https://github.com/dankrad",
      "followers_url": "https://api.github.com/users/dankrad/followers",
      "following_url": "https://api.github.com/users/dankrad/following{/other_user}",
      "gists_url": "https://api.github.com/users/dankrad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dankrad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dankrad/subscriptions",
      "organizations_url": "https://api.github.com/users/dankrad/orgs",
      "repos_url": "https://api.github.com/users/dankrad/repos",
      "events_url": "https://api.github.com/users/dankrad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dankrad/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-07-22T20:29:03Z",
    "updated_at": "2019-07-22T20:29:03Z",
    "author_association": "MEMBER",
    "body": "I am still for (3), however, one more concern just popped up in my mind: Could it be an advantage to be both a relayer and producer? In that case, we would have centralization of both relayers and block producers, which is much worse...",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/513941718/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/514047267",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1309#issuecomment-514047267",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1309",
    "id": 514047267,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxNDA0NzI2Nw==",
    "user": {
      "login": "villanuevawill",
      "id": 7415822,
      "node_id": "MDQ6VXNlcjc0MTU4MjI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7415822?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/villanuevawill",
      "html_url": "https://github.com/villanuevawill",
      "followers_url": "https://api.github.com/users/villanuevawill/followers",
      "following_url": "https://api.github.com/users/villanuevawill/following{/other_user}",
      "gists_url": "https://api.github.com/users/villanuevawill/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/villanuevawill/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/villanuevawill/subscriptions",
      "organizations_url": "https://api.github.com/users/villanuevawill/orgs",
      "repos_url": "https://api.github.com/users/villanuevawill/repos",
      "events_url": "https://api.github.com/users/villanuevawill/events{/privacy}",
      "received_events_url": "https://api.github.com/users/villanuevawill/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-07-23T04:15:33Z",
    "updated_at": "2019-07-23T07:04:11Z",
    "author_association": "NONE",
    "body": "> I am still for (3), however, one more concern just popped up in my mind: Could it be an advantage to be both a relayer and producer? In that case, we would have centralization of both relayers and block producers, which is much worse...\r\n\r\nThis has been discussed in depth and historically - an overview can be found here - https://ethresear.ch/t/state-providers-relayers-bring-back-the-mempool/5647 which links to an older article by @benjaminion - https://ethresear.ch/t/exploring-the-proposer-collator-split/1632\r\n\r\nThe desirable properties as part of a relay market is that a user can package their own transaction by being their own relayer. @vbuterin suggested a system with a universal fee market where relayers can offer a fee for transactions and the block producer can collect that fee via a look-back mechanism. A look-back mechanism essentially allows for an EE transaction to see the hashes of the transactions prior to it in the current block. Additionally, each EE can have a merge function that gives instructions on merging different packages and thus not having one relayer dominate a block. This shows a lot of promise. However, one open question regarding this approach. Would it be too expensive to enforce a separate stated fee for each (wrapped ?) transaction by the relayer? If not, then how does the merge function work in practice if there are duplicated transactions? If there is a blanket fee for a package, the package would no longer be valid. If we can have it stated individually, then we can allow the merge function to also prioritize higher fee transactions from multiple packages and it makes it less likely that there is a dominating relayer that can censor.\r\n\r\nDownsides are less efficient multimerkle proofs possibly and higher computational load?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/514047267/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/514279734",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1309#issuecomment-514279734",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1309",
    "id": 514279734,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxNDI3OTczNA==",
    "user": {
      "login": "vbuterin",
      "id": 2230894,
      "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vbuterin",
      "html_url": "https://github.com/vbuterin",
      "followers_url": "https://api.github.com/users/vbuterin/followers",
      "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
      "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
      "organizations_url": "https://api.github.com/users/vbuterin/orgs",
      "repos_url": "https://api.github.com/users/vbuterin/repos",
      "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vbuterin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-07-23T16:14:34Z",
    "updated_at": "2019-07-23T16:14:34Z",
    "author_association": "MEMBER",
    "body": "> If not, then how does the merge function work in practice if there are duplicated transactions? If there is a blanket fee for a package, the package would no longer be valid. If we can have it stated individually, then we can allow the merge function to also prioritize higher fee transactions from multiple packages and it makes it less likely that there is a dominating relayer that can censor.\r\n\r\nThis is definitely a really good point! It does seem like multiple relayers within one block would lead to collisions between transactions between those relayers, leading to the second one losing fees.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/514279734/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/514281333",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1309#issuecomment-514281333",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1309",
    "id": 514281333,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxNDI4MTMzMw==",
    "user": {
      "login": "dankrad",
      "id": 6130607,
      "node_id": "MDQ6VXNlcjYxMzA2MDc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6130607?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dankrad",
      "html_url": "https://github.com/dankrad",
      "followers_url": "https://api.github.com/users/dankrad/followers",
      "following_url": "https://api.github.com/users/dankrad/following{/other_user}",
      "gists_url": "https://api.github.com/users/dankrad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dankrad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dankrad/subscriptions",
      "organizations_url": "https://api.github.com/users/dankrad/orgs",
      "repos_url": "https://api.github.com/users/dankrad/repos",
      "events_url": "https://api.github.com/users/dankrad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dankrad/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-07-23T16:18:38Z",
    "updated_at": "2019-07-23T16:18:38Z",
    "author_association": "MEMBER",
    "body": "My problem is this: If a block producer is also a relayer, they can just always select their own package. This probably means that the combination of being a block producer and relayer is more profitable than just being one of them, which will lead to not just a monopoly in the relayer market (which I'm willing to accept) but also a monopoly in the block producer (which is a fatal flaw in the protocol).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/514281333/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/517381721",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1309#issuecomment-517381721",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1309",
    "id": 517381721,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxNzM4MTcyMQ==",
    "user": {
      "login": "naterush",
      "id": 21002431,
      "node_id": "MDQ6VXNlcjIxMDAyNDMx",
      "avatar_url": "https://avatars.githubusercontent.com/u/21002431?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naterush",
      "html_url": "https://github.com/naterush",
      "followers_url": "https://api.github.com/users/naterush/followers",
      "following_url": "https://api.github.com/users/naterush/following{/other_user}",
      "gists_url": "https://api.github.com/users/naterush/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naterush/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naterush/subscriptions",
      "organizations_url": "https://api.github.com/users/naterush/orgs",
      "repos_url": "https://api.github.com/users/naterush/repos",
      "events_url": "https://api.github.com/users/naterush/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naterush/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-01T17:23:45Z",
    "updated_at": "2019-08-01T17:23:45Z",
    "author_association": "NONE",
    "body": "I don't think (2) and (3) are different solutions. In (2), users \"hold a small balance coins in a special EE that block producers understand,\" and pay block producers through conditional transactions in this \"special EE.\" In (3), relayers \"pays fees using a special EE that block producers understand.\" As such, (2) is just _one specific implementation_ of (3) -- where the \"special EE\" from (3) is this conditional fees one specified in (2). Aka, relayers can totally exist in (2) as well; they just have eth in this special conditional payment EE.\r\n\r\n> However, (2) has a key weakness: privacy.\r\n\r\nBy the above point, (2) is just as private as (3) is. Users pay relayers to forward their transaction by using some privacy preserving EE, and relayers can pay block producers in this special conditional transaction EE that the block producers understand.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/517381721/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/565855846",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1309#issuecomment-565855846",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1309",
    "id": 565855846,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2NTg1NTg0Ng==",
    "user": {
      "login": "JustinDrake",
      "id": 731743,
      "node_id": "MDQ6VXNlcjczMTc0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/731743?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JustinDrake",
      "html_url": "https://github.com/JustinDrake",
      "followers_url": "https://api.github.com/users/JustinDrake/followers",
      "following_url": "https://api.github.com/users/JustinDrake/following{/other_user}",
      "gists_url": "https://api.github.com/users/JustinDrake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JustinDrake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JustinDrake/subscriptions",
      "organizations_url": "https://api.github.com/users/JustinDrake/orgs",
      "repos_url": "https://api.github.com/users/JustinDrake/repos",
      "events_url": "https://api.github.com/users/JustinDrake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JustinDrake/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-12-15T22:55:32Z",
    "updated_at": "2019-12-15T22:55:32Z",
    "author_association": "MEMBER",
    "body": "> Moving ETH between EEs is expected to take a full crosslink cycle (~6 min)\r\n\r\nIn the latest design the full crosslink cycle (in the default best-case scenario) has been brought down to one slot, partly to address fee market challenges. (This comes at the cost of reducing the number of shards to 64.) Cross-shard and cross-EE transactions can be fast (in the default best-case scenario) without fancy infrastructure, in particular facilitating fast gas payments.\r\n\r\n(It is still possible that, in the longer term, fancy application-layer infrastructure (e.g. optimistic virtual crosslinks) will provide sub-slot communication as well as \"backup\" crosslinks whenever consensus-level crosslinking stalls or slows down. Such infrastructure now clearly falls outside the basic infrastructure expected from L1.)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/565855846/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
