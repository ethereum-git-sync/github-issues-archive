{
  "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/508",
  "repository_url": "https://api.github.com/repos/ethereum/consensus-specs",
  "labels_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/508/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/508/comments",
  "events_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/508/events",
  "html_url": "https://github.com/ethereum/consensus-specs/issues/508",
  "id": 403851558,
  "node_id": "MDU6SXNzdWU0MDM4NTE1NTg=",
  "number": 508,
  "title": "[BLS] Modular square root issue",
  "user": {
    "login": "mratsim",
    "id": 22738317,
    "node_id": "MDQ6VXNlcjIyNzM4MzE3",
    "avatar_url": "https://avatars.githubusercontent.com/u/22738317?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mratsim",
    "html_url": "https://github.com/mratsim",
    "followers_url": "https://api.github.com/users/mratsim/followers",
    "following_url": "https://api.github.com/users/mratsim/following{/other_user}",
    "gists_url": "https://api.github.com/users/mratsim/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mratsim/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mratsim/subscriptions",
    "organizations_url": "https://api.github.com/users/mratsim/orgs",
    "repos_url": "https://api.github.com/users/mratsim/repos",
    "events_url": "https://api.github.com/users/mratsim/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mratsim/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2019-01-28T14:53:02Z",
  "updated_at": "2019-01-28T18:09:07Z",
  "closed_at": "2019-01-28T18:09:07Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "### Problem\r\n\r\nThe BLS test vectors in https://github.com/ethereum/eth2.0-tests/pull/12 and https://github.com/ethereum/eth2.0-tests/pull/13 reuse the Trinity `modular_squareroot`implementation at https://github.com/ethereum/trinity/blob/a1b0f058e7bc8e385c8dac3164c49098967fd5bb/eth2/_utils/bls.py#L63-L77\r\n\r\n```python\r\ndef modular_squareroot(value: FQ2) -> FQP:\r\n    \"\"\"\r\n    ``modular_squareroot(x)`` returns the value ``y`` such that ``y**2 % q == x``,\r\n    and None if this is not possible. In cases where there are two solutions,\r\n    the value with higher imaginary component is favored;\r\n    if both solutions have equal imaginary component the value with higher real\r\n    component is favored.\r\n    \"\"\"\r\n    candidate_squareroot = value ** ((FQ2_order + 8) // 16)\r\n    check = candidate_squareroot ** 2 / value\r\n    if check in eighth_roots_of_unity[::2]:\r\n        x1 = candidate_squareroot / eighth_roots_of_unity[eighth_roots_of_unity.index(check) // 2]\r\n        x2 = FQ2([-x1.coeffs[0], -x1.coeffs[1]])  # x2 = -x1\r\n        return x1 if (x1.coeffs[1], x1.coeffs[0]) > (x2.coeffs[1], x2.coeffs[0]) else x2\r\n    return None\r\n```\r\n\r\nThose are a copy paste of the current spec https://github.com/ethereum/eth2.0-specs/blob/928f9772fa51ed2e251b99c4795097da976c4bde/specs/bls_signature.md#modular_squareroot\r\n\r\n```python\r\nFq2_order = q ** 2 - 1\r\neighth_roots_of_unity = [Fq2([1,1]) ** ((Fq2_order * k) // 8) for k in range(8)]\r\n\r\ndef modular_squareroot(value: int) -> int:\r\n    candidate_squareroot = value ** ((Fq2_order + 8) // 16)\r\n    check = candidate_squareroot ** 2 / value\r\n    if check in eighth_roots_of_unity[::2]:\r\n        x1 = candidate_squareroot / eighth_roots_of_unity[eighth_roots_of_unity.index(check) // 2]\r\n        x2 = -x1\r\n        return x1 if (x1.coeffs[1].n, x1.coeffs[0].n) > (x2.coeffs[1].n, x2.coeffs[0].n) else x2\r\n    return None\r\n```\r\n\r\nHowever, our experiments using Milagro modular square root showed that the spec does not match with established crypto library.\r\n\r\nThe main issue is that this comparison `(x1.coeffs[1], x1.coeffs[0]) > (x2.coeffs[1], x2.coeffs[0])` is always true.\r\n\r\n### Analysis\r\n\r\nThis line `x2 = FQ2([-x1.coeffs[0], -x1.coeffs[1]])  # x2 = -x1` is only negating the coefficient.\r\nGiven that `x1` is always positive `x2` will never be returned.\r\n\r\nProbably Py-ECC should check the input coefficient and compute the modular inverse if one coefficient is negative.\r\n\r\nReference code: https://github.com/ethereum/py_ecc/blob/e9c42c76f1cc4f535dedec01b4c7ab2a59e46119/py_ecc/optimized_bls12_381/optimized_field_elements.py#L240-L246\r\n\r\n```python\r\nclass FQ2(FQP):\r\n    def __init__(self, coeffs):\r\n        self.coeffs = tuple(coeffs)\r\n        self.modulus_coeffs = (1, 0)\r\n        self.mc_tuples = [(0, 1)]\r\n        self.degree = 2\r\n        self.__class__.degree = 2\r\n```\r\n\r\nNote that Py-ECC does the correct initialization for FQ\r\n\r\n```python\r\nclass FQ(object):\r\n    def __init__(self, n):\r\n        if isinstance(n, self.__class__):\r\n            self.n = n.n\r\n        else:\r\n            self.n = n % field_modulus\r\n        assert isinstance(self.n, int)\r\n```\r\n\r\nIn the specs, it should be clear that the `-` operations in `x2 = FQ2([-x1.coeffs[0], -x1.coeffs[1]])` are doing modular inverse.\r\n\r\n### Test case\r\n\r\n```python\r\nfrom py_ecc.optimized_bls12_381 import FQ, FQ2\r\n\r\nx = FQ(-1)\r\ny = FQ2([-1,-1])\r\n\r\nprint(x) # 4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272559786\r\nprint(y) # (-1, -1)\r\n```\r\n\r\ncc @cheatfate, @vbuterin, @pipermerriam, @hwwhww, @ChihChengLiang \r\n\r\n## Implementation question\r\n\r\nAlso I tried to find the algorithm used in the specs in papers but I couldn't find it in [this extensive review of 10 modular square root over extension fields algorithms\r\n](https://eprint.iacr.org/2012/685.pdf)",
  "closed_by": {
    "login": "mratsim",
    "id": 22738317,
    "node_id": "MDQ6VXNlcjIyNzM4MzE3",
    "avatar_url": "https://avatars.githubusercontent.com/u/22738317?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mratsim",
    "html_url": "https://github.com/mratsim",
    "followers_url": "https://api.github.com/users/mratsim/followers",
    "following_url": "https://api.github.com/users/mratsim/following{/other_user}",
    "gists_url": "https://api.github.com/users/mratsim/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mratsim/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mratsim/subscriptions",
    "organizations_url": "https://api.github.com/users/mratsim/orgs",
    "repos_url": "https://api.github.com/users/mratsim/repos",
    "events_url": "https://api.github.com/users/mratsim/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mratsim/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/508/reactions",
    "total_count": 3,
    "+1": 1,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 2,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/508/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/458195381",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/508#issuecomment-458195381",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/508",
    "id": 458195381,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1ODE5NTM4MQ==",
    "user": {
      "login": "vbuterin",
      "id": 2230894,
      "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vbuterin",
      "html_url": "https://github.com/vbuterin",
      "followers_url": "https://api.github.com/users/vbuterin/followers",
      "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
      "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
      "organizations_url": "https://api.github.com/users/vbuterin/orgs",
      "repos_url": "https://api.github.com/users/vbuterin/repos",
      "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vbuterin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-28T16:15:17Z",
    "updated_at": "2019-01-28T16:25:01Z",
    "author_association": "MEMBER",
    "body": "> This line x2 = FQ2([-x1.coeffs[0], -x1.coeffs[1]]) # x2 = -x1 is only negating the coefficient.\r\nGiven that x1 is always positive x2 will never be returned.\r\n\r\nWe're talking about numbers mod p here, so all of them are positive. The intention is that if either (i) `x1.coeffs[1].n > p/2` or (ii) `x1.coeffs[1].n == 0 and x1.coeffs[0].n > p/2` then return x1, otherwise return x2.\r\n\r\nOr are you saying that the implementation doesn't actually store the coefficients as FQ elements so there's a bug and `-x1.coeffs[0]` actually is below zero? If the latter then it should be a simple fix.\r\n\r\nI don't think it should matter what algorithm is used, as long as it chooses between the two square roots according to a consistent method, and picking the greater of root and -root seems like the most natural thing to do. But changing it to be consistent with whatever established crypto libraries prefer seems fine to me (unless established crypto libraries don't have a consistent formula and require something that requires switching to their very specific algorithm for modular square roots to know which root to use, in which case we should stick to picking the greater and wrap the crypto libraries to confirm).\r\n\r\n**Edit**: I checked:\r\n\r\n```\r\n>>> x = py_ecc.bls12_381.FQ2([5,7]) ** 1\r\n>>> y = -x\r\n>>> x.coeffs\r\n(5, 7)\r\n>>> y.coeffs\r\n(4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272559782, 4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272559780)\r\n```\r\n\r\nSo the implementation does work correctly. I'll modify the spec to make it clearer that it's a modular additive inverse.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/458195381/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/458200896",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/508#issuecomment-458200896",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/508",
    "id": 458200896,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1ODIwMDg5Ng==",
    "user": {
      "login": "vbuterin",
      "id": 2230894,
      "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vbuterin",
      "html_url": "https://github.com/vbuterin",
      "followers_url": "https://api.github.com/users/vbuterin/followers",
      "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
      "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
      "organizations_url": "https://api.github.com/users/vbuterin/orgs",
      "repos_url": "https://api.github.com/users/vbuterin/repos",
      "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vbuterin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-28T16:28:24Z",
    "updated_at": "2019-01-28T16:28:24Z",
    "author_association": "MEMBER",
    "body": "https://github.com/ethereum/eth2.0-specs/pull/509",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/458200896/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/458228005",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/508#issuecomment-458228005",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/508",
    "id": 458228005,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1ODIyODAwNQ==",
    "user": {
      "login": "mratsim",
      "id": 22738317,
      "node_id": "MDQ6VXNlcjIyNzM4MzE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/22738317?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mratsim",
      "html_url": "https://github.com/mratsim",
      "followers_url": "https://api.github.com/users/mratsim/followers",
      "following_url": "https://api.github.com/users/mratsim/following{/other_user}",
      "gists_url": "https://api.github.com/users/mratsim/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mratsim/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mratsim/subscriptions",
      "organizations_url": "https://api.github.com/users/mratsim/orgs",
      "repos_url": "https://api.github.com/users/mratsim/repos",
      "events_url": "https://api.github.com/users/mratsim/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mratsim/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-28T17:38:13Z",
    "updated_at": "2019-01-28T17:38:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "I rechecked with FQ inputs instead of plain integers, it does store each coeff as FQ elements:\r\n\r\n```python\r\n>>> import py_ecc\r\n>>> x = py_ecc.bls12_381.FQ2([5,7]) ** 1\r\n>>> y = py_ecc.bls12_381.FQ2([-x.coeffs[0], -x.coeffs[1]])\r\n>>> y.coeffs\r\n(4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272559782, 4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272559780)\r\n>>> \r\n```\r\n\r\nI guess next step is to check the FQ2 modular square root implementation of Relic/Zcash/Milagro.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/458228005/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/458237139",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/508#issuecomment-458237139",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/508",
    "id": 458237139,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1ODIzNzEzOQ==",
    "user": {
      "login": "mratsim",
      "id": 22738317,
      "node_id": "MDQ6VXNlcjIyNzM4MzE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/22738317?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mratsim",
      "html_url": "https://github.com/mratsim",
      "followers_url": "https://api.github.com/users/mratsim/followers",
      "following_url": "https://api.github.com/users/mratsim/following{/other_user}",
      "gists_url": "https://api.github.com/users/mratsim/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mratsim/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mratsim/subscriptions",
      "organizations_url": "https://api.github.com/users/mratsim/orgs",
      "repos_url": "https://api.github.com/users/mratsim/repos",
      "events_url": "https://api.github.com/users/mratsim/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mratsim/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-28T18:02:48Z",
    "updated_at": "2019-01-28T18:08:37Z",
    "author_association": "CONTRIBUTOR",
    "body": "Further investigation shows that it's the `optimized_bls12_381` of Py-ECC that has an issue:\r\n\r\n```python\r\nimport py_ecc\r\nx = py_ecc.bls12_381.FQ2([5,7])\r\ny = py_ecc.bls12_381.FQ2([-x.coeffs[0], -x.coeffs[1]])\r\nprint(y.coeffs) # (4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272559782, 4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272559780)\r\n\r\n\r\nu = py_ecc.optimized_bls12_381.FQ2([5,7])\r\nv = py_ecc.optimized_bls12_381.FQ2([-u.coeffs[0], -u.coeffs[1]])\r\nprint(v.coeffs) # (-5, -7)\r\n```\r\n\r\nConcretely, Trinity implementation has an issue due to this, it will always returns True or None.\r\n\r\nTest case\r\n```python\r\nfrom py_ecc.optimized_bls12_381 import (\r\n    FQ, FQ2,\r\n    field_modulus as q\r\n)\r\n\r\nFQ2_order = q ** 2 - 1\r\neighth_roots_of_unity = [\r\n    FQ2([1, 1]) ** ((FQ2_order * k) // 8)\r\n    for k in range(8)\r\n]\r\n\r\n# Trinity implementation,\r\n# Modified to print intermediate result and if x1 > x2\r\ndef modular_squareroot(value: FQ2) -> bool:\r\n    \"\"\"\r\n    ``modular_squareroot(x)`` returns the value ``y`` such that ``y**2 % q == x``,\r\n    and None if this is not possible. In cases where there are two solutions,\r\n    the value with higher imaginary component is favored;\r\n    if both solutions have equal imaginary component the value with higher real\r\n    component is favored.\r\n    \"\"\"\r\n    candidate_squareroot = value ** ((FQ2_order + 8) // 16)\r\n    check = candidate_squareroot ** 2 / value\r\n    if check in eighth_roots_of_unity[::2]:\r\n        x1 = candidate_squareroot / eighth_roots_of_unity[eighth_roots_of_unity.index(check) // 2]\r\n        x2 = FQ2([-x1.coeffs[0], -x1.coeffs[1]])  # x2 = -x1\r\n        print(f\"x2: {x2}\")\r\n        # return x1 if (x1.coeffs[1], x1.coeffs[0]) > (x2.coeffs[1], x2.coeffs[0]) else x2\r\n        return (x1.coeffs[1], x1.coeffs[0]) > (x2.coeffs[1], x2.coeffs[0])\r\n    return None\r\n\r\nfor a in range(10):\r\n    for b in range(10):\r\n        x = FQ2([a, b]) ** 1\r\n        print(f\"({a}, {b}) - {x} - {FQ2([-x.coeffs[0], -x.coeffs[1]])}\")\r\n        y = modular_squareroot(x)\r\n        print(f\"x1 > x2 - {y}\")\r\n```\r\n\r\nPrints\r\n\r\n```\r\n(0, 0) - (0, 0) - (0, 0)\r\nx1 > x2 - None\r\n(0, 1) - (0, 1) - (0, -1)\r\nx2: (-2973677408986561043442465346520108879172042883009249989176415018091420807192182638567116318576472649347015917690530, -1028732146235106349975324479215795277384839936929757896155643118032610843298655225875571310552543014690878354869257)\r\nx1 > x2 - True\r\n(0, 2) - (0, 2) - (0, -2)\r\nx2: (-1, -1)\r\nx1 > x2 - True\r\n(0, 3) - (0, 3) - (0, -3)\r\nx2: (-3276987779355557806373750845889189077968193680945900882488430245112227261734582917308126182608378421639625449960584, -3276987779355557806373750845889189077968193680945900882488430245112227261734582917308126182608378421639625449960584)\r\nx1 > x2 - True\r\n(0, 4) - (0, 4) - (0, -4)\r\nx2: (-2057464292470212699950648958431590554769679873859515792311286236065221686597310451751142621105086029381756709738514, -1944945262751454693467140867304313601787202946079492093020771900058809963893527412691545008023929634656137562821273)\r\nx1 > x2 - True\r\n(0, 5) - (0, 5) - (0, -5)\r\nx2: (-3812379096704106451088749511229787994157686022564966047825536927476905165389684039502953357607714022383577266845174, -3812379096704106451088749511229787994157686022564966047825536927476905165389684039502953357607714022383577266845174)\r\nx1 > x2 - True\r\n\r\n...\r\n...\r\n```\r\n\r\nAs this is implementation specific and not spec related, I'm closing this.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/458237139/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
