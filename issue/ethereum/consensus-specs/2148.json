{
  "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2148",
  "repository_url": "https://api.github.com/repos/ethereum/consensus-specs",
  "labels_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2148/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2148/comments",
  "events_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2148/events",
  "html_url": "https://github.com/ethereum/consensus-specs/issues/2148",
  "id": 760616902,
  "node_id": "MDU6SXNzdWU3NjA2MTY5MDI=",
  "number": 2148,
  "title": "Decide on address format",
  "user": {
    "login": "paulmillr",
    "id": 574696,
    "node_id": "MDQ6VXNlcjU3NDY5Ng==",
    "avatar_url": "https://avatars.githubusercontent.com/u/574696?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/paulmillr",
    "html_url": "https://github.com/paulmillr",
    "followers_url": "https://api.github.com/users/paulmillr/followers",
    "following_url": "https://api.github.com/users/paulmillr/following{/other_user}",
    "gists_url": "https://api.github.com/users/paulmillr/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/paulmillr/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/paulmillr/subscriptions",
    "organizations_url": "https://api.github.com/users/paulmillr/orgs",
    "repos_url": "https://api.github.com/users/paulmillr/repos",
    "events_url": "https://api.github.com/users/paulmillr/events{/privacy}",
    "received_events_url": "https://api.github.com/users/paulmillr/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2020-12-09T19:41:05Z",
  "updated_at": "2023-12-27T00:15:06Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "I think we should start discussions on eth2 address format. \r\n\r\nThe hash function seems to be SHA2-256 nowadays. Should bech32 be used? How long should the addr be?",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2148/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2148/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/745144477",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2148#issuecomment-745144477",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2148",
    "id": 745144477,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc0NTE0NDQ3Nw==",
    "user": {
      "login": "vbuterin",
      "id": 2230894,
      "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vbuterin",
      "html_url": "https://github.com/vbuterin",
      "followers_url": "https://api.github.com/users/vbuterin/followers",
      "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
      "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
      "organizations_url": "https://api.github.com/users/vbuterin/orgs",
      "repos_url": "https://api.github.com/users/vbuterin/repos",
      "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vbuterin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-12-15T08:48:54Z",
    "updated_at": "2020-12-15T08:48:54Z",
    "author_association": "MEMBER",
    "body": "Given that eth2 addresses are just eth1 addresses (as the existing eth1 state would be migrated onto eth2), would this be a new serialization scheme for existing addresses? Or would the goal be to expand from 20 bytes to something longer (26 bytes?) for safety? If we want to do the latter, we should probably start talking to the eth1 team asap to do the switch at the same time as the hex -> bin tree conversion so that we can make all addresses longer (prefix them with zeroes or whatever) instead of permanently needing to support multiple lengths.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/745144477/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/745291405",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2148#issuecomment-745291405",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2148",
    "id": 745291405,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc0NTI5MTQwNQ==",
    "user": {
      "login": "paulmillr",
      "id": 574696,
      "node_id": "MDQ6VXNlcjU3NDY5Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/574696?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paulmillr",
      "html_url": "https://github.com/paulmillr",
      "followers_url": "https://api.github.com/users/paulmillr/followers",
      "following_url": "https://api.github.com/users/paulmillr/following{/other_user}",
      "gists_url": "https://api.github.com/users/paulmillr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paulmillr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paulmillr/subscriptions",
      "organizations_url": "https://api.github.com/users/paulmillr/orgs",
      "repos_url": "https://api.github.com/users/paulmillr/repos",
      "events_url": "https://api.github.com/users/paulmillr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paulmillr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-12-15T13:37:28Z",
    "updated_at": "2020-12-15T13:37:28Z",
    "author_association": "NONE",
    "body": "So, we'll have two systems:\n\n1. Eth1 shard on eth2 that would keep using secp256k1\n2. Other shards, where only bls12-381 is used to sign transactions\n\nThe scheme would need to be able to create addresses for both cases.\n\nSeems like it would be great to be able to send to eth1 addresses. Or, we can move all addresses into new scheme.\n\nI see three issues with current approach:\n\n1. Checksum is optional\n2. Case-sensitivity\n3. There is no prefix to distinguish eth addresses from other projects\n\nBech32 is case-insensitive, uses prefix, and is checksummed. \n\nThe address could look like:\n\neth1qhvmnmagepmt6wuz0mnyf63qux3rxkk30fgvzv9",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/745291405/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/745379245",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2148#issuecomment-745379245",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2148",
    "id": 745379245,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc0NTM3OTI0NQ==",
    "user": {
      "login": "paulmillr",
      "id": 574696,
      "node_id": "MDQ6VXNlcjU3NDY5Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/574696?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paulmillr",
      "html_url": "https://github.com/paulmillr",
      "followers_url": "https://api.github.com/users/paulmillr/followers",
      "following_url": "https://api.github.com/users/paulmillr/following{/other_user}",
      "gists_url": "https://api.github.com/users/paulmillr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paulmillr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paulmillr/subscriptions",
      "organizations_url": "https://api.github.com/users/paulmillr/orgs",
      "repos_url": "https://api.github.com/users/paulmillr/repos",
      "events_url": "https://api.github.com/users/paulmillr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paulmillr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-12-15T15:48:44Z",
    "updated_at": "2020-12-15T15:48:44Z",
    "author_association": "NONE",
    "body": "If we're going to use one address type for everything, how would we handle collisions? E.g. different keys on bls381/secp256 that point to one address",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/745379245/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/745737717",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2148#issuecomment-745737717",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2148",
    "id": 745737717,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc0NTczNzcxNw==",
    "user": {
      "login": "ralexstokes",
      "id": 3113781,
      "node_id": "MDQ6VXNlcjMxMTM3ODE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3113781?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ralexstokes",
      "html_url": "https://github.com/ralexstokes",
      "followers_url": "https://api.github.com/users/ralexstokes/followers",
      "following_url": "https://api.github.com/users/ralexstokes/following{/other_user}",
      "gists_url": "https://api.github.com/users/ralexstokes/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ralexstokes/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ralexstokes/subscriptions",
      "organizations_url": "https://api.github.com/users/ralexstokes/orgs",
      "repos_url": "https://api.github.com/users/ralexstokes/repos",
      "events_url": "https://api.github.com/users/ralexstokes/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ralexstokes/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-12-16T03:20:24Z",
    "updated_at": "2020-12-16T03:20:24Z",
    "author_association": "MEMBER",
    "body": "> So, we'll have two systems:\r\n> \r\n> 1. Eth1 shard on eth2 that would keep using secp256k1\r\n> 2. Other shards, where only bls12-381 is used to sign transactions\r\n> \r\n> The scheme would need to be able to create addresses for both cases.\r\n> \r\n> Seems like it would be great to be able to send to eth1 addresses. Or, we can move all addresses into new scheme.\r\n>\r\n\r\nif i'm understanding you correctly, it is worth noting:\r\n\r\nwhile the details are still up in the air, i think there will generally be special mechanisms to go from \"inside the EVM\" (i.e. eth1 today, secp256k1 crypto) to \"outside the EVM\", e.g. moving ETH from a validator entity in the system to a user account. if we move ahead w/ the \"rollup centric\" vision of the world (https://ethereum-magicians.org/t/a-rollup-centric-ethereum-roadmap/4698), we may not even have a concept of user-level transactions on the shards themselves as these messages would be processed in the one \"computation shard\" / inside the EVM (with special access to shard data, much like the `BLOCKHASH` opcode today). so we can pretty cleanly keep secp256k1 cryptography where it is today and still use BLS cryptography on the beacon chain. and in this case, we would not need to worry about interoperating between the two.\r\n \r\n> I see three issues with current approach:\r\n> \r\n> 1. Checksum is optional\r\n> 2. Case-sensitivity\r\n> 3. There is no prefix to distinguish eth addresses from other projects\r\n\r\nsidenote: we have effectively assumed the `0x` prefix as an ethereum-specific thing\r\n\r\n> \r\n> Bech32 is case-insensitive, uses prefix, and is checksummed.\r\n> \r\n> The address could look like:\r\n> \r\n> eth1qhvmnmagepmt6wuz0mnyf63qux3rxkk30fgvzv9\r\n\r\nalongside the above, we can definitely have a discussion about enhancing safety/usability of eth1's address format although there are likely better forums for that, like ethresear.ch or fellowship of ethereum magicians :)\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/745737717/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
