{
  "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1408",
  "repository_url": "https://api.github.com/repos/ethereum/consensus-specs",
  "labels_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1408/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1408/comments",
  "events_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1408/events",
  "html_url": "https://github.com/ethereum/consensus-specs/issues/1408",
  "id": 495759168,
  "node_id": "MDU6SXNzdWU0OTU3NTkxNjg=",
  "number": 1408,
  "title": "Attestation validation differences between fork choice and process_attestation",
  "user": {
    "login": "ericsson49",
    "id": 10426192,
    "node_id": "MDQ6VXNlcjEwNDI2MTky",
    "avatar_url": "https://avatars.githubusercontent.com/u/10426192?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ericsson49",
    "html_url": "https://github.com/ericsson49",
    "followers_url": "https://api.github.com/users/ericsson49/followers",
    "following_url": "https://api.github.com/users/ericsson49/following{/other_user}",
    "gists_url": "https://api.github.com/users/ericsson49/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ericsson49/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ericsson49/subscriptions",
    "organizations_url": "https://api.github.com/users/ericsson49/orgs",
    "repos_url": "https://api.github.com/users/ericsson49/repos",
    "events_url": "https://api.github.com/users/ericsson49/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ericsson49/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1324776822,
      "node_id": "MDU6TGFiZWwxMzI0Nzc2ODIy",
      "url": "https://api.github.com/repos/ethereum/consensus-specs/labels/scope:fork-choice",
      "name": "scope:fork-choice",
      "color": "81C7D4",
      "default": false,
      "description": ""
    },
    {
      "id": 1725628406,
      "node_id": "MDU6TGFiZWwxNzI1NjI4NDA2",
      "url": "https://api.github.com/repos/ethereum/consensus-specs/labels/phase0",
      "name": "phase0",
      "color": "c2e0c6",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 5,
  "created_at": "2019-09-19T12:11:08Z",
  "updated_at": "2020-05-19T17:27:03Z",
  "closed_at": "2020-05-19T17:27:03Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "An attestation contains three votes: LMD GHOST vote, FFG vote and Crosslink vote.\r\nThe beacon chain specs specify how to validate an attestation and its votes.\r\nHowever, the validation is split in several parts: some checks defined in [fork_choice/on_attestation](https://github.com/ethereum/eth2.0-specs/blob/dev/specs/core/0_fork-choice.md#on_attestation) and others - in [process_attestation](https://github.com/ethereum/eth2.0-specs/blob/dev/specs/core/0_beacon-chain.md#attestations). They both invoke [is_valid_indexed_attestation](https://github.com/ethereum/eth2.0-specs/blob/dev/specs/core/0_beacon-chain.md#is_valid_indexed_attestation).\r\n\r\nThe `on_attestation` deals mostly with LMD GHOST vote and part of FFG vote (`target` field). So, if there arrives an attestation with an invalid crosslink vote or an invalid `source` fields, then it is still accepted by the fork choice spec and affects the LMD GHOST fork choice.\r\nHowever, the attestation should not be included in newly proposed blocks, since it won't pass `process_attestation` checks (see [validator spec](https://github.com/ethereum/eth2.0-specs/blob/dev/specs/validator/0_beacon-chain-validator.md#attestations).\r\n\r\nWhile there may be reasons to split validation in two parts, this can lead to inconsistencies in fork choice. Consider a case, when there are two head candidates, both having the same amount of votes and tie break chooses the first one. If a partially correct attestation added, which votes for the second block, then the second block becomes the head, based on off-chain plus on-chain attestation. But since this last vote cannot be incorporated into the chain, from on-chain attestations perspective, the first candidate is the head. I do not fully understand consequences of the discrepancy, but it seems awkward at least.\r\n\r\nAnother example. If such a partially valid attestations is propagated only to part of the network nodes, it cannot reach other (honest) validators via proposed blocks, because of `process_attestation` assertion failures. It can result in different views on the state of the blockchain, which can be only corrected by propagating such invalid attestations to other nodes.\r\nSo this looks like a potential unnecessary source of forks, which can be exploited by an attacker.",
  "closed_by": {
    "login": "djrtwo",
    "id": 1433595,
    "node_id": "MDQ6VXNlcjE0MzM1OTU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/djrtwo",
    "html_url": "https://github.com/djrtwo",
    "followers_url": "https://api.github.com/users/djrtwo/followers",
    "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
    "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
    "organizations_url": "https://api.github.com/users/djrtwo/orgs",
    "repos_url": "https://api.github.com/users/djrtwo/repos",
    "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
    "received_events_url": "https://api.github.com/users/djrtwo/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1408/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1408/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/536912461",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1408#issuecomment-536912461",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1408",
    "id": 536912461,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzNjkxMjQ2MQ==",
    "user": {
      "login": "protolambda",
      "id": 19571989,
      "node_id": "MDQ6VXNlcjE5NTcxOTg5",
      "avatar_url": "https://avatars.githubusercontent.com/u/19571989?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/protolambda",
      "html_url": "https://github.com/protolambda",
      "followers_url": "https://api.github.com/users/protolambda/followers",
      "following_url": "https://api.github.com/users/protolambda/following{/other_user}",
      "gists_url": "https://api.github.com/users/protolambda/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/protolambda/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/protolambda/subscriptions",
      "organizations_url": "https://api.github.com/users/protolambda/orgs",
      "repos_url": "https://api.github.com/users/protolambda/repos",
      "events_url": "https://api.github.com/users/protolambda/events{/privacy}",
      "received_events_url": "https://api.github.com/users/protolambda/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-01T07:43:32Z",
    "updated_at": "2019-10-01T07:43:32Z",
    "author_association": "MEMBER",
    "body": "There are multiple things to consider here:\r\n\r\nThere is a related thing with \"should we verify twice\"; I'm heavily opposed to doing a single-pass verification of the attestation for several reasons:\r\n- relying on your pool of operations is bad. Bitcoin Core had a bug where consensus was partially reliant on the mempool being validated (iirc).\r\n- the fork-choice is different from the state transition, since voting is not the only thing happening with attestation, more on this below. Fork-choice can just verify the format, and the weight, and it is valid enough.\r\n\r\nFork-choice accepting partially invalid attestations is not that bad. If an attestation has weight and is signed, it still helps determine the head. We shouldn't rely too much on full state details being available to process it in a large graph of forks.\r\nAnd if the attestation is really bad, it can be slashed. It having an invalid crosslink may hurt it for the attesters economical purposes as it won't get included on-chain, but it won't hurt the chain itself.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/536912461/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/536937111",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1408#issuecomment-536937111",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1408",
    "id": 536937111,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzNjkzNzExMQ==",
    "user": {
      "login": "mkalinin",
      "id": 1892772,
      "node_id": "MDQ6VXNlcjE4OTI3NzI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1892772?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mkalinin",
      "html_url": "https://github.com/mkalinin",
      "followers_url": "https://api.github.com/users/mkalinin/followers",
      "following_url": "https://api.github.com/users/mkalinin/following{/other_user}",
      "gists_url": "https://api.github.com/users/mkalinin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mkalinin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mkalinin/subscriptions",
      "organizations_url": "https://api.github.com/users/mkalinin/orgs",
      "repos_url": "https://api.github.com/users/mkalinin/repos",
      "events_url": "https://api.github.com/users/mkalinin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mkalinin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-01T08:50:49Z",
    "updated_at": "2019-10-01T08:50:49Z",
    "author_association": "MEMBER",
    "body": "> Fork-choice accepting partially invalid attestations is not that bad.\r\n\r\nWe might want to have same inputs for the fork choice disregard the source of attestations. I.e. it should have no matter whether attestation was gossiped or came within one of the blocks. If fork choice doesn't run those checks then we may get different heads depending on attestation source. \r\n\r\nAlso, if you've checked signature, don't you already have a state to check crosslink and checkpoits?\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/536937111/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/537512626",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1408#issuecomment-537512626",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1408",
    "id": 537512626,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzNzUxMjYyNg==",
    "user": {
      "login": "ericsson49",
      "id": 10426192,
      "node_id": "MDQ6VXNlcjEwNDI2MTky",
      "avatar_url": "https://avatars.githubusercontent.com/u/10426192?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ericsson49",
      "html_url": "https://github.com/ericsson49",
      "followers_url": "https://api.github.com/users/ericsson49/followers",
      "following_url": "https://api.github.com/users/ericsson49/following{/other_user}",
      "gists_url": "https://api.github.com/users/ericsson49/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ericsson49/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ericsson49/subscriptions",
      "organizations_url": "https://api.github.com/users/ericsson49/orgs",
      "repos_url": "https://api.github.com/users/ericsson49/repos",
      "events_url": "https://api.github.com/users/ericsson49/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ericsson49/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-02T14:15:03Z",
    "updated_at": "2019-10-02T14:15:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "There are two cases with partially valid attestations:\r\n* block-wise invalid but fork-choice-wise valid attestation, i.e. which affects fork choice, but cannot be included in a block\r\n* fork-choice-wise invalid but block-wise valid attestation, i.e. which can be included in a block, but shouldn't affect fork choice (of honest validators)\r\n\r\nThe second case doesn't look like a problem - the block is used as a transport for attestations, and invalid ones will be filtered out in on_attestation method. They could have come from wire as plain messages as well.\r\n\r\nThe first cases looks like a problem, since attestations affecting fork choice cannot be persisted, i.e. included in the block chain. And will be forgotten eventually. So, if an impact of such partially valid attestations is significant (i.e. leading to a situation where an alternate block becomes the head), then it looks like somewhat severe problem. Since the on-chain information cannot explain the choice made, in some cases.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/537512626/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/617599260",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1408#issuecomment-617599260",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1408",
    "id": 617599260,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxNzU5OTI2MA==",
    "user": {
      "login": "paulhauner",
      "id": 6660660,
      "node_id": "MDQ6VXNlcjY2NjA2NjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6660660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paulhauner",
      "html_url": "https://github.com/paulhauner",
      "followers_url": "https://api.github.com/users/paulhauner/followers",
      "following_url": "https://api.github.com/users/paulhauner/following{/other_user}",
      "gists_url": "https://api.github.com/users/paulhauner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paulhauner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paulhauner/subscriptions",
      "organizations_url": "https://api.github.com/users/paulhauner/orgs",
      "repos_url": "https://api.github.com/users/paulhauner/repos",
      "events_url": "https://api.github.com/users/paulhauner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paulhauner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-04-22T07:20:39Z",
    "updated_at": "2020-04-22T07:20:39Z",
    "author_association": "MEMBER",
    "body": "It's worth nothing that another difference between fork choice vs. block inclusion is this line in [validate_on_attestation](https://github.com/ethereum/eth2.0-specs/blob/dev/specs/phase0/fork-choice.md#validate_on_attestation):\r\n\r\n```python\r\n # Attestations must not be for blocks in the future. If not, the attestation should not be considered\r\nassert store.blocks[attestation.data.beacon_block_root].slot <= attestation.data.slot\r\n```\r\n\r\nThis condition is not checked for block inclusion or propagation on the gossip network.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/617599260/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/617934443",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1408#issuecomment-617934443",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1408",
    "id": 617934443,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxNzkzNDQ0Mw==",
    "user": {
      "login": "adiasg",
      "id": 25324105,
      "node_id": "MDQ6VXNlcjI1MzI0MTA1",
      "avatar_url": "https://avatars.githubusercontent.com/u/25324105?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adiasg",
      "html_url": "https://github.com/adiasg",
      "followers_url": "https://api.github.com/users/adiasg/followers",
      "following_url": "https://api.github.com/users/adiasg/following{/other_user}",
      "gists_url": "https://api.github.com/users/adiasg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adiasg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adiasg/subscriptions",
      "organizations_url": "https://api.github.com/users/adiasg/orgs",
      "repos_url": "https://api.github.com/users/adiasg/repos",
      "events_url": "https://api.github.com/users/adiasg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adiasg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-04-22T17:54:19Z",
    "updated_at": "2020-04-22T17:54:19Z",
    "author_association": "MEMBER",
    "body": "More differences:\r\n- In the [fork choice](https://github.com/ethereum/eth2.0-specs/blob/dev/specs/phase0/fork-choice.md#validate_on_attestation), but not in block processing:\r\n```python\r\nassert target.epoch == compute_epoch_at_slot(attestation.data.slot)\r\n```\r\n- In [block processing](https://github.com/ethereum/eth2.0-specs/blob/dev/specs/phase0/beacon-chain.md#attestations), but not the fork choice: \r\n```python\r\nassert data.index < get_committee_count_at_slot(state, data.slot)\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/617934443/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
