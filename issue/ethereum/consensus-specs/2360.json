{
  "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2360",
  "repository_url": "https://api.github.com/repos/ethereum/consensus-specs",
  "labels_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2360/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2360/comments",
  "events_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2360/events",
  "html_url": "https://github.com/ethereum/consensus-specs/issues/2360",
  "id": 868219278,
  "node_id": "MDU6SXNzdWU4NjgyMTkyNzg=",
  "number": 2360,
  "title": "Typing problems when a container is re-defined in a superseding phase",
  "user": {
    "login": "ericsson49",
    "id": 10426192,
    "node_id": "MDQ6VXNlcjEwNDI2MTky",
    "avatar_url": "https://avatars.githubusercontent.com/u/10426192?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ericsson49",
    "html_url": "https://github.com/ericsson49",
    "followers_url": "https://api.github.com/users/ericsson49/followers",
    "following_url": "https://api.github.com/users/ericsson49/following{/other_user}",
    "gists_url": "https://api.github.com/users/ericsson49/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ericsson49/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ericsson49/subscriptions",
    "organizations_url": "https://api.github.com/users/ericsson49/orgs",
    "repos_url": "https://api.github.com/users/ericsson49/repos",
    "events_url": "https://api.github.com/users/ericsson49/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ericsson49/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1244734333,
      "node_id": "MDU6TGFiZWwxMjQ0NzM0MzMz",
      "url": "https://api.github.com/repos/ethereum/consensus-specs/labels/general:presentation",
      "name": "general:presentation",
      "color": "2EA9DF",
      "default": false,
      "description": "Presentation (as opposed to content)"
    },
    {
      "id": 1295439957,
      "node_id": "MDU6TGFiZWwxMjk1NDM5OTU3",
      "url": "https://api.github.com/repos/ethereum/consensus-specs/labels/scope:CI/tests/pyspec",
      "name": "scope:CI/tests/pyspec",
      "color": "BDC0BA",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2021-04-26T21:31:20Z",
  "updated_at": "2021-04-27T14:15:18Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "Newer phases re-define containers like `BeaconState`, `BeaconBlockBody`, `AttestationData`, etc. A typical case is adding a new field, however, altering field name/type is possible too. This leads to typing problems in some cases (see below).\r\n\r\nCurrently, such problems are relevant in static type checking context only. However, pyspecs eventually may use `isinstance`, e.g. to discriminate `Union` components (see, for example, #2333). Thus, typing details may affect runtime behavior too..\r\n\r\nOne particular example is [update_pending_votes](https://github.com/ethereum/eth2.0-specs/blob/dev/specs/sharding/beacon-chain.md#update_pending_votes) in `sharding`. `BeaconBlockBody` contains a list of `phase0.Attestation`, which in turn contains `data` field of `phase0.AttestationData` type.\r\nRe-defined `sharding.process_attestation` calls `update_pending_votes`, which at some moment tries to access `shard_header_root`, which is defined in `sharding.AttestationData`, not in `phase0.AttestationData`. Additionally, the re-defined [sharding.AttestationData](https://github.com/ethereum/eth2.0-specs/blob/dev/specs/sharding/beacon-chain.md#attestationdata) is not a subclass of `phase0.AttestationData`.\r\n\r\nThere are similar problems with `Validator` in the `custody_game` phase.\r\n\r\nOne way to solve the problem could be to make `sharding.AttestationData` extend `phase0.AttestationData`. Then, `phase0.BeaconData` can \"legally\" contain them. However, one should additionally add a cast in `update_pending_votes`. Since, [typing.cast](https://docs.python.org/3.8/library/typing.html#typing.cast) doesn't check anything, one could do something like this:\r\n```\r\ndef update_pending_votes(state: BeaconState, attestation: phase0.Attestation) -> None:\r\n    assert isinstance(attestation.data, sharding.Attestation)\r\n    attestation_data = cast(Attestation, attestation.data)\r\n    ...\r\n```\r\n\r\nHowever, such approach won't always work. For example, [altair.BeaconState](https://github.com/ethereum/eth2.0-specs/blob/dev/specs/altair/beacon-chain.md#beaconstate) shouldn't perhaps be made to extend `phase0.BeaconState`, as it replaces `*_epoch_attestations` fields with `*_epoch_participation`.\r\n\r\nAnother problem is that mutable collections like `ssz.List` are [invariant](https://mypy.readthedocs.io/en/stable/generics.html#variance-of-generic-types), e.g. `List[sharding.Attestation,...]` would not be a subtype of `List[phase0.Attestation,...]`, even if one made `sharding.Attestation` extend `phase0.Attestation`. Testing/converting lengthy lists can be expensive in runtime too.\r\n\r\nAdditionally, runtime checks like `isinstance(attestation.data, sharding.AttestationData)` are not able to guarantee absence of such \"typing rules\" violations, while it's possible with static analysis.",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2360/reactions",
    "total_count": 1,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 1
  },
  "timeline_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2360/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/827163422",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2360#issuecomment-827163422",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2360",
    "id": 827163422,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyNzE2MzQyMg==",
    "user": {
      "login": "ericsson49",
      "id": 10426192,
      "node_id": "MDQ6VXNlcjEwNDI2MTky",
      "avatar_url": "https://avatars.githubusercontent.com/u/10426192?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ericsson49",
      "html_url": "https://github.com/ericsson49",
      "followers_url": "https://api.github.com/users/ericsson49/followers",
      "following_url": "https://api.github.com/users/ericsson49/following{/other_user}",
      "gists_url": "https://api.github.com/users/ericsson49/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ericsson49/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ericsson49/subscriptions",
      "organizations_url": "https://api.github.com/users/ericsson49/orgs",
      "repos_url": "https://api.github.com/users/ericsson49/repos",
      "events_url": "https://api.github.com/users/ericsson49/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ericsson49/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-04-26T21:40:06Z",
    "updated_at": "2021-04-26T21:40:06Z",
    "author_association": "CONTRIBUTOR",
    "body": "As a part of my research I plan to investigate customized typing rules, which model Python dynamic duck typing more precisely. I.e. it should be sometimes possible to prove that `Attestation::data` points to `sharding.AttestationData` instances only, under some conditions, of course (e.g. `BeaconBlockBody` is well-formed according to `sharding` \"rules\").",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/827163422/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/827175107",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2360#issuecomment-827175107",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2360",
    "id": 827175107,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyNzE3NTEwNw==",
    "user": {
      "login": "ericsson49",
      "id": 10426192,
      "node_id": "MDQ6VXNlcjEwNDI2MTky",
      "avatar_url": "https://avatars.githubusercontent.com/u/10426192?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ericsson49",
      "html_url": "https://github.com/ericsson49",
      "followers_url": "https://api.github.com/users/ericsson49/followers",
      "following_url": "https://api.github.com/users/ericsson49/following{/other_user}",
      "gists_url": "https://api.github.com/users/ericsson49/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ericsson49/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ericsson49/subscriptions",
      "organizations_url": "https://api.github.com/users/ericsson49/orgs",
      "repos_url": "https://api.github.com/users/ericsson49/repos",
      "events_url": "https://api.github.com/users/ericsson49/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ericsson49/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-04-26T22:06:42Z",
    "updated_at": "2021-04-26T22:16:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "One tricky aspect here is that static type checking depends on how actually full phase specification is constructed from relevant phase definitions.\r\n\r\nE.g. in the example above, one additionally re-define `Attestation`, `BeaconBlock`, `SignedBeaconBlock` classes in `sharding`, so that `sharding.AtestationData` is accessible from a beacon block. This will also require summoning other necessary methods from prior phases.\r\n\r\nSuch full phase specification construction can be automated (manual overrides may be necessary to deal with tricky cases), however, it will likely be a non-trivial procedure.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/827175107/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
