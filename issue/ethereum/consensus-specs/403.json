{
  "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/403",
  "repository_url": "https://api.github.com/repos/ethereum/consensus-specs",
  "labels_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/403/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/403/comments",
  "events_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/403/events",
  "html_url": "https://github.com/ethereum/consensus-specs/issues/403",
  "id": 396455237,
  "node_id": "MDU6SXNzdWUzOTY0NTUyMzc=",
  "number": 403,
  "title": "Mitigating attacks on light clients",
  "user": {
    "login": "vbuterin",
    "id": 2230894,
    "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vbuterin",
    "html_url": "https://github.com/vbuterin",
    "followers_url": "https://api.github.com/users/vbuterin/followers",
    "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
    "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
    "organizations_url": "https://api.github.com/users/vbuterin/orgs",
    "repos_url": "https://api.github.com/users/vbuterin/repos",
    "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vbuterin/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1063043868,
      "node_id": "MDU6TGFiZWwxMDYzMDQzODY4",
      "url": "https://api.github.com/repos/ethereum/consensus-specs/labels/general:enhancement",
      "name": "general:enhancement",
      "color": "086788",
      "default": false,
      "description": "New feature or request"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 8,
  "created_at": "2019-01-07T11:43:08Z",
  "updated_at": "2019-01-17T16:09:48Z",
  "closed_at": "2019-01-17T16:09:48Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "Light clients could theoretically verify the beacon chain with a reasonable degree of security at very low cost by verifying only one crosslink committee per epoch, or even more rarely. However, at present this approach is has a few key weaknesses.\r\n\r\nFirst, it requires the light client to track the entire validator set (up to ~800 MB of state in the worst case), to be able to compute the validator shuffling. Note that [alternative shuffling algos](https://github.com/ethereum/eth2.0-specs/issues/323) do not fix this problem, because the step of filtering out inactive validators still requires a pass through the entire validator set.\r\n\r\nSecond, it is potentially insecure, because of the following attack. A validator could choose a seed, compute the validator set shuffle assuming a particular validator set size, and then selectively censor validator set changes to make the shuffle match up with their subset. For example, if an attacker has all validator slots with IDs 0 mod 10 (for simplicity, realistically they might have a more chaotic combination with similar spacing), then to make a randomly selected committee of 128 match up with them, then as long as at least 9 validators activated or exited between each selected committee member and the next, they could selectively censor those activations and exits to make the committee match up perfectly with their own validators.\r\n\r\nWe can solve these issues as follows. First, we can keep track of the last four epoch-boundary `validator_registry` and `validator_balances` root hashes in the state, and we can mix the fourth last one (ie. the same one from where the validator set comes) into the shuffling seed. This means that the shuffling will now depend on the exact validator set used, so it will not be possible to manipulate the validator set to target a specific shuffling that the attacker already knows.\r\n\r\nSecond, in addition to adopting the number-theoretic or other pointwise-evaluable shuffle, we can remove the need for the validator set filtering step as follows. We keep track of another two arrays in the state, one for the historical total length of the validator set, the other for the historical length of the active validator set size. For attack mitigation reasons we can mix both of these values into the shuffling seed as well.\r\n\r\nWe compute the shuffle over `[0...total_length-1]` (so it includes all validators, not distinguishing active and inactive). To restrict the shuffle to active validators, we reuse the trick that we used to create number-theoretic shuffles for arbitrary lengths: if `p` is the permutation function over `[0...total_length-1]`, then to calculate the _actual_ permutation for `x` we first try `p(x)`, then if `p(x)` is not a valid result try `p(p(x))`, if still incorrect try `p(p(p(x)))`, etc (in practice, \"not a valid result\" means \"is not an active validator\" if evaluating the shuffle in one direction, and \"is less than the active validator count\" in the other direction).\r\n\r\nNow, a light client can skip ahead by asking for a future block header, use the information in the block header to compute the indices for a committee, ask for Merkle branches to prove the committee, and then ask for those same Merkle branches of _the validator set the client already knows about_ to verify that the validator set has not changed too much.",
  "closed_by": {
    "login": "JustinDrake",
    "id": 731743,
    "node_id": "MDQ6VXNlcjczMTc0Mw==",
    "avatar_url": "https://avatars.githubusercontent.com/u/731743?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/JustinDrake",
    "html_url": "https://github.com/JustinDrake",
    "followers_url": "https://api.github.com/users/JustinDrake/followers",
    "following_url": "https://api.github.com/users/JustinDrake/following{/other_user}",
    "gists_url": "https://api.github.com/users/JustinDrake/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/JustinDrake/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/JustinDrake/subscriptions",
    "organizations_url": "https://api.github.com/users/JustinDrake/orgs",
    "repos_url": "https://api.github.com/users/JustinDrake/repos",
    "events_url": "https://api.github.com/users/JustinDrake/events{/privacy}",
    "received_events_url": "https://api.github.com/users/JustinDrake/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/403/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/403/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/452666152",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/403#issuecomment-452666152",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/403",
    "id": 452666152,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MjY2NjE1Mg==",
    "user": {
      "login": "JustinDrake",
      "id": 731743,
      "node_id": "MDQ6VXNlcjczMTc0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/731743?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JustinDrake",
      "html_url": "https://github.com/JustinDrake",
      "followers_url": "https://api.github.com/users/JustinDrake/followers",
      "following_url": "https://api.github.com/users/JustinDrake/following{/other_user}",
      "gists_url": "https://api.github.com/users/JustinDrake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JustinDrake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JustinDrake/subscriptions",
      "organizations_url": "https://api.github.com/users/JustinDrake/orgs",
      "repos_url": "https://api.github.com/users/JustinDrake/repos",
      "events_url": "https://api.github.com/users/JustinDrake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JustinDrake/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-09T11:35:42Z",
    "updated_at": "2019-01-09T11:35:42Z",
    "author_association": "MEMBER",
    "body": "The `p(p(p(x)))` idea is definitely clever :) Alternative idea below.\r\n\r\nAdd `active_pubkeys: ['uint384']` to the `state` where:\r\n\r\n* `active_pubkeys` starts off as `[]`\r\n* when a validator is activated its pubkey is appended to `active_pubkeys`\r\n* when a validator is deactivated its entry is overwritten by moving the last entry of `active_pubkeys` to its place\r\n\r\n(Notice that updates to `active_pubkeys` are \"in place\" to be Merkleisation friendly.) Now shuffles are done on `active_pubkeys` (rather than `validator_registry`), avoiding the performance hit of the `p(p(p(x)))` trick.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/452666152/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/453173250",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/403#issuecomment-453173250",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/403",
    "id": 453173250,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MzE3MzI1MA==",
    "user": {
      "login": "vbuterin",
      "id": 2230894,
      "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vbuterin",
      "html_url": "https://github.com/vbuterin",
      "followers_url": "https://api.github.com/users/vbuterin/followers",
      "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
      "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
      "organizations_url": "https://api.github.com/users/vbuterin/orgs",
      "repos_url": "https://api.github.com/users/vbuterin/repos",
      "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vbuterin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-10T17:04:15Z",
    "updated_at": "2019-01-10T17:04:15Z",
    "author_association": "MEMBER",
    "body": "Workable, but having three validator state arrays is definitely not the best thing.....",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/453173250/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/453308116",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/403#issuecomment-453308116",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/403",
    "id": 453308116,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MzMwODExNg==",
    "user": {
      "login": "JustinDrake",
      "id": 731743,
      "node_id": "MDQ6VXNlcjczMTc0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/731743?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JustinDrake",
      "html_url": "https://github.com/JustinDrake",
      "followers_url": "https://api.github.com/users/JustinDrake/followers",
      "following_url": "https://api.github.com/users/JustinDrake/following{/other_user}",
      "gists_url": "https://api.github.com/users/JustinDrake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JustinDrake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JustinDrake/subscriptions",
      "organizations_url": "https://api.github.com/users/JustinDrake/orgs",
      "repos_url": "https://api.github.com/users/JustinDrake/repos",
      "events_url": "https://api.github.com/users/JustinDrake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JustinDrake/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-10T23:56:13Z",
    "updated_at": "2019-01-10T23:56:13Z",
    "author_association": "MEMBER",
    "body": "Do you mean from an aesthetic point of view? I does save from adding various bits and pieces to the `state`:\r\n\r\n* last four epoch-boundary `validator_registry`\r\n* last four epoch-boundary `validator_balances` (BTW, why is that required?)\r\n* historical size of the validator set\r\n* historical size of the active validator set",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/453308116/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/453764799",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/403#issuecomment-453764799",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/403",
    "id": 453764799,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1Mzc2NDc5OQ==",
    "user": {
      "login": "vbuterin",
      "id": 2230894,
      "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vbuterin",
      "html_url": "https://github.com/vbuterin",
      "followers_url": "https://api.github.com/users/vbuterin/followers",
      "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
      "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
      "organizations_url": "https://api.github.com/users/vbuterin/orgs",
      "repos_url": "https://api.github.com/users/vbuterin/repos",
      "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vbuterin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-12T17:19:06Z",
    "updated_at": "2019-01-12T17:19:06Z",
    "author_association": "MEMBER",
    "body": "Would the `active_pubkeys` be updated per-slot, so we would need to do a full pass through the validator registry every slot to determine what gets added and removed? Or would it be a list of the pubkeys that _will be active_ `EXIT_ENTRY_DELAY` slots from now? (which seems cleaner, but would mean that we need a list of historical roots of the tree).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/453764799/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/453796140",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/403#issuecomment-453796140",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/403",
    "id": 453796140,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1Mzc5NjE0MA==",
    "user": {
      "login": "vbuterin",
      "id": 2230894,
      "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vbuterin",
      "html_url": "https://github.com/vbuterin",
      "followers_url": "https://api.github.com/users/vbuterin/followers",
      "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
      "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
      "organizations_url": "https://api.github.com/users/vbuterin/orgs",
      "repos_url": "https://api.github.com/users/vbuterin/repos",
      "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vbuterin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-13T02:15:25Z",
    "updated_at": "2019-01-13T02:15:34Z",
    "author_association": "MEMBER",
    "body": "I'm ok with it from an aesthetic point of view, it's more that the state size goes up yet again (we can mitigate this by storing _indices_ and not pubkeys, but still.....).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/453796140/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/453953031",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/403#issuecomment-453953031",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/403",
    "id": 453953031,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1Mzk1MzAzMQ==",
    "user": {
      "login": "JustinDrake",
      "id": 731743,
      "node_id": "MDQ6VXNlcjczMTc0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/731743?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JustinDrake",
      "html_url": "https://github.com/JustinDrake",
      "followers_url": "https://api.github.com/users/JustinDrake/followers",
      "following_url": "https://api.github.com/users/JustinDrake/following{/other_user}",
      "gists_url": "https://api.github.com/users/JustinDrake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JustinDrake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JustinDrake/subscriptions",
      "organizations_url": "https://api.github.com/users/JustinDrake/orgs",
      "repos_url": "https://api.github.com/users/JustinDrake/repos",
      "events_url": "https://api.github.com/users/JustinDrake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JustinDrake/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-14T10:06:29Z",
    "updated_at": "2019-01-14T10:20:41Z",
    "author_association": "MEMBER",
    "body": "> Would the `active_pubkeys` be updated per-slot\r\n\r\nThere are four events that trigger a validator set change 1) activations 2) exits 3) ejections 4) penalizations. All but penalizations happen at epoch boundaries. I'm therefore tempted to make the validator set change also happen at epoch boundaries. (Specifically, in `exit_validator` replace `validator.exit_slot = state.slot + ENTRY_EXIT_DELAY` with `validator.exit_slot = ((state.slot - 1) // EPOCH_LENGTH + 1) * EPOCH_LENGTH + ENTRY_EXIT_DELAY`.) That way `active_pubkeys` only gets updated per-epoch.\r\n\r\n> full pass through the validator registry [...] to determine what gets added and removed\r\n\r\nA full pass through the validator registry is never required to update `active_pubkeys`. Indeed, it suffices to make local updates to `active_pubkeys` whenever `validator_registry_delta_chain_tip` is updated (in `activate_validator` and `exit_validator`).\r\n\r\n> Or would it be a list of the pubkeys that will be active `EXIT_ENTRY_DELAY` slots from now?\r\n\r\nHaving light clients know at least `EXIT_ENTRY_DELAY` slots ahead of time of validator set changes is definitely valuable for always-online light clients. Indeed, it means that an attacker grinding on the active validator set cannot fool always-online light clients. The good news is that this information is already communicated early with `validator_registry_delta_chain_tip`.\r\n\r\n> we can mitigate this by storing indices and not pubkeys\r\n\r\nThe reason I went with pubkeys as opposed to indices is so that light-clients don't have to bother with `validator_registry`. Indeed, with indices light clients need one Merkle path per index, and then another Merkle path for the corresponding entry in the registry. It may make sense to add a `penalized: bool` for every entry in `active_pubkeys` so that light clients know to ignore votes from penalized validators.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/453953031/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/454263506",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/403#issuecomment-454263506",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/403",
    "id": 454263506,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NDI2MzUwNg==",
    "user": {
      "login": "vbuterin",
      "id": 2230894,
      "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vbuterin",
      "html_url": "https://github.com/vbuterin",
      "followers_url": "https://api.github.com/users/vbuterin/followers",
      "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
      "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
      "organizations_url": "https://api.github.com/users/vbuterin/orgs",
      "repos_url": "https://api.github.com/users/vbuterin/repos",
      "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vbuterin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-15T04:28:56Z",
    "updated_at": "2019-01-15T04:28:56Z",
    "author_association": "MEMBER",
    "body": "> A full pass through the validator registry is never required to update active_pubkeys. Indeed, it suffices to make local updates to active_pubkeys whenever validator_registry_delta_chain_tip is updated (in activate_validator and exit_validator).\r\n\r\nRight but my point is that if we do it that way, then the `active_pubkeys` array in the state would represent the active pubkeys `ENTRY_EXIT_SLOTS` in the future, not in the present. So if we want the _current_ active pubkey set to be accessible, we need to store the set from the last four epochs.\r\n\r\n> The reason I went with pubkeys as opposed to indices is so that light-clients don't have to bother with validator_registry\r\n\r\nTrue, though for security we would need to add `penalized:bool` and also balances, as light clients need to take those into account to avoid being hit by a <1/3 attack consisting of low-balance deposit slots. And at that point, it feels much simpler to just store an index and ask validators to also check this other information.\r\n\r\nThat said, this would lead to light clients needing to download a bunch of Merkle branches, at which point it's not clear that this approach to light clients is even better than the old approach of requiring them to store and update the entire validator set and use that to calculate committees.....",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/454263506/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/455229259",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/403#issuecomment-455229259",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/403",
    "id": 455229259,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NTIyOTI1OQ==",
    "user": {
      "login": "JustinDrake",
      "id": 731743,
      "node_id": "MDQ6VXNlcjczMTc0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/731743?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JustinDrake",
      "html_url": "https://github.com/JustinDrake",
      "followers_url": "https://api.github.com/users/JustinDrake/followers",
      "following_url": "https://api.github.com/users/JustinDrake/following{/other_user}",
      "gists_url": "https://api.github.com/users/JustinDrake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JustinDrake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JustinDrake/subscriptions",
      "organizations_url": "https://api.github.com/users/JustinDrake/orgs",
      "repos_url": "https://api.github.com/users/JustinDrake/repos",
      "events_url": "https://api.github.com/users/JustinDrake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JustinDrake/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-17T16:09:48Z",
    "updated_at": "2019-01-17T16:09:48Z",
    "author_association": "MEMBER",
    "body": "Closing in favour of #459 :)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/455229259/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
