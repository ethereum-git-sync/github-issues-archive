{
  "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1386",
  "repository_url": "https://api.github.com/repos/ethereum/consensus-specs",
  "labels_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1386/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1386/comments",
  "events_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1386/events",
  "html_url": "https://github.com/ethereum/consensus-specs/issues/1386",
  "id": 486315589,
  "node_id": "MDU6SXNzdWU0ODYzMTU1ODk=",
  "number": 1386,
  "title": "Refine beacon fork choice rule to take into account skip slots",
  "user": {
    "login": "JustinDrake",
    "id": 731743,
    "node_id": "MDQ6VXNlcjczMTc0Mw==",
    "avatar_url": "https://avatars.githubusercontent.com/u/731743?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/JustinDrake",
    "html_url": "https://github.com/JustinDrake",
    "followers_url": "https://api.github.com/users/JustinDrake/followers",
    "following_url": "https://api.github.com/users/JustinDrake/following{/other_user}",
    "gists_url": "https://api.github.com/users/JustinDrake/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/JustinDrake/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/JustinDrake/subscriptions",
    "organizations_url": "https://api.github.com/users/JustinDrake/orgs",
    "repos_url": "https://api.github.com/users/JustinDrake/repos",
    "events_url": "https://api.github.com/users/JustinDrake/events{/privacy}",
    "received_events_url": "https://api.github.com/users/JustinDrake/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1437528763,
      "node_id": "MDU6TGFiZWwxNDM3NTI4NzYz",
      "url": "https://api.github.com/repos/ethereum/consensus-specs/labels/post-freeze%20(substantive)",
      "name": "post-freeze (substantive)",
      "color": "991a40",
      "default": false,
      "description": "Substantive consensus change non-critical for long-lived cross-client testnets"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 7,
  "created_at": "2019-08-28T11:15:17Z",
  "updated_at": "2019-09-03T18:08:41Z",
  "closed_at": "2019-09-03T18:08:41Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "The beacon [fork choice rule](https://github.com/ethereum/eth2.0-specs/blob/dev/specs/core/0_fork-choice.md#get_head) currently does not use the (implicit) slot corresponding to an attestation (which can be computed using `get_attestation_data_slot`). This means that the beacon fork choice rule is discarding information about skip slots, and can be made more granular.\r\n\r\nThe suggested fix is to replace the `LatestMessage` container with:\r\n\r\n```\r\nclass BeaconCheckpoint(Container):\r\n    slot: Slot\r\n    root: Hash\r\n```\r\n\r\n(I.e. replace `epoch` with `slot`. For clarity, we could rename `Checkpoint`â€”e.g. to `FFGCheckpoint`, `EpochCheckpoint`, `FinalityCheckpoint`.) We then make `get_head` return a `BeaconCheckpoint` (as opposed to a plain `Hash`).\r\n\r\nIn addition to changing the fork choice rule, we could also replace `AttestationData. beacon_block_root` by a `BeaconCheckpoint` to make the slot explicit. This is something that @djrtwo suggested we do, and I now think it is the \"natural\" thing to do. (Part of the reason it is natural is that we want shard chains to vote on `ShardCheckpoint`s, not plain block roots which do not take into account skip slots.)",
  "closed_by": {
    "login": "JustinDrake",
    "id": 731743,
    "node_id": "MDQ6VXNlcjczMTc0Mw==",
    "avatar_url": "https://avatars.githubusercontent.com/u/731743?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/JustinDrake",
    "html_url": "https://github.com/JustinDrake",
    "followers_url": "https://api.github.com/users/JustinDrake/followers",
    "following_url": "https://api.github.com/users/JustinDrake/following{/other_user}",
    "gists_url": "https://api.github.com/users/JustinDrake/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/JustinDrake/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/JustinDrake/subscriptions",
    "organizations_url": "https://api.github.com/users/JustinDrake/orgs",
    "repos_url": "https://api.github.com/users/JustinDrake/repos",
    "events_url": "https://api.github.com/users/JustinDrake/events{/privacy}",
    "received_events_url": "https://api.github.com/users/JustinDrake/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1386/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1386/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/525901372",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1386#issuecomment-525901372",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1386",
    "id": 525901372,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyNTkwMTM3Mg==",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-28T20:05:28Z",
    "updated_at": "2019-08-28T20:05:45Z",
    "author_association": "MEMBER",
    "body": "Good catch!\r\n\r\nI'm not certain there is value in introducing a new SSZ container into the `AttestationData`, especially named a `Checkpoint` in this case is it isn't really used to checkpoint anything.\r\n\r\nAlso, I think the granularity of `slot` for `LatestMessage` is incorrect. We want the epoch of the attestation slot rather than the granular slot. If the validator equivocates by making a message for a later slot in the same epoch, this second message for the same epoch should not override the prior fork choice vote. A vote should be the first vote in an epoch.\r\n\r\nI think we should do the following:\r\n\r\n* keep `LatestMessage` in the fork choice spec and keep it `epoch`-based\r\n* add `slot` to `AttestationData`, explicitly making the `slot` of the assigned committee available for quick lookups (when considering fork choice, slashing lookups, etc). This also will pair well with easily deciding if a fork choice vote is stale (wrt the fork choice change being proposed to solve the recent flip flop attack) without having to do state lookups\r\n* Assign `latest_message.epoch = compute_epoch_of_slot(attestation.data.slot)` and only update a validator's latest message if the epoch of the new_attestation slot is greater than the latest message",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/525901372/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/525908123",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1386#issuecomment-525908123",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1386",
    "id": 525908123,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyNTkwODEyMw==",
    "user": {
      "login": "terencechain",
      "id": 21316537,
      "node_id": "MDQ6VXNlcjIxMzE2NTM3",
      "avatar_url": "https://avatars.githubusercontent.com/u/21316537?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/terencechain",
      "html_url": "https://github.com/terencechain",
      "followers_url": "https://api.github.com/users/terencechain/followers",
      "following_url": "https://api.github.com/users/terencechain/following{/other_user}",
      "gists_url": "https://api.github.com/users/terencechain/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/terencechain/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/terencechain/subscriptions",
      "organizations_url": "https://api.github.com/users/terencechain/orgs",
      "repos_url": "https://api.github.com/users/terencechain/repos",
      "events_url": "https://api.github.com/users/terencechain/events{/privacy}",
      "received_events_url": "https://api.github.com/users/terencechain/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-28T20:25:04Z",
    "updated_at": "2019-08-28T20:25:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "I'm +1 on adding `slot` back to `AttestationData `, it also does help to simply client codebase a lot. There's many occurrences we have to use `get_attestation_data_slot` just to get the slot of attestation for house keeping logic. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/525908123/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/525969021",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1386#issuecomment-525969021",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1386",
    "id": 525969021,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyNTk2OTAyMQ==",
    "user": {
      "login": "JustinDrake",
      "id": 731743,
      "node_id": "MDQ6VXNlcjczMTc0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/731743?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JustinDrake",
      "html_url": "https://github.com/JustinDrake",
      "followers_url": "https://api.github.com/users/JustinDrake/followers",
      "following_url": "https://api.github.com/users/JustinDrake/following{/other_user}",
      "gists_url": "https://api.github.com/users/JustinDrake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JustinDrake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JustinDrake/subscriptions",
      "organizations_url": "https://api.github.com/users/JustinDrake/orgs",
      "repos_url": "https://api.github.com/users/JustinDrake/repos",
      "events_url": "https://api.github.com/users/JustinDrake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JustinDrake/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-29T00:07:50Z",
    "updated_at": "2019-08-29T00:07:50Z",
    "author_association": "MEMBER",
    "body": "> the granularity of `slot` for `LatestMessage` is incorrect\r\n\r\nDisagree :) Consider the following situation. You have the genesis block `G` at slot 0, a block `B` at slot 1 (building on `G`), and a \"virtual\" skip block `S` also at slot 1 (building on `G`). You've received 3 attestations so farâ€”1 attestation has GHOST vote for `B`, and 2 attestations have GHOST votes for `S`. Currently `get_head` returns `signing_root(B)`. This is incorrect. Instead, `get_head` should return `(Slot(1), signing_root(G))`.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/525969021/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/526055863",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1386#issuecomment-526055863",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1386",
    "id": 526055863,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyNjA1NTg2Mw==",
    "user": {
      "login": "mkalinin",
      "id": 1892772,
      "node_id": "MDQ6VXNlcjE4OTI3NzI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1892772?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mkalinin",
      "html_url": "https://github.com/mkalinin",
      "followers_url": "https://api.github.com/users/mkalinin/followers",
      "following_url": "https://api.github.com/users/mkalinin/following{/other_user}",
      "gists_url": "https://api.github.com/users/mkalinin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mkalinin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mkalinin/subscriptions",
      "organizations_url": "https://api.github.com/users/mkalinin/orgs",
      "repos_url": "https://api.github.com/users/mkalinin/repos",
      "events_url": "https://api.github.com/users/mkalinin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mkalinin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-29T07:08:40Z",
    "updated_at": "2019-08-29T07:08:40Z",
    "author_association": "MEMBER",
    "body": "> This is incorrect. Instead, `get_head` should return `(Slot(1), signing_root(G))`.\r\n\r\nIsn't there is a rule that the longest chain always wins?\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/526055863/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/526203178",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1386#issuecomment-526203178",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1386",
    "id": 526203178,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyNjIwMzE3OA==",
    "user": {
      "login": "JustinDrake",
      "id": 731743,
      "node_id": "MDQ6VXNlcjczMTc0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/731743?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JustinDrake",
      "html_url": "https://github.com/JustinDrake",
      "followers_url": "https://api.github.com/users/JustinDrake/followers",
      "following_url": "https://api.github.com/users/JustinDrake/following{/other_user}",
      "gists_url": "https://api.github.com/users/JustinDrake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JustinDrake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JustinDrake/subscriptions",
      "organizations_url": "https://api.github.com/users/JustinDrake/orgs",
      "repos_url": "https://api.github.com/users/JustinDrake/repos",
      "events_url": "https://api.github.com/users/JustinDrake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JustinDrake/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-29T14:10:54Z",
    "updated_at": "2019-08-29T14:10:54Z",
    "author_association": "MEMBER",
    "body": "> Isn't there is a rule that the longest chain always wins?\r\n\r\nAs I'm sure you know, Eth2 does not have a longest chain rule like Bitcoin. Instead, it uses LMD GHOST (or [FMD GHOST](https://ethresear.ch/t/decoy-flip-flop-attack-on-lmd-ghost/6001)).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/526203178/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/526661657",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1386#issuecomment-526661657",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1386",
    "id": 526661657,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyNjY2MTY1Nw==",
    "user": {
      "login": "mkalinin",
      "id": 1892772,
      "node_id": "MDQ6VXNlcjE4OTI3NzI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1892772?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mkalinin",
      "html_url": "https://github.com/mkalinin",
      "followers_url": "https://api.github.com/users/mkalinin/followers",
      "following_url": "https://api.github.com/users/mkalinin/following{/other_user}",
      "gists_url": "https://api.github.com/users/mkalinin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mkalinin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mkalinin/subscriptions",
      "organizations_url": "https://api.github.com/users/mkalinin/orgs",
      "repos_url": "https://api.github.com/users/mkalinin/repos",
      "events_url": "https://api.github.com/users/mkalinin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mkalinin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-30T16:17:38Z",
    "updated_at": "2019-08-30T16:17:38Z",
    "author_association": "MEMBER",
    "body": "Sorry, I must be saying _the heaviest chain_, of course. And the _heaviest chain_ in your case seem to be the one that have more votes, i.e. `G` is the head disregarding slot/epoch of the votes made to `G`. From my understanding in terms of fork choice slot and/or epoch don't matter, only _a chain of block roots_ and votes made to those roots has valuable meaning. Am I missing anything?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/526661657/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/527573830",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1386#issuecomment-527573830",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1386",
    "id": 527573830,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyNzU3MzgzMA==",
    "user": {
      "login": "JustinDrake",
      "id": 731743,
      "node_id": "MDQ6VXNlcjczMTc0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/731743?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JustinDrake",
      "html_url": "https://github.com/JustinDrake",
      "followers_url": "https://api.github.com/users/JustinDrake/followers",
      "following_url": "https://api.github.com/users/JustinDrake/following{/other_user}",
      "gists_url": "https://api.github.com/users/JustinDrake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JustinDrake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JustinDrake/subscriptions",
      "organizations_url": "https://api.github.com/users/JustinDrake/orgs",
      "repos_url": "https://api.github.com/users/JustinDrake/repos",
      "events_url": "https://api.github.com/users/JustinDrake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JustinDrake/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-09-03T18:08:41Z",
    "updated_at": "2019-09-03T18:08:41Z",
    "author_association": "MEMBER",
    "body": "Closing in favour of #1394. After discussing with Danny I agree that the\r\n\r\n```\r\nclass BeaconCheckpoint(Container):\r\n    slot: Slot\r\n    root: Hash\r\n```\r\n\r\napproach is wrong :)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/527573830/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
