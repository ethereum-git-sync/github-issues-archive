{
  "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1456",
  "repository_url": "https://api.github.com/repos/ethereum/consensus-specs",
  "labels_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1456/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1456/comments",
  "events_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1456/events",
  "html_url": "https://github.com/ethereum/consensus-specs/issues/1456",
  "id": 513563791,
  "node_id": "MDU6SXNzdWU1MTM1NjM3OTE=",
  "number": 1456,
  "title": "Problems with attestations from incompatible forks",
  "user": {
    "login": "ericsson49",
    "id": 10426192,
    "node_id": "MDQ6VXNlcjEwNDI2MTky",
    "avatar_url": "https://avatars.githubusercontent.com/u/10426192?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ericsson49",
    "html_url": "https://github.com/ericsson49",
    "followers_url": "https://api.github.com/users/ericsson49/followers",
    "following_url": "https://api.github.com/users/ericsson49/following{/other_user}",
    "gists_url": "https://api.github.com/users/ericsson49/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ericsson49/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ericsson49/subscriptions",
    "organizations_url": "https://api.github.com/users/ericsson49/orgs",
    "repos_url": "https://api.github.com/users/ericsson49/repos",
    "events_url": "https://api.github.com/users/ericsson49/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ericsson49/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1324776822,
      "node_id": "MDU6TGFiZWwxMzI0Nzc2ODIy",
      "url": "https://api.github.com/repos/ethereum/consensus-specs/labels/scope:fork-choice",
      "name": "scope:fork-choice",
      "color": "81C7D4",
      "default": false,
      "description": ""
    },
    {
      "id": 1725628406,
      "node_id": "MDU6TGFiZWwxNzI1NjI4NDA2",
      "url": "https://api.github.com/repos/ethereum/consensus-specs/labels/phase0",
      "name": "phase0",
      "color": "c2e0c6",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 7,
  "created_at": "2019-10-28T21:19:02Z",
  "updated_at": "2020-05-07T15:41:25Z",
  "closed_at": "2020-05-07T15:41:25Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "Attester and proposer roles assignment are determined by a shuffling of a set of active validators, which depends on a seed. The seed and the set of active validators, in their turn, are detemined by a chain of blocks (randao, slashings, deposits, exits, etc). An attestation data doesn't contain indices of a block proposer and attesters in an explicit form, they are (re)calculated based on a state and aggregation_bits.\r\n\r\nThat means it's important that a state that is used to restore attester and proposer indices contain the right seed and the right set of active validators. If it doesn't hold, then it can lead to problems (described later).\r\n\r\nWhen an attestation is created or consumed/processed, the reference states (used to calculate proposer/attesters for the attestation's slot) will be different. However, that doesn't necessarily mean the seed and the set of active validators will differ too. As proposer and attester assignment for an epoch are determined at the beginning of the previous epoch, some beacon states can lead to the same assignments. Let's call such states compatible.\r\n\r\nFor example, when an attester creates an attestation, the reference state is the head state (with slot transitions applied up to the current slot). When an attestation is used in a fork choice, the reference state is the state at the beginning of the target epoch. When an attestation is to be included in a block or is processed as a part of a block, the reference state is the state of the block's parent with slot transitions applied. So, in general, the states can be incompatible between each other, i.e. having different seeds and/or sets of active validators. And thus leading to incorrect reconstruction of attester and proposer indices.\r\n\r\nSuch incompatibility can arise when there has been a fork and an attestation referencing one branch of the fork is inculded in a block from another branch of the fork. If the fork happend in an epoch before the previous epoch, then it's enough time that differences in block chains start to affect shufflings.\r\n\r\nPotential problems:\r\n* during [process_attestation(state, attestation)](https://github.com/ethereum/eth2.0-specs/blob/dev/specs/core/0_beacon-chain.md#attestations), if the state is incompatible with the attestation's target state, the aggregation_bits will translate to a wrong set of validator indices. It will most likely mean the attestation signature check will fail, since another set of public keys will be used to construct an aggregate key. Such attestation cannot be included in a block (or a block with such an attestation will be rejected by correct nodes). It's not a problem. However, a node can decide that the attestation signature is wrong (and, for example, punish the attestation's sender in some way). But the real problem is that the attestation validity is verified against the wrong state.\r\n* another possibility is that the signature validation can succeed. It could be a quite rare situation, but two different shufflings can still have some intersecting subsets. E.g. a validator with index 1 can happen to be at the same position at both shufflings (while other positions being different). So, if aggregation_bits contain only this position, then the public keys will be the same with both states. That is a real problem, since the state incompatibility can sneak undetected.\r\n* an additional problem, when the incompatibility is not prevented by the signature check, is that the beacon proposer index will be wrong most likely, since it's calculated based on the incompatible state (i.e. different shuffling).\r\n\r\nSo, in order to prevent such problems we suggest that only attestations from compatible states can be included in blocks. And the appropriate check should be implemented as a part of [process_attestation](https://github.com/ethereum/eth2.0-specs/blob/dev/specs/core/0_beacon-chain.md#attestations) method (and/or [get_indexed_attestation method](https://github.com/ethereum/eth2.0-specs/blob/dev/specs/core/0_beacon-chain.md#get_indexed_attestation)). Most likely such attestations cannot be included anyway, but when they can it leads to a covert problem (wrong proposer index in a pending attestation).",
  "closed_by": {
    "login": "djrtwo",
    "id": 1433595,
    "node_id": "MDQ6VXNlcjE0MzM1OTU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/djrtwo",
    "html_url": "https://github.com/djrtwo",
    "followers_url": "https://api.github.com/users/djrtwo/followers",
    "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
    "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
    "organizations_url": "https://api.github.com/users/djrtwo/orgs",
    "repos_url": "https://api.github.com/users/djrtwo/repos",
    "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
    "received_events_url": "https://api.github.com/users/djrtwo/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1456/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1456/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/548791564",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1456#issuecomment-548791564",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1456",
    "id": 548791564,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0ODc5MTU2NA==",
    "user": {
      "login": "protolambda",
      "id": 19571989,
      "node_id": "MDQ6VXNlcjE5NTcxOTg5",
      "avatar_url": "https://avatars.githubusercontent.com/u/19571989?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/protolambda",
      "html_url": "https://github.com/protolambda",
      "followers_url": "https://api.github.com/users/protolambda/followers",
      "following_url": "https://api.github.com/users/protolambda/following{/other_user}",
      "gists_url": "https://api.github.com/users/protolambda/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/protolambda/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/protolambda/subscriptions",
      "organizations_url": "https://api.github.com/users/protolambda/orgs",
      "repos_url": "https://api.github.com/users/protolambda/repos",
      "events_url": "https://api.github.com/users/protolambda/events{/privacy}",
      "received_events_url": "https://api.github.com/users/protolambda/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-01T13:41:37Z",
    "updated_at": "2019-11-01T13:41:37Z",
    "author_association": "MEMBER",
    "body": ">  if the state is incompatible with the attestation's target state, the aggregation_bits will translate to a wrong set of validator indices\r\n\r\nA fork should not change the validity of attestations before the fork start, unless that's the intention of the fork. I don't think the states will be incompatible; ensuring the active validators are the same across a fork version is part of forking, similar to the seed look-ahead, it's part of knowing what to validate before it's too late to do anything. If a fork would change the active validators or the shuffling etc., it should do so only after a look-ahead period has passed since the new rules are applied.\r\n\r\n> another possibility is that the signature validation can succeed\r\n\r\nAre we talking about a fork induced difference here? If so, the sig validation cannot succeed, since you sign with the fork version in the signature domain (== domain type concatenated with fork version)\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/548791564/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/548800550",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1456#issuecomment-548800550",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1456",
    "id": 548800550,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0ODgwMDU1MA==",
    "user": {
      "login": "ericsson49",
      "id": 10426192,
      "node_id": "MDQ6VXNlcjEwNDI2MTky",
      "avatar_url": "https://avatars.githubusercontent.com/u/10426192?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ericsson49",
      "html_url": "https://github.com/ericsson49",
      "followers_url": "https://api.github.com/users/ericsson49/followers",
      "following_url": "https://api.github.com/users/ericsson49/following{/other_user}",
      "gists_url": "https://api.github.com/users/ericsson49/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ericsson49/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ericsson49/subscriptions",
      "organizations_url": "https://api.github.com/users/ericsson49/orgs",
      "repos_url": "https://api.github.com/users/ericsson49/repos",
      "events_url": "https://api.github.com/users/ericsson49/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ericsson49/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-01T14:07:51Z",
    "updated_at": "2019-11-01T14:07:51Z",
    "author_association": "CONTRIBUTOR",
    "body": "The issue is not about manual forks, but about the forks in the sense of the fork-choice spec, i.e. situations where a block has two or more immediate descendants.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/548800550/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/548803163",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1456#issuecomment-548803163",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1456",
    "id": 548803163,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0ODgwMzE2Mw==",
    "user": {
      "login": "protolambda",
      "id": 19571989,
      "node_id": "MDQ6VXNlcjE5NTcxOTg5",
      "avatar_url": "https://avatars.githubusercontent.com/u/19571989?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/protolambda",
      "html_url": "https://github.com/protolambda",
      "followers_url": "https://api.github.com/users/protolambda/followers",
      "following_url": "https://api.github.com/users/protolambda/following{/other_user}",
      "gists_url": "https://api.github.com/users/protolambda/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/protolambda/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/protolambda/subscriptions",
      "organizations_url": "https://api.github.com/users/protolambda/orgs",
      "repos_url": "https://api.github.com/users/protolambda/repos",
      "events_url": "https://api.github.com/users/protolambda/events{/privacy}",
      "received_events_url": "https://api.github.com/users/protolambda/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-01T14:14:56Z",
    "updated_at": "2019-11-01T14:14:56Z",
    "author_association": "MEMBER",
    "body": "Ah I see. For slashings attestation checking is not as strictly coupled; validator indices are embedded in the slashing itself, so there is no dependency on the exact state of the chain. For normal attestations, they would only be included if their scope is part of the chain (and at that point you have consistency and are just dealing with fork versions). So I don't see what edge case you need inclusion of attestations from different forks for.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/548803163/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/548816037",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1456#issuecomment-548816037",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1456",
    "id": 548816037,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0ODgxNjAzNw==",
    "user": {
      "login": "ericsson49",
      "id": 10426192,
      "node_id": "MDQ6VXNlcjEwNDI2MTky",
      "avatar_url": "https://avatars.githubusercontent.com/u/10426192?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ericsson49",
      "html_url": "https://github.com/ericsson49",
      "followers_url": "https://api.github.com/users/ericsson49/followers",
      "following_url": "https://api.github.com/users/ericsson49/following{/other_user}",
      "gists_url": "https://api.github.com/users/ericsson49/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ericsson49/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ericsson49/subscriptions",
      "organizations_url": "https://api.github.com/users/ericsson49/orgs",
      "repos_url": "https://api.github.com/users/ericsson49/repos",
      "events_url": "https://api.github.com/users/ericsson49/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ericsson49/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-01T14:49:25Z",
    "updated_at": "2019-11-01T14:50:09Z",
    "author_association": "CONTRIBUTOR",
    "body": "One problem is that in some cases such an attestation can still pass signature check and be included in a block.\r\nSo, the suggestion is to explicitly forbid inclusion of such attestations in a block and to add an explicit check preventing that.\r\n\r\nThe second thing is to make implementers aware of such cases so that they be more careful when validating attestations.\r\nFor example, `is_valid_indexed_attestation` is called during fork choice's `on_attestation` procedure. Since BLS verification is an expensive, it's likely that the result will be cached. E.g. in some implementations, the signature check can be skipped before including the verification in a block. Or signature validation of attestations arrived as a part of a block may be skipped, if an attestation has been already received via wire and it's signature has been verified.\r\nAs I wrote before, in `on_attestation` and `process_attestation` methods such signature checks can be actually different, e.g. based on incompatible states  (`on_attestation` verifies against target.root while `process_attestation` - against the head).\r\nEven if the signature check is not cached, an implementation can decided that the signature is wrong, and blame the attestation sender (e.g. put it in a black list).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/548816037/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/617022753",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1456#issuecomment-617022753",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1456",
    "id": 617022753,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxNzAyMjc1Mw==",
    "user": {
      "login": "JustinDrake",
      "id": 731743,
      "node_id": "MDQ6VXNlcjczMTc0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/731743?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JustinDrake",
      "html_url": "https://github.com/JustinDrake",
      "followers_url": "https://api.github.com/users/JustinDrake/followers",
      "following_url": "https://api.github.com/users/JustinDrake/following{/other_user}",
      "gists_url": "https://api.github.com/users/JustinDrake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JustinDrake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JustinDrake/subscriptions",
      "organizations_url": "https://api.github.com/users/JustinDrake/orgs",
      "repos_url": "https://api.github.com/users/JustinDrake/repos",
      "events_url": "https://api.github.com/users/JustinDrake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JustinDrake/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-04-21T08:05:17Z",
    "updated_at": "2020-04-21T08:05:17Z",
    "author_association": "MEMBER",
    "body": "@protolambda @ericsson49 What is the outcome of this discussion? Do we want to make a change in phase 0?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/617022753/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/617146745",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1456#issuecomment-617146745",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1456",
    "id": 617146745,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxNzE0Njc0NQ==",
    "user": {
      "login": "protolambda",
      "id": 19571989,
      "node_id": "MDQ6VXNlcjE5NTcxOTg5",
      "avatar_url": "https://avatars.githubusercontent.com/u/19571989?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/protolambda",
      "html_url": "https://github.com/protolambda",
      "followers_url": "https://api.github.com/users/protolambda/followers",
      "following_url": "https://api.github.com/users/protolambda/following{/other_user}",
      "gists_url": "https://api.github.com/users/protolambda/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/protolambda/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/protolambda/subscriptions",
      "organizations_url": "https://api.github.com/users/protolambda/orgs",
      "repos_url": "https://api.github.com/users/protolambda/repos",
      "events_url": "https://api.github.com/users/protolambda/events{/privacy}",
      "received_events_url": "https://api.github.com/users/protolambda/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-04-21T12:24:24Z",
    "updated_at": "2020-04-21T12:24:24Z",
    "author_association": "MEMBER",
    "body": "> As I wrote before, in on_attestation and process_attestation methods such signature checks can be actually different, e.g. based on incompatible states (on_attestation verifies against target.root while process_attestation - against the head).\r\n\r\nI think this is the most confusing part. I don't see others having problems with the way attestations are currently processed, and was assuming this issue was already solved offline. Anyway, ping @ericsson49 if there is a concrete implementation problem, otherwise I think we can close this issue.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/617146745/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/617308499",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1456#issuecomment-617308499",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1456",
    "id": 617308499,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxNzMwODQ5OQ==",
    "user": {
      "login": "ericsson49",
      "id": 10426192,
      "node_id": "MDQ6VXNlcjEwNDI2MTky",
      "avatar_url": "https://avatars.githubusercontent.com/u/10426192?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ericsson49",
      "html_url": "https://github.com/ericsson49",
      "followers_url": "https://api.github.com/users/ericsson49/followers",
      "following_url": "https://api.github.com/users/ericsson49/following{/other_user}",
      "gists_url": "https://api.github.com/users/ericsson49/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ericsson49/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ericsson49/subscriptions",
      "organizations_url": "https://api.github.com/users/ericsson49/orgs",
      "repos_url": "https://api.github.com/users/ericsson49/repos",
      "events_url": "https://api.github.com/users/ericsson49/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ericsson49/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-04-21T17:36:27Z",
    "updated_at": "2020-04-21T17:36:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "The idea has been to forbid inclusion of attestations from such incompatible forks on the spec level, so that implementations handle it uniformly.\r\nIt can be handled on an implementation level, though implementers can do that in different ways.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/617308499/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
