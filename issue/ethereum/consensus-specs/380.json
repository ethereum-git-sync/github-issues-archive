{
  "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/380",
  "repository_url": "https://api.github.com/repos/ethereum/consensus-specs",
  "labels_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/380/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/380/comments",
  "events_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/380/events",
  "html_url": "https://github.com/ethereum/consensus-specs/issues/380",
  "id": 395089833,
  "node_id": "MDU6SXNzdWUzOTUwODk4MzM=",
  "number": 380,
  "title": "The great function cleanup/rework",
  "user": {
    "login": "JustinDrake",
    "id": 731743,
    "node_id": "MDQ6VXNlcjczMTc0Mw==",
    "avatar_url": "https://avatars.githubusercontent.com/u/731743?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/JustinDrake",
    "html_url": "https://github.com/JustinDrake",
    "followers_url": "https://api.github.com/users/JustinDrake/followers",
    "following_url": "https://api.github.com/users/JustinDrake/following{/other_user}",
    "gists_url": "https://api.github.com/users/JustinDrake/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/JustinDrake/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/JustinDrake/subscriptions",
    "organizations_url": "https://api.github.com/users/JustinDrake/orgs",
    "repos_url": "https://api.github.com/users/JustinDrake/repos",
    "events_url": "https://api.github.com/users/JustinDrake/events{/privacy}",
    "received_events_url": "https://api.github.com/users/JustinDrake/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1063043868,
      "node_id": "MDU6TGFiZWwxMDYzMDQzODY4",
      "url": "https://api.github.com/repos/ethereum/consensus-specs/labels/general:enhancement",
      "name": "general:enhancement",
      "color": "086788",
      "default": false,
      "description": "New feature or request"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/milestones/1",
    "html_url": "https://github.com/ethereum/consensus-specs/milestone/1",
    "labels_url": "https://api.github.com/repos/ethereum/consensus-specs/milestones/1/labels",
    "id": 3911990,
    "node_id": "MDk6TWlsZXN0b25lMzkxMTk5MA==",
    "number": 1,
    "title": "January Release",
    "description": "",
    "creator": {
      "login": "hwwhww",
      "id": 9263930,
      "node_id": "MDQ6VXNlcjkyNjM5MzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9263930?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hwwhww",
      "html_url": "https://github.com/hwwhww",
      "followers_url": "https://api.github.com/users/hwwhww/followers",
      "following_url": "https://api.github.com/users/hwwhww/following{/other_user}",
      "gists_url": "https://api.github.com/users/hwwhww/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hwwhww/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hwwhww/subscriptions",
      "organizations_url": "https://api.github.com/users/hwwhww/orgs",
      "repos_url": "https://api.github.com/users/hwwhww/repos",
      "events_url": "https://api.github.com/users/hwwhww/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hwwhww/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 0,
    "closed_issues": 11,
    "state": "closed",
    "created_at": "2018-12-19T07:03:03Z",
    "updated_at": "2019-02-22T19:18:25Z",
    "due_on": "2019-01-31T08:00:00Z",
    "closed_at": "2019-01-31T16:01:34Z"
  },
  "comments": 5,
  "created_at": "2019-01-01T14:54:22Z",
  "updated_at": "2019-02-22T19:18:25Z",
  "closed_at": "2019-02-22T19:18:25Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "**Global organisation**\r\n\r\n- [ ] 1. Organise functions into three categories:\r\n    * **Math and crypto**: `hash`, `hash_tree_root`, `repeat_hash`, `integer_squareroot`, `shuffle`, `split`, `merkle_root`, `verify_merkle_branch`, etc.\r\n    * **Read `state`**: `get_active_validator_indices`, `get_shuffling`, `get_shard_committees_at_slot`, `get_block_root`, `get_beacon_proposer_index`, `get_attestation_participants`, `get_effective_balance`, etc.\r\n    * **Write `state`**: `process_deposit`, `process_ejections`, `process_penalties_and_exits`, `activate_validator`, `initiate_validator_exit`, `exit_validator`, etc.\r\n- [x] 2. Segregate functions at the top of the spec, after the constants and data structures. The remaining high-level \"glue logic\" will be easier to follow, as well as the details inside individual functions.\r\n- [ ] 3. All function definitions listed in the table of contents for easy access.\r\n- [ ] 4. Functions that read from and/or write to state have `state: BeaconState` as the first argument.\r\n- [ ] 5. Functions read from `state` where possible to minimise the number of inputs. For example `get_active_validator_indices` is currently given `validators: [ValidatorRecord], slot: int` when it suffices to pass `state: BeaconState`.\r\n- [ ] 6. Replace pseudocode bulletpoints (e.g. in \"Per-block processing\") with functions. Both cleaner and more precise. For example add `verify_proposer_signature`, `process_randao`, ...\r\n- [ ] 7. Pull out inlined function definitions (e.g. `get_ancestor`, `repeat_hash`).\r\n- [ ] 8. Avoid huge lists of arguments. For example, `process_deposit` has 8 inputs (`state`, `pubkey`, `amount`, `proof_of_possession`, `withdrawal_credentials`, `randao_commitment`, `poc_commitment`) where the last 7 inputs can be replaced with a single `DepositData` object.\r\n\r\n**Naming**\r\n\r\n- [ ] 1. Use the `get_` prefix exclusively for functions that read `state`. (E.g. rename `get_initial_beacon_state`, `get_domain`, `get_fork_version` to something else.)\r\n- [ ] 2. Be consistent with verbs (e.g. `validate_proof_of_possession`, `verify_slashable_vote_data` should both use \"validate\" or \"verify\").\r\n- [ ] 3. Rename `prepare_validator_for_withdrawal` to `initiate_validator_withdrawal` for consistency with `initiate_validator_exit`.\r\n\r\n**Local cleanups**\r\n\r\n- [x] 1. Typehints for all\r\n- [x] 2. Docstring for all\r\n- [ ] 3. Whitespace linter (e.g. spacing between operators, no trailing whitespace)\r\n- [ ] 4. Format linter (e.g. typehint formatting, break long lines)\r\n- [ ] 5. No hardcoded constants\r\n- [ ] 6. Judicious comments\r\n\r\n@djrtwo, @hwwhww, @vbuterin Open to add/remove cleanup items from the above. It may make sense  for me and/or @djrtwo to do the work when there are no open PRs to avoid merge conflict hell.",
  "closed_by": {
    "login": "JustinDrake",
    "id": 731743,
    "node_id": "MDQ6VXNlcjczMTc0Mw==",
    "avatar_url": "https://avatars.githubusercontent.com/u/731743?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/JustinDrake",
    "html_url": "https://github.com/JustinDrake",
    "followers_url": "https://api.github.com/users/JustinDrake/followers",
    "following_url": "https://api.github.com/users/JustinDrake/following{/other_user}",
    "gists_url": "https://api.github.com/users/JustinDrake/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/JustinDrake/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/JustinDrake/subscriptions",
    "organizations_url": "https://api.github.com/users/JustinDrake/orgs",
    "repos_url": "https://api.github.com/users/JustinDrake/repos",
    "events_url": "https://api.github.com/users/JustinDrake/events{/privacy}",
    "received_events_url": "https://api.github.com/users/JustinDrake/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/380/reactions",
    "total_count": 3,
    "+1": 3,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/380/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/450737608",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/380#issuecomment-450737608",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/380",
    "id": 450737608,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MDczNzYwOA==",
    "user": {
      "login": "hwwhww",
      "id": 9263930,
      "node_id": "MDQ6VXNlcjkyNjM5MzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9263930?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hwwhww",
      "html_url": "https://github.com/hwwhww",
      "followers_url": "https://api.github.com/users/hwwhww/followers",
      "following_url": "https://api.github.com/users/hwwhww/following{/other_user}",
      "gists_url": "https://api.github.com/users/hwwhww/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hwwhww/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hwwhww/subscriptions",
      "organizations_url": "https://api.github.com/users/hwwhww/orgs",
      "repos_url": "https://api.github.com/users/hwwhww/repos",
      "events_url": "https://api.github.com/users/hwwhww/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hwwhww/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-01T15:23:00Z",
    "updated_at": "2019-01-01T17:43:11Z",
    "author_association": "MEMBER",
    "body": "> Naming 1. Use the get_ prefix exclusively for functions that read state. (E.g. rename get_initial_beacon_state, get_domain, get_fork_version to something else.)\r\n\r\nIMO the `get_` prefix implies that “this function won’t mutate anything”. For the functions that are used for generating a new object, it can be named with a prefix `create_` or `generate_`.\r\n\r\n> It may make sense for me and/or @djrtwo to do the work when there are no open PRs to avoid merge conflict hell.\r\n\r\nI’d support that we make it into several small PRs instead of a huge one. 😃\r\n\r\n\r\n> `get_ancestor`\r\n\r\nIt won’t be 100% complete since the object `store` is only abstractly described as the data storage interface that design by the clients, which I think it’s fine, but we can add more notes on that.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/450737608/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/450745575",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/380#issuecomment-450745575",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/380",
    "id": 450745575,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MDc0NTU3NQ==",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-01T17:38:58Z",
    "updated_at": "2019-01-01T17:38:58Z",
    "author_association": "MEMBER",
    "body": "Very in favor of this in general :)\r\n\r\nI'm a little torn on removing the explicit params from the `get_` functions and changing just to passing in `state`. In practice, it is really nice when these pure functions specify the explicit subset of state required so that they can really easily be tested in isolation. That said, this is a spec so we need to find the balance. It _might_ make sense to just pass in state but be more verbose in the header comment. Thinking.\r\n\r\nI'd like to take a stab at [1] maybe right after we merge in #374 (reviewing now!)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/450745575/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/450750420",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/380#issuecomment-450750420",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/380",
    "id": 450750420,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MDc1MDQyMA==",
    "user": {
      "login": "arnetheduck",
      "id": 1382986,
      "node_id": "MDQ6VXNlcjEzODI5ODY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1382986?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/arnetheduck",
      "html_url": "https://github.com/arnetheduck",
      "followers_url": "https://api.github.com/users/arnetheduck/followers",
      "following_url": "https://api.github.com/users/arnetheduck/following{/other_user}",
      "gists_url": "https://api.github.com/users/arnetheduck/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/arnetheduck/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/arnetheduck/subscriptions",
      "organizations_url": "https://api.github.com/users/arnetheduck/orgs",
      "repos_url": "https://api.github.com/users/arnetheduck/repos",
      "events_url": "https://api.github.com/users/arnetheduck/events{/privacy}",
      "received_events_url": "https://api.github.com/users/arnetheduck/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-01T19:04:37Z",
    "updated_at": "2019-01-01T19:04:37Z",
    "author_association": "CONTRIBUTOR",
    "body": "What's helpful in general is minimizing order-dependence of the various parts of the spec - a concrete example of this would be what https://github.com/ethereum/eth2.0-specs/issues/348 points out - there's a dependency there on `state.slot` that complicates processing, testing, etc. This is also the main advantage of passing in all relevant state explicitly - it declares these dependencies and makes them visible - but as long as the property itself is maintained, the difference is kind of cosmetic.\r\n\r\nAs far as implementation goes, the direction we're heading in is to do as much validation work as possible up front (\"validate that there are at most X attestations\") before making any state changes - this to minimize the cost of discarding faulty blocks (including costly state rewinds) - that's made harder if validation depends on partial state updates, because we then have to rewrite the validation code with `as-if` logic that pulls us further from the spec text.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/450750420/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/450751543",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/380#issuecomment-450751543",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/380",
    "id": 450751543,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MDc1MTU0Mw==",
    "user": {
      "login": "vbuterin",
      "id": 2230894,
      "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vbuterin",
      "html_url": "https://github.com/vbuterin",
      "followers_url": "https://api.github.com/users/vbuterin/followers",
      "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
      "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
      "organizations_url": "https://api.github.com/users/vbuterin/orgs",
      "repos_url": "https://api.github.com/users/vbuterin/repos",
      "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vbuterin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-01T19:26:09Z",
    "updated_at": "2019-01-01T19:26:09Z",
    "author_association": "MEMBER",
    "body": "Generally looks good to me!\r\n\r\n>  1. Use the get_ prefix exclusively for functions that read state. (E.g. rename get_initial_beacon_state, get_domain, get_fork_version to something else.)\r\n\r\nI think `get` for pure functions that take things other than the state as input is fine too; the important thing is not using `get` for impure functions.\r\n\r\n>  6. Replace pseudocode bulletpoints (e.g. in \"Per-block processing\") with functions. Both cleaner and more precise. For example add verify_proposer_signature, process_randao, ...\r\n\r\nI think there's a balance here. The absolute extreme is that the spec is literally just a highly commented python implementation. It's probably worth thinking on a case-by-case basis, and also where we remove English text outside the python, add it back inside the python via comments.\r\n\r\nAnother thing is that whereas some functions as \"utility\" functions that are used throughout the spec, others are highly specialized to a specific task. Those functions should probably NOT go at the top of the spec; they should go inline in whatever the relevant section is. We shouldn't be requiring readers to constantly jump back and forth between different parts of the page as much as possible.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/450751543/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/466514258",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/380#issuecomment-466514258",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/380",
    "id": 466514258,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2NjUxNDI1OA==",
    "user": {
      "login": "JustinDrake",
      "id": 731743,
      "node_id": "MDQ6VXNlcjczMTc0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/731743?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JustinDrake",
      "html_url": "https://github.com/JustinDrake",
      "followers_url": "https://api.github.com/users/JustinDrake/followers",
      "following_url": "https://api.github.com/users/JustinDrake/following{/other_user}",
      "gists_url": "https://api.github.com/users/JustinDrake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JustinDrake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JustinDrake/subscriptions",
      "organizations_url": "https://api.github.com/users/JustinDrake/orgs",
      "repos_url": "https://api.github.com/users/JustinDrake/repos",
      "events_url": "https://api.github.com/users/JustinDrake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JustinDrake/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-22T19:18:25Z",
    "updated_at": "2019-02-22T19:18:25Z",
    "author_association": "MEMBER",
    "body": "Closing for now as the focus is on content (e.g. fixing bugs) rather than presentation. A presentational overhaul will come in the \"Transparent Paper\" after the spec is finalised.\r\n\r\nAnyone keen to do the cleanups feel free to reopen :)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/466514258/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
