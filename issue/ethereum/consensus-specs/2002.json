{
  "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2002",
  "repository_url": "https://api.github.com/repos/ethereum/consensus-specs",
  "labels_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2002/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2002/comments",
  "events_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2002/events",
  "html_url": "https://github.com/ethereum/consensus-specs/issues/2002",
  "id": 667491917,
  "node_id": "MDU6SXNzdWU2Njc0OTE5MTc=",
  "number": 2002,
  "title": "Add gossip validation for attestation LMD vote + FFG vote consistency",
  "user": {
    "login": "lsankar4033",
    "id": 451947,
    "node_id": "MDQ6VXNlcjQ1MTk0Nw==",
    "avatar_url": "https://avatars.githubusercontent.com/u/451947?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/lsankar4033",
    "html_url": "https://github.com/lsankar4033",
    "followers_url": "https://api.github.com/users/lsankar4033/followers",
    "following_url": "https://api.github.com/users/lsankar4033/following{/other_user}",
    "gists_url": "https://api.github.com/users/lsankar4033/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/lsankar4033/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/lsankar4033/subscriptions",
    "organizations_url": "https://api.github.com/users/lsankar4033/orgs",
    "repos_url": "https://api.github.com/users/lsankar4033/repos",
    "events_url": "https://api.github.com/users/lsankar4033/events{/privacy}",
    "received_events_url": "https://api.github.com/users/lsankar4033/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1065467474,
      "node_id": "MDU6TGFiZWwxMDY1NDY3NDc0",
      "url": "https://api.github.com/repos/ethereum/consensus-specs/labels/general:proofread",
      "name": "general:proofread",
      "color": "81dd5f",
      "default": false,
      "description": "spelling, grammar, accuracy"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 6,
  "created_at": "2020-07-29T02:03:53Z",
  "updated_at": "2023-12-08T15:50:59Z",
  "closed_at": "2023-12-08T15:50:54Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "In fork-choice, there's a check that the LMD vote of an attestation is a descendent of the attestation's target (see https://github.com/ethereum/eth2.0-specs/blob/dev/specs/phase0/fork-choice.md#validate_on_attestation following the comment `#LMD vote must be consistent with FFG vote target`)\r\n\r\nI propose adding this to the gossip validation to further filter out noise: https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/p2p-interface.md#beacon_attestation_subnet_id",
  "closed_by": {
    "login": "dapplion",
    "id": 35266934,
    "node_id": "MDQ6VXNlcjM1MjY2OTM0",
    "avatar_url": "https://avatars.githubusercontent.com/u/35266934?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/dapplion",
    "html_url": "https://github.com/dapplion",
    "followers_url": "https://api.github.com/users/dapplion/followers",
    "following_url": "https://api.github.com/users/dapplion/following{/other_user}",
    "gists_url": "https://api.github.com/users/dapplion/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/dapplion/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/dapplion/subscriptions",
    "organizations_url": "https://api.github.com/users/dapplion/orgs",
    "repos_url": "https://api.github.com/users/dapplion/repos",
    "events_url": "https://api.github.com/users/dapplion/events{/privacy}",
    "received_events_url": "https://api.github.com/users/dapplion/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2002/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2002/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/665636545",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2002#issuecomment-665636545",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2002",
    "id": 665636545,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2NTYzNjU0NQ==",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-29T12:32:59Z",
    "updated_at": "2020-07-29T12:32:59Z",
    "author_association": "MEMBER",
    "body": " Iâ€™m not certain if we absolutely need the consistency check, but it might be worth adding regardless.\r\n\r\nDue to #2001, the depth of the `get_ancestor` call is bound so the check should be cheap, but due to the limit of attestations as one per val per epoch, inconsistency here is \"expensive\" for a validator.\r\n\r\nI suppose that if it is after _\"The block being voted for (attestation.data.beacon_block_root) passes validation\"_ then the chain being voted on is known and the ancestor consistency should be cheap.\r\n\r\nWant to sanity check before we add forkchoice lookups in our most frequently gossiped message type: @protolambda what is the cost of an ancestor lookup in most fork choice implementations? Is it constant (especially when in bound slot ranges -- an epoch), or is it `log(N)` or `N`?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/665636545/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/665664100",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2002#issuecomment-665664100",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2002",
    "id": 665664100,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2NTY2NDEwMA==",
    "user": {
      "login": "protolambda",
      "id": 19571989,
      "node_id": "MDQ6VXNlcjE5NTcxOTg5",
      "avatar_url": "https://avatars.githubusercontent.com/u/19571989?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/protolambda",
      "html_url": "https://github.com/protolambda",
      "followers_url": "https://api.github.com/users/protolambda/followers",
      "following_url": "https://api.github.com/users/protolambda/following{/other_user}",
      "gists_url": "https://api.github.com/users/protolambda/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/protolambda/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/protolambda/subscriptions",
      "organizations_url": "https://api.github.com/users/protolambda/orgs",
      "repos_url": "https://api.github.com/users/protolambda/repos",
      "events_url": "https://api.github.com/users/protolambda/events{/privacy}",
      "received_events_url": "https://api.github.com/users/protolambda/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-29T13:27:51Z",
    "updated_at": "2020-07-29T13:27:51Z",
    "author_association": "MEMBER",
    "body": "In proto-array, `get_ancestor` is avoided by making the justification logic stateful in the array and related optimized batched tracker of last messages.\r\n\r\nChecking subtrees if you already have the two roots of the nodes you compare, is constant time. Since you get the best-descendant of both nodes in constant time, and just compare them.\r\n\r\nThe other way around, searching for a previous node in the chain at a given slot, is not optimized. What you need to do is change get_ancestor, to use the existing optimized data. I think it would be something like:\r\n- lookup proto-array node by target block root (constant time, minus some root->pointer dict costs)\r\n- lookup proto-array node of attestation block root (same complexity as above)\r\n- get best descendant proto-array-index of both nodes (constant time, just an attribute of the node)\r\n- simply compare. If matching: attestation block root is a child of the target block root",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/665664100/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/665792687",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2002#issuecomment-665792687",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2002",
    "id": 665792687,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2NTc5MjY4Nw==",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-29T17:17:44Z",
    "updated_at": "2020-07-29T17:17:44Z",
    "author_association": "MEMBER",
    "body": "So in this case, we have beacon block root `A` and target block root `T`\r\nAt the proposed condition, block `A` would be known and validated. So the check would be adding a constant time lookup of the target and a constant decedent lookup of `A` and `T`. \r\n\r\nSo it is _safe_ to add the condition so probably not much reason not to ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/665792687/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/665794597",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2002#issuecomment-665794597",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2002",
    "id": 665794597,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2NTc5NDU5Nw==",
    "user": {
      "login": "lsankar4033",
      "id": 451947,
      "node_id": "MDQ6VXNlcjQ1MTk0Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/451947?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lsankar4033",
      "html_url": "https://github.com/lsankar4033",
      "followers_url": "https://api.github.com/users/lsankar4033/followers",
      "following_url": "https://api.github.com/users/lsankar4033/following{/other_user}",
      "gists_url": "https://api.github.com/users/lsankar4033/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lsankar4033/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lsankar4033/subscriptions",
      "organizations_url": "https://api.github.com/users/lsankar4033/orgs",
      "repos_url": "https://api.github.com/users/lsankar4033/repos",
      "events_url": "https://api.github.com/users/lsankar4033/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lsankar4033/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-29T17:21:31Z",
    "updated_at": "2020-07-29T17:21:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Due to #2001, the depth of the `get_ancestor` call is bound so the check should be cheap, but due to the limit of attestations as one per val per epoch, inconsistency here is \"expensive\" for a validator.\r\n> \r\n> I suppose that if it is after _\"The block being voted for (attestation.data.beacon_block_root) passes validation\"_ then the chain being voted on is known and the ancestor consistency should be cheap.\r\n\r\nIs there a notion of expected precedence of gossip validation checks? If not, a client implementing the checks in the wrong order still seems vulnerable to an expensive `get_ancestor`\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/665794597/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/666580819",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2002#issuecomment-666580819",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2002",
    "id": 666580819,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2NjU4MDgxOQ==",
    "user": {
      "login": "lsankar4033",
      "id": 451947,
      "node_id": "MDQ6VXNlcjQ1MTk0Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/451947?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lsankar4033",
      "html_url": "https://github.com/lsankar4033",
      "followers_url": "https://api.github.com/users/lsankar4033/followers",
      "following_url": "https://api.github.com/users/lsankar4033/following{/other_user}",
      "gists_url": "https://api.github.com/users/lsankar4033/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lsankar4033/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lsankar4033/subscriptions",
      "organizations_url": "https://api.github.com/users/lsankar4033/orgs",
      "repos_url": "https://api.github.com/users/lsankar4033/repos",
      "events_url": "https://api.github.com/users/lsankar4033/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lsankar4033/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-30T18:23:19Z",
    "updated_at": "2020-07-30T18:23:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "It seems like there is in fact precedence of validations, based on the order they appear in the p2p spec. That wasn't obvious to me on first reading; perhaps it's worth adding a line to the spec saying as much. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/666580819/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1847418295",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2002#issuecomment-1847418295",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2002",
    "id": 1847418295,
    "node_id": "IC_kwDOCOoGbc5uHV23",
    "user": {
      "login": "dapplion",
      "id": 35266934,
      "node_id": "MDQ6VXNlcjM1MjY2OTM0",
      "avatar_url": "https://avatars.githubusercontent.com/u/35266934?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dapplion",
      "html_url": "https://github.com/dapplion",
      "followers_url": "https://api.github.com/users/dapplion/followers",
      "following_url": "https://api.github.com/users/dapplion/following{/other_user}",
      "gists_url": "https://api.github.com/users/dapplion/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dapplion/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dapplion/subscriptions",
      "organizations_url": "https://api.github.com/users/dapplion/orgs",
      "repos_url": "https://api.github.com/users/dapplion/repos",
      "events_url": "https://api.github.com/users/dapplion/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dapplion/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-12-08T15:50:54Z",
    "updated_at": "2023-12-08T15:50:59Z",
    "author_association": "COLLABORATOR",
    "body": "- Fixed by https://github.com/ethereum/consensus-specs/pull/2001",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1847418295/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
