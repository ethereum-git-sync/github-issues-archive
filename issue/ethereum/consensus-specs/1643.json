{
  "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1643",
  "repository_url": "https://api.github.com/repos/ethereum/consensus-specs",
  "labels_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1643/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1643/comments",
  "events_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1643/events",
  "html_url": "https://github.com/ethereum/consensus-specs/issues/1643",
  "id": 577410383,
  "node_id": "MDU6SXNzdWU1Nzc0MTAzODM=",
  "number": 1643,
  "title": "Remove recursive use of BeaconBlockHeader.StateRoot inside state",
  "user": {
    "login": "sgryphon",
    "id": 339293,
    "node_id": "MDQ6VXNlcjMzOTI5Mw==",
    "avatar_url": "https://avatars.githubusercontent.com/u/339293?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/sgryphon",
    "html_url": "https://github.com/sgryphon",
    "followers_url": "https://api.github.com/users/sgryphon/followers",
    "following_url": "https://api.github.com/users/sgryphon/following{/other_user}",
    "gists_url": "https://api.github.com/users/sgryphon/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/sgryphon/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/sgryphon/subscriptions",
    "organizations_url": "https://api.github.com/users/sgryphon/orgs",
    "repos_url": "https://api.github.com/users/sgryphon/repos",
    "events_url": "https://api.github.com/users/sgryphon/events{/privacy}",
    "received_events_url": "https://api.github.com/users/sgryphon/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2020-03-07T22:29:30Z",
  "updated_at": "2020-05-04T16:45:41Z",
  "closed_at": "2020-05-04T16:45:41Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "The definition of BeaconState includes latest_block_header, which includes a field for state_root; a recursive reference back to the hash of the state.\r\n\r\nThis is already recognised, and because of this, for states where a block is received, the stored value always includes a zeroed state_root; the actual state root is then calculated during slot processing in order to validate the next block's parent.\r\n\r\nHowever, the calculate value is temporarily inserted back into the state, even though it will be zeroed again by block processing.\r\n\r\ni.e. inserting the calculated value into the state has no purpose, as it is overwritten anyway (you still need it for validation; just no need to insert).\r\n\r\nNote also that the stored BeaconBlockHeader is useless as is, it can't be compared directly to a block, as it needs to have state_root inserted first.\r\n\r\nOne consequence of temporarily changing the header state_root inside state is that state then becomes inconsistent, i.e. if you recalculate state_root for some reason you get a different value. (Obviously if you recalculate in the middle of processing it will be different, but this change is only temporary)\r\n\r\nI suggest something like:\r\n\r\n* Change the definition of BeaconState to include fields directly for latest_block_slot, latest_block_parent_root, latest_block_body_root, instead of BeaconBlockHeader\r\n\r\n* During processing calculate state_root as currently done, then combine with the fields from state to create a BeaconBlockHeader, and hash that to re-generate the block root when needed.\r\n\r\nNote that there are implications for empty slots, as you would need to calculate the first state root (corresponding to the block), not the state_root of the empty slots.\r\n",
  "closed_by": {
    "login": "djrtwo",
    "id": 1433595,
    "node_id": "MDQ6VXNlcjE0MzM1OTU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/djrtwo",
    "html_url": "https://github.com/djrtwo",
    "followers_url": "https://api.github.com/users/djrtwo/followers",
    "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
    "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
    "organizations_url": "https://api.github.com/users/djrtwo/orgs",
    "repos_url": "https://api.github.com/users/djrtwo/repos",
    "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
    "received_events_url": "https://api.github.com/users/djrtwo/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1643/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1643/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/597200004",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1643#issuecomment-597200004",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1643",
    "id": 597200004,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5NzIwMDAwNA==",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-03-10T17:02:14Z",
    "updated_at": "2020-03-10T17:02:14Z",
    "author_association": "MEMBER",
    "body": "> However, the calculate value is temporarily inserted back into the state, even though it will be zeroed again by block processing.\r\n\r\nIt will only be zeroed out _if_ there is a block at that slot. The `latest_block_header` is important for verifying parents of arbitrary skip slots, especially in the context where sub-components of the state transition function are used locally (e.g. empty slots processed when no block comes in to figure out shufflings in future epochs).\r\n\r\n> One consequence of temporarily changing the header state_root inside state is that state then becomes inconsistent\r\n\r\nThis is true of all intermediate states during the state transition function. It is only safe to get the state root before and after a state transition. Otherwise, the intermediate root will certainly not be valid.\r\n\r\n> During processing calculate state_root as currently done, then combine with the fields from state to create a BeaconBlockHeade\r\n\r\nThere are two issues that emerge here -- (1), the `pre_state_root` would then need to be passed around to various functions in the state transition for validation and (2), this makes transitioning the state forward during skip slots (without a new head block) more cumbersome as the client would need to calculate and pass in the post-state root of the latest slot with a block.\r\n\r\nI don't see a fundamental issue with the approach as is. It keeps structures clean and allows for a simple use of the state transition and sub-functions. It also works well and is widely integrated into clients at this point. This has been widely debated over the past year and I think all involved are happy with the equilibrium. Even for the sake of keeping things stable in light of coming mainnet, I say leave as is.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/597200004/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/617149987",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1643#issuecomment-617149987",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1643",
    "id": 617149987,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxNzE0OTk4Nw==",
    "user": {
      "login": "JustinDrake",
      "id": 731743,
      "node_id": "MDQ6VXNlcjczMTc0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/731743?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JustinDrake",
      "html_url": "https://github.com/JustinDrake",
      "followers_url": "https://api.github.com/users/JustinDrake/followers",
      "following_url": "https://api.github.com/users/JustinDrake/following{/other_user}",
      "gists_url": "https://api.github.com/users/JustinDrake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JustinDrake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JustinDrake/subscriptions",
      "organizations_url": "https://api.github.com/users/JustinDrake/orgs",
      "repos_url": "https://api.github.com/users/JustinDrake/repos",
      "events_url": "https://api.github.com/users/JustinDrake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JustinDrake/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-04-21T12:31:24Z",
    "updated_at": "2020-04-21T12:31:24Z",
    "author_association": "MEMBER",
    "body": "@sgryphon Are you satisfied by @djrtwo's response? :)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/617149987/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
