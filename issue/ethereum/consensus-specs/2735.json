{
  "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2735",
  "repository_url": "https://api.github.com/repos/ethereum/consensus-specs",
  "labels_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2735/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2735/comments",
  "events_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2735/events",
  "html_url": "https://github.com/ethereum/consensus-specs/issues/2735",
  "id": 1060882988,
  "node_id": "I_kwDOCOoGbc4_O8os",
  "number": 2735,
  "title": "CL reaction to SYNCING response status post-Merge",
  "user": {
    "login": "mkalinin",
    "id": 1892772,
    "node_id": "MDQ6VXNlcjE4OTI3NzI=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1892772?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mkalinin",
    "html_url": "https://github.com/mkalinin",
    "followers_url": "https://api.github.com/users/mkalinin/followers",
    "following_url": "https://api.github.com/users/mkalinin/following{/other_user}",
    "gists_url": "https://api.github.com/users/mkalinin/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mkalinin/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mkalinin/subscriptions",
    "organizations_url": "https://api.github.com/users/mkalinin/orgs",
    "repos_url": "https://api.github.com/users/mkalinin/repos",
    "events_url": "https://api.github.com/users/mkalinin/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mkalinin/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2021-11-23T06:32:46Z",
  "updated_at": "2021-12-22T17:57:16Z",
  "closed_at": "2021-12-22T17:57:15Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "This RFC is originated by discussion in https://github.com/ethereum/consensus-specs/issues/2732\r\n\r\nAssuming the network post-Merge, suppose a node has caught up with the head and stays online. Then suddenly a subsequent call to `executePayload` is responded with `SYNCING` status meaning that EL is missing data required to verify the payload. If this happens with a side chain then CL obviously may keep importing, attesting and proposing on the canonical one.\r\n\r\nThe things become tricky when this happens on the canonical chain, CL has the following options:\r\n1. Import optimistically, stop attesting and proposing until the sync is finished\r\n2. Import optimistically, attest to and propose on top of fully verified head",
  "closed_by": {
    "login": "mkalinin",
    "id": 1892772,
    "node_id": "MDQ6VXNlcjE4OTI3NzI=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1892772?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mkalinin",
    "html_url": "https://github.com/mkalinin",
    "followers_url": "https://api.github.com/users/mkalinin/followers",
    "following_url": "https://api.github.com/users/mkalinin/following{/other_user}",
    "gists_url": "https://api.github.com/users/mkalinin/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mkalinin/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mkalinin/subscriptions",
    "organizations_url": "https://api.github.com/users/mkalinin/orgs",
    "repos_url": "https://api.github.com/users/mkalinin/repos",
    "events_url": "https://api.github.com/users/mkalinin/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mkalinin/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2735/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2735/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/976596576",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2735#issuecomment-976596576",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2735",
    "id": 976596576,
    "node_id": "IC_kwDOCOoGbc46Na5g",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-23T14:15:00Z",
    "updated_at": "2021-11-23T14:15:00Z",
    "author_association": "MEMBER",
    "body": "When not at the Merge transition boundary, I would argue that (1) is generally okay, as it looks like some sort of EL sync failure.\r\n\r\nIt's probably still valuable (and okay) to attest (as in suggin such a case at least for some depth of SYNCING (e.g. within 32 slots). Essentially, if my EL goes out of sync for a few slots, I can still say what I see as the head (a few slots back) at slot N and help with finality. Once the depth exceeds ~32 slots, shufflings would no longer map to mainnet and there is little to no value to attesting.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/976596576/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/976657774",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2735#issuecomment-976657774",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2735",
    "id": 976657774,
    "node_id": "IC_kwDOCOoGbc46Np1u",
    "user": {
      "login": "mkalinin",
      "id": 1892772,
      "node_id": "MDQ6VXNlcjE4OTI3NzI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1892772?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mkalinin",
      "html_url": "https://github.com/mkalinin",
      "followers_url": "https://api.github.com/users/mkalinin/followers",
      "following_url": "https://api.github.com/users/mkalinin/following{/other_user}",
      "gists_url": "https://api.github.com/users/mkalinin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mkalinin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mkalinin/subscriptions",
      "organizations_url": "https://api.github.com/users/mkalinin/orgs",
      "repos_url": "https://api.github.com/users/mkalinin/repos",
      "events_url": "https://api.github.com/users/mkalinin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mkalinin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-23T14:48:27Z",
    "updated_at": "2021-11-23T14:48:27Z",
    "author_association": "MEMBER",
    "body": "I am thinking about one crazy edge case scenario. User hot swapping EL software with the new client version that has a bug fix and partially invalidates the chain that has been canonical to the previous view of CL. In this case `SYNCING` will end up with `INVALID` + `latestValidHash` set to a block that is several blocks behind the head. Attesting to the head in this case might result in attesting to invalid block.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/976657774/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 1
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/976707077",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2735#issuecomment-976707077",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2735",
    "id": 976707077,
    "node_id": "IC_kwDOCOoGbc46N14F",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-23T15:23:20Z",
    "updated_at": "2021-11-23T15:23:20Z",
    "author_association": "MEMBER",
    "body": "Ah, I see that... good point",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/976707077/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/999763483",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2735#issuecomment-999763483",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2735",
    "id": 999763483,
    "node_id": "IC_kwDOCOoGbc47ly4b",
    "user": {
      "login": "mkalinin",
      "id": 1892772,
      "node_id": "MDQ6VXNlcjE4OTI3NzI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1892772?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mkalinin",
      "html_url": "https://github.com/mkalinin",
      "followers_url": "https://api.github.com/users/mkalinin/followers",
      "following_url": "https://api.github.com/users/mkalinin/following{/other_user}",
      "gists_url": "https://api.github.com/users/mkalinin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mkalinin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mkalinin/subscriptions",
      "organizations_url": "https://api.github.com/users/mkalinin/orgs",
      "repos_url": "https://api.github.com/users/mkalinin/repos",
      "events_url": "https://api.github.com/users/mkalinin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mkalinin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-12-22T17:57:15Z",
    "updated_at": "2021-12-22T17:57:15Z",
    "author_association": "MEMBER",
    "body": "Addressed in https://github.com/ethereum/consensus-specs/pull/2770:\r\n> Let only a node which returns `is_optimistic(head) == True` be an *optimistic node*. Let only a validator on an optimistic node be an *optimistic validator*.\r\n> An optimistic validator MUST NOT produce a block\r\n> An optimistic validator MUST NOT participate in attestation\r\n\r\nIn other words, if the payload of the head of the chain turned EL into `SYNCING` a validator must stop attesting and proposing until the sync is finished.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/999763483/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
