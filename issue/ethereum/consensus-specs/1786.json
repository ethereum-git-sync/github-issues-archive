{
  "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1786",
  "repository_url": "https://api.github.com/repos/ethereum/consensus-specs",
  "labels_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1786/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1786/comments",
  "events_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1786/events",
  "html_url": "https://github.com/ethereum/consensus-specs/issues/1786",
  "id": 612808346,
  "node_id": "MDU6SXNzdWU2MTI4MDgzNDY=",
  "number": 1786,
  "title": "[BUG_BOUNTY] Recovery mechanisms from multiple-proposal-flood-attack need to be specified in the spec",
  "user": {
    "login": "kladkogex",
    "id": 13399135,
    "node_id": "MDQ6VXNlcjEzMzk5MTM1",
    "avatar_url": "https://avatars.githubusercontent.com/u/13399135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/kladkogex",
    "html_url": "https://github.com/kladkogex",
    "followers_url": "https://api.github.com/users/kladkogex/followers",
    "following_url": "https://api.github.com/users/kladkogex/following{/other_user}",
    "gists_url": "https://api.github.com/users/kladkogex/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/kladkogex/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/kladkogex/subscriptions",
    "organizations_url": "https://api.github.com/users/kladkogex/orgs",
    "repos_url": "https://api.github.com/users/kladkogex/repos",
    "events_url": "https://api.github.com/users/kladkogex/events{/privacy}",
    "received_events_url": "https://api.github.com/users/kladkogex/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 2039931993,
      "node_id": "MDU6TGFiZWwyMDM5OTMxOTkz",
      "url": "https://api.github.com/repos/ethereum/consensus-specs/labels/general:bounty",
      "name": "general:bounty",
      "color": "AF5F3C",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 5,
  "created_at": "2020-05-05T18:31:56Z",
  "updated_at": "2020-05-15T10:48:19Z",
  "closed_at": "2020-05-15T10:48:19Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "_High-level description of the bug [1 sentence]_\r\n\r\nA proposer can attempt to crash the network by submitting multiple concurrent proposals, and losing 32 ETH.  Client behavior in case of proposal-flood-attack needs to be specified/discussed.\r\n\r\n_Attack scenario_\r\n\r\nIn ETH2 a proposer is supposed to create a unique proposal.  In case of at least two conflicting\r\nproposals, the proposer will be slashed (and will lose at least 32 ETH).\r\n\r\nThe spec needs to address the case where the proposer decides to lose 32 ETH and floods the network with multiple (say 100) conflicting blocks.\r\n\r\nThe goal of the malicious proposer will then be to :\r\n\r\n- segment the network into 100 subgroups of nodes \r\n- present a separate proposal P to each subgroup\r\n-  make each subgroup build on a different proposal P, so there are total of 100 very weak and almost equal branches in the network\r\n\r\nWinning branch selection from such a split state may take a long time. If the attacker can make the network stall, say, for one hour, the attacker can short ETH  and easily recover ETH lost in the slashing.\r\n\r\nNote that in addition to the malicious proposer node there may be multiple malicious injection nodes in the network, who's job will be to inject and disseminate malicious proposals.  The injection nodes will not be slashed, since communication of malicious proposals is not a slashable event. The attacker could use machine learning and simulations to inject blocks in an optimal way, where the goal is to stall the network.\r\n\r\n_Impact: Describe the effect this may have in a production setting [1 to 2 sentences]_\r\n\r\nThe chain may stall for an extended period of time,  leading to a significant financial benefit for the attacker.\r\n\r\n_Components: Point to the files, functions, and/or specific line numbers where the bug occurs [1 to 2 sentences]_\r\n\r\nI reviewed the source code of the current ETH clients and was not able to identify active recovery mechanisms against the multiple-proposals-flood attack. The spec also does not seem to discuss this.\r\n\r\n_Reproduction: If used any sort of tools/simulations to find the bug, describe in detail how to reproduce the buggy behavior. Showcasing the bug using the python spec and associated test infrastructure found in the spec repo is preferred!_\r\n\r\n1. Start the chain.\r\n2. Make a proposer generate 100 conflicting proposals and inject them in different places in the network.\r\n3. Observer the network stalling.\r\n\r\nIf some type of protection exist, it needs to be documented. So it may be either a documentation bug or a more fundamental spec issue.\r\n\r\nFix: Description of suggested fix if available\r\n\r\nThe clients need mechanisms implemented not only to slash the block proposer post factum, but actively recover from the attack.",
  "closed_by": {
    "login": "JustinDrake",
    "id": 731743,
    "node_id": "MDQ6VXNlcjczMTc0Mw==",
    "avatar_url": "https://avatars.githubusercontent.com/u/731743?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/JustinDrake",
    "html_url": "https://github.com/JustinDrake",
    "followers_url": "https://api.github.com/users/JustinDrake/followers",
    "following_url": "https://api.github.com/users/JustinDrake/following{/other_user}",
    "gists_url": "https://api.github.com/users/JustinDrake/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/JustinDrake/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/JustinDrake/subscriptions",
    "organizations_url": "https://api.github.com/users/JustinDrake/orgs",
    "repos_url": "https://api.github.com/users/JustinDrake/repos",
    "events_url": "https://api.github.com/users/JustinDrake/events{/privacy}",
    "received_events_url": "https://api.github.com/users/JustinDrake/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1786/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1786/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/625117527",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1786#issuecomment-625117527",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1786",
    "id": 625117527,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyNTExNzUyNw==",
    "user": {
      "login": "JustinDrake",
      "id": 731743,
      "node_id": "MDQ6VXNlcjczMTc0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/731743?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JustinDrake",
      "html_url": "https://github.com/JustinDrake",
      "followers_url": "https://api.github.com/users/JustinDrake/followers",
      "following_url": "https://api.github.com/users/JustinDrake/following{/other_user}",
      "gists_url": "https://api.github.com/users/JustinDrake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JustinDrake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JustinDrake/subscriptions",
      "organizations_url": "https://api.github.com/users/JustinDrake/orgs",
      "repos_url": "https://api.github.com/users/JustinDrake/repos",
      "events_url": "https://api.github.com/users/JustinDrake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JustinDrake/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-07T08:44:02Z",
    "updated_at": "2020-05-07T08:44:02Z",
    "author_association": "MEMBER",
    "body": "> there are total of 100 very weak and almost equal branches in the network\r\n\r\nThis would be a fleeting unstable equilibrium handled by [the LMD GHOST fork choice](https://github.com/ethereum/eth2.0-specs/blob/dev/specs/phase0/fork-choice.md#get_head). Thanks to the honesty assumption there will quickly be (likely within a few slots, and extremely likely within one epoch) at least one honest block proposer who submits a single block proposal on one of the weak and almost equal branches in the network. That becomes a tipping point where attestations pile on this one honest block proposal and the weak forks collapse into a single strong chain.\r\n\r\n> If some type of protection exist, it needs to be documented.\r\n\r\nClients need to run their local fork choice rule when they attest :) This is documented in the [validator document](https://github.com/ethereum/eth2.0-specs/blob/dev/specs/phase0/validator.md#attestation-data).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/625117527/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/625370753",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1786#issuecomment-625370753",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1786",
    "id": 625370753,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyNTM3MDc1Mw==",
    "user": {
      "login": "kladkogex",
      "id": 13399135,
      "node_id": "MDQ6VXNlcjEzMzk5MTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/13399135?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kladkogex",
      "html_url": "https://github.com/kladkogex",
      "followers_url": "https://api.github.com/users/kladkogex/followers",
      "following_url": "https://api.github.com/users/kladkogex/following{/other_user}",
      "gists_url": "https://api.github.com/users/kladkogex/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kladkogex/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kladkogex/subscriptions",
      "organizations_url": "https://api.github.com/users/kladkogex/orgs",
      "repos_url": "https://api.github.com/users/kladkogex/repos",
      "events_url": "https://api.github.com/users/kladkogex/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kladkogex/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-07T16:48:28Z",
    "updated_at": "2020-05-07T17:16:53Z",
    "author_association": "NONE",
    "body": "> This would be a fleeting unstable equilibrium handled by the LMD GHOST fork choice. Thanks to the honesty assumption there will quickly be (likely within a few slots, and extremely likely within one epoch) at least one honest block proposer who submits a single block proposal on one of the weak and almost equal branches in the network. \r\n\r\nI do not have a feeling that it is so simple.  Each honest block proposer will have his view of the network. These local views will be in contradiction.\r\n\r\nLet the multiple blocks from the malicious proposer be X1, X2, X3 etc\r\n\r\nThen even if the  first honest guy tips into\r\n\r\nX1->A\r\n\r\nThen another honest guy may not be able to build on this branch since his view will be \r\n\r\nX2->\r\n\r\nso \r\n\r\nhe will not be able to switch to X1->A->B, since it assumes him replacing X2 to X1 in his established view. And this is NOT a \"normal\" alternative branch \r\n\r\nI hope you understand what I mean ... The local view of each honest proposer will be DIFFERENT and CONTRADICTORY.   The software assumes that there are no malicious block duplicates, so the block tree may not be able to include both X1 and X2 \r\n\r\n\r\n\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/625370753/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/625692285",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1786#issuecomment-625692285",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1786",
    "id": 625692285,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyNTY5MjI4NQ==",
    "user": {
      "login": "JustinDrake",
      "id": 731743,
      "node_id": "MDQ6VXNlcjczMTc0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/731743?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JustinDrake",
      "html_url": "https://github.com/JustinDrake",
      "followers_url": "https://api.github.com/users/JustinDrake/followers",
      "following_url": "https://api.github.com/users/JustinDrake/following{/other_user}",
      "gists_url": "https://api.github.com/users/JustinDrake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JustinDrake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JustinDrake/subscriptions",
      "organizations_url": "https://api.github.com/users/JustinDrake/orgs",
      "repos_url": "https://api.github.com/users/JustinDrake/repos",
      "events_url": "https://api.github.com/users/JustinDrake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JustinDrake/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-08T07:57:46Z",
    "updated_at": "2020-05-08T08:00:03Z",
    "author_association": "MEMBER",
    "body": "> he will not be able to switch to X1->A->B, since it assumes him replacing X2 to X1 in his established view\r\n\r\nIf by \"validator view\" here you mean the chain whose tip is [`get_head`](https://github.com/ethereum/eth2.0-specs/blob/dev/specs/phase0/fork-choice.md#get_head) then it is possible for clients to change to a view inconsistent with a previously-held view. For example, if a validator's view is currently Genesis->X2 it is possible to replace that view with the \"contradictory\" view Genesis->X1->A->B.\r\n\r\n> The local view of each honest proposer will be DIFFERENT and CONTRADICTORY\r\n\r\nFor me a \"validator view\" is the set of blocks and attestations that validator has received. Validator views are by nature subjective—them being different is not unexpected :) It is also not unexpected that `get_head` be contradictory across validators.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/625692285/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/628561934",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1786#issuecomment-628561934",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1786",
    "id": 628561934,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyODU2MTkzNA==",
    "user": {
      "login": "kladkogex",
      "id": 13399135,
      "node_id": "MDQ6VXNlcjEzMzk5MTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/13399135?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kladkogex",
      "html_url": "https://github.com/kladkogex",
      "followers_url": "https://api.github.com/users/kladkogex/followers",
      "following_url": "https://api.github.com/users/kladkogex/following{/other_user}",
      "gists_url": "https://api.github.com/users/kladkogex/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kladkogex/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kladkogex/subscriptions",
      "organizations_url": "https://api.github.com/users/kladkogex/orgs",
      "repos_url": "https://api.github.com/users/kladkogex/repos",
      "events_url": "https://api.github.com/users/kladkogex/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kladkogex/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-14T11:07:23Z",
    "updated_at": "2020-05-14T11:07:23Z",
    "author_association": "NONE",
    "body": "Good point!\r\n\r\nIMO for every complex system an experiment can be more useful than theory.\r\n\r\nWe, at SKALE are looking forward to ETH foundation announcing an ETH2 incentivized adversarial test net.  We will definitely participate :)\r\n\r\nThen we can tinker with different types of attacks and hopefully improve security :)\r\n\r\n\r\n ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/628561934/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/629167719",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1786#issuecomment-629167719",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1786",
    "id": 629167719,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyOTE2NzcxOQ==",
    "user": {
      "login": "JustinDrake",
      "id": 731743,
      "node_id": "MDQ6VXNlcjczMTc0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/731743?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JustinDrake",
      "html_url": "https://github.com/JustinDrake",
      "followers_url": "https://api.github.com/users/JustinDrake/followers",
      "following_url": "https://api.github.com/users/JustinDrake/following{/other_user}",
      "gists_url": "https://api.github.com/users/JustinDrake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JustinDrake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JustinDrake/subscriptions",
      "organizations_url": "https://api.github.com/users/JustinDrake/orgs",
      "repos_url": "https://api.github.com/users/JustinDrake/repos",
      "events_url": "https://api.github.com/users/JustinDrake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JustinDrake/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-15T10:48:19Z",
    "updated_at": "2020-05-15T10:48:19Z",
    "author_association": "MEMBER",
    "body": "Awesome. Closing this one for now. Keep poking at it.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/629167719/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
