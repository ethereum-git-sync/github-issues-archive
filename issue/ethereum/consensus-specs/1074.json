{
  "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1074",
  "repository_url": "https://api.github.com/repos/ethereum/consensus-specs",
  "labels_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1074/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1074/comments",
  "events_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1074/events",
  "html_url": "https://github.com/ethereum/consensus-specs/issues/1074",
  "id": 443035110,
  "node_id": "MDU6SXNzdWU0NDMwMzUxMTA=",
  "number": 1074,
  "title": "BLS and testing",
  "user": {
    "login": "protolambda",
    "id": 19571989,
    "node_id": "MDQ6VXNlcjE5NTcxOTg5",
    "avatar_url": "https://avatars.githubusercontent.com/u/19571989?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/protolambda",
    "html_url": "https://github.com/protolambda",
    "followers_url": "https://api.github.com/users/protolambda/followers",
    "following_url": "https://api.github.com/users/protolambda/following{/other_user}",
    "gists_url": "https://api.github.com/users/protolambda/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/protolambda/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/protolambda/subscriptions",
    "organizations_url": "https://api.github.com/users/protolambda/orgs",
    "repos_url": "https://api.github.com/users/protolambda/repos",
    "events_url": "https://api.github.com/users/protolambda/events{/privacy}",
    "received_events_url": "https://api.github.com/users/protolambda/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1295439957,
      "node_id": "MDU6TGFiZWwxMjk1NDM5OTU3",
      "url": "https://api.github.com/repos/ethereum/consensus-specs/labels/scope:CI/tests/pyspec",
      "name": "scope:CI/tests/pyspec",
      "color": "BDC0BA",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 6,
  "created_at": "2019-05-11T20:51:12Z",
  "updated_at": "2019-05-24T21:28:34Z",
  "closed_at": "2019-05-24T21:28:34Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "Decided I wanted to get this out to explain the current state of testing, and **collect feedback** (implementers please comment) on what you need from testing, and your feelings about BLS usage in tests.\r\n\r\n# BLS and testing\r\n\r\nThe two pain-points to get a pretty (and large) set of test-vectors out for clients are:\r\n- BLS Signature creation\r\n- BLS Signature verification\r\n\r\nAnd side-issue, but easily resolved:\r\n*efficient creation of a genesis state*:\r\nWhen BLS functionality is implemented in test-code (creation of signed deposits, and verification).\r\nSolution would be to either cache it, or create it directly, without going through the spec functions (current temporary solution on experiment branch).\r\n\r\n## Status\r\n\r\nTalking about the status on  [`spectest-deco` PR 1052](https://github.com/ethereum/eth2.0-specs/pull/1052) here, based on the  `v06x` branch, where we are developing 0.6 improvements. (to be merged back into dev later)\r\n\r\n### The testing pipeline currently looks like:\r\n\r\n- py-spec, calls BLS stub\r\n- test-helpers, don't create self-signed objects with valid signatures\r\n- py-test code, unified with test-vector-creation (see [PR 1052](https://github.com/ethereum/eth2.0-specs/pull/1052))\r\n- py-test runner to run spec-tests, purely for assertions\r\n- test-generator running the spec-tests, passing `generator_mode=true` to each of them, making them output a test-vector.\r\n\r\n### Pytests status:\r\n\r\n- move from `tests/` to `eth2spec/test`, i.e. part of package\r\n    - removed use of `pytest`\r\n    - annotated with `@spec_test` or similar (see PR 1052)\r\n- as part of test-generation effort, yay for shared effort:\r\n    - expanded in block-operation testing: [coverage checklist here](https://github.com/ethereum/eth2.0-specs/issues/927)\r\n    - slightly faster, less deep-copies\r\n- stuck on BLS stub (no sig creation/verification)\r\n\r\n### Test-generation status:\r\n\r\n- BLS, SSZ-generic, SSZ-static, shuffling test generators still all in place and up to date (`v06x` branch)\r\n- `operations` test-gen uses test-package ability to output test-vectors for each test-case\r\n    - but no valid signatures\r\n    - lack of a definition how to handle this signature problem as a test-consumer\r\n        - there are no signature-related testcases\r\n        - turning BLS off would effectively let you check conformance, but it's hacky, and not remotely a good practice to have even an option for...\r\n    - it's approx. ~140MB worth (iirc) of yaml encoded state-transitions, covering many edge-cases. Worth to get in the hands of implementers quick.\r\n- `sanity` tests updated and can be cleanly used for test-generation, but requires more work to define the format of the test-vectors, as they is more variety.\r\n- `epoch` processing tests also updated, also can be used, not as complete as block-processing, lower priority.\r\n\r\n## Possible ways forward:\r\n\r\n- Simple but hacky: \"turn BLS off for testing\"\r\n- No \"BLS off\", BLS ON on client side, but only partially on spec side. Rely on signature verification not being hit before anything else during testing\r\n    - valid test cases generated with valid signatures\r\n    - invalid test cases marked: does it error because of BLS? And runners should check the reason for aborting processing: if it doesn't match, the test should fail. Now these pytests don't need full BLS update work, and can be released somewhat quicker\r\n- \"BLS on\", more work (~1 week)\r\n    - slower on test-generation, but we get the best kind of test-vectors: correct, BLS verification ON.\r\n    - blocker: what if a test case fails because of a signature error (test setup not creating the sig correctly), instead of a real assertion case. Spec will look correct, passes tests, but things are not right. We need to mark Sig-verification errors distinctly, so we can catch these problems when we turn BLS on in the pyspec. How: instead of `assert verify_...`, just `verify_...`, and make it raise a special `BLSVerificationError` (or something like that)\r\n    - We likely still want to mark tests as \"signature related\" or not, so implementers can catch it easily if their code is not aborting properly before signature verification, to assure invalid inputs are not costly.\r\n\r\nA work-in-progress introduction of actual full BLS usage in the pytests is started here: [`tests-with-sigs` branch](https://github.com/ethereum/eth2.0-specs/tree/tests-with-sigs)\r\n\r\nSuggestions welcome.\r\n\r\n\r\n\r\n\r\n",
  "closed_by": {
    "login": "protolambda",
    "id": 19571989,
    "node_id": "MDQ6VXNlcjE5NTcxOTg5",
    "avatar_url": "https://avatars.githubusercontent.com/u/19571989?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/protolambda",
    "html_url": "https://github.com/protolambda",
    "followers_url": "https://api.github.com/users/protolambda/followers",
    "following_url": "https://api.github.com/users/protolambda/following{/other_user}",
    "gists_url": "https://api.github.com/users/protolambda/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/protolambda/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/protolambda/subscriptions",
    "organizations_url": "https://api.github.com/users/protolambda/orgs",
    "repos_url": "https://api.github.com/users/protolambda/repos",
    "events_url": "https://api.github.com/users/protolambda/events{/privacy}",
    "received_events_url": "https://api.github.com/users/protolambda/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1074/reactions",
    "total_count": 3,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 3,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1074/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/491548197",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1074#issuecomment-491548197",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1074",
    "id": 491548197,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5MTU0ODE5Nw==",
    "user": {
      "login": "mratsim",
      "id": 22738317,
      "node_id": "MDQ6VXNlcjIyNzM4MzE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/22738317?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mratsim",
      "html_url": "https://github.com/mratsim",
      "followers_url": "https://api.github.com/users/mratsim/followers",
      "following_url": "https://api.github.com/users/mratsim/following{/other_user}",
      "gists_url": "https://api.github.com/users/mratsim/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mratsim/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mratsim/subscriptions",
      "organizations_url": "https://api.github.com/users/mratsim/orgs",
      "repos_url": "https://api.github.com/users/mratsim/repos",
      "events_url": "https://api.github.com/users/mratsim/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mratsim/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-11T22:21:50Z",
    "updated_at": "2019-05-11T22:21:50Z",
    "author_association": "CONTRIBUTOR",
    "body": "I don't mind waiting a couple of weeks for state tests that don't require test-specific options to ignore failed signature check.\r\n\r\nFor sig-verification errors, we can either use a field (type?), the file name or comments to signal what should be tested, a field is probably better because you can do something like this\r\n\r\n```python\r\ndef my_test_case(test_cases) =\r\n    ...\r\n    try:\r\n      runStateTransition(test_cases['test_empty_block_transition']\r\n    except BLSVerificationError:\r\n      if test_cases['test_empty_block_transition'].failure_type == \"BLS_signature\":\r\n        pass\r\n      else:\r\n         raise # reraise if a BLS error is not expected\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/491548197/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/491601566",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1074#issuecomment-491601566",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1074",
    "id": 491601566,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5MTYwMTU2Ng==",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-12T14:41:11Z",
    "updated_at": "2019-05-12T14:41:11Z",
    "author_association": "MEMBER",
    "body": "I agree with the third option.\r\n\r\n* @mratsim, the type is certainly more powerful. Seems like a good idea.\r\n* on the `test-with-sigs` branch, I'm inclined to have a stub for writing and verifying signatures to still be present on most cases when `generator_mode=False` to keep CI moving along.\r\n* > assert verify_..., just verify_..., and make it raise a special BLSVerificationError (or something like that)\r\n    * change to `validate_…` if the function is going to throw the error itself.\r\n* to be clear, the two things that need to happen are the following. am I missing anything?\r\n    1. modify test case format to be able to express that it is a BLS error\r\n    2. modify test creation to ensure usage of proper signing\r\n\r\n\r\n------- \r\n\r\n\r\n> sanity tests updated and can be cleanly used for test-generation, but requires more work to define the format of the test-vectors, as they is more variety.\r\n\r\nWhat work is required here?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/491601566/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/491778278",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1074#issuecomment-491778278",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1074",
    "id": 491778278,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5MTc3ODI3OA==",
    "user": {
      "login": "zilm13",
      "id": 6196452,
      "node_id": "MDQ6VXNlcjYxOTY0NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6196452?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zilm13",
      "html_url": "https://github.com/zilm13",
      "followers_url": "https://api.github.com/users/zilm13/followers",
      "following_url": "https://api.github.com/users/zilm13/following{/other_user}",
      "gists_url": "https://api.github.com/users/zilm13/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zilm13/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zilm13/subscriptions",
      "organizations_url": "https://api.github.com/users/zilm13/orgs",
      "repos_url": "https://api.github.com/users/zilm13/repos",
      "events_url": "https://api.github.com/users/zilm13/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zilm13/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-13T11:05:52Z",
    "updated_at": "2019-05-13T11:05:52Z",
    "author_association": "CONTRIBUTOR",
    "body": "I'd bet for 3rd option though I liked first one at the beginning as it sounds like \"we don't test this thing again and again\", but in fact real BLS verifies not only BLS itself but logic of methods preparing inputs too, plus it's not a big overhead when running whole test in time.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/491778278/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/491958717",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1074#issuecomment-491958717",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1074",
    "id": 491958717,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5MTk1ODcxNw==",
    "user": {
      "login": "protolambda",
      "id": 19571989,
      "node_id": "MDQ6VXNlcjE5NTcxOTg5",
      "avatar_url": "https://avatars.githubusercontent.com/u/19571989?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/protolambda",
      "html_url": "https://github.com/protolambda",
      "followers_url": "https://api.github.com/users/protolambda/followers",
      "following_url": "https://api.github.com/users/protolambda/following{/other_user}",
      "gists_url": "https://api.github.com/users/protolambda/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/protolambda/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/protolambda/subscriptions",
      "organizations_url": "https://api.github.com/users/protolambda/orgs",
      "repos_url": "https://api.github.com/users/protolambda/repos",
      "events_url": "https://api.github.com/users/protolambda/events{/privacy}",
      "received_events_url": "https://api.github.com/users/protolambda/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-13T19:42:19Z",
    "updated_at": "2019-05-13T19:42:19Z",
    "author_association": "MEMBER",
    "body": "@djrtwo \r\n\r\nFew doubts here:\r\n- don't want `generator_mode` to do more than it says, let's keep BLS on/off separate.\r\n- don't like renaming/removing `verify`. It's core to BLS spec, and I want it to show in the spec. Maybe we can convert the returned bool to an error, with some helper? E.g. `enforce(verify_sig(...))`\r\n- What needs changing:\r\n  i. yes, but maybe more general. Like `error_type`, and then `assert`, `bls`, and more in future possibly (or more precise assertion reasons). And then clients can map their own errors/reporting to these error-types, to verify it's exactly correct, and not just a happy coincident error.\r\n  ii. Modify test creation for proper signing. yes. I'm hesitant to implement a \"BLS off\" thing for multiple reasons:\r\n    - if it's bugged, tests can be wrong\r\n    - it opens poor design practice (BLS should always be on in production, code to turn it off should not be accessible in any way in a client, security first)\r\n    - it's very hard to implement on/off cleanly. Configuration is hacky enough, but that doesn't affect anything per-test-case. And I do want invalid-sig tests, and a few tests where signatures are used for side-effects.\r\n\r\n  ii. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/491958717/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/491992791",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1074#issuecomment-491992791",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1074",
    "id": 491992791,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5MTk5Mjc5MQ==",
    "user": {
      "login": "protolambda",
      "id": 19571989,
      "node_id": "MDQ6VXNlcjE5NTcxOTg5",
      "avatar_url": "https://avatars.githubusercontent.com/u/19571989?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/protolambda",
      "html_url": "https://github.com/protolambda",
      "followers_url": "https://api.github.com/users/protolambda/followers",
      "following_url": "https://api.github.com/users/protolambda/following{/other_user}",
      "gists_url": "https://api.github.com/users/protolambda/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/protolambda/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/protolambda/subscriptions",
      "organizations_url": "https://api.github.com/users/protolambda/orgs",
      "repos_url": "https://api.github.com/users/protolambda/repos",
      "events_url": "https://api.github.com/users/protolambda/events{/privacy}",
      "received_events_url": "https://api.github.com/users/protolambda/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-13T21:25:12Z",
    "updated_at": "2019-05-13T21:25:12Z",
    "author_association": "MEMBER",
    "body": "Plan, after discussion with @djrtwo IRL:\r\n- provide test vectors with BLS ON during generation, i.e. proper signing\r\n- mark tests that are dependent on BLS being ON.\r\n  - clients can decide to disable BLS for tests that don't depend on it, for speed. But they don't have to. (or can support both)\r\n- mark error type in tests, for more assurance that code is doing things right. I.e. not the wrong error causing a \"abort processing on this input\" test to pass.\r\n- decorate pytests with BLS-switch (implemented here just now: `bls-test-deco` branch)\r\n  - this let's you pass `bls_active=False/True` to the test, similar to `generator_mode`\r\n  - generation of tests will pass `bls_active=True` to all tests.\r\n  - pytests will run by default with `bls_active=False`\r\n  - some pytests are decorated with `@always_bls`, to force BLS to be active, regardless of what is passed as argument. For the bls-dependent tests.\r\n  - we may run some pytests with `bls_active=True` in some occasions/triggers (TBD), just to check signing works as intended.\r\n\r\nWhat we get:\r\n- clients get flexibility to choose for fast CI running (if they are limited by BLS performance), yet also have proper BLS vectors to test with\r\n- CI in specs repo is fast, as it stubs BLS where possible\r\n- We can have non-stub BLS pytests\r\n- We improve the test format with error-types. (again, optional for clients, but helps ensure their logic is correct, i.e. less blackbox)\r\n\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/491992791/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/492159087",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1074#issuecomment-492159087",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1074",
    "id": 492159087,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5MjE1OTA4Nw==",
    "user": {
      "login": "paulhauner",
      "id": 6660660,
      "node_id": "MDQ6VXNlcjY2NjA2NjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6660660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paulhauner",
      "html_url": "https://github.com/paulhauner",
      "followers_url": "https://api.github.com/users/paulhauner/followers",
      "following_url": "https://api.github.com/users/paulhauner/following{/other_user}",
      "gists_url": "https://api.github.com/users/paulhauner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paulhauner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paulhauner/subscriptions",
      "organizations_url": "https://api.github.com/users/paulhauner/orgs",
      "repos_url": "https://api.github.com/users/paulhauner/repos",
      "events_url": "https://api.github.com/users/paulhauner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paulhauner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-14T09:21:59Z",
    "updated_at": "2019-05-14T09:22:35Z",
    "author_association": "MEMBER",
    "body": "> provide test vectors with BLS ON during generation, i.e. proper signing mark tests that are dependent on BLS being ON.\r\n\r\nI agree with this, I'd like to see **all** tests with valid BLS sigs/keys. Clients can choose which tests run with \"fake crypto\".\r\n\r\nWe're presently failing the SSZ tests because they're using fundamentally invalid signatures. Our alternative is to switch the tests to our fake crypto library, but then we're no longer testing production SSZ implementations.\r\n\r\nWe had the same problem with the `v0.5.1` state tests and it forced us to run those tests with fake crypto. Our experience was that either made our build process more complex/error-prone or weakened our production code.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/492159087/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
