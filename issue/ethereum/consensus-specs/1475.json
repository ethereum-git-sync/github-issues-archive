{
  "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1475",
  "repository_url": "https://api.github.com/repos/ethereum/consensus-specs",
  "labels_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1475/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1475/comments",
  "events_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1475/events",
  "html_url": "https://github.com/ethereum/consensus-specs/issues/1475",
  "id": 520555579,
  "node_id": "MDU6SXNzdWU1MjA1NTU1Nzk=",
  "number": 1475,
  "title": "Phase 0 to 1 upgradability: fork/version boundary deserialization issue",
  "user": {
    "login": "hwwhww",
    "id": 9263930,
    "node_id": "MDQ6VXNlcjkyNjM5MzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/9263930?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hwwhww",
    "html_url": "https://github.com/hwwhww",
    "followers_url": "https://api.github.com/users/hwwhww/followers",
    "following_url": "https://api.github.com/users/hwwhww/following{/other_user}",
    "gists_url": "https://api.github.com/users/hwwhww/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hwwhww/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hwwhww/subscriptions",
    "organizations_url": "https://api.github.com/users/hwwhww/orgs",
    "repos_url": "https://api.github.com/users/hwwhww/repos",
    "events_url": "https://api.github.com/users/hwwhww/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hwwhww/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1170173759,
      "node_id": "MDU6TGFiZWwxMTcwMTczNzU5",
      "url": "https://api.github.com/repos/ethereum/consensus-specs/labels/phase1",
      "name": "phase1",
      "color": "F7C242",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2019-11-10T05:14:59Z",
  "updated_at": "2019-11-13T07:37:16Z",
  "closed_at": "2019-11-13T07:37:15Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "Thanks to @dankrad for giving input of the proposed solution.\r\n\r\ntldr: (i) The SSZ object versioning is based on protocol versions, and (ii) heterogeneous list/vector is *not* allowed in SSZ. So with the current phase 1 spec (https://github.com/ethereum/eth2.0-specs/pull/1427), when we cross the version boundary, we are not able to process the previous operations with the new scheme.\r\n\r\n## Issue\r\n### Versioning in the networking layer\r\n* For the individual operation gossip topics messages (e.g., `attestation`, `voluntary_exit`) are versioned by protocol IDs. So it's fine to receive messages of different versions at the single-operation level.\r\n* The `Protocol ID` would map to the specific schema version of the SSZ object definition, so that we can deserialize it with the corresponding schema. So üëç\r\n\r\n### Fork/version boundary operations\r\n* However, when crossing the version boundary, the current `BeaconBlockBody.[operations]: List[Operation, N]` only hold for one version of the given `Operation`.\r\n* The block proposer cannot include both the previous version and current version objects in the same SSZ List. For example:\r\n\r\n#### Example 1: Attestation inclusion\r\n* In the phase 1 protocol changes, we can forecast that at least `AttestationData` fields will be changed.\r\n* For the attesters of the **last slot of the previous version**, if they create attestation with the *old* schema, their attestation will *not* be able to be included in the **block of the first slot of the current version**.\r\n* If the attesters create attestation with the *new* schema, it's possible to be included in the next block. **But, should they?**\r\n* Moreover, how about the late attestations?\r\n\r\n####  Example 2: Slashing operations\r\n* `AttesterSlashing` contains `attestation_1: IndexedAttestation` and `attestation_2: IndexedAttestation`, so similar to `Attestation`, the new version block can't include heterogeneous `AttesterSlashing` formats. So we can't slash the malicious attesters at the previous version epoch.\r\n* `ProposerSlashing` contains `header_1: BeaconBlockHeader` and `header_2: BeaconBlockHeader`, which are the conflicting beacon block headers of the slot of the proposer to slash. *If* we change `BeaconBlockHeader` format in the future version, we can't slash the malicious proposer that double-proposed at the previous version epoch.\r\n\r\n#### Example 3: `BeaconState.previous_epoch_attestations: List[PendingAttestation, MAX_ATTESTATIONS * SLOTS_PER_EPOCH]`.\r\n* At the first epoch of the new version, this field should be able to hold the previous version of `PendingAttestation`.\r\n\r\n## Proposed solution\r\n-  Use [SSZ `Union` type](https://github.com/ethereum/eth2.0-specs/blob/dev/specs/simple-serialize.md#composite-types) to make Phase1 Lists compatable with both previous & current version of objects. e.g., `Phase1BeaconBlockBody.attestations: List[Union[Phase0Attestation, Phase1Attestation], N]`.\r\n- Pros:\r\n    - The proposers can now include both versions of SSZ objects.\r\n- Cons:\r\n    - Compare to rejecting all incompatible operations, it's more complex to handle both versions.",
  "closed_by": {
    "login": "hwwhww",
    "id": 9263930,
    "node_id": "MDQ6VXNlcjkyNjM5MzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/9263930?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hwwhww",
    "html_url": "https://github.com/hwwhww",
    "followers_url": "https://api.github.com/users/hwwhww/followers",
    "following_url": "https://api.github.com/users/hwwhww/following{/other_user}",
    "gists_url": "https://api.github.com/users/hwwhww/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hwwhww/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hwwhww/subscriptions",
    "organizations_url": "https://api.github.com/users/hwwhww/orgs",
    "repos_url": "https://api.github.com/users/hwwhww/repos",
    "events_url": "https://api.github.com/users/hwwhww/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hwwhww/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1475/reactions",
    "total_count": 1,
    "+1": 1,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1475/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/553222502",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1475#issuecomment-553222502",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1475",
    "id": 553222502,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1MzIyMjUwMg==",
    "user": {
      "login": "vbuterin",
      "id": 2230894,
      "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vbuterin",
      "html_url": "https://github.com/vbuterin",
      "followers_url": "https://api.github.com/users/vbuterin/followers",
      "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
      "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
      "organizations_url": "https://api.github.com/users/vbuterin/orgs",
      "repos_url": "https://api.github.com/users/vbuterin/repos",
      "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vbuterin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-13T03:29:04Z",
    "updated_at": "2019-11-13T03:29:04Z",
    "author_association": "MEMBER",
    "body": "My instinct is to just disallow phase 0 objects to be included in phase 1 and vice versa. There are a few validators that would lose a tiny amount of rewards, but the losses are tiny. Also, from the protocol point of view, finality will happen in phase 1 just fine. The main risk is that fraud proofs from the end of phase 0 would not carry over into phase 1 so validators could get away with some mischief in the last few slots of phase 0, but especially between phase 0 and phase 1 I don't see even that risk as being anywhere close to high enough to justify the complexity of working around it; relying on honest majority is fine.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/553222502/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/553277919",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1475#issuecomment-553277919",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1475",
    "id": 553277919,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1MzI3NzkxOQ==",
    "user": {
      "login": "hwwhww",
      "id": 9263930,
      "node_id": "MDQ6VXNlcjkyNjM5MzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9263930?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hwwhww",
      "html_url": "https://github.com/hwwhww",
      "followers_url": "https://api.github.com/users/hwwhww/followers",
      "following_url": "https://api.github.com/users/hwwhww/following{/other_user}",
      "gists_url": "https://api.github.com/users/hwwhww/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hwwhww/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hwwhww/subscriptions",
      "organizations_url": "https://api.github.com/users/hwwhww/orgs",
      "repos_url": "https://api.github.com/users/hwwhww/repos",
      "events_url": "https://api.github.com/users/hwwhww/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hwwhww/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-13T07:37:15Z",
    "updated_at": "2019-11-13T07:37:15Z",
    "author_association": "MEMBER",
    "body": "Base on the weekly call (as Vitalik's response above), closing the issue now. We might think more about the details once the upgrade is coming. :)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/553277919/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
