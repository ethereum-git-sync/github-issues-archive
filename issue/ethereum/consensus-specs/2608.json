{
  "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2608",
  "repository_url": "https://api.github.com/repos/ethereum/consensus-specs",
  "labels_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2608/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2608/comments",
  "events_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2608/events",
  "html_url": "https://github.com/ethereum/consensus-specs/issues/2608",
  "id": 999367238,
  "node_id": "I_kwDOCOoGbc47kSJG",
  "number": 2608,
  "title": "Transaction Type representation in the Merge",
  "user": {
    "login": "protolambda",
    "id": 19571989,
    "node_id": "MDQ6VXNlcjE5NTcxOTg5",
    "avatar_url": "https://avatars.githubusercontent.com/u/19571989?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/protolambda",
    "html_url": "https://github.com/protolambda",
    "followers_url": "https://api.github.com/users/protolambda/followers",
    "following_url": "https://api.github.com/users/protolambda/following{/other_user}",
    "gists_url": "https://api.github.com/users/protolambda/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/protolambda/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/protolambda/subscriptions",
    "organizations_url": "https://api.github.com/users/protolambda/orgs",
    "repos_url": "https://api.github.com/users/protolambda/repos",
    "events_url": "https://api.github.com/users/protolambda/events{/privacy}",
    "received_events_url": "https://api.github.com/users/protolambda/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 2812431987,
      "node_id": "MDU6TGFiZWwyODEyNDMxOTg3",
      "url": "https://api.github.com/repos/ethereum/consensus-specs/labels/Bellatrix",
      "name": "Bellatrix",
      "color": "1D36aa",
      "default": false,
      "description": "CL+EL Merge"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 14,
  "created_at": "2021-09-17T13:41:12Z",
  "updated_at": "2021-10-21T12:55:37Z",
  "closed_at": "2021-10-21T12:55:36Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "## Problem\r\n\r\nThe transaction typing forward-compatibility is *broken*:\r\ndue to double transaction type identification, and the execution engine only recognizing the first,\r\nintroducing additional types to the current `Union` definition is not possible.\r\n\r\n## Background\r\n\r\nThe current Merge spec defines transactions and payloads as:\r\n```python\r\nOpaqueTransaction = ByteList[MAX_BYTES_PER_OPAQUE_TRANSACTION]  # typed transaction envelope: TransactionType || TransactionPayload\r\nTransaction = Union[OpaqueTransaction]  # Union can introduce more union options, but *only consensus layer would be aware*\r\ntransactions: List[Transaction, MAX_TRANSACTIONS_PER_PAYLOAD]\r\n```\r\n\r\nSo in JSON this looks like:\r\n```\r\n{\r\ntransactions: [\r\n  {selector: 0, value: \"0x??....\"},  // legacy transaction with RLP byte in range 0xc0 <= id <= 0xfe\r\n  {selector: 0, value: \"0x01....\"},  // eip-2930 (optional access lists) in OpaqueTransaction\r\n  {selector: 0, value: \"0x02....\"},  // eip-1559 in OpaqueTransaction\r\n  \r\n  {selector: 1, value: {\"foo\": 123, \"bar\": 42}},  // if we were to add a FooBar type, i.e. Union[OpaqueTransaction, FooBar] \r\n]\r\n}\r\n```\r\n\r\nThe Merge API then just uses:\r\n> - transactions: Array of `DATA` - Array of transaction objects,\r\n  each object is a byte list (`DATA`) representing `TransactionType || TransactionPayload` or `LegacyTransaction` \r\n  as defined in EIP-2718\r\n\r\nRead: Merge API uses a list of `OpaqueTransaction`, not a list of `Union[OpaqueTransaction]`\r\n\r\nAnd the `block_hash` (execution layer hash, same as eth1 today) is constructed by hashing the header,\r\nwhich includes a transactions-trie, which is built from EIP-2718 transactions, **not** from `Transaction` with `Union` selector data.\r\n\r\n---\r\n\r\n\"Why do we even have this `Union`?\" you may ask, well:\r\n\r\nThe benefit of `Union`:\r\n- Merkleize the selector and value as two separate binary tree nodes; elegant proof to get the type, then handle the value subtree appropriately\r\n- Option to specify other transactions in the future as SSZ type (nice merkleization of transaction contents, no RLP, etc.)\r\n\r\nThe problems of `Union`:\r\n- `selector` byte and EIP-2718 byte are *different*, can be confusing\r\n- Not specified how additional SSZ typed transactions would make their way into the execution engine, or even affect the transaction trie or block hash\r\n\r\nThis is kind of messy, and for new things like [Rollups using the same Execution Engine API](https://twitter.com/protolambda/status/1427819892288393218),\r\nwe definitely want typed transactions to just work and not break the next hardfork after the Merge.\r\n\r\n## Proposal to fix\r\n\r\nThere are a few ways this can improve:\r\n1. Translate EIP-2718 transaction IDs into the Union type, and translate back before insertion into execution layer\r\n2. Update the execution layer to parse `Union[OpaqueTransaction]` with union-selector, keep 2 layers of ids\r\n3. Drop the Union idea\r\n\r\n### 1. Translate EIP-2718 transaction IDs into the Union type, and translate back before insertion into execution layer\r\n\r\n- 100% compatible with current execution engines, no changes or additions to eth1\r\n- Consistent identifiers between Union and EIP-2718\r\n- Get to keep the `Union` type benefits\r\n- Forward-compatible for SSZ typed transactions\r\n  - And with the [proposed `CommitmentContainer` extension to SSZ](https://github.com/ethereum/consensus-specs/pull/2585) we can be even more forward compatible\r\n\r\n```python\r\n# Define EIP-2718 base types\r\nLegacyTransaction = ByteList[MAX_BYTES_PER_TRANSACTION_PAYLOAD]  # contains the full RLP, including first byte\r\nTransactionPayload = ByteList[MAX_BYTES_PER_TRANSACTION_PAYLOAD]  # excludes the TransactionType byte\r\nTransactionType = uint8\r\n\r\nLEGACY_TRANSACTION = TransactionType(0)\r\nEIP_2930_TRANSACTION = TransactionType(1)\r\nEIP_1559_TRANSACTION = TransactionType(2)\r\n\r\nTransaction = Union[{\r\n  LEGACY_TRANSACTION: LegacyTransaction,\r\n  EIP_2930_TRANSACTION: TransactionPayload,\r\n  EIP_1559_TRANSACTION: TransactionPayload,\r\n\r\n  FUTURE_FOOBAR_TRANSACTION: FooBar,  # extension for illustration\r\n}]\r\n\r\ntransactions: List[Transaction, MAX_TRANSACTIONS_PER_PAYLOAD]\r\n\r\ndef transaction_envelope(tx: Transaction) -> bytes:\r\n    if tx.selector == LEGACY_TRANSACTION:\r\n        assert len(tx.value) > 0 and 0xc0 <= tx.value[0] <= 0xfe  # don't allow e.g. eip-1559 transactions in the legacy transaction union selector\r\n        return tx.value\r\n    transaction_type = bytes([tx.selector])\r\n    transaction_payload = serialize(tx.value)  # result is just as-is if a ByteList, but structured SSZ is flattened\r\n    return transaction_type + transaction_payload\r\n\r\n# transaction_envelope is used to convert the ExecutionPayload to the EIP-2718 inputs sent to the execution engine.\r\n# Note: receipt trie is unaffected, EIP-2718 specifies how EIP-2718 transaction receipts are handled, and no execution engine changes are necessary to support this approach\r\n```\r\n\r\n### 2. Update the execution layer to parse `Union[OpaqueTransaction]` with union-selector, keep 2 layers of ids\r\n\r\nThis likely requires another transaction typing EIP, and seems way more complex and unnecessary than the other solutions.\r\nBut this is what it is like if we keep `Union` and expect the execution engine to just handle it.\r\n\r\nJust for illustration:\r\n- EIP-2718 version 2\r\n- A changed transaction trie, to have a trie of `transaction index -> Union[OpaqueTransaction]`\r\n- receipts that handle this additional selector ID\r\n- JSON RPC changes to support a wrapper type with `selector` and `value` fields everywhere\r\n\r\n### 3. Drop the Union idea\r\n\r\n- No benefits of `Union` (losing type-structured merkleization of future types, losing transaction-type mix-in for easy type proof, etc.)\r\n- Transactions defined in execution layer, very opaque to consensus layer (somewhat of a benefit, but also limiting future changes significantly, e.g. if we need a special transaction type for withdrawals or shard-builder accounting)\r\n- No ability to utilize any SSZ (incl. `CommitmentContainer` proposal) benefits\r\n- Simple\r\n\r\n```\r\nOpaqueTransaction = ByteList[MAX_BYTES_PER_OPAQUE_TRANSACTION]  # typed transaction envelope: TransactionType || TransactionPayload\r\ntransactions: List[OpaqueTransaction, MAX_TRANSACTIONS_PER_PAYLOAD]\r\n```\r\n\r\n----\r\n\r\n## My opinion\r\n\r\n- Option 1 would get things far, with no execution engine changes, just changes to the still alpha-version Merge spec. It's closest to the original intention of the `Union`\r\n- Option 2 is more of a thought experiment than an option\r\n- Option 3 simplifies at the cost of later technical debt\r\n\r\nAnd you could think of variants of Option 1 that try and combine transaction types 0, 1 and 2 but consistency between Union selector and EIP-2718 type identifier seems more important.\r\n",
  "closed_by": {
    "login": "protolambda",
    "id": 19571989,
    "node_id": "MDQ6VXNlcjE5NTcxOTg5",
    "avatar_url": "https://avatars.githubusercontent.com/u/19571989?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/protolambda",
    "html_url": "https://github.com/protolambda",
    "followers_url": "https://api.github.com/users/protolambda/followers",
    "following_url": "https://api.github.com/users/protolambda/following{/other_user}",
    "gists_url": "https://api.github.com/users/protolambda/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/protolambda/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/protolambda/subscriptions",
    "organizations_url": "https://api.github.com/users/protolambda/orgs",
    "repos_url": "https://api.github.com/users/protolambda/repos",
    "events_url": "https://api.github.com/users/protolambda/events{/privacy}",
    "received_events_url": "https://api.github.com/users/protolambda/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2608/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2608/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/921807022",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2608#issuecomment-921807022",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2608",
    "id": 921807022,
    "node_id": "IC_kwDOCOoGbc428aiu",
    "user": {
      "login": "protolambda",
      "id": 19571989,
      "node_id": "MDQ6VXNlcjE5NTcxOTg5",
      "avatar_url": "https://avatars.githubusercontent.com/u/19571989?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/protolambda",
      "html_url": "https://github.com/protolambda",
      "followers_url": "https://api.github.com/users/protolambda/followers",
      "following_url": "https://api.github.com/users/protolambda/following{/other_user}",
      "gists_url": "https://api.github.com/users/protolambda/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/protolambda/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/protolambda/subscriptions",
      "organizations_url": "https://api.github.com/users/protolambda/orgs",
      "repos_url": "https://api.github.com/users/protolambda/repos",
      "events_url": "https://api.github.com/users/protolambda/events{/privacy}",
      "received_events_url": "https://api.github.com/users/protolambda/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-17T13:41:56Z",
    "updated_at": "2021-09-17T13:41:56Z",
    "author_association": "MEMBER",
    "body": "@mkalinin @MicahZoltu @djrtwo please take a look",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/921807022/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/921847521",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2608#issuecomment-921847521",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2608",
    "id": 921847521,
    "node_id": "IC_kwDOCOoGbc428kbh",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-17T14:34:56Z",
    "updated_at": "2021-09-17T14:34:56Z",
    "author_association": "MEMBER",
    "body": "I like option 1.  Any thoughts on having 2 types for \"legacy transactions\" though, one for pre-155 (without chainID) and one for post-155 (with chainID)?  If we are going to give a type to legacy transactions, it would be *nice* to have them be separate types.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/921847521/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/921866257",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2608#issuecomment-921866257",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2608",
    "id": 921866257,
    "node_id": "IC_kwDOCOoGbc428pAR",
    "user": {
      "login": "mkalinin",
      "id": 1892772,
      "node_id": "MDQ6VXNlcjE4OTI3NzI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1892772?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mkalinin",
      "html_url": "https://github.com/mkalinin",
      "followers_url": "https://api.github.com/users/mkalinin/followers",
      "following_url": "https://api.github.com/users/mkalinin/following{/other_user}",
      "gists_url": "https://api.github.com/users/mkalinin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mkalinin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mkalinin/subscriptions",
      "organizations_url": "https://api.github.com/users/mkalinin/orgs",
      "repos_url": "https://api.github.com/users/mkalinin/repos",
      "events_url": "https://api.github.com/users/mkalinin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mkalinin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-17T14:59:38Z",
    "updated_at": "2021-09-17T14:59:38Z",
    "author_association": "MEMBER",
    "body": "Option 1 seems the most reasonable to me.\r\n\r\n@MicahZoltu why do you think we should care about pre-155 transactions after the Merge?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/921866257/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/921892370",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2608#issuecomment-921892370",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2608",
    "id": 921892370,
    "node_id": "IC_kwDOCOoGbc428vYS",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-17T15:35:53Z",
    "updated_at": "2021-09-17T15:35:53Z",
    "author_association": "MEMBER",
    "body": "They are technically different transaction types, they just have the same shape so they are difficult to differentiate.  If we are going to give them type numbers, we should just do it right and give both types their own number to ease differentiation across the ecosystem.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/921892370/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/922178249",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2608#issuecomment-922178249",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2608",
    "id": 922178249,
    "node_id": "IC_kwDOCOoGbc4291LJ",
    "user": {
      "login": "mkalinin",
      "id": 1892772,
      "node_id": "MDQ6VXNlcjE4OTI3NzI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1892772?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mkalinin",
      "html_url": "https://github.com/mkalinin",
      "followers_url": "https://api.github.com/users/mkalinin/followers",
      "following_url": "https://api.github.com/users/mkalinin/following{/other_user}",
      "gists_url": "https://api.github.com/users/mkalinin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mkalinin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mkalinin/subscriptions",
      "organizations_url": "https://api.github.com/users/mkalinin/orgs",
      "repos_url": "https://api.github.com/users/mkalinin/repos",
      "events_url": "https://api.github.com/users/mkalinin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mkalinin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-18T04:36:18Z",
    "updated_at": "2021-09-18T04:36:18Z",
    "author_association": "MEMBER",
    "body": "> They are technically different transaction types, they just have the same shape so they are difficult to differentiate. If we are going to give them type numbers, we should just do it right and give both types their own number to ease differentiation across the ecosystem.\r\n\r\nI was thinking that pre-155 transaction format is not used by anyone as migrating to post-155 doesn't require any changes on the dapp layer and is rather a matter of software upgrade. Thus, `LegacyTransaction` should be of post-155 format.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/922178249/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/922178697",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2608#issuecomment-922178697",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2608",
    "id": 922178697,
    "node_id": "IC_kwDOCOoGbc4291SJ",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-18T04:40:54Z",
    "updated_at": "2021-09-18T04:40:54Z",
    "author_association": "MEMBER",
    "body": "Pre-155 is still used when you want a transaction that is intentionally replayable across networks to allow for deterministic contract addresses.  It would be cool to introduce this as a built-in feature like making a CREATE2 pre-compile, but at the moment we don't have any such thing so we cannot deprecate 155.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/922178697/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/922208181",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2608#issuecomment-922208181",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2608",
    "id": 922208181,
    "node_id": "IC_kwDOCOoGbc4298e1",
    "user": {
      "login": "mkalinin",
      "id": 1892772,
      "node_id": "MDQ6VXNlcjE4OTI3NzI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1892772?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mkalinin",
      "html_url": "https://github.com/mkalinin",
      "followers_url": "https://api.github.com/users/mkalinin/followers",
      "following_url": "https://api.github.com/users/mkalinin/following{/other_user}",
      "gists_url": "https://api.github.com/users/mkalinin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mkalinin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mkalinin/subscriptions",
      "organizations_url": "https://api.github.com/users/mkalinin/orgs",
      "repos_url": "https://api.github.com/users/mkalinin/repos",
      "events_url": "https://api.github.com/users/mkalinin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mkalinin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-18T05:50:02Z",
    "updated_at": "2021-09-18T05:50:02Z",
    "author_association": "MEMBER",
    "body": "> Pre-155 is still used when you want a transaction that is intentionally replayable across networks to allow for deterministic contract addresses. It would be cool to introduce this as a built-in feature like making a CREATE2 pre-compile, but at the moment we don't have any such thing so we cannot deprecate 155.\r\n\r\nI see! Then why don't we have this two types distinguished by the EIP? I would not stem from the EIP designing this part of the beacon chain.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/922208181/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/922230530",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2608#issuecomment-922230530",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2608",
    "id": 922230530,
    "node_id": "IC_kwDOCOoGbc42-B8C",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-18T07:11:06Z",
    "updated_at": "2021-09-18T07:11:06Z",
    "author_association": "MEMBER",
    "body": "EIP-155 was before we had typed transactions.  When we introduced EIP-2718: Typed Transactions there was discussion of creating a new transaction type for legacy transactions or two new transaction types for pre-155 and post-155.  I think we didn't follow through with it just because it was deemed unnecessary since we would still need to support legacy transactions for some indefinite period of time.\r\n\r\nWith the introduction of the beacon chain however, the argument that \"we have to support legacy forever\" no longer holds since beacon chain is starting from a clean slate.  In this case, I would prefer to start from the cleanest slate possible which IMO would mean separate pre-155 and post-155 transaction types.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/922230530/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/922649391",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2608#issuecomment-922649391",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2608",
    "id": 922649391,
    "node_id": "IC_kwDOCOoGbc42_oMv",
    "user": {
      "login": "mkalinin",
      "id": 1892772,
      "node_id": "MDQ6VXNlcjE4OTI3NzI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1892772?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mkalinin",
      "html_url": "https://github.com/mkalinin",
      "followers_url": "https://api.github.com/users/mkalinin/followers",
      "following_url": "https://api.github.com/users/mkalinin/following{/other_user}",
      "gists_url": "https://api.github.com/users/mkalinin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mkalinin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mkalinin/subscriptions",
      "organizations_url": "https://api.github.com/users/mkalinin/orgs",
      "repos_url": "https://api.github.com/users/mkalinin/repos",
      "events_url": "https://api.github.com/users/mkalinin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mkalinin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-20T05:39:37Z",
    "updated_at": "2021-09-20T05:39:37Z",
    "author_association": "MEMBER",
    "body": "You mean we do the following at the Merge:\r\n-  Deprecate `LegacyTransaction`\r\n- Add a couple of new types: `Pre155Transaction`, `Post155Transaction`\r\n\r\nAnd we would need these changes to be specified in a separate EIP. Did I get this right?\r\n\r\nAlso, `Pre155Transaction` doesn't sound. From the above use case I can conclude that this is a transaction where `chainId=*` and pre-155 format perfectly fits an implementation of such transaction type. Potentially it is `MultiChainTransaction` or something like that.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/922649391/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/922664069",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2608#issuecomment-922664069",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2608",
    "id": 922664069,
    "node_id": "IC_kwDOCOoGbc42_ryF",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-20T06:21:59Z",
    "updated_at": "2021-09-20T06:21:59Z",
    "author_association": "MEMBER",
    "body": "I suspect that convincing the client teams to fully deprecate legacy transactions before or with the merge will not go over well, so I propose we *only* implement this new typing scheme in the consensus layer stuff which doesn't currently have the legacy baggage.  At a later point in time we can apply a similar change (using the same numbers) to execution client gossip, transaction trie, and receipt trie.\r\n\r\nThis would mean that for now we just need to pick two numbers (`0` and `4` are both available) for legacy transaction types (multichain and singlechain) used in anything that touches the consensus client.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/922664069/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/922814409",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2608#issuecomment-922814409",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2608",
    "id": 922814409,
    "node_id": "IC_kwDOCOoGbc43AQfJ",
    "user": {
      "login": "mkalinin",
      "id": 1892772,
      "node_id": "MDQ6VXNlcjE4OTI3NzI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1892772?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mkalinin",
      "html_url": "https://github.com/mkalinin",
      "followers_url": "https://api.github.com/users/mkalinin/followers",
      "following_url": "https://api.github.com/users/mkalinin/following{/other_user}",
      "gists_url": "https://api.github.com/users/mkalinin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mkalinin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mkalinin/subscriptions",
      "organizations_url": "https://api.github.com/users/mkalinin/orgs",
      "repos_url": "https://api.github.com/users/mkalinin/repos",
      "events_url": "https://api.github.com/users/mkalinin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mkalinin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-20T10:43:11Z",
    "updated_at": "2021-09-20T10:43:11Z",
    "author_association": "MEMBER",
    "body": "> I suspect that convincing the client teams to fully deprecate legacy transactions before or with the merge will not go over well, so I propose we _only_ implement this new typing scheme in the consensus layer stuff which doesn't currently have the legacy baggage. At a later point in time we can apply a similar change (using the same numbers) to execution client gossip, transaction trie, and receipt trie.\r\n> \r\n> This would mean that for now we just need to pick two numbers (`0` and `4` are both available) for legacy transaction types (multichain and singlechain) used in anything that touches the consensus client.\r\n\r\nI would suggest to have them specified on the execution layer and passing the ACD governance first. Adding these numbers on the consensus layer would be straightforward (requiring HF though). Starting to make this change from the consensus layer looks like an inversion and seems useless without the corresponding update on the execution layer.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/922814409/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/922838542",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2608#issuecomment-922838542",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2608",
    "id": 922838542,
    "node_id": "IC_kwDOCOoGbc43AWYO",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-20T11:19:50Z",
    "updated_at": "2021-09-20T11:19:50Z",
    "author_association": "MEMBER",
    "body": "IIUC, consensus layer *needs* a decision prior to the merge (code needs to be written), and the execution layer refuses to write any new code (or even discuss execution layer changes) prior to the merge, which is why I think it is politically not realistic to make the decision at the execution layer first.\r\n\r\nMaybe since the consensus layer *needs* a decision we can force the execution teams to think about the problem as part of required The Merge work?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/922838542/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/922849027",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2608#issuecomment-922849027",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2608",
    "id": 922849027,
    "node_id": "IC_kwDOCOoGbc43AY8D",
    "user": {
      "login": "mkalinin",
      "id": 1892772,
      "node_id": "MDQ6VXNlcjE4OTI3NzI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1892772?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mkalinin",
      "html_url": "https://github.com/mkalinin",
      "followers_url": "https://api.github.com/users/mkalinin/followers",
      "following_url": "https://api.github.com/users/mkalinin/following{/other_user}",
      "gists_url": "https://api.github.com/users/mkalinin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mkalinin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mkalinin/subscriptions",
      "organizations_url": "https://api.github.com/users/mkalinin/orgs",
      "repos_url": "https://api.github.com/users/mkalinin/repos",
      "events_url": "https://api.github.com/users/mkalinin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mkalinin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-20T11:36:59Z",
    "updated_at": "2021-09-20T11:36:59Z",
    "author_association": "MEMBER",
    "body": "> IIUC, consensus layer _needs_ a decision prior to the merge (code needs to be written), and the execution layer refuses to write any new code (or even discuss execution layer changes) prior to the merge, which is why I think it is politically not realistic to make the decision at the execution layer first.\r\n> \r\n> Maybe since the consensus layer _needs_ a decision we can force the execution teams to think about the problem as part of required The Merge work?\r\n\r\nWe may introduce the change proposed by this issue (Option 1) and then when new transaction types are decided to be added to the execution layer it may also be reflected on the consensus layer. There is no need to introduce new transaction types in advance.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/922849027/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/948587540",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2608#issuecomment-948587540",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2608",
    "id": 948587540,
    "node_id": "IC_kwDOCOoGbc44ikwU",
    "user": {
      "login": "protolambda",
      "id": 19571989,
      "node_id": "MDQ6VXNlcjE5NTcxOTg5",
      "avatar_url": "https://avatars.githubusercontent.com/u/19571989?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/protolambda",
      "html_url": "https://github.com/protolambda",
      "followers_url": "https://api.github.com/users/protolambda/followers",
      "following_url": "https://api.github.com/users/protolambda/following{/other_user}",
      "gists_url": "https://api.github.com/users/protolambda/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/protolambda/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/protolambda/subscriptions",
      "organizations_url": "https://api.github.com/users/protolambda/orgs",
      "repos_url": "https://api.github.com/users/protolambda/repos",
      "events_url": "https://api.github.com/users/protolambda/events{/privacy}",
      "received_events_url": "https://api.github.com/users/protolambda/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-21T12:55:36Z",
    "updated_at": "2021-10-21T12:55:36Z",
    "author_association": "MEMBER",
    "body": "Resolved in #2684, closing this",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/948587540/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
