{
  "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/90",
  "repository_url": "https://api.github.com/repos/ethereum/consensus-specs",
  "labels_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/90/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/90/comments",
  "events_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/90/events",
  "html_url": "https://github.com/ethereum/consensus-specs/issues/90",
  "id": 371765334,
  "node_id": "MDU6SXNzdWUzNzE3NjUzMzQ=",
  "number": 90,
  "title": "A proposal for shard blocks (rough draft / outline)",
  "user": {
    "login": "vbuterin",
    "id": 2230894,
    "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vbuterin",
    "html_url": "https://github.com/vbuterin",
    "followers_url": "https://api.github.com/users/vbuterin/followers",
    "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
    "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
    "organizations_url": "https://api.github.com/users/vbuterin/orgs",
    "repos_url": "https://api.github.com/users/vbuterin/repos",
    "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vbuterin/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1063043868,
      "node_id": "MDU6TGFiZWwxMDYzMDQzODY4",
      "url": "https://api.github.com/repos/ethereum/consensus-specs/labels/general:enhancement",
      "name": "general:enhancement",
      "color": "086788",
      "default": false,
      "description": "New feature or request"
    },
    {
      "id": 1063052501,
      "node_id": "MDU6TGFiZWwxMDYzMDUyNTAx",
      "url": "https://api.github.com/repos/ethereum/consensus-specs/labels/general:RFC",
      "name": "general:RFC",
      "color": "00D1B2",
      "default": false,
      "description": "Request for Comments"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2018-10-19T00:43:11Z",
  "updated_at": "2018-11-15T10:12:38Z",
  "closed_at": "2018-11-15T10:12:37Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "EDIT 2018.11.09: this is now a pull request. https://github.com/ethereum/eth2.0-specs/pull/123\r\n\r\n### Constants\r\n\r\n* `CHUNK_SIZE`: 256 bytes\r\n\r\n### Block structure and validation\r\n\r\nA `ShardBlock` object has the following fields:\r\n\r\n```python\r\n{\r\n    # Slot number\r\n    'slot': 'uint64',\r\n    # Parent block hash\r\n    'parent_hash': 'hash32',\r\n    # Beacon chain block\r\n    'beacon_chain_ref': 'hash32',\r\n    # Depth of the Merkle tree\r\n    'data_tree_depth': 'uint8',\r\n    # Merkle root of data\r\n    'data_root': 'hash32'\r\n    # State root (placeholder for now)\r\n    'state_root': 'hash32',\r\n    # Attestation (including block signature)\r\n    'attester_bitfield': 'bytes',\r\n    'aggregate_sig': ['uint256'],\r\n}\r\n```\r\n\r\nTo validate a block on shard `shard_id`, compute as follows:\r\n\r\n* Verify that `beacon_chain_ref` is the hash of the `slot`'th block in the beacon chain.\r\n* Let `cs` be the crystallized state of the beacon chain block referred to by `beacon_chain_ref`. Let `validators` be `[validators[i] for i in cs.current_persistent_committees[shard_id]]`.\r\n* Assert `len(attester_bitfield) == ceil_div8(len(validators))`\r\n* Let `curblock_proposer_index = hash(cs.randao_mix + bytes8(shard_id)) % len(validators)`. Let `parent_proposer_index` be the same value calculated for the parent block.\r\n* Make sure that the `parent_proposer_index`'th bit in the `attester_bitfield` is set.\r\n* Generate the group public key by adding the public keys of all the validators for whom the corresponding position in the bitfield is set to 1. Verify the `aggregate_sig` using this as the pubkey and the `parent_hash` as the message.\r\n* Verify the data (see below)\r\n\r\nNote that we expect blocks to be broadcasted along with the signature from the `curblock_proposer_index`'th validator in the validator set for that block.\r\n\r\n### Data root\r\n\r\n* Let `data_size = calc_block_maxbytes(cs)` (function TBD; think of it as a function that returns values between ~1024 and ~100k, always multiples of `CHUNK_SIZE`)\r\n* Verify that `2**data_tree_depth = next_power_of_2(data_size //  CHUNK_SIZE)`\r\n* Verify the availability of the data in the tree as a tree of depth `data_tree_depth`\r\n* Verify that all data after `data_size` bytes (ie. starting from chunk `data_size // CHUNK_SIZE`) is all set to zero bytes\r\n\r\n### Fork choice rule\r\n\r\nThe fork choice rule is a two-part fork choice rule. First, use as a root the block referred to in the most recent successful crosslink for that shard in the beacon chain's fork choice. To find the head from there, use LMD GHOST, ie. given a choice between two child blocks of a given parent, choose the block that has more most-recent (ie. highest-slot-number) attestations (including attestations of its descendants) from the validators that are active in the most recent validator set.\r\n\r\n### Modifications to crosslinks\r\n\r\nCrosslinks also commit to the \"combined data root\", a Merkle root of the data roots of all blocks since the last crosslink created using the following process:\r\n\r\n```python\r\ndef get_zeroroot_at_depth(n):\r\n    o = b'\\x00' * CHUNK_SIZE\r\n    for i in range(n):\r\n        o = hash(o + o)\r\n    return o\r\n\r\ndef mk_combined_data_root(depths, roots):\r\n    default_value = get_zeroroot_at_depth(max(depths))\r\n    data = [default_value for _ in range(next_power_of_2(len(roots)))]\r\n    for i, (depth, root) in enumerate(zip(depths, roots)):\r\n        value = root\r\n        for j in range(depth, max(depths)):\r\n            value = hash(value, get_zeroroot_at_depth(depth + j))\r\n        data[j] = value\r\n    return compute_merkle_root(data)\r\n```\r\n\r\nNotice that this is equivalent to padding each block's data up to the power of two equal to or above the largest block's data, then concatenating the data, then padding the result with zero bytes to the next power of two, and taking the Merkle root of the result.\r\n\r\nCrosslink participants should only sign data roots if the data roots match up with the result of this calculation.\r\n\r\nCrosslink records also commit to the proof of custody computation of this data.",
  "closed_by": {
    "login": "hwwhww",
    "id": 9263930,
    "node_id": "MDQ6VXNlcjkyNjM5MzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/9263930?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hwwhww",
    "html_url": "https://github.com/hwwhww",
    "followers_url": "https://api.github.com/users/hwwhww/followers",
    "following_url": "https://api.github.com/users/hwwhww/following{/other_user}",
    "gists_url": "https://api.github.com/users/hwwhww/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hwwhww/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hwwhww/subscriptions",
    "organizations_url": "https://api.github.com/users/hwwhww/orgs",
    "repos_url": "https://api.github.com/users/hwwhww/repos",
    "events_url": "https://api.github.com/users/hwwhww/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hwwhww/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/90/reactions",
    "total_count": 2,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 2,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/90/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/437482892",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/90#issuecomment-437482892",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/90",
    "id": 437482892,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNzQ4Mjg5Mg==",
    "user": {
      "login": "vbuterin",
      "id": 2230894,
      "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vbuterin",
      "html_url": "https://github.com/vbuterin",
      "followers_url": "https://api.github.com/users/vbuterin/followers",
      "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
      "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
      "organizations_url": "https://api.github.com/users/vbuterin/orgs",
      "repos_url": "https://api.github.com/users/vbuterin/repos",
      "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vbuterin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-09T20:18:12Z",
    "updated_at": "2018-11-09T20:18:12Z",
    "author_association": "MEMBER",
    "body": "This is now a pull request: https://github.com/ethereum/eth2.0-specs/pull/123",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/437482892/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/438988231",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/90#issuecomment-438988231",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/90",
    "id": 438988231,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzODk4ODIzMQ==",
    "user": {
      "login": "hwwhww",
      "id": 9263930,
      "node_id": "MDQ6VXNlcjkyNjM5MzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9263930?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hwwhww",
      "html_url": "https://github.com/hwwhww",
      "followers_url": "https://api.github.com/users/hwwhww/followers",
      "following_url": "https://api.github.com/users/hwwhww/following{/other_user}",
      "gists_url": "https://api.github.com/users/hwwhww/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hwwhww/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hwwhww/subscriptions",
      "organizations_url": "https://api.github.com/users/hwwhww/orgs",
      "repos_url": "https://api.github.com/users/hwwhww/repos",
      "events_url": "https://api.github.com/users/hwwhww/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hwwhww/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-15T10:12:37Z",
    "updated_at": "2018-11-15T10:12:37Z",
    "author_association": "MEMBER",
    "body": "close via #123 ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/438988231/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
