{
  "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/3310",
  "repository_url": "https://api.github.com/repos/ethereum/consensus-specs",
  "labels_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/3310/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/3310/comments",
  "events_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/3310/events",
  "html_url": "https://github.com/ethereum/consensus-specs/issues/3310",
  "id": 1646088053,
  "node_id": "I_kwDOCOoGbc5iHU91",
  "number": 3310,
  "title": "Function `process_withdrawals` in `beacon-chain.md` may skip withdrawable validators for one sweep",
  "user": {
    "login": "andreas-blockswap",
    "id": 122449742,
    "node_id": "U_kgDOB0xvTg",
    "avatar_url": "https://avatars.githubusercontent.com/u/122449742?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/andreas-blockswap",
    "html_url": "https://github.com/andreas-blockswap",
    "followers_url": "https://api.github.com/users/andreas-blockswap/followers",
    "following_url": "https://api.github.com/users/andreas-blockswap/following{/other_user}",
    "gists_url": "https://api.github.com/users/andreas-blockswap/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/andreas-blockswap/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/andreas-blockswap/subscriptions",
    "organizations_url": "https://api.github.com/users/andreas-blockswap/orgs",
    "repos_url": "https://api.github.com/users/andreas-blockswap/repos",
    "events_url": "https://api.github.com/users/andreas-blockswap/events{/privacy}",
    "received_events_url": "https://api.github.com/users/andreas-blockswap/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 7,
  "created_at": "2023-03-29T15:49:23Z",
  "updated_at": "2023-03-30T09:18:29Z",
  "closed_at": "2023-03-30T09:18:29Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "While reading the [beacon-chain.md spec](https://github.com/ethereum/consensus-specs/blob/dev/specs/capella/beacon-chain.md), I have come across something which seems slightly off. Not a serious issue, but the solution seems simple, so let me explain. \r\n\r\n### Problem\r\n\r\nThe new [`process_withdrawals`](https://github.com/ethereum/consensus-specs/blob/dev/specs/capella/beacon-chain.md#new-process_withdrawals) function calls [`get_expected_withdrawals`](https://github.com/ethereum/consensus-specs/blob/dev/specs/capella/beacon-chain.md#new-get_expected_withdrawals) to get a list of expected withdrawals. Suppose that the input state is satisfying:\r\n\r\n- `state.next_withdrawal_validator_index == 0`\r\n- `len(state.validators) == MAX_VALIDATORS_PER_WITHDRAWALS_SWEEP - 1`\r\n- all validators are not partially or fully withdrawable\r\n\r\nNote, this is one of many states which can trigger the behavior of \"skipping\" withdrawable validators.\r\n\r\nIn this state, [`get_expected_withdrawals`](https://github.com/ethereum/consensus-specs/blob/dev/specs/capella/beacon-chain.md#new-get_expected_withdrawals) returns the empty list and  [`process_withdrawals`](https://github.com/ethereum/consensus-specs/blob/dev/specs/capella/beacon-chain.md#new-process_withdrawals) proceeds to the `else` case in the end of the function. The `else` case looks like\r\n```\r\nnext_index = state.next_withdrawal_validator_index + MAX_VALIDATORS_PER_WITHDRAWALS_SWEEP\r\nnext_validator_index = ValidatorIndex(next_index % len(state.validators))\r\nstate.next_withdrawal_validator_index = next_validator_index\r\n```\r\nsubstituting for our concrete values, it looks like\r\n```\r\nnext_index = 0 + len(state.validators) + 1\r\nnext_validator_index = ValidatorIndex(1)\r\nstate.next_withdrawal_validator_index = ValidatorIndex(1)\r\n```\r\nNow update the state as follows:\r\n\r\n- 2 new validators are added to the end of `state.validators`, such that `len(state.validators) == MAX_VALIDATORS_PER_WITHDRAWALS_SWEEP + 1`\r\n- validator at index 0 becomes fully withdrawable.\r\n\r\nNote that adding any number of validators >= 2 will trigger the \"skipping\" behavior.\r\n\r\nNow call `process_withdrawals` again. It calls [`get_expected_withdrawals`](https://github.com/ethereum/consensus-specs/blob/dev/specs/capella/beacon-chain.md#new-get_expected_withdrawals), which returns the empty list again, since it starts with validator index `state.next_withdrawal_validator_index == ValidatorIndex(1)`, so processes all the `MAX_VALIDATORS_PER_WITHDRAWALS_SWEEP` number of validators at indices > 0.\r\n\r\nThis means that we have skipped the fully withdrawable validator at index 0. This validator will get processed next time  [`process_withdrawals`](https://github.com/ethereum/consensus-specs/blob/dev/specs/capella/beacon-chain.md#new-process_withdrawals) is called, but it seems wrong that it was skipped in the first place.\r\n\r\n### Possible solution\r\n\r\nI think the \"skipping\" of withdrawable validators can be avoided by changing the first line of the `else` case in function  [`process_withdrawals`](https://github.com/ethereum/consensus-specs/blob/dev/specs/capella/beacon-chain.md#new-process_withdrawals) to\r\n```\r\nnext_index = state.next_withdrawal_validator_index + min(len(state.validators), MAX_VALIDATORS_PER_WITHDRAWALS_SWEEP)\r\n```",
  "closed_by": {
    "login": "andreas-blockswap",
    "id": 122449742,
    "node_id": "U_kgDOB0xvTg",
    "avatar_url": "https://avatars.githubusercontent.com/u/122449742?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/andreas-blockswap",
    "html_url": "https://github.com/andreas-blockswap",
    "followers_url": "https://api.github.com/users/andreas-blockswap/followers",
    "following_url": "https://api.github.com/users/andreas-blockswap/following{/other_user}",
    "gists_url": "https://api.github.com/users/andreas-blockswap/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/andreas-blockswap/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/andreas-blockswap/subscriptions",
    "organizations_url": "https://api.github.com/users/andreas-blockswap/orgs",
    "repos_url": "https://api.github.com/users/andreas-blockswap/repos",
    "events_url": "https://api.github.com/users/andreas-blockswap/events{/privacy}",
    "received_events_url": "https://api.github.com/users/andreas-blockswap/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/3310/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/3310/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1488981657",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/3310#issuecomment-1488981657",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/3310",
    "id": 1488981657,
    "node_id": "IC_kwDOCOoGbc5YwA6Z",
    "user": {
      "login": "potuz",
      "id": 16044918,
      "node_id": "MDQ6VXNlcjE2MDQ0OTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/16044918?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/potuz",
      "html_url": "https://github.com/potuz",
      "followers_url": "https://api.github.com/users/potuz/followers",
      "following_url": "https://api.github.com/users/potuz/following{/other_user}",
      "gists_url": "https://api.github.com/users/potuz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/potuz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/potuz/subscriptions",
      "organizations_url": "https://api.github.com/users/potuz/orgs",
      "repos_url": "https://api.github.com/users/potuz/repos",
      "events_url": "https://api.github.com/users/potuz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/potuz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-29T17:06:11Z",
    "updated_at": "2023-03-29T17:06:11Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Suppose that the input state is satisfying:\r\n> state.next_withdrawal_validator_index == len(state.validators)\r\n\r\nThis can never happen, we use `% len(state.validators)` in the code. \r\n\r\nSo the max value that this can have is `len(state.validators) - 1` in which case the substitution with our concrete values would render `next_validator_index = ValidatorIndex(0)` instead of `1`. \r\n\r\n> This means that we have skipped the fully withdrawable validator at index 0. This validator will get processed next time process_withdrawals is called, but it seems wrong that it was skipped in the first place.\r\n\r\nSo the validator at index 0 will not be \"skipped\" with your notation in the next sweep because of the above. \r\n\r\nHowever: the general phenomenom that we may skip withdrawable validators on sweeps happens, and that's a feature of having a bounded sweep. There's no need to play with the modularity of the number of validators in the state: simply if no validator is withdrawable in one slot, and the sweep is set to start at validator `x + 1`, if validator `x` becomes withdrawable, it will take about 5 days to reach it. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1488981657/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1489063942",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/3310#issuecomment-1489063942",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/3310",
    "id": 1489063942,
    "node_id": "IC_kwDOCOoGbc5YwVAG",
    "user": {
      "login": "andreas-blockswap",
      "id": 122449742,
      "node_id": "U_kgDOB0xvTg",
      "avatar_url": "https://avatars.githubusercontent.com/u/122449742?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/andreas-blockswap",
      "html_url": "https://github.com/andreas-blockswap",
      "followers_url": "https://api.github.com/users/andreas-blockswap/followers",
      "following_url": "https://api.github.com/users/andreas-blockswap/following{/other_user}",
      "gists_url": "https://api.github.com/users/andreas-blockswap/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/andreas-blockswap/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/andreas-blockswap/subscriptions",
      "organizations_url": "https://api.github.com/users/andreas-blockswap/orgs",
      "repos_url": "https://api.github.com/users/andreas-blockswap/repos",
      "events_url": "https://api.github.com/users/andreas-blockswap/events{/privacy}",
      "received_events_url": "https://api.github.com/users/andreas-blockswap/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-29T18:03:25Z",
    "updated_at": "2023-03-29T18:06:19Z",
    "author_association": "NONE",
    "body": "> This can never happen, we use % len(state.validators) in the code.\r\n\r\nRight, changing the assumption to `state.next_withdrawal_validator_index == 0` works with in the example as well. It causes the validator at index 0 to be \"skipped\", I think. **I have edited the example with this.**\r\n\r\nThe reason I say the validator 0 is skipped, is that I would expect that validator to be processed in the second sweep, since we processed all validators in the first sweep, so should start from index 0 in the second sweep in the example.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1489063942/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1489075260",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/3310#issuecomment-1489075260",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/3310",
    "id": 1489075260,
    "node_id": "IC_kwDOCOoGbc5YwXw8",
    "user": {
      "login": "andreas-blockswap",
      "id": 122449742,
      "node_id": "U_kgDOB0xvTg",
      "avatar_url": "https://avatars.githubusercontent.com/u/122449742?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/andreas-blockswap",
      "html_url": "https://github.com/andreas-blockswap",
      "followers_url": "https://api.github.com/users/andreas-blockswap/followers",
      "following_url": "https://api.github.com/users/andreas-blockswap/following{/other_user}",
      "gists_url": "https://api.github.com/users/andreas-blockswap/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/andreas-blockswap/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/andreas-blockswap/subscriptions",
      "organizations_url": "https://api.github.com/users/andreas-blockswap/orgs",
      "repos_url": "https://api.github.com/users/andreas-blockswap/repos",
      "events_url": "https://api.github.com/users/andreas-blockswap/events{/privacy}",
      "received_events_url": "https://api.github.com/users/andreas-blockswap/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-29T18:11:01Z",
    "updated_at": "2023-03-29T18:11:01Z",
    "author_association": "NONE",
    "body": "Intuitively: not starting from index 0 in the second sweep breaks the clock, since we wrap around the clock first, but then skip index 0 and start the next iteration of the clock from index 1. Does that make sense?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1489075260/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1489311464",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/3310#issuecomment-1489311464",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/3310",
    "id": 1489311464,
    "node_id": "IC_kwDOCOoGbc5YxRbo",
    "user": {
      "login": "rolfyone",
      "id": 2967240,
      "node_id": "MDQ6VXNlcjI5NjcyNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2967240?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rolfyone",
      "html_url": "https://github.com/rolfyone",
      "followers_url": "https://api.github.com/users/rolfyone/followers",
      "following_url": "https://api.github.com/users/rolfyone/following{/other_user}",
      "gists_url": "https://api.github.com/users/rolfyone/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rolfyone/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rolfyone/subscriptions",
      "organizations_url": "https://api.github.com/users/rolfyone/orgs",
      "repos_url": "https://api.github.com/users/rolfyone/repos",
      "events_url": "https://api.github.com/users/rolfyone/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rolfyone/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-29T20:58:42Z",
    "updated_at": "2023-03-29T20:58:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "If my withdrawals sweep is 1, and total validators is 3...\r\n\r\nState-0> withdrawal on 0, next_withdrawal_validator_index = 1\r\nState-1> withdrawal on 1, next_withdrawal_validator_index=2\r\nState-2> withdrawal on 2, next_withdrawal_validator_index=0\r\nState-3> withdrawal on 0, next_withdrawal_validator_index = 1\r\n\r\nThe next_withdrawal_validator_index is set as where the validator after (using a modulo, because its a circular list) where ever we got to, I can't see any way there's a skipping behaviour on a 0 based list in doing this...\r\n\r\nFor a list size N, modulo will return 0-> N-1 on that list, and thats our indices, so advancing by any increment up to or even exceeding the list size will bring the next index within bounds and effectively be a circular list...\r\n\r\nThe tests are all in python, and I believe there's some already with similar circumstances, I raised an issue recently around adding a test case but it was found that we already had one, for a very similar circumstance to what you're describing.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1489311464/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1489364332",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/3310#issuecomment-1489364332",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/3310",
    "id": 1489364332,
    "node_id": "IC_kwDOCOoGbc5YxeVs",
    "user": {
      "login": "potuz",
      "id": 16044918,
      "node_id": "MDQ6VXNlcjE2MDQ0OTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/16044918?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/potuz",
      "html_url": "https://github.com/potuz",
      "followers_url": "https://api.github.com/users/potuz/followers",
      "following_url": "https://api.github.com/users/potuz/following{/other_user}",
      "gists_url": "https://api.github.com/users/potuz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/potuz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/potuz/subscriptions",
      "organizations_url": "https://api.github.com/users/potuz/orgs",
      "repos_url": "https://api.github.com/users/potuz/repos",
      "events_url": "https://api.github.com/users/potuz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/potuz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-29T21:38:56Z",
    "updated_at": "2023-03-29T21:38:56Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Intuitively: not starting from index 0 in the second sweep breaks the clock, since we wrap around the clock first, but then skip index 0 and start the next iteration of the clock from index 1. Does that make sense?\r\n\r\nYour \"fix\" doesn't fix this issue (which is non fixable) simply starting before shifts the problem whatever your starting point is, if the next validator that becomes withdrawable is one index before, it will be \"skipped\" in the next sweep",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1489364332/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1489466763",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/3310#issuecomment-1489466763",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/3310",
    "id": 1489466763,
    "node_id": "IC_kwDOCOoGbc5Yx3WL",
    "user": {
      "login": "andreas-blockswap",
      "id": 122449742,
      "node_id": "U_kgDOB0xvTg",
      "avatar_url": "https://avatars.githubusercontent.com/u/122449742?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/andreas-blockswap",
      "html_url": "https://github.com/andreas-blockswap",
      "followers_url": "https://api.github.com/users/andreas-blockswap/followers",
      "following_url": "https://api.github.com/users/andreas-blockswap/following{/other_user}",
      "gists_url": "https://api.github.com/users/andreas-blockswap/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/andreas-blockswap/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/andreas-blockswap/subscriptions",
      "organizations_url": "https://api.github.com/users/andreas-blockswap/orgs",
      "repos_url": "https://api.github.com/users/andreas-blockswap/repos",
      "events_url": "https://api.github.com/users/andreas-blockswap/events{/privacy}",
      "received_events_url": "https://api.github.com/users/andreas-blockswap/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-29T23:24:41Z",
    "updated_at": "2023-03-29T23:25:17Z",
    "author_association": "NONE",
    "body": "Suppose that `state` is a valid state and `payload` a valid payload, satisfying `len(get_expected_withdrawals(state)) < MAX_WITHDRAWALS_PER_PAYLOAD`.\r\nLet `init_state = state.copy()`.\r\nLet `clock_ticks = len(state.validators)`.\r\nExecute `process_withdrawals(state, payload)` and assume it does not throw an exception.\r\n\r\nNow the question is which property is the most desirable.\r\n\r\nThe current property:\r\n```python\r\nstate.next_withdrawal_validator_index\r\n  == (init_state.next_withdrawal_validator_index + MAX_VALIDATORS_PER_WITHDRAWALS_SWEEP) % clock_ticks\r\n```\r\nor the other property:\r\n```python\r\nstate.next_withdrawal_validator_index\r\n  == (init_state.next_withdrawal_validator_index + processed_validators % clock_ticks\r\n```\r\nwhere `processed_validators` is the number of validators checked to be withdrawable\r\n```python\r\nprocessed_validators = min(clock_ticks, MAX_VALIDATORS_PER_WITHDRAWALS_SWEEP))\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1489466763/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1489520970",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/3310#issuecomment-1489520970",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/3310",
    "id": 1489520970,
    "node_id": "IC_kwDOCOoGbc5YyElK",
    "user": {
      "login": "potuz",
      "id": 16044918,
      "node_id": "MDQ6VXNlcjE2MDQ0OTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/16044918?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/potuz",
      "html_url": "https://github.com/potuz",
      "followers_url": "https://api.github.com/users/potuz/followers",
      "following_url": "https://api.github.com/users/potuz/following{/other_user}",
      "gists_url": "https://api.github.com/users/potuz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/potuz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/potuz/subscriptions",
      "organizations_url": "https://api.github.com/users/potuz/orgs",
      "repos_url": "https://api.github.com/users/potuz/repos",
      "events_url": "https://api.github.com/users/potuz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/potuz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-30T00:34:07Z",
    "updated_at": "2023-03-30T00:36:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "I honestly think this is irrelevant, this only makes a difference if \r\n- there are less validators in the init state than `MAX_VALIDATORS_PER_WITHDRAWALS_SWEEP` which will arguably never happen on any network AND\r\n- the very next slot there are more validators in the state than `MAX_VALIDATORS_PER_WITHDRAWALS_SWEEP`, AND\r\n- one validator that was not withdrawable in the first slot became in the second and was right at the boundary\r\n\r\nI say it's fine that under such circumstances such unlucky validator can wait 1 slot. \r\n\r\nAlso notice that by making the change, another validator that would have been withdrawn with the current system may not be withdrawable with this fix, as noted above, so it's not really clear what there is to fix here. \r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1489520970/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
