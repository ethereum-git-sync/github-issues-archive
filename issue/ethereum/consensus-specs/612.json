{
  "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/612",
  "repository_url": "https://api.github.com/repos/ethereum/consensus-specs",
  "labels_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/612/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/612/comments",
  "events_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/612/events",
  "html_url": "https://github.com/ethereum/consensus-specs/issues/612",
  "id": 409418245,
  "node_id": "MDU6SXNzdWU0MDk0MTgyNDU=",
  "number": 612,
  "title": "(Heads up) Switch to SHA256",
  "user": {
    "login": "JustinDrake",
    "id": 731743,
    "node_id": "MDQ6VXNlcjczMTc0Mw==",
    "avatar_url": "https://avatars.githubusercontent.com/u/731743?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/JustinDrake",
    "html_url": "https://github.com/JustinDrake",
    "followers_url": "https://api.github.com/users/JustinDrake/followers",
    "following_url": "https://api.github.com/users/JustinDrake/following{/other_user}",
    "gists_url": "https://api.github.com/users/JustinDrake/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/JustinDrake/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/JustinDrake/subscriptions",
    "organizations_url": "https://api.github.com/users/JustinDrake/orgs",
    "repos_url": "https://api.github.com/users/JustinDrake/repos",
    "events_url": "https://api.github.com/users/JustinDrake/events{/privacy}",
    "received_events_url": "https://api.github.com/users/JustinDrake/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1063052501,
      "node_id": "MDU6TGFiZWwxMDYzMDUyNTAx",
      "url": "https://api.github.com/repos/ethereum/consensus-specs/labels/general:RFC",
      "name": "general:RFC",
      "color": "00D1B2",
      "default": false,
      "description": "Request for Comments"
    },
    {
      "id": 1137720193,
      "node_id": "MDU6TGFiZWwxMTM3NzIwMTkz",
      "url": "https://api.github.com/repos/ethereum/consensus-specs/labels/general:discussion",
      "name": "general:discussion",
      "color": "F17C67",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 12,
  "created_at": "2019-02-12T17:36:18Z",
  "updated_at": "2019-03-28T22:57:51Z",
  "closed_at": "2019-03-28T22:57:51Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "Hash function compatibility between Eth1 and Eth2 is important for several reasons:\r\n\r\n* Eth1 deposits into Eth2\r\n* Eth1 finalisation using Eth2 (unlocking two-way transfers of ETH)\r\n* Eth1 execution engines using Eth2 data availability\r\n\r\nIn December 2018 we [ditched Blake2b on Eth2](https://github.com/ethereum/eth2.0-specs/pull/227) because of incompatibility with Eth1. In doing so we fell back to Eth1's native Keccak256. It turns out Eth1 has a SHA256 precompile. This opens up the possibility to use SHA256 on Eth2. Below is a breakdown of the pros and cons of SHA256 vs Keccak256.\r\n\r\n### Pros\r\n\r\n* **Interoperability**: SHA256 is the [de facto blockchain standard](https://twitter.com/drakefjustin/status/1095379392925220864). It is adopted by Bitcoin, Filecoin, Algorand, Chia, Dfinity, Cosmos, Bitcoin Cash, Litecoin, EOS, Tron, etc. (A notable exception is Polkadot which is [planning to use Blake2b and xxHash](https://github.com/w3f/Web3-wiki/wiki/Crypto-Primitives-in-Polkadot). This is somewhat ironic as a key selling point of Polkadot is interoperability.)\r\n* **Speed**: SHA256 is ~50% faster than Keccak256. As pointed out by @zmanian, hardware support for SHA256 is improving, with speeds approaching the performance of Blake2.\r\n\r\n### Cons\r\n\r\n* **Gas**: The SHA256 precompile is twice the gas cost of the Keccak256 opcode. (This is arguably a mispricing because SHA256 is faster than Keccak256.)\r\n* **Length extension**: Unlike Keccak256, SHA256 does not provide built-in protection against [length extension attacks](https://en.wikipedia.org/wiki/Length_extension_attack). Various protections are possible.\r\n* **Strength reduction**: As pointed out by @mratsim's SHA256 is classified as having a \"minor weakness\" (see [here](https://eprint.iacr.org/2004/207) and [here](https://eprint.iacr.org/2004/207)), unlike Keccak256.\r\n\r\nThe goal of this issue is to provide a heads-up and encourage discussion. My personal gut feel is that interoperability alone outweighs the cons.",
  "closed_by": {
    "login": "JustinDrake",
    "id": 731743,
    "node_id": "MDQ6VXNlcjczMTc0Mw==",
    "avatar_url": "https://avatars.githubusercontent.com/u/731743?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/JustinDrake",
    "html_url": "https://github.com/JustinDrake",
    "followers_url": "https://api.github.com/users/JustinDrake/followers",
    "following_url": "https://api.github.com/users/JustinDrake/following{/other_user}",
    "gists_url": "https://api.github.com/users/JustinDrake/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/JustinDrake/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/JustinDrake/subscriptions",
    "organizations_url": "https://api.github.com/users/JustinDrake/orgs",
    "repos_url": "https://api.github.com/users/JustinDrake/repos",
    "events_url": "https://api.github.com/users/JustinDrake/events{/privacy}",
    "received_events_url": "https://api.github.com/users/JustinDrake/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/612/reactions",
    "total_count": 1,
    "+1": 1,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/612/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/462925304",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/612#issuecomment-462925304",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/612",
    "id": 462925304,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MjkyNTMwNA==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-12T20:39:23Z",
    "updated_at": "2019-02-12T20:39:23Z",
    "author_association": "MEMBER",
    "body": "As a side note I'd put that \"ewasm on eth1.x\" proposes to introduce blake2 support on Eth1, which may happen in time before the release of Eth2.  This might be a point to consider.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/462925304/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/462975021",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/612#issuecomment-462975021",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/612",
    "id": 462975021,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2Mjk3NTAyMQ==",
    "user": {
      "login": "mratsim",
      "id": 22738317,
      "node_id": "MDQ6VXNlcjIyNzM4MzE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/22738317?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mratsim",
      "html_url": "https://github.com/mratsim",
      "followers_url": "https://api.github.com/users/mratsim/followers",
      "following_url": "https://api.github.com/users/mratsim/following{/other_user}",
      "gists_url": "https://api.github.com/users/mratsim/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mratsim/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mratsim/subscriptions",
      "organizations_url": "https://api.github.com/users/mratsim/orgs",
      "repos_url": "https://api.github.com/users/mratsim/repos",
      "events_url": "https://api.github.com/users/mratsim/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mratsim/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-12T23:02:05Z",
    "updated_at": "2019-02-12T23:02:05Z",
    "author_association": "CONTRIBUTOR",
    "body": "I don't have a strong preference but if I had to vote it would be against.\r\n\r\n1. When looking into those timelines, I feel like SHA2-256 will have critical issues soon.\r\n\r\n![screenshot_20190212_235920](https://user-images.githubusercontent.com/22738317/52673877-3a004300-2f22-11e9-9b64-2257f21b29b7.png)\r\n\r\nSource: http://valerieaurora.org/hash.html\r\n\r\n2. Keccak256 vs SHA3-256 is already confusing in Eth1 and now we're adding SHA2-256.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/462975021/reactions",
      "total_count": 9,
      "+1": 9,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/463153143",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/612#issuecomment-463153143",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/612",
    "id": 463153143,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MzE1MzE0Mw==",
    "user": {
      "login": "mkalinin",
      "id": 1892772,
      "node_id": "MDQ6VXNlcjE4OTI3NzI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1892772?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mkalinin",
      "html_url": "https://github.com/mkalinin",
      "followers_url": "https://api.github.com/users/mkalinin/followers",
      "following_url": "https://api.github.com/users/mkalinin/following{/other_user}",
      "gists_url": "https://api.github.com/users/mkalinin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mkalinin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mkalinin/subscriptions",
      "organizations_url": "https://api.github.com/users/mkalinin/orgs",
      "repos_url": "https://api.github.com/users/mkalinin/repos",
      "events_url": "https://api.github.com/users/mkalinin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mkalinin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-13T10:52:08Z",
    "updated_at": "2019-02-13T10:52:08Z",
    "author_association": "MEMBER",
    "body": ">- **Speed**: SHA256 is ~50% faster than Keccak256.\r\n\r\nFrom https://github.com/ethereum/eth2.0-specs/issues/218:\r\n> The performance benefits of Blake cannot be relied upon because STARK/SNARK-friendly hashes will likely be no faster than SHA3.\r\n\r\nIs that assumption was changed anyhow?\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/463153143/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/463154561",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/612#issuecomment-463154561",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/612",
    "id": 463154561,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MzE1NDU2MQ==",
    "user": {
      "login": "JustinDrake",
      "id": 731743,
      "node_id": "MDQ6VXNlcjczMTc0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/731743?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JustinDrake",
      "html_url": "https://github.com/JustinDrake",
      "followers_url": "https://api.github.com/users/JustinDrake/followers",
      "following_url": "https://api.github.com/users/JustinDrake/following{/other_user}",
      "gists_url": "https://api.github.com/users/JustinDrake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JustinDrake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JustinDrake/subscriptions",
      "organizations_url": "https://api.github.com/users/JustinDrake/orgs",
      "repos_url": "https://api.github.com/users/JustinDrake/repos",
      "events_url": "https://api.github.com/users/JustinDrake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JustinDrake/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-13T10:56:35Z",
    "updated_at": "2019-02-13T10:56:35Z",
    "author_association": "MEMBER",
    "body": "> Is that assumption was changed anyhow?\r\n\r\nSpeed of hash functions can be evaluated in different contexts. In the \"plain-text model\" (i.e. naive execution) SHA256 is faster than Keccak256. In the context of MPCs/SNARKs/STARKs all binary hash functions (SHA2, SHA3, Blake) are pretty terrible.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/463154561/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/463175591",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/612#issuecomment-463175591",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/612",
    "id": 463175591,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MzE3NTU5MQ==",
    "user": {
      "login": "JustinDrake",
      "id": 731743,
      "node_id": "MDQ6VXNlcjczMTc0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/731743?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JustinDrake",
      "html_url": "https://github.com/JustinDrake",
      "followers_url": "https://api.github.com/users/JustinDrake/followers",
      "following_url": "https://api.github.com/users/JustinDrake/following{/other_user}",
      "gists_url": "https://api.github.com/users/JustinDrake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JustinDrake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JustinDrake/subscriptions",
      "organizations_url": "https://api.github.com/users/JustinDrake/orgs",
      "repos_url": "https://api.github.com/users/JustinDrake/repos",
      "events_url": "https://api.github.com/users/JustinDrake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JustinDrake/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-13T12:07:30Z",
    "updated_at": "2019-02-13T12:07:30Z",
    "author_association": "MEMBER",
    "body": "> When looking into those timelines, I feel like SHA2-256 will have critical issues\r\n\r\nI'd say that SHA2 only needs to survive another 5-10 years. The reason is that we intend to migrate to a STARK-friendly hash function when we make the cryptographic primitives quantum-secure with STARKs. Are there cryptoanalysts who believe SHA2-256 will be broken within 10 years?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/463175591/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/463179163",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/612#issuecomment-463179163",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/612",
    "id": 463179163,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MzE3OTE2Mw==",
    "user": {
      "login": "zmanian",
      "id": 93434,
      "node_id": "MDQ6VXNlcjkzNDM0",
      "avatar_url": "https://avatars.githubusercontent.com/u/93434?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zmanian",
      "html_url": "https://github.com/zmanian",
      "followers_url": "https://api.github.com/users/zmanian/followers",
      "following_url": "https://api.github.com/users/zmanian/following{/other_user}",
      "gists_url": "https://api.github.com/users/zmanian/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zmanian/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zmanian/subscriptions",
      "organizations_url": "https://api.github.com/users/zmanian/orgs",
      "repos_url": "https://api.github.com/users/zmanian/repos",
      "events_url": "https://api.github.com/users/zmanian/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zmanian/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-13T12:20:21Z",
    "updated_at": "2019-02-13T12:20:21Z",
    "author_association": "NONE",
    "body": "I'd say most cryptographers think the SHA2 breaking is less likely than significant improvements in classical solutions to the discrete log problem or composite prime factoring.\r\n\r\nHere was our reasoning for choosing SHA256 in the Cosmos Merkle Tree.\r\nhttps://github.com/tendermint/iavl/issues/38\r\n\r\nI'd say the right mix of hash functions in any blockchain protocol is SHA256 and a generic function SPONGE function from KECCACK family for Merlin. https://docs.rs/merlin/1.0.2/merlin/",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/463179163/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/463184301",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/612#issuecomment-463184301",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/612",
    "id": 463184301,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MzE4NDMwMQ==",
    "user": {
      "login": "JustinDrake",
      "id": 731743,
      "node_id": "MDQ6VXNlcjczMTc0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/731743?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JustinDrake",
      "html_url": "https://github.com/JustinDrake",
      "followers_url": "https://api.github.com/users/JustinDrake/followers",
      "following_url": "https://api.github.com/users/JustinDrake/following{/other_user}",
      "gists_url": "https://api.github.com/users/JustinDrake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JustinDrake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JustinDrake/subscriptions",
      "organizations_url": "https://api.github.com/users/JustinDrake/orgs",
      "repos_url": "https://api.github.com/users/JustinDrake/repos",
      "events_url": "https://api.github.com/users/JustinDrake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JustinDrake/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-13T12:38:46Z",
    "updated_at": "2019-02-13T12:38:46Z",
    "author_association": "MEMBER",
    "body": "> a generic function SPONGE function from KECCACK family for Merlin\r\n\r\nWhy not use SHA256 for Merlin?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/463184301/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/463185432",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/612#issuecomment-463185432",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/612",
    "id": 463185432,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MzE4NTQzMg==",
    "user": {
      "login": "zmanian",
      "id": 93434,
      "node_id": "MDQ6VXNlcjkzNDM0",
      "avatar_url": "https://avatars.githubusercontent.com/u/93434?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zmanian",
      "html_url": "https://github.com/zmanian",
      "followers_url": "https://api.github.com/users/zmanian/followers",
      "following_url": "https://api.github.com/users/zmanian/following{/other_user}",
      "gists_url": "https://api.github.com/users/zmanian/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zmanian/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zmanian/subscriptions",
      "organizations_url": "https://api.github.com/users/zmanian/orgs",
      "repos_url": "https://api.github.com/users/zmanian/repos",
      "events_url": "https://api.github.com/users/zmanian/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zmanian/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-13T12:42:58Z",
    "updated_at": "2019-02-13T12:42:58Z",
    "author_association": "NONE",
    "body": "So Merkle Damgard style hash functions accumulate input and then produce 1 output.\r\n\r\nSponge constructions allow you to put in some input and take out some output and then put in some more input and then get some more output etc.\r\n\r\nWhat's interesting about the KECCAK family is not when you are using them in the same way as Merkle Damgard hashes but when you are using the unique properties of it's SPONGE construction.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/463185432/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/463185692",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/612#issuecomment-463185692",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/612",
    "id": 463185692,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MzE4NTY5Mg==",
    "user": {
      "login": "zmanian",
      "id": 93434,
      "node_id": "MDQ6VXNlcjkzNDM0",
      "avatar_url": "https://avatars.githubusercontent.com/u/93434?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zmanian",
      "html_url": "https://github.com/zmanian",
      "followers_url": "https://api.github.com/users/zmanian/followers",
      "following_url": "https://api.github.com/users/zmanian/following{/other_user}",
      "gists_url": "https://api.github.com/users/zmanian/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zmanian/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zmanian/subscriptions",
      "organizations_url": "https://api.github.com/users/zmanian/orgs",
      "repos_url": "https://api.github.com/users/zmanian/repos",
      "events_url": "https://api.github.com/users/zmanian/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zmanian/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-13T12:43:58Z",
    "updated_at": "2019-02-13T12:43:58Z",
    "author_association": "NONE",
    "body": "This is mentioned in the IAVL thread but SHA256 is getting support in future hardware Intel processors which makes it as fast as BLAKE2.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/463185692/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/463239135",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/612#issuecomment-463239135",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/612",
    "id": 463239135,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MzIzOTEzNQ==",
    "user": {
      "login": "benjaminion",
      "id": 20796281,
      "node_id": "MDQ6VXNlcjIwNzk2Mjgx",
      "avatar_url": "https://avatars.githubusercontent.com/u/20796281?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/benjaminion",
      "html_url": "https://github.com/benjaminion",
      "followers_url": "https://api.github.com/users/benjaminion/followers",
      "following_url": "https://api.github.com/users/benjaminion/following{/other_user}",
      "gists_url": "https://api.github.com/users/benjaminion/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/benjaminion/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/benjaminion/subscriptions",
      "organizations_url": "https://api.github.com/users/benjaminion/orgs",
      "repos_url": "https://api.github.com/users/benjaminion/repos",
      "events_url": "https://api.github.com/users/benjaminion/events{/privacy}",
      "received_events_url": "https://api.github.com/users/benjaminion/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-13T15:21:11Z",
    "updated_at": "2019-02-13T15:21:11Z",
    "author_association": "CONTRIBUTOR",
    "body": "Interesting suggestion from my colleague, Nicolas Gailly: https://multiformats.io/multihash/\r\n\r\nThis wouldn't be supportable natively in Eth1: the deposit contract would have to prepend the metadata to the hashes it outputs for the Merkle path, but that's relatively easy. This would give us good agility around hash functions for the foreseeable future.\r\n\r\nIt doesn't necessarily give us interop with other chains out-of-the-box, but could make that realistic with a simple shim layer to insert the appropriate hash metadata. Then we could interoperate with any chain using any of the hashes we choose to implement in the client.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/463239135/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/463909911",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/612#issuecomment-463909911",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/612",
    "id": 463909911,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MzkwOTkxMQ==",
    "user": {
      "login": "spble",
      "id": 233229,
      "node_id": "MDQ6VXNlcjIzMzIyOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/233229?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/spble",
      "html_url": "https://github.com/spble",
      "followers_url": "https://api.github.com/users/spble/followers",
      "following_url": "https://api.github.com/users/spble/following{/other_user}",
      "gists_url": "https://api.github.com/users/spble/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/spble/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/spble/subscriptions",
      "organizations_url": "https://api.github.com/users/spble/orgs",
      "repos_url": "https://api.github.com/users/spble/repos",
      "events_url": "https://api.github.com/users/spble/events{/privacy}",
      "received_events_url": "https://api.github.com/users/spble/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-15T05:16:03Z",
    "updated_at": "2019-02-15T05:16:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "Just thought I'd weigh in with some thoughts. It seems that this problem can be viewed via one of two lenses:\r\n - Compatibility\r\n - Future-proofing\r\n\r\n**Compatibility**: The advantages to using `SHA256` for the sake of compatibility are clear, as are are the implementation/speed advantages over Keccak (e.g. Intel's instruction sets). Backwards compatibility is the reason `blake2b` has been decided against for Eth2.0, however there are [some indicators](https://github.com/ethereum/EIPs/issues/152) that suggest Eth1 will eventually be able to compute `blake2b` efficiently, at which point it would make a lot of sense for Eth2.0 to use `blake2b`.\r\nWhile maintaining backwards compatibility is clearly essential, I believe one of the Eth2.0 project goals is to pave the way for a better Ethereum overall; which I think means that it should exert a positive influence on Eth1. If we think that `blake2b` is a better function, I would hope that Eth1 can adapt in due course.\r\nFrom my understanding, the main reason that using a hashing algorithm which is inefficient in Eth1, such as `blake2b`, is that it inhibits the ability to move data/ether from Eth2.0 back into Eth1; i.e. it prevents Eth1 from reading/verifying the Eth2.0 state. I imagine that regardless of the hash function, Eth1 will require an update before it can perform verification in any case, and so introducing a more efficient hash function in the same update will be comparatively easier. Also, this would only need to happen once Eth2.0 is well established, and Eth1 decides to support it.\r\n\r\n**Future-Proofing**: Since Bitcoin's PoW mechanism uses `SHA256`, the global potential/expected hashes-per-second rate for `SHA256` is far higher than any other hash function. There exist clear incentives for developing faster hashing, and more sophisticated attacks for, `SHA256`; demonstrated so far by Bitcoin's [historical hashrate](https://www.blockchain.com/en/charts/hash-rate?timespan=2years). I think that this increases the likelihood of hash collisions in the long-term. As such, I don't think it's a good long-term strategy to depend solely on `SHA256`. `Keccak256` however, does not currently suffer from this issue, and so I would consider it _slightly_ more future-proof than `SHA256`, but much less than `blake2b`.\r\nI also don't believe the [ _length-extension attack_](https://en.wikipedia.org/wiki/Length_extension_attack) is a disadvantage of `SHA256` in our use case, reasons for which [have been explained](https://github.com/tendermint/iavl/issues/38#issuecomment-386602511) by @zmanian.\r\n\r\nPersonally, I feel the goal of choosing the correct technology with good future-proofing is more important than maintaining compatibility. In this case, I think `blake2b` is the best choice, and I can understand why Polkadot made this choice. However, if we have collectively decided to *not* use `blake2b`, then I don't think the future-proofness of `Keccak256` outweighs the compatibility advantages of `SHA256`.\r\n\r\nI think @benjaminion's suggestion of using [multihash](https://multiformats.io/multihash/) is a fantastic one. The implementation overhead for supporting multiple hashes in this format is negligible and it means we get the ultimate flexibility in choosing hash functions on-the-fly. I imagine that this would mean particular blocks or shards could select a hash function according to their goals. Maybe, in the beginning, only certain blocks need to be verified by Eth1, and those blocks can simply choose `SHA256`, while others can choose `blake2b`, thereby having selective interoperability and allowing us to adjust the slider between compatibility/future-proofing as we go. It also means that if vulnerabilities are discovered in any hashing algorithm, deprecating a function would be considerably easier. Further, multihash is maintained by Protocol Labs, so I assume it would have good support in libp2p.\r\n\r\n**Summary**:\r\nI prefer:\r\n1. `blake2b`\r\n2. `SHA256`\r\n3. `Keccak256`\r\n\r\nBut I don't think we should choose now and we should instead support multihash and allow any secure hashing algorithm.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/463909911/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/470452562",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/612#issuecomment-470452562",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/612",
    "id": 470452562,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MDQ1MjU2Mg==",
    "user": {
      "login": "JustinDrake",
      "id": 731743,
      "node_id": "MDQ6VXNlcjczMTc0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/731743?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JustinDrake",
      "html_url": "https://github.com/JustinDrake",
      "followers_url": "https://api.github.com/users/JustinDrake/followers",
      "following_url": "https://api.github.com/users/JustinDrake/following{/other_user}",
      "gists_url": "https://api.github.com/users/JustinDrake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JustinDrake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JustinDrake/subscriptions",
      "organizations_url": "https://api.github.com/users/JustinDrake/orgs",
      "repos_url": "https://api.github.com/users/JustinDrake/repos",
      "events_url": "https://api.github.com/users/JustinDrake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JustinDrake/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-07T09:33:10Z",
    "updated_at": "2019-03-07T09:33:10Z",
    "author_association": "MEMBER",
    "body": "I asked Dan Boneh\r\n\r\n> Do you think SHA256 will plausibly remain secure until 2030? What about 2040? SHA256 seems to be the \"blockchain standard\" we are inclined to favour, but concerns around its security have been raised. In particular, we are aware of the length extension attack on SHA256, and [this website](http://valerieaurora.org/hash.html) suggests \"minor weaknesses\".\r\n\r\nand he responded\r\n\r\n> I guess you are asking about the collision resistance of SHA-256.   There is nothing known about the full SHA-256 that is better than the birthday bound.   Assuming no algorithmic improvements, and assuming Moore's law continues (a big assumption) then one could expect a collision to be found in about 75 years, which seems fine for your applications.   Quantum attacks also do not affect collision resistance.\r\n> \r\n> However, the fact that NIST put out SHA-3 may suggest that there are non-public attacks against SHA-256 that are better than the birthday attack.  This is just speculation.   We have no information about this.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/470452562/reactions",
      "total_count": 9,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 9
    },
    "performed_via_github_app": null
  }
]
