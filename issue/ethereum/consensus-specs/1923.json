{
  "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1923",
  "repository_url": "https://api.github.com/repos/ethereum/consensus-specs",
  "labels_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1923/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1923/comments",
  "events_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1923/events",
  "html_url": "https://github.com/ethereum/consensus-specs/issues/1923",
  "id": 642208722,
  "node_id": "MDU6SXNzdWU2NDIyMDg3MjI=",
  "number": 1923,
  "title": "get_custody_atoms: avoid application of modulo operation (%) to a negative value",
  "user": {
    "login": "ericsson49",
    "id": 10426192,
    "node_id": "MDQ6VXNlcjEwNDI2MTky",
    "avatar_url": "https://avatars.githubusercontent.com/u/10426192?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ericsson49",
    "html_url": "https://github.com/ericsson49",
    "followers_url": "https://api.github.com/users/ericsson49/followers",
    "following_url": "https://api.github.com/users/ericsson49/following{/other_user}",
    "gists_url": "https://api.github.com/users/ericsson49/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ericsson49/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ericsson49/subscriptions",
    "organizations_url": "https://api.github.com/users/ericsson49/orgs",
    "repos_url": "https://api.github.com/users/ericsson49/repos",
    "events_url": "https://api.github.com/users/ericsson49/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ericsson49/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1244734333,
      "node_id": "MDU6TGFiZWwxMjQ0NzM0MzMz",
      "url": "https://api.github.com/repos/ethereum/consensus-specs/labels/general:presentation",
      "name": "general:presentation",
      "color": "2EA9DF",
      "default": false,
      "description": "Presentation (as opposed to content)"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 5,
  "created_at": "2020-06-19T20:41:55Z",
  "updated_at": "2020-07-02T15:37:17Z",
  "closed_at": "2020-07-02T15:37:17Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "[get_custody_atoms](https://github.com/ethereum/eth2.0-specs/blob/dev/specs/phase1/custody-game.md#get_custody_atoms) applies modulo operation to a negative dividend: `(-len(bytez) % BYTES_PER_CUSTODY_ATOM)`.\r\nModulo operation implementations differ from language to language, when dividend (or divisor) is negative. Therefore that may lead to a bug in a language, which implements modulo operation in a different way than python does (i.e. returning a negative result when a dividend is negative).\r\n\r\n@protolambda in a personal communication has suggested that such an ambiguity is better to be avoided in the spec.",
  "closed_by": {
    "login": "djrtwo",
    "id": 1433595,
    "node_id": "MDQ6VXNlcjE0MzM1OTU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/djrtwo",
    "html_url": "https://github.com/djrtwo",
    "followers_url": "https://api.github.com/users/djrtwo/followers",
    "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
    "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
    "organizations_url": "https://api.github.com/users/djrtwo/orgs",
    "repos_url": "https://api.github.com/users/djrtwo/repos",
    "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
    "received_events_url": "https://api.github.com/users/djrtwo/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1923/reactions",
    "total_count": 5,
    "+1": 5,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1923/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/646968663",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1923#issuecomment-646968663",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1923",
    "id": 646968663,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0Njk2ODY2Mw==",
    "user": {
      "login": "dankrad",
      "id": 6130607,
      "node_id": "MDQ6VXNlcjYxMzA2MDc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6130607?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dankrad",
      "html_url": "https://github.com/dankrad",
      "followers_url": "https://api.github.com/users/dankrad/followers",
      "following_url": "https://api.github.com/users/dankrad/following{/other_user}",
      "gists_url": "https://api.github.com/users/dankrad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dankrad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dankrad/subscriptions",
      "organizations_url": "https://api.github.com/users/dankrad/orgs",
      "repos_url": "https://api.github.com/users/dankrad/repos",
      "events_url": "https://api.github.com/users/dankrad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dankrad/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-20T09:30:12Z",
    "updated_at": "2020-06-20T09:30:12Z",
    "author_association": "MEMBER",
    "body": "This is a very useful shorthand to get the number of missing elements to pad to a certain length. It's certainly unfortunate if we can't use it :(",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/646968663/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/646989789",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1923#issuecomment-646989789",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1923",
    "id": 646989789,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0Njk4OTc4OQ==",
    "user": {
      "login": "ericsson49",
      "id": 10426192,
      "node_id": "MDQ6VXNlcjEwNDI2MTky",
      "avatar_url": "https://avatars.githubusercontent.com/u/10426192?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ericsson49",
      "html_url": "https://github.com/ericsson49",
      "followers_url": "https://api.github.com/users/ericsson49/followers",
      "following_url": "https://api.github.com/users/ericsson49/following{/other_user}",
      "gists_url": "https://api.github.com/users/ericsson49/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ericsson49/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ericsson49/subscriptions",
      "organizations_url": "https://api.github.com/users/ericsson49/orgs",
      "repos_url": "https://api.github.com/users/ericsson49/repos",
      "events_url": "https://api.github.com/users/ericsson49/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ericsson49/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-20T12:42:33Z",
    "updated_at": "2020-06-20T12:42:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "I have mixed feelings about it. An alternative is definitely bulky and this padding approach is short and elegant.\r\n\r\nHowever, we encounter more and more cases when concise is not clear (e.g. #1746 or #1924).\r\nI.e. a short form may be ambiguous and, as a result, unsafe, in the sense that client implementers may implement it in different ways, potentially leading to a consensus break.\r\n\r\nIn the particular case, the modulo operation is clearly [defined](https://docs.python.org/3/reference/expressions.html#binary-arithmetic-operations) in Python, which is great. However, people are people and make mistakes, the particular case is not obvious to humans. On the other side, bugs here are easy to reveal with appropriate tests.\r\n\r\nAs a part of overall efforts to make the spec more formal and less ambiguous, my goal is at least to inform EF team about such ambiguities (and suggest a solution, when possible).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/646989789/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/647379213",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1923#issuecomment-647379213",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1923",
    "id": 647379213,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0NzM3OTIxMw==",
    "user": {
      "login": "mkalinin",
      "id": 1892772,
      "node_id": "MDQ6VXNlcjE4OTI3NzI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1892772?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mkalinin",
      "html_url": "https://github.com/mkalinin",
      "followers_url": "https://api.github.com/users/mkalinin/followers",
      "following_url": "https://api.github.com/users/mkalinin/following{/other_user}",
      "gists_url": "https://api.github.com/users/mkalinin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mkalinin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mkalinin/subscriptions",
      "organizations_url": "https://api.github.com/users/mkalinin/orgs",
      "repos_url": "https://api.github.com/users/mkalinin/repos",
      "events_url": "https://api.github.com/users/mkalinin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mkalinin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-22T08:50:16Z",
    "updated_at": "2020-06-22T11:24:26Z",
    "author_association": "MEMBER",
    "body": "We used to have this problem with Java and JavaScript is affected as well. Both, Java and JavaScript by default does it in the following way:\r\n```\r\n-4 % 3 = -1\r\n```\r\n\r\nWhile Python follows the canonical math approach:\r\n> In mathematics, the result of the modulo operation is an equivalence class, and any member of the class may be chosen as representative; however, the usual representative is the least positive residue, the smallest non-negative integer that belongs to that class, i.e. the remainder of the Euclidean division. \r\n\r\n**EDT**:\r\n\r\nThus `-4 % 3 = 2` in Python and Ruby. And some other languages. ~~There is a helper method in Java SDK `Long.remainderUnsigned` that does the calculation in the same way as Python~~ My bad, this this the wrong method (thanks to @ericsson49). We've spent a time to learn this ambiguity and make a workaround. And I think that modulo operation should at least be explicitly defined in the spec and covered with test that will cut this ambiguity off on the early stage.\r\n\r\nJava spec also have this operation description: https://docs.oracle.com/javase/specs/jls/se8/html/jls-15.html#jls-15.17.3 -- in Java `%` is for remainder, not for a `modulo` operation.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/647379213/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/647486226",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1923#issuecomment-647486226",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1923",
    "id": 647486226,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0NzQ4NjIyNg==",
    "user": {
      "login": "mratsim",
      "id": 22738317,
      "node_id": "MDQ6VXNlcjIyNzM4MzE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/22738317?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mratsim",
      "html_url": "https://github.com/mratsim",
      "followers_url": "https://api.github.com/users/mratsim/followers",
      "following_url": "https://api.github.com/users/mratsim/following{/other_user}",
      "gists_url": "https://api.github.com/users/mratsim/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mratsim/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mratsim/subscriptions",
      "organizations_url": "https://api.github.com/users/mratsim/orgs",
      "repos_url": "https://api.github.com/users/mratsim/repos",
      "events_url": "https://api.github.com/users/mratsim/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mratsim/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-22T12:29:00Z",
    "updated_at": "2020-06-22T12:29:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "Many languages, including C, Rust, Java Nim, have the `mod` or `%` operator be the remainder, which is the same sign as the dividend, while Python, R and solidity uses the sign of the divisor (https://en.wikipedia.org/wiki/Modulo_operation#In_programming_languages)\r\n\r\nEither we define modulo like @mkalinin sugested, or we use explicit `sign(b) * (abs(a) % abs(b))` in the spec to remove ambiguities, which is the approach taken by IETF specs. This makes it clear to implementers that expected sign.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/647486226/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/648342233",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1923#issuecomment-648342233",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1923",
    "id": 648342233,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0ODM0MjIzMw==",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-23T18:36:02Z",
    "updated_at": "2020-06-23T18:36:02Z",
    "author_association": "MEMBER",
    "body": "A couple of things:\r\n\r\n1. We previously removed this usage from the spec (long ago, not sure the example) because the usage is very unclear to implementers in other languages\r\n2. We don't support negative integers in any consensus types and want to avoid them in an intermediate calculations (because a strongly typed language would not handle them \"magically\" like python).\r\n\r\nI suggest we avoid this all together",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/648342233/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
