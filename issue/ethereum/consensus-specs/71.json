{
  "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/71",
  "repository_url": "https://api.github.com/repos/ethereum/consensus-specs",
  "labels_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/71/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/71/comments",
  "events_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/71/events",
  "html_url": "https://github.com/ethereum/consensus-specs/issues/71",
  "id": 369351676,
  "node_id": "MDU6SXNzdWUzNjkzNTE2NzY=",
  "number": 71,
  "title": "A proposal for chain initialization, main chain block inclusion, and deposit processing",
  "user": {
    "login": "vbuterin",
    "id": 2230894,
    "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vbuterin",
    "html_url": "https://github.com/vbuterin",
    "followers_url": "https://api.github.com/users/vbuterin/followers",
    "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
    "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
    "organizations_url": "https://api.github.com/users/vbuterin/orgs",
    "repos_url": "https://api.github.com/users/vbuterin/repos",
    "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vbuterin/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1063043868,
      "node_id": "MDU6TGFiZWwxMDYzMDQzODY4",
      "url": "https://api.github.com/repos/ethereum/consensus-specs/labels/general:enhancement",
      "name": "general:enhancement",
      "color": "086788",
      "default": false,
      "description": "New feature or request"
    },
    {
      "id": 1063052501,
      "node_id": "MDU6TGFiZWwxMDYzMDUyNTAx",
      "url": "https://api.github.com/repos/ethereum/consensus-specs/labels/general:RFC",
      "name": "general:RFC",
      "color": "00D1B2",
      "default": false,
      "description": "Request for Comments"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 10,
  "created_at": "2018-10-12T00:09:29Z",
  "updated_at": "2018-11-19T04:33:57Z",
  "closed_at": "2018-11-19T04:33:56Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "### On-chain contract\r\n\r\nWe create a deposit contract on the blockchain, with roughly the following code:\r\n\r\n```python\r\nHashChainValue: event({prev_tip: bytes32, data: bytes[2048], value: wei_value, total_deposit_count: int128})\r\nChainStart: event({hash_chain_tip: bytes32, time: timestamp})\r\n\r\nhash_chain_tip: public(bytes32)\r\ntotal_deposit_count: int128\r\n\r\n@payable\r\n@public\r\ndef deposit(data: bytes[2048]):\r\n    log.HashChainValue(self.hash_chain_tip, data, msg.value, self.total_deposit_count)\r\n    self.total_deposit_count += 1\r\n    self.hash_chain_tip = sha3(concat(self.hash_chain_tip, data, as_bytes32(msg.value), as_bytes32(self.total_deposit_count)))\r\n    if self.total_deposit_count == 16384:\r\n        log.ChainStart(self.hash_chain_tip, block.timestamp)\r\n```\r\n\r\nWhen a user wishes to move their ETH from the 1.0 chain to the 2.0 chain, they should call the `deposit` function, sending along 32 ETH and providing as `data` a SimpleSerialize'd object with the following arguments (in order):\r\n\r\n* `pubkey`: int256\r\n* `proof_of_possession`: [int256]\r\n* `withdrawal_shard`: int64\r\n* `withdrawal_address`: bytes20\r\n* `randao_commitment`: hash32\r\n\r\nIf they wish to deposit more than 32 ETH, they would need to make multiple calls.\r\n\r\n[Governance note: when publishing the final version of this contract, it may be desirable to issue some kind of formal EIP that \"enshrines\" its privileged status, Ä…nd encourage CarbonVotes and other polls to vote on it, which if successful wouuld make clear to the community that this contract is \"part of the protocol\" and so the community *is* responsible for providing ongoing protocol improvements that eventually unlock any ETH sent into this contract]\r\n\r\n### Chain initialization\r\n\r\nWhen a `ChainStart` log is published, this initializes the chain, setting the following parameters:\r\n\r\n* `POW_CHAIN_HASH_ROOT` (new parameter) = `hash_chain_tip`\r\n* `GENESIS_TIME` = `time`\r\n* `PROCESSED_HASH_ROOT` (new parameter) = `hash_chain_tip`\r\n\r\nIt runs `on_startup` with `initial_validator_entries` equal to the list of data records published as HashChainValue logs so far, in the order in which they were published (oldest to newest).\r\n\r\n### Chain updating\r\n\r\nDefine a validator's \"view\" as being the value obtained by calling `DEPOSIT_CONTRACT_ADDRESS.get_hash_chain_tip()` from the post-state of the block 512 blocks behind the current head of the PoW chain. Define a \"valid view\" (defined subjectively from the PoW of a validator) as a value which is a descendant of `POW_CHAIN_HASH_ROOT` and cannot be obtained by calling `DEPOSIT_CONTRACT_ADDRESS.get_hash_chain_tip()` from the post-state of a block that is part of the canonical PoW chain _at least_ 512 blocks behind the head. Note that any valid view should be either equal to or an ancestor of the validator's view.\r\n\r\nBlocks will have a new data field, `hash_chain_tip_vote: hash32`, which proposers are expected to fill with the following algorithm:\r\n\r\n* Let slot B be the last slot during which the `POW_CHAIN_HASH_ROOT` changed.\r\n* If all blocks since slot B contained a `hash_chain_tip_vote` that was either equal to the `POW_CHAIN_HASH_ROOT` or was an invalid view, vote the validator's view.\r\n* If there was at least one valid view published as a `hash_chain_tip_vote` since slot B, copy the first valid view.\r\n\r\nNote that assuming >= 50% honest, this algorithm will converge to all honest proposers voting the same value, which is a descendant of the `POW_CHAIN_HASH_ROOT`. If the same value is voted for in >= 683 of the last 1024 blocks, set the `POW_CHAIN_HASH_ROOT` to this value.\r\n\r\n**Note that this is a vote, not a consensus rule**; blocks with incorrect votes should not be rejected.\r\n\r\n### Deposit processing\r\n\r\nAdd a new type of `SpecialObject`, which consists of the entire hash-linked-list of HashChainValue logs since the previous `PROCESSED_HASH_ROOT` up to the `POW_CHAIN_HASH_ROOT`. If a valid such hash-linked-list is submitted, then we run `add_validator` with the given values for each record, and set `PROCESSED_HASH_ROOT = POW_CHAIN_HASH_ROOT`.\r\n\r\nThis does mean that deposit processing is not \"automatic\", in that deposits are not automatically read from the PoW chain; only a hash is automatically read, and the rest of the data must be manually imported by some block proposer. This is by design, to limit the amount of in-consensus communication between the PoW chain and the beacon chain required to a single hash value.",
  "closed_by": {
    "login": "djrtwo",
    "id": 1433595,
    "node_id": "MDQ6VXNlcjE0MzM1OTU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/djrtwo",
    "html_url": "https://github.com/djrtwo",
    "followers_url": "https://api.github.com/users/djrtwo/followers",
    "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
    "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
    "organizations_url": "https://api.github.com/users/djrtwo/orgs",
    "repos_url": "https://api.github.com/users/djrtwo/repos",
    "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
    "received_events_url": "https://api.github.com/users/djrtwo/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/71/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/71/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/429443545",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/71#issuecomment-429443545",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/71",
    "id": 429443545,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyOTQ0MzU0NQ==",
    "user": {
      "login": "jannikluhn",
      "id": 29854669,
      "node_id": "MDQ6VXNlcjI5ODU0NjY5",
      "avatar_url": "https://avatars.githubusercontent.com/u/29854669?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jannikluhn",
      "html_url": "https://github.com/jannikluhn",
      "followers_url": "https://api.github.com/users/jannikluhn/followers",
      "following_url": "https://api.github.com/users/jannikluhn/following{/other_user}",
      "gists_url": "https://api.github.com/users/jannikluhn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jannikluhn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jannikluhn/subscriptions",
      "organizations_url": "https://api.github.com/users/jannikluhn/orgs",
      "repos_url": "https://api.github.com/users/jannikluhn/repos",
      "events_url": "https://api.github.com/users/jannikluhn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jannikluhn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-12T19:51:45Z",
    "updated_at": "2018-10-12T19:51:45Z",
    "author_association": "MEMBER",
    "body": "If I understand correctly, this allows the first proposer submitting a new valid vote to delay deposit processing by 511 additional blocks, as they can vote on the child of `POW_CHAIN_HASH_ROOT` instead of their actual view and all following proposers would do the same.\r\n\r\nI'm wondering if we could fix this by counting votes for a view also towards all ancestors of that view. Then proposers wouldn't have to copy the first vote but could always vote for their view. `POW_CHAIN_HASH_ROOT` would be updated continuously (but still delayed by 512 blocks compared to the head) and there wouldn't be a special first vote. Sounds too simple, what's the catch?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/429443545/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/429558774",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/71#issuecomment-429558774",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/71",
    "id": 429558774,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyOTU1ODc3NA==",
    "user": {
      "login": "vbuterin",
      "id": 2230894,
      "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vbuterin",
      "html_url": "https://github.com/vbuterin",
      "followers_url": "https://api.github.com/users/vbuterin/followers",
      "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
      "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
      "organizations_url": "https://api.github.com/users/vbuterin/orgs",
      "repos_url": "https://api.github.com/users/vbuterin/repos",
      "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vbuterin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-13T17:11:45Z",
    "updated_at": "2018-10-13T17:11:45Z",
    "author_association": "MEMBER",
    "body": "> If I understand correctly, this allows the first proposer submitting a new valid vote to delay deposit processing by 511 additional blocks, as they can vote on the child of POW_CHAIN_HASH_ROOT instead of their actual view and all following proposers would do the same.\r\n\r\nCorrect. But all that means is that if < 50% of proposers are dishonest, deposit processing will on average be delayed by < 512 additional blocks. So it's not that bad. As soon as you get lucky with one honest proposer, the chain can catch up fully.\r\n\r\n> I'm wondering if we could fix this by counting votes for a view also towards all ancestors of that view\r\n\r\nThe problem is that this would require the beacon chain to be aware of the concept of ancestors within that mechanism, which would add considerable complexity.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/429558774/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/429977609",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/71#issuecomment-429977609",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/71",
    "id": 429977609,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyOTk3NzYwOQ==",
    "user": {
      "login": "JustinDrake",
      "id": 731743,
      "node_id": "MDQ6VXNlcjczMTc0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/731743?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JustinDrake",
      "html_url": "https://github.com/JustinDrake",
      "followers_url": "https://api.github.com/users/JustinDrake/followers",
      "following_url": "https://api.github.com/users/JustinDrake/following{/other_user}",
      "gists_url": "https://api.github.com/users/JustinDrake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JustinDrake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JustinDrake/subscriptions",
      "organizations_url": "https://api.github.com/users/JustinDrake/orgs",
      "repos_url": "https://api.github.com/users/JustinDrake/repos",
      "events_url": "https://api.github.com/users/JustinDrake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JustinDrake/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-15T19:10:53Z",
    "updated_at": "2018-10-15T19:10:53Z",
    "author_association": "MEMBER",
    "body": "Minor suggestions for the deposit contract:\r\n\r\n1. Update the size of `pubkey` and `proof_of_possession` for the BLS12-381 curve.\r\n2. Do not cap the number of bytes in `data` to `300` to be more update-friendly.\r\n3. Consider removing `assert msg.value == as_wei_value(32, \"ether\")` as this is not friendly to deposit top ups, deposit buffers, or other future changes related to the size of the deposit.\r\n4. Consider changing the constant `10000` to a power of two for consistency (also, name it and add it to the list of constants in the spec).\r\n5. Consider hashing `total_deposit_count` into `hash_chain_tip` so that the `total_deposit_count` can be readily used by light clients. Bonus: this removes the need for the `ChainStart` event and the `self.total_deposit_count == 10000` check.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/429977609/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/429979055",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/71#issuecomment-429979055",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/71",
    "id": 429979055,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyOTk3OTA1NQ==",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-15T19:15:18Z",
    "updated_at": "2018-10-15T19:15:18Z",
    "author_association": "MEMBER",
    "body": "Should we consider adding a small proposer reward for adding a well-formatted `SpecialRecord` that triggers `add_validator`?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/429979055/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/431415719",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/71#issuecomment-431415719",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/71",
    "id": 431415719,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMTQxNTcxOQ==",
    "user": {
      "login": "vbuterin",
      "id": 2230894,
      "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vbuterin",
      "html_url": "https://github.com/vbuterin",
      "followers_url": "https://api.github.com/users/vbuterin/followers",
      "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
      "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
      "organizations_url": "https://api.github.com/users/vbuterin/orgs",
      "repos_url": "https://api.github.com/users/vbuterin/repos",
      "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vbuterin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-19T16:10:28Z",
    "updated_at": "2018-10-19T16:10:28Z",
    "author_association": "MEMBER",
    "body": "@JustinDrake fixed all except (1) [probably better to run through and update to BLS12-381 all at once at some point]\r\n@djrtwo sounds good to me!",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/431415719/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/435837594",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/71#issuecomment-435837594",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/71",
    "id": 435837594,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNTgzNzU5NA==",
    "user": {
      "login": "vbuterin",
      "id": 2230894,
      "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vbuterin",
      "html_url": "https://github.com/vbuterin",
      "followers_url": "https://api.github.com/users/vbuterin/followers",
      "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
      "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
      "organizations_url": "https://api.github.com/users/vbuterin/orgs",
      "repos_url": "https://api.github.com/users/vbuterin/repos",
      "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vbuterin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-05T11:09:15Z",
    "updated_at": "2018-11-09T09:48:06Z",
    "author_association": "MEMBER",
    "body": "Here is an alternative that allows for the same structure to be used for accepting deposits from the PoW chain *and* from shards.\r\n\r\nThe code changes to:\r\n\r\n```python\r\nHashChainValue: event({prev_tip: bytes32, data: bytes[2048], value: wei_value, total_deposit_count: int128})\r\nChainStart: event({hash_chain_tip: bytes32, time: timestamp})\r\n\r\nreceipt_tree: bytes32[int128]\r\ntotal_deposit_count: int128\r\n\r\n@payable\r\n@public\r\ndef deposit(data: bytes[2048]):\r\n    log.HashChainValue(self.hash_chain_tip, data, msg.value, self.total_deposit_count)\r\n    index:int128 = self.total_deposit_count + 2**32\r\n    self.receipt_tree[index] = sha3(concat(data, as_bytes32(msg.value), as_bytes32(block.timestamp))\r\n    for i in range(32):\r\n        index //= 2\r\n        self.receipt_tree[index] = sha3(concat(self.receipt_tree[index * 2], self.receipt_tree[index * 2 + 1]))\r\n    self.total_deposit_count += 1\r\n    if self.total_deposit_count == 16384:\r\n        log.ChainStart(self.receipt_tree[1], block.timestamp)\r\n\r\n@public\r\n@constant\r\ndef get_receipt_root() -> bytes32:\r\n    return self.receipt_tree[1]\r\n```\r\n\r\nNow, any receipt can prove its membership separately from a Merkle tree. We also make a few changes:\r\n\r\n* A receipt can be used to deposit if the beacon chain time is less than `max(receipt.timestamp, chain.genesis_time) + DEPOSIT_WINDOW` (eg. 2^25 seconds ~= 1 year).\r\n* Withdrawn validator slots stay in the state for 1 year\r\n* The proof of possession is now a signature of not just the hash of the pubkey, but of the pubkey+data. This prevents attackers from griefing by submitting a deposit with the same pubkey but a different randao hash root or withdrawal address.\r\n* A rule is added that you cannot deposit a validator that has the same pubkey as any validator currently in the state. This prevents double-spending receipts.\r\n\r\nNotice that this mechanism can also later be used unchanged to import validators from shards.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/435837594/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/437309936",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/71#issuecomment-437309936",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/71",
    "id": 437309936,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNzMwOTkzNg==",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-09T09:59:06Z",
    "updated_at": "2018-11-09T10:05:06Z",
    "author_association": "MEMBER",
    "body": "Log `HashChainValue` is still using `self.hash_chain_tip`. Should this be `self.receipt_tree[1]` in the 0th arg?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/437309936/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/437312361",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/71#issuecomment-437312361",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/71",
    "id": 437312361,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNzMxMjM2MQ==",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-09T10:08:29Z",
    "updated_at": "2018-11-09T10:08:29Z",
    "author_association": "MEMBER",
    "body": "Why the one year? Is this to compensate for the fact that withdrawals can now happen fast in the beacon chain (if only a short queue) to prevent quickly reregistering of public key after withdrawal?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/437312361/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/437339121",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/71#issuecomment-437339121",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/71",
    "id": 437339121,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNzMzOTEyMQ==",
    "user": {
      "login": "vbuterin",
      "id": 2230894,
      "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vbuterin",
      "html_url": "https://github.com/vbuterin",
      "followers_url": "https://api.github.com/users/vbuterin/followers",
      "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
      "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
      "organizations_url": "https://api.github.com/users/vbuterin/orgs",
      "repos_url": "https://api.github.com/users/vbuterin/repos",
      "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vbuterin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-09T11:58:24Z",
    "updated_at": "2018-11-09T11:58:24Z",
    "author_association": "MEMBER",
    "body": "> Log HashChainValue is still using self.hash_chain_tip. Should this be self.receipt_tree[1] in the 0th arg?\r\n\r\nAh, yes it should.\r\n\r\n> Why the one year? Is this to compensate for the fact that withdrawals can now happen fast in the beacon chain (if only a short queue) to prevent quickly reregistering of public key after withdrawal?\r\n\r\nIt could be any length. But if the length is short, then it creates risk of loss of funds if the beacon chain breaks for an extended duration.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/437339121/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/439769015",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/71#issuecomment-439769015",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/71",
    "id": 439769015,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzOTc2OTAxNQ==",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-19T04:33:56Z",
    "updated_at": "2018-11-19T04:33:56Z",
    "author_association": "MEMBER",
    "body": "closed via #107 ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/439769015/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
