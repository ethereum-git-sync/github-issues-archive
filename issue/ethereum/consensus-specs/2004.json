{
  "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2004",
  "repository_url": "https://api.github.com/repos/ethereum/consensus-specs",
  "labels_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2004/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2004/comments",
  "events_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2004/events",
  "html_url": "https://github.com/ethereum/consensus-specs/issues/2004",
  "id": 668757713,
  "node_id": "MDU6SXNzdWU2Njg3NTc3MTM=",
  "number": 2004,
  "title": "Move up slot range check in beacon attestation propagation",
  "user": {
    "login": "terencechain",
    "id": 21316537,
    "node_id": "MDQ6VXNlcjIxMzE2NTM3",
    "avatar_url": "https://avatars.githubusercontent.com/u/21316537?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/terencechain",
    "html_url": "https://github.com/terencechain",
    "followers_url": "https://api.github.com/users/terencechain/followers",
    "following_url": "https://api.github.com/users/terencechain/following{/other_user}",
    "gists_url": "https://api.github.com/users/terencechain/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/terencechain/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/terencechain/subscriptions",
    "organizations_url": "https://api.github.com/users/terencechain/orgs",
    "repos_url": "https://api.github.com/users/terencechain/repos",
    "events_url": "https://api.github.com/users/terencechain/events{/privacy}",
    "received_events_url": "https://api.github.com/users/terencechain/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1295438707,
      "node_id": "MDU6TGFiZWwxMjk1NDM4NzA3",
      "url": "https://api.github.com/repos/ethereum/consensus-specs/labels/scope:networking",
      "name": "scope:networking",
      "color": "F596AA",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 5,
  "created_at": "2020-07-30T13:58:03Z",
  "updated_at": "2023-12-27T00:41:44Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "I'm suggesting to move the `ATTESTATION_PROPAGATION_SLOT_RANGE ` check to the top for `beacon_attestation_{subnet_id}` validations.\r\n\r\nFrom:\r\n```python\r\n[REJECT] The attestation is for the correct subnet -- i.e. compute_subnet_for_attestation(committees_per_slot, attestation.data.slot, attestation.data.index) == subnet_id, where committees_per_slot = get_committee_count_per_slot(state, attestation.data.target.epoch), which may be pre-computed along with the committee information for the signature check.\r\n[IGNORE] attestation.data.slot is within the last ATTESTATION_PROPAGATION_SLOT_RANGE slots (within a MAXIMUM_GOSSIP_CLOCK_DISPARITY allowance) -- i.e. attestation.data.slot + ATTESTATION_PROPAGATION_SLOT_RANGE >= current_slot >= attestation.data.slot (a client MAY queue future attestations for processing at the appropriate slot)\r\n```\r\n\r\nTo:\r\n```python\r\n[IGNORE] attestation.data.slot is within the last ATTESTATION_PROPAGATION_SLOT_RANGE slots (within a MAXIMUM_GOSSIP_CLOCK_DISPARITY allowance) -- i.e. attestation.data.slot + ATTESTATION_PROPAGATION_SLOT_RANGE >= current_slot >= attestation.data.slot (a client MAY queue future attestations for processing at the appropriate slot)\r\n[REJECT] The attestation is for the correct subnet -- i.e. compute_subnet_for_attestation(committees_per_slot, attestation.data.slot, attestation.data.index) == subnet_id, where committees_per_slot = get_committee_count_per_slot(state, attestation.data.target.epoch), which may be pre-computed along with the committee information for the signature check.\r\n```\r\n\r\n**Reasons:**\r\n1. slot range check is a stateless check, it's slightly cheaper\r\n2. subnet check may open up to dos attack in situation where long period without finality and this mostly depends on client implementation detail. The slot range check can be used to prevent such attack\r\n\r\n**More info on the attack:**\r\nIn Prysm's DB scheme, we only hold up to certain hot (post finalization) states in memory.  When there's long period without finality, a node could get attacked by receiving attestation that's outside of slot range. Given it's outside of the slot range (eg. >2epochs behind), that's very likely the receiving node will have to do extra computations to compute for the beacon state to satisfy the committee validation and that is `committees_per_slot = get_committee_count_per_slot(state, attestation.data.target.epoch)` We have observed this pattern in the Onyx testnet when 200 epochs since finality\r\n\r\nReference fix in Prysm: https://github.com/prysmaticlabs/prysm/pull/6755",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2004/reactions",
    "total_count": 2,
    "+1": 2,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2004/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/666580170",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2004#issuecomment-666580170",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2004",
    "id": 666580170,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2NjU4MDE3MA==",
    "user": {
      "login": "lsankar4033",
      "id": 451947,
      "node_id": "MDQ6VXNlcjQ1MTk0Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/451947?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lsankar4033",
      "html_url": "https://github.com/lsankar4033",
      "followers_url": "https://api.github.com/users/lsankar4033/followers",
      "following_url": "https://api.github.com/users/lsankar4033/following{/other_user}",
      "gists_url": "https://api.github.com/users/lsankar4033/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lsankar4033/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lsankar4033/subscriptions",
      "organizations_url": "https://api.github.com/users/lsankar4033/orgs",
      "repos_url": "https://api.github.com/users/lsankar4033/repos",
      "events_url": "https://api.github.com/users/lsankar4033/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lsankar4033/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-30T18:22:07Z",
    "updated_at": "2020-07-30T18:22:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "Is the subnet check (potentially) expensive because of the need to check for active validators at the epoch? Otherwise it seems like O(1)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/666580170/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/666587125",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2004#issuecomment-666587125",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2004",
    "id": 666587125,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2NjU4NzEyNQ==",
    "user": {
      "login": "terencechain",
      "id": 21316537,
      "node_id": "MDQ6VXNlcjIxMzE2NTM3",
      "avatar_url": "https://avatars.githubusercontent.com/u/21316537?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/terencechain",
      "html_url": "https://github.com/terencechain",
      "followers_url": "https://api.github.com/users/terencechain/followers",
      "following_url": "https://api.github.com/users/terencechain/following{/other_user}",
      "gists_url": "https://api.github.com/users/terencechain/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/terencechain/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/terencechain/subscriptions",
      "organizations_url": "https://api.github.com/users/terencechain/orgs",
      "repos_url": "https://api.github.com/users/terencechain/repos",
      "events_url": "https://api.github.com/users/terencechain/events{/privacy}",
      "received_events_url": "https://api.github.com/users/terencechain/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-30T18:34:07Z",
    "updated_at": "2020-07-30T18:34:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Is the subnet check (potentially) expensive because of the need to check for active validators at the epoch? Otherwise it seems like O(1)\r\n\r\nThe cost is getting the state. Say current epoch is 200 and last finalized epoch is 100. Clients might have frequent states cached in the 197-200 region and less frequent states cached in the 100-197 region. Bad peers could send attestations with slot outside of the invalid slot range and cause receiving peer to oversubscribe the CPU by computing states with no useful purpose",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/666587125/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/666604925",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2004#issuecomment-666604925",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2004",
    "id": 666604925,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2NjYwNDkyNQ==",
    "user": {
      "login": "lsankar4033",
      "id": 451947,
      "node_id": "MDQ6VXNlcjQ1MTk0Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/451947?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lsankar4033",
      "html_url": "https://github.com/lsankar4033",
      "followers_url": "https://api.github.com/users/lsankar4033/followers",
      "following_url": "https://api.github.com/users/lsankar4033/following{/other_user}",
      "gists_url": "https://api.github.com/users/lsankar4033/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lsankar4033/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lsankar4033/subscriptions",
      "organizations_url": "https://api.github.com/users/lsankar4033/orgs",
      "repos_url": "https://api.github.com/users/lsankar4033/repos",
      "events_url": "https://api.github.com/users/lsankar4033/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lsankar4033/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-30T19:01:44Z",
    "updated_at": "2020-07-30T19:01:44Z",
    "author_association": "CONTRIBUTOR",
    "body": "got it, this makes sense. putting the slot-range check first and keeping it there seems like a good idea in general; opens up other validations that we can add later without worries about dos-ing clients (i.e. https://github.com/ethereum/eth2.0-specs/issues/2002)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/666604925/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/678403304",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2004#issuecomment-678403304",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2004",
    "id": 678403304,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3ODQwMzMwNA==",
    "user": {
      "login": "hwwhww",
      "id": 9263930,
      "node_id": "MDQ6VXNlcjkyNjM5MzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9263930?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hwwhww",
      "html_url": "https://github.com/hwwhww",
      "followers_url": "https://api.github.com/users/hwwhww/followers",
      "following_url": "https://api.github.com/users/hwwhww/following{/other_user}",
      "gists_url": "https://api.github.com/users/hwwhww/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hwwhww/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hwwhww/subscriptions",
      "organizations_url": "https://api.github.com/users/hwwhww/orgs",
      "repos_url": "https://api.github.com/users/hwwhww/repos",
      "events_url": "https://api.github.com/users/hwwhww/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hwwhww/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-21T17:27:29Z",
    "updated_at": "2020-08-21T17:27:29Z",
    "author_association": "MEMBER",
    "body": "Look good to me. Hmm, I think although the validation sequence is not strict as the consensus validation sequence, an optimized process is still good for other teams to learn about.\r\n\r\n/cc @djrtwo @protolambda \r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/678403304/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/820917587",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2004#issuecomment-820917587",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2004",
    "id": 820917587,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyMDkxNzU4Nw==",
    "user": {
      "login": "metatron1973",
      "id": 80199202,
      "node_id": "MDQ6VXNlcjgwMTk5MjAy",
      "avatar_url": "https://avatars.githubusercontent.com/u/80199202?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/metatron1973",
      "html_url": "https://github.com/metatron1973",
      "followers_url": "https://api.github.com/users/metatron1973/followers",
      "following_url": "https://api.github.com/users/metatron1973/following{/other_user}",
      "gists_url": "https://api.github.com/users/metatron1973/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/metatron1973/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/metatron1973/subscriptions",
      "organizations_url": "https://api.github.com/users/metatron1973/orgs",
      "repos_url": "https://api.github.com/users/metatron1973/repos",
      "events_url": "https://api.github.com/users/metatron1973/events{/privacy}",
      "received_events_url": "https://api.github.com/users/metatron1973/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-04-16T05:31:52Z",
    "updated_at": "2021-04-16T05:31:52Z",
    "author_association": "NONE",
    "body": "Thanks for the 411 ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/820917587/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
