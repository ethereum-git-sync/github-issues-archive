{
  "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1101",
  "repository_url": "https://api.github.com/repos/ethereum/consensus-specs",
  "labels_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1101/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1101/comments",
  "events_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1101/events",
  "html_url": "https://github.com/ethereum/consensus-specs/issues/1101",
  "id": 446129091,
  "node_id": "MDU6SXNzdWU0NDYxMjkwOTE=",
  "number": 1101,
  "title": "handling altered constants at forks",
  "user": {
    "login": "djrtwo",
    "id": 1433595,
    "node_id": "MDQ6VXNlcjE0MzM1OTU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/djrtwo",
    "html_url": "https://github.com/djrtwo",
    "followers_url": "https://api.github.com/users/djrtwo/followers",
    "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
    "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
    "organizations_url": "https://api.github.com/users/djrtwo/orgs",
    "repos_url": "https://api.github.com/users/djrtwo/repos",
    "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
    "received_events_url": "https://api.github.com/users/djrtwo/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 6,
  "created_at": "2019-05-20T13:49:50Z",
  "updated_at": "2020-03-17T16:38:05Z",
  "closed_at": "2020-03-17T16:38:05Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "We currently don't have a good mechanism for handling a changed constant at a fork boundary. We likely want to use the same `BeaconState` versioning technique as for signatures.\r\n\r\nThe first constant we are discussing changing in production is `MAX_TRANSFERS` (from 0 to non-zero). We need to ensure that blocks prior to the fork epoch have validity condition `len(block.transfers) == 0` but after the fork epoch have `len(block.transfers) == non_zero_value`.\r\n\r\nWe don't necessarily need to build this in to the spec at this point, but it will certainly be a requirement that clients can handle different constants per fork version. \r\n\r\nSolution might look something like `get_constant(state, var_string_name, epoch)`",
  "closed_by": {
    "login": "djrtwo",
    "id": 1433595,
    "node_id": "MDQ6VXNlcjE0MzM1OTU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/djrtwo",
    "html_url": "https://github.com/djrtwo",
    "followers_url": "https://api.github.com/users/djrtwo/followers",
    "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
    "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
    "organizations_url": "https://api.github.com/users/djrtwo/orgs",
    "repos_url": "https://api.github.com/users/djrtwo/repos",
    "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
    "received_events_url": "https://api.github.com/users/djrtwo/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1101/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1101/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/494079849",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1101#issuecomment-494079849",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1101",
    "id": 494079849,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5NDA3OTg0OQ==",
    "user": {
      "login": "dankrad",
      "id": 6130607,
      "node_id": "MDQ6VXNlcjYxMzA2MDc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6130607?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dankrad",
      "html_url": "https://github.com/dankrad",
      "followers_url": "https://api.github.com/users/dankrad/followers",
      "following_url": "https://api.github.com/users/dankrad/following{/other_user}",
      "gists_url": "https://api.github.com/users/dankrad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dankrad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dankrad/subscriptions",
      "organizations_url": "https://api.github.com/users/dankrad/orgs",
      "repos_url": "https://api.github.com/users/dankrad/repos",
      "events_url": "https://api.github.com/users/dankrad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dankrad/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-20T17:29:38Z",
    "updated_at": "2019-05-20T17:29:38Z",
    "author_association": "MEMBER",
    "body": "I agree that we need this. I'm a bit concerned that the code for this would be very clumsy. Is there a more elegant solution?\r\nThe simple pythonic way would be to just overwrite the constants at the epoch boundaries, but this might of course not work for all constants. But it would not blow up the code like this proposal.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/494079849/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/494177544",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1101#issuecomment-494177544",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1101",
    "id": 494177544,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5NDE3NzU0NA==",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-20T22:51:03Z",
    "updated_at": "2019-05-20T22:51:03Z",
    "author_association": "MEMBER",
    "body": "Overwriting loses the ability to have a granular control on the constants on the border of a fork. See my above transfer example.\r\n\r\nGiven the current structure of the pyspec, I don't see a path that would be elegant :/\r\n\r\npy-evm has a notion of VirtualMachines and StateMachines that are applied at certain block or slot heights. Constants can change at these heights and these machines can easily handle constants on the border.\r\n\r\n------\r\n\r\nJust remembered proto and I discussed this weeks ago in the context of \"fork timelines\" for testing and defining production and testnet configurations (https://github.com/ethereum/eth2.0-specs/tree/dev/configs/fork_timelines). The easy solution is to just define these constant changes here and let clients handle the fork complexity locally instead of defining a mechanism in spec like signature domains. We can then hack a solution in the pytests/test generation instead of in spec.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/494177544/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/494224962",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1101#issuecomment-494224962",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1101",
    "id": 494224962,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5NDIyNDk2Mg==",
    "user": {
      "login": "hwwhww",
      "id": 9263930,
      "node_id": "MDQ6VXNlcjkyNjM5MzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9263930?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hwwhww",
      "html_url": "https://github.com/hwwhww",
      "followers_url": "https://api.github.com/users/hwwhww/followers",
      "following_url": "https://api.github.com/users/hwwhww/following{/other_user}",
      "gists_url": "https://api.github.com/users/hwwhww/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hwwhww/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hwwhww/subscriptions",
      "organizations_url": "https://api.github.com/users/hwwhww/orgs",
      "repos_url": "https://api.github.com/users/hwwhww/repos",
      "events_url": "https://api.github.com/users/hwwhww/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hwwhww/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-21T03:23:02Z",
    "updated_at": "2019-05-21T04:21:39Z",
    "author_association": "MEMBER",
    "body": "The current phase 1 executable PR #1061 builds the phases into `test_libs/pyspec/eth2spec/phase0/spec.py` and `test_libs/pyspec/eth2spec/phase1/spec.py`.\r\n\r\nIf there’s a hard fork `<FORK_NAME>` between phase 0 and phase 1, I suppose we can add `specs/core/0_beacon-chain_<FORK_NAME>.md` with altered constants, and build it into  `test_libs/pyspec/eth2spec/phase0_<FORK_NAME>/spec.py`.\r\n\r\nFor the cross-fork tests, we can take the `spec` modules into:\r\n```python\r\nimport eth2spec.phase0.spec as phase0_spec\r\nimport eth2spec.phase1.spec as phase0_<FORK_NAME>_spec\r\nimport eth2spec.phase1.spec as phase1_spec\r\n\r\ndef get_spec(epoch, fork_timeline):\r\n    if fork_timeline['phase0'] <= epoch < fork_timeline['phase0_<FORK_NAME>']:\r\n        return phase0_spec\r\n    elif fork_timeline['phase0_<FORK_NAME>'] <= epoch < fork_timeline['phase1']:\r\n        return phase0_<FORK_NAME>_spec\r\n    elif epoch >= fork_timeline['phase1']:\r\n        return phase1_spec\r\n    else:\r\n        raise Exception('Out of fork_timeline')\r\n```\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/494224962/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/494273627",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1101#issuecomment-494273627",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1101",
    "id": 494273627,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5NDI3MzYyNw==",
    "user": {
      "login": "JustinDrake",
      "id": 731743,
      "node_id": "MDQ6VXNlcjczMTc0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/731743?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JustinDrake",
      "html_url": "https://github.com/JustinDrake",
      "followers_url": "https://api.github.com/users/JustinDrake/followers",
      "following_url": "https://api.github.com/users/JustinDrake/following{/other_user}",
      "gists_url": "https://api.github.com/users/JustinDrake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JustinDrake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JustinDrake/subscriptions",
      "organizations_url": "https://api.github.com/users/JustinDrake/orgs",
      "repos_url": "https://api.github.com/users/JustinDrake/repos",
      "events_url": "https://api.github.com/users/JustinDrake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JustinDrake/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-21T07:29:17Z",
    "updated_at": "2019-05-21T07:29:17Z",
    "author_association": "MEMBER",
    "body": "> The first constant we are discussing changing in production is `MAX_TRANSFERS` (from 0 to non-zero).\r\n\r\nHow often is a pure constant change applicable? I would invest in infrastructure facilitating more general changes to the state transition function. (See also item 8 in #1054 which suggests removing transfers from the phase 0 spec.)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/494273627/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/494324823",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1101#issuecomment-494324823",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1101",
    "id": 494324823,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5NDMyNDgyMw==",
    "user": {
      "login": "hwwhww",
      "id": 9263930,
      "node_id": "MDQ6VXNlcjkyNjM5MzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9263930?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hwwhww",
      "html_url": "https://github.com/hwwhww",
      "followers_url": "https://api.github.com/users/hwwhww/followers",
      "following_url": "https://api.github.com/users/hwwhww/following{/other_user}",
      "gists_url": "https://api.github.com/users/hwwhww/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hwwhww/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hwwhww/subscriptions",
      "organizations_url": "https://api.github.com/users/hwwhww/orgs",
      "repos_url": "https://api.github.com/users/hwwhww/repos",
      "events_url": "https://api.github.com/users/hwwhww/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hwwhww/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-21T09:58:28Z",
    "updated_at": "2019-05-21T09:58:28Z",
    "author_association": "MEMBER",
    "body": "In @protolambda 's [test_format design](https://github.com/ethereum/eth2.0-specs/blob/d1c96c1e0d3b97ac6b436cbaa070e4a39f6b5876/specs/test_formats/README.md#test-suite), it seems there's one `config` serves for different forks: \r\n```\r\ntitle: <string, short, one line> -- Display name for the test suite\r\nsummary: <string, average, 1-3 lines> -- Summarizes the test suite\r\nforks_timeline: <string, reference to a fork definition file, without extension> -- Used to determine the forking timeline\r\nforks: <list of strings> -- Defines the coverage. Test-runner code may decide to re-run with the different forks \"activated\", when applicable.\r\nconfig: <string, reference to a config file, without extension> -- Used to determine which set of constants to run (possibly compile time) with\r\nrunner: <string, no spaces, python-like naming format> *MUST be consistent with folder structure*\r\nhandler: <string, no spaces, python-like naming format> *MUST be consistent with folder structure*\r\n\r\ntest_cases: <list, values being maps defining a test case each>\r\n   ...\r\n\r\n```\r\nI guess we need to update [constant_presets](https://github.com/ethereum/eth2.0-specs/blob/dev/configs/constant_presets/minimal.yaml) to serve for multiple forks/phases like:\r\n```yaml\r\nphase0: \r\n    SHARD_COUNT: 8\r\n    TARGET_COMMITTEE_SIZE: 4\r\n    ...\r\n    MAX_TRANSFERS: 0\r\nphase1:\r\n    BYTES_PER_SHARD_BLOCK: 16384\r\n    ...\r\n    MAX_TRANSFERS: 16\r\n```\r\nonly list the new or altered constants.\r\n\r\n\r\n\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/494324823/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/600172971",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1101#issuecomment-600172971",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1101",
    "id": 600172971,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYwMDE3Mjk3MQ==",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-03-17T16:38:05Z",
    "updated_at": "2020-03-17T16:38:05Z",
    "author_association": "MEMBER",
    "body": "Current approach is to never modify config vars. Instead to just have new vars at new forks ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/600172971/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
