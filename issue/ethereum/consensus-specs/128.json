{
  "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/128",
  "repository_url": "https://api.github.com/repos/ethereum/consensus-specs",
  "labels_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/128/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/128/comments",
  "events_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/128/events",
  "html_url": "https://github.com/ethereum/consensus-specs/issues/128",
  "id": 380688990,
  "node_id": "MDU6SXNzdWUzODA2ODg5OTA=",
  "number": 128,
  "title": "Miscellaneous beacon chain changes",
  "user": {
    "login": "JustinDrake",
    "id": 731743,
    "node_id": "MDQ6VXNlcjczMTc0Mw==",
    "avatar_url": "https://avatars.githubusercontent.com/u/731743?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/JustinDrake",
    "html_url": "https://github.com/JustinDrake",
    "followers_url": "https://api.github.com/users/JustinDrake/followers",
    "following_url": "https://api.github.com/users/JustinDrake/following{/other_user}",
    "gists_url": "https://api.github.com/users/JustinDrake/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/JustinDrake/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/JustinDrake/subscriptions",
    "organizations_url": "https://api.github.com/users/JustinDrake/orgs",
    "repos_url": "https://api.github.com/users/JustinDrake/repos",
    "events_url": "https://api.github.com/users/JustinDrake/events{/privacy}",
    "received_events_url": "https://api.github.com/users/JustinDrake/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1063043868,
      "node_id": "MDU6TGFiZWwxMDYzMDQzODY4",
      "url": "https://api.github.com/repos/ethereum/consensus-specs/labels/general:enhancement",
      "name": "general:enhancement",
      "color": "086788",
      "default": false,
      "description": "New feature or request"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 13,
  "created_at": "2018-11-14T13:05:25Z",
  "updated_at": "2018-11-28T21:45:31Z",
  "closed_at": "2018-11-28T21:45:31Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "Below is a summary of suggestions from miscellaneous internal discussions:\r\n\r\n- [x] 1. **Fair staking**: Every validator has the same amount `BALANCE_AT_RISK = 24 ETH` at risk (lower than `DEPOSIT_SIZE = 32 ETH`). In particular, penalties only apply to the balance at risk (regardless of the size of the balance), and validators with a balance below `BALANCE_AT_RISK` are automatically exited.\r\n- [x] 2. **Delayed signature inclusion**: Aggregate signatures for slot `n` can be included onchain no earlier than slot `n + SIGNATURE_INCLUSION_DELAY` (e.g. `SIGNATURE_INCLUSION_DELAY = 4`). This allows for the safe reduction of `SLOT_DURATION` (e.g. to 4 seconds), and reduced beacon chain overhead from more efficient aggregation. The fork choice rule is unchanged (it takes into account offchain signatures).\r\n- [x] 3. **Type homogenisation**: All integer types are homogenised to `uint64`. Exceptions are made for signature types, and possibly where a significant performance penalty would be observed.\r\n- [x] 4. **Message domain isolation**: All signed messages (including proofs of possession) contain a `fork_version` field which is checked as part of the same unified signature verification logic.\r\n- [x] 5. **Special object count limit by kind**: Every kind of special (`LOGOUT`, `CASPER_SLASHING`, etc.) has a separate object count limit per block.\r\n- [x] 6. **Weakened no-surround slashing condition**: The no-surround slashing condition is replaced by the following: A validator must not cast two votes such that `target1 = source1 + 1`, `source2 <= source1` and `target2 >= target1`. (See [this ethresear.ch post](https://ethresear.ch/t/a-tight-and-intuitive-casper-slashing-condition/3359) for context.)\r\n- [x] 7. **Order special objects by kind**: Limits the possibility for edge cases when processing special objects.\r\n- [x] 8. **BLS12-381**: Finalise the move to the new curve.\r\n- [x] 9. **Fixed-sized shard blocks**: For simplicity. When the pool of validators is critically low proofs of custody can be disabled and notaries can rely on data availability proofs only.\r\n- [x] 10. **Withdrawal credentials**: Replace `withdrawal_address` and `withdrawal_shard` with `withdrawal_credentials` which is composed of a version number and (for version 0) the hash of a BLS pubkey.\r\n- [x] 11. **PoW receipt root votes**: Replace `candidate_pow_receipt_root` with a map from candidate PoW receipt roots to vote counts to avoid bad PoW receipt root candidates from polluting a full voting period. \r\n- [x] 12. **Reduce PoW receipt root threshold**: From 2/3 (needlessly conservative given a committee size of 1,024) to 1/2 for improved liveness.\r\n- [x] 13. **Crosslink hash**: Fix crosslink hashes to `bytes([0] * 32)` until phase 1 for cleanliness and unambiguity.\r\n- [x] 14. **Minimum registration period**: Force validators to be registered for some amount of time (e.g. 1 week) to mitigate join-leave attacks (for when re-registrations are possible).\r\n- [x] 15. **Use uint64 for shard number**: `uint16` will plausibly be too small for the future, and is not consistent with the homogenisation to `uint64`. For extra hashing performance `hash(n)` can be cached for `n < SHARD_COUNT`.\r\n- [x] 16. **Constrain genesis time**: `GENESIS_TIME` should fall at 00:00 UTC.\r\n- [x] 17. **RANDAO cleanup**: Replace `randao_last_change` with a counter called `missed_slots_streak` to remove the notion of \"layer\" (and the edge case of a validator revealing twice in a RANDAO layer).\r\n- [x] 18. **Attestations per block**: Set a maximum number of attestations per block. ",
  "closed_by": {
    "login": "JustinDrake",
    "id": 731743,
    "node_id": "MDQ6VXNlcjczMTc0Mw==",
    "avatar_url": "https://avatars.githubusercontent.com/u/731743?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/JustinDrake",
    "html_url": "https://github.com/JustinDrake",
    "followers_url": "https://api.github.com/users/JustinDrake/followers",
    "following_url": "https://api.github.com/users/JustinDrake/following{/other_user}",
    "gists_url": "https://api.github.com/users/JustinDrake/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/JustinDrake/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/JustinDrake/subscriptions",
    "organizations_url": "https://api.github.com/users/JustinDrake/orgs",
    "repos_url": "https://api.github.com/users/JustinDrake/repos",
    "events_url": "https://api.github.com/users/JustinDrake/events{/privacy}",
    "received_events_url": "https://api.github.com/users/JustinDrake/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/128/reactions",
    "total_count": 6,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 6,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/128/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/439868895",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/128#issuecomment-439868895",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/128",
    "id": 439868895,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzOTg2ODg5NQ==",
    "user": {
      "login": "vbuterin",
      "id": 2230894,
      "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vbuterin",
      "html_url": "https://github.com/vbuterin",
      "followers_url": "https://api.github.com/users/vbuterin/followers",
      "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
      "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
      "organizations_url": "https://api.github.com/users/vbuterin/orgs",
      "repos_url": "https://api.github.com/users/vbuterin/repos",
      "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vbuterin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-19T11:56:08Z",
    "updated_at": "2018-11-19T11:56:08Z",
    "author_association": "MEMBER",
    "body": "Now that I think about it, there is an unintended consequence of `BALANCE_AT_RISK` being high. Namely, during a quadratic leak, you get validators getting kicked off very quickly if their balance starts to drop below 24, so the winner of a war between two minority forks would depend not on who has more stake, but on who had more topups on their deposits. This feels to me like the wrong direction to go.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/439868895/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/439873165",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/128#issuecomment-439873165",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/128",
    "id": 439873165,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzOTg3MzE2NQ==",
    "user": {
      "login": "vbuterin",
      "id": 2230894,
      "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vbuterin",
      "html_url": "https://github.com/vbuterin",
      "followers_url": "https://api.github.com/users/vbuterin/followers",
      "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
      "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
      "organizations_url": "https://api.github.com/users/vbuterin/orgs",
      "repos_url": "https://api.github.com/users/vbuterin/repos",
      "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vbuterin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-19T12:13:25Z",
    "updated_at": "2018-11-19T12:13:25Z",
    "author_association": "MEMBER",
    "body": "On the other issues:\r\n\r\n2) https://github.com/ethereum/eth2.0-specs/pull/143\r\n3) Currently, the uses of non-64-bit ints I can find are: (i) uint16 for shard IDs, which exist in many places including where they are highly repeated, though the cost of adding the 6 bytes to bring them up to 64 would be small, at most a couple of percent, (ii) uint24s for aggregate sig indices, which appear en masse and would lead to large size penalties for converting them to uint64s, (iii) uint32s in a few random areas, which I removed just now. I can see a rationale for consistently keeping all shard IDs at 2 bytes and validator indices at 4 bytes and saying that's the only exception to the uint64 rule (aside from cryptography). This would also serve a secondary function as a ghetto \"type system\" so could reduce bugs :)\r\n4) The one issue that I see is that a message could be created and includable before a fork happens, but included after a fork. So messages would need to all come with some notion of what slot number they are \"for\". Right now, we have deposits, logouts, beacon attestations, beacon proposals, shard proposals and shard attestations (there's also proof of custody seed changes and challenge responses but those are self-verifying so don't need signatures). I suppose the simplest abstraction would be for BLSVerify to include a \"domain\" field, and then we can for each message say what the domain is based on the info about the slot we can get from the message. Does that sound good?\r\n5) What was the rationale for this again? I know we wanted a global count limit (which we now have), but why limit by kind? Remember that there are in many case natural limits by kind, eg. one logout or slashing per login, one response per challenge, one seed change per validator per N days...\r\n6) Done as part of https://github.com/ethereum/eth2.0-specs/pull/145 (though in a different form; if you disagree with it feel free to comment)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/439873165/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/439880280",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/128#issuecomment-439880280",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/128",
    "id": 439880280,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzOTg4MDI4MA==",
    "user": {
      "login": "JustinDrake",
      "id": 731743,
      "node_id": "MDQ6VXNlcjczMTc0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/731743?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JustinDrake",
      "html_url": "https://github.com/JustinDrake",
      "followers_url": "https://api.github.com/users/JustinDrake/followers",
      "following_url": "https://api.github.com/users/JustinDrake/following{/other_user}",
      "gists_url": "https://api.github.com/users/JustinDrake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JustinDrake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JustinDrake/subscriptions",
      "organizations_url": "https://api.github.com/users/JustinDrake/orgs",
      "repos_url": "https://api.github.com/users/JustinDrake/repos",
      "events_url": "https://api.github.com/users/JustinDrake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JustinDrake/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-19T12:42:26Z",
    "updated_at": "2018-11-19T12:43:57Z",
    "author_association": "MEMBER",
    "body": "> the winner of a war between two minority forks would depend not on who has more stake, but on who had more topups on their deposits\r\n\r\nMy suggestion is for the \"deposit war\" to be on equal terms at 24 ETH on all forks. That is, during a quadratic leak period we do *not* automatically exit a validator if his balance goes below 24 ETH. Instead, the automatic exit happens when 24 ETH in total leakage has accrued. When the validator comes back online his first transaction may have to be a top-up bringing his balance back to 24 ETH if he wants to remain a validator.\r\n\r\n> This would also serve a secondary function as a ghetto \"type system\" so could reduce bugs :)\r\n\r\nWhat do you mean?\r\n\r\n> a message could be created and includable before a fork happens, but included after a fork\r\n\r\nCan we have a \"messaging clean slate\" after a fork, i.e. all pre-fork offchain messages are effectively invalidated and have to be rebroadcast?\r\n\r\n> What was the rationale for this again? I know we wanted a global count limit (which we now have), but why limit by kind?\r\n\r\nI'd argue we do not want a global count limit:\r\n\r\n1) It can be abused for DoS by filling blocks with maximally-expensive special objects. Per kind limits allows for smaller limits for expensive special objects.\r\n2) To mitigate the above issue the global count limit would have to be kept low, which introduces an inefficiency for bursts of cheap special objects that can safely be cleared in batches larger than the global count limit.\r\n3) In the context of a max block limit (which I would now argue against) it does not provide \"guaranteed subsidised space\" for large special objects which otherwise may be out-competed by smaller special objects.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/439880280/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/439887277",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/128#issuecomment-439887277",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/128",
    "id": 439887277,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzOTg4NzI3Nw==",
    "user": {
      "login": "vbuterin",
      "id": 2230894,
      "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vbuterin",
      "html_url": "https://github.com/vbuterin",
      "followers_url": "https://api.github.com/users/vbuterin/followers",
      "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
      "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
      "organizations_url": "https://api.github.com/users/vbuterin/orgs",
      "repos_url": "https://api.github.com/users/vbuterin/repos",
      "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vbuterin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-19T13:09:54Z",
    "updated_at": "2018-11-19T13:09:54Z",
    "author_association": "MEMBER",
    "body": "> My suggestion is for the \"deposit war\" to be on equal terms at 24 ETH on all forks. That is, during a quadratic leak period we do not automatically exit a validator if his balance goes below 24 ETH. Instead, the automatic exit happens when 24 ETH in total leakage has accrued. When the validator comes back online his first transaction may have to be a top-up bringing his balance back to 24 ETH if he wants to remain a validator.\r\n\r\nRight, but what if an attacker joins with fresh validators, after the existing validators have already lost some amount to leakage, and those fresh validators can survive longer before being ejected?\r\n\r\n> What do you mean?\r\n\r\nHaving a clear norm that \"uint16 means shard ID\" and \"uint32 means validator index\" could make it mentally easier to track what certain variables mean, and avoid accidentally using them in the wrong ways. That's all I meant?\r\n\r\n> Can we have a \"messaging clean slate\" after a fork, i.e. all pre-fork offchain messages are effectively invalidated and have to be rebroadcast?\r\n\r\nNo because that also breaks slashing.\r\n\r\n> I'd argue we do not want a global count limit:\r\n\r\nOK, seems reasonable. We can replace the global count with per-object-type counts.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/439887277/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/439949455",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/128#issuecomment-439949455",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/128",
    "id": 439949455,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzOTk0OTQ1NQ==",
    "user": {
      "login": "vbuterin",
      "id": 2230894,
      "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vbuterin",
      "html_url": "https://github.com/vbuterin",
      "followers_url": "https://api.github.com/users/vbuterin/followers",
      "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
      "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
      "organizations_url": "https://api.github.com/users/vbuterin/orgs",
      "repos_url": "https://api.github.com/users/vbuterin/repos",
      "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vbuterin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-19T16:14:56Z",
    "updated_at": "2018-11-19T16:14:56Z",
    "author_association": "MEMBER",
    "body": "Here's a PR for a per-type limit: https://github.com/ethereum/eth2.0-specs/pull/150",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/439949455/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/440100991",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/128#issuecomment-440100991",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/128",
    "id": 440100991,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MDEwMDk5MQ==",
    "user": {
      "login": "vbuterin",
      "id": 2230894,
      "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vbuterin",
      "html_url": "https://github.com/vbuterin",
      "followers_url": "https://api.github.com/users/vbuterin/followers",
      "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
      "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
      "organizations_url": "https://api.github.com/users/vbuterin/orgs",
      "repos_url": "https://api.github.com/users/vbuterin/repos",
      "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vbuterin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-20T01:17:12Z",
    "updated_at": "2018-11-20T01:17:12Z",
    "author_association": "MEMBER",
    "body": "And here's a PR for (4): #142 ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/440100991/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/440101972",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/128#issuecomment-440101972",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/128",
    "id": 440101972,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MDEwMTk3Mg==",
    "user": {
      "login": "vbuterin",
      "id": 2230894,
      "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vbuterin",
      "html_url": "https://github.com/vbuterin",
      "followers_url": "https://api.github.com/users/vbuterin/followers",
      "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
      "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
      "organizations_url": "https://api.github.com/users/vbuterin/orgs",
      "repos_url": "https://api.github.com/users/vbuterin/repos",
      "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vbuterin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-20T01:22:13Z",
    "updated_at": "2018-11-20T01:22:13Z",
    "author_association": "MEMBER",
    "body": "For (9), the proof of custody PR already treats blocks as fixed-size. The one thing that it does not do is turn proofs of custody off if validator count is too low. Though I think we should consider a different path for that: a particular validator with index `i` does not need to participate in PoCs for shard `s` if `hash(i, s) <= 2**256 * validator_count / FULLY_ENABLE_POCS_VALIDATOR_COUNT`.\r\n\r\nThoughts @JustinDrake?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/440101972/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/440187442",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/128#issuecomment-440187442",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/128",
    "id": 440187442,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MDE4NzQ0Mg==",
    "user": {
      "login": "JustinDrake",
      "id": 731743,
      "node_id": "MDQ6VXNlcjczMTc0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/731743?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JustinDrake",
      "html_url": "https://github.com/JustinDrake",
      "followers_url": "https://api.github.com/users/JustinDrake/followers",
      "following_url": "https://api.github.com/users/JustinDrake/following{/other_user}",
      "gists_url": "https://api.github.com/users/JustinDrake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JustinDrake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JustinDrake/subscriptions",
      "organizations_url": "https://api.github.com/users/JustinDrake/orgs",
      "repos_url": "https://api.github.com/users/JustinDrake/repos",
      "events_url": "https://api.github.com/users/JustinDrake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JustinDrake/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-20T08:35:00Z",
    "updated_at": "2018-11-20T09:22:47Z",
    "author_association": "MEMBER",
    "body": "> we should consider a different path for that: a particular validator with index `i` does not need to participate in PoCs for shard `s` if `hash(i, s) <= 2**256 * validator_count / FULLY_ENABLE_POCS_VALIDATOR_COUNT`.\r\n\r\nOh, interesting! A few questions:\r\n\r\n* Should it be `>=` instead of `<=`? That is, the higher the `validator_count` the greater the probability that a validator must participate in the PoC.\r\n* What do you think of replacing `hash(i, s)` with `hash(i, s, n)` where `n` is the slot number to homogenise the workload across validators?\r\n* Should we replace the righthand side (currently linear with `validator_count`) with a function that more closely matches the validator workload (e.g. number of shards a validator is assigned to)?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/440187442/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/440250370",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/128#issuecomment-440250370",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/128",
    "id": 440250370,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MDI1MDM3MA==",
    "user": {
      "login": "vbuterin",
      "id": 2230894,
      "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vbuterin",
      "html_url": "https://github.com/vbuterin",
      "followers_url": "https://api.github.com/users/vbuterin/followers",
      "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
      "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
      "organizations_url": "https://api.github.com/users/vbuterin/orgs",
      "repos_url": "https://api.github.com/users/vbuterin/repos",
      "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vbuterin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-20T12:06:13Z",
    "updated_at": "2018-11-20T12:06:13Z",
    "author_association": "MEMBER",
    "body": "> Should it be >= instead of <=? That is, the higher the validator_count the greater the probability that a validator must participate in the PoC.\r\n\r\nNo, <= gets the effect you want. If we want `hash(i, s) <= N`, then N being higher increases the chance that `hash(i, s)` will be below it.\r\n\r\n> What do you think of replacing hash(i, s) with hash(i, s, n) where n is the slot number to homogenise the workload across validators?\r\n\r\nWhat slot number? A crosslink is not just for one slot, it's for data gathered over a sequence of slots. I suppose you could do the slot number of the previous crosslink...\r\n\r\n> Should we replace the righthand side (currently linear with validator_count) with a function that more closely matches the validator workload (e.g. number of shards a validator is assigned to)?\r\n\r\nThe expected number of shards a validator is assigned to is inversely proportional to validator count, so making the growth in proobability of selection be linear is exactly what's needed to counterbalance this and make the work constant, at least up until the point where `validator_count == FULLY_ENABLE_POCS_VALIDATOR_COUNT`.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/440250370/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/441221777",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/128#issuecomment-441221777",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/128",
    "id": 441221777,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MTIyMTc3Nw==",
    "user": {
      "login": "JustinDrake",
      "id": 731743,
      "node_id": "MDQ6VXNlcjczMTc0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/731743?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JustinDrake",
      "html_url": "https://github.com/JustinDrake",
      "followers_url": "https://api.github.com/users/JustinDrake/followers",
      "following_url": "https://api.github.com/users/JustinDrake/following{/other_user}",
      "gists_url": "https://api.github.com/users/JustinDrake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JustinDrake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JustinDrake/subscriptions",
      "organizations_url": "https://api.github.com/users/JustinDrake/orgs",
      "repos_url": "https://api.github.com/users/JustinDrake/repos",
      "events_url": "https://api.github.com/users/JustinDrake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JustinDrake/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-23T11:49:36Z",
    "updated_at": "2018-11-23T11:49:36Z",
    "author_association": "MEMBER",
    "body": "> what if an attacker joins with fresh validators, after the existing validators have already lost some amount to leakage, and those fresh validators can survive longer before being ejected?\r\n\r\nI don't completely understand the attack. Also, what prevents fresh validators that survive longer from registering in the current paradigm?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/441221777/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/441430960",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/128#issuecomment-441430960",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/128",
    "id": 441430960,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MTQzMDk2MA==",
    "user": {
      "login": "hwwhww",
      "id": 9263930,
      "node_id": "MDQ6VXNlcjkyNjM5MzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9263930?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hwwhww",
      "html_url": "https://github.com/hwwhww",
      "followers_url": "https://api.github.com/users/hwwhww/followers",
      "following_url": "https://api.github.com/users/hwwhww/following{/other_user}",
      "gists_url": "https://api.github.com/users/hwwhww/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hwwhww/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hwwhww/subscriptions",
      "organizations_url": "https://api.github.com/users/hwwhww/orgs",
      "repos_url": "https://api.github.com/users/hwwhww/repos",
      "events_url": "https://api.github.com/users/hwwhww/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hwwhww/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-25T10:43:33Z",
    "updated_at": "2018-11-25T10:43:33Z",
    "author_association": "MEMBER",
    "body": "FYI to other client implementers: \"15. Use uint64 for shard number\" commit is here: https://github.com/ethereum/eth2.0-specs/commit/5ba47b476a0ded767cc8b23d263c881c06986614",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/441430960/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/442607679",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/128#issuecomment-442607679",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/128",
    "id": 442607679,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MjYwNzY3OQ==",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-28T21:16:41Z",
    "updated_at": "2018-11-28T21:16:41Z",
    "author_association": "MEMBER",
    "body": "@JustinDrake Is this ready to be closed?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/442607679/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/442616361",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/128#issuecomment-442616361",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/128",
    "id": 442616361,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MjYxNjM2MQ==",
    "user": {
      "login": "JustinDrake",
      "id": 731743,
      "node_id": "MDQ6VXNlcjczMTc0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/731743?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JustinDrake",
      "html_url": "https://github.com/JustinDrake",
      "followers_url": "https://api.github.com/users/JustinDrake/followers",
      "following_url": "https://api.github.com/users/JustinDrake/following{/other_user}",
      "gists_url": "https://api.github.com/users/JustinDrake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JustinDrake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JustinDrake/subscriptions",
      "organizations_url": "https://api.github.com/users/JustinDrake/orgs",
      "repos_url": "https://api.github.com/users/JustinDrake/repos",
      "events_url": "https://api.github.com/users/JustinDrake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JustinDrake/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-28T21:45:31Z",
    "updated_at": "2018-11-28T21:45:31Z",
    "author_association": "MEMBER",
    "body": "Yes :)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/442616361/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
