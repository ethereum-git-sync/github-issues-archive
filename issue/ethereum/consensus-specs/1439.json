{
  "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1439",
  "repository_url": "https://api.github.com/repos/ethereum/consensus-specs",
  "labels_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1439/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1439/comments",
  "events_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1439/events",
  "html_url": "https://github.com/ethereum/consensus-specs/issues/1439",
  "id": 509561571,
  "node_id": "MDU6SXNzdWU1MDk1NjE1NzE=",
  "number": 1439,
  "title": "Honest validator eth1 timestamp",
  "user": {
    "login": "paulhauner",
    "id": 6660660,
    "node_id": "MDQ6VXNlcjY2NjA2NjA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6660660?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/paulhauner",
    "html_url": "https://github.com/paulhauner",
    "followers_url": "https://api.github.com/users/paulhauner/followers",
    "following_url": "https://api.github.com/users/paulhauner/following{/other_user}",
    "gists_url": "https://api.github.com/users/paulhauner/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/paulhauner/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/paulhauner/subscriptions",
    "organizations_url": "https://api.github.com/users/paulhauner/orgs",
    "repos_url": "https://api.github.com/users/paulhauner/repos",
    "events_url": "https://api.github.com/users/paulhauner/events{/privacy}",
    "received_events_url": "https://api.github.com/users/paulhauner/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1667875443,
      "node_id": "MDU6TGFiZWwxNjY3ODc1NDQz",
      "url": "https://api.github.com/repos/ethereum/consensus-specs/labels/scope:eth1-peg",
      "name": "scope:eth1-peg",
      "color": "B19693",
      "default": false,
      "description": ""
    },
    {
      "id": 1725628406,
      "node_id": "MDU6TGFiZWwxNzI1NjI4NDA2",
      "url": "https://api.github.com/repos/ethereum/consensus-specs/labels/phase0",
      "name": "phase0",
      "color": "c2e0c6",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 6,
  "created_at": "2019-10-20T08:10:12Z",
  "updated_at": "2020-02-08T20:17:27Z",
  "closed_at": "2020-02-08T20:17:27Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "Following up on conversations with @JustinDrake and @djrtwo, in the [Eth1 Data](https://github.com/ethereum/eth2.0-specs/blob/v0.8.3/specs/validator/0_beacon-chain-validator.md#eth1-data) section of the honest validator guide there is the following:\r\n\r\n> Let get_eth1_data(distance: uint64) -> Eth1Data be the (subjective) function that returns the Eth 1.0 data at distance distance relative to the Eth 1.0 head at the start of the current Eth 1.0 voting period.\r\n\r\nI have two points regarding this text:\r\n\r\n### 1. Clarification\r\n\r\nI wanted to clarify that we're looking for something like this (excuse my shabby pseudo-python):\r\n\r\n```python\r\ndef entire_eth1_chain():\r\n  # Returns all blocks in the eth1 chain in ascending block.number order. Timestamps never decrease.\r\n\r\ndef get_eth1_data(distance):\r\n  time = state.genesis_time + eth1_voting_period_start_slot * SECONDS_PER_SLOT\r\n  last_block_number = [block.number for block in entire_eth1_chain() if block.timestamp >= time][0]\r\n  get_eth1_data_at_block_number(block_number - distance)\r\n```\r\n\r\nI think the primary thing to clarify here is that we observe eth1 block timing using timestamps, as opposed to \"looking at my wall clock when I first see a block\".\r\n\r\n### 2. Eth1 staleness\r\n\r\nA validators Eth1 node can go out of sync, perhaps it's on the wrong chain (eclipse attack) or it's _stale_ and hasn't seen a block in a long time.\r\n\r\nDetecting an eclipse attack is out-of-scope for honest validator guide IMO, but I'm interested in staleness. Particularily:\r\n\r\n1. How to detect when an eth1 node is stale.\r\n2. What to do when you're trying to produce a block on a stale node.\r\n\r\nPerhaps staleness could be defined as:\r\n\r\n```python\r\nimport time\r\n\r\nETH1_STALE_TIME_SECONDS = SLOTS_PER_ETH1_VOTING_PERIOD * 15\r\n\r\ndef eth1_chain_is_stale():\r\n  now = time.time()\r\n  entire_eth1_chain()[-1].timestamp + ETH1_STALE_TIME_SECONDS <= now\r\n```\r\n\r\nRegarding what to do, it's not so clear to me. Perhaps the block proposer should just decide they're unfit to produce and skip the slot -- this would halt the eth2 chain if the eth1 chain did go down for ~4hrs, _but_ that seems pretty unlikely and we'd probably be very socially aware if eth1 halted for even a minute. An alternative method would be to just vote junk like in #1431.",
  "closed_by": {
    "login": "JustinDrake",
    "id": 731743,
    "node_id": "MDQ6VXNlcjczMTc0Mw==",
    "avatar_url": "https://avatars.githubusercontent.com/u/731743?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/JustinDrake",
    "html_url": "https://github.com/JustinDrake",
    "followers_url": "https://api.github.com/users/JustinDrake/followers",
    "following_url": "https://api.github.com/users/JustinDrake/following{/other_user}",
    "gists_url": "https://api.github.com/users/JustinDrake/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/JustinDrake/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/JustinDrake/subscriptions",
    "organizations_url": "https://api.github.com/users/JustinDrake/orgs",
    "repos_url": "https://api.github.com/users/JustinDrake/repos",
    "events_url": "https://api.github.com/users/JustinDrake/events{/privacy}",
    "received_events_url": "https://api.github.com/users/JustinDrake/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1439/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1439/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/546880888",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1439#issuecomment-546880888",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1439",
    "id": 546880888,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0Njg4MDg4OA==",
    "user": {
      "login": "mkalinin",
      "id": 1892772,
      "node_id": "MDQ6VXNlcjE4OTI3NzI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1892772?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mkalinin",
      "html_url": "https://github.com/mkalinin",
      "followers_url": "https://api.github.com/users/mkalinin/followers",
      "following_url": "https://api.github.com/users/mkalinin/following{/other_user}",
      "gists_url": "https://api.github.com/users/mkalinin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mkalinin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mkalinin/subscriptions",
      "organizations_url": "https://api.github.com/users/mkalinin/orgs",
      "repos_url": "https://api.github.com/users/mkalinin/repos",
      "events_url": "https://api.github.com/users/mkalinin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mkalinin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-28T10:17:13Z",
    "updated_at": "2019-10-28T10:17:13Z",
    "author_association": "MEMBER",
    "body": "> I think the primary thing to clarify here is that we observe eth1 block timing using timestamps, as opposed to \"looking at my wall clock when I first see a block\".\r\n\r\nThat said, eth1 block timestamps are prone to manipulations. Computation of _eth1_data_ based on  timestamps plus careless optimisation (e.g. caching `get_eth1_data` result) can potentially lead to a vulnerability when a miner needs to hold timestamp for a little bit near to voting period border to delay validator onboarding. From that perspective tracking eth1 block numbers locally is a better approach.\r\n\r\nIMO, staleness is, also, out of scope of a validator doc. I think the best approach to coping with eth1 data failures is suggested by @vbuterin in https://github.com/ethereum/eth2.0-specs/issues/1431#issuecomment-542974071. \r\n\r\nA validator infrastructure will have to use several eth1 clients behind load balancer for diversity. It can use Infura instead or use a couple of pocket clients double checked with Infura, etc. There is a number of solutions to stabilize a source of eth1 data; it should be up to a user.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/546880888/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/547236966",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1439#issuecomment-547236966",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1439",
    "id": 547236966,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0NzIzNjk2Ng==",
    "user": {
      "login": "paulhauner",
      "id": 6660660,
      "node_id": "MDQ6VXNlcjY2NjA2NjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6660660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paulhauner",
      "html_url": "https://github.com/paulhauner",
      "followers_url": "https://api.github.com/users/paulhauner/followers",
      "following_url": "https://api.github.com/users/paulhauner/following{/other_user}",
      "gists_url": "https://api.github.com/users/paulhauner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paulhauner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paulhauner/subscriptions",
      "organizations_url": "https://api.github.com/users/paulhauner/orgs",
      "repos_url": "https://api.github.com/users/paulhauner/repos",
      "events_url": "https://api.github.com/users/paulhauner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paulhauner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-29T03:12:03Z",
    "updated_at": "2019-10-29T03:12:03Z",
    "author_association": "MEMBER",
    "body": "> From that perspective tracking eth1 block numbers locally is a better approach.\r\n\r\nIn this case we still have issues with validators delaying eth2 deposit on-boarding. I don't think there's any scenario where the eth1 miners don't have the ability to suppress/delay/re-order transactions to the deposit contract.\r\n\r\nTracking the times that block numbers arrive locally means you need to have your validator (or some specialized eth1 service) online for 8-12hrs before you can actually start to produce blocks. That combined with using #1431 means that proposers are just going to vote junk data until they have an observation time for ~8hrs worth of blocks, starting from ~4hrs ago. If you use timestamps you can start producing valid eth1 data much faster.\r\n\r\n> There is a number of solutions to stabilize a source of eth1 data; it should be up to a user.\r\n\r\nI agree that it should be \"up to a user\" to determine how they obtain/stabilize their eth1 chain. What I'm trying to do here is establish best practices for when things that are very likely to go wrong (e.g., someones HTTP connection to an eth1 node) do indeed go wrong.\r\n\r\nI'm fine if there's no definition of staleness in the honest validator guide, but I do think there should be some advice about what to do if you don't have a sufficient connection to eth1. (e.g., should you produce junk eth1 data or just produce no blocks?).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/547236966/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/547651191",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1439#issuecomment-547651191",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1439",
    "id": 547651191,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0NzY1MTE5MQ==",
    "user": {
      "login": "Mikerah",
      "id": 4249799,
      "node_id": "MDQ6VXNlcjQyNDk3OTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4249799?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Mikerah",
      "html_url": "https://github.com/Mikerah",
      "followers_url": "https://api.github.com/users/Mikerah/followers",
      "following_url": "https://api.github.com/users/Mikerah/following{/other_user}",
      "gists_url": "https://api.github.com/users/Mikerah/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Mikerah/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Mikerah/subscriptions",
      "organizations_url": "https://api.github.com/users/Mikerah/orgs",
      "repos_url": "https://api.github.com/users/Mikerah/repos",
      "events_url": "https://api.github.com/users/Mikerah/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Mikerah/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-29T22:07:57Z",
    "updated_at": "2019-10-29T22:07:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "> In this case we still have issues with validators delaying eth2 deposit on-boarding. I don't think there's any scenario where the eth1 miners don't have the ability to suppress/delay/re-order transactions to the deposit contract.\r\n\r\nI brought this up with @adlerjohn a few month ago in this [issue](https://github.com/ethereum/eth2.0-specs/issues/832). Moreover, I discussed more in depth other ways in which validator onboarding can be delayed in [this recent ethresearch post](https://ethresear.ch/t/on-the-insecurity-of-the-eth1-eth2-one-way-bridge/6372).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/547651191/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/549230853",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1439#issuecomment-549230853",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1439",
    "id": 549230853,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0OTIzMDg1Mw==",
    "user": {
      "login": "paulhauner",
      "id": 6660660,
      "node_id": "MDQ6VXNlcjY2NjA2NjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6660660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paulhauner",
      "html_url": "https://github.com/paulhauner",
      "followers_url": "https://api.github.com/users/paulhauner/followers",
      "following_url": "https://api.github.com/users/paulhauner/following{/other_user}",
      "gists_url": "https://api.github.com/users/paulhauner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paulhauner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paulhauner/subscriptions",
      "organizations_url": "https://api.github.com/users/paulhauner/orgs",
      "repos_url": "https://api.github.com/users/paulhauner/repos",
      "events_url": "https://api.github.com/users/paulhauner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paulhauner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-04T05:51:53Z",
    "updated_at": "2019-11-04T05:51:53Z",
    "author_association": "MEMBER",
    "body": "#1464 is not directly related, but similar.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/549230853/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/549244032",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1439#issuecomment-549244032",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1439",
    "id": 549244032,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0OTI0NDAzMg==",
    "user": {
      "login": "mkalinin",
      "id": 1892772,
      "node_id": "MDQ6VXNlcjE4OTI3NzI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1892772?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mkalinin",
      "html_url": "https://github.com/mkalinin",
      "followers_url": "https://api.github.com/users/mkalinin/followers",
      "following_url": "https://api.github.com/users/mkalinin/following{/other_user}",
      "gists_url": "https://api.github.com/users/mkalinin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mkalinin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mkalinin/subscriptions",
      "organizations_url": "https://api.github.com/users/mkalinin/orgs",
      "repos_url": "https://api.github.com/users/mkalinin/repos",
      "events_url": "https://api.github.com/users/mkalinin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mkalinin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-04T07:18:03Z",
    "updated_at": "2019-11-04T07:18:03Z",
    "author_association": "MEMBER",
    "body": "> I don't think there's any scenario where the eth1 miners don't have the ability to suppress/delay/re-order transactions to the deposit contract.\r\n\r\nYou're right @paulhauner. There is still a room to censor/manipulate deposit transactions and seems like avoiding timestamp manipulation is not giving us much of protection.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/549244032/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/583687084",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1439#issuecomment-583687084",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1439",
    "id": 583687084,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4MzY4NzA4NA==",
    "user": {
      "login": "paulhauner",
      "id": 6660660,
      "node_id": "MDQ6VXNlcjY2NjA2NjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6660660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paulhauner",
      "html_url": "https://github.com/paulhauner",
      "followers_url": "https://api.github.com/users/paulhauner/followers",
      "following_url": "https://api.github.com/users/paulhauner/following{/other_user}",
      "gists_url": "https://api.github.com/users/paulhauner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paulhauner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paulhauner/subscriptions",
      "organizations_url": "https://api.github.com/users/paulhauner/orgs",
      "repos_url": "https://api.github.com/users/paulhauner/repos",
      "events_url": "https://api.github.com/users/paulhauner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paulhauner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-02-08T01:46:43Z",
    "updated_at": "2020-02-08T01:46:43Z",
    "author_association": "MEMBER",
    "body": "This can be closed due to the new eth1 voting scheme :)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/583687084/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
