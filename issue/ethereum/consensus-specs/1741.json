{
  "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1741",
  "repository_url": "https://api.github.com/repos/ethereum/consensus-specs",
  "labels_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1741/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1741/comments",
  "events_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1741/events",
  "html_url": "https://github.com/ethereum/consensus-specs/issues/1741",
  "id": 604339425,
  "node_id": "MDU6SXNzdWU2MDQzMzk0MjU=",
  "number": 1741,
  "title": "Trustless validator pools during phases 0 & 1",
  "user": {
    "login": "moles1",
    "id": 2696205,
    "node_id": "MDQ6VXNlcjI2OTYyMDU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2696205?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/moles1",
    "html_url": "https://github.com/moles1",
    "followers_url": "https://api.github.com/users/moles1/followers",
    "following_url": "https://api.github.com/users/moles1/following{/other_user}",
    "gists_url": "https://api.github.com/users/moles1/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/moles1/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/moles1/subscriptions",
    "organizations_url": "https://api.github.com/users/moles1/orgs",
    "repos_url": "https://api.github.com/users/moles1/repos",
    "events_url": "https://api.github.com/users/moles1/events{/privacy}",
    "received_events_url": "https://api.github.com/users/moles1/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2020-04-21T23:06:59Z",
  "updated_at": "2021-07-05T15:05:17Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "After the phase 2 rollout, validator deposits can be made with withdrawal credentials representing the address of a smart contract on a shard.\r\n\r\nHowever, during phases 0 & 1, the only option for withdrawal credentials is the pubkey of a BLS keypair (or an aggregate key) submitted by the depositor. This poses a significant problem for trustless validator pools wanting to operate during this time:\r\n\r\n- Assume there is a trustless staking pool consisting of 8 participants, each contributing 4 ETH. Each participant generates a BLS keypair, and the aggregate of these keys is submitted as the withdrawal credentials for the validator.\r\n- If one participant loses their private key, the pool is prevented from withdrawing. Or, a participant can extort the rest of the pool for up to 4 ETH each, refusing to sign a withdrawal message until the fee is paid.\r\n- Using a threshold BLS signature mitigates this problem, but has its own issues. e.g. if a threshold of 6/8 is chosen, then a single actor can use 24 of their own ETH to form an incomplete pool which they have complete control of. Alternatively, 6 of 8 actual participants could form a cartel and take control of a pool.\r\n\r\nThis makes it difficult for decentralized staking pools to operate during phases 0 & 1, potentially moving the ecosystem towards centralized / custodial platforms. There do not appear to be viable solutions to this problem outside of the protocol; some possible in-protocol solutions are outlined below:",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1741/reactions",
    "total_count": 4,
    "+1": 4,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1741/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/617457708",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1741#issuecomment-617457708",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1741",
    "id": 617457708,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxNzQ1NzcwOA==",
    "user": {
      "login": "moles1",
      "id": 2696205,
      "node_id": "MDQ6VXNlcjI2OTYyMDU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2696205?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/moles1",
      "html_url": "https://github.com/moles1",
      "followers_url": "https://api.github.com/users/moles1/followers",
      "following_url": "https://api.github.com/users/moles1/following{/other_user}",
      "gists_url": "https://api.github.com/users/moles1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/moles1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/moles1/subscriptions",
      "organizations_url": "https://api.github.com/users/moles1/orgs",
      "repos_url": "https://api.github.com/users/moles1/repos",
      "events_url": "https://api.github.com/users/moles1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/moles1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-04-21T23:07:19Z",
    "updated_at": "2020-04-21T23:07:19Z",
    "author_association": "NONE",
    "body": "One possible solution would be to record shares in a validator on the beacon chain itself. A naive implementation might look like the following:\r\n\r\nSet `MAX_VALIDATOR_SHARES` to an arbitrary constant, e.g. `32`\r\n\r\nUpdate [validator container](https://github.com/ethereum/eth2.0-specs/blob/dev/specs/phase0/beacon-chain.md#validator) to:\r\n```\r\nclass Validator(Container):\r\n    pubkey: BLSPubkey\r\n    withdrawal_credentials: Vector[Bytes32, MAX_VALIDATOR_SHARES]  # Commitments to pubkeys for withdrawals\r\n    withdrawal_shares: Vector[Gwei, MAX_VALIDATOR_SHARES]  # Relative shares for each set of withdrawal credentials, by index\r\n    effective_balance: Gwei  # Balance at stake\r\n    slashed: boolean\r\n    # Status epochs\r\n    activation_eligibility_epoch: Epoch  # When criteria for activation were met\r\n    activation_epoch: Epoch\r\n    exit_epoch: Epoch\r\n    withdrawable_epoch: Epoch  # When validator can withdraw funds\r\n```\r\n\r\nIn the [process_deposit method](https://github.com/ethereum/eth2.0-specs/blob/dev/specs/phase0/beacon-chain.md#deposits), if `deposit.data.pubkey` is found in `validator_pubkeys` (and before `increase_balance` is called):\r\n- Set `validator` to `state.validators[index]`\r\n- Set `validator_balance` to `state.balances[index]`\r\n- Set `total_withdrawal_shares` to the sum of `validator.withdrawal_shares`\r\n- If `total_withdrawal_shares != validator_balance`, for each `validator.withdrawal_shares`, update `share` to `share * validator_balance / total_withdrawal_shares`\r\n- Check for `deposit.data.withdrawal_credentials` in `validator.withdrawal_credentials`:\r\n    - If found, then add `deposit.data.amount` to `validator.withdrawal_shares` at matching index;\r\n    - If not found, and `len(validator.withdrawal_credentials) < MAX_VALIDATOR_SHARES`, then append `deposit.data.withdrawal_credentials` to `validator.withdrawal_credentials` and append `deposit.data.amount` to `validator.withdrawal_shares`\r\n\r\nDuring operations where validator balance is transferred (such as transfers and withdrawals):\r\n- Verify the signed message against each set of withdrawal credentials in `validator.withdrawal_credentials` and find the matching share `index`\r\n- Verify that `validator.withdrawal_shares[index] > 0`\r\n- Set `transfer_amount` to `validator.withdrawal_shares[index] * validator_balance / total_withdrawal_shares` (as described above)\r\n- Perform balance transfer using `transfer_amount`\r\n- Set `validator.withdrawal_shares[index]` to `0`\r\n- Run `decrease_balance`",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/617457708/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/617457769",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1741#issuecomment-617457769",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1741",
    "id": 617457769,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxNzQ1Nzc2OQ==",
    "user": {
      "login": "moles1",
      "id": 2696205,
      "node_id": "MDQ6VXNlcjI2OTYyMDU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2696205?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/moles1",
      "html_url": "https://github.com/moles1",
      "followers_url": "https://api.github.com/users/moles1/followers",
      "following_url": "https://api.github.com/users/moles1/following{/other_user}",
      "gists_url": "https://api.github.com/users/moles1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/moles1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/moles1/subscriptions",
      "organizations_url": "https://api.github.com/users/moles1/orgs",
      "repos_url": "https://api.github.com/users/moles1/repos",
      "events_url": "https://api.github.com/users/moles1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/moles1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-04-21T23:07:31Z",
    "updated_at": "2020-04-21T23:07:31Z",
    "author_association": "NONE",
    "body": "Another possible solution involves adding an alternate withdrawal mechanism to the spec, where the submitted withdrawal credentials represent an eth 1.0 address, instead of a BLS pubkey (/ eth 2.0 address).\r\n\r\nDuring the construction of [validator deposit data](https://github.com/ethereum/eth2.0-specs/blob/dev/specs/phase0/validator.md#becoming-a-validator):\r\n\r\n- Set `ETH1_WITHDRAWAL_PREFIX` to an arbitrary constant, e.g. `Bytes1('0x01')`\r\n- Set `withdrawal_credentials[:1]` to `ETH1_WITHDRAWAL_PREFIX`\r\n- Set `withdrawal_credentials[1:21]` to the eth 1.0 withdrawal address\r\n- Set `withdrawal_credentials[21:]` to null bytes\r\n\r\nThis solution requires no changes to the spec for phases 0 & 1, but obviously does require a strong commitment to an eth1 + eth2 merge e.g. as described in [this ethresearch post](https://ethresear.ch/t/eth1-eth2-client-relationship/7248). It also assumes that there will be a guaranteed mechanism whereby the beacon chain can process withdrawal messages from an eth1 address.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/617457769/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/617458381",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1741#issuecomment-617458381",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1741",
    "id": 617458381,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxNzQ1ODM4MQ==",
    "user": {
      "login": "moles1",
      "id": 2696205,
      "node_id": "MDQ6VXNlcjI2OTYyMDU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2696205?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/moles1",
      "html_url": "https://github.com/moles1",
      "followers_url": "https://api.github.com/users/moles1/followers",
      "following_url": "https://api.github.com/users/moles1/following{/other_user}",
      "gists_url": "https://api.github.com/users/moles1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/moles1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/moles1/subscriptions",
      "organizations_url": "https://api.github.com/users/moles1/orgs",
      "repos_url": "https://api.github.com/users/moles1/repos",
      "events_url": "https://api.github.com/users/moles1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/moles1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-04-21T23:09:49Z",
    "updated_at": "2020-04-21T23:09:49Z",
    "author_association": "NONE",
    "body": "(Thanks to @dankrad for participating in initial discussions around this issue and helping to explore options!)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/617458381/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
