{
  "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2174",
  "repository_url": "https://api.github.com/repos/ethereum/consensus-specs",
  "labels_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2174/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2174/comments",
  "events_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2174/events",
  "html_url": "https://github.com/ethereum/consensus-specs/issues/2174",
  "id": 779257864,
  "node_id": "MDU6SXNzdWU3NzkyNTc4NjQ=",
  "number": 2174,
  "title": "Rethink FFG target block",
  "user": {
    "login": "dankrad",
    "id": 6130607,
    "node_id": "MDQ6VXNlcjYxMzA2MDc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6130607?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/dankrad",
    "html_url": "https://github.com/dankrad",
    "followers_url": "https://api.github.com/users/dankrad/followers",
    "following_url": "https://api.github.com/users/dankrad/following{/other_user}",
    "gists_url": "https://api.github.com/users/dankrad/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/dankrad/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/dankrad/subscriptions",
    "organizations_url": "https://api.github.com/users/dankrad/orgs",
    "repos_url": "https://api.github.com/users/dankrad/repos",
    "events_url": "https://api.github.com/users/dankrad/events{/privacy}",
    "received_events_url": "https://api.github.com/users/dankrad/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1324776822,
      "node_id": "MDU6TGFiZWwxMzI0Nzc2ODIy",
      "url": "https://api.github.com/repos/ethereum/consensus-specs/labels/scope:fork-choice",
      "name": "scope:fork-choice",
      "color": "81C7D4",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2021-01-05T16:30:38Z",
  "updated_at": "2023-12-26T23:48:32Z",
  "closed_at": null,
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "Currently, the target of the FFG vote is the first block of an epoch. This means when an epoch is justified [finalized], it is actually the first block of that epoch that is justified [finalized]. This looks and feels like an off by one error: Since we are always talking about \"epoch\" being finalized, it should be the last block of an epoch (the previous one) that validators are voting for, thus justifying [finalizing] all blocks in that epoch.\r\n\r\nAdvantages:\r\n * Fixing an off-by-one error that has already plagued us, and probably leads to services like beaconcha.in displaying participation statistics incorrectly\r\n * Validators would have `4/3` slots time to get the target right (in the first slot of an epoch) rather than `1/3`. Since we are still seeing ~3% drops, this could make a big difference, especially when the network is unstable and high latency.\r\n\r\nDisadvantages:\r\n * ?\r\n * Other than needing a hard fork, I currently can't see any. I would really be interested if anyone can find the old discussion where this was decided and why, from the current perspective it seems to just be a bug",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2174/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2174/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/755772352",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2174#issuecomment-755772352",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2174",
    "id": 755772352,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc1NTc3MjM1Mg==",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-01-06T23:13:53Z",
    "updated_at": "2021-01-06T23:13:53Z",
    "author_association": "MEMBER",
    "body": "I personally wouldn't touch this. It is a bit semantically strange \"finalize epoch N\" doesn't immediately have a clear meaning, but I don't think it's terribly difficult to communicate/understand.\r\n\r\nI don't actually remember the precise reason this was chosen. We had much debate around epoch transitions, where they happened and what was being voted on long ago. I'll see if I can do some digging to find/remember the reasoning.\r\n\r\nOne obvious (but not that important) reason is that in the genesis epoch, there is not \"last block\" in the previous epoch to vote on, but I don't think this is why the decision was made\r\n\r\nAnother likely historic reason was to just finalize as much as possible (i.e. the extra block).\r\n\r\n------------\r\n\r\nwith respect to the 3% drops on epoch boundary, I expect this to be addressed in a security patch to the fork choice pretty soon. A vote for emptiness at the epoch boundary would be respected and thus that 3% be correct.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/755772352/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/799020133",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2174#issuecomment-799020133",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2174",
    "id": 799020133,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc5OTAyMDEzMw==",
    "user": {
      "login": "paulhauner",
      "id": 6660660,
      "node_id": "MDQ6VXNlcjY2NjA2NjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6660660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paulhauner",
      "html_url": "https://github.com/paulhauner",
      "followers_url": "https://api.github.com/users/paulhauner/followers",
      "following_url": "https://api.github.com/users/paulhauner/following{/other_user}",
      "gists_url": "https://api.github.com/users/paulhauner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paulhauner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paulhauner/subscriptions",
      "organizations_url": "https://api.github.com/users/paulhauner/orgs",
      "repos_url": "https://api.github.com/users/paulhauner/repos",
      "events_url": "https://api.github.com/users/paulhauner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paulhauner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-15T00:54:10Z",
    "updated_at": "2021-03-15T00:55:01Z",
    "author_association": "MEMBER",
    "body": "> Since we are always talking about \"epoch\" being finalized, it should be the last block of an epoch (the previous one) that validators are voting for, thus justifying [finalizing] all blocks in that epoch.\r\n\r\nIt's not necessarily a blocker, but something to consider is client optimizations. AFAIK, most clients use some scheme whereby states on epoch boundaries are more readily-available than \"in between\" states.\r\n\r\nIf you get an attestation and you need to load a state to obtain the shuffling, then reading the `data.target.root` state is generally more efficient than the `data.beacon_block` state and you'll obtain the same attester shuffling from that block.\r\n\r\nOnce again, I'm not describing a blocker here. If we move forward with this it would be worth clients/block-explorers/etc doing some introspection to where they're making assumptions around the target root. (I'm not even sure LH uses that above-mentioned optimization anymore, it was just an example).\r\n\r\n*Note: I just realised I assumed that `AttestationData` would have different semantics if this were implemented. That seems like the case but I'm not certain that's the intention.*\r\n\r\n> Since we are still seeing ~3% drops, this could make a big difference, especially when the network is unstable and high latency.\r\n\r\nWhen it comes to stable/healthy chains (like mainnet) I think these 3% drops can/should be optimized out by clients. I've been doing a lot of analysis on LH over the past weeks/month to figure out why they're happening. There's definitely some cases in LH where we were performing sub-optimally (e.g., https://github.com/sigp/lighthouse/pull/2174, https://github.com/sigp/lighthouse/pull/2243, https://github.com/sigp/lighthouse/pull/2155).\r\n\r\nI understand it would be better if the chain could perform optimally in the case where block production is delayed (this would help in adversarial situations). However, the point I'm trying to make is that if we're trying to resolve 3% drops on mainnet then I think we should first exhaust investigations into implementation inefficiency before we start making protocol changes which carry additional risk.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/799020133/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
