{
  "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1200",
  "repository_url": "https://api.github.com/repos/ethereum/consensus-specs",
  "labels_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1200/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1200/comments",
  "events_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1200/events",
  "html_url": "https://github.com/ethereum/consensus-specs/issues/1200",
  "id": 459250970,
  "node_id": "MDU6SXNzdWU0NTkyNTA5NzA=",
  "number": 1200,
  "title": "The spec-test coverage hunt",
  "user": {
    "login": "protolambda",
    "id": 19571989,
    "node_id": "MDQ6VXNlcjE5NTcxOTg5",
    "avatar_url": "https://avatars.githubusercontent.com/u/19571989?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/protolambda",
    "html_url": "https://github.com/protolambda",
    "followers_url": "https://api.github.com/users/protolambda/followers",
    "following_url": "https://api.github.com/users/protolambda/following{/other_user}",
    "gists_url": "https://api.github.com/users/protolambda/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/protolambda/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/protolambda/subscriptions",
    "organizations_url": "https://api.github.com/users/protolambda/orgs",
    "repos_url": "https://api.github.com/users/protolambda/repos",
    "events_url": "https://api.github.com/users/protolambda/events{/privacy}",
    "received_events_url": "https://api.github.com/users/protolambda/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1295439957,
      "node_id": "MDU6TGFiZWwxMjk1NDM5OTU3",
      "url": "https://api.github.com/repos/ethereum/consensus-specs/labels/scope:CI/tests/pyspec",
      "name": "scope:CI/tests/pyspec",
      "color": "BDC0BA",
      "default": false,
      "description": ""
    },
    {
      "id": 1407853194,
      "node_id": "MDU6TGFiZWwxNDA3ODUzMTk0",
      "url": "https://api.github.com/repos/ethereum/consensus-specs/labels/milestone:June%2030%20freeze%20%F0%9F%A5%B6",
      "name": "milestone:June 30 freeze ðŸ¥¶",
      "color": "729acc",
      "default": false,
      "description": "Phase 0 spec freeze for long-lived cross-client testnet"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 6,
  "created_at": "2019-06-21T15:22:13Z",
  "updated_at": "2019-06-29T21:15:01Z",
  "closed_at": "2019-06-29T21:15:01Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "The spec tests currently get clients to about ~72% coverage of their (optimized) spec code. I'm taking ZRNT (the Go-spec) as reference here, which is tested based on the same yaml spec tests.\r\n\r\nNote that the spec itself has much more coverage (over 90%), since we have finalization tests which are not part of the spec-test-vectors (maybe later, or alternative more direct tests).\r\n\r\nFor full spec-test coverage, we need to cover the following remaining cases:\r\n\r\n~~exceed max-operations:~~\r\n  - ~~attestations~~\r\n  - ~~attester slashings~~\r\n  - ~~deposits~~\r\n  - ~~proposer slashings~~\r\n  - ~~transfers~~\r\n  - ~~voluntary exits~~\r\n\r\n*Need for exceeding-max-operations tests is abstracted away with #1180, where the limit is naturally imposed by the SSZ data type. Yay. Just need SSZ spec-tests for limit-enforcement later.*\r\n\r\nattestations:\r\n- [x] BAD: out of range shard in crosslink\r\n- [x] BAD: target old epoch\r\n- [x] BAD: target epoch in future\r\n- [x] BAD: parent crosslink End-epoch + MAX_EPOCHS_PER_CROSSLINK does not equal crosslink end-epoch when parent epoch is lower than target\r\n\r\nattester slashing\r\n- [x] BAD: test invalid attestation, e.g. unsorted (nr 1)\r\n- [x] BAD: test invalid attestation, e.g. unsorted (nr 2)\r\n\r\ndeposits\r\n- [x] BAD: not expected count of deposits (eth 1)\r\n- [x] OK: for a normal non-maxed out deposit, it may get an effective balance lower than the normal balance, due to `EFFECTIVE_BALANCE_INCREMENT`.\r\n- [x] OK: deposit large amount, over effective balance, get limited at just effective balance.\r\n\r\neth1 data\r\n- [x] OK: majority vote, update latest eth1 data\r\n- [x] OK: no majority vote (but close), do not update latest eth1 data\r\n\r\ntransfers\r\n- ~~BAD: duplicate transfer~~ TODO; need config change for this.\r\n- [x] BAD: sender does not exist\r\n- [x] BAD: recipient does not exist\r\n- [x] BAD: invalid transfer pubkey (old, line was missed in go spec because of other old transfer reason)\r\n- [x] BAD: results in dust on sender address\r\n- [x] Super BAD: duplicate balance by sending all in both fee and amount\r\n  - [x] x 9: cover different combinations\r\n\r\ndeltas\r\n- ~~matching penalties/rewards~~\r\n  - ~~matching head: penalty, reward, none, both~~\r\n  - ~~matching target: penalty, reward, none, both~~\r\n  - ~~matching source: penalty, reward, none, both~~\r\n- ~~proposer inclusion delay~~\r\n- ~~inactivity penalty~~\r\n- ~~crosslink committee:~~\r\n  - ~~penalty if not in committee, reward if in committee~~\r\n  - ~~no crosslink, empty participation, everyone penalty~~\r\nPostponed to post-freeze. Due to the nesting of functions rewards computation, and multiple functions affecting the same state (balances), it's too time consuming to test right before freeze. But also not breaking or strictly limited by deadline, so we prioritize test-vector polishing and features (recent genesis rework, among others), for the best spec-freeze :)\r\n\r\nepoch final updates:\r\n- [x] OK: validator does well, and hits the MAX_EFFECTIVE_BALANCE ceiling through hysteresis\r\n  - and a lot more hysteresis / rounding edge cases\r\n- [x] OK: eth1 votes reset, at end of voting period\r\n- [x] OK: eth1 votes no reset, when not at end of voting period\r\n\r\njustification/finalization\r\n- [x] OK(x 4) participation, actual attestations. (credits to @djrtwo for bugfixes on initial testing setup, and @CarlBeek for fixing the remaining tests). Edit: fixed it to also work on mainnet config.\r\n  - [x] finalize on 234, yes/no case\r\n  - [x] finalize on 23, yes/no case\r\n  - [x] finalize on 123, yes/no case\r\n  - [x] finalize on 12, yes/no case\r\n- ~~`sum(balances)` is enough to justify but `sum(effective_balances)` is not. Ensure no justification.~~ (picked up by @CarlBeek) Edit: postponed, difficult setup.\r\n\r\nregistry updates:\r\n- [x] validator is activated (`ActivationEligibilityEpoch == FAR_FUTURE_EPOCH && v.EffectiveBalance >= MAX_EFFECTIVE_BALANCE`)\r\n- [x] activation queue sorting\r\n- [x] hit activation churn limit\r\n- [x] check delayed activation of epochs (`get_delayed_activation_exit_epoch`) Edit; `test_activation` already covers it.\r\n\r\nprocess slashings:\r\n- [x] relative to total slashed balance, and with non-uniform balances start\r\n- [x] maximum slashing\r\n- [x] minimum slashing\r\n\r\ngenesis:\r\n- [ ] test genesis state creation (picked up by @hwwhww)\r\n\r\nindexed attestations:\r\n- [x] BAD: too many (bit0, bit1, or sum)\r\n- [x] BAD: not sorted (bit1 is for later phase 1 testing)\r\n- [x] BAD: intersecting bit0 and bit1 indices\r\n- [x] BAD: invalid indices (bit0, bit1)\r\n\r\nfork:\r\n- ~~state has fork set, and fork slot has past. sig with new fork~~ Irregular state transition. To be tested with future fork work.\r\n\r\nblock processing:\r\n- [x] BAD: block with old slot on state\r\n- [x] BAD: block with invalid state root\r\n\r\n- [x] resolve `test_empty_epoch_transition_not_finalizing`\r\n- [x] close PR #1181, with updates from this PR + current state of ssz-list-limit checking making the 0 max hard to deal with, better for future point when transfers get enabled in a new configuration.",
  "closed_by": {
    "login": "JustinDrake",
    "id": 731743,
    "node_id": "MDQ6VXNlcjczMTc0Mw==",
    "avatar_url": "https://avatars.githubusercontent.com/u/731743?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/JustinDrake",
    "html_url": "https://github.com/JustinDrake",
    "followers_url": "https://api.github.com/users/JustinDrake/followers",
    "following_url": "https://api.github.com/users/JustinDrake/following{/other_user}",
    "gists_url": "https://api.github.com/users/JustinDrake/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/JustinDrake/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/JustinDrake/subscriptions",
    "organizations_url": "https://api.github.com/users/JustinDrake/orgs",
    "repos_url": "https://api.github.com/users/JustinDrake/repos",
    "events_url": "https://api.github.com/users/JustinDrake/events{/privacy}",
    "received_events_url": "https://api.github.com/users/JustinDrake/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1200/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1200/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/504530908",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1200#issuecomment-504530908",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1200",
    "id": 504530908,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwNDUzMDkwOA==",
    "user": {
      "login": "hwwhww",
      "id": 9263930,
      "node_id": "MDQ6VXNlcjkyNjM5MzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9263930?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hwwhww",
      "html_url": "https://github.com/hwwhww",
      "followers_url": "https://api.github.com/users/hwwhww/followers",
      "following_url": "https://api.github.com/users/hwwhww/following{/other_user}",
      "gists_url": "https://api.github.com/users/hwwhww/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hwwhww/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hwwhww/subscriptions",
      "organizations_url": "https://api.github.com/users/hwwhww/orgs",
      "repos_url": "https://api.github.com/users/hwwhww/repos",
      "events_url": "https://api.github.com/users/hwwhww/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hwwhww/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-06-21T18:41:44Z",
    "updated_at": "2019-06-21T18:41:44Z",
    "author_association": "MEMBER",
    "body": "I can take the genesis task.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/504530908/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/504532654",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1200#issuecomment-504532654",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1200",
    "id": 504532654,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwNDUzMjY1NA==",
    "user": {
      "login": "protolambda",
      "id": 19571989,
      "node_id": "MDQ6VXNlcjE5NTcxOTg5",
      "avatar_url": "https://avatars.githubusercontent.com/u/19571989?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/protolambda",
      "html_url": "https://github.com/protolambda",
      "followers_url": "https://api.github.com/users/protolambda/followers",
      "following_url": "https://api.github.com/users/protolambda/following{/other_user}",
      "gists_url": "https://api.github.com/users/protolambda/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/protolambda/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/protolambda/subscriptions",
      "organizations_url": "https://api.github.com/users/protolambda/orgs",
      "repos_url": "https://api.github.com/users/protolambda/repos",
      "events_url": "https://api.github.com/users/protolambda/events{/privacy}",
      "received_events_url": "https://api.github.com/users/protolambda/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-06-21T18:47:04Z",
    "updated_at": "2019-06-21T18:47:04Z",
    "author_association": "MEMBER",
    "body": "@hwwhww Great! Steps to implement:\r\n- use the bare spec-test decorator, the one that doesn't provide a pre-state (but we do want the phase0/phase1 spec to be passed). See context + util in test root folder.\r\n- yield a list of deposits\r\n- yield genesis time\r\n- compute deposits root\r\n- yield eth1 data, with root in it\r\n- construct genesis state using spec\r\n- yield genesis state\r\n\r\nAnd then I'll write a small generator for it (really just a main file + a few calls + dependency to base-generator and eth2spec). And we can output it as test-vectors for clients, in addition to testing the spec :)\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/504532654/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/504533529",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1200#issuecomment-504533529",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1200",
    "id": 504533529,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwNDUzMzUyOQ==",
    "user": {
      "login": "protolambda",
      "id": 19571989,
      "node_id": "MDQ6VXNlcjE5NTcxOTg5",
      "avatar_url": "https://avatars.githubusercontent.com/u/19571989?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/protolambda",
      "html_url": "https://github.com/protolambda",
      "followers_url": "https://api.github.com/users/protolambda/followers",
      "following_url": "https://api.github.com/users/protolambda/following{/other_user}",
      "gists_url": "https://api.github.com/users/protolambda/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/protolambda/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/protolambda/subscriptions",
      "organizations_url": "https://api.github.com/users/protolambda/orgs",
      "repos_url": "https://api.github.com/users/protolambda/repos",
      "events_url": "https://api.github.com/users/protolambda/events{/privacy}",
      "received_events_url": "https://api.github.com/users/protolambda/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-06-21T18:49:31Z",
    "updated_at": "2019-06-21T18:49:31Z",
    "author_association": "MEMBER",
    "body": "I will start now, and go from top to bottom. If anyone wants to contribute, you are welcome, but let's avoid double work: go over the list in reverse. Or just share what you are working on, I'll monitor this issue.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/504533529/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/504558766",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1200#issuecomment-504558766",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1200",
    "id": 504558766,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwNDU1ODc2Ng==",
    "user": {
      "login": "hwwhww",
      "id": 9263930,
      "node_id": "MDQ6VXNlcjkyNjM5MzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9263930?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hwwhww",
      "html_url": "https://github.com/hwwhww",
      "followers_url": "https://api.github.com/users/hwwhww/followers",
      "following_url": "https://api.github.com/users/hwwhww/following{/other_user}",
      "gists_url": "https://api.github.com/users/hwwhww/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hwwhww/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hwwhww/subscriptions",
      "organizations_url": "https://api.github.com/users/hwwhww/orgs",
      "repos_url": "https://api.github.com/users/hwwhww/repos",
      "events_url": "https://api.github.com/users/hwwhww/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hwwhww/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-06-21T20:13:59Z",
    "updated_at": "2019-06-21T20:13:59Z",
    "author_association": "MEMBER",
    "body": "@protolambda Thanks for the guide! I opened a draft PR: #1202\r\nTwo questions:\r\n1. \"we do want the phase0/phase1 spec to be passed\" - I think the genesis test case only needs to be tested on phase 0?\r\n2. Somehow I can't just remove `@spec_state_test` and the given pre-state. Do you mean there's another \"bare spec-test decorator\" or I need to write one?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/504558766/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/504561075",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1200#issuecomment-504561075",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1200",
    "id": 504561075,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwNDU2MTA3NQ==",
    "user": {
      "login": "protolambda",
      "id": 19571989,
      "node_id": "MDQ6VXNlcjE5NTcxOTg5",
      "avatar_url": "https://avatars.githubusercontent.com/u/19571989?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/protolambda",
      "html_url": "https://github.com/protolambda",
      "followers_url": "https://api.github.com/users/protolambda/followers",
      "following_url": "https://api.github.com/users/protolambda/following{/other_user}",
      "gists_url": "https://api.github.com/users/protolambda/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/protolambda/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/protolambda/subscriptions",
      "organizations_url": "https://api.github.com/users/protolambda/orgs",
      "repos_url": "https://api.github.com/users/protolambda/repos",
      "events_url": "https://api.github.com/users/protolambda/events{/privacy}",
      "received_events_url": "https://api.github.com/users/protolambda/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-06-21T20:22:40Z",
    "updated_at": "2019-06-21T20:22:40Z",
    "author_association": "MEMBER",
    "body": "@hwwhww \r\n\r\n1. Unsure, we may want to start test-chains from later forks. Just phase-0 is ok for now\r\n2. See context.py:\r\n```python\r\n# shorthand for decorating @with_state @spectest()\r\ndef spec_state_test(fn):\r\n    return with_state(bls_switch(spectest()(fn)))\r\n```\r\nWe just need `bls_switch` and `spectest()` here to be applied, no pre-state from `with_state`.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/504561075/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/506987634",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1200#issuecomment-506987634",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1200",
    "id": 506987634,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwNjk4NzYzNA==",
    "user": {
      "login": "JustinDrake",
      "id": 731743,
      "node_id": "MDQ6VXNlcjczMTc0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/731743?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JustinDrake",
      "html_url": "https://github.com/JustinDrake",
      "followers_url": "https://api.github.com/users/JustinDrake/followers",
      "following_url": "https://api.github.com/users/JustinDrake/following{/other_user}",
      "gists_url": "https://api.github.com/users/JustinDrake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JustinDrake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JustinDrake/subscriptions",
      "organizations_url": "https://api.github.com/users/JustinDrake/orgs",
      "repos_url": "https://api.github.com/users/JustinDrake/repos",
      "events_url": "https://api.github.com/users/JustinDrake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JustinDrake/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-06-29T21:15:01Z",
    "updated_at": "2019-06-29T21:15:01Z",
    "author_association": "MEMBER",
    "body": "Addressed in #1206 ðŸŽ‰, genesis tests on their way in a different PR :)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/506987634/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
