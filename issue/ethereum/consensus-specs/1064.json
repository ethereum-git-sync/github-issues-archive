{
  "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1064",
  "repository_url": "https://api.github.com/repos/ethereum/consensus-specs",
  "labels_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1064/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1064/comments",
  "events_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1064/events",
  "html_url": "https://github.com/ethereum/consensus-specs/issues/1064",
  "id": 441498181,
  "node_id": "MDU6SXNzdWU0NDE0OTgxODE=",
  "number": 1064,
  "title": "SSZ rework - static type hinting, minimal impl. - with POC",
  "user": {
    "login": "protolambda",
    "id": 19571989,
    "node_id": "MDQ6VXNlcjE5NTcxOTg5",
    "avatar_url": "https://avatars.githubusercontent.com/u/19571989?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/protolambda",
    "html_url": "https://github.com/protolambda",
    "followers_url": "https://api.github.com/users/protolambda/followers",
    "following_url": "https://api.github.com/users/protolambda/following{/other_user}",
    "gists_url": "https://api.github.com/users/protolambda/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/protolambda/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/protolambda/subscriptions",
    "organizations_url": "https://api.github.com/users/protolambda/orgs",
    "repos_url": "https://api.github.com/users/protolambda/repos",
    "events_url": "https://api.github.com/users/protolambda/events{/privacy}",
    "received_events_url": "https://api.github.com/users/protolambda/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1170174610,
      "node_id": "MDU6TGFiZWwxMTcwMTc0NjEw",
      "url": "https://api.github.com/repos/ethereum/consensus-specs/labels/scope:SSZ",
      "name": "scope:SSZ",
      "color": "77428D",
      "default": false,
      "description": "Simple Serialize"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": {
    "login": "JustinDrake",
    "id": 731743,
    "node_id": "MDQ6VXNlcjczMTc0Mw==",
    "avatar_url": "https://avatars.githubusercontent.com/u/731743?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/JustinDrake",
    "html_url": "https://github.com/JustinDrake",
    "followers_url": "https://api.github.com/users/JustinDrake/followers",
    "following_url": "https://api.github.com/users/JustinDrake/following{/other_user}",
    "gists_url": "https://api.github.com/users/JustinDrake/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/JustinDrake/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/JustinDrake/subscriptions",
    "organizations_url": "https://api.github.com/users/JustinDrake/orgs",
    "repos_url": "https://api.github.com/users/JustinDrake/repos",
    "events_url": "https://api.github.com/users/JustinDrake/events{/privacy}",
    "received_events_url": "https://api.github.com/users/JustinDrake/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "JustinDrake",
      "id": 731743,
      "node_id": "MDQ6VXNlcjczMTc0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/731743?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JustinDrake",
      "html_url": "https://github.com/JustinDrake",
      "followers_url": "https://api.github.com/users/JustinDrake/followers",
      "following_url": "https://api.github.com/users/JustinDrake/following{/other_user}",
      "gists_url": "https://api.github.com/users/JustinDrake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JustinDrake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JustinDrake/subscriptions",
      "organizations_url": "https://api.github.com/users/JustinDrake/orgs",
      "repos_url": "https://api.github.com/users/JustinDrake/repos",
      "events_url": "https://api.github.com/users/JustinDrake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JustinDrake/received_events",
      "type": "User",
      "site_admin": false
    },
    {
      "login": "protolambda",
      "id": 19571989,
      "node_id": "MDQ6VXNlcjE5NTcxOTg5",
      "avatar_url": "https://avatars.githubusercontent.com/u/19571989?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/protolambda",
      "html_url": "https://github.com/protolambda",
      "followers_url": "https://api.github.com/users/protolambda/followers",
      "following_url": "https://api.github.com/users/protolambda/following{/other_user}",
      "gists_url": "https://api.github.com/users/protolambda/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/protolambda/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/protolambda/subscriptions",
      "organizations_url": "https://api.github.com/users/protolambda/orgs",
      "repos_url": "https://api.github.com/users/protolambda/repos",
      "events_url": "https://api.github.com/users/protolambda/events{/privacy}",
      "received_events_url": "https://api.github.com/users/protolambda/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 9,
  "created_at": "2019-05-08T00:21:51Z",
  "updated_at": "2019-06-21T00:38:31Z",
  "closed_at": "2019-06-21T00:38:30Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "POC implementation here: https://gist.github.com/protolambda/ce2525774c7d1366b7820d4e57d865fa\r\nYou can load the POC into Google Colab (click badge on top) to play around with the code.\r\n\r\nCredits to @JustinDrake for initial suggestions (Link: https://gist.github.com/protolambda/0cc62589bd4dba209da1b2478d39a419), and later feedback on the non-typed iteration.\r\n\r\nOlder non-typed iteration of rework: https://gist.github.com/protolambda/4dd66338a2f6214779cadb03c222171a\r\n\r\nWith this new typed approach, we have a more readable SSZ (ignoring the magic parts) than the previous `minimal_ssz.py`, and we enable static-type hints / linting / checks / IDE suggestions / etc. (as requested by @hwwhww in python call discussion)\r\n\r\nI'm switching my efforts back to testing now. I think @JustinDrake can direct getting this into a PR form, and splitting it up. And I hope @hwwhww can review if it fulfills the typing requirements (and maybe iterate on the POC).\r\n\r\nExample usage snippet:\r\n\r\n```python\r\nclass Abc(SSZContainer):\r\n  ab: List[uint64]\r\n  x: uint32\r\n\r\nclass Foobar(SSZContainer):\r\n  foo: Vector[Abc, SSZLen(5)]\r\n\r\nclass BeaconThing(SSZContainer):\r\n  a: uint8\r\n  b: Foobar\r\n  baz: BytesN[SSZLen(3)]\r\n  quix: bytes\r\n\r\nx = BeaconThing()\r\nx.b.foo[ 0].ab = [0x0123456789abcdef]\r\nx.b.foo[ 0].x = 0x11223344\r\nx.b.foo[4].ab = [0xdeadbeefdeadbeef, 0x3333333333333333]\r\nx.b.foo[4].x = 0x55667788\r\nx.baz = b'\\xaa\\xbb\\xcc'\r\nx.quix = b'\\xff\\xff'\r\nx.a = 0xcc\r\nprint(x.serialize().hex())\r\nprint(x.hash_tree_root().hex())\r\n\r\ny = BeaconThing()\r\ny.a = 0x77\r\ny.b = Foobar(foo=Vector(Abc(ab=[0x1122334455667788], x=0xaabbccdd), Abc(), Abc(x=0x12345678)))\r\ny.quix = b'\\x42\\x42\\x42\\x42\\x42\\x42'\r\nprint(y.serialize().hex())\r\n\r\np = uint8(0xff)\r\nprint(serialize(p, uint8).hex())\r\nq = uint16(0xaabb)\r\nprint(serialize(q, uint16).hex())\r\n```\r\n\r\nNote that the \"magic\" behind the scenes relies on:\r\n- annotations being present\r\n- generics being used to describe vector/list element types, and vector/bytesN sizes.\r\n- context passing annotations (a dict of `name -> type`, but each type also optionally has a `__args__` with the generic type arguments).\r\n- If no context is available (i.e. not serializing a container), you have to pass the type as an extra argument to `serialize` / `hash_tree_root` / etc. Rare use case, but possible. See example that serializes typed ints.\r\n\r\nPerformance note:\r\n- integers are not boxed. They are described by `NewType`, which is not execution-time. It is sufficient to just have a reference to the NewType instance however for the SSZ implementation. This way there is no overhead for integers. (Alternatively we could box them at a performance cost, and do overflow/underflow checking?)\r\n- `bytes`/`bytesN` SSZ types are matched together with list/vector, but an extra argument `byte_form` lets you handle them differently (mainly for creating zero values). And the `pack` short-circuits to return the Python `bytes` value quickly.\r\n\r\nReadability notes:\r\n- we can probably leaf out the `class BeaconThing(SSZContainer):` for just `BeaconThing`, and have the spec extractor deal with it. (similar with what we do now for `SSZType({...})`\r\n- we may want to rename `SSZLen`, if someone can come up with a better name for a length type argument. (just the integer is not a valid python type)\r\n\r\nAlso, we can introduce back string based typing if we really want, we can just ignore that the type is unknown (a forward-reference), and then convert a type hint to a string by taking `__forward_arg__` from it. But I rather just use types/annotations/generics everywhere.\r\n",
  "closed_by": {
    "login": "protolambda",
    "id": 19571989,
    "node_id": "MDQ6VXNlcjE5NTcxOTg5",
    "avatar_url": "https://avatars.githubusercontent.com/u/19571989?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/protolambda",
    "html_url": "https://github.com/protolambda",
    "followers_url": "https://api.github.com/users/protolambda/followers",
    "following_url": "https://api.github.com/users/protolambda/following{/other_user}",
    "gists_url": "https://api.github.com/users/protolambda/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/protolambda/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/protolambda/subscriptions",
    "organizations_url": "https://api.github.com/users/protolambda/orgs",
    "repos_url": "https://api.github.com/users/protolambda/repos",
    "events_url": "https://api.github.com/users/protolambda/events{/privacy}",
    "received_events_url": "https://api.github.com/users/protolambda/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1064/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1064/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/490368990",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1064#issuecomment-490368990",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1064",
    "id": 490368990,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5MDM2ODk5MA==",
    "user": {
      "login": "JustinDrake",
      "id": 731743,
      "node_id": "MDQ6VXNlcjczMTc0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/731743?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JustinDrake",
      "html_url": "https://github.com/JustinDrake",
      "followers_url": "https://api.github.com/users/JustinDrake/followers",
      "following_url": "https://api.github.com/users/JustinDrake/following{/other_user}",
      "gists_url": "https://api.github.com/users/JustinDrake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JustinDrake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JustinDrake/subscriptions",
      "organizations_url": "https://api.github.com/users/JustinDrake/orgs",
      "repos_url": "https://api.github.com/users/JustinDrake/repos",
      "events_url": "https://api.github.com/users/JustinDrake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JustinDrake/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-08T06:46:21Z",
    "updated_at": "2019-05-08T06:46:30Z",
    "author_association": "MEMBER",
    "body": "FWIW, I'm working on cleaning up Proto's POC to limit magic. In particular, looking to remove the SSZ switch magic (so that the only magic that remains is the type magic). Curious to know what people think of Proto's latest type magic.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/490368990/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/490380109",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1064#issuecomment-490380109",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1064",
    "id": 490380109,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5MDM4MDEwOQ==",
    "user": {
      "login": "dankrad",
      "id": 6130607,
      "node_id": "MDQ6VXNlcjYxMzA2MDc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6130607?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dankrad",
      "html_url": "https://github.com/dankrad",
      "followers_url": "https://api.github.com/users/dankrad/followers",
      "following_url": "https://api.github.com/users/dankrad/following{/other_user}",
      "gists_url": "https://api.github.com/users/dankrad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dankrad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dankrad/subscriptions",
      "organizations_url": "https://api.github.com/users/dankrad/orgs",
      "repos_url": "https://api.github.com/users/dankrad/repos",
      "events_url": "https://api.github.com/users/dankrad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dankrad/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-08T07:29:31Z",
    "updated_at": "2019-05-08T07:29:39Z",
    "author_association": "MEMBER",
    "body": ">     * integers are not boxed. They are described by `NewType`, which is not execution-time. It is sufficient to just have a reference to the NewType instance however for the SSZ implementation. This way there is no overhead for integers. (Alternatively we could box them at a performance cost, and do overflow/underflow checking?)\r\n\r\nMy preference is that in the spec we should just take the hit. This is the reference after all and performance should play a very minimal role in designing it. Not having range checking will limit our tests. Implementations can then go with unboxed versions and show that they will still conform to the spec with all the range checking included.\r\n\r\n> Also, we can introduce back string based typing if we really want\r\n\r\nI'm against this. I never understood the idea of why some types should be strings. Also, it means that the SSZ types cannot be used literally as the type names when implementing, which seems like a disadvantage to me. Finally, I don't think they were consistent (\"bytes1\" being a basic type and \"bytes2\" not -- what were they even trying to indicate?)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/490380109/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/490416898",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1064#issuecomment-490416898",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1064",
    "id": 490416898,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5MDQxNjg5OA==",
    "user": {
      "login": "hwwhww",
      "id": 9263930,
      "node_id": "MDQ6VXNlcjkyNjM5MzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9263930?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hwwhww",
      "html_url": "https://github.com/hwwhww",
      "followers_url": "https://api.github.com/users/hwwhww/followers",
      "following_url": "https://api.github.com/users/hwwhww/following{/other_user}",
      "gists_url": "https://api.github.com/users/hwwhww/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hwwhww/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hwwhww/subscriptions",
      "organizations_url": "https://api.github.com/users/hwwhww/orgs",
      "repos_url": "https://api.github.com/users/hwwhww/repos",
      "events_url": "https://api.github.com/users/hwwhww/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hwwhww/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-08T09:29:16Z",
    "updated_at": "2019-05-08T09:30:24Z",
    "author_association": "MEMBER",
    "body": "I tried to run it with `mypy` check. Currently, it’s broken, but indeed it *seems* more type-hinting-friendly than `SSZType` one.\r\n\r\nSome known issues:\r\n1. Some attribute setting/overridden is not acceptable for `mypy`. `uint8.byte_len = 1` can be written as `setattr(uint8, ‘byte_len’, 1)` to make `mypy` happy. (Maybe there’s other solution)\r\n2. `SSZLenAny = type(“SSZLenAny”, (), {})` would cause error `error: Invalid type \"proto_ssz.proto_ssz.SSZLenAny\"` when checking `L = TypeVar(“L”, bound=SSZLenAny)`. Can it be just an empty class?\r\n    ```python\r\n    class SSZLenAny:\r\n        pass\r\n    ```\r\n4. The basic types looks fine (although needs some adjustment), but `typ = type(“SSZLen_%d” % length, (SSZLenAny,), {})` is defined in runtime.\r\n5. Some function returning types are missing \r\n\r\n---\r\n\r\nSome thoughts:\r\n1. I like the annotations! ❤️\r\n2. Generally, type hinting supporting would be a win for me.\r\n3. However, even if we don't take SSZ *type* magic as part of the spec, IMO it's still not readable/understandable enough to replace the English spec (which I recall it's the goal that [@JustinDrake mentioned](https://github.com/ethereum/eth2.0-specs/issues/859#issuecomment-484310908)). May need more refactorings to achieve that; but also, I can't tell if it's worth or not right now.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/490416898/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/490441664",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1064#issuecomment-490441664",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1064",
    "id": 490441664,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5MDQ0MTY2NA==",
    "user": {
      "login": "protolambda",
      "id": 19571989,
      "node_id": "MDQ6VXNlcjE5NTcxOTg5",
      "avatar_url": "https://avatars.githubusercontent.com/u/19571989?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/protolambda",
      "html_url": "https://github.com/protolambda",
      "followers_url": "https://api.github.com/users/protolambda/followers",
      "following_url": "https://api.github.com/users/protolambda/following{/other_user}",
      "gists_url": "https://api.github.com/users/protolambda/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/protolambda/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/protolambda/subscriptions",
      "organizations_url": "https://api.github.com/users/protolambda/orgs",
      "repos_url": "https://api.github.com/users/protolambda/repos",
      "events_url": "https://api.github.com/users/protolambda/events{/privacy}",
      "received_events_url": "https://api.github.com/users/protolambda/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-08T10:55:20Z",
    "updated_at": "2019-05-08T10:59:36Z",
    "author_association": "MEMBER",
    "body": "@JustinDrake \r\n> remove the SSZ switch magic\r\n\r\nI wish Python had strong type/object pattern matching like Scala, but we're stuck with if-statements. These matchers that output the necessary data, and managed dict of these, with lambdas receiving the matched data, is the best emulation of Scala pattern matching I could think of.\r\nAlternatively, we use some decorator magic to define encoding functions for each type, but it will be more verbose I think. Or less, if there will be a custom spec build script for this.\r\n\r\n@dankrad \r\n> My preference is that in the spec we should just take the hit\r\n\r\nI can see that, but prefer not to, as we've to deal with tests and generators running on hunderds of thousands of these integers. If we start boxing them, I think we are stuck with the minimal configuration forever. It would be nice if you can provide a POC with bound-checker integer boxing, so we can see the benefits / performance hit better. But focus on other typing first :)\r\n\r\n> I'm against this. I never understood the idea of why some types should be strings.\r\n\r\nMore or less on same page here. But do want to see some type declaration standardization at some point, similar to ABI, so we can pass around SSZ types in more dynamic contexts. Typing is great for exec. spec safety however.\r\n\r\n@hwwhww \r\n\r\n> 1. Some attribute setting/overridden is not acceptable\r\n\r\nForgot about that. Just wanted a way to attach a length in integer form to the type. I don't want to extract it from the type name every time. `setattr` would work, or maybe declare a static function returning the length from the closure?\r\n\r\n> 2. SSZLenAny\r\n\r\n`type(“SSZLenAny”, (), {})` should be perfectly valid Python. But yes, may just want to declare an empty class instead. The idea here is that we create type bounds for the `L` type paremeter used in the generics. We can't declare a type for every single length (every integer), but we can limit it to a subclass of some type we control. And then `SSZLen` helps create this type.\r\n\r\n> 3. `typ = type(“SSZLen_%d” % length, (SSZLenAny,), {}) is defined in runtime.`\r\n\r\nYes, see above, can't declare types for every integer. The other way would be to parametrize the type creation of `Vector` and `BytesN`, but then those become dynamicly defined types, like `SSZLen`. Better just limit it to root of the problem. Given that the type is bound to `SSZLenAny`, we can at least know on type-checking time that a vector has a certain length, and detect inequality between two types of vectors with the same element type, but different lengths.\r\n\r\nAlternatively we use strings for length parameters (doesn't please Dankrad) as types, which is valid python (have them be forward-type-references), and never actually declare them. Not sure what mypi would act like there. It's a rabbit hole to attach arbitrary numbers to *static* typing in Python, yay for Go :see_no_evil: \r\nAside from the brevity you get from Python sometimes, and power when *defining* tests, I see more value in Go and Rust for *some* parts of the spec like type declaration. (serialization/merkleization, or anything with type interpretation, would be best for languages with pattern matching however).\r\n\r\n> 4. Some function returning types are missing\r\n\r\nI know, for some of the magic hidden away, and so dynamic, I don't think it is sensible to add type hinting. I can see value in type hinting for public interface functions like `serialize` and `hash_tree_root` however. (through annotation with `Callable[[Any], bytes]` or similar, if we keep the switch magic).\r\n\r\nOn thoughts:\r\n\r\n>  3. not readable/understandable enough to replace the English spec\r\n\r\nCloser than previous string-based if-statement `minimal_ssz.py` approach, but not quite like the spec either, even if you hide the unimportant typing magic parts from the reader. Personally don't see SSZ splitting up into merkleization and serialization anytime soon.\r\n\r\nIt's much more straightforward if you can:\r\n- just call `serialize` for basic values when packing an array as part of merkleization\r\n- just define what is `fixed_size` based on serialization primitives/helpers\r\n- keep it all encapsulated from any part of the spec:\r\n  - to make it replaceable\r\n  - easy to black-box as a spec reader\r\n  - use it as a clean dependency in other parts of the spec, e.g. validator spec, phase 1+ things, etc.\r\n\r\nHope the typing idea can be picked up by someone, I am moving focus back to test-generation (a problem blocking many more people), and will stop commenting here. :wave:\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/490441664/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/490702452",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1064#issuecomment-490702452",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1064",
    "id": 490702452,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5MDcwMjQ1Mg==",
    "user": {
      "login": "dankrad",
      "id": 6130607,
      "node_id": "MDQ6VXNlcjYxMzA2MDc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6130607?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dankrad",
      "html_url": "https://github.com/dankrad",
      "followers_url": "https://api.github.com/users/dankrad/followers",
      "following_url": "https://api.github.com/users/dankrad/following{/other_user}",
      "gists_url": "https://api.github.com/users/dankrad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dankrad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dankrad/subscriptions",
      "organizations_url": "https://api.github.com/users/dankrad/orgs",
      "repos_url": "https://api.github.com/users/dankrad/repos",
      "events_url": "https://api.github.com/users/dankrad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dankrad/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-09T00:50:24Z",
    "updated_at": "2019-05-09T00:50:24Z",
    "author_association": "MEMBER",
    "body": ">     3\\. However, even if we don't take SSZ _type_ magic as part of the spec, IMO it's still not readable/understandable enough to replace the English spec (which I recall it's the goal that [@JustinDrake mentioned](https://github.com/ethereum/eth2.0-specs/issues/859#issuecomment-484310908)). May need more refactorings to achieve that; but also, I can't tell if it's worth or not right now.\r\n\r\nI imagine that the \"switch\" statements in the SSZ minimal implementation would become some kind of tables in the spec. Some good work on encode_series might make it more readable. But I still see the need for lots of English words around it :P\r\n\r\nI find the types much more readable than the current json-like notation for containers we use in the spec though! @hwwhww I'm a big fan of having better type hinting, it would be great if we can get it to work properly with mypy!\r\n\r\nBTW, since we are now changing naming conventions anyway: Can we capitalize all SSZ types, or if we want to keep the basic types lowercase to distinguish them, ensure it's consistent (e.g. Bytes should be uppercase).\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/490702452/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/490743660",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1064#issuecomment-490743660",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1064",
    "id": 490743660,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5MDc0MzY2MA==",
    "user": {
      "login": "hwwhww",
      "id": 9263930,
      "node_id": "MDQ6VXNlcjkyNjM5MzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9263930?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hwwhww",
      "html_url": "https://github.com/hwwhww",
      "followers_url": "https://api.github.com/users/hwwhww/followers",
      "following_url": "https://api.github.com/users/hwwhww/following{/other_user}",
      "gists_url": "https://api.github.com/users/hwwhww/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hwwhww/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hwwhww/subscriptions",
      "organizations_url": "https://api.github.com/users/hwwhww/orgs",
      "repos_url": "https://api.github.com/users/hwwhww/repos",
      "events_url": "https://api.github.com/users/hwwhww/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hwwhww/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-09T04:58:10Z",
    "updated_at": "2019-05-09T04:58:10Z",
    "author_association": "MEMBER",
    "body": "@protolambda \r\nI'm happy to dig in mypy-compatibility. But I'd say after this PoC is on a branch and pass the SSZ tests so we could more confident to iterate it. :)\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/490743660/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/491309556",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1064#issuecomment-491309556",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1064",
    "id": 491309556,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5MTMwOTU1Ng==",
    "user": {
      "login": "protolambda",
      "id": 19571989,
      "node_id": "MDQ6VXNlcjE5NTcxOTg5",
      "avatar_url": "https://avatars.githubusercontent.com/u/19571989?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/protolambda",
      "html_url": "https://github.com/protolambda",
      "followers_url": "https://api.github.com/users/protolambda/followers",
      "following_url": "https://api.github.com/users/protolambda/following{/other_user}",
      "gists_url": "https://api.github.com/users/protolambda/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/protolambda/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/protolambda/subscriptions",
      "organizations_url": "https://api.github.com/users/protolambda/orgs",
      "repos_url": "https://api.github.com/users/protolambda/repos",
      "events_url": "https://api.github.com/users/protolambda/events{/privacy}",
      "received_events_url": "https://api.github.com/users/protolambda/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-10T14:30:19Z",
    "updated_at": "2019-05-10T14:30:19Z",
    "author_association": "MEMBER",
    "body": "@hwwhww Great, I'll put this work in a branch some time later today, if we're through the prototyping phase of SSZ spec typing.\r\n@dankrad Tables sounds great, but some of the cells may be too large for readability, and it would need special code to extract and build. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/491309556/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/491633286",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1064#issuecomment-491633286",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1064",
    "id": 491633286,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5MTYzMzI4Ng==",
    "user": {
      "login": "protolambda",
      "id": 19571989,
      "node_id": "MDQ6VXNlcjE5NTcxOTg5",
      "avatar_url": "https://avatars.githubusercontent.com/u/19571989?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/protolambda",
      "html_url": "https://github.com/protolambda",
      "followers_url": "https://api.github.com/users/protolambda/followers",
      "following_url": "https://api.github.com/users/protolambda/following{/other_user}",
      "gists_url": "https://api.github.com/users/protolambda/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/protolambda/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/protolambda/subscriptions",
      "organizations_url": "https://api.github.com/users/protolambda/orgs",
      "repos_url": "https://api.github.com/users/protolambda/repos",
      "events_url": "https://api.github.com/users/protolambda/events{/privacy}",
      "received_events_url": "https://api.github.com/users/protolambda/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-12T22:05:27Z",
    "updated_at": "2019-05-12T22:05:27Z",
    "author_association": "MEMBER",
    "body": "See PR #1077, let's continue discussion there.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/491633286/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/504246807",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1064#issuecomment-504246807",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1064",
    "id": 504246807,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwNDI0NjgwNw==",
    "user": {
      "login": "protolambda",
      "id": 19571989,
      "node_id": "MDQ6VXNlcjE5NTcxOTg5",
      "avatar_url": "https://avatars.githubusercontent.com/u/19571989?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/protolambda",
      "html_url": "https://github.com/protolambda",
      "followers_url": "https://api.github.com/users/protolambda/followers",
      "following_url": "https://api.github.com/users/protolambda/following{/other_user}",
      "gists_url": "https://api.github.com/users/protolambda/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/protolambda/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/protolambda/subscriptions",
      "organizations_url": "https://api.github.com/users/protolambda/orgs",
      "repos_url": "https://api.github.com/users/protolambda/repos",
      "events_url": "https://api.github.com/users/protolambda/events{/privacy}",
      "received_events_url": "https://api.github.com/users/protolambda/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-06-21T00:38:30Z",
    "updated_at": "2019-06-21T00:38:30Z",
    "author_association": "MEMBER",
    "body": "#1077 was merged, and #1180 takes typing even farther (and improves the style/cleanliness too). Closing this.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/504246807/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
