{
  "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1883",
  "repository_url": "https://api.github.com/repos/ethereum/consensus-specs",
  "labels_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1883/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1883/comments",
  "events_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1883/events",
  "html_url": "https://github.com/ethereum/consensus-specs/issues/1883",
  "id": 636516986,
  "node_id": "MDU6SXNzdWU2MzY1MTY5ODY=",
  "number": 1883,
  "title": "AssertionError during on_attestation if an attestation references a new target checkpoint",
  "user": {
    "login": "ericsson49",
    "id": 10426192,
    "node_id": "MDQ6VXNlcjEwNDI2MTky",
    "avatar_url": "https://avatars.githubusercontent.com/u/10426192?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ericsson49",
    "html_url": "https://github.com/ericsson49",
    "followers_url": "https://api.github.com/users/ericsson49/followers",
    "following_url": "https://api.github.com/users/ericsson49/following{/other_user}",
    "gists_url": "https://api.github.com/users/ericsson49/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ericsson49/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ericsson49/subscriptions",
    "organizations_url": "https://api.github.com/users/ericsson49/orgs",
    "repos_url": "https://api.github.com/users/ericsson49/repos",
    "events_url": "https://api.github.com/users/ericsson49/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ericsson49/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1324776822,
      "node_id": "MDU6TGFiZWwxMzI0Nzc2ODIy",
      "url": "https://api.github.com/repos/ethereum/consensus-specs/labels/scope:fork-choice",
      "name": "scope:fork-choice",
      "color": "81C7D4",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": {
    "login": "adiasg",
    "id": 25324105,
    "node_id": "MDQ6VXNlcjI1MzI0MTA1",
    "avatar_url": "https://avatars.githubusercontent.com/u/25324105?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/adiasg",
    "html_url": "https://github.com/adiasg",
    "followers_url": "https://api.github.com/users/adiasg/followers",
    "following_url": "https://api.github.com/users/adiasg/following{/other_user}",
    "gists_url": "https://api.github.com/users/adiasg/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/adiasg/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/adiasg/subscriptions",
    "organizations_url": "https://api.github.com/users/adiasg/orgs",
    "repos_url": "https://api.github.com/users/adiasg/repos",
    "events_url": "https://api.github.com/users/adiasg/events{/privacy}",
    "received_events_url": "https://api.github.com/users/adiasg/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "adiasg",
      "id": 25324105,
      "node_id": "MDQ6VXNlcjI1MzI0MTA1",
      "avatar_url": "https://avatars.githubusercontent.com/u/25324105?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adiasg",
      "html_url": "https://github.com/adiasg",
      "followers_url": "https://api.github.com/users/adiasg/followers",
      "following_url": "https://api.github.com/users/adiasg/following{/other_user}",
      "gists_url": "https://api.github.com/users/adiasg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adiasg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adiasg/subscriptions",
      "organizations_url": "https://api.github.com/users/adiasg/orgs",
      "repos_url": "https://api.github.com/users/adiasg/repos",
      "events_url": "https://api.github.com/users/adiasg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adiasg/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2020-06-10T20:12:48Z",
  "updated_at": "2020-06-22T17:38:41Z",
  "closed_at": "2020-06-22T17:38:41Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "Recent [update](https://github.com/ethereum/eth2.0-specs/commit/68442c2eefbd245a717b1710e8bb155c1c22678f) to `process_slots` induces consequences in other parts of the eth2.0 specs, which invoke the `process_slots` method - `AssertError` can be thrown, while it worked fine before the update, in the case `state.slot == slot`. In the update diff, one can see that `process_slots` is guarded with `state.slot < slot` to prevent such problems.\r\nHowever, there are other cases when `process_slots` is called, but corresponding call site is not updated with such a guard.\r\nOne such example is `store_target_checkpoint_state`. That leads to problems. For example, one can create attestations during the first (i.e. zero) epoch, however, once an epoch is justified, i.e. there is a new checkpoint, `store_target_checkpoint_state` is called, which tries to invoke `process_slots`, which results in the `AssertError`, unless next epoch arrives.\r\n\r\nHere is a snippet, illustrating the problem. \r\n```python\r\nfrom eth2spec.utils import bls\r\nbls.bls_active = False\r\n\r\nfrom eth2spec.phase0 import spec\r\n\r\nconfigs_path = '../../../configs/'\r\nfrom eth2spec.config import config_util\r\nfrom importlib import reload\r\nconfig_util.prepare_config(configs_path, 'minimal')\r\nreload(spec)\r\n\r\nfrom eth2spec.test.helpers.deposits import prepare_genesis_deposits\r\nfrom eth2spec.test.helpers.keys import pubkey_to_privkey\r\n\r\neth1_block_hash=b'\\x42' * 32\r\neth1_timestamp=spec.MIN_GENESIS_TIME\r\ndeposit_count = 16\r\ndeposits, deposit_root, _ = prepare_genesis_deposits(spec, deposit_count, spec.MAX_EFFECTIVE_BALANCE, signed=True)\r\ngenesis_state = spec.initialize_beacon_state_from_eth1(eth1_block_hash, eth1_timestamp, deposits)\r\n\r\nstore = spec.get_forkchoice_store(genesis_state)\r\n\r\ndef set_slot(slot):\r\n    spec.on_tick(store, store.genesis_time+spec.SECONDS_PER_SLOT*slot)\r\n\r\ndef mk_block(slot,head,atts):\r\n    head_state = store.block_states[head].copy()\r\n    if head_state.slot < slot-1:\r\n        spec.process_slots(head_state, slot-1)\r\n    state = head_state.copy()\r\n    spec.process_slots(state, slot)\r\n\r\n    proposer = spec.get_beacon_proposer_index(state)\r\n    SK = pubkey_to_privkey[state.validators[proposer].pubkey]\r\n    randao_reveal = spec.get_epoch_signature(state, spec.BeaconBlock(slot=slot), SK)\r\n    eth1vote = spec.get_eth1_vote(state, [])\r\n    block = spec.BeaconBlock(\r\n        slot=slot, proposer_index=proposer, parent_root=head,\r\n        body=spec.BeaconBlockBody(attestations=atts, eth1_data=eth1vote))\r\n    block.state_root = spec.compute_new_state_root(head_state.copy(), block)\r\n    block_signature = spec.get_block_signature(state, block, SK)\r\n    return spec.SignedBeaconBlock(message=block, signature=block_signature)\r\n\r\ndef mk_atts(slot, head):\r\n    head_state = store.block_states[head].copy()\r\n    if head_state.slot < int(slot)-1:\r\n        spec.process_slots(head_state, slot-1)\r\n    state = head_state.copy()\r\n    if state.slot < slot:\r\n        spec.process_slots(state, slot)\r\n    \r\n    src = state.current_justified_checkpoint\r\n    start_slot = spec.compute_start_slot_at_epoch(spec.get_current_epoch(state))\r\n    epoch_boundary_block_root = head if start_slot == state.slot else spec.get_block_root_at_slot(state, start_slot)\r\n    target_chkpt = spec.Checkpoint(epoch=spec.get_current_epoch(state), root=epoch_boundary_block_root)\r\n    atts = []\r\n    committee_count = spec.get_committee_count_at_slot(state, slot)\r\n    for index in range(committee_count):\r\n        data = spec.AttestationData(slot=slot, index=index, beacon_block_root=head,\r\n            source=state.current_justified_checkpoint,\r\n            target=target_chkpt)\r\n        committee = spec.get_beacon_committee(state, slot, index)\r\n        for i in range(len(committee)):\r\n            bits = spec.Bitlist[spec.MAX_VALIDATORS_PER_COMMITTEE]([0] * len(committee))\r\n            bits[i] = 1\r\n            att_sig = spec.get_attestation_signature(state, data,\r\n                    pubkey_to_privkey[state.validators[committee[i]].pubkey])\r\n            atts.append(spec.Attestation(aggregation_bits=bits, data=data, signature=att_sig))\r\n    return atts\r\n\r\ndef do_step():\r\n    slot = spec.get_current_slot(store)\r\n    head = spec.get_head(store)\r\n    atts = mk_atts(slot, head)\r\n    slot = slot + 1\r\n    set_slot(slot)\r\n    for a in atts:\r\n        spec.on_attestation(store, a)\r\n    b = mk_block(slot, head, atts)\r\n    spec.on_block(store, b)\r\n\r\nfor i in range(spec.SLOTS_PER_EPOCH):\r\n    do_step()\r\n\r\ntry:\r\n    do_step()\r\nexcept AssertionError as e:\r\n    print('exception', e)\r\n    pass\r\n\r\n# wait until next epoch arrives\r\nset_slot(spec.SLOTS_PER_EPOCH * 2)\r\ndo_step()\r\n```\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"testcase0.py\", line 85, in <module>\r\n    do_step()\r\n  File \"testcase0.py\", line 78, in do_step\r\n    spec.on_attestation(store, a)\r\n  File \"/mnt/c/Users/ericsson/IdeaProjects/tmp/eth2.0-specs_v0.11.3/venv/lib/python3.8/site-packages/eth2spec/phase0/spec.py\", line 1519, in on_attestation\r\n    store_target_checkpoint_state(store, attestation.data.target)\r\n  File \"/mnt/c/Users/ericsson/IdeaProjects/tmp/eth2.0-specs_v0.11.3/venv/lib/python3.8/site-packages/eth2spec/phase0/spec.py\", line 1442, in store_target_checkpoint_state\r\n    process_slots(base_state, compute_start_slot_at_epoch(target.epoch))\r\n  File \"/mnt/c/Users/ericsson/IdeaProjects/tmp/eth2.0-specs_v0.11.3/venv/lib/python3.8/site-packages/eth2spec/phase0/spec.py\", line 836, in process_slots\r\n    assert state.slot < slot\r\nAssertionError\r\n```\r\n\r\nOne can wait until next epoch, then `do_step()` is successfull.\r\n\r\nOne possible solution is to add a guard around `process_slots` call in the `store_target_checkpoint_state` method\r\n```python\r\ndef store_target_checkpoint_state(store: Store, target: Checkpoint) -> None:\r\n    # Store target checkpoint state if not yet seen\r\n    if target not in store.checkpoint_states:\r\n        base_state = store.block_states[target.root].copy()\r\n        epoch_start_slot = compute_start_slot_at_epoch(target.epoch)\r\n        if base_state.slot < epoch_start_slot:\r\n            process_slots(base_state, epoch_start_slot)\r\n        store.checkpoint_states[target] = base_state\r\n```\r\n",
  "closed_by": {
    "login": "djrtwo",
    "id": 1433595,
    "node_id": "MDQ6VXNlcjE0MzM1OTU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/djrtwo",
    "html_url": "https://github.com/djrtwo",
    "followers_url": "https://api.github.com/users/djrtwo/followers",
    "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
    "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
    "organizations_url": "https://api.github.com/users/djrtwo/orgs",
    "repos_url": "https://api.github.com/users/djrtwo/repos",
    "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
    "received_events_url": "https://api.github.com/users/djrtwo/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1883/reactions",
    "total_count": 1,
    "+1": 1,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1883/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/642418631",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1883#issuecomment-642418631",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1883",
    "id": 642418631,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0MjQxODYzMQ==",
    "user": {
      "login": "adiasg",
      "id": 25324105,
      "node_id": "MDQ6VXNlcjI1MzI0MTA1",
      "avatar_url": "https://avatars.githubusercontent.com/u/25324105?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adiasg",
      "html_url": "https://github.com/adiasg",
      "followers_url": "https://api.github.com/users/adiasg/followers",
      "following_url": "https://api.github.com/users/adiasg/following{/other_user}",
      "gists_url": "https://api.github.com/users/adiasg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adiasg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adiasg/subscriptions",
      "organizations_url": "https://api.github.com/users/adiasg/orgs",
      "repos_url": "https://api.github.com/users/adiasg/repos",
      "events_url": "https://api.github.com/users/adiasg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adiasg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-11T05:34:39Z",
    "updated_at": "2020-06-12T22:26:55Z",
    "author_association": "MEMBER",
    "body": "**Summary of issue**: When a new attestation is received with `target not in store.checkpoint_states`, there can be a failure in `assert state.slot < slot` in the call `on_attestation > store_target_checkpoint_state > process_slots`. \r\n\r\n**Cause of issue**: `process_slots` is called in `store_target_checkpoint_state` to adjust the checkpoint state for \"pulled up\" epoch boundary blocks (see image), which breaks after the new changes when `target.root` isn't a pulled up block.\r\n\r\n![image](https://user-images.githubusercontent.com/25324105/84348450-cb5ce500-ab69-11ea-83c9-367682adee01.png)\r\n\r\n> One can wait until next epoch, then do_step() is successfull.\r\n\r\nThis is working because of the `set_slot(spec.SLOTS_PER_EPOCH * 2)` call, which skips all blocks until the next epoch, leading to a pulled-up epoch boundary block.\r\n\r\n**Solution**: The suggested solution is the appropriate.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/642418631/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/642819738",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1883#issuecomment-642819738",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1883",
    "id": 642819738,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0MjgxOTczOA==",
    "user": {
      "login": "ericsson49",
      "id": 10426192,
      "node_id": "MDQ6VXNlcjEwNDI2MTky",
      "avatar_url": "https://avatars.githubusercontent.com/u/10426192?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ericsson49",
      "html_url": "https://github.com/ericsson49",
      "followers_url": "https://api.github.com/users/ericsson49/followers",
      "following_url": "https://api.github.com/users/ericsson49/following{/other_user}",
      "gists_url": "https://api.github.com/users/ericsson49/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ericsson49/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ericsson49/subscriptions",
      "organizations_url": "https://api.github.com/users/ericsson49/orgs",
      "repos_url": "https://api.github.com/users/ericsson49/repos",
      "events_url": "https://api.github.com/users/ericsson49/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ericsson49/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-11T17:16:14Z",
    "updated_at": "2020-06-11T17:17:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "it's reproducible in both `dev` and `v0.11.3`",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/642819738/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
