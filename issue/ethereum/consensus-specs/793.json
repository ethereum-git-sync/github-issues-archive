{
  "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/793",
  "repository_url": "https://api.github.com/repos/ethereum/consensus-specs",
  "labels_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/793/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/793/comments",
  "events_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/793/events",
  "html_url": "https://github.com/ethereum/consensus-specs/issues/793",
  "id": 421888519,
  "node_id": "MDU6SXNzdWU0MjE4ODg1MTk=",
  "number": 793,
  "title": "Bridging the spec to the tests generation",
  "user": {
    "login": "protolambda",
    "id": 19571989,
    "node_id": "MDQ6VXNlcjE5NTcxOTg5",
    "avatar_url": "https://avatars.githubusercontent.com/u/19571989?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/protolambda",
    "html_url": "https://github.com/protolambda",
    "followers_url": "https://api.github.com/users/protolambda/followers",
    "following_url": "https://api.github.com/users/protolambda/following{/other_user}",
    "gists_url": "https://api.github.com/users/protolambda/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/protolambda/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/protolambda/subscriptions",
    "organizations_url": "https://api.github.com/users/protolambda/orgs",
    "repos_url": "https://api.github.com/users/protolambda/repos",
    "events_url": "https://api.github.com/users/protolambda/events{/privacy}",
    "received_events_url": "https://api.github.com/users/protolambda/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1295439957,
      "node_id": "MDU6TGFiZWwxMjk1NDM5OTU3",
      "url": "https://api.github.com/repos/ethereum/consensus-specs/labels/scope:CI/tests/pyspec",
      "name": "scope:CI/tests/pyspec",
      "color": "BDC0BA",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 7,
  "created_at": "2019-03-17T06:39:21Z",
  "updated_at": "2019-04-17T23:22:20Z",
  "closed_at": "2019-04-17T23:22:20Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "Since a while we have the concept of an \"executable spec\".\r\n\r\nAnd we have two versions:\r\n\r\n- The official one, generated with a script, by pulling out code from the phase0 beacon-chain markdown. Script here: https://github.com/ethereum/research/tree/master/spec_pythonizer\r\n- The Go version, \"ZRNT\", maintained by me, here: https://github.com/protolambda/zrnt\r\n\r\nThis weekend I was in Taipei with @hwwhww, @ChihChengLiang, and we discussed a way forward to make it easier to generate tests for more complex parts of the spec, like state transition tests. We don't want to maintain duplicate code here in the test-generators repository.\r\nInstead, we want to utilize the python \"executable spec\", to create tests with.\r\n\r\n## Proposal\r\n\r\nThe following proposal is based on discussion with @ChihChengLiang and @hwwhww, credits to them too.\r\n\r\n@djrtwo had plans (or so I heard) to move the spec-pythonizer to the specs repo. This is great, as it enables a clean and straightforward CI design:\r\n\r\n```\r\neth2.0-specs (repo)\r\n    |\r\n    | CI on merge into dev, master, or release (TBD)\r\n    | job1: run CI sanity check\r\n    | job2: run CI build script. (1)\r\n    |\r\neth2.0-pyspec (repo)\r\n    |\r\n    | pulled in as a python dependency\r\n    |\r\neth2.0-test-generators/<generator>/requirements.txt\r\n    |\r\n    | CI on release, generators have individual requirements.txt\r\n    |     with a git dependency (\"developer mode\") (2)\r\n    | Run generator (generator just imports all the necessary spec code,\r\n    |                          outputs processed generated inputs) (3)\r\n    | \r\neth2.0-tests\r\n    |\r\n    | pulled in as git-submodule\r\n    |\r\nyour client repository\r\n    |\r\n    | Run test-suite runner locally or in CI, which loads and runs the test YAML files\r\n    |\r\nWe achieved conformance with the spec! (or not, fix your code ;P)\r\n```\r\n\r\n1: Build script: runs the code puller, and merges it with the helper/utils definitions for a fully executable spec. Then pushes it to an output repo. This process is very similar to the way the current test-generators repo builds the tests repo.\r\n\r\n2: Each generator can switch to new pyspec versions (matches spec versioning) by updating their requirements.txt, and possibly making any necessary changes to the generation code to call the new/changed functions.\r\n\r\n3: @hwwhww mentioned that we still have to do some work for creating fake blocks/invalid attestations/etc., but this is not duplicate, it's exactly what we want to do in the test generators :). We just import the spec to be able to super-reliably replicate spec behavior in the test-suite.\r\n",
  "closed_by": {
    "login": "djrtwo",
    "id": 1433595,
    "node_id": "MDQ6VXNlcjE0MzM1OTU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/djrtwo",
    "html_url": "https://github.com/djrtwo",
    "followers_url": "https://api.github.com/users/djrtwo/followers",
    "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
    "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
    "organizations_url": "https://api.github.com/users/djrtwo/orgs",
    "repos_url": "https://api.github.com/users/djrtwo/repos",
    "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
    "received_events_url": "https://api.github.com/users/djrtwo/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/793/reactions",
    "total_count": 2,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 2,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/793/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/473677118",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/793#issuecomment-473677118",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/793",
    "id": 473677118,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MzY3NzExOA==",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-17T15:36:46Z",
    "updated_at": "2019-03-17T15:51:22Z",
    "author_association": "MEMBER",
    "body": "I'm definitely thinking along the same lines, but I wasn't originally planning to create a separate `eth2.0-pyspec` repo. It might be cleaner to just have a `/build` and `/test` in the same `eth2.0-specs` repo. Something like the following. I'd like the full suite of tests to exist in the spec repo for CI against the spec and just use the generator to wrap up these tests to output the yaml.\r\n```\r\neth2.0-specs (repo)\r\n    |\r\n    | CI on merge into dev, master, or release (TBD)\r\n    | job1: run CI build script to output exec spec to `/build` (1)\r\n    | job2: run CI tests of `/build` against tests in `/test` (2)\r\n    |\r\neth2.0-test-generators/<generator>/requirements.txt\r\n    |\r\n    | CI on release, generators have individual requirements.txt\r\n    |     with a git dependency (\"developer mode\")\r\n    | Run generator (generator just imports all the necessary spec & necessary test code,\r\n    |                          outputs processed generated inputs)\r\n    | \r\neth2.0-tests\r\n    |\r\n    | pulled in as git-submodule\r\n    |\r\nyour client repository\r\n    |\r\n    | Run test-suite runner locally or in CI, which loads and runs the test YAML files\r\n    |\r\n```\r\n\r\n1. pyspec found in `/build` get's released naturally with spec releases at same version number\r\n2. all tests that will be used in the generators are found in `/test` and follow a simple format that can be used in generators.\r\n3. agreed, but these are the same tools that will be useful in `/test`. The generator can be relatively dumb, just iterating through the tests and capturing the inputs and outputs.\r\n\r\nEdit: do you see a significant advantage in pulling out to a separate repo? My main concern is that it is going to limit the tests that actually get run in the spec CI and instead kick it out to generator repo which is too far away from the spec dev imo.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/473677118/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/473679895",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/793#issuecomment-473679895",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/793",
    "id": 473679895,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MzY3OTg5NQ==",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-17T16:06:45Z",
    "updated_at": "2019-03-17T16:06:45Z",
    "author_association": "MEMBER",
    "body": "additional comment -- Can easily tag tests in the `/tests` repo as \"sanity\" or \"light\" and only run the light weight tests in per PR CI. When doing a release, run everything.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/473679895/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/473703754",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/793#issuecomment-473703754",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/793",
    "id": 473703754,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MzcwMzc1NA==",
    "user": {
      "login": "protolambda",
      "id": 19571989,
      "node_id": "MDQ6VXNlcjE5NTcxOTg5",
      "avatar_url": "https://avatars.githubusercontent.com/u/19571989?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/protolambda",
      "html_url": "https://github.com/protolambda",
      "followers_url": "https://api.github.com/users/protolambda/followers",
      "following_url": "https://api.github.com/users/protolambda/following{/other_user}",
      "gists_url": "https://api.github.com/users/protolambda/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/protolambda/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/protolambda/subscriptions",
      "organizations_url": "https://api.github.com/users/protolambda/orgs",
      "repos_url": "https://api.github.com/users/protolambda/repos",
      "events_url": "https://api.github.com/users/protolambda/events{/privacy}",
      "received_events_url": "https://api.github.com/users/protolambda/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-17T18:58:23Z",
    "updated_at": "2019-03-17T19:03:54Z",
    "author_association": "MEMBER",
    "body": ">  It might be cleaner to just have a /build and /test in the same eth2.0-specs repo.\r\n\r\nI'm opposed to this. For several reasons:\r\n- You essentially duplicate (i.e. make a follow-up) commits through a bot. But the commits may not be sequential. It starts to become messy/complicated when updates go quick. And you even have to think about the bot triggering itself. (if you're not using different branches)\r\n- You could be affecting something you're running, which is something to avoid\r\n- You are pushing (unsigned) bot commits to a research repo with otherwise human-readable changes only. Let's keep it clean.\r\n\r\nAlternatively, you would have it push to a separate disconnected branch if you really have to do it in one repo. But at this point I rather give the pyspec project a repo, and have anything that imports it through git cleanly download it, without dealing with any extra git history or file data. We can reference a version and/or commit hash to make sure we know the spec-source of a particular build.\r\n\r\nAlso, we made this exact same decision for test-generators <-> test-cases. And it works, is easy to maintain, and has clear rules on where permanent modifications can be made and what isn't desirable.\r\n\r\nRE additional comment:\r\n> additional comment -- Can easily tag tests in the /tests repo as \"sanity\" or \"light\" and only run the light weight tests in per PR CI. When doing a release, run everything.\r\n\r\nGood idea! There are multiple ways to implement this:\r\n- singular: We could add a single tag field. And tests are either \"light\" or \"heavy\" (default?), or maybe something else. Easy, but not as extensible. \r\n- plural: We could add a \"tags\" list to a suite header. And then you can filter tests by checking which tests contain any/every tag you filter for.\r\n- change up the typed tests system. Probably a bad idea, as it breaks encapsulation and identity of test-runners.\r\n- simplify: we may want to come up with a better name than tag, and just implement the idea of light, medium, large, heavy tests etc.\r\n\r\nI would go with simplify. Or plural if anyone can come up with non-leveled requirements.\r\n\r\nMy thoughts about tags:\r\nDefined in a header being interpreted as OR on a filter for a given tag (on specs repo we say: build light tests. In clients, we say: build light and middle tests. Sometimes, like on releases, you say: build any light, middle or heavy tests. And sometimes we may include another special test type). And if multiple tags are supplied, you AND those. (OR can be simulated by iterating the query).\r\nAnd if you just want a special set of tests on a very particular topic (like having an AND in your header tags), you're likely better off by filtering by name or test-type anyway.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/473703754/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/475176388",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/793#issuecomment-475176388",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/793",
    "id": 475176388,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NTE3NjM4OA==",
    "user": {
      "login": "protolambda",
      "id": 19571989,
      "node_id": "MDQ6VXNlcjE5NTcxOTg5",
      "avatar_url": "https://avatars.githubusercontent.com/u/19571989?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/protolambda",
      "html_url": "https://github.com/protolambda",
      "followers_url": "https://api.github.com/users/protolambda/followers",
      "following_url": "https://api.github.com/users/protolambda/following{/other_user}",
      "gists_url": "https://api.github.com/users/protolambda/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/protolambda/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/protolambda/subscriptions",
      "organizations_url": "https://api.github.com/users/protolambda/orgs",
      "repos_url": "https://api.github.com/users/protolambda/repos",
      "events_url": "https://api.github.com/users/protolambda/events{/privacy}",
      "received_events_url": "https://api.github.com/users/protolambda/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-21T10:22:03Z",
    "updated_at": "2019-03-21T10:22:03Z",
    "author_association": "MEMBER",
    "body": "Posting this here for transparency:\r\n\r\nThe work on CI:\r\n\r\nprevious proposal by me: (here, #793)\r\nimplementation by Danny: (#800, #809)\r\nnew proposal by me, after discussing pros/cons with Danny (i.e. circular dependency between spec and testing): https://hackmd.io/Hod52t2UQ7C3pJlrpbMSMQ#\r\nrevised proposal by Danny, after discussing my proposal over a call: https://notes.ethereum.org/vTxnCKjlRC22dpunA6haWg?view#\r\n\r\n*below is my personal interpretation, it's a lot to go through*\r\n\r\nAgree on:\r\n- testing pythonized spec on CI\r\n- sanity tests as requirement for merging\r\n- test-generators can use pythonized spec to create test-vectors\r\n- test-generators ought to be fixed before a new release comes out, so we can keep test-generators releases in sync with spec release (but allow for releases in generators, between to spec versions)\r\n\r\nPain points:\r\n- Non-sanity tests can also be run, use them to indicate breaking changes\r\n- YAML formatted tests in specs repo vs. hard-coded but minimal tests\r\n\r\nProposal to resolve pain points:\r\n- move the \"tests\" folder to be a subfolder in the scripts folder. If it's just part of a script, to only be consumed by CI, then make that very clear. If it's not, than we should use YAML and conform to standard test format here.\r\n\r\nDisagree on:\r\n- How to initiate a change in the test-generators\r\n  - me: make CI run all tests, indicates what breaks, and make PRs at least create an issue on the generators repo, if it's just tests outside of the sanity checks that break.\r\n  - Danny: make CI on specs lightweight, most tests will break anyway. Arguably, one of the main reasons of breaking tests would be the need to re-run the generator. (kinda agree here). No clear update trigger for a generator.\r\n- Test-generators will load pyspec\r\n  - me: please build pyspec in CI of specs repo, and output to something like `eth2.0-pyspec`. Have generators independently consume this dependency in `requirements.txt`, just like their other dependencies. Don't have all consumers implement their own submodule system and pyspec build-caller.\r\n  - Danny/Hww: make generators rely on a git submodule of the specs repo. Good for versioning (there's always 1 specs submodule), but it will have to be built (i.e. functions pulled from spec) before using it.\r\n\r\nUnclear: How do minimal (but hardcoded) tests of the specs repo, copy over to the tests suite? Do we just ignore them?\r\n\r\n@djrtwo @hwwhww ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/475176388/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/475501085",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/793#issuecomment-475501085",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/793",
    "id": 475501085,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NTUwMTA4NQ==",
    "user": {
      "login": "hwwhww",
      "id": 9263930,
      "node_id": "MDQ6VXNlcjkyNjM5MzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9263930?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hwwhww",
      "html_url": "https://github.com/hwwhww",
      "followers_url": "https://api.github.com/users/hwwhww/followers",
      "following_url": "https://api.github.com/users/hwwhww/following{/other_user}",
      "gists_url": "https://api.github.com/users/hwwhww/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hwwhww/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hwwhww/subscriptions",
      "organizations_url": "https://api.github.com/users/hwwhww/orgs",
      "repos_url": "https://api.github.com/users/hwwhww/repos",
      "events_url": "https://api.github.com/users/hwwhww/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hwwhww/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-22T05:42:42Z",
    "updated_at": "2019-03-22T05:43:10Z",
    "author_association": "MEMBER",
    "body": "> Test-generators will load pyspec\r\n\r\nI’d also support https://github.com/ethereum/eth2.0-specs/issues/412 in `eth2.0-spec` so that we can get rid of `function_puller.py`. 😄\r\n\r\nPros:\r\n* Much cleaner to the `eth2.0-test-generator` when importing it.\r\n\r\nCons:\r\n* The contributors will feel that they are hacking Python instead of proposing an idea. But maybe not that painful since everyone can raise a well-documented issue and maintainers can help implement it.\r\n\r\n\r\n> Unclear: How do minimal (but hardcoded) tests of the specs repo, copy over to the tests suite? Do we just ignore them?\r\n\r\nI intuitively think that we can manually update them if the sanity checks are light.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/475501085/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/475840281",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/793#issuecomment-475840281",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/793",
    "id": 475840281,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NTg0MDI4MQ==",
    "user": {
      "login": "protolambda",
      "id": 19571989,
      "node_id": "MDQ6VXNlcjE5NTcxOTg5",
      "avatar_url": "https://avatars.githubusercontent.com/u/19571989?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/protolambda",
      "html_url": "https://github.com/protolambda",
      "followers_url": "https://api.github.com/users/protolambda/followers",
      "following_url": "https://api.github.com/users/protolambda/following{/other_user}",
      "gists_url": "https://api.github.com/users/protolambda/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/protolambda/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/protolambda/subscriptions",
      "organizations_url": "https://api.github.com/users/protolambda/orgs",
      "repos_url": "https://api.github.com/users/protolambda/repos",
      "events_url": "https://api.github.com/users/protolambda/events{/privacy}",
      "received_events_url": "https://api.github.com/users/protolambda/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-23T05:11:50Z",
    "updated_at": "2019-03-23T05:11:50Z",
    "author_association": "MEMBER",
    "body": "> I’d also support #412 in eth2.0-spec so that we can get rid of function_puller.py. smile\r\n\r\nAlso brought up the idea of just having a python spec, and referring to line-numbers/function names in the readable spec. Then just have a bot compile it in a webpage/markdown file. It would be neat, but it may be too far from \"specification\", it would be more like documentation.\r\n\r\n#412 Is interesting, and may be a good trade-off. But I would like to see some existing projects using it first, before taking that direction.\r\n\r\nMy priorities for now:\r\n1. get the Go spec up to date again this weekend\r\n2. implement (parts of) my test-suite proposal (https://github.com/ethereum/eth2.0-test-generators/issues/29). I want to know when and where my Go spec breaks. I will likely just ignore CI for now and just implement my own generators based on a locally generated pyspec. *If there's some sane CI flow for pyspec integration into test-generators, that we agree on, I am happy to start contributing to state/block/sub-state test generators.*\r\n3. write fuzzers for block (incl transactions) and state inputs\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/475840281/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/484297370",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/793#issuecomment-484297370",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/793",
    "id": 484297370,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4NDI5NzM3MA==",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-04-17T23:22:20Z",
    "updated_at": "2019-04-17T23:22:20Z",
    "author_association": "MEMBER",
    "body": "A form of this was implemented in #851 ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/484297370/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
