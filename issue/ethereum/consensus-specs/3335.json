{
  "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/3335",
  "repository_url": "https://api.github.com/repos/ethereum/consensus-specs",
  "labels_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/3335/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/3335/comments",
  "events_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/3335/events",
  "html_url": "https://github.com/ethereum/consensus-specs/issues/3335",
  "id": 1675785364,
  "node_id": "I_kwDOCOoGbc5j4nSU",
  "number": 3335,
  "title": "EIP6914 discussion",
  "user": {
    "login": "djrtwo",
    "id": 1433595,
    "node_id": "MDQ6VXNlcjE0MzM1OTU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/djrtwo",
    "html_url": "https://github.com/djrtwo",
    "followers_url": "https://api.github.com/users/djrtwo/followers",
    "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
    "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
    "organizations_url": "https://api.github.com/users/djrtwo/orgs",
    "repos_url": "https://api.github.com/users/djrtwo/repos",
    "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
    "received_events_url": "https://api.github.com/users/djrtwo/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 9,
  "created_at": "2023-04-19T23:55:07Z",
  "updated_at": "2023-12-26T19:41:50Z",
  "closed_at": null,
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "General discussion thread for EIP6914 -- reuse validator indices.\r\n\r\nBulk of the core was merged in #3307, but there are many minor discussion points and design decisions on the table.\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/3335/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/3335/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1515522440",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/3335#issuecomment-1515522440",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/3335",
    "id": 1515522440,
    "node_id": "IC_kwDOCOoGbc5aVQmI",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-04-19T23:56:43Z",
    "updated_at": "2023-04-19T23:56:43Z",
    "author_association": "MEMBER",
    "body": "Note, potential non-substantive refactor #3311 ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1515522440/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1546663715",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/3335#issuecomment-1546663715",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/3335",
    "id": 1546663715,
    "node_id": "IC_kwDOCOoGbc5cMDcj",
    "user": {
      "login": "wenceslas-sanchez",
      "id": 85337624,
      "node_id": "MDQ6VXNlcjg1MzM3NjI0",
      "avatar_url": "https://avatars.githubusercontent.com/u/85337624?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wenceslas-sanchez",
      "html_url": "https://github.com/wenceslas-sanchez",
      "followers_url": "https://api.github.com/users/wenceslas-sanchez/followers",
      "following_url": "https://api.github.com/users/wenceslas-sanchez/following{/other_user}",
      "gists_url": "https://api.github.com/users/wenceslas-sanchez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wenceslas-sanchez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wenceslas-sanchez/subscriptions",
      "organizations_url": "https://api.github.com/users/wenceslas-sanchez/orgs",
      "repos_url": "https://api.github.com/users/wenceslas-sanchez/repos",
      "events_url": "https://api.github.com/users/wenceslas-sanchez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wenceslas-sanchez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-13T14:20:14Z",
    "updated_at": "2023-05-13T14:20:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hi guys,\r\n\r\n\r\nI am not sure about what I am saying, don't hesitate to confirm or not. In the inactivity period, validators that don't validate attestation see their score increasing. And it decreases if they did their job. What if a validator said he wants to exit during the inactivity period (or just before); it means the validator is still active for some epoch, but don't validate; so its score increase. He exits some epochs later, during the inactivity period (or not) and its score won't change (!=0). Since the score decrease only for eligible validators, the score for an exited validator different from 0 will be kept as is until he comes back as active. \r\n\r\n\r\nMy question is, **will the inactivity score be reset to 0 for the validator that is going to get the index of the validator that lived with a score != 0 when he registers ?**\r\n\r\n\r\nThanks guys !",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1546663715/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1546785885",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/3335#issuecomment-1546785885",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/3335",
    "id": 1546785885,
    "node_id": "IC_kwDOCOoGbc5cMhRd",
    "user": {
      "login": "dapplion",
      "id": 35266934,
      "node_id": "MDQ6VXNlcjM1MjY2OTM0",
      "avatar_url": "https://avatars.githubusercontent.com/u/35266934?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dapplion",
      "html_url": "https://github.com/dapplion",
      "followers_url": "https://api.github.com/users/dapplion/followers",
      "following_url": "https://api.github.com/users/dapplion/following{/other_user}",
      "gists_url": "https://api.github.com/users/dapplion/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dapplion/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dapplion/subscriptions",
      "organizations_url": "https://api.github.com/users/dapplion/orgs",
      "repos_url": "https://api.github.com/users/dapplion/repos",
      "events_url": "https://api.github.com/users/dapplion/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dapplion/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-14T01:46:32Z",
    "updated_at": "2023-05-14T01:46:32Z",
    "author_association": "COLLABORATOR",
    "body": "> will the inactivity score be reset to 0 for the validator that is going to get the index of the validator that lived with a score != 0 when he registers ?\r\n\r\nYes, the inactivity score record is reset to zero at the moment of re-assigning the validator record\r\n\r\nhttps://github.com/ethereum/consensus-specs/blob/f7352d18cfb91c58b1addb4ea509aedd6e32165c/specs/altair/beacon-chain.md?plain=1#L540",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1546785885/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1547245011",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/3335#issuecomment-1547245011",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/3335",
    "id": 1547245011,
    "node_id": "IC_kwDOCOoGbc5cORXT",
    "user": {
      "login": "wenceslas-sanchez",
      "id": 85337624,
      "node_id": "MDQ6VXNlcjg1MzM3NjI0",
      "avatar_url": "https://avatars.githubusercontent.com/u/85337624?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wenceslas-sanchez",
      "html_url": "https://github.com/wenceslas-sanchez",
      "followers_url": "https://api.github.com/users/wenceslas-sanchez/followers",
      "following_url": "https://api.github.com/users/wenceslas-sanchez/following{/other_user}",
      "gists_url": "https://api.github.com/users/wenceslas-sanchez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wenceslas-sanchez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wenceslas-sanchez/subscriptions",
      "organizations_url": "https://api.github.com/users/wenceslas-sanchez/orgs",
      "repos_url": "https://api.github.com/users/wenceslas-sanchez/repos",
      "events_url": "https://api.github.com/users/wenceslas-sanchez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wenceslas-sanchez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-15T06:10:00Z",
    "updated_at": "2023-05-15T06:10:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "> > will the inactivity score be reset to 0 for the validator that is going to get the index of the validator that lived with a score != 0 when he registers ?\r\n> \r\n> Yes, the inactivity score record is reset to zero at the moment of re-assigning the validator record\r\n> \r\n> https://github.com/ethereum/consensus-specs/blob/f7352d18cfb91c58b1addb4ea509aedd6e32165c/specs/altair/beacon-chain.md?plain=1#L540\r\n\r\nThanks !",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1547245011/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1600262322",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/3335#issuecomment-1600262322",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/3335",
    "id": 1600262322,
    "node_id": "IC_kwDOCOoGbc5fYhCy",
    "user": {
      "login": "ppopth",
      "id": 631508,
      "node_id": "MDQ6VXNlcjYzMTUwOA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/631508?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ppopth",
      "html_url": "https://github.com/ppopth",
      "followers_url": "https://api.github.com/users/ppopth/followers",
      "following_url": "https://api.github.com/users/ppopth/following{/other_user}",
      "gists_url": "https://api.github.com/users/ppopth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ppopth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ppopth/subscriptions",
      "organizations_url": "https://api.github.com/users/ppopth/orgs",
      "repos_url": "https://api.github.com/users/ppopth/repos",
      "events_url": "https://api.github.com/users/ppopth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ppopth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-06-21T06:34:07Z",
    "updated_at": "2023-06-21T06:34:07Z",
    "author_association": "MEMBER",
    "body": "Another complicated thing about this EIP is the `equivocating_indices` field in the fork-choice [`Store`](https://github.com/ethereum/consensus-specs/blob/dev/specs/phase0/fork-choice.md#store).\r\n\r\nCurrently `equivocating_indices` keeps the list of slashed validators and it's append-only. If those validators' indices can be reused, we should have a mechanism to remove some indices from the list. I think this is not trivial and maybe complicated.\r\n\r\nI think, if you have an idea how to do it, it's quite a good idea to add it to the consensus-specs soon. Otherwise, this EIP seems unviable to me.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1600262322/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1606872586",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/3335#issuecomment-1606872586",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/3335",
    "id": 1606872586,
    "node_id": "IC_kwDOCOoGbc5fxu4K",
    "user": {
      "login": "dapplion",
      "id": 35266934,
      "node_id": "MDQ6VXNlcjM1MjY2OTM0",
      "avatar_url": "https://avatars.githubusercontent.com/u/35266934?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dapplion",
      "html_url": "https://github.com/dapplion",
      "followers_url": "https://api.github.com/users/dapplion/followers",
      "following_url": "https://api.github.com/users/dapplion/following{/other_user}",
      "gists_url": "https://api.github.com/users/dapplion/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dapplion/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dapplion/subscriptions",
      "organizations_url": "https://api.github.com/users/dapplion/orgs",
      "repos_url": "https://api.github.com/users/dapplion/repos",
      "events_url": "https://api.github.com/users/dapplion/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dapplion/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-06-26T07:31:19Z",
    "updated_at": "2023-06-26T07:31:19Z",
    "author_association": "COLLABORATOR",
    "body": "@ppopth that's a great point indeed. Clearly clients should drop reused indexes from the equivocating_indices when re-assigning to a new deposit. I wonder how specific de spec should be in that regard.\r\n\r\nFor example add a more general hook, called whenever any valid imported block triggers the reuse of an index. Clients will have to do some cache clean up anyway when a reuse event happens anyway. \r\n\r\n```python\r\ndef on_reused_index(store: Store, index: ValidatorIndex) -> None:\r\n    store.equivocating_indices.delete(index)\r\n```\r\n\r\nOr define a more specific mechanism, such as\r\n\r\n```python\r\ndef on_tick_per_epoch(store: Store, epoch: Epoch) -> None:\r\n    head_state = store.block_states[get_head(store)]\r\n\r\n    for index in equivocating_indices:\r\n        if state.validators[index].withdrawable_epoch + SAFE_EPOCHS_TO_REUSE_INDEX == epoch:\r\n            equivocating_indices.delete(index)\r\n```\r\n\r\nI would be in favor of the first approach, as I think the specific details can be iron out latter",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1606872586/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1609107340",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/3335#issuecomment-1609107340",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/3335",
    "id": 1609107340,
    "node_id": "IC_kwDOCOoGbc5f6QeM",
    "user": {
      "login": "ppopth",
      "id": 631508,
      "node_id": "MDQ6VXNlcjYzMTUwOA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/631508?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ppopth",
      "html_url": "https://github.com/ppopth",
      "followers_url": "https://api.github.com/users/ppopth/followers",
      "following_url": "https://api.github.com/users/ppopth/following{/other_user}",
      "gists_url": "https://api.github.com/users/ppopth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ppopth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ppopth/subscriptions",
      "organizations_url": "https://api.github.com/users/ppopth/orgs",
      "repos_url": "https://api.github.com/users/ppopth/repos",
      "events_url": "https://api.github.com/users/ppopth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ppopth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-06-27T09:13:51Z",
    "updated_at": "2023-06-27T09:13:51Z",
    "author_association": "MEMBER",
    "body": "> @ppopth that's a great point indeed. Clearly clients should drop reused indexes from the equivocating_indices when re-assigning to a new deposit. I wonder how specific de spec should be in that regard.\r\n\r\nI think that will introduce a new attack vector. Let `my_index` be my index.\r\n\r\nLet's say `validators[my_index].withdrawable_epoch + SAFE_EPOCHS_TO_REUSE_INDEX` is 100001.\r\n\r\nEven if the `withdrawable_epoch` is far in the past, I can still deposit some balance and makes it effective. Let's say I deposit 32 ETH in the slot 319999. Even if my balance will be withdrawn immediately in the slot 320000, that doesn't matter because my effective balance is 32 ETH already.\r\n\r\nLet's say at the beginning of the epoch 100001, epoch 100000 becomes justified, i.e. `store.justified_checkpoint.epoch` is 100000, and the state that I have effective balance will be used for the fork-choice.\r\n\r\nNow consider the `get_weight` function.\r\n```python\r\ndef get_weight(store: Store, root: Root) -> Gwei:\r\n    state = store.checkpoint_states[store.justified_checkpoint]\r\n    unslashed_and_active_indices = [\r\n        i for i in get_active_validator_indices(state, get_current_epoch(state))\r\n        if not state.validators[i].slashed\r\n    ]\r\n    attestation_score = Gwei(sum(\r\n        state.validators[i].effective_balance for i in unslashed_and_active_indices\r\n        if (i in store.latest_messages\r\n            and i not in store.equivocating_indices\r\n            and get_ancestor(store, store.latest_messages[i].root, store.blocks[root].slot) == root)\r\n    ))\r\n    ...\r\n```\r\n\r\nLet's say I'm slashed, but not slashed in the current head block. I'm slashed like in some reorg-ed block or slashed directly from the wire. You can notice that `my_index` is in `unslashed_and_active_indices` because I'm not slashed in the head block and `my_index` is also in `store.equivocating_indices` because I'm slashed in some other way.\r\n\r\nYou can notice that my effective balance will not be counted in `attestation_score`, but let's say, at slot 320035, `my_index` is reused and I'm not in `store.equivocating_indices` any more. Now my effective balance will be counted in `attestation_score`.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1609107340/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1609206034",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/3335#issuecomment-1609206034",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/3335",
    "id": 1609206034,
    "node_id": "IC_kwDOCOoGbc5f6okS",
    "user": {
      "login": "mkalinin",
      "id": 1892772,
      "node_id": "MDQ6VXNlcjE4OTI3NzI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1892772?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mkalinin",
      "html_url": "https://github.com/mkalinin",
      "followers_url": "https://api.github.com/users/mkalinin/followers",
      "following_url": "https://api.github.com/users/mkalinin/following{/other_user}",
      "gists_url": "https://api.github.com/users/mkalinin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mkalinin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mkalinin/subscriptions",
      "organizations_url": "https://api.github.com/users/mkalinin/orgs",
      "repos_url": "https://api.github.com/users/mkalinin/repos",
      "events_url": "https://api.github.com/users/mkalinin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mkalinin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-06-27T10:12:17Z",
    "updated_at": "2023-06-27T10:12:17Z",
    "author_association": "MEMBER",
    "body": "Even if a validator is removed from `equivocating_indices`, `validators[my_index].withdrawable_epoch + SAFE_EPOCHS_TO_REUSE_INDEX  == epoch` implies that it isn't active anymore and won't be counted by the `get_weight` function. Moreover, attestations from such validator won't be accepted by the network unless it is a new validator with the same index.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1609206034/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1609234994",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/3335#issuecomment-1609234994",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/3335",
    "id": 1609234994,
    "node_id": "IC_kwDOCOoGbc5f6voy",
    "user": {
      "login": "ppopth",
      "id": 631508,
      "node_id": "MDQ6VXNlcjYzMTUwOA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/631508?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ppopth",
      "html_url": "https://github.com/ppopth",
      "followers_url": "https://api.github.com/users/ppopth/followers",
      "following_url": "https://api.github.com/users/ppopth/following{/other_user}",
      "gists_url": "https://api.github.com/users/ppopth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ppopth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ppopth/subscriptions",
      "organizations_url": "https://api.github.com/users/ppopth/orgs",
      "repos_url": "https://api.github.com/users/ppopth/repos",
      "events_url": "https://api.github.com/users/ppopth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ppopth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-06-27T10:32:43Z",
    "updated_at": "2023-06-27T10:32:43Z",
    "author_association": "MEMBER",
    "body": "> Even if a validator is removed from `equivocating_indices`, `validators[my_index].withdrawable_epoch + SAFE_EPOCHS_TO_REUSE_INDEX == epoch` implies that it isn't active anymore and won't be counted by the `get_weight` function.\r\n\r\nThat's right. Thanks. I forgot the activeness.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1609234994/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
