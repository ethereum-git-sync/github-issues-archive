{
  "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2603",
  "repository_url": "https://api.github.com/repos/ethereum/consensus-specs",
  "labels_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2603/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2603/comments",
  "events_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2603/events",
  "html_url": "https://github.com/ethereum/consensus-specs/issues/2603",
  "id": 997758646,
  "node_id": "I_kwDOCOoGbc47eJa2",
  "number": 2603,
  "title": "Terminal Total Difficulty calculation may differ between nodes",
  "user": {
    "login": "ajsutton",
    "id": 72675,
    "node_id": "MDQ6VXNlcjcyNjc1",
    "avatar_url": "https://avatars.githubusercontent.com/u/72675?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ajsutton",
    "html_url": "https://github.com/ajsutton",
    "followers_url": "https://api.github.com/users/ajsutton/followers",
    "following_url": "https://api.github.com/users/ajsutton/following{/other_user}",
    "gists_url": "https://api.github.com/users/ajsutton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ajsutton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ajsutton/subscriptions",
    "organizations_url": "https://api.github.com/users/ajsutton/orgs",
    "repos_url": "https://api.github.com/users/ajsutton/repos",
    "events_url": "https://api.github.com/users/ajsutton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ajsutton/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 10,
  "created_at": "2021-09-16T04:29:04Z",
  "updated_at": "2021-09-21T14:28:21Z",
  "closed_at": "2021-09-21T14:28:20Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "Currently the merge transition process (https://github.com/ethereum/consensus-specs/blob/dev/specs/merge/fork.md#initializing-transition-store) computes the terminal total difficulty dynamically as part of `process_slot` into the first slot of `MERGE_FORK_EPOCH` and only if \"the transition store has not already been initialized\".  The transition total difficulty is then stored outside of the `BeaconState` so is not fork aware or part of consensus (until the terminal PoW block is actually reached).\r\n\r\nThere are a couple of ways that nodes may wind up with an incorrect terminal total difficulty using the current spec.\r\n\r\n## Problem Sources \r\n\r\n### Checkpoint Sync\r\n\r\nIf a node uses checkpoint sync with a state between `MERGE_FORK_EPOCH` and the terminal PoW block being included, it will never initialise the transition store because the `state.slot % SLOTS_PER_EPOCH == 0, compute_epoch_at_slot(state.slot) == MERGE_FORK_EPOCH` condition will never be met (the state is already past that point).  Such a node will then reject any block that includes a non-empty `ExecutionPayload` and fail to follow the chain when the merge completes.\r\n\r\nIt has taken quite a bit of time to establish ways for users to easily access a `BeaconState` to use as part of checkpoint sync, so requiring the `BeaconState` plus the TTD value to be supplied would be a significant step backwards in usability and the progression away from always replaying every block to sync the beacon chain.\r\n\r\nClients supporting checkpoint sync would need to release an update once the TTD is known to hard code it in the client to resolve this.\r\n\r\n### Forks\r\n\r\nAs the transition store is initialised the first time a node processes slots into the merge epoch, it's possible for different nodes to use states from different forks when setting the TTD. This is further complicated because many beacon chain clients pre-process slot and epoch transitions as a performance optimisation.\r\n\r\nTo give a concrete example, lets say MERGE_FORK_EPOCH=100 and thus slot 3199 is the last slot before the merge fork activates and slot 3200 the first one after it.  And also assume epoch 100 is the end of the eth1 voting period (probably not actually true but makes numbers nice and round).\r\n\r\nAt slot 3198, the Eth1Data voting process is one vote short of agreeing on the new Eth1Data.\r\nAt slot 3199, a block is published to a minority of nodes which provides that last required vote.\r\nNodes that receive block 3199 and pre-process the epoch transition, will now initialize their transition store because they're following a fork where block 3199 is included on the chain.\r\nThen block 3200 is received which uses block 3198 as its parent and it is accepted as the canonical chain, orphaning block 3199.  Thus the canonical Eth1Data is the old one because 50% was never reached.\r\n\r\nAt this point there's no visible consensus split - all nodes will reorg over to block 3200 and use the old Eth1Data as canonical for including deposits etc.  However the minority of nodes which did receive block 3199 will have initialised TransitionStore based on the new Eth1Data, calculating a different terminal total difficulty to the other nodes.  When the earlier of the terminal difficulties is reach the chain split will be revealed as different nodes will expect a different terminal PoW block.\r\n\r\nAnother issue that arises from not having the TTD stored outside of the `BeaconState` and thus not being fork aware, is that clients may separate processing empty slots from applying a block. In that case even receiving an invalid block could still cause the TTD to be set because the `process_slots` operation was performed independently and wouldn't be rolled back when the block processing fails. There's a large number of variations of this kind of problem including REST APIs that could cause a beacon node to process empty slots and thus trigger initialisation of the transition store.\r\n\r\nFundamentally, introducing side effects to `process_slots` is a very significant change to the design assumptions for beacon node clients.\r\n\r\n## Possible Solutions\r\n\r\n### Store TTD in `BeaconState`\r\n\r\nWe could remove the side effects from `process_slots` and restore the ability to process any block given only the pre-state but adding a field to `BeaconState` which stores the calculated TTD.  This would be set as part of the `upgrade_to_merge` function. It's still slightly awkward that the total difficulty for the Eth1Data block would need to be known and isn't available from the state but that's readily available from the execution engine and is only required for this special state transition.\r\n\r\nThe downside is this would be a new field that would then be removed again in the next consensus upgrade.\r\n\r\nIt would also be effectively impossible to override the TTD via an API as it would require an irregular state transition.\r\n\r\n\r\n### Initialize `TransitionStore` on Finalization\r\n\r\nThe \"Forks\" problems could be solved by only initializing the `TransitionStore` when the `MERGE_FORK_EPOCH` is finalized. There is then only one possible fork.  Checkpoint sync would remain broken and require clients to ship a release with the TTD hard coded\r\n\r\n### Hard code TTD\r\n\r\nWe could scrap calculating the TTD and just hard code it in clients. The key downside of this is that providing sufficient notice for users to upgrade would mean setting a TTD far in the future (see Rationale in https://github.com/ethereum/consensus-specs/pull/2462).\r\n\r\nThis could be mitigated by setting expectations that users will need to upgrade their consensus clients twice for the merge.  The first upgrade includes sets the `MERGE_FORK_EPOCH` and the second would be shipped shortly after `MERGE_FORK_EPOCH` is reached and include the hard coded TTD.  This is what users were told to expect for the beacon chain launch as well - that a client update would be released in the week between genesis being set and the chain actually starting (so that if the genesis was calculated incorrectly the update could fix it - in the end clients agreed but a release still went out to embed the genesis state in that week).",
  "closed_by": {
    "login": "djrtwo",
    "id": 1433595,
    "node_id": "MDQ6VXNlcjE0MzM1OTU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/djrtwo",
    "html_url": "https://github.com/djrtwo",
    "followers_url": "https://api.github.com/users/djrtwo/followers",
    "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
    "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
    "organizations_url": "https://api.github.com/users/djrtwo/orgs",
    "repos_url": "https://api.github.com/users/djrtwo/repos",
    "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
    "received_events_url": "https://api.github.com/users/djrtwo/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2603/reactions",
    "total_count": 3,
    "+1": 3,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2603/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/920582786",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2603#issuecomment-920582786",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2603",
    "id": 920582786,
    "node_id": "IC_kwDOCOoGbc423vqC",
    "user": {
      "login": "ajsutton",
      "id": 72675,
      "node_id": "MDQ6VXNlcjcyNjc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/72675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajsutton",
      "html_url": "https://github.com/ajsutton",
      "followers_url": "https://api.github.com/users/ajsutton/followers",
      "following_url": "https://api.github.com/users/ajsutton/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajsutton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajsutton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajsutton/subscriptions",
      "organizations_url": "https://api.github.com/users/ajsutton/orgs",
      "repos_url": "https://api.github.com/users/ajsutton/repos",
      "events_url": "https://api.github.com/users/ajsutton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajsutton/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-16T05:13:27Z",
    "updated_at": "2021-09-16T05:13:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "Actually, rather than storing the TTD in the state, we should just add a new field that records the total difficulty of the block referenced in Eth1Data when `MERGE_FORK_EPOCH` is reached (ie store the input to the computation rather than the output).  Then it would still make sense to override the final calculated total difficulty via an API - you'd be essentially replacing the calculation but the input recorded in the state would remain the same.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/920582786/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/920858706",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2603#issuecomment-920858706",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2603",
    "id": 920858706,
    "node_id": "IC_kwDOCOoGbc424zBS",
    "user": {
      "login": "mkalinin",
      "id": 1892772,
      "node_id": "MDQ6VXNlcjE4OTI3NzI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1892772?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mkalinin",
      "html_url": "https://github.com/mkalinin",
      "followers_url": "https://api.github.com/users/mkalinin/followers",
      "following_url": "https://api.github.com/users/mkalinin/following{/other_user}",
      "gists_url": "https://api.github.com/users/mkalinin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mkalinin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mkalinin/subscriptions",
      "organizations_url": "https://api.github.com/users/mkalinin/orgs",
      "repos_url": "https://api.github.com/users/mkalinin/repos",
      "events_url": "https://api.github.com/users/mkalinin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mkalinin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-16T12:29:57Z",
    "updated_at": "2021-09-16T12:48:35Z",
    "author_association": "MEMBER",
    "body": "Good catch! 👍 \r\n\r\nOriginally, there was no \"the transition store has not already been initialized\" requirement in the spec and it was assumed that `TransitionStore` is re-initialized each time the epoch boundary is crossed. What was missed in the original mechanics is an edge case with processing a block that affects eth1 data poll results. This could happen when either finality is delayed or there are two strong `Eth1Data` candidates at the end of the voting period.\r\n\r\nThe moment of calling the `engine_terminalTotalDifficultyUpdated` to the execution client might also be important and taken into consideration. In one of the corner cases described above (when a block from a fork triggers the Merge fork upgrade function) the correct TTD value could be overwritten by an incorrect one. It could be solved by sending the message after `MERGE_FORK_EPOCH` is finalized or by hardcoding the TTD value, or by sending this message only when the new fork becomes canonical.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/920858706/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/920966760",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2603#issuecomment-920966760",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2603",
    "id": 920966760,
    "node_id": "IC_kwDOCOoGbc425NZo",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-16T14:44:10Z",
    "updated_at": "2021-09-16T14:44:10Z",
    "author_association": "MEMBER",
    "body": "tbh, I'm more and more in favor of hard-coding TTD again.\r\n\r\nThis would simplify the mechanism and edgecases.\r\n\r\nAnd because the TTD could ship in consensus and execution clients, this would also prevent users that run pre-merge execution-engine implementations *without* a beacon node from accidentally following the PoW chain for a long time after the merge, and instead result in a failure that would be noticed and resolved.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/920966760/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/920968408",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2603#issuecomment-920968408",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2603",
    "id": 920968408,
    "node_id": "IC_kwDOCOoGbc425NzY",
    "user": {
      "login": "mkalinin",
      "id": 1892772,
      "node_id": "MDQ6VXNlcjE4OTI3NzI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1892772?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mkalinin",
      "html_url": "https://github.com/mkalinin",
      "followers_url": "https://api.github.com/users/mkalinin/followers",
      "following_url": "https://api.github.com/users/mkalinin/following{/other_user}",
      "gists_url": "https://api.github.com/users/mkalinin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mkalinin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mkalinin/subscriptions",
      "organizations_url": "https://api.github.com/users/mkalinin/orgs",
      "repos_url": "https://api.github.com/users/mkalinin/repos",
      "events_url": "https://api.github.com/users/mkalinin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mkalinin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-16T14:46:03Z",
    "updated_at": "2021-09-16T14:55:39Z",
    "author_association": "MEMBER",
    "body": "> tbh, I'm more and more in favor of hard-coding TTD again.\r\n> \r\n> This would simplify the mechanism and edgecases.\r\n> \r\n> And because the TTD could ship in consensus and execution clients, this would also prevent users that run pre-merge execution-engine implementations _without_ a beacon node from accidentally following the PoW chain for a long time after the merge, and instead result in a failure that would be noticed and resolved.\r\n\r\nI second that. In this case won't a single release for the execution client containing hardcoded TTD and the Merge logic be enough?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/920968408/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/921175398",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2603#issuecomment-921175398",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2603",
    "id": 921175398,
    "node_id": "IC_kwDOCOoGbc426AVm",
    "user": {
      "login": "dapplion",
      "id": 35266934,
      "node_id": "MDQ6VXNlcjM1MjY2OTM0",
      "avatar_url": "https://avatars.githubusercontent.com/u/35266934?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dapplion",
      "html_url": "https://github.com/dapplion",
      "followers_url": "https://api.github.com/users/dapplion/followers",
      "following_url": "https://api.github.com/users/dapplion/following{/other_user}",
      "gists_url": "https://api.github.com/users/dapplion/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dapplion/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dapplion/subscriptions",
      "organizations_url": "https://api.github.com/users/dapplion/orgs",
      "repos_url": "https://api.github.com/users/dapplion/repos",
      "events_url": "https://api.github.com/users/dapplion/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dapplion/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-16T19:13:22Z",
    "updated_at": "2021-09-16T19:15:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "@ajsutton I was wondering the same.\r\n\r\nIf a beacon node process more than one epoch boundary such that epoch == MERGE_FORK_EPOCH, should it compute terminal_total_difficulty again and overwrite the existing value in the store?\r\n\r\nIf TTD is hard-coded, what happens if TTD is reached before whatever condition is picked to activate the merge fork?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/921175398/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/921248681",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2603#issuecomment-921248681",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2603",
    "id": 921248681,
    "node_id": "IC_kwDOCOoGbc426SOp",
    "user": {
      "login": "ajsutton",
      "id": 72675,
      "node_id": "MDQ6VXNlcjcyNjc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/72675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajsutton",
      "html_url": "https://github.com/ajsutton",
      "followers_url": "https://api.github.com/users/ajsutton/followers",
      "following_url": "https://api.github.com/users/ajsutton/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajsutton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajsutton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajsutton/subscriptions",
      "organizations_url": "https://api.github.com/users/ajsutton/orgs",
      "repos_url": "https://api.github.com/users/ajsutton/repos",
      "events_url": "https://api.github.com/users/ajsutton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajsutton/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-16T21:13:23Z",
    "updated_at": "2021-09-16T21:13:23Z",
    "author_association": "CONTRIBUTOR",
    "body": "> If a beacon node process more than one epoch boundary such that epoch == MERGE_FORK_EPOCH, should it compute terminal_total_difficulty again and overwrite the existing value in the store?\r\n\r\nI think this is fundamentally the problem - it doesn't matter if you take the first or the last value you always have the potential for a chain split.  I think using the last value is more vulnerable to attack since it allows someone to just publish their block late to ensure they're what sets the TTD but neither really works.  You'd have to wait until the MERGE_FORK_EPOCH is finalized to make it reliable.\r\n\r\n> If TTD is hard-coded, what happens if TTD is reached before whatever condition is picked to activate the merge fork?\r\n\r\nThat would go quite badly, likely leading to a chain halt.  We'd need to pick a TTD that's far enough in the future that we're confident the merge epoch will be reached first.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/921248681/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/921527416",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2603#issuecomment-921527416",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2603",
    "id": 921527416,
    "node_id": "IC_kwDOCOoGbc427WR4",
    "user": {
      "login": "mkalinin",
      "id": 1892772,
      "node_id": "MDQ6VXNlcjE4OTI3NzI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1892772?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mkalinin",
      "html_url": "https://github.com/mkalinin",
      "followers_url": "https://api.github.com/users/mkalinin/followers",
      "following_url": "https://api.github.com/users/mkalinin/following{/other_user}",
      "gists_url": "https://api.github.com/users/mkalinin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mkalinin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mkalinin/subscriptions",
      "organizations_url": "https://api.github.com/users/mkalinin/orgs",
      "repos_url": "https://api.github.com/users/mkalinin/repos",
      "events_url": "https://api.github.com/users/mkalinin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mkalinin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-17T06:12:22Z",
    "updated_at": "2021-09-17T06:14:12Z",
    "author_association": "MEMBER",
    "body": "> That would go quite badly, likely leading to a chain halt. We'd need to pick a TTD that's far enough in the future that we're confident the merge epoch will be reached first.\r\n\r\nWhat if we do it as follows:\r\n1. Release consensus clients with the Merge HF logic and `TTD = 2**256-1`\r\n2. Wait for the HF to happen\r\n3. Release consensus clients with hardcoded TTD and execution clients with the Merge logic including hardcoded TTD\r\n4. Wait for the transition to happen\r\n\r\nAt the first glance this may work but I might have missed something. This approach would guarantee that TTD hits after the Merge HF. Even if someone would include a non-empty payload into a beacon block signifying the transition before execution clients get shipped with the Merge logic it will be rejected by the Merge logic on the beacon chain side as `TTD` won't be met. This check can be done with JSON-RPC API methods and doesn't require Engine API to be implemented allowing for execution clients to stay at their pre-Merge versions while consensus clients are already upgraded.\r\n\r\nThis approach should not stretch the period of the whole upgrading process as we will likely need to wait a month for the Merge HF, then yet another month (2 weeks) for the transition vs releasing everything at once with TTD hitting in 1.5-2 months with the same intention (a months for the HF and 0.5-1 months for transition).\r\n\r\nThis approach should save us one extra release of the execution client software. In my mental model updating execution clients is more resourceful than updating consensus clients. I might be wrong though and then this proposal might not make sense.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/921527416/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/921534949",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2603#issuecomment-921534949",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2603",
    "id": 921534949,
    "node_id": "IC_kwDOCOoGbc427YHl",
    "user": {
      "login": "mkalinin",
      "id": 1892772,
      "node_id": "MDQ6VXNlcjE4OTI3NzI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1892772?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mkalinin",
      "html_url": "https://github.com/mkalinin",
      "followers_url": "https://api.github.com/users/mkalinin/followers",
      "following_url": "https://api.github.com/users/mkalinin/following{/other_user}",
      "gists_url": "https://api.github.com/users/mkalinin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mkalinin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mkalinin/subscriptions",
      "organizations_url": "https://api.github.com/users/mkalinin/orgs",
      "repos_url": "https://api.github.com/users/mkalinin/repos",
      "events_url": "https://api.github.com/users/mkalinin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mkalinin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-17T06:29:55Z",
    "updated_at": "2021-09-17T06:29:55Z",
    "author_association": "MEMBER",
    "body": "> This check can be done with JSON-RPC API methods and doesn't require Engine API to be implemented allowing for execution clients to stay at their pre-Merge versions while consensus clients are already upgraded.\r\n\r\nAfter this change https://github.com/ethereum/consensus-specs/pull/2595 this statement became unsound as `process_execution_payload` happens *before* the terminal PoW block conditions are verified. Proper handling of this edge case could be done by adding `TERMINAL_TOTAL_DIFFICULTY <= 2**256-1` assertion to the `process_execution_payload` function which should be straightforward.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/921534949/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/921658710",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2603#issuecomment-921658710",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2603",
    "id": 921658710,
    "node_id": "IC_kwDOCOoGbc4272VW",
    "user": {
      "login": "dapplion",
      "id": 35266934,
      "node_id": "MDQ6VXNlcjM1MjY2OTM0",
      "avatar_url": "https://avatars.githubusercontent.com/u/35266934?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dapplion",
      "html_url": "https://github.com/dapplion",
      "followers_url": "https://api.github.com/users/dapplion/followers",
      "following_url": "https://api.github.com/users/dapplion/following{/other_user}",
      "gists_url": "https://api.github.com/users/dapplion/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dapplion/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dapplion/subscriptions",
      "organizations_url": "https://api.github.com/users/dapplion/orgs",
      "repos_url": "https://api.github.com/users/dapplion/repos",
      "events_url": "https://api.github.com/users/dapplion/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dapplion/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-17T09:40:56Z",
    "updated_at": "2021-09-17T09:43:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "@mkalinin If TTD is hard-coded, what happens if miners stop mining the Ethereum chain early and that total difficulty is never reached? Since their revenue will drop to 0 at day N, it's not a huge difference from stopping getting revenue at day N-1. I guess this scenario affects all approaches discussed in this PR and current master.\r\n\r\nEDIT: Oh already brought up in https://github.com/ethereum/consensus-specs/issues/2547 :+1: ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/921658710/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/924044336",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2603#issuecomment-924044336",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2603",
    "id": 924044336,
    "node_id": "IC_kwDOCOoGbc43E8ww",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-21T14:28:20Z",
    "updated_at": "2021-09-21T14:28:20Z",
    "author_association": "MEMBER",
    "body": "closed via #2605\r\nthanks @ajsutton!",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/924044336/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
