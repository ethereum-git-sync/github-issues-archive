{
  "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1932",
  "repository_url": "https://api.github.com/repos/ethereum/consensus-specs",
  "labels_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1932/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1932/comments",
  "events_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1932/events",
  "html_url": "https://github.com/ethereum/consensus-specs/issues/1932",
  "id": 645037350,
  "node_id": "MDU6SXNzdWU2NDUwMzczNTA=",
  "number": 1932,
  "title": "Side effects in functions",
  "user": {
    "login": "franck44",
    "id": 14901362,
    "node_id": "MDQ6VXNlcjE0OTAxMzYy",
    "avatar_url": "https://avatars.githubusercontent.com/u/14901362?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/franck44",
    "html_url": "https://github.com/franck44",
    "followers_url": "https://api.github.com/users/franck44/followers",
    "following_url": "https://api.github.com/users/franck44/following{/other_user}",
    "gists_url": "https://api.github.com/users/franck44/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/franck44/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/franck44/subscriptions",
    "organizations_url": "https://api.github.com/users/franck44/orgs",
    "repos_url": "https://api.github.com/users/franck44/repos",
    "events_url": "https://api.github.com/users/franck44/events{/privacy}",
    "received_events_url": "https://api.github.com/users/franck44/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1244734333,
      "node_id": "MDU6TGFiZWwxMjQ0NzM0MzMz",
      "url": "https://api.github.com/repos/ethereum/consensus-specs/labels/general:presentation",
      "name": "general:presentation",
      "color": "2EA9DF",
      "default": false,
      "description": "Presentation (as opposed to content)"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": {
    "login": "adiasg",
    "id": 25324105,
    "node_id": "MDQ6VXNlcjI1MzI0MTA1",
    "avatar_url": "https://avatars.githubusercontent.com/u/25324105?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/adiasg",
    "html_url": "https://github.com/adiasg",
    "followers_url": "https://api.github.com/users/adiasg/followers",
    "following_url": "https://api.github.com/users/adiasg/following{/other_user}",
    "gists_url": "https://api.github.com/users/adiasg/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/adiasg/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/adiasg/subscriptions",
    "organizations_url": "https://api.github.com/users/adiasg/orgs",
    "repos_url": "https://api.github.com/users/adiasg/repos",
    "events_url": "https://api.github.com/users/adiasg/events{/privacy}",
    "received_events_url": "https://api.github.com/users/adiasg/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "adiasg",
      "id": 25324105,
      "node_id": "MDQ6VXNlcjI1MzI0MTA1",
      "avatar_url": "https://avatars.githubusercontent.com/u/25324105?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adiasg",
      "html_url": "https://github.com/adiasg",
      "followers_url": "https://api.github.com/users/adiasg/followers",
      "following_url": "https://api.github.com/users/adiasg/following{/other_user}",
      "gists_url": "https://api.github.com/users/adiasg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adiasg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adiasg/subscriptions",
      "organizations_url": "https://api.github.com/users/adiasg/orgs",
      "repos_url": "https://api.github.com/users/adiasg/repos",
      "events_url": "https://api.github.com/users/adiasg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adiasg/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/milestones/6",
    "html_url": "https://github.com/ethereum/consensus-specs/milestone/6",
    "labels_url": "https://api.github.com/repos/ethereum/consensus-specs/milestones/6/labels",
    "id": 5797403,
    "node_id": "MDk6TWlsZXN0b25lNTc5NzQwMw==",
    "number": 6,
    "title": "ðŸ”µ v1.0.0 candidates",
    "description": "",
    "creator": {
      "login": "hwwhww",
      "id": 9263930,
      "node_id": "MDQ6VXNlcjkyNjM5MzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9263930?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hwwhww",
      "html_url": "https://github.com/hwwhww",
      "followers_url": "https://api.github.com/users/hwwhww/followers",
      "following_url": "https://api.github.com/users/hwwhww/following{/other_user}",
      "gists_url": "https://api.github.com/users/hwwhww/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hwwhww/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hwwhww/subscriptions",
      "organizations_url": "https://api.github.com/users/hwwhww/orgs",
      "repos_url": "https://api.github.com/users/hwwhww/repos",
      "events_url": "https://api.github.com/users/hwwhww/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hwwhww/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 10,
    "closed_issues": 7,
    "state": "closed",
    "created_at": "2020-08-21T16:23:12Z",
    "updated_at": "2023-12-11T13:23:01Z",
    "due_on": null,
    "closed_at": "2021-05-04T14:59:24Z"
  },
  "comments": 8,
  "created_at": "2020-06-24T23:19:35Z",
  "updated_at": "2023-12-11T13:22:30Z",
  "closed_at": "2023-12-11T13:22:30Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "The specs seem to use different types of signatures for functions. for instance:\r\n\r\nCase 1:\r\n```\r\ndef state_transition(state: BeaconState, signed_block: SignedBeaconBlock, validate_result: bool=True) -> BeaconState:\r\n block = signed_block.message\r\n    # Process slots (including those with no blocks) since block\r\n    process_slots(state, block.slot)\r\n    # Verify signature\r\n    if validate_result:\r\n        assert verify_block_signature(state, signed_block)\r\n    # Process block\r\n    process_block(state, block)\r\n    # Verify state root\r\n    if validate_result:\r\n        assert block.state_root == hash_tree_root(state)\r\n    # Return post-state\r\n    return state\r\n```\r\n\r\nand case 2:\r\n\r\n```\r\ndef process_slots(state: BeaconState, slot: Slot) -> None:\r\n    assert state.slot < slot\r\n    while state.slot < slot:\r\n        process_slot(state)\r\n        # Process epoch on the start slot of the next epoch\r\n        if (state.slot + 1) % SLOTS_PER_EPOCH == 0:\r\n            process_epoch(state)\r\n        state.slot = Slot(state.slot + 1)\r\n```\r\n\r\nIn case 1, it seems redundant to return a `BeaconState` because the `state` variable is passed by reference (I am not Python expert, but AFAIK `state` is mutable and hence passed by reference.) But the fact that the function's return type is a `BeaconState` also gives a false sense of immutability of the input object `state`. The result is actually in `state` (side-effect and in the returned value.\r\n\r\nIn case 2, the mutability of the parameter `state` is used and instead of returning a `state`, `process_slots` modifies `state`, so the result is obtained by a side-effect on input parameter `state` (passed by reference).\r\n\r\n**Main question:** How is the choice of a function signature determined in the specs? \r\nSome functions rely on side-effects, and some may not.\r\n\r\nPython parameters' passing and the interference with local storage is known to be rather cumbersome as described in the additional comment below, so a clear and principled way of specifying functions may help reducing of problems that can arise in implementations.\r\n\r\n**Additional comment**\r\nFor instance (again, I am not a Python expert, so if this is wrong, please correct me), the following code may not have any side-effect on `state` and leave the input parameter (although passed by reference) `state` unchanged:\r\n```\r\nclass BeaconState:\r\n    def __init__(self, slot):\r\n        self.slot = slot\r\n\r\ndef process_slots(state: BeaconState, slot: int) -> None:\r\n    s = BeaconState(0)\r\n    s.slot = state.slot\r\n    # the value of s is the same as the initial value of state\r\n    state = s\r\n    while state.slot < slot:\r\n        state.slot = (state.slot + 1)\r\n\r\n# k is a BeaconState\r\nk = BeaconState(2)\r\nprint (k.slot) # Result is 2\r\nprocess_slots(k, 4)\r\nprint (k.slot) # result is still 2\r\n```\r\n\r\nThe specs may benefit from a clearer definition of the functions (without side-effects).\r\n",
  "closed_by": {
    "login": "hwwhww",
    "id": 9263930,
    "node_id": "MDQ6VXNlcjkyNjM5MzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/9263930?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hwwhww",
    "html_url": "https://github.com/hwwhww",
    "followers_url": "https://api.github.com/users/hwwhww/followers",
    "following_url": "https://api.github.com/users/hwwhww/following{/other_user}",
    "gists_url": "https://api.github.com/users/hwwhww/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hwwhww/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hwwhww/subscriptions",
    "organizations_url": "https://api.github.com/users/hwwhww/orgs",
    "repos_url": "https://api.github.com/users/hwwhww/repos",
    "events_url": "https://api.github.com/users/hwwhww/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hwwhww/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1932/reactions",
    "total_count": 5,
    "+1": 4,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 1,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1932/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/649444952",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1932#issuecomment-649444952",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1932",
    "id": 649444952,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0OTQ0NDk1Mg==",
    "user": {
      "login": "mratsim",
      "id": 22738317,
      "node_id": "MDQ6VXNlcjIyNzM4MzE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/22738317?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mratsim",
      "html_url": "https://github.com/mratsim",
      "followers_url": "https://api.github.com/users/mratsim/followers",
      "following_url": "https://api.github.com/users/mratsim/following{/other_user}",
      "gists_url": "https://api.github.com/users/mratsim/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mratsim/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mratsim/subscriptions",
      "organizations_url": "https://api.github.com/users/mratsim/orgs",
      "repos_url": "https://api.github.com/users/mratsim/repos",
      "events_url": "https://api.github.com/users/mratsim/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mratsim/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-25T10:08:20Z",
    "updated_at": "2020-06-25T10:08:20Z",
    "author_association": "CONTRIBUTOR",
    "body": "I wonder if there is a way to tag additional markers like var or mut in MyPy?\r\n\r\n```python\r\ndef state_transition(state: mut BeaconState, signed_block: SignedBeaconBlock, validate_result: bool=True) -> BeaconState:\r\n block = signed_block.message\r\n    # Process slots (including those with no blocks) since block\r\n    process_slots(state, block.slot)\r\n    # Verify signature\r\n    if validate_result:\r\n        assert verify_block_signature(state, signed_block)\r\n    # Process block\r\n    process_block(state, block)\r\n    # Verify state root\r\n    if validate_result:\r\n        assert block.state_root == hash_tree_root(state)\r\n    # Return post-state\r\n    return state\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/649444952/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/649608281",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1932#issuecomment-649608281",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1932",
    "id": 649608281,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0OTYwODI4MQ==",
    "user": {
      "login": "hwwhww",
      "id": 9263930,
      "node_id": "MDQ6VXNlcjkyNjM5MzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9263930?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hwwhww",
      "html_url": "https://github.com/hwwhww",
      "followers_url": "https://api.github.com/users/hwwhww/followers",
      "following_url": "https://api.github.com/users/hwwhww/following{/other_user}",
      "gists_url": "https://api.github.com/users/hwwhww/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hwwhww/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hwwhww/subscriptions",
      "organizations_url": "https://api.github.com/users/hwwhww/orgs",
      "repos_url": "https://api.github.com/users/hwwhww/repos",
      "events_url": "https://api.github.com/users/hwwhww/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hwwhww/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-25T15:07:09Z",
    "updated_at": "2020-06-25T15:12:52Z",
    "author_association": "MEMBER",
    "body": "Yeah, I felt the same.\r\nOld issue and some options: https://github.com/ethereum/eth2.0-specs/issues/1059\r\n\r\nI feel it's a bit late to make it side-effect-free in phase 0, I'd defer to the client teams.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/649608281/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/649874042",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1932#issuecomment-649874042",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1932",
    "id": 649874042,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0OTg3NDA0Mg==",
    "user": {
      "login": "franck44",
      "id": 14901362,
      "node_id": "MDQ6VXNlcjE0OTAxMzYy",
      "avatar_url": "https://avatars.githubusercontent.com/u/14901362?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/franck44",
      "html_url": "https://github.com/franck44",
      "followers_url": "https://api.github.com/users/franck44/followers",
      "following_url": "https://api.github.com/users/franck44/following{/other_user}",
      "gists_url": "https://api.github.com/users/franck44/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/franck44/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/franck44/subscriptions",
      "organizations_url": "https://api.github.com/users/franck44/orgs",
      "repos_url": "https://api.github.com/users/franck44/repos",
      "events_url": "https://api.github.com/users/franck44/events{/privacy}",
      "received_events_url": "https://api.github.com/users/franck44/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-25T23:56:10Z",
    "updated_at": "2020-06-25T23:56:10Z",
    "author_association": "NONE",
    "body": "Sorry did not see there was another issue with the same topic.\r\nAltogether, this is probably dangerous to delegate a lot to client teams, and it does not make their life easy, nor does it open the door to implementations in side-effect free languages like Haskell.\r\n\r\nThis seems to indicate that Python may not be the best candidate to develop easy-to-read and sound specifications.\r\nThere are lots of specification-friendly languages, in which we can write readable, verifiable, and documented specs, without bothering about Python specific side-effect problems.\r\n\r\nAn example is Dafny, and we have already written dozens of function specifications like [state_transition](https://github.com/PegaSysEng/eth2.0-dafny/blob/3f6198a649ade81aedc03ecca325fbd2a5501971/src/dafny/beacon/StateTransition.dfy#L157), with a clear semantics, easy to read, documented and machine checked.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/649874042/reactions",
      "total_count": 2,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 2,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/650200824",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1932#issuecomment-650200824",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1932",
    "id": 650200824,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1MDIwMDgyNA==",
    "user": {
      "login": "adiasg",
      "id": 25324105,
      "node_id": "MDQ6VXNlcjI1MzI0MTA1",
      "avatar_url": "https://avatars.githubusercontent.com/u/25324105?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adiasg",
      "html_url": "https://github.com/adiasg",
      "followers_url": "https://api.github.com/users/adiasg/followers",
      "following_url": "https://api.github.com/users/adiasg/following{/other_user}",
      "gists_url": "https://api.github.com/users/adiasg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adiasg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adiasg/subscriptions",
      "organizations_url": "https://api.github.com/users/adiasg/orgs",
      "repos_url": "https://api.github.com/users/adiasg/repos",
      "events_url": "https://api.github.com/users/adiasg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adiasg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-26T14:11:17Z",
    "updated_at": "2020-06-26T14:11:17Z",
    "author_association": "MEMBER",
    "body": ">@franck44 \r\nBut the fact that the function's return type is a BeaconState also gives a false sense of immutability of the input object state. The result is actually in state (side-effect and in the returned value.\r\n\r\nI agree with this. In fact, on a first reading of the spec, I also interpreted `state_transition` to be a pure function based just on it's signature.\r\n\r\n> @franck44 \r\nThe specs may benefit from a clearer definition of the functions (without side-effects).\r\n\r\nAgain, I agree with this. \r\nAs a first step, I think that documenting the current behavior will largely help first-time readers to understand the spec swiftly & correctly. I also support the larger goal of making the spec more \"functional\" in it's behavior. \r\n\r\nI'll bring up this issue in the next spec team call & post updates in this thread.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/650200824/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/650839963",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1932#issuecomment-650839963",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1932",
    "id": 650839963,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1MDgzOTk2Mw==",
    "user": {
      "login": "franck44",
      "id": 14901362,
      "node_id": "MDQ6VXNlcjE0OTAxMzYy",
      "avatar_url": "https://avatars.githubusercontent.com/u/14901362?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/franck44",
      "html_url": "https://github.com/franck44",
      "followers_url": "https://api.github.com/users/franck44/followers",
      "following_url": "https://api.github.com/users/franck44/following{/other_user}",
      "gists_url": "https://api.github.com/users/franck44/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/franck44/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/franck44/subscriptions",
      "organizations_url": "https://api.github.com/users/franck44/orgs",
      "repos_url": "https://api.github.com/users/franck44/repos",
      "events_url": "https://api.github.com/users/franck44/events{/privacy}",
      "received_events_url": "https://api.github.com/users/franck44/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-28T23:55:11Z",
    "updated_at": "2020-06-28T23:55:11Z",
    "author_association": "NONE",
    "body": "@adiasg if there is anything we can do to help in the discussion (e.g. present the work we are doing with Dafny) let me know.\r\nWe have written a functional formal spec for almost all of the functions and we are happy to share our experience.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/650839963/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/651892368",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1932#issuecomment-651892368",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1932",
    "id": 651892368,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1MTg5MjM2OA==",
    "user": {
      "login": "adiasg",
      "id": 25324105,
      "node_id": "MDQ6VXNlcjI1MzI0MTA1",
      "avatar_url": "https://avatars.githubusercontent.com/u/25324105?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adiasg",
      "html_url": "https://github.com/adiasg",
      "followers_url": "https://api.github.com/users/adiasg/followers",
      "following_url": "https://api.github.com/users/adiasg/following{/other_user}",
      "gists_url": "https://api.github.com/users/adiasg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adiasg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adiasg/subscriptions",
      "organizations_url": "https://api.github.com/users/adiasg/orgs",
      "repos_url": "https://api.github.com/users/adiasg/repos",
      "events_url": "https://api.github.com/users/adiasg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adiasg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-30T16:06:30Z",
    "updated_at": "2020-06-30T16:06:30Z",
    "author_association": "MEMBER",
    "body": "Update from spec team call:\r\nThe general view is that re-writing the Python specification to be more functional will change its structure significantly, and deviate from the primary goal of serving as an implementation guide for client teams. There are some things which are undesirable in the current version of the pyspec, such as the misleading function signature of `state_transition`, which should be rectified in the coming versions.\r\n\r\nOn the other hand, this Python specification should have a \"how to use\" manual that helps newcomers to correctly understand it. \r\n\r\nFor users that require a more formal specification, there is Runtime Verification's [K model](https://github.com/runtimeverification/beacon-chain-spec), and now a [Dafny model](https://github.com/PegaSysEng/eth2.0-dafny) from @franck44 & PegaSysEng.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/651892368/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/702857883",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1932#issuecomment-702857883",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1932",
    "id": 702857883,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwMjg1Nzg4Mw==",
    "user": {
      "login": "dankrad",
      "id": 6130607,
      "node_id": "MDQ6VXNlcjYxMzA2MDc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6130607?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dankrad",
      "html_url": "https://github.com/dankrad",
      "followers_url": "https://api.github.com/users/dankrad/followers",
      "following_url": "https://api.github.com/users/dankrad/following{/other_user}",
      "gists_url": "https://api.github.com/users/dankrad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dankrad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dankrad/subscriptions",
      "organizations_url": "https://api.github.com/users/dankrad/orgs",
      "repos_url": "https://api.github.com/users/dankrad/repos",
      "events_url": "https://api.github.com/users/dankrad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dankrad/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-02T17:22:21Z",
    "updated_at": "2020-10-02T17:22:21Z",
    "author_association": "MEMBER",
    "body": "> There are some things which are undesirable in the current version of the pyspec, such as the misleading function signature of `state_transition`, which should be rectified in the coming versions.\r\n\r\nJust wanted to highlight that this should definitely be done. Reading some client code I found it very confusing and then saw that they copied one for one what the spec does. Doesn't look great.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/702857883/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1850070665",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1932#issuecomment-1850070665",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1932",
    "id": 1850070665,
    "node_id": "IC_kwDOCOoGbc5uRdaJ",
    "user": {
      "login": "hwwhww",
      "id": 9263930,
      "node_id": "MDQ6VXNlcjkyNjM5MzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9263930?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hwwhww",
      "html_url": "https://github.com/hwwhww",
      "followers_url": "https://api.github.com/users/hwwhww/followers",
      "following_url": "https://api.github.com/users/hwwhww/following{/other_user}",
      "gists_url": "https://api.github.com/users/hwwhww/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hwwhww/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hwwhww/subscriptions",
      "organizations_url": "https://api.github.com/users/hwwhww/orgs",
      "repos_url": "https://api.github.com/users/hwwhww/repos",
      "events_url": "https://api.github.com/users/hwwhww/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hwwhww/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-12-11T13:22:30Z",
    "updated_at": "2023-12-11T13:22:30Z",
    "author_association": "MEMBER",
    "body": "closing via #2104",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1850070665/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
