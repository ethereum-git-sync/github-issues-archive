{
  "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2314",
  "repository_url": "https://api.github.com/repos/ethereum/consensus-specs",
  "labels_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2314/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2314/comments",
  "events_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2314/events",
  "html_url": "https://github.com/ethereum/consensus-specs/issues/2314",
  "id": 851992573,
  "node_id": "MDU6SXNzdWU4NTE5OTI1NzM=",
  "number": 2314,
  "title": "Participation rewards are skipped for epoch prior to Altair upgrade",
  "user": {
    "login": "michaelsproul",
    "id": 4452260,
    "node_id": "MDQ6VXNlcjQ0NTIyNjA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4452260?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/michaelsproul",
    "html_url": "https://github.com/michaelsproul",
    "followers_url": "https://api.github.com/users/michaelsproul/followers",
    "following_url": "https://api.github.com/users/michaelsproul/following{/other_user}",
    "gists_url": "https://api.github.com/users/michaelsproul/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/michaelsproul/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/michaelsproul/subscriptions",
    "organizations_url": "https://api.github.com/users/michaelsproul/orgs",
    "repos_url": "https://api.github.com/users/michaelsproul/repos",
    "events_url": "https://api.github.com/users/michaelsproul/events{/privacy}",
    "received_events_url": "https://api.github.com/users/michaelsproul/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 6,
  "created_at": "2021-04-07T04:28:13Z",
  "updated_at": "2021-05-13T19:36:32Z",
  "closed_at": "2021-05-13T19:36:32Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "The [`upgrade_to_altair`](https://github.com/ethereum/eth2.0-specs/blob/v1.1.0-alpha.3/specs/altair/fork.md#upgrading-the-state) function which transitions the chain from phase0 to Altair initialises the participation bits in `previous_epoch_participation` to zero, which discards the information in the phase0 state's `previous_epoch_attestations`. This causes any validator who attested correctly in the epoch prior to the fork and had their attestation included on chain to be penalised as if they did not attest. The first epoch transition after the fork will consult `previous_epoch_participation` and find it mostly empty.\r\n\r\nOne solution would be to try to pack the prior epoch attestations into the blocks of the fork epoch. However, this doesn't interact well at all with the rewards for timeliness. Even if an attester was prompt in getting their attestation on chain in the previous epoch, by the time the fork epoch occurs they'll be too late for the timely head or source rewards (1 and 5 slots, respectively) and probably too late for the target reward (32 slots). Further, these late attestations would be competing with current epoch attestations for block space.\r\n\r\nAlternatively, the `upgrade_to_altair` function could perform a translation of the data in `previous_epoch_attestations` so that rewards are computed correctly for the attestations that already made it on chain. I think we could afford to be generous if computing the participation bits precisely is too much effort, although I don't see any issues that would prevent us from doing it exactly.",
  "closed_by": {
    "login": "djrtwo",
    "id": 1433595,
    "node_id": "MDQ6VXNlcjE0MzM1OTU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/djrtwo",
    "html_url": "https://github.com/djrtwo",
    "followers_url": "https://api.github.com/users/djrtwo/followers",
    "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
    "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
    "organizations_url": "https://api.github.com/users/djrtwo/orgs",
    "repos_url": "https://api.github.com/users/djrtwo/repos",
    "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
    "received_events_url": "https://api.github.com/users/djrtwo/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2314/reactions",
    "total_count": 4,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 4
  },
  "timeline_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2314/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/815295067",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2314#issuecomment-815295067",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2314",
    "id": 815295067,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxNTI5NTA2Nw==",
    "user": {
      "login": "vbuterin",
      "id": 2230894,
      "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vbuterin",
      "html_url": "https://github.com/vbuterin",
      "followers_url": "https://api.github.com/users/vbuterin/followers",
      "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
      "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
      "organizations_url": "https://api.github.com/users/vbuterin/orgs",
      "repos_url": "https://api.github.com/users/vbuterin/repos",
      "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vbuterin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-04-07T22:08:44Z",
    "updated_at": "2021-04-07T22:08:44Z",
    "author_association": "MEMBER",
    "body": "I expect realistically the answer may well end up being \"nobody cares about a single epoch messing up; it's not worth the added complexity\". The challenge is that it's just harder to design and reason about a hard fork if you have to think about interaction effects between pre-fork and post-fork activity.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/815295067/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/815306262",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2314#issuecomment-815306262",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2314",
    "id": 815306262,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxNTMwNjI2Mg==",
    "user": {
      "login": "ajsutton",
      "id": 72675,
      "node_id": "MDQ6VXNlcjcyNjc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/72675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajsutton",
      "html_url": "https://github.com/ajsutton",
      "followers_url": "https://api.github.com/users/ajsutton/followers",
      "following_url": "https://api.github.com/users/ajsutton/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajsutton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajsutton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajsutton/subscriptions",
      "organizations_url": "https://api.github.com/users/ajsutton/orgs",
      "repos_url": "https://api.github.com/users/ajsutton/repos",
      "events_url": "https://api.github.com/users/ajsutton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajsutton/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-04-07T22:36:23Z",
    "updated_at": "2021-04-07T22:36:23Z",
    "author_association": "CONTRIBUTOR",
    "body": "I wonder if its worth just going the other way then and have the transition set all participation flags to 1.  That avoids penalising honest validators and is effectively a payment to validators to upgrade and I don't mind the idea of incentivising that.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/815306262/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/815345930",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2314#issuecomment-815345930",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2314",
    "id": 815345930,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxNTM0NTkzMA==",
    "user": {
      "login": "michaelsproul",
      "id": 4452260,
      "node_id": "MDQ6VXNlcjQ0NTIyNjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4452260?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/michaelsproul",
      "html_url": "https://github.com/michaelsproul",
      "followers_url": "https://api.github.com/users/michaelsproul/followers",
      "following_url": "https://api.github.com/users/michaelsproul/following{/other_user}",
      "gists_url": "https://api.github.com/users/michaelsproul/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/michaelsproul/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/michaelsproul/subscriptions",
      "organizations_url": "https://api.github.com/users/michaelsproul/orgs",
      "repos_url": "https://api.github.com/users/michaelsproul/repos",
      "events_url": "https://api.github.com/users/michaelsproul/events{/privacy}",
      "received_events_url": "https://api.github.com/users/michaelsproul/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-04-07T23:58:18Z",
    "updated_at": "2021-04-07T23:58:18Z",
    "author_association": "CONTRIBUTOR",
    "body": "Yeah, although it's only 1 epoch worth of rewards and users probably _shouldn't_ care, I think they'll be watching the fork and will notice a sea of red.\r\n\r\nI'm happy with the \"reward everyone\" strategy which avoids the translation complexity.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/815345930/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/820358131",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2314#issuecomment-820358131",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2314",
    "id": 820358131,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyMDM1ODEzMQ==",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-04-15T11:42:23Z",
    "updated_at": "2021-04-15T14:20:18Z",
    "author_association": "MEMBER",
    "body": "I we do all 1's for the flags, we also trigger finality calculations artificially. Which is dangerous\r\n\r\noptions I can think of:\r\n\r\n1. Just manually update balances to have +max base rewards to account for the degradation. Downside is that the wave of red will still happen at end of next epoch. It will just be cancelled out\r\n2. attempt to manually map previous_epoch_attestations to flags. Can't get this 100% correct because timeliness is lost, but you can do a decent job. Major downside here is that it's complicated and would require a bunch of edgecase testing\r\n3. add a conditional in `process_rewards_and_penalties` to give max base rewards during that fork epoch and skip the rest of the processing. a little \"dirty\" maybe and would require some testing (but not nearly as much as option (2))\r\n\r\nI prefer (1) or (3)\r\n\r\nEDIT: you can get this 100% correct due to the `inclusion_delay`. I still think this is not worth the consensus complexity and testing required to get it right",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/820358131/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/831214107",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2314#issuecomment-831214107",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2314",
    "id": 831214107,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgzMTIxNDEwNw==",
    "user": {
      "login": "michaelsproul",
      "id": 4452260,
      "node_id": "MDQ6VXNlcjQ0NTIyNjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4452260?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/michaelsproul",
      "html_url": "https://github.com/michaelsproul",
      "followers_url": "https://api.github.com/users/michaelsproul/followers",
      "following_url": "https://api.github.com/users/michaelsproul/following{/other_user}",
      "gists_url": "https://api.github.com/users/michaelsproul/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/michaelsproul/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/michaelsproul/subscriptions",
      "organizations_url": "https://api.github.com/users/michaelsproul/orgs",
      "repos_url": "https://api.github.com/users/michaelsproul/repos",
      "events_url": "https://api.github.com/users/michaelsproul/events{/privacy}",
      "received_events_url": "https://api.github.com/users/michaelsproul/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-03T12:00:41Z",
    "updated_at": "2021-05-03T12:00:41Z",
    "author_association": "CONTRIBUTOR",
    "body": "I've had a go at implementing the translation, as I think that's the best way to address this issue: no special casing in the accounting functions, no sea of red, and it's mostly expressible in terms of a helper function that's used in `process_attestation`: https://github.com/ethereum/eth2.0-specs/pull/2373",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/831214107/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/838042852",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2314#issuecomment-838042852",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2314",
    "id": 838042852,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgzODA0Mjg1Mg==",
    "user": {
      "login": "nisdas",
      "id": 33201827,
      "node_id": "MDQ6VXNlcjMzMjAxODI3",
      "avatar_url": "https://avatars.githubusercontent.com/u/33201827?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nisdas",
      "html_url": "https://github.com/nisdas",
      "followers_url": "https://api.github.com/users/nisdas/followers",
      "following_url": "https://api.github.com/users/nisdas/following{/other_user}",
      "gists_url": "https://api.github.com/users/nisdas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nisdas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nisdas/subscriptions",
      "organizations_url": "https://api.github.com/users/nisdas/orgs",
      "repos_url": "https://api.github.com/users/nisdas/repos",
      "events_url": "https://api.github.com/users/nisdas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nisdas/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-11T08:11:47Z",
    "updated_at": "2021-05-11T08:11:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "In a similar vein , `inactivity_scores` will also be zeroed out in the fork epoch. So if the chain is undergoing an inactivity leak, inactive validators would basically be 'reset' in terms of quadratic penalties. Would it be worth it to also fix it ? The main difference is that compared to participation, there isn't an easy way to determine any accumulated inactivity penalties. And apply that in lieu by using a multiple of `INACTIVITY_SCORE_BIAS`.   \r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/838042852/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
