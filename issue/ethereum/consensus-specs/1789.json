{
  "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1789",
  "repository_url": "https://api.github.com/repos/ethereum/consensus-specs",
  "labels_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1789/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1789/comments",
  "events_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1789/events",
  "html_url": "https://github.com/ethereum/consensus-specs/issues/1789",
  "id": 613125445,
  "node_id": "MDU6SXNzdWU2MTMxMjU0NDU=",
  "number": 1789,
  "title": "Missing assert in state_transition?",
  "user": {
    "login": "franck44",
    "id": 14901362,
    "node_id": "MDQ6VXNlcjE0OTAxMzYy",
    "avatar_url": "https://avatars.githubusercontent.com/u/14901362?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/franck44",
    "html_url": "https://github.com/franck44",
    "followers_url": "https://api.github.com/users/franck44/followers",
    "following_url": "https://api.github.com/users/franck44/following{/other_user}",
    "gists_url": "https://api.github.com/users/franck44/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/franck44/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/franck44/subscriptions",
    "organizations_url": "https://api.github.com/users/franck44/orgs",
    "repos_url": "https://api.github.com/users/franck44/repos",
    "events_url": "https://api.github.com/users/franck44/events{/privacy}",
    "received_events_url": "https://api.github.com/users/franck44/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1063043872,
      "node_id": "MDU6TGFiZWwxMDYzMDQzODcy",
      "url": "https://api.github.com/repos/ethereum/consensus-specs/labels/general:question",
      "name": "general:question",
      "color": "FAD689",
      "default": false,
      "description": "Further information is requested"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 7,
  "created_at": "2020-05-06T08:00:41Z",
  "updated_at": "2020-05-08T21:53:43Z",
  "closed_at": "2020-05-08T09:09:50Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "\r\nAccording to [this repo](https://github.com/ethereum/eth2.0-specs/blob/master/specs/phase0/beacon-chain.md#beacon-chain-state-transition-function) the `state_transition` function is defined as:\r\n```\r\ndef state_transition(state: BeaconState, signed_block: SignedBeaconBlock, validate_result: bool=True) -> BeaconState:\r\n    block = signed_block.message\r\n    # Process slots (including those with no blocks) since block\r\n    process_slots(state, block.slot)\r\n    ...\r\n```\r\nand `process_slots` has a precondition (assert statement) as follows:\r\n```\r\ndef process_slots(state: BeaconState, slot: Slot) -> None:\r\n    assert state.slot <= slot\r\n    while state.slot < slot:\r\n        ...\r\n```\r\n\r\nTo make sure the pre-condition of `process_slots` is not violated, we may have to add a pre-condition in the `state_transition` function as follows:\r\n```\r\ndef state_transition(state: BeaconState, signed_block: SignedBeaconBlock, validate_result: bool=True) -> BeaconState:\r\n    assert(state.slot <= block.slot)\r\n```",
  "closed_by": {
    "login": "JustinDrake",
    "id": 731743,
    "node_id": "MDQ6VXNlcjczMTc0Mw==",
    "avatar_url": "https://avatars.githubusercontent.com/u/731743?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/JustinDrake",
    "html_url": "https://github.com/JustinDrake",
    "followers_url": "https://api.github.com/users/JustinDrake/followers",
    "following_url": "https://api.github.com/users/JustinDrake/following{/other_user}",
    "gists_url": "https://api.github.com/users/JustinDrake/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/JustinDrake/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/JustinDrake/subscriptions",
    "organizations_url": "https://api.github.com/users/JustinDrake/orgs",
    "repos_url": "https://api.github.com/users/JustinDrake/repos",
    "events_url": "https://api.github.com/users/JustinDrake/events{/privacy}",
    "received_events_url": "https://api.github.com/users/JustinDrake/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1789/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1789/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/625107551",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1789#issuecomment-625107551",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1789",
    "id": 625107551,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyNTEwNzU1MQ==",
    "user": {
      "login": "JustinDrake",
      "id": 731743,
      "node_id": "MDQ6VXNlcjczMTc0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/731743?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JustinDrake",
      "html_url": "https://github.com/JustinDrake",
      "followers_url": "https://api.github.com/users/JustinDrake/followers",
      "following_url": "https://api.github.com/users/JustinDrake/following{/other_user}",
      "gists_url": "https://api.github.com/users/JustinDrake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JustinDrake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JustinDrake/subscriptions",
      "organizations_url": "https://api.github.com/users/JustinDrake/orgs",
      "repos_url": "https://api.github.com/users/JustinDrake/repos",
      "events_url": "https://api.github.com/users/JustinDrake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JustinDrake/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-07T08:23:57Z",
    "updated_at": "2020-05-07T08:23:57Z",
    "author_association": "MEMBER",
    "body": "I don't understand. The function `state_transition` calls `process_slots(state, block.slot)` which itself has `assert state.slot <= slot` which is equivalent to `assert state.slot <= block.slot`.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/625107551/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/625510304",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1789#issuecomment-625510304",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1789",
    "id": 625510304,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyNTUxMDMwNA==",
    "user": {
      "login": "franck44",
      "id": 14901362,
      "node_id": "MDQ6VXNlcjE0OTAxMzYy",
      "avatar_url": "https://avatars.githubusercontent.com/u/14901362?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/franck44",
      "html_url": "https://github.com/franck44",
      "followers_url": "https://api.github.com/users/franck44/followers",
      "following_url": "https://api.github.com/users/franck44/following{/other_user}",
      "gists_url": "https://api.github.com/users/franck44/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/franck44/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/franck44/subscriptions",
      "organizations_url": "https://api.github.com/users/franck44/orgs",
      "repos_url": "https://api.github.com/users/franck44/repos",
      "events_url": "https://api.github.com/users/franck44/events{/privacy}",
      "received_events_url": "https://api.github.com/users/franck44/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-07T21:37:13Z",
    "updated_at": "2020-05-07T21:53:17Z",
    "author_association": "NONE",
    "body": "@JustinDrake \r\n\r\n> which is equivalent to assert state.slot <= block.slot.\r\n\r\nThe details are probably in what equivalent means.\r\nMy understanding is the following (and If I am wrong, please correct me):\r\n\r\n1. either the assert statements are used only at runtime, and when they are violated the program ends (possibly with an exception). \r\n2. the assert statements are logical conditions that should never be violated at runtime.\r\n\r\nIn the previous case (`assert state.slot <= slot`) it looks like option 2 applies: because this is the first statement in the body of `process_slot` it is somehow a _pre-condition_ that should hold true before we run `process_slot`. In that case, because `state_transition` does not enforce this condition, it can be violated by calling `state_transition(s, b)` where `b.slot = state.slot - 1`.\r\nThis can be avoided if we require `state.slot <= b.slot` as a pre-condition for `state_transition`.\r\n\r\nIf option 1 is the intended meaning for asserts, that can be risky: if for some reason `process_slot` exits with the assert violated, we may be in the middle of a computation which is aborted and can result in an inconsistent state (note that a lot of the specs function gradually modify the `state` so it looks to me that this can happen). This is somehow prevented to happen if `state_transition` has a pre-condition that ensures that the computation in its body (`process_slot, process_block`,...) can be performed without violating the asserts. \r\n\r\nTo summarise:\r\n1. if the assert statements  are meant to express conditions that should never be violated, they have to be used consistently and this may require adding asserts to a caller because a callee requires it. \r\n2. if the asserts are used only at runtime,  we may end up starting and aborting state updates and this could result in an inconsistent state. \r\n\r\nI hope that clarifies the question.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/625510304/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/625681981",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1789#issuecomment-625681981",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1789",
    "id": 625681981,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyNTY4MTk4MQ==",
    "user": {
      "login": "JustinDrake",
      "id": 731743,
      "node_id": "MDQ6VXNlcjczMTc0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/731743?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JustinDrake",
      "html_url": "https://github.com/JustinDrake",
      "followers_url": "https://api.github.com/users/JustinDrake/followers",
      "following_url": "https://api.github.com/users/JustinDrake/following{/other_user}",
      "gists_url": "https://api.github.com/users/JustinDrake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JustinDrake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JustinDrake/subscriptions",
      "organizations_url": "https://api.github.com/users/JustinDrake/orgs",
      "repos_url": "https://api.github.com/users/JustinDrake/repos",
      "events_url": "https://api.github.com/users/JustinDrake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JustinDrake/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-08T07:33:29Z",
    "updated_at": "2020-05-08T07:33:29Z",
    "author_association": "MEMBER",
    "body": "> when they are violated the program ends (possibly with an exception)\r\n\r\nTaken [from the spec](https://github.com/ethereum/eth2.0-specs/blob/dev/specs/phase0/beacon-chain.md#beacon-chain-state-transition-function) \"State transitions that trigger an unhandled exception (e.g. a failed `assert` or an out-of-range list access) are considered invalid.\"\r\n\r\n> we may be in the middle of a computation which is aborted and can result in an inconsistent state\r\n\r\nSuch an inconsistent state is considered invalid and should be discarded. Clients should revert back to a known good state.\r\n\r\n> I hope that clarifies the question.\r\n\r\nThe only question I could find is in the title, namely \"Missing assert in state_transition?\". The answer to that question is \"no\" :)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/625681981/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/625702320",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1789#issuecomment-625702320",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1789",
    "id": 625702320,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyNTcwMjMyMA==",
    "user": {
      "login": "franck44",
      "id": 14901362,
      "node_id": "MDQ6VXNlcjE0OTAxMzYy",
      "avatar_url": "https://avatars.githubusercontent.com/u/14901362?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/franck44",
      "html_url": "https://github.com/franck44",
      "followers_url": "https://api.github.com/users/franck44/followers",
      "following_url": "https://api.github.com/users/franck44/following{/other_user}",
      "gists_url": "https://api.github.com/users/franck44/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/franck44/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/franck44/subscriptions",
      "organizations_url": "https://api.github.com/users/franck44/orgs",
      "repos_url": "https://api.github.com/users/franck44/repos",
      "events_url": "https://api.github.com/users/franck44/events{/privacy}",
      "received_events_url": "https://api.github.com/users/franck44/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-08T08:22:54Z",
    "updated_at": "2020-05-08T08:26:26Z",
    "author_association": "NONE",
    "body": "> Such an inconsistent state is considered invalid and should be discarded. Clients should revert back to a known good state.\r\n\r\nRight, but it may be more effective to just prevent this from happening. \r\nAnd if we know in advance that can be prevented, we may benefit from that.\r\n\r\nIf the failed assert is very deep in the call graph, it may fail after lots of computations have been performed.\r\nIt seems arbitrary to decide that assert statements are somewhere in some code snippets rather than others.\r\nAnd reverting to a known good state does not look very precise and formal to me.\r\nIs it the previous state before the computation started?  \r\n\r\n> The only question I could find is in the title, namely \"Missing assert in state_transition?\". The answer to that question is \"no\" :)\r\n\r\nSo there is no missing assert in `state_transition` in the specs, but nothing prevents me from adding it in my code if I want to  write something much safer than the specs (i.e. make sure the assert in `process_slots` is never violated), correct? \r\nAnd if we added it to the specs, it would not make them worse and maybe slightly better? :-)\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/625702320/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/625720495",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1789#issuecomment-625720495",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1789",
    "id": 625720495,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyNTcyMDQ5NQ==",
    "user": {
      "login": "JustinDrake",
      "id": 731743,
      "node_id": "MDQ6VXNlcjczMTc0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/731743?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JustinDrake",
      "html_url": "https://github.com/JustinDrake",
      "followers_url": "https://api.github.com/users/JustinDrake/followers",
      "following_url": "https://api.github.com/users/JustinDrake/following{/other_user}",
      "gists_url": "https://api.github.com/users/JustinDrake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JustinDrake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JustinDrake/subscriptions",
      "organizations_url": "https://api.github.com/users/JustinDrake/orgs",
      "repos_url": "https://api.github.com/users/JustinDrake/repos",
      "events_url": "https://api.github.com/users/JustinDrake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JustinDrake/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-08T09:09:50Z",
    "updated_at": "2020-05-08T09:09:50Z",
    "author_association": "MEMBER",
    "body": "> nothing prevents me from adding it in my code\r\n\r\nCorrect :)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/625720495/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/626029560",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1789#issuecomment-626029560",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1789",
    "id": 626029560,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyNjAyOTU2MA==",
    "user": {
      "login": "franck44",
      "id": 14901362,
      "node_id": "MDQ6VXNlcjE0OTAxMzYy",
      "avatar_url": "https://avatars.githubusercontent.com/u/14901362?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/franck44",
      "html_url": "https://github.com/franck44",
      "followers_url": "https://api.github.com/users/franck44/followers",
      "following_url": "https://api.github.com/users/franck44/following{/other_user}",
      "gists_url": "https://api.github.com/users/franck44/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/franck44/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/franck44/subscriptions",
      "organizations_url": "https://api.github.com/users/franck44/orgs",
      "repos_url": "https://api.github.com/users/franck44/repos",
      "events_url": "https://api.github.com/users/franck44/events{/privacy}",
      "received_events_url": "https://api.github.com/users/franck44/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-08T21:29:55Z",
    "updated_at": "2020-05-08T21:29:55Z",
    "author_association": "NONE",
    "body": "You may be interested in the following [CWE-617: Reachable Assertion](https://cwe.mitre.org/data/definitions/617.html)\r\n\r\nAnd also [MET01-J. Never use assertions to validate method arguments](https://wiki.sei.cmu.edu/confluence/display/java/MET01-J.+Never+use+assertions+to+validate+method+arguments) from the The CERT Oracle Secure Coding Standard for Java.\r\n\r\nThe specs, as guidelines for implementers,  may benefit from following standard coding practices to limit the number of security vulnerabilities. After all, the Beacon Chain is a critical component of the Eth2 infrastructure, and critical software components may be coded/specified following the highest  coding standards.  ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/626029560/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/626037350",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1789#issuecomment-626037350",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1789",
    "id": 626037350,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyNjAzNzM1MA==",
    "user": {
      "login": "franck44",
      "id": 14901362,
      "node_id": "MDQ6VXNlcjE0OTAxMzYy",
      "avatar_url": "https://avatars.githubusercontent.com/u/14901362?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/franck44",
      "html_url": "https://github.com/franck44",
      "followers_url": "https://api.github.com/users/franck44/followers",
      "following_url": "https://api.github.com/users/franck44/following{/other_user}",
      "gists_url": "https://api.github.com/users/franck44/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/franck44/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/franck44/subscriptions",
      "organizations_url": "https://api.github.com/users/franck44/orgs",
      "repos_url": "https://api.github.com/users/franck44/repos",
      "events_url": "https://api.github.com/users/franck44/events{/privacy}",
      "received_events_url": "https://api.github.com/users/franck44/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-08T21:53:42Z",
    "updated_at": "2020-05-08T21:53:42Z",
    "author_association": "NONE",
    "body": "@JustinDrake As I see that this issue has been closed I'll raise a new one regarding my previous comment and the use of assert statements to validate arguments in the specs.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/626037350/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
