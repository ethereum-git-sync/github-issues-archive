{
  "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1887",
  "repository_url": "https://api.github.com/repos/ethereum/consensus-specs",
  "labels_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1887/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1887/comments",
  "events_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1887/events",
  "html_url": "https://github.com/ethereum/consensus-specs/issues/1887",
  "id": 637092724,
  "node_id": "MDU6SXNzdWU2MzcwOTI3MjQ=",
  "number": 1887,
  "title": "Store.checkpoint_states should be updated when justified_checkpoint updated",
  "user": {
    "login": "ericsson49",
    "id": 10426192,
    "node_id": "MDQ6VXNlcjEwNDI2MTky",
    "avatar_url": "https://avatars.githubusercontent.com/u/10426192?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ericsson49",
    "html_url": "https://github.com/ericsson49",
    "followers_url": "https://api.github.com/users/ericsson49/followers",
    "following_url": "https://api.github.com/users/ericsson49/following{/other_user}",
    "gists_url": "https://api.github.com/users/ericsson49/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ericsson49/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ericsson49/subscriptions",
    "organizations_url": "https://api.github.com/users/ericsson49/orgs",
    "repos_url": "https://api.github.com/users/ericsson49/repos",
    "events_url": "https://api.github.com/users/ericsson49/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ericsson49/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1324776822,
      "node_id": "MDU6TGFiZWwxMzI0Nzc2ODIy",
      "url": "https://api.github.com/repos/ethereum/consensus-specs/labels/scope:fork-choice",
      "name": "scope:fork-choice",
      "color": "81C7D4",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": {
    "login": "adiasg",
    "id": 25324105,
    "node_id": "MDQ6VXNlcjI1MzI0MTA1",
    "avatar_url": "https://avatars.githubusercontent.com/u/25324105?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/adiasg",
    "html_url": "https://github.com/adiasg",
    "followers_url": "https://api.github.com/users/adiasg/followers",
    "following_url": "https://api.github.com/users/adiasg/following{/other_user}",
    "gists_url": "https://api.github.com/users/adiasg/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/adiasg/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/adiasg/subscriptions",
    "organizations_url": "https://api.github.com/users/adiasg/orgs",
    "repos_url": "https://api.github.com/users/adiasg/repos",
    "events_url": "https://api.github.com/users/adiasg/events{/privacy}",
    "received_events_url": "https://api.github.com/users/adiasg/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "adiasg",
      "id": 25324105,
      "node_id": "MDQ6VXNlcjI1MzI0MTA1",
      "avatar_url": "https://avatars.githubusercontent.com/u/25324105?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adiasg",
      "html_url": "https://github.com/adiasg",
      "followers_url": "https://api.github.com/users/adiasg/followers",
      "following_url": "https://api.github.com/users/adiasg/following{/other_user}",
      "gists_url": "https://api.github.com/users/adiasg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adiasg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adiasg/subscriptions",
      "organizations_url": "https://api.github.com/users/adiasg/orgs",
      "repos_url": "https://api.github.com/users/adiasg/repos",
      "events_url": "https://api.github.com/users/adiasg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adiasg/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2020-06-11T15:06:34Z",
  "updated_at": "2020-09-17T21:31:00Z",
  "closed_at": "2020-09-17T21:30:59Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "`store_target_checkpoint_state` is called to update `checkpoint_states` during `on_attestation` processing.\r\nHowever, it's not updated during `on_block` processing, if a block results in a newer justified_checkpont.\r\nWhich may result in an `KeyError` during `get_head` call. For example,\r\n```python\r\nfrom eth2spec.utils import bls\r\nbls.bls_active = False\r\n\r\nfrom eth2spec.phase0 import spec\r\n\r\nconfigs_path = 'configs/'\r\nfrom eth2spec.config import config_util\r\nfrom importlib import reload\r\nconfig_util.prepare_config(configs_path, 'minimal')\r\nreload(spec)\r\n\r\nfrom eth2spec.test.helpers.deposits import prepare_genesis_deposits\r\nfrom eth2spec.test.helpers.keys import pubkey_to_privkey\r\n\r\neth1_block_hash=b'\\x42' * 32\r\neth1_timestamp=spec.MIN_GENESIS_TIME\r\ndeposit_count = 16\r\ndeposits, deposit_root, _ = prepare_genesis_deposits(spec, deposit_count, spec.MAX_EFFECTIVE_BALANCE, signed=True)\r\ngenesis_state = spec.initialize_beacon_state_from_eth1(eth1_block_hash, eth1_timestamp, deposits)\r\n\r\nstore = spec.get_forkchoice_store(genesis_state)\r\n\r\ndef set_slot(slot):\r\n    spec.on_tick(store, store.genesis_time+spec.SECONDS_PER_SLOT*slot)\r\n\r\ndef mk_block(slot,head,atts):\r\n    head_state = store.block_states[head].copy()\r\n    if head_state.slot < slot-1:\r\n        spec.process_slots(head_state, slot-1)\r\n    state = head_state.copy()\r\n    spec.process_slots(state, slot)\r\n\r\n    proposer = spec.get_beacon_proposer_index(state)\r\n    SK = pubkey_to_privkey[state.validators[proposer].pubkey]\r\n    randao_reveal = spec.get_epoch_signature(state, spec.BeaconBlock(slot=slot), SK)\r\n    eth1vote = spec.get_eth1_vote(state, [])\r\n    block = spec.BeaconBlock(\r\n        slot=slot, proposer_index=proposer, parent_root=head,\r\n        body=spec.BeaconBlockBody(attestations=atts, eth1_data=eth1vote))\r\n    block.state_root = spec.compute_new_state_root(head_state.copy(), block)\r\n    block_signature = spec.get_block_signature(state, block, SK)\r\n    return spec.SignedBeaconBlock(message=block, signature=block_signature)\r\n\r\ndef mk_atts(slot, head):\r\n    head_state = store.block_states[head].copy()\r\n    if head_state.slot < int(slot)-1:\r\n        spec.process_slots(head_state, slot-1)\r\n    state = head_state.copy()\r\n    if state.slot < slot:\r\n        spec.process_slots(state, slot)\r\n    \r\n    src = state.current_justified_checkpoint\r\n    start_slot = spec.compute_start_slot_at_epoch(spec.get_current_epoch(state))\r\n    epoch_boundary_block_root = head if start_slot == state.slot else spec.get_block_root_at_slot(state, start_slot)\r\n    target_chkpt = spec.Checkpoint(epoch=spec.get_current_epoch(state), root=epoch_boundary_block_root)\r\n    atts = []\r\n    committee_count = spec.get_committee_count_at_slot(state, slot)\r\n    for index in range(committee_count):\r\n        data = spec.AttestationData(slot=slot, index=index, beacon_block_root=head,\r\n            source=state.current_justified_checkpoint,\r\n            target=target_chkpt)\r\n        committee = spec.get_beacon_committee(state, slot, index)\r\n        for i in range(len(committee)):\r\n            bits = spec.Bitlist[spec.MAX_VALIDATORS_PER_COMMITTEE]([0] * len(committee))\r\n            bits[i] = 1\r\n            att_sig = spec.get_attestation_signature(state, data,\r\n                    pubkey_to_privkey[state.validators[committee[i]].pubkey])\r\n            atts.append(spec.Attestation(aggregation_bits=bits, data=data, signature=att_sig))\r\n    return atts\r\n\r\ndef do_step():\r\n    slot = spec.get_current_slot(store)\r\n    head = spec.get_head(store)\r\n    atts = mk_atts(slot, head)\r\n    slot = slot + 1\r\n    set_slot(slot)\r\n    #for a in atts:\r\n    #    spec.on_attestation(store, a)\r\n    b = mk_block(slot, head, atts)\r\n    spec.on_block(store, b)\r\n\r\nfor i in range(spec.SLOTS_PER_EPOCH * 3):\r\n    do_step()\r\n\r\nspec.get_head(store)\r\n```\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"testcase1.py\", line 85, in <module>\r\n    spec.get_head(store)\r\n  File \"/mnt/c/Users/ericsson/IdeaProjects/tmp/eth2.0-specs_v0.11.3/venv/lib/python3.8/site-packages/eth2spec/phase0/spec.py\", line 1392, in get_head\r\n    head = max(children, key=lambda root: (get_latest_attesting_balance(store, root), root))\r\n  File \"/mnt/c/Users/ericsson/IdeaProjects/tmp/eth2.0-specs_v0.11.3/venv/lib/python3.8/site-packages/eth2spec/phase0/spec.py\", line 1392, in <lambda>\r\n    head = max(children, key=lambda root: (get_latest_attesting_balance(store, root), root))\r\n  File \"/mnt/c/Users/ericsson/IdeaProjects/tmp/eth2.0-specs_v0.11.3/venv/lib/python3.8/site-packages/eth2spec/phase0/spec.py\", line 1322, in get_latest_attesting_balance\r\n    state = store.checkpoint_states[store.justified_checkpoint]\r\nKeyError: Checkpoint(Container)\r\n    epoch: Epoch = 2\r\n    root: Root = 0x622549f0ce5a668ebaac0e752cf638d673f8e92fa0a6d0478656fa76a53a02b8\r\n```",
  "closed_by": {
    "login": "djrtwo",
    "id": 1433595,
    "node_id": "MDQ6VXNlcjE0MzM1OTU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/djrtwo",
    "html_url": "https://github.com/djrtwo",
    "followers_url": "https://api.github.com/users/djrtwo/followers",
    "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
    "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
    "organizations_url": "https://api.github.com/users/djrtwo/orgs",
    "repos_url": "https://api.github.com/users/djrtwo/repos",
    "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
    "received_events_url": "https://api.github.com/users/djrtwo/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1887/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1887/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/642818929",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1887#issuecomment-642818929",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1887",
    "id": 642818929,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0MjgxODkyOQ==",
    "user": {
      "login": "ericsson49",
      "id": 10426192,
      "node_id": "MDQ6VXNlcjEwNDI2MTky",
      "avatar_url": "https://avatars.githubusercontent.com/u/10426192?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ericsson49",
      "html_url": "https://github.com/ericsson49",
      "followers_url": "https://api.github.com/users/ericsson49/followers",
      "following_url": "https://api.github.com/users/ericsson49/following{/other_user}",
      "gists_url": "https://api.github.com/users/ericsson49/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ericsson49/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ericsson49/subscriptions",
      "organizations_url": "https://api.github.com/users/ericsson49/orgs",
      "repos_url": "https://api.github.com/users/ericsson49/repos",
      "events_url": "https://api.github.com/users/ericsson49/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ericsson49/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-11T17:14:30Z",
    "updated_at": "2020-06-11T17:16:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "reproduced in both `dev` and `v0.11.3`",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/642818929/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/643522589",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1887#issuecomment-643522589",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1887",
    "id": 643522589,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0MzUyMjU4OQ==",
    "user": {
      "login": "adiasg",
      "id": 25324105,
      "node_id": "MDQ6VXNlcjI1MzI0MTA1",
      "avatar_url": "https://avatars.githubusercontent.com/u/25324105?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adiasg",
      "html_url": "https://github.com/adiasg",
      "followers_url": "https://api.github.com/users/adiasg/followers",
      "following_url": "https://api.github.com/users/adiasg/following{/other_user}",
      "gists_url": "https://api.github.com/users/adiasg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adiasg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adiasg/subscriptions",
      "organizations_url": "https://api.github.com/users/adiasg/orgs",
      "repos_url": "https://api.github.com/users/adiasg/repos",
      "events_url": "https://api.github.com/users/adiasg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adiasg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-12T23:37:59Z",
    "updated_at": "2020-06-12T23:47:12Z",
    "author_association": "MEMBER",
    "body": "@ericsson49 Great catch!\r\n\r\n**Cause of issue:** `on_attestation` is never applied to new un-seen attestations in `block.message.body.attestations` in `on_block`. \r\n\r\nThe [intention was to run `on_attestation` for those attestations](https://github.com/ethereum/eth2.0-specs/blame/117fb12888add6911c8dcda8c9313e72ee0b3ff9/specs/core/0_fork-choice.md#L242), but the code is missing :sweat_smile: \r\n\r\n**Solution of issue:** Run `on_attestation` on new un-seen attestations in `on_block`.\r\n\r\n**Update**: \r\nActually, I'm not sure how to interpret [this](https://github.com/ethereum/eth2.0-specs/blame/117fb12888add6911c8dcda8c9313e72ee0b3ff9/specs/core/0_fork-choice.md#L242):\r\n> Run ``on_attestation`` upon receiving a new ``attestation`` from either within a block or directly on the wire.\r\n\r\nIt could mean that clients are supposed to extract `block.message.body.attestations` from new blocks and then feed the new un-seen attestation into `run_attestation`, just like they do with attestations received on the wire (i.e., as gossip outside of blocks).\r\n\r\n@djrtwo Could you please clarify this?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/643522589/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/643544565",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1887#issuecomment-643544565",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1887",
    "id": 643544565,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0MzU0NDU2NQ==",
    "user": {
      "login": "ericsson49",
      "id": 10426192,
      "node_id": "MDQ6VXNlcjEwNDI2MTky",
      "avatar_url": "https://avatars.githubusercontent.com/u/10426192?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ericsson49",
      "html_url": "https://github.com/ericsson49",
      "followers_url": "https://api.github.com/users/ericsson49/followers",
      "following_url": "https://api.github.com/users/ericsson49/following{/other_user}",
      "gists_url": "https://api.github.com/users/ericsson49/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ericsson49/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ericsson49/subscriptions",
      "organizations_url": "https://api.github.com/users/ericsson49/orgs",
      "repos_url": "https://api.github.com/users/ericsson49/repos",
      "events_url": "https://api.github.com/users/ericsson49/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ericsson49/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-13T00:52:54Z",
    "updated_at": "2020-06-13T00:52:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "I have been expecting that clients are to extract `block.message.body.attestations`, however, there is no indication/requirement that this should be done before processing the block (calling `on_block(store, block)`.\r\n\r\nSuch a requirement is reasonable, of course, however, my worry is that then there may arise tricky cases with invalid/early/etc blocks and/or invalid/early/etc attestations inside blocks. Such cases can be resolved, however, processing blocks and attestations as separate pieces (e.g. in separate transactions) is much easier conceptually. While, if there are partial ordering requirements then it may be somewhat complicated.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/643544565/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/694510382",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1887#issuecomment-694510382",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1887",
    "id": 694510382,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5NDUxMDM4Mg==",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-17T21:30:59Z",
    "updated_at": "2020-09-17T21:30:59Z",
    "author_association": "MEMBER",
    "body": "The intention of the fork choice is to certainly add any attestations you get from any location whether it be directly from an attestation gossip topic, from within a block, or even hand delivered by fedex\r\n\r\nOpen to a suggestion on how to make that clearer in the \"spec\". I don't think we need to enumerate attestations from blocks in code but some more directive text might be warranted.\r\n\r\nClosing for now, but will entertain PRs with clarifying text",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/694510382/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
