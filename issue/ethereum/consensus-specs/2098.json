{
  "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2098",
  "repository_url": "https://api.github.com/repos/ethereum/consensus-specs",
  "labels_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2098/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2098/comments",
  "events_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2098/events",
  "html_url": "https://github.com/ethereum/consensus-specs/issues/2098",
  "id": 718002465,
  "node_id": "MDU6SXNzdWU3MTgwMDI0NjU=",
  "number": 2098,
  "title": "Better recovery from inactivity leaks",
  "user": {
    "login": "dankrad",
    "id": 6130607,
    "node_id": "MDQ6VXNlcjYxMzA2MDc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6130607?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/dankrad",
    "html_url": "https://github.com/dankrad",
    "followers_url": "https://api.github.com/users/dankrad/followers",
    "following_url": "https://api.github.com/users/dankrad/following{/other_user}",
    "gists_url": "https://api.github.com/users/dankrad/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/dankrad/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/dankrad/subscriptions",
    "organizations_url": "https://api.github.com/users/dankrad/orgs",
    "repos_url": "https://api.github.com/users/dankrad/repos",
    "events_url": "https://api.github.com/users/dankrad/events{/privacy}",
    "received_events_url": "https://api.github.com/users/dankrad/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1063043868,
      "node_id": "MDU6TGFiZWwxMDYzMDQzODY4",
      "url": "https://api.github.com/repos/ethereum/consensus-specs/labels/general:enhancement",
      "name": "general:enhancement",
      "color": "086788",
      "default": false,
      "description": "New feature or request"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 9,
  "created_at": "2020-10-09T09:36:38Z",
  "updated_at": "2023-12-27T00:32:02Z",
  "closed_at": null,
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "**Rationale:**\r\n\r\nThe quadratic inactivity leak is a penalty for being offline that increases in time quadratically in periods where the beacon chain doesn't finalized. It has the effect that should more than 1/3 of validators be offline, within a few days or weeks these validators will see increased losses to their balances, reducing them back to a total of 1/3 of the validator set and enabling finalization. (One popular misunderstanding is that it requires validator ejection to work -- it does not depend on ejecting the offline validators, only reducing their balances to diminish their weight in the FFG votes)\r\n\r\nHowever, at this point, the quadratic leak will stop for all validators, including those that remain offline. This means that if it was caused by a catastrophic event permanently disabling >1/3 of validators, or is due to a \"User Activated Soft Fork\" removing some validators deemed malicious from the network, the network will be in a state where only exactly 2/3+1 of the validator balance is online when it recovers due to the leak. The offline validators will continues to suffer a normal inactivity leak, but this is just the negative of the usual rewards and will thus take on the order of months to years to have any meaningful effect. This means that the network is going to be precarious for a long time, only having just enough online stake to get finalized when everything works perfectly. In practice, this means finalization will very often be delayed or not happening for extended periods of time just due to minor outages.\r\n\r\n**Idea:**\r\n\r\nTo fix this poor outcome, we can change the inactivity leak as follows: Instead of stopping the leak for all validators when the chain finalizes, we can keep the leak going for all validators until they actually sign another attestation. This will make sure that validators which are permanently offline keep experiencing a much quicker drain, will actually be kicked out of the validator set and the chain can hopefully recover to almost 100% participation.",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2098/reactions",
    "total_count": 2,
    "+1": 2,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2098/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/706080482",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2098#issuecomment-706080482",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2098",
    "id": 706080482,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwNjA4MDQ4Mg==",
    "user": {
      "login": "mcdee",
      "id": 511384,
      "node_id": "MDQ6VXNlcjUxMTM4NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/511384?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mcdee",
      "html_url": "https://github.com/mcdee",
      "followers_url": "https://api.github.com/users/mcdee/followers",
      "following_url": "https://api.github.com/users/mcdee/following{/other_user}",
      "gists_url": "https://api.github.com/users/mcdee/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mcdee/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mcdee/subscriptions",
      "organizations_url": "https://api.github.com/users/mcdee/orgs",
      "repos_url": "https://api.github.com/users/mcdee/repos",
      "events_url": "https://api.github.com/users/mcdee/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mcdee/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-09T09:40:13Z",
    "updated_at": "2020-10-09T09:40:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "If you're keeping track of the last time that a validator attested then wouldn't it be simpler to just apply the quadratic leak to all validators at all times as a \"non-participation\" penalty (removing the existing penalty system)?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/706080482/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/706084470",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2098#issuecomment-706084470",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2098",
    "id": 706084470,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwNjA4NDQ3MA==",
    "user": {
      "login": "dankrad",
      "id": 6130607,
      "node_id": "MDQ6VXNlcjYxMzA2MDc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6130607?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dankrad",
      "html_url": "https://github.com/dankrad",
      "followers_url": "https://api.github.com/users/dankrad/followers",
      "following_url": "https://api.github.com/users/dankrad/following{/other_user}",
      "gists_url": "https://api.github.com/users/dankrad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dankrad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dankrad/subscriptions",
      "organizations_url": "https://api.github.com/users/dankrad/orgs",
      "repos_url": "https://api.github.com/users/dankrad/repos",
      "events_url": "https://api.github.com/users/dankrad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dankrad/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-09T09:48:37Z",
    "updated_at": "2020-10-09T09:48:37Z",
    "author_association": "MEMBER",
    "body": "> If you're keeping track of the last time that a validator attested then wouldn't it be simpler to just apply the quadratic leak to all validators at all times as a \"non-participation\" penalty (removing the existing penalty system)?\r\n\r\nThat is probably a simpler approach, but may be seen as too punitive? We typically want to punish validators if their individual faults have actually led to real safety/liveness problems on chain.\r\n\r\nOne intermediate: The quadratic leak applies during the period when a validator is offline, if during that period there was a period of 8 epochs of non-finalization.\r\n\r\nOne problem is that this makes it much more likely that you will lose a full 16 ETH for e.g. losing your keys (or dying -- your heirs might not be very quick at recovering your keys and continuing to validate, or even realizing that they have to do this). This is much more than is expected for a typical slashing, so it may be quite terrifying.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/706084470/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/706105515",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2098#issuecomment-706105515",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2098",
    "id": 706105515,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwNjEwNTUxNQ==",
    "user": {
      "login": "mcdee",
      "id": 511384,
      "node_id": "MDQ6VXNlcjUxMTM4NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/511384?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mcdee",
      "html_url": "https://github.com/mcdee",
      "followers_url": "https://api.github.com/users/mcdee/followers",
      "following_url": "https://api.github.com/users/mcdee/following{/other_user}",
      "gists_url": "https://api.github.com/users/mcdee/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mcdee/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mcdee/subscriptions",
      "organizations_url": "https://api.github.com/users/mcdee/orgs",
      "repos_url": "https://api.github.com/users/mcdee/repos",
      "events_url": "https://api.github.com/users/mcdee/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mcdee/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-09T10:34:44Z",
    "updated_at": "2020-10-09T10:34:44Z",
    "author_association": "CONTRIBUTOR",
    "body": "> We typically want to punish validators if their individual faults have actually led to real safety/liveness problems on chain.\r\n\r\nThis doesn't seem to fit the current slashing punishment.  If, for example, 10% of validators created a slashing event it would have ~0 impact on the safety/liveness of the chain (assuming the other validators are honest), but they are punished regardless, but the validator would be punished for ~10 Ether and forcibly ejected.  Anyway, not totally on-topic so I'll leave that bit.\r\n\r\nIf we think it's fair to penalise validators in a certain way after an inactivity leak, it seems to make sense to punish them that way even if there hasn't been an inactivity leak.  Medalla is a good example of this: it had an inactivity leak, but right now doesn't.  If I had a validator I started just before the inactivity leak, and another that started just after we recovered finalization, would they both be punished the same way now for not attesting, or would the older one have the inactivity leak applied and the newer one not?  It seems that this post-hoc alternative punishment adds complexity and confusion, rather than having a single system across the board.\r\n\r\nI agree that this is more punitive than the existing penalty system long-term, but in the short term it's actually beneficial.  Some (very) quick maths suggests that the quadratic leak with the parameters for phase 0 launch would be far better for validators that don't validate for a few hours, which would cover those who have a computer crash overnight, short-term upgrade issues, etc. (see https://imgur.com/3oGHDXN.png for the graph, although as mentioned maths was quick so could be incorrect).\r\n\r\nWith current mainnet parameters we're looking at ~43 days of being offline before losing half your stake.  Perhaps this could be relaxed further, or perhaps we have a multiplier for the quadratic leak depending on if the chain is reaching finality or not, but a single system for punishing non-attesting validators seems to be a cleaner solution than having conditionals.  I do understand, however, if it's considered too punitive in general to have a quadratic punishment as opposed to a linear one when the chain is behaving.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/706105515/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/706110589",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2098#issuecomment-706110589",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2098",
    "id": 706110589,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwNjExMDU4OQ==",
    "user": {
      "login": "dankrad",
      "id": 6130607,
      "node_id": "MDQ6VXNlcjYxMzA2MDc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6130607?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dankrad",
      "html_url": "https://github.com/dankrad",
      "followers_url": "https://api.github.com/users/dankrad/followers",
      "following_url": "https://api.github.com/users/dankrad/following{/other_user}",
      "gists_url": "https://api.github.com/users/dankrad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dankrad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dankrad/subscriptions",
      "organizations_url": "https://api.github.com/users/dankrad/orgs",
      "repos_url": "https://api.github.com/users/dankrad/repos",
      "events_url": "https://api.github.com/users/dankrad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dankrad/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-09T10:47:43Z",
    "updated_at": "2020-10-09T10:47:43Z",
    "author_association": "MEMBER",
    "body": "> If, for example, 10% of validators created a slashing event it would have ~0 impact on the safety/liveness of the chain (assuming the other validators are honest), but they are punished regardless, but the validator would be punished for ~10 Ether and forcibly ejected. \r\n\r\nThis is true, but the argument would be that 10% is already getting in the direction of a coordinated attack. I am more speaking of <1% failures which we currently don't punish harshly, in the interest of getting people to stake.\r\n\r\nBut this highlights one possible construction error of the inactivity leak: Whereas the other anti-correlation penalties will already impose serious penalties when failures are only part of the way to an attack, the inactivity leak only responds when a failure has already happened. I guess the more consistent way to do this would be to always have a quadratic inactivity leak, but make it proportional to the percentage of offline stake. So, even at 10% offline you would get a serious inactivity leak, which is more consistent with other penalties.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/706110589/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/706111607",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2098#issuecomment-706111607",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2098",
    "id": 706111607,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwNjExMTYwNw==",
    "user": {
      "login": "mcdee",
      "id": 511384,
      "node_id": "MDQ6VXNlcjUxMTM4NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/511384?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mcdee",
      "html_url": "https://github.com/mcdee",
      "followers_url": "https://api.github.com/users/mcdee/followers",
      "following_url": "https://api.github.com/users/mcdee/following{/other_user}",
      "gists_url": "https://api.github.com/users/mcdee/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mcdee/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mcdee/subscriptions",
      "organizations_url": "https://api.github.com/users/mcdee/orgs",
      "repos_url": "https://api.github.com/users/mcdee/repos",
      "events_url": "https://api.github.com/users/mcdee/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mcdee/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-09T10:50:19Z",
    "updated_at": "2020-10-09T10:50:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "> I guess the more consistent way to do this would be to always have a quadratic inactivity leak, but make it proportional to the percentage of offline stake.\r\n\r\nThat sounds like a very interesting idea.  Single system, unifies the current punishment and inactivity leak mechanisms, and proportional to the impact it is having on the network.  Seems to tick all the boxes.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/706111607/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/706202263",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2098#issuecomment-706202263",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2098",
    "id": 706202263,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwNjIwMjI2Mw==",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-09T14:05:20Z",
    "updated_at": "2020-10-09T14:05:20Z",
    "author_association": "MEMBER",
    "body": "I think the following captures what we'd like to see while being a bit less punitive than @dankrad's original proposal\r\n\r\n* track `non_finalized_counter` in beacon state. init to 0\r\n* If an epoch doesn't finalize\r\n  * increment `non_finalized_counter`\r\n  * if `non_finalized_counter  > MIN_EPOCHS_TO_INACTIVITY_PENALTY`: apply leak rewards as a function of `non_finalized_counter`\r\n* If an epoch does finalized\r\n   * decrement `non_finalized_counter`\r\n   * apply normal rewards/penalties\r\n\r\nThis avoids the case where we don't finalize for a while, e.g. 100 epochs, but then finalize one epoch and lose the inactivity leak quadratic build up. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/706202263/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/708560301",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2098#issuecomment-708560301",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2098",
    "id": 708560301,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwODU2MDMwMQ==",
    "user": {
      "login": "mcdee",
      "id": 511384,
      "node_id": "MDQ6VXNlcjUxMTM4NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/511384?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mcdee",
      "html_url": "https://github.com/mcdee",
      "followers_url": "https://api.github.com/users/mcdee/followers",
      "following_url": "https://api.github.com/users/mcdee/following{/other_user}",
      "gists_url": "https://api.github.com/users/mcdee/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mcdee/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mcdee/subscriptions",
      "organizations_url": "https://api.github.com/users/mcdee/orgs",
      "repos_url": "https://api.github.com/users/mcdee/repos",
      "events_url": "https://api.github.com/users/mcdee/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mcdee/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-14T17:49:08Z",
    "updated_at": "2020-10-14T17:49:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "@djrtwo that seems to be attempting to address a different problem than the one @dankrad outlined.  From what I can see, yours will increase the inactivity leak in the \"10-on-100-off\" situation where the majority of epochs are not finalized, but due to the existing mechanics of the inactivity leak the punishment in the \"100-off\" part are very low, even if this pattern repeats indefinitely.\r\n\r\nIt does feel that these various methods could be unified in to a single penalty system as Dankrad suggested.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/708560301/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/952458107",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2098#issuecomment-952458107",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2098",
    "id": 952458107,
    "node_id": "IC_kwDOCOoGbc44xVt7",
    "user": {
      "login": "seascape195",
      "id": 42080647,
      "node_id": "MDQ6VXNlcjQyMDgwNjQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/42080647?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/seascape195",
      "html_url": "https://github.com/seascape195",
      "followers_url": "https://api.github.com/users/seascape195/followers",
      "following_url": "https://api.github.com/users/seascape195/following{/other_user}",
      "gists_url": "https://api.github.com/users/seascape195/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/seascape195/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/seascape195/subscriptions",
      "organizations_url": "https://api.github.com/users/seascape195/orgs",
      "repos_url": "https://api.github.com/users/seascape195/repos",
      "events_url": "https://api.github.com/users/seascape195/events{/privacy}",
      "received_events_url": "https://api.github.com/users/seascape195/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-27T01:25:22Z",
    "updated_at": "2021-10-27T01:25:22Z",
    "author_association": "NONE",
    "body": "Move dead node to a 'time out space' holding block. Require all 2.0 validators to Post next of kin contact.  If node unresponsive for x time, move to holding block, kick off next of kin contact with instructions and timeframe limit to get the node back online or terminate the node for good, cash out diminishing return on staked amount until staked amount reaches zero or node reinstated and active validating nodes again.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/952458107/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1847471257",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2098#issuecomment-1847471257",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2098",
    "id": 1847471257,
    "node_id": "IC_kwDOCOoGbc5uHiyZ",
    "user": {
      "login": "dapplion",
      "id": 35266934,
      "node_id": "MDQ6VXNlcjM1MjY2OTM0",
      "avatar_url": "https://avatars.githubusercontent.com/u/35266934?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dapplion",
      "html_url": "https://github.com/dapplion",
      "followers_url": "https://api.github.com/users/dapplion/followers",
      "following_url": "https://api.github.com/users/dapplion/following{/other_user}",
      "gists_url": "https://api.github.com/users/dapplion/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dapplion/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dapplion/subscriptions",
      "organizations_url": "https://api.github.com/users/dapplion/orgs",
      "repos_url": "https://api.github.com/users/dapplion/repos",
      "events_url": "https://api.github.com/users/dapplion/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dapplion/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-12-08T16:19:56Z",
    "updated_at": "2023-12-08T16:19:56Z",
    "author_association": "COLLABORATOR",
    "body": "Implemented in altair's HF by introducing a per-validator counter: inactivity score\r\n\r\nhttps://github.com/ethereum/consensus-specs/blob/bf09b9a7c4a7b311e86823235815daf31b117574/specs/altair/beacon-chain.md#modified-get_inactivity_penalty_deltas",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1847471257/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
