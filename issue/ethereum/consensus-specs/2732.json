{
  "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2732",
  "repository_url": "https://api.github.com/repos/ethereum/consensus-specs",
  "labels_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2732/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2732/comments",
  "events_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2732/events",
  "html_url": "https://github.com/ethereum/consensus-specs/issues/2732",
  "id": 1060223074,
  "node_id": "I_kwDOCOoGbc4_Mbhi",
  "number": 2732,
  "title": "Nodes may get stuck due to parent availability issue with transition block",
  "user": {
    "login": "mkalinin",
    "id": 1892772,
    "node_id": "MDQ6VXNlcjE4OTI3NzI=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1892772?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mkalinin",
    "html_url": "https://github.com/mkalinin",
    "followers_url": "https://api.github.com/users/mkalinin/followers",
    "following_url": "https://api.github.com/users/mkalinin/following{/other_user}",
    "gists_url": "https://api.github.com/users/mkalinin/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mkalinin/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mkalinin/subscriptions",
    "organizations_url": "https://api.github.com/users/mkalinin/orgs",
    "repos_url": "https://api.github.com/users/mkalinin/repos",
    "events_url": "https://api.github.com/users/mkalinin/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mkalinin/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 11,
  "created_at": "2021-11-22T14:28:12Z",
  "updated_at": "2021-12-22T18:22:15Z",
  "closed_at": "2021-12-22T18:22:15Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "### Problem\r\n\r\nSuppose, the merge fork has happened and beacon chain network produces blocks with empty payloads waiting for TTD to hit the reality. Malicious proposer builds a block with non-empty payload with a random sequence set to its `parent_hash` field, i.e. producing a payload atop of a block that is unavailable. According to current spec EL must turn into `SYNCING` upon receiving such a payload which would turn all nodes in the network into syncing mode and prevent them from attesting to and proposing new blocks.\r\n\r\nThis edge case was attempted to be solved in the Interop spec (see no 5. in Engine API spec [here](https://github.com/ethereum/execution-apis/blob/main/src/engine/interop/specification.md#specification-2)) and has been brought up [in discord](https://discord.com/channels/595666850260713488/892088344438255616/912275147598229534) by @g11tech (thanks a lot!) as Kintsugi spec seems to miss the handling of this case.\r\n\r\n### Potential Solution\r\n\r\nInterop spec proposes for EL to turn into `SYNCING` only after parent block is pulled from the network and is proved to be a PoS block. If the parent yet not pulled or it appeared to be a PoW block, EL should keep silence and try to pull missing blocks from the wire and execute them. If the parent block is indeed unavailable then EL would try to resolve the dependency forever and never respond to CL, and CL wouldn't treat the beacon block containing this payload as fully validated, thus, would orphan this block and move on. Additionally, it requires EL to properly handle the case when it's forced to sync with unavailable chain -- this assumed to be resolved already as it may happen on the Mainnet (by receiving `NewBlock` with unavailable parent) -- but there could be implications in the new context of CL/EL communications.\r\n\r\nNote, when a node syncs from scratch and EL starts syncing before hearing from CL (regular sync in the PoW network) it will respond with `SYNCING` to any `executePayload` call. Suppose CL sends `executePayload` with unavailable parent block *before* EL starts its sync process, EL following the Interop spec would wait until it pulls and executes the parent block and all its ancestors -- this would keep CL in limbo for a few hours in case of the Mainnet. Being in this state CL can't attest to or propose new blocks.\r\n\r\nA solution that seems working but not always:\r\n* Add `isMergeBlock: bool` to `executePayload` to clearly distinguish transition block from the others (EL could hijack `forkchoiceUpdated` -- if there were no `forkchoiceUpdated` calls before and `executePayload` call then this must be a transition block).\r\n* Add `UNKNOWN_PARENT` response status to `executePayload`. EL returns `UNKNOWN_PARENT` when `isMergeBlock: True`, the parent is unknown and EL isn't already `SYNCING`. Additionally, EL initiates the sync process in attempt to sync up to (and including) the parent block\r\n* CL handles `UNKNOWN_PARENT` as `SYNCING` during the optimistic sync, and as if there was a missing slot in the case when no sync process is happening -- it allows CL to attest to the previous block and propose yet another block on top of the previous one\r\n* In case when the parent is truly unavailable honest nodes will orphan the block\r\n* In case when the parent PoW block exists but a node didn't receive it in time due to synchrony issues the things get worse. CL will have to pull the parent beacon block and try to re-import it once again with potentially the same `UNKNOWN_PARENT` result if the sync process on EL side hasn't resolved the dependency yet.\r\n\r\n",
  "closed_by": {
    "login": "mkalinin",
    "id": 1892772,
    "node_id": "MDQ6VXNlcjE4OTI3NzI=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1892772?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mkalinin",
    "html_url": "https://github.com/mkalinin",
    "followers_url": "https://api.github.com/users/mkalinin/followers",
    "following_url": "https://api.github.com/users/mkalinin/following{/other_user}",
    "gists_url": "https://api.github.com/users/mkalinin/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mkalinin/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mkalinin/subscriptions",
    "organizations_url": "https://api.github.com/users/mkalinin/orgs",
    "repos_url": "https://api.github.com/users/mkalinin/repos",
    "events_url": "https://api.github.com/users/mkalinin/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mkalinin/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2732/reactions",
    "total_count": 1,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 1
  },
  "timeline_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2732/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/975620679",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2732#issuecomment-975620679",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2732",
    "id": 975620679,
    "node_id": "IC_kwDOCOoGbc46JspH",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-22T15:06:22Z",
    "updated_at": "2021-11-22T15:06:22Z",
    "author_association": "MEMBER",
    "body": "> which would turn all nodes in the network into syncing mode and prevent them from attesting to and proposing new blocks.\r\n\r\nI don't see why this is true? A CL node would not incorporate this block into their non-optimistic block-tree and would build upon an avaialble TTD block as long as this isn't resolved",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/975620679/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/975734748",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2732#issuecomment-975734748",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2732",
    "id": 975734748,
    "node_id": "IC_kwDOCOoGbc46KIfc",
    "user": {
      "login": "mkalinin",
      "id": 1892772,
      "node_id": "MDQ6VXNlcjE4OTI3NzI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1892772?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mkalinin",
      "html_url": "https://github.com/mkalinin",
      "followers_url": "https://api.github.com/users/mkalinin/followers",
      "following_url": "https://api.github.com/users/mkalinin/following{/other_user}",
      "gists_url": "https://api.github.com/users/mkalinin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mkalinin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mkalinin/subscriptions",
      "organizations_url": "https://api.github.com/users/mkalinin/orgs",
      "repos_url": "https://api.github.com/users/mkalinin/repos",
      "events_url": "https://api.github.com/users/mkalinin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mkalinin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-22T17:04:19Z",
    "updated_at": "2021-11-22T17:04:19Z",
    "author_association": "MEMBER",
    "body": "> I don't see why this is true?\r\n\r\nThis is true if `SYNCING` status in the response turns CL from the online into the syncing mode where it can't propose and attest understanding that it's yet not caught up with the head of observable chain. If this switch doesn't happen then we're safe in this edge case. Indeed, if EL responds with `SYNCING` in this case then the next proposer may still build yet another transition block with its own terminal PoW block and validators will be able to attest to it if in this case the parent is available. \r\n\r\n`SYNCING` status in the response signals that EL is missing (at least) parent and post-Merge this must never happen with online node as block trees of CL and EL are tightly coupled and no data availability issue may occur between the layers. CL adding a beacon block into its optimistic tree upon processing, and then moving it to the fully verified state once it hears from EL that the payload is `VALID` sounds fine. But doing the same when EL signalling that some data is missing does't feel right. Deciding on what CL should do when it receives `SYNCING` post-Merge is out of the scope of this issue and probably worth discussion.\r\n\r\nIMO, the right behaviour of a node in this edge case is similar to what it would be if the payload execution took forever. Missing data is a different kind of thing and we might want avoid mixing it into this case. I am not saying that this is entirely wrong though -- definitely worth discussion",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/975734748/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/975907837",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2732#issuecomment-975907837",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2732",
    "id": 975907837,
    "node_id": "IC_kwDOCOoGbc46Kyv9",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-22T20:51:37Z",
    "updated_at": "2021-11-22T20:51:37Z",
    "author_association": "MEMBER",
    "body": "Right, SYNCING from EL on chains with an unknown PoW source at the transition *cannot* block CL from making decisions. Doing so would allow for trivially stopping the transition process.\r\n\r\n> IMO, the right behaviour of a node in this edge case is similar to what it would be if the payload execution took forever. \r\n\r\nFor simplicity sake (not changing APIs or anything), I think that we should not go into a place where EL can hang forever (just attempting to fill in the unavailable PoW parent) nor should we specify new return values. CL can discern between SYNCING on chains where some PoS ancestor is validated and chains where they are rooted in an unknown PoW parent. Thus they have enough information to act accordingly (not halt block and attestation production).\r\n\r\nI think the correct thing is to just note that SYNCING return value on transition chains **MUST NOT**  halt block and attestation production.\r\n\r\nWe can discuss other \"halt\" conditions in optimistic sync discussions/specs elsewhere.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/975907837/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/976154512",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2732#issuecomment-976154512",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2732",
    "id": 976154512,
    "node_id": "IC_kwDOCOoGbc46Lu-Q",
    "user": {
      "login": "g11tech",
      "id": 76567250,
      "node_id": "MDQ6VXNlcjc2NTY3MjUw",
      "avatar_url": "https://avatars.githubusercontent.com/u/76567250?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/g11tech",
      "html_url": "https://github.com/g11tech",
      "followers_url": "https://api.github.com/users/g11tech/followers",
      "following_url": "https://api.github.com/users/g11tech/following{/other_user}",
      "gists_url": "https://api.github.com/users/g11tech/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/g11tech/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/g11tech/subscriptions",
      "organizations_url": "https://api.github.com/users/g11tech/orgs",
      "repos_url": "https://api.github.com/users/g11tech/repos",
      "events_url": "https://api.github.com/users/g11tech/events{/privacy}",
      "received_events_url": "https://api.github.com/users/g11tech/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-23T04:11:22Z",
    "updated_at": "2021-11-23T04:11:22Z",
    "author_association": "MEMBER",
    "body": ">CL can discern between SYNCING on chains where some PoS ancestor is validated and chains where they are rooted in an unknown PoW parent. Thus they have enough information to act accordingly (not halt block and attestation production).\r\n\r\nThis distinction by CL at the transition time should resolve and get the right/available/popular pow in the chain by allowing to use the local PoW to build the new merge block. Once the new terminal PoW is out there in network, validators should be able to vote on it.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/976154512/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/976200063",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2732#issuecomment-976200063",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2732",
    "id": 976200063,
    "node_id": "IC_kwDOCOoGbc46L6F_",
    "user": {
      "login": "mkalinin",
      "id": 1892772,
      "node_id": "MDQ6VXNlcjE4OTI3NzI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1892772?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mkalinin",
      "html_url": "https://github.com/mkalinin",
      "followers_url": "https://api.github.com/users/mkalinin/followers",
      "following_url": "https://api.github.com/users/mkalinin/following{/other_user}",
      "gists_url": "https://api.github.com/users/mkalinin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mkalinin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mkalinin/subscriptions",
      "organizations_url": "https://api.github.com/users/mkalinin/orgs",
      "repos_url": "https://api.github.com/users/mkalinin/repos",
      "events_url": "https://api.github.com/users/mkalinin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mkalinin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-23T06:35:02Z",
    "updated_at": "2021-11-23T06:35:02Z",
    "author_association": "MEMBER",
    "body": "> I think the correct thing is to just note that SYNCING return value on transition chains **MUST NOT** halt block and attestation production.\r\n\r\nI tend to agree. We need a proper place for this statement. I guess it should be in the optimistic sync document.\r\n\r\n> We can discuss other \"halt\" conditions in optimistic sync discussions/specs elsewhere\r\n\r\nI've created a separate issue https://github.com/ethereum/consensus-specs/issues/2735",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/976200063/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/976718323",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2732#issuecomment-976718323",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2732",
    "id": 976718323,
    "node_id": "IC_kwDOCOoGbc46N4nz",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-23T15:29:27Z",
    "updated_at": "2021-11-23T15:29:27Z",
    "author_association": "MEMBER",
    "body": "I think we can elevate that as a note into the CL specs\r\n\r\n> Chains with transition blocks with unavailable PoW parents **MUST** be queued until the source PoW chain becomes available. Block and attestation production **MUST NOT** be halted due to anything in that queue",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/976718323/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/977233497",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2732#issuecomment-977233497",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2732",
    "id": 977233497,
    "node_id": "IC_kwDOCOoGbc46P2ZZ",
    "user": {
      "login": "ajsutton",
      "id": 72675,
      "node_id": "MDQ6VXNlcjcyNjc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/72675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajsutton",
      "html_url": "https://github.com/ajsutton",
      "followers_url": "https://api.github.com/users/ajsutton/followers",
      "following_url": "https://api.github.com/users/ajsutton/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajsutton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajsutton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajsutton/subscriptions",
      "organizations_url": "https://api.github.com/users/ajsutton/orgs",
      "repos_url": "https://api.github.com/users/ajsutton/repos",
      "events_url": "https://api.github.com/users/ajsutton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajsutton/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-23T22:33:54Z",
    "updated_at": "2021-11-23T22:33:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "What's the limit on that though? For example if I'm following a chain and get a transition block that I can't yet verify, it makes sense to not have that block me.  But if I can optimistically follow the chain past that transition block for another 100 epochs then it seems wrong to produce a block that would create a fork.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/977233497/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/977262419",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2732#issuecomment-977262419",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2732",
    "id": 977262419,
    "node_id": "IC_kwDOCOoGbc46P9dT",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-23T23:10:45Z",
    "updated_at": "2021-11-23T23:10:45Z",
    "author_association": "MEMBER",
    "body": "An easy limit is if an unavailable chain (wrt PoW source) finalizes. This clearly looks like a networking/EL failure and should probably be bubbled up to the user",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/977262419/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/977287478",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2732#issuecomment-977287478",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2732",
    "id": 977287478,
    "node_id": "IC_kwDOCOoGbc46QDk2",
    "user": {
      "login": "ajsutton",
      "id": 72675,
      "node_id": "MDQ6VXNlcjcyNjc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/72675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajsutton",
      "html_url": "https://github.com/ajsutton",
      "followers_url": "https://api.github.com/users/ajsutton/followers",
      "following_url": "https://api.github.com/users/ajsutton/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajsutton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajsutton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajsutton/subscriptions",
      "organizations_url": "https://api.github.com/users/ajsutton/orgs",
      "repos_url": "https://api.github.com/users/ajsutton/repos",
      "events_url": "https://api.github.com/users/ajsutton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajsutton/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-23T23:42:51Z",
    "updated_at": "2021-11-23T23:42:51Z",
    "author_association": "CONTRIBUTOR",
    "body": "> An easy limit is if an unavailable chain (wrt PoW source) finalizes. This clearly looks like a networking/EL failure and should probably be bubbled up to the user\r\n\r\nBut we'd expect that to happen if we're initially syncing the chain so it wouldn't be an error we'd report to the user.  Not performing duties if our finalized checkpoint is only optimistically synced probably does make sense - though I'd be tempted to base it on the justified checkpoint instead since attesting with an invalid justified checkpoint can be very problematic and it's still a very strong signal that a lot of validators think that's the real chain and the execution block should turn up eventually.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/977287478/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/977620701",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2732#issuecomment-977620701",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2732",
    "id": 977620701,
    "node_id": "IC_kwDOCOoGbc46RU7d",
    "user": {
      "login": "g11tech",
      "id": 76567250,
      "node_id": "MDQ6VXNlcjc2NTY3MjUw",
      "avatar_url": "https://avatars.githubusercontent.com/u/76567250?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/g11tech",
      "html_url": "https://github.com/g11tech",
      "followers_url": "https://api.github.com/users/g11tech/followers",
      "following_url": "https://api.github.com/users/g11tech/following{/other_user}",
      "gists_url": "https://api.github.com/users/g11tech/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/g11tech/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/g11tech/subscriptions",
      "organizations_url": "https://api.github.com/users/g11tech/orgs",
      "repos_url": "https://api.github.com/users/g11tech/repos",
      "events_url": "https://api.github.com/users/g11tech/events{/privacy}",
      "received_events_url": "https://api.github.com/users/g11tech/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-24T07:58:04Z",
    "updated_at": "2021-11-24T07:58:04Z",
    "author_association": "MEMBER",
    "body": "+1 for justified as it will signal early on that User needs to followup/escalate for the social consensus to kickin, hopefully before chain finalizes. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/977620701/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/999777360",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2732#issuecomment-999777360",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2732",
    "id": 999777360,
    "node_id": "IC_kwDOCOoGbc47l2RQ",
    "user": {
      "login": "mkalinin",
      "id": 1892772,
      "node_id": "MDQ6VXNlcjE4OTI3NzI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1892772?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mkalinin",
      "html_url": "https://github.com/mkalinin",
      "followers_url": "https://api.github.com/users/mkalinin/followers",
      "following_url": "https://api.github.com/users/mkalinin/following{/other_user}",
      "gists_url": "https://api.github.com/users/mkalinin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mkalinin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mkalinin/subscriptions",
      "organizations_url": "https://api.github.com/users/mkalinin/orgs",
      "repos_url": "https://api.github.com/users/mkalinin/repos",
      "events_url": "https://api.github.com/users/mkalinin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mkalinin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-12-22T18:22:15Z",
    "updated_at": "2021-12-22T18:22:15Z",
    "author_association": "MEMBER",
    "body": "Addressed in https://github.com/ethereum/consensus-specs/pull/2770:\r\n> The current slot (as per the system clock) is at least `SAFE_SLOTS_TO_IMPORT_OPTIMISTICALLY` ahead of the slot of the block being imported.\r\n\r\nA node will not optimistically import a merge transition block until it's safe enough to do so. This prevents system from getting stuck due to all nodes being kicked out by a transition block atop of unavailable terminal block. If a terminal block is available but haven't been disseminated in time it will eventually be disseminated and picked up by one of the next proposers to build another transition block atop of it, and this block will likely be accepted by the network.\r\n\r\nIf a block is indeed unavailable an honest chain built during `SAFE_SLOTS_TO_IMPORT_OPTIMISTICALLY` will be long enough to outperform a malicious chain built atop of unavailable terminal block. Most likely an honest chain segment will have justified and finalized checkpoints produced during this period of time.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/999777360/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
