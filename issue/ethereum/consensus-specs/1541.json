{
  "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1541",
  "repository_url": "https://api.github.com/repos/ethereum/consensus-specs",
  "labels_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1541/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1541/comments",
  "events_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1541/events",
  "html_url": "https://github.com/ethereum/consensus-specs/issues/1541",
  "id": 540251556,
  "node_id": "MDU6SXNzdWU1NDAyNTE1NTY=",
  "number": 1541,
  "title": "Update of state missing in process_deposit?",
  "user": {
    "login": "franck44",
    "id": 14901362,
    "node_id": "MDQ6VXNlcjE0OTAxMzYy",
    "avatar_url": "https://avatars.githubusercontent.com/u/14901362?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/franck44",
    "html_url": "https://github.com/franck44",
    "followers_url": "https://api.github.com/users/franck44/followers",
    "following_url": "https://api.github.com/users/franck44/following{/other_user}",
    "gists_url": "https://api.github.com/users/franck44/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/franck44/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/franck44/subscriptions",
    "organizations_url": "https://api.github.com/users/franck44/orgs",
    "repos_url": "https://api.github.com/users/franck44/repos",
    "events_url": "https://api.github.com/users/franck44/events{/privacy}",
    "received_events_url": "https://api.github.com/users/franck44/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1063043872,
      "node_id": "MDU6TGFiZWwxMDYzMDQzODcy",
      "url": "https://api.github.com/repos/ethereum/consensus-specs/labels/general:question",
      "name": "general:question",
      "color": "FAD689",
      "default": false,
      "description": "Further information is requested"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 5,
  "created_at": "2019-12-19T11:21:21Z",
  "updated_at": "2020-06-17T23:04:05Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "The process_deposit code below seems to work as follows.\r\n\r\nIf the deposit originates from a pubkey that is not in  `state.validators`, a new entry is created and appended at the end of `state.validators` and initialised with the deposit. The corresponding state.balances entry is also updated. \r\nHowever, if the pubkey of the deposit is in  `state.validators`, say at index i, only the `state.balances[i]` is updated, not the `state.validators[i].effective_balance`.\r\n\r\nIs it desirable that the following invariant holds: for all (Beacon) state s, \r\n` forall 0 <= i < s.validators.length, s.validators[i].effective_balance == s.balances[i]?`\r\n\r\nIf yes it seems to be broken when a deposit is made by a validator that is already in `state.validators`. The last else statement updates the balances but not the corresponding BeaconState `state.validators[i].effective_balance`. `increase_balance` does not update the state.\r\nIs it a bug or a feature?\r\n\r\nNote: even when a new validator is created the balances is updated with the `amount` but the state is updated with `amount - amount % EFFECTIVE_BALANCE_INCREMENT, MAX_EFFECTIVE_BALANCE),` which are two different values.\r\nIs this also a bug or a feature?\r\n\r\n```\r\ndef process_deposit(state: BeaconState, deposit: Deposit) -> None:\r\n    # Verify the Merkle branch\r\n    assert is_valid_merkle_branch(\r\n        leaf=hash_tree_root(deposit.data),\r\n        branch=deposit.proof,\r\n        depth=DEPOSIT_CONTRACT_TREE_DEPTH + 1,  # Add 1 for the `List` length mix-in\r\n        index=state.eth1_deposit_index,\r\n        root=state.eth1_data.deposit_root,\r\n    )\r\n\r\n    # Deposits must be processed in order\r\n    state.eth1_deposit_index += 1\r\n\r\n    pubkey = deposit.data.pubkey\r\n    amount = deposit.data.amount\r\n    validator_pubkeys = [v.pubkey for v in state.validators]\r\n    if pubkey not in validator_pubkeys:\r\n        # Verify the deposit signature (proof of possession) for new validators.\r\n        # Note: The deposit contract does not check signatures.\r\n        # Note: Deposits are valid across forks, thus the deposit domain is retrieved directly from `compute_domain`.\r\n        domain = compute_domain(DOMAIN_DEPOSIT)\r\n        deposit_message = DepositMessage(\r\n            pubkey=deposit.data.pubkey,\r\n            withdrawal_credentials=deposit.data.withdrawal_credentials,\r\n            amount=deposit.data.amount)\r\n        if not bls_verify(pubkey, hash_tree_root(deposit_message), deposit.data.signature, domain):\r\n            return\r\n\r\n        # Add validator and balance entries\r\n        state.validators.append(Validator(\r\n            pubkey=pubkey,\r\n            withdrawal_credentials=deposit.data.withdrawal_credentials,\r\n            activation_eligibility_epoch=FAR_FUTURE_EPOCH,\r\n            activation_epoch=FAR_FUTURE_EPOCH,\r\n            exit_epoch=FAR_FUTURE_EPOCH,\r\n            withdrawable_epoch=FAR_FUTURE_EPOCH,\r\n            effective_balance=min(amount - amount % EFFECTIVE_BALANCE_INCREMENT, MAX_EFFECTIVE_BALANCE),\r\n        ))\r\n        state.balances.append(amount)\r\n    else:\r\n        # Increase balance by deposit amount\r\n        index = ValidatorIndex(validator_pubkeys.index(pubkey))\r\n        increase_balance(state, index, amount)\r\n```",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1541/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1541/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/567582494",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1541#issuecomment-567582494",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1541",
    "id": 567582494,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2NzU4MjQ5NA==",
    "user": {
      "login": "protolambda",
      "id": 19571989,
      "node_id": "MDQ6VXNlcjE5NTcxOTg5",
      "avatar_url": "https://avatars.githubusercontent.com/u/19571989?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/protolambda",
      "html_url": "https://github.com/protolambda",
      "followers_url": "https://api.github.com/users/protolambda/followers",
      "following_url": "https://api.github.com/users/protolambda/following{/other_user}",
      "gists_url": "https://api.github.com/users/protolambda/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/protolambda/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/protolambda/subscriptions",
      "organizations_url": "https://api.github.com/users/protolambda/orgs",
      "repos_url": "https://api.github.com/users/protolambda/repos",
      "events_url": "https://api.github.com/users/protolambda/events{/privacy}",
      "received_events_url": "https://api.github.com/users/protolambda/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-12-19T17:20:57Z",
    "updated_at": "2019-12-19T17:23:23Z",
    "author_association": "MEMBER",
    "body": "The effective balance is purposefully lagging, and will be updated by the subsequent epoch transition.\r\nThis is for different reasons, but generally: at the end of the epoch the effective balance is used for different calculations, and we do not want to consider it as full-epoch stake when it was only deposited near the end of the epoch.\r\nEdit: and to clarify, initial deposits add effective balance to non-active validators, so it does not matter much there. (except that we need the effective balance to be there at the start of epoch transitioning, for quicker activation eligibility than if we only update it at the end of the epoch transition with the others)\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/567582494/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/567651784",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1541#issuecomment-567651784",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1541",
    "id": 567651784,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2NzY1MTc4NA==",
    "user": {
      "login": "franck44",
      "id": 14901362,
      "node_id": "MDQ6VXNlcjE0OTAxMzYy",
      "avatar_url": "https://avatars.githubusercontent.com/u/14901362?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/franck44",
      "html_url": "https://github.com/franck44",
      "followers_url": "https://api.github.com/users/franck44/followers",
      "following_url": "https://api.github.com/users/franck44/following{/other_user}",
      "gists_url": "https://api.github.com/users/franck44/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/franck44/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/franck44/subscriptions",
      "organizations_url": "https://api.github.com/users/franck44/orgs",
      "repos_url": "https://api.github.com/users/franck44/repos",
      "events_url": "https://api.github.com/users/franck44/events{/privacy}",
      "received_events_url": "https://api.github.com/users/franck44/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-12-19T20:31:57Z",
    "updated_at": "2019-12-19T20:37:41Z",
    "author_association": "NONE",
    "body": "Thanks @protolambda.\r\nSo if I understand well, the invariant should be that at the end of each epoch \r\nfor a (Beacon) state s,\r\nforall 0 <= i < s.validators.length, s.validastors[i] is active implies (s.validators[i].effective_balance == s.balances[i])?\r\nOr is it that, for each epoch, effective_balance of an active validator is frozen, and updated only at the end when transitioning to a new epoch?\r\n\r\nThere was another part in my question (for non-active validators) related to the fact that one update uses `amount` and the other one  `min(amount - amount EFFECTIVE_BALANCE_INCREMENT, MAX_EFFECTIVE_BALANCE) ))`\r\nAre these values adjusted to match at the end of the epoch or are they different on purpose?\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/567651784/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/571135549",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1541#issuecomment-571135549",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1541",
    "id": 571135549,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3MTEzNTU0OQ==",
    "user": {
      "login": "protolambda",
      "id": 19571989,
      "node_id": "MDQ6VXNlcjE5NTcxOTg5",
      "avatar_url": "https://avatars.githubusercontent.com/u/19571989?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/protolambda",
      "html_url": "https://github.com/protolambda",
      "followers_url": "https://api.github.com/users/protolambda/followers",
      "following_url": "https://api.github.com/users/protolambda/following{/other_user}",
      "gists_url": "https://api.github.com/users/protolambda/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/protolambda/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/protolambda/subscriptions",
      "organizations_url": "https://api.github.com/users/protolambda/orgs",
      "repos_url": "https://api.github.com/users/protolambda/repos",
      "events_url": "https://api.github.com/users/protolambda/events{/privacy}",
      "received_events_url": "https://api.github.com/users/protolambda/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-06T13:20:48Z",
    "updated_at": "2020-01-06T13:20:58Z",
    "author_association": "MEMBER",
    "body": "> So if I understand well, the invariant should be that at the end of each epoch\r\nfor a (Beacon) state s,\r\nforall 0 <= i < s.validators.length, s.validastors[i] is active implies (s.validators[i].effective_balance == s.balances[i])?\r\n\r\nAlmost, the effective balance changes stepwise, using [hysteresis](https://en.wikipedia.org/wiki/Hysteresis) to avoid stake information from having to update too often, and to incentivize to keep it stable (it will take more efforty to recover a balance to its original after bad behavior). At the end of the epoch is the adjustment yes.\r\n\r\n> Or is it that, for each epoch, effective_balance of an active validator is frozen, and updated only at the end when transitioning to a new epoch?\r\n\r\nYes. We have `validator.slashed` to disable any bad validator during the epoch. It will still be considered as part of the committee, as we can't just reshuffle in the middle of work whenever someone gets slashed.\r\n\r\n> There was another part in my question (for non-active validators) related to the fact that one update uses amount and the other one min(amount - amount EFFECTIVE_BALANCE_INCREMENT, MAX_EFFECTIVE_BALANCE) ))\r\nAre these values adjusted to match at the end of the epoch or are they different on purpose?\r\n\r\nThe initial effective balance vs the updated one? Can you highlight the line? It should just be hysteresis everywhere. Maybe it's already a maxed out effective balance, hence no adjustment necessary?\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/571135549/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/645582981",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1541#issuecomment-645582981",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1541",
    "id": 645582981,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0NTU4Mjk4MQ==",
    "user": {
      "login": "protolambda",
      "id": 19571989,
      "node_id": "MDQ6VXNlcjE5NTcxOTg5",
      "avatar_url": "https://avatars.githubusercontent.com/u/19571989?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/protolambda",
      "html_url": "https://github.com/protolambda",
      "followers_url": "https://api.github.com/users/protolambda/followers",
      "following_url": "https://api.github.com/users/protolambda/following{/other_user}",
      "gists_url": "https://api.github.com/users/protolambda/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/protolambda/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/protolambda/subscriptions",
      "organizations_url": "https://api.github.com/users/protolambda/orgs",
      "repos_url": "https://api.github.com/users/protolambda/repos",
      "events_url": "https://api.github.com/users/protolambda/events{/privacy}",
      "received_events_url": "https://api.github.com/users/protolambda/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-17T19:42:00Z",
    "updated_at": "2020-06-17T19:42:14Z",
    "author_association": "MEMBER",
    "body": "Is this question still open? Or can I close this? I am trying to clean up some stale issues, let me know if I or others can help.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/645582981/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/645670761",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1541#issuecomment-645670761",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1541",
    "id": 645670761,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0NTY3MDc2MQ==",
    "user": {
      "login": "franck44",
      "id": 14901362,
      "node_id": "MDQ6VXNlcjE0OTAxMzYy",
      "avatar_url": "https://avatars.githubusercontent.com/u/14901362?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/franck44",
      "html_url": "https://github.com/franck44",
      "followers_url": "https://api.github.com/users/franck44/followers",
      "following_url": "https://api.github.com/users/franck44/following{/other_user}",
      "gists_url": "https://api.github.com/users/franck44/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/franck44/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/franck44/subscriptions",
      "organizations_url": "https://api.github.com/users/franck44/orgs",
      "repos_url": "https://api.github.com/users/franck44/repos",
      "events_url": "https://api.github.com/users/franck44/events{/privacy}",
      "received_events_url": "https://api.github.com/users/franck44/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-17T23:04:05Z",
    "updated_at": "2020-06-17T23:04:05Z",
    "author_association": "NONE",
    "body": "We have not verified that invariant yet. So we may leave it one for now?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/645670761/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
