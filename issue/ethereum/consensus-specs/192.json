{
  "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/192",
  "repository_url": "https://api.github.com/repos/ethereum/consensus-specs",
  "labels_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/192/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/192/comments",
  "events_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/192/events",
  "html_url": "https://github.com/ethereum/consensus-specs/issues/192",
  "id": 385854630,
  "node_id": "MDU6SXNzdWUzODU4NTQ2MzA=",
  "number": 192,
  "title": "Introduce reasonable boundaries on field values",
  "user": {
    "login": "arnetheduck",
    "id": 1382986,
    "node_id": "MDQ6VXNlcjEzODI5ODY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1382986?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/arnetheduck",
    "html_url": "https://github.com/arnetheduck",
    "followers_url": "https://api.github.com/users/arnetheduck/followers",
    "following_url": "https://api.github.com/users/arnetheduck/following{/other_user}",
    "gists_url": "https://api.github.com/users/arnetheduck/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/arnetheduck/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/arnetheduck/subscriptions",
    "organizations_url": "https://api.github.com/users/arnetheduck/orgs",
    "repos_url": "https://api.github.com/users/arnetheduck/repos",
    "events_url": "https://api.github.com/users/arnetheduck/events{/privacy}",
    "received_events_url": "https://api.github.com/users/arnetheduck/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1063043868,
      "node_id": "MDU6TGFiZWwxMDYzMDQzODY4",
      "url": "https://api.github.com/repos/ethereum/consensus-specs/labels/general:enhancement",
      "name": "general:enhancement",
      "color": "086788",
      "default": false,
      "description": "New feature or request"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 9,
  "created_at": "2018-11-29T17:52:59Z",
  "updated_at": "2019-02-13T00:56:39Z",
  "closed_at": "2019-02-13T00:56:39Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "With the new spec defaulting to `uint64` for serialization, it would be useful to introduce the notion of minimally supported values or bounds on acceptable values, so as to separate serialization from execution.\r\n\r\nAs an example, `uint24` is used because occasionally by design it is safe to do so, based on maximum possible validator counts.\r\nOther values might not be bounded the same way, but it remains essential that they get treated the same way by clients - for example, what is an upper bound on the slot number that we realistically want to support?\r\n\r\nIntroducing this in the spec will help ensure that implementations are conforming both in theory and in practice:\r\n  * JavaScript for example has no native `uint64` support, and in many languages, indexing is done with a smaller or signed type - the mechanical alignment between spec and reality suffers encouraging compromises\r\n  * unsigned arithmetic is surprising sometimes, where order of operations matters might make you over- or underflow temporarily, even though the end result is within bounds - more clarity will help statically analyze problem spots.\r\n * In both geth and in parity, optimizations have resulted in test cases being ignored and formal verification stumbling - due to `uint256` being specified but there being no practical uses for such a wide range - addressing this early on in the design would be beneficial\r\n",
  "closed_by": {
    "login": "JustinDrake",
    "id": 731743,
    "node_id": "MDQ6VXNlcjczMTc0Mw==",
    "avatar_url": "https://avatars.githubusercontent.com/u/731743?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/JustinDrake",
    "html_url": "https://github.com/JustinDrake",
    "followers_url": "https://api.github.com/users/JustinDrake/followers",
    "following_url": "https://api.github.com/users/JustinDrake/following{/other_user}",
    "gists_url": "https://api.github.com/users/JustinDrake/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/JustinDrake/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/JustinDrake/subscriptions",
    "organizations_url": "https://api.github.com/users/JustinDrake/orgs",
    "repos_url": "https://api.github.com/users/JustinDrake/repos",
    "events_url": "https://api.github.com/users/JustinDrake/events{/privacy}",
    "received_events_url": "https://api.github.com/users/JustinDrake/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/192/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/192/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/443001230",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/192#issuecomment-443001230",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/192",
    "id": 443001230,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MzAwMTIzMA==",
    "user": {
      "login": "JustinDrake",
      "id": 731743,
      "node_id": "MDQ6VXNlcjczMTc0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/731743?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JustinDrake",
      "html_url": "https://github.com/JustinDrake",
      "followers_url": "https://api.github.com/users/JustinDrake/followers",
      "following_url": "https://api.github.com/users/JustinDrake/following{/other_user}",
      "gists_url": "https://api.github.com/users/JustinDrake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JustinDrake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JustinDrake/subscriptions",
      "organizations_url": "https://api.github.com/users/JustinDrake/orgs",
      "repos_url": "https://api.github.com/users/JustinDrake/repos",
      "events_url": "https://api.github.com/users/JustinDrake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JustinDrake/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-29T21:33:48Z",
    "updated_at": "2018-11-29T21:33:48Z",
    "author_association": "MEMBER",
    "body": "I'd say \"acceptable\" is subjective in the sense that in theory different clients can have different acceptable bounds. Do you want your implementation to be relevant for 10 years, 100 years, 1000 years? Some quick calculations:\r\n\r\n* **Slots**: In one century, assuming 6-second slots, we will use log2(100 * 365.25 * 24 * 60 * 60 / 6) < 29 bits. So `uint32` should do for the foreseeable future.\r\n* **Shards**: At the moment we only have 1024 shards, so `uint16` should do.\r\n* **Kind/status**: At the moment we have < 10 different kinds and statuses, so `uint8` should be fine.\r\n* **Fork version**: I could see someone making use of all 64 bits here, so I'd stick with `uint64`.\r\n* **Votes**: Shouldn't go above `POW_RECEIPT_ROOT_VOTING_PERIOD` so `uint16` is probably fine.\r\n* **Exit counter**: I'd say we won't have more than 8 exits per slot for the next century, so `uint32` should also be fine.\r\n* **Justified slot bitfield**: Seems to use all 64 bits, so `uint64`.\r\n* **Balances**: The most granular token is the Gwei so stick with `uint64`.\r\n\r\nIn terms of underflows, the main one to look out for is when when substracting from a balance, i.e. applying a penalty. The spec has the following:\r\n\r\n> Note: When applying penalties in the following balance recalculations implementers should make sure the uint64 does not underflow.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/443001230/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/444089318",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/192#issuecomment-444089318",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/192",
    "id": 444089318,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NDA4OTMxOA==",
    "user": {
      "login": "JustinDrake",
      "id": 731743,
      "node_id": "MDQ6VXNlcjczMTc0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/731743?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JustinDrake",
      "html_url": "https://github.com/JustinDrake",
      "followers_url": "https://api.github.com/users/JustinDrake/followers",
      "following_url": "https://api.github.com/users/JustinDrake/following{/other_user}",
      "gists_url": "https://api.github.com/users/JustinDrake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JustinDrake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JustinDrake/subscriptions",
      "organizations_url": "https://api.github.com/users/JustinDrake/orgs",
      "repos_url": "https://api.github.com/users/JustinDrake/repos",
      "events_url": "https://api.github.com/users/JustinDrake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JustinDrake/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-04T12:52:27Z",
    "updated_at": "2018-12-04T12:52:27Z",
    "author_association": "MEMBER",
    "body": "Thanks Jacek for all your bug reports :)\r\n\r\nDo you still have concerns regarding reasonable upper bounds on field values? In short, the spec uses `2**64 - 1` as the implicit upper bound for `uint64` fields though implementations can subjectively optimise with more aggressive upper bounds if they want.\r\n\r\nRegarding overflows, there's a issue dedicated to that [here](https://github.com/ethereum/eth2.0-specs/issues/224).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/444089318/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/444196272",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/192#issuecomment-444196272",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/192",
    "id": 444196272,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NDE5NjI3Mg==",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-04T17:59:28Z",
    "updated_at": "2018-12-04T17:59:28Z",
    "author_association": "MEMBER",
    "body": "Specifying the `BEACON_CHAIN_SHARD_NUMBER` as `2**64 - 1` does put the 64 bit requirement on all clients.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/444196272/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/444627212",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/192#issuecomment-444627212",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/192",
    "id": 444627212,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NDYyNzIxMg==",
    "user": {
      "login": "arnetheduck",
      "id": 1382986,
      "node_id": "MDQ6VXNlcjEzODI5ODY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1382986?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/arnetheduck",
      "html_url": "https://github.com/arnetheduck",
      "followers_url": "https://api.github.com/users/arnetheduck/followers",
      "following_url": "https://api.github.com/users/arnetheduck/following{/other_user}",
      "gists_url": "https://api.github.com/users/arnetheduck/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/arnetheduck/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/arnetheduck/subscriptions",
      "organizations_url": "https://api.github.com/users/arnetheduck/orgs",
      "repos_url": "https://api.github.com/users/arnetheduck/repos",
      "events_url": "https://api.github.com/users/arnetheduck/events{/privacy}",
      "received_events_url": "https://api.github.com/users/arnetheduck/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-05T20:06:38Z",
    "updated_at": "2018-12-05T20:06:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "A motivating rationale for this exercise is to allow the establishment of a formal specification, and later to prove properties about the system that will help client implementers make good choices and produce clients that are more safe against certain categories of exploits:\r\n\r\n* Overflows and underflows\r\n* Out-of-bounds accesses (validity of array indices)\r\n* Out-of-order execution issues (basically, which parts are parallelizable safely)\r\n\r\nFrom a practical point of view, establishing or describing bounds means that clients can forgo certain checks and focus on others - for example, if the spec is proven to be undeflow-free as a design property, there is no need to explicitly check for underflows at various stages.\r\n\r\nFor the network as a whole, it's also nice to be able to say that all clients support at least X years of slot time as a requirement - though there are good arguments to keep this an implementation-defined detail as well.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/444627212/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/455224739",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/192#issuecomment-455224739",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/192",
    "id": 455224739,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NTIyNDczOQ==",
    "user": {
      "login": "JustinDrake",
      "id": 731743,
      "node_id": "MDQ6VXNlcjczMTc0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/731743?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JustinDrake",
      "html_url": "https://github.com/JustinDrake",
      "followers_url": "https://api.github.com/users/JustinDrake/followers",
      "following_url": "https://api.github.com/users/JustinDrake/following{/other_user}",
      "gists_url": "https://api.github.com/users/JustinDrake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JustinDrake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JustinDrake/subscriptions",
      "organizations_url": "https://api.github.com/users/JustinDrake/orgs",
      "repos_url": "https://api.github.com/users/JustinDrake/repos",
      "events_url": "https://api.github.com/users/JustinDrake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JustinDrake/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-17T15:57:59Z",
    "updated_at": "2019-01-17T15:57:59Z",
    "author_association": "MEMBER",
    "body": "> Out-of-bounds accesses (validity of array indices)\r\n\r\nThere's a relevant discussion [here](https://github.com/ethereum/eth2.0-specs/issues/446).\r\n\r\n> there are good arguments to keep this an implementation-defined detail as well\r\n\r\nI think that's the status quo. One idea is to document reasonable bounds in the [validator doc](https://github.com/ethereum/eth2.0-specs/pull/444) or an implementer doc. Feel free to reopen :)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/455224739/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/455454788",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/192#issuecomment-455454788",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/192",
    "id": 455454788,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NTQ1NDc4OA==",
    "user": {
      "login": "Nashatyrev",
      "id": 8173857,
      "node_id": "MDQ6VXNlcjgxNzM4NTc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8173857?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Nashatyrev",
      "html_url": "https://github.com/Nashatyrev",
      "followers_url": "https://api.github.com/users/Nashatyrev/followers",
      "following_url": "https://api.github.com/users/Nashatyrev/following{/other_user}",
      "gists_url": "https://api.github.com/users/Nashatyrev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Nashatyrev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Nashatyrev/subscriptions",
      "organizations_url": "https://api.github.com/users/Nashatyrev/orgs",
      "repos_url": "https://api.github.com/users/Nashatyrev/repos",
      "events_url": "https://api.github.com/users/Nashatyrev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Nashatyrev/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-18T07:40:13Z",
    "updated_at": "2019-01-18T07:40:13Z",
    "author_association": "MEMBER",
    "body": "As soon as we already have 'dedicated' `uint24` type for validator index I would also support narrowing at least `Shard` type since it's also used as array index across the spec\r\n> Shards: At the moment we only have 1024 shards, so uint16 should do.\r\n\r\nI would stick to the same `uint24` for uniformity.\r\n@JustinDrake I would love to make a PR for this. What do you think?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/455454788/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/455476426",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/192#issuecomment-455476426",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/192",
    "id": 455476426,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NTQ3NjQyNg==",
    "user": {
      "login": "JustinDrake",
      "id": 731743,
      "node_id": "MDQ6VXNlcjczMTc0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/731743?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JustinDrake",
      "html_url": "https://github.com/JustinDrake",
      "followers_url": "https://api.github.com/users/JustinDrake/followers",
      "following_url": "https://api.github.com/users/JustinDrake/following{/other_user}",
      "gists_url": "https://api.github.com/users/JustinDrake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JustinDrake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JustinDrake/subscriptions",
      "organizations_url": "https://api.github.com/users/JustinDrake/orgs",
      "repos_url": "https://api.github.com/users/JustinDrake/repos",
      "events_url": "https://api.github.com/users/JustinDrake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JustinDrake/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-18T09:09:36Z",
    "updated_at": "2019-01-18T09:09:36Z",
    "author_association": "MEMBER",
    "body": "> I would stick to the same uint24 for uniformity.\r\n\r\nWe've actually settled to use `uint64` everywhere for uniformity. The only exceptions were `bytes48` and `bytes96` for the BLS stuff, and `uint24` for validator indices to save space in the (now deprecated) `committees_at_slots` data structures. So maybe we can now make validator indices `uint64` for consistency.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/455476426/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/455481304",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/192#issuecomment-455481304",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/192",
    "id": 455481304,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NTQ4MTMwNA==",
    "user": {
      "login": "Nashatyrev",
      "id": 8173857,
      "node_id": "MDQ6VXNlcjgxNzM4NTc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8173857?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Nashatyrev",
      "html_url": "https://github.com/Nashatyrev",
      "followers_url": "https://api.github.com/users/Nashatyrev/followers",
      "following_url": "https://api.github.com/users/Nashatyrev/following{/other_user}",
      "gists_url": "https://api.github.com/users/Nashatyrev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Nashatyrev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Nashatyrev/subscriptions",
      "organizations_url": "https://api.github.com/users/Nashatyrev/orgs",
      "repos_url": "https://api.github.com/users/Nashatyrev/repos",
      "events_url": "https://api.github.com/users/Nashatyrev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Nashatyrev/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-18T09:26:32Z",
    "updated_at": "2019-01-18T09:26:32Z",
    "author_association": "MEMBER",
    "body": "> So maybe we can now make validator indices uint64 for consistency.\r\n\r\nSounds reasonable ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/455481304/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/463008778",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/192#issuecomment-463008778",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/192",
    "id": 463008778,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MzAwODc3OA==",
    "user": {
      "login": "JustinDrake",
      "id": 731743,
      "node_id": "MDQ6VXNlcjczMTc0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/731743?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JustinDrake",
      "html_url": "https://github.com/JustinDrake",
      "followers_url": "https://api.github.com/users/JustinDrake/followers",
      "following_url": "https://api.github.com/users/JustinDrake/following{/other_user}",
      "gists_url": "https://api.github.com/users/JustinDrake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JustinDrake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JustinDrake/subscriptions",
      "organizations_url": "https://api.github.com/users/JustinDrake/orgs",
      "repos_url": "https://api.github.com/users/JustinDrake/repos",
      "events_url": "https://api.github.com/users/JustinDrake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JustinDrake/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-13T00:56:39Z",
    "updated_at": "2019-02-13T00:56:39Z",
    "author_association": "MEMBER",
    "body": "Validator indices are now `uint64`. Typing is clean and simple now!",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/463008778/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
