{
  "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1012",
  "repository_url": "https://api.github.com/repos/ethereum/consensus-specs",
  "labels_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1012/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1012/comments",
  "events_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1012/events",
  "html_url": "https://github.com/ethereum/consensus-specs/issues/1012",
  "id": 438692383,
  "node_id": "MDU6SXNzdWU0Mzg2OTIzODM=",
  "number": 1012,
  "title": "BeaconNode <--> ValidatorClient API - Protocol",
  "user": {
    "login": "spble",
    "id": 233229,
    "node_id": "MDQ6VXNlcjIzMzIyOQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/233229?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/spble",
    "html_url": "https://github.com/spble",
    "followers_url": "https://api.github.com/users/spble/followers",
    "following_url": "https://api.github.com/users/spble/following{/other_user}",
    "gists_url": "https://api.github.com/users/spble/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/spble/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/spble/subscriptions",
    "organizations_url": "https://api.github.com/users/spble/orgs",
    "repos_url": "https://api.github.com/users/spble/repos",
    "events_url": "https://api.github.com/users/spble/events{/privacy}",
    "received_events_url": "https://api.github.com/users/spble/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1137720193,
      "node_id": "MDU6TGFiZWwxMTM3NzIwMTkz",
      "url": "https://api.github.com/repos/ethereum/consensus-specs/labels/general:discussion",
      "name": "general:discussion",
      "color": "F17C67",
      "default": false,
      "description": ""
    },
    {
      "id": 1342077502,
      "node_id": "MDU6TGFiZWwxMzQyMDc3NTAy",
      "url": "https://api.github.com/repos/ethereum/consensus-specs/labels/scope:validator-api",
      "name": "scope:validator-api",
      "color": "1d76db",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 28,
  "created_at": "2019-04-30T09:51:37Z",
  "updated_at": "2019-06-28T08:55:00Z",
  "closed_at": "2019-05-13T12:56:13Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "# ETH2.0 Beacon Node & Validator Client Protocol Discussion\r\n\r\n**Further background, and actual protocol, is described in issue #1011**\r\n\r\nIt would be useful to choose a standard protocol for the `BeaconNode` and `ValidatorClient` API.\r\n\r\nIt was discussed during the [Client Architecture](https://notes.ethereum.org/iuPB2YjKQMGua0nwCZJVAQ) session at the [Sydney Implementers meeting](https://notes.ethereum.org/7w7diW1-St2_Yu-YHjg6NA) that the main decision is between [gRPC](https://grpc.io/) and [JSON-RPC](https://www.jsonrpc.org/specification).\r\nThis discussion was a follow on from the [Client Architecture Roundtable](https://hackmd.io/s/rJl05Lk6X) in Prague.\r\n\r\n### gRPC\r\n**Advantages**\r\n - Fast\r\n - Highly specified, compiled specification\r\n - Has explicit types and support for binary data\r\n\r\n**Disadvantages**\r\n - Non human-readable transport\r\n - Requires specific framework for integration other software\r\n - Requires special software to interface with directly\r\n\r\n\r\n### JSON-RPC\r\n**Advantages**\r\n- Human-readable transport\r\n- Simple enough to be implemented by any language\r\n- Well understood by many developers\r\n- Can easily be called with `curl`\r\n- Consistency with Eth1.0 clients\r\n\r\n**Disadvantages**\r\n- Slower\r\n- Some ambiguity around data representations\r\n- Specification of API not as rigerous, must be specified out-of-band\r\n\r\n\r\n\r\nIn conclusion, most people had a preference towards JSON-RPC mainly due to it's human readability and ease of implementation.",
  "closed_by": {
    "login": "spble",
    "id": 233229,
    "node_id": "MDQ6VXNlcjIzMzIyOQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/233229?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/spble",
    "html_url": "https://github.com/spble",
    "followers_url": "https://api.github.com/users/spble/followers",
    "following_url": "https://api.github.com/users/spble/following{/other_user}",
    "gists_url": "https://api.github.com/users/spble/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/spble/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/spble/subscriptions",
    "organizations_url": "https://api.github.com/users/spble/orgs",
    "repos_url": "https://api.github.com/users/spble/repos",
    "events_url": "https://api.github.com/users/spble/events{/privacy}",
    "received_events_url": "https://api.github.com/users/spble/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1012/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1012/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/487998433",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1012#issuecomment-487998433",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1012",
    "id": 487998433,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4Nzk5ODQzMw==",
    "user": {
      "login": "prestonvanloon",
      "id": 7246818,
      "node_id": "MDQ6VXNlcjcyNDY4MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7246818?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/prestonvanloon",
      "html_url": "https://github.com/prestonvanloon",
      "followers_url": "https://api.github.com/users/prestonvanloon/followers",
      "following_url": "https://api.github.com/users/prestonvanloon/following{/other_user}",
      "gists_url": "https://api.github.com/users/prestonvanloon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/prestonvanloon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/prestonvanloon/subscriptions",
      "organizations_url": "https://api.github.com/users/prestonvanloon/orgs",
      "repos_url": "https://api.github.com/users/prestonvanloon/repos",
      "events_url": "https://api.github.com/users/prestonvanloon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/prestonvanloon/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-04-30T15:28:26Z",
    "updated_at": "2019-04-30T15:28:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "For Prysm, we will be continuing to use protocol buffers for our beacon chain and validator implementation. \r\nThe discussion within the team is that the API enforcement within generative code and performance gains outweigh the marginal benefit of using `curl` or other pre-installed tools rather than tools created for the ecosystem. \r\n\r\nClient interop may be achieved through a gRPC proxy gateway, but the bidirectional streaming would not work so we may not support JSON-RPC unless there is a very compelling reason to do so. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/487998433/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/488204838",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1012#issuecomment-488204838",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1012",
    "id": 488204838,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4ODIwNDgzOA==",
    "user": {
      "login": "spble",
      "id": 233229,
      "node_id": "MDQ6VXNlcjIzMzIyOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/233229?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/spble",
      "html_url": "https://github.com/spble",
      "followers_url": "https://api.github.com/users/spble/followers",
      "following_url": "https://api.github.com/users/spble/following{/other_user}",
      "gists_url": "https://api.github.com/users/spble/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/spble/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/spble/subscriptions",
      "organizations_url": "https://api.github.com/users/spble/orgs",
      "repos_url": "https://api.github.com/users/spble/repos",
      "events_url": "https://api.github.com/users/spble/events{/privacy}",
      "received_events_url": "https://api.github.com/users/spble/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-01T03:48:09Z",
    "updated_at": "2019-05-01T03:48:09Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks for the input @prestonvanloon - I definitely see the performance improvements with using gRPC, but I imagine the interface between the BeaconNode and ValidatorClient will be a fairly low-bandwidth interface. As such, doing a call in 10ms instead of 100ms would not bring any substantial benefit in my opinion.\r\n\r\nWe have also implemented protocol buffers in Lighthouse currently, but we are considering re-factoring this if most other clients are in favour of JSON-RPC. Interoperability is our most compelling reason for this re-factor.\r\n\r\nWhile using `curl` is helpful, I think the human readable and widely understood nature of the protocol is the biggest benefit. Interacting with JSON-RPC is very very widely used and understood by web developers, whereas gRPC is generally a lot more niche.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/488204838/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/488206344",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1012#issuecomment-488206344",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1012",
    "id": 488206344,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4ODIwNjM0NA==",
    "user": {
      "login": "spble",
      "id": 233229,
      "node_id": "MDQ6VXNlcjIzMzIyOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/233229?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/spble",
      "html_url": "https://github.com/spble",
      "followers_url": "https://api.github.com/users/spble/followers",
      "following_url": "https://api.github.com/users/spble/following{/other_user}",
      "gists_url": "https://api.github.com/users/spble/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/spble/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/spble/subscriptions",
      "organizations_url": "https://api.github.com/users/spble/orgs",
      "repos_url": "https://api.github.com/users/spble/repos",
      "events_url": "https://api.github.com/users/spble/events{/privacy}",
      "received_events_url": "https://api.github.com/users/spble/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-01T04:06:00Z",
    "updated_at": "2019-05-01T04:06:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "Also, a quick google around reveals: https://github.com/plutov/benchmark-grpc-protobuf-vs-http-json\r\nTurns out that speeds and resource usages are fairly compatible... within one order of magnitude anyway.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/488206344/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/488208528",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1012#issuecomment-488208528",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1012",
    "id": 488208528,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4ODIwODUyOA==",
    "user": {
      "login": "prestonvanloon",
      "id": 7246818,
      "node_id": "MDQ6VXNlcjcyNDY4MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7246818?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/prestonvanloon",
      "html_url": "https://github.com/prestonvanloon",
      "followers_url": "https://api.github.com/users/prestonvanloon/followers",
      "following_url": "https://api.github.com/users/prestonvanloon/following{/other_user}",
      "gists_url": "https://api.github.com/users/prestonvanloon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/prestonvanloon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/prestonvanloon/subscriptions",
      "organizations_url": "https://api.github.com/users/prestonvanloon/orgs",
      "repos_url": "https://api.github.com/users/prestonvanloon/repos",
      "events_url": "https://api.github.com/users/prestonvanloon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/prestonvanloon/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-01T04:31:59Z",
    "updated_at": "2019-05-01T04:33:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "@spble Interesting link! \r\n\r\n> They are almost the same, HTTP+JSON is a bit faster and has less allocs/op.\r\n\r\nThis is quite surprising actually. 😄 \r\n\r\nGoing forward, we would still advocate for protobuf usage even if solely for its generative schema approach. If the general consensus is to support only JSON-RPC, then we would likely provide some wrapper or use jsonpb while we continue to have success with protobuf. We're even using protobuf in the browser with a Typescript application! And with tools like [prototool](https://github.com/uber/prototool), we maintain productivity for the rare need for adhoc queries. \r\n\r\nIn short, we support interop even if we are the minority. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/488208528/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/488210570",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1012#issuecomment-488210570",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1012",
    "id": 488210570,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4ODIxMDU3MA==",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-01T04:55:36Z",
    "updated_at": "2019-05-01T04:55:36Z",
    "author_association": "MEMBER",
    "body": "Lacking a compelling reason for the performance gains gRPC which based on the comments from this thread doesn't seem to be present, JSON-RPC is my preference.  \r\n\r\nPotentially compelling reason **for** JSON-RPC: It is already well supported across the existing web3 tooling which makes integration with existing web3 client libraries much simpler.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/488210570/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/489660765",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1012#issuecomment-489660765",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1012",
    "id": 489660765,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4OTY2MDc2NQ==",
    "user": {
      "login": "karalabe",
      "id": 129561,
      "node_id": "MDQ6VXNlcjEyOTU2MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/129561?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/karalabe",
      "html_url": "https://github.com/karalabe",
      "followers_url": "https://api.github.com/users/karalabe/followers",
      "following_url": "https://api.github.com/users/karalabe/following{/other_user}",
      "gists_url": "https://api.github.com/users/karalabe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/karalabe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/karalabe/subscriptions",
      "organizations_url": "https://api.github.com/users/karalabe/orgs",
      "repos_url": "https://api.github.com/users/karalabe/repos",
      "events_url": "https://api.github.com/users/karalabe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/karalabe/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-06T15:21:48Z",
    "updated_at": "2019-05-06T15:22:10Z",
    "author_association": "MEMBER",
    "body": "Hey all,\r\n\r\n  Just wanted to do a small braindump. Full disclosure, I'm not familiar with the ETH 2.0 spec **at all**, neither with the communication requirements between beacon chain nodes and validators. That said, I can talk out of ETH 1.0 experience + general API experience.\r\n\r\n  Generally, the dumber and more boring a protocol is, the simpler it is to interface. At the end of the day, the goal of Ethereum is to bring developers together, so we should always prefer simplicity over other advantages.\r\n\r\n  There have been two proposals made here: gRPC and JSON-RPC. I honestly don't see any advantage in gRPC if we're building an open infrastructure. \"Nobody\" will want to (or be able to) roll their own gRPC implementation, so you are immediately limited by what you can implement on top of Ethereum purely, because you can't talk to it. This alone should be enough to rule out gRPC (this is why you don't see protobuf, cap'n proto and others on APIs). These frameworks are very nice for *internal calls* in proprietary systems, but not in public APIs that you want to maximize interoperability with.\r\n\r\n  That said, JSON-RPC is also a horrible choice. It's better than gRPC in that you can at least interface it easily, but the issue is that it is a stateful protocol, which makes it a non-composable protocol. Ethereum 1.0 made the huge mistake of permitting RPC calls that span requests (e.g. req1: create a filter; req2: query logs until block N; req3: query until block M, etc). This is a **huge** problem in internet infrastructure as it completely breaks horizontal scaling. All the requests must go to the same backend, because they are stateful. The backend cannot be restarted, the backend cannot be scaled, cannot be load balanced, cannot be updated, etc. JSON RPC works ok for communicating 1-1 with a dedicated node, but you cannot build public infrastructure out of it.\r\n\r\n My proposal is to seriously consider RESTful HTTP for **all** public APIs that Ethereum nodes need to serve. If you are unfamiliar with it, REST is simply a \"schema\" that defines how you should query data (\"GET /path/to/resource/\"), how you should upload data (\"POST /path/to/resource\") and how different errors should be conveyed (\"404 not found\"). It is a tiny specialization of the HTTP protocol, but the enormous power is that:\r\n\r\n * You can query if from any tool: curl, browser, literally any programming language. The data you get back is JSON that you need to interpret of course, but the \"input\" is mostly just URL parameters that you can even type in manually to test something.\r\n * Everything speaks HTTP. You can access it through a proxy, you can put it behind Tor, you can shove it on top of AppEngine, you can put an nginx load balancer in front, you can put a memcache in front, you can put Cloudflare in front, you can have AWS or GCE auto scale it for you. You can host one backend to serve it, or 100. You can serve it from multiple geographic locations (i.e. many data centers). You can have rotating DNS in front for failovers. You can have encryption and server authentication via TLS, you can add client authentication via client certs, or JWT tokens, or OAuth. You have well defined throttling mechanisms via tokenbuckets. You can even host your service through a Mashape/RapidAPI marketplace and make money for yourself.\r\n\r\nYou see, RESTful HTTP APIs are the building blocks of the modern internet. Everything on the internet is built to produce and consume it. If we go down the JSON RPC path, we remain yet another niche. Sure, some will support it, but the big guys will always be deterred. If we embrace proper architectures, Ethereum will be trivial to integrate into existing systems, giving it a huge boost in developer appeal.\r\n\r\nMy 2c.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/489660765/reactions",
      "total_count": 32,
      "+1": 31,
      "-1": 1,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/489663802",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1012#issuecomment-489663802",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1012",
    "id": 489663802,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4OTY2MzgwMg==",
    "user": {
      "login": "karalabe",
      "id": 129561,
      "node_id": "MDQ6VXNlcjEyOTU2MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/129561?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/karalabe",
      "html_url": "https://github.com/karalabe",
      "followers_url": "https://api.github.com/users/karalabe/followers",
      "following_url": "https://api.github.com/users/karalabe/following{/other_user}",
      "gists_url": "https://api.github.com/users/karalabe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/karalabe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/karalabe/subscriptions",
      "organizations_url": "https://api.github.com/users/karalabe/orgs",
      "repos_url": "https://api.github.com/users/karalabe/repos",
      "events_url": "https://api.github.com/users/karalabe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/karalabe/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-06T15:30:20Z",
    "updated_at": "2019-05-06T15:30:20Z",
    "author_association": "MEMBER",
    "body": "Oh, just as a memo, the fact that the default reply format is JSON, is just a detail. Since the reply is just an HTTP response, you are free to send JSON, or any other format. Way back XML was also popular (e.g. \"GET /path/to/res.json\" vs. \"GET /path/to/res.xml\"), but there's nothing stopping us from also supporting a binary format (e.g. \"GET /path/to/res.rlp\" or \"GET /path/to/res.ssz\"). REST still works, it doesn't care, HTTP doesn't care, nothing cares. But we can immediately have both performance and simplicity: validators would use a binary format, and a web interface would use a json format.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/489663802/reactions",
      "total_count": 7,
      "+1": 7,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/489665201",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1012#issuecomment-489665201",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1012",
    "id": 489665201,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4OTY2NTIwMQ==",
    "user": {
      "login": "karalabe",
      "id": 129561,
      "node_id": "MDQ6VXNlcjEyOTU2MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/129561?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/karalabe",
      "html_url": "https://github.com/karalabe",
      "followers_url": "https://api.github.com/users/karalabe/followers",
      "following_url": "https://api.github.com/users/karalabe/following{/other_user}",
      "gists_url": "https://api.github.com/users/karalabe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/karalabe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/karalabe/subscriptions",
      "organizations_url": "https://api.github.com/users/karalabe/orgs",
      "repos_url": "https://api.github.com/users/karalabe/repos",
      "events_url": "https://api.github.com/users/karalabe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/karalabe/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-06T15:33:58Z",
    "updated_at": "2019-05-06T15:33:58Z",
    "author_association": "MEMBER",
    "body": "Btw, I'd gladly help spec out a REST version if you have any pointers to the requirements. I'm aware there might be limitations that might make REST unsuitable, but I'd rather redesign the limitations than go with a non-popular protocol.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/489665201/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/489668117",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1012#issuecomment-489668117",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1012",
    "id": 489668117,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4OTY2ODExNw==",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-06T15:42:08Z",
    "updated_at": "2019-05-06T15:42:08Z",
    "author_association": "MEMBER",
    "body": "@karalabe I'm not sure I follow the argument for REST.  I acknowledge and recognize the problems with the stateful ETH1.x APIs and am fully onboard with avoiding those mistakes in Eth2.0 APIs but I fail to see how REST solves that.\r\n\r\nNote that I'm not arguing against REST, just trying to understand.\r\n\r\nI do agree that REST is more expressive than JSON-RPC and that we could benefit from that.  I will say that JSON-RPC's simplicity has been nice, exposing the API over a unix socket and bypass the need for an HTTP server's complexity.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/489668117/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/489671506",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1012#issuecomment-489671506",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1012",
    "id": 489671506,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4OTY3MTUwNg==",
    "user": {
      "login": "ligi",
      "id": 111600,
      "node_id": "MDQ6VXNlcjExMTYwMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/111600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ligi",
      "html_url": "https://github.com/ligi",
      "followers_url": "https://api.github.com/users/ligi/followers",
      "following_url": "https://api.github.com/users/ligi/following{/other_user}",
      "gists_url": "https://api.github.com/users/ligi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ligi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ligi/subscriptions",
      "organizations_url": "https://api.github.com/users/ligi/orgs",
      "repos_url": "https://api.github.com/users/ligi/repos",
      "events_url": "https://api.github.com/users/ligi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ligi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-06T15:51:26Z",
    "updated_at": "2019-05-06T15:55:26Z",
    "author_association": "MEMBER",
    "body": "I think the most compelling argument for gRPC/protobuf is that it leads to a well defined API - currently with json-rpc this is a mess. As far as I see preventing to repeat this mess could be enforced by using gRPC/protobuf. So I would lean in this direction. Also having trouble understanding @karalabe 's argument against it:\r\n\r\n> I honestly don't see any advantage in gRPC if we're building an open infrastructure. \"Nobody\" will want to (or be able to) roll their own gRPC implementation, so you are immediately limited by what you can implement on top of Ethereum purely, because you can't talk to it.\r\n\r\nwhy will nobody be able to roll their own gRPC implementation?\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/489671506/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/489672070",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1012#issuecomment-489672070",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1012",
    "id": 489672070,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4OTY3MjA3MA==",
    "user": {
      "login": "karalabe",
      "id": 129561,
      "node_id": "MDQ6VXNlcjEyOTU2MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/129561?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/karalabe",
      "html_url": "https://github.com/karalabe",
      "followers_url": "https://api.github.com/users/karalabe/followers",
      "following_url": "https://api.github.com/users/karalabe/following{/other_user}",
      "gists_url": "https://api.github.com/users/karalabe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/karalabe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/karalabe/subscriptions",
      "organizations_url": "https://api.github.com/users/karalabe/orgs",
      "repos_url": "https://api.github.com/users/karalabe/repos",
      "events_url": "https://api.github.com/users/karalabe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/karalabe/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-06T15:53:02Z",
    "updated_at": "2019-05-06T15:53:02Z",
    "author_association": "MEMBER",
    "body": "REST mostly allows Ethereum to be a component in a modern web stack. For example, I can't run my own \"Infura\", because it's a PITA to interpret, load balance, and cache all those requests. It takes a team just to maintain an Ethereum gateway. But if the API was simple REST, anyone could compete with Infura. You could have Cloudflare compete with them. You could launch N k8s instances and have k8s auto load balance. The advantage is that you can combine your node with existing infrastructure in a natural and native way, without relying on custom bridges (e.g. How do I write a firewall to block `personal_xyz` JSON RPC calls, I dunno? How do I write a firewall to block `/api/personal/xyz`, well, that's easy, any web server/router/proxy can do it, or authenticate it, or throttle it).\r\n\r\n> I do agree that REST is more expressive than JSON-RPC and that we could benefit from that. \r\n\r\nI'd actually say REST is less expressive, hence why it's more composable.\r\n\r\n> exposing the API over a unix socket and bypass the need for an HTTP server's complexity.\r\n\r\nWe can still expose REST through a unix socket. The socket is just a transport, TCP vs. IPC. Whether that transport speaks REST or JSON-RPC is not relevant from the transport's perspective.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/489672070/reactions",
      "total_count": 8,
      "+1": 8,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/489672949",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1012#issuecomment-489672949",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1012",
    "id": 489672949,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4OTY3Mjk0OQ==",
    "user": {
      "login": "karalabe",
      "id": 129561,
      "node_id": "MDQ6VXNlcjEyOTU2MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/129561?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/karalabe",
      "html_url": "https://github.com/karalabe",
      "followers_url": "https://api.github.com/users/karalabe/followers",
      "following_url": "https://api.github.com/users/karalabe/following{/other_user}",
      "gists_url": "https://api.github.com/users/karalabe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/karalabe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/karalabe/subscriptions",
      "organizations_url": "https://api.github.com/users/karalabe/orgs",
      "repos_url": "https://api.github.com/users/karalabe/repos",
      "events_url": "https://api.github.com/users/karalabe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/karalabe/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-06T15:55:29Z",
    "updated_at": "2019-05-06T15:55:29Z",
    "author_association": "MEMBER",
    "body": "@ligi gRPC is a framework. You need libraries to speak to it. e.g. there's no Erlang lib. You immediately shot people like blockscout off the network who develop in Elixir.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/489672949/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/489673454",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1012#issuecomment-489673454",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1012",
    "id": 489673454,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4OTY3MzQ1NA==",
    "user": {
      "login": "ligi",
      "id": 111600,
      "node_id": "MDQ6VXNlcjExMTYwMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/111600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ligi",
      "html_url": "https://github.com/ligi",
      "followers_url": "https://api.github.com/users/ligi/followers",
      "following_url": "https://api.github.com/users/ligi/following{/other_user}",
      "gists_url": "https://api.github.com/users/ligi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ligi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ligi/subscriptions",
      "organizations_url": "https://api.github.com/users/ligi/orgs",
      "repos_url": "https://api.github.com/users/ligi/repos",
      "events_url": "https://api.github.com/users/ligi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ligi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-06T15:56:57Z",
    "updated_at": "2019-05-06T15:56:57Z",
    "author_association": "MEMBER",
    "body": "hm: https://github.com/elixir-grpc/grpc",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/489673454/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/489673857",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1012#issuecomment-489673857",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1012",
    "id": 489673857,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4OTY3Mzg1Nw==",
    "user": {
      "login": "karalabe",
      "id": 129561,
      "node_id": "MDQ6VXNlcjEyOTU2MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/129561?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/karalabe",
      "html_url": "https://github.com/karalabe",
      "followers_url": "https://api.github.com/users/karalabe/followers",
      "following_url": "https://api.github.com/users/karalabe/following{/other_user}",
      "gists_url": "https://api.github.com/users/karalabe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/karalabe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/karalabe/subscriptions",
      "organizations_url": "https://api.github.com/users/karalabe/orgs",
      "repos_url": "https://api.github.com/users/karalabe/repos",
      "events_url": "https://api.github.com/users/karalabe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/karalabe/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-06T15:57:57Z",
    "updated_at": "2019-05-06T15:57:57Z",
    "author_association": "MEMBER",
    "body": "0.4-alpha, build failed on CI :) Yes, you can hack it, but that doesn't mean there's reliable code.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/489673857/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/489675307",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1012#issuecomment-489675307",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1012",
    "id": 489675307,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4OTY3NTMwNw==",
    "user": {
      "login": "ligi",
      "id": 111600,
      "node_id": "MDQ6VXNlcjExMTYwMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/111600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ligi",
      "html_url": "https://github.com/ligi",
      "followers_url": "https://api.github.com/users/ligi/followers",
      "following_url": "https://api.github.com/users/ligi/following{/other_user}",
      "gists_url": "https://api.github.com/users/ligi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ligi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ligi/subscriptions",
      "organizations_url": "https://api.github.com/users/ligi/orgs",
      "repos_url": "https://api.github.com/users/ligi/repos",
      "events_url": "https://api.github.com/users/ligi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ligi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-06T16:02:00Z",
    "updated_at": "2019-05-06T16:02:00Z",
    "author_association": "MEMBER",
    "body": "OK - good point ;-)\r\nStill really compelled by the advantage of having a strong protocol spec though - but you are right - it comes with some collateral damage ..",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/489675307/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/489675942",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1012#issuecomment-489675942",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1012",
    "id": 489675942,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4OTY3NTk0Mg==",
    "user": {
      "login": "karalabe",
      "id": 129561,
      "node_id": "MDQ6VXNlcjEyOTU2MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/129561?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/karalabe",
      "html_url": "https://github.com/karalabe",
      "followers_url": "https://api.github.com/users/karalabe/followers",
      "following_url": "https://api.github.com/users/karalabe/following{/other_user}",
      "gists_url": "https://api.github.com/users/karalabe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/karalabe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/karalabe/subscriptions",
      "organizations_url": "https://api.github.com/users/karalabe/orgs",
      "repos_url": "https://api.github.com/users/karalabe/repos",
      "events_url": "https://api.github.com/users/karalabe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/karalabe/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-06T16:03:48Z",
    "updated_at": "2019-05-06T16:03:48Z",
    "author_association": "MEMBER",
    "body": "Completely agree :) https://swagger.io/specification/",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/489675942/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/489681280",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1012#issuecomment-489681280",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1012",
    "id": 489681280,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4OTY4MTI4MA==",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-06T16:19:57Z",
    "updated_at": "2019-05-06T16:19:57Z",
    "author_association": "MEMBER",
    "body": "@karalabe :+1: makes sense now.  I would be fine with REST or JSON-RPC.  \r\n\r\nRestating my :-1: on grpc due to it having real tooling downsides and all of it's stated upsides being things we can address with things like swagger for well defined REST specifications, or just good due diligence if it's JSON-RPC.\r\n\r\nMy comment about expressiveness was intended towards the expressiveness of HTTP method semantics in REST (GET/POST/PUT/DELETE) and response status code.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/489681280/reactions",
      "total_count": 2,
      "+1": 1,
      "-1": 1,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/489682674",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1012#issuecomment-489682674",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1012",
    "id": 489682674,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4OTY4MjY3NA==",
    "user": {
      "login": "holiman",
      "id": 142290,
      "node_id": "MDQ6VXNlcjE0MjI5MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/142290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/holiman",
      "html_url": "https://github.com/holiman",
      "followers_url": "https://api.github.com/users/holiman/followers",
      "following_url": "https://api.github.com/users/holiman/following{/other_user}",
      "gists_url": "https://api.github.com/users/holiman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/holiman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/holiman/subscriptions",
      "organizations_url": "https://api.github.com/users/holiman/orgs",
      "repos_url": "https://api.github.com/users/holiman/repos",
      "events_url": "https://api.github.com/users/holiman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/holiman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-06T16:24:29Z",
    "updated_at": "2019-05-06T16:24:47Z",
    "author_association": "MEMBER",
    "body": "My two cents (which mainly is the same as @karalabe brought up). \r\n\r\n## Cent one\r\n\r\n- JSON-RPC is a protocol for a dialogue between two peers that send messages to one another. It's good for that. It means that each message is it's own unique snowflake, and each message deserves it's own unique response. That means it is\r\n  - Intrinsically difficult to cache, \r\n  - A message-based processing pipeline, which is quite resource intensive\r\n- A REST API is a client/server protocol, where resources are served to a multitude of clients. Like Peter pointed out, it can be trivially scaled/cached/balanced. \r\n\r\nThat may be somewhat generalizing, but I think it's fairly accurate description. So, also without having deep insight into 2.0, I think you should consider whether what we're building up to is going to be a dialogue or a client/server scenario. \r\n\r\n## Cent two\r\n\r\n- Writing a schema for JSON-RPC is, imho, very difficult. The ecosystem for json-rpc schemas is not mature. I have, as well as @cdetrio, tried to make formal definitions of the expected requests and response schemas in use, in order to create validation tests. There are tickets a bit here and there regarding this, I can't find it right now, but suffice to say it's been a PITA to validate/maintain/specify client behaviour without any rigorous schemas on expectations. \r\n- Writing schema for RESTful service is _very_ mature, with things like [swagger](https://swagger.io/tools/swagger-editor/) and similar tools which generate end-user docs, examples and validation. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/489682674/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/489685999",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1012#issuecomment-489685999",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1012",
    "id": 489685999,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4OTY4NTk5OQ==",
    "user": {
      "login": "FrankSzendzielarz",
      "id": 33515470,
      "node_id": "MDQ6VXNlcjMzNTE1NDcw",
      "avatar_url": "https://avatars.githubusercontent.com/u/33515470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/FrankSzendzielarz",
      "html_url": "https://github.com/FrankSzendzielarz",
      "followers_url": "https://api.github.com/users/FrankSzendzielarz/followers",
      "following_url": "https://api.github.com/users/FrankSzendzielarz/following{/other_user}",
      "gists_url": "https://api.github.com/users/FrankSzendzielarz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/FrankSzendzielarz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/FrankSzendzielarz/subscriptions",
      "organizations_url": "https://api.github.com/users/FrankSzendzielarz/orgs",
      "repos_url": "https://api.github.com/users/FrankSzendzielarz/repos",
      "events_url": "https://api.github.com/users/FrankSzendzielarz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/FrankSzendzielarz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-06T16:35:03Z",
    "updated_at": "2019-05-06T18:53:04Z",
    "author_association": "MEMBER",
    "body": "**My Various Cents**\r\n- Swagger metadata can be used to deploy Swagger UI pages for remote testing and integration\r\n- Swagger metadata can be used in Swagger codegen to auto-create stub clients and stub servers\r\n- The metadata defines message contents clearly\r\n- HTTP Media Formatters allow any encoding (flexibility) so the particular client can negotiate the encoding (RLP, XML, JSON etc...) with HTTP Accept / Content type headers as per usual in web dev, and typically web API servers will handle all that\r\n- Error messages are standardized. This also helps with capacity management. The usual 503 or 429 HTTP messages can be sent - and this could happen either at a networking (Infura) level and/or in the server implementation itself. (Some notes on capacity management https://ethereum-magicians.org/t/a-cross-protocol-cross-implementation-standard-for-server-capacity-management-and-flow-control/3123)\r\n\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/489685999/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/489787384",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1012#issuecomment-489787384",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1012",
    "id": 489787384,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4OTc4NzM4NA==",
    "user": {
      "login": "FrankSzendzielarz",
      "id": 33515470,
      "node_id": "MDQ6VXNlcjMzNTE1NDcw",
      "avatar_url": "https://avatars.githubusercontent.com/u/33515470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/FrankSzendzielarz",
      "html_url": "https://github.com/FrankSzendzielarz",
      "followers_url": "https://api.github.com/users/FrankSzendzielarz/followers",
      "following_url": "https://api.github.com/users/FrankSzendzielarz/following{/other_user}",
      "gists_url": "https://api.github.com/users/FrankSzendzielarz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/FrankSzendzielarz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/FrankSzendzielarz/subscriptions",
      "organizations_url": "https://api.github.com/users/FrankSzendzielarz/orgs",
      "repos_url": "https://api.github.com/users/FrankSzendzielarz/repos",
      "events_url": "https://api.github.com/users/FrankSzendzielarz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/FrankSzendzielarz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-06T21:33:51Z",
    "updated_at": "2019-05-06T22:17:33Z",
    "author_association": "MEMBER",
    "body": "Here is a **rough, part-implemented** (missing other objects deeper in the object graph under BeaconBlock) example of a Beacon node HTTP REST-like architecture and API \r\n\r\nhttps://beaconapi20190506111547.azurewebsites.net/\r\n\r\nBecause the Swagger metadata in the URL is downloadable this could help serve as a spec.\r\n\r\nI can keep extending and modifying this so that it actually does validation etc., if people want. Maybe it could evolve into a test harness or an implementation. Let me know please. \r\n\r\nYou can add proto-buf media formatters and RLP formatters as well those default JSON and XML ones you see there. You can also try to auto-generate clients in the language of your choice [here ](http://generator.swagger.io/) with the gen/clients POST method. Eg: this was auto gen'd for golang and note the docs folder.\r\n[go-client-generated.zip](https://github.com/ethereum/eth2.0-specs/files/3149983/go-client-generated.zip)\r\nRust, just to be fair:\r\n[rust-client-generated.zip](https://github.com/ethereum/eth2.0-specs/files/3150020/rust-client-generated.zip)\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/489787384/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/489894723",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1012#issuecomment-489894723",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1012",
    "id": 489894723,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4OTg5NDcyMw==",
    "user": {
      "login": "spble",
      "id": 233229,
      "node_id": "MDQ6VXNlcjIzMzIyOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/233229?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/spble",
      "html_url": "https://github.com/spble",
      "followers_url": "https://api.github.com/users/spble/followers",
      "following_url": "https://api.github.com/users/spble/following{/other_user}",
      "gists_url": "https://api.github.com/users/spble/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/spble/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/spble/subscriptions",
      "organizations_url": "https://api.github.com/users/spble/orgs",
      "repos_url": "https://api.github.com/users/spble/repos",
      "events_url": "https://api.github.com/users/spble/events{/privacy}",
      "received_events_url": "https://api.github.com/users/spble/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-07T03:35:53Z",
    "updated_at": "2019-05-07T03:35:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks very much for the input @karalabe - I definitely agree with your points regarding REST. I think HTTP-REST is what I had in my mind, I was just following Eth1.0 with JSON-RPC.\r\n\r\nMy vote is definitely for a HTTP REST interface, which returns JSON by default.\r\n\r\nThank you for the part implementation @FrankSzendzielarz - I will integrate your suggestions into my next API proposal and post it on #1011 ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/489894723/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/489896437",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1012#issuecomment-489896437",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1012",
    "id": 489896437,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4OTg5NjQzNw==",
    "user": {
      "login": "paulhauner",
      "id": 6660660,
      "node_id": "MDQ6VXNlcjY2NjA2NjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6660660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paulhauner",
      "html_url": "https://github.com/paulhauner",
      "followers_url": "https://api.github.com/users/paulhauner/followers",
      "following_url": "https://api.github.com/users/paulhauner/following{/other_user}",
      "gists_url": "https://api.github.com/users/paulhauner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paulhauner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paulhauner/subscriptions",
      "organizations_url": "https://api.github.com/users/paulhauner/orgs",
      "repos_url": "https://api.github.com/users/paulhauner/repos",
      "events_url": "https://api.github.com/users/paulhauner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paulhauner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-07T03:47:00Z",
    "updated_at": "2019-05-07T03:47:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "> My proposal is to seriously consider RESTful HTTP for all public APIs that Ethereum nodes need to serve.\r\n\r\nI support this.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/489896437/reactions",
      "total_count": 6,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 1,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/491413026",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1012#issuecomment-491413026",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1012",
    "id": 491413026,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5MTQxMzAyNg==",
    "user": {
      "login": "arnetheduck",
      "id": 1382986,
      "node_id": "MDQ6VXNlcjEzODI5ODY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1382986?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/arnetheduck",
      "html_url": "https://github.com/arnetheduck",
      "followers_url": "https://api.github.com/users/arnetheduck/followers",
      "following_url": "https://api.github.com/users/arnetheduck/following{/other_user}",
      "gists_url": "https://api.github.com/users/arnetheduck/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/arnetheduck/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/arnetheduck/subscriptions",
      "organizations_url": "https://api.github.com/users/arnetheduck/orgs",
      "repos_url": "https://api.github.com/users/arnetheduck/repos",
      "events_url": "https://api.github.com/users/arnetheduck/events{/privacy}",
      "received_events_url": "https://api.github.com/users/arnetheduck/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-10T20:01:26Z",
    "updated_at": "2019-05-10T20:01:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "> My proposal is to seriously consider RESTful HTTP for all public APIs that Ethereum nodes need to serve\r\n\r\nlikewise, support this, for the advantages of working better with \"standard\" infrastructure. also good to work on specifying it unambiguously - current status quo is indeed a bit of mess to figure out, and swagger seems as good as any.\r\n\r\nnothing prevents clients from using another, more performant or specialized protocol in their internal communication (for example when a beacon node and validator from the same client suite talks to each other), when the goal is not interop.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/491413026/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/491475386",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1012#issuecomment-491475386",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1012",
    "id": 491475386,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5MTQ3NTM4Ng==",
    "user": {
      "login": "gcolvin",
      "id": 16827129,
      "node_id": "MDQ6VXNlcjE2ODI3MTI5",
      "avatar_url": "https://avatars.githubusercontent.com/u/16827129?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gcolvin",
      "html_url": "https://github.com/gcolvin",
      "followers_url": "https://api.github.com/users/gcolvin/followers",
      "following_url": "https://api.github.com/users/gcolvin/following{/other_user}",
      "gists_url": "https://api.github.com/users/gcolvin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gcolvin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gcolvin/subscriptions",
      "organizations_url": "https://api.github.com/users/gcolvin/orgs",
      "repos_url": "https://api.github.com/users/gcolvin/repos",
      "events_url": "https://api.github.com/users/gcolvin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gcolvin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-11T03:23:43Z",
    "updated_at": "2019-05-11T03:23:43Z",
    "author_association": "NONE",
    "body": "@karalabe  Has been right about this for going on two decades now.\r\n[Roy Thomas Fielding, Architectural Styles and the Design of Network-based Software Architectures](https://www.ics.uci.edu/~fielding/pubs/dissertation/fielding_dissertation.pdf)\r\nCHAPTER 5: Representational State Transfer (REST)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/491475386/reactions",
      "total_count": 5,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/491810921",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1012#issuecomment-491810921",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1012",
    "id": 491810921,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5MTgxMDkyMQ==",
    "user": {
      "login": "spble",
      "id": 233229,
      "node_id": "MDQ6VXNlcjIzMzIyOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/233229?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/spble",
      "html_url": "https://github.com/spble",
      "followers_url": "https://api.github.com/users/spble/followers",
      "following_url": "https://api.github.com/users/spble/following{/other_user}",
      "gists_url": "https://api.github.com/users/spble/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/spble/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/spble/subscriptions",
      "organizations_url": "https://api.github.com/users/spble/orgs",
      "repos_url": "https://api.github.com/users/spble/repos",
      "events_url": "https://api.github.com/users/spble/events{/privacy}",
      "received_events_url": "https://api.github.com/users/spble/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-13T12:56:13Z",
    "updated_at": "2019-05-13T12:56:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "So a REST API seems to be the consensus.\r\n\r\nI have proposed an OpenAPI spec in PR #1069, which can also be [viewed on SwaggerHub](https://app.swaggerhub.com/apis/spble/beacon_node_api_for_validator/0.1)\r\n\r\nClosing this issue in favour of the PR.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/491810921/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/495070948",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1012#issuecomment-495070948",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1012",
    "id": 495070948,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5NTA3MDk0OA==",
    "user": {
      "login": "BelfordZ",
      "id": 1787231,
      "node_id": "MDQ6VXNlcjE3ODcyMzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1787231?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/BelfordZ",
      "html_url": "https://github.com/BelfordZ",
      "followers_url": "https://api.github.com/users/BelfordZ/followers",
      "following_url": "https://api.github.com/users/BelfordZ/following{/other_user}",
      "gists_url": "https://api.github.com/users/BelfordZ/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/BelfordZ/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BelfordZ/subscriptions",
      "organizations_url": "https://api.github.com/users/BelfordZ/orgs",
      "repos_url": "https://api.github.com/users/BelfordZ/repos",
      "events_url": "https://api.github.com/users/BelfordZ/events{/privacy}",
      "received_events_url": "https://api.github.com/users/BelfordZ/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-23T05:19:03Z",
    "updated_at": "2019-05-23T05:19:18Z",
    "author_association": "NONE",
    "body": "I propose we use [OpenRPC](https://open-rpc.org) + JSON-RPC",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/495070948/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/506483257",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1012#issuecomment-506483257",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1012",
    "id": 506483257,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwNjQ4MzI1Nw==",
    "user": {
      "login": "zcstarr",
      "id": 173187,
      "node_id": "MDQ6VXNlcjE3MzE4Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/173187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zcstarr",
      "html_url": "https://github.com/zcstarr",
      "followers_url": "https://api.github.com/users/zcstarr/followers",
      "following_url": "https://api.github.com/users/zcstarr/following{/other_user}",
      "gists_url": "https://api.github.com/users/zcstarr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zcstarr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zcstarr/subscriptions",
      "organizations_url": "https://api.github.com/users/zcstarr/orgs",
      "repos_url": "https://api.github.com/users/zcstarr/repos",
      "events_url": "https://api.github.com/users/zcstarr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zcstarr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-06-27T19:40:59Z",
    "updated_at": "2019-06-27T19:46:26Z",
    "author_association": "NONE",
    "body": "I don't understand, the arguments made above seem anti useful. It seems that this change would be locking you into a transport, that has high levels of inefficiency. With JSON-Rpc you have a choice about how to the data gets there. If this is meant to be low level infrastructure, being as agnostic as possible with the transport seems the most beneficial.  \r\n\r\nWhen it comes to tooling, JSON-Schema specifications are your friend, they have always been. Additionally has anyone used swagger, and swagger tooling in production. Just because swagger exist doesn't actually solve your problems of testability and documentation discoverability. OpenAPI may support code generation, but there's the possibility of doing the same for JSON-RPC. \r\n\r\nThe issues are many fold. \r\n1. A switch like this breaks all the tooling people have made around JSON-Rpc \r\n2. With REST there's no ability to batch request, there of course are work arounds, but its not particularly useful.\r\n3. You've just locked your infrastructure into http , with 0 support for potentially faster transports\r\n4. Using swagger tooling isn't great, the ecosystem for swagger, isn't as well maintained as you'd think\r\n5. Why is the juice worth the squeeze, weaker performance, transport lockin, breaking any ecosystem/tooling that expects to communicate over JSON-Rpc. \r\n\r\nIf someone could layout the benefits outside of swagger docs that would be amazing, generative resources are good thing, but there's other tooling to generate JSON-Rpc clients/servers as well.\r\n\r\nThis is a really important issue, can't believe I missed this coming down the pipe.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/506483257/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/506658711",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1012#issuecomment-506658711",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1012",
    "id": 506658711,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwNjY1ODcxMQ==",
    "user": {
      "login": "holiman",
      "id": 142290,
      "node_id": "MDQ6VXNlcjE0MjI5MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/142290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/holiman",
      "html_url": "https://github.com/holiman",
      "followers_url": "https://api.github.com/users/holiman/followers",
      "following_url": "https://api.github.com/users/holiman/following{/other_user}",
      "gists_url": "https://api.github.com/users/holiman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/holiman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/holiman/subscriptions",
      "organizations_url": "https://api.github.com/users/holiman/orgs",
      "repos_url": "https://api.github.com/users/holiman/repos",
      "events_url": "https://api.github.com/users/holiman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/holiman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-06-28T08:54:14Z",
    "updated_at": "2019-06-28T08:55:00Z",
    "author_association": "MEMBER",
    "body": "@zcstarr I can only reiterate, really. json-rpc is awesome for two peers having a dialogue. In the recent development of `clef`, the externalized signer from `geth`, we use bi-directional json-rpc between `clef` (daemon) and the ui. Both parties can send messages to the other, and get responses - have asyncronous dialogues. \r\n\r\nHowever, REST assumes that the communication is a _client_ requesting resources form a _server_ -- they are not _peers_. \r\n\r\nThe two models are inherently different, \r\n\r\n- The latter is inherently cache-friendly, \r\n- The latter does not make assumptions about a what partcular server answers a particular request (whereas json-rpc has individual sequential ID for each message, thus assuming a certain statefullness in the request/response) -- so the latter is easily load-balanced. \r\n\r\nI do believe that swagger is more mature than json-schemas, but regardless, I don't see that being the  the primary driver personally. Fwiw, there exists no json-schema for the eth 1.0 json-rpc, despite attempts historically to address this. It's been a source of bugs over many years. \r\n\r\nAs for locking into a transport, that's partially true. However, it also solves many other problems: \r\n\r\n- In the transport layer, one might want authorization. HTTP solves that (basic, digest, client-cert, other)\r\n- One might want session (long lived authororization). HTTP solves that with cookies, header-based solutions like `jwt` etc. \r\n- One might want per-resource cache-directives (http has it)\r\n- One might want content types, compression (and negotiation about compression)\r\n- One might want to utilize existing CA infrastructure and encryption, \r\n\r\nRegarding the points raised\r\n\r\n1. Breaks tooling\r\n  - There's quite a lot of tooling around http already, lots of tools that we don't even have to build, because they already exist across a variety of platforms\r\n2. No ability to batch request\r\n - HTTP does have batching, in the form of http pipelining. More paralellizability is coming with HTTP3 (see next point)\r\n3. Not true, HTTP3 is in the works, based on Quic. \r\n4. Maybe, can't say\r\n5. See reasons above\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/506658711/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
