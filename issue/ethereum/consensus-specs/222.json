{
  "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/222",
  "repository_url": "https://api.github.com/repos/ethereum/consensus-specs",
  "labels_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/222/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/222/comments",
  "events_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/222/events",
  "html_url": "https://github.com/ethereum/consensus-specs/issues/222",
  "id": 387096985,
  "node_id": "MDU6SXNzdWUzODcwOTY5ODU=",
  "number": 222,
  "title": "`get_changed_validators` processes validators out-of-order",
  "user": {
    "login": "arnetheduck",
    "id": 1382986,
    "node_id": "MDQ6VXNlcjEzODI5ODY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1382986?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/arnetheduck",
    "html_url": "https://github.com/arnetheduck",
    "followers_url": "https://api.github.com/users/arnetheduck/followers",
    "following_url": "https://api.github.com/users/arnetheduck/following{/other_user}",
    "gists_url": "https://api.github.com/users/arnetheduck/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/arnetheduck/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/arnetheduck/subscriptions",
    "organizations_url": "https://api.github.com/users/arnetheduck/orgs",
    "repos_url": "https://api.github.com/users/arnetheduck/repos",
    "events_url": "https://api.github.com/users/arnetheduck/events{/privacy}",
    "received_events_url": "https://api.github.com/users/arnetheduck/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1063043866,
      "node_id": "MDU6TGFiZWwxMDYzMDQzODY2",
      "url": "https://api.github.com/repos/ethereum/consensus-specs/labels/general:bug",
      "name": "general:bug",
      "color": "DD1C1A",
      "default": false,
      "description": "Something isn't working"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 10,
  "created_at": "2018-12-04T02:54:00Z",
  "updated_at": "2019-01-17T15:48:22Z",
  "closed_at": "2019-01-17T15:48:22Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "`validator_records` in `BeaconState` is updated by replacing the validator `min_empty_validator_index`, but `get_changed_validators` iterates in list order - thus, sometimes a validator that was added at a later time to the list will be activated early.\r\n\r\nbfe0e9f\r\n\r\n",
  "closed_by": {
    "login": "JustinDrake",
    "id": 731743,
    "node_id": "MDQ6VXNlcjczMTc0Mw==",
    "avatar_url": "https://avatars.githubusercontent.com/u/731743?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/JustinDrake",
    "html_url": "https://github.com/JustinDrake",
    "followers_url": "https://api.github.com/users/JustinDrake/followers",
    "following_url": "https://api.github.com/users/JustinDrake/following{/other_user}",
    "gists_url": "https://api.github.com/users/JustinDrake/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/JustinDrake/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/JustinDrake/subscriptions",
    "organizations_url": "https://api.github.com/users/JustinDrake/orgs",
    "repos_url": "https://api.github.com/users/JustinDrake/repos",
    "events_url": "https://api.github.com/users/JustinDrake/events{/privacy}",
    "received_events_url": "https://api.github.com/users/JustinDrake/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/222/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/222/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/444172434",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/222#issuecomment-444172434",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/222",
    "id": 444172434,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NDE3MjQzNA==",
    "user": {
      "login": "hwwhww",
      "id": 9263930,
      "node_id": "MDQ6VXNlcjkyNjM5MzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9263930?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hwwhww",
      "html_url": "https://github.com/hwwhww",
      "followers_url": "https://api.github.com/users/hwwhww/followers",
      "following_url": "https://api.github.com/users/hwwhww/following{/other_user}",
      "gists_url": "https://api.github.com/users/hwwhww/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hwwhww/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hwwhww/subscriptions",
      "organizations_url": "https://api.github.com/users/hwwhww/orgs",
      "repos_url": "https://api.github.com/users/hwwhww/repos",
      "events_url": "https://api.github.com/users/hwwhww/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hwwhww/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-04T16:52:54Z",
    "updated_at": "2018-12-04T16:52:54Z",
    "author_association": "MEMBER",
    "body": "I think you're right. /cc @JustinDrake @djrtwo \r\nIt seems related to the `MAX_BALANCE_CHURN_QUOTIENT` threshold checking you've mentioned.\r\n\r\n![validator_state_transition](https://user-images.githubusercontent.com/9263930/49458303-898e0880-f827-11e8-8be6-81a9f7fa3f34.png)\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/444172434/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/444182940",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/222#issuecomment-444182940",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/222",
    "id": 444182940,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NDE4Mjk0MA==",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-04T17:21:52Z",
    "updated_at": "2018-12-04T17:21:52Z",
    "author_association": "MEMBER",
    "body": "This is true but not a very game-able imo.\r\n\r\nA simple solution would be to sort the validator list in `get_changed_validators` by `latest_status_change_slot` to ensure that validators that changed status longer ago get priority in processing.\r\n\r\nI'm in favor of this change. What say you @hwwhww, @JustinDrake, @vbuterin ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/444182940/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/444307106",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/222#issuecomment-444307106",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/222",
    "id": 444307106,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NDMwNzEwNg==",
    "user": {
      "login": "JustinDrake",
      "id": 731743,
      "node_id": "MDQ6VXNlcjczMTc0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/731743?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JustinDrake",
      "html_url": "https://github.com/JustinDrake",
      "followers_url": "https://api.github.com/users/JustinDrake/followers",
      "following_url": "https://api.github.com/users/JustinDrake/following{/other_user}",
      "gists_url": "https://api.github.com/users/JustinDrake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JustinDrake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JustinDrake/subscriptions",
      "organizations_url": "https://api.github.com/users/JustinDrake/orgs",
      "repos_url": "https://api.github.com/users/JustinDrake/repos",
      "events_url": "https://api.github.com/users/JustinDrake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JustinDrake/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-05T00:05:26Z",
    "updated_at": "2018-12-05T00:05:26Z",
    "author_association": "MEMBER",
    "body": "> A simple solution would be to sort the validator list in `get_changed_validators` by `latest_status_change_slot`\r\n\r\nRight, sort `validators` in this `for` loop (taking care to *not* sort anything else)\r\n\r\n    for i in range(len(validators)):\r\n        if validators[i].status == PENDING_ACTIVATION and validators[i].balance >= MAX_DEPOSIT:",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/444307106/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/446659129",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/222#issuecomment-446659129",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/222",
    "id": 446659129,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NjY1OTEyOQ==",
    "user": {
      "login": "thadguidry",
      "id": 986438,
      "node_id": "MDQ6VXNlcjk4NjQzOA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/986438?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/thadguidry",
      "html_url": "https://github.com/thadguidry",
      "followers_url": "https://api.github.com/users/thadguidry/followers",
      "following_url": "https://api.github.com/users/thadguidry/following{/other_user}",
      "gists_url": "https://api.github.com/users/thadguidry/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/thadguidry/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/thadguidry/subscriptions",
      "organizations_url": "https://api.github.com/users/thadguidry/orgs",
      "repos_url": "https://api.github.com/users/thadguidry/repos",
      "events_url": "https://api.github.com/users/thadguidry/events{/privacy}",
      "received_events_url": "https://api.github.com/users/thadguidry/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-12T16:50:58Z",
    "updated_at": "2018-12-12T17:04:10Z",
    "author_association": "NONE",
    "body": "What happens if there's a cloned validator ? For example, I somehow manage to clone a validators laptop nefariously or steal it, and original owner has backup and comes online (I have BLS pubkey & withdrawal_credentials, etc.) and attempt to validate the beacon chain as an imposter for my own nefarious purposes ?  Possible ? Anything else needed within a ValidatorRecord or elsewhere to mitigate this hypothetical scenario ? isDuplicateValidator() ?\r\n\r\nI guess one path taken would be the `else` for the condition `if pubkey not in validator_pubkeys:` ?  What else ?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/446659129/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/448706309",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/222#issuecomment-448706309",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/222",
    "id": 448706309,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0ODcwNjMwOQ==",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-19T18:57:54Z",
    "updated_at": "2018-12-19T18:57:54Z",
    "author_association": "MEMBER",
    "body": "There can only be one instance of a ValidatorRecord in state per pubkey. The `else` on that statement is to just increase the balance of the existing validator with the new deposit (a \"top-up\").\r\n\r\nIf you steal a validator key, you are (from the perspective of the protocol) the validator. You can sign messages however you see fit. You are likely to sign a set of slashable messages or just submit an exit call. Other than that, you can't do much harm. The slashing (if not correlated  with a high number of other slashings) will be relatively small. The withdrawal address is distinct from the signing key so as long as you kept your signing key offline/safe/secure, you will still control the ejected funds.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/448706309/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/448713641",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/222#issuecomment-448713641",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/222",
    "id": 448713641,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0ODcxMzY0MQ==",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-19T19:21:43Z",
    "updated_at": "2018-12-19T19:24:12Z",
    "author_association": "MEMBER",
    "body": "@JustinDrake Because the index is not a field on `ValidatorRecord`, the indices first need to be gathered and then sorted alongside the `ValidatorRecord`s\r\n\r\nSomething like\r\n```python\r\nindices_and_validators = sorted(\r\n    [(i, validator) for i, validator in enumerate(state.validator_registry)],\r\n    key=lambda index_and_validator: index_and_validator[1].latest_status_change_slot\r\n)\r\n\r\n# Activate validators within the allowable balance churn\r\nbalance_churn = 0\r\nfor index, validator in indices_and_validators:\r\n    ...\r\n```\r\n\r\nNot the prettiest, but works.\r\nDo you think we should go ahead with this?\r\n(cc: @vbuterin, @JustinDrake, @hwwhww)\r\n    ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/448713641/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/451677907",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/222#issuecomment-451677907",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/222",
    "id": 451677907,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MTY3NzkwNw==",
    "user": {
      "login": "zah",
      "id": 175462,
      "node_id": "MDQ6VXNlcjE3NTQ2Mg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/175462?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zah",
      "html_url": "https://github.com/zah",
      "followers_url": "https://api.github.com/users/zah/followers",
      "following_url": "https://api.github.com/users/zah/following{/other_user}",
      "gists_url": "https://api.github.com/users/zah/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zah/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zah/subscriptions",
      "organizations_url": "https://api.github.com/users/zah/orgs",
      "repos_url": "https://api.github.com/users/zah/repos",
      "events_url": "https://api.github.com/users/zah/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zah/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-05T18:07:11Z",
    "updated_at": "2019-01-05T18:09:29Z",
    "author_association": "NONE",
    "body": "Here is one more idea that might be interesting:\r\n\r\nWhat if instead of using `min_empty_validator_index` to find an unused slot for a new validator, we use a [free list](https://en.wikipedia.org/wiki/Free_list)? This will allow us to find an unused validator slot in `O(0)` at the expense of adding a new field to the `ValidatorRecord` (e.g. `next_slot`*). The additional twist here is that the same field can be utilized in the active slots to form a chronological list of the inserted validators that can be used for activation in the right order.\r\n\r\n\\* In practice, `next_slot` can fit in the unused bits of some of the other fields (e.g. `status`).\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/451677907/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/451689137",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/222#issuecomment-451689137",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/222",
    "id": 451689137,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MTY4OTEzNw==",
    "user": {
      "login": "JustinDrake",
      "id": 731743,
      "node_id": "MDQ6VXNlcjczMTc0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/731743?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JustinDrake",
      "html_url": "https://github.com/JustinDrake",
      "followers_url": "https://api.github.com/users/JustinDrake/followers",
      "following_url": "https://api.github.com/users/JustinDrake/following{/other_user}",
      "gists_url": "https://api.github.com/users/JustinDrake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JustinDrake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JustinDrake/subscriptions",
      "organizations_url": "https://api.github.com/users/JustinDrake/orgs",
      "repos_url": "https://api.github.com/users/JustinDrake/repos",
      "events_url": "https://api.github.com/users/JustinDrake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JustinDrake/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-05T20:47:12Z",
    "updated_at": "2019-01-05T20:47:50Z",
    "author_association": "MEMBER",
    "body": "`min_empty_validator_index` is gone now so this is a non-issue, at least for phase 0 👍\r\n\r\nSee https://github.com/ethereum/eth2.0-specs/pull/374",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/451689137/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/451694728",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/222#issuecomment-451694728",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/222",
    "id": 451694728,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MTY5NDcyOA==",
    "user": {
      "login": "zah",
      "id": 175462,
      "node_id": "MDQ6VXNlcjE3NTQ2Mg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/175462?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zah",
      "html_url": "https://github.com/zah",
      "followers_url": "https://api.github.com/users/zah/followers",
      "following_url": "https://api.github.com/users/zah/following{/other_user}",
      "gists_url": "https://api.github.com/users/zah/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zah/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zah/subscriptions",
      "organizations_url": "https://api.github.com/users/zah/orgs",
      "repos_url": "https://api.github.com/users/zah/repos",
      "events_url": "https://api.github.com/users/zah/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zah/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-05T22:03:27Z",
    "updated_at": "2019-01-05T22:03:45Z",
    "author_association": "NONE",
    "body": "Hmm, I can see that in #374, the `process_deposit` function now looks like this:\r\n\r\n```python\r\n    if pubkey not in validator_pubkeys:\r\n        # Add new validator\r\n        validator = ValidatorRecord(...)\r\n\r\n        # Note: In phase 2 registry indices that has been withdrawn for a long time will be recycled.\r\n        index = len(state.validator_registry)\r\n        state.validator_registry.append(validator)\r\n        state.validator_balances.append(amount)\r\n```\r\n\r\nIn other words, it always appends to the end of the validator list. What is the long term plan regarding this? Is the final solution postponed to phase 2? If there is interest, I can try to flesh out a bit more how the free-list solution might work. All the validator lifecycle operations will be able to run in O(0).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/451694728/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/455220617",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/222#issuecomment-455220617",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/222",
    "id": 455220617,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NTIyMDYxNw==",
    "user": {
      "login": "JustinDrake",
      "id": 731743,
      "node_id": "MDQ6VXNlcjczMTc0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/731743?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JustinDrake",
      "html_url": "https://github.com/JustinDrake",
      "followers_url": "https://api.github.com/users/JustinDrake/followers",
      "following_url": "https://api.github.com/users/JustinDrake/following{/other_user}",
      "gists_url": "https://api.github.com/users/JustinDrake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JustinDrake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JustinDrake/subscriptions",
      "organizations_url": "https://api.github.com/users/JustinDrake/orgs",
      "repos_url": "https://api.github.com/users/JustinDrake/repos",
      "events_url": "https://api.github.com/users/JustinDrake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JustinDrake/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-17T15:48:22Z",
    "updated_at": "2019-01-17T15:48:22Z",
    "author_association": "MEMBER",
    "body": "I'm tempted to punt this until phase 2. Feel free to reopen @zah if you end up working on a solution :)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/455220617/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
