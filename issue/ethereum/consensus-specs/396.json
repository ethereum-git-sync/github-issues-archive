{
  "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/396",
  "repository_url": "https://api.github.com/repos/ethereum/consensus-specs",
  "labels_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/396/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/396/comments",
  "events_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/396/events",
  "html_url": "https://github.com/ethereum/consensus-specs/issues/396",
  "id": 395810084,
  "node_id": "MDU6SXNzdWUzOTU4MTAwODQ=",
  "number": 396,
  "title": "Inclusion Functions inside Shard Committee Code Block",
  "user": {
    "login": "terencechain",
    "id": 21316537,
    "node_id": "MDQ6VXNlcjIxMzE2NTM3",
    "avatar_url": "https://avatars.githubusercontent.com/u/21316537?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/terencechain",
    "html_url": "https://github.com/terencechain",
    "followers_url": "https://api.github.com/users/terencechain/followers",
    "following_url": "https://api.github.com/users/terencechain/following{/other_user}",
    "gists_url": "https://api.github.com/users/terencechain/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/terencechain/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/terencechain/subscriptions",
    "organizations_url": "https://api.github.com/users/terencechain/orgs",
    "repos_url": "https://api.github.com/users/terencechain/repos",
    "events_url": "https://api.github.com/users/terencechain/events{/privacy}",
    "received_events_url": "https://api.github.com/users/terencechain/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 5,
  "created_at": "2019-01-04T05:02:58Z",
  "updated_at": "2019-01-08T17:48:41Z",
  "closed_at": "2019-01-08T17:48:41Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "During per-epoch processing, when we first loop through `shard_committee`, I understand we want to track each committee's total attesting balance and total balance. What's the purpose of `inclusion_slot` and `inclusion_distance` in the end?\r\n\r\n```\r\n\r\nFor every shard_committee in state.shard_committees_at_slots:\r\n   Let attesting_validator_indices(shard_committee, shard_block_root) be the union of the validator index sets given by [get_attestation_participants(state, a.data, a.participation_bitfield) for a in current_epoch_attestations + previous_epoch_attestations if a.shard == shard_committee.shard and a.shard_block_root == shard_block_root].\r\n   ...\r\n   Let inclusion_slot(state, index) = a.slot_included for the attestation a where index is in get_attestation_participants(state, a.data, a.participation_bitfield).\r\n   Let inclusion_distance(state, index) = a.slot_included - a.data.slot where a is the above attestation.\r\n```",
  "closed_by": {
    "login": "djrtwo",
    "id": 1433595,
    "node_id": "MDQ6VXNlcjE0MzM1OTU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/djrtwo",
    "html_url": "https://github.com/djrtwo",
    "followers_url": "https://api.github.com/users/djrtwo/followers",
    "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
    "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
    "organizations_url": "https://api.github.com/users/djrtwo/orgs",
    "repos_url": "https://api.github.com/users/djrtwo/repos",
    "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
    "received_events_url": "https://api.github.com/users/djrtwo/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/396/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/396/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/451672034",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/396#issuecomment-451672034",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/396",
    "id": 451672034,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MTY3MjAzNA==",
    "user": {
      "login": "ralexstokes",
      "id": 3113781,
      "node_id": "MDQ6VXNlcjMxMTM3ODE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3113781?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ralexstokes",
      "html_url": "https://github.com/ralexstokes",
      "followers_url": "https://api.github.com/users/ralexstokes/followers",
      "following_url": "https://api.github.com/users/ralexstokes/following{/other_user}",
      "gists_url": "https://api.github.com/users/ralexstokes/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ralexstokes/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ralexstokes/subscriptions",
      "organizations_url": "https://api.github.com/users/ralexstokes/orgs",
      "repos_url": "https://api.github.com/users/ralexstokes/repos",
      "events_url": "https://api.github.com/users/ralexstokes/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ralexstokes/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-05T17:02:15Z",
    "updated_at": "2019-01-05T17:02:15Z",
    "author_association": "MEMBER",
    "body": "There are two things going on here:\r\n\r\n1. Each validator gets some reward that is proportional to how quickly they can get their attestations into the chain (the `inclusion_distance`). You can see this directly being used to calculate the \"inclusion distance\" reward type under [Justification and finalization](https://github.com/ethereum/eth2.0-specs/blob/master/specs/core/0_beacon-chain.md#justification-and-finalization). The \"sense\" of this reward (i.e. is it a gain or is it a loss?) depends on how long it has been since we last finalized an epoch. If it has only been a few epochs since finality, then you gain a reward that decays linearly w.r.t the number of slots and in the limit goes to 0. If it has been many epochs, then you gain a loss that increases as the  `inclusion_distance` increases, tending towards losing the full `base_reward`.\r\n\r\nThe purpose of this mechanism is to encourage validators to make attestations in as timely a manner as possible. Attestation generation is probably the most critical piece in terms of network health -- things start stalling if we don't see a critical mass of attestations for some time.\r\n\r\n2. for every relevant slot, the block proposer for that slot gains some small reward for including the attestations. you determine which proposer is eligible for the reward based on the `inclusion slot`.\r\n\r\nThe purpose of this mechanism is to encourage block proposers to actually include attestations in the chain. They could simply omit them or only include a subset (at the expense of an \"honest minority\" in the case of an attack, for example). The idea w/ this reward is that the price of the reward dominates the gain from any of these censorship scenarios -- again to ensure a healthy network.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/451672034/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/451713933",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/396#issuecomment-451713933",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/396",
    "id": 451713933,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MTcxMzkzMw==",
    "user": {
      "login": "terencechain",
      "id": 21316537,
      "node_id": "MDQ6VXNlcjIxMzE2NTM3",
      "avatar_url": "https://avatars.githubusercontent.com/u/21316537?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/terencechain",
      "html_url": "https://github.com/terencechain",
      "followers_url": "https://api.github.com/users/terencechain/followers",
      "following_url": "https://api.github.com/users/terencechain/following{/other_user}",
      "gists_url": "https://api.github.com/users/terencechain/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/terencechain/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/terencechain/subscriptions",
      "organizations_url": "https://api.github.com/users/terencechain/orgs",
      "repos_url": "https://api.github.com/users/terencechain/repos",
      "events_url": "https://api.github.com/users/terencechain/events{/privacy}",
      "received_events_url": "https://api.github.com/users/terencechain/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-06T04:14:14Z",
    "updated_at": "2019-01-06T04:14:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "Clearly explained. Thank you! I'm still unclear how `inclusion_slot` and `inclusion_distance` connect to `For every shard_committee_at_slot in state.shard_committees_at_slots and for every shard_committee in shard_committee_at_slot`\r\n\r\nFor example: \r\n\r\n`Let inclusion_slot(state, index) = a.slot_included for the attestation a where index is in get_attestation_participants(state, a.data, a.participation_bitfield)`\r\n\r\nWhat is the `attestation` in the `shard_committee` code block?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/451713933/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/452068444",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/396#issuecomment-452068444",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/396",
    "id": 452068444,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MjA2ODQ0NA==",
    "user": {
      "login": "ralexstokes",
      "id": 3113781,
      "node_id": "MDQ6VXNlcjMxMTM3ODE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3113781?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ralexstokes",
      "html_url": "https://github.com/ralexstokes",
      "followers_url": "https://api.github.com/users/ralexstokes/followers",
      "following_url": "https://api.github.com/users/ralexstokes/following{/other_user}",
      "gists_url": "https://api.github.com/users/ralexstokes/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ralexstokes/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ralexstokes/subscriptions",
      "organizations_url": "https://api.github.com/users/ralexstokes/orgs",
      "repos_url": "https://api.github.com/users/ralexstokes/repos",
      "events_url": "https://api.github.com/users/ralexstokes/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ralexstokes/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-07T20:20:27Z",
    "updated_at": "2019-01-07T20:20:27Z",
    "author_association": "MEMBER",
    "body": "their usage is unrelated to the crosslinking logic so i'm just reading them as helpers that happen to be there. i agree the indentation/bulleting is confusing and we should probably update it.\r\n\r\nhere is what is going on, note this is just pseudocode, i.e. there are prolly opportunities for caching various reads of the state to get a more performant implementation...\r\n\r\n```python\r\n## Helpers\r\n\r\n## refer to spec for `get_attestation_participants`, `get_beacon_proposer_index`, `base_reward` and constants\r\n\r\ndef inclusion_slot(a: PendingAttestationRecord) -> uint:\r\n    return a.slot_included\r\n\r\ndef inclusion_distance(a: PendingAttestationRecord) -> int:\r\n    return a.slot_included - a.data.slot\r\n\r\n\r\n## Processing routines per epoch\r\n\r\n# update crosslinks based on attestations made for this epoch\r\n# dispense rewards for new crosslinks made\r\n\r\n## independently of the crosslinks, do the following based on attestations made:\r\n\r\ndef process_attestation_inclusion_rewards(state: BeaconState):\r\n    previous_epoch_attestations = [a for a in state.latest_attestations if state.slot - 2 * EPOCH_LENGTH <= a.slot < state.slot - EPOCH_LENGTH]\r\n    for a in previous_epoch_attestations:\r\n        proposer_index = get_beacon_proposer_index(state, inclusion_slot(a))\r\n        for index in get_attestation_participants(state, a.data, a.participation_bitfield):\r\n            state.validator_balances[proposer_index] += base_reward(state, index) // INCLUDER_REWARD_QUOTIENT\r\n\r\n\r\n#  run only one of the following two routines depending on how many epochs it has been since last finality; refer to spec for more info\r\n\r\ndef process_inclusion_distance_reward(state: BeaconState):\r\n    previous_epoch_attestations = [a for a in state.latest_attestations if state.slot - 2 * EPOCH_LENGTH <= a.slot < state.slot - EPOCH_LENGTH]\r\n    for a in previous_epoch_attestations:\r\n        for index in get_attestation_participants(state, a.data, a.participation_bitfield):\r\n            state.validator_balances[index] += base_reward(state, index) * MIN_ATTESTATION_INCLUSION_DELAY // inclusion_distance(a)\r\n\r\ndef process_inclusion_distance_penalty(state: BeaconState):\r\n    previous_epoch_attestations = [a for a in state.latest_attestations if state.slot - 2 * EPOCH_LENGTH <= a.slot < state.slot - EPOCH_LENGTH]\r\n    for a in previous_epoch_attestations:\r\n        for index in get_attestation_participants(state, a.data, a.participation_bitfield):\r\n            state.validator_balances[index] -= (base_reward(state, index) - base_reward(state, index) * MIN_ATTESTATION_INCLUSION_DELAY // inclusion_distance(a))\r\n```\r\n\r\nif i'm misreading or made a mistake someone plz correct me :)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/452068444/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/452090470",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/396#issuecomment-452090470",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/396",
    "id": 452090470,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MjA5MDQ3MA==",
    "user": {
      "login": "terencechain",
      "id": 21316537,
      "node_id": "MDQ6VXNlcjIxMzE2NTM3",
      "avatar_url": "https://avatars.githubusercontent.com/u/21316537?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/terencechain",
      "html_url": "https://github.com/terencechain",
      "followers_url": "https://api.github.com/users/terencechain/followers",
      "following_url": "https://api.github.com/users/terencechain/following{/other_user}",
      "gists_url": "https://api.github.com/users/terencechain/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/terencechain/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/terencechain/subscriptions",
      "organizations_url": "https://api.github.com/users/terencechain/orgs",
      "repos_url": "https://api.github.com/users/terencechain/repos",
      "events_url": "https://api.github.com/users/terencechain/events{/privacy}",
      "received_events_url": "https://api.github.com/users/terencechain/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-07T21:36:21Z",
    "updated_at": "2019-01-07T21:36:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "The pseudocode is the same as what I have in mind. Thank you for drawing it out.\r\nI'm glad we both agree on `inclusion_slot` and `inclusion_distance` are incorrectly indented. I'll open a PR to fix it = )",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/452090470/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/452389796",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/396#issuecomment-452389796",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/396",
    "id": 452389796,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MjM4OTc5Ng==",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-08T17:48:41Z",
    "updated_at": "2019-01-08T17:48:41Z",
    "author_association": "MEMBER",
    "body": "closed via #406 ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/452389796/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
