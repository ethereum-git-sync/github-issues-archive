{
  "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/3180",
  "repository_url": "https://api.github.com/repos/ethereum/consensus-specs",
  "labels_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/3180/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/3180/comments",
  "events_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/3180/events",
  "html_url": "https://github.com/ethereum/consensus-specs/issues/3180",
  "id": 1512054668,
  "node_id": "I_kwDOCOoGbc5aIB-M",
  "number": 3180,
  "title": "[EIP-4844][Discussion] Blob gossip",
  "user": {
    "login": "realbigsean",
    "id": 5160426,
    "node_id": "MDQ6VXNlcjUxNjA0MjY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5160426?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/realbigsean",
    "html_url": "https://github.com/realbigsean",
    "followers_url": "https://api.github.com/users/realbigsean/followers",
    "following_url": "https://api.github.com/users/realbigsean/following{/other_user}",
    "gists_url": "https://api.github.com/users/realbigsean/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/realbigsean/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/realbigsean/subscriptions",
    "organizations_url": "https://api.github.com/users/realbigsean/orgs",
    "repos_url": "https://api.github.com/users/realbigsean/repos",
    "events_url": "https://api.github.com/users/realbigsean/events{/privacy}",
    "received_events_url": "https://api.github.com/users/realbigsean/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2022-12-27T18:22:26Z",
  "updated_at": "2022-12-30T14:43:38Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "There has been more discussion about alternative blob/block gossip designs including the possibility of decoupling blocks and blobs in gossipsub. @arnetheduck suggested large bandwidth reductions could be achieved by only listening to blobs and downloading blocks via a decoupled by-root request. The reverse, gossiping blocks and downloading blobs by root, is structurally similar to what full DAS might look like. \r\n\r\nHowever, there are concerns about the potential for additional round trips of communication at each hop and the difficulty in knowing which nodes to request blobs from if blocks are gossiped without the associated blobs. \r\n\r\n[Episub](https://github.com/libp2p/specs/blob/master/pubsub/gossipsub/episub.md) is another way we can decrease bandwidth by reducing the gossip amplification factor. We’re still trying to understand to what degree this will have an impact, so far it seems it may be more beneficial in larger networks, but these are difficult to run reliably in testing. A solution where we only gossip one of blob/block would still benefit from episub because of the bandwidth reduction on other/existing topics. \r\n\r\nIt seems like we will stick with coupling in the near term but it may be worth exploring alternative designs sooner rather than later in case bandwidth or network propagation times look suspect in testing. I think it’s also worth discussing which of these we are prioritising to what degree:\r\n\r\n- Minimising the number of worst-case block propagation times\r\n- Minimising average block propagation times\r\n- Minimising bandwidth increase caused by blobs",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/3180/reactions",
    "total_count": 1,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 1,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/3180/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1366856111",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/3180#issuecomment-1366856111",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/3180",
    "id": 1366856111,
    "node_id": "IC_kwDOCOoGbc5ReJGv",
    "user": {
      "login": "arnetheduck",
      "id": 1382986,
      "node_id": "MDQ6VXNlcjEzODI5ODY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1382986?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/arnetheduck",
      "html_url": "https://github.com/arnetheduck",
      "followers_url": "https://api.github.com/users/arnetheduck/followers",
      "following_url": "https://api.github.com/users/arnetheduck/following{/other_user}",
      "gists_url": "https://api.github.com/users/arnetheduck/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/arnetheduck/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/arnetheduck/subscriptions",
      "organizations_url": "https://api.github.com/users/arnetheduck/orgs",
      "repos_url": "https://api.github.com/users/arnetheduck/repos",
      "events_url": "https://api.github.com/users/arnetheduck/events{/privacy}",
      "received_events_url": "https://api.github.com/users/arnetheduck/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-12-28T18:57:25Z",
    "updated_at": "2022-12-28T18:57:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "> sooner rather than later \r\n\r\nI'd even go further and say that we should move to a decoupled design given that it's more flexible and semantically closer to what blobs are meant to be - ie decoupled pieces of data with different lifetimes - this ensures that we don't put up artificial barriers for efficiency and engineering work that becomes difficult to do when the \"official\" protocol says things should be coupled and can lead to the ossification of a needlessly suboptimal approach - the simplicity gains seem temporary at best and increase total complexity at worst by adding constraints and constructs that naturally have no raison d'etre.\r\n\r\nIf it turns out at closer to the end that indeed there are no benefits to be had whatsoever, it's trivial to move back to a coupled design.\r\n\r\nEpisub, for all its benefits, looks unlikely to make it into the protocol by the eip4844 HF - I think it would be unwise to couple it (haha) with the coupling gossip in general, since it's largely an orthogoncal piece of work that should stand on its own and be switched to when it's ready - until that time, it's easier to reason about eip4844 in isolation and work on it based on existing gossip assumptions (ie episub might never happen).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1366856111/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1367040754",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/3180#issuecomment-1367040754",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/3180",
    "id": 1367040754,
    "node_id": "IC_kwDOCOoGbc5Re2Ly",
    "user": {
      "login": "terencechain",
      "id": 21316537,
      "node_id": "MDQ6VXNlcjIxMzE2NTM3",
      "avatar_url": "https://avatars.githubusercontent.com/u/21316537?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/terencechain",
      "html_url": "https://github.com/terencechain",
      "followers_url": "https://api.github.com/users/terencechain/followers",
      "following_url": "https://api.github.com/users/terencechain/following{/other_user}",
      "gists_url": "https://api.github.com/users/terencechain/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/terencechain/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/terencechain/subscriptions",
      "organizations_url": "https://api.github.com/users/terencechain/orgs",
      "repos_url": "https://api.github.com/users/terencechain/repos",
      "events_url": "https://api.github.com/users/terencechain/events{/privacy}",
      "received_events_url": "https://api.github.com/users/terencechain/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-12-29T03:00:26Z",
    "updated_at": "2022-12-29T03:00:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "I'd be happy to support a decoupled implementation for Prysm. It might be worth it to have two implementations in parallel, as I feel like it's hard to come down to a verdict on which design is superior. I think once we have both of them in code and have numbers (ie propagation time) to back up, it may become easier to drive something into final ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1367040754/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1367857218",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/3180#issuecomment-1367857218",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/3180",
    "id": 1367857218,
    "node_id": "IC_kwDOCOoGbc5Rh9hC",
    "user": {
      "login": "mkalinin",
      "id": 1892772,
      "node_id": "MDQ6VXNlcjE4OTI3NzI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1892772?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mkalinin",
      "html_url": "https://github.com/mkalinin",
      "followers_url": "https://api.github.com/users/mkalinin/followers",
      "following_url": "https://api.github.com/users/mkalinin/following{/other_user}",
      "gists_url": "https://api.github.com/users/mkalinin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mkalinin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mkalinin/subscriptions",
      "organizations_url": "https://api.github.com/users/mkalinin/orgs",
      "repos_url": "https://api.github.com/users/mkalinin/repos",
      "events_url": "https://api.github.com/users/mkalinin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mkalinin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-12-30T10:59:19Z",
    "updated_at": "2022-12-30T10:59:19Z",
    "author_association": "MEMBER",
    "body": "> decoupled pieces of data\r\n\r\nArguably, they are coupled from DA perspective and there is an opportunity to decouple these pieces of data on the gossip layer. We should consider that DAS implementation on the network layer may differ from how decoupled block/blob dissemination will look like. Therefore, engineering complexity of the decoupling should be outweighed by the gain that we get by employing such a design.\r\n\r\nAs for the metrics, IMO, we should aim an `X` percentile of block and blobs fully disseminated up to `Y` seconds into a slot, where `Y` leaves enough time for block/blob verification to be finished before the attestation deadline. Where `X` should be close to either what we currently see on the Mainnet (if possible) or to some boundary (say `95%`) that we think good enough for the networking layer to provide consensus layer with required properties (`2/3` votes by stake are included on chain) under increased latency and computational complexity. The other way around, how much of additional latency and validation complexity would be allowed on the networking layer if we took this and that approach?\r\n\r\nI don't know if there are any simulators at hand that we can use to simulate both scenarios (coupled and decoupled) for a network with a size comparable to the mainnet. I feel like this kind of simulation could be a good start for understanding potential difference between the approaches. If say decoupled scenario would be giving us `1s` of advantage then it is definitely worth considering, while the diff of `0.1s` would be much less appealing.\r\n\r\nLooping in @Nashatyrev to hear his thoughts on the simulation, particularly, could it be done with libp2p simulator that his has created a while ago.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1367857218/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1367953426",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/3180#issuecomment-1367953426",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/3180",
    "id": 1367953426,
    "node_id": "IC_kwDOCOoGbc5RiVAS",
    "user": {
      "login": "sauliusgrigaitis",
      "id": 6917,
      "node_id": "MDQ6VXNlcjY5MTc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6917?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sauliusgrigaitis",
      "html_url": "https://github.com/sauliusgrigaitis",
      "followers_url": "https://api.github.com/users/sauliusgrigaitis/followers",
      "following_url": "https://api.github.com/users/sauliusgrigaitis/following{/other_user}",
      "gists_url": "https://api.github.com/users/sauliusgrigaitis/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sauliusgrigaitis/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sauliusgrigaitis/subscriptions",
      "organizations_url": "https://api.github.com/users/sauliusgrigaitis/orgs",
      "repos_url": "https://api.github.com/users/sauliusgrigaitis/repos",
      "events_url": "https://api.github.com/users/sauliusgrigaitis/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sauliusgrigaitis/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-12-30T14:43:38Z",
    "updated_at": "2022-12-30T14:43:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "> the simplicity gains seem temporary at best and increase total complexity at worst by adding constraints and constructs that naturally have no raison d'etre.\r\n\r\nI'm not sure I agree with this. My understanding was that coupling solves a class of serious problems that exist only in the decoupled model. I mean this idea of decoupled blocks/blobs in general sounds really great, just like full sharding etc., however, the goal of EIP-4844 was to ship data solution fast for rollups. I actually would try to strip down EIP-4844 even more, for example, drop KZG (a large part of it is just simulation for upcoming sharding) instead of including anything that is more complex than EIP-4844 currently has.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1367953426/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
