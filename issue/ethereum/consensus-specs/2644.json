{
  "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2644",
  "repository_url": "https://api.github.com/repos/ethereum/consensus-specs",
  "labels_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2644/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2644/comments",
  "events_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2644/events",
  "html_url": "https://github.com/ethereum/consensus-specs/issues/2644",
  "id": 1015208065,
  "node_id": "I_kwDOCOoGbc48gtiB",
  "number": 2644,
  "title": "Build block with empty transactions if prepare_payload fails",
  "user": {
    "login": "dapplion",
    "id": 35266934,
    "node_id": "MDQ6VXNlcjM1MjY2OTM0",
    "avatar_url": "https://avatars.githubusercontent.com/u/35266934?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/dapplion",
    "html_url": "https://github.com/dapplion",
    "followers_url": "https://api.github.com/users/dapplion/followers",
    "following_url": "https://api.github.com/users/dapplion/following{/other_user}",
    "gists_url": "https://api.github.com/users/dapplion/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/dapplion/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/dapplion/subscriptions",
    "organizations_url": "https://api.github.com/users/dapplion/orgs",
    "repos_url": "https://api.github.com/users/dapplion/repos",
    "events_url": "https://api.github.com/users/dapplion/events{/privacy}",
    "received_events_url": "https://api.github.com/users/dapplion/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 2812431987,
      "node_id": "MDU6TGFiZWwyODEyNDMxOTg3",
      "url": "https://api.github.com/repos/ethereum/consensus-specs/labels/Bellatrix",
      "name": "Bellatrix",
      "color": "1D36aa",
      "default": false,
      "description": "CL+EL Merge"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 12,
  "created_at": "2021-10-04T13:49:04Z",
  "updated_at": "2021-11-01T15:08:51Z",
  "closed_at": "2021-11-01T15:08:51Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "If the execution client is not able to prepare or deliver a block the consensus client could create a valid execution payload on its own with no transactions. Before skipping the slot, this would allow consensus operations to be included on-chain, a lesser of two evils",
  "closed_by": {
    "login": "mkalinin",
    "id": 1892772,
    "node_id": "MDQ6VXNlcjE4OTI3NzI=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1892772?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mkalinin",
    "html_url": "https://github.com/mkalinin",
    "followers_url": "https://api.github.com/users/mkalinin/followers",
    "following_url": "https://api.github.com/users/mkalinin/following{/other_user}",
    "gists_url": "https://api.github.com/users/mkalinin/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mkalinin/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mkalinin/subscriptions",
    "organizations_url": "https://api.github.com/users/mkalinin/orgs",
    "repos_url": "https://api.github.com/users/mkalinin/repos",
    "events_url": "https://api.github.com/users/mkalinin/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mkalinin/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2644/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2644/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/936081448",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2644#issuecomment-936081448",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2644",
    "id": 936081448,
    "node_id": "IC_kwDOCOoGbc43y3go",
    "user": {
      "login": "mkalinin",
      "id": 1892772,
      "node_id": "MDQ6VXNlcjE4OTI3NzI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1892772?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mkalinin",
      "html_url": "https://github.com/mkalinin",
      "followers_url": "https://api.github.com/users/mkalinin/followers",
      "following_url": "https://api.github.com/users/mkalinin/following{/other_user}",
      "gists_url": "https://api.github.com/users/mkalinin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mkalinin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mkalinin/subscriptions",
      "organizations_url": "https://api.github.com/users/mkalinin/orgs",
      "repos_url": "https://api.github.com/users/mkalinin/repos",
      "events_url": "https://api.github.com/users/mkalinin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mkalinin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-06T11:47:57Z",
    "updated_at": "2021-10-06T11:47:57Z",
    "author_association": "MEMBER",
    "body": "Is this the case when the payload of the parent block has been verified but for some reason EL failed to produce a block on demand?\r\n\r\nOtherwise, if EL is down and the parent payload hasn't been verified then it means that the parent beacon block can't be deemed valid and there is a risk of producing on top of an invalid block with all the implications. Validator MUST NOT perform any of its duties (either proposing or attesting) until execution is verified.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/936081448/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/936117486",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2644#issuecomment-936117486",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2644",
    "id": 936117486,
    "node_id": "IC_kwDOCOoGbc43zATu",
    "user": {
      "login": "dapplion",
      "id": 35266934,
      "node_id": "MDQ6VXNlcjM1MjY2OTM0",
      "avatar_url": "https://avatars.githubusercontent.com/u/35266934?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dapplion",
      "html_url": "https://github.com/dapplion",
      "followers_url": "https://api.github.com/users/dapplion/followers",
      "following_url": "https://api.github.com/users/dapplion/following{/other_user}",
      "gists_url": "https://api.github.com/users/dapplion/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dapplion/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dapplion/subscriptions",
      "organizations_url": "https://api.github.com/users/dapplion/orgs",
      "repos_url": "https://api.github.com/users/dapplion/repos",
      "events_url": "https://api.github.com/users/dapplion/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dapplion/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-06T12:12:09Z",
    "updated_at": "2021-10-06T12:12:09Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Is this the case when the payload of the parent block has been verified but for some reason EL failed to produce a block on demand?\r\n> \r\n> Otherwise, if EL is down and the parent payload hasn't been verified then it means that the parent beacon block can't be deemed valid and there is a risk of producing on top of an invalid block with all the implications. Validator MUST NOT perform any of its duties (either proposing or attesting) until execution is verified.\r\n\r\nYes, the parent has been validated by execution layer, but execution engine is not available to produce the next block. Other consensus clients could validate this block without execution layer provided it has 0 transactions.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/936117486/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/937684174",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2644#issuecomment-937684174",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2644",
    "id": 937684174,
    "node_id": "IC_kwDOCOoGbc434-zO",
    "user": {
      "login": "mkalinin",
      "id": 1892772,
      "node_id": "MDQ6VXNlcjE4OTI3NzI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1892772?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mkalinin",
      "html_url": "https://github.com/mkalinin",
      "followers_url": "https://api.github.com/users/mkalinin/followers",
      "following_url": "https://api.github.com/users/mkalinin/following{/other_user}",
      "gists_url": "https://api.github.com/users/mkalinin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mkalinin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mkalinin/subscriptions",
      "organizations_url": "https://api.github.com/users/mkalinin/orgs",
      "repos_url": "https://api.github.com/users/mkalinin/repos",
      "events_url": "https://api.github.com/users/mkalinin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mkalinin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-07T11:01:31Z",
    "updated_at": "2021-10-07T11:01:31Z",
    "author_association": "MEMBER",
    "body": "> Yes, the parent has been validated by execution layer, but execution engine is not available to produce the next block. Other consensus clients could validate this block without execution layer provided it has 0 transactions.\r\n\r\nProducing empty payload is the potential fallback behaviour for CL client in this case. This case is not that frequent, though. The question is would CL want to support RLP and keccak256 to handle it, should be up to implementation",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/937684174/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/937755320",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2644#issuecomment-937755320",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2644",
    "id": 937755320,
    "node_id": "IC_kwDOCOoGbc435QK4",
    "user": {
      "login": "dapplion",
      "id": 35266934,
      "node_id": "MDQ6VXNlcjM1MjY2OTM0",
      "avatar_url": "https://avatars.githubusercontent.com/u/35266934?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dapplion",
      "html_url": "https://github.com/dapplion",
      "followers_url": "https://api.github.com/users/dapplion/followers",
      "following_url": "https://api.github.com/users/dapplion/following{/other_user}",
      "gists_url": "https://api.github.com/users/dapplion/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dapplion/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dapplion/subscriptions",
      "organizations_url": "https://api.github.com/users/dapplion/orgs",
      "repos_url": "https://api.github.com/users/dapplion/repos",
      "events_url": "https://api.github.com/users/dapplion/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dapplion/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-07T12:43:09Z",
    "updated_at": "2021-10-07T12:43:09Z",
    "author_association": "CONTRIBUTOR",
    "body": "> > Yes, the parent has been validated by execution layer, but execution engine is not available to produce the next block. Other consensus clients could validate this block without execution layer provided it has 0 transactions.\r\n> \r\n> Producing empty payload is the potential fallback behaviour for CL client in this case. This case is not that frequent, though. The question is would CL want to support RLP and keccak256 to handle it, should be up to implementation\r\n\r\nIt could help in a network wide outage where Geth experiments a critical failure, it won't stall consensus too, only EL.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/937755320/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/937764410",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2644#issuecomment-937764410",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2644",
    "id": 937764410,
    "node_id": "IC_kwDOCOoGbc435SY6",
    "user": {
      "login": "mkalinin",
      "id": 1892772,
      "node_id": "MDQ6VXNlcjE4OTI3NzI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1892772?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mkalinin",
      "html_url": "https://github.com/mkalinin",
      "followers_url": "https://api.github.com/users/mkalinin/followers",
      "following_url": "https://api.github.com/users/mkalinin/following{/other_user}",
      "gists_url": "https://api.github.com/users/mkalinin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mkalinin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mkalinin/subscriptions",
      "organizations_url": "https://api.github.com/users/mkalinin/orgs",
      "repos_url": "https://api.github.com/users/mkalinin/repos",
      "events_url": "https://api.github.com/users/mkalinin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mkalinin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-07T12:54:48Z",
    "updated_at": "2021-10-07T12:54:48Z",
    "author_association": "MEMBER",
    "body": "> > > Yes, the parent has been validated by execution layer, but execution engine is not available to produce the next block. Other consensus clients could validate this block without execution layer provided it has 0 transactions.\r\n> > \r\n> > \r\n> > Producing empty payload is the potential fallback behaviour for CL client in this case. This case is not that frequent, though. The question is would CL want to support RLP and keccak256 to handle it, should be up to implementation\r\n> \r\n> It could help in a network wide outage where Geth experiments a critical failure, it won't stall consensus too, only EL.\r\n\r\nOh, I see what you mean. It will stop working when a proposer that having another EL client proposes a payload with non-empty transaction list. Until that point it could definitely be helpful and contribute to the network liveness. Though, we're targeting client diversity and ideally a number of consecutive EL failures should approach zero.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/937764410/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/937797085",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2644#issuecomment-937797085",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2644",
    "id": 937797085,
    "node_id": "IC_kwDOCOoGbc435aXd",
    "user": {
      "login": "dapplion",
      "id": 35266934,
      "node_id": "MDQ6VXNlcjM1MjY2OTM0",
      "avatar_url": "https://avatars.githubusercontent.com/u/35266934?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dapplion",
      "html_url": "https://github.com/dapplion",
      "followers_url": "https://api.github.com/users/dapplion/followers",
      "following_url": "https://api.github.com/users/dapplion/following{/other_user}",
      "gists_url": "https://api.github.com/users/dapplion/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dapplion/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dapplion/subscriptions",
      "organizations_url": "https://api.github.com/users/dapplion/orgs",
      "repos_url": "https://api.github.com/users/dapplion/repos",
      "events_url": "https://api.github.com/users/dapplion/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dapplion/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-07T13:32:36Z",
    "updated_at": "2021-10-07T13:32:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Oh, I see what you mean. It will stop working when a proposer that having another EL client proposes a payload with non-empty transaction list. Until that point it could definitely be helpful and contribute to the network liveness. Though, we're targeting client diversity and ideally a number of consecutive EL failures should approach zero.\r\n\r\nEven if one single EL client fails you are trading a skipped slot against a slot with consensus data and no execution data",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/937797085/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/937798551",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2644#issuecomment-937798551",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2644",
    "id": 937798551,
    "node_id": "IC_kwDOCOoGbc435auX",
    "user": {
      "login": "mkalinin",
      "id": 1892772,
      "node_id": "MDQ6VXNlcjE4OTI3NzI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1892772?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mkalinin",
      "html_url": "https://github.com/mkalinin",
      "followers_url": "https://api.github.com/users/mkalinin/followers",
      "following_url": "https://api.github.com/users/mkalinin/following{/other_user}",
      "gists_url": "https://api.github.com/users/mkalinin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mkalinin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mkalinin/subscriptions",
      "organizations_url": "https://api.github.com/users/mkalinin/orgs",
      "repos_url": "https://api.github.com/users/mkalinin/repos",
      "events_url": "https://api.github.com/users/mkalinin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mkalinin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-07T13:34:14Z",
    "updated_at": "2021-10-07T13:34:14Z",
    "author_association": "MEMBER",
    "body": "> > Oh, I see what you mean. It will stop working when a proposer that having another EL client proposes a payload with non-empty transaction list. Until that point it could definitely be helpful and contribute to the network liveness. Though, we're targeting client diversity and ideally a number of consecutive EL failures should approach zero.\r\n> \r\n> Even if one single EL client fails you are trading a skipped slot against a slot with consensus data and no execution data\r\n\r\nRight and it should be possible to be implemented on CL side without an update to the spec",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/937798551/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/937806397",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2644#issuecomment-937806397",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2644",
    "id": 937806397,
    "node_id": "IC_kwDOCOoGbc435co9",
    "user": {
      "login": "dapplion",
      "id": 35266934,
      "node_id": "MDQ6VXNlcjM1MjY2OTM0",
      "avatar_url": "https://avatars.githubusercontent.com/u/35266934?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dapplion",
      "html_url": "https://github.com/dapplion",
      "followers_url": "https://api.github.com/users/dapplion/followers",
      "following_url": "https://api.github.com/users/dapplion/following{/other_user}",
      "gists_url": "https://api.github.com/users/dapplion/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dapplion/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dapplion/subscriptions",
      "organizations_url": "https://api.github.com/users/dapplion/orgs",
      "repos_url": "https://api.github.com/users/dapplion/repos",
      "events_url": "https://api.github.com/users/dapplion/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dapplion/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-07T13:43:10Z",
    "updated_at": "2021-10-07T13:43:10Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Right and it should be possible to be implemented on CL side without an update to the spec\r\n\r\nWhile it does not affect the spec it can significantly alter network behavior. Would a note or recommendation by appropriate?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/937806397/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/937817930",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2644#issuecomment-937817930",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2644",
    "id": 937817930,
    "node_id": "IC_kwDOCOoGbc435fdK",
    "user": {
      "login": "mkalinin",
      "id": 1892772,
      "node_id": "MDQ6VXNlcjE4OTI3NzI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1892772?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mkalinin",
      "html_url": "https://github.com/mkalinin",
      "followers_url": "https://api.github.com/users/mkalinin/followers",
      "following_url": "https://api.github.com/users/mkalinin/following{/other_user}",
      "gists_url": "https://api.github.com/users/mkalinin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mkalinin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mkalinin/subscriptions",
      "organizations_url": "https://api.github.com/users/mkalinin/orgs",
      "repos_url": "https://api.github.com/users/mkalinin/repos",
      "events_url": "https://api.github.com/users/mkalinin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mkalinin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-07T13:55:51Z",
    "updated_at": "2021-10-07T13:55:51Z",
    "author_association": "MEMBER",
    "body": "> > Right and it should be possible to be implemented on CL side without an update to the spec\r\n> \r\n> While it does not affect the spec it can significantly alter network behavior. Would a note or recommendation by appropriate?\r\n\r\nI would say this is potentially dangerous because one may decide that they can propose on not yet validated block after seeing anything like that in the spec. Or it can be handled with yet another *Note* under the first one, hmmm. Could be as follows:\r\n\r\n*Note*: Client software MUST NOT propose on or attest to a block which isn't deemed valid, i.e. passed the beacon chain state transition function and execution verifications.\r\n*Note*: Client software MAY propose a block with a payload having empty transactions list in case if `ExecutionEngine.get_payload` failed to respond with a payload.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/937817930/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/937840939",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2644#issuecomment-937840939",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2644",
    "id": 937840939,
    "node_id": "IC_kwDOCOoGbc435lEr",
    "user": {
      "login": "dapplion",
      "id": 35266934,
      "node_id": "MDQ6VXNlcjM1MjY2OTM0",
      "avatar_url": "https://avatars.githubusercontent.com/u/35266934?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dapplion",
      "html_url": "https://github.com/dapplion",
      "followers_url": "https://api.github.com/users/dapplion/followers",
      "following_url": "https://api.github.com/users/dapplion/following{/other_user}",
      "gists_url": "https://api.github.com/users/dapplion/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dapplion/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dapplion/subscriptions",
      "organizations_url": "https://api.github.com/users/dapplion/orgs",
      "repos_url": "https://api.github.com/users/dapplion/repos",
      "events_url": "https://api.github.com/users/dapplion/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dapplion/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-07T14:20:12Z",
    "updated_at": "2021-10-07T14:20:12Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Note: Client software MUST NOT propose on or attest to a block which isn't deemed valid, i.e. passed the beacon chain state transition function and execution verifications.\r\nNote: Client software MAY propose a block with a payload having empty transactions list in case if ExecutionEngine.get_payload failed to respond with a payload.\r\n\r\nThose both notes look good to me. The first one is already relevant in the context of a post-merge sync.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/937840939/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/946225264",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2644#issuecomment-946225264",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2644",
    "id": 946225264,
    "node_id": "IC_kwDOCOoGbc44ZkBw",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-18T22:44:24Z",
    "updated_at": "2021-10-18T22:44:24Z",
    "author_association": "MEMBER",
    "body": "I'm not sure we should put this in the spec. While it is an optional correct behavior, it represents some failure in your local node and puts a requirement to be able to perform keccak hashes of the executionPayload on CL side.\r\n\r\nIf we *do* put it in the spec, we'll have to define what a \"correct\" empty payload looks like and how to hash it properly. In terms of keeping the layers separated on a spec level, it would be much cleaner to leave it as is. And if a CL client wants to optimize for this case, and produce a valid block of empty txs, they can.\r\n\r\nI mainly don't want to be in the habit of spec-ing the same behavior (or subset of behavior) in both CL and EL which this would require. (Same reason that I'm loosely in favor of removing gas validations on CL spec)\r\n\r\n> While it does not affect the spec it can significantly alter network behavior\r\n\r\nDoes it significantly alter network behavior? If we abstract an EL into one that can either give us a valid payload full of TXs or a fallback payload with no TXs, then whether in practice EL or CL does it, both look like correct behavior and we might see it anyway. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/946225264/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/956315292",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2644#issuecomment-956315292",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2644",
    "id": 956315292,
    "node_id": "IC_kwDOCOoGbc45ADac",
    "user": {
      "login": "mkalinin",
      "id": 1892772,
      "node_id": "MDQ6VXNlcjE4OTI3NzI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1892772?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mkalinin",
      "html_url": "https://github.com/mkalinin",
      "followers_url": "https://api.github.com/users/mkalinin/followers",
      "following_url": "https://api.github.com/users/mkalinin/following{/other_user}",
      "gists_url": "https://api.github.com/users/mkalinin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mkalinin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mkalinin/subscriptions",
      "organizations_url": "https://api.github.com/users/mkalinin/orgs",
      "repos_url": "https://api.github.com/users/mkalinin/repos",
      "events_url": "https://api.github.com/users/mkalinin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mkalinin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-01T15:08:51Z",
    "updated_at": "2021-11-01T15:08:51Z",
    "author_association": "MEMBER",
    "body": "The first note that has been discussed in this issue has been added to the spec https://github.com/ethereum/consensus-specs/pull/2703. I am closing the issue as everyone seems to be agree on leaving the opportunity of building empty payload as a fallback out of specification.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/956315292/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
