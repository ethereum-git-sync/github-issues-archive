{
  "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1406",
  "repository_url": "https://api.github.com/repos/ethereum/consensus-specs",
  "labels_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1406/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1406/comments",
  "events_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1406/events",
  "html_url": "https://github.com/ethereum/consensus-specs/issues/1406",
  "id": 491979342,
  "node_id": "MDU6SXNzdWU0OTE5NzkzNDI=",
  "number": 1406,
  "title": "Attestations for blocks from incorrect slots",
  "user": {
    "login": "djrtwo",
    "id": 1433595,
    "node_id": "MDQ6VXNlcjE0MzM1OTU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/djrtwo",
    "html_url": "https://github.com/djrtwo",
    "followers_url": "https://api.github.com/users/djrtwo/followers",
    "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
    "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
    "organizations_url": "https://api.github.com/users/djrtwo/orgs",
    "repos_url": "https://api.github.com/users/djrtwo/repos",
    "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
    "received_events_url": "https://api.github.com/users/djrtwo/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2019-09-11T02:08:23Z",
  "updated_at": "2019-11-18T18:15:41Z",
  "closed_at": "2019-11-18T18:15:41Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "@paulhauner Brought up an interesting scenario in which an attestation votes for a beacon block root from a future slot.\r\n\r\nWith respect to the state transition, it doesn't really matter. It just looks like an incorrect head root and thus won't be rewarded for the head vote. This operates the same way as though the head voted on was from a different fork.\r\n\r\nThe fork choice on the other hand currently handles this in a degenerate manner. The only check currently when inducting an attestation into latest messages is that the target_epoch is greater than the previous latest message for the validator and that the slot of the attestation is not in the future. We make no checks wrt `beacon_block_root`, but we store the `beacon_block_root` into the `latest_messages` store for that validator.\r\n\r\nThis results in a case in which the validator can successfully influencing the fork choice of a head block later than their assigned slot and can even use an attestation from a past epoch to cast a vote on a block from a future (wrt to the attestation slot) epoch.\r\n\r\nI haven't fully assessed the attack domain here, but the simple solution to simply remove this case from the attack surface is to make these attestations invalid wrt the fork choice.",
  "closed_by": {
    "login": "djrtwo",
    "id": 1433595,
    "node_id": "MDQ6VXNlcjE0MzM1OTU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/djrtwo",
    "html_url": "https://github.com/djrtwo",
    "followers_url": "https://api.github.com/users/djrtwo/followers",
    "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
    "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
    "organizations_url": "https://api.github.com/users/djrtwo/orgs",
    "repos_url": "https://api.github.com/users/djrtwo/repos",
    "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
    "received_events_url": "https://api.github.com/users/djrtwo/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1406/reactions",
    "total_count": 3,
    "+1": 3,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1406/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/536885654",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1406#issuecomment-536885654",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1406",
    "id": 536885654,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzNjg4NTY1NA==",
    "user": {
      "login": "nrryuya",
      "id": 22876645,
      "node_id": "MDQ6VXNlcjIyODc2NjQ1",
      "avatar_url": "https://avatars.githubusercontent.com/u/22876645?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nrryuya",
      "html_url": "https://github.com/nrryuya",
      "followers_url": "https://api.github.com/users/nrryuya/followers",
      "following_url": "https://api.github.com/users/nrryuya/following{/other_user}",
      "gists_url": "https://api.github.com/users/nrryuya/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nrryuya/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nrryuya/subscriptions",
      "organizations_url": "https://api.github.com/users/nrryuya/orgs",
      "repos_url": "https://api.github.com/users/nrryuya/repos",
      "events_url": "https://api.github.com/users/nrryuya/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nrryuya/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-01T06:20:38Z",
    "updated_at": "2019-10-01T06:20:38Z",
    "author_association": "CONTRIBUTOR",
    "body": ">an attestation from a past epoch to cast a vote on a block from a future (wrt to the attestation slot) epoch\r\n\r\nIMO the validity condition that any attestation must not attest to a future block is must-have in any slot-based approach. Otherwise, the saving strategy becomes much easier; an attacker can do saving and then start decoy-flip-flop attack without network failure. If we add this condition, an attacker must wait or manually cause a network failure to prevent the convergence for saving.\r\nI just published a more detailed post [here](https://ethresear.ch/t/saving-strategy-and-fmd-ghost/6226/1).\r\n\r\n>block from current epoch casting a vote for a block older than the attestation slot.\r\n\r\nThis should be allowed because the sender of the attestation might have failed to receive the block from the slot?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/536885654/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/541284424",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1406#issuecomment-541284424",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1406",
    "id": 541284424,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0MTI4NDQyNA==",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-12T04:43:03Z",
    "updated_at": "2019-10-12T04:43:03Z",
    "author_association": "MEMBER",
    "body": "> This should be allowed because the sender of the attestation might have failed to receive the block from the slot?\r\n\r\nYep! wasn't thinking. good catch!",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/541284424/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
