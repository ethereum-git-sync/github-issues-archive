{
  "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1029",
  "repository_url": "https://api.github.com/repos/ethereum/consensus-specs",
  "labels_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1029/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1029/comments",
  "events_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1029/events",
  "html_url": "https://github.com/ethereum/consensus-specs/issues/1029",
  "id": 439503907,
  "node_id": "MDU6SXNzdWU0Mzk1MDM5MDc=",
  "number": 1029,
  "title": "Monkeypatch the minus operator",
  "user": {
    "login": "JustinDrake",
    "id": 731743,
    "node_id": "MDQ6VXNlcjczMTc0Mw==",
    "avatar_url": "https://avatars.githubusercontent.com/u/731743?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/JustinDrake",
    "html_url": "https://github.com/JustinDrake",
    "followers_url": "https://api.github.com/users/JustinDrake/followers",
    "following_url": "https://api.github.com/users/JustinDrake/following{/other_user}",
    "gists_url": "https://api.github.com/users/JustinDrake/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/JustinDrake/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/JustinDrake/subscriptions",
    "organizations_url": "https://api.github.com/users/JustinDrake/orgs",
    "repos_url": "https://api.github.com/users/JustinDrake/repos",
    "events_url": "https://api.github.com/users/JustinDrake/events{/privacy}",
    "received_events_url": "https://api.github.com/users/JustinDrake/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1295439957,
      "node_id": "MDU6TGFiZWwxMjk1NDM5OTU3",
      "url": "https://api.github.com/repos/ethereum/consensus-specs/labels/scope:CI/tests/pyspec",
      "name": "scope:CI/tests/pyspec",
      "color": "BDC0BA",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2019-05-02T09:39:20Z",
  "updated_at": "2019-06-25T13:38:55Z",
  "closed_at": "2019-06-25T13:38:55Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "See #1017 for contextâ€”cc @mkalinin @djrtwo\r\n\r\nMonkeypatch the minus operator `-` so that if `a - b` is ever negative we `assert False`. That will allow the executable spec to automatically report `uint64` underflows. May prove useful in the context of fuzz testing.",
  "closed_by": {
    "login": "djrtwo",
    "id": 1433595,
    "node_id": "MDQ6VXNlcjE0MzM1OTU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/djrtwo",
    "html_url": "https://github.com/djrtwo",
    "followers_url": "https://api.github.com/users/djrtwo/followers",
    "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
    "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
    "organizations_url": "https://api.github.com/users/djrtwo/orgs",
    "repos_url": "https://api.github.com/users/djrtwo/repos",
    "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
    "received_events_url": "https://api.github.com/users/djrtwo/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1029/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1029/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/504232091",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1029#issuecomment-504232091",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1029",
    "id": 504232091,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwNDIzMjA5MQ==",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-06-20T23:16:34Z",
    "updated_at": "2019-06-20T23:16:34Z",
    "author_association": "MEMBER",
    "body": "This is better handled in boxing all int types. @protolambda, are we safe with the new uint types everywhere?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/504232091/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/504235619",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1029#issuecomment-504235619",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1029",
    "id": 504235619,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwNDIzNTYxOQ==",
    "user": {
      "login": "protolambda",
      "id": 19571989,
      "node_id": "MDQ6VXNlcjE5NTcxOTg5",
      "avatar_url": "https://avatars.githubusercontent.com/u/19571989?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/protolambda",
      "html_url": "https://github.com/protolambda",
      "followers_url": "https://api.github.com/users/protolambda/followers",
      "following_url": "https://api.github.com/users/protolambda/following{/other_user}",
      "gists_url": "https://api.github.com/users/protolambda/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/protolambda/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/protolambda/subscriptions",
      "organizations_url": "https://api.github.com/users/protolambda/orgs",
      "repos_url": "https://api.github.com/users/protolambda/repos",
      "events_url": "https://api.github.com/users/protolambda/events{/privacy}",
      "received_events_url": "https://api.github.com/users/protolambda/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-06-20T23:33:57Z",
    "updated_at": "2019-06-20T23:34:38Z",
    "author_association": "MEMBER",
    "body": "The new uint types are subclasses of uint. So you could override `__add__`/`__sub__`, returning the new value. And then raise if below zero / over maximum (casting the output will do that for us). So effectively 4 lines added to `uint` base class in #1180 would do it: \r\n```python\r\ndef __add__(self, other):\r\n  return self.__class__(super().__add__(other))\r\n\r\ndef __sub__(self, other):\r\n  return self.__class__(super().__sub__(other))\r\n```\r\nCurrent behavior is already close:\r\n```\r\nprint(uint8(0) - uint8(123))  # int: -123\r\nprint(uint8(uint8(0) - uint8(123)))  # ValueError: unsigned types must not be negative\r\n```\r\nAnd then when you try to put the first somewhere, and the int is coerced to uint8, you get the error. You lose the type in between though, overriding the `__add__` etc. is required to keep it the same type.\r\n\r\nDo you want it in #1180?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/504235619/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/504236540",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1029#issuecomment-504236540",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1029",
    "id": 504236540,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwNDIzNjU0MA==",
    "user": {
      "login": "protolambda",
      "id": 19571989,
      "node_id": "MDQ6VXNlcjE5NTcxOTg5",
      "avatar_url": "https://avatars.githubusercontent.com/u/19571989?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/protolambda",
      "html_url": "https://github.com/protolambda",
      "followers_url": "https://api.github.com/users/protolambda/followers",
      "following_url": "https://api.github.com/users/protolambda/following{/other_user}",
      "gists_url": "https://api.github.com/users/protolambda/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/protolambda/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/protolambda/subscriptions",
      "organizations_url": "https://api.github.com/users/protolambda/orgs",
      "repos_url": "https://api.github.com/users/protolambda/repos",
      "events_url": "https://api.github.com/users/protolambda/events{/privacy}",
      "received_events_url": "https://api.github.com/users/protolambda/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-06-20T23:39:09Z",
    "updated_at": "2019-06-20T23:39:09Z",
    "author_association": "MEMBER",
    "body": "And what do we want for: `uint8(0) + uint32(255)`? With the above override, this results in `uint8(255)`. But `uint8(0) + uint32(256)` would error. We could make it very strict. But it may affect spec readability.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/504236540/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/504546497",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1029#issuecomment-504546497",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1029",
    "id": 504546497,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwNDU0NjQ5Nw==",
    "user": {
      "login": "protolambda",
      "id": 19571989,
      "node_id": "MDQ6VXNlcjE5NTcxOTg5",
      "avatar_url": "https://avatars.githubusercontent.com/u/19571989?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/protolambda",
      "html_url": "https://github.com/protolambda",
      "followers_url": "https://api.github.com/users/protolambda/followers",
      "following_url": "https://api.github.com/users/protolambda/following{/other_user}",
      "gists_url": "https://api.github.com/users/protolambda/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/protolambda/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/protolambda/subscriptions",
      "organizations_url": "https://api.github.com/users/protolambda/orgs",
      "repos_url": "https://api.github.com/users/protolambda/repos",
      "events_url": "https://api.github.com/users/protolambda/events{/privacy}",
      "received_events_url": "https://api.github.com/users/protolambda/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-06-21T19:30:18Z",
    "updated_at": "2019-06-21T19:30:18Z",
    "author_association": "MEMBER",
    "body": "> `slot_to_attest = post_state.slot - spec.MIN_ATTESTATION_INCLUSION_DELAY + 1` `ValueError: unsigned types must not be negative`\r\n\r\nYay, it catched something. In old testing code though. Hope we find more with the ongoing fuzzing.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/504546497/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
