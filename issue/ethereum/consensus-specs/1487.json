{
  "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1487",
  "repository_url": "https://api.github.com/repos/ethereum/consensus-specs",
  "labels_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1487/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1487/comments",
  "events_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1487/events",
  "html_url": "https://github.com/ethereum/consensus-specs/issues/1487",
  "id": 526291020,
  "node_id": "MDU6SXNzdWU1MjYyOTEwMjA=",
  "number": 1487,
  "title": "Signing root problems",
  "user": {
    "login": "protolambda",
    "id": 19571989,
    "node_id": "MDQ6VXNlcjE5NTcxOTg5",
    "avatar_url": "https://avatars.githubusercontent.com/u/19571989?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/protolambda",
    "html_url": "https://github.com/protolambda",
    "followers_url": "https://api.github.com/users/protolambda/followers",
    "following_url": "https://api.github.com/users/protolambda/following{/other_user}",
    "gists_url": "https://api.github.com/users/protolambda/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/protolambda/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/protolambda/subscriptions",
    "organizations_url": "https://api.github.com/users/protolambda/orgs",
    "repos_url": "https://api.github.com/users/protolambda/repos",
    "events_url": "https://api.github.com/users/protolambda/events{/privacy}",
    "received_events_url": "https://api.github.com/users/protolambda/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1137720193,
      "node_id": "MDU6TGFiZWwxMTM3NzIwMTkz",
      "url": "https://api.github.com/repos/ethereum/consensus-specs/labels/general:discussion",
      "name": "general:discussion",
      "color": "F17C67",
      "default": false,
      "description": ""
    },
    {
      "id": 1170174610,
      "node_id": "MDU6TGFiZWwxMTcwMTc0NjEw",
      "url": "https://api.github.com/repos/ethereum/consensus-specs/labels/scope:SSZ",
      "name": "scope:SSZ",
      "color": "77428D",
      "default": false,
      "description": "Simple Serialize"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2019-11-21T00:21:01Z",
  "updated_at": "2019-12-05T21:15:50Z",
  "closed_at": "2019-12-05T21:15:50Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "## Quick definition\r\n\r\n- `hash_tree_root` merkleizes all fields\r\n- `signing_root` merkleizes all fields except the last.\r\n\r\n### Example:\r\n```python\r\nclass BeaconBlock(Container):\r\n    slot: Slot\r\n    parent_root: Hash\r\n    state_root: Hash\r\n    body: BeaconBlockBody\r\n    signature: BLSSignature\r\n```\r\n\r\n- `hash_tree_root`: `H(H(slot, parent_root), H(state_root, body))`\r\n- `signing_root`: `H(H(H(slot, parent_root), H(state_root, body)), H(H(signature, Z[0]), Z[1]))`\r\n\r\n## Why?\r\n\r\n- Consensus only cares about `signing_root` on-chain in case of data types with a signature, since the signature is already verified (as part of block processing)\r\n- `signing_root` provides the hash to sign and create `signature` with.\r\n\r\n## Why not?\r\n\r\n- Summaries/Expansions in SSZ: The state embeds a `block_root`, but expanding it into a block header or full block is not possible without knowing that it's a signing root.\r\n    - Use separate type definition for the data, omitting the signature field. E.g. `some_msg_root: Root[FieldTypeWithoutSig]`\r\n    - Mark the root as a signing root, and expand into the definition ignoring the signature field. E.g. `some_msg_root: SigRoot[FieldTypeWithSig]`, `some_signed_msg_root: HashRoot[FieldTypeWithSig]`. \r\n- Tree representation:\r\n    - To represent a `BeaconBlock` as a tree you have `hash_tree_root` and `singing_root` trees.\r\n        - State representation as a tree is useful for:\r\n            - Caching: lazily hash child nodes `a` and `b`, cache `H(a,b)` at the tree node.\r\n            - Fork a state into two trees with common subtrees: effectively only storing the difference to pre-state with each addition. Alike to a merkle datastore.\r\n            - Quickly respond to proof requests by having the tree ready.\r\n    - To navigate the tree, the expansion problem repeats: again a need to separate the two different merkle tree types.\r\n- Inconsistency: Hash-tree-root is universal: everything has a hash-tree-root. But signing-root is not, only containers can have it. \r\n- Indexing: A signing-root db index is necessary for generally on-chain activity, and a hash-tree-root db index for off-chain (see if a block with specific signature is known)\r\n    - Cannot convert the signing-root to hash-tree-root (except technically for `BeaconBlock`, but only as a by-product of current field count).\r\n\r\n## Alternatives?\r\n\r\n1. No `signing_root`:\r\n    - Define `BeaconBlock` and `SignedBeaconBlock`.\r\n        ```python\r\n        class BeaconBlock(Container):\r\n            slot: Slot\r\n            parent_root: Hash\r\n            state_root: Hash\r\n            body: BeaconBlockBody\r\n        \r\n        class SignedBeaconBlock(Container):\r\n            data: BeaconBlock\r\n            signature: BLSSignature\r\n        ```\r\n        - Convenient: `hash_tree_root(SignedBeaconBlock) == H(hash_tree_root(BeaconBlock), signature)`\r\n            - No need to provide the full branch to the signature to proof a hash-tree-root or convert a signing root into a hash-tree-root. Just provide the signature.\r\n        - No two different type definitions, always one way to represent the type as a tree.\r\n            - No `SigRoot`/`HashRoot` confusion or duplicate choices of representation.\r\n        - No inconsistency with other types that are signed in different ways.\r\n    - Optional: less repetitive definitions, add a `Signed[MsgType]` helper type to wrap any container with a signature\r\n    - No confusion between two root types in block explorers/etc, the types have names now.\r\n2. Type the output, work around for only some of the issues:\r\n    - Backwards compatible, no functional change. `signing_root` stays.\r\n    - Define `HashRoot` and `SigRoot`, both derived from `Bytes32`\r\n    - Wherever a root needs to be expanded into a type, it can be done based on its `HashRoot` / `SigRoot`\r\n    - Does not solve the represent-as-tree problem: `BeaconBlock` still has two different tree representations.\r\n    - Does not solve the inconsistency problem: there will still be cases where a regular `SigRoot` does not fit due to different message / signature requirements.\r\n\r\n## Edge cases\r\n\r\n- `DepositData` in the spec: hash-tree-roots with signatures included are part of the deposits list root. But processing the signature is done with signing root.\r\n    - `process_deposit`: We do not like to change the spec here: but removal of signing root doesn't require a change to the deposit contract. We just need to define a `DepositMsg` with the fields that were signed over, functionally producing the same old signing_root behavior.\r\n- Networking: signatures may not be changed and the appearance of a block has to be checked by.\r\n    - Things improve here with option 1: getting a root that includes the signature is as easy as hashing the signing root with the signature.\r\n\r\n## Related\r\n\r\nExpansions/summaries are difficult with two root variants and effectively different trees:\r\n- https://github.com/ethereum/eth2.0-specs/issues/1436\r\n    - The temporary \"solution\" is to think of it as an implementation problem. \r\n        - \"Two options: define explicit types with/without signature yourself, or type the roots yourself\"\r\n- Light client desire for `Root[UnderlyingType]` to easily expand to `UnderlyingType` (and its further expansions). With two root types this gets difficult.\r\n- The original introduction of \"signed_root\", with similar but slightly different definition, and mostly focused on unification of type definitions / line count reduction: https://github.com/ethereum/eth2.0-specs/pull/625\r\n\r\n## Proposal\r\n\r\nSince SSZ itself is not quite frozen, but the core functionality for Phase 0 was, so this proposal will go slower and through more review.\r\n\r\n- Implement alternative 1 in a PR to the specs repo\r\n- Personally expect that it will mostly be a welcome change for clients:\r\n    - cost: defining a few simple containers, updating signing_root calls to hash_tree_root these signature-less containers instead.\r\n    - benefit: less merkleization variation to worry about, enable caching/trees/more.\r\n- Others involved with SSZ share their feedback / concerns / support.\r\n- Decide next Eth2 implementers call (early Dec.) if it can go in.\r\n\r\n\r\n",
  "closed_by": {
    "login": "protolambda",
    "id": 19571989,
    "node_id": "MDQ6VXNlcjE5NTcxOTg5",
    "avatar_url": "https://avatars.githubusercontent.com/u/19571989?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/protolambda",
    "html_url": "https://github.com/protolambda",
    "followers_url": "https://api.github.com/users/protolambda/followers",
    "following_url": "https://api.github.com/users/protolambda/following{/other_user}",
    "gists_url": "https://api.github.com/users/protolambda/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/protolambda/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/protolambda/subscriptions",
    "organizations_url": "https://api.github.com/users/protolambda/orgs",
    "repos_url": "https://api.github.com/users/protolambda/repos",
    "events_url": "https://api.github.com/users/protolambda/events{/privacy}",
    "received_events_url": "https://api.github.com/users/protolambda/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1487/reactions",
    "total_count": 3,
    "+1": 3,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1487/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/557062635",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1487#issuecomment-557062635",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1487",
    "id": 557062635,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NzA2MjYzNQ==",
    "user": {
      "login": "arnetheduck",
      "id": 1382986,
      "node_id": "MDQ6VXNlcjEzODI5ODY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1382986?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/arnetheduck",
      "html_url": "https://github.com/arnetheduck",
      "followers_url": "https://api.github.com/users/arnetheduck/followers",
      "following_url": "https://api.github.com/users/arnetheduck/following{/other_user}",
      "gists_url": "https://api.github.com/users/arnetheduck/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/arnetheduck/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/arnetheduck/subscriptions",
      "organizations_url": "https://api.github.com/users/arnetheduck/orgs",
      "repos_url": "https://api.github.com/users/arnetheduck/repos",
      "events_url": "https://api.github.com/users/arnetheduck/events{/privacy}",
      "received_events_url": "https://api.github.com/users/arnetheduck/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-21T12:26:38Z",
    "updated_at": "2019-11-21T12:26:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "Yes! +1 for alternative 1\r\n\r\n* It would potentially be nice to maintain the tuple `[data, signature]` throughout as a pattern, or indeed use a generic notation for it - either is fine.\r\n* This also solves the problem of `BeaconBlockHeader` in `BeaconState` containing an always-zeroed signature\r\n* It solves an ambiguity whether blocks should be requested by `signing_root` or `hash_tree_root` in the network protocol (there were a few back-and-forths and signing-roots were chosen)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/557062635/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/557123461",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1487#issuecomment-557123461",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1487",
    "id": 557123461,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NzEyMzQ2MQ==",
    "user": {
      "login": "tkstanczak",
      "id": 498913,
      "node_id": "MDQ6VXNlcjQ5ODkxMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/498913?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tkstanczak",
      "html_url": "https://github.com/tkstanczak",
      "followers_url": "https://api.github.com/users/tkstanczak/followers",
      "following_url": "https://api.github.com/users/tkstanczak/following{/other_user}",
      "gists_url": "https://api.github.com/users/tkstanczak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tkstanczak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tkstanczak/subscriptions",
      "organizations_url": "https://api.github.com/users/tkstanczak/orgs",
      "repos_url": "https://api.github.com/users/tkstanczak/repos",
      "events_url": "https://api.github.com/users/tkstanczak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tkstanczak/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-21T15:01:30Z",
    "updated_at": "2019-11-21T15:01:30Z",
    "author_association": "NONE",
    "body": "+1 for alternative 1",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/557123461/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/557127547",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1487#issuecomment-557127547",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1487",
    "id": 557127547,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NzEyNzU0Nw==",
    "user": {
      "login": "mkalinin",
      "id": 1892772,
      "node_id": "MDQ6VXNlcjE4OTI3NzI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1892772?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mkalinin",
      "html_url": "https://github.com/mkalinin",
      "followers_url": "https://api.github.com/users/mkalinin/followers",
      "following_url": "https://api.github.com/users/mkalinin/following{/other_user}",
      "gists_url": "https://api.github.com/users/mkalinin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mkalinin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mkalinin/subscriptions",
      "organizations_url": "https://api.github.com/users/mkalinin/orgs",
      "repos_url": "https://api.github.com/users/mkalinin/repos",
      "events_url": "https://api.github.com/users/mkalinin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mkalinin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-21T15:10:41Z",
    "updated_at": "2019-11-21T15:10:41Z",
    "author_association": "MEMBER",
    "body": "+1 for alternative 1",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/557127547/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/557342747",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1487#issuecomment-557342747",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1487",
    "id": 557342747,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NzM0Mjc0Nw==",
    "user": {
      "login": "vbuterin",
      "id": 2230894,
      "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vbuterin",
      "html_url": "https://github.com/vbuterin",
      "followers_url": "https://api.github.com/users/vbuterin/followers",
      "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
      "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
      "organizations_url": "https://api.github.com/users/vbuterin/orgs",
      "repos_url": "https://api.github.com/users/vbuterin/repos",
      "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vbuterin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-22T01:10:09Z",
    "updated_at": "2019-11-22T01:10:09Z",
    "author_association": "MEMBER",
    "body": "Support alternative 1.\r\n\r\n> Optional: less repetitive definitions, add a Signed[MsgType] helper type to wrap any container with a signature\r\n\r\nThis would definitely be useful!",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/557342747/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
