{
  "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1409",
  "repository_url": "https://api.github.com/repos/ethereum/consensus-specs",
  "labels_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1409/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1409/comments",
  "events_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1409/events",
  "html_url": "https://github.com/ethereum/consensus-specs/issues/1409",
  "id": 495760203,
  "node_id": "MDU6SXNzdWU0OTU3NjAyMDM=",
  "number": 1409,
  "title": "Unclear atomicity semantics of the beacon chain spec",
  "user": {
    "login": "ericsson49",
    "id": 10426192,
    "node_id": "MDQ6VXNlcjEwNDI2MTky",
    "avatar_url": "https://avatars.githubusercontent.com/u/10426192?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ericsson49",
    "html_url": "https://github.com/ericsson49",
    "followers_url": "https://api.github.com/users/ericsson49/followers",
    "following_url": "https://api.github.com/users/ericsson49/following{/other_user}",
    "gists_url": "https://api.github.com/users/ericsson49/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ericsson49/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ericsson49/subscriptions",
    "organizations_url": "https://api.github.com/users/ericsson49/orgs",
    "repos_url": "https://api.github.com/users/ericsson49/repos",
    "events_url": "https://api.github.com/users/ericsson49/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ericsson49/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1244734333,
      "node_id": "MDU6TGFiZWwxMjQ0NzM0MzMz",
      "url": "https://api.github.com/repos/ethereum/consensus-specs/labels/general:presentation",
      "name": "general:presentation",
      "color": "2EA9DF",
      "default": false,
      "description": "Presentation (as opposed to content)"
    },
    {
      "id": 1725628406,
      "node_id": "MDU6TGFiZWwxNzI1NjI4NDA2",
      "url": "https://api.github.com/repos/ethereum/consensus-specs/labels/phase0",
      "name": "phase0",
      "color": "c2e0c6",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/milestones/6",
    "html_url": "https://github.com/ethereum/consensus-specs/milestone/6",
    "labels_url": "https://api.github.com/repos/ethereum/consensus-specs/milestones/6/labels",
    "id": 5797403,
    "node_id": "MDk6TWlsZXN0b25lNTc5NzQwMw==",
    "number": 6,
    "title": "ðŸ”µ v1.0.0 candidates",
    "description": "",
    "creator": {
      "login": "hwwhww",
      "id": 9263930,
      "node_id": "MDQ6VXNlcjkyNjM5MzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9263930?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hwwhww",
      "html_url": "https://github.com/hwwhww",
      "followers_url": "https://api.github.com/users/hwwhww/followers",
      "following_url": "https://api.github.com/users/hwwhww/following{/other_user}",
      "gists_url": "https://api.github.com/users/hwwhww/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hwwhww/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hwwhww/subscriptions",
      "organizations_url": "https://api.github.com/users/hwwhww/orgs",
      "repos_url": "https://api.github.com/users/hwwhww/repos",
      "events_url": "https://api.github.com/users/hwwhww/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hwwhww/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 12,
    "closed_issues": 5,
    "state": "closed",
    "created_at": "2020-08-21T16:23:12Z",
    "updated_at": "2021-06-07T15:09:56Z",
    "due_on": null,
    "closed_at": "2021-05-04T14:59:24Z"
  },
  "comments": 4,
  "created_at": "2019-09-19T12:13:25Z",
  "updated_at": "2021-07-05T15:06:37Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "In the [beacon chain specs](https://github.com/ethereum/eth2.0-specs) state updates are sometimes intertwined with assertions within a function. An executable python spec is also constructed from such code fragments.\r\nThe executability of the specs suggests such functions should not be treated as atomic state updates (assuming python semantics). E.g. if a state is partially updated and later an assertion is failed, the partial state update should be kept.\r\nHowever, such view contradicts the intention expressed in other functions.\r\n\r\nFor example, consider the [fork choice/on_block](https://github.com/ethereum/eth2.0-specs/blob/dev/specs/core/0_fork-choice.md#on_block) function.\r\nA block store is updated with a new block.\r\nSome checks are preformed after (including `state_transition` ones).\r\nAnd then, a block_state store is updated with the corresponding block state.\r\n\r\nIf any of in-between assertions failed, then store.blocks would contain the block, while store.block_states wouldn't.\r\nThat seems to be a problem. For example, if an attestation referencing the block arrives later, the [on_attestation](https://github.com/ethereum/eth2.0-specs/blob/dev/specs/core/0_fork-choice.md#on_attestation) is called. Which first checks if the referenced block is present (which will succeed) and later accesses the block's state, which is absent.\r\nSo, the piece of code implicitly assumes the changes made by `on_block` are atomic, i.e. either both block and it's state are stored or none of them (or maybe some weaker form like, if a block is stored then it's state also should).\r\nWhich seems pretty reasonable, since ensuring consistency of block/state updates with python code would be more verbose and makes the specs more clumsy.\r\n\r\nBesides storage updates, an analogous problem exists with beacon state updates. For example, in [process_attestation](https://github.com/ethereum/eth2.0-specs/blob/dev/specs/core/0_beacon-chain.md#attestations) function, either `state.current_epoch_attestations` or `state.previous_epoch_attestations` is updated, followed by some assertion checks. If any of the assertion failed, the update will be kept.\r\n\r\nWhile it's a minor issue from a human being point of view, it's not so from a machine's perspective. For example, we would like to develop a test suit to test fork choice against the specs. In case of negative tests, it becomes important, so that we can base our tests on a stable ground.\r\n\r\nAnother point is that we'd like eventually to use formal methods like bounded model checking or formal proofs to check/verify properties of the beacon chain specs.\r\n\r\nBased on the above, we propose:\r\n* to add clarification to the beacon chain specs, regarding atomicity semantics of the fork choice functions (on_block, on_attestation). I.e. should multiple store updates be performed in all or none fashion. Or the python execution semantics are assumed.\r\n* Optionally, to clarify beacon state updates atomicity semantics.\r\n* Optionally, to modify the executable python spec to comply the changes.",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1409/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1409/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/536908171",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1409#issuecomment-536908171",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1409",
    "id": 536908171,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzNjkwODE3MQ==",
    "user": {
      "login": "protolambda",
      "id": 19571989,
      "node_id": "MDQ6VXNlcjE5NTcxOTg5",
      "avatar_url": "https://avatars.githubusercontent.com/u/19571989?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/protolambda",
      "html_url": "https://github.com/protolambda",
      "followers_url": "https://api.github.com/users/protolambda/followers",
      "following_url": "https://api.github.com/users/protolambda/following{/other_user}",
      "gists_url": "https://api.github.com/users/protolambda/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/protolambda/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/protolambda/subscriptions",
      "organizations_url": "https://api.github.com/users/protolambda/orgs",
      "repos_url": "https://api.github.com/users/protolambda/repos",
      "events_url": "https://api.github.com/users/protolambda/events{/privacy}",
      "received_events_url": "https://api.github.com/users/protolambda/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-01T07:31:15Z",
    "updated_at": "2019-10-01T07:31:15Z",
    "author_association": "MEMBER",
    "body": "> E.g. if a state is partially updated and later an assertion is failed, the partial state update should be kept.\r\n\r\nThis is wrong. If an assertion (or index error) is raised anywhere in the state transition, the transition is invalid, and the block should not be accepted. This is defined here: https://github.com/ethereum/eth2.0-specs/blob/dev/specs/core/0_beacon-chain.md#beacon-chain-state-transition-function\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/536908171/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/550021099",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1409#issuecomment-550021099",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1409",
    "id": 550021099,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1MDAyMTA5OQ==",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-05T21:09:52Z",
    "updated_at": "2019-11-05T21:09:52Z",
    "author_association": "MEMBER",
    "body": "Agreed that a note could be added to the fork choice to make it clear that an assertion failure in a function should lead to no modifications to the store.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/550021099/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/643911361",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1409#issuecomment-643911361",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1409",
    "id": 643911361,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0MzkxMTM2MQ==",
    "user": {
      "login": "franck44",
      "id": 14901362,
      "node_id": "MDQ6VXNlcjE0OTAxMzYy",
      "avatar_url": "https://avatars.githubusercontent.com/u/14901362?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/franck44",
      "html_url": "https://github.com/franck44",
      "followers_url": "https://api.github.com/users/franck44/followers",
      "following_url": "https://api.github.com/users/franck44/following{/other_user}",
      "gists_url": "https://api.github.com/users/franck44/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/franck44/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/franck44/subscriptions",
      "organizations_url": "https://api.github.com/users/franck44/orgs",
      "repos_url": "https://api.github.com/users/franck44/repos",
      "events_url": "https://api.github.com/users/franck44/events{/privacy}",
      "received_events_url": "https://api.github.com/users/franck44/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-15T05:30:26Z",
    "updated_at": "2020-06-15T05:30:26Z",
    "author_association": "NONE",
    "body": "@ericsson49 @protolambda @djrtwo \r\n\r\nThis issue is related the use of `asserts` to define when a computation (or a block) is valid.\r\nIt is possible to define functionally what a valid block.\r\nWe have done it in our Dafny spec with the [isValid](https://github.com/PegaSysEng/eth2.0-dafny/blob/4aa3af940ad2ab45347a37318262b943cbcf63bd/src/dafny/beacon/StateTransition.dfy#L112) function.\r\n\r\nIt is then easy to use this function as pre-condition to other functions (e.g. state_transition) to ensure they will never fail and no roll back is necessary.\r\nSee the example of state_transition [here](https://github.com/PegaSysEng/eth2.0-dafny/blob/4aa3af940ad2ab45347a37318262b943cbcf63bd/src/dafny/beacon/StateTransition.dfy#L132) and on_block [here](https://github.com/PegaSysEng/eth2.0-dafny/blob/4aa3af940ad2ab45347a37318262b943cbcf63bd/src/dafny/beacon/ForkChoice.dfy#L254).\r\n\r\nUsing functions what the result of an operation is, or what a pre-condtion may improve readability.\r\nOn top of that  it enables to check at the beginning of the execution of a function whether it can go through without violating assert statements (no waste of computation time, no roll back).\r\n\r\nit is also a good way to have a spec that FP folks can use to write their client.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/643911361/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
