{
  "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1396",
  "repository_url": "https://api.github.com/repos/ethereum/consensus-specs",
  "labels_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1396/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1396/comments",
  "events_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1396/events",
  "html_url": "https://github.com/ethereum/consensus-specs/issues/1396",
  "id": 489164379,
  "node_id": "MDU6SXNzdWU0ODkxNjQzNzk=",
  "number": 1396,
  "title": "Introduce a ZeroSig constant for the zero_signature",
  "user": {
    "login": "mratsim",
    "id": 22738317,
    "node_id": "MDQ6VXNlcjIyNzM4MzE3",
    "avatar_url": "https://avatars.githubusercontent.com/u/22738317?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mratsim",
    "html_url": "https://github.com/mratsim",
    "followers_url": "https://api.github.com/users/mratsim/followers",
    "following_url": "https://api.github.com/users/mratsim/following{/other_user}",
    "gists_url": "https://api.github.com/users/mratsim/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mratsim/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mratsim/subscriptions",
    "organizations_url": "https://api.github.com/users/mratsim/orgs",
    "repos_url": "https://api.github.com/users/mratsim/repos",
    "events_url": "https://api.github.com/users/mratsim/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mratsim/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1437528763,
      "node_id": "MDU6TGFiZWwxNDM3NTI4NzYz",
      "url": "https://api.github.com/repos/ethereum/consensus-specs/labels/post-freeze%20(substantive)",
      "name": "post-freeze (substantive)",
      "color": "991a40",
      "default": false,
      "description": "Substantive consensus change non-critical for long-lived cross-client testnets"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 8,
  "created_at": "2019-09-04T13:34:32Z",
  "updated_at": "2019-12-12T15:31:04Z",
  "closed_at": "2019-12-12T15:31:04Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "This is the same suggestion as https://github.com/ethereum/eth2.0-tests/issues/27\r\n\r\nThe serialized BLS signature: `0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000` is not a valid compressed BLS signature on the curve. A valid one instead would be `0xc00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000`\r\n\r\nWhile we all have some machinery to disable valid signature checks during testing, due to that invalid zero signature we also need to add specific test versus zero buffer before serialization/deserialization of every BLS signature instead of just handing it to the BLS library.\r\n\r\nThis is especially important for `process_block_header` which requires a zero-signature\r\nhttps://github.com/ethereum/eth2.0-specs/blob/dev/specs/core/0_beacon-chain.md#block-header",
  "closed_by": {
    "login": "djrtwo",
    "id": 1433595,
    "node_id": "MDQ6VXNlcjE0MzM1OTU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/djrtwo",
    "html_url": "https://github.com/djrtwo",
    "followers_url": "https://api.github.com/users/djrtwo/followers",
    "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
    "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
    "organizations_url": "https://api.github.com/users/djrtwo/orgs",
    "repos_url": "https://api.github.com/users/djrtwo/repos",
    "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
    "received_events_url": "https://api.github.com/users/djrtwo/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1396/reactions",
    "total_count": 3,
    "+1": 3,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1396/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/528437289",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1396#issuecomment-528437289",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1396",
    "id": 528437289,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyODQzNzI4OQ==",
    "user": {
      "login": "JustinDrake",
      "id": 731743,
      "node_id": "MDQ6VXNlcjczMTc0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/731743?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JustinDrake",
      "html_url": "https://github.com/JustinDrake",
      "followers_url": "https://api.github.com/users/JustinDrake/followers",
      "following_url": "https://api.github.com/users/JustinDrake/following{/other_user}",
      "gists_url": "https://api.github.com/users/JustinDrake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JustinDrake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JustinDrake/subscriptions",
      "organizations_url": "https://api.github.com/users/JustinDrake/orgs",
      "repos_url": "https://api.github.com/users/JustinDrake/repos",
      "events_url": "https://api.github.com/users/JustinDrake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JustinDrake/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-09-05T15:57:15Z",
    "updated_at": "2019-09-05T15:57:15Z",
    "author_association": "MEMBER",
    "body": "Would it be fair to say that `process_block_header` only writes `BLSSignature()` to state (specifically, `state.latest_block_header.signature = BLSSignature()`) and that this \"invalid zero signature\" in the state never has to verified, i.e. never has to be fed to `bls_verify`? I don't understand why `BLSSignature()` has to be checked as a valid compressed BLS signature.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/528437289/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/528678270",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1396#issuecomment-528678270",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1396",
    "id": 528678270,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyODY3ODI3MA==",
    "user": {
      "login": "mratsim",
      "id": 22738317,
      "node_id": "MDQ6VXNlcjIyNzM4MzE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/22738317?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mratsim",
      "html_url": "https://github.com/mratsim",
      "followers_url": "https://api.github.com/users/mratsim/followers",
      "following_url": "https://api.github.com/users/mratsim/following{/other_user}",
      "gists_url": "https://api.github.com/users/mratsim/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mratsim/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mratsim/subscriptions",
      "organizations_url": "https://api.github.com/users/mratsim/orgs",
      "repos_url": "https://api.github.com/users/mratsim/repos",
      "events_url": "https://api.github.com/users/mratsim/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mratsim/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-09-06T02:11:17Z",
    "updated_at": "2019-09-06T02:11:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "When serializing/deserializing, BLS Signatures have a specific conversion step that is handled by the BLS library. BLS libraries refuse to de/serialize invalid signatures.\r\n\r\nThis means that before serialization and/or deserialization we need a additional layer that handles this specific zero signature case.\r\n\r\nFurthermore, it impacts the hash_tree_root serialization, meaning I expect all clients to have some kind of Option type to indicate zero-signature or not.\r\n\r\nI feel like it is overhead that we can avoid, and it simplifies the logic by removing the special case of zero signatures, i.e. signatures are then fully handled by hardened BLS libraries from serialization to deserialization.\r\n\r\nWe already have the special case of invalid test signatures (which I hope we can remove at one point) but I hope to not have special cases just for serialization/deserialization of zero signatures in production implementations as well.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/528678270/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/528924651",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1396#issuecomment-528924651",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1396",
    "id": 528924651,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyODkyNDY1MQ==",
    "user": {
      "login": "JustinDrake",
      "id": 731743,
      "node_id": "MDQ6VXNlcjczMTc0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/731743?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JustinDrake",
      "html_url": "https://github.com/JustinDrake",
      "followers_url": "https://api.github.com/users/JustinDrake/followers",
      "following_url": "https://api.github.com/users/JustinDrake/following{/other_user}",
      "gists_url": "https://api.github.com/users/JustinDrake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JustinDrake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JustinDrake/subscriptions",
      "organizations_url": "https://api.github.com/users/JustinDrake/orgs",
      "repos_url": "https://api.github.com/users/JustinDrake/repos",
      "events_url": "https://api.github.com/users/JustinDrake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JustinDrake/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-09-06T16:34:50Z",
    "updated_at": "2019-09-06T16:34:50Z",
    "author_association": "MEMBER",
    "body": "> BLS libraries refuse to de/serialize invalid signatures\r\n\r\nWhy do BLS libraries ever have to de/serialize the \"zero\" `BLSSignature()`? As far as I can tell `state.latest_block_header.signature` never has to be serialized or deserialised as a BLS signature (of course, it needs to be serialised into bytes in the context of SSZ but I don't think that's what you mean).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/528924651/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/529098874",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1396#issuecomment-529098874",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1396",
    "id": 529098874,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyOTA5ODg3NA==",
    "user": {
      "login": "arnetheduck",
      "id": 1382986,
      "node_id": "MDQ6VXNlcjEzODI5ODY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1382986?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/arnetheduck",
      "html_url": "https://github.com/arnetheduck",
      "followers_url": "https://api.github.com/users/arnetheduck/followers",
      "following_url": "https://api.github.com/users/arnetheduck/following{/other_user}",
      "gists_url": "https://api.github.com/users/arnetheduck/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/arnetheduck/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/arnetheduck/subscriptions",
      "organizations_url": "https://api.github.com/users/arnetheduck/orgs",
      "repos_url": "https://api.github.com/users/arnetheduck/repos",
      "events_url": "https://api.github.com/users/arnetheduck/events{/privacy}",
      "received_events_url": "https://api.github.com/users/arnetheduck/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-09-07T11:17:00Z",
    "updated_at": "2019-09-07T11:17:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "I'd favour a solution which removes `signature` from `BeaconState.latest_block_header` completely. It will never contain a valid signature causing confusion and requires a workaround / kludge to serialize / deserialize. \r\n\r\nWe can achieve this in a very simple way: use a different type in `latest_block_headers`. It is a trivial change which arguably improves ease of understanding of the `BeaconState` data since there's no confusing and unused signature in there - it would help build intuition for the otherwise circular relationship between state and block processing.\r\n\r\nFrom an implementation point of view, we deserialize BLS into its point representation before doing processing, along with other kinds of trivial validations on the data (like length checks, buffer overflow protection etc - basic data vailidity checks). Similarly, when calculating the tree hash, we serialize a an abstract point representation into its octet representation before passing it to the hash function (for reasons of efficiency, so that we only have to store the point version which more readily is useful)\r\n\r\nIn the [draft BLS spec](https://github.com/cfrg/draft-irtf-cfrg-bls-signature/blob/master/draft-irtf-cfrg-bls-signature.md#terminology-and-definitions-definitions), one can see that there's a method called `octets_to_point` which returns `INVALID` if it is unable to deserialize the point - crucially though, it returns that value for any `INVALID` octet stream, not just the `BLSSignature()` that casually assumes an all-zeroes serialization. It means that we need to differentiate between `all_zeroes`, `invalid` and `valid` signatures, for no good reason really, except making it more difficult to write a conforming implementation.\r\n\r\n> it needs to be serialised into bytes in the context of SSZ but I don't think that's what you mean\r\n\r\nthis is exactly what we mean - the same SSZ bytes are also used on the wire on incoming blocks etc..",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/529098874/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/529123050",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1396#issuecomment-529123050",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1396",
    "id": 529123050,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyOTEyMzA1MA==",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-09-07T16:24:00Z",
    "updated_at": "2019-09-07T16:24:00Z",
    "author_association": "MEMBER",
    "body": "> Why do BLS libraries ever have to de/serialize the \"zero\" BLSSignature()\r\n\r\nThis would happen in the context of serializing or deserializing a beacon state that has this signature. And I expect this is particularly an issue in a strongly typed language that is putting tight constraints on the incoming and outgoing data.\r\n\r\n> I'd favour a solution which removes signature from BeaconState.latest_block_header completely. It will never contain a valid signature causing confusion and requires a workaround / kludge to serialize / deserialize.\r\n\r\nYou certainly _can_ make a different ssz type that doesn't have the signature but then you have `hash_tree_root(latest_block_header) == signing_root(block)` rather than `signing_root(latest_block_header) == signing_root(block)` which obfuscates the connection between these two structures and might be a source of bugs down the line, imo.\r\n\r\nI'm not terribly opposed to `ZeroSig` but want to hear input from more teams.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/529123050/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/529146834",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1396#issuecomment-529146834",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1396",
    "id": 529146834,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyOTE0NjgzNA==",
    "user": {
      "login": "arnetheduck",
      "id": 1382986,
      "node_id": "MDQ6VXNlcjEzODI5ODY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1382986?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/arnetheduck",
      "html_url": "https://github.com/arnetheduck",
      "followers_url": "https://api.github.com/users/arnetheduck/followers",
      "following_url": "https://api.github.com/users/arnetheduck/following{/other_user}",
      "gists_url": "https://api.github.com/users/arnetheduck/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/arnetheduck/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/arnetheduck/subscriptions",
      "organizations_url": "https://api.github.com/users/arnetheduck/orgs",
      "repos_url": "https://api.github.com/users/arnetheduck/repos",
      "events_url": "https://api.github.com/users/arnetheduck/events{/privacy}",
      "received_events_url": "https://api.github.com/users/arnetheduck/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-09-07T21:05:18Z",
    "updated_at": "2019-09-07T21:05:18Z",
    "author_association": "CONTRIBUTOR",
    "body": "> You certainly can make a different ssz type that doesn't have the signature but then you have \r\n\r\nthe idea is that you keep the relevant fields in `BeaconState` (perhaps in a separate type, or directly), explicitly construct a `BeaconBlock` from those fields then sign it as usual, instead of reusing the current type. You never call `signing_root(latest_block_header)`.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/529146834/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/557618859",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1396#issuecomment-557618859",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1396",
    "id": 557618859,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NzYxODg1OQ==",
    "user": {
      "login": "mratsim",
      "id": 22738317,
      "node_id": "MDQ6VXNlcjIyNzM4MzE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/22738317?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mratsim",
      "html_url": "https://github.com/mratsim",
      "followers_url": "https://api.github.com/users/mratsim/followers",
      "following_url": "https://api.github.com/users/mratsim/following{/other_user}",
      "gists_url": "https://api.github.com/users/mratsim/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mratsim/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mratsim/subscriptions",
      "organizations_url": "https://api.github.com/users/mratsim/orgs",
      "repos_url": "https://api.github.com/users/mratsim/repos",
      "events_url": "https://api.github.com/users/mratsim/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mratsim/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-22T17:21:46Z",
    "updated_at": "2019-11-22T17:21:46Z",
    "author_association": "CONTRIBUTOR",
    "body": "Related: #1487 and #1491 ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/557618859/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/565055984",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1396#issuecomment-565055984",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1396",
    "id": 565055984,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2NTA1NTk4NA==",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-12-12T15:31:04Z",
    "updated_at": "2019-12-12T15:31:04Z",
    "author_association": "MEMBER",
    "body": "Closed via #1491. The removal of `signing_root` and the addition of explicit containers for signed objects prevents the need for ZERO SIGS in the consensus",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/565055984/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
