{
  "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2547",
  "repository_url": "https://api.github.com/repos/ethereum/consensus-specs",
  "labels_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2547/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2547/comments",
  "events_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2547/events",
  "html_url": "https://github.com/ethereum/consensus-specs/issues/2547",
  "id": 967361979,
  "node_id": "MDU6SXNzdWU5NjczNjE5Nzk=",
  "number": 2547,
  "title": "client setting for overriding `TOTAL_TRANSITION_DIFFICULTY`",
  "user": {
    "login": "lsankar4033",
    "id": 451947,
    "node_id": "MDQ6VXNlcjQ1MTk0Nw==",
    "avatar_url": "https://avatars.githubusercontent.com/u/451947?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/lsankar4033",
    "html_url": "https://github.com/lsankar4033",
    "followers_url": "https://api.github.com/users/lsankar4033/followers",
    "following_url": "https://api.github.com/users/lsankar4033/following{/other_user}",
    "gists_url": "https://api.github.com/users/lsankar4033/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/lsankar4033/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/lsankar4033/subscriptions",
    "organizations_url": "https://api.github.com/users/lsankar4033/orgs",
    "repos_url": "https://api.github.com/users/lsankar4033/repos",
    "events_url": "https://api.github.com/users/lsankar4033/events{/privacy}",
    "received_events_url": "https://api.github.com/users/lsankar4033/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 2812431987,
      "node_id": "MDU6TGFiZWwyODEyNDMxOTg3",
      "url": "https://api.github.com/repos/ethereum/consensus-specs/labels/Bellatrix",
      "name": "Bellatrix",
      "color": "1D36aa",
      "default": false,
      "description": "CL+EL Merge"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 6,
  "created_at": "2021-08-11T19:58:49Z",
  "updated_at": "2021-09-23T13:20:25Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "The current mechanism for the [merge fork](https://github.com/ethereum/eth2.0-specs/blob/dev/specs/merge/fork.md) involves setting an epoch (`MERGE_FORK_EPOCH`) from which nodes expect to wait 1 week before the terminal total difficulty is hit (via `TARGET_SECONDS_TO_MERGE`/`SECONDS_PER_ETH1_BLOCK`).\r\n\r\n`SECONDS_PER_ETH1_BLOCK` is controllable by miners and the possibility exists that in a fit of griefing, they cartelize to slow down the subsequent merge process by a factor. While it's effectively impossible for the PoW chain to halt, such a slowdown could cause coordination headaches for a few days to weeks around merge time. Much of the ensuing uncertainty may also trickle down to entities that rely on sending Eth1x transactions for business/livelihood.\r\n\r\nNot to mention that there may be some unknown unknowns about attacks/issues here.\r\n\r\nI propose adding a `TOTAL_TRANSITION_DIFFICULTY_OVERRIDE` parameter that serves as an override of the merge point to ease coordination during this period. This parameter would be accessible via a beacon node client setting (`--total-transition-difficulty-override`) that's unused by default. Setting this would trigger an alternate code path during [TransitionStore initialization](https://github.com/ethereum/eth2.0-specs/blob/dev/specs/merge/fork.md#initializing-transition-store) that just uses this value for the transition difficulty.\r\n\r\nIf we detect PoW block times slowing after setting `TARGET_SECONDS_TO_MERGE`, we have a lever we can use to change the point of transition. Furthermore, the mere existence of this option may be enough to dissuade miners from any griefing attack in the first place.\r\n\r\nCurious of others' thoughts here.\r\n\r\n(related: https://github.com/ethereum/EIPs/pull/3698)",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2547/reactions",
    "total_count": 1,
    "+1": 1,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2547/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/897120430",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2547#issuecomment-897120430",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2547",
    "id": 897120430,
    "node_id": "IC_kwDOCOoGbc41ePiu",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-11T20:13:42Z",
    "updated_at": "2021-08-11T20:15:11Z",
    "author_association": "MEMBER",
    "body": "I agree that a manual override is valuable in event of unexpected events near the merge. Other than a slow down, you could also see a repeated 51% attack/reorg that never get us to terminal total difficultly (TTD).\r\n\r\nBeing able to set TTD manually and coordinate out of band seems very reasonable, especially for the mining slow-down case. I would also consider an override that just sets the terminal PoW blockhash which would be much safer than setting TTD in the event of an ongoing 51% attack. Setting terminal blockhash would likely result in a downtime but is a good absolute emergency backup.\r\n\r\nSetting blockhash is probably a more complicated control path than just a TTD override so we should consider it before adding it here and a related event on execution-layer (eip) side.\r\n\r\nI *do agree* that specifying some security focused \"client settings\" or common cli args to be able to utilize in event of attack is worthwhile. Maybe a `merge/client-settings.md` file. We specified such params a while back in [EIP 1011](https://eips.ethereum.org/EIPS/eip-1011) so at least some precedent to go off of.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/897120430/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/897612433",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2547#issuecomment-897612433",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2547",
    "id": 897612433,
    "node_id": "IC_kwDOCOoGbc41gHqR",
    "user": {
      "login": "mkalinin",
      "id": 1892772,
      "node_id": "MDQ6VXNlcjE4OTI3NzI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1892772?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mkalinin",
      "html_url": "https://github.com/mkalinin",
      "followers_url": "https://api.github.com/users/mkalinin/followers",
      "following_url": "https://api.github.com/users/mkalinin/following{/other_user}",
      "gists_url": "https://api.github.com/users/mkalinin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mkalinin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mkalinin/subscriptions",
      "organizations_url": "https://api.github.com/users/mkalinin/orgs",
      "repos_url": "https://api.github.com/users/mkalinin/repos",
      "events_url": "https://api.github.com/users/mkalinin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mkalinin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-12T12:50:29Z",
    "updated_at": "2021-08-12T14:42:39Z",
    "author_association": "MEMBER",
    "body": "I am in support of manual override of the terminal difficulty. Along with the corresponding API that returns terminal difficulty that has been computed by the beacon node this CLI parameter should also aid recovery from imperfect computation when the locally computed value doesn't correspond to the one that has been found by the majority of network participants.\r\n\r\nI do also see a lot of value in enforcing the transition process by specifying the hash of a terminal PoW block in the case of 51% attack where overridden terminal total difficulty might not result in the desired effect.\r\n\r\nSo, I see two similar options for beacon chain clients:\r\n- `--terminal-total-difficulty-override=TD`\r\n- `--terminal-pow-block-hash-override=Hash`\r\n\r\nBoth options should come with the corresponding `POS_` event in EIP-3675 that introduces these overrides to the spec and will be reflected in the Consensus API.\r\n\r\n**UPD**\r\nAs noted by @djrtwo, `--terminal-pow-block-hash-override` should come with the corresponding epoch number from which this override takes and effect to allow for coordination. It would also require a corresponding fix to the beacon chain fork choice.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/897612433/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/897858382",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2547#issuecomment-897858382",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2547",
    "id": 897858382,
    "node_id": "IC_kwDOCOoGbc41hDtO",
    "user": {
      "login": "lsankar4033",
      "id": 451947,
      "node_id": "MDQ6VXNlcjQ1MTk0Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/451947?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lsankar4033",
      "html_url": "https://github.com/lsankar4033",
      "followers_url": "https://api.github.com/users/lsankar4033/followers",
      "following_url": "https://api.github.com/users/lsankar4033/following{/other_user}",
      "gists_url": "https://api.github.com/users/lsankar4033/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lsankar4033/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lsankar4033/subscriptions",
      "organizations_url": "https://api.github.com/users/lsankar4033/orgs",
      "repos_url": "https://api.github.com/users/lsankar4033/repos",
      "events_url": "https://api.github.com/users/lsankar4033/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lsankar4033/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-12T18:07:46Z",
    "updated_at": "2021-08-12T21:38:55Z",
    "author_association": "CONTRIBUTOR",
    "body": "Didn't seem to be any major dissent on the eth2.0 call so can draft a PR for the ttd override. \r\n\r\nPersonally agreed also on the point that being able to specify a block hash is necessary for clear coordination on past history. That being said, this seems like much more work to implement, so let's wait a few days to see if there are any other opinions there.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/897858382/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/900203431",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2547#issuecomment-900203431",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2547",
    "id": 900203431,
    "node_id": "IC_kwDOCOoGbc41qAOn",
    "user": {
      "login": "zilm13",
      "id": 6196452,
      "node_id": "MDQ6VXNlcjYxOTY0NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6196452?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zilm13",
      "html_url": "https://github.com/zilm13",
      "followers_url": "https://api.github.com/users/zilm13/followers",
      "following_url": "https://api.github.com/users/zilm13/following{/other_user}",
      "gists_url": "https://api.github.com/users/zilm13/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zilm13/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zilm13/subscriptions",
      "organizations_url": "https://api.github.com/users/zilm13/orgs",
      "repos_url": "https://api.github.com/users/zilm13/repos",
      "events_url": "https://api.github.com/users/zilm13/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zilm13/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-17T11:08:33Z",
    "updated_at": "2021-08-17T11:11:49Z",
    "author_association": "CONTRIBUTOR",
    "body": "I don't see any reason for some majority to fork several chains as any difficulty increase in any fork will get the chain closer to transition total difficulty. Also it will weaken future NotSoClassic Ethereum PoW coin, the thing any miner should avoid. The best thing they could do, to step off after anchor difficulty is used in calculation. This way they could slow down transition in proportion of the missed mining power share: 50% - 2 times, 66% - 3 times etc. Though I doubt such a kind of collusion could ever exist.\r\nBtw, we have finished and posted our analysis on this topic: https://ethresear.ch/t/using-total-difficulty-threshold-for-hardfork-anchor-what-could-go-wrong/10357\r\nBut it doesn't contain such kind of simulation, I guess we could do it next.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/900203431/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/900732167",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2547#issuecomment-900732167",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2547",
    "id": 900732167,
    "node_id": "IC_kwDOCOoGbc41sBUH",
    "user": {
      "login": "lsankar4033",
      "id": 451947,
      "node_id": "MDQ6VXNlcjQ1MTk0Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/451947?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lsankar4033",
      "html_url": "https://github.com/lsankar4033",
      "followers_url": "https://api.github.com/users/lsankar4033/followers",
      "following_url": "https://api.github.com/users/lsankar4033/following{/other_user}",
      "gists_url": "https://api.github.com/users/lsankar4033/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lsankar4033/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lsankar4033/subscriptions",
      "organizations_url": "https://api.github.com/users/lsankar4033/orgs",
      "repos_url": "https://api.github.com/users/lsankar4033/repos",
      "events_url": "https://api.github.com/users/lsankar4033/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lsankar4033/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-18T00:54:44Z",
    "updated_at": "2021-08-18T00:54:44Z",
    "author_association": "CONTRIBUTOR",
    "body": "> I don't see any reason for some majority to fork several chains as any difficulty increase in any fork will get the chain closer to transition total difficulty. Also it will weaken future NotSoClassic Ethereum PoW coin, the thing any miner should avoid. The best thing they could do, to step off after anchor difficulty is used in calculation. This way they could slow down transition in proportion of the missed mining power share: 50% - 2 times, 66% - 3 times etc. Though I doubt such a kind of collusion could ever exist.\r\n\r\nThere are two reasons miners may do something that I think are worth considering:\r\n1. use an attack and the ensuing chaos to 'demonstrate' that PoS ethereum is 'not a sure thing'. obviously not true, but they may be able to win some PR battles here in the short-term\r\n2. just a plain old griefing attack. there may still be feelings of disenfranchisement\r\n\r\nWhatever the case, having a public mechanism for coming to consensus on a new fork may in itself dissuade miners from doing anything.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/900732167/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/925810610",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2547#issuecomment-925810610",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2547",
    "id": 925810610,
    "node_id": "IC_kwDOCOoGbc43Lr-y",
    "user": {
      "login": "mkalinin",
      "id": 1892772,
      "node_id": "MDQ6VXNlcjE4OTI3NzI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1892772?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mkalinin",
      "html_url": "https://github.com/mkalinin",
      "followers_url": "https://api.github.com/users/mkalinin/followers",
      "following_url": "https://api.github.com/users/mkalinin/following{/other_user}",
      "gists_url": "https://api.github.com/users/mkalinin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mkalinin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mkalinin/subscriptions",
      "organizations_url": "https://api.github.com/users/mkalinin/orgs",
      "repos_url": "https://api.github.com/users/mkalinin/repos",
      "events_url": "https://api.github.com/users/mkalinin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mkalinin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-23T13:20:25Z",
    "updated_at": "2021-09-23T13:20:25Z",
    "author_association": "MEMBER",
    "body": "A couple of things to consider if we end up with `TERMINAL_TOTAL_DIFFICULTY` as a hardcoded value in both clients:\r\n- If one of this override settings introduces the transition at the total difficulty that is lower than hardcoded TTD then there is a risk for a node to follow the wrong chain due to misconfiguration, e.g. not restarting a node with communicated value for one of the override settings.\r\n- Overriding the transition flow with one of these settings would require subsequent releases of consensus and execution client software with the corresponding changes. Otherwise, users will have to pass the corresponding setting to the CLI string of a fresh node even though the Merge has already happened.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/925810610/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
