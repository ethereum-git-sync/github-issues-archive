{
  "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1592",
  "repository_url": "https://api.github.com/repos/ethereum/consensus-specs",
  "labels_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1592/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1592/comments",
  "events_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1592/events",
  "html_url": "https://github.com/ethereum/consensus-specs/issues/1592",
  "id": 554448441,
  "node_id": "MDU6SXNzdWU1NTQ0NDg0NDE=",
  "number": 1592,
  "title": "Sybil-like NTP-level attack",
  "user": {
    "login": "ericsson49",
    "id": 10426192,
    "node_id": "MDQ6VXNlcjEwNDI2MTky",
    "avatar_url": "https://avatars.githubusercontent.com/u/10426192?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ericsson49",
    "html_url": "https://github.com/ericsson49",
    "followers_url": "https://api.github.com/users/ericsson49/followers",
    "following_url": "https://api.github.com/users/ericsson49/following{/other_user}",
    "gists_url": "https://api.github.com/users/ericsson49/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ericsson49/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ericsson49/subscriptions",
    "organizations_url": "https://api.github.com/users/ericsson49/orgs",
    "repos_url": "https://api.github.com/users/ericsson49/repos",
    "events_url": "https://api.github.com/users/ericsson49/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ericsson49/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1295438707,
      "node_id": "MDU6TGFiZWwxMjk1NDM4NzA3",
      "url": "https://api.github.com/repos/ethereum/consensus-specs/labels/scope:networking",
      "name": "scope:networking",
      "color": "F596AA",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/milestones/6",
    "html_url": "https://github.com/ethereum/consensus-specs/milestone/6",
    "labels_url": "https://api.github.com/repos/ethereum/consensus-specs/milestones/6/labels",
    "id": 5797403,
    "node_id": "MDk6TWlsZXN0b25lNTc5NzQwMw==",
    "number": 6,
    "title": "ðŸ”µ v1.0.0 candidates",
    "description": "",
    "creator": {
      "login": "hwwhww",
      "id": 9263930,
      "node_id": "MDQ6VXNlcjkyNjM5MzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9263930?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hwwhww",
      "html_url": "https://github.com/hwwhww",
      "followers_url": "https://api.github.com/users/hwwhww/followers",
      "following_url": "https://api.github.com/users/hwwhww/following{/other_user}",
      "gists_url": "https://api.github.com/users/hwwhww/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hwwhww/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hwwhww/subscriptions",
      "organizations_url": "https://api.github.com/users/hwwhww/orgs",
      "repos_url": "https://api.github.com/users/hwwhww/repos",
      "events_url": "https://api.github.com/users/hwwhww/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hwwhww/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 12,
    "closed_issues": 5,
    "state": "closed",
    "created_at": "2020-08-21T16:23:12Z",
    "updated_at": "2021-06-07T15:09:56Z",
    "due_on": null,
    "closed_at": "2021-05-04T14:59:24Z"
  },
  "comments": 4,
  "created_at": "2020-01-23T22:39:15Z",
  "updated_at": "2020-08-21T16:32:47Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "Beacon chain protocol assumes validator clocks are roughly synchronized, e.g. [fork choice specs](https://github.com/ethereum/eth2.0-specs/blob/dev/specs/phase0/fork-choice.md#fork-choice) states:\r\n> **Honest clocks**: Honest nodes are assumed to have clocks synchronized within SECONDS_PER_SLOT seconds of each other.\r\n\r\nNo mechanism to assure the assumption is specified, however. Thus, it's a validator responsibility. It's highly probable that many validators will use [NTP](https://en.wikipedia.org/wiki/Network_Time_Protocol) to synchonize their clocks to the world standard (i.e. UTC), since it's an easy to set up and alternatives can be expensive.\r\n\r\nThen, it's also highly probable that such NTP setups will be using [NTP pool](https://www.pool.ntp.org/en/). An excerpt from the [NTP pool page](https://www.pool.ntp.org/en/):\r\n> The pool is being used by hundreds of millions of systems around the world. It's the default \"time server\" for most of the major Linux distributions and many networked appliances \r\n\r\nOr they can users servers from other public NTP server lists, e.g. http://support.ntp.org/bin/view/Servers/WebHome.\r\n\r\nThe NTP pool is free to enter (an excerpt from the the NTP pool page):\r\n> Because of the large number of users we are in need of more servers. If you have a server with a static IP address always available on the internet, please consider adding it to the system. \r\n\r\nTHis can result in an implicit dependency of the beacon chain on the NTP pool (and/or other public NTP lists), if validator are not carefull enough in configuring their NTP servers.\r\n\r\nSuch situation creates an opportunity for a [Sybil attack](https://en.wikipedia.org/wiki/Sybil_attack) on the beacon chain protocol, under certain conditions. I.e. an adversary can populate the NTP pool (or any public NTP server list) with lots of Byzantine-faulty NTP servers, which will report wrong time to validator nodes.\r\n\r\nNTP protocol can tolerate certain errors, e.g. detect \"falsetickers\", by comparing results form several NTP servers. However, in case there are many faulty NTP servers in the pool, there is a high probability that a correct server will look as a \"falseticker\".\r\n\r\nNTP pool servers are also monitored by the pool software. However, if the adversary knows IP addresses of beacon chain protocol participants, its faulty NTP servers can report wrong time results only to clients which IP addresses in the list. This is why the NTP servers controlled by the adversary are considered as Byzantine-faulty (two-faced clocks).\r\n\r\nIf few validators' clocks are distorted by such an attack then beacon chain protocol can tolerate it. However, the key problem with the scenario is that many validators can be vulnerable to the attack, if they are not careful enough when setting NTP up. So, multiple correlated faults can be induced alone or together with other means to attack the beacon chain protocol.\r\nE.g. p2p-inteface spec prescribes to [delay early messages](https://github.com/ethereum/eth2.0-specs/blob/dev/specs/phase0/p2p-interface.md#global-topics), then such an attack can be used to delay or break message flow in the beacon chain p2p graph.\r\nNote, that as non-validator nodes can participate in the p2p graph, then they can be used to attack the beacon chain protocol too.\r\n\r\nThe attack is described in more details in a separate [document](https://hackmd.io/X-uvqwe8TkmR-CJqMdfn6Q#NTP-level-attacks).\r\n\r\nIt's relatively easy to withstand the attack, e.g. beacon chain participants should be careful when configuring NTP. However, if it's risky to use NTP servers from public NTP server lists, where should they obtain NTP servers?\r\n\r\nUsing NTP servers controlled by big corporations, non-profit or government agencies can be a possibility, however, it can lead to a similar correlated implicit dependency and lack of decentralization. Which maybe not desirable for various reasons.\r\n\r\nWealthy validators can set up their own time servers, however it increases significantly an entry barrier to run a validator node.\r\n\r\nWe will elaborate in more details on possible ways of reliable clock synchronization in another document, including BFT clock syncronization solutions and/or anonymous access to public time services (e.g. GNSS, Radio clocks, public NTP servers, etc).\r\n\r\nThe main goal of the issues is to warn Ethereum 2.0 implementers and researchers that it can be dangerous to rely on the default NTP setup and public NTP server pools and lists.\r\nIt's also dangerous to assume most validators can set up NTP/time service in a secure manner.\r\nThus, it's a risk to the overall beacon chain protocol.\r\n\r\nAs very minimal counter-measures, we propose:\r\n- add a warning somewhere in the beacon chain specs, clarifying that using a misconfigured NTP can implicitly introduce centralization and this can be dangerous to the beacon chain protocol security.\r\n- the details of the warning are too be defined, but they shpuld include typical problematic cases:\r\n    - using NTP pool can be dangerous\r\n    - using servers from public NTP lists can be dangerous\r\n    - possibly, certain public NTP servers (e.g. operated by big organizatons) can be used, if they are accessed anonymously, in the sense that validator should use some different IP address to synchronize time, so that NTP server cannot detect that it's a validator\r\n- establish guidelines on NTP setup\r\n\r\nThese minimal counter-measures are hardly enough, so the best solution would be to design BFT clock synchronization protocol, so that validator and non-validator node adminstrators are relieved from the secure Time Service setup burden.\r\nHowever, such BFT protocol can be prohibitively expensive given expected beacon chain protocol scale (thousands of nodes), so a cheaper solutions are to be investigated too.\r\n\r\nWe stress out that beacon chain protocol can tolerate limited number of validators with vulnerable NTP setups, so probably a separate BFT clock synchronization protocol can be excessive, if there exists a way to prevent correlated NTP-level failures.",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1592/reactions",
    "total_count": 2,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 2
  },
  "timeline_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1592/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/577936790",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1592#issuecomment-577936790",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1592",
    "id": 577936790,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3NzkzNjc5MA==",
    "user": {
      "login": "dankrad",
      "id": 6130607,
      "node_id": "MDQ6VXNlcjYxMzA2MDc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6130607?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dankrad",
      "html_url": "https://github.com/dankrad",
      "followers_url": "https://api.github.com/users/dankrad/followers",
      "following_url": "https://api.github.com/users/dankrad/following{/other_user}",
      "gists_url": "https://api.github.com/users/dankrad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dankrad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dankrad/subscriptions",
      "organizations_url": "https://api.github.com/users/dankrad/orgs",
      "repos_url": "https://api.github.com/users/dankrad/repos",
      "events_url": "https://api.github.com/users/dankrad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dankrad/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-24T00:09:06Z",
    "updated_at": "2020-01-24T00:09:06Z",
    "author_association": "MEMBER",
    "body": "Has someone detailed what the actual attacks are that you can do if you control the time of any arbitrary number of nodes? Presumably they would concern liveness but not safety?\r\n\r\nOne of the possible mitigations is to not accept any dates/times that are outside of a given range of the current system time (which should be stable enough to be trusted not to deviate more than a few seconds per day). This is actually implemented in the standard ntpd as the \"panic\" flag and set to 1000s by default -- by advising validators to set it to a much smaller value, could we mitigate this attack or at least force the attacker to introduce their skew \"slowly\" which would make it potentially detectable long before the attack can be executed?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/577936790/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/577953992",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1592#issuecomment-577953992",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1592",
    "id": 577953992,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3Nzk1Mzk5Mg==",
    "user": {
      "login": "ericsson49",
      "id": 10426192,
      "node_id": "MDQ6VXNlcjEwNDI2MTky",
      "avatar_url": "https://avatars.githubusercontent.com/u/10426192?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ericsson49",
      "html_url": "https://github.com/ericsson49",
      "followers_url": "https://api.github.com/users/ericsson49/followers",
      "following_url": "https://api.github.com/users/ericsson49/following{/other_user}",
      "gists_url": "https://api.github.com/users/ericsson49/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ericsson49/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ericsson49/subscriptions",
      "organizations_url": "https://api.github.com/users/ericsson49/orgs",
      "repos_url": "https://api.github.com/users/ericsson49/repos",
      "events_url": "https://api.github.com/users/ericsson49/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ericsson49/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-24T01:25:37Z",
    "updated_at": "2020-01-24T01:28:09Z",
    "author_association": "CONTRIBUTOR",
    "body": "Severe clock disparity - around epoch duration (384 sec) can lead to liveness violation, i.e. blocks cannot be justified/finalized.\r\nSafety in theory can be compromised too, due to 'inactivity leak', i.e. if validators forced to be inactive, they will be loosing their balances.\r\nI analyzed it in more details in the [document](https://hackmd.io/X-uvqwe8TkmR-CJqMdfn6Q#Disparity-level).\r\nVitalik Buterin also discussed it earlier in his [post](https://ethresear.ch/t/network-adjusted-timestamps/4187).\r\n\r\nActually, as p2p-interface requires to block/delay early messages, then any clock disparity > 500ms can impede message flow. If it's not severe, e.g. around slot duration or so, beacon chain should be able to tolerate, however, it can be used to facilitate other attacks. Robustness, e.g. performance under attack will definitely be affected (like validators getting lesser or no rewards).\r\n\r\nSo, even low disparities looks like a problem and low 'panic' threshold value won't help to prevent all attacks. However, lowering 'panic' flag to fraction of an epoch probably makes sense - to filter out most severe consequences, which prevent inclusion of attestations in blocks.\r\nAs far as I understand, the ntpd 'panic' of 1000s is needed for initial clock synchronization. After clock is synchronized, one can lower it, because clock drift of more than several seconds a day is indeed unlikely. We've also considered robust clock calibration approach: one can filter out big jumps in time, treating them as outliers, and calibrate clocks afterwards. NTP standard contains an optional algo to do that, as far as I understood.\r\nSo, a custom solution should be able to limit the  ability of attacker to introduce skew to very low level, like a minute a day, maybe even less, since calibrated clocks should be much more predictable.\r\n\r\nIn general, I think that relying on administrative mitigations is not enough. Some mechanism to detect such problems should be introduced. And if there is a detector then it's a half of a clock synchronization :).\r\nBF tolerant clock synchronization protocols exist, the most my concern is they can be expensive and of limited accuracy (given message delays in a p2p-graph). However, one can combine it with robust clock calibration and techniques to estimate network delays more accurately (e.g. filtering out network delay measurements which are outliers, i.e. too big).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/577953992/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/578110329",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1592#issuecomment-578110329",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1592",
    "id": 578110329,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3ODExMDMyOQ==",
    "user": {
      "login": "ericsson49",
      "id": 10426192,
      "node_id": "MDQ6VXNlcjEwNDI2MTky",
      "avatar_url": "https://avatars.githubusercontent.com/u/10426192?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ericsson49",
      "html_url": "https://github.com/ericsson49",
      "followers_url": "https://api.github.com/users/ericsson49/followers",
      "following_url": "https://api.github.com/users/ericsson49/following{/other_user}",
      "gists_url": "https://api.github.com/users/ericsson49/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ericsson49/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ericsson49/subscriptions",
      "organizations_url": "https://api.github.com/users/ericsson49/orgs",
      "repos_url": "https://api.github.com/users/ericsson49/repos",
      "events_url": "https://api.github.com/users/ericsson49/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ericsson49/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-24T12:24:44Z",
    "updated_at": "2020-01-24T12:24:44Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Presumably they would concern liveness but not safety?\r\n\r\nIt's an interesting theoretical question whether safety can be compromised.\r\nAccountable safety as stated by Casper FFG paper cannot, as if validators forced to be inactive, it's still validator fault formally.\r\n\r\nBut beacon chain protocol contain other sub-protocols, so practical safety can be violated, i.e. otherwise honest validators may be forced to be inactive by a time level attack and after their balances fall down due to 'inactivity leak', an adversary which also has enough own validators can reign.\r\n\r\nSo, a pure time attack should not cause safety violations, but if safety property is adjusted to account for the above, then, in theory, a combined time + malicious validator attack is possible to break the adjusted safety property.\r\n\r\nNot sure, I will have time to properly formalize the above, as I think it will be extremely difficult to do in reality, as validators will definitely respond with counter-measures, when their balances start falling. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/578110329/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/579524462",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1592#issuecomment-579524462",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1592",
    "id": 579524462,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3OTUyNDQ2Mg==",
    "user": {
      "login": "ericsson49",
      "id": 10426192,
      "node_id": "MDQ6VXNlcjEwNDI2MTky",
      "avatar_url": "https://avatars.githubusercontent.com/u/10426192?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ericsson49",
      "html_url": "https://github.com/ericsson49",
      "followers_url": "https://api.github.com/users/ericsson49/followers",
      "following_url": "https://api.github.com/users/ericsson49/following{/other_user}",
      "gists_url": "https://api.github.com/users/ericsson49/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ericsson49/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ericsson49/subscriptions",
      "organizations_url": "https://api.github.com/users/ericsson49/orgs",
      "repos_url": "https://api.github.com/users/ericsson49/repos",
      "events_url": "https://api.github.com/users/ericsson49/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ericsson49/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-28T23:35:52Z",
    "updated_at": "2020-01-28T23:35:52Z",
    "author_association": "CONTRIBUTOR",
    "body": "I've written a draft proposal about how the problem can be solved https://hackmd.io/GnJ_Cf4FSZW-BZImH8KF1w\r\nStill need to work more on BFT Clock Sync protocols (will be a separate document) and analyze the proposed solution more rigorously.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/579524462/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
