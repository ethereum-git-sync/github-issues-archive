{
  "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1596",
  "repository_url": "https://api.github.com/repos/ethereum/consensus-specs",
  "labels_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1596/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1596/comments",
  "events_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1596/events",
  "html_url": "https://github.com/ethereum/consensus-specs/issues/1596",
  "id": 555016674,
  "node_id": "MDU6SXNzdWU1NTUwMTY2NzQ=",
  "number": 1596,
  "title": "Version information unavailable for pyspec package at runtime and in package metadata.",
  "user": {
    "login": "gnattishness",
    "id": 1620192,
    "node_id": "MDQ6VXNlcjE2MjAxOTI=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1620192?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/gnattishness",
    "html_url": "https://github.com/gnattishness",
    "followers_url": "https://api.github.com/users/gnattishness/followers",
    "following_url": "https://api.github.com/users/gnattishness/following{/other_user}",
    "gists_url": "https://api.github.com/users/gnattishness/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/gnattishness/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gnattishness/subscriptions",
    "organizations_url": "https://api.github.com/users/gnattishness/orgs",
    "repos_url": "https://api.github.com/users/gnattishness/repos",
    "events_url": "https://api.github.com/users/gnattishness/events{/privacy}",
    "received_events_url": "https://api.github.com/users/gnattishness/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 6,
  "created_at": "2020-01-25T00:38:58Z",
  "updated_at": "2020-03-20T15:30:35Z",
  "closed_at": "2020-03-20T15:30:34Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "Although git tags are used to denote the spec version, this can be difficult (in general) to retrieve programmatically - especially if the installed package is no longer directly associated with a git repo.\r\n\r\nConventionally, python packages expose version info in metadata via the `version` parameter in `setuptools.setup`, and at runtime via a `<module>.__version__` attribute. This info is not currently available (e.g. a `pip freeze` shows `pyspec==0.0.0`)\r\n\r\nIt would be helpful for tools that may need to operate on/support multiple pyspec versions (with different behaviour depending on the version).\r\n\r\n------\r\n\r\nThere are automated solutions available that save having to manually adjust the version strings e.g. https://github.com/pypa/setuptools_scm/ or https://github.com/warner/python-versioneer\r\n\r\nI'm happy to provide a PR if there's interest.",
  "closed_by": {
    "login": "djrtwo",
    "id": 1433595,
    "node_id": "MDQ6VXNlcjE0MzM1OTU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/djrtwo",
    "html_url": "https://github.com/djrtwo",
    "followers_url": "https://api.github.com/users/djrtwo/followers",
    "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
    "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
    "organizations_url": "https://api.github.com/users/djrtwo/orgs",
    "repos_url": "https://api.github.com/users/djrtwo/repos",
    "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
    "received_events_url": "https://api.github.com/users/djrtwo/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1596/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1596/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/578803037",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1596#issuecomment-578803037",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1596",
    "id": 578803037,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3ODgwMzAzNw==",
    "user": {
      "login": "protolambda",
      "id": 19571989,
      "node_id": "MDQ6VXNlcjE5NTcxOTg5",
      "avatar_url": "https://avatars.githubusercontent.com/u/19571989?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/protolambda",
      "html_url": "https://github.com/protolambda",
      "followers_url": "https://api.github.com/users/protolambda/followers",
      "following_url": "https://api.github.com/users/protolambda/following{/other_user}",
      "gists_url": "https://api.github.com/users/protolambda/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/protolambda/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/protolambda/subscriptions",
      "organizations_url": "https://api.github.com/users/protolambda/orgs",
      "repos_url": "https://api.github.com/users/protolambda/repos",
      "events_url": "https://api.github.com/users/protolambda/events{/privacy}",
      "received_events_url": "https://api.github.com/users/protolambda/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-27T15:29:53Z",
    "updated_at": "2020-01-27T15:29:53Z",
    "author_association": "MEMBER",
    "body": "See PR #1584 for latest packaging efforts.\r\n\r\nWe have not fully decided on publishing it yet, and the name might still change, but it will at least be possible to install through a git link in a requirements file. Versioning and pypi is probably the best way to go for stable tooling however. Let me know if you have other suggestions, user feedback for this kind of thing is very useful.\r\n\r\nAutomation for versioning sounds great, but it may not fully match the spec versioning approach, which makes me hesitate there. Manually versioning, with a version check as part of `make check-dist` before uploading to pypi could work too. I will check with other ethereum python maintainers and see what they think.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/578803037/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/579024489",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1596#issuecomment-579024489",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1596",
    "id": 579024489,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3OTAyNDQ4OQ==",
    "user": {
      "login": "gnattishness",
      "id": 1620192,
      "node_id": "MDQ6VXNlcjE2MjAxOTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1620192?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gnattishness",
      "html_url": "https://github.com/gnattishness",
      "followers_url": "https://api.github.com/users/gnattishness/followers",
      "following_url": "https://api.github.com/users/gnattishness/following{/other_user}",
      "gists_url": "https://api.github.com/users/gnattishness/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gnattishness/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gnattishness/subscriptions",
      "organizations_url": "https://api.github.com/users/gnattishness/orgs",
      "repos_url": "https://api.github.com/users/gnattishness/repos",
      "events_url": "https://api.github.com/users/gnattishness/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gnattishness/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-28T00:37:10Z",
    "updated_at": "2020-01-28T00:54:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "Looks great!\r\nEven being able to have a \"`pip install`able\" git dependency would be great.\r\nI concur that PyPI is the best way to go in the longer term (`pip` can specify a version range for PyPI, but only a specific tag/commit/branch for git dependencies)\r\n\r\nImmediate things that spring to mind re the PR:\r\n\r\n- `setup()` isn't currently given a version parameter so the package metadata doesn't contain version info\r\n- similarly an `eth2spec.__version__` attribute would be quite helpful to save the user from needing to read the package metadata at runtime (e.g. `pkg_resources.get_distribution('eth2spec').version` or `importlib.metadata.version('eth2spec')`)\r\n- It's also good practice to include a `pyproject.toml` to explicitly specify that you use setuptools: \r\n  ```\r\n  [build-system]\r\n  requires = [\"setuptools>=34.4\", \"wheel\"]\r\n  build-backend = \"setuptools.build_meta\"\r\n  ```\r\n  pip>19.1 handles all this fine, so `pip install '.[test]'` is sufficient (though acknowledge pip#2195), or you could also build with the build-system agnostic [pep517](https://pypi.org/project/pep517/) tool.\r\n\r\nThe version information is primarily useful for tools that might want to handle multiple backwards-incompatible eth2spec versions.\r\n\r\nI also have a personal preference for using [poetry](https://python-poetry.org/) for dependency management and package metadata, but isn't suitable here because you need to execute arbitrary python code at install-time  `setuptools`.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/579024489/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/579024647",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1596#issuecomment-579024647",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1596",
    "id": 579024647,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3OTAyNDY0Nw==",
    "user": {
      "login": "gnattishness",
      "id": 1620192,
      "node_id": "MDQ6VXNlcjE2MjAxOTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1620192?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gnattishness",
      "html_url": "https://github.com/gnattishness",
      "followers_url": "https://api.github.com/users/gnattishness/followers",
      "following_url": "https://api.github.com/users/gnattishness/following{/other_user}",
      "gists_url": "https://api.github.com/users/gnattishness/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gnattishness/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gnattishness/subscriptions",
      "organizations_url": "https://api.github.com/users/gnattishness/orgs",
      "repos_url": "https://api.github.com/users/gnattishness/repos",
      "events_url": "https://api.github.com/users/gnattishness/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gnattishness/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-28T00:37:51Z",
    "updated_at": "2020-01-28T00:37:51Z",
    "author_association": "CONTRIBUTOR",
    "body": "Please let me know if you'd prefer I comment on #1584 directly, and whether to keep this open or not.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/579024647/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/579045366",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1596#issuecomment-579045366",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1596",
    "id": 579045366,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3OTA0NTM2Ng==",
    "user": {
      "login": "protolambda",
      "id": 19571989,
      "node_id": "MDQ6VXNlcjE5NTcxOTg5",
      "avatar_url": "https://avatars.githubusercontent.com/u/19571989?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/protolambda",
      "html_url": "https://github.com/protolambda",
      "followers_url": "https://api.github.com/users/protolambda/followers",
      "following_url": "https://api.github.com/users/protolambda/following{/other_user}",
      "gists_url": "https://api.github.com/users/protolambda/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/protolambda/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/protolambda/subscriptions",
      "organizations_url": "https://api.github.com/users/protolambda/orgs",
      "repos_url": "https://api.github.com/users/protolambda/repos",
      "events_url": "https://api.github.com/users/protolambda/events{/privacy}",
      "received_events_url": "https://api.github.com/users/protolambda/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-28T02:06:33Z",
    "updated_at": "2020-01-28T02:06:33Z",
    "author_association": "MEMBER",
    "body": "> `setup()`  isn't currently given a version parameter \r\n\r\nWe can change that.\r\n\r\n> similarly an `eth2spec.__version__`\r\n\r\nIt starts the whole discussion \"where to put your version\", and without duplication with the `setup.py`. And then we have the problem that this project that has releases that are not focused on the software, but rather the resources it was compiled from. And the most simple solution is to do exactly that, read it at runtime to fill in the `__version__`. [`setuptools` itself does it like that](https://github.com/pypa/setuptools/blob/master/setuptools/version.py). Do we really need it?\r\n\r\n> `pyproject.toml`\r\n\r\nAgree it's neat, but hesitant to introduce extra files into global scope of the specs repo. It's really just the regular `setuptools` setup, with some extra distutils commands. No exotic build system to reference.\r\n\r\n> though acknowledge pip#2195)\r\n\r\nYes, commented in that issue a while ago. It was pulling in the complete test-data repository (multiple GB of data) into the build. Changed defaults to not have that output folder within the repo itself to avoid copy on install. Documented it in the pyspec readme.\r\n\r\nAnother note on versioning, is that I like to avoid tools like `bumpversion`, when there are strict versioning decisions outside of the scope of code. The spec is like that, so I would rather modify one single isolated place manually on release. And also avoid automated git tag pushes, that could end badly.\r\n\r\nI'm thinking reading the version from a `VERSION` file may be the cleanest, as it's nice for the spec itself as well, and keeps the `setup.py` unchanged during regular updates. What do you think @gnattishness ?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/579045366/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/579086721",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1596#issuecomment-579086721",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1596",
    "id": 579086721,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3OTA4NjcyMQ==",
    "user": {
      "login": "gnattishness",
      "id": 1620192,
      "node_id": "MDQ6VXNlcjE2MjAxOTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1620192?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gnattishness",
      "html_url": "https://github.com/gnattishness",
      "followers_url": "https://api.github.com/users/gnattishness/followers",
      "following_url": "https://api.github.com/users/gnattishness/following{/other_user}",
      "gists_url": "https://api.github.com/users/gnattishness/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gnattishness/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gnattishness/subscriptions",
      "organizations_url": "https://api.github.com/users/gnattishness/orgs",
      "repos_url": "https://api.github.com/users/gnattishness/repos",
      "events_url": "https://api.github.com/users/gnattishness/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gnattishness/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-28T05:28:13Z",
    "updated_at": "2020-01-28T05:35:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "> pyproject.toml\r\n\r\nIt's certainly not necessary, just explicitly defining what build tools are used. PEP517 and 518 are about allowing alternative build systems but, if the file is not present, the default is as the following was defined:\r\n  ```\r\n  [build-system]\r\n  requires = [\"setuptools\", \"wheel\"]\r\n  build-backend = \"setuptools.build_meta:__legacy__\"\r\n  ```\r\n\r\n> `__version__` ... Do we really need it?\r\n\r\nCertainly not a requirement (more a \"nice-to-have\") - a convenient and reasonably common convention/pseudo-standard.\r\nIt's also worth noting that the `pkg_resources` or `importlib.metadata` solutions (e.g. used by setuptools) require the package name, which may be different to the module name. \r\n\r\nUser's code can definitely load from package metadata, but defining a `__version__` gives the library the choice of how it wants to expose the version info.\r\n\r\n>  reading the version from a VERSION file\r\n\r\nI don't think I can comment on the project's decision making process, but the setup.py could easily read from a `VERSION` file, and a __version__ attribute load from the metadata or the file. There's tradeoffs where you maintain explicit control over the VERSION file, but can risk updating a tag but forgetting to update the `VERSION` and vice-versa.  You would need to ensure that the non-python `VERSION` file is included in the package (e.g. via `MANIFEST.in`)\r\n\r\nOther options for maintaining a single version: https://packaging.python.org/guides/single-sourcing-package-version/ Pip uses an [alternative](https://github.com/pypa/pip/blob/e9f461241032dbd540fb6271f1dbbb29a6a0db82/setup.py#L19) that is the opposite of setuptools - setup.py reads the version from the __init__.py",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/579086721/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/601760361",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1596#issuecomment-601760361",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1596",
    "id": 601760361,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYwMTc2MDM2MQ==",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-03-20T15:30:34Z",
    "updated_at": "2020-03-20T15:30:34Z",
    "author_association": "MEMBER",
    "body": "Version was added internal to the repo and is available in latest releases",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/601760361/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
