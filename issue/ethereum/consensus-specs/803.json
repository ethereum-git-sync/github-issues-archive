{
  "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/803",
  "repository_url": "https://api.github.com/repos/ethereum/consensus-specs",
  "labels_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/803/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/803/comments",
  "events_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/803/events",
  "html_url": "https://github.com/ethereum/consensus-specs/issues/803",
  "id": 422432101,
  "node_id": "MDU6SXNzdWU0MjI0MzIxMDE=",
  "number": 803,
  "title": "Clean up untriggerable asserts",
  "user": {
    "login": "JustinDrake",
    "id": 731743,
    "node_id": "MDQ6VXNlcjczMTc0Mw==",
    "avatar_url": "https://avatars.githubusercontent.com/u/731743?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/JustinDrake",
    "html_url": "https://github.com/JustinDrake",
    "followers_url": "https://api.github.com/users/JustinDrake/followers",
    "following_url": "https://api.github.com/users/JustinDrake/following{/other_user}",
    "gists_url": "https://api.github.com/users/JustinDrake/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/JustinDrake/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/JustinDrake/subscriptions",
    "organizations_url": "https://api.github.com/users/JustinDrake/orgs",
    "repos_url": "https://api.github.com/users/JustinDrake/repos",
    "events_url": "https://api.github.com/users/JustinDrake/events{/privacy}",
    "received_events_url": "https://api.github.com/users/JustinDrake/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1244734333,
      "node_id": "MDU6TGFiZWwxMjQ0NzM0MzMz",
      "url": "https://api.github.com/repos/ethereum/consensus-specs/labels/general:presentation",
      "name": "general:presentation",
      "color": "2EA9DF",
      "default": false,
      "description": "Presentation (as opposed to content)"
    },
    {
      "id": 1295439957,
      "node_id": "MDU6TGFiZWwxMjk1NDM5OTU3",
      "url": "https://api.github.com/repos/ethereum/consensus-specs/labels/scope:CI/tests/pyspec",
      "name": "scope:CI/tests/pyspec",
      "color": "BDC0BA",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 6,
  "created_at": "2019-03-18T20:59:21Z",
  "updated_at": "2019-08-20T13:35:57Z",
  "closed_at": "2019-08-20T13:35:57Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "In the context of testing/fuzzing, we may want every `assert` to be triggerable by a state transition test (this is arguably part of \"100% test coverage\").\r\n\r\nThere are currently 53 `assert`s in `0_beacon-chain.md`. The following 9 seem untriggerable by a bad block. We should consider removing them (e.g. changing them to `sys.exit(1)`) to clarify that those assertions are for sanity checking and/or documentation and are not expected to trigger.\r\n\r\n```python\r\n# get_permuted_index\r\nassert index < list_size\r\nassert list_size <= 2**40\r\n\r\n# get_crosslink_committees_at_slot\r\nassert previous_epoch <= epoch <= next_epoch\r\n\r\n# get_block_root\r\nassert slot < state.slot <= slot + SLOTS_PER_HISTORICAL_ROOT\r\n\r\n# get_state_root\r\nassert slot < state.slot <= slot + SLOTS_PER_HISTORICAL_ROOT\r\n\r\n# get_randao_mix\r\nassert get_current_epoch(state) - LATEST_RANDAO_MIXES_LENGTH < epoch <= get_current_epoch(state)\r\n\r\n# get_active_index_root\r\nassert get_current_epoch(state) - LATEST_ACTIVE_INDEX_ROOTS_LENGTH + ACTIVATION_EXIT_DELAY < epoch <= get_current_epoch(state) + ACTIVATION_EXIT_DELAY\r\n\r\n# get_beacon_proposer_index\r\nassert previous_epoch <= epoch <= next_epoch\r\n\r\n# integer_squareroot\r\nassert n >= 0\r\n```",
  "closed_by": {
    "login": "JustinDrake",
    "id": 731743,
    "node_id": "MDQ6VXNlcjczMTc0Mw==",
    "avatar_url": "https://avatars.githubusercontent.com/u/731743?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/JustinDrake",
    "html_url": "https://github.com/JustinDrake",
    "followers_url": "https://api.github.com/users/JustinDrake/followers",
    "following_url": "https://api.github.com/users/JustinDrake/following{/other_user}",
    "gists_url": "https://api.github.com/users/JustinDrake/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/JustinDrake/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/JustinDrake/subscriptions",
    "organizations_url": "https://api.github.com/users/JustinDrake/orgs",
    "repos_url": "https://api.github.com/users/JustinDrake/repos",
    "events_url": "https://api.github.com/users/JustinDrake/events{/privacy}",
    "received_events_url": "https://api.github.com/users/JustinDrake/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/803/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/803/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/474145883",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/803#issuecomment-474145883",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/803",
    "id": 474145883,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NDE0NTg4Mw==",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-18T23:55:42Z",
    "updated_at": "2019-03-18T23:55:42Z",
    "author_association": "MEMBER",
    "body": "many of these are for usage _outside_ of the state transition function. If someone wanted to run `get_block_root` against a slot/state, they need to have some sort of bounds checking.\r\n\r\nFor example clients run `get_crosslink_committees_at_slot` often locally to figure out assignments for the current and next epoch. They should have explicit guidance in the def of the function to show the bounds so that they know to handle the exception when they try to do something like get assignments for two epochs in advance.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/474145883/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/474273402",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/803#issuecomment-474273402",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/803",
    "id": 474273402,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NDI3MzQwMg==",
    "user": {
      "login": "JustinDrake",
      "id": 731743,
      "node_id": "MDQ6VXNlcjczMTc0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/731743?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JustinDrake",
      "html_url": "https://github.com/JustinDrake",
      "followers_url": "https://api.github.com/users/JustinDrake/followers",
      "following_url": "https://api.github.com/users/JustinDrake/following{/other_user}",
      "gists_url": "https://api.github.com/users/JustinDrake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JustinDrake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JustinDrake/subscriptions",
      "organizations_url": "https://api.github.com/users/JustinDrake/orgs",
      "repos_url": "https://api.github.com/users/JustinDrake/repos",
      "events_url": "https://api.github.com/users/JustinDrake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JustinDrake/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-19T09:50:41Z",
    "updated_at": "2019-03-19T09:51:22Z",
    "author_association": "MEMBER",
    "body": "I'm not sure what is the most Pythonic way to discriminate \"spec code\" from \"implementer guidance\". In the Go executable spec the distinction is made between `return err` (for expected error handling in the spec) and `panic(err)` (for implementer guidance that is not expected to trigger in the context of the spec).\r\n\r\nMaybe the validator guidance can go in the validator doc.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/474273402/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/474278387",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/803#issuecomment-474278387",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/803",
    "id": 474278387,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NDI3ODM4Nw==",
    "user": {
      "login": "hwwhww",
      "id": 9263930,
      "node_id": "MDQ6VXNlcjkyNjM5MzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9263930?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hwwhww",
      "html_url": "https://github.com/hwwhww",
      "followers_url": "https://api.github.com/users/hwwhww/followers",
      "following_url": "https://api.github.com/users/hwwhww/following{/other_user}",
      "gists_url": "https://api.github.com/users/hwwhww/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hwwhww/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hwwhww/subscriptions",
      "organizations_url": "https://api.github.com/users/hwwhww/orgs",
      "repos_url": "https://api.github.com/users/hwwhww/repos",
      "events_url": "https://api.github.com/users/hwwhww/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hwwhww/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-19T10:02:16Z",
    "updated_at": "2019-03-19T10:02:16Z",
    "author_association": "MEMBER",
    "body": "@JustinDrake A Pythonic way is that we can define a custom exception for the spec error; in Py-EVM there's a `ValidationError` (`class ValidationError(Exception): pass`), and we can raise `ValidationError` explicitly.\r\n\r\nI think we did consider it but also worried about that might be *too Pythonic* compare to simple `assert` for the readers.\r\n\r\n@djrtwo What do you think about it?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/474278387/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/485539248",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/803#issuecomment-485539248",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/803",
    "id": 485539248,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4NTUzOTI0OA==",
    "user": {
      "login": "arnetheduck",
      "id": 1382986,
      "node_id": "MDQ6VXNlcjEzODI5ODY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1382986?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/arnetheduck",
      "html_url": "https://github.com/arnetheduck",
      "followers_url": "https://api.github.com/users/arnetheduck/followers",
      "following_url": "https://api.github.com/users/arnetheduck/following{/other_user}",
      "gists_url": "https://api.github.com/users/arnetheduck/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/arnetheduck/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/arnetheduck/subscriptions",
      "organizations_url": "https://api.github.com/users/arnetheduck/orgs",
      "repos_url": "https://api.github.com/users/arnetheduck/repos",
      "events_url": "https://api.github.com/users/arnetheduck/events{/privacy}",
      "received_events_url": "https://api.github.com/users/arnetheduck/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-04-22T20:22:09Z",
    "updated_at": "2019-04-22T20:22:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "`assert` lgtm as an explicit way to document pre-conditions and valid argument values in a spec - there are similar hidden pythonisms (such as array-out-of-bounds accesses etc) that are best brought to light this way, I believe.\r\n\r\none problem we've had in the past with these assertions was that they were expressed in terms of a block-transition-in-progress - that has substantially improved with the shifted epoch processing, but I would be keen to see / know if there are any exceptions to that rule, where certain functions can only be used at certain points of the transition function - ideally we'd like to be able to reuse most getters at any time, for example.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/485539248/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/507052472",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/803#issuecomment-507052472",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/803",
    "id": 507052472,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwNzA1MjQ3Mg==",
    "user": {
      "login": "JustinDrake",
      "id": 731743,
      "node_id": "MDQ6VXNlcjczMTc0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/731743?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JustinDrake",
      "html_url": "https://github.com/JustinDrake",
      "followers_url": "https://api.github.com/users/JustinDrake/followers",
      "following_url": "https://api.github.com/users/JustinDrake/following{/other_user}",
      "gists_url": "https://api.github.com/users/JustinDrake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JustinDrake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JustinDrake/subscriptions",
      "organizations_url": "https://api.github.com/users/JustinDrake/orgs",
      "repos_url": "https://api.github.com/users/JustinDrake/repos",
      "events_url": "https://api.github.com/users/JustinDrake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JustinDrake/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-06-30T17:16:28Z",
    "updated_at": "2019-06-30T17:16:28Z",
    "author_association": "MEMBER",
    "body": "We're down to just three untriggerable asserts 🎉 (#1237 removes the assert in `integer_squareroot`):\r\n\r\n```python\r\n# shuffle_index\r\nassert index < list_size\r\nassert list_size <= 2**40\r\n\r\n# get_block_root_at_slot\r\nassert slot < state.slot <= slot + SLOTS_PER_HISTORICAL_ROOT\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/507052472/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 1,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/522974614",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/803#issuecomment-522974614",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/803",
    "id": 522974614,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyMjk3NDYxNA==",
    "user": {
      "login": "JustinDrake",
      "id": 731743,
      "node_id": "MDQ6VXNlcjczMTc0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/731743?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JustinDrake",
      "html_url": "https://github.com/JustinDrake",
      "followers_url": "https://api.github.com/users/JustinDrake/followers",
      "following_url": "https://api.github.com/users/JustinDrake/following{/other_user}",
      "gists_url": "https://api.github.com/users/JustinDrake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JustinDrake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JustinDrake/subscriptions",
      "organizations_url": "https://api.github.com/users/JustinDrake/orgs",
      "repos_url": "https://api.github.com/users/JustinDrake/repos",
      "events_url": "https://api.github.com/users/JustinDrake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JustinDrake/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-20T11:39:08Z",
    "updated_at": "2019-08-20T11:39:08Z",
    "author_association": "MEMBER",
    "body": "Down to two:\r\n\r\n```python\r\n# compute_shuffled_index\r\nassert index < index_count\r\n\r\n# get_block_root_at_slot\r\nassert slot < state.slot <= slot + SLOTS_PER_HISTORICAL_ROOT\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/522974614/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
