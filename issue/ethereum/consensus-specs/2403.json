{
  "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2403",
  "repository_url": "https://api.github.com/repos/ethereum/consensus-specs",
  "labels_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2403/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2403/comments",
  "events_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2403/events",
  "html_url": "https://github.com/ethereum/consensus-specs/issues/2403",
  "id": 886040688,
  "node_id": "MDU6SXNzdWU4ODYwNDA2ODg=",
  "number": 2403,
  "title": "Attestations With Different Target Roots Can Be Dropped",
  "user": {
    "login": "nisdas",
    "id": 33201827,
    "node_id": "MDQ6VXNlcjMzMjAxODI3",
    "avatar_url": "https://avatars.githubusercontent.com/u/33201827?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nisdas",
    "html_url": "https://github.com/nisdas",
    "followers_url": "https://api.github.com/users/nisdas/followers",
    "following_url": "https://api.github.com/users/nisdas/following{/other_user}",
    "gists_url": "https://api.github.com/users/nisdas/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nisdas/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nisdas/subscriptions",
    "organizations_url": "https://api.github.com/users/nisdas/orgs",
    "repos_url": "https://api.github.com/users/nisdas/repos",
    "events_url": "https://api.github.com/users/nisdas/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nisdas/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2021-05-11T05:17:18Z",
  "updated_at": "2021-05-13T16:43:48Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "In Altair, \r\n\r\n`process_attestation` is modified as linked:\r\nhttps://github.com/ethereum/eth2.0-specs/blob/dev/specs/altair/beacon-chain.md#modified-process_attestation\r\n\r\nRewards for proposers are now dependant on the `participation flags` of the attestation. This is determined according to the snippet below:\r\n\r\n```py\r\n # Participation flag indices\r\n    participation_flag_indices = []\r\n    if is_matching_source and state.slot <= data.slot + integer_squareroot(SLOTS_PER_EPOCH):\r\n        participation_flag_indices.append(TIMELY_SOURCE_FLAG_INDEX)\r\n    if is_matching_target and state.slot <= data.slot + SLOTS_PER_EPOCH:\r\n        participation_flag_indices.append(TIMELY_TARGET_FLAG_INDEX)\r\n    if is_matching_head and state.slot == data.slot + MIN_ATTESTATION_INCLUSION_DELAY:\r\n        participation_flag_indices.append(TIMELY_HEAD_FLAG_INDEX)\r\n```\r\nUsing these flags, the rewards for an attestation are determined for both proposer and attester. However the introduction of this condition for `TIMELY_SOURCE_FLAG_INDEX` may lead to issues: \r\n\r\n```\r\n    if is_matching_source and state.slot <= data.slot + integer_squareroot(SLOTS_PER_EPOCH):\r\n```\r\nWith the current mainnet `SLOTS_PER_EPOCH` being 32, `integer_squareroot(SLOTS_PER_EPOCH)` of it is 5. This only gives a threshold of 5 slots for an attestation to be processed for its timely source reward. The initial reason given was that it incentivizes proposers to pack in attestations faster. While this makes sense this also introduces a corresponding disincentive. If a proposer receives an attestation with a matching source but dissimilar target, then this creates a tight boundary for the attestation to be included. Some situations in which target roots can be different:\r\n\r\n- There is an ongoing network fork, so there is a larger split between different groups of validators on what the target root is at a certain epoch. During this period you can start assuming that attestation aggregation is imperfect, so blocks might actually end up being packed. A validator(different target root) could very well likely end up with an inclusion distance larger than 5. In the event that happens, their entire attestation will be dropped as the proposer receives no reward for including it.\r\n\r\n-  A validator is assigned to attest during an epoch transition. However, the validator ends up receiving the block much later than expected( as has been observed in mainnet during slot 0). Due to local network/peering issues a validator is only able to broadcast its attestation to a small set of peers. This ends up leading to its inclusion distance with being larger than 5. In this case this particular validator's attestation is completely dropped.\r\n\r\nThe former is unlikely to happen in mainnet , however the latter has a much higher likelihood of occurring. Currently in mainnet attesters already get a smaller reward due to an incorrect target root being voted for( due to late blocks). However with this change it is likely that an attester could end up losing their whole reward and be penalised if it ever has a late broadcast of its attestation.",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2403/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2403/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/838960833",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2403#issuecomment-838960833",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2403",
    "id": 838960833,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgzODk2MDgzMw==",
    "user": {
      "login": "ralexstokes",
      "id": 3113781,
      "node_id": "MDQ6VXNlcjMxMTM3ODE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3113781?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ralexstokes",
      "html_url": "https://github.com/ralexstokes",
      "followers_url": "https://api.github.com/users/ralexstokes/followers",
      "following_url": "https://api.github.com/users/ralexstokes/following{/other_user}",
      "gists_url": "https://api.github.com/users/ralexstokes/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ralexstokes/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ralexstokes/subscriptions",
      "organizations_url": "https://api.github.com/users/ralexstokes/orgs",
      "repos_url": "https://api.github.com/users/ralexstokes/repos",
      "events_url": "https://api.github.com/users/ralexstokes/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ralexstokes/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-11T18:29:18Z",
    "updated_at": "2021-05-11T18:29:18Z",
    "author_association": "MEMBER",
    "body": "in general, the tighter the specification, the less attack surface there is. obviously this has to be balanced w/ real world conditions as we can't finalize a chain we can't build :)\r\n\r\ni'd say to keep an eye on these sorts of metrics in altair testnets and as always a close eye on them as we move to mainnet. but it is worth having some \"performance pressure\" as it incentivizes client implementations to do things like minimize the \"lagging slot 0\" phenomena you mention (and i'm sure there are or will be others like it in the future...)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/838960833/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/839378657",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2403#issuecomment-839378657",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2403",
    "id": 839378657,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgzOTM3ODY1Nw==",
    "user": {
      "login": "nisdas",
      "id": 33201827,
      "node_id": "MDQ6VXNlcjMzMjAxODI3",
      "avatar_url": "https://avatars.githubusercontent.com/u/33201827?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nisdas",
      "html_url": "https://github.com/nisdas",
      "followers_url": "https://api.github.com/users/nisdas/followers",
      "following_url": "https://api.github.com/users/nisdas/following{/other_user}",
      "gists_url": "https://api.github.com/users/nisdas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nisdas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nisdas/subscriptions",
      "organizations_url": "https://api.github.com/users/nisdas/orgs",
      "repos_url": "https://api.github.com/users/nisdas/repos",
      "events_url": "https://api.github.com/users/nisdas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nisdas/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-12T02:11:35Z",
    "updated_at": "2021-05-12T02:11:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "> i'd say to keep an eye on these sorts of metrics in altair testnets and as always a close eye on them as we move to mainnet. but it is worth having some \"performance pressure\" as it incentivizes client implementations to do things like minimize the \"lagging slot 0\" phenomena you mention (and i'm sure there are or will be others like it in the future...)\r\n\r\nFair enough, although there will be times where it is a localized network issue for the validator and the conversation goes from 'why is my reward less' to 'why am I being penalised'. Early Altair testnets will give us a good gauge of how likely we think this might happen.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/839378657/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/839658298",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2403#issuecomment-839658298",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2403",
    "id": 839658298,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgzOTY1ODI5OA==",
    "user": {
      "login": "potuz",
      "id": 16044918,
      "node_id": "MDQ6VXNlcjE2MDQ0OTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/16044918?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/potuz",
      "html_url": "https://github.com/potuz",
      "followers_url": "https://api.github.com/users/potuz/followers",
      "following_url": "https://api.github.com/users/potuz/following{/other_user}",
      "gists_url": "https://api.github.com/users/potuz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/potuz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/potuz/subscriptions",
      "organizations_url": "https://api.github.com/users/potuz/orgs",
      "repos_url": "https://api.github.com/users/potuz/repos",
      "events_url": "https://api.github.com/users/potuz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/potuz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-12T10:22:35Z",
    "updated_at": "2021-05-12T10:22:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "The thing that worries me about this issue is that Altair may not be a good gauge at all. There is no reason to expect more forking while the network is pure consensus. There are more chances however after the merge, and since this is scheduled to be implemented in a previous fork, if it actually becomes an issue we will only find out later and may need to be reverted. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/839658298/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/840670776",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2403#issuecomment-840670776",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2403",
    "id": 840670776,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0MDY3MDc3Ng==",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-13T16:19:29Z",
    "updated_at": "2021-05-13T16:43:48Z",
    "author_association": "MEMBER",
    "body": "EDIT: I was mixing up source and target time limits. All of the below is inaccurate \r\n\r\n~~Right, it’s potentially bad for network health to tightly couple target correctness and timeliness in this flag because we use it in process_justification_and_finalization to select the set for finality\r\nhttps://github.com/ethereum/eth2.0-specs/blob/dev/specs/altair/beacon-chain.md#justification-and-finalization~~\r\n\r\n~~So if latency is 5+ slots, we can't get onchain finality even if there are >2/3  correct targets~~\r\n\r\n~~I would argue we need to have an additional flag for `TARGET_CORRECT_FLAG` to independently track this for finality.\r\nDon't think we need to add a particular incentive for that flag~~",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/840670776/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
