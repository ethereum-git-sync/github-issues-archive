{
  "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/3099",
  "repository_url": "https://api.github.com/repos/ethereum/consensus-specs",
  "labels_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/3099/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/3099/comments",
  "events_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/3099/events",
  "html_url": "https://github.com/ethereum/consensus-specs/issues/3099",
  "id": 1446523850,
  "node_id": "I_kwDOCOoGbc5WODPK",
  "number": 3099,
  "title": "EIP-4844: Ancestor blob availability check",
  "user": {
    "login": "terencechain",
    "id": 21316537,
    "node_id": "MDQ6VXNlcjIxMzE2NTM3",
    "avatar_url": "https://avatars.githubusercontent.com/u/21316537?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/terencechain",
    "html_url": "https://github.com/terencechain",
    "followers_url": "https://api.github.com/users/terencechain/followers",
    "following_url": "https://api.github.com/users/terencechain/following{/other_user}",
    "gists_url": "https://api.github.com/users/terencechain/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/terencechain/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/terencechain/subscriptions",
    "organizations_url": "https://api.github.com/users/terencechain/orgs",
    "repos_url": "https://api.github.com/users/terencechain/repos",
    "events_url": "https://api.github.com/users/terencechain/events{/privacy}",
    "received_events_url": "https://api.github.com/users/terencechain/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 4163819084,
      "node_id": "LA_kwDOCOoGbc74LtZM",
      "url": "https://api.github.com/repos/ethereum/consensus-specs/labels/eip-4844",
      "name": "eip-4844",
      "color": "A28C37",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 5,
  "created_at": "2022-11-12T16:55:19Z",
  "updated_at": "2022-11-29T15:34:59Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "The blob availability in 4844 should be a validity condition of a chain. This means a node should download and verify blobs up to `MIN_EPOCHS_FOR_BLOBS_SIDECARS_REQUESTS` duration. Given that the attestation availability must be the same as the validation condition and user's chain availability rule, within fork choice spec, we should explicitly mention one of the following\r\n- A block can't be head until the ancestor blobs are downloaded and verified\r\n- A block can't be imported until the ancestor blobs are downloaded and verified\r\n\r\nI have to think more about the tradeoff between the two. Feedback is welcome ",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/3099/reactions",
    "total_count": 1,
    "+1": 1,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/3099/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1313409748",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/3099#issuecomment-1313409748",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/3099",
    "id": 1313409748,
    "node_id": "IC_kwDOCOoGbc5OSQrU",
    "user": {
      "login": "tbenr",
      "id": 15999009,
      "node_id": "MDQ6VXNlcjE1OTk5MDA5",
      "avatar_url": "https://avatars.githubusercontent.com/u/15999009?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tbenr",
      "html_url": "https://github.com/tbenr",
      "followers_url": "https://api.github.com/users/tbenr/followers",
      "following_url": "https://api.github.com/users/tbenr/following{/other_user}",
      "gists_url": "https://api.github.com/users/tbenr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tbenr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tbenr/subscriptions",
      "organizations_url": "https://api.github.com/users/tbenr/orgs",
      "repos_url": "https://api.github.com/users/tbenr/repos",
      "events_url": "https://api.github.com/users/tbenr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tbenr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-14T10:03:55Z",
    "updated_at": "2022-11-14T10:03:55Z",
    "author_association": "CONTRIBUTOR",
    "body": "What do you have in mind with the two options?\r\nSeems to me like the difference is the \"optimistic\" behaviour: the first allows it, the latter closes the door to it.\r\n\r\nTo me there is a strong relation with what we will end to do with the \"byRange\" p2p methods.\r\nIf we end up coupling, we will have everything coupled, so the latter will be the most natural\\simple way to go.\r\nIf we go for the decoupled way, we should choose the first.\r\n\r\nPls correct me if I'm on the wrong train of thought :)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1313409748/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1314258445",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/3099#issuecomment-1314258445",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/3099",
    "id": 1314258445,
    "node_id": "IC_kwDOCOoGbc5OVf4N",
    "user": {
      "login": "terencechain",
      "id": 21316537,
      "node_id": "MDQ6VXNlcjIxMzE2NTM3",
      "avatar_url": "https://avatars.githubusercontent.com/u/21316537?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/terencechain",
      "html_url": "https://github.com/terencechain",
      "followers_url": "https://api.github.com/users/terencechain/followers",
      "following_url": "https://api.github.com/users/terencechain/following{/other_user}",
      "gists_url": "https://api.github.com/users/terencechain/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/terencechain/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/terencechain/subscriptions",
      "organizations_url": "https://api.github.com/users/terencechain/orgs",
      "repos_url": "https://api.github.com/users/terencechain/repos",
      "events_url": "https://api.github.com/users/terencechain/events{/privacy}",
      "received_events_url": "https://api.github.com/users/terencechain/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-14T19:20:10Z",
    "updated_at": "2022-11-14T19:20:10Z",
    "author_association": "CONTRIBUTOR",
    "body": "@tbenr  + 1\r\n\r\nRegarding implementation complexity, \"can't import\" is much cleaner and simpler to implement for Prysm. Would love to not have to mix in \"optimistic\" behavior if possible ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1314258445/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1314492479",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/3099#issuecomment-1314492479",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/3099",
    "id": 1314492479,
    "node_id": "IC_kwDOCOoGbc5OWZA_",
    "user": {
      "login": "paulhauner",
      "id": 6660660,
      "node_id": "MDQ6VXNlcjY2NjA2NjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6660660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paulhauner",
      "html_url": "https://github.com/paulhauner",
      "followers_url": "https://api.github.com/users/paulhauner/followers",
      "following_url": "https://api.github.com/users/paulhauner/following{/other_user}",
      "gists_url": "https://api.github.com/users/paulhauner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paulhauner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paulhauner/subscriptions",
      "organizations_url": "https://api.github.com/users/paulhauner/orgs",
      "repos_url": "https://api.github.com/users/paulhauner/repos",
      "events_url": "https://api.github.com/users/paulhauner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paulhauner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-14T22:26:53Z",
    "updated_at": "2022-11-14T22:26:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "My current state-of-mind for Lighthouse is to *not* implement optimistic import of blob-less blocks. Additionally I don't think the spec should allow for it. My reasoning is below.\r\n\r\nThe reason we perform an *execution-optimistic* import (i.e., importing a block without having verified the execution payload) is because there's value in doing so. The value is that it allows us to provide tip-of-chain blocks to the EL so it can sync to the head. Without that, we're stuck in the well-known \"can't import bocks because the EL isn't synced, can't sync the EL because we're not importing blocks\" deadlock.\r\n\r\nWhen it comes to a *blob-optimistic* import (i.e., importing a block without having verified the blob), I don't see value in it. Importing the blobless block doesn't help us obtain any ancestor blobs/blocks like it does for execution-optimistic imports. We can't attest to a blobless block and we also can't build atop it.\r\n\r\nGiven the significant complexity and ugliness we faced with execution-optimistic imports, I'm with @terencechain in looking to avoid it in Lighthouse.\r\n\r\nWhen it comes to the specification, I'd be tempted to go with option (2): *\"A block **can't** be imported...*\". If someone has a strong argument for implementing blob-optimistic imports then I'd be open to (1). But if we can't see a valid use case for blob-optimistic then I'd say we don't waste time and spec complexity on it. I believe this would be consistent with what we're doing currently, we only have an execution-optimistic spec today because that's the only thing we know that some clients will need. We don't, for example, have a spec for state-root-optimistic imports.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1314492479/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1315483864",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/3099#issuecomment-1315483864",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/3099",
    "id": 1315483864,
    "node_id": "IC_kwDOCOoGbc5OaLDY",
    "user": {
      "login": "tbenr",
      "id": 15999009,
      "node_id": "MDQ6VXNlcjE1OTk5MDA5",
      "avatar_url": "https://avatars.githubusercontent.com/u/15999009?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tbenr",
      "html_url": "https://github.com/tbenr",
      "followers_url": "https://api.github.com/users/tbenr/followers",
      "following_url": "https://api.github.com/users/tbenr/following{/other_user}",
      "gists_url": "https://api.github.com/users/tbenr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tbenr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tbenr/subscriptions",
      "organizations_url": "https://api.github.com/users/tbenr/orgs",
      "repos_url": "https://api.github.com/users/tbenr/repos",
      "events_url": "https://api.github.com/users/tbenr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tbenr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-15T15:34:52Z",
    "updated_at": "2022-11-15T15:43:10Z",
    "author_association": "CONTRIBUTOR",
    "body": "I agree with Paul. The only reason I can see for supporting it is for performance reasons in case blocks are significantly faster to download compared to blobs (assuming decoupled p2p methods). But depends what is the bottleneck here. In any case it seems not worth the implementation complexity.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1315483864/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1330836511",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/3099#issuecomment-1330836511",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/3099",
    "id": 1330836511,
    "node_id": "IC_kwDOCOoGbc5PUvQf",
    "user": {
      "login": "timbeiko",
      "id": 9390255,
      "node_id": "MDQ6VXNlcjkzOTAyNTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9390255?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/timbeiko",
      "html_url": "https://github.com/timbeiko",
      "followers_url": "https://api.github.com/users/timbeiko/followers",
      "following_url": "https://api.github.com/users/timbeiko/following{/other_user}",
      "gists_url": "https://api.github.com/users/timbeiko/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/timbeiko/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/timbeiko/subscriptions",
      "organizations_url": "https://api.github.com/users/timbeiko/orgs",
      "repos_url": "https://api.github.com/users/timbeiko/repos",
      "events_url": "https://api.github.com/users/timbeiko/events{/privacy}",
      "received_events_url": "https://api.github.com/users/timbeiko/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-29T15:34:56Z",
    "updated_at": "2022-11-29T15:34:56Z",
    "author_association": "MEMBER",
    "body": "PR related to this issue: https://github.com/ethereum/consensus-specs/pull/3125",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1330836511/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
