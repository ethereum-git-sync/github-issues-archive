{
  "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2401",
  "repository_url": "https://api.github.com/repos/ethereum/consensus-specs",
  "labels_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2401/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2401/comments",
  "events_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2401/events",
  "html_url": "https://github.com/ethereum/consensus-specs/issues/2401",
  "id": 885458109,
  "node_id": "MDU6SXNzdWU4ODU0NTgxMDk=",
  "number": 2401,
  "title": "Same Sync Committees Can Span Multiple Periods",
  "user": {
    "login": "nisdas",
    "id": 33201827,
    "node_id": "MDQ6VXNlcjMzMjAxODI3",
    "avatar_url": "https://avatars.githubusercontent.com/u/33201827?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nisdas",
    "html_url": "https://github.com/nisdas",
    "followers_url": "https://api.github.com/users/nisdas/followers",
    "following_url": "https://api.github.com/users/nisdas/following{/other_user}",
    "gists_url": "https://api.github.com/users/nisdas/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nisdas/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nisdas/subscriptions",
    "organizations_url": "https://api.github.com/users/nisdas/orgs",
    "repos_url": "https://api.github.com/users/nisdas/repos",
    "events_url": "https://api.github.com/users/nisdas/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nisdas/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2021-05-11T00:26:41Z",
  "updated_at": "2021-06-07T22:39:38Z",
  "closed_at": "2021-06-07T22:39:38Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "In Altair:\r\nhttps://github.com/ethereum/eth2.0-specs/blob/dev/specs/altair/beacon-chain.md#get_sync_committee_indices\r\n\r\n```\r\n    base_epoch = Epoch((max(epoch // EPOCHS_PER_SYNC_COMMITTEE_PERIOD, 1) - 1) * EPOCHS_PER_SYNC_COMMITTEE_PERIOD)\r\n```\r\n\r\nThe `base_epoch` will always be 0 for the first 2 committee periods. \r\nIf `epoch` is in \r\n`0 <= epoch < EPOCHS_PER_SYNC_COMMITTEE_PERIOD` then:\r\n`(max(epoch // EPOCHS_PER_SYNC_COMMITTEE_PERIOD, 1) - 1)` will equal 0.\r\n\r\nIf `epoch` is in \r\n`EPOCHS_PER_SYNC_COMMITTEE_PERIOD <= epoch < 2*EPOCHS_PER_SYNC_COMMITTEE_PERIOD` then:\r\n`(max(epoch // EPOCHS_PER_SYNC_COMMITTEE_PERIOD, 1) - 1)` will still equal 0. \r\n\r\nWhile not an issue for mainnet as we are on epoch 36000, it might be relevant for any new devnet/testnets spun up. If this is an acceptable compromise at genesis then the issue can be ignored, thought it might be worth bringing up given how long lasting sync committees are.",
  "closed_by": {
    "login": "djrtwo",
    "id": 1433595,
    "node_id": "MDQ6VXNlcjE0MzM1OTU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/djrtwo",
    "html_url": "https://github.com/djrtwo",
    "followers_url": "https://api.github.com/users/djrtwo/followers",
    "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
    "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
    "organizations_url": "https://api.github.com/users/djrtwo/orgs",
    "repos_url": "https://api.github.com/users/djrtwo/repos",
    "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
    "received_events_url": "https://api.github.com/users/djrtwo/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2401/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2401/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/837559692",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2401#issuecomment-837559692",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2401",
    "id": 837559692,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgzNzU1OTY5Mg==",
    "user": {
      "login": "ralexstokes",
      "id": 3113781,
      "node_id": "MDQ6VXNlcjMxMTM3ODE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3113781?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ralexstokes",
      "html_url": "https://github.com/ralexstokes",
      "followers_url": "https://api.github.com/users/ralexstokes/followers",
      "following_url": "https://api.github.com/users/ralexstokes/following{/other_user}",
      "gists_url": "https://api.github.com/users/ralexstokes/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ralexstokes/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ralexstokes/subscriptions",
      "organizations_url": "https://api.github.com/users/ralexstokes/orgs",
      "repos_url": "https://api.github.com/users/ralexstokes/repos",
      "events_url": "https://api.github.com/users/ralexstokes/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ralexstokes/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-11T00:39:04Z",
    "updated_at": "2021-05-11T00:39:04Z",
    "author_association": "MEMBER",
    "body": "it is helpful to note and i do think it is ok to have the redundancy at genesis as this condition would only be reached in testnets like you noted -- we could extend the sampling to differentiate them but i don't think that would be worth the added complexity as we should not have this issue on mainnet",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/837559692/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/856308389",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2401#issuecomment-856308389",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2401",
    "id": 856308389,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg1NjMwODM4OQ==",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-06-07T22:39:38Z",
    "updated_at": "2021-06-07T22:39:38Z",
    "author_association": "MEMBER",
    "body": "The sync committee is *always* applied to both current and next in the fork transition processing. This is for simplicity in calculation and allows for not having a truncated committee duty (instead you get a longer duty) in the event that a fork is not on a sync committee period boundary\r\n\r\nclosing!",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/856308389/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
