{
  "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/618",
  "repository_url": "https://api.github.com/repos/ethereum/consensus-specs",
  "labels_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/618/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/618/comments",
  "events_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/618/events",
  "html_url": "https://github.com/ethereum/consensus-specs/issues/618",
  "id": 409895276,
  "node_id": "MDU6SXNzdWU0MDk4OTUyNzY=",
  "number": 618,
  "title": "off-by-one validating justified_epoch for attestations",
  "user": {
    "login": "arnetheduck",
    "id": 1382986,
    "node_id": "MDQ6VXNlcjEzODI5ODY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1382986?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/arnetheduck",
    "html_url": "https://github.com/arnetheduck",
    "followers_url": "https://api.github.com/users/arnetheduck/followers",
    "following_url": "https://api.github.com/users/arnetheduck/following{/other_user}",
    "gists_url": "https://api.github.com/users/arnetheduck/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/arnetheduck/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/arnetheduck/subscriptions",
    "organizations_url": "https://api.github.com/users/arnetheduck/orgs",
    "repos_url": "https://api.github.com/users/arnetheduck/repos",
    "events_url": "https://api.github.com/users/arnetheduck/events{/privacy}",
    "received_events_url": "https://api.github.com/users/arnetheduck/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1063043866,
      "node_id": "MDU6TGFiZWwxMDYzMDQzODY2",
      "url": "https://api.github.com/repos/ethereum/consensus-specs/labels/general:bug",
      "name": "general:bug",
      "color": "DD1C1A",
      "default": false,
      "description": "Something isn't working"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 6,
  "created_at": "2019-02-13T16:38:34Z",
  "updated_at": "2019-02-21T19:18:02Z",
  "closed_at": "2019-02-21T19:18:02Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "3d5aa35\r\n\r\nCurrently, spec has this rule for validating attestations:\r\n\r\n> Verify that `attestation.data.justified_epoch` is equal to `state.justified_epoch if attestation.data.slot >= get_epoch_start_slot(get_current_epoch(state)) else state.previous_justified_epoch`.\r\n\r\nEpoch transitions happen at `(state.slot + 1) % EPOCH_LENGTH == 0`. This means that when `attestation.data.slot % EPOCH_LENGTH == 0`, the epoch state update will not yet have happened but `get_epoch_start_slot` will already return a slot from the new epoch, and this check will fail due to an off-by-one.. it can be fixed by an extra + 1:\r\n\r\n> Verify that `attestation.data.justified_epoch` is equal to `state.justified_epoch if attestation.data.slot + 1 >= get_epoch_start_slot(get_current_epoch(state)) else state.previous_justified_epoch`.\r\n\r\nIt should be noted however that this feels like a workaround - the deeper issue here is that `get_current_epoch` returns the new epoch one slot earlier than the `justified_epoch` update happens, so we have a situation where according to one function, we are in a new epoch, but `state` has not yet been updated to include the changes that pertain to that epoch.",
  "closed_by": {
    "login": "djrtwo",
    "id": 1433595,
    "node_id": "MDQ6VXNlcjE0MzM1OTU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/djrtwo",
    "html_url": "https://github.com/djrtwo",
    "followers_url": "https://api.github.com/users/djrtwo/followers",
    "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
    "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
    "organizations_url": "https://api.github.com/users/djrtwo/orgs",
    "repos_url": "https://api.github.com/users/djrtwo/repos",
    "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
    "received_events_url": "https://api.github.com/users/djrtwo/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/618/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/618/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/463273577",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/618#issuecomment-463273577",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/618",
    "id": 463273577,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MzI3MzU3Nw==",
    "user": {
      "login": "arnetheduck",
      "id": 1382986,
      "node_id": "MDQ6VXNlcjEzODI5ODY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1382986?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/arnetheduck",
      "html_url": "https://github.com/arnetheduck",
      "followers_url": "https://api.github.com/users/arnetheduck/followers",
      "following_url": "https://api.github.com/users/arnetheduck/following{/other_user}",
      "gists_url": "https://api.github.com/users/arnetheduck/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/arnetheduck/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/arnetheduck/subscriptions",
      "organizations_url": "https://api.github.com/users/arnetheduck/orgs",
      "repos_url": "https://api.github.com/users/arnetheduck/repos",
      "events_url": "https://api.github.com/users/arnetheduck/events{/privacy}",
      "received_events_url": "https://api.github.com/users/arnetheduck/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-13T16:44:47Z",
    "updated_at": "2019-02-13T16:44:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "related commit: f943361a23883b387cd52c00bea24d7605fccc5b\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/463273577/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/463304171",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/618#issuecomment-463304171",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/618",
    "id": 463304171,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MzMwNDE3MQ==",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-13T18:06:18Z",
    "updated_at": "2019-02-13T18:09:01Z",
    "author_association": "MEMBER",
    "body": "It would be much cleaner to make this epoch based and arguably should have been done in the epoch rework\r\n\r\n> Verify that `attestation.data.justified_epoch` is equal to `state.justified_epoch if slot_to_epoch(attestation.data.slot) >= get_current_epoch(state) else state.previous_justified_epoch`.\r\n\r\n\r\nIf the attestation is included in the epoch during the slot it was for, then it uses `justified_epoch`. If not, it is from the prev, and uses `previous_justified_epoch`",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/463304171/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/463305620",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/618#issuecomment-463305620",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/618",
    "id": 463305620,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MzMwNTYyMA==",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-13T18:10:24Z",
    "updated_at": "2019-02-13T18:10:24Z",
    "author_association": "MEMBER",
    "body": "This is clean because we don't actually transition into the next upon until the end of the state transition. so when processing the block, the current epoch check is valid",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/463305620/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/463307615",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/618#issuecomment-463307615",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/618",
    "id": 463307615,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MzMwNzYxNQ==",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-13T18:15:54Z",
    "updated_at": "2019-02-13T18:15:54Z",
    "author_association": "MEMBER",
    "body": "> This means that when `attestation.data.slot % EPOCH_LENGTH == 0`, the epoch state update will not yet have happened but `get_epoch_start_slot` will already return a slot from the new epoch, and this check will fail due to an off-by-one.. it can be fixed by an extra + 1:\r\n\r\nI'm not sure I follow here\r\n\r\n* An attestation with`attestation.data.slot % EPOCH_LENGTH == 0` can at earliest be included in a block at the next slot (assuming `MIN_ATTESTATION_INCLUSION_DELAY == 1`\r\n* At the next slot `state.slot % EPOCH_LENGTH == 1`, the epoch start slot of each is that of the attestation, and the epoch of each is that of the attestation. So `a.data.justified_epoch == state.justified_epoch`",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/463307615/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/463322930",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/618#issuecomment-463322930",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/618",
    "id": 463322930,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MzMyMjkzMA==",
    "user": {
      "login": "arnetheduck",
      "id": 1382986,
      "node_id": "MDQ6VXNlcjEzODI5ODY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1382986?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/arnetheduck",
      "html_url": "https://github.com/arnetheduck",
      "followers_url": "https://api.github.com/users/arnetheduck/followers",
      "following_url": "https://api.github.com/users/arnetheduck/following{/other_user}",
      "gists_url": "https://api.github.com/users/arnetheduck/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/arnetheduck/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/arnetheduck/subscriptions",
      "organizations_url": "https://api.github.com/users/arnetheduck/orgs",
      "repos_url": "https://api.github.com/users/arnetheduck/repos",
      "events_url": "https://api.github.com/users/arnetheduck/events{/privacy}",
      "received_events_url": "https://api.github.com/users/arnetheduck/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-13T18:58:53Z",
    "updated_at": "2019-02-13T19:04:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "Ok, I replayed this with a bit more detail this time:\r\n\r\n* we receive block 131 that contains attestations for block 127\r\n* we start processing the block, so `state.slot` has advanced to 131 as well\r\n* `get_current_epoch(state)` returns 2\r\n* `get_epoch_start_slot(2)` = 128\r\n* `127 < 128`, so we're looking at ``previous_justified_epoch` per condition, which at this point is 0\r\n\r\nNow, let's teleport back to when the attestation is created:\r\n\r\n* we've just run the epoch transition, because `127+1 % 64 == 0`\r\n* we've set `state.justified_epoch` to 1 because.. we just ran a epoch transition that allowed this, assuming a majority vote\r\n* we set `attestation.justified_epoch = state.justified_epoch`\r\n\r\nthus, when creating the attestation, the epoch processing is already done while the condition fails to capture this and uses the previous epoch instead... does this make sense? my original description looks a bit off here in terms of where exactly the off-by-one happens\r\n\r\nthe proposed fix, to compare using epoch seems to run into the same ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/463322930/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/463328410",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/618#issuecomment-463328410",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/618",
    "id": 463328410,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MzMyODQxMA==",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-13T19:13:54Z",
    "updated_at": "2019-02-13T19:13:54Z",
    "author_association": "MEMBER",
    "body": "I see now. thank you\r\n\r\nThe problem here is that an attester is attesting to the _post_ state of the block. Which when that block is at the end of the epoch includes the epoch transition.\r\n\r\nYou're right, your proposal is the simplest way to clean it up. Moving the epoch transition to the start of the 0th slot of an epoch cleans this issue up as well, but has some rippling effects in other places. Going to mull it over a bit",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/463328410/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
