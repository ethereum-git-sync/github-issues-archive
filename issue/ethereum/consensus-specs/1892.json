{
  "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1892",
  "repository_url": "https://api.github.com/repos/ethereum/consensus-specs",
  "labels_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1892/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1892/comments",
  "events_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1892/events",
  "html_url": "https://github.com/ethereum/consensus-specs/issues/1892",
  "id": 638488544,
  "node_id": "MDU6SXNzdWU2Mzg0ODg1NDQ=",
  "number": 1892,
  "title": "SSZ spec: Merkleization - Typo in wording",
  "user": {
    "login": "booleanfunction",
    "id": 43776922,
    "node_id": "MDQ6VXNlcjQzNzc2OTIy",
    "avatar_url": "https://avatars.githubusercontent.com/u/43776922?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/booleanfunction",
    "html_url": "https://github.com/booleanfunction",
    "followers_url": "https://api.github.com/users/booleanfunction/followers",
    "following_url": "https://api.github.com/users/booleanfunction/following{/other_user}",
    "gists_url": "https://api.github.com/users/booleanfunction/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/booleanfunction/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/booleanfunction/subscriptions",
    "organizations_url": "https://api.github.com/users/booleanfunction/orgs",
    "repos_url": "https://api.github.com/users/booleanfunction/repos",
    "events_url": "https://api.github.com/users/booleanfunction/events{/privacy}",
    "received_events_url": "https://api.github.com/users/booleanfunction/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1170174610,
      "node_id": "MDU6TGFiZWwxMTcwMTc0NjEw",
      "url": "https://api.github.com/repos/ethereum/consensus-specs/labels/scope:SSZ",
      "name": "scope:SSZ",
      "color": "77428D",
      "default": false,
      "description": "Simple Serialize"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": {
    "login": "protolambda",
    "id": 19571989,
    "node_id": "MDQ6VXNlcjE5NTcxOTg5",
    "avatar_url": "https://avatars.githubusercontent.com/u/19571989?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/protolambda",
    "html_url": "https://github.com/protolambda",
    "followers_url": "https://api.github.com/users/protolambda/followers",
    "following_url": "https://api.github.com/users/protolambda/following{/other_user}",
    "gists_url": "https://api.github.com/users/protolambda/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/protolambda/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/protolambda/subscriptions",
    "organizations_url": "https://api.github.com/users/protolambda/orgs",
    "repos_url": "https://api.github.com/users/protolambda/repos",
    "events_url": "https://api.github.com/users/protolambda/events{/privacy}",
    "received_events_url": "https://api.github.com/users/protolambda/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "protolambda",
      "id": 19571989,
      "node_id": "MDQ6VXNlcjE5NTcxOTg5",
      "avatar_url": "https://avatars.githubusercontent.com/u/19571989?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/protolambda",
      "html_url": "https://github.com/protolambda",
      "followers_url": "https://api.github.com/users/protolambda/followers",
      "following_url": "https://api.github.com/users/protolambda/following{/other_user}",
      "gists_url": "https://api.github.com/users/protolambda/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/protolambda/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/protolambda/subscriptions",
      "organizations_url": "https://api.github.com/users/protolambda/orgs",
      "repos_url": "https://api.github.com/users/protolambda/repos",
      "events_url": "https://api.github.com/users/protolambda/events{/privacy}",
      "received_events_url": "https://api.github.com/users/protolambda/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 13,
  "created_at": "2020-06-15T02:10:00Z",
  "updated_at": "2020-06-23T18:51:40Z",
  "closed_at": "2020-06-23T18:51:40Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "In [simple-serialize.md](https://github.com/ethereum/eth2.0-specs/ssz/simple-serialize.md), within the Merkelization section it says:\r\n\r\n```\r\nWe now define Merkleization hash_tree_root(value) of an object value recursively:\r\n\r\nmerkleize(pack(value)) if value is a basic object or a vector of basic objects.\r\n```\r\n\r\nThis part should exclude bitvectors as they are dealt with separately.\r\n\r\nA suggested wording to correct this typo could be:\r\n\r\n`merkleize(pack(value)) if value is a basic object or a vector of basic objects, excluding bitvectors.\r\n`\r\n",
  "closed_by": {
    "login": "djrtwo",
    "id": 1433595,
    "node_id": "MDQ6VXNlcjE0MzM1OTU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/djrtwo",
    "html_url": "https://github.com/djrtwo",
    "followers_url": "https://api.github.com/users/djrtwo/followers",
    "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
    "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
    "organizations_url": "https://api.github.com/users/djrtwo/orgs",
    "repos_url": "https://api.github.com/users/djrtwo/repos",
    "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
    "received_events_url": "https://api.github.com/users/djrtwo/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1892/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1892/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/643880290",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1892#issuecomment-643880290",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1892",
    "id": 643880290,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0Mzg4MDI5MA==",
    "user": {
      "login": "booleanfunction",
      "id": 43776922,
      "node_id": "MDQ6VXNlcjQzNzc2OTIy",
      "avatar_url": "https://avatars.githubusercontent.com/u/43776922?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/booleanfunction",
      "html_url": "https://github.com/booleanfunction",
      "followers_url": "https://api.github.com/users/booleanfunction/followers",
      "following_url": "https://api.github.com/users/booleanfunction/following{/other_user}",
      "gists_url": "https://api.github.com/users/booleanfunction/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/booleanfunction/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/booleanfunction/subscriptions",
      "organizations_url": "https://api.github.com/users/booleanfunction/orgs",
      "repos_url": "https://api.github.com/users/booleanfunction/repos",
      "events_url": "https://api.github.com/users/booleanfunction/events{/privacy}",
      "received_events_url": "https://api.github.com/users/booleanfunction/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-15T03:18:01Z",
    "updated_at": "2020-06-15T03:18:01Z",
    "author_association": "CONTRIBUTOR",
    "body": "The case for basic lists should also be amended to exclude bitlists, which are also dealt with separately. Hence \r\n`mix_in_length(merkleize(pack(value), limit=chunk_count(type)), len(value)) if value is a list of basic objects.`\r\nshould read:\r\n`mix_in_length(merkleize(pack(value), limit=chunk_count(type)), len(value)) if value is a list of basic objects, excluding bit lists.`",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/643880290/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/644701445",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1892#issuecomment-644701445",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1892",
    "id": 644701445,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0NDcwMTQ0NQ==",
    "user": {
      "login": "protolambda",
      "id": 19571989,
      "node_id": "MDQ6VXNlcjE5NTcxOTg5",
      "avatar_url": "https://avatars.githubusercontent.com/u/19571989?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/protolambda",
      "html_url": "https://github.com/protolambda",
      "followers_url": "https://api.github.com/users/protolambda/followers",
      "following_url": "https://api.github.com/users/protolambda/following{/other_user}",
      "gists_url": "https://api.github.com/users/protolambda/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/protolambda/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/protolambda/subscriptions",
      "organizations_url": "https://api.github.com/users/protolambda/orgs",
      "repos_url": "https://api.github.com/users/protolambda/repos",
      "events_url": "https://api.github.com/users/protolambda/events{/privacy}",
      "received_events_url": "https://api.github.com/users/protolambda/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-16T11:20:14Z",
    "updated_at": "2020-06-16T11:20:14Z",
    "author_association": "MEMBER",
    "body": "Bitvectors and bitlists are not considered to be part of \"basic\" lists and vectors category. Bitlists have a special delimiter bit in serialization, and basic element types are all aligned to bytes. Adding \"excluding\" may clarify it, but at the same time it gives the impression they would be included otherwise, while they should not be.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/644701445/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/644755383",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1892#issuecomment-644755383",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1892",
    "id": 644755383,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0NDc1NTM4Mw==",
    "user": {
      "login": "booleanfunction",
      "id": 43776922,
      "node_id": "MDQ6VXNlcjQzNzc2OTIy",
      "avatar_url": "https://avatars.githubusercontent.com/u/43776922?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/booleanfunction",
      "html_url": "https://github.com/booleanfunction",
      "followers_url": "https://api.github.com/users/booleanfunction/followers",
      "following_url": "https://api.github.com/users/booleanfunction/following{/other_user}",
      "gists_url": "https://api.github.com/users/booleanfunction/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/booleanfunction/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/booleanfunction/subscriptions",
      "organizations_url": "https://api.github.com/users/booleanfunction/orgs",
      "repos_url": "https://api.github.com/users/booleanfunction/repos",
      "events_url": "https://api.github.com/users/booleanfunction/events{/privacy}",
      "received_events_url": "https://api.github.com/users/booleanfunction/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-16T13:13:13Z",
    "updated_at": "2020-06-16T13:13:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "@protolambda Thank you for the reply. My thinking was that when it says `if value is a basic object ...` that it was referring to a basic type of either a boolean or uintN, and so when the rest of the sentence said `or a vector of basic objects` I read it in the same way as if it said _or a vector of booleans or uintNs_ - hence the suggestion to exclude. Can I check that the initial reference to a basic object is meant to be include a boolean? Such that a boolean would be packed using the `pack` function rather than `pack_bits`? ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/644755383/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/644767214",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1892#issuecomment-644767214",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1892",
    "id": 644767214,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0NDc2NzIxNA==",
    "user": {
      "login": "protolambda",
      "id": 19571989,
      "node_id": "MDQ6VXNlcjE5NTcxOTg5",
      "avatar_url": "https://avatars.githubusercontent.com/u/19571989?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/protolambda",
      "html_url": "https://github.com/protolambda",
      "followers_url": "https://api.github.com/users/protolambda/followers",
      "following_url": "https://api.github.com/users/protolambda/following{/other_user}",
      "gists_url": "https://api.github.com/users/protolambda/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/protolambda/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/protolambda/subscriptions",
      "organizations_url": "https://api.github.com/users/protolambda/orgs",
      "repos_url": "https://api.github.com/users/protolambda/repos",
      "events_url": "https://api.github.com/users/protolambda/events{/privacy}",
      "received_events_url": "https://api.github.com/users/protolambda/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-16T13:30:54Z",
    "updated_at": "2020-06-16T13:30:54Z",
    "author_association": "MEMBER",
    "body": "There are two ways to represent a series of booleans: `List[boolean, N]` and `Bitlist[N]`, these are different.\r\n\r\nA `List` will pack basic element types, but does so on a byte level, without any special information about the element type except 1. if it's fixed-length or not, and 2. its byte length. One boolean is serialized as a single byte, so it takes one byte in the list. Also note that empty lists can be serialized as zero bytes thanks to this. A bitlist has a delimiter bit however, which forces a minimum of 1 byte. The one byte per element minimum in hash-tree-root of a regular list is mostly for consistency with serialization.\r\n\r\nBecause this is rather inefficient, and bitfields have other desired use cases as well (big integers, bitshifts, etc.), a separate bitlist type was introduced. And the same thing applies to `Vector[boolean, N]` vs `Bitvector[N]`.\r\n\r\nSo yes, that's why List/Vector uses `pack` and Bitlist/Bitvector uses `pack_bits`\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/644767214/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/644791933",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1892#issuecomment-644791933",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1892",
    "id": 644791933,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0NDc5MTkzMw==",
    "user": {
      "login": "booleanfunction",
      "id": 43776922,
      "node_id": "MDQ6VXNlcjQzNzc2OTIy",
      "avatar_url": "https://avatars.githubusercontent.com/u/43776922?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/booleanfunction",
      "html_url": "https://github.com/booleanfunction",
      "followers_url": "https://api.github.com/users/booleanfunction/followers",
      "following_url": "https://api.github.com/users/booleanfunction/following{/other_user}",
      "gists_url": "https://api.github.com/users/booleanfunction/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/booleanfunction/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/booleanfunction/subscriptions",
      "organizations_url": "https://api.github.com/users/booleanfunction/orgs",
      "repos_url": "https://api.github.com/users/booleanfunction/repos",
      "events_url": "https://api.github.com/users/booleanfunction/events{/privacy}",
      "received_events_url": "https://api.github.com/users/booleanfunction/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-16T14:12:16Z",
    "updated_at": "2020-06-16T14:22:34Z",
    "author_association": "CONTRIBUTOR",
    "body": "@protolambda Thank you for the clarification, the extra detail helps. When I thought about a List[boolean,N] I just assumed it would be implemented as a Bitlist[N] and so read the types as equivalent. Two final queries if that is ok. 1. Would a List[boolean, N] ever be used? Or rather, should it be considered redundant because only bitlists would be used? 2. I just wanted to check that a single boolean is its own type and not to be treated as a bitvector[1]? \r\nThank you.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/644791933/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/644811545",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1892#issuecomment-644811545",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1892",
    "id": 644811545,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0NDgxMTU0NQ==",
    "user": {
      "login": "protolambda",
      "id": 19571989,
      "node_id": "MDQ6VXNlcjE5NTcxOTg5",
      "avatar_url": "https://avatars.githubusercontent.com/u/19571989?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/protolambda",
      "html_url": "https://github.com/protolambda",
      "followers_url": "https://api.github.com/users/protolambda/followers",
      "following_url": "https://api.github.com/users/protolambda/following{/other_user}",
      "gists_url": "https://api.github.com/users/protolambda/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/protolambda/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/protolambda/subscriptions",
      "organizations_url": "https://api.github.com/users/protolambda/orgs",
      "repos_url": "https://api.github.com/users/protolambda/repos",
      "events_url": "https://api.github.com/users/protolambda/events{/privacy}",
      "received_events_url": "https://api.github.com/users/protolambda/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-16T14:45:11Z",
    "updated_at": "2020-06-16T14:45:43Z",
    "author_association": "MEMBER",
    "body": ">  1. Would a List[boolean, N] ever be used?\r\n\r\nIf you need to generalize something, some situaation where you can have any element type, and the list is small, the ability to use a `List[boolean, N]` helps avoid inconsistencies and allows you to make more generic assumptions about sizes (especially the 0-element list case).\r\n\r\n> Or rather, should it be considered redundant because only bitlists would be used?\r\n\r\nNo, not redundant. But definitely not preferred in most common situations.\r\n\r\n> Just wanted to check that a single boolean is its own type and not to be treated as a bitvector[1]\r\n\r\nSerialization and merkleization of indiviudal boolean is the same as a `Bitvector[1]`. But this is more of a coincidence, and I prefer treating a boolean as a separate type, since it matches the boolean definitions in a lot of programming languages as well. E.g. a `bool` in Go is represented as a single byte, that can be either 0 or 1. Since it does not make sense to try and describe something with bits,  when all memory addresses are in bytes. At the same time, it also does not make sense to support all lengths of a bitvector, except length 1. Thus both are valid.\r\n\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/644811545/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/645064612",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1892#issuecomment-645064612",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1892",
    "id": 645064612,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0NTA2NDYxMg==",
    "user": {
      "login": "booleanfunction",
      "id": 43776922,
      "node_id": "MDQ6VXNlcjQzNzc2OTIy",
      "avatar_url": "https://avatars.githubusercontent.com/u/43776922?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/booleanfunction",
      "html_url": "https://github.com/booleanfunction",
      "followers_url": "https://api.github.com/users/booleanfunction/followers",
      "following_url": "https://api.github.com/users/booleanfunction/following{/other_user}",
      "gists_url": "https://api.github.com/users/booleanfunction/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/booleanfunction/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/booleanfunction/subscriptions",
      "organizations_url": "https://api.github.com/users/booleanfunction/orgs",
      "repos_url": "https://api.github.com/users/booleanfunction/repos",
      "events_url": "https://api.github.com/users/booleanfunction/events{/privacy}",
      "received_events_url": "https://api.github.com/users/booleanfunction/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-16T23:38:35Z",
    "updated_at": "2020-06-16T23:49:01Z",
    "author_association": "CONTRIBUTOR",
    "body": "@protolambda Thank you again. This makes sense, I was assuming that say a List[boolean, N] would just (not sure if it is the correct word to use) _default_ to a Bitlist[N], and similarly for vectors/bitvectors, even though I can appreciate that they would be implemented differently - but so knowing there is an intention to allow both makes the wording in the spec clearer. Thank you.\r\n\r\nYou mentioned in your comment above:\r\n\r\n> At the same time, it also does not make sense to support all lengths of a bitvector, except length 1.\r\n\r\nI am not sure if I have missed something, but I wanted to ask if you could please clarify what lengths of a bitvector aren't supported? I read the spec as that for a Bitvector[N], N could be anything greater than 0? Have I missed something? I haven't been able to find anything in py-ssz to restrict N for Bitvectors, other than N > 0, and so I thought I should check.\r\n\r\nI wanted to also note that I saw your new issue #1901 and I will post any further queries to that repo, but just thought it made sense to finish this thread here. I hope that is ok?\r\n\r\nThank you.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/645064612/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/645085890",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1892#issuecomment-645085890",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1892",
    "id": 645085890,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0NTA4NTg5MA==",
    "user": {
      "login": "protolambda",
      "id": 19571989,
      "node_id": "MDQ6VXNlcjE5NTcxOTg5",
      "avatar_url": "https://avatars.githubusercontent.com/u/19571989?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/protolambda",
      "html_url": "https://github.com/protolambda",
      "followers_url": "https://api.github.com/users/protolambda/followers",
      "following_url": "https://api.github.com/users/protolambda/following{/other_user}",
      "gists_url": "https://api.github.com/users/protolambda/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/protolambda/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/protolambda/subscriptions",
      "organizations_url": "https://api.github.com/users/protolambda/orgs",
      "repos_url": "https://api.github.com/users/protolambda/repos",
      "events_url": "https://api.github.com/users/protolambda/events{/privacy}",
      "received_events_url": "https://api.github.com/users/protolambda/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-17T01:00:04Z",
    "updated_at": "2020-06-17T01:00:04Z",
    "author_association": "MEMBER",
    "body": "> clarify what lengths of a bitvector aren't supported?\r\n\r\nEvery length is supported, except 0 because bitvectors are fixed-length and we cannot have 0-length fixed-length data. Sorry if that previous comment was confusing, I was thinking of what it would be like if we tried to remove `bitvector[1]` in favor of `boolean`, but that would just be weird.\r\n\r\n> that is ok?\r\n\r\nYes no problem, feel free to make as many issues you like if you see more issues, the more critical ones may still be worth resolving before we shift to the new ssz specs repo. That said, any help with polishing the new repo, and going through the edge cases in the longer (but hopefully more clear) descriptions is appreciated. Then once there is a more complete transition plan, and `ethereum/eth2.0-ssz` or something similar is set up on github, we can move future SSZ discussion there.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/645085890/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/645695291",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1892#issuecomment-645695291",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1892",
    "id": 645695291,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0NTY5NTI5MQ==",
    "user": {
      "login": "protolambda",
      "id": 19571989,
      "node_id": "MDQ6VXNlcjE5NTcxOTg5",
      "avatar_url": "https://avatars.githubusercontent.com/u/19571989?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/protolambda",
      "html_url": "https://github.com/protolambda",
      "followers_url": "https://api.github.com/users/protolambda/followers",
      "following_url": "https://api.github.com/users/protolambda/following{/other_user}",
      "gists_url": "https://api.github.com/users/protolambda/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/protolambda/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/protolambda/subscriptions",
      "organizations_url": "https://api.github.com/users/protolambda/orgs",
      "repos_url": "https://api.github.com/users/protolambda/repos",
      "events_url": "https://api.github.com/users/protolambda/events{/privacy}",
      "received_events_url": "https://api.github.com/users/protolambda/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-18T00:22:59Z",
    "updated_at": "2020-06-18T00:22:59Z",
    "author_association": "MEMBER",
    "body": "For now, while the future of the other SSZ repo is uncertain (painful discussion about formatting and spec style), shall we get the bitlist/vectors vs basic list/vector thing clarified in the current spec? I could open a PR, or do you want to give it a try, to get started with a small PR to the specs?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/645695291/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/645704151",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1892#issuecomment-645704151",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1892",
    "id": 645704151,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0NTcwNDE1MQ==",
    "user": {
      "login": "booleanfunction",
      "id": 43776922,
      "node_id": "MDQ6VXNlcjQzNzc2OTIy",
      "avatar_url": "https://avatars.githubusercontent.com/u/43776922?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/booleanfunction",
      "html_url": "https://github.com/booleanfunction",
      "followers_url": "https://api.github.com/users/booleanfunction/followers",
      "following_url": "https://api.github.com/users/booleanfunction/following{/other_user}",
      "gists_url": "https://api.github.com/users/booleanfunction/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/booleanfunction/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/booleanfunction/subscriptions",
      "organizations_url": "https://api.github.com/users/booleanfunction/orgs",
      "repos_url": "https://api.github.com/users/booleanfunction/repos",
      "events_url": "https://api.github.com/users/booleanfunction/events{/privacy}",
      "received_events_url": "https://api.github.com/users/booleanfunction/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-18T00:54:20Z",
    "updated_at": "2020-06-18T00:54:20Z",
    "author_association": "CONTRIBUTOR",
    "body": "@protolambda great, thank you. It has taken me a little while to get to where I feel like I understand how the different parts fit together and so being able to ask some questions to clarify a few more things will be great - I am planning to add more notes to our formal verification project to help with understanding background/motivations/intentions - and so hopefully this will also be of help more broadly :)\r\n\r\nAnd well, I was reading over one of your earlier replies and hoped to clarify a couple more things:\r\n\r\n>A List will pack basic element types, but does so on a byte level, without any special information about the element type except 1. if it's fixed-length or not, and 2. its byte length. \r\n\r\n1. I wasn't sure if I was reading this correctly. When you make the reference to special information about whether it is fixed-length or not I wasn't sure if this was still with reference to lists of basic element types or lists more generally? (as basic element types are always fixed-length??)\r\n\r\n>One boolean is serialized as a single byte, so it takes one byte in the list. Also note that empty lists can be serialized as zero bytes thanks to this. \r\n\r\n2. Can I just confirm - Is it just that empty lists can be serialized to zero bytes because that don't need anything extra, like the delimiter needed for bitlists? (i.e. I wasn't sure if I am reading the _thanks to this_ reference correctly.)\r\n\r\nThank you :)\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/645704151/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/645711486",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1892#issuecomment-645711486",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1892",
    "id": 645711486,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0NTcxMTQ4Ng==",
    "user": {
      "login": "protolambda",
      "id": 19571989,
      "node_id": "MDQ6VXNlcjE5NTcxOTg5",
      "avatar_url": "https://avatars.githubusercontent.com/u/19571989?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/protolambda",
      "html_url": "https://github.com/protolambda",
      "followers_url": "https://api.github.com/users/protolambda/followers",
      "following_url": "https://api.github.com/users/protolambda/following{/other_user}",
      "gists_url": "https://api.github.com/users/protolambda/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/protolambda/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/protolambda/subscriptions",
      "organizations_url": "https://api.github.com/users/protolambda/orgs",
      "repos_url": "https://api.github.com/users/protolambda/repos",
      "events_url": "https://api.github.com/users/protolambda/events{/privacy}",
      "received_events_url": "https://api.github.com/users/protolambda/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-18T01:19:43Z",
    "updated_at": "2020-06-18T01:19:43Z",
    "author_association": "MEMBER",
    "body": "> as basic element types are always fixed-length??\r\n\r\nYou are right, I was talking about lists in general there. For lists with a basic element type, the element type is always fixed length, and so you only have to look at the element byte length to handle the serialization.\r\n\r\n> empty lists can be serialized to zero bytes because that don't need anything extra, like the delimiter needed for bitlists?\r\n\r\nExactly, the information of the \"scope\" (the available bytes to decode a value, or the length of the resulting bytes when encoding) is enough to say everything about a basic list: if each element is `A` bytes, and we have `B` elements in the list, then the result is simply `A*B` bytes long, which will be the \"scope\" when decoding it. And all we need for later decoding is to divide the \"scope\" by `A` to get `B`. For that to be valid we will have to check if the scope is a multiple `A`, otherwise the input data would be incomplete, and thus invalid. (And more decoding checks, such as checking the list limit, are all the same as with the other list-like types).\r\n\r\nAnd to clarify some more: lists of complex but fixed-length elements work the same w.r.t. scope and length, except you just need to compute the length of the element type first. Merkleization is different however, since the non-basic types utilize the full 32 bytes of their hash-tree-root, so there is no such thing as packing them together into 32 bytes.\r\n\r\nLong story short, SSZ serialization is really just recursive concatenation, sometimes some offsets to deal with the dynamic-length types, and a few type-specific things like bitlist delimiter bits, or selecting the value in an union.\r\n\r\n\r\n\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/645711486/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/645734264",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1892#issuecomment-645734264",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1892",
    "id": 645734264,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0NTczNDI2NA==",
    "user": {
      "login": "booleanfunction",
      "id": 43776922,
      "node_id": "MDQ6VXNlcjQzNzc2OTIy",
      "avatar_url": "https://avatars.githubusercontent.com/u/43776922?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/booleanfunction",
      "html_url": "https://github.com/booleanfunction",
      "followers_url": "https://api.github.com/users/booleanfunction/followers",
      "following_url": "https://api.github.com/users/booleanfunction/following{/other_user}",
      "gists_url": "https://api.github.com/users/booleanfunction/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/booleanfunction/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/booleanfunction/subscriptions",
      "organizations_url": "https://api.github.com/users/booleanfunction/orgs",
      "repos_url": "https://api.github.com/users/booleanfunction/repos",
      "events_url": "https://api.github.com/users/booleanfunction/events{/privacy}",
      "received_events_url": "https://api.github.com/users/booleanfunction/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-18T02:38:36Z",
    "updated_at": "2020-06-18T02:38:36Z",
    "author_association": "CONTRIBUTOR",
    "body": ">For now, while the future of the other SSZ repo is uncertain (painful discussion about formatting and spec style), shall we get the bitlist/vectors vs basic list/vector thing clarified in the current spec? I could open a PR, or do you want to give it a try, to get started with a small PR to the specs?\r\n\r\n@protolambda I think I was typing my comment when you posted this and so only just realised that I missed this comment! \r\n\r\nSure, that would be great. In some ways I can't believe that it didn't occur to me that the reason the spec is worded that way is because of both, say, Vector[boolean,N] and Bitvector[N] being valid, it seems obvious now!! And so yes, I would be happy to have a go at a PR if that is ok. I will keep it minimal, and certainly please let me know if you think there is a better way. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/645734264/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/648350015",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1892#issuecomment-648350015",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1892",
    "id": 648350015,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0ODM1MDAxNQ==",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-23T18:51:40Z",
    "updated_at": "2020-06-23T18:51:40Z",
    "author_association": "MEMBER",
    "body": "closed via #1912 ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/648350015/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
