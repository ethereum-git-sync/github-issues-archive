{
  "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2389",
  "repository_url": "https://api.github.com/repos/ethereum/consensus-specs",
  "labels_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2389/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2389/comments",
  "events_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2389/events",
  "html_url": "https://github.com/ethereum/consensus-specs/issues/2389",
  "id": 876971417,
  "node_id": "MDU6SXNzdWU4NzY5NzE0MTc=",
  "number": 2389,
  "title": "Merge side-effect: duplicate execution state-root concern",
  "user": {
    "login": "protolambda",
    "id": 19571989,
    "node_id": "MDQ6VXNlcjE5NTcxOTg5",
    "avatar_url": "https://avatars.githubusercontent.com/u/19571989?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/protolambda",
    "html_url": "https://github.com/protolambda",
    "followers_url": "https://api.github.com/users/protolambda/followers",
    "following_url": "https://api.github.com/users/protolambda/following{/other_user}",
    "gists_url": "https://api.github.com/users/protolambda/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/protolambda/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/protolambda/subscriptions",
    "organizations_url": "https://api.github.com/users/protolambda/orgs",
    "repos_url": "https://api.github.com/users/protolambda/repos",
    "events_url": "https://api.github.com/users/protolambda/events{/privacy}",
    "received_events_url": "https://api.github.com/users/protolambda/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 2812431987,
      "node_id": "MDU6TGFiZWwyODEyNDMxOTg3",
      "url": "https://api.github.com/repos/ethereum/consensus-specs/labels/Bellatrix",
      "name": "Bellatrix",
      "color": "1D36aa",
      "default": false,
      "description": "CL+EL Merge"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 3,
  "created_at": "2021-05-06T00:43:13Z",
  "updated_at": "2021-07-07T08:34:54Z",
  "closed_at": null,
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "As far as I'm aware, the state-root in the eth1 block structure is of a MPT of the world-state, a tree of accounts, no data that changes regardless of block contents, with the exception of the block-reward. @djrtwo was [asking](https://github.com/ethereum/eth2.0-specs/pull/2380#discussion_r626969907) about a repeat of the state root in PR #2380 and pointed out [EIP 210](https://eips.ethereum.org/EIPS/eip-210) (block hash history) as something that could touch the state unconditionally (but this EIP isn't actually deployed on mainnet)\r\n\r\nWith the Merge transition to Eth2, we get a fun new edge-case, due to the move of block-rewards from execution layer (block coinbase) to consensus layer (proposer reward), the tree can stay completely untouched if there are no transactions in the block.\r\n\r\nQuestions:\r\n- Is this indeed the case, or is there some additional content in the tree of this state-root?\r\n- Is this tested in Eth1 / future execution engine?\r\n- Are there other ethereum forks that have live examples of duplicate state roots, due to different block reward approach and empty blocks? Maybe a PoA testnet?\r\n\r\nTracking:\r\n- [ ] Add test case for Merge with multiple beacon blocks, but with the same state-root in the execution-payload, in eth2 consensus tests.",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2389/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2389/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/833310277",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2389#issuecomment-833310277",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2389",
    "id": 833310277,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgzMzMxMDI3Nw==",
    "user": {
      "login": "mkalinin",
      "id": 1892772,
      "node_id": "MDQ6VXNlcjE4OTI3NzI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1892772?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mkalinin",
      "html_url": "https://github.com/mkalinin",
      "followers_url": "https://api.github.com/users/mkalinin/followers",
      "following_url": "https://api.github.com/users/mkalinin/following{/other_user}",
      "gists_url": "https://api.github.com/users/mkalinin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mkalinin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mkalinin/subscriptions",
      "organizations_url": "https://api.github.com/users/mkalinin/orgs",
      "repos_url": "https://api.github.com/users/mkalinin/repos",
      "events_url": "https://api.github.com/users/mkalinin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mkalinin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-06T07:49:29Z",
    "updated_at": "2021-05-06T07:59:00Z",
    "author_association": "MEMBER",
    "body": "We have been discussing this side-effect recently during one of the merge calls. It's been said that Clique also tends to have `state_root` unchanged in case if block has no transactions. As a result, a good example of Ethereum network with duplicated state roots is Rinkeby, look at its earliest blocks: [#1](https://rinkeby.etherscan.io/block/1) and [#2](https://rinkeby.etherscan.io/block/2). This is also the case for the merge testnets.\r\n\r\nRelated edge case we get is two beacon blocks point to identical execution blocks (the same block from execution engine perspective) as a result of forking. But as long as this case is processed correctly, i.e. execution block stays valid if imported the second time and stays in the canonical chain even if the second beacon block is orphaned, I think we're OK with that.\r\n\r\n**EDT**\r\nIf we decide to mix randao into execution block structure to maintain randomness then two identical execution blocks won't be the case unless there are two blocks from the same proposer which is a slashable offense.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/833310277/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/833540305",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2389#issuecomment-833540305",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2389",
    "id": 833540305,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgzMzU0MDMwNQ==",
    "user": {
      "login": "mkalinin",
      "id": 1892772,
      "node_id": "MDQ6VXNlcjE4OTI3NzI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1892772?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mkalinin",
      "html_url": "https://github.com/mkalinin",
      "followers_url": "https://api.github.com/users/mkalinin/followers",
      "following_url": "https://api.github.com/users/mkalinin/following{/other_user}",
      "gists_url": "https://api.github.com/users/mkalinin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mkalinin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mkalinin/subscriptions",
      "organizations_url": "https://api.github.com/users/mkalinin/orgs",
      "repos_url": "https://api.github.com/users/mkalinin/repos",
      "events_url": "https://api.github.com/users/mkalinin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mkalinin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-06T13:51:10Z",
    "updated_at": "2021-05-06T13:51:10Z",
    "author_association": "MEMBER",
    "body": "I think we should also take the fact that state trie node is immutable and is either removed entirely or persisted by the canonical chain. IMO, it makes it easier to reason about this edge. The case when a block is dereferenced and removed from the storage should be analysed, in particular, client must not remove the state or a part of it if there is another reference to it from the other block. \r\n\r\nFrom what I know, state pruning algorithms must not remove state nodes that persisted in the canonical chain, because block execution from a fork might insert the same trie nodes as the canonical blocks did. So, when orphaned trie nodes are removed their persistence in the canonical chain is taken in account. These algorithms must either support a ref counting or some alternative technique to handle these cases.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/833540305/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/875407207",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2389#issuecomment-875407207",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2389",
    "id": 875407207,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg3NTQwNzIwNw==",
    "user": {
      "login": "mkalinin",
      "id": 1892772,
      "node_id": "MDQ6VXNlcjE4OTI3NzI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1892772?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mkalinin",
      "html_url": "https://github.com/mkalinin",
      "followers_url": "https://api.github.com/users/mkalinin/followers",
      "following_url": "https://api.github.com/users/mkalinin/following{/other_user}",
      "gists_url": "https://api.github.com/users/mkalinin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mkalinin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mkalinin/subscriptions",
      "organizations_url": "https://api.github.com/users/mkalinin/orgs",
      "repos_url": "https://api.github.com/users/mkalinin/repos",
      "events_url": "https://api.github.com/users/mkalinin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mkalinin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-07-07T08:34:54Z",
    "updated_at": "2021-07-07T08:34:54Z",
    "author_association": "MEMBER",
    "body": "It worth mentioning that https://github.com/ethereum/eth2.0-specs/pull/2479 (`difficulty = randao_mix`) makes the situation when two beacon blocks referencing the same execution block no longer the case",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/875407207/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
