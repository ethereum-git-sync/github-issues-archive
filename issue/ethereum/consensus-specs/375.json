{
  "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/375",
  "repository_url": "https://api.github.com/repos/ethereum/consensus-specs",
  "labels_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/375/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/375/comments",
  "events_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/375/events",
  "html_url": "https://github.com/ethereum/consensus-specs/issues/375",
  "id": 394804379,
  "node_id": "MDU6SXNzdWUzOTQ4MDQzNzk=",
  "number": 375,
  "title": "Proposal for persistent committees",
  "user": {
    "login": "vbuterin",
    "id": 2230894,
    "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vbuterin",
    "html_url": "https://github.com/vbuterin",
    "followers_url": "https://api.github.com/users/vbuterin/followers",
    "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
    "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
    "organizations_url": "https://api.github.com/users/vbuterin/orgs",
    "repos_url": "https://api.github.com/users/vbuterin/repos",
    "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vbuterin/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1170173759,
      "node_id": "MDU6TGFiZWwxMTcwMTczNzU5",
      "url": "https://api.github.com/repos/ethereum/consensus-specs/labels/phase1",
      "name": "phase1",
      "color": "F7C242",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 6,
  "created_at": "2018-12-29T15:33:38Z",
  "updated_at": "2019-04-17T22:43:27Z",
  "closed_at": "2019-04-17T22:43:26Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "One recent desideratum of the spec has been to remove the explicit shufflings (both crosslink and persistent committees) from the state, allowing it to instead be calculated directly from the validator set (see #374 which makes it easy to determine historical validator sets from present state) and a historical RANDAO value. Here is a specific proposal for doing the same for persistent committees.\r\n\r\nPreliminaries:\r\n\r\n* Let `RESHUFFLE_PERIOD = 1024` epochs (~4.5 days). Let `get_randao_mix_at_epoch(e) = latest_randao_mixes[e % LATEST_RANDAO_MIXES_LENGTH]`\r\n* Change the `latest_randao_mixes` array so it stores the last 8192 epoch boundary RANDAOs, not the last 8192 slot RANDAOs.\r\n* Let `reassign_position(validator_index) = validator_index % RESHUFFLE_PERIOD`\r\n\r\n### Proposal 1\r\n\r\nFor every validator, we calculate a \"relevant randao hash\" that changes every RESHUFFLE_PERIOD epochs, but where different validators' hashes change at different times. These hashes are then used to determine what shard a validator is in.\r\n\r\n* Let `epoch(slot) = slot // EPOCH_LENGTH`. Let `relevant_randao_epoch(validator_index, current_slot) = max(0, epoch(current_slot) - (epoch(current_slot) % RESHUFFLE_PERIOD) - RESHUFFLE_PERIOD + reassign_position(validator_index))`\r\n* Let `relevant_randao_hash(validator_index, current_slot) = get_randao_mix_at_epoch(relevant_randao_epoch(validator_index, current_slot))`\r\n\r\nTo determine what shard a validator with some `validator_index` is on, calculate `hash(relevant_randao_hash(validator_index, state.slot) + bytes8(validator_index)) % SHARD_COUNT`.\r\n\r\n### Proposal 2\r\n\r\nLet `current_epoch = epoch(current_slot)`, `reshuffle_epoch = current_epoch - current_epoch % RESHUFFLE_PERIOD - RESHUFFLE_PERIOD`. Use `split(shuffle(get_active_validator_set(reshuffle_slot), get_randao_mix_at_epoch(current_epoch))` to calculate the \"current shard committees\".\r\n\r\nHowever, for any individual validator with some `index`, when the shard committee switches, they continue using the old committee for an additional `hash(get_randao_mix_at_epoch(current_epoch) + bytes8(index)) % RESHUFFLE_PERIOD` epochs.\r\n\r\n### Properties\r\n\r\nBenefits of both proposals:\r\n\r\n* The validators are always roughly evenly distributed between the shards\r\n* Reassignment is predictable at least RESHUFFLE_PERIOD in advance\r\n* No extra storage in the state is required\r\n\r\nDifferences between the two proposals:\r\n\r\n* In proposal 1, every validator's shard is predictable exactly RESHUFFLE_PERIOD in advance, in proposal 2 it's predictable between RESHUFFLE_PERIOD and 2 * RESHUFFLE_PERIOD in advance.\r\n* In proposal 1, validators can target a specific reassignment epoch by targeting a specific time when they deposit. However, the worst case scenario here is simply that a large pool of attackers all get reassigned at roughly the same time, which doesn't directly break anything.\r\n* Proposal 2 puts more pressure on one specific RANDAO value than proposal 1 (though especially with VDFs the effect of this will be limited)\r\n* Proposal 2 allows easy calculation of the _entire_ persistent committee for a specific shard (which is needed eg. to calculate the proposer at any given slot) without going through the entire validator set; proposal 1 does not.\r\n\r\nAt present I lean toward proposal 2 or something similar because of the last item especially, though either seems fundamentally workable.\r\n\r\nRoadmap strategy notes:\r\n\r\n* If we agree that _something like this_ is fundamentally a good idea, we can remove persistent committees from the protocol entirely for phase 0, and move this logic into phase 1.",
  "closed_by": {
    "login": "djrtwo",
    "id": 1433595,
    "node_id": "MDQ6VXNlcjE0MzM1OTU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/djrtwo",
    "html_url": "https://github.com/djrtwo",
    "followers_url": "https://api.github.com/users/djrtwo/followers",
    "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
    "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
    "organizations_url": "https://api.github.com/users/djrtwo/orgs",
    "repos_url": "https://api.github.com/users/djrtwo/repos",
    "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
    "received_events_url": "https://api.github.com/users/djrtwo/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/375/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/375/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/450758160",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/375#issuecomment-450758160",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/375",
    "id": 450758160,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MDc1ODE2MA==",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-01T21:27:55Z",
    "updated_at": "2019-01-01T21:28:04Z",
    "author_association": "MEMBER",
    "body": "For proposal 2, is the following how we would calculate the actual persistent committees at any time?\r\n  * get `prev_persistent_committees` from the `prev_reshuffle_epoch` (`reshuffle_epoch - RESHUFFLE_PERIOD`)\r\n  * get `presistent_committees` from `reshuffle_epoch`\r\n  * gather the indices `swapped_indices` that should be swapped up to `current_epoch`\r\n  * remove `swapped_indices` from `prev_persistent_committees`\r\n  * remove all indices that are not in `swapped_indices` from `persistent_committees`\r\n  * construct `actual_persistent_committees` as:\r\n\r\n```python\r\nactual_persistent_committees = [\r\n    prev_persistent_committees[shard] + persistent_committees[shard]\r\n    for shard in range(SHARD_COUNT)\r\n]\r\n```\r\n\r\nAnd if we use one of the shufflings that allows us to directly calculate positions, then we can easily reduce the above routine to a single shard.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/450758160/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/450758387",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/375#issuecomment-450758387",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/375",
    "id": 450758387,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MDc1ODM4Nw==",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-01T21:31:12Z",
    "updated_at": "2019-01-01T21:31:12Z",
    "author_association": "MEMBER",
    "body": "I think I remember @JustinDrake was keen to have slot granular randao mixes for more optionality to expose to use layer. It should be noted that this proposal removes that granularity.\r\n\r\nI think it's fine. I'm not sure there is much benefit to expose so many mixes. In the event that we have VDFs only the epoch boundaries will be hardened anyway.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/450758387/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/450759566",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/375#issuecomment-450759566",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/375",
    "id": 450759566,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MDc1OTU2Ng==",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-01T21:49:55Z",
    "updated_at": "2019-01-01T21:52:58Z",
    "author_association": "MEMBER",
    "body": "I lean in favor [2] as well. It seems a little less clean due to the varied range of lookahead for each validator, but reducing the overhead required to get the shuffling of a particular shard by 1000x seems like a solid win for resource constrained defines. We need to switch the shuffling alg to something like in #323 to get this benefit, correct?\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/450759566/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/450762482",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/375#issuecomment-450762482",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/375",
    "id": 450762482,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MDc2MjQ4Mg==",
    "user": {
      "login": "JustinDrake",
      "id": 731743,
      "node_id": "MDQ6VXNlcjczMTc0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/731743?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JustinDrake",
      "html_url": "https://github.com/JustinDrake",
      "followers_url": "https://api.github.com/users/JustinDrake/followers",
      "following_url": "https://api.github.com/users/JustinDrake/following{/other_user}",
      "gists_url": "https://api.github.com/users/JustinDrake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JustinDrake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JustinDrake/subscriptions",
      "organizations_url": "https://api.github.com/users/JustinDrake/orgs",
      "repos_url": "https://api.github.com/users/JustinDrake/repos",
      "events_url": "https://api.github.com/users/JustinDrake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JustinDrake/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-01T22:42:50Z",
    "updated_at": "2019-01-01T22:43:10Z",
    "author_association": "MEMBER",
    "body": "> I think I remember @JustinDrake was keen to have slot granular randao mixes for more optionality to expose to use layer.\r\n\r\nI don't care too much about that :) The application layer can use maximally-granular RANDAO mixes extremely simply: just pass in the intermediate values and verify they match the boundary RANDAO mixes.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/450762482/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/450781129",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/375#issuecomment-450781129",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/375",
    "id": 450781129,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MDc4MTEyOQ==",
    "user": {
      "login": "vbuterin",
      "id": 2230894,
      "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vbuterin",
      "html_url": "https://github.com/vbuterin",
      "followers_url": "https://api.github.com/users/vbuterin/followers",
      "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
      "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
      "organizations_url": "https://api.github.com/users/vbuterin/orgs",
      "repos_url": "https://api.github.com/users/vbuterin/repos",
      "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vbuterin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-02T03:19:54Z",
    "updated_at": "2019-01-02T03:19:54Z",
    "author_association": "MEMBER",
    "body": "> For proposal 2, is the following how we would calculate the actual persistent committees at any time?\r\n\r\nThat looks right.\r\n\r\n> We need to switch the shuffling alg to something like in #323 to get this benefit, correct?\r\n\r\nYes.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/450781129/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/484288661",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/375#issuecomment-484288661",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/375",
    "id": 484288661,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4NDI4ODY2MQ==",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-04-17T22:43:26Z",
    "updated_at": "2019-04-17T22:43:26Z",
    "author_association": "MEMBER",
    "body": "This is implemented here https://github.com/ethereum/eth2.0-specs/blob/dev/specs/core/1_shard-data-chains.md#get_persistent_committee\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/484288661/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
