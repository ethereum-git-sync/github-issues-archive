{
  "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/3547",
  "repository_url": "https://api.github.com/repos/ethereum/consensus-specs",
  "labels_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/3547/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/3547/comments",
  "events_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/3547/events",
  "html_url": "https://github.com/ethereum/consensus-specs/issues/3547",
  "id": 1987794133,
  "node_id": "I_kwDOCOoGbc52e1TV",
  "number": 3547,
  "title": "Serving blocks and blob_sidecars in RPC byRoot right after they passed gossip validation",
  "user": {
    "login": "tbenr",
    "id": 15999009,
    "node_id": "MDQ6VXNlcjE1OTk5MDA5",
    "avatar_url": "https://avatars.githubusercontent.com/u/15999009?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tbenr",
    "html_url": "https://github.com/tbenr",
    "followers_url": "https://api.github.com/users/tbenr/followers",
    "following_url": "https://api.github.com/users/tbenr/following{/other_user}",
    "gists_url": "https://api.github.com/users/tbenr/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tbenr/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tbenr/subscriptions",
    "organizations_url": "https://api.github.com/users/tbenr/orgs",
    "repos_url": "https://api.github.com/users/tbenr/repos",
    "events_url": "https://api.github.com/users/tbenr/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tbenr/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 5,
  "created_at": "2023-11-10T15:01:24Z",
  "updated_at": "2023-12-04T15:05:18Z",
  "closed_at": "2023-12-04T15:05:18Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "Assuming a node has not received via gossip a block that has been imported by the majority of the network.\r\n\r\nBefore Deneb, a node can be aware of that block's root when:\r\n\r\n- it sees an attestation voting for it\r\n- it sees the next block building on top of it\r\n\r\nIn both cases it is likely that the node can lookup the block byRoot since both events signals that the block has been imported (probably) by the majority of the network.\r\n\r\nAfter Deneb, there will be a third condition:\r\n\r\n- it sees a valid blob_sidecar carrying the block header.\r\n\r\nThis third event happens way before the the other two, probably before most of the nodes has successfully imported the block.\r\nAnd this applies to blob_sidecars too.\r\n\r\nThus, while pre-Deneb, serving only fully imported blocks seems good enough for client missing them, in Deneb seems not be the case anymore.\r\n\r\nShould we let clients serve byRoot requests for blocks and blob_sidecars that have passed gossip but has not yet fully imported to allow early byRoot recovery?",
  "closed_by": {
    "login": "hwwhww",
    "id": 9263930,
    "node_id": "MDQ6VXNlcjkyNjM5MzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/9263930?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hwwhww",
    "html_url": "https://github.com/hwwhww",
    "followers_url": "https://api.github.com/users/hwwhww/followers",
    "following_url": "https://api.github.com/users/hwwhww/following{/other_user}",
    "gists_url": "https://api.github.com/users/hwwhww/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hwwhww/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hwwhww/subscriptions",
    "organizations_url": "https://api.github.com/users/hwwhww/orgs",
    "repos_url": "https://api.github.com/users/hwwhww/repos",
    "events_url": "https://api.github.com/users/hwwhww/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hwwhww/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/3547/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/3547/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1808867905",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/3547#issuecomment-1808867905",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/3547",
    "id": 1808867905,
    "node_id": "IC_kwDOCOoGbc5r0SJB",
    "user": {
      "login": "terencechain",
      "id": 21316537,
      "node_id": "MDQ6VXNlcjIxMzE2NTM3",
      "avatar_url": "https://avatars.githubusercontent.com/u/21316537?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/terencechain",
      "html_url": "https://github.com/terencechain",
      "followers_url": "https://api.github.com/users/terencechain/followers",
      "following_url": "https://api.github.com/users/terencechain/following{/other_user}",
      "gists_url": "https://api.github.com/users/terencechain/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/terencechain/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/terencechain/subscriptions",
      "organizations_url": "https://api.github.com/users/terencechain/orgs",
      "repos_url": "https://api.github.com/users/terencechain/repos",
      "events_url": "https://api.github.com/users/terencechain/events{/privacy}",
      "received_events_url": "https://api.github.com/users/terencechain/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-11-13T19:18:35Z",
    "updated_at": "2023-11-13T19:18:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "I believe we are dealing with two types of blocks in this scenario:\r\n\r\n1.) Blocks that pass gossip validation but are yet to undergo the state transition function.\r\n2.) Blocks that have successfully passed the state transition function but have not yet been imported into the fork choice.\r\n\r\nWhile these considerations apply to both types, focusing primarily on the second type might be safer. However, it's important to note that after passing through gossip validation, the block will possess a valid signature and proposer index. Consequently, a malicious node would need to either sacrifice a block or risk being slashed to successfully execute any kind of attack",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1808867905/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1809076275",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/3547#issuecomment-1809076275",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/3547",
    "id": 1809076275,
    "node_id": "IC_kwDOCOoGbc5r1FAz",
    "user": {
      "login": "tbenr",
      "id": 15999009,
      "node_id": "MDQ6VXNlcjE1OTk5MDA5",
      "avatar_url": "https://avatars.githubusercontent.com/u/15999009?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tbenr",
      "html_url": "https://github.com/tbenr",
      "followers_url": "https://api.github.com/users/tbenr/followers",
      "following_url": "https://api.github.com/users/tbenr/following{/other_user}",
      "gists_url": "https://api.github.com/users/tbenr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tbenr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tbenr/subscriptions",
      "organizations_url": "https://api.github.com/users/tbenr/orgs",
      "repos_url": "https://api.github.com/users/tbenr/repos",
      "events_url": "https://api.github.com/users/tbenr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tbenr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-11-13T20:47:38Z",
    "updated_at": "2023-11-13T20:47:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "@terencechain right. But to get the most benefit we should go for 1). Not sure if doing it only 2) is worth the change in terms of gained timing, and seems to me that 1) won't introduce any additional risks.\nBut it would be nice to hear from others.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1809076275/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1814486855",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/3547#issuecomment-1814486855",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/3547",
    "id": 1814486855,
    "node_id": "IC_kwDOCOoGbc5sJt9H",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-11-16T13:59:08Z",
    "updated_at": "2023-11-16T13:59:08Z",
    "author_association": "MEMBER",
    "body": "Re: @terencechain's conditions, I have a bit mixed thoughts. Only allowing (2) seems \"safe\", but it might be just as safe as gossip to allow (1) and then remove if (2) fails. Essentially, if it's something that can be forwarded on gossip, then it's something that can/will get to you independent of the full validation. So if you see something (sidecar) with it as a dependency, I think it's okay to get it actively (req/resp) upon the same condition you are expecting it passively (gossip) which is the gossip conditions being validated",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1814486855/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1814627435",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/3547#issuecomment-1814627435",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/3547",
    "id": 1814627435,
    "node_id": "IC_kwDOCOoGbc5sKQRr",
    "user": {
      "login": "terencechain",
      "id": 21316537,
      "node_id": "MDQ6VXNlcjIxMzE2NTM3",
      "avatar_url": "https://avatars.githubusercontent.com/u/21316537?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/terencechain",
      "html_url": "https://github.com/terencechain",
      "followers_url": "https://api.github.com/users/terencechain/followers",
      "following_url": "https://api.github.com/users/terencechain/following{/other_user}",
      "gists_url": "https://api.github.com/users/terencechain/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/terencechain/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/terencechain/subscriptions",
      "organizations_url": "https://api.github.com/users/terencechain/orgs",
      "repos_url": "https://api.github.com/users/terencechain/repos",
      "events_url": "https://api.github.com/users/terencechain/events{/privacy}",
      "received_events_url": "https://api.github.com/users/terencechain/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-11-16T15:01:29Z",
    "updated_at": "2023-11-16T15:01:29Z",
    "author_association": "CONTRIBUTOR",
    "body": "Agree with the above. I'm convinced 1.) is the way to go. I initially said 2.) because most clients verify consensus check in parallel with execution check, and the only difference is ~50ms for Prysm to verify state transition as soon as a block passes gossip. Which might still matter in the grand scheme of things",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1814627435/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1815163022",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/3547#issuecomment-1815163022",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/3547",
    "id": 1815163022,
    "node_id": "IC_kwDOCOoGbc5sMTCO",
    "user": {
      "login": "mkalinin",
      "id": 1892772,
      "node_id": "MDQ6VXNlcjE4OTI3NzI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1892772?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mkalinin",
      "html_url": "https://github.com/mkalinin",
      "followers_url": "https://api.github.com/users/mkalinin/followers",
      "following_url": "https://api.github.com/users/mkalinin/following{/other_user}",
      "gists_url": "https://api.github.com/users/mkalinin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mkalinin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mkalinin/subscriptions",
      "organizations_url": "https://api.github.com/users/mkalinin/orgs",
      "repos_url": "https://api.github.com/users/mkalinin/repos",
      "events_url": "https://api.github.com/users/mkalinin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mkalinin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-11-16T19:17:15Z",
    "updated_at": "2023-11-16T19:17:15Z",
    "author_association": "MEMBER",
    "body": "> So if you see something (sidecar) with it as a dependency, I think it's okay to get it actively (req/resp) upon the same condition you are expecting it passively (gossip) which is the gossip conditions being validated\r\n\r\nMy point on the call was that if you observed a sidecar as a dependency and not yet received the block, it is very likely that peers that you’re connected to have not yet received a block either (otherwise, they would gossip you the block); in this case if BlockByRoot is sent shortly after receiving a sidecar would likely not help to resolve the dependency.\r\n\r\nBut in some cases when a remote peer receives a block e.g. 3.5 seconds into a slot and a local node requests it, additional time to wait for the execution of this block before serving it back can result in the node missing the attestation deadline as after receiving the block it will have to be executed as well. From this perspective run only gossip validation before serving a block makes sense to me",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1815163022/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
