{
  "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1080",
  "repository_url": "https://api.github.com/repos/ethereum/consensus-specs",
  "labels_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1080/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1080/comments",
  "events_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1080/events",
  "html_url": "https://github.com/ethereum/consensus-specs/issues/1080",
  "id": 443512365,
  "node_id": "MDU6SXNzdWU0NDM1MTIzNjU=",
  "number": 1080,
  "title": "Use Legendre as a PRF for the proof of custody",
  "user": {
    "login": "dankrad",
    "id": 6130607,
    "node_id": "MDQ6VXNlcjYxMzA2MDc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6130607?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/dankrad",
    "html_url": "https://github.com/dankrad",
    "followers_url": "https://api.github.com/users/dankrad/followers",
    "following_url": "https://api.github.com/users/dankrad/following{/other_user}",
    "gists_url": "https://api.github.com/users/dankrad/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/dankrad/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/dankrad/subscriptions",
    "organizations_url": "https://api.github.com/users/dankrad/orgs",
    "repos_url": "https://api.github.com/users/dankrad/repos",
    "events_url": "https://api.github.com/users/dankrad/events{/privacy}",
    "received_events_url": "https://api.github.com/users/dankrad/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1063052501,
      "node_id": "MDU6TGFiZWwxMDYzMDUyNTAx",
      "url": "https://api.github.com/repos/ethereum/consensus-specs/labels/general:RFC",
      "name": "general:RFC",
      "color": "00D1B2",
      "default": false,
      "description": "Request for Comments"
    },
    {
      "id": 1170173759,
      "node_id": "MDU6TGFiZWwxMTcwMTczNzU5",
      "url": "https://api.github.com/repos/ethereum/consensus-specs/labels/phase1",
      "name": "phase1",
      "color": "F7C242",
      "default": false,
      "description": ""
    },
    {
      "id": 2000873822,
      "node_id": "MDU6TGFiZWwyMDAwODczODIy",
      "url": "https://api.github.com/repos/ethereum/consensus-specs/labels/scope:custody",
      "name": "scope:custody",
      "color": "E98B2A",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 5,
  "created_at": "2019-05-13T17:17:40Z",
  "updated_at": "2020-04-21T15:15:13Z",
  "closed_at": "2020-04-21T15:15:13Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "I am opening this issue in order to track the progress of my research on using Legendre as a pseudo-random function (PRF) for the proof of custody. This is to give everyone the opportunity to contribute their knowledge as well as get input where people think we need more information before finalizing this decision.\r\n\r\n# Why Legendre?\r\n\r\nThe rationale for doing this is that this would enable validators to use an MPC to compute the proof of custody, so that validator secrets can be shared across multiple parties in a trustless way, without a risk of a minority getting the validator slashed.\r\n\r\n# Suggested construction\r\n\r\nThis is my currently favoured construction: [legendre_proof_of_custody_minimal.pdf](https://github.com/ethereum/eth2.0-specs/files/3173491/legendre_proof_of_custody_minimal.pdf)\r\nIt was designed based on the goals of (1) trying to minimize the number of Legendre invocations (it turns out this is still a major bottleneck in the MPC) and (2) trying to improve the safety of the construction (so I use the output of many Legendre PRFs as the input of another Legendre symbol as a kind of \"MPC-friendly one-bit hash\" in order to mask the Legendre outputs from cryptanalysis).\r\n\r\nA python prototype is available here: https://github.com/ethereum/research/blob/master/proof_of_custody/legendre_aggregate_minimal.py\r\n\r\n## Performance\r\n\r\nThe python prototype currently runs in 65 ms on my PC. The \"old\" implementation using `sha256` needs 8 ms (4096 `sha256` invocations on 560 data bytes). So while it is slower, cleartext performance still seems very reasonable and not like a major issue. Performance improvements on my current python version can almost certainly be made as only ca. 20 ms are spent on computing the Legendre symbol itself (for which I use GMP).\r\n\r\n## MPC friendliness\r\n\r\nIt appears that Legendre is by far the most MPC-friendly PRF known, especially if only one bit of output is needed as in our case [1]. Even given this, however, getting reasonable performance on 2 MB inputs requires some optimization. The construction above uses the property that the XOR of several Legendre \"bits\" is actually the same as multiplying the inputs and then computing one Legendre of the product, which enables us to cut down the number of actual Legendre invocations by a factor of 10 to only 4096 invocations.\r\n\r\nHere is a reference implementation of this using the SCALE-MAMBA system [2]: https://github.com/ethereum/research/blob/master/proof_of_custody/legendre_aggregate_minimal.mpc\r\n\r\nThe online phase with 3 players runs in 14s locally and in 29 s under WAN conditions (using`tc qdisc add dev lo root netem rate 50000kbit delay 100ms` to emulate). There is significant optimization potential by utilizing vectoring inside the SCALE-MAMBA system and the current program is not optimized for rounds, so I think latency will not be the main issue. Currently the per-player communication required (each node sends *and* receives this amount of data) is 22.86 MB (of which 4.52 MB in the online thread, the remainder can be precomputed to reduce latency).\r\n\r\nLikely the MPC can be further optimized using the MPC-method developed in [4]. This is especially promising as it only needs a constant amount of computation for any number of parties.\r\n\r\n## Safety\r\n\r\nSafety in our case means that there is no way someone can extract the proof of custody secret from the output of the custody bits.\r\n\r\n### Classical safety\r\n\r\nCurrently, there are no known classical attacks against the Legendre PRF. The best known classical algorithm is O(p) [5], i.e. exponential. So far research is limited and the problem has not been covered as much as many other more well-known crypto primitives such as RSA or EC.\r\nAccording to Dan Boneh, \"Generally, the Legendre PRF is a secure PRF\", and the iterative construction makes the problem harder [6]. Of course, it would be nice to have some more information on that, and I am currently looking for someone who can prove that the iterative construction is actually harder to analyse, in a similar way as Damg√•rd did in his original paper when suggesting the Legendre PRF [7], where he showed stronger security of the Jacobi symbol given weak assumptions on the Legendre symbol.\r\n\r\nQuite a lot of work has been done on the Legendre symbol as a random number generator. In that respect it seems to have almost ideal properties (very low correlations and a perfectly flat spectrum as it is an eigenvector of the Fourier transform). Note however that this does not indicate cryptographic security by itself. \r\n\r\n### Quantum safety\r\n\r\nCurrently, all known quantum algorithms ([5], [8]) are based on a *quantum* evaluation of the Shifted Legendre symbol (whereas in our case, the quantum algorithm would only have a finite number of *classical* evaluations to work with). From this perspective, the quantum safety of the Legendre PRF is currently unknown. According to Wim van Dam (author of [8]), a couple of people have thought about the problem and didn't find an algorithm for the classical query problem. \r\n\r\n## Computing the secret\r\n\r\nThe proof of custody secret is currently one of the \"derived\" secrets of the phase 0 spec, which means it is the BLS signature of a given epoch. This signature can be represented by two numbers *a* and *b* ‚àà ùîΩ<sub>q^2</sub>. Since one can be computed using the other (modulo one extra bit), *a* can be used as the canonical representation of the signature. Now *a* itself as an element of ùîΩ<sub>q^2</sub> is represented by two ùîΩ<sub>q</sub>-numbers *s<sub>1</sub>, s<sub>2</sub>*. My construction uses these as the secrets for the Legendre-based proof of custody, which comes very natural as they are already ùîΩ<sub>q</sub> numbers.\r\n\r\nAssuming that the the participants have *t*-threshold Shamir shares of their secret, we still need a way to securely compute *s<sub>1</sub>* and *s<sub>2</sub>*. A proof of concept for doing this in an MPC in order to get shares of *s<sub>1</sub>* and *s<sub>2</sub>* can be found here: https://github.com/ethereum/research/blob/master/proof_of_custody/bls_sign.mpc\r\n\r\n# Alternatives\r\n\r\nWhile there are other MPC-friendly PRFs ([1] has a good summary except for some more recent and very experimental ones), none of them are even close to Legendre in performance. Given that MPC performance is still a bottleneck at the current stage of research, I think none of these will be viable.\r\n\r\nAn alternative proposed by Dan Boneh and others are so-called key-homomorphic PRFs, which are homomorphic with regards to addition of the key. This would of course be a very natural way to have a shared proof of custody without needing an MPC. The most promising one is the DDH PRF, which is basically hash(x)^s in a Diffie-Hellman group. If we do this inside BLS12-381, this is actually just a BLS signature :) However, we have considered this scheme before and rejected it due to poor cleartext performance (state of the art is 3 ms for a BLS signature, so the cleartext computation would take 10s of seconds). Using modular exponentiation is similar at 10 ms per exponentiation for 2048 bit primes, which seems to be the recommended size. \r\n\r\n[1] https://eprint.iacr.org/2016/542.pdf\r\n[2] https://github.com/KULeuven-COSIC/SCALE-MAMBA\r\n[3] https://eprint.iacr.org/2011/535.pdf\r\n[4] https://eprint.iacr.org/2018/570.pdf\r\n[5] https://arxiv.org/pdf/quant-ph/0212016.pdf\r\n[6] Private communication\r\n[7] https://link.springer.com/content/pdf/10.1007%2F0-387-34799-2_13.pdf\r\n[8] https://arxiv.org/pdf/quant-ph/0011067.pdf",
  "closed_by": {
    "login": "JustinDrake",
    "id": 731743,
    "node_id": "MDQ6VXNlcjczMTc0Mw==",
    "avatar_url": "https://avatars.githubusercontent.com/u/731743?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/JustinDrake",
    "html_url": "https://github.com/JustinDrake",
    "followers_url": "https://api.github.com/users/JustinDrake/followers",
    "following_url": "https://api.github.com/users/JustinDrake/following{/other_user}",
    "gists_url": "https://api.github.com/users/JustinDrake/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/JustinDrake/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/JustinDrake/subscriptions",
    "organizations_url": "https://api.github.com/users/JustinDrake/orgs",
    "repos_url": "https://api.github.com/users/JustinDrake/repos",
    "events_url": "https://api.github.com/users/JustinDrake/events{/privacy}",
    "received_events_url": "https://api.github.com/users/JustinDrake/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1080/reactions",
    "total_count": 3,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 2,
    "rocket": 1,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1080/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/493233879",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1080#issuecomment-493233879",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1080",
    "id": 493233879,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5MzIzMzg3OQ==",
    "user": {
      "login": "dankrad",
      "id": 6130607,
      "node_id": "MDQ6VXNlcjYxMzA2MDc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6130607?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dankrad",
      "html_url": "https://github.com/dankrad",
      "followers_url": "https://api.github.com/users/dankrad/followers",
      "following_url": "https://api.github.com/users/dankrad/following{/other_user}",
      "gists_url": "https://api.github.com/users/dankrad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dankrad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dankrad/subscriptions",
      "organizations_url": "https://api.github.com/users/dankrad/orgs",
      "repos_url": "https://api.github.com/users/dankrad/repos",
      "events_url": "https://api.github.com/users/dankrad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dankrad/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-16T21:12:52Z",
    "updated_at": "2019-05-16T21:12:52Z",
    "author_association": "MEMBER",
    "body": "Update: BLS signature MPC proof of concept is now done. Doing the full ECMUL in an MPC is actually not too expensive (similar cost to one proof of custody computation), so no need for fancy tricks.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/493233879/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/494956374",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1080#issuecomment-494956374",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1080",
    "id": 494956374,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5NDk1NjM3NA==",
    "user": {
      "login": "dankrad",
      "id": 6130607,
      "node_id": "MDQ6VXNlcjYxMzA2MDc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6130607?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dankrad",
      "html_url": "https://github.com/dankrad",
      "followers_url": "https://api.github.com/users/dankrad/followers",
      "following_url": "https://api.github.com/users/dankrad/following{/other_user}",
      "gists_url": "https://api.github.com/users/dankrad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dankrad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dankrad/subscriptions",
      "organizations_url": "https://api.github.com/users/dankrad/orgs",
      "repos_url": "https://api.github.com/users/dankrad/repos",
      "events_url": "https://api.github.com/users/dankrad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dankrad/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-22T20:21:19Z",
    "updated_at": "2019-05-22T20:21:19Z",
    "author_association": "MEMBER",
    "body": "An update on the MPC implementation: I now found a way to reliably test the total communication in the 2 out of 3 MPC case using the SCALE-MAMBA system:\r\n - proof of custody computation: 22.86 MB\r\n - BLS signature MPC: 23.83 MB\r\n(The original 60 MB figure was due to the system doing some extra \"preparation work\" that was not actually needed).\r\n\r\nNote that these figures scale with n^2 in the number of parties, so this system would still be quite unattractive for more than about 5-10 parties. There are protocols (e.g. https://eprint.iacr.org/2018/570) that do this _constant_ in the number of parties, at least for the multiplications, and my back-of-the-envelope computation indicates that we would also end up with somewhere between 20-30 MB. I am currently investigating how to best implement this paper in order to benchmark it.\r\n\r\nOverall, I am now very confident that this construction allows an efficient computation of the proof of custody using an MPC.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/494956374/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/507800091",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1080#issuecomment-507800091",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1080",
    "id": 507800091,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwNzgwMDA5MQ==",
    "user": {
      "login": "dankrad",
      "id": 6130607,
      "node_id": "MDQ6VXNlcjYxMzA2MDc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6130607?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dankrad",
      "html_url": "https://github.com/dankrad",
      "followers_url": "https://api.github.com/users/dankrad/followers",
      "following_url": "https://api.github.com/users/dankrad/following{/other_user}",
      "gists_url": "https://api.github.com/users/dankrad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dankrad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dankrad/subscriptions",
      "organizations_url": "https://api.github.com/users/dankrad/orgs",
      "repos_url": "https://api.github.com/users/dankrad/repos",
      "events_url": "https://api.github.com/users/dankrad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dankrad/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-07-02T18:47:20Z",
    "updated_at": "2019-07-02T18:47:20Z",
    "author_association": "MEMBER",
    "body": "So there have been some small updates to the construction I suggested, mainly to correct for a possible attack vector that Justin suggested: Setting many of the subchunks to the same value introduces a lot of \"squares\" in the Legendre evaluation, which means while their value itself cannot be predicted, their combined value would always be 1. This would allow an attacker to \"pierce through\" the iterated Legendre construction, if they had full control of all the data in the proof of custody, and proble single Legendre bits (which is still safe if Legendre is a good PRF, but remove the additional safety layers).\r\n\r\nAnyway, this attack vector can be removed by adding multiples of the secret, which removes the ability of an attacker to create squares unless they know the derived secret.\r\n\r\nOne further change I have made is that the subchunks are now 10*48 and 1*32 bytes (total of 11 subchunks per chunk), which is more in line with the general spec in terms of byte sizes.\r\n\r\nHere is an updated writeup: [legendre_proof_of_custody_minimal_protected.pdf](https://github.com/ethereum/eth2.0-specs/files/3351858/legendre_proof_of_custody_minimal_protected.pdf) - I am still looking for cryptographers who are interested in examining this further.\r\n\r\nUpdated MPC and Python code: https://github.com/ethereum/research/tree/master/proof_of_custody\r\n(Now the SCALE-MAMBA takes 24.66 MB of communications, slight increase due to increasing subchunks from 10 to 11)\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/507800091/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/565850197",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1080#issuecomment-565850197",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1080",
    "id": 565850197,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2NTg1MDE5Nw==",
    "user": {
      "login": "JustinDrake",
      "id": 731743,
      "node_id": "MDQ6VXNlcjczMTc0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/731743?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JustinDrake",
      "html_url": "https://github.com/JustinDrake",
      "followers_url": "https://api.github.com/users/JustinDrake/followers",
      "following_url": "https://api.github.com/users/JustinDrake/following{/other_user}",
      "gists_url": "https://api.github.com/users/JustinDrake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JustinDrake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JustinDrake/subscriptions",
      "organizations_url": "https://api.github.com/users/JustinDrake/orgs",
      "repos_url": "https://api.github.com/users/JustinDrake/repos",
      "events_url": "https://api.github.com/users/JustinDrake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JustinDrake/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-12-15T21:47:22Z",
    "updated_at": "2019-12-15T21:47:22Z",
    "author_association": "MEMBER",
    "body": "@dankrad Do you want to share a summary of what's happened in the last ~6 months regarding Legendre?\r\n\r\n(Off the top of my head: Dmitry found an attack, you setup a bounty program, three teams independently found an improvement to Dmitry's attack, some of the easier bounties were claimed, a paper was published, and recently a further small attack improvement was found. As I see it, using Legendre remains the plan as it is still far from being broken for our use case and we don't have much choice anyway in the context of the new per-slot crosslinks.)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/565850197/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/617155664",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1080#issuecomment-617155664",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1080",
    "id": 617155664,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxNzE1NTY2NA==",
    "user": {
      "login": "JustinDrake",
      "id": 731743,
      "node_id": "MDQ6VXNlcjczMTc0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/731743?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JustinDrake",
      "html_url": "https://github.com/JustinDrake",
      "followers_url": "https://api.github.com/users/JustinDrake/followers",
      "following_url": "https://api.github.com/users/JustinDrake/following{/other_user}",
      "gists_url": "https://api.github.com/users/JustinDrake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JustinDrake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JustinDrake/subscriptions",
      "organizations_url": "https://api.github.com/users/JustinDrake/orgs",
      "repos_url": "https://api.github.com/users/JustinDrake/repos",
      "events_url": "https://api.github.com/users/JustinDrake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JustinDrake/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-04-21T12:43:39Z",
    "updated_at": "2020-04-21T15:15:10Z",
    "author_association": "MEMBER",
    "body": "@dankrad Can we close this issue? :)\r\n\r\n**Edit**: Discussed this with Dankrad who confirmed we can close :)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/617155664/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
