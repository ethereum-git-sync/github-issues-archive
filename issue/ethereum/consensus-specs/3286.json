{
  "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/3286",
  "repository_url": "https://api.github.com/repos/ethereum/consensus-specs",
  "labels_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/3286/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/3286/comments",
  "events_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/3286/events",
  "html_url": "https://github.com/ethereum/consensus-specs/issues/3286",
  "id": 1617704699,
  "node_id": "I_kwDOCOoGbc5gbDb7",
  "number": 3286,
  "title": "[Discussion] Support external blob servers? Non blob-gossip listening nodes?",
  "user": {
    "login": "realbigsean",
    "id": 5160426,
    "node_id": "MDQ6VXNlcjUxNjA0MjY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5160426?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/realbigsean",
    "html_url": "https://github.com/realbigsean",
    "followers_url": "https://api.github.com/users/realbigsean/followers",
    "following_url": "https://api.github.com/users/realbigsean/following{/other_user}",
    "gists_url": "https://api.github.com/users/realbigsean/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/realbigsean/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/realbigsean/subscriptions",
    "organizations_url": "https://api.github.com/users/realbigsean/orgs",
    "repos_url": "https://api.github.com/users/realbigsean/repos",
    "events_url": "https://api.github.com/users/realbigsean/events{/privacy}",
    "received_events_url": "https://api.github.com/users/realbigsean/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2023-03-09T17:44:24Z",
  "updated_at": "2023-03-09T20:42:26Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "This came up on AC/DC today. Discussion was started here: https://github.com/ethereum/beacon-APIs/pull/302\r\n\r\nShould a class of beacon nodes that don't participate in blob gossip be supported? What would that look like?\r\n\r\nReasons to support:\r\n- The bandwidth requirements of operating a full node are going to increase and there will some homestakers for whom it is no longer tenable\r\n- The amplification factor in gossip mean every node will download more blob data than it strictly has to. With this we can decrease it to 1 for those stakers\r\n\r\nReasons to not support:\r\n- \"data availability\" in ethereum now really seems at its core to come from gossip and every node not participating in blob gossip weakens this\r\n- as @arnetheduck suggests we can rather focus on optimizing gossip to reduce bandwidth by other means\r\n- centralization of the data availability check is bad, it's outsourcing block validation at the end of the day ",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/3286/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/3286/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1462769687",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/3286#issuecomment-1462769687",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/3286",
    "id": 1462769687,
    "node_id": "IC_kwDOCOoGbc5XMBgX",
    "user": {
      "login": "dankrad",
      "id": 6130607,
      "node_id": "MDQ6VXNlcjYxMzA2MDc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6130607?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dankrad",
      "html_url": "https://github.com/dankrad",
      "followers_url": "https://api.github.com/users/dankrad/followers",
      "following_url": "https://api.github.com/users/dankrad/following{/other_user}",
      "gists_url": "https://api.github.com/users/dankrad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dankrad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dankrad/subscriptions",
      "organizations_url": "https://api.github.com/users/dankrad/orgs",
      "repos_url": "https://api.github.com/users/dankrad/repos",
      "events_url": "https://api.github.com/users/dankrad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dankrad/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-09T20:42:25Z",
    "updated_at": "2023-03-09T20:42:25Z",
    "author_association": "MEMBER",
    "body": "> centralization of the data availability check is bad, it's outsourcing block validation at the end of the day\r\n\r\nOn the last point, it's not true that it is \"outsourcing\" as long as you are still downloading the data. It is a 100% valid data availability check, the downside is that it can be disrupted by this central provider (i.e. liveness rather than safety risk).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1462769687/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
