{
  "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/3057",
  "repository_url": "https://api.github.com/repos/ethereum/consensus-specs",
  "labels_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/3057/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/3057/comments",
  "events_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/3057/events",
  "html_url": "https://github.com/ethereum/consensus-specs/issues/3057",
  "id": 1419900677,
  "node_id": "I_kwDOCOoGbc5UofcF",
  "number": 3057,
  "title": "EIP4844: Add check to ensure Blobs are canonical",
  "user": {
    "login": "kevaundray",
    "id": 37423678,
    "node_id": "MDQ6VXNlcjM3NDIzNjc4",
    "avatar_url": "https://avatars.githubusercontent.com/u/37423678?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/kevaundray",
    "html_url": "https://github.com/kevaundray",
    "followers_url": "https://api.github.com/users/kevaundray/followers",
    "following_url": "https://api.github.com/users/kevaundray/following{/other_user}",
    "gists_url": "https://api.github.com/users/kevaundray/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/kevaundray/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/kevaundray/subscriptions",
    "organizations_url": "https://api.github.com/users/kevaundray/orgs",
    "repos_url": "https://api.github.com/users/kevaundray/repos",
    "events_url": "https://api.github.com/users/kevaundray/events{/privacy}",
    "received_events_url": "https://api.github.com/users/kevaundray/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 8,
  "created_at": "2022-10-23T19:29:17Z",
  "updated_at": "2022-11-03T15:05:57Z",
  "closed_at": "2022-11-03T15:05:57Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "### Problem \r\n\r\nWhen we receive a blob as a sequence of bytes and interpret it as a integer mod p, we do not check that the byte representation is canonical.\r\n\r\n**Example**\r\n\r\nLets say p is 5.\r\n\r\nIf I have a byte array `b1` which encodes the integer 2 and a byte array `b2` which encodes the integer `7`. When I convert both byte arrays to an integer mod 5, they will both produce the value 2.\r\n\r\nThis can be a problem because two different blobs will produce the same commitment.\r\n\r\n### Solution \r\n\r\nCheck that the integer mod p when converted back to a byte array, does indeed produce the original byte array.",
  "closed_by": {
    "login": "kevaundray",
    "id": 37423678,
    "node_id": "MDQ6VXNlcjM3NDIzNjc4",
    "avatar_url": "https://avatars.githubusercontent.com/u/37423678?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/kevaundray",
    "html_url": "https://github.com/kevaundray",
    "followers_url": "https://api.github.com/users/kevaundray/followers",
    "following_url": "https://api.github.com/users/kevaundray/following{/other_user}",
    "gists_url": "https://api.github.com/users/kevaundray/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/kevaundray/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/kevaundray/subscriptions",
    "organizations_url": "https://api.github.com/users/kevaundray/orgs",
    "repos_url": "https://api.github.com/users/kevaundray/repos",
    "events_url": "https://api.github.com/users/kevaundray/events{/privacy}",
    "received_events_url": "https://api.github.com/users/kevaundray/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/3057/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/3057/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1289114768",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/3057#issuecomment-1289114768",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/3057",
    "id": 1289114768,
    "node_id": "IC_kwDOCOoGbc5M1lSQ",
    "user": {
      "login": "Inphi",
      "id": 3516807,
      "node_id": "MDQ6VXNlcjM1MTY4MDc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3516807?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Inphi",
      "html_url": "https://github.com/Inphi",
      "followers_url": "https://api.github.com/users/Inphi/followers",
      "following_url": "https://api.github.com/users/Inphi/following{/other_user}",
      "gists_url": "https://api.github.com/users/Inphi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Inphi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Inphi/subscriptions",
      "organizations_url": "https://api.github.com/users/Inphi/orgs",
      "repos_url": "https://api.github.com/users/Inphi/repos",
      "events_url": "https://api.github.com/users/Inphi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Inphi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-10-24T14:22:15Z",
    "updated_at": "2022-10-24T14:22:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "This is sorta specified in the `BLSFieldElement` type description used to represent each point in a blob. While it should also be explicitly done in the executable spec, it'll depend on client implementations where to make such checks. Since the blobs are sourced from execution, clients can only trust that blobs are encoded correctly.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1289114768/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1289281208",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/3057#issuecomment-1289281208",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/3057",
    "id": 1289281208,
    "node_id": "IC_kwDOCOoGbc5M2N64",
    "user": {
      "login": "kevaundray",
      "id": 37423678,
      "node_id": "MDQ6VXNlcjM3NDIzNjc4",
      "avatar_url": "https://avatars.githubusercontent.com/u/37423678?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kevaundray",
      "html_url": "https://github.com/kevaundray",
      "followers_url": "https://api.github.com/users/kevaundray/followers",
      "following_url": "https://api.github.com/users/kevaundray/following{/other_user}",
      "gists_url": "https://api.github.com/users/kevaundray/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kevaundray/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kevaundray/subscriptions",
      "organizations_url": "https://api.github.com/users/kevaundray/orgs",
      "repos_url": "https://api.github.com/users/kevaundray/repos",
      "events_url": "https://api.github.com/users/kevaundray/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kevaundray/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-10-24T16:21:42Z",
    "updated_at": "2022-10-24T16:21:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "> This is sorta specified in the `BLSFieldElement` type description used to represent each point in a blob. While it should also be explicitly done in the executable spec, it'll depend on client implementations where to make such checks. Since the blobs are sourced from execution, clients can only trust that blobs are encoded correctly.\r\n\r\nAfter 3038, is it possible that these checks are moved solely to the cryptography functions that create and verify proofs?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1289281208/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1289679032",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/3057#issuecomment-1289679032",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/3057",
    "id": 1289679032,
    "node_id": "IC_kwDOCOoGbc5M3vC4",
    "user": {
      "login": "Inphi",
      "id": 3516807,
      "node_id": "MDQ6VXNlcjM1MTY4MDc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3516807?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Inphi",
      "html_url": "https://github.com/Inphi",
      "followers_url": "https://api.github.com/users/Inphi/followers",
      "following_url": "https://api.github.com/users/Inphi/following{/other_user}",
      "gists_url": "https://api.github.com/users/Inphi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Inphi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Inphi/subscriptions",
      "organizations_url": "https://api.github.com/users/Inphi/orgs",
      "repos_url": "https://api.github.com/users/Inphi/repos",
      "events_url": "https://api.github.com/users/Inphi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Inphi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-10-24T22:04:59Z",
    "updated_at": "2022-10-24T22:04:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "> After 3038, is it possible that these checks are moved solely to the cryptography functions that create and verify proofs?\r\n\r\nThat won't do since the blob encoding is up to the user. For example, Blobs could be packed tightly where unused bits in the field element could be used to encode the next byte. This is a non-canonical but valid usecase. \r\nSince encoding isn't context-free, only the user/encoder will be able to determine whether the blobs should be canonical.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1289679032/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1289782798",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/3057#issuecomment-1289782798",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/3057",
    "id": 1289782798,
    "node_id": "IC_kwDOCOoGbc5M4IYO",
    "user": {
      "login": "kevaundray",
      "id": 37423678,
      "node_id": "MDQ6VXNlcjM3NDIzNjc4",
      "avatar_url": "https://avatars.githubusercontent.com/u/37423678?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kevaundray",
      "html_url": "https://github.com/kevaundray",
      "followers_url": "https://api.github.com/users/kevaundray/followers",
      "following_url": "https://api.github.com/users/kevaundray/following{/other_user}",
      "gists_url": "https://api.github.com/users/kevaundray/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kevaundray/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kevaundray/subscriptions",
      "organizations_url": "https://api.github.com/users/kevaundray/orgs",
      "repos_url": "https://api.github.com/users/kevaundray/repos",
      "events_url": "https://api.github.com/users/kevaundray/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kevaundray/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-10-24T23:38:23Z",
    "updated_at": "2022-10-24T23:38:23Z",
    "author_association": "CONTRIBUTOR",
    "body": "> > After 3038, is it possible that these checks are moved solely to the cryptography functions that create and verify proofs?\n> \n> \n> \n> That won't do since the blob encoding is up to the user. For example, Blobs could be packed tightly where unused bits in the field element could be used to encode the next byte. This is a non-canonical but valid usecase. \n> \n> Since encoding isn't context-free, only the user/encoder will be able to determine whether the blobs should be canonical.\n\nAh I didn't know that, so blobs do not need to be canonical and in fact this should not be checked by the cryptography code since it doesn't have the context to decide this.\n\nCan you explain why it would not be a problem, if two different blobs, A and B, produced the same commitment, where in both cases the encoder is expecting a non-canonical blob?   \n\nIn particular, what context can one use to determine that blob A is the correct non-canonical blob? ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1289782798/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1290620864",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/3057#issuecomment-1290620864",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/3057",
    "id": 1290620864,
    "node_id": "IC_kwDOCOoGbc5M7U_A",
    "user": {
      "login": "Inphi",
      "id": 3516807,
      "node_id": "MDQ6VXNlcjM1MTY4MDc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3516807?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Inphi",
      "html_url": "https://github.com/Inphi",
      "followers_url": "https://api.github.com/users/Inphi/followers",
      "following_url": "https://api.github.com/users/Inphi/following{/other_user}",
      "gists_url": "https://api.github.com/users/Inphi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Inphi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Inphi/subscriptions",
      "organizations_url": "https://api.github.com/users/Inphi/orgs",
      "repos_url": "https://api.github.com/users/Inphi/repos",
      "events_url": "https://api.github.com/users/Inphi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Inphi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-10-25T14:09:05Z",
    "updated_at": "2022-10-25T14:09:05Z",
    "author_association": "CONTRIBUTOR",
    "body": "Yup,  the cryptography code shouldn't check the encoding.\r\n\r\nIf two pieces of _data_, A and B, generate the same _blob_ and thus commitment, then that's a problem with the encoding. I'd attribute that to User Error and not a real problem that can be solved by the specs.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1290620864/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1290623055",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/3057#issuecomment-1290623055",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/3057",
    "id": 1290623055,
    "node_id": "IC_kwDOCOoGbc5M7VhP",
    "user": {
      "login": "Inphi",
      "id": 3516807,
      "node_id": "MDQ6VXNlcjM1MTY4MDc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3516807?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Inphi",
      "html_url": "https://github.com/Inphi",
      "followers_url": "https://api.github.com/users/Inphi/followers",
      "following_url": "https://api.github.com/users/Inphi/following{/other_user}",
      "gists_url": "https://api.github.com/users/Inphi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Inphi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Inphi/subscriptions",
      "organizations_url": "https://api.github.com/users/Inphi/orgs",
      "repos_url": "https://api.github.com/users/Inphi/repos",
      "events_url": "https://api.github.com/users/Inphi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Inphi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-10-25T14:10:43Z",
    "updated_at": "2022-10-25T14:10:43Z",
    "author_association": "CONTRIBUTOR",
    "body": "What we're trying to solve with \"Data Availability\" is really \"Blob Availability\". (and maybe we should rename it for accuracy :-)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1290623055/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1290741744",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/3057#issuecomment-1290741744",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/3057",
    "id": 1290741744,
    "node_id": "IC_kwDOCOoGbc5M7yfw",
    "user": {
      "login": "protolambda",
      "id": 19571989,
      "node_id": "MDQ6VXNlcjE5NTcxOTg5",
      "avatar_url": "https://avatars.githubusercontent.com/u/19571989?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/protolambda",
      "html_url": "https://github.com/protolambda",
      "followers_url": "https://api.github.com/users/protolambda/followers",
      "following_url": "https://api.github.com/users/protolambda/following{/other_user}",
      "gists_url": "https://api.github.com/users/protolambda/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/protolambda/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/protolambda/subscriptions",
      "organizations_url": "https://api.github.com/users/protolambda/orgs",
      "repos_url": "https://api.github.com/users/protolambda/repos",
      "events_url": "https://api.github.com/users/protolambda/events{/privacy}",
      "received_events_url": "https://api.github.com/users/protolambda/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-10-25T15:23:03Z",
    "updated_at": "2022-10-25T15:23:03Z",
    "author_association": "MEMBER",
    "body": "I don't like the idea of quietly applying a modulus or bit truncation on input that's otherwise invalid, +1 on making the the input validation on crypto functions strict. The cryptography code maybe shouldn't have the responsibility to actually perform the checks if we can demand valid inputs from the user before the crypto function is called, but we should make the specs strict on input.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1290741744/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1302251820",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/3057#issuecomment-1302251820",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/3057",
    "id": 1302251820,
    "node_id": "IC_kwDOCOoGbc5Nnsks",
    "user": {
      "login": "kevaundray",
      "id": 37423678,
      "node_id": "MDQ6VXNlcjM3NDIzNjc4",
      "avatar_url": "https://avatars.githubusercontent.com/u/37423678?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kevaundray",
      "html_url": "https://github.com/kevaundray",
      "followers_url": "https://api.github.com/users/kevaundray/followers",
      "following_url": "https://api.github.com/users/kevaundray/following{/other_user}",
      "gists_url": "https://api.github.com/users/kevaundray/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kevaundray/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kevaundray/subscriptions",
      "organizations_url": "https://api.github.com/users/kevaundray/orgs",
      "repos_url": "https://api.github.com/users/kevaundray/repos",
      "events_url": "https://api.github.com/users/kevaundray/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kevaundray/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-03T15:05:57Z",
    "updated_at": "2022-11-03T15:05:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "Closing as #3038 has been merged",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1302251820/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
