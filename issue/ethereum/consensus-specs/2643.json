{
  "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2643",
  "repository_url": "https://api.github.com/repos/ethereum/consensus-specs",
  "labels_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2643/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2643/comments",
  "events_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2643/events",
  "html_url": "https://github.com/ethereum/consensus-specs/issues/2643",
  "id": 1015195130,
  "node_id": "I_kwDOCOoGbc48gqX6",
  "number": 2643,
  "title": "Add getter to ExecutionEngine to get TTD",
  "user": {
    "login": "dapplion",
    "id": 35266934,
    "node_id": "MDQ6VXNlcjM1MjY2OTM0",
    "avatar_url": "https://avatars.githubusercontent.com/u/35266934?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/dapplion",
    "html_url": "https://github.com/dapplion",
    "followers_url": "https://api.github.com/users/dapplion/followers",
    "following_url": "https://api.github.com/users/dapplion/following{/other_user}",
    "gists_url": "https://api.github.com/users/dapplion/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/dapplion/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/dapplion/subscriptions",
    "organizations_url": "https://api.github.com/users/dapplion/orgs",
    "repos_url": "https://api.github.com/users/dapplion/repos",
    "events_url": "https://api.github.com/users/dapplion/events{/privacy}",
    "received_events_url": "https://api.github.com/users/dapplion/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 2812431987,
      "node_id": "MDU6TGFiZWwyODEyNDMxOTg3",
      "url": "https://api.github.com/repos/ethereum/consensus-specs/labels/Bellatrix",
      "name": "Bellatrix",
      "color": "1D36aa",
      "default": false,
      "description": "CL+EL Merge"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 13,
  "created_at": "2021-10-04T13:37:19Z",
  "updated_at": "2021-11-03T10:02:07Z",
  "closed_at": "2021-11-03T10:02:07Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "If the execution and consensus layer have different total terminal difficulty (TTD) it results in bad failures:\r\n\r\n- If consensus TTD1 > execution TTD2: Execution client will stop producing blocks at TTD2 and consensus will be expecting a transition block with TTD1 that will never come, stalling execution forever.\r\n- If consensus TTD1 < execution TTD2\r\n  - if execution allows prepare_payload calls: consensus and execution will fork maintaining two correct chains both with execution data. However, once TTD2 is reached execution will re-org to the consensus chain. The resulting canonical chain won't contain a long range of blocks without execution data but it will drop state that explorers and users consider canonical. \r\n  - if execution NOT allows prepare_payload calls: consensus will try to create blocks but since prepare_payload fails each attempted block can only reference the merge block at TTD1. Once TTD2 happens execution will re-org to a head that points to the merge block dropping its chain for a long gap in history.\r\n\r\nTo reduce the chance of this failure cases, the consensus client could check that its TTD matches the execution client TTD. If TTDs don't match, panic or very visibly alert the user. To allow updating nodes in any order absence of this method should not result in a error. Also a different TTD could only result in panic if TTD has been manually overwritten.\r\n\r\nCC @mkalinin\r\n",
  "closed_by": {
    "login": "mkalinin",
    "id": 1892772,
    "node_id": "MDQ6VXNlcjE4OTI3NzI=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1892772?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mkalinin",
    "html_url": "https://github.com/mkalinin",
    "followers_url": "https://api.github.com/users/mkalinin/followers",
    "following_url": "https://api.github.com/users/mkalinin/following{/other_user}",
    "gists_url": "https://api.github.com/users/mkalinin/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mkalinin/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mkalinin/subscriptions",
    "organizations_url": "https://api.github.com/users/mkalinin/orgs",
    "repos_url": "https://api.github.com/users/mkalinin/repos",
    "events_url": "https://api.github.com/users/mkalinin/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mkalinin/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2643/reactions",
    "total_count": 1,
    "+1": 1,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2643/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/935525749",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2643#issuecomment-935525749",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2643",
    "id": 935525749,
    "node_id": "IC_kwDOCOoGbc43wv11",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-06T05:56:13Z",
    "updated_at": "2021-10-06T05:56:13Z",
    "author_association": "MEMBER",
    "body": "Is TTD not already part of the synchronization API?  cc @mkalinin",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/935525749/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/936069943",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2643#issuecomment-936069943",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2643",
    "id": 936069943,
    "node_id": "IC_kwDOCOoGbc43y0s3",
    "user": {
      "login": "mkalinin",
      "id": 1892772,
      "node_id": "MDQ6VXNlcjE4OTI3NzI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1892772?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mkalinin",
      "html_url": "https://github.com/mkalinin",
      "followers_url": "https://api.github.com/users/mkalinin/followers",
      "following_url": "https://api.github.com/users/mkalinin/following{/other_user}",
      "gists_url": "https://api.github.com/users/mkalinin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mkalinin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mkalinin/subscriptions",
      "organizations_url": "https://api.github.com/users/mkalinin/orgs",
      "repos_url": "https://api.github.com/users/mkalinin/repos",
      "events_url": "https://api.github.com/users/mkalinin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mkalinin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-06T11:40:16Z",
    "updated_at": "2021-10-06T11:40:16Z",
    "author_association": "MEMBER",
    "body": "What if we hardcode TTD on the EL (execution layer) side and have a `--terminal-total-difficulty-override` setting there as well? Then CL can poll this parameter via `engine_getTransitionState` method, polling matter because of EL can be restarted with an override and CL should always be on spot.\r\n\r\nThis approach should reduce the number of potential failure points, in particular in how to sync this value between the layers if it is defined in each of them with an option to be overridden.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/936069943/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/937801714",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2643#issuecomment-937801714",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2643",
    "id": 937801714,
    "node_id": "IC_kwDOCOoGbc435bfy",
    "user": {
      "login": "mkalinin",
      "id": 1892772,
      "node_id": "MDQ6VXNlcjE4OTI3NzI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1892772?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mkalinin",
      "html_url": "https://github.com/mkalinin",
      "followers_url": "https://api.github.com/users/mkalinin/followers",
      "following_url": "https://api.github.com/users/mkalinin/following{/other_user}",
      "gists_url": "https://api.github.com/users/mkalinin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mkalinin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mkalinin/subscriptions",
      "organizations_url": "https://api.github.com/users/mkalinin/orgs",
      "repos_url": "https://api.github.com/users/mkalinin/repos",
      "events_url": "https://api.github.com/users/mkalinin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mkalinin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-07T13:37:49Z",
    "updated_at": "2021-10-07T13:37:49Z",
    "author_association": "MEMBER",
    "body": "> Is TTD not already part of the synchronization API? cc @mkalinin\r\n\r\nYou mean Engine API? It's not yet a part of it, at least not a part of its [Interop Edition](https://github.com/ethereum/execution-apis/blob/main/src/engine/interop/specification.md). And this is a good time to make a decision on how to handle the hardcoding and overriding parts of this paramter",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/937801714/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/941091243",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2643#issuecomment-941091243",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2643",
    "id": 941091243,
    "node_id": "IC_kwDOCOoGbc44F-mr",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-12T14:56:25Z",
    "updated_at": "2021-10-12T14:56:25Z",
    "author_association": "MEMBER",
    "body": "+1 on *only* putting this in the EL and requiring CL to get it. Definitely reduces failures in synchronization between the two layers",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/941091243/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/941623484",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2643#issuecomment-941623484",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2643",
    "id": 941623484,
    "node_id": "IC_kwDOCOoGbc44IAi8",
    "user": {
      "login": "ajsutton",
      "id": 72675,
      "node_id": "MDQ6VXNlcjcyNjc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/72675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajsutton",
      "html_url": "https://github.com/ajsutton",
      "followers_url": "https://api.github.com/users/ajsutton/followers",
      "following_url": "https://api.github.com/users/ajsutton/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajsutton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajsutton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajsutton/subscriptions",
      "organizations_url": "https://api.github.com/users/ajsutton/orgs",
      "repos_url": "https://api.github.com/users/ajsutton/repos",
      "events_url": "https://api.github.com/users/ajsutton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajsutton/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-12T21:49:10Z",
    "updated_at": "2021-10-12T21:49:10Z",
    "author_association": "CONTRIBUTOR",
    "body": "> +1 on _only_ putting this in the EL and requiring CL to get it. Definitely reduces failures in synchronization between the two layers\r\n\r\nThe downside however is that now the CL can't startup until the EL is already running and accepting requests. Previously it would have been able to startup, begin finding peers and begin optimistic sync.\r\n\r\nGiven the huge number of things that already have to be in-sync between the CL and EL, I'm not sure the complexity of having to retrieve this and continuously poll for changes is going to reduce bugs.  It will definitely increase complexity significantly and that usually leads to an increase in bugs.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/941623484/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/946438675",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2643#issuecomment-946438675",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2643",
    "id": 946438675,
    "node_id": "IC_kwDOCOoGbc44aYIT",
    "user": {
      "login": "mkalinin",
      "id": 1892772,
      "node_id": "MDQ6VXNlcjE4OTI3NzI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1892772?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mkalinin",
      "html_url": "https://github.com/mkalinin",
      "followers_url": "https://api.github.com/users/mkalinin/followers",
      "following_url": "https://api.github.com/users/mkalinin/following{/other_user}",
      "gists_url": "https://api.github.com/users/mkalinin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mkalinin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mkalinin/subscriptions",
      "organizations_url": "https://api.github.com/users/mkalinin/orgs",
      "repos_url": "https://api.github.com/users/mkalinin/repos",
      "events_url": "https://api.github.com/users/mkalinin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mkalinin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-19T07:28:08Z",
    "updated_at": "2021-10-19T07:28:08Z",
    "author_association": "MEMBER",
    "body": "> The downside however is that now the CL can't startup until the EL is already running and accepting requests. Previously it would have been able to startup, begin finding peers and begin optimistic sync.\r\n\r\nCL can't validate terminal block conditions without functioning EL and it is still possible for CL to do an optimistic sync even though EL is not functioning at all. In the case of optimistic sync CL will have to get back to terminal block validation in the case if the transition hasn't been finalized yet, but in this case it also have to rely on a functioning EL party to verify that the execution of the block built on top of it is valid.\r\n\r\nThis is rather an attempt to reduce the surface of misconfiguration issues induced by users than bugs induced by developers. Do you think that polling this data from EL is more bug prone than polling the head and verifying TTD?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/946438675/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/946451042",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2643#issuecomment-946451042",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2643",
    "id": 946451042,
    "node_id": "IC_kwDOCOoGbc44abJi",
    "user": {
      "login": "mkalinin",
      "id": 1892772,
      "node_id": "MDQ6VXNlcjE4OTI3NzI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1892772?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mkalinin",
      "html_url": "https://github.com/mkalinin",
      "followers_url": "https://api.github.com/users/mkalinin/followers",
      "following_url": "https://api.github.com/users/mkalinin/following{/other_user}",
      "gists_url": "https://api.github.com/users/mkalinin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mkalinin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mkalinin/subscriptions",
      "organizations_url": "https://api.github.com/users/mkalinin/orgs",
      "repos_url": "https://api.github.com/users/mkalinin/repos",
      "events_url": "https://api.github.com/users/mkalinin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mkalinin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-19T07:47:02Z",
    "updated_at": "2021-10-19T07:47:02Z",
    "author_association": "MEMBER",
    "body": "We also should consider an override setting added here https://github.com/ethereum/consensus-specs/pull/2682. This setting requires CL to be restarted with the respective activation epoch as well. It means that EL can't always be a single source of transition data and poll won't cover all the override setting use cases cc @djrtwo",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/946451042/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/946565366",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2643#issuecomment-946565366",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2643",
    "id": 946565366,
    "node_id": "IC_kwDOCOoGbc44a3D2",
    "user": {
      "login": "ajsutton",
      "id": 72675,
      "node_id": "MDQ6VXNlcjcyNjc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/72675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajsutton",
      "html_url": "https://github.com/ajsutton",
      "followers_url": "https://api.github.com/users/ajsutton/followers",
      "following_url": "https://api.github.com/users/ajsutton/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajsutton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajsutton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajsutton/subscriptions",
      "organizations_url": "https://api.github.com/users/ajsutton/orgs",
      "repos_url": "https://api.github.com/users/ajsutton/repos",
      "events_url": "https://api.github.com/users/ajsutton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajsutton/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-19T09:56:05Z",
    "updated_at": "2021-10-19T09:56:05Z",
    "author_association": "CONTRIBUTOR",
    "body": "> This is rather an attempt to reduce the surface of misconfiguration issues induced by users than bugs induced by developers. Do you think that polling this data from EL is more bug prone than polling the head and verifying TTD?\r\n\r\nSo I think this complexity is the crux of my concern more than how much the beacon node can do before the EL starts up. It may be that I'm not understanding the proposal properly, but my understanding is that instead of the beacon node having the TTD hard coded (with CLI option to override) it would poll the EL to get it.  Having a hard coded TTD would definitely be less error prone in that case - having to poll for potentially changing configuration data is pretty complex to get right.\r\n\r\nIf however we can get the CL to not care about TTD at all then yes that probably is simpler. I'm not finding `engine_getTransitionState` in the API docs so not entirely sure of the details there.  In an ideal world the EL would just deal with TTD and it would return empty when asked to create an ExecutionPayload if TTD hasn't been reached and fail validation for any ExecutionPayload that doesn't meet TTD (it would probably have to be told if this is the first ExecutionPayload to be included so it can check the parent block is prior to TTD).  But I feel like I'm forgetting an important detail that means the CL needs to know the actual TTD.\r\n\r\nBottom line for me is that having a user specify the same CLI argument in two places is pretty straight forward (we already have that for a number of args between beacon node and validator clients), whereas loading potentially changing configuration data from a web API is significantly more complex and error prone. If dealing with TTD fits reasonably well into existing semantics (or lets us not do some parts of it) then it's probably worth it, if it's just to get the user to only set it in one place then it probably isn't worth it.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/946565366/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/953250363",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2643#issuecomment-953250363",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2643",
    "id": 953250363,
    "node_id": "IC_kwDOCOoGbc440XI7",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-27T19:39:06Z",
    "updated_at": "2021-10-27T19:43:06Z",
    "author_association": "MEMBER",
    "body": "Okay, I've been thinking about this and I want to minimize complexity of this component while ensuring it likely won't be a source of failures. The that end, I suggest the following which keeps CL as the transition leader and the only point of overrides without requiring a new engine endpoint\r\n\r\n\r\n## Mechanism\r\nWe can use the following mechanism\r\n\r\n### Release and override procedure\r\n\r\n1. Release CL and EL both with hardcoded TTD\r\n2. Provide an override point for TTD/TBH on CL\r\n3. EL listens to fork choice commands from CL regardless of local TTD settings (as CL could have been overriden on either TTD or TBH)\r\n4. (optional) In event of override necessary, both EL and CL can release new versions with overrides depending on time/urgency\r\n\r\n### 3675 spec changes\r\n\r\nRequisite change to EIP 3675:\r\n* Modify the definition of `TRANSITION_BLOCK` in EIP-3675 to just be the 0th \"PoS block\" (regardless of the PoW parent properties). I.e. the removal of \"`TRANSITION_BLOCK` **MUST** be a child of a terminal PoW block.\"\r\n\r\n## Discussion\r\n\r\n### Overrides to expedite the Merge\r\n\r\nThe above simplifying mechanism assumes that TTD and TBH will only be overridden to be *earlier* than originally set values, and thus by not eagerly communicating an updated terminal value to EL, the worst that happens is that EL imports PoW blocks until the previously hardcoded TTD (due to the definition of \"Terminal PoW Block\" in EIP 3675).\r\n\r\nExpected usage of these overrides:\r\n* TTD gets overridden to be earlier than the hardcoded/shipped value in the event that the transition is going to take way to long given global hashpower conditions\r\n* TBH gets used in the event that there is an attack on PoW and thus the chain can no longer be expected to be stable and have a high security until TTD. (taking a liveness hit to set TBH as a block at has already happened)\r\n\r\n### Overrides to slow the Merge (not supported)\r\n\r\nThere is one other type of usage that we cannot account for with the above proposed mechanism -- setting of TTD to be later than the hard-coded TTD. In the above mechanism, if we don't communicate a TTD override to EL in this case, EL will never reach the new TTD (due to not importing past the hard-coded TTD) [this is @dapplion's first case -- `consensus TTD1 > execution TTD2`] and thus the transition will never occur. I argue that in all likelihood a TTD override would not be used in this direction (making the transition take longer) and would only instead only be used to make the transition happen sooner. So we can simplify and assume only one direction of changs.\r\n\r\n### @dapplion's cases\r\n\r\nRestricting overrides to only *expedite* the Merge and doing overrides only from CL reduces the problem of what can go wrong to only dapplion's second case (i.e. `consensus TTD1 < execution TTD2`). To patch the potential issues here, we need to modify the definition of `TRANSITION_BLOCK` in EIP-3675 as noted above.\r\n\r\nNow in the case of `consensus TTD1 < execution TTD2` (which could happen with a CL-only override), CL TTD1 would be hit and CL would call prepare and insert payloads at TTD1. If EL is following the spec, it will begin to defer it's fork choice to the PoS event. Even if it imports PoW blocks to TTD2, the PoS forkchoice always wins and once finalized all these extraneous PoW blocks would be pruned. This means that the chain built from TTD1 would be respected by EL and that due to the consensus rules on CL, only chains built with a valid TTD1 transition block would be accepted.\r\n\r\n^ The above analysis also holds for a TBH override (assuming it is only used to expedite the Merge)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/953250363/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/953685250",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2643#issuecomment-953685250",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2643",
    "id": 953685250,
    "node_id": "IC_kwDOCOoGbc442BUC",
    "user": {
      "login": "mkalinin",
      "id": 1892772,
      "node_id": "MDQ6VXNlcjE4OTI3NzI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1892772?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mkalinin",
      "html_url": "https://github.com/mkalinin",
      "followers_url": "https://api.github.com/users/mkalinin/followers",
      "following_url": "https://api.github.com/users/mkalinin/following{/other_user}",
      "gists_url": "https://api.github.com/users/mkalinin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mkalinin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mkalinin/subscriptions",
      "organizations_url": "https://api.github.com/users/mkalinin/orgs",
      "repos_url": "https://api.github.com/users/mkalinin/repos",
      "events_url": "https://api.github.com/users/mkalinin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mkalinin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-28T09:44:17Z",
    "updated_at": "2021-10-28T09:44:17Z",
    "author_association": "MEMBER",
    "body": "What if we have the requisite change to the EIP but still keep override options on EL side? If user forgets to configure these settings on EL side then we get to the case when `CL TTD1 < EL TTD2` while if it doesn't forget to then we get EL and CL overrides consistent with each other. I suspect there won't be the case when user overrides TTD with different values on each layer.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/953685250/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/953812751",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2643#issuecomment-953812751",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2643",
    "id": 953812751,
    "node_id": "IC_kwDOCOoGbc442gcP",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-28T12:50:16Z",
    "updated_at": "2021-10-28T12:50:16Z",
    "author_association": "MEMBER",
    "body": "Yeah, I almost suggested putting TTD override on EL as well but instead left it as a suggestion to just do a new release (if time permits).\n\nTwo reasons:\n1. Reduce complexity of implementation when it is only critical to do so on the CL side (with the minor 3675 change)\n2. Avoid creating a foot-gun. If you dont have the override on EL, the user cannot accidentally create a situation where `consensus TTD1 > execution TTD2` if they fail  to update the correct piece of software. If we have it only in one place, if the user is attempting to update, they will succeed. If we have it in two places, they might just update one side and think they've done what they needed to do\n\nBecause of the above, I'd suggest not having the override in EL, but to always encourage updated releases of both CL and EL in the event that we want to ship an override",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/953812751/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/954252408",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2643#issuecomment-954252408",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2643",
    "id": 954252408,
    "node_id": "IC_kwDOCOoGbc444Lx4",
    "user": {
      "login": "ajsutton",
      "id": 72675,
      "node_id": "MDQ6VXNlcjcyNjc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/72675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajsutton",
      "html_url": "https://github.com/ajsutton",
      "followers_url": "https://api.github.com/users/ajsutton/followers",
      "following_url": "https://api.github.com/users/ajsutton/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajsutton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajsutton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajsutton/subscriptions",
      "organizations_url": "https://api.github.com/users/ajsutton/orgs",
      "repos_url": "https://api.github.com/users/ajsutton/repos",
      "events_url": "https://api.github.com/users/ajsutton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajsutton/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-28T21:56:17Z",
    "updated_at": "2021-10-28T21:56:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "Sounds like a good approach to me. Keeps the CL side nice and simple and while there's possible a little more complexity on the EL side it would need to do something to handle the corner case of the CL hitting TTD before it thought it should anyway so hopefully is simple.\r\n\r\nAnd yes I think anytime we are telling people to use an override we'd also wind up doing an emergency release with it in, but the override is still useful for bigger setups that have their own pipeline for verifying updates before they reach MainNet production.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/954252408/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/958802363",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2643#issuecomment-958802363",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2643",
    "id": 958802363,
    "node_id": "IC_kwDOCOoGbc45Jim7",
    "user": {
      "login": "mkalinin",
      "id": 1892772,
      "node_id": "MDQ6VXNlcjE4OTI3NzI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1892772?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mkalinin",
      "html_url": "https://github.com/mkalinin",
      "followers_url": "https://api.github.com/users/mkalinin/followers",
      "following_url": "https://api.github.com/users/mkalinin/following{/other_user}",
      "gists_url": "https://api.github.com/users/mkalinin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mkalinin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mkalinin/subscriptions",
      "organizations_url": "https://api.github.com/users/mkalinin/orgs",
      "repos_url": "https://api.github.com/users/mkalinin/repos",
      "events_url": "https://api.github.com/users/mkalinin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mkalinin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-03T10:02:07Z",
    "updated_at": "2021-11-03T10:02:07Z",
    "author_association": "MEMBER",
    "body": "Addressed in https://github.com/ethereum/EIPs/pull/4397",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/958802363/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
