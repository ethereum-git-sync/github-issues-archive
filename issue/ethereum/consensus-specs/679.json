{
  "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/679",
  "repository_url": "https://api.github.com/repos/ethereum/consensus-specs",
  "labels_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/679/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/679/comments",
  "events_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/679/events",
  "html_url": "https://github.com/ethereum/consensus-specs/issues/679",
  "id": 413868812,
  "node_id": "MDU6SXNzdWU0MTM4Njg4MTI=",
  "number": 679,
  "title": "SSZ TLDR",
  "user": {
    "login": "JustinDrake",
    "id": 731743,
    "node_id": "MDQ6VXNlcjczMTc0Mw==",
    "avatar_url": "https://avatars.githubusercontent.com/u/731743?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/JustinDrake",
    "html_url": "https://github.com/JustinDrake",
    "followers_url": "https://api.github.com/users/JustinDrake/followers",
    "following_url": "https://api.github.com/users/JustinDrake/following{/other_user}",
    "gists_url": "https://api.github.com/users/JustinDrake/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/JustinDrake/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/JustinDrake/subscriptions",
    "organizations_url": "https://api.github.com/users/JustinDrake/orgs",
    "repos_url": "https://api.github.com/users/JustinDrake/repos",
    "events_url": "https://api.github.com/users/JustinDrake/events{/privacy}",
    "received_events_url": "https://api.github.com/users/JustinDrake/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1244734333,
      "node_id": "MDU6TGFiZWwxMjQ0NzM0MzMz",
      "url": "https://api.github.com/repos/ethereum/consensus-specs/labels/general:presentation",
      "name": "general:presentation",
      "color": "2EA9DF",
      "default": false,
      "description": "Presentation (as opposed to content)"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 5,
  "created_at": "2019-02-24T21:12:42Z",
  "updated_at": "2019-03-06T13:59:43Z",
  "closed_at": "2019-03-06T13:59:42Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "Below is all the SSZ logic needed for the phase 0 spec. We define types (\"basic\" and \"composite\"), serialisation of basic types, and `hash_tree_root`. (The TLDR below incorporates tuples—see #665—and a chunk size reduction to 32 bytes.)\r\n\r\n**Basic types**\r\n\r\n* `uint64` (8-byte little-endian serialisation)\r\n* `byte` (1-byte serialisation)\r\n* `bool` (1-byte serialisation to `0x00` or `0x01`)\r\n\r\n**Composite types**\r\n\r\n* `Container` (inhomogeneous, fixed sized)\r\n* `Tuple` (homogenous, fixed size)\r\n* `List` (homogeneous, variable size)\r\n\r\n**Helper functions**\r\n\r\n* `pack`: Given ordered objects of the same basic type, serialise them, pack them into 32-byte chunks, right-pad the last chunk with zero bytes, and return the chunks.\r\n* `merkleize`: Given ordered 32-byte chunks, right-pad them with zero chunks to the closest power of two, Merkleize the chunks, and return the root.\r\n* `mix_in_length`: Given a Merkle root `r` and a length `l` (32-byte little-endian serialisation) return `hash(r + l)`.\r\n\r\n**`hash_tree_root`**\r\n\r\nLet `o` be an object. We recursively define `hash_tree_root(o)` as:\r\n\r\n* `merkleize(pack(o))` if `o` is a basic object or a tuple of basic objects\r\n* `mix_in_length(merkleize(pack(o)), len(o))` if `o` is a list of basic objects\r\n* `merkleize([hash_tree_root(element) for element in o])` if `o` is a tuple of composite objects or a container\r\n* `mix_in_length(merkleize([hash_tree_root(element) for element in o]), len(o))` if `o` is a list of composite objects",
  "closed_by": {
    "login": "JustinDrake",
    "id": 731743,
    "node_id": "MDQ6VXNlcjczMTc0Mw==",
    "avatar_url": "https://avatars.githubusercontent.com/u/731743?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/JustinDrake",
    "html_url": "https://github.com/JustinDrake",
    "followers_url": "https://api.github.com/users/JustinDrake/followers",
    "following_url": "https://api.github.com/users/JustinDrake/following{/other_user}",
    "gists_url": "https://api.github.com/users/JustinDrake/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/JustinDrake/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/JustinDrake/subscriptions",
    "organizations_url": "https://api.github.com/users/JustinDrake/orgs",
    "repos_url": "https://api.github.com/users/JustinDrake/repos",
    "events_url": "https://api.github.com/users/JustinDrake/events{/privacy}",
    "received_events_url": "https://api.github.com/users/JustinDrake/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/679/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/679/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/466958340",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/679#issuecomment-466958340",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/679",
    "id": 466958340,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2Njk1ODM0MA==",
    "user": {
      "login": "vbuterin",
      "id": 2230894,
      "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vbuterin",
      "html_url": "https://github.com/vbuterin",
      "followers_url": "https://api.github.com/users/vbuterin/followers",
      "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
      "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
      "organizations_url": "https://api.github.com/users/vbuterin/orgs",
      "repos_url": "https://api.github.com/users/vbuterin/repos",
      "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vbuterin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-25T10:26:46Z",
    "updated_at": "2019-02-25T10:29:02Z",
    "author_association": "MEMBER",
    "body": "I recall the 32 -> 128 change only reducing hashing time by ~1/3, so reducing back to 32 seems reasonable. I actually think that if we decide re-hashing the (max 32 MB) validator balances array every epoch is too much, we can eke out a better efficiency/ugliness tradeoff by constricting validator balances from 8 bytes to 4 (or even storing the lower 4 bytes in the balances array and the upper 4 bytes in the registry; doing so would actually be a significant boon for light clients [1/3 Merkle proof size decrease] and may even be worth just doing now!)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/466958340/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/466973502",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/679#issuecomment-466973502",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/679",
    "id": 466973502,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2Njk3MzUwMg==",
    "user": {
      "login": "JustinDrake",
      "id": 731743,
      "node_id": "MDQ6VXNlcjczMTc0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/731743?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JustinDrake",
      "html_url": "https://github.com/JustinDrake",
      "followers_url": "https://api.github.com/users/JustinDrake/followers",
      "following_url": "https://api.github.com/users/JustinDrake/following{/other_user}",
      "gists_url": "https://api.github.com/users/JustinDrake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JustinDrake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JustinDrake/subscriptions",
      "organizations_url": "https://api.github.com/users/JustinDrake/orgs",
      "repos_url": "https://api.github.com/users/JustinDrake/repos",
      "events_url": "https://api.github.com/users/JustinDrake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JustinDrake/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-25T11:16:00Z",
    "updated_at": "2019-02-25T11:16:00Z",
    "author_association": "MEMBER",
    "body": "> or even storing the lower 4 bytes in the balances array and the upper 4 bytes in the registry\r\n\r\nI think we can get away with just 2 bytes in the balances array. The reason is that we can round rewards and penalties (applied at the end of the every epoch) to the closest 2^-16 ETH (about $0.002). We can pick the rounding mechanism so that the expected drift over the long term is 0 (in particular, avoid always rounding up or always rounding down).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/466973502/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/467007262",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/679#issuecomment-467007262",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/679",
    "id": 467007262,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2NzAwNzI2Mg==",
    "user": {
      "login": "vbuterin",
      "id": 2230894,
      "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vbuterin",
      "html_url": "https://github.com/vbuterin",
      "followers_url": "https://api.github.com/users/vbuterin/followers",
      "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
      "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
      "organizations_url": "https://api.github.com/users/vbuterin/orgs",
      "repos_url": "https://api.github.com/users/vbuterin/repos",
      "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vbuterin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-25T13:17:08Z",
    "updated_at": "2019-02-25T13:19:37Z",
    "author_association": "MEMBER",
    "body": "Summarizing my concerns about that:\r\n\r\nIn order to have the room to have different reward sizes (eg. the 5 components of the base reward, the delay penalty, the inactivity penalties....) the average per-epoch reward probably needs to be >100x larger than the minimum increment. Hence, a 2-byte fractional balance buffer would get overwritten in <650 epochs, and so on average ~1/650 of the validator registry tree would get updated every epoch. Multiply by ~15 re-hashes in the Merkle branches, and we get ~1/40 of the tree being changed every epoch counting Merkle branches. That feels like a very high load, given the larger size of the registry tree, possibly enough to cancel out the gains from cutting 4 bytes -> 2 bytes (or at least definitely reducing the gains to the point where it's not clear that the gains override the \"keep things simple and don't change too much stuff at this point\" principle; this WILL require changing things as eg. balances would have to either not be calculated in gwei anymore, or be calculated and added in a batched form)\r\n\r\nAdditionally, I was hoping that the non-fractional component of the balance could be directly reusable as the balance for fork-choice-rule purposes, which needs to update very infrequently because in many LMD GHOST implementations each balance update requires an expensive O(T) propagation through a saved-metadata tree; making it update once every <650 epochs per validator could have quite high costs.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/467007262/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/468827501",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/679#issuecomment-468827501",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/679",
    "id": 468827501,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2ODgyNzUwMQ==",
    "user": {
      "login": "protolambda",
      "id": 19571989,
      "node_id": "MDQ6VXNlcjE5NTcxOTg5",
      "avatar_url": "https://avatars.githubusercontent.com/u/19571989?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/protolambda",
      "html_url": "https://github.com/protolambda",
      "followers_url": "https://api.github.com/users/protolambda/followers",
      "following_url": "https://api.github.com/users/protolambda/following{/other_user}",
      "gists_url": "https://api.github.com/users/protolambda/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/protolambda/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/protolambda/subscriptions",
      "organizations_url": "https://api.github.com/users/protolambda/orgs",
      "repos_url": "https://api.github.com/users/protolambda/repos",
      "events_url": "https://api.github.com/users/protolambda/events{/privacy}",
      "received_events_url": "https://api.github.com/users/protolambda/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-01T22:03:17Z",
    "updated_at": "2019-03-01T22:03:17Z",
    "author_association": "MEMBER",
    "body": "I'm trying to implement it, but have some struggles, the tuple type seems strange:\r\n\r\n>     * `Tuple` (homogenous, fixed size)\r\n\r\nOr in your work-in-progress spec (taken from https://github.com/ethereum/eth2.0-specs/blob/JustinDrake-patch-4/specs/simple-serialize.md):\r\n\r\n> tuple: ordered fixed-length homogeneous collection of values \r\n\r\nAnd here you consider tuples of composite objects (implicit: variable size items):\r\n\r\n>  * `merkleize([hash_tree_root(element) for element in o])` if `o` is a tuple of composite objects or a container\r\n\r\nYet, you encode all types of tuples in a packed way (which is mostly good btw, it makes a fixed-length byte array encoding the same as that of a uintN, due to it being little endian). But packed = expectancy of item access by `offset = i * size_of(my_arr[0])`, which doesn't hold for a tuple of variable-length items.\r\n\r\nMaybe you were you meaning to say list? I.e.:\r\n\r\n `merkleize([hash_tree_root(element) for element in o])` if `o` is a *list* of composite objects or a container\r\n\r\nAlso, if so, does that mean that the encoding would not consider tuples of variable-length items to be valid? Can you make this explicit? (change tuple definition and add an encoding condition?)\r\n\r\nAlternatively, can you make it explicit that `offset = i * size_of(my_arr[0])` is not possible for encoded tuples?\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/468827501/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/470117215",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/679#issuecomment-470117215",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/679",
    "id": 470117215,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MDExNzIxNQ==",
    "user": {
      "login": "JustinDrake",
      "id": 731743,
      "node_id": "MDQ6VXNlcjczMTc0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/731743?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JustinDrake",
      "html_url": "https://github.com/JustinDrake",
      "followers_url": "https://api.github.com/users/JustinDrake/followers",
      "following_url": "https://api.github.com/users/JustinDrake/following{/other_user}",
      "gists_url": "https://api.github.com/users/JustinDrake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JustinDrake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JustinDrake/subscriptions",
      "organizations_url": "https://api.github.com/users/JustinDrake/orgs",
      "repos_url": "https://api.github.com/users/JustinDrake/repos",
      "events_url": "https://api.github.com/users/JustinDrake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JustinDrake/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-06T13:59:42Z",
    "updated_at": "2019-03-06T13:59:42Z",
    "author_association": "MEMBER",
    "body": "Implemented in https://github.com/ethereum/eth2.0-specs/commit/f93e6fe53d5ea8699e8fca9c9ce2c76ecce6d29b",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/470117215/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
