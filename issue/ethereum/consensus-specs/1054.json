{
  "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1054",
  "repository_url": "https://api.github.com/repos/ethereum/consensus-specs",
  "labels_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1054/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1054/comments",
  "events_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1054/events",
  "html_url": "https://github.com/ethereum/consensus-specs/issues/1054",
  "id": 440770337,
  "node_id": "MDU6SXNzdWU0NDA3NzAzMzc=",
  "number": 1054,
  "title": "Phase 0 state transition checklistâ€”take 5",
  "user": {
    "login": "JustinDrake",
    "id": 731743,
    "node_id": "MDQ6VXNlcjczMTc0Mw==",
    "avatar_url": "https://avatars.githubusercontent.com/u/731743?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/JustinDrake",
    "html_url": "https://github.com/JustinDrake",
    "followers_url": "https://api.github.com/users/JustinDrake/followers",
    "following_url": "https://api.github.com/users/JustinDrake/following{/other_user}",
    "gists_url": "https://api.github.com/users/JustinDrake/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/JustinDrake/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/JustinDrake/subscriptions",
    "organizations_url": "https://api.github.com/users/JustinDrake/orgs",
    "repos_url": "https://api.github.com/users/JustinDrake/repos",
    "events_url": "https://api.github.com/users/JustinDrake/events{/privacy}",
    "received_events_url": "https://api.github.com/users/JustinDrake/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1437528763,
      "node_id": "MDU6TGFiZWwxNDM3NTI4NzYz",
      "url": "https://api.github.com/repos/ethereum/consensus-specs/labels/post-freeze%20(substantive)",
      "name": "post-freeze (substantive)",
      "color": "991a40",
      "default": false,
      "description": "Substantive consensus change non-critical for long-lived cross-client testnets"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 8,
  "created_at": "2019-05-06T15:59:50Z",
  "updated_at": "2019-12-12T16:12:23Z",
  "closed_at": "2019-12-12T16:12:22Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "(See #128, #218, #322, #675 for takes 1, 2, 3, 4.)\r\n\r\nThis issue keeps track of possible phase 0 state transition function changes.\r\n\r\n- [x] 1. (*post-freeze discussion*) **BLS12-381 standardisation**: See [here](https://github.com/pairingwg/bls_standard).\r\n- [x] 2. (*post-freeze discussion*) **Big vs little byteorder of `hash_tree_root` inputs**: See also #556.\r\n- [x] 3. (*post-freeze discussion*) **Performance parameters fine-tuning**: E.g. review `SLOTS_PER_EPOCH` and `SHARD_COUNT` based on benchmarks.\r\n- [x] 4. **Issuance schedule**: Enact schedule whereby `2**21` ETH is issued per year when `2**27` ETH is at stake.\r\n- [x] 5. <s>**Better aligned micro-incentives**: Make crosslink incentives proportional to number of epochs in a crosslink. Make matching head incentives proportional to head slot vs target slot.</s>\r\n- [x] 6. <s>**Stateless withdrawal credentials**: Consider not storing withdrawal credentials. See #937.</s>\r\n- [x] 7. **Remove `MIN_ATTESTATION_INCLUSION_DELAY`**: Set `MIN_ATTESTATION_INCLUSION_DELAY` to `1`.\r\n- [x] 8. (*post-freeze discussion*) **Remove transfers**: Consider completely removing the `Transfer` operation, going beyond `MAX_TRANSFERS = 0`. We want to do a practice hard fork that add a field to an SSZ object (in this case, adding the `transfers` field to `BeaconBlockBody`).\r\n- [x] 9. (*post-freeze discussion*) **Last slot vs first slot epoch transitions**: See #1043.\r\n- [x] 10. <s>**Merged historical stats**: Consider merging `latest_randao_mixes`, `latest_active_index_roots`, `latest_slashed_balances` into a single SSZ object.</s>\r\n- [x] 11. **More historical stats**: Store the last 8 months of historical lists so that historical start shards can be recomputed.\r\n- [x] 12. **Crosslink lengths**: Fix #1034.\r\n- [x] 13. **Bitfields/bigints/generalised indices**: See #1019.\r\n- [x] 14 **Fine-tune object field ordering**: See #917.\r\n- [x] 15 **`Crosslink` in `AttestationData`**: See #1044.\r\n- [ ] 16 (*post-freeze discussion*) **Exit fee**: See https://github.com/ethereum/eth2.0-specs/pull/850#issuecomment-478068655.\r\n- [x] 17 **Improve upon `latest_active_index_roots`**: For more efficient light clients. See #1104\r\n- [x] 18 (*post-freeze discussion*) **Hard Forkability**: See #1101, also related to **8**\r\n- [x] 19 **Fixed size state**: Make `BeaconState` fixed size to be friendly to SSZ partials.\r\n- [x] 20 **Checkpoints**: Refactor `BeaconState` to use `Checkpoint`s.\r\n- [x] 21 **Slashing early exit**: (bug) In some circumstances getting slashed allows for an early exit.",
  "closed_by": {
    "login": "djrtwo",
    "id": 1433595,
    "node_id": "MDQ6VXNlcjE0MzM1OTU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/djrtwo",
    "html_url": "https://github.com/djrtwo",
    "followers_url": "https://api.github.com/users/djrtwo/followers",
    "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
    "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
    "organizations_url": "https://api.github.com/users/djrtwo/orgs",
    "repos_url": "https://api.github.com/users/djrtwo/repos",
    "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
    "received_events_url": "https://api.github.com/users/djrtwo/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1054/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1054/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/489895763",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1054#issuecomment-489895763",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1054",
    "id": 489895763,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4OTg5NTc2Mw==",
    "user": {
      "login": "vbuterin",
      "id": 2230894,
      "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vbuterin",
      "html_url": "https://github.com/vbuterin",
      "followers_url": "https://api.github.com/users/vbuterin/followers",
      "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
      "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
      "organizations_url": "https://api.github.com/users/vbuterin/orgs",
      "repos_url": "https://api.github.com/users/vbuterin/repos",
      "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vbuterin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-07T03:42:35Z",
    "updated_at": "2019-05-07T03:42:35Z",
    "author_association": "MEMBER",
    "body": ">  2. Big-endian vs little-endian hash_tree_root: See #556.\r\n\r\nWhat are the places where little endian is still used in the hash tree root?\r\n\r\nI have a strong preference toward not, for example, reversing the bytes of hashes the way bitcoin does. I had to deal with that as an implementer and it was painful. Endianness should be purely a convention about how we serialize things that are integers within the eth2 spec; we should be treating everything outside the eth2 spec proper (eg. hash algorithms, BLS signature and BLS pubkey serialization...) as black boxes that just give us `bytes`.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/489895763/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/489994231",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1054#issuecomment-489994231",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1054",
    "id": 489994231,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4OTk5NDIzMQ==",
    "user": {
      "login": "JustinDrake",
      "id": 731743,
      "node_id": "MDQ6VXNlcjczMTc0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/731743?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JustinDrake",
      "html_url": "https://github.com/JustinDrake",
      "followers_url": "https://api.github.com/users/JustinDrake/followers",
      "following_url": "https://api.github.com/users/JustinDrake/following{/other_user}",
      "gists_url": "https://api.github.com/users/JustinDrake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JustinDrake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JustinDrake/subscriptions",
      "organizations_url": "https://api.github.com/users/JustinDrake/orgs",
      "repos_url": "https://api.github.com/users/JustinDrake/repos",
      "events_url": "https://api.github.com/users/JustinDrake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JustinDrake/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-07T08:52:56Z",
    "updated_at": "2019-05-07T08:52:56Z",
    "author_association": "MEMBER",
    "body": "> What are the places where little endian is still used in the hash tree root?\r\n\r\nTo only place is `byteorder` when calling `to_bytes` on a `uintN` for `N in [16, 32, 64, 128, 256]`. This affects, for example, `hash_tree_root` of a slot number (of type `uint64`).\r\n\r\nIt's confusing that \"endianness\" is used for both bits and bytes. What about using big/little \"byteorder\" and \"bitorder\" instead?\r\n\r\n> we should be treating everything outside the eth2 spec proper (eg. hash algorithms, BLS signature and BLS pubkey serialization...) as black boxes that just give us bytes\r\n\r\nAgreed :)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/489994231/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/490114966",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1054#issuecomment-490114966",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1054",
    "id": 490114966,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5MDExNDk2Ng==",
    "user": {
      "login": "vbuterin",
      "id": 2230894,
      "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vbuterin",
      "html_url": "https://github.com/vbuterin",
      "followers_url": "https://api.github.com/users/vbuterin/followers",
      "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
      "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
      "organizations_url": "https://api.github.com/users/vbuterin/orgs",
      "repos_url": "https://api.github.com/users/vbuterin/repos",
      "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vbuterin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-07T14:54:37Z",
    "updated_at": "2019-05-07T14:54:37Z",
    "author_association": "MEMBER",
    "body": "Ah sorry, meant to ask where big endian is used in tree hash root. To me it seems obvious that if SSZ serialization uses little endian then so should SSZ tree hashing, so I don't see the issue....\r\n\r\nBitorder is only relevant for bitfields, correct?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/490114966/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/491799403",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1054#issuecomment-491799403",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1054",
    "id": 491799403,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5MTc5OTQwMw==",
    "user": {
      "login": "vbuterin",
      "id": 2230894,
      "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vbuterin",
      "html_url": "https://github.com/vbuterin",
      "followers_url": "https://api.github.com/users/vbuterin/followers",
      "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
      "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
      "organizations_url": "https://api.github.com/users/vbuterin/orgs",
      "repos_url": "https://api.github.com/users/vbuterin/repos",
      "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vbuterin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-13T12:20:02Z",
    "updated_at": "2019-05-13T12:20:02Z",
    "author_association": "MEMBER",
    "body": ">  5. Better aligned micro-incentives: Make crosslink incentives proportional to number of epochs in a crosslink. Make matching head incentives proportional to head slot vs target slot.\r\n\r\nThis is arguably a bad idea, because the total payment that validators get would potentially be larger (!!!) if they skip crosslinks. That is:\r\n\r\n* Honest strategy: `(100% vote) (100% vote) (100% vote) (100% vote)`\r\n* Honest reward: `1 + 1 + 1 + 1 = 4`\r\n* Evil strategy: `(60% vote) (60% vote) (60% vote) (100% vote)`\r\n* Evil reward: `0.6**2 + 0.6**2 + 0.6**2 + (1 * 4) = 5.08` (or if we're even stupider with the implementation: `0.6**2 + (0.6**2 * 2) + (0.6**2 * 3) + (1 * 4) = 6.16`)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/491799403/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/493762471",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1054#issuecomment-493762471",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1054",
    "id": 493762471,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5Mzc2MjQ3MQ==",
    "user": {
      "login": "vbuterin",
      "id": 2230894,
      "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vbuterin",
      "html_url": "https://github.com/vbuterin",
      "followers_url": "https://api.github.com/users/vbuterin/followers",
      "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
      "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
      "organizations_url": "https://api.github.com/users/vbuterin/orgs",
      "repos_url": "https://api.github.com/users/vbuterin/repos",
      "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vbuterin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-19T14:34:47Z",
    "updated_at": "2019-05-19T14:34:47Z",
    "author_association": "MEMBER",
    "body": ">  16 Exit fee: See #850 (comment).\r\n\r\nDo we want an exit fee or a minimum time online? We already have this:\r\n\r\n```\r\n    # Verify the validator has been active long enough\r\n    assert get_current_epoch(state) >= validator.activation_epoch + PERSISTENT_COMMITTEE_PERIOD\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/493762471/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/494417529",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1054#issuecomment-494417529",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1054",
    "id": 494417529,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5NDQxNzUyOQ==",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-21T14:33:07Z",
    "updated_at": "2019-05-21T14:33:07Z",
    "author_association": "MEMBER",
    "body": "> Consider completely removing the Transfer operation, going beyond MAX_TRANSFERS = 0. We want to do a practice hard fork that add a field to an SSZ object (in this case, adding the transfers field to BeaconBlockBody).\r\n\r\nI'm not seeing much value here especially considering clients already have this functionality built and tested. If we sequester Transfer to another fork in between 0 and 1, we would have to define a whole state transition file for the in between fork. Coordinating a production fork around a constant change is significant enough IMO ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/494417529/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/494418452",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1054#issuecomment-494418452",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1054",
    "id": 494418452,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5NDQxODQ1Mg==",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-21T14:35:13Z",
    "updated_at": "2019-05-21T14:35:13Z",
    "author_association": "MEMBER",
    "body": "> Last slot vs first slot epoch transitions\r\n\r\nDown to get on a call to convince you that this is still not the proper path  :)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/494418452/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/565073968",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1054#issuecomment-565073968",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1054",
    "id": 565073968,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2NTA3Mzk2OA==",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-12-12T16:12:22Z",
    "updated_at": "2019-12-12T16:12:22Z",
    "author_association": "MEMBER",
    "body": "All items except (16) have been addressed. Closing this in favor of specific issue on exit fee #1521",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/565073968/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
