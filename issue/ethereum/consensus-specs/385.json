{
  "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/385",
  "repository_url": "https://api.github.com/repos/ethereum/consensus-specs",
  "labels_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/385/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/385/comments",
  "events_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/385/events",
  "html_url": "https://github.com/ethereum/consensus-specs/issues/385",
  "id": 395397303,
  "node_id": "MDU6SXNzdWUzOTUzOTczMDM=",
  "number": 385,
  "title": "`Exit` processing is not strict enough",
  "user": {
    "login": "ralexstokes",
    "id": 3113781,
    "node_id": "MDQ6VXNlcjMxMTM3ODE=",
    "avatar_url": "https://avatars.githubusercontent.com/u/3113781?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ralexstokes",
    "html_url": "https://github.com/ralexstokes",
    "followers_url": "https://api.github.com/users/ralexstokes/followers",
    "following_url": "https://api.github.com/users/ralexstokes/following{/other_user}",
    "gists_url": "https://api.github.com/users/ralexstokes/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ralexstokes/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ralexstokes/subscriptions",
    "organizations_url": "https://api.github.com/users/ralexstokes/orgs",
    "repos_url": "https://api.github.com/users/ralexstokes/repos",
    "events_url": "https://api.github.com/users/ralexstokes/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ralexstokes/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 10,
  "created_at": "2019-01-02T22:10:23Z",
  "updated_at": "2019-01-18T10:10:24Z",
  "closed_at": "2019-01-18T10:10:24Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "Looking at the exit processing: https://github.com/ethereum/eth2.0-specs/blob/master/specs/core/0_beacon-chain.md#exits-1\r\n\r\nwe require validators to sign the `ZERO_HASH` to generate a signature for their `Exit` message.\r\n\r\nThis leaves an attack vector where the block proposer including such an `Exit` message can change the fields of the message -- in this case the `slot` could be moved far ahead in the future (moving it earlier in time would land us in the ground of general censorship which we will punt on here).\r\n\r\nTo nullify this type of attack, we can just require the validator to: \r\n(i) sign the full `Exit` message (with the `EMPTY_SIGNATURE` where appropriate like we do in a few other places in the spec)\r\nor (ii) sign the slot number (the other fields should cause a verification error somewhere else in the message processing).\r\n\r\nI would suggest (i) just to be consistent w/ the rest of the spec. If I don't see any further comments soon I'll put together a PR.",
  "closed_by": {
    "login": "JustinDrake",
    "id": 731743,
    "node_id": "MDQ6VXNlcjczMTc0Mw==",
    "avatar_url": "https://avatars.githubusercontent.com/u/731743?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/JustinDrake",
    "html_url": "https://github.com/JustinDrake",
    "followers_url": "https://api.github.com/users/JustinDrake/followers",
    "following_url": "https://api.github.com/users/JustinDrake/following{/other_user}",
    "gists_url": "https://api.github.com/users/JustinDrake/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/JustinDrake/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/JustinDrake/subscriptions",
    "organizations_url": "https://api.github.com/users/JustinDrake/orgs",
    "repos_url": "https://api.github.com/users/JustinDrake/repos",
    "events_url": "https://api.github.com/users/JustinDrake/events{/privacy}",
    "received_events_url": "https://api.github.com/users/JustinDrake/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/385/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/385/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/451034269",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/385#issuecomment-451034269",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/385",
    "id": 451034269,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MTAzNDI2OQ==",
    "user": {
      "login": "JustinDrake",
      "id": 731743,
      "node_id": "MDQ6VXNlcjczMTc0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/731743?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JustinDrake",
      "html_url": "https://github.com/JustinDrake",
      "followers_url": "https://api.github.com/users/JustinDrake/followers",
      "following_url": "https://api.github.com/users/JustinDrake/following{/other_user}",
      "gists_url": "https://api.github.com/users/JustinDrake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JustinDrake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JustinDrake/subscriptions",
      "organizations_url": "https://api.github.com/users/JustinDrake/orgs",
      "repos_url": "https://api.github.com/users/JustinDrake/repos",
      "events_url": "https://api.github.com/users/JustinDrake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JustinDrake/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-03T01:19:34Z",
    "updated_at": "2019-01-03T01:19:34Z",
    "author_association": "MEMBER",
    "body": "> the block proposer including such an Exit message can change the fields of the message -- in this case the slot could be moved far ahead in the future\r\n\r\nThat's not the case. Notice the `domain` argument to `bls_verify` which contains `exit.slot`. That is, the BLS signature covers the `slot`.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/451034269/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/451219420",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/385#issuecomment-451219420",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/385",
    "id": 451219420,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MTIxOTQyMA==",
    "user": {
      "login": "ralexstokes",
      "id": 3113781,
      "node_id": "MDQ6VXNlcjMxMTM3ODE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3113781?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ralexstokes",
      "html_url": "https://github.com/ralexstokes",
      "followers_url": "https://api.github.com/users/ralexstokes/followers",
      "following_url": "https://api.github.com/users/ralexstokes/following{/other_user}",
      "gists_url": "https://api.github.com/users/ralexstokes/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ralexstokes/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ralexstokes/subscriptions",
      "organizations_url": "https://api.github.com/users/ralexstokes/orgs",
      "repos_url": "https://api.github.com/users/ralexstokes/repos",
      "events_url": "https://api.github.com/users/ralexstokes/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ralexstokes/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-03T17:38:57Z",
    "updated_at": "2019-01-03T17:38:57Z",
    "author_association": "MEMBER",
    "body": "@JustinDrake i do see where we supply `slot` to `get_domain` which gives us the possibility of committing to `slot` with a BLS signature. However, there is still degeneracy in the signature space as the current implementation only uses `slot` to get the `fork_version`. This means that the attack I described could still be carried out within a fork.\r\n\r\nlet's say we are in `fork_version` 0 and i want to exit at `slot` 10 (e.g. because i find out that in fact i don't have the time/resources/etc to run a validating node). if `fork_version` 1 happens at `slot` 100 then in theory all validators could collude against me to prevent my exit until `slot` 99. And at that point I could have lost a bunch of ETH :(\r\n\r\ni can say this is somewhat of an edge case so it may not be worth defending against -- we can close this issue if so. figured it was worth considering at the least :)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/451219420/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/451237956",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/385#issuecomment-451237956",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/385",
    "id": 451237956,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MTIzNzk1Ng==",
    "user": {
      "login": "JustinDrake",
      "id": 731743,
      "node_id": "MDQ6VXNlcjczMTc0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/731743?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JustinDrake",
      "html_url": "https://github.com/JustinDrake",
      "followers_url": "https://api.github.com/users/JustinDrake/followers",
      "following_url": "https://api.github.com/users/JustinDrake/following{/other_user}",
      "gists_url": "https://api.github.com/users/JustinDrake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JustinDrake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JustinDrake/subscriptions",
      "organizations_url": "https://api.github.com/users/JustinDrake/orgs",
      "repos_url": "https://api.github.com/users/JustinDrake/repos",
      "events_url": "https://api.github.com/users/JustinDrake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JustinDrake/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-03T18:44:06Z",
    "updated_at": "2019-01-03T18:44:06Z",
    "author_association": "MEMBER",
    "body": "> if `fork_version` 1 happens at slot 100 then in theory all validators could collude against me to prevent my exit until `slot` 99.\r\n\r\nI'm not sure I understand how a collusion attack is related to signatures and fork versions. Validators could collude to censor exits simply by not including exit transactions in the beacon chain.\r\n\r\n> the block proposer including such an `Exit` message can change the fields of the message\r\n\r\nWhich specific field(s) can a block proposer change in an `Exit` message?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/451237956/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/451336973",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/385#issuecomment-451336973",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/385",
    "id": 451336973,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MTMzNjk3Mw==",
    "user": {
      "login": "ralexstokes",
      "id": 3113781,
      "node_id": "MDQ6VXNlcjMxMTM3ODE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3113781?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ralexstokes",
      "html_url": "https://github.com/ralexstokes",
      "followers_url": "https://api.github.com/users/ralexstokes/followers",
      "following_url": "https://api.github.com/users/ralexstokes/following{/other_user}",
      "gists_url": "https://api.github.com/users/ralexstokes/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ralexstokes/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ralexstokes/subscriptions",
      "organizations_url": "https://api.github.com/users/ralexstokes/orgs",
      "repos_url": "https://api.github.com/users/ralexstokes/repos",
      "events_url": "https://api.github.com/users/ralexstokes/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ralexstokes/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-04T02:16:34Z",
    "updated_at": "2019-01-04T02:19:15Z",
    "author_association": "MEMBER",
    "body": "> I'm not sure I understand how a collusion attack is related to signatures and fork versions. Validators could collude to censor exits simply by not including exit transactions in the beacon chain.\r\n>\r\n> Which specific field(s) can a block proposer change in an `Exit` message?\r\n\r\nHere is the example I have in mind.\r\n\r\n1. I'm the validator at index 12. I want to exit so I assemble the following message and broadcast it.\r\n```python\r\nexit_slot = 25\r\nvalidator_index = 12\r\nprivkey = load_privkey()\r\nsignature = bls_sign(ZERO_HASH, privkey, DOMAIN_EXIT)\r\nmsg = Exit(exit_slot, validator_index, signature)\r\nbroadcast_msg(msg)\r\n```\r\n\r\n2. Whoever receives this message can now modify the `slot` in the `Exit` message to a later slot, as long as the future slot is on the same fork, and still get a valid `Exit` message. This is because w/in a fork, the slot has no effect on the domain value.\r\n```python\r\ndef verify_exit_message(msg, state):\r\n    assert state.slot >= exit.slot\r\n    return bls_verify(\r\n        pubkey=state.validator_registry[msg.validator_index].pubkey,\r\n        message=ZERO_HASH,\r\n        signature=msg.signature,\r\n        domain=get_domain(state.fork_data, msg.slot, DOMAIN_EXIT),\r\n    )\r\n\r\nexit_message = recv_exit_message() # Exit(exit_slot, validator_index, signature) from above\r\nassert verify_exit_message(exit_message, state)\r\n\r\nexit_message.slot = 99 # some slot later than what I requested, but still on the same fork.\r\nassert verify_exit_message(exit_message, state)\r\n```\r\n\r\nI see two solutions, either should fix this problem:\r\n1. Commit to the `slot` in the `Exit` message. This has the validator sign the full message (with the `EMPTY_SIGNATURE` in lieu of the actual signature) like we do in a few other places in the spec.\r\n2. Roll the `slot` data into the domain computation like you were suggesting so that we commit to a given slot that way.\r\n\r\nAnd re: collusion, the key step in realizing the above example as an attack depends on what happens when I broadcast my message. If it gets into the wrong hands then I may have to stay validating much longer than I wanted to and if I wish to exit because I can no longer perform my validation duties then I'm risking my stake.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/451336973/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/451487912",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/385#issuecomment-451487912",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/385",
    "id": 451487912,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MTQ4NzkxMg==",
    "user": {
      "login": "JustinDrake",
      "id": 731743,
      "node_id": "MDQ6VXNlcjczMTc0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/731743?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JustinDrake",
      "html_url": "https://github.com/JustinDrake",
      "followers_url": "https://api.github.com/users/JustinDrake/followers",
      "following_url": "https://api.github.com/users/JustinDrake/following{/other_user}",
      "gists_url": "https://api.github.com/users/JustinDrake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JustinDrake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JustinDrake/subscriptions",
      "organizations_url": "https://api.github.com/users/JustinDrake/orgs",
      "repos_url": "https://api.github.com/users/JustinDrake/repos",
      "events_url": "https://api.github.com/users/JustinDrake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JustinDrake/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-04T16:09:54Z",
    "updated_at": "2019-01-04T16:09:54Z",
    "author_association": "MEMBER",
    "body": "> signature = bls_sign(ZERO_HASH, privkey, DOMAIN_EXIT)\r\n\r\nThe `domain` in `bls_sign` should be `get_domain(state.fork_data, exit.slot, DOMAIN_EXIT)` not `DOMAIN_EXIT`. (`DOMAIN_EXIT` would be the domain \"type\". Maybe it should be renamed for clarity.)\r\n\r\n> Whoever receives this message can now modify the `slot` in the `Exit` message to a later slot\r\n\r\nGood catch that's a bug 👍 (I incorrectly thought that the `domain` wrapped around the `slot`, but it's not the case.) My suggestion would be for the validator the sign the full message (instead of `message=ZERO_HASH`).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/451487912/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/451495307",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/385#issuecomment-451495307",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/385",
    "id": 451495307,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MTQ5NTMwNw==",
    "user": {
      "login": "ralexstokes",
      "id": 3113781,
      "node_id": "MDQ6VXNlcjMxMTM3ODE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3113781?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ralexstokes",
      "html_url": "https://github.com/ralexstokes",
      "followers_url": "https://api.github.com/users/ralexstokes/followers",
      "following_url": "https://api.github.com/users/ralexstokes/following{/other_user}",
      "gists_url": "https://api.github.com/users/ralexstokes/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ralexstokes/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ralexstokes/subscriptions",
      "organizations_url": "https://api.github.com/users/ralexstokes/orgs",
      "repos_url": "https://api.github.com/users/ralexstokes/repos",
      "events_url": "https://api.github.com/users/ralexstokes/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ralexstokes/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-04T16:34:17Z",
    "updated_at": "2019-01-04T16:34:17Z",
    "author_association": "MEMBER",
    "body": "> The `domain` in `bls_sign` should be `get_domain(state.fork_data, exit.slot, DOMAIN_EXIT)` not `DOMAIN_EXIT`. (`DOMAIN_EXIT` would be the domain \"type\". Maybe it should be renamed for clarity.)\r\n\r\ngood catch i was not being careful there but i think in general its clear enough (esp. once something resembling a type checker for a given impl lang kicks in)\r\n\r\n> Good catch that's a bug 👍 (I incorrectly thought that the `domain` wrapped around the `slot`, but it's not the case.) My suggestion would be for the validator the sign the full message (instead of `message=ZERO_HASH`).\r\n\r\ncool i'll put a PR together",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/451495307/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/451683250",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/385#issuecomment-451683250",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/385",
    "id": 451683250,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MTY4MzI1MA==",
    "user": {
      "login": "ralexstokes",
      "id": 3113781,
      "node_id": "MDQ6VXNlcjMxMTM3ODE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3113781?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ralexstokes",
      "html_url": "https://github.com/ralexstokes",
      "followers_url": "https://api.github.com/users/ralexstokes/followers",
      "following_url": "https://api.github.com/users/ralexstokes/following{/other_user}",
      "gists_url": "https://api.github.com/users/ralexstokes/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ralexstokes/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ralexstokes/subscriptions",
      "organizations_url": "https://api.github.com/users/ralexstokes/orgs",
      "repos_url": "https://api.github.com/users/ralexstokes/repos",
      "events_url": "https://api.github.com/users/ralexstokes/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ralexstokes/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-05T19:20:16Z",
    "updated_at": "2019-01-05T19:21:30Z",
    "author_association": "MEMBER",
    "body": "> > The `domain` in `bls_sign` should be `get_domain(state.fork_data, exit.slot, DOMAIN_EXIT)` not `DOMAIN_EXIT`. (`DOMAIN_EXIT` would be the domain \"type\". Maybe it should be renamed for clarity.)\r\n> \r\n> good catch i was not being careful there but i think in general its clear enough (esp. once something resembling a type checker for a given impl lang kicks in)\r\n\r\ni actually did this myself (i.e. https://github.com/ethereum/py-evm/pull/1697/commits/0c65f67ec47f9c4be87e199851f0b7b7896b7efb) so i now feel less confident that a type checker will catch it (as is...)\r\n\r\nwe could update the BLS spec so that something like the following exists:\r\n```rust\r\ntype DomainType = u8; // or however many bits we want\r\ntype Domain = uint64;\r\n```\r\nand update the function signatures so that we consume a `DomainType` and generate a `Domain` for `get_domain` and all the places that take a `Domain` are typed.\r\n```python\r\n# update this one\r\ndef get_domain(fork_data: ForkData,\r\n               slot: int,\r\n               domain_type: DomainType) -> Domain: pass\r\n\r\n# and for example...\r\ndef bls_verify(pubkey: uint384, \r\n               message: bytes32, \r\n               signature: [uint384], \r\n               domain: Domain): pass\r\n```\r\n\r\nthere is a small caveat in that some languages will treat a type alias as a distinct type and some will not... but at least it will hopefully be clearer to the human if not the compiler\r\n\r\nthoughts?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/451683250/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/451689035",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/385#issuecomment-451689035",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/385",
    "id": 451689035,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MTY4OTAzNQ==",
    "user": {
      "login": "JustinDrake",
      "id": 731743,
      "node_id": "MDQ6VXNlcjczMTc0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/731743?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JustinDrake",
      "html_url": "https://github.com/JustinDrake",
      "followers_url": "https://api.github.com/users/JustinDrake/followers",
      "following_url": "https://api.github.com/users/JustinDrake/following{/other_user}",
      "gists_url": "https://api.github.com/users/JustinDrake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JustinDrake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JustinDrake/subscriptions",
      "organizations_url": "https://api.github.com/users/JustinDrake/orgs",
      "repos_url": "https://api.github.com/users/JustinDrake/repos",
      "events_url": "https://api.github.com/users/JustinDrake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JustinDrake/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-05T20:45:29Z",
    "updated_at": "2019-01-05T20:45:29Z",
    "author_association": "MEMBER",
    "body": "Adding more types such `DomainType` goes along the lines of [this](https://github.com/ethereum/eth2.0-specs/issues/370#issuecomment-450304051). I'm in favour.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/451689035/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/452001315",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/385#issuecomment-452001315",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/385",
    "id": 452001315,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MjAwMTMxNQ==",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-07T16:51:37Z",
    "updated_at": "2019-01-07T16:51:37Z",
    "author_association": "MEMBER",
    "body": "Great catch! Note that the importance of the bug is that a proposer could move the slot sooner and exit you before you wanted.\r\n\r\nThe proposer gains nothing from moving the slot later because it would either do nothing if that slot had already occurred or it would just block that individual proposer from including the exit (but not affect other proposers that might include it).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/452001315/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/452001493",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/385#issuecomment-452001493",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/385",
    "id": 452001493,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MjAwMTQ5Mw==",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-07T16:52:08Z",
    "updated_at": "2019-01-07T16:52:08Z",
    "author_association": "MEMBER",
    "body": "Agreed that we should sign full exit message 👍 ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/452001493/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
