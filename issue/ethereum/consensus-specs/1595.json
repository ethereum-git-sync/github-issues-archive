{
  "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1595",
  "repository_url": "https://api.github.com/repos/ethereum/consensus-specs",
  "labels_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1595/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1595/comments",
  "events_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1595/events",
  "html_url": "https://github.com/ethereum/consensus-specs/issues/1595",
  "id": 555006381,
  "node_id": "MDU6SXNzdWU1NTUwMDYzODE=",
  "number": 1595,
  "title": "additional attestation subnet validations for dos resistance",
  "user": {
    "login": "djrtwo",
    "id": 1433595,
    "node_id": "MDQ6VXNlcjE0MzM1OTU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/djrtwo",
    "html_url": "https://github.com/djrtwo",
    "followers_url": "https://api.github.com/users/djrtwo/followers",
    "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
    "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
    "organizations_url": "https://api.github.com/users/djrtwo/orgs",
    "repos_url": "https://api.github.com/users/djrtwo/repos",
    "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
    "received_events_url": "https://api.github.com/users/djrtwo/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1486925112,
      "node_id": "MDU6TGFiZWwxNDg2OTI1MTEy",
      "url": "https://api.github.com/repos/ethereum/consensus-specs/labels/scope:attestation-management",
      "name": "scope:attestation-management",
      "color": "D9CD90",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 9,
  "created_at": "2020-01-24T23:48:28Z",
  "updated_at": "2020-02-12T21:53:08Z",
  "closed_at": "2020-02-12T21:53:08Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "## Attestation subnet dos vector \r\n\r\nOnce a validator has created a slashable message (yet before they are taken out of the active set), they can create any number of slashable messages without any further punishment. There are likely consensus related risks worth investigating, but this issue focuses on the p2p gossip network.\r\n\r\nAlthough creating multiple attestations during a slot is slashable, multiple can still have _valid_ signatures. The current [attestation subnet validation conditions](https://github.com/ethereum/eth2.0-specs/blob/master/specs/phase0/p2p-interface.md#attestation-subnets) would allow any number of valid attestations through in the gossip channel an would not be seen as duplicates in normal caches. This leads to an obvious DoS vector with a clear and calculable cost, and for that cost it is repeatable until the validator is ejected from the v-set.\r\n\r\n### Suggestion\r\n\r\nAdd the following validation condition to `committee_index{subnet_id}_beacon_attestation`:\r\n\r\n> This is the first attestation for the validator at this slot on this subnet\r\n\r\n## Aggregate and proof subnet dos vector\r\n\r\n`beacon_aggregate_and_proof` subnet has a similar problem. The aggregator can send any number of different aggregate and proof messages that have different combinations of participants (if they are at least one of the participants).\r\n\r\nThis attack is discussed by @hwwhww in #1570 in which another actor can forge their own messages as long as the aggregator is included.\r\n\r\n### a few potential solutions\r\n\r\n1. Naively, we can just allow one `aggregate_and_proof` per aggregator per slot with a similar validation condition as above, but an attacker could forge the message with a much less optimal aggregate and try to block the original good aggregate from making it far in the gossip.\r\n\r\n2. A better suggestion is to only propagate an `aggregate_and_proo`f if it is _better_ (includes more validators) than any before seen for that aggregator at this slot. This prevents a rogue attacker from flooding the network or blocking the aggregator's good attestation, but still leaves open the aggregator themselves for semi DoS'ing by sending many aggregates sequentially from small to large (by val count). Some of these would manage make it through the network, but the extent of the attack is not as extreme.\r\n\r\n3. The most extreme solution is to have the validator sign the `aggregate_and_proof` message itself and make double signing here slashable. This would close the attack vector, but would (1) add another consensus-message/slashing-condition, and (2) add another signature to verify when validating the gossip message (attestation_sig + proof_sig + aggregate_and_proof_sig\r\n\r\nI'm thinking that (2) is a reasonable solution, but curious other's thoughts here.",
  "closed_by": {
    "login": "djrtwo",
    "id": 1433595,
    "node_id": "MDQ6VXNlcjE0MzM1OTU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/djrtwo",
    "html_url": "https://github.com/djrtwo",
    "followers_url": "https://api.github.com/users/djrtwo/followers",
    "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
    "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
    "organizations_url": "https://api.github.com/users/djrtwo/orgs",
    "repos_url": "https://api.github.com/users/djrtwo/repos",
    "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
    "received_events_url": "https://api.github.com/users/djrtwo/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1595/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1595/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/578351107",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1595#issuecomment-578351107",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1595",
    "id": 578351107,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3ODM1MTEwNw==",
    "user": {
      "login": "AgeManning",
      "id": 7454587,
      "node_id": "MDQ6VXNlcjc0NTQ1ODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7454587?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AgeManning",
      "html_url": "https://github.com/AgeManning",
      "followers_url": "https://api.github.com/users/AgeManning/followers",
      "following_url": "https://api.github.com/users/AgeManning/following{/other_user}",
      "gists_url": "https://api.github.com/users/AgeManning/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AgeManning/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AgeManning/subscriptions",
      "organizations_url": "https://api.github.com/users/AgeManning/orgs",
      "repos_url": "https://api.github.com/users/AgeManning/repos",
      "events_url": "https://api.github.com/users/AgeManning/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AgeManning/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-25T00:14:49Z",
    "updated_at": "2020-01-25T00:14:49Z",
    "author_association": "CONTRIBUTOR",
    "body": "Could we do a combination of 1 and 2 and cap the number of attestions from an aggregator per slot?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/578351107/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/578358532",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1595#issuecomment-578358532",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1595",
    "id": 578358532,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3ODM1ODUzMg==",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-25T01:00:05Z",
    "updated_at": "2020-01-25T01:00:05Z",
    "author_association": "MEMBER",
    "body": "Yeah, that makes sense!\r\n\r\nAny reason to not make that max 1?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/578358532/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/578395748",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1595#issuecomment-578395748",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1595",
    "id": 578395748,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3ODM5NTc0OA==",
    "user": {
      "login": "mkalinin",
      "id": 1892772,
      "node_id": "MDQ6VXNlcjE4OTI3NzI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1892772?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mkalinin",
      "html_url": "https://github.com/mkalinin",
      "followers_url": "https://api.github.com/users/mkalinin/followers",
      "following_url": "https://api.github.com/users/mkalinin/following{/other_user}",
      "gists_url": "https://api.github.com/users/mkalinin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mkalinin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mkalinin/subscriptions",
      "organizations_url": "https://api.github.com/users/mkalinin/orgs",
      "repos_url": "https://api.github.com/users/mkalinin/repos",
      "events_url": "https://api.github.com/users/mkalinin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mkalinin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-25T10:42:19Z",
    "updated_at": "2020-01-25T10:42:19Z",
    "author_association": "MEMBER",
    "body": "What if aggregator signs `AggregateAndProof` message and then sends it to the gossip channel along with its signature? And there is a condition on propagation which drops messages with incorrect signature. Then we could identify each message and use option 1 to protect subnet from DoS attacks.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/578395748/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/579479286",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1595#issuecomment-579479286",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1595",
    "id": 579479286,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3OTQ3OTI4Ng==",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-28T22:02:53Z",
    "updated_at": "2020-01-28T22:02:53Z",
    "author_association": "MEMBER",
    "body": "@AgeManning I think it was late on a Friday night when I agreed with combining of (1) and (2). Today, I'm not fully seeing why this is advantageous. By putting a limit on the number associated with an aggregator, we still allow the aggregator's neighbors to forge messages and try to block the actual \"good\" message that the aggregator created.\r\n\r\nIs the idea that if we limit this to say 16 or 32 and combine it with (2), we increase the chance that the attacker will be able to forge enough worse messages to block the flow of the good message?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/579479286/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/579481474",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1595#issuecomment-579481474",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1595",
    "id": 579481474,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3OTQ4MTQ3NA==",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-28T22:07:55Z",
    "updated_at": "2020-01-28T22:07:55Z",
    "author_association": "MEMBER",
    "body": "> What if aggregator signs AggregateAndProof message and then sends it to the gossip channel along with its signature? And there is a condition on propagation which drops messages with incorrect signature. Then we could identify each message and use option 1 to protect subnet from DoS attacks.\r\n\r\nRight, I see. As opposed to option (3), we don't enforce that the aggregator won't sign multiple via a slashing condition, but the condition (1) prevents the gossip channel from being DoS-able by the aggregator even if they sign multiple.\r\n\r\nI like that.\r\n\r\nThe main downside is an additional signature verification per message. I'm not immediately certain if this is an efficiency loss we will care about",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/579481474/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/579500170",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1595#issuecomment-579500170",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1595",
    "id": 579500170,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3OTUwMDE3MA==",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-28T22:41:30Z",
    "updated_at": "2020-01-28T23:49:12Z",
    "author_association": "MEMBER",
    "body": "As discussed with an external contributor (not sure github handle), it is natural to add the same no-repeat-propagation condition for BeaconBlocks (associated proposer_index/slot)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/579500170/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/579704860",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1595#issuecomment-579704860",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1595",
    "id": 579704860,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3OTcwNDg2MA==",
    "user": {
      "login": "mkalinin",
      "id": 1892772,
      "node_id": "MDQ6VXNlcjE4OTI3NzI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1892772?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mkalinin",
      "html_url": "https://github.com/mkalinin",
      "followers_url": "https://api.github.com/users/mkalinin/followers",
      "following_url": "https://api.github.com/users/mkalinin/following{/other_user}",
      "gists_url": "https://api.github.com/users/mkalinin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mkalinin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mkalinin/subscriptions",
      "organizations_url": "https://api.github.com/users/mkalinin/orgs",
      "repos_url": "https://api.github.com/users/mkalinin/repos",
      "events_url": "https://api.github.com/users/mkalinin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mkalinin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-29T11:03:35Z",
    "updated_at": "2020-01-29T11:03:35Z",
    "author_association": "MEMBER",
    "body": "> The main downside is an additional signature verification per message. I'm not immediately certain if this is an efficiency loss we will care about\r\n\r\nRight. Efficiency loss could be mitigated with techniques like double pairing: https://ethresear.ch/t/fast-verification-of-multiple-bls-signatures/5407/10.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/579704860/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/580082809",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1595#issuecomment-580082809",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1595",
    "id": 580082809,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4MDA4MjgwOQ==",
    "user": {
      "login": "AgeManning",
      "id": 7454587,
      "node_id": "MDQ6VXNlcjc0NTQ1ODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7454587?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AgeManning",
      "html_url": "https://github.com/AgeManning",
      "followers_url": "https://api.github.com/users/AgeManning/followers",
      "following_url": "https://api.github.com/users/AgeManning/following{/other_user}",
      "gists_url": "https://api.github.com/users/AgeManning/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AgeManning/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AgeManning/subscriptions",
      "organizations_url": "https://api.github.com/users/AgeManning/orgs",
      "repos_url": "https://api.github.com/users/AgeManning/repos",
      "events_url": "https://api.github.com/users/AgeManning/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AgeManning/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-30T04:54:46Z",
    "updated_at": "2020-01-30T04:55:10Z",
    "author_association": "CONTRIBUTOR",
    "body": "> @AgeManning I think it was late on a Friday night when I agreed with combining of (1) and (2). Today, I'm not fully seeing why this is advantageous. By putting a limit on the number associated with an aggregator, we still allow the aggregator's neighbors to forge messages and try to block the actual \"good\" message that the aggregator created.\r\n> \r\n> Is the idea that if we limit this to say 16 or 32 and combine it with (2), we increase the chance that the attacker will be able to forge enough worse messages to block the flow of the good message?\r\n\r\nI hadn't looked at @hwwhww's attack vector and hadn't thought about that in my original comment. Disregard the combination idea as it doesn't solve the issue you've pointed out. My bad ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/580082809/reactions",
      "total_count": 2,
      "+1": 0,
      "-1": 0,
      "laugh": 1,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/585436524",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1595#issuecomment-585436524",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1595",
    "id": 585436524,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4NTQzNjUyNA==",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-02-12T21:53:08Z",
    "updated_at": "2020-02-12T21:53:08Z",
    "author_association": "MEMBER",
    "body": "closed via #1615",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/585436524/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
