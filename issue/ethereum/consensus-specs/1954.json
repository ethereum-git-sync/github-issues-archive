{
  "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1954",
  "repository_url": "https://api.github.com/repos/ethereum/consensus-specs",
  "labels_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1954/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1954/comments",
  "events_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1954/events",
  "html_url": "https://github.com/ethereum/consensus-specs/issues/1954",
  "id": 651157104,
  "node_id": "MDU6SXNzdWU2NTExNTcxMDQ=",
  "number": 1954,
  "title": "Prysm phase 1 feedback (cont)",
  "user": {
    "login": "terencechain",
    "id": 21316537,
    "node_id": "MDQ6VXNlcjIxMzE2NTM3",
    "avatar_url": "https://avatars.githubusercontent.com/u/21316537?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/terencechain",
    "html_url": "https://github.com/terencechain",
    "followers_url": "https://api.github.com/users/terencechain/followers",
    "following_url": "https://api.github.com/users/terencechain/following{/other_user}",
    "gists_url": "https://api.github.com/users/terencechain/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/terencechain/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/terencechain/subscriptions",
    "organizations_url": "https://api.github.com/users/terencechain/orgs",
    "repos_url": "https://api.github.com/users/terencechain/repos",
    "events_url": "https://api.github.com/users/terencechain/events{/privacy}",
    "received_events_url": "https://api.github.com/users/terencechain/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1170173759,
      "node_id": "MDU6TGFiZWwxMTcwMTczNzU5",
      "url": "https://api.github.com/repos/ethereum/consensus-specs/labels/phase1",
      "name": "phase1",
      "color": "F7C242",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2020-07-05T22:21:31Z",
  "updated_at": "2020-07-24T17:38:34Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "Supersedes #1850\r\n\r\nAnother round of feedbacks and questions after further alignments with Prysm on phase 1 specs. Latest progresses:\r\n- Shard transitions and crosslinks: 100% completed on beacon node. 0% on validator client\r\n- Light client support: 100% completed on beacon node. 0% on validator client\r\n- Proof of custody and fraud proofs: 0% completed on either side\r\n\r\nThis work is [here](https://github.com/terencechain/prysm-phase1) and the [diff](https://github.com/prysmaticlabs/prysm/compare/master...terencechain:phase1) is here. This will be fully migrated to the official Prysm repo when the time is right\r\n\r\nLeft over from last round:\r\n-  Refactor shard proposer reward portion to its own method inside `process_crosslink_for_shard`. Would love to see `process_crosslink_for_shard` get split to be more granular.\r\n-  Put `unpack_compact_validator` inside light client spec since itâ€™s not used within the scope in phase1 beacon chain\r\n\r\nThis round:\r\n- Decrease `MAX_SHARDS` from 1024 to 64. From tech's standpoint, it doesn't matter because sparse transition objects will be compressed. From social and UX's standpoint, 64 is superior than 1024. Block explorers, application and user levels don't have to deal with empty objects. It'd be nice to eliminate questions such as: why 960 transitions are empty? when will they be used?... etc\r\n- One of the main reason to slowing down shard activity if crosslinking fails because attestation had many custody bits. Given the on going work on #1889, is there plan to increase `SHARD_BLOCK_OFFSETS ` to have more frequent intervals?\r\n- `FullAttestation` can get quite large due to `ShardTransition` (up to 3600 bytes). One way to mitigate this is to have aggregators to covert to `FullAttestation`. An option for this is gossip `ShardTransition` and `AttestationData` separately to create deduplication. I haven't done much analysis on this, this is just an initial thought\r\n- Similar to `eth1_data`, I'm liking following construction for light client data inside beacon block body:\r\n```python\r\nclass LightData(Container):\r\n    light_client_bits: Bitvector[LIGHT_CLIENT_COMMITTEE_SIZE]\r\n    light_client_signature: BLSSignature\r\n\r\nclass BeaconBlockBody(Container):\r\n    light_data: LightData  # light client data vote\r\n```\r\n- I think `compute_committee_source_epoch` should have a more general name. (e.g. `compute_period_source_epoch`)\r\n- `pending_attestation.crosslink_success` is marked to `True` during `process_crosslinks` but it's not used anywhere else\r\n- `is_on_time_attestation` will return true if `attestation_data.slot` and `state.slot` both are both 0. This is unlikely a run time issue but good to make a note on it.\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1954/reactions",
    "total_count": 1,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 1,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1954/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/663652549",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1954#issuecomment-663652549",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1954",
    "id": 663652549,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MzY1MjU0OQ==",
    "user": {
      "login": "terencechain",
      "id": 21316537,
      "node_id": "MDQ6VXNlcjIxMzE2NTM3",
      "avatar_url": "https://avatars.githubusercontent.com/u/21316537?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/terencechain",
      "html_url": "https://github.com/terencechain",
      "followers_url": "https://api.github.com/users/terencechain/followers",
      "following_url": "https://api.github.com/users/terencechain/following{/other_user}",
      "gists_url": "https://api.github.com/users/terencechain/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/terencechain/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/terencechain/subscriptions",
      "organizations_url": "https://api.github.com/users/terencechain/orgs",
      "repos_url": "https://api.github.com/users/terencechain/repos",
      "events_url": "https://api.github.com/users/terencechain/events{/privacy}",
      "received_events_url": "https://api.github.com/users/terencechain/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-24T17:38:34Z",
    "updated_at": "2020-07-24T17:38:34Z",
    "author_association": "CONTRIBUTOR",
    "body": "A few custody related questions:\r\n\r\n* Does `CustodyChunkResponse` need `chunk_index`? A valid response implies 1.) the correctness of record in beacon state and 2.) the chunk matches the crosslink data root by asserting `is_valid_merkle_branch`. It seems like we can get rid of `chunk_index` which saves an extra `uint64` in `CustodyChunkResponse`\r\n* Naming suggestion: `reveal` in `CustodyKeyReveal` feels generic. Would be nice to avoid something like `reveal.reveal`. Do you think `signature` or `masked_signature` is a better name there?\r\n* Naming suggestion: `MINOR_REWARD_QUOTIENT` feels generic, but i don't have a good suggestion for this at this moment...\r\n* `whistleblower_reward` is divided among `committee_indices_length` rather than `attested_indices_length`. I'd think it should be divided among `attesting_indices_length`. If there's less online participants in the committee, this would incentive one to look harder\r\n* Given there's no special `whistleblower_reward` for `custody_slashing`, could this cause some sort of tragedy of the common problem? Where every participant in the committee always expects someone to slash\r\n\r\ncc @dankrad ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/663652549/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
