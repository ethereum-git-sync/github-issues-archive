{
  "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1850",
  "repository_url": "https://api.github.com/repos/ethereum/consensus-specs",
  "labels_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1850/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1850/comments",
  "events_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1850/events",
  "html_url": "https://github.com/ethereum/consensus-specs/issues/1850",
  "id": 626062666,
  "node_id": "MDU6SXNzdWU2MjYwNjI2NjY=",
  "number": 1850,
  "title": "Prysm phase 1 feedback",
  "user": {
    "login": "terencechain",
    "id": 21316537,
    "node_id": "MDQ6VXNlcjIxMzE2NTM3",
    "avatar_url": "https://avatars.githubusercontent.com/u/21316537?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/terencechain",
    "html_url": "https://github.com/terencechain",
    "followers_url": "https://api.github.com/users/terencechain/followers",
    "following_url": "https://api.github.com/users/terencechain/following{/other_user}",
    "gists_url": "https://api.github.com/users/terencechain/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/terencechain/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/terencechain/subscriptions",
    "organizations_url": "https://api.github.com/users/terencechain/orgs",
    "repos_url": "https://api.github.com/users/terencechain/repos",
    "events_url": "https://api.github.com/users/terencechain/events{/privacy}",
    "received_events_url": "https://api.github.com/users/terencechain/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1170173759,
      "node_id": "MDU6TGFiZWwxMTcwMTczNzU5",
      "url": "https://api.github.com/repos/ethereum/consensus-specs/labels/phase1",
      "name": "phase1",
      "color": "F7C242",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 3,
  "created_at": "2020-05-27T22:00:31Z",
  "updated_at": "2020-06-21T22:31:44Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "Quick update regarding phase 1 work with Prysm. I’ve implemented most of what’s in phase 1 spec today except for custody, light client and fraud proof logic. With the proper validator shard duties in place, without networking, we can begin to simulate shard transition and crosslink in a local enviroment. This work is currently getting done [here](https://github.com/terencechain/prysm-phase1) and it will get migrated to the official Prysm repo post beacon chain mainnet. Here’s some preliminary feedback from our end after implemented shard transition logic:\r\n\r\n* Add `Shard` to `AttestationData`, always having to call `get_shard` is not elegant. Being able to quickly validate `Shard` correctness for any incoming attestation is valuable\r\n* Add `Shard` to `ShardBlock`, same reason as above. Able to quickly validate `Shard` correctness for a shard block is valuable\r\n* Refactor shard proposer reward portion to its own method inside `process_crosslink_for_shard`. Would love to see `process_crosslink_for_shard` get split to be more granular. \r\n* Rename `AttestationData`’s `head_shard_root` to `shard_head_root`, it resonates better with `shard_transition_root`. Both prefix shard.\r\n* Rename `is_shard_attestation` to `is_ontime_shard_attestation` since attestation needs to be on time as well\r\n* Rename `verify_shard_transition_false_positives` to `verify_empty_shard_transition` or something better 😅\r\n* Put `unpack_compact_validator` inside light client spec since it’s not used within the scope in phase1 beacon chain\r\n* Question: is there significant amount of save on hashing to put `online_countdown` as it’s on field in `BeaconState` rather than having each `Validator` track own online countdown",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1850/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1850/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/635263533",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1850#issuecomment-635263533",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1850",
    "id": 635263533,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzNTI2MzUzMw==",
    "user": {
      "login": "hwwhww",
      "id": 9263930,
      "node_id": "MDQ6VXNlcjkyNjM5MzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9263930?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hwwhww",
      "html_url": "https://github.com/hwwhww",
      "followers_url": "https://api.github.com/users/hwwhww/followers",
      "following_url": "https://api.github.com/users/hwwhww/following{/other_user}",
      "gists_url": "https://api.github.com/users/hwwhww/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hwwhww/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hwwhww/subscriptions",
      "organizations_url": "https://api.github.com/users/hwwhww/orgs",
      "repos_url": "https://api.github.com/users/hwwhww/repos",
      "events_url": "https://api.github.com/users/hwwhww/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hwwhww/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-28T10:43:41Z",
    "updated_at": "2020-05-28T10:43:41Z",
    "author_association": "MEMBER",
    "body": "> * Add `Shard` to `AttestationData`, always having to call `get_shard` is not elegant. Being able to quickly validate `Shard` correctness for any incoming attestation is valuable\r\n\r\nAgreed with it’s not elegant, but a bit hesitant since we have a lot of `Attestation` traffic 😬\r\n\r\n> * Add `Shard` to `ShardBlock`, same reason as above. Able to quickly validate `Shard` correctness for a shard block is valuable\r\n> * Refactor shard proposer reward portion to its own method inside `process_crosslink_for_shard`. Would love to see `process_crosslink_for_shard` get split to be more granular. \r\n> * Rename `AttestationData`’s `head_shard_root` to `shard_head_root`, it resonates better with `shard_transition_root`. Both prefix shard.\r\n> * Rename `is_shard_attestation` to `is_ontime_shard_attestation` since attestation needs to be on time as well\r\n> * Rename `verify_shard_transition_false_positives` to `verify_empty_shard_transition` or something better 😅\r\n\r\nAll sound good to me too 👍\r\n\r\n> * Put `unpack_compact_validator` inside light client spec since it’s not used within the scope in phase1 beacon chain\r\n\r\n(I don’t feel strongly about it)\r\nVitalik suggested that `unpack_compact_validator` should be next to `pack_compact_validator`.\r\n\r\n> * Question: is there significant amount of save on hashing to put `online_countdown` as it’s on field in `BeaconState` rather than having each `Validator` track own online countdown\r\n\r\nCorrect!\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/635263533/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/636927368",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1850#issuecomment-636927368",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1850",
    "id": 636927368,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzNjkyNzM2OA==",
    "user": {
      "login": "hwwhww",
      "id": 9263930,
      "node_id": "MDQ6VXNlcjkyNjM5MzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9263930?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hwwhww",
      "html_url": "https://github.com/hwwhww",
      "followers_url": "https://api.github.com/users/hwwhww/followers",
      "following_url": "https://api.github.com/users/hwwhww/following{/other_user}",
      "gists_url": "https://api.github.com/users/hwwhww/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hwwhww/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hwwhww/subscriptions",
      "organizations_url": "https://api.github.com/users/hwwhww/orgs",
      "repos_url": "https://api.github.com/users/hwwhww/repos",
      "events_url": "https://api.github.com/users/hwwhww/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hwwhww/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-01T15:36:11Z",
    "updated_at": "2020-06-18T16:09:59Z",
    "author_association": "MEMBER",
    "body": "Update: the remaining items:\r\n\r\n- [x] Add `Shard` to `AttestationData`, always having to call `get_shard` is not elegant. Being able to quickly validate `Shard` correctness for any incoming attestation is valuable\r\n- [ ] Refactor shard proposer reward portion to its own method inside `process_crosslink_for_shard`. Would love to see `process_crosslink_for_shard` get split to be more granular. \r\n- [ ] Put `unpack_compact_validator` inside light client spec since it’s not used within the scope in phase1 beacon chain",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/636927368/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/647190082",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1850#issuecomment-647190082",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1850",
    "id": 647190082,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0NzE5MDA4Mg==",
    "user": {
      "login": "terencechain",
      "id": 21316537,
      "node_id": "MDQ6VXNlcjIxMzE2NTM3",
      "avatar_url": "https://avatars.githubusercontent.com/u/21316537?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/terencechain",
      "html_url": "https://github.com/terencechain",
      "followers_url": "https://api.github.com/users/terencechain/followers",
      "following_url": "https://api.github.com/users/terencechain/following{/other_user}",
      "gists_url": "https://api.github.com/users/terencechain/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/terencechain/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/terencechain/subscriptions",
      "organizations_url": "https://api.github.com/users/terencechain/orgs",
      "repos_url": "https://api.github.com/users/terencechain/repos",
      "events_url": "https://api.github.com/users/terencechain/events{/privacy}",
      "received_events_url": "https://api.github.com/users/terencechain/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-21T22:31:44Z",
    "updated_at": "2020-06-21T22:31:44Z",
    "author_association": "CONTRIBUTOR",
    "body": ">  Refactor shard proposer reward portion to its own method inside process_crosslink_for_shard. Would love to see process_crosslink_for_shard get split to be more granular.\r\n\r\nThis is what I have implemented for Prysm: https://github.com/terencechain/prysm-phase1/blob/phase1/beacon-chain/core/helpers/shard.go#L278-L334\r\n\r\nThey are helpers to group attestations by 1.) `on-time` and `committee_id` 2.) `shard_transition_root`. \r\nAnother helper is to calculate whether a given list of attestations with corresponded committee can crosslink. I used these helpers for beacon-chain's `process_crosslink_for_shard` and validator's `get_shard_winning_roots`\r\n\r\nThese helpers are similar to `get_matching_attestations` for epoch processing. With that said, I understand that specs are optimized for readability. We can skip them if we think the helpers bring lesser value in that regard. I don't feel strongly about enforcing them into the spec : )",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/647190082/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
