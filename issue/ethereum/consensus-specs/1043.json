{
  "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1043",
  "repository_url": "https://api.github.com/repos/ethereum/consensus-specs",
  "labels_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1043/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1043/comments",
  "events_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1043/events",
  "html_url": "https://github.com/ethereum/consensus-specs/issues/1043",
  "id": 440286356,
  "node_id": "MDU6SXNzdWU0NDAyODYzNTY=",
  "number": 1043,
  "title": "Improve epoch processing within state transition",
  "user": {
    "login": "JustinDrake",
    "id": 731743,
    "node_id": "MDQ6VXNlcjczMTc0Mw==",
    "avatar_url": "https://avatars.githubusercontent.com/u/731743?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/JustinDrake",
    "html_url": "https://github.com/JustinDrake",
    "followers_url": "https://api.github.com/users/JustinDrake/followers",
    "following_url": "https://api.github.com/users/JustinDrake/following{/other_user}",
    "gists_url": "https://api.github.com/users/JustinDrake/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/JustinDrake/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/JustinDrake/subscriptions",
    "organizations_url": "https://api.github.com/users/JustinDrake/orgs",
    "repos_url": "https://api.github.com/users/JustinDrake/repos",
    "events_url": "https://api.github.com/users/JustinDrake/events{/privacy}",
    "received_events_url": "https://api.github.com/users/JustinDrake/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1063043868,
      "node_id": "MDU6TGFiZWwxMDYzMDQzODY4",
      "url": "https://api.github.com/repos/ethereum/consensus-specs/labels/general:enhancement",
      "name": "general:enhancement",
      "color": "086788",
      "default": false,
      "description": "New feature or request"
    },
    {
      "id": 1137720193,
      "node_id": "MDU6TGFiZWwxMTM3NzIwMTkz",
      "url": "https://api.github.com/repos/ethereum/consensus-specs/labels/general:discussion",
      "name": "general:discussion",
      "color": "F17C67",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 10,
  "created_at": "2019-05-04T05:18:52Z",
  "updated_at": "2019-08-20T13:06:41Z",
  "closed_at": "2019-08-20T13:06:27Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "We currently have option A (see #1018):\r\n\r\n```python\r\ndef state_transition(state: BeaconState, block: BeaconBlock) -> BeaconBlock:\r\n    assert state.slot < block.slot\r\n    while state.slot < block.slot:\r\n        process_slot(state)\r\n        if (state.slot + 1) % SLOTS_PER_EPOCH == 0:\r\n            process_epoch(state)\r\n        state.slot += 1\r\n    process_block(state, block)\r\n    return state\r\n```\r\n\r\nI suggest option B:\r\n\r\n```python\r\ndef state_transition(state: BeaconState, block: BeaconBlock) -> BeaconBlock:\r\n    assert state.slot < block.slot\r\n    while state.slot < block.slot:\r\n        process_slot(state)\r\n        state.slot += 1\r\n        if state.slot == block.slot:\r\n            process_block(state, block)\r\n        if (state.slot + 1) % SLOTS_PER_EPOCH == 0:\r\n            process_epoch(state)\r\n    return state\r\n```\r\n\r\nOption B seems to be an improvement over option A. In option B the current epoch is naturally processed at the end of the current epoch (as opposed to the start of the next epoch).\r\n\r\nOption B is conceptually cleaner because there's no \"mixing\" of different epochs (which leads to confusion such as #946). It also means that the state root at the end of an epoch is the one corresponding to the end of that epoch's processing, as opposed to postponing epoch processing to the next epoch and getting frankenstein state roots on both sides of the epoch boundary (one is missing an epoch transition, the other mixes processing from different epochs).\r\n\r\nThis restructure also means that `state.slot += 1` can be incorporated within `process_slot(state)` which reduces moving parts to just `process_slot`, `process_block` and `process_epoch`. cc @dankrad, @djrtwo",
  "closed_by": {
    "login": "JustinDrake",
    "id": 731743,
    "node_id": "MDQ6VXNlcjczMTc0Mw==",
    "avatar_url": "https://avatars.githubusercontent.com/u/731743?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/JustinDrake",
    "html_url": "https://github.com/JustinDrake",
    "followers_url": "https://api.github.com/users/JustinDrake/followers",
    "following_url": "https://api.github.com/users/JustinDrake/following{/other_user}",
    "gists_url": "https://api.github.com/users/JustinDrake/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/JustinDrake/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/JustinDrake/subscriptions",
    "organizations_url": "https://api.github.com/users/JustinDrake/orgs",
    "repos_url": "https://api.github.com/users/JustinDrake/repos",
    "events_url": "https://api.github.com/users/JustinDrake/events{/privacy}",
    "received_events_url": "https://api.github.com/users/JustinDrake/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1043/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1043/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/489322461",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1043#issuecomment-489322461",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1043",
    "id": 489322461,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4OTMyMjQ2MQ==",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-04T12:25:50Z",
    "updated_at": "2019-05-04T12:25:50Z",
    "author_association": "MEMBER",
    "body": "This was the original off my one error/kludge in attestation voting. Problem here is that an committee/attester of the last slot in an epoch would have to vote on the justification data of the next epoch ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/489322461/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/489324509",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1043#issuecomment-489324509",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1043",
    "id": 489324509,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4OTMyNDUwOQ==",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-04T12:55:09Z",
    "updated_at": "2019-05-04T12:55:09Z",
    "author_association": "MEMBER",
    "body": "cc: @arnetheduck",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/489324509/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/489338546",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1043#issuecomment-489338546",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1043",
    "id": 489338546,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4OTMzODU0Ng==",
    "user": {
      "login": "JustinDrake",
      "id": 731743,
      "node_id": "MDQ6VXNlcjczMTc0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/731743?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JustinDrake",
      "html_url": "https://github.com/JustinDrake",
      "followers_url": "https://api.github.com/users/JustinDrake/followers",
      "following_url": "https://api.github.com/users/JustinDrake/following{/other_user}",
      "gists_url": "https://api.github.com/users/JustinDrake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JustinDrake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JustinDrake/subscriptions",
      "organizations_url": "https://api.github.com/users/JustinDrake/orgs",
      "repos_url": "https://api.github.com/users/JustinDrake/repos",
      "events_url": "https://api.github.com/users/JustinDrake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JustinDrake/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-04T15:48:23Z",
    "updated_at": "2019-05-04T15:49:55Z",
    "author_association": "MEMBER",
    "body": "> an committee/attester of the last slot in an epoch would have to vote on the justification data of the next epoch\r\n\r\nTrying to wrap my head around the problem :joy: By \"vote\" I'm assuming you are referring to an `AttestationData` object. By \"justification data\" I'm assuming you are referring to `previous_justified_epoch`, `current_justified_epoch`, `previous_justified_root`, `current_justified_root`.\r\n\r\nIn option B, when `process_block` is called on the last block, `process_epoch` has *not* yet been called. This means that the justification data in `state` (at the time `process_block` is called) is still for the current epoch, not the next. Hence the FFG vote (`source_epoch`, `source_root`, `target_epoch`, `target_root`) within the vote made by an attester of an epoch's last slot is not affected by having `process_epoch` at the end of that last slot.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/489338546/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/489349577",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1043#issuecomment-489349577",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1043",
    "id": 489349577,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4OTM0OTU3Nw==",
    "user": {
      "login": "dankrad",
      "id": 6130607,
      "node_id": "MDQ6VXNlcjYxMzA2MDc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6130607?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dankrad",
      "html_url": "https://github.com/dankrad",
      "followers_url": "https://api.github.com/users/dankrad/followers",
      "following_url": "https://api.github.com/users/dankrad/following{/other_user}",
      "gists_url": "https://api.github.com/users/dankrad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dankrad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dankrad/subscriptions",
      "organizations_url": "https://api.github.com/users/dankrad/orgs",
      "repos_url": "https://api.github.com/users/dankrad/repos",
      "events_url": "https://api.github.com/users/dankrad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dankrad/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-04T17:53:57Z",
    "updated_at": "2019-05-04T17:53:57Z",
    "author_association": "MEMBER",
    "body": "> This was the original off my one error/kludge in attestation voting. Problem here is that an committee/attester of the last slot in an epoch would have to vote on the justification data of the next epoch\r\n\r\nHmm, I fail to see this -- somehow it feels like semantically the two approaches Justin suggests should be equivalent, it is only a matter of when process_epoch is run?\r\n\r\nThe only difference would be that the \"state\" object at SLOTS_PER_EPOCH - 1 (mod epoch) would have the epoch processed or not (this might change what a validator has to do to compute blocks. But as the next block would be in the next epoch already, Option B should still seem like the more natural one?)\r\n\r\nAssuming this is correct, I would agree with Justin that Option B seems a bit more natural and elegant, and also makes the interpretation of state.slot clearer.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/489349577/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/489368090",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1043#issuecomment-489368090",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1043",
    "id": 489368090,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4OTM2ODA5MA==",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-04T21:46:10Z",
    "updated_at": "2019-05-04T21:50:40Z",
    "author_association": "MEMBER",
    "body": "When a validator performs their duty wrt the beacon chain currently, they simply perform the state transition to the post state at the slot they are assigned, pull data from that state, put it in an attestation, and sign it. The semantics here are clear (\"attest to the slot\" -- perform the state transition to the slot and attest to what the state says) and are currently working very well. To move the epoch transition to the _end_ of the last slot in the epoch rather than the beginning of the first slot in the next epoch, we break this for one slot in each epoch.\r\n\r\nThere are two options if you do this --\r\n1. break up the state transition function artificially for this one exceptional slot per epoch. A validator assigned to the last slot in an epoch would need to run the state transition to the slot in question but abort early (prior to the epoch portion) to gather the requisite data. This feels inelegant and like a hack, and it breaks the semantics of \"a validator attests to the post state of the assigned slot\". In fact, the data they attest to does _not_ correspond to the state root that will exist in historical roots for that slot nor the state root that would be in the block to which that are attesting. This mismatch is ill-advised as the ability to make proofs about validator activity against past state roots becomes clunky requiring exceptional rules for certain slots.\r\n2. We can go back to the kludge in which the validators assigned to the last slot in an epoch just attest to data (justified roots, etc) from the start of the next epoch. This too feels like a hack. In fact, we used to do this and we had a kludge in place for the justified_root issue, but if my memory serves me correctly, a couple of other issues arose and that was my main reason to change the ordering to the current.\r\n\r\nBoth of these options is inelegant and require exceptional rules in various places, whereas the current method is clean which no exceptions to the simple semantics. I'm pretty against changing this.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/489368090/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/489407031",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1043#issuecomment-489407031",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1043",
    "id": 489407031,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4OTQwNzAzMQ==",
    "user": {
      "login": "JustinDrake",
      "id": 731743,
      "node_id": "MDQ6VXNlcjczMTc0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/731743?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JustinDrake",
      "html_url": "https://github.com/JustinDrake",
      "followers_url": "https://api.github.com/users/JustinDrake/followers",
      "following_url": "https://api.github.com/users/JustinDrake/following{/other_user}",
      "gists_url": "https://api.github.com/users/JustinDrake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JustinDrake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JustinDrake/subscriptions",
      "organizations_url": "https://api.github.com/users/JustinDrake/orgs",
      "repos_url": "https://api.github.com/users/JustinDrake/repos",
      "events_url": "https://api.github.com/users/JustinDrake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JustinDrake/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-05T09:13:02Z",
    "updated_at": "2019-05-05T09:13:02Z",
    "author_association": "MEMBER",
    "body": "Oh boy, there must be a subtle detail I'm missing! 😂\r\n\r\n> When a validator performs their duty wrt the beacon chain currently, they simply perform the state transition to the post state at the slot they are assigned, pull data from that state, put it in an attestation, and sign it. \r\n\r\nLet's be super explicit. Let's assume there is a beacon `block` at a given slot (i.e. not a skip slot). When you say \"pull data from that state\" I'm assuming you mean specifically \"calculate `hash_tree_root(state)` and check `block.state_root == hash_tree_root(state)`, where `state` is the post-state\". And by \"put it in an attestation\", you mean specifically \"set `attestation_data.beacon_block_root = signed_root(block)`.\r\n\r\n> it breaks the semantics of \"a validator attests to the post state of the assigned slot\"\r\n\r\nAssuming the above explicit interpretation is correct, I think validators respect these semantics in option B. Specifically, they are attesting to `state` where `hash_tree_root(state) == block.state_root` and `signed_root(block) == attestation_data.beacon_block_root`. Validators always attest to the post state of their assigned slot—by definition—, including on the last slot.\r\n\r\n> A validator assigned to the last slot in an epoch would need to run the state transition to the slot in question but abort early (prior to the epoch portion) to gather the requisite data\r\n\r\nWhy is aborting early necessary? I'd argue we want the state root corresponding to `attestation_data.beacon_block_root` for the last slot to reflect the epoch transition, and hence be more up-to-date.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/489407031/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/489428821",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1043#issuecomment-489428821",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1043",
    "id": 489428821,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4OTQyODgyMQ==",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-05T13:56:01Z",
    "updated_at": "2019-05-05T13:56:01Z",
    "author_association": "MEMBER",
    "body": "> Oh boy, there must be a subtle detail I'm missing!\r\n\r\nI think the detail you're missing is that the following `AttestationData` fields _all_ correspond to the post-state of the assigned slot. The fields are just broken out separately for better accounting purposes and for more general purpose use across short range forks (eg, target doesn't match, but source does, so can still be included on chain and rewarded partially). I firmly believe that all of these fields should be references from the same `BeaconState` and that they should be within the assigned epoch.\r\n\r\n```python\r\n{\r\n    # LMD GHOST vote\r\n    'beacon_block_root': 'bytes32',\r\n\r\n    # FFG vote\r\n    'source_epoch': 'uint64',\r\n    'source_root': 'bytes32',\r\n    'target_epoch': 'uint64',\r\n    'target_root': 'bytes32',\r\n}\r\n```\r\n\r\n(For the last slot in the epoch) If you change to the method you've described then `beacon_block_root` is that of the full transition through the slot, whereas `source` and `target` are whatever they happened to be right before the `process_epoch` portion of the state transition. In fact, the `source` and `target` of the attestation likely do not correspond to the data contained within the state root embedded in the `beacon_block_root` because that state root is within the next epoch.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/489428821/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/489748121",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1043#issuecomment-489748121",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1043",
    "id": 489748121,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4OTc0ODEyMQ==",
    "user": {
      "login": "arnetheduck",
      "id": 1382986,
      "node_id": "MDQ6VXNlcjEzODI5ODY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1382986?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/arnetheduck",
      "html_url": "https://github.com/arnetheduck",
      "followers_url": "https://api.github.com/users/arnetheduck/followers",
      "following_url": "https://api.github.com/users/arnetheduck/following{/other_user}",
      "gists_url": "https://api.github.com/users/arnetheduck/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/arnetheduck/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/arnetheduck/subscriptions",
      "organizations_url": "https://api.github.com/users/arnetheduck/orgs",
      "repos_url": "https://api.github.com/users/arnetheduck/repos",
      "events_url": "https://api.github.com/users/arnetheduck/events{/privacy}",
      "received_events_url": "https://api.github.com/users/arnetheduck/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-06T19:38:55Z",
    "updated_at": "2019-05-06T19:38:55Z",
    "author_association": "CONTRIBUTOR",
    "body": "Just to play around with this a bit more, I ran the two options through our [state sim](https://github.com/status-im/nim-beacon-chain#state-transition-simulation) - to make what @djrtwo is pointing out more concrete, here's a dump of the state at options a and b at slot 132:\r\n\r\n[options.tar.gz](https://github.com/ethereum/eth2.0-specs/files/3149447/options.tar.gz)\r\n\r\nSlot 132 is interesting because we can see attestations from slots 126, 127 and 128 - right around the epoch boundary. Slots 126 and 127 belong to epoch 1, while 128 is the start of epoch 2, thus in `previous_epoch_attestations`, we'll see attestations for 126 and 127 while 128 will be in `current_epoch_attestations`. \r\n\r\nUnder option A (assuming perfect attestation performance), all attestations in `previous_epoch_attestations` consider `source_epoch` to be 0, while under option b, the attestation for slot 127 will already have done epoch processing and will have bumped `source_epoch` to 1.\r\n\r\nThe screenshot is from 0.5.1, have fun with `GENESIS_SLOT==2**32` :)\r\n\r\n![Screenshot from 2019-05-06 12-58-28](https://user-images.githubusercontent.com/1382986/57248871-be81cf80-7000-11e9-8c1d-26dc56a224c7.png)\r\n\r\nAnother (very minor) difference is the following:\r\n\r\nTo validate that a block is valid, one must apply it to the state. In option B, we first apply block then do epoch processing meaning that `iff` the block is invalid, one must roll back the state then apply an empty block, then apply epoch processing to get past the slot with where an invalid block was proposed.\r\n\r\nWhich is \"more\" clean is anyone's guess :)\r\n\r\nOne more possible consideration/convenience would be for all slots of an epoch, should the fields that are touched only by epoch processing stay constant? Under this assumption, option A wins - consider for example balances - under option a, I run the state transition to get to the state for a particular slot   and the balances change only iff the epoch changes between state and state+1. Under option b, the last slot of the epoch will see adjusted balances. \r\n\r\nHow does this affect talking / reasoning about slashings etc? What does it mean that a validator was slashed in epoch 1? should that validator be marked as slashed in all slots of epoch 1 or just the last one? If we say that someone was slashed during epoch 1, with option a that means that we must advance the state to a state that belongs to epoch 2 to see them as slashed, whereas under option a, they'll already be slashed in state 127 (but not 126, both belonging to the same epoch)..",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/489748121/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/489755868",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1043#issuecomment-489755868",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1043",
    "id": 489755868,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4OTc1NTg2OA==",
    "user": {
      "login": "arnetheduck",
      "id": 1382986,
      "node_id": "MDQ6VXNlcjEzODI5ODY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1382986?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/arnetheduck",
      "html_url": "https://github.com/arnetheduck",
      "followers_url": "https://api.github.com/users/arnetheduck/followers",
      "following_url": "https://api.github.com/users/arnetheduck/following{/other_user}",
      "gists_url": "https://api.github.com/users/arnetheduck/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/arnetheduck/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/arnetheduck/subscriptions",
      "organizations_url": "https://api.github.com/users/arnetheduck/orgs",
      "repos_url": "https://api.github.com/users/arnetheduck/repos",
      "events_url": "https://api.github.com/users/arnetheduck/events{/privacy}",
      "received_events_url": "https://api.github.com/users/arnetheduck/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-06T20:02:55Z",
    "updated_at": "2019-05-06T20:02:55Z",
    "author_association": "CONTRIBUTOR",
    "body": "Another consideration is the following: if I call the helper function `get_crosslink_committee` on state that I received after applying block `127`, will that be different from calling `get_crosslink_committee` for state `126`, under option `b`? that would mean one of two things: the committee changes for the last slot of the epoch, or I must rewrite `get_crosslink_committee` to consider this quirk, when used outside of the state transition function (because the epoch processing might change active validator indices which cascades into committees) ..\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/489755868/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/523005514",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1043#issuecomment-523005514",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1043",
    "id": 523005514,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyMzAwNTUxNA==",
    "user": {
      "login": "JustinDrake",
      "id": 731743,
      "node_id": "MDQ6VXNlcjczMTc0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/731743?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JustinDrake",
      "html_url": "https://github.com/JustinDrake",
      "followers_url": "https://api.github.com/users/JustinDrake/followers",
      "following_url": "https://api.github.com/users/JustinDrake/following{/other_user}",
      "gists_url": "https://api.github.com/users/JustinDrake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JustinDrake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JustinDrake/subscriptions",
      "organizations_url": "https://api.github.com/users/JustinDrake/orgs",
      "repos_url": "https://api.github.com/users/JustinDrake/repos",
      "events_url": "https://api.github.com/users/JustinDrake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JustinDrake/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-20T13:06:27Z",
    "updated_at": "2019-08-20T13:06:41Z",
    "author_association": "MEMBER",
    "body": "Still not groking the tradeoffs but I think this issue can be closed for now, especially post freeze 😂 ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/523005514/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
