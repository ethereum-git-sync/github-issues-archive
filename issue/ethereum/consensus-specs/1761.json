{
  "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1761",
  "repository_url": "https://api.github.com/repos/ethereum/consensus-specs",
  "labels_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1761/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1761/comments",
  "events_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1761/events",
  "html_url": "https://github.com/ethereum/consensus-specs/issues/1761",
  "id": 607869842,
  "node_id": "MDU6SXNzdWU2MDc4Njk4NDI=",
  "number": 1761,
  "title": "Gossipsub v1.1 peerscoring of \"Invalid Messages\" might be problematic",
  "user": {
    "login": "djrtwo",
    "id": 1433595,
    "node_id": "MDQ6VXNlcjE0MzM1OTU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/djrtwo",
    "html_url": "https://github.com/djrtwo",
    "followers_url": "https://api.github.com/users/djrtwo/followers",
    "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
    "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
    "organizations_url": "https://api.github.com/users/djrtwo/orgs",
    "repos_url": "https://api.github.com/users/djrtwo/repos",
    "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
    "received_events_url": "https://api.github.com/users/djrtwo/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1295438707,
      "node_id": "MDU6TGFiZWwxMjk1NDM4NzA3",
      "url": "https://api.github.com/repos/ethereum/consensus-specs/labels/scope:networking",
      "name": "scope:networking",
      "color": "F596AA",
      "default": false,
      "description": ""
    },
    {
      "id": 1393665613,
      "node_id": "MDU6TGFiZWwxMzkzNjY1NjEz",
      "url": "https://api.github.com/repos/ethereum/consensus-specs/labels/scope:libp2p",
      "name": "scope:libp2p",
      "color": "CA7A2C",
      "default": false,
      "description": ""
    },
    {
      "id": 1725628406,
      "node_id": "MDU6TGFiZWwxNzI1NjI4NDA2",
      "url": "https://api.github.com/repos/ethereum/consensus-specs/labels/phase0",
      "name": "phase0",
      "color": "c2e0c6",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 11,
  "created_at": "2020-04-27T21:35:48Z",
  "updated_at": "2020-05-20T18:49:12Z",
  "closed_at": "2020-05-20T18:49:12Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "There has been an incredible effort put into [gossipsub v1.1](https://github.com/libp2p/specs/blob/master/pubsub/gossipsub/gossipsub-v1.1.md) in the past few months to harden the protocol against a wide range of attacks.\r\n\r\nOne of the key mechanisms is the utilization of [peer scoring](https://github.com/libp2p/specs/blob/master/pubsub/gossipsub/gossipsub-v1.1.md#the-score-function) in the gossip layer. When reviewing the protocol, I realized that \"P₄: Invalid Messages\" might be problematic wrt how we utilize application layer validations in a few cases.\r\n\r\nCopied directly from the [gossipsub v1.1 peer scoring spec](https://github.com/libp2p/specs/blob/master/pubsub/gossipsub/gossipsub-v1.1.md#the-score-function):\r\n> P₄: Invalid Messages for a topic. This is he number of invalid messages delivered in the topic. This is intended to penalize peers who transmit invalid messages, according to application specific validation rules. It is mixed with a negative weight.\r\n\r\nMy concern is that some of our conditions are used to flag messages as \"not worth forwarding\" rather than as specifically marking as \"invalid\" or \"malicious\". And in the case where the message might be seen as malicious from a global perspective (double attestation per epoch), the sending peer does not necessarily know the message will be invalid before sending it (e.g. sending peer doesn't know receiving peer already received an attestation from val-A this epoch and sends a different (locally valid looking) attestation from val-A).\r\n\r\nOne such condition is found in `beacon_aggregate_and_proof`:\r\n> The valid aggregate attestation defined by `hash_tree_root(aggregate)` has _not_ already been seen (via aggregate gossip, within a verified block, or through the creation of an equivalent aggregate locally).\r\n\r\nIn the (optimal) case that many aggregators agree on the same aggregate attestation, this condition prevents all of the duplicates from being fully gossiped on the network, and does not signal that an invalid or malicious message was sent (and thus a cause for de-scoring).\r\n\r\nDealing with this (while retaining the usefulness of \"P₄: Invalid Messages\" in the scoring function)  will either need to change our spec or the gossipsub spec.\r\n\r\nImmediately obvious options:\r\n* remove such conditions from our spec. I'm not certain we can remove all of them because many are DoS mitigations (no duplicate attestation from single validator per epoch) rather than simply optimizations.\r\n* change the gossipsub spec such that the callback returns a `True/False/DO_NOT_FORWARD` where `True` is valid+forward, `False` is invalid+drop, `DO_NOT_FORWARD` is not fully invalid but still drop. This isn't an immediately palatable path without having some more in depth discussions about the possibilities and more general gossipsub usecases.\r\n\r\n^ neither of the above is fully thought through a solution. Putting this out for discussion and thinking about it some more.",
  "closed_by": {
    "login": "djrtwo",
    "id": 1433595,
    "node_id": "MDQ6VXNlcjE0MzM1OTU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/djrtwo",
    "html_url": "https://github.com/djrtwo",
    "followers_url": "https://api.github.com/users/djrtwo/followers",
    "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
    "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
    "organizations_url": "https://api.github.com/users/djrtwo/orgs",
    "repos_url": "https://api.github.com/users/djrtwo/repos",
    "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
    "received_events_url": "https://api.github.com/users/djrtwo/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1761/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1761/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/620249834",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1761#issuecomment-620249834",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1761",
    "id": 620249834,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMDI0OTgzNA==",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-04-27T21:39:12Z",
    "updated_at": "2020-04-27T21:39:12Z",
    "author_association": "MEMBER",
    "body": "CC: @AgeManning @nisdas @arnetheduck @raulk ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/620249834/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/620253788",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1761#issuecomment-620253788",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1761",
    "id": 620253788,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMDI1Mzc4OA==",
    "user": {
      "login": "terencechain",
      "id": 21316537,
      "node_id": "MDQ6VXNlcjIxMzE2NTM3",
      "avatar_url": "https://avatars.githubusercontent.com/u/21316537?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/terencechain",
      "html_url": "https://github.com/terencechain",
      "followers_url": "https://api.github.com/users/terencechain/followers",
      "following_url": "https://api.github.com/users/terencechain/following{/other_user}",
      "gists_url": "https://api.github.com/users/terencechain/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/terencechain/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/terencechain/subscriptions",
      "organizations_url": "https://api.github.com/users/terencechain/orgs",
      "repos_url": "https://api.github.com/users/terencechain/repos",
      "events_url": "https://api.github.com/users/terencechain/events{/privacy}",
      "received_events_url": "https://api.github.com/users/terencechain/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-04-27T21:48:54Z",
    "updated_at": "2020-04-27T21:48:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "I echo this concern. Here's some stats captured in Topaz testnet:\r\n * ~35% of the `beacon_block` are filtered out due to duplication\r\n * ~50% of the `beacon_aggregate_and_proof` are filtered out due to duplication\r\n\r\nThe callback makes sense to me for the long term and it's also not a testnet breaking feature",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/620253788/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/620266277",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1761#issuecomment-620266277",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1761",
    "id": 620266277,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMDI2NjI3Nw==",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-04-27T22:20:47Z",
    "updated_at": "2020-04-27T22:20:47Z",
    "author_association": "MEMBER",
    "body": "> ~35% of the beacon_block are filtered out due to duplication\r\n\r\nWhat is the de-duplication method here? Is it just the native gossipsub `message-id`/cache mechanism, or is this an application specific gossip condition? For beacon blocks, I wouldn't expect an application specific condition doing this unless people were double proposing. If it's just the native gossipsub `message-id` de-duplicating, that's okay and won't cause peer de-scoring\r\n\r\n> ~50% of the beacon_aggregate_and_proof are filtered out due to duplication\r\n\r\nThat's awesome to hear! working as expected :)\r\nSome of this might be de-duplication from `message-id` but I'd expect a high number to be duplicates from different aggregators (which wouldn't be caught by `message-id` because the wrapping `AggregateAndProof` would be a different message even if the contained `Aggregate` is the same\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/620266277/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/620276914",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1761#issuecomment-620276914",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1761",
    "id": 620276914,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMDI3NjkxNA==",
    "user": {
      "login": "terencechain",
      "id": 21316537,
      "node_id": "MDQ6VXNlcjIxMzE2NTM3",
      "avatar_url": "https://avatars.githubusercontent.com/u/21316537?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/terencechain",
      "html_url": "https://github.com/terencechain",
      "followers_url": "https://api.github.com/users/terencechain/followers",
      "following_url": "https://api.github.com/users/terencechain/following{/other_user}",
      "gists_url": "https://api.github.com/users/terencechain/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/terencechain/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/terencechain/subscriptions",
      "organizations_url": "https://api.github.com/users/terencechain/orgs",
      "repos_url": "https://api.github.com/users/terencechain/repos",
      "events_url": "https://api.github.com/users/terencechain/events{/privacy}",
      "received_events_url": "https://api.github.com/users/terencechain/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-04-27T22:52:49Z",
    "updated_at": "2020-04-27T22:52:49Z",
    "author_association": "CONTRIBUTOR",
    "body": "> What is the de-duplication method here?\r\n\r\nThe condition is `first block received for the proposer for the slot...`  This well could be a bug in our end. Tracking via: https://github.com/prysmaticlabs/prysm/issues/5630\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/620276914/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/620474486",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1761#issuecomment-620474486",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1761",
    "id": 620474486,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMDQ3NDQ4Ng==",
    "user": {
      "login": "raulk",
      "id": 1101242,
      "node_id": "MDQ6VXNlcjExMDEyNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1101242?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/raulk",
      "html_url": "https://github.com/raulk",
      "followers_url": "https://api.github.com/users/raulk/followers",
      "following_url": "https://api.github.com/users/raulk/following{/other_user}",
      "gists_url": "https://api.github.com/users/raulk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/raulk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/raulk/subscriptions",
      "organizations_url": "https://api.github.com/users/raulk/orgs",
      "repos_url": "https://api.github.com/users/raulk/repos",
      "events_url": "https://api.github.com/users/raulk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/raulk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-04-28T08:56:38Z",
    "updated_at": "2020-04-28T08:56:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hey team! Thanks for detecting and reporting this. We’re looking into solutions and will get back to you today. But on surface, enhancing the signature of the validator to return an enum instead of a boolean such that we can signal “deliver/forward-only/drop” conditions seems like the way forward here.\n\nIn the reference implementation (Go), we can add a new interface to preserve backwards compatibility, and shim the old one into the new one.\n\nWill get back to you definitely after we finish this discussion within the libp2p team today.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/620474486/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/620535905",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1761#issuecomment-620535905",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1761",
    "id": 620535905,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMDUzNTkwNQ==",
    "user": {
      "login": "vyzo",
      "id": 36426,
      "node_id": "MDQ6VXNlcjM2NDI2",
      "avatar_url": "https://avatars.githubusercontent.com/u/36426?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vyzo",
      "html_url": "https://github.com/vyzo",
      "followers_url": "https://api.github.com/users/vyzo/followers",
      "following_url": "https://api.github.com/users/vyzo/following{/other_user}",
      "gists_url": "https://api.github.com/users/vyzo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vyzo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vyzo/subscriptions",
      "organizations_url": "https://api.github.com/users/vyzo/orgs",
      "repos_url": "https://api.github.com/users/vyzo/repos",
      "events_url": "https://api.github.com/users/vyzo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vyzo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-04-28T11:01:16Z",
    "updated_at": "2020-04-28T11:01:16Z",
    "author_association": "NONE",
    "body": "We have been considering extending the validator interface for some time, so that it can provide richer feedback to the pubsub subsystem and address concerns similar to the ones identified in this thread.\r\n\r\nFollowing internal discussion, we have decided to extend the validator interface to provide an enumerated (instead of binary) response with a minimum of three possible values: Accept, Reject, or Ignore.\r\n- Accepting or Rejecting a message is the familiar accept/reject decision from the original validator interface, whereby a Reject will trigger the P4 penalty.\r\n- The Ignore response is the desired new behaviour which drops the message (and does not deliver it to the application or forwards it to the network), but without triggering the P4 penalty in scoring.\r\n\r\nTo this extent, we have updated the gossipsub v1.1 spec to document this new behaviour.\r\n\r\nThe PR for the extension is here: https://github.com/libp2p/specs/pull/265, and we would appreciate your feedback as implementers, if possible by the end of the day today (whenever that is for you :)).\r\n\r\nWe are working on incorporating these changes into the go-libp2p-pubsub reference implementation, and we should have an implementation PR soon.\r\n\r\nThere’s one open question. AFAIU, the three values in the enum are sufficient to model the current behaviour. However, they’d be insufficient to signal a case where you want the message to be forwarded to peers (via mesh and gossip), without being delivered to the application, or vice versa. Do you foresee such situations? We can easily extend the enumerated response to support this use case.\r\n\r\nPS: We have also identified another situation where the ternary response applies: the application may be unable to ascertain the validity of new messages because it is first syncing or resyncing its chain. We had encountered this problem in Filecoin, and this had first prompted us to explore changes in the validator interface.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/620535905/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/620693175",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1761#issuecomment-620693175",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1761",
    "id": 620693175,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMDY5MzE3NQ==",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-04-28T15:53:18Z",
    "updated_at": "2020-04-28T15:58:34Z",
    "author_association": "MEMBER",
    "body": "Thank you @raulk and @vyzo for your quick response! This ternary enum response will be immediately very valuable to eth2 :)\r\n\r\nThere are some special cases where a client might choose to _not_ forward the message but to incorporate it into the application. From the perspective of gossipsub, this just looks like an \"Ignore\". What is the value to libp2p/gossipsub to distinguish this Ignore-and-incorporate-to-app vs simple Ignore?\r\n\r\nEdit: my misunderstanding of the value might be related to not quite understanding how the gossipsub validator interface works/connects to the application\r\n\r\nEdit2: the concrete example is if a message is from a future slot, a client may choose to queue to the application for inclusion when the slot arrives, but wouldn't forward on the network",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/620693175/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/620728174",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1761#issuecomment-620728174",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1761",
    "id": 620728174,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMDcyODE3NA==",
    "user": {
      "login": "vyzo",
      "id": 36426,
      "node_id": "MDQ6VXNlcjM2NDI2",
      "avatar_url": "https://avatars.githubusercontent.com/u/36426?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vyzo",
      "html_url": "https://github.com/vyzo",
      "followers_url": "https://api.github.com/users/vyzo/followers",
      "following_url": "https://api.github.com/users/vyzo/following{/other_user}",
      "gists_url": "https://api.github.com/users/vyzo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vyzo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vyzo/subscriptions",
      "organizations_url": "https://api.github.com/users/vyzo/orgs",
      "repos_url": "https://api.github.com/users/vyzo/repos",
      "events_url": "https://api.github.com/users/vyzo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vyzo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-04-28T16:50:53Z",
    "updated_at": "2020-04-28T16:50:53Z",
    "author_association": "NONE",
    "body": "We can certainly add a `DeliverOnly` value to the enum, with the semantics being \"Deliver to application but don't forward\". \r\nThe difference from `Ignore` would be that the message would count as a valid delivery, and reward the peer who forwarded it.\r\n\r\nNonetheless, I have some reservations about whether it's the right thing to do, as we might up in a sticky situation where a node publishes a message to its immediate peers (in the mesh or via gossip/flood publishing) and all of them happen to accept it with `DeliverOnly`. \r\nIn this case the message would be stuck in limbo: delivered to the immediate peers, but not propagated to the rest of the network.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/620728174/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/620748791",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1761#issuecomment-620748791",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1761",
    "id": 620748791,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMDc0ODc5MQ==",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-04-28T17:30:33Z",
    "updated_at": "2020-04-28T17:30:33Z",
    "author_association": "MEMBER",
    "body": "Understand on the reservation.\r\nI understand the distinction.. `Ignore` is fine in some of the cases I'm thinking of. Rewarding the peer isn't necessarily the obvious correct action.\r\n\r\nWith the timing issue above, the clock issue could very well be on the receiving node's side so in that case the network would likely receive the message no problem and the node with the clock issue would incorporate later.\r\n\r\nIn the case that someone's clock is way off (attacker or not) early messages not making it all the way through the network is expected behaviour, and might end with a dropped message. Especially in the case of an attacker attempting timing attacks, this is okay.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/620748791/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/620785240",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1761#issuecomment-620785240",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1761",
    "id": 620785240,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMDc4NTI0MA==",
    "user": {
      "login": "vyzo",
      "id": 36426,
      "node_id": "MDQ6VXNlcjM2NDI2",
      "avatar_url": "https://avatars.githubusercontent.com/u/36426?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vyzo",
      "html_url": "https://github.com/vyzo",
      "followers_url": "https://api.github.com/users/vyzo/followers",
      "following_url": "https://api.github.com/users/vyzo/following{/other_user}",
      "gists_url": "https://api.github.com/users/vyzo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vyzo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vyzo/subscriptions",
      "organizations_url": "https://api.github.com/users/vyzo/orgs",
      "repos_url": "https://api.github.com/users/vyzo/repos",
      "events_url": "https://api.github.com/users/vyzo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vyzo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-04-28T18:39:31Z",
    "updated_at": "2020-04-28T18:39:31Z",
    "author_association": "NONE",
    "body": "> Rewarding the peer isn't necessarily the obvious correct action.\r\n\r\nYeah, agreed.\r\n\r\nThere is an alternative method for achieving this effect: a stateful validator that returns `Ignore` but also enqueues the message for the application to process via a side-channel.\r\nIt is not pretty, but it has very straightforward semantics and it's something one might want to experiment with.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/620785240/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/631657906",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1761#issuecomment-631657906",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1761",
    "id": 631657906,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzMTY1NzkwNg==",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-20T18:49:12Z",
    "updated_at": "2020-05-20T18:49:12Z",
    "author_association": "MEMBER",
    "body": "This was addressed in v1.1 with \"extended validators\" https://github.com/libp2p/go-libp2p-pubsub/pull/313 and in the eth2 spec with #1796 ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/631657906/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
