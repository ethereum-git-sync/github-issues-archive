{
  "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2749",
  "repository_url": "https://api.github.com/repos/ethereum/consensus-specs",
  "labels_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2749/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2749/comments",
  "events_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2749/events",
  "html_url": "https://github.com/ethereum/consensus-specs/issues/2749",
  "id": 1066458513,
  "node_id": "I_kwDOCOoGbc4_kN2R",
  "number": 2749,
  "title": "Proposed attnets revamp",
  "user": {
    "login": "djrtwo",
    "id": 1433595,
    "node_id": "MDQ6VXNlcjE0MzM1OTU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/djrtwo",
    "html_url": "https://github.com/djrtwo",
    "followers_url": "https://api.github.com/users/djrtwo/followers",
    "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
    "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
    "organizations_url": "https://api.github.com/users/djrtwo/orgs",
    "repos_url": "https://api.github.com/users/djrtwo/repos",
    "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
    "received_events_url": "https://api.github.com/users/djrtwo/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 37,
  "created_at": "2021-11-29T20:15:43Z",
  "updated_at": "2022-03-27T22:21:40Z",
  "closed_at": null,
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "# Attnets revamp\r\n\r\nSince the launch of the beacon chain, the \"backbone\" of attestation subnets (attnets) relies upon staking nodes connecting to a random set of subnets. The size of this random set is dictated by the quantity of validators attached to the node, up to the maximum of 64 (`ATTESTATION_SUBNET_COUNT` which maps to the expected `SHARD_COUNT`). The general idea at genesis was that a node's validator requirments will scale linearly when sharding is released thus we can put this linear subnet requirement for subnet backbones as an \"honesty\" assumption until sharding comes around.\r\n\r\nAn attestation subnet backbone is required so that at each epoch, validators can quickly find and publish to their assigned subnet. If there was no notion of persistence in these subnets, then there would be no subnet to \"find\" in he ~6 minute window and those no clear place to publish individual attestations before they are aggregated.\r\n\r\nBackbone requirements:\r\n* Subnets are relatively stable, slot-to-slot and epoch-to-epoch, allowing for reliable dissemination of messages on demand \r\n* Subnets entry points can be found in a relatively short time (< 1 minute) and short search overhead (within a few hops of the DHT)\r\n* (Nice to have) A method to discern whether a node is \"honestly\" performing the expected backbone duty\r\n\r\n## Problems\r\n\r\nThere are a few issues with the current structure:\r\n1. This likely creates overly populated subnets in actuality, thus increasing the network's total bandwidth consumption with little to no gain\r\n2. This relies on an unenforcable \"honesty\" of validator nodes when the rational behavior is to turn your attnets down to 1 or even 0.\r\n3. As non-staking (user nodes) come online more and more, such (0-attnet) nodes will crowd the DHT, making the task of finding peers of particular subnets increasingly difficult. In the event that user nodes outpace staking nodes by 10-to-1 (a situation that should be applauded!), finding attestation backbones would become 10x more difficult.\r\n\r\n## Proposed solution\r\n\r\nIn an effort to solve the above issues, we propose:\r\n\r\n* Remove random subnets per validator\r\n* Add a *single* deterministic subnet per node, as a function of by the `node_id, epoch`\r\n\r\nRather than putting the backbone requirement on a brittle validator-honesty assumption, this puts the backbone requirement on the entire network of full nodes such that, on average one out of every `ATTESTATION_SUBNET_COUNT` nodes will be of a particular subnet.\r\n\r\nThis means that the size of subnets becomes a function of the total number of nodes on the network, rather than on staking node count combined with validator-node density. This means that we simultaneously reduce the over population of attnets by a small number of staking nodes and ensure that even if the Ethereum network (and DHT) grows by orders of magnitude, attnets will be able to be found within a few hops.\r\n\r\nAdditionally, due to the requisite subnet subscription being a function of a node's peer-id, honest/dishonesty wrt attnet backbone can be deterministically assessed allowing for peer downscoring and disconnects of dishonest peers.\r\n\r\nThe downside to this approach is that it puts a *minimum* of one attnet of load on *every* node rather than just on staking nodes, but in estimation, this is not a very high burden wrt home node resources and provides much more benefit in meeting the backbone requirements than negative.\r\n\r\n### Concrete spec mods\r\n\r\n**Remove random subscriptions**\r\n* Remove `RANDOM_SUBNETS_PER_VALIDATOR` from validator guide\r\n* Remove `attnets` from ENR and MetaData in p2p spec\r\n* Remove functionality described in [Phase 0 attestation subnet stability](https://github.com/ethereum/consensus-specs/blob/dev/specs/phase0/validator.md#phase-0-attestation-subnet-stability)\r\n\r\n**Add node-id subscription**\r\n* create function `compute_subnet_from_node_id(node_id) -> uint64` that takes in a node_id and returns a value on `[0, ATTESTATION_SUBNET_COUNT)`. Consider an `epoch` param that causes these subscriptions to slowly rotate on the order of ~1 day\r\n* Add \"MAY downscore peers that do no actively subscribe/participate in their currently assigned subnet based on `compute_subnet_from_node_id`\r\n* In [Lookahead](https://github.com/ethereum/consensus-specs/blob/dev/specs/phase0/validator.md#lookahead) section, replace `attnets` dht search with `compute_subnet_from_node_id` dht search\r\n\r\n## Strategy\r\n\r\nWe'd likely want to simulate and test this change in strategy in a controlled environment before pushing this to testnets and then mainnet.\r\n\r\nSuch a controlled environmnt to test gossipsub at scale seems critical to a number of the network optimization investigations underway.\r\n\r\nProtocol Lab's testground could be a good candidate. Alternatively, another simulation framework or even spinning up 1k+ distributed networks for ~1 day tests could also be a viable path.\r\n\r\n**EDITED TO USE `node_id` instead of `peer_id` per discussions below**",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2749/reactions",
    "total_count": 8,
    "+1": 8,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2749/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/982373996",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2749#issuecomment-982373996",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2749",
    "id": 982373996,
    "node_id": "IC_kwDOCOoGbc46jdZs",
    "user": {
      "login": "dapplion",
      "id": 35266934,
      "node_id": "MDQ6VXNlcjM1MjY2OTM0",
      "avatar_url": "https://avatars.githubusercontent.com/u/35266934?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dapplion",
      "html_url": "https://github.com/dapplion",
      "followers_url": "https://api.github.com/users/dapplion/followers",
      "following_url": "https://api.github.com/users/dapplion/following{/other_user}",
      "gists_url": "https://api.github.com/users/dapplion/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dapplion/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dapplion/subscriptions",
      "organizations_url": "https://api.github.com/users/dapplion/orgs",
      "repos_url": "https://api.github.com/users/dapplion/repos",
      "events_url": "https://api.github.com/users/dapplion/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dapplion/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-30T07:57:42Z",
    "updated_at": "2021-11-30T07:57:51Z",
    "author_association": "CONTRIBUTOR",
    "body": "This solution is really neat, having an enforceable condition is a great improvement. However, must be noted that for small stakers with a single key this requirement doubles their attestation processing cost while for large stakers / pools it'll represent a tiny increase, going against\r\n\r\n> The general idea at genesis was that a node's validator requirments will scale linearly when sharding is released\r\n\r\nPost sharding, single key stakers will be expected two fully validate two shards if their random subnet != current duty subnet?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/982373996/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/982640288",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2749#issuecomment-982640288",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2749",
    "id": 982640288,
    "node_id": "IC_kwDOCOoGbc46keag",
    "user": {
      "login": "Nashatyrev",
      "id": 8173857,
      "node_id": "MDQ6VXNlcjgxNzM4NTc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8173857?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Nashatyrev",
      "html_url": "https://github.com/Nashatyrev",
      "followers_url": "https://api.github.com/users/Nashatyrev/followers",
      "following_url": "https://api.github.com/users/Nashatyrev/following{/other_user}",
      "gists_url": "https://api.github.com/users/Nashatyrev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Nashatyrev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Nashatyrev/subscriptions",
      "organizations_url": "https://api.github.com/users/Nashatyrev/orgs",
      "repos_url": "https://api.github.com/users/Nashatyrev/repos",
      "events_url": "https://api.github.com/users/Nashatyrev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Nashatyrev/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-30T13:32:21Z",
    "updated_at": "2021-11-30T13:32:21Z",
    "author_association": "MEMBER",
    "body": "> Add a single random subnet per node, dictated by the peer-id\r\n\r\n@djrtwo Should the 'random' word be removed here? As I understand `subnet` is defined by deterministic function of `(peerId, epoch)` ?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/982640288/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/982723837",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2749#issuecomment-982723837",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2749",
    "id": 982723837,
    "node_id": "IC_kwDOCOoGbc46kyz9",
    "user": {
      "login": "Nashatyrev",
      "id": 8173857,
      "node_id": "MDQ6VXNlcjgxNzM4NTc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8173857?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Nashatyrev",
      "html_url": "https://github.com/Nashatyrev",
      "followers_url": "https://api.github.com/users/Nashatyrev/followers",
      "following_url": "https://api.github.com/users/Nashatyrev/following{/other_user}",
      "gists_url": "https://api.github.com/users/Nashatyrev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Nashatyrev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Nashatyrev/subscriptions",
      "organizations_url": "https://api.github.com/users/Nashatyrev/orgs",
      "repos_url": "https://api.github.com/users/Nashatyrev/repos",
      "events_url": "https://api.github.com/users/Nashatyrev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Nashatyrev/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-30T15:07:05Z",
    "updated_at": "2021-11-30T15:07:05Z",
    "author_association": "MEMBER",
    "body": "Good proposal from my perspective 👍 \r\n\r\nIt also has an extra benefit: it would make validator nodes not so trivially discoverable (currently it is even easy to estimate the number of validators per node with discovery `attSubnets` and `syncSubnets` attributes)\r\n\r\nHowever we need to consider a potential attack on a single attestation subnet. An attacker could craft specific `nodeId`s and spin up malicious nodes to eclipse a specific subnets for some specific range of epochs. An attack on a single subnet would require just 1/64 of malicious nodes than attacking the whole network. \r\n\r\nIt might make sense to think of mixing a randao to the `compute_subnet` function. That will significantly limit an attacker time to build it's 'subnetwork' of nodes in terms of discovery and gaining reputation. This would prevent from building malicious nodes for attack at some distant epoch. That's just a spontaneous idea. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/982723837/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/982736460",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2749#issuecomment-982736460",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2749",
    "id": 982736460,
    "node_id": "IC_kwDOCOoGbc46k15M",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-30T15:20:02Z",
    "updated_at": "2021-11-30T15:20:02Z",
    "author_association": "MEMBER",
    "body": "> Should the 'random' word be removed here? As I understand subnet is defined by deterministic function of (peerId, epoch) ?\r\n\r\nyeah, I guess I mean that you get an effective pseudo-random distribution. Will update",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/982736460/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/982748680",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2749#issuecomment-982748680",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2749",
    "id": 982748680,
    "node_id": "IC_kwDOCOoGbc46k44I",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-30T15:32:15Z",
    "updated_at": "2021-11-30T15:32:15Z",
    "author_association": "MEMBER",
    "body": ">  it would make validator nodes not so trivially discoverable\r\n\r\nright! an incredible amount of information is leaked today.\r\n\r\n> An attacker could craft specific nodeIds and spin up malicious nodes to eclipse a specific subnets for some specific range of epochs\r\n\r\nI see. I suppose you can attempt to flood the neighbor DHTs with peer-ids of a particular type so that when a node searches for a subnet, they find these \"fake\" subnet peers.\r\n\r\nI would argue that the damage of eclipsing a small set of nodes wrt an attsetation subnet is likely limited -- a few validators might no get their individual attestations included. A targeted DOS could do the same thing with likely even fewer resources.\r\n\r\nAdditionally, gossipsub's IWANT/IHAVE and other mechanisms are primarily for these types of cases. To aid dissemination of data even under various attacks to subnets.\r\n\r\n> An attack on a single subnet would require just 1/64 of malicious nodes than attacking the whole network\r\n\r\nRight, but this is likely *better* in the long run over our status quo. In the event that you have a 10:1 (or even 100:1) user_node:staking_node ratio then attacking subnets as a function of total network nodes degrades more and more.\r\n\r\n> It might make sense to think of mixing a randao to the compute_subnet function\r\n\r\nAh, okay. So you can't pre-compute a node-id table that will be useful for all time. This seems reasonable if you had short subscription times, but I think you likely want subscription times on the order of at a bare minimum 1-hour (or at least multiple epochs) to reduce subnet backbone churn. Once you get to 1-hour or 1-day an attack would be able to easily \"mine\" node-ids with a given randao. I suppose it makes it harder to get your peers positioned in the DHT though\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/982748680/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/982782377",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2749#issuecomment-982782377",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2749",
    "id": 982782377,
    "node_id": "IC_kwDOCOoGbc46lBGp",
    "user": {
      "login": "Nashatyrev",
      "id": 8173857,
      "node_id": "MDQ6VXNlcjgxNzM4NTc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8173857?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Nashatyrev",
      "html_url": "https://github.com/Nashatyrev",
      "followers_url": "https://api.github.com/users/Nashatyrev/followers",
      "following_url": "https://api.github.com/users/Nashatyrev/following{/other_user}",
      "gists_url": "https://api.github.com/users/Nashatyrev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Nashatyrev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Nashatyrev/subscriptions",
      "organizations_url": "https://api.github.com/users/Nashatyrev/orgs",
      "repos_url": "https://api.github.com/users/Nashatyrev/repos",
      "events_url": "https://api.github.com/users/Nashatyrev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Nashatyrev/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-30T16:07:45Z",
    "updated_at": "2021-11-30T16:07:45Z",
    "author_association": "MEMBER",
    "body": "> Right, but this is likely better in the long run over our status quo. \r\n\r\nYep, the present solution looks even more vulnerable to me.\r\n\r\n> Ah, okay. So you can't pre-compute a node-id table that will be useful for all time. This seems reasonable if you had short subscription times, but I think you likely want subscription times on the order of at a bare minimum 1-hour (or at least multiple epochs) to reduce subnet backbone churn. Once you get to 1-hour or 1-day an attack would be able to easily \"mine\" node-ids with a given randao. I suppose it makes it harder to get your peers positioned in the DHT though\r\n\r\nYes, that's totally not a silver bullet, but limits an attacker time to 1-hour/1-day. \r\nAdditionally nodes wishing to join a subnet could prioritize nodes which were seen in discovery longer than 1-hour/1-day since they are 100% could not be specially crafted for that kind of attack. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/982782377/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/982795629",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2749#issuecomment-982795629",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2749",
    "id": 982795629,
    "node_id": "IC_kwDOCOoGbc46lEVt",
    "user": {
      "login": "Nashatyrev",
      "id": 8173857,
      "node_id": "MDQ6VXNlcjgxNzM4NTc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8173857?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Nashatyrev",
      "html_url": "https://github.com/Nashatyrev",
      "followers_url": "https://api.github.com/users/Nashatyrev/followers",
      "following_url": "https://api.github.com/users/Nashatyrev/following{/other_user}",
      "gists_url": "https://api.github.com/users/Nashatyrev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Nashatyrev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Nashatyrev/subscriptions",
      "organizations_url": "https://api.github.com/users/Nashatyrev/orgs",
      "repos_url": "https://api.github.com/users/Nashatyrev/repos",
      "events_url": "https://api.github.com/users/Nashatyrev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Nashatyrev/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-30T16:22:03Z",
    "updated_at": "2021-12-01T17:18:57Z",
    "author_association": "MEMBER",
    "body": "Additional argument pro this solution: \r\n\r\nI'm now gathering mainnet network statistics and it looks like large validator nodes (with many att subnets subscriptions) tend to restrict inbound connections: i.e. they either immediately drop connection or keep you connected for just several seconds and then disconnect with `TOO_MANY_PEERS`. (I think I could get back soon with some specific statistics)\r\n\r\nThat behavior seems reasonable when you have much at stake since every inbound connection adds more risk to be attacked. So I believe this tendency could evolve further with time and it would be even harder to join a subnet \r\n\r\nUPD: some connection statistics: \r\n\r\n```\r\nNumber of nodes tried to connect (>= 20 connection attempts): 2769\r\nTotal connection attempts: 812291\r\n\r\nNodes with subnet count [1..31]:\r\n    Connected at least once: 1818\r\n    Never connected: 451\r\nNodes with subnet count [32..64]:\r\n    Connected at least once: 330\r\n    Never connected: 170\r\n```\r\n\r\nProbability of being connected to a node (connected here means \"negotiate on Eth2 level and then being connected for at least 5 slots\") with grouping to 'small' validator nodes (from 1 to 31 att subnets) and 'large' validator nodes (more than 31 att subnets): \r\n\r\n![изображение](https://user-images.githubusercontent.com/8173857/144281305-fa477371-6987-474d-b8f9-bec48bd2fffe.png)\r\n\r\nSo large validator nodes indeed harder to connect to, but the overall statistics doesn't look too dramatic ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/982795629/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/982955385",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2749#issuecomment-982955385",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2749",
    "id": 982955385,
    "node_id": "IC_kwDOCOoGbc46lrV5",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-30T19:36:17Z",
    "updated_at": "2021-11-30T19:36:17Z",
    "author_association": "MEMBER",
    "body": "I would argue that due to our attestation subnet search requirements that all nodes should have both a `MAX_PEERS` and `TARGET_PEERS` value that by-default are different (`MAX_PEERS > TARGET_PEERS`). This would allow for new inbound connections to be made (up to `MAX_PEERS`) while the node then prunes down to `TARGET_PEERS`.\r\n\r\nOtherwise, node connections can become far to rigid and peer discovery for particular purposes (e.g. finding a subnet) can become more prone to error.\r\n\r\nLighthouse uses this mechanism and has since genesis.\r\n\r\nWe might evn consider specifying this as honest behaviour (e.g. `MAX_PEERS >= TARGET_PEERS + 5` for any value of `TARGET_PEERS`. It's unenforceable but a better default/honest behaviour, imo\r\n\r\n ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/982955385/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/982978042",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2749#issuecomment-982978042",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2749",
    "id": 982978042,
    "node_id": "IC_kwDOCOoGbc46lw36",
    "user": {
      "login": "Nashatyrev",
      "id": 8173857,
      "node_id": "MDQ6VXNlcjgxNzM4NTc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8173857?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Nashatyrev",
      "html_url": "https://github.com/Nashatyrev",
      "followers_url": "https://api.github.com/users/Nashatyrev/followers",
      "following_url": "https://api.github.com/users/Nashatyrev/following{/other_user}",
      "gists_url": "https://api.github.com/users/Nashatyrev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Nashatyrev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Nashatyrev/subscriptions",
      "organizations_url": "https://api.github.com/users/Nashatyrev/orgs",
      "repos_url": "https://api.github.com/users/Nashatyrev/repos",
      "events_url": "https://api.github.com/users/Nashatyrev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Nashatyrev/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-30T20:06:08Z",
    "updated_at": "2021-11-30T20:06:08Z",
    "author_association": "MEMBER",
    "body": "> That behavior seems reasonable\r\n\r\nI was probably trying to say 'behavior rational from validator node's perspective' rather than 'reasonable from the network point of view' \r\n\r\nI agree that dropping inbound connections is not a honest behavior, but if I was maintaining a node with a lot of validators and acting rationally I would stick to some kind of conservative peer management policy like peering with just a limited known subset of nodes or something similar ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/982978042/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/983135232",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2749#issuecomment-983135232",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2749",
    "id": 983135232,
    "node_id": "IC_kwDOCOoGbc46mXQA",
    "user": {
      "login": "ajsutton",
      "id": 72675,
      "node_id": "MDQ6VXNlcjcyNjc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/72675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajsutton",
      "html_url": "https://github.com/ajsutton",
      "followers_url": "https://api.github.com/users/ajsutton/followers",
      "following_url": "https://api.github.com/users/ajsutton/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajsutton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajsutton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajsutton/subscriptions",
      "organizations_url": "https://api.github.com/users/ajsutton/orgs",
      "repos_url": "https://api.github.com/users/ajsutton/repos",
      "events_url": "https://api.github.com/users/ajsutton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajsutton/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-30T23:58:23Z",
    "updated_at": "2021-11-30T23:58:23Z",
    "author_association": "CONTRIBUTOR",
    "body": ">I would argue that due to our attestation subnet search requirements that all nodes should have both a MAX_PEERS and TARGET_PEERS value that by-default are different (MAX_PEERS > TARGET_PEERS). This would allow for new inbound connections to be made (up to MAX_PEERS) while the node then prunes down to TARGET_PEERS.\r\n\r\nTeku does this in a similar way to Lighthouse but because there are so many nodes with closed ports, any node with open ports gets far more incoming connection attempts than it needs (or can reasonably be expected to accept).  So even with a large difference between `TARGET_PEERS` and `MAX_PEERS` the node winds up constantly at `MAX_PEERS`. That effect is even more amplified for a node that is subscribed to a lot of subnets because it's then a high value peer to have.\r\n\r\nWe've been recommending to users for a while that the best way to improve attestation performance is ensure incoming connections work because that not only lets you find peers faster, it gives you a much wider selection of peers to select from because you will inevitably have more incoming requests than your node could possibly handle.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/983135232/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/983174075",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2749#issuecomment-983174075",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2749",
    "id": 983174075,
    "node_id": "IC_kwDOCOoGbc46mgu7",
    "user": {
      "login": "AgeManning",
      "id": 7454587,
      "node_id": "MDQ6VXNlcjc0NTQ1ODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7454587?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AgeManning",
      "html_url": "https://github.com/AgeManning",
      "followers_url": "https://api.github.com/users/AgeManning/followers",
      "following_url": "https://api.github.com/users/AgeManning/following{/other_user}",
      "gists_url": "https://api.github.com/users/AgeManning/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AgeManning/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AgeManning/subscriptions",
      "organizations_url": "https://api.github.com/users/AgeManning/orgs",
      "repos_url": "https://api.github.com/users/AgeManning/repos",
      "events_url": "https://api.github.com/users/AgeManning/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AgeManning/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-12-01T00:51:05Z",
    "updated_at": "2021-12-01T00:51:05Z",
    "author_association": "CONTRIBUTOR",
    "body": "Also in favour of the change. I'm just thinking about attacks mentioned and also discovery efficency. \r\n\r\nJust to clarify, anyone can still spin up a bunch of nodes and subscribe to a single subnet and try and censor messages/cause havoc on a subnet. The change here (as I understand) is that we would actively search for specific peer-ids rather than ENRs with subnet fields. The attack as it stands today, would consist of just spinning up a bunch of nodes with enr's saying you are subscribed to a subnet and discovery would try and find those nodes. I think the change suggested is here is strictly safer in that now you can't just modify an ENR field, you have to pre-generate a bunch of node-ids. \r\n\r\nI think the next interesting thing is about whether you can eclipse a target node via discovery with your malicious nodes (that you've pregenerated). We usually search for random node ids, which makes eclipsing a individual node hard provided there are sufficient good nodes in the DHT. \r\n\r\nAnother thought I had which would make searching easier/more efficient but could potentially increase the risk of these eclipses. Currently, we select a random node-id and troll through the closest nodes to this random id until we find enough that have an ENR that match a subnet. Instead, we could potentially do the following:\r\n\r\nInstead of having it based on `peer-id` have it based on `node-id` (used in discovery can be calculated from ENR and most cases, peer-id). If we base the subnet a node should be subscribed to on the first 8 bits of the `node-id` (i.e the subnet number in binary) with the epoch rotating them in some way, then we can search for peers on a subnet by searching discovery for nodes closest to a node-id with the first 8 bits being the subnet-id we want. I think this would leverage the XOR metric in discovery  and the query mechanism to find nodes based on this subnet more efficiently than randomly trolling the DHT (i.e we can get discovery to specifically find nodes on a subnet). I haven't fully thought through the draw backs in possible eclipsing however.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/983174075/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/983212092",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2749#issuecomment-983212092",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2749",
    "id": 983212092,
    "node_id": "IC_kwDOCOoGbc46mqA8",
    "user": {
      "login": "nisdas",
      "id": 33201827,
      "node_id": "MDQ6VXNlcjMzMjAxODI3",
      "avatar_url": "https://avatars.githubusercontent.com/u/33201827?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nisdas",
      "html_url": "https://github.com/nisdas",
      "followers_url": "https://api.github.com/users/nisdas/followers",
      "following_url": "https://api.github.com/users/nisdas/following{/other_user}",
      "gists_url": "https://api.github.com/users/nisdas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nisdas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nisdas/subscriptions",
      "organizations_url": "https://api.github.com/users/nisdas/orgs",
      "repos_url": "https://api.github.com/users/nisdas/repos",
      "events_url": "https://api.github.com/users/nisdas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nisdas/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-12-01T02:03:12Z",
    "updated_at": "2021-12-01T02:03:12Z",
    "author_association": "CONTRIBUTOR",
    "body": "One advantage of the current strategy is that while subnets are more concentrated, an attestation that is propagated there has a very high likelihood of making it into all the aggregates eventually broadcasted. This is simply for the fact that only nodes with active validators are going to  be subscribed to a subnet. For attestations to be propagated to all nodes in the particular subnet requires a smaller number of hops.\r\n\r\nShifting this to now be dependant on a node's id would also bring in both staking and non-staking nodes to the current subnet. If we expect non-staking nodes to eventually be 10 times the amount of staking nodes this is a non-trivial increase. An increase in the number of hops would have an effect on whether a particular individual attestation can make it into the aggregate in time. This would definitely require a bit more involved testing/simulations to see how this would affect the overall participation of the network. \r\n\r\nThings we would have to look out for:\r\n-> With the increased number of hops per subnet, how much longer would it take for an attestation to reach all the relevant \r\naggregators in that subnet ?\r\n-> If attestations now take longer to be propagated across the network, would this change lead to more disjoint aggregates, and along with that a higher CPU load for the entire network as now more individual aggregates have to be verified ?\r\n-> How would this perform in situations such as late blocks ? If blocks are late, there is a chance that the particular attestation might never make it into an aggregate in time due to increased number of hops across the network and permanently go 'missing' . \r\n\r\nAlso on another note to add, the `peer_id` isn't perfectly random. Irregardless of what curve is used to create the underlying public key, the peer-id spec appends the function code and size of the key at the start of it:\r\nhttps://github.com/libp2p/specs/blob/master/peer-ids/peer-ids.md#peer-ids . This can lead to the network being biased towards particular subnets. I would agree with @AgeManning that we should be using `node-id` here as we do for discovery in general. The node id in contrast is simply the keccak-256 hash of the uncompressed pubkey,  \r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/983212092/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/983732836",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2749#issuecomment-983732836",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2749",
    "id": 983732836,
    "node_id": "IC_kwDOCOoGbc46opJk",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-12-01T15:07:13Z",
    "updated_at": "2021-12-01T15:07:13Z",
    "author_association": "MEMBER",
    "body": "One thing to note is that this will degrade on small-node-count networks (e.g. testnets and devnets).\r\n\r\nTo counteract this -- I propose adding a configuration value  (only updated at network upgrades) called `ESTIMATED_NETWORK_NODE_COUNT` (or something...) along with `MINIMUM_TARGET_SUBNET_BACKBONE` which then dictates *how many* subnets a node must be on for honest participation.\r\n\r\nSo concretely:\r\n* `ESTIMATED_NETWORK_NODE_COUNT` -- e.g. 4500 on mainnet, 100 on prater, etc\r\n* `MINIMUM_TARGET_SUBNET_BACKBONE` -- e.g. 50 or whatever we deem as safe in some analysis\r\n* change `compute_subnet_from_node_id` to `compute_subnets_from_node_id(node_id, epoch) -> List[uint64]` -- thus returning a list of size `max(1, MINIMUM_TARGET_SUBNET_BACKBONE // (ESTIMATED_NETWORK_NODE_COUNT // ATTESTATION_SUBNET_COUNT)` up to a maximum of `ATTESTATION_SUBNET_COUNT`. This would ensure that the honest behaviour based on network node count estimates is to meet the minimum subnet backbone target. On mainnet this would likely be `1` but on small testnets it would ramp up",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/983732836/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/983735349",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2749#issuecomment-983735349",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2749",
    "id": 983735349,
    "node_id": "IC_kwDOCOoGbc46opw1",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-12-01T15:09:41Z",
    "updated_at": "2021-12-01T15:09:41Z",
    "author_association": "MEMBER",
    "body": "> An increase in the number of hops would have an effect on whether a particular individual attestation can make it into the aggregate in time.\r\n\r\nfortunately gossip hops generally scale with log(N) where N is size of the network. In expectation, this likely won't affect delivery times in a well-structured/distributed network\r\n\r\n> I would agree with @AgeManning that we should be using node-id here as we do for discovery in general. The node id in contrast is simply the keccak-256 hash of the uncompressed pubkey,\r\n\r\nAgreed",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/983735349/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/984349989",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2749#issuecomment-984349989",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2749",
    "id": 984349989,
    "node_id": "IC_kwDOCOoGbc46q_0l",
    "user": {
      "login": "mkalinin",
      "id": 1892772,
      "node_id": "MDQ6VXNlcjE4OTI3NzI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1892772?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mkalinin",
      "html_url": "https://github.com/mkalinin",
      "followers_url": "https://api.github.com/users/mkalinin/followers",
      "following_url": "https://api.github.com/users/mkalinin/following{/other_user}",
      "gists_url": "https://api.github.com/users/mkalinin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mkalinin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mkalinin/subscriptions",
      "organizations_url": "https://api.github.com/users/mkalinin/orgs",
      "repos_url": "https://api.github.com/users/mkalinin/repos",
      "events_url": "https://api.github.com/users/mkalinin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mkalinin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-12-02T07:09:15Z",
    "updated_at": "2021-12-02T07:09:15Z",
    "author_association": "MEMBER",
    "body": "> To counteract this -- I propose adding a configuration value (only updated at network upgrades) called ESTIMATED_NETWORK_NODE_COUNT (or something...) along with MINIMUM_TARGET_SUBNET_BACKBONE which then dictates how many subnets a node must be on for honest participation.\r\n\r\nWhy not adjust `ATTESTATION_SUBNET_COUNT` accordingly?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/984349989/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/991983653",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2749#issuecomment-991983653",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2749",
    "id": 991983653,
    "node_id": "IC_kwDOCOoGbc47IHgl",
    "user": {
      "login": "mcdee",
      "id": 511384,
      "node_id": "MDQ6VXNlcjUxMTM4NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/511384?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mcdee",
      "html_url": "https://github.com/mcdee",
      "followers_url": "https://api.github.com/users/mcdee/followers",
      "following_url": "https://api.github.com/users/mcdee/following{/other_user}",
      "gists_url": "https://api.github.com/users/mcdee/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mcdee/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mcdee/subscriptions",
      "organizations_url": "https://api.github.com/users/mcdee/orgs",
      "repos_url": "https://api.github.com/users/mcdee/repos",
      "events_url": "https://api.github.com/users/mcdee/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mcdee/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-12-12T22:35:02Z",
    "updated_at": "2021-12-12T22:35:02Z",
    "author_association": "CONTRIBUTOR",
    "body": "> This means that we simultaneously reduce the over population of attnets by a small number of staking nodes\r\n\r\nIs this such a terrible thing?  Larger staking nodes are often highly specced, and will commonly have aggregating validators, so are both required to and capable of generating aggregate attestations in a timely and (rest of the network willing) relatively complete fashion.  Given the makeup of aggregates in the average block at current, anything that would potentially reduce the effectiveness of aggregators would seem to be a retrograde step with potentially significant impact.\r\n\r\nIf nodes could still join more subnets, as per the current `--subscribe-all-subnets` flag or similar, it would avoid the situation of a large validating node potentially not subscribed to most attnets for which it is an aggregator (resulting in increased hops for traffic, higher latency, and associated Bad Things).\r\n\r\nThis would potentially weaken some of the ideas above, such as being able to generate the set of subnets a given node subscribes to given its node ID, but I think would be overall net positive.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/991983653/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/992009433",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2749#issuecomment-992009433",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2749",
    "id": 992009433,
    "node_id": "IC_kwDOCOoGbc47INzZ",
    "user": {
      "login": "AgeManning",
      "id": 7454587,
      "node_id": "MDQ6VXNlcjc0NTQ1ODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7454587?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AgeManning",
      "html_url": "https://github.com/AgeManning",
      "followers_url": "https://api.github.com/users/AgeManning/followers",
      "following_url": "https://api.github.com/users/AgeManning/following{/other_user}",
      "gists_url": "https://api.github.com/users/AgeManning/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AgeManning/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AgeManning/subscriptions",
      "organizations_url": "https://api.github.com/users/AgeManning/orgs",
      "repos_url": "https://api.github.com/users/AgeManning/repos",
      "events_url": "https://api.github.com/users/AgeManning/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AgeManning/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-12-13T00:44:24Z",
    "updated_at": "2021-12-13T00:44:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "> If nodes could still join more subnets, as per the current --subscribe-all-subnets flag or similar, it would avoid the situation of a large validating node potentially not subscribed to most attnets for which it is an aggregator (resulting in increased hops for traffic, higher latency, and associated Bad Things).\r\n\r\nI think this is a client implementation detail. Clients should be fine to manage their peers for subnets they need ahead of time and if there's enough peers on the subnets should manage this gracefully. I would consider `large validating node potentially not subscribed to most attnets for which it is an aggregator` being a fault with the beacon node implementation. \r\n\r\nAs you've pointed out, there are potential downsides to changing the network structure, but its hard to estimate what these actually are in practice without large-scale tests. I think this change is valuable enough that we test how it performs on a devnet, then testnets etc. \r\n\r\nJust to make it explicit, there is quite a large burden on large validating nodes. Being subscribed to every subnet all of the time defeats the purpose of having subnets at all. They have to validate and propagate everything. It could be beneficial having a smaller number of nodes on each subnet, but having each node less restricted by CPU/bandwidth. \r\n\r\nIn Lighthouse we'll keep the `--subscribe-all-subnets` flag, for users who are not constrainted by CPU/bandwidth, but I think it could potentially be nicer to not require this as a default.\r\n\r\n\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/992009433/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/992013216",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2749#issuecomment-992013216",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2749",
    "id": 992013216,
    "node_id": "IC_kwDOCOoGbc47IOug",
    "user": {
      "login": "ajsutton",
      "id": 72675,
      "node_id": "MDQ6VXNlcjcyNjc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/72675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajsutton",
      "html_url": "https://github.com/ajsutton",
      "followers_url": "https://api.github.com/users/ajsutton/followers",
      "following_url": "https://api.github.com/users/ajsutton/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajsutton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajsutton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajsutton/subscriptions",
      "organizations_url": "https://api.github.com/users/ajsutton/orgs",
      "repos_url": "https://api.github.com/users/ajsutton/repos",
      "events_url": "https://api.github.com/users/ajsutton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajsutton/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-12-13T00:54:40Z",
    "updated_at": "2021-12-13T00:54:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "Agreed, Teku will also keep the `--subscribe-all-subnets` but it will require more and more resources to keep up with that as the number of validators grows.\r\n\r\nAlso given that validators are spread over 32 slots and 64 subnets, if you're running 2048 validators or more then you're probably subscribed to every subnet to support your aggregation duties anyway and that's probably true with even fewer validators since you'd likely subscribe a few slots before you need to aggregate.\r\n\r\nFor small numbers of validators this likely has a bigger impact and reduces the load. Currently for each of the first 64 or so validators you wind up subscribed to an additional subnet, plus a potentially temporary subscription to aggregate. Whereas with this change that burden is reduced significantly. Potentially that makes it more feasible for people to stake from home with a few validators rather than having to move to the cloud for bandwidth.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/992013216/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/993272065",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2749#issuecomment-993272065",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2749",
    "id": 993272065,
    "node_id": "IC_kwDOCOoGbc47NCEB",
    "user": {
      "login": "arnetheduck",
      "id": 1382986,
      "node_id": "MDQ6VXNlcjEzODI5ODY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1382986?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/arnetheduck",
      "html_url": "https://github.com/arnetheduck",
      "followers_url": "https://api.github.com/users/arnetheduck/followers",
      "following_url": "https://api.github.com/users/arnetheduck/following{/other_user}",
      "gists_url": "https://api.github.com/users/arnetheduck/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/arnetheduck/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/arnetheduck/subscriptions",
      "organizations_url": "https://api.github.com/users/arnetheduck/orgs",
      "repos_url": "https://api.github.com/users/arnetheduck/repos",
      "events_url": "https://api.github.com/users/arnetheduck/events{/privacy}",
      "received_events_url": "https://api.github.com/users/arnetheduck/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-12-14T08:22:50Z",
    "updated_at": "2021-12-14T08:22:50Z",
    "author_association": "CONTRIBUTOR",
    "body": "> but it will require more and more resources to keep up with that as the number of validators grows.\r\n\r\nHow so? There's a cap on the number of attestations / epoch in the system, and we've reached peak-attestation on mainnet already.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/993272065/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/993365942",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2749#issuecomment-993365942",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2749",
    "id": 993365942,
    "node_id": "IC_kwDOCOoGbc47NY-2",
    "user": {
      "login": "ajsutton",
      "id": 72675,
      "node_id": "MDQ6VXNlcjcyNjc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/72675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajsutton",
      "html_url": "https://github.com/ajsutton",
      "followers_url": "https://api.github.com/users/ajsutton/followers",
      "following_url": "https://api.github.com/users/ajsutton/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajsutton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajsutton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajsutton/subscriptions",
      "organizations_url": "https://api.github.com/users/ajsutton/orgs",
      "repos_url": "https://api.github.com/users/ajsutton/repos",
      "events_url": "https://api.github.com/users/ajsutton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajsutton/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-12-14T09:55:43Z",
    "updated_at": "2021-12-14T09:55:43Z",
    "author_association": "CONTRIBUTOR",
    "body": "> How so? There's a cap on the number of attestations / epoch in the system, and we've reached peak-attestation on mainnet already.\r\n\r\nEvery validator attests every epoch so if you're subscribed to all individual subnets the more validators there are the more individual attestation gossip messages you have to handle.  There is no peak-attestation, only peak-aggregate.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/993365942/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/993403126",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2749#issuecomment-993403126",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2749",
    "id": 993403126,
    "node_id": "IC_kwDOCOoGbc47NiD2",
    "user": {
      "login": "arnetheduck",
      "id": 1382986,
      "node_id": "MDQ6VXNlcjEzODI5ODY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1382986?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/arnetheduck",
      "html_url": "https://github.com/arnetheduck",
      "followers_url": "https://api.github.com/users/arnetheduck/followers",
      "following_url": "https://api.github.com/users/arnetheduck/following{/other_user}",
      "gists_url": "https://api.github.com/users/arnetheduck/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/arnetheduck/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/arnetheduck/subscriptions",
      "organizations_url": "https://api.github.com/users/arnetheduck/orgs",
      "repos_url": "https://api.github.com/users/arnetheduck/repos",
      "events_url": "https://api.github.com/users/arnetheduck/events{/privacy}",
      "received_events_url": "https://api.github.com/users/arnetheduck/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-12-14T10:33:40Z",
    "updated_at": "2021-12-14T10:33:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "Right, I got the two confused it seems.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/993403126/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/994694905",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2749#issuecomment-994694905",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2749",
    "id": 994694905,
    "node_id": "IC_kwDOCOoGbc47Sdb5",
    "user": {
      "login": "dapplion",
      "id": 35266934,
      "node_id": "MDQ6VXNlcjM1MjY2OTM0",
      "avatar_url": "https://avatars.githubusercontent.com/u/35266934?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dapplion",
      "html_url": "https://github.com/dapplion",
      "followers_url": "https://api.github.com/users/dapplion/followers",
      "following_url": "https://api.github.com/users/dapplion/following{/other_user}",
      "gists_url": "https://api.github.com/users/dapplion/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dapplion/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dapplion/subscriptions",
      "organizations_url": "https://api.github.com/users/dapplion/orgs",
      "repos_url": "https://api.github.com/users/dapplion/repos",
      "events_url": "https://api.github.com/users/dapplion/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dapplion/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-12-15T11:21:47Z",
    "updated_at": "2021-12-15T11:21:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "This idea can be extended to sync committee subnets too. But with some mod such that only 1 every N validators have to subscribe.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/994694905/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1000806204",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2749#issuecomment-1000806204",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2749",
    "id": 1000806204,
    "node_id": "IC_kwDOCOoGbc47pxc8",
    "user": {
      "login": "Nashatyrev",
      "id": 8173857,
      "node_id": "MDQ6VXNlcjgxNzM4NTc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8173857?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Nashatyrev",
      "html_url": "https://github.com/Nashatyrev",
      "followers_url": "https://api.github.com/users/Nashatyrev/followers",
      "following_url": "https://api.github.com/users/Nashatyrev/following{/other_user}",
      "gists_url": "https://api.github.com/users/Nashatyrev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Nashatyrev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Nashatyrev/subscriptions",
      "organizations_url": "https://api.github.com/users/Nashatyrev/orgs",
      "repos_url": "https://api.github.com/users/Nashatyrev/repos",
      "events_url": "https://api.github.com/users/Nashatyrev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Nashatyrev/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-12-24T11:43:47Z",
    "updated_at": "2021-12-24T11:43:47Z",
    "author_association": "MEMBER",
    "body": "> Subnets entry points can be found in a relatively short time (< 1 minute) and short search overhead (within a few hops of the DHT)\r\n\r\n@djrtwo not actually sure I understand how DHT could be utilized here (with just discV5 in mind)? \r\nFrom my perspective finding entry points would only be possible by iterating known nodes and checking that _function_ applied to a nodeId results in the needed subnet.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1000806204/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1000952534",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2749#issuecomment-1000952534",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2749",
    "id": 1000952534,
    "node_id": "IC_kwDOCOoGbc47qVLW",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-12-25T00:41:16Z",
    "updated_at": "2021-12-25T00:41:16Z",
    "author_association": "MEMBER",
    "body": "I'd recommend checking existing nodes but going to the dht (discv5) to find appropriate peers would be the backup when existing/known peers dont meet the requirement. \n\nThat said, itd be good to pre-populate known peers with a diverse set of attnets\n\nI might be confused by your comment @ant, can you elaborate?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1000952534/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1008465145",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2749#issuecomment-1008465145",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2749",
    "id": 1008465145,
    "node_id": "IC_kwDOCOoGbc48G_T5",
    "user": {
      "login": "AgeManning",
      "id": 7454587,
      "node_id": "MDQ6VXNlcjc0NTQ1ODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7454587?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AgeManning",
      "html_url": "https://github.com/AgeManning",
      "followers_url": "https://api.github.com/users/AgeManning/followers",
      "following_url": "https://api.github.com/users/AgeManning/following{/other_user}",
      "gists_url": "https://api.github.com/users/AgeManning/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AgeManning/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AgeManning/subscriptions",
      "organizations_url": "https://api.github.com/users/AgeManning/orgs",
      "repos_url": "https://api.github.com/users/AgeManning/repos",
      "events_url": "https://api.github.com/users/AgeManning/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AgeManning/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-10T00:59:28Z",
    "updated_at": "2022-01-10T00:59:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Instead of having it based on peer-id have it based on node-id (used in discovery can be calculated from ENR and most cases, peer-id). If we base the subnet a node should be subscribed to on the first 8 bits of the node-id (i.e the subnet number in binary) with the epoch rotating them in some way, then we can search for peers on a subnet by searching discovery for nodes closest to a node-id with the first 8 bits being the subnet-id we want. I think this would leverage the XOR metric in discovery and the query mechanism to find nodes based on this subnet more efficiently than randomly trolling the DHT (i.e we can get discovery to specifically find nodes on a subnet). I haven't fully thought through the draw backs in possible eclipsing however.\r\n\r\nI think this is something worth considering and is a way to use the discv5 DHT (or rather the kademlia XOR metric) to find nodes on subnets faster. i.e minimize the search overhead.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1008465145/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1009998247",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2749#issuecomment-1009998247",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2749",
    "id": 1009998247,
    "node_id": "IC_kwDOCOoGbc48M1mn",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-11T14:07:46Z",
    "updated_at": "2022-01-11T14:07:46Z",
    "author_association": "MEMBER",
    "body": "Yeah, that makes sense to me. Is there any reason peer-id is beneficial over node-id?\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1009998247/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1009998711",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2749#issuecomment-1009998711",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2749",
    "id": 1009998711,
    "node_id": "IC_kwDOCOoGbc48M1t3",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-11T14:08:17Z",
    "updated_at": "2022-01-11T14:08:17Z",
    "author_association": "MEMBER",
    "body": "I'd like to test and model this.\r\n\r\nAnyone have the bandwidth to do either?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1009998711/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1010559630",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2749#issuecomment-1010559630",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2749",
    "id": 1010559630,
    "node_id": "IC_kwDOCOoGbc48O-qO",
    "user": {
      "login": "AgeManning",
      "id": 7454587,
      "node_id": "MDQ6VXNlcjc0NTQ1ODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7454587?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AgeManning",
      "html_url": "https://github.com/AgeManning",
      "followers_url": "https://api.github.com/users/AgeManning/followers",
      "following_url": "https://api.github.com/users/AgeManning/following{/other_user}",
      "gists_url": "https://api.github.com/users/AgeManning/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AgeManning/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AgeManning/subscriptions",
      "organizations_url": "https://api.github.com/users/AgeManning/orgs",
      "repos_url": "https://api.github.com/users/AgeManning/repos",
      "events_url": "https://api.github.com/users/AgeManning/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AgeManning/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-12T02:10:14Z",
    "updated_at": "2022-01-12T02:10:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "I can write up a simulation at some point, verifying the idea suggested above saves us discovery hops when traversing the DHT comparted to randomly searching. I'll post results here. \r\n\r\nI imagine we probably need to adjust our peer management a bit. If each node we connect to is only subscribed to one long-lived subnet, we might want to increase our default peer count to handle all 64 subnets and not have too much peer churn. \r\n\r\nWe probably need to agree on a function perhaps something like: \r\n```python\r\ndef compute_subnet_from_node_id(node_id, epoch):\r\n    return ((id >> 250) + epoch // SUBNET_DURATION_IN_EPOCHS) % ATTESTATION_SUBNET_COUNT\r\n```\r\n\r\nWhere the node_id is 32 byte `node_id` and `SUBNET_DURATION` is like 288 (1 day approx). The `250` gives us the first 6 bits but is dependant on the size of `ATTESTATION_SUBNET_COUNT`. \r\n\r\nAnyone, I\"ll start a branch on Lighthouse, so make lighthouse ready if someone has bandwidth to start a testnet. \r\n\r\n\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1010559630/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1012957849",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2749#issuecomment-1012957849",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2749",
    "id": 1012957849,
    "node_id": "IC_kwDOCOoGbc48YIKZ",
    "user": {
      "login": "Nashatyrev",
      "id": 8173857,
      "node_id": "MDQ6VXNlcjgxNzM4NTc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8173857?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Nashatyrev",
      "html_url": "https://github.com/Nashatyrev",
      "followers_url": "https://api.github.com/users/Nashatyrev/followers",
      "following_url": "https://api.github.com/users/Nashatyrev/following{/other_user}",
      "gists_url": "https://api.github.com/users/Nashatyrev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Nashatyrev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Nashatyrev/subscriptions",
      "organizations_url": "https://api.github.com/users/Nashatyrev/orgs",
      "repos_url": "https://api.github.com/users/Nashatyrev/repos",
      "events_url": "https://api.github.com/users/Nashatyrev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Nashatyrev/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-14T09:38:07Z",
    "updated_at": "2022-01-14T09:38:07Z",
    "author_association": "MEMBER",
    "body": "> I can write up a simulation at some point, verifying the idea suggested above saves us discovery hops when traversing the DHT comparted to randomly searching. I'll post results here.\r\n\r\nWas doing some experiments with discv5 recently (live not simulation), and DHT searching is indeed much more effective than a random. \r\nDon't have exact numbers, but finding all known nodes with id starting with a 8-bit prefix takes about 10 seconds, while iterating over all nodes globally takes minutes of intensive discovery message exchange ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1012957849/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1012982622",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2749#issuecomment-1012982622",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2749",
    "id": 1012982622,
    "node_id": "IC_kwDOCOoGbc48YONe",
    "user": {
      "login": "Nashatyrev",
      "id": 8173857,
      "node_id": "MDQ6VXNlcjgxNzM4NTc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8173857?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Nashatyrev",
      "html_url": "https://github.com/Nashatyrev",
      "followers_url": "https://api.github.com/users/Nashatyrev/followers",
      "following_url": "https://api.github.com/users/Nashatyrev/following{/other_user}",
      "gists_url": "https://api.github.com/users/Nashatyrev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Nashatyrev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Nashatyrev/subscriptions",
      "organizations_url": "https://api.github.com/users/Nashatyrev/orgs",
      "repos_url": "https://api.github.com/users/Nashatyrev/repos",
      "events_url": "https://api.github.com/users/Nashatyrev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Nashatyrev/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-14T10:09:38Z",
    "updated_at": "2022-01-14T10:09:38Z",
    "author_association": "MEMBER",
    "body": "Just run a number of experiments with DHT searching for nodes with 8-bit prefix: \r\n- The majority of _live_ nodes is normally found withing 3-4 hops. This could fit in 1 second\r\n- _All_ peers (with prefix) are normally found within 100 requests. When doing in parallel it takes around 5-10sec",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1012982622/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
