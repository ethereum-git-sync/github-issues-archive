{
  "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/479",
  "repository_url": "https://api.github.com/repos/ethereum/consensus-specs",
  "labels_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/479/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/479/comments",
  "events_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/479/events",
  "html_url": "https://github.com/ethereum/consensus-specs/issues/479",
  "id": 401133933,
  "node_id": "MDU6SXNzdWU0MDExMzM5MzM=",
  "number": 479,
  "title": "SSZ spec missing explicit checks container decoding",
  "user": {
    "login": "holiman",
    "id": 142290,
    "node_id": "MDQ6VXNlcjE0MjI5MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/142290?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/holiman",
    "html_url": "https://github.com/holiman",
    "followers_url": "https://api.github.com/users/holiman/followers",
    "following_url": "https://api.github.com/users/holiman/following{/other_user}",
    "gists_url": "https://api.github.com/users/holiman/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/holiman/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/holiman/subscriptions",
    "organizations_url": "https://api.github.com/users/holiman/orgs",
    "repos_url": "https://api.github.com/users/holiman/repos",
    "events_url": "https://api.github.com/users/holiman/events{/privacy}",
    "received_events_url": "https://api.github.com/users/holiman/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1063043866,
      "node_id": "MDU6TGFiZWwxMDYzMDQzODY2",
      "url": "https://api.github.com/repos/ethereum/consensus-specs/labels/general:bug",
      "name": "general:bug",
      "color": "DD1C1A",
      "default": false,
      "description": "Something isn't working"
    },
    {
      "id": 1170174610,
      "node_id": "MDU6TGFiZWwxMTcwMTc0NjEw",
      "url": "https://api.github.com/repos/ethereum/consensus-specs/labels/scope:SSZ",
      "name": "scope:SSZ",
      "color": "77428D",
      "default": false,
      "description": "Simple Serialize"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 9,
  "created_at": "2019-01-20T20:08:26Z",
  "updated_at": "2019-01-24T10:46:15Z",
  "closed_at": "2019-01-24T10:46:15Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "Regarding how `container`s are encoded and decoded, I looked at the py implementation (from the spec, not the actual implementation yet). \r\n```python\r\nclass Container:\r\n    # this is the container; here we will define an empty class for demonstration\r\n    pass\r\n\r\n# get a reference to the type in some way...\r\ncontainer = Container()\r\ntyp = type(container)\r\n\r\nassert(len(rawbytes) > current_index + LENGTH_BYTES)\r\ntotal_length = int.from_bytes(rawbytes[current_index:current_index + LENGTH_BYTES], 'little')\r\nnew_index = current_index + LENGTH_BYTES + total_length\r\nassert(len(rawbytes) >= new_index)\r\nitem_index = current_index + LENGTH_BYTES\r\n\r\nvalues = {}\r\nfor field_name in get_field_names(typ):\r\n    field_name_type = get_type_for_field_name(typ, field_name)\r\n    values[field_name], item_index = deserialize(data, item_index, field_name_type)\r\nassert item_index == new_index\r\nreturn typ(**values), item_index\r\n```\r\n\r\nAs I understand it, a `container` must be used if we want to to encode a list of dynamic-size things, e.g. `bytes`, like a list of `transactions`. The encoded form then becomes\r\n`container_total_bytes | length_1 | data_1 | length_2 | data_2 | .. | data_n` . \r\nThe implementation does verify that after decoding all items, the sums match up: `assert item_index == new_index`. However, \r\n\r\n1. This is not listed explicitly as a \"Check to perform\" in the spec. If this is not done, it would be possible to either overflow into the next element, or underflow so that after reading `n` items, the offset is not correct. Some implementations might choose to go with the total_length, some may choose to use the last `index`, and they'd be incompatible. \r\n2. The check implemented in python is made post-facto, meaning that if e.g. `length_1` overflows the buffer, there would be an out-of-bounds read, and possible crash. This is probably not a problem, if all lower-level decode-methods always checks bounds, however, an optimized implementation might skip that checking those individual fields if the envelope `container` is already checked. ",
  "closed_by": {
    "login": "hwwhww",
    "id": 9263930,
    "node_id": "MDQ6VXNlcjkyNjM5MzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/9263930?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hwwhww",
    "html_url": "https://github.com/hwwhww",
    "followers_url": "https://api.github.com/users/hwwhww/followers",
    "following_url": "https://api.github.com/users/hwwhww/following{/other_user}",
    "gists_url": "https://api.github.com/users/hwwhww/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hwwhww/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hwwhww/subscriptions",
    "organizations_url": "https://api.github.com/users/hwwhww/orgs",
    "repos_url": "https://api.github.com/users/hwwhww/repos",
    "events_url": "https://api.github.com/users/hwwhww/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hwwhww/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/479/reactions",
    "total_count": 1,
    "+1": 1,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/479/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/456019724",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/479#issuecomment-456019724",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/479",
    "id": 456019724,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NjAxOTcyNA==",
    "user": {
      "login": "ChihChengLiang",
      "id": 3391420,
      "node_id": "MDQ6VXNlcjMzOTE0MjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3391420?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ChihChengLiang",
      "html_url": "https://github.com/ChihChengLiang",
      "followers_url": "https://api.github.com/users/ChihChengLiang/followers",
      "following_url": "https://api.github.com/users/ChihChengLiang/following{/other_user}",
      "gists_url": "https://api.github.com/users/ChihChengLiang/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ChihChengLiang/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ChihChengLiang/subscriptions",
      "organizations_url": "https://api.github.com/users/ChihChengLiang/orgs",
      "repos_url": "https://api.github.com/users/ChihChengLiang/repos",
      "events_url": "https://api.github.com/users/ChihChengLiang/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ChihChengLiang/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-21T10:14:29Z",
    "updated_at": "2019-01-21T10:32:33Z",
    "author_association": "MEMBER",
    "body": "Not sure IIUC, let me try to provide some cases to reproduce the issue. \r\n\r\nThe first case: Try decode a byte string with its length byte misformed. It looks like current Python implementation (py-ssz) checks total_length.\r\n\r\n```python\r\nfrom ssz.sedes import Serializable, bytes_sedes\r\nfrom ssz.codec import encode, decode\r\n\r\n\r\nclass ExampleType(Serializable):\r\n    fields = [\r\n        ('field1', bytes_sedes),\r\n        ('field2', bytes_sedes),\r\n    ]\r\n\r\n\r\na = ExampleType(b'\\xaa\\xaa\\xaa\\xaa', b'\\xbb\\xbb\\xbb\\xbb')\r\nprint(encode(a))\r\n# b'\\x00\\x00\\x00\\x10\\x00\\x00\\x00\\x04\\xaa\\xaa\\xaa\\xaa\\x00\\x00\\x00\\x04\\xbb\\xbb\\xbb\\xbb'\r\n# Remove a byte:\r\ndecode(\r\n    b'\\x00\\x00\\x00\\x10\\x00\\x00\\x00\\x04\\xaa\\xaa\\xaa' +\r\n    b'\\x00\\x00\\x00\\x04\\xbb\\xbb\\xbb\\xbb', ExampleType)\r\n# ssz.exceptions.DeserializationError: Tried to read 16 bytes from 4 but the string is only 19 bytes long\r\n\r\n```\r\nhttps://repl.it/@liangcc/py-ssz-container-issue\r\n\r\nThe second case: try decoding a largest possible data.\r\n```python\r\na = ExampleType(b'\\xaa'* (2**32-11), b'\\xbb')\r\n# It works\r\ndecode(encode(a), ExampleType)\r\n```\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/456019724/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/456043867",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/479#issuecomment-456043867",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/479",
    "id": 456043867,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NjA0Mzg2Nw==",
    "user": {
      "login": "holiman",
      "id": 142290,
      "node_id": "MDQ6VXNlcjE0MjI5MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/142290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/holiman",
      "html_url": "https://github.com/holiman",
      "followers_url": "https://api.github.com/users/holiman/followers",
      "following_url": "https://api.github.com/users/holiman/following{/other_user}",
      "gists_url": "https://api.github.com/users/holiman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/holiman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/holiman/subscriptions",
      "organizations_url": "https://api.github.com/users/holiman/orgs",
      "repos_url": "https://api.github.com/users/holiman/repos",
      "events_url": "https://api.github.com/users/holiman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/holiman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-21T11:35:10Z",
    "updated_at": "2019-01-21T11:35:10Z",
    "author_association": "MEMBER",
    "body": "Oh, thanks for the playground. The examples I was thinking about were\r\n\r\n1. \r\n```\r\nb = decode(\r\n    b'\\x00\\x00\\x00\\x0f\\x00\\x00\\x00\\x01\\xaa\\x00\\x00\\x00\\x01\\xbb\\x00\\x00\\x00\\x01\\xcc',\r\n   ExampleType)\r\n```\r\nSo the `container_total_bytes` is `15` bytes, but there are in fact three elements supplied. The python implementation happily reads the first two, and ignores the third one even though it has only consumed `10` out of those `15` bytes. \r\n\r\n2. \r\nIn the second example, I thought it would be possible to read out of bounds. \r\n```\r\ndecode(\r\n    b'\\x00\\x00\\x00\\x10\\x00\\x00\\x00\\x04\\xaa\\xaa\\xaa\\xaa\\x00\\x00\\x00\\x05\\xbb\\xbb\\xbb\\xbb'+\r\n    b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'+\r\n    b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'+\r\n    b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'+\r\n    b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00', ExampleType)```\r\n```\r\nWhere the last (inner) length is `5`. However, it yields\r\n\r\n```\r\nssz.exceptions.DeserializationError: Tried to read 5 bytes from 12 but the string is only 16bytes long\r\n```\r\nSo that does not appear to be a problem with the python implementation -- but based from my reading of the spec (and the python snippets therein), I would have expected the opposite: that the too-short (case 1) is caught on  `assert item_index == new_index`, and the last aswell, but only _after_ actually reading the data.  \r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/456043867/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/456046599",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/479#issuecomment-456046599",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/479",
    "id": 456046599,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NjA0NjU5OQ==",
    "user": {
      "login": "holiman",
      "id": 142290,
      "node_id": "MDQ6VXNlcjE0MjI5MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/142290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/holiman",
      "html_url": "https://github.com/holiman",
      "followers_url": "https://api.github.com/users/holiman/followers",
      "following_url": "https://api.github.com/users/holiman/following{/other_user}",
      "gists_url": "https://api.github.com/users/holiman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/holiman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/holiman/subscriptions",
      "organizations_url": "https://api.github.com/users/holiman/orgs",
      "repos_url": "https://api.github.com/users/holiman/repos",
      "events_url": "https://api.github.com/users/holiman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/holiman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-21T11:45:26Z",
    "updated_at": "2019-01-21T13:58:06Z",
    "author_association": "MEMBER",
    "body": "To clarify.. Case 2, python handles this successfully:\r\n```python\r\n\r\nfrom ssz.sedes import Serializable, bytes_sedes,uint8\r\nfrom ssz.codec import encode, decode\r\n\r\n\r\nclass ExampleType(Serializable):\r\n    fields = [\r\n        ('field1', bytes_sedes),\r\n        ('field2', bytes_sedes),\r\n    ]\r\nclass Override(Serializable):\r\n  fields = [\r\n    ('a', ExampleType), \r\n    ('b', uint8),\r\n  ]\r\n\r\na = ExampleType(b'\\xaa', b'\\xbb')\r\nprint(encode(a))\r\n# b'\\x00\\x00\\x00\\n\\x00\\x00\\x00\\x01\\xaa\\x00\\x00\\x00\\x01\\xbb'\r\nb = Override(a, 3)\r\nprint(encode(b))\r\n# b'\\x00\\x00\\x00\\x0f\\x00\\x00\\x00\\n\\x00\\x00\\x00\\x01\\xaa\\x00\\x00\\x00\\x01\\xbb\\x03'\r\n\r\n\r\ndecode(\r\n    b'\\x00\\x00\\x00\\x0f\\x00\\x00\\x00\\n\\x00\\x00\\x00\\x01\\xaa\\x00\\x00\\x00\\x02\\xbb\\x03\\x00'\r\n  , Override)\r\n```\r\nAn erroneous implementation could erroneously parse this as `[0xaa, 0xbb03] , 0`. Is there some shared testbed where we can add these things? ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/456046599/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/456058045",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/479#issuecomment-456058045",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/479",
    "id": 456058045,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NjA1ODA0NQ==",
    "user": {
      "login": "holiman",
      "id": 142290,
      "node_id": "MDQ6VXNlcjE0MjI5MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/142290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/holiman",
      "html_url": "https://github.com/holiman",
      "followers_url": "https://api.github.com/users/holiman/followers",
      "following_url": "https://api.github.com/users/holiman/following{/other_user}",
      "gists_url": "https://api.github.com/users/holiman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/holiman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/holiman/subscriptions",
      "organizations_url": "https://api.github.com/users/holiman/orgs",
      "repos_url": "https://api.github.com/users/holiman/repos",
      "events_url": "https://api.github.com/users/holiman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/holiman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-21T12:29:38Z",
    "updated_at": "2019-01-21T12:29:38Z",
    "author_association": "MEMBER",
    "body": "I think the rust implementation would fail: https://github.com/sigp/lighthouse/blob/master/beacon_chain/utils/ssz/src/decode.rs#L54 \r\n\r\n```rust\r\n    while tmp_index < final_len {\r\n        match T::ssz_decode(ssz_bytes, tmp_index) {\r\n            Err(v) => return Err(v),\r\n            Ok(v) => {\r\n                tmp_index = v.1;\r\n                res_vec.push(v.0);\r\n            }\r\n        };\r\n    }\r\n\r\nOk((res_vec, final_len))\r\n```\r\nIt would probably return `[0xaa, 0xbb03], 3`, since it returns `final_len`, thus read that `3` twice ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/456058045/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/456066910",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/479#issuecomment-456066910",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/479",
    "id": 456066910,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NjA2NjkxMA==",
    "user": {
      "login": "holiman",
      "id": 142290,
      "node_id": "MDQ6VXNlcjE0MjI5MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/142290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/holiman",
      "html_url": "https://github.com/holiman",
      "followers_url": "https://api.github.com/users/holiman/followers",
      "following_url": "https://api.github.com/users/holiman/following{/other_user}",
      "gists_url": "https://api.github.com/users/holiman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/holiman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/holiman/subscriptions",
      "organizations_url": "https://api.github.com/users/holiman/orgs",
      "repos_url": "https://api.github.com/users/holiman/repos",
      "events_url": "https://api.github.com/users/holiman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/holiman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-21T13:03:24Z",
    "updated_at": "2019-01-21T13:28:24Z",
    "author_association": "MEMBER",
    "body": "I think the go-implementation would behave as rust: https://github.com/prysmaticlabs/prysm/blob/master/shared/ssz/decode.go#L207 , whereas I think the java and js implementations are probably fine. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/456066910/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/456148956",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/479#issuecomment-456148956",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/479",
    "id": 456148956,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NjE0ODk1Ng==",
    "user": {
      "login": "ChihChengLiang",
      "id": 3391420,
      "node_id": "MDQ6VXNlcjMzOTE0MjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3391420?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ChihChengLiang",
      "html_url": "https://github.com/ChihChengLiang",
      "followers_url": "https://api.github.com/users/ChihChengLiang/followers",
      "following_url": "https://api.github.com/users/ChihChengLiang/following{/other_user}",
      "gists_url": "https://api.github.com/users/ChihChengLiang/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ChihChengLiang/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ChihChengLiang/subscriptions",
      "organizations_url": "https://api.github.com/users/ChihChengLiang/orgs",
      "repos_url": "https://api.github.com/users/ChihChengLiang/repos",
      "events_url": "https://api.github.com/users/ChihChengLiang/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ChihChengLiang/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-21T17:29:43Z",
    "updated_at": "2019-01-21T17:29:43Z",
    "author_association": "MEMBER",
    "body": "Here are some proposed actions:\r\n1. Fix spec: Make `item_index == new_index` a check to perform. Would you like to review the PR https://github.com/ethereum/eth2.0-specs/pull/481 ?\r\n2. Add these cases to the shared testbed: https://github.com/ethereum/eth2.0-tests. @jannikluhn is working on a ssz test format https://github.com/ethereum/eth2.0-tests/issues/8\r\n3. Update client implementations.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/456148956/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/456187652",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/479#issuecomment-456187652",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/479",
    "id": 456187652,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NjE4NzY1Mg==",
    "user": {
      "login": "holiman",
      "id": 142290,
      "node_id": "MDQ6VXNlcjE0MjI5MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/142290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/holiman",
      "html_url": "https://github.com/holiman",
      "followers_url": "https://api.github.com/users/holiman/followers",
      "following_url": "https://api.github.com/users/holiman/following{/other_user}",
      "gists_url": "https://api.github.com/users/holiman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/holiman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/holiman/subscriptions",
      "organizations_url": "https://api.github.com/users/holiman/orgs",
      "repos_url": "https://api.github.com/users/holiman/repos",
      "events_url": "https://api.github.com/users/holiman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/holiman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-21T20:13:04Z",
    "updated_at": "2019-01-21T20:13:04Z",
    "author_association": "MEMBER",
    "body": "Another example which demonstrates how the python implementation can be made to skip over some data.\r\n```python\r\n\r\nfrom ssz.sedes import Serializable, bytes_sedes,uint8\r\nfrom ssz.codec import encode, decode\r\n\r\nclass ExampleTypeTriple(Serializable):\r\n    fields = [\r\n        ('field1', bytes_sedes),\r\n        ('field2', bytes_sedes),\r\n        ('field3', bytes_sedes),\r\n    ]\r\nclass OverrideTriple(Serializable):\r\n  fields = [\r\n    ('a', ExampleTypeTriple), \r\n    ('b', uint8),\r\n  ]\r\n\r\nclass ExampleType(Serializable):\r\n    fields = [\r\n        ('field1', bytes_sedes),\r\n        ('field2', bytes_sedes),\r\n    ]\r\nclass Override(Serializable):\r\n  fields = [\r\n    ('a', ExampleType), \r\n    ('b', uint8),\r\n  ]\r\n\r\na = ExampleType(b'\\xaa', b'\\xbb')\r\nprint(encode(a))\r\noa = Override(a, 3)\r\nprint(encode(oa))\r\n#  \r\nb = ExampleTypeTriple(b'\\xaa', b'\\xbb',b'\\xcc')\r\nprint(encode(b))\r\nob = OverrideTriple(b, 3)\r\n\r\n# Encoding a larger type, but decoding it into a smaller one. The python decoder will ignore the `\\xcc\\ byte in 'field3'\r\n\r\nnewa = decode(encode(ob), Override)\r\nprint(newa.a.field1)\r\n# b'\\xaa'\r\nprint(newa.a.field2)\r\n# b'\\xbb'\r\nprint(newa.b)\r\n# 3\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/456187652/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/456193882",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/479#issuecomment-456193882",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/479",
    "id": 456193882,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NjE5Mzg4Mg==",
    "user": {
      "login": "holiman",
      "id": 142290,
      "node_id": "MDQ6VXNlcjE0MjI5MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/142290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/holiman",
      "html_url": "https://github.com/holiman",
      "followers_url": "https://api.github.com/users/holiman/followers",
      "following_url": "https://api.github.com/users/holiman/following{/other_user}",
      "gists_url": "https://api.github.com/users/holiman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/holiman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/holiman/subscriptions",
      "organizations_url": "https://api.github.com/users/holiman/orgs",
      "repos_url": "https://api.github.com/users/holiman/repos",
      "events_url": "https://api.github.com/users/holiman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/holiman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-21T20:42:52Z",
    "updated_at": "2019-01-21T20:42:52Z",
    "author_association": "MEMBER",
    "body": "This puts the python code into a recursion crash:\r\n```\r\nprint(encode(('x', uint32 )))\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/456193882/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/456222280",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/479#issuecomment-456222280",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/479",
    "id": 456222280,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NjIyMjI4MA==",
    "user": {
      "login": "paulhauner",
      "id": 6660660,
      "node_id": "MDQ6VXNlcjY2NjA2NjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6660660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paulhauner",
      "html_url": "https://github.com/paulhauner",
      "followers_url": "https://api.github.com/users/paulhauner/followers",
      "following_url": "https://api.github.com/users/paulhauner/following{/other_user}",
      "gists_url": "https://api.github.com/users/paulhauner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paulhauner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paulhauner/subscriptions",
      "organizations_url": "https://api.github.com/users/paulhauner/orgs",
      "repos_url": "https://api.github.com/users/paulhauner/repos",
      "events_url": "https://api.github.com/users/paulhauner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paulhauner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-21T23:15:18Z",
    "updated_at": "2019-01-21T23:15:18Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks @holiman. We'll jump onto this today.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/456222280/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
