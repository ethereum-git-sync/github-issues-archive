{
  "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/651",
  "repository_url": "https://api.github.com/repos/ethereum/consensus-specs",
  "labels_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/651/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/651/comments",
  "events_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/651/events",
  "html_url": "https://github.com/ethereum/consensus-specs/issues/651",
  "id": 411768173,
  "node_id": "MDU6SXNzdWU0MTE3NjgxNzM=",
  "number": 651,
  "title": "verify_slashable_attestation with custody bits all 0 OR all 1",
  "user": {
    "login": "kirk-baird",
    "id": 27878213,
    "node_id": "MDQ6VXNlcjI3ODc4MjEz",
    "avatar_url": "https://avatars.githubusercontent.com/u/27878213?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/kirk-baird",
    "html_url": "https://github.com/kirk-baird",
    "followers_url": "https://api.github.com/users/kirk-baird/followers",
    "following_url": "https://api.github.com/users/kirk-baird/following{/other_user}",
    "gists_url": "https://api.github.com/users/kirk-baird/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/kirk-baird/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/kirk-baird/subscriptions",
    "organizations_url": "https://api.github.com/users/kirk-baird/orgs",
    "repos_url": "https://api.github.com/users/kirk-baird/repos",
    "events_url": "https://api.github.com/users/kirk-baird/events{/privacy}",
    "received_events_url": "https://api.github.com/users/kirk-baird/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1063043866,
      "node_id": "MDU6TGFiZWwxMDYzMDQzODY2",
      "url": "https://api.github.com/repos/ethereum/consensus-specs/labels/general:bug",
      "name": "general:bug",
      "color": "DD1C1A",
      "default": false,
      "description": "Something isn't working"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 8,
  "created_at": "2019-02-19T06:37:59Z",
  "updated_at": "2019-02-25T01:30:15Z",
  "closed_at": "2019-02-21T22:25:04Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "In `verify_slashable_attestation` if all `slashable_attestation.custody_bitfield` bits are the same (i.e. all 0 or all 1) then the `aggregate_pubkey` for the other will either not be initialised or the point will be set to infinity.\r\n\r\ne.g. \r\nSay `custody_bitfield` is all 0. \r\nThen `custody_bit_1_indices` will be empty.\r\nHence `bls_aggregate_pubkeys([state.validator_registry[i].pubkey for i in custody_bit_1_indices]),` will either return an uninitialized public key or infinity neither of which can return true for `bls_verify_multiple()`\r\n\r\n```\r\n...\r\n    custody_bit_0_indices = []\r\n    custody_bit_1_indices = []\r\n    for i, validator_index in enumerate(slashable_attestation.validator_indices):\r\n        if get_bitfield_bit(slashable_attestation.custody_bitfield, i) == 0b0:\r\n            custody_bit_0_indices.append(validator_index)\r\n        else:\r\n            custody_bit_1_indices.append(validator_index)\r\n\r\nreturn bls_verify_multiple(\r\n        pubkeys=[\r\n            bls_aggregate_pubkeys([state.validator_registry[i].pubkey for i in custody_bit_0_indices]),\r\n            bls_aggregate_pubkeys([state.validator_registry[i].pubkey for i in custody_bit_1_indices]),\r\n        ],\r\n        message_hashes=[\r\n            hash_tree_root(AttestationDataAndCustodyBit(data=slashable_attestation.data, custody_bit=0b0)),\r\n            hash_tree_root(AttestationDataAndCustodyBit(data=slashable_attestation.data, custody_bit=0b1)),\r\n        ],\r\n        signature=slashable_attestation.aggregate_signature,\r\n        domain=get_domain(state.fork, slot_to_epoch(slashable_attestation.data.slot), DOMAIN_ATTESTATION),\r\n    )\r\n```\r\n\r\nA quick solution could be to add these to the pubkeys and message_hashes if the list of indices is not empty.\r\ne.g.\r\n```\r\n...\r\n    custody_bit_0_indices = []\r\n    custody_bit_1_indices = []\r\n    for i, validator_index in enumerate(slashable_attestation.validator_indices):\r\n        if get_bitfield_bit(slashable_attestation.custody_bitfield, i) == 0b0:\r\n            custody_bit_0_indices.append(validator_index)\r\n        else:\r\n            custody_bit_1_indices.append(validator_index)\r\n\r\n    pubkeys = []\r\n    message_hashes = []\r\n\r\n    if not custody_bit_0_indices.is_empty():\r\n        pubkeys.append(bls_aggregate_pubkeys([state.validator_registry[i].pubkey for i in custody_bit_0_indices]))\r\n         message_hashes.append(hash_tree_root(AttestationDataAndCustodyBit(data=slashable_attestation.data, custody_bit=0b0)))\r\n    if not custody_bit_1_indices.is_empty():\r\n        pubkeys.append(bls_aggregate_pubkeys([state.validator_registry[i].pubkey for i in custody_bit_1_indices]))\r\n         message_hashes.append(hash_tree_root(AttestationDataAndCustodyBit(data=slashable_attestation.data, custody_bit=0b1)))\r\n\r\nreturn bls_verify_multiple(\r\n        pubkeys=pubkeys,\r\n        message_hashes=message_hashes,\r\n        signature=slashable_attestation.aggregate_signature,\r\n        domain=get_domain(state.fork, slot_to_epoch(slashable_attestation.data.slot), DOMAIN_ATTESTATION),\r\n    )\r\n```\r\n",
  "closed_by": {
    "login": "djrtwo",
    "id": 1433595,
    "node_id": "MDQ6VXNlcjE0MzM1OTU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/djrtwo",
    "html_url": "https://github.com/djrtwo",
    "followers_url": "https://api.github.com/users/djrtwo/followers",
    "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
    "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
    "organizations_url": "https://api.github.com/users/djrtwo/orgs",
    "repos_url": "https://api.github.com/users/djrtwo/repos",
    "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
    "received_events_url": "https://api.github.com/users/djrtwo/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/651/reactions",
    "total_count": 2,
    "+1": 2,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/651/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/465678350",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/651#issuecomment-465678350",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/651",
    "id": 465678350,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2NTY3ODM1MA==",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-20T17:32:47Z",
    "updated_at": "2019-02-20T17:32:47Z",
    "author_association": "MEMBER",
    "body": "nice catch! At first glance, I think your solution is appropriate",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/465678350/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/466002337",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/651#issuecomment-466002337",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/651",
    "id": 466002337,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2NjAwMjMzNw==",
    "user": {
      "login": "JustinDrake",
      "id": 731743,
      "node_id": "MDQ6VXNlcjczMTc0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/731743?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JustinDrake",
      "html_url": "https://github.com/JustinDrake",
      "followers_url": "https://api.github.com/users/JustinDrake/followers",
      "following_url": "https://api.github.com/users/JustinDrake/following{/other_user}",
      "gists_url": "https://api.github.com/users/JustinDrake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JustinDrake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JustinDrake/subscriptions",
      "organizations_url": "https://api.github.com/users/JustinDrake/orgs",
      "repos_url": "https://api.github.com/users/JustinDrake/repos",
      "events_url": "https://api.github.com/users/JustinDrake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JustinDrake/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-21T13:38:13Z",
    "updated_at": "2019-02-22T10:30:45Z",
    "author_association": "MEMBER",
    "body": "> will either not be initialised or the point will be set to infinity\r\n\r\n<s>`bls_aggregate_pubkeys()` returns the the identity element (neither uninitialised nor \"infinity\") with the empty array, which should work just fine with `bls_verify` and `bls_verify_multiple`. (This is similar to empty integer sums being 0, and empty integer products being 1.)</s>",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/466002337/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/466008403",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/651#issuecomment-466008403",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/651",
    "id": 466008403,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2NjAwODQwMw==",
    "user": {
      "login": "hwwhww",
      "id": 9263930,
      "node_id": "MDQ6VXNlcjkyNjM5MzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9263930?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hwwhww",
      "html_url": "https://github.com/hwwhww",
      "followers_url": "https://api.github.com/users/hwwhww/followers",
      "following_url": "https://api.github.com/users/hwwhww/following{/other_user}",
      "gists_url": "https://api.github.com/users/hwwhww/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hwwhww/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hwwhww/subscriptions",
      "organizations_url": "https://api.github.com/users/hwwhww/orgs",
      "repos_url": "https://api.github.com/users/hwwhww/repos",
      "events_url": "https://api.github.com/users/hwwhww/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hwwhww/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-21T13:56:54Z",
    "updated_at": "2019-02-21T13:56:54Z",
    "author_association": "MEMBER",
    "body": "> `bls_aggregate_pubkeys()` returns the the identity element (neither uninitialised nor \"infinity\") with the empty array, which should work just fine with `bls_verify` and `bls_verify_multiple`.\r\n\r\n1. Can confirm that it works fine.\r\n2. I think it's also fine to apply this fix to pass a one-item array `messages` and `pubkeys` to reduce the  computation?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/466008403/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/466112757",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/651#issuecomment-466112757",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/651",
    "id": 466112757,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2NjExMjc1Nw==",
    "user": {
      "login": "JustinDrake",
      "id": 731743,
      "node_id": "MDQ6VXNlcjczMTc0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/731743?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JustinDrake",
      "html_url": "https://github.com/JustinDrake",
      "followers_url": "https://api.github.com/users/JustinDrake/followers",
      "following_url": "https://api.github.com/users/JustinDrake/following{/other_user}",
      "gists_url": "https://api.github.com/users/JustinDrake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JustinDrake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JustinDrake/subscriptions",
      "organizations_url": "https://api.github.com/users/JustinDrake/orgs",
      "repos_url": "https://api.github.com/users/JustinDrake/repos",
      "events_url": "https://api.github.com/users/JustinDrake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JustinDrake/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-21T18:31:19Z",
    "updated_at": "2019-02-22T10:30:59Z",
    "author_association": "MEMBER",
    "body": "<s>1. For those wondering, when `pubkey = g` and `signature = hash_to_G2(message_hash, domain)` then `e(pubkey, hash_to_G2(message_hash, domain)) == e(g, signature)` trivially holds.\r\n2. No need to complicate the spec! Implementers can skip the pairing check when `pubkey == g`. I wonder if the BLS signature libraries already implement this.</s>",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/466112757/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/466192209",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/651#issuecomment-466192209",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/651",
    "id": 466192209,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2NjE5MjIwOQ==",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-21T22:25:04Z",
    "updated_at": "2019-02-21T22:25:04Z",
    "author_association": "MEMBER",
    "body": "Thanks for the recon @hwwhww and @JustinDrake.\r\nClosing the issue unless you or @kirk-baird need further conversation/clarification",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/466192209/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/466214590",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/651#issuecomment-466214590",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/651",
    "id": 466214590,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2NjIxNDU5MA==",
    "user": {
      "login": "kirk-baird",
      "id": 27878213,
      "node_id": "MDQ6VXNlcjI3ODc4MjEz",
      "avatar_url": "https://avatars.githubusercontent.com/u/27878213?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kirk-baird",
      "html_url": "https://github.com/kirk-baird",
      "followers_url": "https://api.github.com/users/kirk-baird/followers",
      "following_url": "https://api.github.com/users/kirk-baird/following{/other_user}",
      "gists_url": "https://api.github.com/users/kirk-baird/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kirk-baird/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kirk-baird/subscriptions",
      "organizations_url": "https://api.github.com/users/kirk-baird/orgs",
      "repos_url": "https://api.github.com/users/kirk-baird/repos",
      "events_url": "https://api.github.com/users/kirk-baird/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kirk-baird/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-21T23:42:19Z",
    "updated_at": "2019-02-22T03:18:05Z",
    "author_association": "CONTRIBUTOR",
    "body": "Yep, make sense to me that setting the pubkey to g holds and that it would then verify correctly with `bls_verify` given the signature is the message hash.\r\n\r\nI think I still need some more clarification on `bls_aggregate_pubkey` and how this interacts with `bls_verify_multiple`.\r\n\r\nFirst, in the python implementation in beacon_chain/utils/bls.py\r\n\r\n``` python\r\ndef aggregate_pubs(pubs):\r\n    o = Z1\r\n    for p in pubs:\r\n        o = add(o, decompress_G1(p))\r\n    return compress_G1(o)\r\n```\r\n\r\nHence if pubs is empty it returns Z1, which in py_ecc/optimized_bn128/optimized_curve.py\r\n\r\n``` python\r\n# Point at infinity over FQ\r\nZ1 = (FQ.one(), FQ.one(), FQ.zero())\r\n```\r\n\r\nAre you saying instead it should return the generator_on_g1 or why will using this as a pubkey hold?\r\n\r\n\r\nSecond in relation to `bls_verify_multiple` we are given one `aggregate_signature` which I assume was aggregated from each signature from the validators.\r\n\r\ni.e. Each validator would sign\r\n`msg = hash({attestation data, custody bit})` \r\n`signature = sign(msg, domain, secretkey)` \r\nThen send that signature as well as the msg.\r\nThese signatures would be aggregated together to create the `aggregate_signature` with each validator assigned either a 1 or 0 in the `custody_bitfield`.\r\n\r\nNow say if all custody_bits are 0 then we would have\r\n`aggregate_signature = bls_aggregate_signatures(all signatures of hash({attestation data, 0})`\r\nNow `bls_verify_multiple` would hold if we then also add `signature = hash_to_G2(hash{attestation data, 1}, domain)`  to the `aggregate_signature` and have the `bls_aggregate_pubkeys` return g for the empty list.\r\n\r\nBut then we would have to make sure when creating the `aggregate_signature` to add `signature = hash_to_G2(hash{attestation data, 1}, domain)` if and only if custody bits are all 0 (and vice versa for all 1).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/466214590/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/466349912",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/651#issuecomment-466349912",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/651",
    "id": 466349912,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2NjM0OTkxMg==",
    "user": {
      "login": "JustinDrake",
      "id": 731743,
      "node_id": "MDQ6VXNlcjczMTc0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/731743?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JustinDrake",
      "html_url": "https://github.com/JustinDrake",
      "followers_url": "https://api.github.com/users/JustinDrake/followers",
      "following_url": "https://api.github.com/users/JustinDrake/following{/other_user}",
      "gists_url": "https://api.github.com/users/JustinDrake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JustinDrake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JustinDrake/subscriptions",
      "organizations_url": "https://api.github.com/users/JustinDrake/orgs",
      "repos_url": "https://api.github.com/users/JustinDrake/repos",
      "events_url": "https://api.github.com/users/JustinDrake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JustinDrake/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-22T10:26:21Z",
    "updated_at": "2019-02-22T10:26:21Z",
    "author_association": "MEMBER",
    "body": "The signature for multiple messages in the context of `bls_verify_multiple` is the sum of the signatures for individual messages in the context of `bls_verify`. Let:\r\n\r\n* `h0 = hash_to_G2(hash{attestation data, 0}, domain)`\r\n* `h1 = hash_to_G2(hash{attestation data, 1}, domain)`\r\n* `pk0 = x0 * g` be the aggregated public key for 0 custody bits for some \"aggregated secret\" `x0`.\r\n* `pk1 = x1 * g` be the aggregated public key for 1 custody bits for some \"aggregated secret\" `x1`.\r\n\r\nThe individual signatures are `x0 * h0` and `x1 * h1` and the final aggregated signature is `x0 * h0 + x1 * h1`.\r\n\r\nThe aggregated secret is a sum over the integers, so the natural zero element is 0. So when all custody bits are 0 then `x1 = 0` (so that `pk1 = 0 * g`) and the final signature is `x0 * h0`.\r\n\r\nNote that this is *not* what I was claiming above 🤦‍♂️. The natural zero element for public keys is indeed the point at infinity (which matches the Python code). To answer your original question, notice no special handling is required when the public key is the point at infinity because `e(0 * g, h0) == e(g, 0 * x0)`.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/466349912/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/466841621",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/651#issuecomment-466841621",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/651",
    "id": 466841621,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2Njg0MTYyMQ==",
    "user": {
      "login": "kirk-baird",
      "id": 27878213,
      "node_id": "MDQ6VXNlcjI3ODc4MjEz",
      "avatar_url": "https://avatars.githubusercontent.com/u/27878213?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kirk-baird",
      "html_url": "https://github.com/kirk-baird",
      "followers_url": "https://api.github.com/users/kirk-baird/followers",
      "following_url": "https://api.github.com/users/kirk-baird/following{/other_user}",
      "gists_url": "https://api.github.com/users/kirk-baird/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kirk-baird/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kirk-baird/subscriptions",
      "organizations_url": "https://api.github.com/users/kirk-baird/orgs",
      "repos_url": "https://api.github.com/users/kirk-baird/repos",
      "events_url": "https://api.github.com/users/kirk-baird/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kirk-baird/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-25T01:30:15Z",
    "updated_at": "2019-02-25T01:30:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "Ohh yep I see where you're coming from now!\r\n\r\nThe aggregate signature doesn't need to be changed because we would be adding the additive identity since sk1 = 0:\r\n```\r\nsig0 = sk0 * h0\r\nsig1 = 0 * h1\r\nagg_sig = sig0 + sig1 = sig0 + 0 = sig0\r\n```\r\n\r\nAlso the LHS of `verify_multiple` doesn't need to be changed as e(h1, 0) represents the multiplicative identity hence\r\n`e(h0, pk0) * e(h1, 0) = e(h0, pk0)`\r\n\r\nTherefore the whole equation would look like:\r\n\r\n`e(h0, pk0) == e(sig0, g)` \r\n\r\nWhich is the same a verifying a single aggregate signature.\r\n\r\nThanks for the explanation :smile: ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/466841621/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
