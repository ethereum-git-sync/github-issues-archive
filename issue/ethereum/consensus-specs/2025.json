{
  "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2025",
  "repository_url": "https://api.github.com/repos/ethereum/consensus-specs",
  "labels_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2025/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2025/comments",
  "events_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2025/events",
  "html_url": "https://github.com/ethereum/consensus-specs/issues/2025",
  "id": 685326401,
  "node_id": "MDU6SXNzdWU2ODUzMjY0MDE=",
  "number": 2025,
  "title": "Suggestion: Limit deposit_count to be less than MAX_DEPOSIT_COUNT",
  "user": {
    "login": "montyly",
    "id": 13798342,
    "node_id": "MDQ6VXNlcjEzNzk4MzQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/13798342?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/montyly",
    "html_url": "https://github.com/montyly",
    "followers_url": "https://api.github.com/users/montyly/followers",
    "following_url": "https://api.github.com/users/montyly/following{/other_user}",
    "gists_url": "https://api.github.com/users/montyly/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/montyly/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/montyly/subscriptions",
    "organizations_url": "https://api.github.com/users/montyly/orgs",
    "repos_url": "https://api.github.com/users/montyly/repos",
    "events_url": "https://api.github.com/users/montyly/events{/privacy}",
    "received_events_url": "https://api.github.com/users/montyly/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1324892187,
      "node_id": "MDU6TGFiZWwxMzI0ODkyMTg3",
      "url": "https://api.github.com/repos/ethereum/consensus-specs/labels/scope:deposit%20contract",
      "name": "scope:deposit contract",
      "color": "005CAF",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2020-08-25T09:28:53Z",
  "updated_at": "2020-09-09T17:04:14Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "Hi,\r\n\r\nThe deposit contract limits the number of deposits to be less than [`MAX_DEPOSIT_COUNT`](https://github.com/ethereum/eth2.0-specs/blob/f2440451919d4d7516903ec2646e7a00e12be1b7/solidity_deposit_contract/deposit_contract.sol#L66-L67). The eth 2.0 spec does not contain such a limit. As a result, the specification allows for states that are not possible from the deposit contract.\r\n\r\nRealistically speaking, this divergence will not happen. However, it might be worth to consider adding the invariant `state.eth1_data.deposit_count < MAX_DEPOSIT_COUNT` to the spec. It would prevent issues for the formalization of the protocol, and additionally prevent integer-related bugs for clients implementations.\r\n\r\nFor example, we found an issue during the nimbus security review that can be triggered if an attacker proposes a malicious state with a `state.eth1_data.deposit_count` really large (https://github.com/status-im/nim-beacon-chain/issues/1544). Limiting `deposit_count` at the specification level would reduce the likelihood of such issues.\r\n\r\nI think that one way to add it would be to check for `state.eth1_data.deposit_count < MAX_DEPOSIT_COUNT` in [`process_operations`](https://github.com/ethereum/eth2.0-specs/blob/f6da7323fe814cc76a08c0e1bca1dbdee3c988af/specs/phase0/beacon-chain.md#operations).",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2025/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2025/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/680234796",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2025#issuecomment-680234796",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2025",
    "id": 680234796,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4MDIzNDc5Ng==",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-25T19:49:03Z",
    "updated_at": "2020-08-25T19:49:03Z",
    "author_association": "MEMBER",
    "body": "So this shows up in the spec via `DEPOSIT_CONTRACT_TREE_DEPTH`. It is the natural limit of such a tree (`2**DEPOSIT_CONTRACT_TREE_DEPTH` leaves).\r\n\r\nThrough what means can an attacker \"proposes a malicious state\"?\r\n\r\nThe spec generally does not have self consistency checks within the operation processing (as you recommend). Instead it has transition validations to ensure that the operations acting upon the state cannot mutate it in invalid ways.\r\n\r\nThe only way this state can be achieved through transitions is >50% validators agreeing to an invalid `eth1data` vote. Following the standard spec  practices, a condition on `block.body.eth1data.deposit_count < MAX_DEPOSIT_COUNT` would be more appropriate. That said, we already have an incredibly strong assumption on `eth1data` not being corrupted. If it could be corrupted, an attacker could just put in an invalid `eth1data.deposit_root` which would prevent any new block from being able to be formed due to lack of deposits available\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/680234796/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
