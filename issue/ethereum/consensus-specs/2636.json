{
  "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2636",
  "repository_url": "https://api.github.com/repos/ethereum/consensus-specs",
  "labels_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2636/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2636/comments",
  "events_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2636/events",
  "html_url": "https://github.com/ethereum/consensus-specs/issues/2636",
  "id": 1010323126,
  "node_id": "I_kwDOCOoGbc48OE62",
  "number": 2636,
  "title": "Clarification on `get_pow_block`",
  "user": {
    "login": "paulhauner",
    "id": 6660660,
    "node_id": "MDQ6VXNlcjY2NjA2NjA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6660660?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/paulhauner",
    "html_url": "https://github.com/paulhauner",
    "followers_url": "https://api.github.com/users/paulhauner/followers",
    "following_url": "https://api.github.com/users/paulhauner/following{/other_user}",
    "gists_url": "https://api.github.com/users/paulhauner/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/paulhauner/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/paulhauner/subscriptions",
    "organizations_url": "https://api.github.com/users/paulhauner/orgs",
    "repos_url": "https://api.github.com/users/paulhauner/repos",
    "events_url": "https://api.github.com/users/paulhauner/events{/privacy}",
    "received_events_url": "https://api.github.com/users/paulhauner/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 2812431987,
      "node_id": "MDU6TGFiZWwyODEyNDMxOTg3",
      "url": "https://api.github.com/repos/ethereum/consensus-specs/labels/Bellatrix",
      "name": "Bellatrix",
      "color": "1D36aa",
      "default": false,
      "description": "CL+EL Merge"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 16,
  "created_at": "2021-09-29T00:03:21Z",
  "updated_at": "2021-12-08T10:29:55Z",
  "closed_at": "2021-12-08T10:29:54Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "The spec defines a [`get_pow_block`](https://github.com/ethereum/consensus-specs/blob/v1.1.0/specs/merge/fork-choice.md#get_pow_block) function which returns a [`PoWBlock`](https://github.com/ethereum/consensus-specs/blob/v1.1.0/specs/merge/fork-choice.md#powblock) structure. In practice, I expect `get_pow_block` to map to the `eth_getBlockByHash` JSON-RPC call.\r\n\r\nAssuming we use `eth_getBlockByHash`, does `get_pow_block` filter the result so that it only contains pre-merge, non-PoS blocks?\r\n\r\nFrom the naming, I think it *should* apply the filter.\r\n\r\nHowever, if we look at [`get_block_at_terminal_total_difficulty`](https://github.com/ethereum/consensus-specs/blob/v1.1.0/specs/merge/validator.md#block-proposal), we can see it iterates through the entire `pow_chain`. This communicates that there might be multiple blocks in `pow_chain` where `block.total_difficulty >= TERMINAL_TOTAL_DIFFICULTY`. This conflicts with [EIP-3675](https://eips.ethereum.org/EIPS/eip-3675#specification) which states:\r\n\r\n> PoW blocks that are descendants of any terminal PoW block MUST NOT be imported. This implies that a terminal PoW block will be the last PoW block in the canonical chain.\r\n\r\nI raise this for the following reasons:\r\n\r\n1. In an implementation it is desirable to bound the number of loops that `get_block_at_terminal_total_difficulty` can perform. When doing recursive look-ups to a remote server it's desirable to clearly understand the properties of that recursion.\r\n1. I think the specification should be clearer on `get_pow_block` to avoid differences in implementation.\r\n1. If  `get_pow_block` also returns PoS blocks, then it seems like it needs a different name.\r\n\r\nOn a side note, if `get_pow_block` *should* filter the results, how does it do that? I assume there's some simple way, but I haven't seen it in the API docs I've been looking at.",
  "closed_by": {
    "login": "mkalinin",
    "id": 1892772,
    "node_id": "MDQ6VXNlcjE4OTI3NzI=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1892772?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mkalinin",
    "html_url": "https://github.com/mkalinin",
    "followers_url": "https://api.github.com/users/mkalinin/followers",
    "following_url": "https://api.github.com/users/mkalinin/following{/other_user}",
    "gists_url": "https://api.github.com/users/mkalinin/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mkalinin/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mkalinin/subscriptions",
    "organizations_url": "https://api.github.com/users/mkalinin/orgs",
    "repos_url": "https://api.github.com/users/mkalinin/repos",
    "events_url": "https://api.github.com/users/mkalinin/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mkalinin/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2636/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2636/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/929738881",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2636#issuecomment-929738881",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2636",
    "id": 929738881,
    "node_id": "IC_kwDOCOoGbc43arCB",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-29T01:06:19Z",
    "updated_at": "2021-09-29T01:19:45Z",
    "author_association": "MEMBER",
    "body": "EDIT: I disagree with myself based on discord discussion\r\n\r\n~~You're right.~~\r\n\r\n~~If the *MUST NOT* condition is followed on the execution-client, then the head of the pow chain is simply either (a) the terminal block OR (b) not yet the terminal block. And in such a case, just a call to ` eth_getBlockByNumber(\"latest\")` should be sufficient to implement this function.~~\r\n\r\n\r\n~~We *should* consider simplifying the spec here by calling `block = get_pow_head()` (or just `pow_chain[0]`) and `parent = get_pow_block(block.parent_hash)` with no loop. From a specification standpoint, this would be putting more trust in the execution-layer *MUST NOT* but the unification of the spec is the two specs in concert so this doesn't seem crazy~~\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/929738881/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/929748031",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2636#issuecomment-929748031",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2636",
    "id": 929748031,
    "node_id": "IC_kwDOCOoGbc43atQ_",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-29T01:30:25Z",
    "updated_at": "2021-09-29T01:30:25Z",
    "author_association": "MEMBER",
    "body": "Some relevant discussion on [discord](https://discord.com/channels/595666850260713488/692062809701482577/892562311930318919)\r\n\r\nWe need to specify what the consensus and execution layer do when the consensus re-orgs from a transitioned chain to an non-transitioned chain.\r\n\r\n@paulhauner suggests sending `0x00..00` which I think I agree with. This would trigger the execution layer to revert to a TD fork choice on the pow chain (no pos blocks). And to still support the \"*MUST NOT* import beyond TTD blocks\"\r\n\r\nIn a 1:1 consensus to execution relationship, I do think that this clears up the ambiguity in the spec around item (3). That is, you would never be trying to build an initial execution payload on an execution-layer that thought PoS blocks were in the canonical chain.\r\n\r\nThat said, this does not support many:1 consesnsu to execution, but our general set fork choice construction in the API and specs already does not support this.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/929748031/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/929749056",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2636#issuecomment-929749056",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2636",
    "id": 929749056,
    "node_id": "IC_kwDOCOoGbc43athA",
    "user": {
      "login": "paulhauner",
      "id": 6660660,
      "node_id": "MDQ6VXNlcjY2NjA2NjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6660660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paulhauner",
      "html_url": "https://github.com/paulhauner",
      "followers_url": "https://api.github.com/users/paulhauner/followers",
      "following_url": "https://api.github.com/users/paulhauner/following{/other_user}",
      "gists_url": "https://api.github.com/users/paulhauner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paulhauner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paulhauner/subscriptions",
      "organizations_url": "https://api.github.com/users/paulhauner/orgs",
      "repos_url": "https://api.github.com/users/paulhauner/repos",
      "events_url": "https://api.github.com/users/paulhauner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paulhauner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-29T01:33:17Z",
    "updated_at": "2021-09-29T01:33:33Z",
    "author_association": "MEMBER",
    "body": "> That said, this does not support many:1 consesnsu to execution, but our general set fork choice construction in the API and specs already does not support this.\r\n\r\nThis is likely tangential, but we'll need to consider mechanisms on the APIs to lock to 1:1 if that's how we're going to specify.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/929749056/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/929944381",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2636#issuecomment-929944381",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2636",
    "id": 929944381,
    "node_id": "IC_kwDOCOoGbc43bdM9",
    "user": {
      "login": "mkalinin",
      "id": 1892772,
      "node_id": "MDQ6VXNlcjE4OTI3NzI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1892772?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mkalinin",
      "html_url": "https://github.com/mkalinin",
      "followers_url": "https://api.github.com/users/mkalinin/followers",
      "following_url": "https://api.github.com/users/mkalinin/following{/other_user}",
      "gists_url": "https://api.github.com/users/mkalinin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mkalinin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mkalinin/subscriptions",
      "organizations_url": "https://api.github.com/users/mkalinin/orgs",
      "repos_url": "https://api.github.com/users/mkalinin/repos",
      "events_url": "https://api.github.com/users/mkalinin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mkalinin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-29T08:13:12Z",
    "updated_at": "2021-09-29T08:13:12Z",
    "author_association": "MEMBER",
    "body": "> @paulhauner suggests sending `0x00..00` which I think I agree with. This would trigger the execution layer to revert to a TD fork choice on the pow chain (no pos blocks). And to still support the \"*MUST NOT* import beyond TTD blocks\"\r\n\r\nTrying to understand whether handling this edge case worth an additional trigger in the execution-layer fork choice. Suppose, there is a beacon block `B` and it has two children `C` and `C'`, `C` is the *valid* transition block, i.e. it contains a payload built on top of the *valid* terminal PoW block and it's valid wrt beacon chain state transition, `C'` does not have any payload hence is non-transition block but it's a valid beacon chain block after all. And the network is in favour of `C'` eventually.\r\n\r\nFor simplicity, let's assume that a halve of nodes has observed `C` prior to `C'`, and another halve has observed `C'` as the first block in this pair, therefore, a halve of nodes in the network has switched their execution engines to PoS and designated terminal PoW block `T` as the tip of their PoW chain (the chain produced by the PoW consensus mechanism). Suppose that a halve of the switched nodes has terminal PoW block `T'` as the tip of the PoW chain *according to the TD fork choice rule*. And if there is a proposer from this halve of the switched nodes then we want to let it propose a transition block with a payload built on top of `T'` instead of being forced to build a payload on top of `T`. \r\n\r\nUnder the assumption that `T` and `T'` blocks are both valid terminal PoW blocks, do we really care that much that a proposer could be forced by the other network participant to favour one terminal PoW block over the other in not that likely case? The case when the proposer of `C` intentionally decided to avoid the transition or having its execution engine unaware of the terminal PoW block at least 12 seconds after the other proposer has seen a terminal block (due to PoW network partitioning maybe). I would also add another argument here, `T` and `T'` are likely gonna have the same difficulty value hence same TD and if they have the same parent (which is also likely), then the TD fork choice would favour the one which has been observed first and is a matter of chance hence choosing between two valid terminal blocks is likely a matter of chance as well.\r\n\r\nIn an exceptional case we could have several non-transition blocks built on top of `C`. In the worst case it would give an opportunity to build a valid terminal PoW block with the difficulty *~5% less* than its sisters have, it would require about 900 seconds of a time without transition (75 non-transition blocks on the beacon chain). Considering potential difficulty drop and the chance of having a row of non-transition blocks, I don't think that this is a big surface for minority fork attack.\r\n\r\nConsidering the above (I hope my analysis does make sense) the options are as follows:\r\n1. Rename `pow_chain` to `block_chain`, and say that the `block_chain` abstractly represents all blocks in the canonical chain disregarding the consensus mechanism that has built each of these blocks\r\n2. Do care about the edge case. And if we take this option, then IMO a better way to do that would be to have an explicit Engine API method, like `engine_getTerminalPowBlock()` that would use the TD fork choice to fine the terminal PoW block and return it back to the consensus-layer, as suggested by @paulhauner. We should consider the following, how easy for consensus-layer client it would be to catch up with the change of the `pow_chain` If the switch back to the TD fork choice that affects the `pow_chain` has happened.\r\n\r\nI agree to rename `get_pow_block` and `PowBlock` to something like `get_pow_attributes` and `PowAttributes` to avoid the confusion.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/929944381/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/929953171",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2636#issuecomment-929953171",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2636",
    "id": 929953171,
    "node_id": "IC_kwDOCOoGbc43bfWT",
    "user": {
      "login": "mkalinin",
      "id": 1892772,
      "node_id": "MDQ6VXNlcjE4OTI3NzI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1892772?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mkalinin",
      "html_url": "https://github.com/mkalinin",
      "followers_url": "https://api.github.com/users/mkalinin/followers",
      "following_url": "https://api.github.com/users/mkalinin/following{/other_user}",
      "gists_url": "https://api.github.com/users/mkalinin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mkalinin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mkalinin/subscriptions",
      "organizations_url": "https://api.github.com/users/mkalinin/orgs",
      "repos_url": "https://api.github.com/users/mkalinin/repos",
      "events_url": "https://api.github.com/users/mkalinin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mkalinin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-29T08:24:00Z",
    "updated_at": "2021-09-29T08:24:00Z",
    "author_association": "MEMBER",
    "body": "> This is likely tangential, but we'll need to consider mechanisms on the APIs to lock to 1:1 if that's how we're going to specify.\r\n\r\nWhat do you mean the \"mechanisms\"? Could we explicitly say that Engine API spec we have is designed to handle 1:1 case and not every part of it might work in many-to-one relationship?\r\n\r\nA rough idea of handling many-to-one use case is outlined in the [Shared execution client](https://hackmd.io/@n0ble/consensus_api_design_space#Shared-execution-client) section of the Engine API design space doc. The exercise was to consider this use case in the API design and if possible avoid decisions in the design that could restrict the many-to-one use case and it seems that the fork choice state concurrently updated by multiple consensus clients is a problem. I haven't thought much of it but I'd prefer implementations decide on how to handle the many-to-one use case as long as the API allows for it. I'd be happy to discuss many-to-one use case in a separate thread.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/929953171/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/932226517",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2636#issuecomment-932226517",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2636",
    "id": 932226517,
    "node_id": "IC_kwDOCOoGbc43kKXV",
    "user": {
      "login": "hwwhww",
      "id": 9263930,
      "node_id": "MDQ6VXNlcjkyNjM5MzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9263930?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hwwhww",
      "html_url": "https://github.com/hwwhww",
      "followers_url": "https://api.github.com/users/hwwhww/followers",
      "following_url": "https://api.github.com/users/hwwhww/following{/other_user}",
      "gists_url": "https://api.github.com/users/hwwhww/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hwwhww/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hwwhww/subscriptions",
      "organizations_url": "https://api.github.com/users/hwwhww/orgs",
      "repos_url": "https://api.github.com/users/hwwhww/repos",
      "events_url": "https://api.github.com/users/hwwhww/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hwwhww/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-01T13:25:26Z",
    "updated_at": "2021-10-01T13:25:26Z",
    "author_association": "MEMBER",
    "body": "Off the main issue of this PR, should we clarify the error handling of this function? i.e., if block with given `block_hash` is unavailable.\r\n\r\nOption 1.\r\n- Allow `get_pow_block` to return `None`. Change it to `get_pow_block(block_hash: Hash32) -> Optional[PowBlock]`.\r\n- In `on_block`, if `get_pow_block` result in `None`, raise exception.\r\n\r\nOption 2.\r\n- Just add a note in `get_pow_block`: \"If the block is not found, the operation is considered invalid.\"\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/932226517/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/933424665",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2636#issuecomment-933424665",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2636",
    "id": 933424665,
    "node_id": "IC_kwDOCOoGbc43ou4Z",
    "user": {
      "login": "mkalinin",
      "id": 1892772,
      "node_id": "MDQ6VXNlcjE4OTI3NzI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1892772?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mkalinin",
      "html_url": "https://github.com/mkalinin",
      "followers_url": "https://api.github.com/users/mkalinin/followers",
      "following_url": "https://api.github.com/users/mkalinin/following{/other_user}",
      "gists_url": "https://api.github.com/users/mkalinin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mkalinin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mkalinin/subscriptions",
      "organizations_url": "https://api.github.com/users/mkalinin/orgs",
      "repos_url": "https://api.github.com/users/mkalinin/repos",
      "events_url": "https://api.github.com/users/mkalinin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mkalinin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-04T12:14:07Z",
    "updated_at": "2021-10-04T12:14:07Z",
    "author_association": "MEMBER",
    "body": "> Off the main issue of this PR, should we clarify the error handling of this function? i.e., if block with given `block_hash` is unavailable.\r\n> \r\n> Option 1.\r\n> \r\n> * Allow `get_pow_block` to return `None`. Change it to `get_pow_block(block_hash: Hash32) -> Optional[PowBlock]`.\r\n> * In `on_block`, if `get_pow_block` result in `None`, raise exception.\r\n> \r\n> Option 2.\r\n> \r\n> * Just add a note in `get_pow_block`: \"If the block is not found, the operation is considered invalid.\"\r\n\r\nActually, with this change https://github.com/ethereum/consensus-specs/pull/2595 `get_pow_block` should never request attributes of an unknown block. There could be an edge case when for some reason the execution client processes the payload and then refuses to return its parent. So, we may change the response type to `Optional[PowBlock]` and add an assertion to the spec that ensures the block data has been returned.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/933424665/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/936061041",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2636#issuecomment-936061041",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2636",
    "id": 936061041,
    "node_id": "IC_kwDOCOoGbc43yyhx",
    "user": {
      "login": "mkalinin",
      "id": 1892772,
      "node_id": "MDQ6VXNlcjE4OTI3NzI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1892772?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mkalinin",
      "html_url": "https://github.com/mkalinin",
      "followers_url": "https://api.github.com/users/mkalinin/followers",
      "following_url": "https://api.github.com/users/mkalinin/following{/other_user}",
      "gists_url": "https://api.github.com/users/mkalinin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mkalinin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mkalinin/subscriptions",
      "organizations_url": "https://api.github.com/users/mkalinin/orgs",
      "repos_url": "https://api.github.com/users/mkalinin/repos",
      "events_url": "https://api.github.com/users/mkalinin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mkalinin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-06T11:34:07Z",
    "updated_at": "2021-10-06T11:34:07Z",
    "author_association": "MEMBER",
    "body": "Actually, I am not quite right on the above and there is a normal case which `get_pow_block` would return nothing in. This is when EL is syncing and terminal block hits the network. The spec must be updated to handle such a case.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/936061041/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/946756655",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2636#issuecomment-946756655",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2636",
    "id": 946756655,
    "node_id": "IC_kwDOCOoGbc44blwv",
    "user": {
      "login": "hwwhww",
      "id": 9263930,
      "node_id": "MDQ6VXNlcjkyNjM5MzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9263930?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hwwhww",
      "html_url": "https://github.com/hwwhww",
      "followers_url": "https://api.github.com/users/hwwhww/followers",
      "following_url": "https://api.github.com/users/hwwhww/following{/other_user}",
      "gists_url": "https://api.github.com/users/hwwhww/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hwwhww/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hwwhww/subscriptions",
      "organizations_url": "https://api.github.com/users/hwwhww/orgs",
      "repos_url": "https://api.github.com/users/hwwhww/repos",
      "events_url": "https://api.github.com/users/hwwhww/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hwwhww/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-19T14:02:55Z",
    "updated_at": "2021-10-20T06:01:42Z",
    "author_association": "MEMBER",
    "body": "@mkalinin \r\n\r\n> Rename `pow_chain` to `block_chain`, and say that the `block_chain` abstractly represents all blocks in the canonical chain disregarding the consensus mechanism that has built each of these blocks\r\n\r\nA nitpicking question around `get_pow_block` in the validator guide:\r\n\r\nIn [`get_pow_block_at_terminal_total_difficulty`](https://github.com/ethereum/consensus-specs/blob/08ea4348c57a1bb36754134d167da1fe1e42e0ef/specs/merge/validator.md#executionpayload):\r\n```python\r\ndef get_pow_block_at_terminal_total_difficulty(pow_chain: Sequence[PowBlock]) -> Optional[PowBlock]:\r\n    # `pow_chain` abstractly represents all blocks in the PoW chain\r\n    for block in pow_chain:\r\n        parent = get_pow_block(block.parent_hash)\r\n        ...\r\n```\r\n\r\nIf the validator already maintains *all* blocks, do they really have to call `get_pow_block(block.parent_hash)` (which we implied it's a JSON-RPC call) to get the parent block?\r\n\r\nCan we just query in the given `pow_chain`? for example:\r\n```python\r\nquery = [pow_block for pow_block in pow_chain if pow_block.block_hash == block.parent_hash]\r\nparent = query[0] if query else None\r\n```\r\n\r\nIt seems we touched the line between pseudo-code and reality. Reusing `get_pow_block` is more convenient but it is a bit confusing when I read it.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/946756655/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/947348021",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2636#issuecomment-947348021",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2636",
    "id": 947348021,
    "node_id": "IC_kwDOCOoGbc44d2I1",
    "user": {
      "login": "mkalinin",
      "id": 1892772,
      "node_id": "MDQ6VXNlcjE4OTI3NzI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1892772?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mkalinin",
      "html_url": "https://github.com/mkalinin",
      "followers_url": "https://api.github.com/users/mkalinin/followers",
      "following_url": "https://api.github.com/users/mkalinin/following{/other_user}",
      "gists_url": "https://api.github.com/users/mkalinin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mkalinin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mkalinin/subscriptions",
      "organizations_url": "https://api.github.com/users/mkalinin/orgs",
      "repos_url": "https://api.github.com/users/mkalinin/repos",
      "events_url": "https://api.github.com/users/mkalinin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mkalinin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-20T05:47:08Z",
    "updated_at": "2021-10-20T05:47:08Z",
    "author_association": "MEMBER",
    "body": "I see what you mean. Re-using `pow_chain` is probably the right way of doing this query. Could we iterate with index starting from `i = 1` and get block and its parent by index: `block = pow_chain[i]`, `parent = pow_chain[i - 1]`?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/947348021/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/947519152",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2636#issuecomment-947519152",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2636",
    "id": 947519152,
    "node_id": "IC_kwDOCOoGbc44ef6w",
    "user": {
      "login": "hwwhww",
      "id": 9263930,
      "node_id": "MDQ6VXNlcjkyNjM5MzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9263930?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hwwhww",
      "html_url": "https://github.com/hwwhww",
      "followers_url": "https://api.github.com/users/hwwhww/followers",
      "following_url": "https://api.github.com/users/hwwhww/following{/other_user}",
      "gists_url": "https://api.github.com/users/hwwhww/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hwwhww/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hwwhww/subscriptions",
      "organizations_url": "https://api.github.com/users/hwwhww/orgs",
      "repos_url": "https://api.github.com/users/hwwhww/repos",
      "events_url": "https://api.github.com/users/hwwhww/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hwwhww/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-20T10:04:55Z",
    "updated_at": "2021-10-20T10:04:55Z",
    "author_association": "MEMBER",
    "body": "@mkalinin \r\nThat works too if we guaranteed `pow_chain` is ordered.\r\n\r\nAnother option is creating *another* abstract helper `get_pow_block_from_chain(pow_chain: Sequence[PowBlock], block_hash: Hash32) -> PowBlock` so that clients can implement it with more efficient data structure.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/947519152/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/948575842",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2636#issuecomment-948575842",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2636",
    "id": 948575842,
    "node_id": "IC_kwDOCOoGbc44ih5i",
    "user": {
      "login": "mkalinin",
      "id": 1892772,
      "node_id": "MDQ6VXNlcjE4OTI3NzI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1892772?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mkalinin",
      "html_url": "https://github.com/mkalinin",
      "followers_url": "https://api.github.com/users/mkalinin/followers",
      "following_url": "https://api.github.com/users/mkalinin/following{/other_user}",
      "gists_url": "https://api.github.com/users/mkalinin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mkalinin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mkalinin/subscriptions",
      "organizations_url": "https://api.github.com/users/mkalinin/orgs",
      "repos_url": "https://api.github.com/users/mkalinin/repos",
      "events_url": "https://api.github.com/users/mkalinin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mkalinin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-21T12:41:18Z",
    "updated_at": "2021-10-21T12:41:18Z",
    "author_association": "MEMBER",
    "body": "> @mkalinin That works too if we guaranteed `pow_chain` is ordered.\r\n> \r\n> Another option is creating _another_ abstract helper `get_pow_block_from_chain(pow_chain: Sequence[PowBlock], block_hash: Hash32) -> PowBlock` so that clients can implement it with more efficient data structure.\r\n\r\nI think client implementations override `get_pow_block_at_terminal_total_difficulty` function as iterating over the whole chain is suboptimal. For simplicity, we could also use `Dict[Hash32, PowBlock]` instead of `Sequence[PowBlock]` to be able to request by hash, requirement on ordering `pow_chain` by the block height would be a bit odd to me as `PowBlock` doesn't have the `number` field which the order is applied to.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/948575842/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/954993798",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2636#issuecomment-954993798",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2636",
    "id": 954993798,
    "node_id": "IC_kwDOCOoGbc447AyG",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-29T19:23:34Z",
    "updated_at": "2021-10-29T19:23:34Z",
    "author_association": "MEMBER",
    "body": "addressed in #2694 ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/954993798/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/957162469",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2636#issuecomment-957162469",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2636",
    "id": 957162469,
    "node_id": "IC_kwDOCOoGbc45DSPl",
    "user": {
      "login": "hwwhww",
      "id": 9263930,
      "node_id": "MDQ6VXNlcjkyNjM5MzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9263930?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hwwhww",
      "html_url": "https://github.com/hwwhww",
      "followers_url": "https://api.github.com/users/hwwhww/followers",
      "following_url": "https://api.github.com/users/hwwhww/following{/other_user}",
      "gists_url": "https://api.github.com/users/hwwhww/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hwwhww/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hwwhww/subscriptions",
      "organizations_url": "https://api.github.com/users/hwwhww/orgs",
      "repos_url": "https://api.github.com/users/hwwhww/repos",
      "events_url": "https://api.github.com/users/hwwhww/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hwwhww/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-02T07:25:57Z",
    "updated_at": "2021-11-02T07:26:26Z",
    "author_association": "MEMBER",
    "body": "Reopen it because I think the original problem of this issue hasn't been solved yet?\r\n\r\n@mkalinin's comment: https://github.com/ethereum/consensus-specs/issues/2636#issuecomment-929944381\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/957162469/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/960647404",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2636#issuecomment-960647404",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2636",
    "id": 960647404,
    "node_id": "IC_kwDOCOoGbc45QlDs",
    "user": {
      "login": "mkalinin",
      "id": 1892772,
      "node_id": "MDQ6VXNlcjE4OTI3NzI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1892772?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mkalinin",
      "html_url": "https://github.com/mkalinin",
      "followers_url": "https://api.github.com/users/mkalinin/followers",
      "following_url": "https://api.github.com/users/mkalinin/following{/other_user}",
      "gists_url": "https://api.github.com/users/mkalinin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mkalinin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mkalinin/subscriptions",
      "organizations_url": "https://api.github.com/users/mkalinin/orgs",
      "repos_url": "https://api.github.com/users/mkalinin/repos",
      "events_url": "https://api.github.com/users/mkalinin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mkalinin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-04T10:55:51Z",
    "updated_at": "2021-11-04T10:55:51Z",
    "author_association": "MEMBER",
    "body": "Thanks @hwwhww! Getting back to the original problem. In the event when a valid transition block isn't accepted by the network, do we want a subsequent proposer to pick a transition PoW block according to the total difficulty rule. Or are we OK that the proposer will pick the *same* transition PoW block as the previous proposer picked if it has imported the previous transition block by a chance and switched its fork choice rule to the PoS?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/960647404/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/988688742",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2636#issuecomment-988688742",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2636",
    "id": 988688742,
    "node_id": "IC_kwDOCOoGbc467jFm",
    "user": {
      "login": "mkalinin",
      "id": 1892772,
      "node_id": "MDQ6VXNlcjE4OTI3NzI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1892772?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mkalinin",
      "html_url": "https://github.com/mkalinin",
      "followers_url": "https://api.github.com/users/mkalinin/followers",
      "following_url": "https://api.github.com/users/mkalinin/following{/other_user}",
      "gists_url": "https://api.github.com/users/mkalinin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mkalinin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mkalinin/subscriptions",
      "organizations_url": "https://api.github.com/users/mkalinin/orgs",
      "repos_url": "https://api.github.com/users/mkalinin/repos",
      "events_url": "https://api.github.com/users/mkalinin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mkalinin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-12-08T10:29:54Z",
    "updated_at": "2021-12-08T10:29:54Z",
    "author_association": "MEMBER",
    "body": "Closing this issue without any follow-ups to the spec. Switching fork choice rule back and force doesn't seem to be valuable enough to take the implementation and design complexity it introduces.\r\n\r\nThe only real case that is affected by not doing the switch back to TD rule seems to be the case when the valid transition block isn't accepted by the network and the validator that *has accepted* this block is proposing yet another transition block. The choice of a terminal block in this pretty rare case will happen according to the new fork choice rule rather than to the TD rule which doesn't seem vulnerable to any kind of attack as long as a terminal block satisfies the corresponding conditions. The latter must always be true, otherwise, the previous transition block must have not been accepted by the node.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/988688742/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
