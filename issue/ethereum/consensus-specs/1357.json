{
  "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1357",
  "repository_url": "https://api.github.com/repos/ethereum/consensus-specs",
  "labels_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1357/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1357/comments",
  "events_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1357/events",
  "html_url": "https://github.com/ethereum/consensus-specs/issues/1357",
  "id": 479788185,
  "node_id": "MDU6SXNzdWU0Nzk3ODgxODU=",
  "number": 1357,
  "title": "Ill-formed calldata to deposit contract can add invalid deposit data",
  "user": {
    "login": "daejunpark",
    "id": 5491770,
    "node_id": "MDQ6VXNlcjU0OTE3NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5491770?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/daejunpark",
    "html_url": "https://github.com/daejunpark",
    "followers_url": "https://api.github.com/users/daejunpark/followers",
    "following_url": "https://api.github.com/users/daejunpark/following{/other_user}",
    "gists_url": "https://api.github.com/users/daejunpark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/daejunpark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/daejunpark/subscriptions",
    "organizations_url": "https://api.github.com/users/daejunpark/orgs",
    "repos_url": "https://api.github.com/users/daejunpark/repos",
    "events_url": "https://api.github.com/users/daejunpark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/daejunpark/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1063043868,
      "node_id": "MDU6TGFiZWwxMDYzMDQzODY4",
      "url": "https://api.github.com/repos/ethereum/consensus-specs/labels/general:enhancement",
      "name": "general:enhancement",
      "color": "086788",
      "default": false,
      "description": "New feature or request"
    },
    {
      "id": 1324892187,
      "node_id": "MDU6TGFiZWwxMzI0ODkyMTg3",
      "url": "https://api.github.com/repos/ethereum/consensus-specs/labels/scope:deposit%20contract",
      "name": "scope:deposit contract",
      "color": "005CAF",
      "default": false,
      "description": ""
    },
    {
      "id": 1437528763,
      "node_id": "MDU6TGFiZWwxNDM3NTI4NzYz",
      "url": "https://api.github.com/repos/ethereum/consensus-specs/labels/post-freeze%20(substantive)",
      "name": "post-freeze (substantive)",
      "color": "991a40",
      "default": false,
      "description": "Substantive consensus change non-critical for long-lived cross-client testnets"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 5,
  "created_at": "2019-08-12T18:31:12Z",
  "updated_at": "2019-09-03T11:38:33Z",
  "closed_at": "2019-09-03T11:38:33Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "### Problem\r\n\r\nThe calldata decoding process in the deposit contract bytecode does not have a sufficient well-formedness check, which fails to detect certain ill-formed calldata, leading to adding invalid deposit data in the deposit Merkle tree.\r\n\r\nThis is problematic when clients make mistakes and send deposit transactions with incorrectly encoded calldata, which may result in losing their deposited Ether.\r\n\r\nFor example, the following ill-formed calldata does _not_ trigger the deposit function to revert:\r\n```\r\n0xc47e300d    <-- deposit function identifier\r\n  0000000000000000000000000000000000000000000000000000000000000060    <-- 96\r\n  0000000000000000000000000000000000000000000000000000000000000080    <-- 128\r\n  00000000000000000000000000000000000000000000000000000000000000a0    <-- 160\r\n  0000000000000000000000000000000000000000000000000000000000000030    <-- 48\r\n  0000000000000000000000000000000000000000000000000000000000000020    <-- 32\r\n  0000000000000000000000000000000000000000000000000000000000000060    <-- 96\r\n```\r\nand the deposit function will simply result in adding the following (garbage) deposit data in the Merkle tree:\r\n```\r\npubkey:\r\n0x0000000000000000000000000000000000000000000000000000000000000020    <-- 32\r\n  00000000000000000000000000000000\r\n\r\nwithdrawal_credentials:\r\n0x0000000000000000000000000000000000000000000000000000000000000060    <-- 96\r\n\r\nsignature:\r\n0x0000000000000000000000000000000000000000000000000000000000000000    <-- 0\r\n  0000000000000000000000000000000000000000000000000000000000000000    <-- 0\r\n  0000000000000000000000000000000000000000000000000000000000000000    <-- 0\r\n```\r\nSince `bls_verify` will fail on this, the deposited Ether associated to this will be lost.\r\n\r\n### A fix suggestion\r\n\r\n[After discussion with @CarlBeek]\r\n\r\nAdd a new parameter to the deposit function, say `expected_leaf_value`, as a checksum for the deposit data to be added in the tree.\r\n\r\nThat is, after the following code that computes the leaf value:\r\n```\r\n    node: bytes32 = sha256(concat(\r\n        sha256(concat(pubkey_root, withdrawal_credentials)),\r\n        sha256(concat(amount, slice(zero_bytes32, start=0, len=32 - AMOUNT_LENGTH), signature_root)),\r\n    ))\r\n```\r\nadd the following assertion:\r\n```\r\n    assert node == expected_leaf_value\r\n```\r\n\r\nHere, clients need to compute `expected_leaf_value` off-chain and provide it along with the original deposit data, to ensure that the leaf value is correctly computed on-chain, which implies that any ill-formed calldata will be rejected.  Furthermore, clients can even run `bls_verify` on `expected_leaf_value` off-chain, to ensure that the deposit data to be added in the tree will be eventually claimable in Eth2.",
  "closed_by": {
    "login": "JustinDrake",
    "id": 731743,
    "node_id": "MDQ6VXNlcjczMTc0Mw==",
    "avatar_url": "https://avatars.githubusercontent.com/u/731743?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/JustinDrake",
    "html_url": "https://github.com/JustinDrake",
    "followers_url": "https://api.github.com/users/JustinDrake/followers",
    "following_url": "https://api.github.com/users/JustinDrake/following{/other_user}",
    "gists_url": "https://api.github.com/users/JustinDrake/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/JustinDrake/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/JustinDrake/subscriptions",
    "organizations_url": "https://api.github.com/users/JustinDrake/orgs",
    "repos_url": "https://api.github.com/users/JustinDrake/repos",
    "events_url": "https://api.github.com/users/JustinDrake/events{/privacy}",
    "received_events_url": "https://api.github.com/users/JustinDrake/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1357/reactions",
    "total_count": 3,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 2,
    "rocket": 0,
    "eyes": 1
  },
  "timeline_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1357/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/520544173",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1357#issuecomment-520544173",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1357",
    "id": 520544173,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyMDU0NDE3Mw==",
    "user": {
      "login": "daejunpark",
      "id": 5491770,
      "node_id": "MDQ6VXNlcjU0OTE3NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5491770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/daejunpark",
      "html_url": "https://github.com/daejunpark",
      "followers_url": "https://api.github.com/users/daejunpark/followers",
      "following_url": "https://api.github.com/users/daejunpark/following{/other_user}",
      "gists_url": "https://api.github.com/users/daejunpark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/daejunpark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/daejunpark/subscriptions",
      "organizations_url": "https://api.github.com/users/daejunpark/orgs",
      "repos_url": "https://api.github.com/users/daejunpark/repos",
      "events_url": "https://api.github.com/users/daejunpark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/daejunpark/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-12T18:36:10Z",
    "updated_at": "2019-08-12T18:36:10Z",
    "author_association": "CONTRIBUTOR",
    "body": "For a future reference, other ideas of fixing this issue are shared below.\r\n\r\n#### 1. Incorporate the `bls_verify` logic in the deposit contract to ensure the validity of the deposit data.\r\n\r\nThis is an ultimate way to ensure the validity, but currently not feasible due to the huge gas cost, until additional EC-precompiles are added to Eth1.\r\n\r\n#### 2. Add explicit well-formedness check.\r\n\r\nRecall that the calldata of the deposit function must be the following 388-byte array:\r\n```\r\n0xc47e300d    <-- function identifier\r\n  0000000000000000000000000000000000000000000000000000000000000060    <-- 96 : pointer to pubkey\r\n  00000000000000000000000000000000000000000000000000000000000000c0    <-- 192 : pointer to withdrawal_credentials\r\n  0000000000000000000000000000000000000000000000000000000000000100    <-- 256 : pointer to signature\r\n  0000000000000000000000000000000000000000000000000000000000000030    <-- 48 : size of pubkey\r\n  pppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppp    <-- pubkey[0:32]\r\n  pppppppppppppppppppppppppppppppp00000000000000000000000000000000    <-- pubkey[32:48] with zero-padding\r\n  0000000000000000000000000000000000000000000000000000000000000020    <-- 32 : size of withdrawal_credentials\r\n  wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww    <-- withdrawal_credentials\r\n  0000000000000000000000000000000000000000000000000000000000000060    <-- 96 : size of signature\r\n  ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss    <-- signature[0:32]\r\n  ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss    <-- signature[32:64]\r\n  ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss    <-- signature[64:96]\r\n```\r\nwhere `ppp...` is the actual content of `pubkey`, `www...` is of `withdrawal_credentials`, and `sss...` is of `signature`.\r\n\r\nThus, the explicit well-formedness check can be done as follows:\r\na. check call data size:\r\n```\r\nassert calldatasize == 388\r\n```\r\nb. check header:\r\n```\r\nassert calldata[4:36] == 96\r\nassert calldata[36:68] == 192\r\nassert calldata[68:100] == 256\r\n```\r\nc. check pubkey:\r\n```\r\nassert calldata[100:132] == 48\r\nassert calldata[180:196] == 0\r\n```\r\nd. check withdrawal_credentials:\r\n```\r\nassert calldata[196:228] == 32\r\n```\r\ne. check signature:\r\n```\r\nassert calldata[260:292] == 96\r\n```\r\n\r\nHowever, it is not straightforward to implement these checks in Vyper, since Vyper does not support the inline assembly because of its design principle.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/520544173/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/520550999",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1357#issuecomment-520550999",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1357",
    "id": 520550999,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyMDU1MDk5OQ==",
    "user": {
      "login": "CarlBeek",
      "id": 12530043,
      "node_id": "MDQ6VXNlcjEyNTMwMDQz",
      "avatar_url": "https://avatars.githubusercontent.com/u/12530043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CarlBeek",
      "html_url": "https://github.com/CarlBeek",
      "followers_url": "https://api.github.com/users/CarlBeek/followers",
      "following_url": "https://api.github.com/users/CarlBeek/following{/other_user}",
      "gists_url": "https://api.github.com/users/CarlBeek/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CarlBeek/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CarlBeek/subscriptions",
      "organizations_url": "https://api.github.com/users/CarlBeek/orgs",
      "repos_url": "https://api.github.com/users/CarlBeek/repos",
      "events_url": "https://api.github.com/users/CarlBeek/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CarlBeek/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-12T18:54:39Z",
    "updated_at": "2019-08-12T18:54:39Z",
    "author_association": "MEMBER",
    "body": "Thanks @daejunpark for the very in-depth explanation here and discussion we had over the past few days.\r\n\r\n> 2. Add explicit well-formedness check.\r\n> ...\r\n> However, it is not straightforward to implement these checks in Vyper, since Vyper does not support the inline assembly because of its design principle.\r\n\r\nAn alternative suggestion is to ask the Vyper team to build out [\"VIP: msg.data\"](https://github.com/ethereum/vyper/issues/1181) which would allow for the explicit check of the parameters. I question whether there is sufficient time to implement this though.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/520550999/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/520631150",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1357#issuecomment-520631150",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1357",
    "id": 520631150,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyMDYzMTE1MA==",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-12T23:26:47Z",
    "updated_at": "2019-08-12T23:26:47Z",
    "author_association": "MEMBER",
    "body": "So this boils down to \"how can we better prevent potential validators from shooting themselves in the foot\". We've been a bit dismissive of additional checks in the past but primarily just wrt bls verification on chain, but this checksum seems to be a reasonable addition with minimal overhead.\r\n\r\nThe _most important thing_ is that any deposit that comes through can be validly de-serialized and parsed into an SSZ `Deposit`. This we handled with the length checks on the incoming params. If there is a route in which the data logged is malformed wrt valid SSZ, then it could cause the eth2 chain to break or at least not be able to process new deposits.\r\n\r\nSecondly, we want to have a good user experience -- the top item on that list being not losing all your money. The checksum is a solid path and should prevent most buggy data from being committed. I just checked on the Vyper `msg.data` issue to see if they can prioritize it. They tend to move quickly on needed features like this when they pop up.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/520631150/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/520774803",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1357#issuecomment-520774803",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1357",
    "id": 520774803,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyMDc3NDgwMw==",
    "user": {
      "login": "vbuterin",
      "id": 2230894,
      "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vbuterin",
      "html_url": "https://github.com/vbuterin",
      "followers_url": "https://api.github.com/users/vbuterin/followers",
      "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
      "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
      "organizations_url": "https://api.github.com/users/vbuterin/orgs",
      "repos_url": "https://api.github.com/users/vbuterin/repos",
      "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vbuterin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-13T10:09:23Z",
    "updated_at": "2019-08-13T10:09:23Z",
    "author_association": "MEMBER",
    "body": "I like the checksum. Definitely feels the most non-intrusive of all the fixes.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/520774803/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/527421679",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1357#issuecomment-527421679",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1357",
    "id": 527421679,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyNzQyMTY3OQ==",
    "user": {
      "login": "JustinDrake",
      "id": 731743,
      "node_id": "MDQ6VXNlcjczMTc0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/731743?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JustinDrake",
      "html_url": "https://github.com/JustinDrake",
      "followers_url": "https://api.github.com/users/JustinDrake/followers",
      "following_url": "https://api.github.com/users/JustinDrake/following{/other_user}",
      "gists_url": "https://api.github.com/users/JustinDrake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JustinDrake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JustinDrake/subscriptions",
      "organizations_url": "https://api.github.com/users/JustinDrake/orgs",
      "repos_url": "https://api.github.com/users/JustinDrake/repos",
      "events_url": "https://api.github.com/users/JustinDrake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JustinDrake/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-09-03T11:38:32Z",
    "updated_at": "2019-09-03T11:38:32Z",
    "author_association": "MEMBER",
    "body": "Closing in favour of #1362—we're going ahead with the suggestion `deposit_data_root` check :)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/527421679/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
