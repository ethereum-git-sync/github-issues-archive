{
  "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1339",
  "repository_url": "https://api.github.com/repos/ethereum/consensus-specs",
  "labels_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1339/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1339/comments",
  "events_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1339/events",
  "html_url": "https://github.com/ethereum/consensus-specs/issues/1339",
  "id": 477234906,
  "node_id": "MDU6SXNzdWU0NzcyMzQ5MDY=",
  "number": 1339,
  "title": "Cheaper signature verifcation for incoming blocks",
  "user": {
    "login": "paulhauner",
    "id": 6660660,
    "node_id": "MDQ6VXNlcjY2NjA2NjA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6660660?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/paulhauner",
    "html_url": "https://github.com/paulhauner",
    "followers_url": "https://api.github.com/users/paulhauner/followers",
    "following_url": "https://api.github.com/users/paulhauner/following{/other_user}",
    "gists_url": "https://api.github.com/users/paulhauner/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/paulhauner/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/paulhauner/subscriptions",
    "organizations_url": "https://api.github.com/users/paulhauner/orgs",
    "repos_url": "https://api.github.com/users/paulhauner/repos",
    "events_url": "https://api.github.com/users/paulhauner/events{/privacy}",
    "received_events_url": "https://api.github.com/users/paulhauner/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1437528763,
      "node_id": "MDU6TGFiZWwxNDM3NTI4NzYz",
      "url": "https://api.github.com/repos/ethereum/consensus-specs/labels/post-freeze%20(substantive)",
      "name": "post-freeze (substantive)",
      "color": "991a40",
      "default": false,
      "description": "Substantive consensus change non-critical for long-lived cross-client testnets"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 12,
  "created_at": "2019-08-06T08:15:57Z",
  "updated_at": "2019-12-15T21:28:05Z",
  "closed_at": "2019-12-15T21:28:05Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "## Problem\r\n\r\nI've been thinking about a DoS vector for block processing at https://github.com/sigp/lighthouse/issues/485#issuecomment-518475804.\r\n\r\nIn summary, a network participant can produce a block which has a parent block more than one epoch ago (e.g., the last finalized block). Before we can verify the signature of this new block, we need to compute the shuffling for the block's epoch where all slots between it and it's parent have been skipped.\r\n\r\nComputing the shuffling that results from this large cross-epoch skip is roughly `O(V)`, where `V` is the validator count. (We might need to recompute the active validator set due to validators exiting or activating).\r\n\r\nThis means that detecting if some block has been signed by a _deposited_ (not necessarily _active_) validator is `O(V)`.\r\n\r\nTo reduce our attack surface, I think it would be desirable to verify that a block has been produced by a deposited validator every time we receive a block from the network (given we're adequately synced). As such, if we're going to call this function a lot, it would be nice if it were faster and more `O(1)`.\r\n\r\n## Potential Solution\r\n\r\nIt's difficult to build a cache for this operation because the attacker can modify the shuffling depending upon which parent block they choose. The number of caches required becomes prohibitive.\r\n\r\nIt seems that adding a `proposer` field to a `BeaconBlock` (which holds the block proposer's validator index) would make this operation `O(1)` at the cost of 8 bytes per block.\r\n\r\nI'm interested to hear thoughts or non-spec-changing alternatives :)",
  "closed_by": {
    "login": "JustinDrake",
    "id": 731743,
    "node_id": "MDQ6VXNlcjczMTc0Mw==",
    "avatar_url": "https://avatars.githubusercontent.com/u/731743?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/JustinDrake",
    "html_url": "https://github.com/JustinDrake",
    "followers_url": "https://api.github.com/users/JustinDrake/followers",
    "following_url": "https://api.github.com/users/JustinDrake/following{/other_user}",
    "gists_url": "https://api.github.com/users/JustinDrake/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/JustinDrake/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/JustinDrake/subscriptions",
    "organizations_url": "https://api.github.com/users/JustinDrake/orgs",
    "repos_url": "https://api.github.com/users/JustinDrake/repos",
    "events_url": "https://api.github.com/users/JustinDrake/events{/privacy}",
    "received_events_url": "https://api.github.com/users/JustinDrake/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1339/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1339/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/518678504",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1339#issuecomment-518678504",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1339",
    "id": 518678504,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxODY3ODUwNA==",
    "user": {
      "login": "JustinDrake",
      "id": 731743,
      "node_id": "MDQ6VXNlcjczMTc0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/731743?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JustinDrake",
      "html_url": "https://github.com/JustinDrake",
      "followers_url": "https://api.github.com/users/JustinDrake/followers",
      "following_url": "https://api.github.com/users/JustinDrake/following{/other_user}",
      "gists_url": "https://api.github.com/users/JustinDrake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JustinDrake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JustinDrake/subscriptions",
      "organizations_url": "https://api.github.com/users/JustinDrake/orgs",
      "repos_url": "https://api.github.com/users/JustinDrake/repos",
      "events_url": "https://api.github.com/users/JustinDrake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JustinDrake/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-06T13:51:44Z",
    "updated_at": "2019-08-06T13:51:44Z",
    "author_association": "MEMBER",
    "body": "> Computing the shuffling that results from this large cross-epoch skip is roughly `O(V)`, where `V` is the validator count. (We might need to recompute the active validator set due to validators exiting or activating).\r\n\r\nThis may no longer be an issue after merging https://github.com/ethereum/eth2.0-specs/pull/1329. Indeed, the shuffling can be point-wise evaluated, so we just need to ensure skipped epochs do not force recomputing the full shuffling. (In hindsight, this is a very sane property to have to mitigate other DoS vectors, e.g. related to evaluating the fork choice rule.) Now `compute_shuffled_index` is only called by `compute_committee` which itself is only called by `get_crosslink_committee`. There are 5 calls to `get_crosslink_committee`:\r\n\r\n1) in `get_beacon_proposer_index` => only computes the shuffling for the first committee so we benefit from point-wise evaluation (notice that it may suffice to compute the first validators in the first committee, not the full committee).\r\n2) in `get_compact_committees_root` => this goes away with #1329\r\n3) in `process_crosslinks` => not relevant in the context of many skipped epochs\r\n4) in `get_crosslink_deltas` => computing the shuffling is not necessary since everyone receives a `base_reward` penalty\r\n3) in `get_attesting_indices`, which is itself called in 3 places:\r\n    * `get_indexed_attestation` => only called by `process_attestation`, itself not relevant for many skipped epochs\r\n    * `get_attestation_deltas` => for attestation micro-rewards, not relevant for skipped epochs\r\n    * `get_unslashed_attesting_indices`, itself called in a few places which at first glance don't seem to require recomputing the full shuffle :joy:",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/518678504/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/518773240",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1339#issuecomment-518773240",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1339",
    "id": 518773240,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxODc3MzI0MA==",
    "user": {
      "login": "vbuterin",
      "id": 2230894,
      "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vbuterin",
      "html_url": "https://github.com/vbuterin",
      "followers_url": "https://api.github.com/users/vbuterin/followers",
      "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
      "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
      "organizations_url": "https://api.github.com/users/vbuterin/orgs",
      "repos_url": "https://api.github.com/users/vbuterin/repos",
      "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vbuterin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-06T17:46:12Z",
    "updated_at": "2019-08-06T17:46:12Z",
    "author_association": "MEMBER",
    "body": "You don't need to compute the entire shuffling to compute the proposer, you can just compute one single shuffled index (or sometimes a couple of extra shuffled indices if the first one doesn't work out).\r\n\r\nYou can replace `candidate_index = first_committee[...]` in https://github.com/ethereum/eth2.0-specs/blob/dev/specs/core/0_beacon-chain.md#get_beacon_proposer_index with a direct lazy-evaluated call to `compute_shuffled_index`.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/518773240/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/518847786",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1339#issuecomment-518847786",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1339",
    "id": 518847786,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxODg0Nzc4Ng==",
    "user": {
      "login": "paulhauner",
      "id": 6660660,
      "node_id": "MDQ6VXNlcjY2NjA2NjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6660660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paulhauner",
      "html_url": "https://github.com/paulhauner",
      "followers_url": "https://api.github.com/users/paulhauner/followers",
      "following_url": "https://api.github.com/users/paulhauner/following{/other_user}",
      "gists_url": "https://api.github.com/users/paulhauner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paulhauner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paulhauner/subscriptions",
      "organizations_url": "https://api.github.com/users/paulhauner/orgs",
      "repos_url": "https://api.github.com/users/paulhauner/repos",
      "events_url": "https://api.github.com/users/paulhauner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paulhauner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-06T21:18:19Z",
    "updated_at": "2019-08-06T21:18:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "I understand that we don't need to do the entire shuffling, but don't we still need to scan the validator registry to find any validators that have activated/exited during the skipped epochs (in order to get the active validator indices, in order to do the point-wise shuffling)?\r\n\r\nThis is the `O(V)` I was referring to.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/518847786/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/518954584",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1339#issuecomment-518954584",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1339",
    "id": 518954584,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxODk1NDU4NA==",
    "user": {
      "login": "JustinDrake",
      "id": 731743,
      "node_id": "MDQ6VXNlcjczMTc0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/731743?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JustinDrake",
      "html_url": "https://github.com/JustinDrake",
      "followers_url": "https://api.github.com/users/JustinDrake/followers",
      "following_url": "https://api.github.com/users/JustinDrake/following{/other_user}",
      "gists_url": "https://api.github.com/users/JustinDrake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JustinDrake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JustinDrake/subscriptions",
      "organizations_url": "https://api.github.com/users/JustinDrake/orgs",
      "repos_url": "https://api.github.com/users/JustinDrake/repos",
      "events_url": "https://api.github.com/users/JustinDrake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JustinDrake/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-07T06:08:52Z",
    "updated_at": "2019-08-07T06:09:53Z",
    "author_association": "MEMBER",
    "body": "> don't we still need to scan the validator registry to find any validators that have activated/exited during the skipped epochs (in order to get the active validator indices, in order to do the point-wise shuffling)?\r\n\r\nA few notes:\r\n\r\n1) The `activation_queue ` in `process_registry_updates` can be implemented as a queue. In the worst case (assuming 2**22 validators) you need to dequeue `get_validator_churn_limit(state) == 64` validators per epoch. In other words, there's no need to `enumerate(state.validators)` and activations are O(1) per epoch in the worst case.\r\n2) Exits can also be implemented as a queue, and a similar analysis to the above can be made for voluntary exits and slashing exits. The harder case to handle is ejection exits which can add to the exit queue *during* a skipped epoch. The good news is that O(1)-per-epoch ejection exits can be implemented by maintaining the validator registry sorted by balance. Indeed, validators with the lowest balance will be ejected first during skipped epochs.\r\n3) In practice for ejections you may want to only maintain some number (say, 1024) of validators that at most \"at risk\" of getting ejected. In the worst case these 1024 validators will get ejected in 1024/get_validator_churn_limit(state) >= 16 skipped epochs (and likely many more in the average case) before having to fallback to reading the full registry.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/518954584/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/519309224",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1339#issuecomment-519309224",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1339",
    "id": 519309224,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxOTMwOTIyNA==",
    "user": {
      "login": "paulhauner",
      "id": 6660660,
      "node_id": "MDQ6VXNlcjY2NjA2NjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6660660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paulhauner",
      "html_url": "https://github.com/paulhauner",
      "followers_url": "https://api.github.com/users/paulhauner/followers",
      "following_url": "https://api.github.com/users/paulhauner/following{/other_user}",
      "gists_url": "https://api.github.com/users/paulhauner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paulhauner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paulhauner/subscriptions",
      "organizations_url": "https://api.github.com/users/paulhauner/orgs",
      "repos_url": "https://api.github.com/users/paulhauner/repos",
      "events_url": "https://api.github.com/users/paulhauner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paulhauner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-07T23:51:20Z",
    "updated_at": "2019-08-07T23:51:20Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks @JustinDrake, I'll come back to these notes if we decide to implement and store such a cache :)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/519309224/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/520514592",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1339#issuecomment-520514592",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1339",
    "id": 520514592,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyMDUxNDU5Mg==",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-12T17:17:12Z",
    "updated_at": "2019-08-12T17:17:12Z",
    "author_association": "MEMBER",
    "body": "I'm pro adding the additional field. It takes ambiguity and complexity out of the equation and allows for a much simpler DoS protection and simpler evaluation when forwarding in the gossip protocol.\r\n\r\nThis also lowers the overhead and simplifies the calcuation in processing proposer slashing",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/520514592/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/521132326",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1339#issuecomment-521132326",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1339",
    "id": 521132326,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyMTEzMjMyNg==",
    "user": {
      "login": "mkalinin",
      "id": 1892772,
      "node_id": "MDQ6VXNlcjE4OTI3NzI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1892772?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mkalinin",
      "html_url": "https://github.com/mkalinin",
      "followers_url": "https://api.github.com/users/mkalinin/followers",
      "following_url": "https://api.github.com/users/mkalinin/following{/other_user}",
      "gists_url": "https://api.github.com/users/mkalinin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mkalinin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mkalinin/subscriptions",
      "organizations_url": "https://api.github.com/users/mkalinin/orgs",
      "repos_url": "https://api.github.com/users/mkalinin/repos",
      "events_url": "https://api.github.com/users/mkalinin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mkalinin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-14T07:20:38Z",
    "updated_at": "2019-08-14T07:20:38Z",
    "author_association": "MEMBER",
    "body": "How do we know if proposer with specified index is eligible to propose a block without processing registry updates for empty epochs? For instance, validator could be ejected due to its inactivity and wouldn't be included into a committee.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/521132326/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/521346236",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1339#issuecomment-521346236",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1339",
    "id": 521346236,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyMTM0NjIzNg==",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-14T17:41:19Z",
    "updated_at": "2019-08-14T17:41:19Z",
    "author_association": "MEMBER",
    "body": "You're right, and eligibility isn't just wrt activations/exits, it is wrt the shuffling in general.\r\n\r\nThe \"cheap\" check of checking the proposer signature without knowing the shuffling opens ourselves up to a new DoS vector. Generally, there are only 64 valid proposers per epoch from the view of the canonical chain. If we require validation of the signature wrt the shuffling prior to forwarding a block, we get decent gossip DoS protection. If instead, we forward any block that has a valid proposer signature regardless of checking the shuffling, then we allow for the entirety of the validator set (minus the actual proposers) to get one free DoS block per epoch.\r\n\r\nA valid signature but unknown parent might enough to decide to perform the state transition but shouldn't be the min criterion to re-gossip the block. The decision on what to do with a block that is a child of a very old parent or an unknown parent still might need to be subject to heuristics (how old the parent, have we seen any attestations for the block, etc)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/521346236/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/521596736",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1339#issuecomment-521596736",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1339",
    "id": 521596736,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyMTU5NjczNg==",
    "user": {
      "login": "mkalinin",
      "id": 1892772,
      "node_id": "MDQ6VXNlcjE4OTI3NzI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1892772?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mkalinin",
      "html_url": "https://github.com/mkalinin",
      "followers_url": "https://api.github.com/users/mkalinin/followers",
      "following_url": "https://api.github.com/users/mkalinin/following{/other_user}",
      "gists_url": "https://api.github.com/users/mkalinin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mkalinin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mkalinin/subscriptions",
      "organizations_url": "https://api.github.com/users/mkalinin/orgs",
      "repos_url": "https://api.github.com/users/mkalinin/repos",
      "events_url": "https://api.github.com/users/mkalinin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mkalinin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-15T10:34:07Z",
    "updated_at": "2019-08-15T10:34:07Z",
    "author_association": "MEMBER",
    "body": "> eligibility isn't just wrt activations/exits, it is wrt the shuffling in general.\r\n\r\nRight. Checking a signature with no regard to a shuffling only checks data integrity and proof of possession of the public key.\r\n\r\nAlso, there is pretty legal case when we have to do an epoch transition in order to validate block's signature:\r\n```\r\n  -> EMPTY -> B64'\r\n /\r\nB62 -> B63 -> B64\r\n```\r\nSignature verification of block `B64'` requires an additional epoch transition made upon an empty slot. It means that epoch transition should be optimal enough to handle such cases.\r\n\r\n> The decision on what to do with a block that is a child of a very old parent or an unknown parent still might need to be subject to heuristics (how old the parent, have we seen any attestations for the block, etc)\r\n\r\nIs there any cases when we want to continue building a chain upon a block that is _behind_ last justified block?\r\n\r\nProposer index in a block might aid in slashing condition checks. I.e. it should be easier to get proposer's identity and then proceed with that.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/521596736/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/522386859",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1339#issuecomment-522386859",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1339",
    "id": 522386859,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyMjM4Njg1OQ==",
    "user": {
      "login": "paulhauner",
      "id": 6660660,
      "node_id": "MDQ6VXNlcjY2NjA2NjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6660660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paulhauner",
      "html_url": "https://github.com/paulhauner",
      "followers_url": "https://api.github.com/users/paulhauner/followers",
      "following_url": "https://api.github.com/users/paulhauner/following{/other_user}",
      "gists_url": "https://api.github.com/users/paulhauner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paulhauner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paulhauner/subscriptions",
      "organizations_url": "https://api.github.com/users/paulhauner/orgs",
      "repos_url": "https://api.github.com/users/paulhauner/repos",
      "events_url": "https://api.github.com/users/paulhauner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paulhauner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-19T02:16:59Z",
    "updated_at": "2019-08-19T02:16:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "> The \"cheap\" check of checking the proposer signature without knowing the shuffling opens ourselves up to a new DoS vector.\r\n\r\nThe ability to do the cheap check reduces the actors that can request you to do an \"expensive\" check. There's almost no computational overhead to do the cheap check before you do the expensive one.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/522386859/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/522561117",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1339#issuecomment-522561117",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1339",
    "id": 522561117,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyMjU2MTExNw==",
    "user": {
      "login": "mkalinin",
      "id": 1892772,
      "node_id": "MDQ6VXNlcjE4OTI3NzI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1892772?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mkalinin",
      "html_url": "https://github.com/mkalinin",
      "followers_url": "https://api.github.com/users/mkalinin/followers",
      "following_url": "https://api.github.com/users/mkalinin/following{/other_user}",
      "gists_url": "https://api.github.com/users/mkalinin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mkalinin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mkalinin/subscriptions",
      "organizations_url": "https://api.github.com/users/mkalinin/orgs",
      "repos_url": "https://api.github.com/users/mkalinin/repos",
      "events_url": "https://api.github.com/users/mkalinin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mkalinin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-19T12:56:17Z",
    "updated_at": "2019-08-19T12:56:17Z",
    "author_association": "MEMBER",
    "body": "> The ability to do the cheap check reduces the actors that can request you to do an \"expensive\" check.\r\n\r\nAgree. That said, validator index is not a 100% reliable thing because it _may_ change due to massive reorg in eth1 chain. And it could make blocks produced by a validator eventually invalid. Do we want to care about that in this particular case?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/522561117/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/565848623",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1339#issuecomment-565848623",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1339",
    "id": 565848623,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2NTg0ODYyMw==",
    "user": {
      "login": "JustinDrake",
      "id": 731743,
      "node_id": "MDQ6VXNlcjczMTc0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/731743?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JustinDrake",
      "html_url": "https://github.com/JustinDrake",
      "followers_url": "https://api.github.com/users/JustinDrake/followers",
      "following_url": "https://api.github.com/users/JustinDrake/following{/other_user}",
      "gists_url": "https://api.github.com/users/JustinDrake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JustinDrake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JustinDrake/subscriptions",
      "organizations_url": "https://api.github.com/users/JustinDrake/orgs",
      "repos_url": "https://api.github.com/users/JustinDrake/repos",
      "events_url": "https://api.github.com/users/JustinDrake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JustinDrake/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-12-15T21:28:04Z",
    "updated_at": "2019-12-15T21:28:04Z",
    "author_association": "MEMBER",
    "body": "Do we still want to add a `proposer` field to beacon blocks? My inclination is \"no\" for a few reasons:\r\n\r\n1) there are ways to mitigate the DoS issue (admittedly, at the cost of implementation complexity)\r\n2) adding a `proposer` field does not fully resolve the DoS vector anyway\r\n3) this issue has gone stale, indicating a possible lack of interest\r\n4) we need to limit post-freeze substantive changes to ship phase 0 ASAP\r\n\r\nFeel free to reopen if you feel otherwise :)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/565848623/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
