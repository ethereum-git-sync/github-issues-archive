{
  "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1759",
  "repository_url": "https://api.github.com/repos/ethereum/consensus-specs",
  "labels_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1759/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1759/comments",
  "events_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1759/events",
  "html_url": "https://github.com/ethereum/consensus-specs/issues/1759",
  "id": 607138459,
  "node_id": "MDU6SXNzdWU2MDcxMzg0NTk=",
  "number": 1759,
  "title": "Robustness of eth2 clients to the eth1 node",
  "user": {
    "login": "ethers",
    "id": 6937903,
    "node_id": "MDQ6VXNlcjY5Mzc5MDM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6937903?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ethers",
    "html_url": "https://github.com/ethers",
    "followers_url": "https://api.github.com/users/ethers/followers",
    "following_url": "https://api.github.com/users/ethers/following{/other_user}",
    "gists_url": "https://api.github.com/users/ethers/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ethers/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ethers/subscriptions",
    "organizations_url": "https://api.github.com/users/ethers/orgs",
    "repos_url": "https://api.github.com/users/ethers/repos",
    "events_url": "https://api.github.com/users/ethers/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ethers/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2020-04-26T23:13:49Z",
  "updated_at": "2020-05-01T02:48:28Z",
  "closed_at": null,
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "Would like to suggest this reminder to (all) eth2 clients, to be robust on whatever the eth1 node/infrasturcture does.\r\n\r\nHere are some recent observations without calling out clients directly:\r\n\r\n* In one testnet, new beacon nodes couldn't sync to the testnet because the provided goerli node was overloaded with all the clients it is serving.\r\n\r\n* On a different client, given a running beacon node, validator, and eth1 node, when the eth1 goerli node started having issues (such as losing peers), after some time the beacon node was not able to continue functioning, and so the validator also stopped working.  It's my understanding that the validator should continue unaffected, if an eth1 node goes down.  This was not the case as the goerli node took down the beacon node. [To this client's credit, the validator node never had to be restarted: when the goerli node and beacon nodes are restarted and function again, the validator node resumes nicely.]\r\n\r\n\r\n(I recall there was a pre-launch checklist of some sort [by @djrtwo] but I haven't been able to find it again.  I suggest this testing be explicitly added.)",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1759/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1759/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/620289609",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1759#issuecomment-620289609",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1759",
    "id": 620289609,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMDI4OTYwOQ==",
    "user": {
      "login": "prestonvanloon",
      "id": 7246818,
      "node_id": "MDQ6VXNlcjcyNDY4MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7246818?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/prestonvanloon",
      "html_url": "https://github.com/prestonvanloon",
      "followers_url": "https://api.github.com/users/prestonvanloon/followers",
      "following_url": "https://api.github.com/users/prestonvanloon/following{/other_user}",
      "gists_url": "https://api.github.com/users/prestonvanloon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/prestonvanloon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/prestonvanloon/subscriptions",
      "organizations_url": "https://api.github.com/users/prestonvanloon/orgs",
      "repos_url": "https://api.github.com/users/prestonvanloon/repos",
      "events_url": "https://api.github.com/users/prestonvanloon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/prestonvanloon/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-04-27T23:32:35Z",
    "updated_at": "2020-04-27T23:32:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "Chiming in on the Prysm side of things since I believe you may have experienced the above issues in our testnet.\r\n\r\n> new beacon nodes couldn't sync to the testnet because the provided goerli node was overloaded with all the clients it is serving.\r\n\r\nIn order to determine the genesis state, the beacon node must have access to all of the deposits involved in creating this state. Another idea is that we hardcode the genesis state into the application post-launch. \r\n\r\n> On a different client, given a running beacon node, validator, and eth1 node, when the eth1 goerli node started having issues (such as losing peers), after some time the beacon node was not able to continue functioning, and so the validator also stopped working. It's my understanding that the validator should continue unaffected, if an eth1 node goes down. \r\n\r\nI am not sure if this was Prysm or not, but eth1 connection only affects block proposals. The beacon node should be able to continue without an eth1 connection. In Prysm, we have recently implemented a timeout of 2 seconds when requesting eth1 information during block proposals (https://github.com/prysmaticlabs/prysm/pull/5583). This is to help mitigate any issues where an eth1 node is slow to respond and a block proposal must be created in a timely fashion to maximize the validator's reward. If the timeout is exceeded, a random vote is used.\r\n\r\nThanks",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/620289609/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/622222776",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1759#issuecomment-622222776",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1759",
    "id": 622222776,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMjIyMjc3Ng==",
    "user": {
      "login": "paulhauner",
      "id": 6660660,
      "node_id": "MDQ6VXNlcjY2NjA2NjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6660660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paulhauner",
      "html_url": "https://github.com/paulhauner",
      "followers_url": "https://api.github.com/users/paulhauner/followers",
      "following_url": "https://api.github.com/users/paulhauner/following{/other_user}",
      "gists_url": "https://api.github.com/users/paulhauner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paulhauner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paulhauner/subscriptions",
      "organizations_url": "https://api.github.com/users/paulhauner/orgs",
      "repos_url": "https://api.github.com/users/paulhauner/repos",
      "events_url": "https://api.github.com/users/paulhauner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paulhauner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-01T02:48:28Z",
    "updated_at": "2020-05-01T02:48:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "> I am not sure if this was Prysm or not, but eth1 connection only affects block proposals.\r\n\r\nI think this was with Lighthouse but I can't find the issue anymore. There was nothing to suggest that the eth1 node going down was linked to the beacon node losing peers, apart from one happened some time after the other. I've never observed this, nor can I figure how it might happen so I closed the issue.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/622222776/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
