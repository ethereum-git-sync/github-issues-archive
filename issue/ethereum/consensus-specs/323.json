{
  "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/323",
  "repository_url": "https://api.github.com/repos/ethereum/consensus-specs",
  "labels_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/323/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/323/comments",
  "events_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/323/events",
  "html_url": "https://github.com/ethereum/consensus-specs/issues/323",
  "id": 391149384,
  "node_id": "MDU6SXNzdWUzOTExNDkzODQ=",
  "number": 323,
  "title": "Possible alternative numer-theoretic shuffling algorithm",
  "user": {
    "login": "vbuterin",
    "id": 2230894,
    "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vbuterin",
    "html_url": "https://github.com/vbuterin",
    "followers_url": "https://api.github.com/users/vbuterin/followers",
    "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
    "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
    "organizations_url": "https://api.github.com/users/vbuterin/orgs",
    "repos_url": "https://api.github.com/users/vbuterin/repos",
    "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vbuterin/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1063052501,
      "node_id": "MDU6TGFiZWwxMDYzMDUyNTAx",
      "url": "https://api.github.com/repos/ethereum/consensus-specs/labels/general:RFC",
      "name": "general:RFC",
      "color": "00D1B2",
      "default": false,
      "description": "Request for Comments"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 13,
  "created_at": "2018-12-14T15:13:32Z",
  "updated_at": "2019-02-12T02:50:33Z",
  "closed_at": "2019-02-12T02:50:33Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "### Motivation\r\n\r\nConstruct a shuffling algorithm where you can compute the value in the shuffled list at any specific position relatively cheaply without computing all of the other values at the same time. This could be used to replace the current `shuffle`.\r\n\r\n### Helpers\r\n\r\n```python\r\ndef is_prime(x):\r\n    return [i for i in range(2, int(x**0.5)+1) if x%i == 0] == []\r\n```\r\n\r\n### Algorithm\r\n\r\n```python\r\ndef value_at_position(n, value, seed):\r\n    # We do the shuffling mod p, the lowest prime >= n, but if we actually shuffle into\r\n    # the \"forbidden\" [n...p-1] slice we just reshuffle until we get out of that slice\r\n    p = n \r\n    while not is_prime(p):\r\n        p += 1 \r\n    # x -> x**power is a permutation mod p\r\n    power = 3 \r\n    while (p-1) % power == 0 or not is_prime(power):\r\n        power += 2 \r\n    for round in range(40):\r\n        a = int.from_bytes(seed[(round % 8)*4: (round % 8)*4 + 4], 'big')\r\n        value = (pow(value, power, p) + a) % p\r\n        while value >= n:\r\n            value = (pow(value, power, p) + a) % p\r\n        # Update the seed if needed\r\n        if round % 8 == 0:\r\n            seed = hash(seed)\r\n    return value\r\n\r\ndef shuffle(values, seed):\r\n    return [values[value_at_position(len(values), i, seed)] for i in range(len(values))]\r\n```\r\n\r\nNote that the above is a maximally simple definition, not an optimal implementation. An optimal implementation would calculate the prime, the exponent, and the `a` values once, and pass them as inputs to `value_at_position`, which would then need to do much less work per value.\r\n\r\nThe main weaknesses are: (i) the computation of the total shuffle is slower even with optimizations, and (ii) the security argument is more heuristic (\"it repeats `x -> x**3 + k[i]` so it's like MIMC\") than the current [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle). However, the strengths may be worth it, especially if we wish to cease storing the shuffling in the state.",
  "closed_by": {
    "login": "djrtwo",
    "id": 1433595,
    "node_id": "MDQ6VXNlcjE0MzM1OTU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/djrtwo",
    "html_url": "https://github.com/djrtwo",
    "followers_url": "https://api.github.com/users/djrtwo/followers",
    "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
    "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
    "organizations_url": "https://api.github.com/users/djrtwo/orgs",
    "repos_url": "https://api.github.com/users/djrtwo/repos",
    "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
    "received_events_url": "https://api.github.com/users/djrtwo/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/323/reactions",
    "total_count": 2,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 2,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/323/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/447396566",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/323#issuecomment-447396566",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/323",
    "id": 447396566,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NzM5NjU2Ng==",
    "user": {
      "login": "mratsim",
      "id": 22738317,
      "node_id": "MDQ6VXNlcjIyNzM4MzE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/22738317?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mratsim",
      "html_url": "https://github.com/mratsim",
      "followers_url": "https://api.github.com/users/mratsim/followers",
      "following_url": "https://api.github.com/users/mratsim/following{/other_user}",
      "gists_url": "https://api.github.com/users/mratsim/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mratsim/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mratsim/subscriptions",
      "organizations_url": "https://api.github.com/users/mratsim/orgs",
      "repos_url": "https://api.github.com/users/mratsim/repos",
      "events_url": "https://api.github.com/users/mratsim/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mratsim/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-14T17:35:26Z",
    "updated_at": "2018-12-14T17:47:55Z",
    "author_association": "CONTRIBUTOR",
    "body": "What are the security properties that are needed?\r\n\r\n### Quick analysis of the bottlenecks\r\n\r\nThe main bottleneck in the current `Fisher-Yates` shuffling is the repeated `modulo` in the loop as it's an expensive operation. In the new proposed shuffling there are `gcd`, `pow` and `modulo`.\r\n\r\nIn my opinion the main advantage of Fisher-Yates is the ability to do it in-place, however I suppose to be able to rollback state, most clients will not implement it in-place but in a temporary location instead.\r\n\r\n### Alternative\r\n\r\nIn case we need a temporary location, I think reservoir sampling will be superior in terms of performance while preserving equi-probabilities of all sequences.\r\n\r\nThe algorithm is very simple and doesn't involve expensive operation, from [Wikipedia](https://en.wikipedia.org/wiki/Reservoir_sampling) (array indexing starts at one)\r\n\r\n```Pascal\r\nReservoirSample(S[1..n], R[1..k])\r\n  // fill the reservoir array\r\n  for i = 1 to k\r\n      R[i] := S[i]\r\n\r\n  // replace elements with gradually decreasing probability\r\n  for i = k+1 to n\r\n    j := random(1, i)   // important: inclusive range\r\n    if j <= k\r\n        R[j] := S[i]\r\n```\r\n\r\nWe only need to couple it with a prng. For example [XorShift128+](https://en.wikipedia.org/wiki/Xorshift#xorshift+) is used by all major browsers (and could be a eWASM primitive):\r\n\r\n```C\r\n#include <stdint.h>\r\n\r\n/* The state must be seeded so that it is not all zero */\r\nuint64_t s[2];\r\n\r\nuint64_t xorshift128plus(void) {\r\n\tuint64_t x = s[0];\r\n\tuint64_t const y = s[1];\r\n\ts[0] = y;\r\n\tx ^= x << 23; // a\r\n\ts[1] = x ^ y ^ (x >> 17) ^ (y >> 26); // b, c\r\n\treturn s[1] + y;\r\n}\r\n```\r\n\r\nOr the latest Xoroshiro128+ by the same author, which is significantly faster and with much better statistical quality.\r\n\r\n- [Benchmark, tests and paper](http://xoshiro.di.unimi.it/)\r\n\r\n[Implementation in Nim](https://github.com/nim-lang/Nim/blob/72e15ff739cc73fbf6e3090756d3f9cb3d5af2fa/lib/pure/random.nim#L29-L55) (disclaimer this is the default Nim PRNG):\r\n\r\n```Nim\r\ntype\r\n  Rand* = object ## State of the random number generator.\r\n                 ## The procs that use the default state\r\n                 ## are **not** thread-safe!\r\n    a0, a1: ui\r\n\r\nvar state = Rand(  # <---- We can use our own seed instead\r\n  a0: 0x69B4C98CB8530805u64,\r\n  a1: 0xFED1DD3004688D67CAu64)\r\n\r\nproc rotl(x, k: ui): ui =\r\n  result = (x shl k) or (x shr (ui(64) - k))\r\n\r\nproc next*(r: var Rand): uint64 =\r\n  ## Uses the state to compute a new ``uint64`` random number.\r\n  let s0 = r.a0\r\n  var s1 = r.a1\r\n  result = s0 + s1\r\n  s1 = s1 xor s0\r\n  r.a0 = rotl(s0, 55) xor s1 xor (s1 shl 14) # a, b\r\n  r.a1 = rotl(s1, 36) # c\r\n``` \r\n\r\n### Advantage\r\n\r\nThis is much more hardware friendly.\r\n\r\n### Drawback\r\n\r\nLike the current Fisher-Yates, you need to keep a state.\r\n\r\n### Papers\r\n\r\n  - [Random Sampling with a reservoir](https://www.cs.umd.edu/~samir/498/vitter.pdf), 1985, Vitter\r\n  - [An efficient algorithm for sequential random sampling](https://www.researchgate.net/profile/Jeffrey_Vitter/publication/278627791_An_efficient_algorithm_for_sequential_random_sampling/links/5747b27508aef66a78b08012/An-efficient-algorithm-for-sequential-random-sampling.pdf), 1987, Vitter\r\n      - This refines the previous paper and introduces gap sampling\r\n  - [Scrambled Linear Pseudorandom Number Generators](http://vigna.di.unimi.it/ftp/papers/ScrambledLinear.pdf), 2018, Blackman, Vigna",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/447396566/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/447517042",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/323#issuecomment-447517042",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/323",
    "id": 447517042,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NzUxNzA0Mg==",
    "user": {
      "login": "mratsim",
      "id": 22738317,
      "node_id": "MDQ6VXNlcjIyNzM4MzE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/22738317?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mratsim",
      "html_url": "https://github.com/mratsim",
      "followers_url": "https://api.github.com/users/mratsim/followers",
      "following_url": "https://api.github.com/users/mratsim/following{/other_user}",
      "gists_url": "https://api.github.com/users/mratsim/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mratsim/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mratsim/subscriptions",
      "organizations_url": "https://api.github.com/users/mratsim/orgs",
      "repos_url": "https://api.github.com/users/mratsim/repos",
      "events_url": "https://api.github.com/users/mratsim/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mratsim/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-15T00:20:51Z",
    "updated_at": "2018-12-15T00:20:51Z",
    "author_association": "CONTRIBUTOR",
    "body": "I've been thinking over this and unfortunately reservoir sampling wouldn't work as is.\r\n\r\nWe need a reservoir that hold the final selection, so it must be the size of the list to shuffle, i.e. we would start with the list and then we remove (~sample) elements randomly from it, so basically it just degrade into random sampling without replacement. However when doing random sampling the data structure used is quite important and a list/vector is not the most efficient one (in my benchmarks a Fenwick tree is very efficient) but if we need to reorganize into a new data structure we might as well do copy+Fisher Yates.\r\n\r\nAn alternative scheme would be to have a smaller reservoir (say 8 items) and add items ejected from the reservoir to the final list. Unfortunately even if we start from a random point in the original list, the order would be correlated to the original order.\r\n\r\nSo in short I think reservoir sampling is not suitable.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/447517042/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/447520472",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/323#issuecomment-447520472",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/323",
    "id": 447520472,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NzUyMDQ3Mg==",
    "user": {
      "login": "vbuterin",
      "id": 2230894,
      "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vbuterin",
      "html_url": "https://github.com/vbuterin",
      "followers_url": "https://api.github.com/users/vbuterin/followers",
      "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
      "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
      "organizations_url": "https://api.github.com/users/vbuterin/orgs",
      "repos_url": "https://api.github.com/users/vbuterin/repos",
      "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vbuterin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-15T00:47:51Z",
    "updated_at": "2018-12-15T00:47:51Z",
    "author_association": "MEMBER",
    "body": "The main desired property is being maximally close to a random permutation. Specifically, it should be maximally computationally difficult to find seeds that ensure that in a shuffling of `1...N`, any specific subset `x1, x2, x3.... x[k]` are in a specific range `[v ..... v+k]`.\r\n\r\nThe reason why the number-theoretic shuffle above is interesting is that you don't need to compute the whole output to compute a small portion of the output. This makes it much easier to use in light clients, and to verify blocks generally.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/447520472/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/447521078",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/323#issuecomment-447521078",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/323",
    "id": 447521078,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NzUyMTA3OA==",
    "user": {
      "login": "vbuterin",
      "id": 2230894,
      "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vbuterin",
      "html_url": "https://github.com/vbuterin",
      "followers_url": "https://api.github.com/users/vbuterin/followers",
      "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
      "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
      "organizations_url": "https://api.github.com/users/vbuterin/orgs",
      "repos_url": "https://api.github.com/users/vbuterin/repos",
      "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vbuterin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-15T00:52:26Z",
    "updated_at": "2018-12-15T00:52:26Z",
    "author_association": "MEMBER",
    "body": "I just optimized the code a bit; it can shuffle 100000 values in one second (vs 1 million in one second for the Fisher-Yates shuffle). That said, the hash complexity is smaller, so I suspect in an optimized C implementation the number-theoretic shuffle will not be much smaller than out current Fisher-Yates shuffle, as in python the hashes are optimized but the rest of the code is not, leading to hashing costs being understated.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/447521078/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/448263721",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/323#issuecomment-448263721",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/323",
    "id": 448263721,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0ODI2MzcyMQ==",
    "user": {
      "login": "vbuterin",
      "id": 2230894,
      "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vbuterin",
      "html_url": "https://github.com/vbuterin",
      "followers_url": "https://api.github.com/users/vbuterin/followers",
      "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
      "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
      "organizations_url": "https://api.github.com/users/vbuterin/orgs",
      "repos_url": "https://api.github.com/users/vbuterin/repos",
      "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vbuterin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-18T15:39:54Z",
    "updated_at": "2019-02-12T02:50:02Z",
    "author_association": "MEMBER",
    "body": "Here is a hash-based alternative. Here's the core:\r\n\r\n```python\r\ndef numhash(x, i, seed, modulus):\r\n  assert 0 <= i < 4\r\n  return (int.from_bytes(hash(x.to_bytes(32, 'big') + seed), 'big') // modulus**i) % modulus\r\n\r\ndef feistel(x, modulus, seed):\r\n   assert is_perfect_square(modulus) and modulus < 2**50\r\n   h = int(modulus ** 0.5)\r\n   L, R = x//h, x%h\r\n   for i in range(4):\r\n    new_R = (L + numhash(R, i, seed, h)) % h\r\n    L = R\r\n    R = new_R\r\n   return L * h + R\r\n```\r\n\r\nNow for the actual function, let `modulus` be the smallest perfect square greater than or equal to `n`. To permute some `value`, set `value = feistel(value, modulus, seed)` and if needed repeat until the result is less than `n`, just as above. This takes 4 hashes to compute for a single number, but to permute an entire list you only need `~sqrt(n)` hashes.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/448263721/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/448397169",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/323#issuecomment-448397169",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/323",
    "id": 448397169,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0ODM5NzE2OQ==",
    "user": {
      "login": "vbuterin",
      "id": 2230894,
      "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vbuterin",
      "html_url": "https://github.com/vbuterin",
      "followers_url": "https://api.github.com/users/vbuterin/followers",
      "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
      "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
      "organizations_url": "https://api.github.com/users/vbuterin/orgs",
      "repos_url": "https://api.github.com/users/vbuterin/repos",
      "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vbuterin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-18T22:34:40Z",
    "updated_at": "2018-12-18T22:36:48Z",
    "author_association": "MEMBER",
    "body": "I implemented both options and the status quo here: https://github.com/ethereum/research/tree/master/shuffling\r\n\r\nHere's the timing test output, testing both computing a full shuffle of 100000 and computing just a specific sub-committee of 500 out of the 100000:\r\n\r\n```python\r\nTesting prime shuffle\r\n[40388, 24854, 44555, 69180, 37292, 27818, 85124, 51675, 75163, 16592]\r\n[40388, 24854, 44555, 69180, 37292, 27818, 85124, 51675, 75163, 16592]\r\nTotal runtime:  1.0141525268554688\r\nRuntime to compute committee:  0.022953271865844727\r\n\r\nTesting feistel shuffle\r\n[82855, 3100, 89704, 87662, 7830, 16014, 57626, 95313, 53632, 97853]\r\n[82855, 3100, 89704, 87662, 7830, 16014, 57626, 95313, 53632, 97853]\r\nTotal runtime:  0.10488557815551758\r\nRuntime to compute committee:  0.00408935546875\r\n\r\nTesting Fisher-Yates shuffle (status quo)\r\n[93044, 39644, 88989, 78137, 17662, 17187, 41433, 85069, 64061, 6647]\r\nTotal runtime:  0.08116364479064941\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/448397169/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/448753135",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/323#issuecomment-448753135",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/323",
    "id": 448753135,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0ODc1MzEzNQ==",
    "user": {
      "login": "mratsim",
      "id": 22738317,
      "node_id": "MDQ6VXNlcjIyNzM4MzE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/22738317?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mratsim",
      "html_url": "https://github.com/mratsim",
      "followers_url": "https://api.github.com/users/mratsim/followers",
      "following_url": "https://api.github.com/users/mratsim/following{/other_user}",
      "gists_url": "https://api.github.com/users/mratsim/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mratsim/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mratsim/subscriptions",
      "organizations_url": "https://api.github.com/users/mratsim/orgs",
      "repos_url": "https://api.github.com/users/mratsim/repos",
      "events_url": "https://api.github.com/users/mratsim/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mratsim/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-19T21:39:22Z",
    "updated_at": "2018-12-19T21:39:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "Feistel shuffling is impressively fast.\r\n\r\nI've transformed the current state-of-the-art sampling technique from natural language processing into a shuffling algorithm in https://github.com/ethereum/research/pull/98.\r\n\r\nOriginally it was for weighted sampling hence why it is rearranging input to efficiently check cumulative probability distributions.\r\n\r\nThere is an initialisation cost but further sampling are 6.5x cheaper.\r\n\r\n```python\r\nTesting prime shuffle\r\n[40388, 24854, 44555, 69180, 37292, 27818, 85124, 51675, 75163, 16592]\r\n[40388, 24854, 44555, 69180, 37292, 27818, 85124, 51675, 75163, 16592]\r\nTotal runtime:  1.651440143585205\r\nRuntime to compute committee:  0.02932882308959961\r\n\r\n\r\nTesting feistel shuffle\r\n[82855, 3100, 89704, 87662, 7830, 16014, 57626, 95313, 53632, 97853]\r\n[82855, 3100, 89704, 87662, 7830, 16014, 57626, 95313, 53632, 97853]\r\nTotal runtime:  0.15117597579956055\r\nRuntime to compute committee:  0.005218982696533203\r\n\r\n\r\nTesting Fisher-Yates shuffle\r\n[93044, 39644, 88989, 78137, 17662, 17187, 41433, 85069, 64061, 6647]\r\nTotal runtime:  0.1256880760192871\r\n\r\n\r\nTesting F+tree sampling\r\n[93044, 39644, 88989, 78137, 17662, 17187, 41433, 85069, 64061, 6647]\r\n[50405, 51879, 54080, 30514, 76290, 60097, 83697, 19454, 68194, 85273]\r\n[75628, 50172, 45023, 21349, 80036, 81698, 2829, 994, 88511, 20356]\r\nTotal runtime:  1.5932817459106445\r\nRuntime to compute first committee:  0.053829193115234375\r\nRuntime to compute next committee:  0.008832931518554688\r\n```\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/448753135/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/449407829",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/323#issuecomment-449407829",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/323",
    "id": 449407829,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0OTQwNzgyOQ==",
    "user": {
      "login": "JustinDrake",
      "id": 731743,
      "node_id": "MDQ6VXNlcjczMTc0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/731743?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JustinDrake",
      "html_url": "https://github.com/JustinDrake",
      "followers_url": "https://api.github.com/users/JustinDrake/followers",
      "following_url": "https://api.github.com/users/JustinDrake/following{/other_user}",
      "gists_url": "https://api.github.com/users/JustinDrake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JustinDrake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JustinDrake/subscriptions",
      "organizations_url": "https://api.github.com/users/JustinDrake/orgs",
      "repos_url": "https://api.github.com/users/JustinDrake/repos",
      "events_url": "https://api.github.com/users/JustinDrake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JustinDrake/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-21T14:50:26Z",
    "updated_at": "2018-12-21T14:50:26Z",
    "author_association": "MEMBER",
    "body": "Benedikt Bunz points to [this paper](https://www.iacr.org/archive/fse2007/45930457/45930457.pdf) as a potential candidate.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/449407829/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/455258820",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/323#issuecomment-455258820",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/323",
    "id": 455258820,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NTI1ODgyMA==",
    "user": {
      "login": "drozdziak1",
      "id": 8928339,
      "node_id": "MDQ6VXNlcjg5MjgzMzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8928339?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/drozdziak1",
      "html_url": "https://github.com/drozdziak1",
      "followers_url": "https://api.github.com/users/drozdziak1/followers",
      "following_url": "https://api.github.com/users/drozdziak1/following{/other_user}",
      "gists_url": "https://api.github.com/users/drozdziak1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/drozdziak1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/drozdziak1/subscriptions",
      "organizations_url": "https://api.github.com/users/drozdziak1/orgs",
      "repos_url": "https://api.github.com/users/drozdziak1/repos",
      "events_url": "https://api.github.com/users/drozdziak1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/drozdziak1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-17T17:31:03Z",
    "updated_at": "2019-01-17T17:31:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "Is it certain that the present shuffling approach is going to be ditched?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/455258820/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/455262840",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/323#issuecomment-455262840",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/323",
    "id": 455262840,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NTI2Mjg0MA==",
    "user": {
      "login": "JustinDrake",
      "id": 731743,
      "node_id": "MDQ6VXNlcjczMTc0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/731743?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JustinDrake",
      "html_url": "https://github.com/JustinDrake",
      "followers_url": "https://api.github.com/users/JustinDrake/followers",
      "following_url": "https://api.github.com/users/JustinDrake/following{/other_user}",
      "gists_url": "https://api.github.com/users/JustinDrake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JustinDrake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JustinDrake/subscriptions",
      "organizations_url": "https://api.github.com/users/JustinDrake/orgs",
      "repos_url": "https://api.github.com/users/JustinDrake/repos",
      "events_url": "https://api.github.com/users/JustinDrake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JustinDrake/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-17T17:42:36Z",
    "updated_at": "2019-01-17T17:42:36Z",
    "author_association": "MEMBER",
    "body": "@drozdziak1 I'd say 80% :) Light-client friendly shuffles seem like a big win, and they are possible. It's now an engineering/cryptography question to find a really efficient one, maybe even a SNARK/STARK-friendly one.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/455262840/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/459220440",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/323#issuecomment-459220440",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/323",
    "id": 459220440,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1OTIyMDQ0MA==",
    "user": {
      "login": "esaulpaugh",
      "id": 11620990,
      "node_id": "MDQ6VXNlcjExNjIwOTkw",
      "avatar_url": "https://avatars.githubusercontent.com/u/11620990?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/esaulpaugh",
      "html_url": "https://github.com/esaulpaugh",
      "followers_url": "https://api.github.com/users/esaulpaugh/followers",
      "following_url": "https://api.github.com/users/esaulpaugh/following{/other_user}",
      "gists_url": "https://api.github.com/users/esaulpaugh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/esaulpaugh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/esaulpaugh/subscriptions",
      "organizations_url": "https://api.github.com/users/esaulpaugh/orgs",
      "repos_url": "https://api.github.com/users/esaulpaugh/repos",
      "events_url": "https://api.github.com/users/esaulpaugh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/esaulpaugh/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-31T05:26:40Z",
    "updated_at": "2019-01-31T05:52:20Z",
    "author_association": "NONE",
    "body": "It sounds like a CSPRNG is a requirement. Anything less just seems sketchy when deliberate attacks are expected. As they say, attacks only get better",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/459220440/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/459767764",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/323#issuecomment-459767764",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/323",
    "id": 459767764,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1OTc2Nzc2NA==",
    "user": {
      "login": "th4s",
      "id": 24564138,
      "node_id": "MDQ6VXNlcjI0NTY0MTM4",
      "avatar_url": "https://avatars.githubusercontent.com/u/24564138?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/th4s",
      "html_url": "https://github.com/th4s",
      "followers_url": "https://api.github.com/users/th4s/followers",
      "following_url": "https://api.github.com/users/th4s/following{/other_user}",
      "gists_url": "https://api.github.com/users/th4s/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/th4s/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/th4s/subscriptions",
      "organizations_url": "https://api.github.com/users/th4s/orgs",
      "repos_url": "https://api.github.com/users/th4s/repos",
      "events_url": "https://api.github.com/users/th4s/events{/privacy}",
      "received_events_url": "https://api.github.com/users/th4s/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-01T15:50:31Z",
    "updated_at": "2019-02-01T15:50:31Z",
    "author_association": "NONE",
    "body": "@vbuterin have you run some random number tests (e.g. dieharder) against the primenumber implementation or is this algorithm some well-known CSPRNG?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/459767764/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/462593097",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/323#issuecomment-462593097",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/323",
    "id": 462593097,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MjU5MzA5Nw==",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-12T02:50:33Z",
    "updated_at": "2019-02-12T02:50:33Z",
    "author_association": "MEMBER",
    "body": "closed by adding \"swap or not\" #563 ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/462593097/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
