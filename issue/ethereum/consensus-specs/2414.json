{
  "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2414",
  "repository_url": "https://api.github.com/repos/ethereum/consensus-specs",
  "labels_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2414/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2414/comments",
  "events_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2414/events",
  "html_url": "https://github.com/ethereum/consensus-specs/issues/2414",
  "id": 891967408,
  "node_id": "MDU6SXNzdWU4OTE5Njc0MDg=",
  "number": 2414,
  "title": "`ResourceUnavailable` details",
  "user": {
    "login": "djrtwo",
    "id": 1433595,
    "node_id": "MDQ6VXNlcjE0MzM1OTU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/djrtwo",
    "html_url": "https://github.com/djrtwo",
    "followers_url": "https://api.github.com/users/djrtwo/followers",
    "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
    "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
    "organizations_url": "https://api.github.com/users/djrtwo/orgs",
    "repos_url": "https://api.github.com/users/djrtwo/repos",
    "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
    "received_events_url": "https://api.github.com/users/djrtwo/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1063052501,
      "node_id": "MDU6TGFiZWwxMDYzMDUyNTAx",
      "url": "https://api.github.com/repos/ethereum/consensus-specs/labels/general:RFC",
      "name": "general:RFC",
      "color": "00D1B2",
      "default": false,
      "description": "Request for Comments"
    },
    {
      "id": 1295438707,
      "node_id": "MDU6TGFiZWwxMjk1NDM4NzA3",
      "url": "https://api.github.com/repos/ethereum/consensus-specs/labels/scope:networking",
      "name": "scope:networking",
      "color": "F596AA",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 5,
  "created_at": "2021-05-14T14:25:33Z",
  "updated_at": "2021-06-07T22:40:09Z",
  "closed_at": "2021-06-07T22:40:09Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "Based on conversations with @arnetheduck, this error code is a bit ambiguous/under-specified for all of the req/resp message types. Specifically, we need to ensure that the MUSTs and SHOULDs of various calls are sufficient and safe given this new code.\r\n\r\nThis error code was pulled for the v1.1.0-alpha.4 release (#2413). The plan is to discuss the ambiguities here, and work through these details ***BY WEDNESDAY MAY 19*** in preparation for spec freeze on Friday.\r\n\r\nThe current path is to include the error code but to ensure it is done safely.",
  "closed_by": {
    "login": "djrtwo",
    "id": 1433595,
    "node_id": "MDQ6VXNlcjE0MzM1OTU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/djrtwo",
    "html_url": "https://github.com/djrtwo",
    "followers_url": "https://api.github.com/users/djrtwo/followers",
    "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
    "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
    "organizations_url": "https://api.github.com/users/djrtwo/orgs",
    "repos_url": "https://api.github.com/users/djrtwo/repos",
    "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
    "received_events_url": "https://api.github.com/users/djrtwo/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2414/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2414/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/843864346",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2414#issuecomment-843864346",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2414",
    "id": 843864346,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0Mzg2NDM0Ng==",
    "user": {
      "login": "arnetheduck",
      "id": 1382986,
      "node_id": "MDQ6VXNlcjEzODI5ODY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1382986?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/arnetheduck",
      "html_url": "https://github.com/arnetheduck",
      "followers_url": "https://api.github.com/users/arnetheduck/followers",
      "following_url": "https://api.github.com/users/arnetheduck/following{/other_user}",
      "gists_url": "https://api.github.com/users/arnetheduck/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/arnetheduck/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/arnetheduck/subscriptions",
      "organizations_url": "https://api.github.com/users/arnetheduck/orgs",
      "repos_url": "https://api.github.com/users/arnetheduck/repos",
      "events_url": "https://api.github.com/users/arnetheduck/events{/privacy}",
      "received_events_url": "https://api.github.com/users/arnetheduck/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-19T08:18:40Z",
    "updated_at": "2021-05-19T08:18:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "To avoid wasted implementation effort on how the error should be handled and interpreted by all clients, there are a few details to work out - not only do we save work now (\"oh, client x responds this way and client y the other\"), but detailing these behaviors in the spec will also make future changes more smooth as having a fixed point / behavior to base backwards compatibility on generally is easier.\r\n\r\nIn particular, for now we've divided the world into \"worked\" and \"didn't work\", letting the client side implement logic to guard against faulty and/or malicious responders (which it must do anyway), with \"didn't work\" being treated as semi-permanent.\r\n\r\nMore specific error codes are generally useful when there is an expectation that clients will choose a behavior based on that error code - when adding error codes to the spec, we should thus specify under which conditions each request responds with a particular error code, what the expected behavior on the receiving end is, and how to deal with unexpected error codes.\r\n\r\nFor `ResourceUnavailable` in particular:\r\n\r\n`BeaconBlocksByRoot` answers queries for missing blocks by simply omitting them - clients reading the response to the request must compute a hash of the the block to validate it so they can always deduce `ResourceUnavailable` - introducing the error code means we should pick one way to answer here (by enumerating which error codes are valid in the context)\r\n\r\n`BeaconBlocksByRange` - here, `ResourceUnavailable` is a bit more tricky - to add it to the spec, one would have to define the cases where it should be returned. The spec says:\r\n\r\n> Clients MUST keep a record of signed blocks seen on the epoch range `[max(GENESIS_EPOCH, current_epoch - MIN_EPOCHS_FOR_BLOCK_REQUESTS), current_epoch]`\r\n\r\nThere are therefore two cases where `ResourceUnavailable` could be used:\r\n\r\n* The client is not following the spec and doesn't make the blocks in the given range available. This can generally be deduced just like with all other block requests: if _another_ client gives a better response, it's known that the client that didn't give blocks doesn't make the resource available - using an error code here basically allows the faulty peer to be kicked earlier because it now admits it's not serving the blocks. This may or may not be a temporary condition (backfilling for example).\r\n* The request was for a range outside of the required block storage range - this may happen naturally for valid requests for example when time passes between request and response. The \"current\" way to handle this would be to simply start sending blocks from within the range, and let the receiving client deal with the mess. It's an open question how to handle \"partially\" missing ranges. \r\n\r\nThe other way to look at the error in the case of `BeaconBlocksByRange` is temporary vs permanent - the former happens during backfilling for example where the more specific error code can be used to signal the intent to start complying with the spec later - one open issue with any `temporary` interpretation is that it increases the incentive to always respond this way: when a peer is syncing, it is not useful to the server so if the syncing peer kicks them temporarily and reconnects when synced, that saves bandwidth for the server. If/when this becomes a problem, we might need to balance it with a policing effort.\r\n\r\nOne final open question is what to do with light-syncing peers that are not validating, but just listening to some traffic - presumably, they would always respond to requests with `ResourceUnavailable` - but at the same time, they would likely not be participating in gossip at all. Which peers to allow onto the gossip network is an open research question - gossipsub provides some insight into the quality of gossip peers, but there's little in the spec for guidance.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/843864346/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/844665125",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2414#issuecomment-844665125",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2414",
    "id": 844665125,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0NDY2NTEyNQ==",
    "user": {
      "login": "ajsutton",
      "id": 72675,
      "node_id": "MDQ6VXNlcjcyNjc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/72675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajsutton",
      "html_url": "https://github.com/ajsutton",
      "followers_url": "https://api.github.com/users/ajsutton/followers",
      "following_url": "https://api.github.com/users/ajsutton/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajsutton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajsutton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajsutton/subscriptions",
      "organizations_url": "https://api.github.com/users/ajsutton/orgs",
      "repos_url": "https://api.github.com/users/ajsutton/repos",
      "events_url": "https://api.github.com/users/ajsutton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajsutton/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-20T03:50:37Z",
    "updated_at": "2021-05-20T03:50:37Z",
    "author_association": "CONTRIBUTOR",
    "body": "> BeaconBlocksByRoot answers queries for missing blocks by simply omitting them - clients reading the response to the request must compute a hash of the the block to validate it so they can always deduce ResourceUnavailable - introducing the error code means we should pick one way to answer here (by enumerating which error codes are valid in the context)\r\n\r\nYep I don't think there's any need for `ResourceUnavailable` with `BeaconBlocksByRoot` as not returning any blocks already means \"I don't have any of those blocks\".\r\n\r\n\r\nFor `BeaconBlocksByRange` the error code is useful because it distinguishes between \"there were no blocks in this range\" and \"I don't have records for this range so can't answer the query\".  That would apply both if the blocks were still backfilling or if they'd been pruned because they are outside the block storage range.  Since `BeaconBlocksByRange` requires returning the first block in the range, I'd say that a node MUST return `ResourceUnavailable` if they are unable to determine and return the first block in the range.  In most cases that means if the start of the range is prior to the earliest slot blocks are kept for but may be more complex if the node can have arbitrary ranges of blocks that are unavailable.\r\n\r\nNodes receiving `ResourceUnavailable` response would immediately know that this peer is not providing an accurate view of the chain (vs getting an empty response which then requires comparing against multiple other peers to determine if it really was empty or the node just didn't return blocks).  How the requesting node responds to that really comes down to their approach to sync and peer management policies same as different clients respond differently to getting empty responses today.\r\n\r\nI guess I'm unclear on exactly what problems we're trying to work through here because I wasn't privy to the original conversation.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/844665125/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/845089329",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2414#issuecomment-845089329",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2414",
    "id": 845089329,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0NTA4OTMyOQ==",
    "user": {
      "login": "arnetheduck",
      "id": 1382986,
      "node_id": "MDQ6VXNlcjEzODI5ODY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1382986?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/arnetheduck",
      "html_url": "https://github.com/arnetheduck",
      "followers_url": "https://api.github.com/users/arnetheduck/followers",
      "following_url": "https://api.github.com/users/arnetheduck/following{/other_user}",
      "gists_url": "https://api.github.com/users/arnetheduck/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/arnetheduck/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/arnetheduck/subscriptions",
      "organizations_url": "https://api.github.com/users/arnetheduck/orgs",
      "repos_url": "https://api.github.com/users/arnetheduck/repos",
      "events_url": "https://api.github.com/users/arnetheduck/events{/privacy}",
      "received_events_url": "https://api.github.com/users/arnetheduck/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-20T12:53:50Z",
    "updated_at": "2021-05-20T12:53:50Z",
    "author_association": "CONTRIBUTOR",
    "body": "> I don't think there's any need\r\n\r\nThat should be part of any PR that introduces `ResourceUnavailable`, so as to avoid ambiguities.\r\n\r\n> For BeaconBlocksByRange the error code is useful because it distinguishes between \"there were no blocks in this range\" and \"I don't have records for this range so can't answer the query\". \r\n\r\n> really was empty \r\n\r\nthis is the tricky part: any range you ask for might be empty in their view of the chain - the `byrange` request asks for what the other party considers to be the canonical chain - you have to reconcile that with your local information about what the chain is and what others are sending you, regardless of what they send you (error codes, blocks, empty ranges) - any \"the chain is empty\" response is no more authoritative than \"I don't know, I don't have the block range\" in this regard - for example, it doesn't tell you if you should request a different range from the same peer or not (they might have it, or they might not), and it doesn't tell you if you should request the same range from a different peer (it might have blocks or it might not). \r\n\r\nFor the error code to be useful, one would need to accompany it with a guide as to when to return it exactly, and preferably, how the receiving client should react it - if this is not included, we'll end up in a situation where the error code becomes a client-specific extension that will be difficult to code logic against.\r\n\r\nOne property of this kind of error code could be used for is to establish who is a freeloader - the network can (and perhaps should) by default support a certain amount of freeloading - the longer term solution discussed here is that we would introduce such information in the ENR so that it's reasonably easy to find appropriate nodes - it might however also make more sense that such nodes stop the request at a libp2p level in the multiplexer.\r\n\r\n> I'm unclear on exactly what problems we're trying to work through here\r\n\r\nIt's all in my comment: introducing an error code should be accompanied by the exact conditions under which it's triggered, what the expected behavior on the receiving side is and for which requests it's valid, as part of the spec text. For client-specific or loosely defined errors, there's always the anything-goes `>=128` range.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/845089329/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/845543086",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2414#issuecomment-845543086",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2414",
    "id": 845543086,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0NTU0MzA4Ng==",
    "user": {
      "login": "ajsutton",
      "id": 72675,
      "node_id": "MDQ6VXNlcjcyNjc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/72675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajsutton",
      "html_url": "https://github.com/ajsutton",
      "followers_url": "https://api.github.com/users/ajsutton/followers",
      "following_url": "https://api.github.com/users/ajsutton/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajsutton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajsutton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajsutton/subscriptions",
      "organizations_url": "https://api.github.com/users/ajsutton/orgs",
      "repos_url": "https://api.github.com/users/ajsutton/repos",
      "events_url": "https://api.github.com/users/ajsutton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajsutton/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-20T23:15:50Z",
    "updated_at": "2021-05-20T23:15:50Z",
    "author_association": "CONTRIBUTOR",
    "body": "> this is the tricky part: any range you ask for might be empty in their view of the chain - the byrange request asks for what the other party considers to be the canonical chain - you have to reconcile that with your local information about what the chain is and what others are sending you, regardless of what they send you (error codes, blocks, empty ranges) - any \"the chain is empty\" response is no more authoritative than \"I don't know, I don't have the block range\" in this regard - for example, it doesn't tell you if you should request a different range from the same peer or not (they might have it, or they might not), and it doesn't tell you if you should request the same range from a different peer (it might have blocks or it might not).\r\n\r\nI think this is our fundamental disagreement.  When designing APIs it's really, really useful to have more information than less. Even if you don't trust that result, knowing exactly what's claimed is a big improvement on a vague empty response which could mean no blocks in the range, could mean the blocks aren't available or could be the node being a jerk.\r\n\r\nIt's ok if some clients treat the error response the same as an empty response, just as it's ok that different clients implement different approaches to syncing.  The reason this whole proposal started months ago is because it really would be useful to differentiate between a node claiming there were no blocks in the range and one saying they can't answer that request. If the remote peer explicitly says they don't have the blocks, the requesting peer can disconnect them immediately, knowing that they don't have the blocks required and aren't currently useful.  They don't *have* to disconnect them, there's lots of different things clients might factor into making that decision and it's ok for clients to have different policies on that, just as we have different policies on how to prioritise which peers to connect to so we have coverage of required subnets.\r\n\r\n> For the error code to be useful, one would need to accompany it with a guide as to when to return it exactly, and preferably, how the receiving client should react it - if this is not included, we'll end up in a situation where the error code becomes a client-specific extension that will be difficult to code logic against.\r\n\r\nAgree we should clearly define when to return it.  As I mentioned that will be something close to \"when the node does not have sufficient information to return the first block in the requested range\". \r\n\r\nWe don't actually define what a client should do with a successful response so it seems odd to have a higher bar for error codes. We also don't define how clients act when they get a `InvalidRequest` or `ServerError` response.  It would be fine to say that a client MAY disconnect when receiving this response, you could explicitly say they MAY retry it later but I feel like that's pretty redundant since we don't ever say the same request can't be sent multiple times. We can't define how this response should affect the node's syncing algorithm because we're defining a request/response API, not a syncing algorithm.\r\n\r\nAnd yes, given the structure of the spec we should explicitly say this response is only valid for `BeaconBlocksByRange`.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/845543086/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/846232827",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2414#issuecomment-846232827",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2414",
    "id": 846232827,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0NjIzMjgyNw==",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-21T20:24:08Z",
    "updated_at": "2021-05-21T20:24:08Z",
    "author_association": "MEMBER",
    "body": "PR up at #2430 ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/846232827/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
