{
  "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2100",
  "repository_url": "https://api.github.com/repos/ethereum/consensus-specs",
  "labels_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2100/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2100/comments",
  "events_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2100/events",
  "html_url": "https://github.com/ethereum/consensus-specs/issues/2100",
  "id": 719942352,
  "node_id": "MDU6SXNzdWU3MTk5NDIzNTI=",
  "number": 2100,
  "title": "Prevent validators from being penalized when the chain is not finalizing",
  "user": {
    "login": "3esmit",
    "id": 224810,
    "node_id": "MDQ6VXNlcjIyNDgxMA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/224810?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/3esmit",
    "html_url": "https://github.com/3esmit",
    "followers_url": "https://api.github.com/users/3esmit/followers",
    "following_url": "https://api.github.com/users/3esmit/following{/other_user}",
    "gists_url": "https://api.github.com/users/3esmit/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/3esmit/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/3esmit/subscriptions",
    "organizations_url": "https://api.github.com/users/3esmit/orgs",
    "repos_url": "https://api.github.com/users/3esmit/repos",
    "events_url": "https://api.github.com/users/3esmit/events{/privacy}",
    "received_events_url": "https://api.github.com/users/3esmit/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 6,
  "created_at": "2020-10-13T07:12:10Z",
  "updated_at": "2023-12-08T16:21:48Z",
  "closed_at": "2023-12-08T16:21:47Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "Because Medalla testnet does not have real incentives (besides testing and learning about ETH 2.0), ocasionally the number of Voted does not reach 60%. When this situation happens, some honest nodes start being penalized. This is what happened to my node, which at the time was  always connected to 79 peers, using Nimbus, which is working fine in when blocks are finalizing. \r\n\r\nMy node pubkey is  [a40237ae62e6cbf4f65d82ea90ea7862346da553543d00466b655de5e655a0ca2e8a4fede966762bc12f268266da1f7a](https://medalla.beaconcha.in/validator/a40237ae62e6cbf4f65d82ea90ea7862346da553543d00466b655de5e655a0ca2e8a4fede966762bc12f268266da1f7a)\r\n\r\nThis is my earnings graph (don't mind my double deposit test)\r\n![image](https://user-images.githubusercontent.com/224810/95828584-8a3d3300-0d0b-11eb-9488-2c68aed6c0b9.png)\r\n![image](https://user-images.githubusercontent.com/224810/95828923-f881f580-0d0b-11eb-8440-ae6b6e5a3edb.png)\r\n\r\nHowever, in meanwhile my node was operating correctly as beaconcha.in shows:\r\n![image](https://user-images.githubusercontent.com/224810/95829132-3aab3700-0d0c-11eb-97b2-1d508713eeee.png)\r\n\r\nAnd also shows operating normally in beaconscan:\r\n![image](https://user-images.githubusercontent.com/224810/95829243-60d0d700-0d0c-11eb-9a5e-b626dfa95056.png)\r\n\r\n\r\nThis penalizations seem to align with the chain liveness graph:\r\n![image](https://user-images.githubusercontent.com/224810/95828670-a6d96b00-0d0b-11eb-9192-a413659c7ee4.png)\r\n\r\n\r\nI believe this is bug, so I started a [discussion in ETH 2.0 Discord](https://discord.com/channels/595666850260713488/736377302446768179/765325605298110475), and this were the main points made:\r\n- @nisdas stated that I shouldn't be penalized unless I am voting in the wrong head. If that is the case, how can I configure my validator node to vote in the correct head? Is possible to identify what is the correct head? @nisdas also agreed that \"is a gap that should be fixed\"\r\n- Adrian Sutton (pegasys) noticed that \r\n    > \"There's an important difference between the inclusion difference that Beaconcha.in shows and what is used for paying rewards.  Rewards are paid strictly on how many slots after the attestation slot it was included in a block. There's no allowance for empty slots.  Beaconcha.in does give an allowance for empty slots so reports 0 inclusion distance even when the actual inclusion distance is higher and so rewards are lower. Beaconcha.in's value is useful for determining if your validator is doing the best it can, but it does mean you can have perfect 0s on beaconcha.in and still lose money because attestations weren't included in the next block (because it was not created).\"\r\n\r\n    ok, but that is not the main issue, but that a honest validator shouldn't be penalized, specially in a period which they are really needed. \r\n- As @nisdas said, \r\n    > \"(Beaconcha.in) It shows a validator as stable and running normally when its actually being penalised\"\r\n    \r\n    which is something confusing and strange.\r\n- Adrian Sutton (pegasys) added that \r\n    > \"You are dependent on other nodes not just to create the next block, but also to propagate your individual attestation, include it in an aggregate and propagate that aggregate.\"\r\n\r\n    I understand the issue, and I think that this needs to be solved unless there is a technical limitation for it.\r\n\r\n- @nisdas\r\n    > In a period of non-finality the best outcome is that they are neutral so you arent penalised.\r\n\r\n    Wouldn't this incentive nodes to behave in self interest during this scenario?\r\n\r\n- `jqm`:\r\n    > \"Worth pointing out that effectiveness != reward, so \"differs from the spec\" isn't really accurate.  Attestation effectiveness is a derived value, useful for some purposes as you mentioned above, but not so useful for others (calculating the Ether reward).\"\r\n\r\n- `randomuser` said that \r\n     > \"I don't think that you lose out if you're included in the first block that you could. It doesn't really make sense to lose eth if you're node is running properly. \"\r\n     > \"But I could still see that you should not lose if you got into the next available slot, and then you should break even. The loss would then occur only in the case where you don't get into the next available slot, in which case you wouldn't break even. That would work pretty well, since on average the same proportion of blocks are being produced as attestations, so there wouldn't be to much overflow. The algorithm that they say there could still work. Is that how it goes?\"\r\n\r\nI understand that in a livenet this scenario would be very unlikely, because there is high economic incentives to keep nodes running, however I see that this scenario can become reality in a possible real world events like \"implementation bug\", \"protocol bug\", \"fail of submarine communications cable\", \"draconian crypto laws\", \"worldwide natural disasters\", \"war\", etc, therefore I believe that if is possible to make this scenario more stable, it should be done.\r\n\r\nRelated issue: https://github.com/ethereum/eth2.0-specs/issues/2098",
  "closed_by": {
    "login": "dapplion",
    "id": 35266934,
    "node_id": "MDQ6VXNlcjM1MjY2OTM0",
    "avatar_url": "https://avatars.githubusercontent.com/u/35266934?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/dapplion",
    "html_url": "https://github.com/dapplion",
    "followers_url": "https://api.github.com/users/dapplion/followers",
    "following_url": "https://api.github.com/users/dapplion/following{/other_user}",
    "gists_url": "https://api.github.com/users/dapplion/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/dapplion/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/dapplion/subscriptions",
    "organizations_url": "https://api.github.com/users/dapplion/orgs",
    "repos_url": "https://api.github.com/users/dapplion/repos",
    "events_url": "https://api.github.com/users/dapplion/events{/privacy}",
    "received_events_url": "https://api.github.com/users/dapplion/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2100/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2100/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/707589916",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2100#issuecomment-707589916",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2100",
    "id": 707589916,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwNzU4OTkxNg==",
    "user": {
      "login": "mratsim",
      "id": 22738317,
      "node_id": "MDQ6VXNlcjIyNzM4MzE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/22738317?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mratsim",
      "html_url": "https://github.com/mratsim",
      "followers_url": "https://api.github.com/users/mratsim/followers",
      "following_url": "https://api.github.com/users/mratsim/following{/other_user}",
      "gists_url": "https://api.github.com/users/mratsim/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mratsim/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mratsim/subscriptions",
      "organizations_url": "https://api.github.com/users/mratsim/orgs",
      "repos_url": "https://api.github.com/users/mratsim/repos",
      "events_url": "https://api.github.com/users/mratsim/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mratsim/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-13T08:42:56Z",
    "updated_at": "2020-10-13T08:42:56Z",
    "author_association": "CONTRIBUTOR",
    "body": "This was already fixed in the past, likely for another scenario since it seems to happen again https://github.com/ethereum/eth2.0-specs/pull/1830 https://github.com/ethereum/eth2.0-specs/issues/1370",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/707589916/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/707769497",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2100#issuecomment-707769497",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2100",
    "id": 707769497,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwNzc2OTQ5Nw==",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-13T14:16:30Z",
    "updated_at": "2020-10-13T14:16:30Z",
    "author_association": "MEMBER",
    "body": "This is a known issue due to (very likely) sparse block proposals during an inactivity leak. The amount penalized is very small but serves no game theoretic purpose and is clearly discouraging for users.\r\n\r\nThis is planned to be fixed at Phase 1",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/707769497/reactions",
      "total_count": 4,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 2
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/716092495",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2100#issuecomment-716092495",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2100",
    "id": 716092495,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcxNjA5MjQ5NQ==",
    "user": {
      "login": "pintail-xyz",
      "id": 192824,
      "node_id": "MDQ6VXNlcjE5MjgyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/192824?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pintail-xyz",
      "html_url": "https://github.com/pintail-xyz",
      "followers_url": "https://api.github.com/users/pintail-xyz/followers",
      "following_url": "https://api.github.com/users/pintail-xyz/following{/other_user}",
      "gists_url": "https://api.github.com/users/pintail-xyz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pintail-xyz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pintail-xyz/subscriptions",
      "organizations_url": "https://api.github.com/users/pintail-xyz/orgs",
      "repos_url": "https://api.github.com/users/pintail-xyz/repos",
      "events_url": "https://api.github.com/users/pintail-xyz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pintail-xyz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-25T04:30:50Z",
    "updated_at": "2020-10-25T04:31:11Z",
    "author_association": "NONE",
    "body": "I disagree that the amount being penalised is small. As an example, one of my validators has missed only a single attestation in the last 24 hours, but its balance is down 0.05 ETH over that time. [According to beaconcha.in](https://beaconcha.in/validator/0x879a007e73e1d65b2bc3400aefa130a2f5f02ec3ac7894aea4dbff899ee0d3337f13757e2f6739a3f721371a16984767#overview) almost all attestations were included at an inclusion distance of 0. It feels like my validator has been very reliable in difficult network conditions and yet is being punished harshly.\r\n\r\nWhy wait until phase 1 to fix this? This seems like a significant weakness in the spec to me.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/716092495/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/716105325",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2100#issuecomment-716105325",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2100",
    "id": 716105325,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcxNjEwNTMyNQ==",
    "user": {
      "login": "mcdee",
      "id": 511384,
      "node_id": "MDQ6VXNlcjUxMTM4NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/511384?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mcdee",
      "html_url": "https://github.com/mcdee",
      "followers_url": "https://api.github.com/users/mcdee/followers",
      "following_url": "https://api.github.com/users/mcdee/following{/other_user}",
      "gists_url": "https://api.github.com/users/mcdee/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mcdee/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mcdee/subscriptions",
      "organizations_url": "https://api.github.com/users/mcdee/orgs",
      "repos_url": "https://api.github.com/users/mcdee/repos",
      "events_url": "https://api.github.com/users/mcdee/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mcdee/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-25T07:21:54Z",
    "updated_at": "2020-10-25T07:21:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "As a counterpoint, [another validator](https://beaconcha.in/validator/0) lost less than 0.01 Ether over the same period.\r\n\r\nIt would be nice to fix this, but I don't see it as in any way critical to the launch of phase 0.  Any change could introduce subtleties that make sustained periods of inactivity possible with little or no penalty, and I'd rather they were discussed in detail and prototyped than put in as a \"quick fix\".\r\n\r\nAlso worth pointing out that any loss made during the period of inactivity leak should be made up (and more) pretty quickly once the inactive validators are kicked, as rewards will increase due to fewer active validators.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/716105325/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/716105562",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2100#issuecomment-716105562",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2100",
    "id": 716105562,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcxNjEwNTU2Mg==",
    "user": {
      "login": "pintail-xyz",
      "id": 192824,
      "node_id": "MDQ6VXNlcjE5MjgyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/192824?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pintail-xyz",
      "html_url": "https://github.com/pintail-xyz",
      "followers_url": "https://api.github.com/users/pintail-xyz/followers",
      "following_url": "https://api.github.com/users/pintail-xyz/following{/other_user}",
      "gists_url": "https://api.github.com/users/pintail-xyz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pintail-xyz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pintail-xyz/subscriptions",
      "organizations_url": "https://api.github.com/users/pintail-xyz/orgs",
      "repos_url": "https://api.github.com/users/pintail-xyz/repos",
      "events_url": "https://api.github.com/users/pintail-xyz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pintail-xyz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-25T07:24:41Z",
    "updated_at": "2020-10-25T07:24:41Z",
    "author_association": "NONE",
    "body": "Fair enough. I'm certainly not advocating taking shortcuts to a quick fix. However I think it's worth understanding how severely different validators are being punished and why. Time for some more Medalla data analysis I guess...",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/716105562/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1847473665",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/2100#issuecomment-1847473665",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/2100",
    "id": 1847473665,
    "node_id": "IC_kwDOCOoGbc5uHjYB",
    "user": {
      "login": "dapplion",
      "id": 35266934,
      "node_id": "MDQ6VXNlcjM1MjY2OTM0",
      "avatar_url": "https://avatars.githubusercontent.com/u/35266934?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dapplion",
      "html_url": "https://github.com/dapplion",
      "followers_url": "https://api.github.com/users/dapplion/followers",
      "following_url": "https://api.github.com/users/dapplion/following{/other_user}",
      "gists_url": "https://api.github.com/users/dapplion/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dapplion/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dapplion/subscriptions",
      "organizations_url": "https://api.github.com/users/dapplion/orgs",
      "repos_url": "https://api.github.com/users/dapplion/repos",
      "events_url": "https://api.github.com/users/dapplion/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dapplion/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-12-08T16:21:48Z",
    "updated_at": "2023-12-08T16:21:48Z",
    "author_association": "COLLABORATOR",
    "body": "Fixed in altair's HF accounting reform",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1847473665/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
