{
  "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1349",
  "repository_url": "https://api.github.com/repos/ethereum/consensus-specs",
  "labels_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1349/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1349/comments",
  "events_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1349/events",
  "html_url": "https://github.com/ethereum/consensus-specs/issues/1349",
  "id": 478612029,
  "node_id": "MDU6SXNzdWU0Nzg2MTIwMjk=",
  "number": 1349,
  "title": "Validators are able to censor new validators",
  "user": {
    "login": "daejunpark",
    "id": 5491770,
    "node_id": "MDQ6VXNlcjU0OTE3NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5491770?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/daejunpark",
    "html_url": "https://github.com/daejunpark",
    "followers_url": "https://api.github.com/users/daejunpark/followers",
    "following_url": "https://api.github.com/users/daejunpark/following{/other_user}",
    "gists_url": "https://api.github.com/users/daejunpark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/daejunpark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/daejunpark/subscriptions",
    "organizations_url": "https://api.github.com/users/daejunpark/orgs",
    "repos_url": "https://api.github.com/users/daejunpark/repos",
    "events_url": "https://api.github.com/users/daejunpark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/daejunpark/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 3,
  "created_at": "2019-08-08T18:00:19Z",
  "updated_at": "2019-08-09T02:24:21Z",
  "closed_at": "2019-08-09T02:24:21Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "### Problem\r\n\r\nIn [`process_operations`](https://github.com/ethereum/eth2.0-specs/blob/v0.8.2/specs/core/0_beacon-chain.md#operations), we have the following assertion to prevent validators to censor new validators, but it is not sufficient.\r\n```\r\n# Verify that outstanding deposits are processed up to the maximum number of deposits\r\nassert len(body.deposits) == min(MAX_DEPOSITS, state.eth1_data.deposit_count - state.eth1_deposit_index)\r\n```\r\n\r\nHere is a way to censor new validators by colluding validators.\r\n\r\n1. Suppose the majority of existing validators decide to collude and selectively allow new validators to join.\r\n2. Then, they make the MAX_DEPOSITS (= 16) number of *invalid* deposits to the deposit contract, at the cost of \"only\" 16 Ether. For example, `deposit(0x00..,0x00..,0x00..)` will simply go through and add an invalid deposit item in the Merkle tree.\r\n3. Now, they can simply put the 16 invalid deposits in new blocks, passing the above assertion, and [`process_deposit()`](https://github.com/ethereum/eth2.0-specs/blob/v0.8.2/specs/core/0_beacon-chain.md#deposits) will simply skip all of them as follows:\r\n```\r\nif not bls_verify(pubkey, signing_root(deposit.data), deposit.data.signature, domain):\r\n    return\r\n```\r\n4. In this way, the colluding validators can selectively allow new validators to join, or no new validators at all.\r\n\r\n\r\n### How to fix?\r\n\r\nKeep track of the number of invalid deposits, say `state.eth1_invalid_deposit_index`, whenever `process_deposit()` skip them, e.g.,\r\n```\r\nif not bls_verify(pubkey, signing_root(deposit.data), deposit.data.signature, domain):\r\n    state.eth1_invalid_deposit_index += 1\r\n    return\r\n```\r\nAnd then, consider it in the assertion of `process_operations()`, e.g.,\r\n```\r\nassert len(body.deposits) == min(MAX_DEPOSITS,\r\n    state.eth1_data.deposit_count - state.eth1_deposit_index\r\n                                  - state.eth1_invalid_deposit_index)\r\n```",
  "closed_by": {
    "login": "daejunpark",
    "id": 5491770,
    "node_id": "MDQ6VXNlcjU0OTE3NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5491770?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/daejunpark",
    "html_url": "https://github.com/daejunpark",
    "followers_url": "https://api.github.com/users/daejunpark/followers",
    "following_url": "https://api.github.com/users/daejunpark/following{/other_user}",
    "gists_url": "https://api.github.com/users/daejunpark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/daejunpark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/daejunpark/subscriptions",
    "organizations_url": "https://api.github.com/users/daejunpark/orgs",
    "repos_url": "https://api.github.com/users/daejunpark/repos",
    "events_url": "https://api.github.com/users/daejunpark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/daejunpark/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1349/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1349/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/519630019",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1349#issuecomment-519630019",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1349",
    "id": 519630019,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxOTYzMDAxOQ==",
    "user": {
      "login": "daejunpark",
      "id": 5491770,
      "node_id": "MDQ6VXNlcjU0OTE3NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5491770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/daejunpark",
      "html_url": "https://github.com/daejunpark",
      "followers_url": "https://api.github.com/users/daejunpark/followers",
      "following_url": "https://api.github.com/users/daejunpark/following{/other_user}",
      "gists_url": "https://api.github.com/users/daejunpark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/daejunpark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/daejunpark/subscriptions",
      "organizations_url": "https://api.github.com/users/daejunpark/orgs",
      "repos_url": "https://api.github.com/users/daejunpark/repos",
      "events_url": "https://api.github.com/users/daejunpark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/daejunpark/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-08T18:13:38Z",
    "updated_at": "2019-08-08T18:16:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "A side note:\r\n\r\nEven in the non-colluding case, the existing assertion of `process_operations()` has the usability issue that benign validators have to keep including all the invalid deposits whenever they propose a new block, which could be quite annoying and may even lead to unintended blocking new validators from joining properly.\r\n\r\nBTW, I do not have a good idea how to prevent invalid deposits from being added in the (eth1) tree in the first place, without incorporating `bls_verify` in the deposit contract.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/519630019/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/519703354",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1349#issuecomment-519703354",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1349",
    "id": 519703354,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxOTcwMzM1NA==",
    "user": {
      "login": "JustinDrake",
      "id": 731743,
      "node_id": "MDQ6VXNlcjczMTc0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/731743?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JustinDrake",
      "html_url": "https://github.com/JustinDrake",
      "followers_url": "https://api.github.com/users/JustinDrake/followers",
      "following_url": "https://api.github.com/users/JustinDrake/following{/other_user}",
      "gists_url": "https://api.github.com/users/JustinDrake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JustinDrake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JustinDrake/subscriptions",
      "organizations_url": "https://api.github.com/users/JustinDrake/orgs",
      "repos_url": "https://api.github.com/users/JustinDrake/repos",
      "events_url": "https://api.github.com/users/JustinDrake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JustinDrake/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-08T22:00:48Z",
    "updated_at": "2019-08-08T22:01:54Z",
    "author_association": "MEMBER",
    "body": "> In this way, the colluding validators can selectively allow new validators to join\r\n\r\nHow does this follow from the invalid deposits? All deposits (valid or not) need to pass `assert is_valid_merkle_branch` and modify the state with `state.eth1_deposit_index += 1`.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/519703354/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/519753086",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1349#issuecomment-519753086",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1349",
    "id": 519753086,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxOTc1MzA4Ng==",
    "user": {
      "login": "daejunpark",
      "id": 5491770,
      "node_id": "MDQ6VXNlcjU0OTE3NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5491770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/daejunpark",
      "html_url": "https://github.com/daejunpark",
      "followers_url": "https://api.github.com/users/daejunpark/followers",
      "following_url": "https://api.github.com/users/daejunpark/following{/other_user}",
      "gists_url": "https://api.github.com/users/daejunpark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/daejunpark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/daejunpark/subscriptions",
      "organizations_url": "https://api.github.com/users/daejunpark/orgs",
      "repos_url": "https://api.github.com/users/daejunpark/repos",
      "events_url": "https://api.github.com/users/daejunpark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/daejunpark/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-09T02:24:21Z",
    "updated_at": "2019-08-09T02:24:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "@JustinDrake Sorry I was wrong. I somehow misunderstood that `state .eth1_deposit_index` does not increase when `bls_verify` fails. Sorry for bothering.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/519753086/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
