{
  "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/3390",
  "repository_url": "https://api.github.com/repos/ethereum/consensus-specs",
  "labels_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/3390/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/3390/comments",
  "events_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/3390/events",
  "html_url": "https://github.com/ethereum/consensus-specs/issues/3390",
  "id": 1729463508,
  "node_id": "I_kwDOCOoGbc5nFYTU",
  "number": 3390,
  "title": "Optimistic rule for post-Bellatrix forks",
  "user": {
    "login": "zilm13",
    "id": 6196452,
    "node_id": "MDQ6VXNlcjYxOTY0NTI=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6196452?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/zilm13",
    "html_url": "https://github.com/zilm13",
    "followers_url": "https://api.github.com/users/zilm13/followers",
    "following_url": "https://api.github.com/users/zilm13/following{/other_user}",
    "gists_url": "https://api.github.com/users/zilm13/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/zilm13/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/zilm13/subscriptions",
    "organizations_url": "https://api.github.com/users/zilm13/orgs",
    "repos_url": "https://api.github.com/users/zilm13/repos",
    "events_url": "https://api.github.com/users/zilm13/events{/privacy}",
    "received_events_url": "https://api.github.com/users/zilm13/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 3,
  "created_at": "2023-05-28T13:15:23Z",
  "updated_at": "2023-12-26T19:43:47Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "Currently we have this check in https://github.com/ethereum/consensus-specs/blob/dev/sync/optimistic.md#helpers\r\n```python\r\ndef is_execution_block(block: BeaconBlock) -> bool:\r\n    return block.body.execution_payload != ExecutionPayload()\r\n```\r\nIt will fail for first slot (check on parent, which is genesis) in networks starting from post-Bellatrix forks, like Capella or Deneb. I think this rule should be updated to be true in any post-Bellatrix fork without any checks.",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/3390/reactions",
    "total_count": 1,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 1
  },
  "timeline_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/3390/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1568064610",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/3390#issuecomment-1568064610",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/3390",
    "id": 1568064610,
    "node_id": "IC_kwDOCOoGbc5ddsRi",
    "user": {
      "login": "hwwhww",
      "id": 9263930,
      "node_id": "MDQ6VXNlcjkyNjM5MzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9263930?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hwwhww",
      "html_url": "https://github.com/hwwhww",
      "followers_url": "https://api.github.com/users/hwwhww/followers",
      "following_url": "https://api.github.com/users/hwwhww/following{/other_user}",
      "gists_url": "https://api.github.com/users/hwwhww/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hwwhww/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hwwhww/subscriptions",
      "organizations_url": "https://api.github.com/users/hwwhww/orgs",
      "repos_url": "https://api.github.com/users/hwwhww/repos",
      "events_url": "https://api.github.com/users/hwwhww/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hwwhww/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-30T09:07:46Z",
    "updated_at": "2023-05-30T09:07:46Z",
    "author_association": "MEMBER",
    "body": "To clarify the fork difference in the presentation:\r\n1. A simple solution is to move `sync/optimistic.md` to `specs/bellatrix` and then add `specs/capella/optimistic.md`.\r\n2. An alternative solution is just to add a comment about it. Given that optimistic sync is not part of the executable pyspec so it's okay.\r\n\r\nI prefer (1) here because it's more future-proof.\r\n\r\n/cc @paulhauner What do you think?\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1568064610/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1568239195",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/3390#issuecomment-1568239195",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/3390",
    "id": 1568239195,
    "node_id": "IC_kwDOCOoGbc5deW5b",
    "user": {
      "login": "mkalinin",
      "id": 1892772,
      "node_id": "MDQ6VXNlcjE4OTI3NzI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1892772?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mkalinin",
      "html_url": "https://github.com/mkalinin",
      "followers_url": "https://api.github.com/users/mkalinin/followers",
      "following_url": "https://api.github.com/users/mkalinin/following{/other_user}",
      "gists_url": "https://api.github.com/users/mkalinin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mkalinin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mkalinin/subscriptions",
      "organizations_url": "https://api.github.com/users/mkalinin/orgs",
      "repos_url": "https://api.github.com/users/mkalinin/repos",
      "events_url": "https://api.github.com/users/mkalinin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mkalinin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-30T11:08:24Z",
    "updated_at": "2023-05-30T11:08:24Z",
    "author_association": "MEMBER",
    "body": "Although, the execution is always enabled for forks post-Bellatrix, and I can understand why we'd want to change the spec, i am curious when this situation occurs on practice? If EL returns `SYNCING` in response to the first block which is a child of a genesis block it must be something weird in EL clients setup or an edge case. There can be an edge case when genesis block has several children. In this case some ELs can response `ACCEPTED` when they receive non-canonical child of a genesis block and if CL switches to such a block after that it should apply it optimistically and a node can get stuck at this point if it's not allowed to switch to an optimistic mode.\r\n\r\nAlternative fix is to return `True` when the parent is genesis *and* current block has execution payload, i.e.\r\n```python\r\nif block.slot == GENESIS_SLOT + 1 and is_execution_block(block):\r\n    return True\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1568239195/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1568368768",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/3390#issuecomment-1568368768",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/3390",
    "id": 1568368768,
    "node_id": "IC_kwDOCOoGbc5de2iA",
    "user": {
      "login": "zilm13",
      "id": 6196452,
      "node_id": "MDQ6VXNlcjYxOTY0NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6196452?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zilm13",
      "html_url": "https://github.com/zilm13",
      "followers_url": "https://api.github.com/users/zilm13/followers",
      "following_url": "https://api.github.com/users/zilm13/following{/other_user}",
      "gists_url": "https://api.github.com/users/zilm13/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zilm13/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zilm13/subscriptions",
      "organizations_url": "https://api.github.com/users/zilm13/orgs",
      "repos_url": "https://api.github.com/users/zilm13/repos",
      "events_url": "https://api.github.com/users/zilm13/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zilm13/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-30T12:43:02Z",
    "updated_at": "2023-05-30T12:43:02Z",
    "author_association": "CONTRIBUTOR",
    "body": "Though I like more first solution, it looks cleaner, what will happen if we have Bellatrix/Paris genesis start? It's a similar case probably and only @mkalinin's fix will pass.\r\nI'm pretty unsure where it could happen outside the tests but looking at the spec like on a set of the formal rules, I think it's better to clarify this.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/1568368768/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
