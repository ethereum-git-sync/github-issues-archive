{
  "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1304",
  "repository_url": "https://api.github.com/repos/ethereum/consensus-specs",
  "labels_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1304/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1304/comments",
  "events_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1304/events",
  "html_url": "https://github.com/ethereum/consensus-specs/issues/1304",
  "id": 470164498,
  "node_id": "MDU6SXNzdWU0NzAxNjQ0OTg=",
  "number": 1304,
  "title": "Options for crosslink data",
  "user": {
    "login": "vbuterin",
    "id": 2230894,
    "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vbuterin",
    "html_url": "https://github.com/vbuterin",
    "followers_url": "https://api.github.com/users/vbuterin/followers",
    "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
    "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
    "organizations_url": "https://api.github.com/users/vbuterin/orgs",
    "repos_url": "https://api.github.com/users/vbuterin/repos",
    "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vbuterin/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1170173759,
      "node_id": "MDU6TGFiZWwxMTcwMTczNzU5",
      "url": "https://api.github.com/repos/ethereum/consensus-specs/labels/phase1",
      "name": "phase1",
      "color": "F7C242",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 6,
  "created_at": "2019-07-19T06:42:35Z",
  "updated_at": "2019-07-29T20:44:36Z",
  "closed_at": "2019-07-29T20:44:36Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "### Problem statement\r\n\r\nPer epoch we have 128 shard block headers and 128 block bodies, where each block header is constant size (currently ~400 bytes, can be shrunk to ~224 with some effort), we need to verify availability of these. Our main tools for _scalable_ data availability verification are (i) proof of custody and (ii) data availability. Both depend on a \"flat\" (ie. serialized) data structure as input; this conflicts with the aesthetic goal of using `hash_tree_root` where possible.\r\n\r\n### Status quo\r\n\r\nDefine `zpad(x, length) = x + b'\\x00' * max(0, length - x)`. For every block, define `flatten(block) = zpad(serialize(block.header), 65536) + zpad(block.body, 65536)`. The crosslink data structure is just `b''.join([flatten(block) for block in blocks])`.\r\n\r\nPros: simple\r\nCons: a lot of \"wasted space\" in the header and body, leading to ~7-8x average inefficiency in data availability proof generation and erasure coded chunk storage.\r\n\r\n### Pull #1278 \r\n\r\nDefine `flatten(block) = serialize(block.header) + block.body`. Let `blobs = [flatten(block) for block in blocks]`. The crosslink data structure is `b''.join([int_to_bytes8(8 + 8 * len(blobs) sum([len(d) for d in blobs[:i]])) for i in range(1, len(blobs)+1)] + blobs)`. That is, we start with a list of 8-byte entries denoting the positions of each tightly packed blob, followed by all the blobs.\r\n\r\nPros: no wasted space. **Another pro of the \"no wasted space, variable position\" approaches is that they make it easier to upgrade to increase block size in the future.**\r\nCons: much more complex, especially to access specific headers or use fraud proofs\r\n\r\n### Offsets outside crosslink data\r\n\r\nThe crosslink data structure is just `b''.join([serialize(block.header) + block.body for block in blocks])`. The crosslink _object_ also contains the list of offsets (which can be compressed to 1 byte per block by requiring each block to be a multiple of 256).\r\n\r\nPros: simpler than the above, though not yet extremely simple\r\nCons: requires extra data field that must be put into a crosslink object; size of a crosslink object will increase by ~50% in the normal case, a few times in the worst case. Also, the crosslink data root stored in the state would need to be replaced by a `hash(Container(data, offsets))` structure.\r\n\r\n### Headers outside crosslink\r\n\r\nWe can shrink the header to ~224 bytes, by (i) merging proposer and attester signatures, (ii) taking care to move things into the shard state, (iii) capping per-block committee size to 128. We can then just require everyone to separately download the headers to check availability. We also add to the header a field `total_bytes`, which measures the _total_ historical length of all headers in that shard; this can be used to calculate indexes into crosslink data for fraud proof purposes.\r\n\r\nPros: simpler than the above\r\nCons: requires extra data that must be verified to check availability, removes the clean \"download the crosslink and you have everything\" property, The size of this data is ~224 * 128 = 28k per epoch, so still less than the expected size of a data availability proof. Also, the crosslink data root stored in the state would need to be replaced by a `hash(Container(data, offsets))` structure.\r\n\r\n### Headers inside crosslink but separate\r\n\r\nThe crosslink data structure is `b''.join([serialize(header) for header in headers]) + b''.join([serialize(body) for body in bodies])`\r\n\r\nPros: arguably simpler than header+body+header+body serialization; with the right data fiddling, header serialization can be made equivalent to SSZ tree hashing. Also ensures that everything is covered by the proof of custody and the data availability proofs.\r\nCons: not quite as simple as headers outside crosslink or offsets outside crosslink.\r\n\r\n### Blocks ain't got no headers\r\n\r\nA valid block is just a `Bytes` object, where we require the first 256 bytes to contain the \"header\" fields, so we can make the crosslink simply be the concatenation of these bodies. We can require offsets to be stored in the crosslink object.\r\n\r\nPros: simpler in some ways\r\nCons: no notion of headers adds complexity in some ways. Also, the crosslink data root stored in the state would need to be replaced by a `hash(Container(data, offsets))` structure.\r\n\r\n## Two separate data structures\r\n\r\nAnother option (which can be used together with the above) is for the crosslink object to store multiple roots: (i) data root, (ii) most recent header, (iii) offsets list if needed. We then use fraud proofs to ensure that these roots are compatible, and use the crosslink data, which is formatted in a more \"ugly\" way for serialization reasons, for proof of custody and data availability but store the most recent header in the crosslink records in the state, and use the most recent header as an entry point to access that shard's state and history.",
  "closed_by": {
    "login": "vbuterin",
    "id": 2230894,
    "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vbuterin",
    "html_url": "https://github.com/vbuterin",
    "followers_url": "https://api.github.com/users/vbuterin/followers",
    "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
    "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
    "organizations_url": "https://api.github.com/users/vbuterin/orgs",
    "repos_url": "https://api.github.com/users/vbuterin/repos",
    "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vbuterin/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1304/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1304/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/513386435",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1304#issuecomment-513386435",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1304",
    "id": 513386435,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxMzM4NjQzNQ==",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-07-19T21:38:14Z",
    "updated_at": "2019-07-19T21:40:31Z",
    "author_association": "MEMBER",
    "body": "My current favorite combo is either (1278 or \"headers inside crosslink but separate\") + bringing in most recent header to crosslink. Even if we don't have fraud proofs, you could have a merkle proof that the header exists within the crosslink data root at the appropriate offset. What is storage requirement for a fraud proof?\r\n\r\nThis approach is super nice because we regain the ability to have ssz hash tree root proofs all the way down through the crosslink while still having the advantages of a flattened crosslink data. It is also nice because it is a minimally invasive change to the beacon chain (at either phase 0 or 1).\r\n\r\n> Headers inside crosslink but separate\r\n\r\nThis approach is appealing especially if headers are of fixed size (say 256 bytes) and include the `total_bytes` field. Can use this to calculate the offsets of the subsequent bodies in the data. If I understand this correctly, currently leaning toward this approach.\r\n\r\n-------------\r\n\r\n>  We can then just require everyone to separately download the headers to check availability.\r\n\r\nwhat do you mean here -- no crypto-economic claim can be made on this data if not in the crosslink construct? Is this just a note that fully validating nodes should filter out crosslinks with unavailable associated header data?\r\n\r\n\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/513386435/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/513461513",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1304#issuecomment-513461513",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1304",
    "id": 513461513,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxMzQ2MTUxMw==",
    "user": {
      "login": "vbuterin",
      "id": 2230894,
      "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vbuterin",
      "html_url": "https://github.com/vbuterin",
      "followers_url": "https://api.github.com/users/vbuterin/followers",
      "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
      "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
      "organizations_url": "https://api.github.com/users/vbuterin/orgs",
      "repos_url": "https://api.github.com/users/vbuterin/repos",
      "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vbuterin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-07-20T11:57:42Z",
    "updated_at": "2019-07-20T11:57:42Z",
    "author_association": "MEMBER",
    "body": "> This approach is appealing especially if headers are of fixed size (say 256 bytes) and include the total_bytes field. Can use this to calculate the offsets of the subsequent bodies in the data\r\n\r\nYep! So the header doubles as the position list, reducing complexity.\r\n\r\n> what do you mean here -- no crypto-economic claim can be made on this data if not in the crosslink construct? Is this just a note that fully validating nodes should filter out crosslinks with unavailable associated header data?\r\n\r\nBasically yes.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/513461513/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/513469697",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1304#issuecomment-513469697",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1304",
    "id": 513469697,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxMzQ2OTY5Nw==",
    "user": {
      "login": "vbuterin",
      "id": 2230894,
      "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vbuterin",
      "html_url": "https://github.com/vbuterin",
      "followers_url": "https://api.github.com/users/vbuterin/followers",
      "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
      "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
      "organizations_url": "https://api.github.com/users/vbuterin/orgs",
      "repos_url": "https://api.github.com/users/vbuterin/repos",
      "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vbuterin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-07-20T13:56:26Z",
    "updated_at": "2019-07-20T13:56:26Z",
    "author_association": "MEMBER",
    "body": "> My current favorite combo is either (1278 or \"headers inside crosslink but separate\") \r\n\r\nI decided I like the latter (headers separate) over the former. The reason is that if the headers are all at the beginning, then headers have fixed generalized indices, and we can even access block data with fixed generalized indices by going through the data root in the header.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/513469697/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/513789352",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1304#issuecomment-513789352",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1304",
    "id": 513789352,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxMzc4OTM1Mg==",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-07-22T13:23:50Z",
    "updated_at": "2019-07-22T13:23:50Z",
    "author_association": "MEMBER",
    "body": "> we can even access block data with fixed generalized indices by going through the data root in the header.\r\n\r\n:) In this case, don't need to necessarily add the explicit latest block/state root into the crosslink as an easy accessor, right?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/513789352/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/513848076",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1304#issuecomment-513848076",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1304",
    "id": 513848076,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxMzg0ODA3Ng==",
    "user": {
      "login": "vbuterin",
      "id": 2230894,
      "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vbuterin",
      "html_url": "https://github.com/vbuterin",
      "followers_url": "https://api.github.com/users/vbuterin/followers",
      "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
      "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
      "organizations_url": "https://api.github.com/users/vbuterin/orgs",
      "repos_url": "https://api.github.com/users/vbuterin/repos",
      "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vbuterin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-07-22T15:58:38Z",
    "updated_at": "2019-07-22T15:58:38Z",
    "author_association": "MEMBER",
    "body": "Exactly!",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/513848076/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/513947645",
    "html_url": "https://github.com/ethereum/consensus-specs/issues/1304#issuecomment-513947645",
    "issue_url": "https://api.github.com/repos/ethereum/consensus-specs/issues/1304",
    "id": 513947645,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxMzk0NzY0NQ==",
    "user": {
      "login": "dankrad",
      "id": 6130607,
      "node_id": "MDQ6VXNlcjYxMzA2MDc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6130607?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dankrad",
      "html_url": "https://github.com/dankrad",
      "followers_url": "https://api.github.com/users/dankrad/followers",
      "following_url": "https://api.github.com/users/dankrad/following{/other_user}",
      "gists_url": "https://api.github.com/users/dankrad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dankrad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dankrad/subscriptions",
      "organizations_url": "https://api.github.com/users/dankrad/orgs",
      "repos_url": "https://api.github.com/users/dankrad/repos",
      "events_url": "https://api.github.com/users/dankrad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dankrad/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-07-22T20:47:06Z",
    "updated_at": "2019-07-22T20:47:06Z",
    "author_association": "MEMBER",
    "body": "> Cons: much more complex, especially to access specific headers or use fraud proofs\r\n\r\nI would like to understand why this adds so much complexity in your opinion? It seems a rather slight increase to me. It's just one offset essentially.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/consensus-specs/issues/comments/513947645/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
