{
  "url": "https://api.github.com/repos/ethereum/py-evm/issues/542",
  "repository_url": "https://api.github.com/repos/ethereum/py-evm",
  "labels_url": "https://api.github.com/repos/ethereum/py-evm/issues/542/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/py-evm/issues/542/comments",
  "events_url": "https://api.github.com/repos/ethereum/py-evm/issues/542/events",
  "html_url": "https://github.com/ethereum/py-evm/issues/542",
  "id": 313002372,
  "node_id": "MDU6SXNzdWUzMTMwMDIzNzI=",
  "number": 542,
  "title": "Performance Optimizations",
  "user": {
    "login": "pipermerriam",
    "id": 824194,
    "node_id": "MDQ6VXNlcjgyNDE5NA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/pipermerriam",
    "html_url": "https://github.com/pipermerriam",
    "followers_url": "https://api.github.com/users/pipermerriam/followers",
    "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
    "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
    "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
    "repos_url": "https://api.github.com/users/pipermerriam/repos",
    "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
    "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 14,
  "created_at": "2018-04-10T16:38:23Z",
  "updated_at": "2018-12-21T18:37:22Z",
  "closed_at": "2018-12-21T18:37:22Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "### What is wrong?\r\n\r\nThere is rudamentary full sync code in place and with that, we're finding performance issues.\r\n\r\n- https://drive.google.com/open?id=1OwLcvS-ONGmgucL4Tccf5nqP2r_QCglv\r\n- [github-mirror](https://github.com/ethereum/py-evm/files/1895559/block-import-stats.txt)\r\n\r\n\r\n\r\nThe link above is the `cProfile` output which can be loaded using the [`pstats`](https://docs.python.org/3.5/library/profile.html) standard library module to see where time is spent.\r\n\r\n### Known \"low hanging fruit\"\r\n\r\nThe following things are where we're seeing the *most* time spent which can likely be optimized.\r\n\r\n- Remove support for python 2 from `pyrlp`\r\n- Further `pyrlp` optimizations\r\n- Caching of the `VMState.prev_hashes` generation.\r\n\r\n### Ways to make things faster\r\n\r\n[Cython](http://cython.org/) looks to be a very promising way for us to do certain optimizations.  We should spend a little time doing *discovery* to see how this well this works and what kind of performance gains we can get.",
  "closed_by": {
    "login": "pipermerriam",
    "id": 824194,
    "node_id": "MDQ6VXNlcjgyNDE5NA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/pipermerriam",
    "html_url": "https://github.com/pipermerriam",
    "followers_url": "https://api.github.com/users/pipermerriam/followers",
    "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
    "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
    "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
    "repos_url": "https://api.github.com/users/pipermerriam/repos",
    "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
    "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/542/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/py-evm/issues/542/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/380444649",
    "html_url": "https://github.com/ethereum/py-evm/issues/542#issuecomment-380444649",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/542",
    "id": 380444649,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MDQ0NDY0OQ==",
    "user": {
      "login": "gsalgado",
      "id": 412274,
      "node_id": "MDQ6VXNlcjQxMjI3NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/412274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gsalgado",
      "html_url": "https://github.com/gsalgado",
      "followers_url": "https://api.github.com/users/gsalgado/followers",
      "following_url": "https://api.github.com/users/gsalgado/following{/other_user}",
      "gists_url": "https://api.github.com/users/gsalgado/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gsalgado/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gsalgado/subscriptions",
      "organizations_url": "https://api.github.com/users/gsalgado/orgs",
      "repos_url": "https://api.github.com/users/gsalgado/repos",
      "events_url": "https://api.github.com/users/gsalgado/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gsalgado/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-11T13:06:06Z",
    "updated_at": "2018-04-11T13:06:06Z",
    "author_association": "MEMBER",
    "body": "Another thing I've just noticed is that after applying a transaction we seem to throw away objects representing the state and then re-read (and decode) them from the DB in order to apply the next block's tx. One example is the block's receipts: ISTM that for every tx we append the generated receipts to `BaseState.receipts`, but then for the next transaction we re-read all those receipts from the DB. Would it be possible to preserve those `Receipt` instances (and maybe other things?) across transaction boundaries?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/380444649/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/380472299",
    "html_url": "https://github.com/ethereum/py-evm/issues/542#issuecomment-380472299",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/542",
    "id": 380472299,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MDQ3MjI5OQ==",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-11T14:28:11Z",
    "updated_at": "2018-04-11T14:28:11Z",
    "author_association": "MEMBER",
    "body": "> Would it be possible to preserve those Receipt instances (and maybe other things?) across transaction boundaries?\r\n\r\nYes, though I'd like to try and accomplish this with caching as I like the way we currently have things with minimal statefullness.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/380472299/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/381207879",
    "html_url": "https://github.com/ethereum/py-evm/issues/542#issuecomment-381207879",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/542",
    "id": 381207879,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MTIwNzg3OQ==",
    "user": {
      "login": "gsalgado",
      "id": 412274,
      "node_id": "MDQ6VXNlcjQxMjI3NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/412274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gsalgado",
      "html_url": "https://github.com/gsalgado",
      "followers_url": "https://api.github.com/users/gsalgado/followers",
      "following_url": "https://api.github.com/users/gsalgado/following{/other_user}",
      "gists_url": "https://api.github.com/users/gsalgado/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gsalgado/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gsalgado/subscriptions",
      "organizations_url": "https://api.github.com/users/gsalgado/orgs",
      "repos_url": "https://api.github.com/users/gsalgado/repos",
      "events_url": "https://api.github.com/users/gsalgado/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gsalgado/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-13T17:34:35Z",
    "updated_at": "2018-04-13T17:34:53Z",
    "author_association": "MEMBER",
    "body": "So, with all the changes we made to py-evm/py-rlp/py-trie things got significantly better, but `JournalDB` is still the biggest offender and makes block importing just plain unfeasible (because it does an extra `LevelDB.get()` every time we update/delete a key) on a fully-synced ropsten DB. Here's a [new stats file](https://github.com/ethereum/py-evm/files/1908308/block-import-stats.txt) that aggregates the profiling stats of only `Chain.import_block()` for 8 consecutive blocks (unlike the previous one, which was profiling the networking code as well).\r\n\r\nGiven the above, I've been thinking about ways to fix that and I believe we might be able to use [LevelDB snapshots](http://plyvel.readthedocs.io/en/latest/api.html#Snapshot) in our `JournalDB` to avoid the extra `LevelDB.get()` on every key update/delete. We'd change `JournalDB` to add only the keys to the journal, and then on `.revert()` we read their values from the snapshot and set those values to the actual DB. That way there's no overhead on DB operations unless we have to revert to a snapshot.\r\n\r\nCan you guys see foresee any issues with that approach? Do you think it's worth pursuing?\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/381207879/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/381213575",
    "html_url": "https://github.com/ethereum/py-evm/issues/542#issuecomment-381213575",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/542",
    "id": 381213575,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MTIxMzU3NQ==",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-13T17:53:11Z",
    "updated_at": "2018-04-13T17:53:11Z",
    "author_association": "MEMBER",
    "body": "@gsalgado my only *worry* is related to exposing underlying database architecture to higher level APIs since currently, we assume our database is a *dumb* key/value store.\r\n\r\nIn general though, I have no opposition to this.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/381213575/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/381214998",
    "html_url": "https://github.com/ethereum/py-evm/issues/542#issuecomment-381214998",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/542",
    "id": 381214998,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MTIxNDk5OA==",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-13T17:58:13Z",
    "updated_at": "2018-04-13T17:58:13Z",
    "author_association": "MEMBER",
    "body": "Posted this in gitter.  Leaving it here too:\r\n\r\nI'm wondering if we could accomplish a similar journal mechanism using a combination of the [`BatchDB`](https://github.com/ethereum/py-evm/issues/160) concept, and just rolling back the `state_root` on reversions instead of tracking all the actual database changes.\r\n\r\n- set a checkpoint in the batch db, take note of the `state_root`\r\n- revert means throwing away the batched (but uncommitted) changes going back to the checkpoint.\r\n- commit means committing the batch.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/381214998/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/381613677",
    "html_url": "https://github.com/ethereum/py-evm/issues/542#issuecomment-381613677",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/542",
    "id": 381613677,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MTYxMzY3Nw==",
    "user": {
      "login": "gsalgado",
      "id": 412274,
      "node_id": "MDQ6VXNlcjQxMjI3NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/412274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gsalgado",
      "html_url": "https://github.com/gsalgado",
      "followers_url": "https://api.github.com/users/gsalgado/followers",
      "following_url": "https://api.github.com/users/gsalgado/following{/other_user}",
      "gists_url": "https://api.github.com/users/gsalgado/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gsalgado/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gsalgado/subscriptions",
      "organizations_url": "https://api.github.com/users/gsalgado/orgs",
      "repos_url": "https://api.github.com/users/gsalgado/repos",
      "events_url": "https://api.github.com/users/gsalgado/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gsalgado/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-16T14:13:31Z",
    "updated_at": "2018-04-16T14:13:31Z",
    "author_association": "MEMBER",
    "body": "> my only worry is related to exposing underlying database architecture to higher level APIs since currently, we assume our database is a dumb key/value store.\r\n\r\nWell, it would all still be kept confined within `JournalDB` so not really exposed anywhere, right? And we could have multiple `JournalDB` implementations, one for snapshot-able backends and another for dumb key/value stores.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/381613677/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/381671621",
    "html_url": "https://github.com/ethereum/py-evm/issues/542#issuecomment-381671621",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/542",
    "id": 381671621,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MTY3MTYyMQ==",
    "user": {
      "login": "gsalgado",
      "id": 412274,
      "node_id": "MDQ6VXNlcjQxMjI3NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/412274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gsalgado",
      "html_url": "https://github.com/gsalgado",
      "followers_url": "https://api.github.com/users/gsalgado/followers",
      "following_url": "https://api.github.com/users/gsalgado/following{/other_user}",
      "gists_url": "https://api.github.com/users/gsalgado/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gsalgado/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gsalgado/subscriptions",
      "organizations_url": "https://api.github.com/users/gsalgado/orgs",
      "repos_url": "https://api.github.com/users/gsalgado/repos",
      "events_url": "https://api.github.com/users/gsalgado/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gsalgado/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-16T16:44:43Z",
    "updated_at": "2018-04-16T16:44:43Z",
    "author_association": "MEMBER",
    "body": "So, I've implemented our [JournalDB using LevelDB snapshots](https://github.com/gsalgado/py-evm/commit/badbe15121189b871c2422a003c13f5121b8081a) but for **some blocks** we seem to be doing a lot of `JournalDB.revert()`s, so although we no longer make a `LevelDB.get()` call every time we set/delete a key, when we do a `JournalDB.revert()` we make tons of `Snapshot.get()` calls so there's no performance gains when importing **those blocks**.\r\n\r\nUsing BatchDB as suggested by @pipermerriam may yield better performance improvements as, IIUC, in that case a revert is pretty much free",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/381671621/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/382508365",
    "html_url": "https://github.com/ethereum/py-evm/issues/542#issuecomment-382508365",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/542",
    "id": 382508365,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MjUwODM2NQ==",
    "user": {
      "login": "gsalgado",
      "id": 412274,
      "node_id": "MDQ6VXNlcjQxMjI3NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/412274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gsalgado",
      "html_url": "https://github.com/gsalgado",
      "followers_url": "https://api.github.com/users/gsalgado/followers",
      "following_url": "https://api.github.com/users/gsalgado/following{/other_user}",
      "gists_url": "https://api.github.com/users/gsalgado/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gsalgado/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gsalgado/subscriptions",
      "organizations_url": "https://api.github.com/users/gsalgado/orgs",
      "repos_url": "https://api.github.com/users/gsalgado/repos",
      "events_url": "https://api.github.com/users/gsalgado/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gsalgado/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-18T19:52:06Z",
    "updated_at": "2018-04-18T19:52:06Z",
    "author_association": "MEMBER",
    "body": "Other changes to enhance performance: #565 #573, #569",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/382508365/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/382573175",
    "html_url": "https://github.com/ethereum/py-evm/issues/542#issuecomment-382573175",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/542",
    "id": 382573175,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MjU3MzE3NQ==",
    "user": {
      "login": "carver",
      "id": 205327,
      "node_id": "MDQ6VXNlcjIwNTMyNw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/205327?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/carver",
      "html_url": "https://github.com/carver",
      "followers_url": "https://api.github.com/users/carver/followers",
      "following_url": "https://api.github.com/users/carver/following{/other_user}",
      "gists_url": "https://api.github.com/users/carver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/carver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/carver/subscriptions",
      "organizations_url": "https://api.github.com/users/carver/orgs",
      "repos_url": "https://api.github.com/users/carver/repos",
      "events_url": "https://api.github.com/users/carver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/carver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-19T00:44:12Z",
    "updated_at": "2018-04-19T00:44:12Z",
    "author_association": "MEMBER",
    "body": "According to [these benchmarks](http://www.lmdb.tech/bench/microbench/benchmark.html), we can probably get some marginal improvements from bumping up from the default cache size and using [batch writes](http://plyvel.readthedocs.io/en/latest/api.html#write-batch).\r\n\r\nBatch writes in particular could speed up write operations by 35% from 164k ops/s to 221k ops/s.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/382573175/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/382852872",
    "html_url": "https://github.com/ethereum/py-evm/issues/542#issuecomment-382852872",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/542",
    "id": 382852872,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4Mjg1Mjg3Mg==",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-19T19:25:32Z",
    "updated_at": "2018-04-19T19:25:32Z",
    "author_association": "MEMBER",
    "body": "@carver that suggests a new underlying base db API for submitting batch writes to the database.  Default implementation can just be to iterate over them and do singular writes, but on our leveldb backends we can leverage the batching functionality (as well as with our journal db cc @cburgdorf )",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/382852872/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/382853665",
    "html_url": "https://github.com/ethereum/py-evm/issues/542#issuecomment-382853665",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/542",
    "id": 382853665,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4Mjg1MzY2NQ==",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-19T19:28:34Z",
    "updated_at": "2018-04-19T19:28:34Z",
    "author_association": "MEMBER",
    "body": "Also, that suggests that my thoughts on using sqlite could have a noticeable hit on performance.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/382853665/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/382869972",
    "html_url": "https://github.com/ethereum/py-evm/issues/542#issuecomment-382869972",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/542",
    "id": 382869972,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4Mjg2OTk3Mg==",
    "user": {
      "login": "carver",
      "id": 205327,
      "node_id": "MDQ6VXNlcjIwNTMyNw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/205327?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/carver",
      "html_url": "https://github.com/carver",
      "followers_url": "https://api.github.com/users/carver/followers",
      "following_url": "https://api.github.com/users/carver/following{/other_user}",
      "gists_url": "https://api.github.com/users/carver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/carver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/carver/subscriptions",
      "organizations_url": "https://api.github.com/users/carver/orgs",
      "repos_url": "https://api.github.com/users/carver/repos",
      "events_url": "https://api.github.com/users/carver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/carver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-19T20:26:56Z",
    "updated_at": "2018-04-19T20:26:56Z",
    "author_association": "MEMBER",
    "body": "> that suggests a new underlying base db API for submitting batch writes to the database ... as well as with our journal db\r\n\r\nYeah, I think we can keep the same `db.set()` api on the in-memory DB, and then do a single batch-write at `JournalDB` commit time when exiting the context.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/382869972/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/382871377",
    "html_url": "https://github.com/ethereum/py-evm/issues/542#issuecomment-382871377",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/542",
    "id": 382871377,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4Mjg3MTM3Nw==",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-19T20:31:58Z",
    "updated_at": "2018-04-19T20:31:58Z",
    "author_association": "MEMBER",
    "body": "We may be talking about the same thing.\r\n\r\nhttps://github.com/ethereum/py-evm/blob/master/evm/db/backends/base.py\r\n\r\nI think this needs a new API:  `BaseDB.batch_set(...)`\r\n\r\n`MemoryDB` would implement this as a loop calling down to individual `set` calls.  The LevelDB backend would use the batch APIs from plyvel.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/382871377/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/384994244",
    "html_url": "https://github.com/ethereum/py-evm/issues/542#issuecomment-384994244",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/542",
    "id": 384994244,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NDk5NDI0NA==",
    "user": {
      "login": "gsalgado",
      "id": 412274,
      "node_id": "MDQ6VXNlcjQxMjI3NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/412274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gsalgado",
      "html_url": "https://github.com/gsalgado",
      "followers_url": "https://api.github.com/users/gsalgado/followers",
      "following_url": "https://api.github.com/users/gsalgado/following{/other_user}",
      "gists_url": "https://api.github.com/users/gsalgado/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gsalgado/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gsalgado/subscriptions",
      "organizations_url": "https://api.github.com/users/gsalgado/orgs",
      "repos_url": "https://api.github.com/users/gsalgado/repos",
      "events_url": "https://api.github.com/users/gsalgado/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gsalgado/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-27T14:52:12Z",
    "updated_at": "2018-04-27T14:52:37Z",
    "author_association": "MEMBER",
    "body": "Fresh cProfile stats, now with all performance improvements and a much smaller DB (thanks to #600): [block-import-stats.txt](https://github.com/ethereum/py-evm/files/1955545/block-import-stats.txt)\r\n\r\nTL;DR: trie seems to be our bottleneck now, together with some `ChainDB` methods, but some of the latter can probably be cached\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/384994244/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
