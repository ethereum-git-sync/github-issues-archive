{
  "url": "https://api.github.com/repos/ethereum/py-evm/issues/281",
  "repository_url": "https://api.github.com/repos/ethereum/py-evm",
  "labels_url": "https://api.github.com/repos/ethereum/py-evm/issues/281/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/py-evm/issues/281/comments",
  "events_url": "https://api.github.com/repos/ethereum/py-evm/issues/281/events",
  "html_url": "https://github.com/ethereum/py-evm/issues/281",
  "id": 289346182,
  "node_id": "MDU6SXNzdWUyODkzNDYxODI=",
  "number": 281,
  "title": "Missing `account_exists` implementation prevents execution of sharding transactions",
  "user": {
    "login": "jannikluhn",
    "id": 29854669,
    "node_id": "MDQ6VXNlcjI5ODU0NjY5",
    "avatar_url": "https://avatars.githubusercontent.com/u/29854669?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jannikluhn",
    "html_url": "https://github.com/jannikluhn",
    "followers_url": "https://api.github.com/users/jannikluhn/followers",
    "following_url": "https://api.github.com/users/jannikluhn/following{/other_user}",
    "gists_url": "https://api.github.com/users/jannikluhn/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jannikluhn/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jannikluhn/subscriptions",
    "organizations_url": "https://api.github.com/users/jannikluhn/orgs",
    "repos_url": "https://api.github.com/users/jannikluhn/repos",
    "events_url": "https://api.github.com/users/jannikluhn/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jannikluhn/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 769749869,
      "node_id": "MDU6TGFiZWw3Njk3NDk4Njk=",
      "url": "https://api.github.com/repos/ethereum/py-evm/labels/eth2.0",
      "name": "eth2.0",
      "color": "ff95ca",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": {
    "login": "jannikluhn",
    "id": 29854669,
    "node_id": "MDQ6VXNlcjI5ODU0NjY5",
    "avatar_url": "https://avatars.githubusercontent.com/u/29854669?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jannikluhn",
    "html_url": "https://github.com/jannikluhn",
    "followers_url": "https://api.github.com/users/jannikluhn/followers",
    "following_url": "https://api.github.com/users/jannikluhn/following{/other_user}",
    "gists_url": "https://api.github.com/users/jannikluhn/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jannikluhn/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jannikluhn/subscriptions",
    "organizations_url": "https://api.github.com/users/jannikluhn/orgs",
    "repos_url": "https://api.github.com/users/jannikluhn/repos",
    "events_url": "https://api.github.com/users/jannikluhn/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jannikluhn/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "jannikluhn",
      "id": 29854669,
      "node_id": "MDQ6VXNlcjI5ODU0NjY5",
      "avatar_url": "https://avatars.githubusercontent.com/u/29854669?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jannikluhn",
      "html_url": "https://github.com/jannikluhn",
      "followers_url": "https://api.github.com/users/jannikluhn/followers",
      "following_url": "https://api.github.com/users/jannikluhn/following{/other_user}",
      "gists_url": "https://api.github.com/users/jannikluhn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jannikluhn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jannikluhn/subscriptions",
      "organizations_url": "https://api.github.com/users/jannikluhn/orgs",
      "repos_url": "https://api.github.com/users/jannikluhn/repos",
      "events_url": "https://api.github.com/users/jannikluhn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jannikluhn/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 7,
  "created_at": "2018-01-17T17:18:20Z",
  "updated_at": "2018-01-27T14:24:41Z",
  "closed_at": "2018-01-27T14:24:41Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "### What is wrong?\r\n\r\nExecuting sharding transactions currently does not work with the FlatTrieBackend as it doesn't implement `account_exists`.\r\n\r\nNote that it is not related to account creation transactions per se (as I assumed earlier), normal transactions are affected in the same way.\r\n\r\n### How can it be fixed\r\n\r\nEither implement `account_exists` or don't use it. It is called in some SELFDESTUCT (e.g. https://github.com/ethereum/py-evm/blob/362266c323c83a851f7dff0a2a59796abaa3f318/evm/logic/system.py#L64) and some CALL (e.g. https://github.com/ethereum/py-evm/blob/362266c323c83a851f7dff0a2a59796abaa3f318/evm/logic/call.py#L287) opcodes. It changes from fork to fork though and I'm not sure if this is still needed, especially as at least one one motivation seems to have been the dust clean up in Spurious Dragon. Also, it seems to be used for gas calculation only which will be different with stateless clients anyway.\r\n\r\nIt is also called indirectly via `touch_account` for every message, but this can unproblematically be replaced by setting nonce/balance/code to zero unless they are non-zero.\r\n\r\nImplementing `account_exists` is probably the easier solution (with `check_if_branch_exist` in py-trie), but I don't like this as much. But that's mainly due to me not seeing why such a function would be necessary.",
  "closed_by": {
    "login": "jannikluhn",
    "id": 29854669,
    "node_id": "MDQ6VXNlcjI5ODU0NjY5",
    "avatar_url": "https://avatars.githubusercontent.com/u/29854669?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jannikluhn",
    "html_url": "https://github.com/jannikluhn",
    "followers_url": "https://api.github.com/users/jannikluhn/followers",
    "following_url": "https://api.github.com/users/jannikluhn/following{/other_user}",
    "gists_url": "https://api.github.com/users/jannikluhn/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jannikluhn/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jannikluhn/subscriptions",
    "organizations_url": "https://api.github.com/users/jannikluhn/orgs",
    "repos_url": "https://api.github.com/users/jannikluhn/repos",
    "events_url": "https://api.github.com/users/jannikluhn/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jannikluhn/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/281/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/py-evm/issues/281/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/358463272",
    "html_url": "https://github.com/ethereum/py-evm/issues/281#issuecomment-358463272",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/281",
    "id": 358463272,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1ODQ2MzI3Mg==",
    "user": {
      "login": "hwwhww",
      "id": 9263930,
      "node_id": "MDQ6VXNlcjkyNjM5MzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9263930?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hwwhww",
      "html_url": "https://github.com/hwwhww",
      "followers_url": "https://api.github.com/users/hwwhww/followers",
      "following_url": "https://api.github.com/users/hwwhww/following{/other_user}",
      "gists_url": "https://api.github.com/users/hwwhww/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hwwhww/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hwwhww/subscriptions",
      "organizations_url": "https://api.github.com/users/hwwhww/orgs",
      "repos_url": "https://api.github.com/users/hwwhww/repos",
      "events_url": "https://api.github.com/users/hwwhww/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hwwhww/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-17T22:03:12Z",
    "updated_at": "2018-01-18T07:29:59Z",
    "author_association": "MEMBER",
    "body": "Checked with V:\r\n\r\n* We can remove `SELFDESTRUCT` opcode from sharding now.\r\n* For `CALL` opcode, we may have to override it by adding `CallSharding` class:\r\n    * Only check `account_is_empty`, not `account_exists`. (See [EIP-161](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-161.md): An account is considered empty when it has no code and zero nonce and zero balance.)\r\n    * Look over the logic of `CALL`, would the `nonce` part become very different with the account abstraction model?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/358463272/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/358608361",
    "html_url": "https://github.com/ethereum/py-evm/issues/281#issuecomment-358608361",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/281",
    "id": 358608361,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1ODYwODM2MQ==",
    "user": {
      "login": "jannikluhn",
      "id": 29854669,
      "node_id": "MDQ6VXNlcjI5ODU0NjY5",
      "avatar_url": "https://avatars.githubusercontent.com/u/29854669?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jannikluhn",
      "html_url": "https://github.com/jannikluhn",
      "followers_url": "https://api.github.com/users/jannikluhn/followers",
      "following_url": "https://api.github.com/users/jannikluhn/following{/other_user}",
      "gists_url": "https://api.github.com/users/jannikluhn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jannikluhn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jannikluhn/subscriptions",
      "organizations_url": "https://api.github.com/users/jannikluhn/orgs",
      "repos_url": "https://api.github.com/users/jannikluhn/repos",
      "events_url": "https://api.github.com/users/jannikluhn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jannikluhn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-18T10:42:49Z",
    "updated_at": "2018-01-18T12:52:19Z",
    "author_association": "MEMBER",
    "body": "> Look over the logic of CALL, would the nonce part become very different with the account abstraction model?\r\n\r\nI was under the impression that contract nonces would be removed altogether. ~In its current implementation CREATE2 uses the contract nonce though~, so I'm not sure about this. But I don't think it matters a lot, the only thing that would be affected is the definition of an \"empty account\" (`code/balance/nonce = 0` to `code/balance = 0`).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/358608361/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/358867627",
    "html_url": "https://github.com/ethereum/py-evm/issues/281#issuecomment-358867627",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/281",
    "id": 358867627,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1ODg2NzYyNw==",
    "user": {
      "login": "NIC619",
      "id": 17670147,
      "node_id": "MDQ6VXNlcjE3NjcwMTQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/17670147?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NIC619",
      "html_url": "https://github.com/NIC619",
      "followers_url": "https://api.github.com/users/NIC619/followers",
      "following_url": "https://api.github.com/users/NIC619/following{/other_user}",
      "gists_url": "https://api.github.com/users/NIC619/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NIC619/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NIC619/subscriptions",
      "organizations_url": "https://api.github.com/users/NIC619/orgs",
      "repos_url": "https://api.github.com/users/NIC619/repos",
      "events_url": "https://api.github.com/users/NIC619/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NIC619/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-19T05:04:12Z",
    "updated_at": "2018-01-19T05:04:12Z",
    "author_association": "MEMBER",
    "body": "I can get my hands on `CallSharding`, removing `SELFDESTRUCT`, `account_is_empty`, `account_exist` and `touch_account` after `PAYGAS` opcode is done.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/358867627/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/358899895",
    "html_url": "https://github.com/ethereum/py-evm/issues/281#issuecomment-358899895",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/281",
    "id": 358899895,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1ODg5OTg5NQ==",
    "user": {
      "login": "jannikluhn",
      "id": 29854669,
      "node_id": "MDQ6VXNlcjI5ODU0NjY5",
      "avatar_url": "https://avatars.githubusercontent.com/u/29854669?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jannikluhn",
      "html_url": "https://github.com/jannikluhn",
      "followers_url": "https://api.github.com/users/jannikluhn/followers",
      "following_url": "https://api.github.com/users/jannikluhn/following{/other_user}",
      "gists_url": "https://api.github.com/users/jannikluhn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jannikluhn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jannikluhn/subscriptions",
      "organizations_url": "https://api.github.com/users/jannikluhn/orgs",
      "repos_url": "https://api.github.com/users/jannikluhn/repos",
      "events_url": "https://api.github.com/users/jannikluhn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jannikluhn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-19T08:34:09Z",
    "updated_at": "2018-01-19T08:34:09Z",
    "author_association": "MEMBER",
    "body": "I don't think the account methods need to be removed, rather changed slightly:\r\n\r\n- `account_is_empty` should not check the nonce\r\n- `account_exists` should be kept as is (raising a `NotImplementedError`)\r\n- `touch_account` should not rely on `account_exists`, but have the same effect (just set nonce/balance/code to zero unless they are set already)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/358899895/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/358983663",
    "html_url": "https://github.com/ethereum/py-evm/issues/281#issuecomment-358983663",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/281",
    "id": 358983663,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1ODk4MzY2Mw==",
    "user": {
      "login": "jannikluhn",
      "id": 29854669,
      "node_id": "MDQ6VXNlcjI5ODU0NjY5",
      "avatar_url": "https://avatars.githubusercontent.com/u/29854669?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jannikluhn",
      "html_url": "https://github.com/jannikluhn",
      "followers_url": "https://api.github.com/users/jannikluhn/followers",
      "following_url": "https://api.github.com/users/jannikluhn/following{/other_user}",
      "gists_url": "https://api.github.com/users/jannikluhn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jannikluhn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jannikluhn/subscriptions",
      "organizations_url": "https://api.github.com/users/jannikluhn/orgs",
      "repos_url": "https://api.github.com/users/jannikluhn/repos",
      "events_url": "https://api.github.com/users/jannikluhn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jannikluhn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-19T14:40:08Z",
    "updated_at": "2018-01-19T14:40:08Z",
    "author_association": "MEMBER",
    "body": "@pipermerriam I'm not sure what the right way to proceed is here: For main Ethereum we need to store nonces, for sharding we don't. What's the best way to implement this in the two TrieBackends?\r\n\r\nI see three options:\r\n\r\n  1) Only `NestedTrieBackend` stores nonces, `FlatTrieBackend` doesn't.\r\n  2) Add a flag `store_nonces` to both backends. Check this backend when doing anything nonce related (throw exception when nonces are got/set, set/don't set nonce when touching account, ...)\r\n  3) Add `FlatTrieBackendWithoutNonces` that inherits from FlatTrieBackend and overrides all nonce related methods to raise `NotImplementedError`s.\r\n\r\n1\\) is definitely easiest and I doubt it will create a lot of problems in practice. But it couples two things that aren't related (*how* state is stored and *what* state is stored). 2) could work, but all these flags may get out of hand at some point (`state_backend_class`, `store_nonces`, maybe `trie_class` in the future, ...). 3) also doesn't appear very elegant.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/358983663/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/359521568",
    "html_url": "https://github.com/ethereum/py-evm/issues/281#issuecomment-359521568",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/281",
    "id": 359521568,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1OTUyMTU2OA==",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-22T18:37:34Z",
    "updated_at": "2018-01-22T18:37:34Z",
    "author_association": "MEMBER",
    "body": "@jannikluhn What about collapsing the abstraction from a single `AccountStateDB` and multiple backends to just have multiple implementations of the `AccountStateDB`, one for `FlatAccountStateDB` and one for `NestedAccountStateDB`.  We can explore if there is a sufficient *common* API to declare a `BaseStateDB` class, and raise `NotImplementedError` in any methods on either class which don't apply, or we can just not have those methods with the expressed knowledge that they aren't available for any VM which uses that version of the account state database?\r\n\r\nI dislike the *flag* based approach.  Those types of logic switches are error prone and lead to confusing code internals that are hard to follow in-my-opinion.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/359521568/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/359759829",
    "html_url": "https://github.com/ethereum/py-evm/issues/281#issuecomment-359759829",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/281",
    "id": 359759829,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1OTc1OTgyOQ==",
    "user": {
      "login": "jannikluhn",
      "id": 29854669,
      "node_id": "MDQ6VXNlcjI5ODU0NjY5",
      "avatar_url": "https://avatars.githubusercontent.com/u/29854669?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jannikluhn",
      "html_url": "https://github.com/jannikluhn",
      "followers_url": "https://api.github.com/users/jannikluhn/followers",
      "following_url": "https://api.github.com/users/jannikluhn/following{/other_user}",
      "gists_url": "https://api.github.com/users/jannikluhn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jannikluhn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jannikluhn/subscriptions",
      "organizations_url": "https://api.github.com/users/jannikluhn/orgs",
      "repos_url": "https://api.github.com/users/jannikluhn/repos",
      "events_url": "https://api.github.com/users/jannikluhn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jannikluhn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-23T11:19:00Z",
    "updated_at": "2018-01-23T11:19:00Z",
    "author_association": "MEMBER",
    "body": "> What about collapsing the abstraction from a single AccountStateDB and multiple backends to just have multiple implementations of the AccountStateDB, one for FlatAccountStateDB and one for NestedAccountStateDB.\r\n\r\nI think you're right, the abstraction isn't too useful right now. Only noteworthy shared functionality is parameter validation.\r\n\r\nInstead of calling them `Flat` and `Nested` what about calling them `ShardingAccountStateDB` and `MainAccountStateDB` (or just `AccountStateDB`)? That way we could remove nonce handling and switch to the binary trie with a clear conscience in `ShardingAccountStateDB`.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/359759829/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
