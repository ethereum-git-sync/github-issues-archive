{
  "url": "https://api.github.com/repos/ethereum/py-evm/issues/1960",
  "repository_url": "https://api.github.com/repos/ethereum/py-evm",
  "labels_url": "https://api.github.com/repos/ethereum/py-evm/issues/1960/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/py-evm/issues/1960/comments",
  "events_url": "https://api.github.com/repos/ethereum/py-evm/issues/1960/events",
  "html_url": "https://github.com/ethereum/py-evm/issues/1960",
  "id": 732296797,
  "node_id": "MDU6SXNzdWU3MzIyOTY3OTc=",
  "number": 1960,
  "title": "Weird balance overrides when forking `py-evm`",
  "user": {
    "login": "Pet3ris",
    "id": 224585,
    "node_id": "MDQ6VXNlcjIyNDU4NQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/224585?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Pet3ris",
    "html_url": "https://github.com/Pet3ris",
    "followers_url": "https://api.github.com/users/Pet3ris/followers",
    "following_url": "https://api.github.com/users/Pet3ris/following{/other_user}",
    "gists_url": "https://api.github.com/users/Pet3ris/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Pet3ris/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Pet3ris/subscriptions",
    "organizations_url": "https://api.github.com/users/Pet3ris/orgs",
    "repos_url": "https://api.github.com/users/Pet3ris/repos",
    "events_url": "https://api.github.com/users/Pet3ris/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Pet3ris/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 7,
  "created_at": "2020-10-29T13:04:58Z",
  "updated_at": "2022-01-07T19:00:04Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "* py-evm Version: 0.3.0a19\r\n* OS: osx\r\n* Python Version (python --version): 3.7\r\n* Environment (output of `pip freeze`):\r\n\r\n<details><summary>Pip freeze output</summary>\r\n<p>\r\n\r\n```\r\naniso8601==7.0.0\r\nappdirs==1.4.4\r\nappnope==0.1.0\r\nargon2-cffi==20.1.0\r\nasttokens==2.0.3\r\nasync-generator==1.10\r\nattrdict==2.0.1\r\nattrs==20.2.0\r\nBabel==2.8.0\r\nbackcall==0.2.0\r\nbase58==2.0.1\r\nbitarray==1.2.2\r\nblack==20.8b1\r\nblake2b-py==0.1.3\r\nbleach==3.2.1\r\ncached-property==1.5.2\r\ncertifi==2020.6.20\r\ncffi==1.14.3\r\nchardet==3.0.4\r\nclick==7.1.2\r\ncytoolz==0.11.0\r\ndecorator==4.4.2\r\ndefusedxml==0.6.0\r\nentrypoints==0.3\r\neth-abi==2.1.1\r\neth-account==0.5.4\r\neth-bloom==1.0.3\r\neth-hash==0.2.0\r\neth-keyfile==0.5.1\r\neth-keys==0.3.3\r\neth-rlp==0.2.1\r\neth-tester==0.5.0b2\r\neth-typing==2.2.2\r\neth-utils==1.9.5\r\nfastdiff==0.2.0\r\nFlask==1.1.2\r\nFlask-Cors==3.0.9\r\nFlask-GraphQL==2.0.1\r\nfuture==0.18.2\r\ngevent==20.9.0\r\ngraphene==2.1.8\r\ngraphql-core==2.3.2\r\ngraphql-relay==2.0.1\r\ngraphql-server-core==1.2.0\r\ngreenlet==0.4.17\r\ngunicorn==20.0.4\r\nhexbytes==0.2.1\r\nidna==2.10\r\nimportlib-metadata==2.0.0\r\niniconfig==1.0.1\r\nipfshttpclient==0.6.1\r\nipykernel==5.3.4\r\nipython==7.18.1\r\nipython-genutils==0.2.0\r\nisort==5.5.3\r\nitsdangerous==1.1.0\r\njedi==0.17.2\r\nJinja2==2.11.2\r\njson5==0.9.5\r\njsonschema==3.2.0\r\njupyter-client==6.1.7\r\njupyter-core==4.6.3\r\njupyter-server==1.0.0rc16\r\njupyterlab==2.2.8\r\njupyterlab-pygments==0.1.1\r\njupyterlab-server==1.2.0\r\nlru-dict==1.1.6\r\nMarkupSafe==1.1.1\r\nmistune==0.8.4\r\nmore-itertools==8.5.0\r\nmultiaddr==0.0.9\r\nmypy==0.782\r\nmypy-extensions==0.4.3\r\nnbclassic==0.2.0rc7\r\nnbclient==0.5.0\r\nnbconvert==6.0.5\r\nnbformat==5.0.7\r\nnest-asyncio==1.4.0\r\nnetaddr==0.8.0\r\nnotebook==6.1.4\r\npackaging==20.4\r\npandocfilters==1.4.2\r\nparsimonious==0.8.1\r\nparso==0.7.1\r\npathspec==0.8.0\r\npexpect==4.8.0\r\npickleshare==0.7.5\r\npluggy==0.13.1\r\nprometheus-client==0.8.0\r\npromise==2.3\r\nprompt-toolkit==3.0.7\r\nprotobuf==3.13.0\r\nptyprocess==0.6.0\r\npy==1.9.0\r\npy-ecc==4.1.0\r\npy-evm==0.3.0a19\r\npy-geth==2.4.0\r\npy-solc===3.2.0-fixedstdin\r\npy-solc-x==1.0.0\r\npycparser==2.20\r\npycryptodome==3.9.8\r\npyethash==0.1.27\r\npyevmasm==0.2.3\r\nPygments==2.7.1\r\npyparsing==2.4.7\r\npyrsistent==0.17.3\r\npysha3==1.0.2\r\npytest==6.0.2\r\npytest-tornasync==0.6.0.post2\r\npython-dateutil==2.8.1\r\npython-dotenv==0.14.0\r\npython-json-logger==2.0.1\r\npytz==2020.1\r\npyzmq==19.0.2\r\nregex==2020.7.14\r\nrequests==2.24.0\r\nrlp==2.0.0a1\r\nrusty-rlp==0.1.15\r\nRx==1.6.1\r\nsemantic-version==2.8.5\r\nSend2Trash==1.5.0\r\nsix==1.15.0\r\nsnapshottest==0.5.1\r\nsortedcontainers==2.2.2\r\ntermcolor==1.1.0\r\nterminado==0.9.1\r\ntestpath==0.4.4\r\ntoml==0.10.1\r\ntoolz==0.11.1\r\ntornado==6.0.4\r\ntraitlets==5.0.4\r\ntrie==2.0.0a4\r\ntyped-ast==1.4.1\r\ntyping-extensions==3.7.4.3\r\nurllib3==1.25.11\r\nvarint==1.0.2\r\nvyper==0.2.7\r\nwasmer==0.4.1\r\nwcwidth==0.2.5\r\nweb3==5.12.2\r\nwebencodings==0.5.1\r\nwebsockets==8.1\r\nWerkzeug==1.0.1\r\nzipp==3.3.1\r\nzope.event==4.5.0\r\nzope.interface==5.1.2\r\n```\r\n\r\n</p>\r\n</details>\r\n\r\n### What is wrong?\r\n\r\nI'm running a notebook shown below (exported in `md` for simplicity).\r\n\r\nMore about how this works:\r\n\r\n- This is a `py-evm` fork that attempts to override the balance for a single address (the coinbase account)\r\n- Initially the address seems to be overridden, but when we call `getBalance` on the account, it reverts back to 0, any thoughts on why this may be the case? Note the last `get_balance` call `updated get_balance(0x7E5F4552091A69125d5DfCb7b8C2659029395Bdf) = 0` which comes after setting the balance for that address `set_balance(0x7E5F4552091A69125d5DfCb7b8C2659029395Bdf) := 2000000000000000000`.\r\n\r\nHow is the fork itself set up:\r\n- I'm forking the `get_balance` and `set_balance` calls on the `_account_db`\r\n- set balance is very simple, it just marks which addresses have been modified in `balances_set`, in addition, it ignores the first run (which is the initial balance set for the coinbase account)\r\n- get balance works normally, but if the coinbase address has not been set yet, it returns a preset value (2 * 10^18).\r\n\r\n\r\n# Fork testing notebook\r\n\r\nDesigned to explore why account balances do not preserve correctly when forking `py-evm`.\r\n\r\n\r\n```python\r\nfrom typing import Any, Iterable, Optional, Type\r\n\r\nfrom eth.abc import BlockAPI, ExecutionContextAPI\r\nfrom eth.rlp.blocks import BaseBlock\r\nfrom eth.vm.forks.muir_glacier import MuirGlacierVM\r\nfrom eth.vm.forks.muir_glacier.blocks import MuirGlacierBlock\r\nfrom eth.vm.forks.muir_glacier.headers import (\r\n    compute_muir_glacier_difficulty,\r\n    configure_muir_glacier_header,\r\n    create_muir_glacier_header_from_parent,\r\n)\r\nfrom eth.vm.forks.muir_glacier.state import MuirGlacierState\r\nfrom eth.vm.state import BaseState\r\nfrom eth_hash.auto import keccak\r\nfrom eth_typing import Address, BlockNumber, Hash32\r\nfrom eth_utils import to_checksum_address\r\n\r\ndef get_fallback_vm_configuration():\r\n    balances_set = set()\r\n    ran = [0]\r\n    \r\n    class FallbackState(MuirGlacierState):\r\n        def get_balance(self, address: Address) -> int:\r\n            adx = to_checksum_address(address.hex())\r\n            if address in balances_set or adx != \"0x7E5F4552091A69125d5DfCb7b8C2659029395Bdf\":\r\n                balance = self._account_db.get_balance(address)\r\n                if address in balances_set:\r\n                    print(f\"updated get_balance({adx}) = {balance}\")\r\n                else:\r\n                    print(f\"original get_balance({adx}) = {balance}\")\r\n                return balance\r\n\r\n            # New idea: commit fallback balance to current chain when retrieving\r\n            if adx != \"0x7E5F4552091A69125d5DfCb7b8C2659029395Bdf\":\r\n                raise Exception(\"impossible\")\r\n            balance = 2 * 10**18\r\n            self.set_balance(address, balance)\r\n            print(f\"override get_balance({adx}) = {balance}\")\r\n            return balance\r\n\r\n        def set_balance(self, address: Address, balance: int) -> None:\r\n            adx = to_checksum_address(address.hex())\r\n            if ran[0] < 1 and adx == \"0x7E5F4552091A69125d5DfCb7b8C2659029395Bdf\":\r\n                ran[0] += 1\r\n                print(f\"ignored set_balance({adx}) := {balance}\")\r\n                return # ignore first run\r\n\r\n            print(f\"set_balance({adx}) := {balance}\")\r\n            balances_set.add(address)\r\n            \r\n            self._account_db.set_balance(address, balance)\r\n\r\n    class FallbackVM(MuirGlacierVM):\r\n        \"\"\"Fallback virtual machine that forks from a given web3 network.\"\"\"\r\n\r\n        # fork name\r\n        fork = \"muir-glacier-mainnet-fallback\"\r\n\r\n        # classes\r\n        block_class: Type[BaseBlock] = MuirGlacierBlock\r\n        _state_class: Type[BaseState] = FallbackState\r\n\r\n        # Methods\r\n        create_header_from_parent = staticmethod(create_muir_glacier_header_from_parent)  # type: ignore\r\n        compute_difficulty = staticmethod(compute_muir_glacier_difficulty)  # type: ignore\r\n        configure_header = configure_muir_glacier_header\r\n\r\n    no_proof_vms = ((0, FallbackVM),)\r\n    return no_proof_vms\r\n```\r\n\r\n\r\n```python\r\nimport web3\r\nimport eth_tester\r\n\r\nvm_configuration = get_fallback_vm_configuration()\r\nbackend = eth_tester.PyEVMBackend(vm_configuration=vm_configuration)\r\nw3 = web3.Web3(web3.Web3.EthereumTesterProvider(backend))\r\n```\r\n\r\n    ignored set_balance(0x7E5F4552091A69125d5DfCb7b8C2659029395Bdf) := 1000000000000000000000000\r\n    set_balance(0x2B5AD5c4795c026514f8317c7a215E218DcCD6cF) := 1000000000000000000000000\r\n    set_balance(0x6813Eb9362372EEF6200f3b1dbC3f819671cBA69) := 1000000000000000000000000\r\n    set_balance(0x1efF47bc3a10a45D4B230B5d10E37751FE6AA718) := 1000000000000000000000000\r\n    set_balance(0xe1AB8145F7E55DC933d51a18c793F901A3A0b276) := 1000000000000000000000000\r\n    set_balance(0xE57bFE9F44b819898F47BF37E5AF72a0783e1141) := 1000000000000000000000000\r\n    set_balance(0xd41c057fd1c78805AAC12B0A94a405c0461A6FBb) := 1000000000000000000000000\r\n    set_balance(0xF1F6619B38A98d6De0800F1DefC0a6399eB6d30C) := 1000000000000000000000000\r\n    set_balance(0xF7Edc8FA1eCc32967F827C9043FcAe6ba73afA5c) := 1000000000000000000000000\r\n    set_balance(0x4CCeBa2d7D2B4fdcE4304d3e09a1fea9fbEb1528) := 1000000000000000000000000\r\n\r\n\r\n\r\n```python\r\nw3.eth.coinbase\r\n```\r\n\r\n\r\n\r\n\r\n    '0x7E5F4552091A69125d5DfCb7b8C2659029395Bdf'\r\n\r\n\r\n\r\n\r\n```python\r\nw3.eth.getBalance(w3.eth.coinbase)\r\n```\r\n\r\n    set_balance(0x7E5F4552091A69125d5DfCb7b8C2659029395Bdf) := 2000000000000000000\r\n    override get_balance(0x7E5F4552091A69125d5DfCb7b8C2659029395Bdf) = 2000000000000000000\r\n\r\n\r\n\r\n\r\n\r\n    2000000000000000000\r\n\r\n\r\n\r\n\r\n```python\r\nw3.eth.accounts\r\n```\r\n\r\n\r\n\r\n\r\n    ['0x7E5F4552091A69125d5DfCb7b8C2659029395Bdf',\r\n     '0x2B5AD5c4795c026514f8317c7a215E218DcCD6cF',\r\n     '0x6813Eb9362372EEF6200f3b1dbC3f819671cBA69',\r\n     '0x1efF47bc3a10a45D4B230B5d10E37751FE6AA718',\r\n     '0xe1AB8145F7E55DC933d51a18c793F901A3A0b276',\r\n     '0xE57bFE9F44b819898F47BF37E5AF72a0783e1141',\r\n     '0xd41c057fd1c78805AAC12B0A94a405c0461A6FBb',\r\n     '0xF1F6619B38A98d6De0800F1DefC0a6399eB6d30C',\r\n     '0xF7Edc8FA1eCc32967F827C9043FcAe6ba73afA5c',\r\n     '0x4CCeBa2d7D2B4fdcE4304d3e09a1fea9fbEb1528']\r\n\r\n\r\n\r\n\r\n```python\r\nstarting_bal = w3.eth.getBalance(w3.eth.accounts[0])\r\n```\r\n\r\n    updated get_balance(0x7E5F4552091A69125d5DfCb7b8C2659029395Bdf) = 0\r\n\r\n### How can it be fixed\r\n\r\nThis may not be a bug, but I'd love to hear how to ensure that the balances stay consistent between transactions if I do override them.\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/1960/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/py-evm/issues/1960/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/718875120",
    "html_url": "https://github.com/ethereum/py-evm/issues/1960#issuecomment-718875120",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/1960",
    "id": 718875120,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcxODg3NTEyMA==",
    "user": {
      "login": "carver",
      "id": 205327,
      "node_id": "MDQ6VXNlcjIwNTMyNw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/205327?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/carver",
      "html_url": "https://github.com/carver",
      "followers_url": "https://api.github.com/users/carver/followers",
      "following_url": "https://api.github.com/users/carver/following{/other_user}",
      "gists_url": "https://api.github.com/users/carver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/carver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/carver/subscriptions",
      "organizations_url": "https://api.github.com/users/carver/orgs",
      "repos_url": "https://api.github.com/users/carver/repos",
      "events_url": "https://api.github.com/users/carver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/carver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-29T16:37:15Z",
    "updated_at": "2020-10-29T16:37:15Z",
    "author_association": "MEMBER",
    "body": "I haven't dived deep into what's going on with this code yet. This isn't really an answer to your question, but an alternative would be to follow the model of TheDAO fork:\r\nhttps://github.com/ethereum/py-evm/blob/239c72c202cb6371fd0059436152fda91592124e/eth/vm/forks/homestead/headers.py#L85-L105",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/718875120/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/718949122",
    "html_url": "https://github.com/ethereum/py-evm/issues/1960#issuecomment-718949122",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/1960",
    "id": 718949122,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcxODk0OTEyMg==",
    "user": {
      "login": "Pet3ris",
      "id": 224585,
      "node_id": "MDQ6VXNlcjIyNDU4NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/224585?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Pet3ris",
      "html_url": "https://github.com/Pet3ris",
      "followers_url": "https://api.github.com/users/Pet3ris/followers",
      "following_url": "https://api.github.com/users/Pet3ris/following{/other_user}",
      "gists_url": "https://api.github.com/users/Pet3ris/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Pet3ris/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Pet3ris/subscriptions",
      "organizations_url": "https://api.github.com/users/Pet3ris/orgs",
      "repos_url": "https://api.github.com/users/Pet3ris/repos",
      "events_url": "https://api.github.com/users/Pet3ris/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Pet3ris/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-29T18:44:52Z",
    "updated_at": "2020-10-29T18:45:04Z",
    "author_association": "NONE",
    "body": "@carver this makes sense and thanks so much for highlighting the example, it's quite elegant. Unfortunately, I'm making a dynamic fork to simulate mainnet calls so I'm following an approach similar to `ganache` which responds and fills in gaps lazily as they are requested by specific transactions rather than pre-loading state at once. The idea is that without running the transactions in the first place, I don't really know what state to set.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/718949122/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/1007220727",
    "html_url": "https://github.com/ethereum/py-evm/issues/1960#issuecomment-1007220727",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/1960",
    "id": 1007220727,
    "node_id": "IC_kwDOBJ456s48CPf3",
    "user": {
      "login": "flux627",
      "id": 5218949,
      "node_id": "MDQ6VXNlcjUyMTg5NDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5218949?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/flux627",
      "html_url": "https://github.com/flux627",
      "followers_url": "https://api.github.com/users/flux627/followers",
      "following_url": "https://api.github.com/users/flux627/following{/other_user}",
      "gists_url": "https://api.github.com/users/flux627/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/flux627/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/flux627/subscriptions",
      "organizations_url": "https://api.github.com/users/flux627/orgs",
      "repos_url": "https://api.github.com/users/flux627/repos",
      "events_url": "https://api.github.com/users/flux627/events{/privacy}",
      "received_events_url": "https://api.github.com/users/flux627/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-07T08:20:07Z",
    "updated_at": "2022-01-07T08:20:07Z",
    "author_association": "NONE",
    "body": "Did you ever figure this out?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/1007220727/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/1007270770",
    "html_url": "https://github.com/ethereum/py-evm/issues/1960#issuecomment-1007270770",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/1960",
    "id": 1007270770,
    "node_id": "IC_kwDOBJ456s48Cbty",
    "user": {
      "login": "Pet3ris",
      "id": 224585,
      "node_id": "MDQ6VXNlcjIyNDU4NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/224585?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Pet3ris",
      "html_url": "https://github.com/Pet3ris",
      "followers_url": "https://api.github.com/users/Pet3ris/followers",
      "following_url": "https://api.github.com/users/Pet3ris/following{/other_user}",
      "gists_url": "https://api.github.com/users/Pet3ris/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Pet3ris/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Pet3ris/subscriptions",
      "organizations_url": "https://api.github.com/users/Pet3ris/orgs",
      "repos_url": "https://api.github.com/users/Pet3ris/repos",
      "events_url": "https://api.github.com/users/Pet3ris/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Pet3ris/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-07T09:45:48Z",
    "updated_at": "2022-01-07T09:45:48Z",
    "author_association": "NONE",
    "body": "Unfortunately I didn't, I parked this until I have more observability infrastructure to be able to debug it better but one thing that helped with related issues was being thorough in incorporating all the API functions. For example for nonces, in addition to `set_nonce` and `get_nonce` there is `increment_nonce` and important to update all of them.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/1007270770/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/1007270980",
    "html_url": "https://github.com/ethereum/py-evm/issues/1960#issuecomment-1007270980",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/1960",
    "id": 1007270980,
    "node_id": "IC_kwDOBJ456s48CbxE",
    "user": {
      "login": "Pet3ris",
      "id": 224585,
      "node_id": "MDQ6VXNlcjIyNDU4NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/224585?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Pet3ris",
      "html_url": "https://github.com/Pet3ris",
      "followers_url": "https://api.github.com/users/Pet3ris/followers",
      "following_url": "https://api.github.com/users/Pet3ris/following{/other_user}",
      "gists_url": "https://api.github.com/users/Pet3ris/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Pet3ris/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Pet3ris/subscriptions",
      "organizations_url": "https://api.github.com/users/Pet3ris/orgs",
      "repos_url": "https://api.github.com/users/Pet3ris/repos",
      "events_url": "https://api.github.com/users/Pet3ris/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Pet3ris/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-07T09:46:07Z",
    "updated_at": "2022-01-07T09:46:07Z",
    "author_association": "NONE",
    "body": "@flux627 are you running into a similar issue?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/1007270980/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/1007638948",
    "html_url": "https://github.com/ethereum/py-evm/issues/1960#issuecomment-1007638948",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/1960",
    "id": 1007638948,
    "node_id": "IC_kwDOBJ456s48D1mk",
    "user": {
      "login": "flux627",
      "id": 5218949,
      "node_id": "MDQ6VXNlcjUyMTg5NDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5218949?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/flux627",
      "html_url": "https://github.com/flux627",
      "followers_url": "https://api.github.com/users/flux627/followers",
      "following_url": "https://api.github.com/users/flux627/following{/other_user}",
      "gists_url": "https://api.github.com/users/flux627/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/flux627/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/flux627/subscriptions",
      "organizations_url": "https://api.github.com/users/flux627/orgs",
      "repos_url": "https://api.github.com/users/flux627/repos",
      "events_url": "https://api.github.com/users/flux627/events{/privacy}",
      "received_events_url": "https://api.github.com/users/flux627/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-07T18:31:40Z",
    "updated_at": "2022-01-07T18:31:40Z",
    "author_association": "NONE",
    "body": "I'm still in a research phase for tooling- looking to see if it was possible to fork mainnet with this like Ganache, in hopes that this implementation is faster. But, it seems that this tooling isn't really meant for this. Also looking at hevm, but I don't know Haskell and it doesn't have any bindings. Any suggestions for performant mainnet forking tests are welcome.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/1007638948/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/1007657979",
    "html_url": "https://github.com/ethereum/py-evm/issues/1960#issuecomment-1007657979",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/1960",
    "id": 1007657979,
    "node_id": "IC_kwDOBJ456s48D6P7",
    "user": {
      "login": "carver",
      "id": 205327,
      "node_id": "MDQ6VXNlcjIwNTMyNw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/205327?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/carver",
      "html_url": "https://github.com/carver",
      "followers_url": "https://api.github.com/users/carver/followers",
      "following_url": "https://api.github.com/users/carver/following{/other_user}",
      "gists_url": "https://api.github.com/users/carver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/carver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/carver/subscriptions",
      "organizations_url": "https://api.github.com/users/carver/orgs",
      "repos_url": "https://api.github.com/users/carver/repos",
      "events_url": "https://api.github.com/users/carver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/carver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-07T19:00:04Z",
    "updated_at": "2022-01-07T19:00:04Z",
    "author_association": "MEMBER",
    "body": "Unfortunately, we aren't currently putting any resources toward new features like this in py-evm (though forking mainnet is definitely a cool one that we've talked about, and would like some day).\r\n\r\nThough it's fairly straightforward to think of \"forking mainnet\" (without having the full state) as a kind of variant of Beam Sync. So you can check out how Beam Sync is implemented in trinity, especially the `pausing_vm_decorator` and how it overwrites `VMState`. Note that it overrides all the methods (like `increment_nonce`) in a similar way.\r\n\r\nSee https://github.com/ethereum/trinity/blob/eaa3b040ffdf0848b8e00a5f329480662ecc7c11/trinity/sync/beam/importer.py#L190",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/1007657979/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
