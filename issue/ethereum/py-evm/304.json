{
  "url": "https://api.github.com/repos/ethereum/py-evm/issues/304",
  "repository_url": "https://api.github.com/repos/ethereum/py-evm",
  "labels_url": "https://api.github.com/repos/ethereum/py-evm/issues/304/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/py-evm/issues/304/comments",
  "events_url": "https://api.github.com/repos/ethereum/py-evm/issues/304/events",
  "html_url": "https://github.com/ethereum/py-evm/issues/304",
  "id": 291343302,
  "node_id": "MDU6SXNzdWUyOTEzNDMzMDI=",
  "number": 304,
  "title": "Create EVM Process for Trinity",
  "user": {
    "login": "pipermerriam",
    "id": 824194,
    "node_id": "MDQ6VXNlcjgyNDE5NA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/pipermerriam",
    "html_url": "https://github.com/pipermerriam",
    "followers_url": "https://api.github.com/users/pipermerriam/followers",
    "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
    "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
    "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
    "repos_url": "https://api.github.com/users/pipermerriam/repos",
    "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
    "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 815420353,
      "node_id": "MDU6TGFiZWw4MTU0MjAzNTM=",
      "url": "https://api.github.com/repos/ethereum/py-evm/labels/comp:%20trinity",
      "name": "comp: trinity",
      "color": "bfd4f2",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 7,
  "created_at": "2018-01-24T20:09:46Z",
  "updated_at": "2018-03-27T21:59:39Z",
  "closed_at": "2018-03-27T21:59:39Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "### What is wrong?\r\n\r\nWhen Trinity is running a chain it will likely have the following *processes*.\r\n\r\n- DevP2P\r\n  - Handles networking\r\n  - Makes requests to the EVM process to read existing chain state.\r\n  - Submits new data for import to the EVM process.\r\n- JSON-RPC\r\n  - Serves requests to the JSON-RPC server over the IPC pipe\r\n  - Makes requests to the EVM process to read existing chain state.\r\n  - Submits new transactions to the DevP2P process for broadcast to the network.\r\n  - Submits requests for EVM execution for things like `eth_call` and `eth_estimateGas`.\r\n- EVM\r\n  - Serves requests from the JSON-RPC process for thing like `eth_call` and `eth_estimateGas`.\r\n  - Serves requests from the DevP2P process for reading chain data.\r\n  - Handle new chain data submitted by the DevP2P process.\r\n\r\nThere may be a fourth process for the transaction pool as well as others we haven't thought of yet.\r\n\r\n\r\n### How can it be fixed\r\n\r\nEach of these process will be it's own `multiprocessing.Process` instance.  We have limited communication options between these processes using the primatives from the `multiprocessing` module (`Pipe/Queue/..?..`).\r\n\r\nExactly how this all looks still needs to be hashed out, after which we can fill this section in further.\r\n",
  "closed_by": {
    "login": "pipermerriam",
    "id": 824194,
    "node_id": "MDQ6VXNlcjgyNDE5NA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/pipermerriam",
    "html_url": "https://github.com/pipermerriam",
    "followers_url": "https://api.github.com/users/pipermerriam/followers",
    "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
    "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
    "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
    "repos_url": "https://api.github.com/users/pipermerriam/repos",
    "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
    "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/304/reactions",
    "total_count": 1,
    "+1": 1,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/py-evm/issues/304/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/360261498",
    "html_url": "https://github.com/ethereum/py-evm/issues/304#issuecomment-360261498",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/304",
    "id": 360261498,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MDI2MTQ5OA==",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-24T20:22:46Z",
    "updated_at": "2018-01-24T20:22:46Z",
    "author_association": "MEMBER",
    "body": "Here are some extra thoughts on this topic.\r\n\r\nThe EVM process will be a loose wrapper around the `Chain` object and the underlying `ChainDB`.  The wrapper should probably be written using all of the nice `async` primatives so that it'll sleep while requests and responses are processing.\r\n\r\nI believe most of the inter-process communication is going to be over `multiprocessing.Pipe` connections.  We'll need to setup pipes between all of the processes which need to communicate with each other prior to initializing the processes.  Then, on each side, we'll need something to manage the connection which dispatches incoming requests to the proper APIs and returns appropriate responses to each request.\r\n\r\nOne issue that we'll need to address is that objects which pass through pipes are pickled for transport.  We should verify that a cleverly constructed transaction or block (or other externally received data) cannot exploit this for remote code execution.  At a glance, the documentation appears to say that it's safe, but we should be **very** sure.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/360261498/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/360261603",
    "html_url": "https://github.com/ethereum/py-evm/issues/304#issuecomment-360261603",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/304",
    "id": 360261603,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MDI2MTYwMw==",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-24T20:23:13Z",
    "updated_at": "2018-01-24T20:23:13Z",
    "author_association": "MEMBER",
    "body": "This is probably a dependency for #303 being completed but I suspect some of it can happen in parallel.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/360261603/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/360262334",
    "html_url": "https://github.com/ethereum/py-evm/issues/304#issuecomment-360262334",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/304",
    "id": 360262334,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MDI2MjMzNA==",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-24T20:25:59Z",
    "updated_at": "2018-01-24T20:25:59Z",
    "author_association": "MEMBER",
    "body": "Also, the reason for using `multiprocessing.Process` instances for everything is to pro-actively prevent the systemic problem that pyethapp faced.\r\n\r\nBeing single threaded, the client would timeout with it's connected peers while doing EVM execution such as importing blocks, etc.  The client would receive a new block, apply it to the current chain state, and by the time it was done applying everything, all of the sleeping network connections to other nodes would have timed out.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/360262334/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/360265333",
    "html_url": "https://github.com/ethereum/py-evm/issues/304#issuecomment-360265333",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/304",
    "id": 360265333,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MDI2NTMzMw==",
    "user": {
      "login": "carver",
      "id": 205327,
      "node_id": "MDQ6VXNlcjIwNTMyNw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/205327?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/carver",
      "html_url": "https://github.com/carver",
      "followers_url": "https://api.github.com/users/carver/followers",
      "following_url": "https://api.github.com/users/carver/following{/other_user}",
      "gists_url": "https://api.github.com/users/carver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/carver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/carver/subscriptions",
      "organizations_url": "https://api.github.com/users/carver/orgs",
      "repos_url": "https://api.github.com/users/carver/repos",
      "events_url": "https://api.github.com/users/carver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/carver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-24T20:36:48Z",
    "updated_at": "2018-01-24T20:36:55Z",
    "author_association": "MEMBER",
    "body": "Some things that come to mind are mining and the pending transaction pool. I guess the tx pool will stay in the EVM, and the mining would be a separate transaction. I imagine that the pending transaction pool will be a key candidate for contention and high communication needs between all the processes.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/360265333/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/360379739",
    "html_url": "https://github.com/ethereum/py-evm/issues/304#issuecomment-360379739",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/304",
    "id": 360379739,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MDM3OTczOQ==",
    "user": {
      "login": "gsalgado",
      "id": 412274,
      "node_id": "MDQ6VXNlcjQxMjI3NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/412274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gsalgado",
      "html_url": "https://github.com/gsalgado",
      "followers_url": "https://api.github.com/users/gsalgado/followers",
      "following_url": "https://api.github.com/users/gsalgado/following{/other_user}",
      "gists_url": "https://api.github.com/users/gsalgado/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gsalgado/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gsalgado/subscriptions",
      "organizations_url": "https://api.github.com/users/gsalgado/orgs",
      "repos_url": "https://api.github.com/users/gsalgado/repos",
      "events_url": "https://api.github.com/users/gsalgado/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gsalgado/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-25T07:05:28Z",
    "updated_at": "2018-01-25T07:05:28Z",
    "author_association": "MEMBER",
    "body": "Did you consider spawning (short-lived) sub-processes only when\nnecessary, instead of having a rigid set of processes with pipelines\nfor them to communicate with each other?  For example, whenever the\nDevP2P code receives a new block, we could easily spawn a sub-process\ncalling a function to import the block; something like this:\n\n`\nexecutor = concurrent.futures.ProcessPoolExecutor()\nawait loop.run_in_executor(executor, import_block_fn)\n`\n\nI believe this approach would give us more flexibility, but it should\nalso be simpler to implement and we wouldn't need to supervise each of\nthe long-running processes started by trinity to make sure they're\nalways available.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/360379739/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/360586382",
    "html_url": "https://github.com/ethereum/py-evm/issues/304#issuecomment-360586382",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/304",
    "id": 360586382,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MDU4NjM4Mg==",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-25T20:12:41Z",
    "updated_at": "2018-01-25T20:12:41Z",
    "author_association": "MEMBER",
    "body": "@gsalgado it's probably worth looking into this as a minimal initial solution as well as a baseline for benchmarking whatever we *think* a better solution may be.\r\n\r\nI do know that spinning up `multiprocess.Process` instances has a high-ish overhead which is one reason to *prefer* a long running process, however it doesn't mean a short lived process is not a viable initial step.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/360586382/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/361054371",
    "html_url": "https://github.com/ethereum/py-evm/issues/304#issuecomment-361054371",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/304",
    "id": 361054371,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MTA1NDM3MQ==",
    "user": {
      "login": "hwwhww",
      "id": 9263930,
      "node_id": "MDQ6VXNlcjkyNjM5MzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9263930?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hwwhww",
      "html_url": "https://github.com/hwwhww",
      "followers_url": "https://api.github.com/users/hwwhww/followers",
      "following_url": "https://api.github.com/users/hwwhww/following{/other_user}",
      "gists_url": "https://api.github.com/users/hwwhww/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hwwhww/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hwwhww/subscriptions",
      "organizations_url": "https://api.github.com/users/hwwhww/orgs",
      "repos_url": "https://api.github.com/users/hwwhww/repos",
      "events_url": "https://api.github.com/users/hwwhww/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hwwhww/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-28T11:01:48Z",
    "updated_at": "2018-01-28T11:01:48Z",
    "author_association": "MEMBER",
    "body": "I draw a brief diagram: the three main processes are illustrated at the top of the diagram and some *possible* sharding components/modules I suppose we need are at the bottom.\r\n\r\n![image](https://user-images.githubusercontent.com/9263930/35481312-31824da0-045c-11e8-9357-9dd022b737fd.png)\r\n\r\n* Shard Manager\r\n\t* Upon receiving new collations, checks VMC status and applies fork choice rules.\r\n\t* Makes requests to full nodes via web3.py - could be `local-mode` or `remote-mode`\r\n\t\t* `local-mode`: connects directly to `Chain` of its local main chain data\r\n\t\t* `remote-mode`: connects to other main chain node (geth, parity, etc.)\r\n\t* Caches the lately blockhashes and `CollationAdded` logs\r\n\t* **[As a shard validator]** Upon receiving “sampled-as-collator” notification from VMC Listener, applies `CREATE_COLLATION` algorithm. \r\n\t\t* Performs stateless sync via multiple interactions with DevP2P process and web3.py.\r\n\t\t* Collects transactions into a new collation via DevP2P.\r\n\t\t* Sends `add_header` tx to VMC via web3.py.\r\n\t* **[TBD]** I’m not sure about should Shard Manager be a standalone process or it could be divided into DevP2P process and EVM process. It will be clear after we figure out the interactions between DevP2P process and EVM process.\r\n*  VMC Listener\r\n\t* Polls the VMC status and notifies Shard Manager.\r\n\r\n`srd` is just a possible ID for Sharding Wire Protocol. (It can't be too similar to `shh`.)\r\n\r\nPlease don’t hesitate to point out any mistake.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/361054371/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
