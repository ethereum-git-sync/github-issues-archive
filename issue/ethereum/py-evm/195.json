{
  "url": "https://api.github.com/repos/ethereum/py-evm/issues/195",
  "repository_url": "https://api.github.com/repos/ethereum/py-evm",
  "labels_url": "https://api.github.com/repos/ethereum/py-evm/issues/195/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/py-evm/issues/195/comments",
  "events_url": "https://api.github.com/repos/ethereum/py-evm/issues/195/events",
  "html_url": "https://github.com/ethereum/py-evm/issues/195",
  "id": 279234308,
  "node_id": "MDU6SXNzdWUyNzkyMzQzMDg=",
  "number": 195,
  "title": "Stateless/pure transaction processing",
  "user": {
    "login": "pipermerriam",
    "id": 824194,
    "node_id": "MDQ6VXNlcjgyNDE5NA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/pipermerriam",
    "html_url": "https://github.com/pipermerriam",
    "followers_url": "https://api.github.com/users/pipermerriam/followers",
    "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
    "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
    "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
    "repos_url": "https://api.github.com/users/pipermerriam/repos",
    "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
    "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 769749869,
      "node_id": "MDU6TGFiZWw3Njk3NDk4Njk=",
      "url": "https://api.github.com/repos/ethereum/py-evm/labels/eth2.0",
      "name": "eth2.0",
      "color": "ff95ca",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": {
    "login": "hwwhww",
    "id": 9263930,
    "node_id": "MDQ6VXNlcjkyNjM5MzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/9263930?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hwwhww",
    "html_url": "https://github.com/hwwhww",
    "followers_url": "https://api.github.com/users/hwwhww/followers",
    "following_url": "https://api.github.com/users/hwwhww/following{/other_user}",
    "gists_url": "https://api.github.com/users/hwwhww/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hwwhww/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hwwhww/subscriptions",
    "organizations_url": "https://api.github.com/users/hwwhww/orgs",
    "repos_url": "https://api.github.com/users/hwwhww/repos",
    "events_url": "https://api.github.com/users/hwwhww/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hwwhww/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "hwwhww",
      "id": 9263930,
      "node_id": "MDQ6VXNlcjkyNjM5MzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9263930?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hwwhww",
      "html_url": "https://github.com/hwwhww",
      "followers_url": "https://api.github.com/users/hwwhww/followers",
      "following_url": "https://api.github.com/users/hwwhww/following{/other_user}",
      "gists_url": "https://api.github.com/users/hwwhww/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hwwhww/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hwwhww/subscriptions",
      "organizations_url": "https://api.github.com/users/hwwhww/orgs",
      "repos_url": "https://api.github.com/users/hwwhww/repos",
      "events_url": "https://api.github.com/users/hwwhww/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hwwhww/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 9,
  "created_at": "2017-12-05T03:35:16Z",
  "updated_at": "2018-01-13T06:20:08Z",
  "closed_at": "2018-01-13T06:20:08Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "We need a *pure* function for applying transactions.  \r\n\r\nAs *inputs* it would take:\r\n\r\n- the current state (including state root, tx index, etc)\r\n- the transaction to be processed\r\n- a witness *proof* for all of the parts of the state that the transaction *can/will* touch.\r\n\r\nIt would *output* the resulting state.\r\n\r\nImplementation is up-in-the-air but current leading idea is to process the transaction as normal, modifying the state as we go and then discarding the state changes, only returning the updated state.  There is an underlying assumption that our state database engine supports lazy fetching of parts of the overall state.\r\n\r\n---\r\n## Tasks\r\n- [x] Adding a new db wrapper - TrackedDB: #204 \r\n- [x] Removing the transaction logic from the Block objects\r\n- [x] Implement VMState Object #236\r\n- [x] Refactoring VM, VMState, and Computation\r\n\r\n  ",
  "closed_by": {
    "login": "hwwhww",
    "id": 9263930,
    "node_id": "MDQ6VXNlcjkyNjM5MzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/9263930?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hwwhww",
    "html_url": "https://github.com/hwwhww",
    "followers_url": "https://api.github.com/users/hwwhww/followers",
    "following_url": "https://api.github.com/users/hwwhww/following{/other_user}",
    "gists_url": "https://api.github.com/users/hwwhww/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hwwhww/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hwwhww/subscriptions",
    "organizations_url": "https://api.github.com/users/hwwhww/orgs",
    "repos_url": "https://api.github.com/users/hwwhww/repos",
    "events_url": "https://api.github.com/users/hwwhww/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hwwhww/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/195/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/py-evm/issues/195/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/349716054",
    "html_url": "https://github.com/ethereum/py-evm/issues/195#issuecomment-349716054",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/195",
    "id": 349716054,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0OTcxNjA1NA==",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-06T17:34:15Z",
    "updated_at": "2017-12-06T17:34:15Z",
    "author_association": "MEMBER",
    "body": "Thoughts on implementation.  I suspect that one of the *first* things this will need is a database wrapper which keeps track of all of the parts of the state trie which get touched as part of transaction processing.  I think it would be good to do this as a subclass of `evm.db.state.StateDB`.  It may also require some changes to the `ChainDB` class since it is the entry point for interacting with the state database.\r\n\r\n* The `StateDB` would be responsible for collecting all the touched keys.\r\n* The `ChainDB` would be responsible for persisting the set of all of the touched keys each time the statedb is used.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/349716054/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/350079783",
    "html_url": "https://github.com/ethereum/py-evm/issues/195#issuecomment-350079783",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/195",
    "id": 350079783,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MDA3OTc4Mw==",
    "user": {
      "login": "hwwhww",
      "id": 9263930,
      "node_id": "MDQ6VXNlcjkyNjM5MzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9263930?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hwwhww",
      "html_url": "https://github.com/hwwhww",
      "followers_url": "https://api.github.com/users/hwwhww/followers",
      "following_url": "https://api.github.com/users/hwwhww/following{/other_user}",
      "gists_url": "https://api.github.com/users/hwwhww/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hwwhww/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hwwhww/subscriptions",
      "organizations_url": "https://api.github.com/users/hwwhww/orgs",
      "repos_url": "https://api.github.com/users/hwwhww/repos",
      "events_url": "https://api.github.com/users/hwwhww/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hwwhww/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-07T20:07:21Z",
    "updated_at": "2017-12-07T20:07:21Z",
    "author_association": "MEMBER",
    "body": "@pipermerriam \r\n\r\n> The `ChainDB` would be responsible for persisting the set of all of the touched keys each time the statedb is used.\r\n\r\n### Q1: Is the `ChainDB` here means `BaseChainDB` class? Or we have to abstract  `BaseChainDB` and create a new `ChainDB` subclass?\r\n\r\n### Q2: `pure function for applying transactions` feature is  for both shard chain and main chain?\r\nIf we make both types of chains have purified add_transaction function, something different if that it returns `State` in main chain and `StateObj` in shard chain where `StateObj` only contains properties.\r\n\r\n### Q3: What would purified function need\r\nIn our prerious Q&A, you mentioned about  the **minimal changes** to the current `apply_transaction` API: That statement was in reference to these pieces of functionality and anything that allows it to access external APIs directly like the `chaindb`. This would **not** be a significant architecture change.\r\n* https://github.com/ethereum/py-evm/blob/master/evm/vm/forks/frontier/blocks.py#L213-L236\r\n* https://github.com/ethereum/py-evm/blob/master/evm/vm/forks/frontier/blocks.py#L263-L280\r\n\r\n\r\nDo you mean we modify `evm.vm.base.VM.apply_transaction`?\r\n^^^^ I may fully mistook, but if it is, that is for non-stateless case:\r\n`evm.vm.base.VM.apply_transaction`: [py-evm/base.py at master · ethereum/py-evm · GitHub](https://github.com/ethereum/py-evm/blob/master/evm/vm/base.py#L95-L102)\r\n\r\n```python\r\n+  def apply_transaction(prev_state, transaction, db):\r\n+       self.chaindb = db\r\n \r\n        # ....somehow update it to be pure function....\r\n\t\r\n        computation = self.execute_transaction(transaction)\r\n        self.clear_journal()\r\n+       state = self.block.add_transaction(transaction, computation, db)\r\n        return computation, state\r\n```\r\n\r\n```python\r\n# Usage: use VM as a disposable container object?\r\nvm = <latest_fork_vm>(header=header, chaindbchaindb)\r\ndb = chaindb.clone()\r\nstatedb = chaindb.get_state_db(self.block.header.state_root, read_only=False, \tstateless=True)\r\nprev_state = State(statedb, root_hash= prev_state_obj.root_hash, read_only=False)\r\nstate = vm.apply_transaction(prev_state, transaction, db)\r\n```\r\n\r\n\r\nOn the other hand, note that @vbuterin suggested that: \r\n1. A chain object should NOT be necessary to process a block\r\n2. Recent headers and hashes should be part of the state object\r\n\r\n\r\nI am trying to combine both of your suggestions an hope we can have more pictures of the **ultimate goal** - the true pure function:\r\n\r\n1. Update `evm.vm.rlp.block.BaseBlock`\r\n\t* Remove `BaseBlock.add_transaction` function\r\n2. Update `evm.vm.forks.frontier.blocks.FrontierBlock`\r\n\t* Remove `FrontierBlock.add_transaction` function\r\n3. For main chain,  add\r\n\t* Pure `evm.vm.base.apply_transaction`  function\r\n\t* Pure `evm.vm.forks.byzantium.blocks.add_transaction` function\r\n4. For shard chain,  add\r\n\t* Pure `evm.vm.base.apply_shard_transaction` function\r\n\t* Pure `evm.vm.sharding.collations.add_transaction` function\r\n\t* Pure `evm.vm.base.apply_shard_transaction_stateless` function\r\n\t* Pure `evm.vm.sharding.collations.add_transaction_stateless` function\r\n5. Description of  `add_transaction_stateless`\r\n\t1. Design of `add_transaction`:\r\n\t\t* For shard chain, create new `vm_class`\r\n\t\t* Pull out some logic of\r\n\t\t\t* `evm.vm.base.VM.apply_transaction` ([py-evm/base.py at master · ethereum/py-evm · GitHub](https://github.com/ethereum/py-evm/blob/master/evm/vm/base.py#L95-L102))\r\n\t\t\t* `evm.vm.forks.frontier.FrontierBlock.make_receipt` ([py-evm/blocks.py at master · ethereum/py-evm · GitHub](https://github.com/ethereum/py-evm/blob/master/evm/vm/forks/frontier/blocks.py#L213-L236))\r\n\r\n\t2. `apply_transaction` triggers `add_transaction`\r\n\t\t```python\r\n\t\tdef apply_transaction(prev_state_obj, chaindb, tx):\r\n\t\t    statedb = chaindb.get_state_db(self.block.header.state_root, read_only=False, \tstateless=True)\r\n\t\t    state = State(statedb, root_hash= prev_state_obj.root_hash, read_only=False)\r\n\t\t    add_transaction(state, tx)\r\n\t\t    state_obj = StateObj(root=state.root_hash.....)\r\n\t\t    \r\n\t\t    return state_obj, statedb.get_reads(), statedb.get_reads()\r\n\t\t```\r\n\r\n\t3. How to call `apply_transaction`\r\n\t\t```python\r\n\t\t# In apply_collation\r\n\t\t# ......\r\n\t\tfor tx in block.transactions:\r\n\t\t    state_obj, _reads, _writes = apply_transaction(stateobj, db, tx)\r\n\t\t    db = union(db, _writes)\r\n\t\t# .....\r\n\t\t```\r\n\r\n\r\n### Q4: I want to make sure when would `ChainDB` need to store the set of all of the touched keys.\r\n1. Main chain client: they don’t need witness to apply transaction\r\n2. Shard archival node:\r\n\t* Cache recent tx / collation witness data\r\n\t\t* ^^^^^ This is the only case that `ChainDB` store the touched keys? \r\n\t* [TBD] Do they need to cache visited account key-value?\r\n3. Shard stateless client:\r\n\t* The `touched keys`(reads, writes set) would be union during processing txs. So the `ChainDB` may only need to store `latest union set`.\r\n\r\n### Q5: If the scenario of Q4 is right,  regarding to updating `BaseChainDB`, my instinct for direction is:\r\nUpdating  `BaseChainDB.get_state_db(state_root, read_only)`\r\n\r\n```python\r\n    def get_state_db(self, state_root, read_only, stateless=False):\r\n        db = StateDB(self.db) if stateless else self.db\r\n        return State(db=db, root_hash=state_root, read_only=read_only)\r\n```\r\n\r\nAnd only shard client would call this function.\r\n\r\n---\r\n\r\nSorry for so many questions! Thank you for your time.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/350079783/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/350338853",
    "html_url": "https://github.com/ethereum/py-evm/issues/195#issuecomment-350338853",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/195",
    "id": 350338853,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MDMzODg1Mw==",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-08T18:38:12Z",
    "updated_at": "2017-12-08T18:44:30Z",
    "author_association": "MEMBER",
    "body": "> Q1: Is the `ChainDB` here means `BaseChainDB` class?\r\n\r\nMy bad,  anywhere you see `ChainDB` I mean `BaseChainDB`.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/350338853/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/350339268",
    "html_url": "https://github.com/ethereum/py-evm/issues/195#issuecomment-350339268",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/195",
    "id": 350339268,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MDMzOTI2OA==",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-08T18:39:49Z",
    "updated_at": "2017-12-08T18:44:24Z",
    "author_association": "MEMBER",
    "body": "> Q2: pure function for applying transactions feature is for both shard chain and main chain?\r\n\r\nThis makes sense but I didn't see a question.  If there is one can you clarify?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/350339268/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/350340050",
    "html_url": "https://github.com/ethereum/py-evm/issues/195#issuecomment-350340050",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/195",
    "id": 350340050,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MDM0MDA1MA==",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-08T18:42:56Z",
    "updated_at": "2017-12-08T18:48:52Z",
    "author_association": "MEMBER",
    "body": "> Q3: What would purified function need\r\n\r\nEverything you state under this section looks good and inline with my thinking.  Removing the transaction logic from the `Block` objects seems like a nice isolated first step that can be done independently.  I would suggest moving that API up into the `VM` class as `VM.add_transaction_to_block(block, transaction)`.  This could even be implemented in a pure form such that it doesn't mutate the `block` object but rather initializes a new one and returns it.\r\n\r\n> RE: vbuterin's comment: A chain object should NOT be necessary to process a block\r\n\r\nYes and No.\r\n\r\n- Yes in that the `Chain` class is largely just a convenience wrapper around the VM class when it comes to applying transactions.\r\n- No in that in the case where the list of previous headers crosses a fork boundry (early headers are in fork rules A, later headers are in fork rules B).  In this case you'll need something *above* the VM to be able to retrieve the appropriate headers for the previous VM rules.  This currently shouldn't be an issue since all of the VM classes share the same header RPL object but I suspect that will change at some point so we should be prepared for that.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/350340050/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/350341510",
    "html_url": "https://github.com/ethereum/py-evm/issues/195#issuecomment-350341510",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/195",
    "id": 350341510,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MDM0MTUxMA==",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-08T18:48:53Z",
    "updated_at": "2017-12-08T18:48:53Z",
    "author_association": "MEMBER",
    "body": "> Q4: I want to make sure when would `ChainDB` need to store the set of all of the touched keys.\r\n\r\nEverything you say here is inline with my understanding.\r\n\r\nI'm not sure if this is the right approach, but it *may* be useful to",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/350341510/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/350342240",
    "html_url": "https://github.com/ethereum/py-evm/issues/195#issuecomment-350342240",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/195",
    "id": 350342240,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MDM0MjI0MA==",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-08T18:51:45Z",
    "updated_at": "2017-12-08T18:51:45Z",
    "author_association": "MEMBER",
    "body": "> Q5: If the scenario of Q4 is right, regarding to updating `BaseChainDB`, my instinct for direction is:\r\n\r\nThis looks like a solid approach but I'll point the following out.  The `StateDB` object is ephemeral in that it comes into existence as a context manager when accessing the state is necessary and then is discarded after.  That means that the `ChainDB` will need to be responsible for persisting the touched keys.  This *may* be fine if the `db` instance passed into the `StateDB` is where the tracking occurs, at which point the `StateDB` can be blissfully unaware that all of the keys it touches are being tracked.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/350342240/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/350342333",
    "html_url": "https://github.com/ethereum/py-evm/issues/195#issuecomment-350342333",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/195",
    "id": 350342333,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MDM0MjMzMw==",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-08T18:52:09Z",
    "updated_at": "2017-12-08T18:52:09Z",
    "author_association": "MEMBER",
    "body": "@hwwhww I think I answered everything you asked.  Please follow up if you need clarification on anything.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/350342333/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/357413328",
    "html_url": "https://github.com/ethereum/py-evm/issues/195#issuecomment-357413328",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/195",
    "id": 357413328,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NzQxMzMyOA==",
    "user": {
      "login": "hwwhww",
      "id": 9263930,
      "node_id": "MDQ6VXNlcjkyNjM5MzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9263930?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hwwhww",
      "html_url": "https://github.com/hwwhww",
      "followers_url": "https://api.github.com/users/hwwhww/followers",
      "following_url": "https://api.github.com/users/hwwhww/following{/other_user}",
      "gists_url": "https://api.github.com/users/hwwhww/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hwwhww/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hwwhww/subscriptions",
      "organizations_url": "https://api.github.com/users/hwwhww/orgs",
      "repos_url": "https://api.github.com/users/hwwhww/repos",
      "events_url": "https://api.github.com/users/hwwhww/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hwwhww/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-13T06:20:08Z",
    "updated_at": "2018-01-13T06:20:08Z",
    "author_association": "MEMBER",
    "body": "close via #247",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/357413328/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
