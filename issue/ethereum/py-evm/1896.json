{
  "url": "https://api.github.com/repos/ethereum/py-evm/issues/1896",
  "repository_url": "https://api.github.com/repos/ethereum/py-evm",
  "labels_url": "https://api.github.com/repos/ethereum/py-evm/issues/1896/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/py-evm/issues/1896/comments",
  "events_url": "https://api.github.com/repos/ethereum/py-evm/issues/1896/events",
  "html_url": "https://github.com/ethereum/py-evm/issues/1896",
  "id": 535423983,
  "node_id": "MDU6SXNzdWU1MzU0MjM5ODM=",
  "number": 1896,
  "title": "It should be easier to debug consensus failures",
  "user": {
    "login": "lithp",
    "id": 466333,
    "node_id": "MDQ6VXNlcjQ2NjMzMw==",
    "avatar_url": "https://avatars.githubusercontent.com/u/466333?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/lithp",
    "html_url": "https://github.com/lithp",
    "followers_url": "https://api.github.com/users/lithp/followers",
    "following_url": "https://api.github.com/users/lithp/following{/other_user}",
    "gists_url": "https://api.github.com/users/lithp/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/lithp/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/lithp/subscriptions",
    "organizations_url": "https://api.github.com/users/lithp/orgs",
    "repos_url": "https://api.github.com/users/lithp/repos",
    "events_url": "https://api.github.com/users/lithp/events{/privacy}",
    "received_events_url": "https://api.github.com/users/lithp/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2019-12-10T00:49:28Z",
  "updated_at": "2019-12-10T08:59:57Z",
  "closed_at": null,
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "# What is wrong?\r\n\r\nIt took me a while to diagnose https://github.com/ethereum/py-evm/issues/1893, if debugging could be made easier that would be helpful during emergencies where Trinity has production users.\r\n\r\n1. In order to reproduce the error I was able to use the gethimport script to re-attempt processing the failing block. This was incredibly useful! \r\n    - Documentation on using gethimport, or instructions for using ipython (and how to get an rlp-encoded version of the offending block), would be great things to add to a playbook.\r\n2. When the block failed to import I got an error mentioning mix hashes, apparently the pow failed to validate. This is a very misleading error. Luckily, I had experience with this and knew that commenting out the POW check would help me find the root cause.\r\n    - Switching the order of checks, or catching the POW exception and raising the more-useful exception if it applies, would make debugging faster and more intuitive.\r\n3. After commenting out the POW check I got a better exception, which showed that when Trinity processes the block, it created a block with a different state root, receipts root, and gas cost. In order to drill further down I needed to add some code to `BaseVM.import_block` which printed each receipt. I was able to compare that with the output from the gethimport script (there's a command to dump the receipts for a block. I then manually compared gas costs until I found the first receipt which did not match.\r\n    - This would have been easier if there was some kind of command to dump the receipts trinity generated during block processing. This could be DEBUG output, or maybe a method callable from ipython which disables all checks and returns as much state as it can?\r\n4. After figuring out which transaction had been processed incorrectly, I asked Geth to create a trace of it. In order to get a trace from geth I had to run `geth attach` and then `debug.standardTraceBlockToFile(\"[block hash]\", {reexec:6000000})`.\r\n    - Finding `standardTraceBlockToFile` and the `reexec` command required asking in geth's discord channel. More familiarity with geth's docs, or some kind \"consensus failre\" playbook would have saved me time there.\r\n5. Trinity has no method of creating a trace, it only has DEBUG2 output. This made comparing traces extremely difficult. The Trinity trace was 49236 lines, and the geth trace was 23869 lines. Geth reports gas costs in hexadecimal, while Trinity reports them in decimal. \r\n    - If Trinity used  the standard trace format I could have ran diff and looked at the first place they diverged.\r\n6. Once the offending instruction gas cost had been identified finding the actual bug was pretty easy!",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/1896/reactions",
    "total_count": 2,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 2,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/py-evm/issues/1896/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/563933981",
    "html_url": "https://github.com/ethereum/py-evm/issues/1896#issuecomment-563933981",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/1896",
    "id": 563933981,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2MzkzMzk4MQ==",
    "user": {
      "login": "cburgdorf",
      "id": 521109,
      "node_id": "MDQ6VXNlcjUyMTEwOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/521109?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cburgdorf",
      "html_url": "https://github.com/cburgdorf",
      "followers_url": "https://api.github.com/users/cburgdorf/followers",
      "following_url": "https://api.github.com/users/cburgdorf/following{/other_user}",
      "gists_url": "https://api.github.com/users/cburgdorf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cburgdorf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cburgdorf/subscriptions",
      "organizations_url": "https://api.github.com/users/cburgdorf/orgs",
      "repos_url": "https://api.github.com/users/cburgdorf/repos",
      "events_url": "https://api.github.com/users/cburgdorf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cburgdorf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-12-10T08:59:57Z",
    "updated_at": "2019-12-10T08:59:57Z",
    "author_association": "MEMBER",
    "body": "Thanks for the writeup, very good points!\r\n\r\nJust some quick comments:\r\n\r\n>Documentation on using gethimport, or instructions for using ipython (and how to get an rlp-encoded version of the offending block), would be great things to add to a playbook.\r\n\r\nJust noting that trinity supports `import` / `export` commands (just recently added) that lets you do this.\r\n\r\nhttps://github.com/ethereum/trinity/blob/eb00e74249086b10c24f73081131f66d710ddcef/tests/integration/test_trinity_cli.py#L366-L418\r\n\r\nWe should probably add better coverage for that in the docs. In fact, a whole detailed guide on how to debug consensus errors would be great!\r\n\r\n>Luckily, I had experience with this and knew that commenting out the POW check would help me find the root cause.\r\n\r\nYes, good point. Just noting that as part of the Clique support we have some [refactoring](https://github.com/ethereum/py-evm/pull/1875) coming that will make it easier to disable the Pow checks. In fact, one could even run Trinity with something like `--consensus-engine no-proof`\r\n\r\n\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/563933981/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
