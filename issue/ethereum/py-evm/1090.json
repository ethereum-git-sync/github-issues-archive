{
  "url": "https://api.github.com/repos/ethereum/py-evm/issues/1090",
  "repository_url": "https://api.github.com/repos/ethereum/py-evm",
  "labels_url": "https://api.github.com/repos/ethereum/py-evm/issues/1090/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/py-evm/issues/1090/comments",
  "events_url": "https://api.github.com/repos/ethereum/py-evm/issues/1090/events",
  "html_url": "https://github.com/ethereum/py-evm/issues/1090",
  "id": 344481849,
  "node_id": "MDU6SXNzdWUzNDQ0ODE4NDk=",
  "number": 1090,
  "title": "Convert plugin API to be purely event based",
  "user": {
    "login": "pipermerriam",
    "id": 824194,
    "node_id": "MDQ6VXNlcjgyNDE5NA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/pipermerriam",
    "html_url": "https://github.com/pipermerriam",
    "followers_url": "https://api.github.com/users/pipermerriam/followers",
    "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
    "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
    "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
    "repos_url": "https://api.github.com/users/pipermerriam/repos",
    "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
    "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 815420353,
      "node_id": "MDU6TGFiZWw4MTU0MjAzNTM=",
      "url": "https://api.github.com/repos/ethereum/py-evm/labels/comp:%20trinity",
      "name": "comp: trinity",
      "color": "bfd4f2",
      "default": false,
      "description": ""
    },
    {
      "id": 983616278,
      "node_id": "MDU6TGFiZWw5ODM2MTYyNzg=",
      "url": "https://api.github.com/repos/ethereum/py-evm/labels/type:%20RFC%20/%20discussion%20/%20question",
      "name": "type: RFC / discussion / question",
      "color": "eeeeee",
      "default": false,
      "description": ""
    },
    {
      "id": 983629919,
      "node_id": "MDU6TGFiZWw5ODM2Mjk5MTk=",
      "url": "https://api.github.com/repos/ethereum/py-evm/labels/effort:%20E2%20days",
      "name": "effort: E2 days",
      "color": "bfe5bf",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": {
    "login": "cburgdorf",
    "id": 521109,
    "node_id": "MDQ6VXNlcjUyMTEwOQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/521109?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cburgdorf",
    "html_url": "https://github.com/cburgdorf",
    "followers_url": "https://api.github.com/users/cburgdorf/followers",
    "following_url": "https://api.github.com/users/cburgdorf/following{/other_user}",
    "gists_url": "https://api.github.com/users/cburgdorf/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cburgdorf/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cburgdorf/subscriptions",
    "organizations_url": "https://api.github.com/users/cburgdorf/orgs",
    "repos_url": "https://api.github.com/users/cburgdorf/repos",
    "events_url": "https://api.github.com/users/cburgdorf/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cburgdorf/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "cburgdorf",
      "id": 521109,
      "node_id": "MDQ6VXNlcjUyMTEwOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/521109?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cburgdorf",
      "html_url": "https://github.com/cburgdorf",
      "followers_url": "https://api.github.com/users/cburgdorf/followers",
      "following_url": "https://api.github.com/users/cburgdorf/following{/other_user}",
      "gists_url": "https://api.github.com/users/cburgdorf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cburgdorf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cburgdorf/subscriptions",
      "organizations_url": "https://api.github.com/users/cburgdorf/orgs",
      "repos_url": "https://api.github.com/users/cburgdorf/repos",
      "events_url": "https://api.github.com/users/cburgdorf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cburgdorf/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": {
    "url": "https://api.github.com/repos/ethereum/py-evm/milestones/8",
    "html_url": "https://github.com/ethereum/py-evm/milestone/8",
    "labels_url": "https://api.github.com/repos/ethereum/py-evm/milestones/8/labels",
    "id": 3727170,
    "node_id": "MDk6TWlsZXN0b25lMzcyNzE3MA==",
    "number": 8,
    "title": "Annie Easley (Trinity release)",
    "description": "https://en.wikipedia.org/wiki/Annie_Easley\r\n\r\nAnnie J. Easley (April 23, 1933 â€“ June 25, 2011) was an African-American computer scientist, mathematician, and rocket scientist.[1] She worked for the Lewis Research Center (now Glenn Research Center) of the National Aeronautics and Space Administration (NASA) and its predecessor, the National Advisory Committee for Aeronautics (NACA). She was a leading member of the team which developed software for the Centaur rocket stage and one of the first African-Americans to work as a computer scientist at NASA.",
    "creator": {
      "login": "cburgdorf",
      "id": 521109,
      "node_id": "MDQ6VXNlcjUyMTEwOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/521109?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cburgdorf",
      "html_url": "https://github.com/cburgdorf",
      "followers_url": "https://api.github.com/users/cburgdorf/followers",
      "following_url": "https://api.github.com/users/cburgdorf/following{/other_user}",
      "gists_url": "https://api.github.com/users/cburgdorf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cburgdorf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cburgdorf/subscriptions",
      "organizations_url": "https://api.github.com/users/cburgdorf/orgs",
      "repos_url": "https://api.github.com/users/cburgdorf/repos",
      "events_url": "https://api.github.com/users/cburgdorf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cburgdorf/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 0,
    "closed_issues": 4,
    "state": "closed",
    "created_at": "2018-10-10T10:25:02Z",
    "updated_at": "2019-04-10T15:43:13Z",
    "due_on": "2018-10-16T07:00:00Z",
    "closed_at": "2019-04-10T15:43:13Z"
  },
  "comments": 7,
  "created_at": "2018-07-25T14:59:51Z",
  "updated_at": "2018-12-14T13:46:48Z",
  "closed_at": "2018-12-14T13:46:48Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "### What things currently look like.\r\n\r\nThe current plugin API looks like this.\r\n\r\n- `configure_parser`: Hook that can be implemented by plugin to modify CLI parser configuration\r\n- `should_start`: Called by `PluginManager` to check whether a plugin should be started based on an *event*\r\n- `start`: Called by the `PluginManager` if `should_start` returns `True` and the plugin has not been started yet.\r\n- `stop`: Called by the `PluginManager` to stop plugins during shutdown.\r\n\r\nThe *Event* API works through the `PluginManager` and all events are fired by the `PluginManager`.  The following events are currenty available.\r\n\r\n- `TrinityStartupEvent` - broadcast when the `NodeClass` is launched/started\r\n- `PluginStartedEvent` - broadcast when a specific plugin is started\r\n- `ResourceAvaiableEvent` - broadcast when a resource becomes available\r\n\r\nThis API has been a good start, but it has been built in direct response to the needs presented by the transaction pool and the other initial plugin experiments.  Now that we are starting to see what a plugin might look like, I propose the following changes to this API.\r\n\r\n### What I think things should look like\r\n\r\nFirst, I want to better define the initialization process and plugin lifecycle.\r\n\r\n- `Plugin.bootstrap(arg_parser, sub_parser)`:\r\n  - The very thing that is called on a plugin.  Lets experiment with making this a `classmethod` since this will occur early enough in the process that I don't think we can realistically initialize plugins at this stage.\r\n  - This is where plugins get the chance to modify the CLI\r\n- `Plugin.__init__(args, token)`:\r\n  - Plugin classes get initialized.  \r\n  - `args` is the CLI `Argparser` result.\r\n  - `token` is a `CancelToken` that the plugin should use to gracefully handle shutdowns (not fully fleshed out).\r\n- `Plugin.ready(chain_config, broadcast_queue, subscription_queue)`\r\n  - Concept lifted from [django AppConfig.ready](https://docs.djangoproject.com/en/2.0/ref/applications/#django.apps.AppConfig.ready)\r\n  - Name subject to change\r\n  - Concept is that this is the last point prior to things *starting*\r\n  - `broadcast_queue` is an `asyncio.Queue` that the plugin can use to broadcast an event (more below)\r\n  - `subscription_queue` is an `asyncio.Queue` that the plugin can consume events that have been broadcast by other plugins. (more below)\r\n- `Plugin.run()`\r\n  - Starts the plugin\r\n- `Plugin.cancel()`\r\n  - Called when the app is exiting.  Last chance for a plugin to gracefully shutdown.\r\n\r\nAfter `ready` and before `shutdown` is when the app is running.  Within these boundaries, the Trinity application is running and plugins are *active*.  During this period, plugins interact via *events*.\r\n\r\nHere is the best description of how I think events should work.\r\n\r\n1. Events should probably be registered sometime during initialization.  This could happen automatically by the `PluginManager`.\r\n  - `Plugin.get_broadcast_events()`: Returns all of the events that this plugin can broadcast.\r\n  - `Plugin.get_subscription_events(registry):` Returns all of the events that this plugin wants to subscribe to.  The `registry` would be a data structure containing all of the registered events (and probably the plugin which registered them).\r\n2. Plugins may broadcast any event that it registered from `get_broadcast_events` using the `broadcast_queue`\r\n3. Plugins read events from the `subscription_queue` and respond.\r\n\r\nWe probably have a few *core* events that are provided by the plugin manager or some other built-in plugin.\r\n\r\n- `DiscoveryStarted` to give plugins access to the `DiscoveryService`\r\n- `PeerPoolStarted` to give plugins access to the `PeerPool`",
  "closed_by": {
    "login": "cburgdorf",
    "id": 521109,
    "node_id": "MDQ6VXNlcjUyMTEwOQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/521109?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cburgdorf",
    "html_url": "https://github.com/cburgdorf",
    "followers_url": "https://api.github.com/users/cburgdorf/followers",
    "following_url": "https://api.github.com/users/cburgdorf/following{/other_user}",
    "gists_url": "https://api.github.com/users/cburgdorf/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cburgdorf/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cburgdorf/subscriptions",
    "organizations_url": "https://api.github.com/users/cburgdorf/orgs",
    "repos_url": "https://api.github.com/users/cburgdorf/repos",
    "events_url": "https://api.github.com/users/cburgdorf/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cburgdorf/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/1090/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/py-evm/issues/1090/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/411353212",
    "html_url": "https://github.com/ethereum/py-evm/issues/1090#issuecomment-411353212",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/1090",
    "id": 411353212,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMTM1MzIxMg==",
    "user": {
      "login": "cburgdorf",
      "id": 521109,
      "node_id": "MDQ6VXNlcjUyMTEwOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/521109?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cburgdorf",
      "html_url": "https://github.com/cburgdorf",
      "followers_url": "https://api.github.com/users/cburgdorf/followers",
      "following_url": "https://api.github.com/users/cburgdorf/following{/other_user}",
      "gists_url": "https://api.github.com/users/cburgdorf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cburgdorf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cburgdorf/subscriptions",
      "organizations_url": "https://api.github.com/users/cburgdorf/orgs",
      "repos_url": "https://api.github.com/users/cburgdorf/repos",
      "events_url": "https://api.github.com/users/cburgdorf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cburgdorf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-08T09:58:26Z",
    "updated_at": "2018-08-08T09:58:26Z",
    "author_association": "MEMBER",
    "body": ">Lets experiment with making this a `classmethod` since this will occur early enough in the process that I don't think we can realistically initialize plugins at this stage\r\n\r\nI think I've found a potential problem with this. If the `bootstrap` method wants to take over the whole process (like the `attach` plugin does), it needs to assign a method to take over the process and if that method is a classmethod, it won't have access to the logger which I guess should remain instance based. \r\n\r\nE.g. the attach plugin currently uses the logger in that method which would have to become a class method under this design.\r\n\r\nhttps://github.com/ethereum/py-evm/blob/9695e6e519e5f41d7b2e7bfcbcaeae4bcf4b0d4d/trinity/plugins/builtin/attach/plugin.py#L43\r\n\r\nSo, if we consider that this method not only configures the parser but potentially defines a method to overtake the whole process, maybe it shouldn't become a classmethod? But that also changes the rest of the design. Need to give this more thought.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/411353212/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/411453537",
    "html_url": "https://github.com/ethereum/py-evm/issues/1090#issuecomment-411453537",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/1090",
    "id": 411453537,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMTQ1MzUzNw==",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-08T15:45:12Z",
    "updated_at": "2018-08-08T15:45:12Z",
    "author_association": "MEMBER",
    "body": "If the only problem is the `logger` then we can address that via some python wizardry using a very simple metaclass or descriptor.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/411453537/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/411454896",
    "html_url": "https://github.com/ethereum/py-evm/issues/1090#issuecomment-411454896",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/1090",
    "id": 411454896,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMTQ1NDg5Ng==",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-08T15:48:43Z",
    "updated_at": "2018-08-08T15:48:43Z",
    "author_association": "MEMBER",
    "body": "```python\r\nclass AutoLogger:\r\n    def __get__(self, obj, cls):\r\n        if self._logger is None:\r\n            self._logger = logging.getLogger(cls.__module__ + '.' + cls.__name__)\r\n        return self._logger\r\n\r\nclass HasLogger:\r\n    logger = AutoLogger()\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/411454896/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/411470181",
    "html_url": "https://github.com/ethereum/py-evm/issues/1090#issuecomment-411470181",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/1090",
    "id": 411470181,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMTQ3MDE4MQ==",
    "user": {
      "login": "cburgdorf",
      "id": 521109,
      "node_id": "MDQ6VXNlcjUyMTEwOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/521109?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cburgdorf",
      "html_url": "https://github.com/cburgdorf",
      "followers_url": "https://api.github.com/users/cburgdorf/followers",
      "following_url": "https://api.github.com/users/cburgdorf/following{/other_user}",
      "gists_url": "https://api.github.com/users/cburgdorf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cburgdorf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cburgdorf/subscriptions",
      "organizations_url": "https://api.github.com/users/cburgdorf/orgs",
      "repos_url": "https://api.github.com/users/cburgdorf/repos",
      "events_url": "https://api.github.com/users/cburgdorf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cburgdorf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-08T16:33:35Z",
    "updated_at": "2018-08-08T16:33:35Z",
    "author_association": "MEMBER",
    "body": "I'm not sure if I understand what it does since I haven't looked into metaclasses yet and I'm also not sure if `HasLogger` is supposed to stand for the plugin. In that case, I'd be left wondering if that wouldn't create a logger on the class level :thinking: \r\n\r\nHowever, on a more general note: Basically, it means that plugins that want to overtake the whole process are always restricted to assign a classmethod and don't have access to anything that is related to the *instance* of the plugin. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/411470181/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/411492014",
    "html_url": "https://github.com/ethereum/py-evm/issues/1090#issuecomment-411492014",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/1090",
    "id": 411492014,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMTQ5MjAxNA==",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-08T17:43:42Z",
    "updated_at": "2018-08-08T17:43:42Z",
    "author_association": "MEMBER",
    "body": "I'm gonna step back from this and let you figure it out. You're closer to the code.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/411492014/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/415701217",
    "html_url": "https://github.com/ethereum/py-evm/issues/1090#issuecomment-415701217",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/1090",
    "id": 415701217,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNTcwMTIxNw==",
    "user": {
      "login": "cburgdorf",
      "id": 521109,
      "node_id": "MDQ6VXNlcjUyMTEwOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/521109?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cburgdorf",
      "html_url": "https://github.com/cburgdorf",
      "followers_url": "https://api.github.com/users/cburgdorf/followers",
      "following_url": "https://api.github.com/users/cburgdorf/following{/other_user}",
      "gists_url": "https://api.github.com/users/cburgdorf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cburgdorf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cburgdorf/subscriptions",
      "organizations_url": "https://api.github.com/users/cburgdorf/orgs",
      "repos_url": "https://api.github.com/users/cburgdorf/repos",
      "events_url": "https://api.github.com/users/cburgdorf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cburgdorf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-24T09:10:31Z",
    "updated_at": "2018-08-24T09:10:31Z",
    "author_association": "MEMBER",
    "body": "I think with the event bus proving more and more as a viable solution, and if we don't hit a big performance problem, then, I think we should retire the plugin event mechanism entirely and simply let all event based communication go through the event bus.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/415701217/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/447330051",
    "html_url": "https://github.com/ethereum/py-evm/issues/1090#issuecomment-447330051",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/1090",
    "id": 447330051,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NzMzMDA1MQ==",
    "user": {
      "login": "cburgdorf",
      "id": 521109,
      "node_id": "MDQ6VXNlcjUyMTEwOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/521109?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cburgdorf",
      "html_url": "https://github.com/cburgdorf",
      "followers_url": "https://api.github.com/users/cburgdorf/followers",
      "following_url": "https://api.github.com/users/cburgdorf/following{/other_user}",
      "gists_url": "https://api.github.com/users/cburgdorf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cburgdorf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cburgdorf/subscriptions",
      "organizations_url": "https://api.github.com/users/cburgdorf/orgs",
      "repos_url": "https://api.github.com/users/cburgdorf/repos",
      "events_url": "https://api.github.com/users/cburgdorf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cburgdorf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-14T13:46:48Z",
    "updated_at": "2018-12-14T13:46:48Z",
    "author_association": "MEMBER",
    "body": "We achieved this by basing our plugin architecture on the event bus.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/447330051/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
