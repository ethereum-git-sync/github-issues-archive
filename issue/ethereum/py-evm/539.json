{
  "url": "https://api.github.com/repos/ethereum/py-evm/issues/539",
  "repository_url": "https://api.github.com/repos/ethereum/py-evm",
  "labels_url": "https://api.github.com/repos/ethereum/py-evm/issues/539/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/py-evm/issues/539/comments",
  "events_url": "https://api.github.com/repos/ethereum/py-evm/issues/539/events",
  "html_url": "https://github.com/ethereum/py-evm/issues/539",
  "id": 312787081,
  "node_id": "MDU6SXNzdWUzMTI3ODcwODE=",
  "number": 539,
  "title": "Minimal sharding protocol",
  "user": {
    "login": "hwwhww",
    "id": 9263930,
    "node_id": "MDQ6VXNlcjkyNjM5MzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/9263930?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hwwhww",
    "html_url": "https://github.com/hwwhww",
    "followers_url": "https://api.github.com/users/hwwhww/followers",
    "following_url": "https://api.github.com/users/hwwhww/following{/other_user}",
    "gists_url": "https://api.github.com/users/hwwhww/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hwwhww/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hwwhww/subscriptions",
    "organizations_url": "https://api.github.com/users/hwwhww/orgs",
    "repos_url": "https://api.github.com/users/hwwhww/repos",
    "events_url": "https://api.github.com/users/hwwhww/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hwwhww/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 630871768,
      "node_id": "MDU6TGFiZWw2MzA4NzE3Njg=",
      "url": "https://api.github.com/repos/ethereum/py-evm/labels/PR%20state:%20WIP",
      "name": "PR state: WIP",
      "color": "fbca04",
      "default": false,
      "description": ""
    },
    {
      "id": 769749869,
      "node_id": "MDU6TGFiZWw3Njk3NDk4Njk=",
      "url": "https://api.github.com/repos/ethereum/py-evm/labels/eth2.0",
      "name": "eth2.0",
      "color": "ff95ca",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 3,
  "created_at": "2018-04-10T06:21:16Z",
  "updated_at": "2018-06-15T07:44:23Z",
  "closed_at": "2018-06-15T07:44:23Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "# Minimal sharding protocol - the basic sharding committee\r\n\r\nAimed to https://ethresear.ch/t/a-minimal-sharding-protocol-that-may-be-worthwhile-as-a-development-target-now/1650\r\n\r\n## What's new\r\n\r\n1. No more proposing-collating game.\r\n2. \"collator\" -> \"notary\"\r\n3. `Notaries` will sign the collation (more like Casper validators).\r\n4. Constants\r\n    * `COMMITTEE_SIZE` := 135\r\n    * `QUORUM_SIZE` := 90\r\n5. `COMMITTEE_SIZE` **notaries** are sampled per block from the `notaries_pool` per period per shard.\r\n6. No lookahead and no windback in this scheme: notaries are selected at the start of the period, and they only need to download the collation created in that period.\r\n\r\n## Messages or DB data\r\n\r\n#### Collation\r\n```\r\n[\r\n    header: CollationHeader,\r\n    body: CollationBody\r\n]\r\n```\r\n\r\n#### CollationHeader\r\n> Don't need to be broadcasted in the P2P network.\r\n```\r\n[\r\n    shard_id: uint256,\r\n    chunk_root: bytes32\r\n    period: uint256,\r\n    proposer_address: address,\r\n]\r\n```\r\n\r\n#### CollationBody\r\n```\r\nWe don't really care for now.\r\n```\r\n\r\n### SMC\r\nsee https://github.com/ethereum/sharding/issues/76\r\n\r\n## Proposing-Voting Procedure\r\n1. When the shard clients know block10 hash = 0x1234 (period 2 starts) -> sample `COMMITTEE_SIZE` notaries\r\n    1. **[Proposer]** \r\n        * creates collation\r\n        * signs collation\r\n        * sends `add_header` tx to SMC\r\n        * broadcasts the collation to shard network\r\n    2. **[Selected notary]**\r\n        - monitors the SMC, looks at the first `HeaderAdded` of the given period -> calculate the collation hash.\r\n        - verifies the data availability of the collation\r\n        - `submit_vote` txs are sent on chain and included in period 2\r\n    3. **[Shard full node]**\r\n        - monitors the SMC, look at the first `HeaderAdded` of the given period -> calculate the collation hash.\r\n        - monitors the SMC, look at the `Vote` logs\r\n            - If the collation gets `QUORUM_SIZE` notaries vote for it, downloads it and accepts it as part of the canonical chain.\r\n            - Else, abandons this collation.\r\n\r\n2. When the shard clients know block15 hash = 0x5678 (period 3 starts)\r\n    * repeat it.\r\n\r\n\r\n## Client Full Syncing Procedure\r\n\r\n1. **[Query receipts]** Starts the query from `SMC.deployed_block_number` block and finds the first `HeaderAdded` log of the given shard with the given period. \r\n2. **[Query receipts]** Calculates the `Vote` logs of the given shard with the given period\r\n3. If voting passed, tries to download the collation body and asks shard chain peers for the collation.\r\n    * **üçµüçµüçµ: We just assume it *should* be available, so if the collation unavailable... throw an exception for now?**\r\n    [Vitalik] In practice, there are two ways out. Post-tight-coupling, if this ever happens, the entire main chain from that point, including all collations in other shards, should be thrown out. \r\n\r\n> **üçµüçµüçµ: Asking peers for one collation each time is inefficient. Maybe querying a series of collation headers and then asking a series of collation bodies?**\r\n    [Vitalik] Sure, sounds sensible\r\n",
  "closed_by": {
    "login": "jannikluhn",
    "id": 29854669,
    "node_id": "MDQ6VXNlcjI5ODU0NjY5",
    "avatar_url": "https://avatars.githubusercontent.com/u/29854669?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jannikluhn",
    "html_url": "https://github.com/jannikluhn",
    "followers_url": "https://api.github.com/users/jannikluhn/followers",
    "following_url": "https://api.github.com/users/jannikluhn/following{/other_user}",
    "gists_url": "https://api.github.com/users/jannikluhn/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jannikluhn/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jannikluhn/subscriptions",
    "organizations_url": "https://api.github.com/users/jannikluhn/orgs",
    "repos_url": "https://api.github.com/users/jannikluhn/repos",
    "events_url": "https://api.github.com/users/jannikluhn/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jannikluhn/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/539/reactions",
    "total_count": 3,
    "+1": 1,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 2,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/py-evm/issues/539/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/380107060",
    "html_url": "https://github.com/ethereum/py-evm/issues/539#issuecomment-380107060",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/539",
    "id": 380107060,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MDEwNzA2MA==",
    "user": {
      "login": "hwwhww",
      "id": 9263930,
      "node_id": "MDQ6VXNlcjkyNjM5MzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9263930?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hwwhww",
      "html_url": "https://github.com/hwwhww",
      "followers_url": "https://api.github.com/users/hwwhww/followers",
      "following_url": "https://api.github.com/users/hwwhww/following{/other_user}",
      "gists_url": "https://api.github.com/users/hwwhww/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hwwhww/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hwwhww/subscriptions",
      "organizations_url": "https://api.github.com/users/hwwhww/orgs",
      "repos_url": "https://api.github.com/users/hwwhww/repos",
      "events_url": "https://api.github.com/users/hwwhww/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hwwhww/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-10T13:55:27Z",
    "updated_at": "2018-04-11T10:12:36Z",
    "author_association": "MEMBER",
    "body": "Eww, there will be a problem when applying full sync: before the client calculates the votes, they have to check who are the selected committee members via calling `SMC.get_committee(shard_id, period)`. But by the time, `notary_pool_len` may be already changed because some notaries registered or deregistered. So the return value from `SMC.get_committee(shard_id, period)` may be different from the real selected committee that was generated right after the period started.\r\n\r\nIt's similar to https://github.com/ethereum/py-evm/issues/456\r\n\r\nSolution discussion: https://ethresear.ch/t/per-period-committee-snapshot/1703/",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/380107060/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/380359968",
    "html_url": "https://github.com/ethereum/py-evm/issues/539#issuecomment-380359968",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/539",
    "id": 380359968,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MDM1OTk2OA==",
    "user": {
      "login": "NIC619",
      "id": 17670147,
      "node_id": "MDQ6VXNlcjE3NjcwMTQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/17670147?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NIC619",
      "html_url": "https://github.com/NIC619",
      "followers_url": "https://api.github.com/users/NIC619/followers",
      "following_url": "https://api.github.com/users/NIC619/following{/other_user}",
      "gists_url": "https://api.github.com/users/NIC619/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NIC619/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NIC619/subscriptions",
      "organizations_url": "https://api.github.com/users/NIC619/orgs",
      "repos_url": "https://api.github.com/users/NIC619/repos",
      "events_url": "https://api.github.com/users/NIC619/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NIC619/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-11T07:46:51Z",
    "updated_at": "2018-04-11T07:46:51Z",
    "author_association": "MEMBER",
    "body": "IMO the most viable way is to check in `submit_vote` that the voter is qualified.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/380359968/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/385077917",
    "html_url": "https://github.com/ethereum/py-evm/issues/539#issuecomment-385077917",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/539",
    "id": 385077917,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NTA3NzkxNw==",
    "user": {
      "login": "hwwhww",
      "id": 9263930,
      "node_id": "MDQ6VXNlcjkyNjM5MzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9263930?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hwwhww",
      "html_url": "https://github.com/hwwhww",
      "followers_url": "https://api.github.com/users/hwwhww/followers",
      "following_url": "https://api.github.com/users/hwwhww/following{/other_user}",
      "gists_url": "https://api.github.com/users/hwwhww/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hwwhww/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hwwhww/subscriptions",
      "organizations_url": "https://api.github.com/users/hwwhww/orgs",
      "repos_url": "https://api.github.com/users/hwwhww/repos",
      "events_url": "https://api.github.com/users/hwwhww/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hwwhww/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-27T19:57:48Z",
    "updated_at": "2018-04-27T19:58:38Z",
    "author_association": "MEMBER",
    "body": "Latest discussion: https://ethresear.ch/t/minimal-sharding-protocol-extension/1823",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/385077917/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
