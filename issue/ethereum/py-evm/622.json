{
  "url": "https://api.github.com/repos/ethereum/py-evm/issues/622",
  "repository_url": "https://api.github.com/repos/ethereum/py-evm",
  "labels_url": "https://api.github.com/repos/ethereum/py-evm/issues/622/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/py-evm/issues/622/comments",
  "events_url": "https://api.github.com/repos/ethereum/py-evm/issues/622/events",
  "html_url": "https://github.com/ethereum/py-evm/issues/622",
  "id": 319132687,
  "node_id": "MDU6SXNzdWUzMTkxMzI2ODc=",
  "number": 622,
  "title": "Explore alternative for current configuration approach",
  "user": {
    "login": "cburgdorf",
    "id": 521109,
    "node_id": "MDQ6VXNlcjUyMTEwOQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/521109?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cburgdorf",
    "html_url": "https://github.com/cburgdorf",
    "followers_url": "https://api.github.com/users/cburgdorf/followers",
    "following_url": "https://api.github.com/users/cburgdorf/following{/other_user}",
    "gists_url": "https://api.github.com/users/cburgdorf/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cburgdorf/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cburgdorf/subscriptions",
    "organizations_url": "https://api.github.com/users/cburgdorf/orgs",
    "repos_url": "https://api.github.com/users/cburgdorf/repos",
    "events_url": "https://api.github.com/users/cburgdorf/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cburgdorf/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 831115091,
      "node_id": "MDU6TGFiZWw4MzExMTUwOTE=",
      "url": "https://api.github.com/repos/ethereum/py-evm/labels/PR%20state:%20needs%20review",
      "name": "PR state: needs review",
      "color": "34daed",
      "default": false,
      "description": ""
    },
    {
      "id": 1169245993,
      "node_id": "MDU6TGFiZWwxMTY5MjQ1OTkz",
      "url": "https://api.github.com/repos/ethereum/py-evm/labels/Probably%20Close",
      "name": "Probably Close",
      "color": "5319e7",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2018-05-01T07:02:47Z",
  "updated_at": "2018-12-21T18:41:17Z",
  "closed_at": null,
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "### What is wrong?\r\n\r\nThe way I understand it, we currently use `Configurable` as a way to dynamically generate classes (or maybe better: class like objects?). We use that all over the place e.g.\r\n\r\n```python\r\nFrontierVM = VM.configure(\r\n    # class name\r\n    __name__='FrontierVM',\r\n    # fork name\r\n    fork='frontier',\r\n    # classes\r\n    _state_class=FrontierState,\r\n    # helpers\r\n    create_header_from_parent=staticmethod(create_frontier_header_from_parent),\r\n    compute_difficulty=staticmethod(compute_frontier_difficulty),\r\n    configure_header=configure_frontier_header,\r\n)\r\n```\r\n\r\nThe way I understand the mechanism, it basically lets you take a class as a blueprint and generate a new one with several properties and sub properties altered.\r\n\r\nI'm not entirely sure if all of its functionality could be achieved with regular style inheritance or if it contains things that would not work with classical inheritance. In other words, I'm not sure if it is just syntactic sugar to have a more concise mechanism or if contains stuff that would be hard to achieve the classical way. I'll assume that **it does** have some special power for now.\r\n\r\nWhile there is no big problem with this approach per se I noticed a couple of minor things that I considered worth enough to write down.\r\n\r\n- the current mechanism doesn't play nice with `mypy` or types in general. In the above example `FrontierVM` really acts as a class but isn't recognized as such from the type system\r\n\r\n- as an extension to the previous point, the type system doesn't know that `FrontierVM` inherits from `VM`\r\n\r\n- not having proper `class` syntax makes it harder to document as one can not simple write e.g.\r\n\r\n```python\r\n\r\nclass FrontierVM\r\n    \"\"\"\r\n    Frontier anyone?\r\n    \"\"\"\r\n    ...\r\n```\r\n\r\n- just from looking at the code it is less obvious that this thing really is meant to be treated as a class\r\n\r\n### How can it be fixed\r\n\r\n1. If we assume that there is nothing `Configurable` achieves that the classical inheritance style could not achieve than obviously we could simply *consider* using the classical style if we think it would be worthwhile.\r\n\r\n2. Alternatively, I guess we could come up with some kind of decorator based approach that might translate the example above into something roughly equivalent to the following.\r\n\r\n```python\r\n\r\n@configure(\r\n    # fork name\r\n    fork='frontier',\r\n    # classes\r\n    _state_class=FrontierState,\r\n    # helpers\r\n    create_header_from_parent=staticmethod(create_frontier_header_from_parent),\r\n    compute_difficulty=staticmethod(compute_frontier_difficulty),\r\n    configure_header=configure_frontier_header,\r\n)\r\nclass FrontierVM(VM):\r\n    \"\"\"\r\n    Definitely Frontier! \r\n    \"\"\"\r\n    pass\r\n```\r\n\r\nThis isn't a real proposal for something I think we *should do*. I don't know much about the reasoning behind the current mechanism so I'm just putting this out as something to discuss.",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/622/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/py-evm/issues/622/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/385773778",
    "html_url": "https://github.com/ethereum/py-evm/issues/622#issuecomment-385773778",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/622",
    "id": 385773778,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NTc3Mzc3OA==",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-01T20:03:25Z",
    "updated_at": "2018-05-01T20:03:25Z",
    "author_association": "MEMBER",
    "body": "It would be fine to replace **all** of the hard coded classes like `FrontierVM` with regular style class inheritance.  \r\n\r\nIt's possible we can do away with the `Configurable` API completely, and probably worth exploring.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/385773778/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/386239829",
    "html_url": "https://github.com/ethereum/py-evm/issues/622#issuecomment-386239829",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/622",
    "id": 386239829,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NjIzOTgyOQ==",
    "user": {
      "login": "cburgdorf",
      "id": 521109,
      "node_id": "MDQ6VXNlcjUyMTEwOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/521109?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cburgdorf",
      "html_url": "https://github.com/cburgdorf",
      "followers_url": "https://api.github.com/users/cburgdorf/followers",
      "following_url": "https://api.github.com/users/cburgdorf/following{/other_user}",
      "gists_url": "https://api.github.com/users/cburgdorf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cburgdorf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cburgdorf/subscriptions",
      "organizations_url": "https://api.github.com/users/cburgdorf/orgs",
      "repos_url": "https://api.github.com/users/cburgdorf/repos",
      "events_url": "https://api.github.com/users/cburgdorf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cburgdorf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-03T09:32:38Z",
    "updated_at": "2018-05-03T09:32:38Z",
    "author_association": "MEMBER",
    "body": "Let me copy over your comment from https://github.com/ethereum/py-evm/issues/592#issuecomment-386040975\r\n\r\n>Also worth pointing out that this is the reason for the `Configurable` API.\r\n\r\n>Instead of having to define all of these classes just for testing you can do this.\r\n\r\n```python\r\n@pytest.fixture(params=[FrontierVM, HomesteadVM, ...])\r\ndef chain_for_testing(request):\r\n    return Chain.configure(vm_configuration=((0, request.param),))\r\n```\r\n\r\nI have a couple of thoughts on that but I think I'll let them mature for a while and maybe come back with a bit of code at some point to discuss further. It's not something that *needs* to be addressed but rather just worth exploring if it can be improved. Thanks for leaving your thoughts and providing the background information about why we use that pattern!",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/386239829/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
