{
  "url": "https://api.github.com/repos/ethereum/py-evm/issues/1928",
  "repository_url": "https://api.github.com/repos/ethereum/py-evm",
  "labels_url": "https://api.github.com/repos/ethereum/py-evm/issues/1928/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/py-evm/issues/1928/comments",
  "events_url": "https://api.github.com/repos/ethereum/py-evm/issues/1928/events",
  "html_url": "https://github.com/ethereum/py-evm/issues/1928",
  "id": 620940943,
  "node_id": "MDU6SXNzdWU2MjA5NDA5NDM=",
  "number": 1928,
  "title": "Handle case of gap incorrectly being filled with checkpoint header",
  "user": {
    "login": "cburgdorf",
    "id": 521109,
    "node_id": "MDQ6VXNlcjUyMTEwOQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/521109?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cburgdorf",
    "html_url": "https://github.com/cburgdorf",
    "followers_url": "https://api.github.com/users/cburgdorf/followers",
    "following_url": "https://api.github.com/users/cburgdorf/following{/other_user}",
    "gists_url": "https://api.github.com/users/cburgdorf/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cburgdorf/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cburgdorf/subscriptions",
    "organizations_url": "https://api.github.com/users/cburgdorf/orgs",
    "repos_url": "https://api.github.com/users/cburgdorf/repos",
    "events_url": "https://api.github.com/users/cburgdorf/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cburgdorf/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 630871939,
      "node_id": "MDU6TGFiZWw2MzA4NzE5Mzk=",
      "url": "https://api.github.com/repos/ethereum/py-evm/labels/type:%20bug",
      "name": "type: bug",
      "color": "eeeeee",
      "default": false,
      "description": ""
    },
    {
      "id": 983613604,
      "node_id": "MDU6TGFiZWw5ODM2MTM2MDQ=",
      "url": "https://api.github.com/repos/ethereum/py-evm/labels/comp:%20eth",
      "name": "comp: eth",
      "color": "bfd4f2",
      "default": false,
      "description": ""
    },
    {
      "id": 983628230,
      "node_id": "MDU6TGFiZWw5ODM2MjgyMzA=",
      "url": "https://api.github.com/repos/ethereum/py-evm/labels/prio:%20P3%20important",
      "name": "prio: P3 important",
      "color": "fad8c7",
      "default": false,
      "description": ""
    },
    {
      "id": 983629570,
      "node_id": "MDU6TGFiZWw5ODM2Mjk1NzA=",
      "url": "https://api.github.com/repos/ethereum/py-evm/labels/effort:%20E1%20hours",
      "name": "effort: E1 hours",
      "color": "bfe5bf",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2020-05-19T12:35:33Z",
  "updated_at": "2020-05-29T16:51:04Z",
  "closed_at": "2020-05-29T16:51:04Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "### What is wrong?\r\n\r\nConsider the following scenario:\r\n\r\n```\r\nA3 (set checkpoint)\r\nB0:2 (now canonical)\r\nA2 (set checkpoint)\r\n# At this point `A2` becomes the new head and `get_header_chain_gaps`\r\n# will report no gaps. While that is technically true `B1` is not a parent of `A2`\r\n# and so we allowed getting into a situation where we do not recognize a gap,\r\n# yet don't have a well-connected chain.\r\n```\r\n\r\n### How can it be fixed\r\n\r\nFrom https://github.com/ethereum/py-evm/pull/1924#discussion_r427207209\r\n\r\nWhen we set A2 as a new checkpoint it becomes the new canonical head and we stop caring about A3. I think that is the way it should be (For some reason, the user decided to set the checkpoint to A2, imho that should be given precedence).\r\n\r\nBut know what happens is that A2 is closing a gap \"backwards\" which isn't what we want here! We get into a situation where our gap tracking would think we have a well-connected chain which isn't the case!\r\n\r\nSo, my idea is that `persist_checkpoint_header` must be altered to notice situations when it is backwards filling a gap and then do one of these things:\r\n\r\n1. Raise an exception. Let client code now that they can not pick this checkpoint before they bring the database into a different state\r\n\r\n2. Alternatively, remove the B1 header to create a new gap to continue to track this missing connection. Removing just the single header before A2 should be enough because we do not know where exactly the fork might be (which are uncles, which are actual parents)",
  "closed_by": {
    "login": "carver",
    "id": 205327,
    "node_id": "MDQ6VXNlcjIwNTMyNw==",
    "avatar_url": "https://avatars.githubusercontent.com/u/205327?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/carver",
    "html_url": "https://github.com/carver",
    "followers_url": "https://api.github.com/users/carver/followers",
    "following_url": "https://api.github.com/users/carver/following{/other_user}",
    "gists_url": "https://api.github.com/users/carver/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/carver/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/carver/subscriptions",
    "organizations_url": "https://api.github.com/users/carver/orgs",
    "repos_url": "https://api.github.com/users/carver/repos",
    "events_url": "https://api.github.com/users/carver/events{/privacy}",
    "received_events_url": "https://api.github.com/users/carver/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/1928/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/py-evm/issues/1928/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/631164350",
    "html_url": "https://github.com/ethereum/py-evm/issues/1928#issuecomment-631164350",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/1928",
    "id": 631164350,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzMTE2NDM1MA==",
    "user": {
      "login": "carver",
      "id": 205327,
      "node_id": "MDQ6VXNlcjIwNTMyNw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/205327?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/carver",
      "html_url": "https://github.com/carver",
      "followers_url": "https://api.github.com/users/carver/followers",
      "following_url": "https://api.github.com/users/carver/following{/other_user}",
      "gists_url": "https://api.github.com/users/carver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/carver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/carver/subscriptions",
      "organizations_url": "https://api.github.com/users/carver/orgs",
      "repos_url": "https://api.github.com/users/carver/repos",
      "events_url": "https://api.github.com/users/carver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/carver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-20T00:34:40Z",
    "updated_at": "2020-05-20T00:34:40Z",
    "author_association": "MEMBER",
    "body": "> When we set A2 as a new checkpoint it becomes the new canonical head and we stop caring about A3. I think that is the way it should be (For some reason, the user decided to set the checkpoint to A2, imho that should be given precedence).\r\n\r\nHm, I'd like to think about this some more. If I reuse the *same* checkpoint multiple times, it doesn't mean I want to reset the chain head back to the old checkpoint, it just means I want the same base. This is a truly weird corner case (how often will it be set to precisely the parent of an old checkpoint?) but I *think* I'd want it to stitch together with an existing canonical chain if there is one.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/631164350/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/631753976",
    "html_url": "https://github.com/ethereum/py-evm/issues/1928#issuecomment-631753976",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/1928",
    "id": 631753976,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzMTc1Mzk3Ng==",
    "user": {
      "login": "carver",
      "id": 205327,
      "node_id": "MDQ6VXNlcjIwNTMyNw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/205327?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/carver",
      "html_url": "https://github.com/carver",
      "followers_url": "https://api.github.com/users/carver/followers",
      "following_url": "https://api.github.com/users/carver/following{/other_user}",
      "gists_url": "https://api.github.com/users/carver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/carver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/carver/subscriptions",
      "organizations_url": "https://api.github.com/users/carver/orgs",
      "repos_url": "https://api.github.com/users/carver/repos",
      "events_url": "https://api.github.com/users/carver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/carver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-20T22:09:01Z",
    "updated_at": "2020-05-20T22:09:01Z",
    "author_association": "MEMBER",
    "body": "> 2\\. remove the B1 header to create a new gap to continue to track this missing connection. Removing just the single header before A2 should be enough because we do not know where exactly the fork might be (which are uncles, which are actual parents)\r\n\r\nGot a version of this in #1930 ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/631753976/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
