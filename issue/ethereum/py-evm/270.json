{
  "url": "https://api.github.com/repos/ethereum/py-evm/issues/270",
  "repository_url": "https://api.github.com/repos/ethereum/py-evm",
  "labels_url": "https://api.github.com/repos/ethereum/py-evm/issues/270/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/py-evm/issues/270/comments",
  "events_url": "https://api.github.com/repos/ethereum/py-evm/issues/270/events",
  "html_url": "https://github.com/ethereum/py-evm/issues/270",
  "id": 288418815,
  "node_id": "MDU6SXNzdWUyODg0MTg4MTU=",
  "number": 270,
  "title": "Decouple blockchain opcodes and state mutable data",
  "user": {
    "login": "hwwhww",
    "id": 9263930,
    "node_id": "MDQ6VXNlcjkyNjM5MzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/9263930?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hwwhww",
    "html_url": "https://github.com/hwwhww",
    "followers_url": "https://api.github.com/users/hwwhww/followers",
    "following_url": "https://api.github.com/users/hwwhww/following{/other_user}",
    "gists_url": "https://api.github.com/users/hwwhww/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hwwhww/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hwwhww/subscriptions",
    "organizations_url": "https://api.github.com/users/hwwhww/orgs",
    "repos_url": "https://api.github.com/users/hwwhww/repos",
    "events_url": "https://api.github.com/users/hwwhww/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hwwhww/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 769749869,
      "node_id": "MDU6TGFiZWw3Njk3NDk4Njk=",
      "url": "https://api.github.com/repos/ethereum/py-evm/labels/eth2.0",
      "name": "eth2.0",
      "color": "ff95ca",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": {
    "login": "hwwhww",
    "id": 9263930,
    "node_id": "MDQ6VXNlcjkyNjM5MzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/9263930?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hwwhww",
    "html_url": "https://github.com/hwwhww",
    "followers_url": "https://api.github.com/users/hwwhww/followers",
    "following_url": "https://api.github.com/users/hwwhww/following{/other_user}",
    "gists_url": "https://api.github.com/users/hwwhww/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hwwhww/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hwwhww/subscriptions",
    "organizations_url": "https://api.github.com/users/hwwhww/orgs",
    "repos_url": "https://api.github.com/users/hwwhww/repos",
    "events_url": "https://api.github.com/users/hwwhww/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hwwhww/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "hwwhww",
      "id": 9263930,
      "node_id": "MDQ6VXNlcjkyNjM5MzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9263930?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hwwhww",
      "html_url": "https://github.com/hwwhww",
      "followers_url": "https://api.github.com/users/hwwhww/followers",
      "following_url": "https://api.github.com/users/hwwhww/following{/other_user}",
      "gists_url": "https://api.github.com/users/hwwhww/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hwwhww/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hwwhww/subscriptions",
      "organizations_url": "https://api.github.com/users/hwwhww/orgs",
      "repos_url": "https://api.github.com/users/hwwhww/repos",
      "events_url": "https://api.github.com/users/hwwhww/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hwwhww/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2018-01-14T16:01:56Z",
  "updated_at": "2018-01-18T08:11:44Z",
  "closed_at": "2018-01-18T08:11:44Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "### What is wrong?\r\n\r\n1. Decouple `VMState.block_header` and `VMState` properties (`timestamp, block_number, difficulty, and gas_limit)`, because shard chains use `period_start_prevhash` block properties of main chain in contracts, but `VMState.state_db()` should use the `state_root` of `VMState.collation_header` to build the state root trie.\r\n2. Note that only `COINBASE` opcode refers to the shard coinbase.\r\n\r\n\r\n### How can it be fixed\r\n\r\n1. As v suggested, implement a simple `BlockInfo` class:\r\n\r\n    ```python\r\n    class BlockInfo():\r\n        # For shard chain, refer to the shard coinbase.\r\n        _coinbase = None\r\n\r\n        # For shard chian, block data of period_start_prevhash.\r\n        _timestamp = None\r\n        _number = None\r\n        _difficulty = None\r\n        _gas_limit = None\r\n        _prev_headers = None\r\n\r\n        def __init__(\r\n                self,\r\n                coinbase,\r\n                timestamp,\r\n                number,\r\n                difficulty,\r\n                gas_limit,\r\n                prev_headers):\r\n            self._coinbase = coinbase\r\n            self._timestamp = timestamp\r\n            self._number = number\r\n            self._difficulty = difficulty\r\n            self._gas_limit = gas_limit\r\n            self._prev_headers = prev_headers\r\n\r\n        @property\r\n        def coinbase(self):\r\n            return self._coinbase\r\n\r\n        @property\r\n        def timestamp(self):\r\n            return self._timestamp\r\n\r\n        @property\r\n        def number(self):\r\n            return self._number\r\n\r\n        @property\r\n        def difficulty(self):\r\n            return self._difficulty\r\n\r\n        @property\r\n        def gas_limit(self):\r\n            return self._gas_limit\r\n\r\n        @property\r\n        def prev_headers(self):\r\n            return self._prev_headers\r\n    ```\r\n\r\n2. Pass  `block_info` to initialize `VMState`.\r\n3. Assign `coinbase` separately.\r\n4. Arrange/Refactor the temporary mutable data during state transition: \r\n\t* Part of  the given block’s header from `VMState.__init__(..., block_header, ...)` and replace with  `VMState.apply_transaction(...,block,...)`\r\n\t\t* `state_root`\r\n\t\t* `gas_used` - update in `VMState.make_receipt`\r\n\t* `receipts`  - now is part of `VMState`\r\n\t* **Solution 1**: generalize `VMState.block_header` to `VMState.header` and make sure it’s compatible for both `BlockHeader` and `CollationHeader` structure.\r\n\t* **Solution 2**:\r\n\t\t1. pass `block` to `VMState.make_receipt` function so that we just use the given block to maintain `gas_used`.\r\n\t\t2. pass `state_root` and `receipts` to `VMState.__init__(...,state_root, receipts, ...)`\r\n\t* **Solution 3**: apply Vitalik’s suggestion to arrange these variables to a new simple `StateObj` structure. And the apply transaction would become:\r\n\r\n    ```python\r\n    # In create_block level function\r\n    # state_obj: previous state_obj or new StateObj\r\n\r\n    state_obj = StateObj(\r\n        state_root=state_obj.state_root,\r\n        gas_used=state_obj.gas_used,\r\n        receipts=state_obj.receipts,\r\n    )\r\n    block_info = BlockInfo(\r\n        coinbase=block.header.coinbase,    # or collation.coinbase\r\n        timestamp=block.header.timestamp,\r\n        number=block.header.number,\r\n        difficulty=block.header.difficulty,\r\n        gas_limit=block.header.gas_limit,\r\n        prev_headers=prev_headers,\r\n    )\r\n    vm_state = cls.get_state_class()(\r\n        chaindb=witness_db,\r\n        state_obj=state_obj,\r\n        block_info=block_info,\r\n    )\r\n    computation, result_block, _ = vm_state.apply_transaction(\r\n        transaction=transaction,\r\n        block=block,\r\n        is_stateless=True,\r\n    )\r\n    state_obj = computation.vm_state.state_obj\r\n    ```\r\n    I'd like to try **Solution 2** first because I want keep the `VMState` simple, and I'm also fine with **Solution 3**.\r\n\r\n5. Check with @pipermerriam : do we design that `VMState` only be used for handling the “transaction level” state transition? Or we would introduce “block level” function like `VMState.apply_block` function?\r\n \r\n6. About uncle validation, there are: \r\n\t* `Chain.mine_block` or `Chain.import_block(block)`\r\n\t    └─ `Chain.validate_block(block)`\r\n\t\t\t    └─ `Chain.validate_uncles(block)`\r\n\t*  `VM.pack_block(block)`\r\n\t    └─  `VMState.validate_block(block)`\r\n\t\t\t    └─`VMState.validate_uncle(block, uncle)`\r\n\r\n    Regarding (5):\r\n    * If `VMState` only handle “transaction level” state transition:\r\n\t    * The  `VMState.validate_block(block)` should be move to `VM`.\r\n\t    * With this change, we can also modify `VMState.prev_header` to simpler `VMState.prev_hashes`.\r\n    * If `VMState` also handle “block level” state transition, should we move some more functions from `VM` to `VMState`?\r\n",
  "closed_by": {
    "login": "hwwhww",
    "id": 9263930,
    "node_id": "MDQ6VXNlcjkyNjM5MzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/9263930?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hwwhww",
    "html_url": "https://github.com/hwwhww",
    "followers_url": "https://api.github.com/users/hwwhww/followers",
    "following_url": "https://api.github.com/users/hwwhww/following{/other_user}",
    "gists_url": "https://api.github.com/users/hwwhww/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hwwhww/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hwwhww/subscriptions",
    "organizations_url": "https://api.github.com/users/hwwhww/orgs",
    "repos_url": "https://api.github.com/users/hwwhww/repos",
    "events_url": "https://api.github.com/users/hwwhww/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hwwhww/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/270/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/py-evm/issues/270/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/357798082",
    "html_url": "https://github.com/ethereum/py-evm/issues/270#issuecomment-357798082",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/270",
    "id": 357798082,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1Nzc5ODA4Mg==",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-15T21:57:12Z",
    "updated_at": "2018-01-15T21:57:12Z",
    "author_association": "MEMBER",
    "body": "@hwwhww great writeup.  Here are my thoughts which I hope are helpful.\r\n\r\n- I like having an `apply_block` function but it's not clear to me where it should live.  `VM` or `VMState` both strike me as suitable candidates and until I see it in action I don't think I'll know.\r\n- I like having `VMState` be transaction level and `VM` be block level, but that doesn't mean it's the right API.  If that separation feels clean that would be an indicator to me that it's the right architecture.  If it feels cumbersome and it doesn't feel like it actually simplifies anything then it's probably wrong.\r\n- I'd like to avoid anything like initializing an object and then *patching* the `coinbase` onto it later to support sharding.  That type of thing seems indicative of an architecture problem that should be sorted out.\r\n\r\nI hope this is enough to get you moving.  When there's code I can look at I suspect I'll have an easier time giving better feedback.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/357798082/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/357964721",
    "html_url": "https://github.com/ethereum/py-evm/issues/270#issuecomment-357964721",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/270",
    "id": 357964721,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1Nzk2NDcyMQ==",
    "user": {
      "login": "hwwhww",
      "id": 9263930,
      "node_id": "MDQ6VXNlcjkyNjM5MzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9263930?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hwwhww",
      "html_url": "https://github.com/hwwhww",
      "followers_url": "https://api.github.com/users/hwwhww/followers",
      "following_url": "https://api.github.com/users/hwwhww/following{/other_user}",
      "gists_url": "https://api.github.com/users/hwwhww/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hwwhww/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hwwhww/subscriptions",
      "organizations_url": "https://api.github.com/users/hwwhww/orgs",
      "repos_url": "https://api.github.com/users/hwwhww/repos",
      "events_url": "https://api.github.com/users/hwwhww/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hwwhww/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-16T13:45:45Z",
    "updated_at": "2018-01-16T13:45:45Z",
    "author_association": "MEMBER",
    "body": "@pipermerriam thank you for sharing your thoughts.\r\n* I’d like to try to move `validate_block` to `VM` since `VM.import_block(block)` and  `VM.mine_block()` are in `VM` now.\r\n* Sorry for the unclear expression, yes, the `coinbase` should only be set in initialization method.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/357964721/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
