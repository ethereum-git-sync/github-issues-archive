{
  "url": "https://api.github.com/repos/ethereum/py-evm/issues/520",
  "repository_url": "https://api.github.com/repos/ethereum/py-evm",
  "labels_url": "https://api.github.com/repos/ethereum/py-evm/issues/520/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/py-evm/issues/520/comments",
  "events_url": "https://api.github.com/repos/ethereum/py-evm/issues/520/events",
  "html_url": "https://github.com/ethereum/py-evm/issues/520",
  "id": 310077833,
  "node_id": "MDU6SXNzdWUzMTAwNzc4MzM=",
  "number": 520,
  "title": "Use `__slots__`",
  "user": {
    "login": "pipermerriam",
    "id": 824194,
    "node_id": "MDQ6VXNlcjgyNDE5NA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/pipermerriam",
    "html_url": "https://github.com/pipermerriam",
    "followers_url": "https://api.github.com/users/pipermerriam/followers",
    "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
    "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
    "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
    "repos_url": "https://api.github.com/users/pipermerriam/repos",
    "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
    "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 631592722,
      "node_id": "MDU6TGFiZWw2MzE1OTI3MjI=",
      "url": "https://api.github.com/repos/ethereum/py-evm/labels/Good%20First%20Issue",
      "name": "Good First Issue",
      "color": "0e8a16",
      "default": false,
      "description": null
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 13,
  "created_at": "2018-03-30T14:20:40Z",
  "updated_at": "2018-05-22T19:21:31Z",
  "closed_at": "2018-05-22T19:21:31Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "Currently we use this pattern to denote that `MyThing` will have a `prop_a` property.\r\n\r\n```python\r\nclass MyThing:\r\n    prop_a = None\r\n```\r\n\r\nIt looks like if we instead use `__slots__` we could see 40-50% reduction in memory footprint.\r\n\r\n```python\r\nclass MyThing:\r\n    __slots__ = [\"prop_a\"]\r\n```\r\n\r\nsource: \r\n\r\n- https://docs.python.org/3/reference/datamodel.html#slots\r\n- http://book.pythontips.com/en/latest/__slots__magic.html",
  "closed_by": {
    "login": "pipermerriam",
    "id": 824194,
    "node_id": "MDQ6VXNlcjgyNDE5NA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/pipermerriam",
    "html_url": "https://github.com/pipermerriam",
    "followers_url": "https://api.github.com/users/pipermerriam/followers",
    "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
    "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
    "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
    "repos_url": "https://api.github.com/users/pipermerriam/repos",
    "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
    "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/520/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/py-evm/issues/520/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/377912905",
    "html_url": "https://github.com/ethereum/py-evm/issues/520#issuecomment-377912905",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/520",
    "id": 377912905,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NzkxMjkwNQ==",
    "user": {
      "login": "cburgdorf",
      "id": 521109,
      "node_id": "MDQ6VXNlcjUyMTEwOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/521109?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cburgdorf",
      "html_url": "https://github.com/cburgdorf",
      "followers_url": "https://api.github.com/users/cburgdorf/followers",
      "following_url": "https://api.github.com/users/cburgdorf/following{/other_user}",
      "gists_url": "https://api.github.com/users/cburgdorf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cburgdorf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cburgdorf/subscriptions",
      "organizations_url": "https://api.github.com/users/cburgdorf/orgs",
      "repos_url": "https://api.github.com/users/cburgdorf/repos",
      "events_url": "https://api.github.com/users/cburgdorf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cburgdorf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-02T11:42:08Z",
    "updated_at": "2018-04-02T11:42:08Z",
    "author_association": "MEMBER",
    "body": "Interesting. So, it seems that if we would go down that path we'd lose out a lot of type safety features. By default `mypy` doesn't let us access attributes that aren't defined which is a good safety check to have. But it doesn't seem to recognize attributes defined via `slots` (leaving out for a moment that the string list donation doesn't let us specify the type of the property).\r\n\r\n```python\r\nclass MyThing:\r\n    __slots__ = [\"prop_a\"]\r\n\r\ny = MyThing()\r\ny.prop_a = 'test'\r\n```\r\n\r\nLeaves you with\r\n\r\n```shell\r\n$ mypy slots.py \r\nslots.py:5: error: \"MyThing\" has no attribute \"prop_a\"\r\n```\r\n\r\nWhereas the following works fine\r\n\r\n```python\r\nclass MyThing:\r\n    prop_a: str\r\n\r\ny = MyThing()\r\ny.prop_a = 'test'\r\n```\r\n\r\n**Plus**, it has the benefit of catching type bugs. E.g\r\n\r\n```python\r\nclass MyThing:\r\n    prop_a: str\r\n\r\ny = MyThing()\r\ny.prop_a = 4\r\n```\r\n\r\n```shell\r\n$ mypy slots.py \r\nslots.py:14: error: Incompatible types in assignment (expression has type \"int\", variable has type \"str\")\r\n```\r\n\r\n>It looks like if we instead use __slots__ we could see 40-50% reduction in memory footprint.\r\n\r\nI admit that I didn't really dive into *why* the `slots` construct would reduce the memory footprint that much but if it comes from the fact that we are pre-initializing all these attributes to `None` then I believe this won't be an issue with Python 3.6 anymore because there you don't need to assign `None` (or any other value) to an attribute just to denote it. You can simply declare it with its type and as far as I think this won't have any effect on runtime performance but be simply a hint for static analyzers such as `mypy`.\r\n\r\n```python\r\nclass MyThing:\r\n    prop_a: str\r\n```\r\n\r\nThat's one downside of Python 3.5 that is also explicitly mentioned in [PEP526](https://www.python.org/dev/peps/pep-0526/).\r\n\r\n>There's no way to annotate the type of an undefined variable; one needs to initialize it to None (e.g. a = None # type: int).\r\n\r\n ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/377912905/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/377954623",
    "html_url": "https://github.com/ethereum/py-evm/issues/520#issuecomment-377954623",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/520",
    "id": 377954623,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3Nzk1NDYyMw==",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-02T15:24:26Z",
    "updated_at": "2018-04-02T15:24:26Z",
    "author_association": "MEMBER",
    "body": "Lame, and it doesn't appear there's a reasonable workaround right now.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/377954623/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/377954762",
    "html_url": "https://github.com/ethereum/py-evm/issues/520#issuecomment-377954762",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/520",
    "id": 377954762,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3Nzk1NDc2Mg==",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-02T15:25:03Z",
    "updated_at": "2018-04-02T15:25:03Z",
    "author_association": "MEMBER",
    "body": "FYI @davesque ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/377954762/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/378081116",
    "html_url": "https://github.com/ethereum/py-evm/issues/520#issuecomment-378081116",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/520",
    "id": 378081116,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODA4MTExNg==",
    "user": {
      "login": "carver",
      "id": 205327,
      "node_id": "MDQ6VXNlcjIwNTMyNw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/205327?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/carver",
      "html_url": "https://github.com/carver",
      "followers_url": "https://api.github.com/users/carver/followers",
      "following_url": "https://api.github.com/users/carver/following{/other_user}",
      "gists_url": "https://api.github.com/users/carver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/carver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/carver/subscriptions",
      "organizations_url": "https://api.github.com/users/carver/orgs",
      "repos_url": "https://api.github.com/users/carver/repos",
      "events_url": "https://api.github.com/users/carver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/carver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-02T23:34:27Z",
    "updated_at": "2018-04-02T23:34:27Z",
    "author_association": "MEMBER",
    "body": "mypy seems to work with this:\r\n\r\n```py\r\nclass MyThing:\r\n    __slots__ = [\"prop_a\"]\r\n    prop_a: str\r\n\r\ny = MyThing()\r\ny.prop_a = 'test'\r\n```\r\n\r\nIt's redundant, but at least you get the type checking and the performance boost.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/378081116/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/378089660",
    "html_url": "https://github.com/ethereum/py-evm/issues/520#issuecomment-378089660",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/520",
    "id": 378089660,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODA4OTY2MA==",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-03T00:27:45Z",
    "updated_at": "2018-04-03T00:27:45Z",
    "author_association": "MEMBER",
    "body": "@carver doesn't actually work (unless my test was broken).  did you just run `mypy` or did you actually run the python code too.  Mine blew up when i tried to execute it.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/378089660/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/378094539",
    "html_url": "https://github.com/ethereum/py-evm/issues/520#issuecomment-378094539",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/520",
    "id": 378094539,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODA5NDUzOQ==",
    "user": {
      "login": "carver",
      "id": 205327,
      "node_id": "MDQ6VXNlcjIwNTMyNw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/205327?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/carver",
      "html_url": "https://github.com/carver",
      "followers_url": "https://api.github.com/users/carver/followers",
      "following_url": "https://api.github.com/users/carver/following{/other_user}",
      "gists_url": "https://api.github.com/users/carver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/carver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/carver/subscriptions",
      "organizations_url": "https://api.github.com/users/carver/orgs",
      "repos_url": "https://api.github.com/users/carver/repos",
      "events_url": "https://api.github.com/users/carver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/carver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-03T01:00:48Z",
    "updated_at": "2018-04-03T01:00:48Z",
    "author_association": "MEMBER",
    "body": "Works for me in py3.6.3:\r\n\r\n```\r\n$ python -i slots.py \r\n>>> y.prop_a\r\n'test'\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/378094539/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/378175578",
    "html_url": "https://github.com/ethereum/py-evm/issues/520#issuecomment-378175578",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/520",
    "id": 378175578,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODE3NTU3OA==",
    "user": {
      "login": "cburgdorf",
      "id": 521109,
      "node_id": "MDQ6VXNlcjUyMTEwOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/521109?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cburgdorf",
      "html_url": "https://github.com/cburgdorf",
      "followers_url": "https://api.github.com/users/cburgdorf/followers",
      "following_url": "https://api.github.com/users/cburgdorf/following{/other_user}",
      "gists_url": "https://api.github.com/users/cburgdorf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cburgdorf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cburgdorf/subscriptions",
      "organizations_url": "https://api.github.com/users/cburgdorf/orgs",
      "repos_url": "https://api.github.com/users/cburgdorf/repos",
      "events_url": "https://api.github.com/users/cburgdorf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cburgdorf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-03T08:46:36Z",
    "updated_at": "2018-04-03T08:46:45Z",
    "author_association": "MEMBER",
    "body": ">It's redundant, but at least you get the type checking and the performance boost.\r\n\r\n@carver so this suggests that it isn't the pre-assignment (`prop_a = None`) that is eating unnecessary memory but rather that using `__slots__` gives you a performance boost in general. Do you mind sharing your memory footprint measurement code?\r\n\r\nAlso note that if it turns out that the memory boost is in fact related to the pre-assignment than this won't help for Python 3.5 because this just isn't valid Python 3.5 syntax.\r\n\r\n```python\r\nclass MyThing:\r\n    __slots__ = [\"prop_a\"]\r\n    prop_a: str\r\n```\r\n\r\nIt has to be this for Python 3.5\r\n\r\n```python\r\nclass MyThing:\r\n    __slots__ = [\"prop_a\"]\r\n    prop_a = None  # type: str\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/378175578/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/378324188",
    "html_url": "https://github.com/ethereum/py-evm/issues/520#issuecomment-378324188",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/520",
    "id": 378324188,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODMyNDE4OA==",
    "user": {
      "login": "carver",
      "id": 205327,
      "node_id": "MDQ6VXNlcjIwNTMyNw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/205327?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/carver",
      "html_url": "https://github.com/carver",
      "followers_url": "https://api.github.com/users/carver/followers",
      "following_url": "https://api.github.com/users/carver/following{/other_user}",
      "gists_url": "https://api.github.com/users/carver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/carver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/carver/subscriptions",
      "organizations_url": "https://api.github.com/users/carver/orgs",
      "repos_url": "https://api.github.com/users/carver/repos",
      "events_url": "https://api.github.com/users/carver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/carver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-03T17:05:55Z",
    "updated_at": "2018-04-03T17:05:55Z",
    "author_association": "MEMBER",
    "body": "> Do you mind sharing your memory footprint measurement code?\r\n\r\nI was only trying to resolve the syntax failure, I haven't run any performance metrics on it.\r\n\r\nNote that slots takes precedence over the py3.6 type annotations. Trying to add another variable after the slots has no effect:\r\n\r\n```py\r\nclass MyThing:\r\n    __slots__ = [\"prop_a\"]\r\n    prop_a: str\r\n    prop_b: str\r\n\r\ny = MyThing()\r\ny.prop_a = 'thang'\r\ny.prop_b = 'that'\r\n```\r\n\r\nProduces:\r\n\r\n```sh\r\n$ python -i slots.py \r\nTraceback (most recent call last):\r\n  File \"slots.py\", line 8, in <module>\r\n    y.prop_b = 'that'\r\nAttributeError: 'MyThing' object has no attribute 'prop_b'\r\n```\r\n\r\n> this won't help for Python 3.5\r\n\r\nRight, but trinity only supports py3.6+, afaik.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/378324188/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/378406838",
    "html_url": "https://github.com/ethereum/py-evm/issues/520#issuecomment-378406838",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/520",
    "id": 378406838,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODQwNjgzOA==",
    "user": {
      "login": "davesque",
      "id": 791437,
      "node_id": "MDQ6VXNlcjc5MTQzNw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/791437?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/davesque",
      "html_url": "https://github.com/davesque",
      "followers_url": "https://api.github.com/users/davesque/followers",
      "following_url": "https://api.github.com/users/davesque/following{/other_user}",
      "gists_url": "https://api.github.com/users/davesque/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/davesque/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/davesque/subscriptions",
      "organizations_url": "https://api.github.com/users/davesque/orgs",
      "repos_url": "https://api.github.com/users/davesque/repos",
      "events_url": "https://api.github.com/users/davesque/events{/privacy}",
      "received_events_url": "https://api.github.com/users/davesque/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-03T21:34:44Z",
    "updated_at": "2018-04-03T21:34:44Z",
    "author_association": "CONTRIBUTOR",
    "body": "@cburgdorf I haven't run any metrics on our projects, but there's some pretty good discussion [here](https://stackoverflow.com/a/28059785/751533) about the benefits of using `__slots__` as well as a table a ways down in that post that compares memory usage.\r\n\r\nThe basic use case seems to be when you've got lots of instances of some class which is used to store a small collection of values.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/378406838/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/378419664",
    "html_url": "https://github.com/ethereum/py-evm/issues/520#issuecomment-378419664",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/520",
    "id": 378419664,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODQxOTY2NA==",
    "user": {
      "login": "davesque",
      "id": 791437,
      "node_id": "MDQ6VXNlcjc5MTQzNw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/791437?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/davesque",
      "html_url": "https://github.com/davesque",
      "followers_url": "https://api.github.com/users/davesque/followers",
      "following_url": "https://api.github.com/users/davesque/following{/other_user}",
      "gists_url": "https://api.github.com/users/davesque/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/davesque/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/davesque/subscriptions",
      "organizations_url": "https://api.github.com/users/davesque/orgs",
      "repos_url": "https://api.github.com/users/davesque/repos",
      "events_url": "https://api.github.com/users/davesque/events{/privacy}",
      "received_events_url": "https://api.github.com/users/davesque/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-03T22:28:59Z",
    "updated_at": "2018-04-03T22:31:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "@cburgdorf \r\n\r\n> so this suggests that it isn't the pre-assignment (`prop_a = None`) that is eating unnecessary memory but rather that using `__slots__` gives you a performance boost in general.\r\n\r\nYes and no.  Using `__slots__` does give you speed and memory savings, however, there are a number of things one can do which will cause a class to use a dict internally regardless of the presence of a `__slots__` directive in the class definition.  It may be that setting a class property with `prop_a = None` is one of those things.  I don't know for sure and I'd have to do some testing.  Either way, class properties do not behave as usual with slotted classes.  From the [python docs](https://docs.python.org/3/reference/datamodel.html#notes-on-using-slots):\r\n\r\n> __slots__ are implemented at the class level by creating descriptors (Implementing Descriptors) for each variable name. As a result, class attributes cannot be used to set default values for instance variables defined by __slots__; otherwise, the class attribute would overwrite the descriptor assignment.\r\n\r\nEven though they don't behave as expected, if defining a class property with the same name as a slot doesn't cause Python to allocate a dict for a class, it could still be used as the anchor point for a type annotation comment.  Type annotations could also be provided on the arguments of an `__init__` method for a class if it has one which accepts all the values which are stored in an instance.\r\n\r\nOf course, none of this matters if usage of slots would only go into a version of py-evm that requires 3.6+ as @carver mentioned.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/378419664/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/378579283",
    "html_url": "https://github.com/ethereum/py-evm/issues/520#issuecomment-378579283",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/520",
    "id": 378579283,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODU3OTI4Mw==",
    "user": {
      "login": "cburgdorf",
      "id": 521109,
      "node_id": "MDQ6VXNlcjUyMTEwOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/521109?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cburgdorf",
      "html_url": "https://github.com/cburgdorf",
      "followers_url": "https://api.github.com/users/cburgdorf/followers",
      "following_url": "https://api.github.com/users/cburgdorf/following{/other_user}",
      "gists_url": "https://api.github.com/users/cburgdorf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cburgdorf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cburgdorf/subscriptions",
      "organizations_url": "https://api.github.com/users/cburgdorf/orgs",
      "repos_url": "https://api.github.com/users/cburgdorf/repos",
      "events_url": "https://api.github.com/users/cburgdorf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cburgdorf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-04T12:16:09Z",
    "updated_at": "2018-04-04T12:16:09Z",
    "author_association": "MEMBER",
    "body": ">Right, but trinity only supports py3.6+, afaik.\r\n\r\nYep, `trinity` and `p2p` use 3.6 wheras the `evm` is still on 3.5.\r\n\r\n@davesque thanks for the link and further explanation. \r\n\r\n>The basic use case seems to be when you've got lots of instances of some class which is used to store a small collection of values.\r\n\r\nMy general feeling and especially in respect to the loss of ergonomics (tracking of fields as strings) and caveats is that it would be worth to identify places where this could really have a big impact but not use it as a blanket approach to everything. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/378579283/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/378699227",
    "html_url": "https://github.com/ethereum/py-evm/issues/520#issuecomment-378699227",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/520",
    "id": 378699227,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODY5OTIyNw==",
    "user": {
      "login": "davesque",
      "id": 791437,
      "node_id": "MDQ6VXNlcjc5MTQzNw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/791437?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/davesque",
      "html_url": "https://github.com/davesque",
      "followers_url": "https://api.github.com/users/davesque/followers",
      "following_url": "https://api.github.com/users/davesque/following{/other_user}",
      "gists_url": "https://api.github.com/users/davesque/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/davesque/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/davesque/subscriptions",
      "organizations_url": "https://api.github.com/users/davesque/orgs",
      "repos_url": "https://api.github.com/users/davesque/repos",
      "events_url": "https://api.github.com/users/davesque/events{/privacy}",
      "received_events_url": "https://api.github.com/users/davesque/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-04T18:27:44Z",
    "updated_at": "2018-04-04T18:27:44Z",
    "author_association": "CONTRIBUTOR",
    "body": "@cburgdorf Agreed.  Right tool for the right job.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/378699227/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/378722081",
    "html_url": "https://github.com/ethereum/py-evm/issues/520#issuecomment-378722081",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/520",
    "id": 378722081,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODcyMjA4MQ==",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-04T19:44:45Z",
    "updated_at": "2018-04-04T19:44:45Z",
    "author_association": "MEMBER",
    "body": "I think that the objects under the `Computation` class might be a good candidate for this.  For complex EVM execution we could end up with 1000+ instances of each of these objects in memory.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/378722081/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
