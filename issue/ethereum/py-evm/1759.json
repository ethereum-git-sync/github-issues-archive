{
  "url": "https://api.github.com/repos/ethereum/py-evm/issues/1759",
  "repository_url": "https://api.github.com/repos/ethereum/py-evm",
  "labels_url": "https://api.github.com/repos/ethereum/py-evm/issues/1759/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/py-evm/issues/1759/comments",
  "events_url": "https://api.github.com/repos/ethereum/py-evm/issues/1759/events",
  "html_url": "https://github.com/ethereum/py-evm/issues/1759",
  "id": 435224723,
  "node_id": "MDU6SXNzdWU0MzUyMjQ3MjM=",
  "number": 1759,
  "title": "Database API architecture.",
  "user": {
    "login": "pipermerriam",
    "id": 824194,
    "node_id": "MDQ6VXNlcjgyNDE5NA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/pipermerriam",
    "html_url": "https://github.com/pipermerriam",
    "followers_url": "https://api.github.com/users/pipermerriam/followers",
    "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
    "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
    "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
    "repos_url": "https://api.github.com/users/pipermerriam/repos",
    "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
    "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2019-04-19T16:01:40Z",
  "updated_at": "2019-04-19T16:28:17Z",
  "closed_at": null,
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "### What is wrong\r\n\r\nIt seems our database wrapping architecture is starting to break down in some ways.  Recent work that @carver has been doing has uncovered a number of needed units of functionality that have caused the complexity level of some of the database wrappers to grow beyond what may be reasonable to maintain.\r\n\r\n### How can it be fixed.\r\n\r\nNot clear.\r\n\r\nWhatever our solution needs to have the following functionality (please add to this list)\r\n\r\n- batching of writes\r\n- journaling with checkpoints\r\n- trie functionality (state roots)\r\n- committing without applying deletes\r\n    - https://github.com/ethereum/py-evm/blob/0cd3ebac9c7c336b07f2f52c52b069fbe400bcef/eth/db/batch.py#L48\r\n- ability to read through to the underlying database (@carver should clarify this one)\r\n- generation of diffs\r\n    - https://github.com/ethereum/py-evm/blob/0cd3ebac9c7c336b07f2f52c52b069fbe400bcef/eth/db/journal.py#L235\r\n- atomic reads and writes\r\n    - https://github.com/ethereum/py-evm/blob/0cd3ebac9c7c336b07f2f52c52b069fbe400bcef/eth/db/atomic.py#L49\r\n\r\nThings that I think *might* be code smells or in general result in increased complexity.\r\n\r\n- Functionality flags like `apply_deletes` or `read_through_deletes`.\r\n    - These require us to test all combinations of various flags.\r\n- Ability to access the underlying wrapped databases.\r\n    - If we stick with the wrapping API it should be hard to get at the underlying database.\r\n\r\nThings that I think might help us test these better.\r\n\r\n- Simple DSL for declarative testing.\r\n- State machine based `hypothesis` tests to better define and test the rules for each database.\r\n\r\n\r\nIdeas:\r\n\r\n- Does a middleware pattern work for this?  It would keep each database from having access to the underlying database directly, allowing us to only expose it via a well defined API.\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/1759/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/py-evm/issues/1759/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/484948304",
    "html_url": "https://github.com/ethereum/py-evm/issues/1759#issuecomment-484948304",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/1759",
    "id": 484948304,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4NDk0ODMwNA==",
    "user": {
      "login": "carver",
      "id": 205327,
      "node_id": "MDQ6VXNlcjIwNTMyNw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/205327?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/carver",
      "html_url": "https://github.com/carver",
      "followers_url": "https://api.github.com/users/carver/followers",
      "following_url": "https://api.github.com/users/carver/following{/other_user}",
      "gists_url": "https://api.github.com/users/carver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/carver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/carver/subscriptions",
      "organizations_url": "https://api.github.com/users/carver/orgs",
      "repos_url": "https://api.github.com/users/carver/repos",
      "events_url": "https://api.github.com/users/carver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/carver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-04-19T16:24:15Z",
    "updated_at": "2019-04-19T16:24:15Z",
    "author_association": "MEMBER",
    "body": "> * applying only additive changes (don't apply deletes)\r\n\r\n(to be explicit: also applies updates, although that happens quite rarely since most data is content-addressed)\r\n\r\n> * ability to read through to the underlying database (@carver should clarify this one)\r\n\r\nThis prime example when this comes up is when you are mutating a `trie` with pruning on. The pruning deletes all nodes no longer referenced when the trie is updated. This is good for all the intermediate tries, but bad for the trie at the state root before the updates began. We want to always be able to continue to reference those. So we want to have some concept of only deleting intermediate nodes.\r\n\r\n- One option is to make sure to `squash_changes()` for all changes to the trie\r\n- Another is to add a `HexaryTrie.batch_update()` that only starts regenerating hashes after all the new data changes. This would be a potentially large performance boost, and would also give us the concept of dropping all intermediate trie nodes for free.\r\n\r\n> Ability to access the underlying wrapped databases.\r\n> * If we stick with the wrapping API it should be hard to get at the underlying database.\r\n\r\nYeah, a few of these APIs have evolved to the point where they aren't really a wrapper anymore, it's just a database that has a spigot to dump into another database on demand. (eg~ `BatchDB.commit_to()`)\r\n\r\n> * Does a middleware pattern work for this?  It would keep each database from having access to the underlying database directly, allowing us to only expose it via a well defined API.\r\n\r\nI think the only way it helps is by showing that we can't (easily) get it done without direct access to the underlying, so maybe we should drop the wrapping concept altogether.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/484948304/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
