{
  "url": "https://api.github.com/repos/ethereum/py-evm/issues/1518",
  "repository_url": "https://api.github.com/repos/ethereum/py-evm",
  "labels_url": "https://api.github.com/repos/ethereum/py-evm/issues/1518/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/py-evm/issues/1518/comments",
  "events_url": "https://api.github.com/repos/ethereum/py-evm/issues/1518/events",
  "html_url": "https://github.com/ethereum/py-evm/issues/1518",
  "id": 384562129,
  "node_id": "MDU6SXNzdWUzODQ1NjIxMjk=",
  "number": 1518,
  "title": "Can Discovery be an isolated plugin?",
  "user": {
    "login": "pipermerriam",
    "id": 824194,
    "node_id": "MDQ6VXNlcjgyNDE5NA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/pipermerriam",
    "html_url": "https://github.com/pipermerriam",
    "followers_url": "https://api.github.com/users/pipermerriam/followers",
    "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
    "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
    "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
    "repos_url": "https://api.github.com/users/pipermerriam/repos",
    "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
    "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 815420353,
      "node_id": "MDU6TGFiZWw4MTU0MjAzNTM=",
      "url": "https://api.github.com/repos/ethereum/py-evm/labels/comp:%20trinity",
      "name": "comp: trinity",
      "color": "bfd4f2",
      "default": false,
      "description": ""
    },
    {
      "id": 889922027,
      "node_id": "MDU6TGFiZWw4ODk5MjIwMjc=",
      "url": "https://api.github.com/repos/ethereum/py-evm/labels/comp:%20p2p",
      "name": "comp: p2p",
      "color": "bfd4f2",
      "default": false,
      "description": ""
    },
    {
      "id": 983615867,
      "node_id": "MDU6TGFiZWw5ODM2MTU4Njc=",
      "url": "https://api.github.com/repos/ethereum/py-evm/labels/type:%20refactor",
      "name": "type: refactor",
      "color": "eeeeee",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 5,
  "created_at": "2018-11-26T23:59:53Z",
  "updated_at": "2018-12-14T20:06:19Z",
  "closed_at": "2018-12-14T20:06:19Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "### What is wrong?\r\n\r\nI think the `DiscoveryService` could be moved into it's own isolated process plugin.\r\n\r\n### How can it be fixed\r\n\r\nI think the only functionality that the `DiscoveryService` needs with-respect-to external interactions is fulfilling requests for *new* node connection candidates.\r\n\r\nCurrently this is done by the `DiscoveryService` checking if the `PeerPool` is full if not, pushing these new connection candidates into the `PeerPool`.  I think this should be inverted so that the `PeerPool` instead pulls new connection candidates from the `DiscoveryService`.",
  "closed_by": {
    "login": "cburgdorf",
    "id": 521109,
    "node_id": "MDQ6VXNlcjUyMTEwOQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/521109?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cburgdorf",
    "html_url": "https://github.com/cburgdorf",
    "followers_url": "https://api.github.com/users/cburgdorf/followers",
    "following_url": "https://api.github.com/users/cburgdorf/following{/other_user}",
    "gists_url": "https://api.github.com/users/cburgdorf/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cburgdorf/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cburgdorf/subscriptions",
    "organizations_url": "https://api.github.com/users/cburgdorf/orgs",
    "repos_url": "https://api.github.com/users/cburgdorf/repos",
    "events_url": "https://api.github.com/users/cburgdorf/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cburgdorf/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/1518/reactions",
    "total_count": 2,
    "+1": 2,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/py-evm/issues/1518/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/443464430",
    "html_url": "https://github.com/ethereum/py-evm/issues/1518#issuecomment-443464430",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/1518",
    "id": 443464430,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MzQ2NDQzMA==",
    "user": {
      "login": "cburgdorf",
      "id": 521109,
      "node_id": "MDQ6VXNlcjUyMTEwOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/521109?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cburgdorf",
      "html_url": "https://github.com/cburgdorf",
      "followers_url": "https://api.github.com/users/cburgdorf/followers",
      "following_url": "https://api.github.com/users/cburgdorf/following{/other_user}",
      "gists_url": "https://api.github.com/users/cburgdorf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cburgdorf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cburgdorf/subscriptions",
      "organizations_url": "https://api.github.com/users/cburgdorf/orgs",
      "repos_url": "https://api.github.com/users/cburgdorf/repos",
      "events_url": "https://api.github.com/users/cburgdorf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cburgdorf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-01T22:42:50Z",
    "updated_at": "2018-12-01T22:52:38Z",
    "author_association": "MEMBER",
    "body": "I think the `DiscoveryService` could broadcast something like a `NewPeerCandidateEvent` event on the `EventBus`. This would allow any interested party to react upon these events.\r\n\r\nIf *frequency* of these events would cause too much traffic to broadcast them to each and everyone on the event bus, we can either throttle the event propagation or only send them to those that are listening for a specific topic (a feature that doesn't exist yet in the event bus but which is rather easy to implement). Something like: \r\n\r\n```python\r\nevent_bus.broadcast(\r\n    NewPeerCandidate(candidate)\r\n    BroadcastConfig(topic=\"peerstuff\")\r\n)\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/443464430/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/443464664",
    "html_url": "https://github.com/ethereum/py-evm/issues/1518#issuecomment-443464664",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/1518",
    "id": 443464664,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MzQ2NDY2NA==",
    "user": {
      "login": "cburgdorf",
      "id": 521109,
      "node_id": "MDQ6VXNlcjUyMTEwOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/521109?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cburgdorf",
      "html_url": "https://github.com/cburgdorf",
      "followers_url": "https://api.github.com/users/cburgdorf/followers",
      "following_url": "https://api.github.com/users/cburgdorf/following{/other_user}",
      "gists_url": "https://api.github.com/users/cburgdorf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cburgdorf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cburgdorf/subscriptions",
      "organizations_url": "https://api.github.com/users/cburgdorf/orgs",
      "repos_url": "https://api.github.com/users/cburgdorf/repos",
      "events_url": "https://api.github.com/users/cburgdorf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cburgdorf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-01T22:46:39Z",
    "updated_at": "2018-12-01T22:53:13Z",
    "author_association": "MEMBER",
    "body": "Btw, this rhymes nicely with #1535. I think if we write a plugin for this it can probably be used in the regular trinity node as well as in the trinity beacon node. \r\n\r\nRelated: @jannikluhn @hwwhww do I understand that correctly that the current plan for the beacon node is to use discovery v5 for peer discovery but libp2p for the actual communication? Sorry if that doesn't make sense. I'm a total p2p noob.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/443464664/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/443503137",
    "html_url": "https://github.com/ethereum/py-evm/issues/1518#issuecomment-443503137",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/1518",
    "id": 443503137,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MzUwMzEzNw==",
    "user": {
      "login": "jannikluhn",
      "id": 29854669,
      "node_id": "MDQ6VXNlcjI5ODU0NjY5",
      "avatar_url": "https://avatars.githubusercontent.com/u/29854669?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jannikluhn",
      "html_url": "https://github.com/jannikluhn",
      "followers_url": "https://api.github.com/users/jannikluhn/followers",
      "following_url": "https://api.github.com/users/jannikluhn/following{/other_user}",
      "gists_url": "https://api.github.com/users/jannikluhn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jannikluhn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jannikluhn/subscriptions",
      "organizations_url": "https://api.github.com/users/jannikluhn/orgs",
      "repos_url": "https://api.github.com/users/jannikluhn/repos",
      "events_url": "https://api.github.com/users/jannikluhn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jannikluhn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-02T12:16:03Z",
    "updated_at": "2018-12-02T12:16:03Z",
    "author_association": "MEMBER",
    "body": "> Related: @jannikluhn @hwwhww do I understand that correctly that the current plan for the beacon node is to use discovery v5 for peer discovery but libp2p for the actual communication? Sorry if that doesn't make sense. I'm a total p2p noob.\r\n\r\nThe way I imagine it right now is to use libp2p for\r\n- establishing one-to-one streams with peers (so that we don't have to deal with all the low level details)\r\n- all gossiping\r\n- Kademlia\r\n\r\nWhat we would have to implement in addition to that:\r\n- communication for syncing (using the streams provided by libp2p)\r\n- discv5 (on top of the Kademlia peer table provided by libp2p)\r\n- special peer table logic (e.g. some handshake protocol for exchanging current sync status, reputation, maybe rate limiting, ...)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/443503137/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/443813793",
    "html_url": "https://github.com/ethereum/py-evm/issues/1518#issuecomment-443813793",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/1518",
    "id": 443813793,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MzgxMzc5Mw==",
    "user": {
      "login": "cburgdorf",
      "id": 521109,
      "node_id": "MDQ6VXNlcjUyMTEwOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/521109?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cburgdorf",
      "html_url": "https://github.com/cburgdorf",
      "followers_url": "https://api.github.com/users/cburgdorf/followers",
      "following_url": "https://api.github.com/users/cburgdorf/following{/other_user}",
      "gists_url": "https://api.github.com/users/cburgdorf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cburgdorf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cburgdorf/subscriptions",
      "organizations_url": "https://api.github.com/users/cburgdorf/orgs",
      "repos_url": "https://api.github.com/users/cburgdorf/repos",
      "events_url": "https://api.github.com/users/cburgdorf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cburgdorf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-03T18:22:07Z",
    "updated_at": "2018-12-03T18:22:07Z",
    "author_association": "MEMBER",
    "body": "Thanks @jannikluhn that makes sense!\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/443813793/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/443814401",
    "html_url": "https://github.com/ethereum/py-evm/issues/1518#issuecomment-443814401",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/1518",
    "id": 443814401,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MzgxNDQwMQ==",
    "user": {
      "login": "cburgdorf",
      "id": 521109,
      "node_id": "MDQ6VXNlcjUyMTEwOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/521109?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cburgdorf",
      "html_url": "https://github.com/cburgdorf",
      "followers_url": "https://api.github.com/users/cburgdorf/followers",
      "following_url": "https://api.github.com/users/cburgdorf/following{/other_user}",
      "gists_url": "https://api.github.com/users/cburgdorf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cburgdorf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cburgdorf/subscriptions",
      "organizations_url": "https://api.github.com/users/cburgdorf/orgs",
      "repos_url": "https://api.github.com/users/cburgdorf/repos",
      "events_url": "https://api.github.com/users/cburgdorf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cburgdorf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-03T18:23:44Z",
    "updated_at": "2018-12-03T18:23:44Z",
    "author_association": "MEMBER",
    "body": ">I think the DiscoveryService could broadcast something like a NewPeerCandidateEvent event on the EventBus. This would allow any interested party to react upon these events.\r\n\r\nI think I back off from what I said there. I just looked a bit deeper into the discovery service and it works different from what I thought. I think @pipermerriam proposal makes sense and I'll give it a shot.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/443814401/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
