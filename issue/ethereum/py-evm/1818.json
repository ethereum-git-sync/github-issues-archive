{
  "url": "https://api.github.com/repos/ethereum/py-evm/issues/1818",
  "repository_url": "https://api.github.com/repos/ethereum/py-evm",
  "labels_url": "https://api.github.com/repos/ethereum/py-evm/issues/1818/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/py-evm/issues/1818/comments",
  "events_url": "https://api.github.com/repos/ethereum/py-evm/issues/1818/events",
  "html_url": "https://github.com/ethereum/py-evm/issues/1818",
  "id": 479759871,
  "node_id": "MDU6SXNzdWU0Nzk3NTk4NzE=",
  "number": 1818,
  "title": "EIP-152: Add Blake2 compression function F precompile",
  "user": {
    "login": "carver",
    "id": 205327,
    "node_id": "MDQ6VXNlcjIwNTMyNw==",
    "avatar_url": "https://avatars.githubusercontent.com/u/205327?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/carver",
    "html_url": "https://github.com/carver",
    "followers_url": "https://api.github.com/users/carver/followers",
    "following_url": "https://api.github.com/users/carver/following{/other_user}",
    "gists_url": "https://api.github.com/users/carver/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/carver/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/carver/subscriptions",
    "organizations_url": "https://api.github.com/users/carver/orgs",
    "repos_url": "https://api.github.com/users/carver/repos",
    "events_url": "https://api.github.com/users/carver/events{/privacy}",
    "received_events_url": "https://api.github.com/users/carver/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": {
    "login": "carver",
    "id": 205327,
    "node_id": "MDQ6VXNlcjIwNTMyNw==",
    "avatar_url": "https://avatars.githubusercontent.com/u/205327?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/carver",
    "html_url": "https://github.com/carver",
    "followers_url": "https://api.github.com/users/carver/followers",
    "following_url": "https://api.github.com/users/carver/following{/other_user}",
    "gists_url": "https://api.github.com/users/carver/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/carver/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/carver/subscriptions",
    "organizations_url": "https://api.github.com/users/carver/orgs",
    "repos_url": "https://api.github.com/users/carver/repos",
    "events_url": "https://api.github.com/users/carver/events{/privacy}",
    "received_events_url": "https://api.github.com/users/carver/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "carver",
      "id": 205327,
      "node_id": "MDQ6VXNlcjIwNTMyNw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/205327?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/carver",
      "html_url": "https://github.com/carver",
      "followers_url": "https://api.github.com/users/carver/followers",
      "following_url": "https://api.github.com/users/carver/following{/other_user}",
      "gists_url": "https://api.github.com/users/carver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/carver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/carver/subscriptions",
      "organizations_url": "https://api.github.com/users/carver/orgs",
      "repos_url": "https://api.github.com/users/carver/repos",
      "events_url": "https://api.github.com/users/carver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/carver/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": {
    "url": "https://api.github.com/repos/ethereum/py-evm/milestones/11",
    "html_url": "https://github.com/ethereum/py-evm/milestone/11",
    "labels_url": "https://api.github.com/repos/ethereum/py-evm/milestones/11/labels",
    "id": 4567073,
    "node_id": "MDk6TWlsZXN0b25lNDU2NzA3Mw==",
    "number": 11,
    "title": "Istanbul Support",
    "description": "Sep 4 testnet launch, Oct 16 mainnet launch: https://eips.ethereum.org/EIPS/eip-1679",
    "creator": {
      "login": "carver",
      "id": 205327,
      "node_id": "MDQ6VXNlcjIwNTMyNw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/205327?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/carver",
      "html_url": "https://github.com/carver",
      "followers_url": "https://api.github.com/users/carver/followers",
      "following_url": "https://api.github.com/users/carver/following{/other_user}",
      "gists_url": "https://api.github.com/users/carver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/carver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/carver/subscriptions",
      "organizations_url": "https://api.github.com/users/carver/orgs",
      "repos_url": "https://api.github.com/users/carver/repos",
      "events_url": "https://api.github.com/users/carver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/carver/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 0,
    "closed_issues": 10,
    "state": "closed",
    "created_at": "2019-08-12T17:16:54Z",
    "updated_at": "2020-01-29T18:53:51Z",
    "due_on": "2019-09-04T07:00:00Z",
    "closed_at": "2020-01-29T18:53:51Z"
  },
  "comments": 6,
  "created_at": "2019-08-12T17:22:20Z",
  "updated_at": "2019-08-27T17:47:53Z",
  "closed_at": "2019-08-27T17:45:11Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "For Istanbul: https://eips.ethereum.org/EIPS/eip-152",
  "closed_by": {
    "login": "carver",
    "id": 205327,
    "node_id": "MDQ6VXNlcjIwNTMyNw==",
    "avatar_url": "https://avatars.githubusercontent.com/u/205327?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/carver",
    "html_url": "https://github.com/carver",
    "followers_url": "https://api.github.com/users/carver/followers",
    "following_url": "https://api.github.com/users/carver/following{/other_user}",
    "gists_url": "https://api.github.com/users/carver/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/carver/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/carver/subscriptions",
    "organizations_url": "https://api.github.com/users/carver/orgs",
    "repos_url": "https://api.github.com/users/carver/repos",
    "events_url": "https://api.github.com/users/carver/events{/privacy}",
    "received_events_url": "https://api.github.com/users/carver/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/1818/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/py-evm/issues/1818/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/523690111",
    "html_url": "https://github.com/ethereum/py-evm/issues/1818#issuecomment-523690111",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/1818",
    "id": 523690111,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyMzY5MDExMQ==",
    "user": {
      "login": "carver",
      "id": 205327,
      "node_id": "MDQ6VXNlcjIwNTMyNw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/205327?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/carver",
      "html_url": "https://github.com/carver",
      "followers_url": "https://api.github.com/users/carver/followers",
      "following_url": "https://api.github.com/users/carver/following{/other_user}",
      "gists_url": "https://api.github.com/users/carver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/carver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/carver/subscriptions",
      "organizations_url": "https://api.github.com/users/carver/orgs",
      "repos_url": "https://api.github.com/users/carver/repos",
      "events_url": "https://api.github.com/users/carver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/carver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-21T23:41:47Z",
    "updated_at": "2019-08-21T23:41:47Z",
    "author_association": "MEMBER",
    "body": "Looks like `blake2b` is built in to `hashlib`. Presumably that's the best bet: https://docs.python.org/3.6/library/hashlib.html#hashlib.blake2b",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/523690111/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/524485747",
    "html_url": "https://github.com/ethereum/py-evm/issues/1818#issuecomment-524485747",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/1818",
    "id": 524485747,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyNDQ4NTc0Nw==",
    "user": {
      "login": "carver",
      "id": 205327,
      "node_id": "MDQ6VXNlcjIwNTMyNw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/205327?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/carver",
      "html_url": "https://github.com/carver",
      "followers_url": "https://api.github.com/users/carver/followers",
      "following_url": "https://api.github.com/users/carver/following{/other_user}",
      "gists_url": "https://api.github.com/users/carver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/carver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/carver/subscriptions",
      "organizations_url": "https://api.github.com/users/carver/orgs",
      "repos_url": "https://api.github.com/users/carver/repos",
      "events_url": "https://api.github.com/users/carver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/carver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-23T22:52:24Z",
    "updated_at": "2019-08-23T22:52:24Z",
    "author_association": "MEMBER",
    "body": "> Looks like `blake2b` is built in to `hashlib`. Presumably that's the best bet: https://docs.python.org/3.6/library/hashlib.html#hashlib.blake2b\r\n\r\nUnfortunately, this is the full digest, and doesn't *seem* to expose the compression function. Source here, but I'm not fluent in \"Python C module speak\": https://github.com/python/cpython/blob/530f506ac91338b55cf2be71b1cdf50cb077512f/Modules/_blake2/blake2b_impl.c\r\n\r\nThese other implementations are available, according to the [blake2 website](https://blake2.net/#sw):\r\n- https://github.com/buggywhip/blake2_py (all-python, beta)\r\n- https://github.com/dchest/pyblake2/blob/master/impl/blake2b-ref.c#L225\r\n- https://github.com/darjeeling/python-blake2/blob/master/blake2/blake2b-ref.c#L216 (identical implementation to ^)\r\n\r\nI'm going to explore using the all-python one. First, to make sure it's correct, then to see if it's anywhere near fast enough. If either thing becomes a problem, I want to see if it's possible to call the full digest in such a way to execute compression only. At first glance, this might be possible with the right inputs, but I'm still getting familiar with it.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/524485747/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/524500566",
    "html_url": "https://github.com/ethereum/py-evm/issues/1818#issuecomment-524500566",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/1818",
    "id": 524500566,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyNDUwMDU2Ng==",
    "user": {
      "login": "carver",
      "id": 205327,
      "node_id": "MDQ6VXNlcjIwNTMyNw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/205327?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/carver",
      "html_url": "https://github.com/carver",
      "followers_url": "https://api.github.com/users/carver/followers",
      "following_url": "https://api.github.com/users/carver/following{/other_user}",
      "gists_url": "https://api.github.com/users/carver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/carver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/carver/subscriptions",
      "organizations_url": "https://api.github.com/users/carver/orgs",
      "repos_url": "https://api.github.com/users/carver/repos",
      "events_url": "https://api.github.com/users/carver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/carver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-24T00:42:20Z",
    "updated_at": "2019-08-26T17:52:58Z",
    "author_association": "MEMBER",
    "body": "Preliminary results from directly calling the blake2_py `_compress()`: correctness looks good, performance is problematic.\r\n\r\nIt takes 25 seconds to run 2 million rounds (which is 2M gas). At that rate, it will take:\r\n- 100 seconds to run a full 8 million gas block _(just confirmed, it took 91s)_\r\n- 14 hours to run test vector 8, which has 4 billion rounds\r\n\r\nSo it's about 6 times too slow, at a minimum, assuming 15s blocks.\r\n\r\nBecause you can run the F compression with the final flag turned off, I don't think there will be a way to call the outer digest from a C library to simulate this precompile.\r\n\r\nSo I think we're back to brainstorming:\r\n- Write it Cython (this may not be enough, depending on whether the compiler can take advantage of the SSE3 instruction set)\r\n- ~~Dig further into the builtin hashlib libraries to see if we can invoke the inner compression function directly~~ _No chance: you can't externally change the number of rounds_\r\n- Find another C implementation that exposes the F compression API, and write a python wrapper for it.\r\n- See if there is a numpy or pandas implementation, and consider adding one of those as a dependency :/\r\n- Further optimize the all-python library (probably the worst idea: I suspect there isn't a 10x improvement sitting around)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/524500566/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/524504078",
    "html_url": "https://github.com/ethereum/py-evm/issues/1818#issuecomment-524504078",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/1818",
    "id": 524504078,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyNDUwNDA3OA==",
    "user": {
      "login": "carver",
      "id": 205327,
      "node_id": "MDQ6VXNlcjIwNTMyNw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/205327?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/carver",
      "html_url": "https://github.com/carver",
      "followers_url": "https://api.github.com/users/carver/followers",
      "following_url": "https://api.github.com/users/carver/following{/other_user}",
      "gists_url": "https://api.github.com/users/carver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/carver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/carver/subscriptions",
      "organizations_url": "https://api.github.com/users/carver/orgs",
      "repos_url": "https://api.github.com/users/carver/repos",
      "events_url": "https://api.github.com/users/carver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/carver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-24T01:12:42Z",
    "updated_at": "2019-08-27T17:47:53Z",
    "author_association": "MEMBER",
    "body": "This will probably never actually get merged, so I'll dump this ugly code here for anyone else who wants to tinker:\r\n\r\n```py\r\nfrom eth_utils import (\r\n    to_bytes,\r\n    to_int,\r\n    to_tuple,\r\n    ValidationError,\r\n)\r\n\r\nfrom blake2 import BLAKE2b\r\n\r\nimport difflib\r\n\r\n\r\ndef test_blake_F(input_hex, expected_hex):\r\n    # This takes the input and output defined in the EIP test vectors\r\n    # Careful, test vector 8 takes 14 hours!\r\n\r\n    result_bytes = run_blake_F_compression(input_hex)\r\n    result_hex = result_bytes.hex()\r\n    for i,s in enumerate(difflib.ndiff(result_hex, expected_hex)):\r\n        if s[0]==' ': continue\r\n        elif s[0]=='-':\r\n            print(u'Delete \"{}\" from position {}'.format(s[-1],i))\r\n        elif s[0]=='+':\r\n            print(u'Add \"{}\" to position {}'.format(s[-1],i))\r\n    assert result_hex == expected_hex, repr(result_hex)\r\n    print(\"Success!\")\r\n\r\n\r\ndef extract_blake2b_parameters(input_bytes):\r\n    rounds = to_int(input_bytes[:4])\r\n\r\n    h_state = get_64_bit_little_endian_words(input_bytes[4:68])\r\n\r\n    t_offset_counters = get_64_bit_little_endian_words(input_bytes[196:212])\r\n\r\n    final_block_int = to_int(input_bytes[212])\r\n    if final_block_int == 0:\r\n        final_block_flag = False\r\n    elif final_block_int == 1:\r\n        final_block_flag = True\r\n    else:\r\n        raise ValidationError(\r\n            f\"The only valid final block indicator flags are 0 and 1, got: {final_block_int}\"\r\n        )\r\n\r\n    return rounds, h_state, t_offset_counters, final_block_flag\r\ndef run_blake_F_compression(hex_input):\r\n    input_bytes = to_bytes(hexstr=hex_input)\r\n\r\n    if len(input_bytes) != 213:\r\n        raise ValidationError(f\"Input bytes must be 213 bytes long, got: {len(input_bytes)}\")\r\n\r\n    rounds, h_state, t_offset_counters, final_block_flag = extract_blake2b_parameters(input_bytes)\r\n\r\n    b = BLAKE2b()\r\n    b.h = list(h_state)\r\n    b.t = t_offset_counters\r\n    b.ROUNDS = rounds\r\n\r\n    if final_block_flag:\r\n        b.f[0] = b.MASKBITS\r\n\r\n    message = input_bytes[68:196]\r\n    b._compress(message)\r\n\r\n    return reencode(b.h)\r\n\r\n\r\n@to_tuple\r\ndef get_64_bit_little_endian_words(compact_bytes):\r\n    remaining_bytes = compact_bytes\r\n    if len(remaining_bytes) % 8 != 0:\r\n        raise ValidationError(\r\n            \"Must send bytes in multiples of 8 to get 64-bit words, got length \"\r\n            f\"{len(remaining_bytes)}\"\r\n        )\r\n\r\n    while len(remaining_bytes):\r\n        word, remaining_bytes = remaining_bytes[:8], remaining_bytes[8:]\r\n        yield to_int(bytes(reversed(word)))\r\n\r\n\r\ndef reencode(state):\r\n    return b''.join(\r\n        bytes(reversed(to_bytes(word))).ljust(8, b'\\0')\r\n        for word in state\r\n    )\r\n\r\n```\r\n\r\nIn order to run more than 12 rounds, you need to patch the blake2_py library with:\r\n```diff\r\n@@ -65,8 +65,9 @@ MASK64BITS  = 0xffffffffffffffff\r\n\r\n class BLAKE2(object):\r\n     \"\"\" BLAKE2 is a base class for BLAKE2b and BLAKE2s \"\"\"\r\n-    \r\n-    sigma = [\r\n+\r\n+    # for more rounds, the schedule wraps around to the beginning\r\n+    sigma_schedule = [\r\n         [  0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15 ],\r\n         [ 14,10, 4, 8, 9,15,13, 6, 1,12, 0, 2,11, 7, 5, 3 ],\r\n         [ 11, 8,12, 0, 5, 2,15,13,10,14, 3, 6, 7, 1, 9, 4 ],\r\n@@ -77,13 +78,10 @@ class BLAKE2(object):\r\n         [ 13,11, 7,14,12, 1, 3, 9, 5, 0,15, 4, 8, 6, 2,10 ],\r\n         [  6,15,14, 9,11, 3, 0, 8,12, 2,13, 7, 1, 4,10, 5 ],\r\n         [ 10, 2, 8, 4, 7, 6, 1, 5,15,11, 9,14, 3,12,13 ,0 ],\r\n-        [  0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15 ],\r\n-        [ 14,10, 4, 8, 9,15,13, 6, 1,12, 0, 2,11, 7, 5, 3 ]\r\n-    ]                   # only 1st 10 rows are used by BLAKE2s\r\n+    ]\r\n \r\n-    \r\n     # - - - - - - - - - - - - - - - - - - - - - - - - - - -\r\n-    \r\n+\r\n     def __init__(self, digest_size=0, **args):\r\n         print(\"\"\"\r\n           ***********************************************\r\n@@ -137,21 +135,24 @@ class BLAKE2(object):\r\n         self.buf             = b''\r\n         self.finalized       = False\r\n         self.block_size      = self.BLOCKBYTES\r\n-        \r\n+\r\n         if key:\r\n             block = key + (chr(0).encode())*(self.BLOCKBYTES-len(key))\r\n             self.update(block)\r\n-        \r\n+\r\n         if self.data:\r\n             self.update(self.data)\r\n-    \r\n-    \r\n+\r\n+    def sigma(self, at_round):\r\n+        max_round = len(self.sigma_schedule)\r\n+        return self.sigma_schedule[at_round % max_round]\r\n+\r\n     # - - - - - - - - - - - - - - - - - - - - - - - - - - -\r\n-    \r\n+\r\n     def _compress(self, block):\r\n-        \r\n+\r\n         # Dereference these for [very small] speed improvement.\r\n-        # Perhaps more than anything, this makes the code \r\n+        # Perhaps more than anything, this makes the code\r\n         # easier to read.\r\n         MASKBITS  = self.MASKBITS\r\n         WORDBITS  = self.WORDBITS\r\n@@ -207,11 +208,11 @@ class BLAKE2(object):\r\n \r\n         # time to ChaCha\r\n         for r in range(self.ROUNDS):\r\n-            # resolve as much as possible outside G() and \r\n-            # don't pass as argument, let scope do its job.  \r\n-            # Result is a 50% speed increase, but sadly, \r\n+            # resolve as much as possible outside G() and\r\n+            # don't pass as argument, let scope do its job.\r\n+            # Result is a 50% speed increase, but sadly,\r\n             # \"slow\" divided by 1.5 is still \"slow\".  :-/\r\n-            sr = sigma[r]\r\n+            sr = sigma(r)\r\n             msri2  = m[sr[0]]\r\n             msri21 = m[sr[1]]\r\n             G( 0,  4,  8, 12)\r\n```\r\n(sorry for all the garbage diff lines, there was trailing spaces, and my editor auto-removes them.)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/524504078/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/524951183",
    "html_url": "https://github.com/ethereum/py-evm/issues/1818#issuecomment-524951183",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/1818",
    "id": 524951183,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyNDk1MTE4Mw==",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-26T17:29:01Z",
    "updated_at": "2019-08-26T17:29:01Z",
    "author_association": "MEMBER",
    "body": "@carver not ideal but I'd say that moving forward with a working version that is too slow and addressing this a little later would be acceptable.  A block with lots of calls to this precompile will hit us but I think we already have at least one more of those lying around with the previous key pairing primitives.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/524951183/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/525082196",
    "html_url": "https://github.com/ethereum/py-evm/issues/1818#issuecomment-525082196",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/1818",
    "id": 525082196,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyNTA4MjE5Ng==",
    "user": {
      "login": "carver",
      "id": 205327,
      "node_id": "MDQ6VXNlcjIwNTMyNw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/205327?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/carver",
      "html_url": "https://github.com/carver",
      "followers_url": "https://api.github.com/users/carver/followers",
      "following_url": "https://api.github.com/users/carver/following{/other_user}",
      "gists_url": "https://api.github.com/users/carver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/carver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/carver/subscriptions",
      "organizations_url": "https://api.github.com/users/carver/orgs",
      "repos_url": "https://api.github.com/users/carver/repos",
      "events_url": "https://api.github.com/users/carver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/carver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-27T00:15:21Z",
    "updated_at": "2019-08-27T00:15:21Z",
    "author_association": "MEMBER",
    "body": "> I'd say that moving forward with a working version that is too slow and addressing this a little later would be acceptable\r\n\r\nOk, going with that for now. Bountying out a replacement should be straightforward since we now have a reference implementation and a desired API for swap-in.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/525082196/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
