{
  "url": "https://api.github.com/repos/ethereum/py-evm/issues/799",
  "repository_url": "https://api.github.com/repos/ethereum/py-evm",
  "labels_url": "https://api.github.com/repos/ethereum/py-evm/issues/799/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/py-evm/issues/799/comments",
  "events_url": "https://api.github.com/repos/ethereum/py-evm/issues/799/events",
  "html_url": "https://github.com/ethereum/py-evm/issues/799",
  "id": 327068684,
  "node_id": "MDU6SXNzdWUzMjcwNjg2ODQ=",
  "number": 799,
  "title": "SMC integration with py-EVM",
  "user": {
    "login": "jannikluhn",
    "id": 29854669,
    "node_id": "MDQ6VXNlcjI5ODU0NjY5",
    "avatar_url": "https://avatars.githubusercontent.com/u/29854669?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jannikluhn",
    "html_url": "https://github.com/jannikluhn",
    "followers_url": "https://api.github.com/users/jannikluhn/followers",
    "following_url": "https://api.github.com/users/jannikluhn/following{/other_user}",
    "gists_url": "https://api.github.com/users/jannikluhn/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jannikluhn/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jannikluhn/subscriptions",
    "organizations_url": "https://api.github.com/users/jannikluhn/orgs",
    "repos_url": "https://api.github.com/users/jannikluhn/repos",
    "events_url": "https://api.github.com/users/jannikluhn/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jannikluhn/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 769749869,
      "node_id": "MDU6TGFiZWw3Njk3NDk4Njk=",
      "url": "https://api.github.com/repos/ethereum/py-evm/labels/eth2.0",
      "name": "eth2.0",
      "color": "ff95ca",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2018-05-28T15:59:32Z",
  "updated_at": "2018-06-15T07:44:04Z",
  "closed_at": "2018-06-15T07:44:04Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "Right now, the `ShardSyncer` passively listens to their peers for new collations and downloads all of those. In a real network however, it should check the SMC for headers and specifically download the bodies for those. To this end, we need a way to interact with the SMC.\r\n\r\nIn the sharding repository we have the classes `ShardTracker` and `SMCHandler` that provide an interface for accessing the SMC. We need a service that uses those and bridges to the `ShardSyncer`. Here's how I imagine it to look like:\r\n\r\n### `class SMCService`\r\n\r\n* Has an `SMCHandler`\r\n* Has a `ShardTracker`\r\n* Periodically (at least once per block) triggers the `ShardTracker` for new logs\r\n* Processes those logs to keep an always up-to-date view of relevant part of the SMC state\r\n* Other services can register queues to receive headers whenever they are added or confirmed (`register_added_header_queue`, `register_confirmed_header_queue`)\r\n* Provides a method to add headers (mostly pass-through method `SMCHandler`)\r\n\r\nFor notaries `SMCService` is subclassed:\r\n\r\n### `class NotaryService(SMCService)`\r\n\r\n* Has a private key\r\n* Provides events `registered`, `deregistered` and `released`\r\n* Provides a method `submit_vote` (mostly pass-through method `SMCHandler`)\r\n\r\nThe shard syncer will\r\n\r\n* Register to the `register_added_header_queue` and/or `register_confirmed_header_queue`\r\n* Add those headers to the shard\r\n* Wait for a corresponding `NewCollationHashes` message if the header is relatively new (say, half a period)\r\n* Request the collation body otherwise\r\n* When receiving a body vote for it if possible\r\n\r\nChanges required at `ShardTracker`: As far as I can see only a way to get all header-added and notary-voted logs from the SMC for all of history so that the `ShardSyncer` can sync from genesis.\r\n\r\n@hwwhww @NIC619",
  "closed_by": {
    "login": "jannikluhn",
    "id": 29854669,
    "node_id": "MDQ6VXNlcjI5ODU0NjY5",
    "avatar_url": "https://avatars.githubusercontent.com/u/29854669?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jannikluhn",
    "html_url": "https://github.com/jannikluhn",
    "followers_url": "https://api.github.com/users/jannikluhn/followers",
    "following_url": "https://api.github.com/users/jannikluhn/following{/other_user}",
    "gists_url": "https://api.github.com/users/jannikluhn/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jannikluhn/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jannikluhn/subscriptions",
    "organizations_url": "https://api.github.com/users/jannikluhn/orgs",
    "repos_url": "https://api.github.com/users/jannikluhn/repos",
    "events_url": "https://api.github.com/users/jannikluhn/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jannikluhn/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/799/reactions",
    "total_count": 1,
    "+1": 1,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/py-evm/issues/799/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/392768908",
    "html_url": "https://github.com/ethereum/py-evm/issues/799#issuecomment-392768908",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/799",
    "id": 392768908,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5Mjc2ODkwOA==",
    "user": {
      "login": "hwwhww",
      "id": 9263930,
      "node_id": "MDQ6VXNlcjkyNjM5MzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9263930?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hwwhww",
      "html_url": "https://github.com/hwwhww",
      "followers_url": "https://api.github.com/users/hwwhww/followers",
      "following_url": "https://api.github.com/users/hwwhww/following{/other_user}",
      "gists_url": "https://api.github.com/users/hwwhww/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hwwhww/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hwwhww/subscriptions",
      "organizations_url": "https://api.github.com/users/hwwhww/orgs",
      "repos_url": "https://api.github.com/users/hwwhww/repos",
      "events_url": "https://api.github.com/users/hwwhww/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hwwhww/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-29T13:07:09Z",
    "updated_at": "2018-05-29T13:07:09Z",
    "author_association": "MEMBER",
    "body": "Summary of some off-github discussions:\r\n#### Periodically (at least once per block) triggers the ShardTracker for new logs\r\n1. By polling `ShardTracker.get_add_header_logs()`: https://github.com/ethereum/sharding/blob/efa573ed9effaaf0ef877a4e0aa8b046c8893b2c/sharding/handler/shard_tracker.py#L82\r\n\t* Some required modification in sharding repo:\r\n\t\t1. `from_block` issue: by default, it uses **the start of current period**, but it’s impossible to guarantee we won’t miss any single period in Trinity level. So we may need to set `from_block` by other means.\r\n\t\t\t* Possible solution: Tracking the main chain block number as the source of `from_block`.\r\n\t\t2. Parent chain reorg issue\r\n\t\t\t* Possible solution:\r\n\t\t\t    1. Tracking `blockhash`. Every round, querying the `blockhash` again and checking if it’s the same.\r\n\t\t\t    2. Detecting at web3.py layer.\r\n2. Async\r\n\t1. Now the `ShardTracker` and `LogHandler`  are both non-async. So invoking those function may block the node.\r\n\t2. May also need async web3.py APIs: https://github.com/ethereum/web3.py/issues/657\r\n\r\n#### Possible system architecture\r\n\r\nThe above `NotaryService` design is a part of `ShardSyncer`. Exploring the higher level of Trinity, it may be:\r\n```\r\n[trinity] ShardNode\r\n\t-> [p2p] ShardNode._p2p_server: ShardServer\r\n  \t\t-> [p2p] ShardServer.shard_syncer: ShardSyncer\r\n```\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/392768908/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/392778077",
    "html_url": "https://github.com/ethereum/py-evm/issues/799#issuecomment-392778077",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/799",
    "id": 392778077,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5Mjc3ODA3Nw==",
    "user": {
      "login": "hwwhww",
      "id": 9263930,
      "node_id": "MDQ6VXNlcjkyNjM5MzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9263930?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hwwhww",
      "html_url": "https://github.com/hwwhww",
      "followers_url": "https://api.github.com/users/hwwhww/followers",
      "following_url": "https://api.github.com/users/hwwhww/following{/other_user}",
      "gists_url": "https://api.github.com/users/hwwhww/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hwwhww/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hwwhww/subscriptions",
      "organizations_url": "https://api.github.com/users/hwwhww/orgs",
      "repos_url": "https://api.github.com/users/hwwhww/repos",
      "events_url": "https://api.github.com/users/hwwhww/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hwwhww/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-29T13:33:10Z",
    "updated_at": "2018-05-29T13:35:55Z",
    "author_association": "MEMBER",
    "body": "> SMC server periodically (at least once per block) triggers the ShardTracker for new logs\r\n\r\nSome thoughts about the roles:\r\n1. A node may use `NotaryService` and `ProposerService` at the same time. So I think the trigger point of calling `ShardTracker.get_add_header_logs()` should be only in one place that shared by the `SMCService`s?\r\n2. A node may watch multiple shards, and the notary pool info from SMC should be shared cross-services.\r\n\r\nAnother direction is that in the earlier draft design, there is a new `ShardMonitor` **process** that is responsible to poll SMC and notify `ShardManager` that manages multiple shards. `ShardManager` is just a very abstract idea by that time, it can be considered as the middle layer between `ShardServer` and `ShardSyncer`. The sub-services (`NotaryService`, `ProposerService`) of different shards can have a pubsub relationship with `ShardMonitor`.\r\n\r\n#### Pros:\r\n1. Making the polling service aside by the server, clearer roles.\r\n2. It may be easier to share the same data from SMC?\r\n\r\n#### Cons:\r\n1. Need to maintain a new process alive well.\r\n2. The performance cost of maintaining IPC?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/392778077/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/392825731",
    "html_url": "https://github.com/ethereum/py-evm/issues/799#issuecomment-392825731",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/799",
    "id": 392825731,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5MjgyNTczMQ==",
    "user": {
      "login": "jannikluhn",
      "id": 29854669,
      "node_id": "MDQ6VXNlcjI5ODU0NjY5",
      "avatar_url": "https://avatars.githubusercontent.com/u/29854669?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jannikluhn",
      "html_url": "https://github.com/jannikluhn",
      "followers_url": "https://api.github.com/users/jannikluhn/followers",
      "following_url": "https://api.github.com/users/jannikluhn/following{/other_user}",
      "gists_url": "https://api.github.com/users/jannikluhn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jannikluhn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jannikluhn/subscriptions",
      "organizations_url": "https://api.github.com/users/jannikluhn/orgs",
      "repos_url": "https://api.github.com/users/jannikluhn/repos",
      "events_url": "https://api.github.com/users/jannikluhn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jannikluhn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-29T15:42:51Z",
    "updated_at": "2018-05-29T15:43:12Z",
    "author_association": "MEMBER",
    "body": "> A node may use NotaryService and ProposerService at the same time. So I think the trigger point of calling ShardTracker.get_add_header_logs() should be only in one place that shared by the SMCServices?\r\n\r\nI agree. Originally I thought there would only be one `SMCService` running (possibly as a `NotarySMCService`) and a `ProposerService` would just have a reference ot the `SMCHandler` to call something like `propose`. But that would be confusing as a notary and proposer would use a different type of API. So having a general `SMCService` and separating the notary and proposal funcitonality is better.\r\n\r\n> Another direction is that in the earlier draft design, there is a new ShardMonitor process that is responsible to poll SMC and notify ShardManager that manages multiple shards. ShardManager is just a very abstract idea by that time, it can be considered as the middle layer between ShardServer and ShardSyncer. The sub-services (NotaryService, ProposerService) of different shards can have a pubsub relationship with ShardMonitor.\r\n\r\n`ShardMonitor` seems pretty close to what I envision `SMCService` to be. However, I don't see value in adding a `ShardManager` as another layer between `SMCService` and `ShardSyncer`. It might make sense though to have something like this just to track all the different `ShardSyncers` for the different shards (but that would be extremely light weight).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/392825731/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/392830012",
    "html_url": "https://github.com/ethereum/py-evm/issues/799#issuecomment-392830012",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/799",
    "id": 392830012,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5MjgzMDAxMg==",
    "user": {
      "login": "hwwhww",
      "id": 9263930,
      "node_id": "MDQ6VXNlcjkyNjM5MzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9263930?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hwwhww",
      "html_url": "https://github.com/hwwhww",
      "followers_url": "https://api.github.com/users/hwwhww/followers",
      "following_url": "https://api.github.com/users/hwwhww/following{/other_user}",
      "gists_url": "https://api.github.com/users/hwwhww/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hwwhww/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hwwhww/subscriptions",
      "organizations_url": "https://api.github.com/users/hwwhww/orgs",
      "repos_url": "https://api.github.com/users/hwwhww/repos",
      "events_url": "https://api.github.com/users/hwwhww/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hwwhww/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-29T15:54:20Z",
    "updated_at": "2018-05-29T15:55:48Z",
    "author_association": "MEMBER",
    "body": "> However, I don't see value in adding a ShardManager as another layer between SMCService and ShardSyncer.\r\n\r\nWhat I said is between **`ShardServer`** and ShardSyncer. ;)\r\nBecause (i) The main chain `Server` looks focused on the networking and not dealing with role-specific logic and (ii) it seems we use one `ShardSyncer` per shard? So I think a middle layer may be helpful here.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/392830012/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
