{
  "url": "https://api.github.com/repos/ethereum/py-evm/issues/2042",
  "repository_url": "https://api.github.com/repos/ethereum/py-evm",
  "labels_url": "https://api.github.com/repos/ethereum/py-evm/issues/2042/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/py-evm/issues/2042/comments",
  "events_url": "https://api.github.com/repos/ethereum/py-evm/issues/2042/events",
  "html_url": "https://github.com/ethereum/py-evm/issues/2042",
  "id": 1043177757,
  "node_id": "I_kwDOBJ456s4-LaEd",
  "number": 2042,
  "title": "Cannot replay transactions with `v=0` using `py-evm`",
  "user": {
    "login": "Pet3ris",
    "id": 224585,
    "node_id": "MDQ6VXNlcjIyNDU4NQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/224585?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Pet3ris",
    "html_url": "https://github.com/Pet3ris",
    "followers_url": "https://api.github.com/users/Pet3ris/followers",
    "following_url": "https://api.github.com/users/Pet3ris/following{/other_user}",
    "gists_url": "https://api.github.com/users/Pet3ris/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Pet3ris/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Pet3ris/subscriptions",
    "organizations_url": "https://api.github.com/users/Pet3ris/orgs",
    "repos_url": "https://api.github.com/users/Pet3ris/repos",
    "events_url": "https://api.github.com/users/Pet3ris/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Pet3ris/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2021-11-03T07:54:54Z",
  "updated_at": "2021-11-03T18:53:20Z",
  "closed_at": "2021-11-03T15:39:00Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "* py-evm Version: Using `web3[\"tester\"]@latest` bundle with 5.24.0\r\n* OS: osx\r\n* Python Version (python --version): 3.8\r\n\r\n### What is wrong?\r\n\r\nI believe there is a validation check in current main that is incompatible with London transactions (https://github.com/ethereum/py-evm/blob/master/eth/vm/forks/frontier/transactions.py#L92). This validation check currently checks if `v >= 27` but, for example, Hardhat transactions now all have `v=0` in London. Specifically, these are type 1/2 transactions in EIP-1559.\r\n\r\n### How can it be fixed\r\n\r\nIt may already be fixed in the upcoming py-evm version that will ship with london support but wanted to flag in case it isn't :).\r\n",
  "closed_by": {
    "login": "fselmo",
    "id": 3532824,
    "node_id": "MDQ6VXNlcjM1MzI4MjQ=",
    "avatar_url": "https://avatars.githubusercontent.com/u/3532824?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/fselmo",
    "html_url": "https://github.com/fselmo",
    "followers_url": "https://api.github.com/users/fselmo/followers",
    "following_url": "https://api.github.com/users/fselmo/following{/other_user}",
    "gists_url": "https://api.github.com/users/fselmo/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/fselmo/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/fselmo/subscriptions",
    "organizations_url": "https://api.github.com/users/fselmo/orgs",
    "repos_url": "https://api.github.com/users/fselmo/repos",
    "events_url": "https://api.github.com/users/fselmo/events{/privacy}",
    "received_events_url": "https://api.github.com/users/fselmo/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/2042/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/py-evm/issues/2042/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/959482738",
    "html_url": "https://github.com/ethereum/py-evm/issues/2042#issuecomment-959482738",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/2042",
    "id": 959482738,
    "node_id": "IC_kwDOBJ456s45MIty",
    "user": {
      "login": "fselmo",
      "id": 3532824,
      "node_id": "MDQ6VXNlcjM1MzI4MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3532824?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fselmo",
      "html_url": "https://github.com/fselmo",
      "followers_url": "https://api.github.com/users/fselmo/followers",
      "following_url": "https://api.github.com/users/fselmo/following{/other_user}",
      "gists_url": "https://api.github.com/users/fselmo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fselmo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fselmo/subscriptions",
      "organizations_url": "https://api.github.com/users/fselmo/orgs",
      "repos_url": "https://api.github.com/users/fselmo/repos",
      "events_url": "https://api.github.com/users/fselmo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fselmo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-03T15:39:00Z",
    "updated_at": "2021-11-03T15:40:24Z",
    "author_association": "MEMBER",
    "body": "@Pet3ris Welcome and thanks for the inquiry! Yeah, the signing also changes for typed transactions and this was implemented differently from the legacy transactions in the Berlin changes for `py-evm` and the London changes picked up from there.\r\n\r\nThat validation check you linked to is for a `Frontier` fork transaction. The \"legacy\" transactions for each fork inherit from each other all the way up to the most recent [LondonLegacyTransaction](https://github.com/ethereum/py-evm/blob/master/eth/vm/forks/london/transactions.py#L68) which inherits from [BerlinLegacyTransaction](https://github.com/ethereum/py-evm/blob/master/eth/vm/forks/berlin/transactions.py#L78)... which inherits from [MuirGlacierTransaction](https://github.com/ethereum/py-evm/blob/21759ee681315f7099b14893b6ac6d1a5e659bc0/eth/vm/forks/muir_glacier/transactions.py#L14) and so on... down to the `FrontierTransaction` that you linked above.\r\n\r\nHowever, when we get to Berlin and London (the introduction of typed transactions), there is also [AccessListTransaction](https://github.com/ethereum/py-evm/blob/master/eth/vm/forks/berlin/transactions.py#L176) and [DynamicFeeTransaction](https://github.com/ethereum/py-evm/blob/master/eth/vm/forks/london/transactions.py#L155) and unsigned versions of those as well. The signing field is also no longer `v`, but `y_parity`.\r\n\r\nThe `validate` method that you linked to is a nice-to-have method for validating the `FrontierTransaction` class only and thus would not apply to the typed transactions mentioned above. The `y_parity` field can also be `1` though, it is not always `0`.\r\n\r\nI'm going to close this based on the above but feel free to re-open if I missed something.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/959482738/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/959775079",
    "html_url": "https://github.com/ethereum/py-evm/issues/2042#issuecomment-959775079",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/2042",
    "id": 959775079,
    "node_id": "IC_kwDOBJ456s45NQFn",
    "user": {
      "login": "Pet3ris",
      "id": 224585,
      "node_id": "MDQ6VXNlcjIyNDU4NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/224585?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Pet3ris",
      "html_url": "https://github.com/Pet3ris",
      "followers_url": "https://api.github.com/users/Pet3ris/followers",
      "following_url": "https://api.github.com/users/Pet3ris/following{/other_user}",
      "gists_url": "https://api.github.com/users/Pet3ris/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Pet3ris/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Pet3ris/subscriptions",
      "organizations_url": "https://api.github.com/users/Pet3ris/orgs",
      "repos_url": "https://api.github.com/users/Pet3ris/repos",
      "events_url": "https://api.github.com/users/Pet3ris/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Pet3ris/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-03T17:47:19Z",
    "updated_at": "2021-11-03T17:47:19Z",
    "author_association": "NONE",
    "body": "Thank you for the detailed explanation. I'm not fully aware of what the implications are for how to implement type 2 transactions in `web3.py` so perhaps it's simpler if I offer more context of what I was trying to do:\r\n\r\nEffectively I was:\r\n\r\n- downloading a recent transaction from mainnet by using `eth.getTransaction`\r\n- turning it into a raw transaction with the following code:\r\n\r\n```python\r\nv = tx[\"v\"]\r\nr = int.from_bytes(tx[\"r\"], \"big\")\r\ns = int.from_bytes(tx[\"s\"], \"big\")\r\nunsigned_transaction = serializable_unsigned_transaction_from_dict(transaction)\r\nraw_tx = encode_transaction(unsigned_transaction, vrs=(v, r, s))\r\n```\r\n- then using `eth_sendRawTransaction` to send this `raw_tx` to a local node to replay it\r\n\r\n\r\nDoes `w3.eth.sendRawTransaction(raw_tx)` need some adjustment to interpret the transaction as a type2 perhaps or would the transaction itself need some changes than what is returned from `eth.getTransaction`?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/959775079/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/959799271",
    "html_url": "https://github.com/ethereum/py-evm/issues/2042#issuecomment-959799271",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/2042",
    "id": 959799271,
    "node_id": "IC_kwDOBJ456s45NV_n",
    "user": {
      "login": "fselmo",
      "id": 3532824,
      "node_id": "MDQ6VXNlcjM1MzI4MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3532824?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fselmo",
      "html_url": "https://github.com/fselmo",
      "followers_url": "https://api.github.com/users/fselmo/followers",
      "following_url": "https://api.github.com/users/fselmo/following{/other_user}",
      "gists_url": "https://api.github.com/users/fselmo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fselmo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fselmo/subscriptions",
      "organizations_url": "https://api.github.com/users/fselmo/orgs",
      "repos_url": "https://api.github.com/users/fselmo/repos",
      "events_url": "https://api.github.com/users/fselmo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fselmo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-03T18:17:09Z",
    "updated_at": "2021-11-03T18:51:02Z",
    "author_association": "MEMBER",
    "body": "You would have to clean up the `transaction` in this case to only have the necessary fields for the transaction type you want (so getting rid of `blockHash`, `blockNumber`, `gasPrice`, `hash`, `input`, etc... from the `eth_getTransaction` call) so that it has only the valid params of an unsigned transaction. Then it can be passed into `serializable_unsigned_transaction_from_dict`.\r\n\r\nYou can also re-create the transaction and use `w3.eth.account.sign_transaction()` as outlined [here](https://web3py.readthedocs.io/en/latest/web3.eth.account.html?highlight=interpreted%20based#sign-a-transaction).\r\n\r\nIn the latter case you can strip all the parameters that don't exist in an unsigned transaction and run it similarly to the example in the link above without having to re-write everything.\r\n\r\nAre you attempting to use eth-tester with py-evm? Because if not, none of this actually touches py-evm. So I'm curious about what the py-evm inquiry is here. And if so, eth-tester isn't released with London changes yet so that will not work just yet.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/959799271/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/959826882",
    "html_url": "https://github.com/ethereum/py-evm/issues/2042#issuecomment-959826882",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/2042",
    "id": 959826882,
    "node_id": "IC_kwDOBJ456s45NcvC",
    "user": {
      "login": "Pet3ris",
      "id": 224585,
      "node_id": "MDQ6VXNlcjIyNDU4NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/224585?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Pet3ris",
      "html_url": "https://github.com/Pet3ris",
      "followers_url": "https://api.github.com/users/Pet3ris/followers",
      "following_url": "https://api.github.com/users/Pet3ris/following{/other_user}",
      "gists_url": "https://api.github.com/users/Pet3ris/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Pet3ris/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Pet3ris/subscriptions",
      "organizations_url": "https://api.github.com/users/Pet3ris/orgs",
      "repos_url": "https://api.github.com/users/Pet3ris/repos",
      "events_url": "https://api.github.com/users/Pet3ris/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Pet3ris/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-03T18:53:20Z",
    "updated_at": "2021-11-03T18:53:20Z",
    "author_association": "NONE",
    "body": "I see, really appreciate the clarification. I definitely still had `gas`, `gasPrice` and other arguments in there and it worked well previously but stopped working with type 2 transactions. I'll try stripping out those arguments to see if I can make `py-evm` route it to the type 2 validator and not check the `v` argument and hopefully it will work.\r\n\r\nThis is what I was doing to make it work pre-london:\r\n\r\n```python\r\n  transaction = {\r\n      \"to\": tx[\"to\"],\r\n      \"gas\": tx[\"gas\"],\r\n      \"gasPrice\": tx[\"gasPrice\"],\r\n      \"value\": tx[\"value\"],\r\n      \"nonce\": tx[\"nonce\"],\r\n  }\r\n  if \"data\" in tx:\r\n      transaction[\"data\"] = tx[\"data\"]\r\n  if \"input\" in tx:\r\n      transaction[\"data\"] = tx[\"input\"]\r\n```\r\n\r\nBecause these are mainnet transactions, unfortunately I don't have access to the keys so not able to sign them directly.\r\n\r\nYeah I'm sending the transaction to `py-evm` under the hood.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/959826882/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
