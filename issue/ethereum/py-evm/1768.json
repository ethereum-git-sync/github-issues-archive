{
  "url": "https://api.github.com/repos/ethereum/py-evm/issues/1768",
  "repository_url": "https://api.github.com/repos/ethereum/py-evm",
  "labels_url": "https://api.github.com/repos/ethereum/py-evm/issues/1768/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/py-evm/issues/1768/comments",
  "events_url": "https://api.github.com/repos/ethereum/py-evm/issues/1768/events",
  "html_url": "https://github.com/ethereum/py-evm/issues/1768",
  "id": 438355516,
  "node_id": "MDU6SXNzdWU0MzgzNTU1MTY=",
  "number": 1768,
  "title": "test_install_local_wheel failure",
  "user": {
    "login": "akiannillo",
    "id": 8834392,
    "node_id": "MDQ6VXNlcjg4MzQzOTI=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8834392?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/akiannillo",
    "html_url": "https://github.com/akiannillo",
    "followers_url": "https://api.github.com/users/akiannillo/followers",
    "following_url": "https://api.github.com/users/akiannillo/following{/other_user}",
    "gists_url": "https://api.github.com/users/akiannillo/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/akiannillo/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/akiannillo/subscriptions",
    "organizations_url": "https://api.github.com/users/akiannillo/orgs",
    "repos_url": "https://api.github.com/users/akiannillo/repos",
    "events_url": "https://api.github.com/users/akiannillo/events{/privacy}",
    "received_events_url": "https://api.github.com/users/akiannillo/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2019-04-29T14:49:52Z",
  "updated_at": "2019-05-14T17:16:33Z",
  "closed_at": "2019-05-14T17:16:33Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "* py-evm Version: code from last commit [5864684](https://github.com/ethereum/py-evm/commit/58346848f076116381d3274bbcea96b9e2cfcbdf)\r\n* OS: linux\r\n* Python Version (python --version):Python 3.6.7\r\n* Environment (output of `pip freeze`):\r\n```\r\nalabaster==0.7.12\r\napipkg==1.5\r\nargh==0.26.2\r\nasn1crypto==0.24.0\r\natomicwrites==1.3.0\r\nattrs==19.1.0\r\nBabel==2.6.0\r\nbleach==3.1.0\r\nbumpversion==0.5.3\r\ncached-property==1.5.1\r\ncertifi==2019.3.9\r\ncffi==1.12.3\r\nchardet==3.0.4\r\ncoincurve==10.0.0\r\ncolorama==0.4.1\r\ncoverage==4.5.3\r\ncryptography==2.6.1\r\ncytoolz==0.9.0.1\r\ndocopt==0.6.2\r\ndocutils==0.14\r\neth-bloom==1.0.3\r\neth-hash==0.2.0\r\neth-keys==0.2.2\r\neth-typing==2.1.0\r\neth-utils==1.4.1\r\nexecnet==1.6.0\r\nflake8==3.5.0\r\nflake8-bugbear==18.8.0\r\nhypothesis==3.69.5\r\nidna==2.7\r\nimagesize==1.1.0\r\nJinja2==2.10.1\r\nlru-dict==1.1.6\r\nMarkupSafe==1.1.1\r\nmccabe==0.6.1\r\nmore-itertools==7.0.0\r\nmypy==0.641\r\nmypy-extensions==0.4.1\r\npackaging==19.0\r\npathtools==0.1.2\r\npexpect==4.7.0\r\npkg-resources==0.0.0\r\npkginfo==1.5.0.1\r\npluggy==0.7.1\r\nplyvel==1.0.5\r\nptyprocess==0.6.0\r\npy==1.8.0\r\npy-ecc==1.6.0\r\n-e git+https://github.com/ethereum/py-evm.git@58346848f076116381d3274bbcea96b9e2cfcbdf#egg=py_evm\r\npycodestyle==2.3.1\r\npycparser==2.19\r\npyethash==0.1.27\r\npyflakes==1.6.0\r\nPygments==2.3.1\r\npyparsing==2.4.0\r\npysha3==1.0.2\r\npytest==3.6.4\r\npytest-asyncio==0.9.0\r\npytest-cov==2.5.1\r\npytest-watch==4.2.0\r\npytest-xdist==1.18.1\r\npytz==2019.1\r\nPyYAML==5.1\r\nreadme-renderer==24.0\r\nrequests==2.21.0\r\nrequests-toolbelt==0.9.1\r\nrlp==1.1.0\r\nsix==1.12.0\r\nsnowballstemmer==1.2.1\r\nSphinx==1.7.9\r\nsphinx-rtd-theme==0.4.3\r\nsphinxcontrib-asyncio==0.2.0\r\nsphinxcontrib-websupport==1.1.0\r\ntoolz==0.9.0\r\ntox==2.7.0\r\ntqdm==4.31.1\r\ntrie==1.4.0\r\ntwine==1.13.0\r\ntyped-ast==1.1.2\r\nurllib3==1.24.2\r\nvirtualenv==16.5.0\r\nwatchdog==0.9.0\r\nwebencodings==0.5.1\r\n\r\n```\r\n### What is wrong?\r\n\r\nI setup my linux machine as suggested with python3 and virtual env. I cloned the repository and run the whole test suite with `pytest`.\r\n\r\nI have only one failure in the test suite and no idea why it is like that:\r\n```bash\r\n===================================================== FAILURES =====================================================\r\n_____________________________________________ test_install_local_wheel _____________________________________________\r\n\r\n    def test_install_local_wheel():\r\n        with TemporaryDirectory() as tmpdir:\r\n>           venv_path = create_venv(Path(tmpdir))\r\n\r\ntmpdir     = '/tmp/tmpgibduz9i'\r\n\r\nscripts/release/test_package.py:43:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\nscripts/release/test_package.py:10: in create_venv\r\n    subprocess.run([venv_path / 'bin' / 'pip', 'install', '-U', 'pip', 'setuptools'], check=True)\r\n/usr/lib/python3.6/subprocess.py:403: in run\r\n    with Popen(*popenargs, **kwargs) as process:\r\n/usr/lib/python3.6/subprocess.py:709: in __init__\r\n    restore_signals, start_new_session)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = <subprocess.Popen object at 0x7f910d73eb70>\r\nargs = [PosixPath('/tmp/tmpgibduz9i/package-smoke-test/bin/pip'), 'install', '-U', 'pip', 'setuptools']\r\nexecutable = b'/tmp/tmpgibduz9i/package-smoke-test/bin/pip', preexec_fn = None, close_fds = True, pass_fds = ()\r\ncwd = None, env = None, startupinfo = None, creationflags = 0, shell = False, p2cread = -1, p2cwrite = -1\r\nc2pread = -1, c2pwrite = -1, errread = -1, errwrite = -1, restore_signals = True, start_new_session = False\r\n\r\n    def _execute_child(self, args, executable, preexec_fn, close_fds,\r\n                       pass_fds, cwd, env,\r\n                       startupinfo, creationflags, shell,\r\n                       p2cread, p2cwrite,\r\n                       c2pread, c2pwrite,\r\n                       errread, errwrite,\r\n                       restore_signals, start_new_session):\r\n        \"\"\"Execute program (POSIX version)\"\"\"\r\n\r\n        if isinstance(args, (str, bytes)):\r\n            args = [args]\r\n        else:\r\n            args = list(args)\r\n\r\n        if shell:\r\n            args = [\"/bin/sh\", \"-c\"] + args\r\n            if executable:\r\n                args[0] = executable\r\n\r\n        if executable is None:\r\n            executable = args[0]\r\n        orig_executable = executable\r\n\r\n        # For transferring possible exec failure from child to parent.\r\n        # Data format: \"exception name:hex errno:description\"\r\n        # Pickle is not used; it is complex and involves memory allocation.\r\n        errpipe_read, errpipe_write = os.pipe()\r\n        # errpipe_write must not be in the standard io 0, 1, or 2 fd range.\r\n        low_fds_to_close = []\r\n        while errpipe_write < 3:\r\n            low_fds_to_close.append(errpipe_write)\r\n            errpipe_write = os.dup(errpipe_write)\r\n        for low_fd in low_fds_to_close:\r\n            os.close(low_fd)\r\n        try:\r\n            try:\r\n                # We must avoid complex work that could involve\r\n                # malloc or free in the child process to avoid\r\n                # potential deadlocks, thus we do all this here.\r\n                # and pass it to fork_exec()\r\n\r\n                if env is not None:\r\n                    env_list = []\r\n                    for k, v in env.items():\r\n                        k = os.fsencode(k)\r\n                        if b'=' in k:\r\n                            raise ValueError(\"illegal environment variable name\")\r\n                        env_list.append(k + b'=' + os.fsencode(v))\r\n                else:\r\n                    env_list = None  # Use execv instead of execve.\r\n                executable = os.fsencode(executable)\r\n                if os.path.dirname(executable):\r\n                    executable_list = (executable,)\r\n                else:\r\n                    # This matches the behavior of os._execvpe().\r\n                    executable_list = tuple(\r\n                        os.path.join(os.fsencode(dir), executable)\r\n                        for dir in os.get_exec_path(env))\r\n                fds_to_keep = set(pass_fds)\r\n                fds_to_keep.add(errpipe_write)\r\n                self.pid = _posixsubprocess.fork_exec(\r\n                        args, executable_list,\r\n                        close_fds, tuple(sorted(map(int, fds_to_keep))),\r\n                        cwd, env_list,\r\n                        p2cread, p2cwrite, c2pread, c2pwrite,\r\n                        errread, errwrite,\r\n                        errpipe_read, errpipe_write,\r\n                        restore_signals, start_new_session, preexec_fn)\r\n                self._child_created = True\r\n            finally:\r\n                # be sure the FD is closed no matter what\r\n                os.close(errpipe_write)\r\n\r\n            # self._devnull is not always defined.\r\n            devnull_fd = getattr(self, '_devnull', None)\r\n            if p2cread != -1 and p2cwrite != -1 and p2cread != devnull_fd:\r\n                os.close(p2cread)\r\n            if c2pwrite != -1 and c2pread != -1 and c2pwrite != devnull_fd:\r\n                os.close(c2pwrite)\r\n            if errwrite != -1 and errread != -1 and errwrite != devnull_fd:\r\n                os.close(errwrite)\r\n            if devnull_fd is not None:\r\n                os.close(devnull_fd)\r\n            # Prevent a double close of these fds from __init__ on error.\r\n            self._closed_child_pipe_fds = True\r\n\r\n            # Wait for exec to fail or succeed; possibly raising an\r\n            # exception (limited in size)\r\n            errpipe_data = bytearray()\r\n            while True:\r\n                part = os.read(errpipe_read, 50000)\r\n                errpipe_data += part\r\n                if not part or len(errpipe_data) > 50000:\r\n                    break\r\n        finally:\r\n            # be sure the FD is closed no matter what\r\n            os.close(errpipe_read)\r\n\r\n        if errpipe_data:\r\n            try:\r\n                pid, sts = os.waitpid(self.pid, 0)\r\n                if pid == self.pid:\r\n                    self._handle_exitstatus(sts)\r\n                else:\r\n                    self.returncode = sys.maxsize\r\n            except ChildProcessError:\r\n                pass\r\n\r\n            try:\r\n                exception_name, hex_errno, err_msg = (\r\n                        errpipe_data.split(b':', 2))\r\n                # The encoding here should match the encoding\r\n                # written in by the subprocess implementations\r\n                # like _posixsubprocess\r\n                err_msg = err_msg.decode()\r\n            except ValueError:\r\n                exception_name = b'SubprocessError'\r\n                hex_errno = b'0'\r\n                err_msg = 'Bad exception data from child: {!r}'.format(\r\n                              bytes(errpipe_data))\r\n            child_exception_type = getattr(\r\n                    builtins, exception_name.decode('ascii'),\r\n                    SubprocessError)\r\n            if issubclass(child_exception_type, OSError) and hex_errno:\r\n                errno_num = int(hex_errno, 16)\r\n                child_exec_never_called = (err_msg == \"noexec\")\r\n                if child_exec_never_called:\r\n                    err_msg = \"\"\r\n                    # The error must be from chdir(cwd).\r\n                    err_filename = cwd\r\n                else:\r\n                    err_filename = orig_executable\r\n                if errno_num != 0:\r\n                    err_msg = os.strerror(errno_num)\r\n                    if errno_num == errno.ENOENT:\r\n                        err_msg += ': ' + repr(err_filename)\r\n>               raise child_exception_type(errno_num, err_msg, err_filename)\r\nE               FileNotFoundError: [Errno 2] No such file or directory: PosixPath('/tmp/tmpgibduz9i/package-smoke-test/bin/pip'): PosixPath('/tmp/tmpgibduz9i/package-smoke-test/bin/pip')\r\n\r\nargs       = [PosixPath('/tmp/tmpgibduz9i/package-smoke-test/bin/pip'), 'install', '-U', 'pip', 'setuptools']\r\nc2pread    = -1\r\nc2pwrite   = -1\r\nchild_exception_type = <class 'OSError'>\r\nchild_exec_never_called = False\r\nclose_fds  = True\r\ncreationflags = 0\r\ncwd        = None\r\ndevnull_fd = None\r\nenv        = None\r\nenv_list   = None\r\nerr_filename = PosixPath('/tmp/tmpgibduz9i/package-smoke-test/bin/pip')\r\nerr_msg    = \"No such file or directory: PosixPath('/tmp/tmpgibduz9i/package-smoke-test/bin/pip')\"\r\nerrno_num  = 2\r\nerrpipe_data = bytearray(b'OSError:2:')\r\nerrpipe_read = 8\r\nerrpipe_write = 10\r\nerrread    = -1\r\nerrwrite   = -1\r\nexception_name = bytearray(b'OSError')\r\nexecutable = b'/tmp/tmpgibduz9i/package-smoke-test/bin/pip'\r\nexecutable_list = (b'/tmp/tmpgibduz9i/package-smoke-test/bin/pip',)\r\nfds_to_keep = {10}\r\nhex_errno  = bytearray(b'2')\r\nlow_fds_to_close = []\r\norig_executable = PosixPath('/tmp/tmpgibduz9i/package-smoke-test/bin/pip')\r\np2cread    = -1\r\np2cwrite   = -1\r\npart       = b''\r\npass_fds   = ()\r\npid        = 26737\r\npreexec_fn = None\r\nrestore_signals = True\r\nself       = <subprocess.Popen object at 0x7f910d73eb70>\r\nshell      = False\r\nstart_new_session = False\r\nstartupinfo = None\r\nsts        = 65280\r\n\r\n/usr/lib/python3.6/subprocess.py:1344: FileNotFoundError\r\n======================= 1 failed, 35445 passed, 4080 skipped, 27 xfailed in 1236.16 seconds ======================== \r\n```",
  "closed_by": {
    "login": "carver",
    "id": 205327,
    "node_id": "MDQ6VXNlcjIwNTMyNw==",
    "avatar_url": "https://avatars.githubusercontent.com/u/205327?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/carver",
    "html_url": "https://github.com/carver",
    "followers_url": "https://api.github.com/users/carver/followers",
    "following_url": "https://api.github.com/users/carver/following{/other_user}",
    "gists_url": "https://api.github.com/users/carver/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/carver/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/carver/subscriptions",
    "organizations_url": "https://api.github.com/users/carver/orgs",
    "repos_url": "https://api.github.com/users/carver/repos",
    "events_url": "https://api.github.com/users/carver/events{/privacy}",
    "received_events_url": "https://api.github.com/users/carver/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/1768/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/py-evm/issues/1768/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/487756046",
    "html_url": "https://github.com/ethereum/py-evm/issues/1768#issuecomment-487756046",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/1768",
    "id": 487756046,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4Nzc1NjA0Ng==",
    "user": {
      "login": "carver",
      "id": 205327,
      "node_id": "MDQ6VXNlcjIwNTMyNw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/205327?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/carver",
      "html_url": "https://github.com/carver",
      "followers_url": "https://api.github.com/users/carver/followers",
      "following_url": "https://api.github.com/users/carver/following{/other_user}",
      "gists_url": "https://api.github.com/users/carver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/carver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/carver/subscriptions",
      "organizations_url": "https://api.github.com/users/carver/orgs",
      "repos_url": "https://api.github.com/users/carver/repos",
      "events_url": "https://api.github.com/users/carver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/carver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-04-29T21:47:23Z",
    "updated_at": "2019-04-29T21:47:23Z",
    "author_association": "MEMBER",
    "body": "Are you running from a process that doesn't have write access to your `/tmp/` dir?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/487756046/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/489612614",
    "html_url": "https://github.com/ethereum/py-evm/issues/1768#issuecomment-489612614",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/1768",
    "id": 489612614,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4OTYxMjYxNA==",
    "user": {
      "login": "akiannillo",
      "id": 8834392,
      "node_id": "MDQ6VXNlcjg4MzQzOTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8834392?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/akiannillo",
      "html_url": "https://github.com/akiannillo",
      "followers_url": "https://api.github.com/users/akiannillo/followers",
      "following_url": "https://api.github.com/users/akiannillo/following{/other_user}",
      "gists_url": "https://api.github.com/users/akiannillo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/akiannillo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/akiannillo/subscriptions",
      "organizations_url": "https://api.github.com/users/akiannillo/orgs",
      "repos_url": "https://api.github.com/users/akiannillo/repos",
      "events_url": "https://api.github.com/users/akiannillo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/akiannillo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-06T13:04:09Z",
    "updated_at": "2019-05-06T13:04:09Z",
    "author_association": "NONE",
    "body": "No, the process has write access to `/tmp/` dir",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/489612614/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/489775474",
    "html_url": "https://github.com/ethereum/py-evm/issues/1768#issuecomment-489775474",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/1768",
    "id": 489775474,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4OTc3NTQ3NA==",
    "user": {
      "login": "carver",
      "id": 205327,
      "node_id": "MDQ6VXNlcjIwNTMyNw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/205327?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/carver",
      "html_url": "https://github.com/carver",
      "followers_url": "https://api.github.com/users/carver/followers",
      "following_url": "https://api.github.com/users/carver/following{/other_user}",
      "gists_url": "https://api.github.com/users/carver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/carver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/carver/subscriptions",
      "organizations_url": "https://api.github.com/users/carver/orgs",
      "repos_url": "https://api.github.com/users/carver/repos",
      "events_url": "https://api.github.com/users/carver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/carver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-06T21:02:16Z",
    "updated_at": "2019-05-06T21:02:16Z",
    "author_association": "MEMBER",
    "body": "Oh, so you were running `pytest .`? There's a method in `scripts/release/test_package.py` that pytest might decide is a test, but isn't intended to be run as a test.\r\n\r\nWe always supply a specific target to `pytest`. If you really want to run everything in one shot, then I guess `pytest tests` would work. But I'd recommend running them in separate jobs, as supported by `tox`.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/489775474/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/492129590",
    "html_url": "https://github.com/ethereum/py-evm/issues/1768#issuecomment-492129590",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/1768",
    "id": 492129590,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5MjEyOTU5MA==",
    "user": {
      "login": "akiannillo",
      "id": 8834392,
      "node_id": "MDQ6VXNlcjg4MzQzOTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8834392?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/akiannillo",
      "html_url": "https://github.com/akiannillo",
      "followers_url": "https://api.github.com/users/akiannillo/followers",
      "following_url": "https://api.github.com/users/akiannillo/following{/other_user}",
      "gists_url": "https://api.github.com/users/akiannillo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/akiannillo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/akiannillo/subscriptions",
      "organizations_url": "https://api.github.com/users/akiannillo/orgs",
      "repos_url": "https://api.github.com/users/akiannillo/repos",
      "events_url": "https://api.github.com/users/akiannillo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/akiannillo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-14T08:21:14Z",
    "updated_at": "2019-05-14T08:21:14Z",
    "author_association": "NONE",
    "body": "Perfect! \r\nI didn't know that I have always to specify the target of `pytest`.\r\nYou should change it also into the docs [here](https://py-evm.readthedocs.io/en/latest/contributing.html#running-the-tests)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/492129590/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
