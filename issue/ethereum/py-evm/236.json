{
  "url": "https://api.github.com/repos/ethereum/py-evm/issues/236",
  "repository_url": "https://api.github.com/repos/ethereum/py-evm",
  "labels_url": "https://api.github.com/repos/ethereum/py-evm/issues/236/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/py-evm/issues/236/comments",
  "events_url": "https://api.github.com/repos/ethereum/py-evm/issues/236/events",
  "html_url": "https://github.com/ethereum/py-evm/issues/236",
  "id": 283679016,
  "node_id": "MDU6SXNzdWUyODM2NzkwMTY=",
  "number": 236,
  "title": "Implement `State` object",
  "user": {
    "login": "pipermerriam",
    "id": 824194,
    "node_id": "MDQ6VXNlcjgyNDE5NA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/pipermerriam",
    "html_url": "https://github.com/pipermerriam",
    "followers_url": "https://api.github.com/users/pipermerriam/followers",
    "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
    "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
    "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
    "repos_url": "https://api.github.com/users/pipermerriam/repos",
    "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
    "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 769749869,
      "node_id": "MDU6TGFiZWw3Njk3NDk4Njk=",
      "url": "https://api.github.com/repos/ethereum/py-evm/labels/eth2.0",
      "name": "eth2.0",
      "color": "ff95ca",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": {
    "login": "hwwhww",
    "id": 9263930,
    "node_id": "MDQ6VXNlcjkyNjM5MzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/9263930?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hwwhww",
    "html_url": "https://github.com/hwwhww",
    "followers_url": "https://api.github.com/users/hwwhww/followers",
    "following_url": "https://api.github.com/users/hwwhww/following{/other_user}",
    "gists_url": "https://api.github.com/users/hwwhww/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hwwhww/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hwwhww/subscriptions",
    "organizations_url": "https://api.github.com/users/hwwhww/orgs",
    "repos_url": "https://api.github.com/users/hwwhww/repos",
    "events_url": "https://api.github.com/users/hwwhww/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hwwhww/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "hwwhww",
      "id": 9263930,
      "node_id": "MDQ6VXNlcjkyNjM5MzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9263930?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hwwhww",
      "html_url": "https://github.com/hwwhww",
      "followers_url": "https://api.github.com/users/hwwhww/followers",
      "following_url": "https://api.github.com/users/hwwhww/following{/other_user}",
      "gists_url": "https://api.github.com/users/hwwhww/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hwwhww/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hwwhww/subscriptions",
      "organizations_url": "https://api.github.com/users/hwwhww/orgs",
      "repos_url": "https://api.github.com/users/hwwhww/repos",
      "events_url": "https://api.github.com/users/hwwhww/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hwwhww/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 6,
  "created_at": "2017-12-20T20:01:11Z",
  "updated_at": "2018-01-13T06:18:52Z",
  "closed_at": "2018-01-13T06:18:52Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "### What is wrong?\r\n\r\nCurrently, the `VM` class is part of the constructor for the `Computation` object.  Here are the places where it is currently used.\r\n\r\n```\r\nevm/logic/block.py:7:    block_hash = computation.vm.get_ancestor_hash(block_number)\r\nevm/logic/block.py:13:    computation.stack.push(computation.vm.block.header.coinbase)\r\nevm/logic/block.py:17:    computation.stack.push(computation.vm.block.header.timestamp)\r\nevm/logic/block.py:21:    computation.stack.push(computation.vm.block.header.block_number)\r\nevm/logic/block.py:25:    computation.stack.push(computation.vm.block.header.difficulty)\r\nevm/logic/block.py:29:    computation.stack.push(computation.vm.block.header.gas_limit)\r\nevm/logic/system.py:87:    computation.vm.logger.debug(\r\nevm/logic/system.py:141:            computation.vm.logger.debug(\r\nevm/vm/forks/spurious_dragon/utils.py:22:        yield computation.vm.block.header.coinbase\r\nevm/vm/computation.py:76:        self.vm = vm\r\nevm/vm/computation.py:197:            child_computation = self.vm.apply_create_message(child_msg)\r\nevm/vm/computation.py:199:            child_computation = self.vm.apply_message(child_msg)\r\nevm/vm/computation.py:280:        with self.vm.state_db(read_only, self.msg.access_list) as state_db:\r\n```\r\n\r\nGiving computation direct access to the `VM` is problematic for a number of reasons.\r\n\r\n- poor isolation for what data and APIs are available during EVM execution.\r\n- makes implementation of stateless clients difficult.\r\n- makes VM execution inherently non-pure.\r\n\r\n### How can it be fixed\r\n\r\nTo fix this, lets create a new `State` object.  Similar to how the `Transaction` class is specified for each `VM`, the `State` object should be similarly overrideable.\r\n\r\n- `VM.get_state_class()`\r\n- `VM.get_state()`\r\n- `VM.state` (this could be a convenience `property` that just delegates to `VM.get_state()`.\r\n\r\nThe `State` object will need the following things.\r\n\r\n- Access to the current block header information (`coinbase/timestamp/block_number/difficulty/gas_limit`.\r\n- The ancestry hashes for the current block number.\r\n- Access to the `StateDB`\r\n\r\nThe `State` object will also need the following APIs available to it.\r\n\r\n- `VM.apply_message`\r\n- `VM.apply_create_message`\r\n\r\nI think the best way to accomplish this is to relocate the following APIs to live directly on the `State` object itself, removing them from the `VM` object.\r\n\r\n- `VM.apply_message`\r\n- `VM.apply_create_message`\r\n- `VM.apply_computation`\r\n\r\nNote that `VM.apply_computation` needs access to `VM.get_opcode_fn()` and `VM.precompiles`.  This indicates we'll need to supply the `State` object with a way to get at this data.  The *simplest* solution that comes to mind is to add them as extra arguments:\r\n\r\n```python\r\nclass State:\r\n    def apply_computation(self, message, opcodes, precompiles):\r\n        ...\r\n```",
  "closed_by": {
    "login": "hwwhww",
    "id": 9263930,
    "node_id": "MDQ6VXNlcjkyNjM5MzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/9263930?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hwwhww",
    "html_url": "https://github.com/hwwhww",
    "followers_url": "https://api.github.com/users/hwwhww/followers",
    "following_url": "https://api.github.com/users/hwwhww/following{/other_user}",
    "gists_url": "https://api.github.com/users/hwwhww/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hwwhww/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hwwhww/subscriptions",
    "organizations_url": "https://api.github.com/users/hwwhww/orgs",
    "repos_url": "https://api.github.com/users/hwwhww/repos",
    "events_url": "https://api.github.com/users/hwwhww/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hwwhww/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/236/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/py-evm/issues/236/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/353184823",
    "html_url": "https://github.com/ethereum/py-evm/issues/236#issuecomment-353184823",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/236",
    "id": 353184823,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MzE4NDgyMw==",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-20T21:17:35Z",
    "updated_at": "2017-12-20T21:17:35Z",
    "author_association": "MEMBER",
    "body": "@hwwhww I was thinking you (or someone on the sharding team) would be a good fit for implementing this since you'll have a better idea of what's needs to be built on top of it.  Otherwise, I'm happy to take this on.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/353184823/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/353242261",
    "html_url": "https://github.com/ethereum/py-evm/issues/236#issuecomment-353242261",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/236",
    "id": 353242261,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MzI0MjI2MQ==",
    "user": {
      "login": "hwwhww",
      "id": 9263930,
      "node_id": "MDQ6VXNlcjkyNjM5MzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9263930?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hwwhww",
      "html_url": "https://github.com/hwwhww",
      "followers_url": "https://api.github.com/users/hwwhww/followers",
      "following_url": "https://api.github.com/users/hwwhww/following{/other_user}",
      "gists_url": "https://api.github.com/users/hwwhww/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hwwhww/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hwwhww/subscriptions",
      "organizations_url": "https://api.github.com/users/hwwhww/orgs",
      "repos_url": "https://api.github.com/users/hwwhww/repos",
      "events_url": "https://api.github.com/users/hwwhww/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hwwhww/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-21T02:38:26Z",
    "updated_at": "2017-12-21T02:38:26Z",
    "author_association": "MEMBER",
    "body": "@pipermerriam \r\nIt's really helpful and clear, thank you! \r\nI will start this task first (in `master`).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/353242261/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/353363125",
    "html_url": "https://github.com/ethereum/py-evm/issues/236#issuecomment-353363125",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/236",
    "id": 353363125,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MzM2MzEyNQ==",
    "user": {
      "login": "hwwhww",
      "id": 9263930,
      "node_id": "MDQ6VXNlcjkyNjM5MzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9263930?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hwwhww",
      "html_url": "https://github.com/hwwhww",
      "followers_url": "https://api.github.com/users/hwwhww/followers",
      "following_url": "https://api.github.com/users/hwwhww/following{/other_user}",
      "gists_url": "https://api.github.com/users/hwwhww/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hwwhww/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hwwhww/subscriptions",
      "organizations_url": "https://api.github.com/users/hwwhww/orgs",
      "repos_url": "https://api.github.com/users/hwwhww/repos",
      "events_url": "https://api.github.com/users/hwwhww/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hwwhww/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-21T14:23:46Z",
    "updated_at": "2017-12-21T14:23:46Z",
    "author_association": "MEMBER",
    "body": "#### Worklog\r\n\r\nIn `/tests/json-fixtures/test_virtual_machine.py`, it is configured to not actually apply messages.\r\nhttps://github.com/ethereum/py-evm/blob/288e65bf75f44b4acaace628befe1613bbca4564/tests/json-fixtures/test_virtual_machine.py#L112-L113\r\n\r\nBut these two function were moved from `VM` in to `State`.\r\n1. Because we use `VM.get_state()` to get `state` instance,  simply monkey patching on `HomesteadVMForTesting` doesn't works.\r\n2. Set configuration for `State` object via `VM` may work, but looks hassle if it's only for tests....?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/353363125/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/353424247",
    "html_url": "https://github.com/ethereum/py-evm/issues/236#issuecomment-353424247",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/236",
    "id": 353424247,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MzQyNDI0Nw==",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-21T18:34:16Z",
    "updated_at": "2017-12-21T18:34:16Z",
    "author_association": "MEMBER",
    "body": "With the idea that the `State` object is configurable for each VM, I think it's reasonable to do the following for those tests.\r\n\r\n- Create a specific `State` object subclass for the given `VM` that has these methods overridden with the testing versions.\r\n- Create a specific `VM` object subclass for the geven `VM` that has the augmented `State` object configured as it's default state object.\r\n\r\nThoughts?  Not sure if I missed something.  I'm open to alternate solutions.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/353424247/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/353515373",
    "html_url": "https://github.com/ethereum/py-evm/issues/236#issuecomment-353515373",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/236",
    "id": 353515373,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MzUxNTM3Mw==",
    "user": {
      "login": "hwwhww",
      "id": 9263930,
      "node_id": "MDQ6VXNlcjkyNjM5MzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9263930?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hwwhww",
      "html_url": "https://github.com/hwwhww",
      "followers_url": "https://api.github.com/users/hwwhww/followers",
      "following_url": "https://api.github.com/users/hwwhww/following{/other_user}",
      "gists_url": "https://api.github.com/users/hwwhww/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hwwhww/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hwwhww/subscriptions",
      "organizations_url": "https://api.github.com/users/hwwhww/orgs",
      "repos_url": "https://api.github.com/users/hwwhww/repos",
      "events_url": "https://api.github.com/users/hwwhww/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hwwhww/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-22T03:43:25Z",
    "updated_at": "2017-12-22T03:43:25Z",
    "author_association": "MEMBER",
    "body": "@pipermerriam Your solution works well and clean! I apply it by replacing `_state_class`:\r\n```python\r\nHomesteadStateForTesting = HomesteadState.configure(\r\n    name='HomesteadStateForTesting',\r\n    apply_message=apply_message_for_testing,\r\n    apply_create_message=apply_create_message_for_testing,\r\n    get_ancestor_hash=get_block_hash_for_testing,\r\n)\r\nHomesteadVMForTesting = HomesteadVM.configure(\r\n    name='HomesteadVMForTesting',\r\n    _state_class=HomesteadStateForTesting,\r\n)\r\n```\r\n\r\nThank you so much.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/353515373/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 1,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/357413278",
    "html_url": "https://github.com/ethereum/py-evm/issues/236#issuecomment-357413278",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/236",
    "id": 357413278,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NzQxMzI3OA==",
    "user": {
      "login": "hwwhww",
      "id": 9263930,
      "node_id": "MDQ6VXNlcjkyNjM5MzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9263930?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hwwhww",
      "html_url": "https://github.com/hwwhww",
      "followers_url": "https://api.github.com/users/hwwhww/followers",
      "following_url": "https://api.github.com/users/hwwhww/following{/other_user}",
      "gists_url": "https://api.github.com/users/hwwhww/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hwwhww/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hwwhww/subscriptions",
      "organizations_url": "https://api.github.com/users/hwwhww/orgs",
      "repos_url": "https://api.github.com/users/hwwhww/repos",
      "events_url": "https://api.github.com/users/hwwhww/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hwwhww/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-13T06:18:52Z",
    "updated_at": "2018-01-13T06:18:52Z",
    "author_association": "MEMBER",
    "body": "close via #247 ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/357413278/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
