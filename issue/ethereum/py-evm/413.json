{
  "url": "https://api.github.com/repos/ethereum/py-evm/issues/413",
  "repository_url": "https://api.github.com/repos/ethereum/py-evm",
  "labels_url": "https://api.github.com/repos/ethereum/py-evm/issues/413/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/py-evm/issues/413/comments",
  "events_url": "https://api.github.com/repos/ethereum/py-evm/issues/413/events",
  "html_url": "https://github.com/ethereum/py-evm/issues/413",
  "id": 300615549,
  "node_id": "MDU6SXNzdWUzMDA2MTU1NDk=",
  "number": 413,
  "title": "Paygas refund issue",
  "user": {
    "login": "jannikluhn",
    "id": 29854669,
    "node_id": "MDQ6VXNlcjI5ODU0NjY5",
    "avatar_url": "https://avatars.githubusercontent.com/u/29854669?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jannikluhn",
    "html_url": "https://github.com/jannikluhn",
    "followers_url": "https://api.github.com/users/jannikluhn/followers",
    "following_url": "https://api.github.com/users/jannikluhn/following{/other_user}",
    "gists_url": "https://api.github.com/users/jannikluhn/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jannikluhn/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jannikluhn/subscriptions",
    "organizations_url": "https://api.github.com/users/jannikluhn/orgs",
    "repos_url": "https://api.github.com/users/jannikluhn/repos",
    "events_url": "https://api.github.com/users/jannikluhn/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jannikluhn/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 769749869,
      "node_id": "MDU6TGFiZWw3Njk3NDk4Njk=",
      "url": "https://api.github.com/repos/ethereum/py-evm/labels/eth2.0",
      "name": "eth2.0",
      "color": "ff95ca",
      "default": false,
      "description": ""
    },
    {
      "id": 916505596,
      "node_id": "MDU6TGFiZWw5MTY1MDU1OTY=",
      "url": "https://api.github.com/repos/ethereum/py-evm/labels/Sharding%20-%20state%20layer",
      "name": "Sharding - state layer",
      "color": "0178aa",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 10,
  "created_at": "2018-02-27T12:45:20Z",
  "updated_at": "2018-09-26T07:59:24Z",
  "closed_at": "2018-09-26T07:59:24Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "### What is wrong?\r\n\r\nIf a transaction fails after PAYGAS has been called, the sender ends up with his initial balance plus some additional funds. The reason for this seems to be that at the point of failure, the state is reverted to the pre gas payment state (i.e. the original balance), and on top of that the unused gas is refunded.\r\n\r\nHere's the test case that discovered the bug: https://github.com/jannikluhn/py-evm/blob/de5365458c1839a47a1301551e3b62e54c5214ef/tests/fillers/vm_fillers/paygas_fillers.py#L322-L349\r\n\r\nIn this case, the account at `address` ends up with a balance of `138958` instead of `38958`.\r\n\r\n### How can it be fixed\r\n\r\nAfter reverting the state subtract the transaction fee again\r\n\r\nPing @NIC619 ",
  "closed_by": {
    "login": "hwwhww",
    "id": 9263930,
    "node_id": "MDQ6VXNlcjkyNjM5MzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/9263930?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hwwhww",
    "html_url": "https://github.com/hwwhww",
    "followers_url": "https://api.github.com/users/hwwhww/followers",
    "following_url": "https://api.github.com/users/hwwhww/following{/other_user}",
    "gists_url": "https://api.github.com/users/hwwhww/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hwwhww/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hwwhww/subscriptions",
    "organizations_url": "https://api.github.com/users/hwwhww/orgs",
    "repos_url": "https://api.github.com/users/hwwhww/repos",
    "events_url": "https://api.github.com/users/hwwhww/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hwwhww/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/413/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/py-evm/issues/413/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/369154570",
    "html_url": "https://github.com/ethereum/py-evm/issues/413#issuecomment-369154570",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/413",
    "id": 369154570,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2OTE1NDU3MA==",
    "user": {
      "login": "NIC619",
      "id": 17670147,
      "node_id": "MDQ6VXNlcjE3NjcwMTQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/17670147?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NIC619",
      "html_url": "https://github.com/NIC619",
      "followers_url": "https://api.github.com/users/NIC619/followers",
      "following_url": "https://api.github.com/users/NIC619/following{/other_user}",
      "gists_url": "https://api.github.com/users/NIC619/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NIC619/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NIC619/subscriptions",
      "organizations_url": "https://api.github.com/users/NIC619/orgs",
      "repos_url": "https://api.github.com/users/NIC619/repos",
      "events_url": "https://api.github.com/users/NIC619/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NIC619/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-28T08:10:13Z",
    "updated_at": "2018-02-28T08:10:13Z",
    "author_association": "MEMBER",
    "body": "Thanks for finding out the bug! I was thinking the same scenario but didn't realize that fee deducted in `PAYGAS` way is actually part of the intermediate state of transaction execution hence it's subjected to state revert.\r\n\r\nThis is a bit tricky and I don't feel quite comfortable subtracting the fee again after state reversion(though I don't have other solutions too ATM).\r\nIf we do this, we need to check if error was thrown(`computation.is_error`) in `execute_transaction` and take care the transaction fee/refund accordingly.\r\n```python\r\ndef execute_transaction(self, transaction):\r\n    \r\n    …\r\n\r\n    transaction_fee, gas_refund_amount = computation.compute_transaction_fee_and_refund()\r\n    if computation.is_error:\r\n        with state_db_cm() as state_db:\r\n            state_db.delta_balance(transaction.to, -1 * transaction_fee)\r\n    else:\r\n        if gas_refund_amount:\r\n            self.logger.debug(\r\n                'TRANSACTION REFUND: %s -> %s',\r\n                gas_refund_amount,\r\n                encode_hex(transaction.to),\r\n            )\r\n\r\n            with state_db_cm() as state_db:\r\n                state_db.delta_balance(transaction.to, gas_refund_amount)\r\n    # Miner Fees\r\n    self.logger.debug(\r\n        'TRANSACTION FEE: %s',\r\n        transaction_fee,\r\n    )\r\n\r\n    …\r\n\r\n```\r\nOne good news is that since `PAYGAS` is only valid if triggered in top level call context, we don't have to check the result of every child call to see if `PAYGAS` is triggered but reverted in the child call.\r\n\r\nPing @pipermerriam @vbuterin ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/369154570/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/369309897",
    "html_url": "https://github.com/ethereum/py-evm/issues/413#issuecomment-369309897",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/413",
    "id": 369309897,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2OTMwOTg5Nw==",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-28T17:08:53Z",
    "updated_at": "2018-02-28T17:08:53Z",
    "author_association": "MEMBER",
    "body": "Initial idea that comes to mind is enacting some way to bypass the journaling, or bury the state change deeper in the journal.  It's not immediately clear to me what the implementation of this would look like and I imagine it could get pretty messy.\r\n\r\nOther ideas are to move the PAYGAS state change to occur outside of whatever snapshot/revert block it's currently in, moving it to a location *after* the reversion happens when a computation errors out.\r\n\r\nDo either of these seem viable to you?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/369309897/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/369566556",
    "html_url": "https://github.com/ethereum/py-evm/issues/413#issuecomment-369566556",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/413",
    "id": 369566556,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2OTU2NjU1Ng==",
    "user": {
      "login": "NIC619",
      "id": 17670147,
      "node_id": "MDQ6VXNlcjE3NjcwMTQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/17670147?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NIC619",
      "html_url": "https://github.com/NIC619",
      "followers_url": "https://api.github.com/users/NIC619/followers",
      "following_url": "https://api.github.com/users/NIC619/following{/other_user}",
      "gists_url": "https://api.github.com/users/NIC619/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NIC619/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NIC619/subscriptions",
      "organizations_url": "https://api.github.com/users/NIC619/orgs",
      "repos_url": "https://api.github.com/users/NIC619/repos",
      "events_url": "https://api.github.com/users/NIC619/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NIC619/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-01T11:44:02Z",
    "updated_at": "2018-03-01T12:18:35Z",
    "author_association": "MEMBER",
    "body": "> Other ideas are to move the PAYGAS state change to occur outside of whatever snapshot/revert block it's currently in, moving it to a location after the reversion happens when a computation errors out.\r\n\r\nI've thought about this before but it seems there could be a DoS attack vector. If `PAYGAS` state change happens after transaction execution(i.e., in the post computation part), chances are that who is responsible for paying the transaction fee might turn out to be unable to afford it(transferred his ether away in the process) and hence render the transaction ineffective.\r\n\r\nHow about we don't make the state change immediately but instead store the transaction fee information in computation/msg object(or along with PAYGAS gas price)? Like a debt that is paid off only at the end of the transaction?\r\nDuring transaction execution, whenever there's a value transfer take place we first check if this is paid by the account who's responsible for the transaction fee and if this value transfer will make him become insolvent. If yes, throw `InsufficientFund` exception and charge him the transaction fee.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/369566556/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/369659082",
    "html_url": "https://github.com/ethereum/py-evm/issues/413#issuecomment-369659082",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/413",
    "id": 369659082,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2OTY1OTA4Mg==",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-01T17:01:11Z",
    "updated_at": "2018-03-01T17:01:11Z",
    "author_association": "MEMBER",
    "body": "That worries me.  It couples the state database with EVM business logic which feels wrong.\r\n\r\nThis leaves me with the original idea, which is to add a mechanism to bypass the journal.  After taking a look at the code, I think this is quite doable and you should be able to validate this approach pretty easily with a basic test.\r\n\r\nThe `JournalDB` will need to be updated to allow bypassing the journal.  I think the best way to do this would be to add a `bypass_journal` flag to all of the `get/set/delete` methods which defaults to `False`\r\n\r\nWhen `bypass_journal` is `True` the journal should do the following.\r\n\r\n- proceed with the operation on the `self.wrapped_db`\r\n- *if* the journal has any checkpoints, the earliest checkpoint should be updated to contain the new value for the key in question.\r\n\r\nThis code can be tested with the following somewhat simple test cases.\r\n\r\n```python\r\njdb = JournalDB(...)\r\n\r\n# case 1\r\ns = jdb.snapshot()\r\njdb.set(k, v, bypass=True)\r\njdb.revert(s)\r\nassert jdb.get(k) == v\r\n\r\n# case 2\r\ns = jdb.snapshot()\r\njdb.set(k, v)\r\njdb.set(k, v2, bypass=True)\r\njdb.revert(s)\r\nassert jdb.get(k) == v2\r\n\r\n# case 3\r\ns = jdb.snapshot()\r\njdb.set(k, v, bypass=True)\r\njdb.set(k, v2)\r\njdb.revert(s)\r\nassert jdb.get(k) == v\r\n\r\n# case 4\r\ns = jdb.snapshot()\r\njdb.set(k, v, bypass=True)\r\ns2 = jdb.snapshot()\r\njdb.set(k, v2)\r\njdb.revert(s)\r\nassert jdb.get(k) == v\r\n```\r\n\r\nLet me know what you think about this approach.  It feels cleaner than intertwining the actual PAYGAS business logic into different layers of the stack.  There will also need to be a change to the `AccountStateDB` object itself to tell it to bypass the journal which should probably just be a flag passed to it during instantiation.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/369659082/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/371177790",
    "html_url": "https://github.com/ethereum/py-evm/issues/413#issuecomment-371177790",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/413",
    "id": 371177790,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MTE3Nzc5MA==",
    "user": {
      "login": "jannikluhn",
      "id": 29854669,
      "node_id": "MDQ6VXNlcjI5ODU0NjY5",
      "avatar_url": "https://avatars.githubusercontent.com/u/29854669?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jannikluhn",
      "html_url": "https://github.com/jannikluhn",
      "followers_url": "https://api.github.com/users/jannikluhn/followers",
      "following_url": "https://api.github.com/users/jannikluhn/following{/other_user}",
      "gists_url": "https://api.github.com/users/jannikluhn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jannikluhn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jannikluhn/subscriptions",
      "organizations_url": "https://api.github.com/users/jannikluhn/orgs",
      "repos_url": "https://api.github.com/users/jannikluhn/repos",
      "events_url": "https://api.github.com/users/jannikluhn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jannikluhn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-07T15:35:36Z",
    "updated_at": "2018-03-07T15:35:36Z",
    "author_association": "MEMBER",
    "body": "I tried to implement this as @pipermerriam suggested. It turned out though that integrating this into the account state dbs is not as easy as I thought, as they don't write to `JournalDB` directly but via `ImmutableDB`, `TrackedDB`, and/or the trie classes. So the `bypass` parameter would have to be passed through a lot of unrelated classes which I don't like.\r\n\r\nAlternatively, one could not have a `bypass` parameter in each function call, but have an instance variable `JournalDB.bypassing` which can be turned on and off. This I like even less, because it's hard to debug and error prone.\r\n\r\nWhat is wrong with my original proposal of simply redoing the gas payment after reverting the state? Something like this:\r\n```Python\r\nif computation.is_error:\r\n    with state_db_cm() as state_db:\r\n        assert state_db.get_balance(message.to) >= transaction_fee  # checked in PAYGAS call\r\n        state_db.delta_balance(message.to, -transaction_fee)\r\n```\r\nIt's not the most beautiful, but clear and easy to understand in my opinion.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/371177790/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/371206357",
    "html_url": "https://github.com/ethereum/py-evm/issues/413#issuecomment-371206357",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/413",
    "id": 371206357,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MTIwNjM1Nw==",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-07T16:58:15Z",
    "updated_at": "2018-03-07T16:58:15Z",
    "author_association": "MEMBER",
    "body": "Thanks for exploring the idea.  Nothing wrong with your approach.  Make it so! 👍 ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/371206357/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/371223161",
    "html_url": "https://github.com/ethereum/py-evm/issues/413#issuecomment-371223161",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/413",
    "id": 371223161,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MTIyMzE2MQ==",
    "user": {
      "login": "jannikluhn",
      "id": 29854669,
      "node_id": "MDQ6VXNlcjI5ODU0NjY5",
      "avatar_url": "https://avatars.githubusercontent.com/u/29854669?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jannikluhn",
      "html_url": "https://github.com/jannikluhn",
      "followers_url": "https://api.github.com/users/jannikluhn/followers",
      "following_url": "https://api.github.com/users/jannikluhn/following{/other_user}",
      "gists_url": "https://api.github.com/users/jannikluhn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jannikluhn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jannikluhn/subscriptions",
      "organizations_url": "https://api.github.com/users/jannikluhn/orgs",
      "repos_url": "https://api.github.com/users/jannikluhn/repos",
      "events_url": "https://api.github.com/users/jannikluhn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jannikluhn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-07T17:49:29Z",
    "updated_at": "2018-03-07T17:49:29Z",
    "author_association": "MEMBER",
    "body": "This was too optimistic:\r\n\r\n```Python\r\nassert state_db.get_balance(message.to) >= transaction_fee  # checked in PAYGAS call\r\n```\r\n\r\nWhat happens if the contract paying for the gas receives a payment before PAYGAS is called? Then the PAYGAS call would succeed at first. But later, after the transaction reverts for some other reason, the balance is insufficient. @NIC619 what's supposed to happen in this case? Are all state changes prior to PAYGAS irreversible? Are outgoing calls prior to PAYGAS illegal? Should we postpone all of this until sharding phase 2?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/371223161/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/371412961",
    "html_url": "https://github.com/ethereum/py-evm/issues/413#issuecomment-371412961",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/413",
    "id": 371412961,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MTQxMjk2MQ==",
    "user": {
      "login": "NIC619",
      "id": 17670147,
      "node_id": "MDQ6VXNlcjE3NjcwMTQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/17670147?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NIC619",
      "html_url": "https://github.com/NIC619",
      "followers_url": "https://api.github.com/users/NIC619/followers",
      "following_url": "https://api.github.com/users/NIC619/following{/other_user}",
      "gists_url": "https://api.github.com/users/NIC619/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NIC619/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NIC619/subscriptions",
      "organizations_url": "https://api.github.com/users/NIC619/orgs",
      "repos_url": "https://api.github.com/users/NIC619/repos",
      "events_url": "https://api.github.com/users/NIC619/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NIC619/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-08T08:16:03Z",
    "updated_at": "2018-03-08T08:16:03Z",
    "author_association": "MEMBER",
    "body": "@jannikluhn That's a good counter example. This is indeed more complicated than I imagined...\r\nping @vbuterin \r\n\r\nIMO one rule that can not be broken even if paying with `PAYGAS` is that whoever(`transaction.to`) that should pay for the transaction fee should at least have enough ether in the first place. We currently do it by charging the transaction fee during pre-computation.\r\nSo IMO the case where `contract receive payment before PAYGAS so that it has enough to pay for gas` is what we should prevent. My first intuition is to store the contract's initial balance somewhere(`transaction_context`?) before computation and in `PAYGAS` we checked against the contract's current balance and initial balance.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/371412961/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/372241719",
    "html_url": "https://github.com/ethereum/py-evm/issues/413#issuecomment-372241719",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/413",
    "id": 372241719,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MjI0MTcxOQ==",
    "user": {
      "login": "vbuterin",
      "id": 2230894,
      "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vbuterin",
      "html_url": "https://github.com/vbuterin",
      "followers_url": "https://api.github.com/users/vbuterin/followers",
      "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
      "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
      "organizations_url": "https://api.github.com/users/vbuterin/orgs",
      "repos_url": "https://api.github.com/users/vbuterin/repos",
      "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vbuterin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-12T09:20:33Z",
    "updated_at": "2018-03-12T09:20:33Z",
    "author_association": "MEMBER",
    "body": "The solution that I had in mind (and thought I wrote somewhere?) is:\r\n\r\n* We store the initial balance of the contract as part of the computation state\r\n* PAYGAS(n) requires both (i) the current balance is at least `tx.gas * n` and (ii) the initial balance is at least `tx.gas * n`\r\n* If PAYGAS gets reverted, `tx.gas * n`  also gets subtracted from the balance.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/372241719/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/424622428",
    "html_url": "https://github.com/ethereum/py-evm/issues/413#issuecomment-424622428",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/413",
    "id": 424622428,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNDYyMjQyOA==",
    "user": {
      "login": "hwwhww",
      "id": 9263930,
      "node_id": "MDQ6VXNlcjkyNjM5MzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9263930?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hwwhww",
      "html_url": "https://github.com/hwwhww",
      "followers_url": "https://api.github.com/users/hwwhww/followers",
      "following_url": "https://api.github.com/users/hwwhww/following{/other_user}",
      "gists_url": "https://api.github.com/users/hwwhww/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hwwhww/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hwwhww/subscriptions",
      "organizations_url": "https://api.github.com/users/hwwhww/orgs",
      "repos_url": "https://api.github.com/users/hwwhww/repos",
      "events_url": "https://api.github.com/users/hwwhww/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hwwhww/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-26T07:59:24Z",
    "updated_at": "2018-09-26T07:59:24Z",
    "author_association": "MEMBER",
    "body": "deactivate",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/424622428/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
