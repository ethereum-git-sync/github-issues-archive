{
  "url": "https://api.github.com/repos/ethereum/py-evm/issues/1146",
  "repository_url": "https://api.github.com/repos/ethereum/py-evm",
  "labels_url": "https://api.github.com/repos/ethereum/py-evm/issues/1146/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/py-evm/issues/1146/comments",
  "events_url": "https://api.github.com/repos/ethereum/py-evm/issues/1146/events",
  "html_url": "https://github.com/ethereum/py-evm/issues/1146",
  "id": 347953998,
  "node_id": "MDU6SXNzdWUzNDc5NTM5OTg=",
  "number": 1146,
  "title": "Refactor gas constants",
  "user": {
    "login": "cburgdorf",
    "id": 521109,
    "node_id": "MDQ6VXNlcjUyMTEwOQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/521109?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cburgdorf",
    "html_url": "https://github.com/cburgdorf",
    "followers_url": "https://api.github.com/users/cburgdorf/followers",
    "following_url": "https://api.github.com/users/cburgdorf/following{/other_user}",
    "gists_url": "https://api.github.com/users/cburgdorf/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cburgdorf/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cburgdorf/subscriptions",
    "organizations_url": "https://api.github.com/users/cburgdorf/orgs",
    "repos_url": "https://api.github.com/users/cburgdorf/repos",
    "events_url": "https://api.github.com/users/cburgdorf/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cburgdorf/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 631592722,
      "node_id": "MDU6TGFiZWw2MzE1OTI3MjI=",
      "url": "https://api.github.com/repos/ethereum/py-evm/labels/Good%20First%20Issue",
      "name": "Good First Issue",
      "color": "0e8a16",
      "default": false,
      "description": null
    },
    {
      "id": 983615867,
      "node_id": "MDU6TGFiZWw5ODM2MTU4Njc=",
      "url": "https://api.github.com/repos/ethereum/py-evm/labels/type:%20refactor",
      "name": "type: refactor",
      "color": "eeeeee",
      "default": false,
      "description": ""
    },
    {
      "id": 983628532,
      "node_id": "MDU6TGFiZWw5ODM2Mjg1MzI=",
      "url": "https://api.github.com/repos/ethereum/py-evm/labels/prio:%20P4%20nice%20to%20have",
      "name": "prio: P4 nice to have",
      "color": "fef2c0",
      "default": false,
      "description": ""
    },
    {
      "id": 983629570,
      "node_id": "MDU6TGFiZWw5ODM2Mjk1NzA=",
      "url": "https://api.github.com/repos/ethereum/py-evm/labels/effort:%20E1%20hours",
      "name": "effort: E1 hours",
      "color": "bfe5bf",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 12,
  "created_at": "2018-08-06T14:44:22Z",
  "updated_at": "2018-08-21T08:05:56Z",
  "closed_at": "2018-08-21T08:05:56Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "### What is wrong?\r\n\r\nI noticed that our gas constants are a bit messy and should be reorganized.\r\n\r\nLet's take `GAS_BALANCE` as an example which is defined as such:\r\n\r\nhttps://github.com/ethereum/py-evm/blob/bf1d3c2ad653b4ed6ab9ffb836735863bb5d8148/eth/constants.py#L43\r\n\r\nFor someone new to the code base this may seem as if retrieving the balance from some account has a fixed gas cost of `20` when in reality it is `400` as specified with the tangerine whistle fork.\r\n\r\nhttps://github.com/ethereum/py-evm/blob/bf1d3c2ad653b4ed6ab9ffb836735863bb5d8148/eth/vm/forks/tangerine_whistle/constants.py#L13\r\n\r\n### How can it be fixed\r\n\r\nMy gut feeling says that only *true constants*â„¢ belong into `eth.constants` and that all *fork specific* constants should live in `evm.vm.forks.<fork_name>.constants`.",
  "closed_by": {
    "login": "cburgdorf",
    "id": 521109,
    "node_id": "MDQ6VXNlcjUyMTEwOQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/521109?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cburgdorf",
    "html_url": "https://github.com/cburgdorf",
    "followers_url": "https://api.github.com/users/cburgdorf/followers",
    "following_url": "https://api.github.com/users/cburgdorf/following{/other_user}",
    "gists_url": "https://api.github.com/users/cburgdorf/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cburgdorf/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cburgdorf/subscriptions",
    "organizations_url": "https://api.github.com/users/cburgdorf/orgs",
    "repos_url": "https://api.github.com/users/cburgdorf/repos",
    "events_url": "https://api.github.com/users/cburgdorf/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cburgdorf/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/1146/reactions",
    "total_count": 4,
    "+1": 4,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/py-evm/issues/1146/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/410760786",
    "html_url": "https://github.com/ethereum/py-evm/issues/1146#issuecomment-410760786",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/1146",
    "id": 410760786,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMDc2MDc4Ng==",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-06T16:06:32Z",
    "updated_at": "2018-08-06T16:06:32Z",
    "author_association": "MEMBER",
    "body": "I'm :+1: on this.  I have been thinking similarly about our opcodes.  That all opcodes in `eth.vm.logic` should be moved into the `FrontierVM`.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/410760786/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/410764323",
    "html_url": "https://github.com/ethereum/py-evm/issues/1146#issuecomment-410764323",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/1146",
    "id": 410764323,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMDc2NDMyMw==",
    "user": {
      "login": "cburgdorf",
      "id": 521109,
      "node_id": "MDQ6VXNlcjUyMTEwOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/521109?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cburgdorf",
      "html_url": "https://github.com/cburgdorf",
      "followers_url": "https://api.github.com/users/cburgdorf/followers",
      "following_url": "https://api.github.com/users/cburgdorf/following{/other_user}",
      "gists_url": "https://api.github.com/users/cburgdorf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cburgdorf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cburgdorf/subscriptions",
      "organizations_url": "https://api.github.com/users/cburgdorf/orgs",
      "repos_url": "https://api.github.com/users/cburgdorf/repos",
      "events_url": "https://api.github.com/users/cburgdorf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cburgdorf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-06T16:17:19Z",
    "updated_at": "2018-08-06T16:17:19Z",
    "author_association": "MEMBER",
    "body": ">I have been thinking similarly about our opcodes. That all opcodes in `eth.vm.logic` should be moved into the `FrontierVM`\r\n\r\nMmh...I'm not so sure about that one. After all, these are logic functions that even private chains may want to use. We already *configure* the opcodes per fork. \r\n\r\nhttps://github.com/ethereum/py-evm/blob/bf1d3c2ad653b4ed6ab9ffb836735863bb5d8148/eth/vm/forks/constantinople/opcodes.py#L24-L40\r\n\r\nBut imagine you are implementing a private chain and want to use `add`, `sub`, `mul` etc and have to import it from `eth.vm.forks.frontier`. That would feel weird, no?\r\n\r\nI can see the point though, chances are another fork wants to implement `mul` differently (unlikely but anyway) and so we end up with a different implementation of `mul`. But even then, I think this second `mul` implementation would just end up living in `eth.vm.logic` as long as it is *generic* enough to be used across different forks and chains.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/410764323/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/410768739",
    "html_url": "https://github.com/ethereum/py-evm/issues/1146#issuecomment-410768739",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/1146",
    "id": 410768739,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMDc2ODczOQ==",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-06T16:31:27Z",
    "updated_at": "2018-08-06T16:31:27Z",
    "author_association": "MEMBER",
    "body": "We could potentially anchor them in *stub* fork like `eth.vm.forks.core` which contains this common stuff and is more *sane* for 3rd parties to import and use.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/410768739/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/411045367",
    "html_url": "https://github.com/ethereum/py-evm/issues/1146#issuecomment-411045367",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/1146",
    "id": 411045367,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMTA0NTM2Nw==",
    "user": {
      "login": "cburgdorf",
      "id": 521109,
      "node_id": "MDQ6VXNlcjUyMTEwOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/521109?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cburgdorf",
      "html_url": "https://github.com/cburgdorf",
      "followers_url": "https://api.github.com/users/cburgdorf/followers",
      "following_url": "https://api.github.com/users/cburgdorf/following{/other_user}",
      "gists_url": "https://api.github.com/users/cburgdorf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cburgdorf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cburgdorf/subscriptions",
      "organizations_url": "https://api.github.com/users/cburgdorf/orgs",
      "repos_url": "https://api.github.com/users/cburgdorf/repos",
      "events_url": "https://api.github.com/users/cburgdorf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cburgdorf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-07T12:53:07Z",
    "updated_at": "2018-08-07T12:53:07Z",
    "author_association": "MEMBER",
    "body": "As in `eth.vm.forks.core` contains everything that forks may want to pull in or redefine. Sgtm.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/411045367/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/414312627",
    "html_url": "https://github.com/ethereum/py-evm/issues/1146#issuecomment-414312627",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/1146",
    "id": 414312627,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNDMxMjYyNw==",
    "user": {
      "login": "mratsim",
      "id": 22738317,
      "node_id": "MDQ6VXNlcjIyNzM4MzE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/22738317?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mratsim",
      "html_url": "https://github.com/mratsim",
      "followers_url": "https://api.github.com/users/mratsim/followers",
      "following_url": "https://api.github.com/users/mratsim/following{/other_user}",
      "gists_url": "https://api.github.com/users/mratsim/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mratsim/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mratsim/subscriptions",
      "organizations_url": "https://api.github.com/users/mratsim/orgs",
      "repos_url": "https://api.github.com/users/mratsim/repos",
      "events_url": "https://api.github.com/users/mratsim/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mratsim/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-20T13:15:52Z",
    "updated_at": "2018-08-20T13:15:52Z",
    "author_association": "NONE",
    "body": "When porting py-evm to Nim, we first used the same gas costs structure of Py-EVM but then refactored to isolate all gas costs and computation in a single file. See https://github.com/status-im/nimbus/pull/49 and the [final implementation](https://github.com/status-im/nimbus/blob/c9de0fbd29ad4559d64a467b68fdd1906bd34671/nimbus/vm/interpreter/gas_costs.nim#L508-L575).\r\n\r\nIn the end, we currently have on array per fork that maps the \"name\" to the gas cost from Yellow Paper Appendix G:\r\n\r\n![2018-08-20_15-08-17](https://user-images.githubusercontent.com/22738317/44342321-e4733e00-a48a-11e8-9078-4f471ac50d4a.png)\r\n\r\n```Nim\r\n# Generate the fork-specific gas costs tables\r\nconst\r\n  BaseGasFees: GasFeeSchedule = [\r\n    # Fee Schedule at for the initial Ethereum forks\r\n    GasZero:            0'i64,\r\n    GasBase:            2,\r\n    GasVeryLow:         3,\r\n    GasLow:             5,\r\n    GasMid:             8,\r\n    GasHigh:            10,\r\n    GasExtCode:         20,     # Changed to 700 in Tangerine (EIP150)\r\n    GasBalance:         20,     # Changed to 400 in Tangerine (EIP150)\r\n    GasSload:           50,     # Changed to 200 in Tangerine (EIP150)\r\n    GasJumpDest:        1,\r\n    GasSset:            20_000,\r\n    GasSreset:          5_000,\r\n    RefundSclear:       15_000,\r\n    RefundSelfDestruct: 24_000,\r\n    GasSelfDestruct:    0,      # Changed to 5000 in Tangerine (EIP150)\r\n    GasCreate:          32000,\r\n    GasCodeDeposit:     200,\r\n    GasCall:            40,     # Changed to 700 in Tangerine (EIP150)\r\n    GasCallValue:       9000,\r\n    GasCallStipend:     2300,\r\n    GasNewAccount:      25_000,\r\n    GasExp:             10,\r\n    GasExpByte:         10,     # Changed to 50 in Spurious Dragon (EIP160)\r\n    GasMemory:          3,\r\n    GasTXCreate:        32000,\r\n    GasTXDataZero:      4,\r\n    GasTXDataNonZero:   68,\r\n    GasTransaction:     21000,\r\n    GasLog:             375,\r\n    GasLogData:         8,\r\n    GasLogTopic:        375,\r\n    GasSha3:            30,\r\n    GasSha3Word:        6,\r\n    GasCopy:            3,\r\n    GasBlockhash:       20\r\n    # GasQuadDivisor:     100     # Unused, do not confuse with the quadratic coefficient 512 for memory expansion\r\n  ]\r\n\r\n# Create the schedule for each forks\r\nfunc tangerineGasFees(previous_fees: GasFeeSchedule): GasFeeSchedule =\r\n  # https://github.com/ethereum/EIPs/blob/master/EIPS/eip-150.md\r\n  result = previous_fees\r\n  result[GasSload]        = 200\r\n  result[GasSelfDestruct] = 5000\r\n  result[GasBalance]      = 400\r\n  result[GasCall]         = 40\r\n\r\nfunc spuriousGasFees(previous_fees: GasFeeSchedule): GasFeeSchedule =\r\n  # https://github.com/ethereum/EIPs/blob/master/EIPS/eip-160.md\r\n  result = previous_fees\r\n  result[GasExpByte]      = 50\r\n\r\nconst\r\n  TangerineGasFees = BaseGasFees.tangerineGasFees\r\n  SpuriousGasFees = TangerineGasFees.spuriousGasFees\r\n  # Note that later forks are still WIP\r\n\r\n# `gasCosts` is a macro that builds an array of gas cost functions\r\n# It takes (Fee schedule, prefix of generated functions, result array of functions)\r\n# as argument.\r\n# The array is a property of vm forks.\r\ngasCosts(BaseGasFees, base, BaseGasCosts)\r\ngasCosts(TangerineGasFees, tangerine, TangerineGasCosts)\r\n# Note that later forks are still WIP\r\n\r\nproc forkToSchedule*(fork: Fork): GasCosts =\r\n  if fork < FkTangerine:\r\n    BaseGasCosts\r\n  else:\r\n    TangerineGasCosts\r\n  # Note that later forks are still WIP\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/414312627/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/414425018",
    "html_url": "https://github.com/ethereum/py-evm/issues/1146#issuecomment-414425018",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/1146",
    "id": 414425018,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNDQyNTAxOA==",
    "user": {
      "login": "cburgdorf",
      "id": 521109,
      "node_id": "MDQ6VXNlcjUyMTEwOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/521109?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cburgdorf",
      "html_url": "https://github.com/cburgdorf",
      "followers_url": "https://api.github.com/users/cburgdorf/followers",
      "following_url": "https://api.github.com/users/cburgdorf/following{/other_user}",
      "gists_url": "https://api.github.com/users/cburgdorf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cburgdorf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cburgdorf/subscriptions",
      "organizations_url": "https://api.github.com/users/cburgdorf/orgs",
      "repos_url": "https://api.github.com/users/cburgdorf/repos",
      "events_url": "https://api.github.com/users/cburgdorf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cburgdorf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-20T18:56:31Z",
    "updated_at": "2018-08-20T18:58:22Z",
    "author_association": "MEMBER",
    "body": "@mratsim thanks for chiming in here and sharing your code from the nimbus client :+1: \r\nI had written up a big comment right before the internet had an outage (traveling) but I think it's well aligned with what you wrote. Here it goes:\r\n\r\nAs promised to @glaksmono in chat, here's me elaborating on the issue. Let's look at how the constants are used to day and the things that may be wrong with that.\r\n\r\nLet's consider `GAS_BALANCE` as an example. This constant was introduced to be used as a gas price for the opcode that reads the balance from an account. It was set to `20`. We can see it being used here to set the gas price of that opcode for the frontier code.\r\n\r\nhttps://github.com/ethereum/py-evm/blob/931e91531389c1a5f26f8f0690d04a7bca65e24a/eth/constants.py#L44\r\n\r\nHowever, retrieving the balance doesn't actually cost `20` gas anymore. It costs `400` as specified in the tangerine whistle fork. However, there was a *new* constant `GAS_BALANCE_EIP150` being introduced for that which lives in the tangerine whistle specific constants.\r\n\r\nhttps://github.com/ethereum/py-evm/blob/931e91531389c1a5f26f8f0690d04a7bca65e24a/eth/vm/forks/tangerine_whistle/constants.py#L13\r\n\r\nMy initial reaction was: Let's clean up `eth.constants` and move all things that are only used within a specific fork into the constants of that specific fork. But I think there's a problem with that approach as well.\r\n\r\nThere are more generic constants such as `GAS_VERYLOW` which are used by many different forks. But then `GAS_LOW` which falls into the same category is only used in the frontier fork. That's more or less random which means, just looking at the usage side doesn't give us a strong indicator of how to organize these constants.\r\n\r\nAnd then there's another category. A constant such as `GAS_SSET` isn't used by any fork but inside `eth.vm.logic` instead.\r\n\r\nWith that in mind, let's try something else.\r\n\r\nLet's create a new class `BaseConstants`  in `eth.vm.forks.core` and define it as such:\r\n\r\n```python\r\n\r\nclass BaseConstants:\r\n\r\n    GAS_LOW = 5\r\n    ...\r\n    GAS_BALANCE = 20\r\n    ...\r\n\r\n```\r\n\r\nAnd then instead of the forks maintaining plain old constants in a separate file, let them have their inherited versions of the `BaseConstants`.\r\n\r\n```python\r\n\r\nclass TangerineWhistleConstants(BaseConstants):\r\n\r\n    GAS_BALANCE = 400\r\n\r\n```\r\n\r\nInstead of introducing a new, different constant to adjust the gas price of the balance opcode, the fork would just redefine `GAS_BALANCE` with a different value.\r\n\r\nWith that in mind, let's derive some rules on how to use organize constants under that model.\r\n\r\n1. **Every** constant that has been used in the very first version (Frontier) already, goes into `BaseConstants`\r\n\r\n2. Constants that just redefine existing constants get dropped (e.g. `GAS_BALANCE_EIP150`) and instead, in the inherited `ForknameConstants`, the value of the original constant is overwritten.\r\n\r\n3. New constants *may be* introduced in `ForknameConstants` if they describe things that would not make sense in `BaseConstants` as they aren't generic and rather describe fork specific things.\r\n\r\n4. The `ForknameConstants` family of classes *must never* be imported outside of `eth.vm.forks`. E.g. `eth.vm.logic` can only import `BaseConstants` but not `TangerineWhistleConstants`\r\n\r\n5. If a function inside `eth.vm.logic` *wants* to import from a fork specific constant, then that is a clear signal that the function either needs to be moved into a fork specific place (which is what @pipermerriam  was suggesting) or that it needs to be refactored to accept the right constants to get injected.\r\n\r\n@pipermerriam does that feel alright to you?\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/414425018/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/414433625",
    "html_url": "https://github.com/ethereum/py-evm/issues/1146#issuecomment-414433625",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/1146",
    "id": 414433625,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNDQzMzYyNQ==",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-20T19:25:57Z",
    "updated_at": "2018-08-20T19:26:35Z",
    "author_association": "MEMBER",
    "body": "My initial thought is :-1: with respect to the status-quo of just leaving things as they are.  I already dislike how much inheritance we have in our current implementation and I'd like to move away from that.  Using a class inheritance based approach feels like it just further contributes to the tangle of inherited class mechanics we have going.\r\n\r\nI'm inclined to shelve this idea but I'm open to alternatives.  I'm currently in love with the concepts of composition but it isn't clear exactly how that would apply here.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/414433625/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/414435538",
    "html_url": "https://github.com/ethereum/py-evm/issues/1146#issuecomment-414435538",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/1146",
    "id": 414435538,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNDQzNTUzOA==",
    "user": {
      "login": "cburgdorf",
      "id": 521109,
      "node_id": "MDQ6VXNlcjUyMTEwOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/521109?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cburgdorf",
      "html_url": "https://github.com/cburgdorf",
      "followers_url": "https://api.github.com/users/cburgdorf/followers",
      "following_url": "https://api.github.com/users/cburgdorf/following{/other_user}",
      "gists_url": "https://api.github.com/users/cburgdorf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cburgdorf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cburgdorf/subscriptions",
      "organizations_url": "https://api.github.com/users/cburgdorf/orgs",
      "repos_url": "https://api.github.com/users/cburgdorf/repos",
      "events_url": "https://api.github.com/users/cburgdorf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cburgdorf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-20T19:32:31Z",
    "updated_at": "2018-08-20T19:32:31Z",
    "author_association": "MEMBER",
    "body": "I'm a big fan of composition as well but this applies more to\nfunctionality. This case is more about maintaining a extensible table of\nstatic constants. We wouldn't ever have instances of these classes anyway.\n\n\nOn Mon, Aug 20, 2018, 21:25 Piper Merriam <notifications@github.com> wrote:\n\n> My initial thought is ðŸ‘Ž with respect to the status-quo of just leaving\n> things as they are. I already dislike how much inheritance we have in our\n> current implementation and I'd like to move away from that.\n>\n> I'm inclined to shelve this idea but I'm open to alternatives. I'm\n> currently in love with the concepts of composition but it isn't clear\n> exactly how that would apply here.\n>\n> â€”\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/ethereum/py-evm/issues/1146#issuecomment-414433625>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAfzlcaGNTw1WuOkCzXNlXGUEbhQzbq5ks5uSw1GgaJpZM4Vwha9>\n> .\n>\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/414435538/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/414437164",
    "html_url": "https://github.com/ethereum/py-evm/issues/1146#issuecomment-414437164",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/1146",
    "id": 414437164,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNDQzNzE2NA==",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-20T19:37:21Z",
    "updated_at": "2018-08-20T19:37:21Z",
    "author_association": "MEMBER",
    "body": "instances and inheritance aside, I still don't see this as an improvement to the status quo.  I think the only thing this cleans up is forks which have new opcodes which still use things like `GAS_VERYLOW` as well as some new constant for an updated gas cost by simplifying it to a single import rather than two constants imports.  But then, trying to read what the actual value of one of those constants gets tricky because you'll have to trace your way backwards through the inheritance chain (6-7 classes deep) to find what the actual value is..\r\n\r\nI'm not seeing the benefit.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/414437164/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/414440081",
    "html_url": "https://github.com/ethereum/py-evm/issues/1146#issuecomment-414440081",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/1146",
    "id": 414440081,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNDQ0MDA4MQ==",
    "user": {
      "login": "cburgdorf",
      "id": 521109,
      "node_id": "MDQ6VXNlcjUyMTEwOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/521109?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cburgdorf",
      "html_url": "https://github.com/cburgdorf",
      "followers_url": "https://api.github.com/users/cburgdorf/followers",
      "following_url": "https://api.github.com/users/cburgdorf/following{/other_user}",
      "gists_url": "https://api.github.com/users/cburgdorf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cburgdorf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cburgdorf/subscriptions",
      "organizations_url": "https://api.github.com/users/cburgdorf/orgs",
      "repos_url": "https://api.github.com/users/cburgdorf/repos",
      "events_url": "https://api.github.com/users/cburgdorf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cburgdorf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-20T19:47:34Z",
    "updated_at": "2018-08-20T19:47:34Z",
    "author_association": "MEMBER",
    "body": "It basically boils down to the question: Do we prefer one fixed name per gas constant e.g. `GAS_BALANCE` vs introducing new ones (or alternative import pathes) for each change (e.g `GAS_BALANCE_EIP4711`, `GAS_BALANCE_EIP_8757` etc.)\r\n\r\nAs I understand it Nimbus and I believe Geth also follow this \"one table to rule them all\" approach. \r\n\r\nBut I'm fine to just stick to what we do if you aren't sharing the love ðŸ’•",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/414440081/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/414448983",
    "html_url": "https://github.com/ethereum/py-evm/issues/1146#issuecomment-414448983",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/1146",
    "id": 414448983,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNDQ0ODk4Mw==",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-20T20:17:38Z",
    "updated_at": "2018-08-20T20:17:38Z",
    "author_association": "MEMBER",
    "body": "While reading the nimbus issues they mentioned something about fully decoupling gas consumption from opcode logic.  I think that our architecture fits that, except that we then re-couple them together with the `as_opcode` stuff which bundles up the gas logic with the vm logic.  They mentioned something about the decoupling allowing for things like caching but it's not clear to me in practice how that would work.  If you can show me a clear-ish win/benefit from using a table based approach, lets talk, but I'm not really seeing it.\r\n\r\nAs for the weird names, I actually like them as they are expressive in making it clear why the value is different, i.e. it's the EIP4711 value.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/414448983/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/414587885",
    "html_url": "https://github.com/ethereum/py-evm/issues/1146#issuecomment-414587885",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/1146",
    "id": 414587885,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNDU4Nzg4NQ==",
    "user": {
      "login": "cburgdorf",
      "id": 521109,
      "node_id": "MDQ6VXNlcjUyMTEwOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/521109?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cburgdorf",
      "html_url": "https://github.com/cburgdorf",
      "followers_url": "https://api.github.com/users/cburgdorf/followers",
      "following_url": "https://api.github.com/users/cburgdorf/following{/other_user}",
      "gists_url": "https://api.github.com/users/cburgdorf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cburgdorf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cburgdorf/subscriptions",
      "organizations_url": "https://api.github.com/users/cburgdorf/orgs",
      "repos_url": "https://api.github.com/users/cburgdorf/repos",
      "events_url": "https://api.github.com/users/cburgdorf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cburgdorf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-21T08:05:56Z",
    "updated_at": "2018-08-21T08:05:56Z",
    "author_association": "MEMBER",
    "body": "To me, having one mapping table with fixed gas constants that just change in their value from fork to fork, sounds like a more maintainable thing compared to a potential explosion of different constants (depending on how often values change per constant).\r\n\r\nBut I don't wanna be stubborn about it. We can close this issue for now and maybe revisit it in the future if we feel things are starting to hurt.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/414587885/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
