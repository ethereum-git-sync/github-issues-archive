{
  "url": "https://api.github.com/repos/ethereum/py-evm/issues/1867",
  "repository_url": "https://api.github.com/repos/ethereum/py-evm",
  "labels_url": "https://api.github.com/repos/ethereum/py-evm/issues/1867/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/py-evm/issues/1867/comments",
  "events_url": "https://api.github.com/repos/ethereum/py-evm/issues/1867/events",
  "html_url": "https://github.com/ethereum/py-evm/issues/1867",
  "id": 515746409,
  "node_id": "MDU6SXNzdWU1MTU3NDY0MDk=",
  "number": 1867,
  "title": "Create upstream test for storage read after reverting a self-destruct",
  "user": {
    "login": "carver",
    "id": 205327,
    "node_id": "MDQ6VXNlcjIwNTMyNw==",
    "avatar_url": "https://avatars.githubusercontent.com/u/205327?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/carver",
    "html_url": "https://github.com/carver",
    "followers_url": "https://api.github.com/users/carver/followers",
    "following_url": "https://api.github.com/users/carver/following{/other_user}",
    "gists_url": "https://api.github.com/users/carver/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/carver/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/carver/subscriptions",
    "organizations_url": "https://api.github.com/users/carver/orgs",
    "repos_url": "https://api.github.com/users/carver/repos",
    "events_url": "https://api.github.com/users/carver/events{/privacy}",
    "received_events_url": "https://api.github.com/users/carver/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 5,
  "created_at": "2019-10-31T21:06:36Z",
  "updated_at": "2019-11-01T22:04:29Z",
  "closed_at": "2019-11-01T22:04:28Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "### What is wrong?\r\n\r\nCore tests didn't catch #1865 -- let's make sure other clients don't have the same problem.\r\n\r\n### How can it be fixed\r\n\r\nBuild a test definition in the `ethereum/tests` format that triggers the case. Something like:\r\n\r\n```\r\n+---------+ +-----+               +-------------+                +-------+                                       +-----------------+\r\n| Genesis | | Txn |               | TestRunner  |                | Proxy |                                       | SelfDestructive |\r\n+---------+ +-----+               +-------------+                +-------+                                       +-----------------+\r\n     |         |                         |                           |                                                    |\r\n     | Deploy Contract                   |                           |                                                    |\r\n     |-------------------------------------------------------------->|                                                    |\r\n     |         |                         |                           |                                                    |\r\n     | Deploy Contract & Set Storage Slot 33 to Value 44             |                                                    |\r\n     |------------------------------------------------------------------------------------------------------------------->|\r\n     |         | -----------------\\      |                           |                                                    |\r\n     |         |-| Start of block |      |                           |                                                    |\r\n     |         | |----------------|      |                           |                                                    |\r\n     |         |                         |                           |                                                    |\r\n     |         | Launch Contract         |                           |                                                    |\r\n     |         |------------------------>|                           |                                                    |\r\n     |         |                         |                           |                                                    |\r\n     |         |                         | CALL with limited gas     |                                                    |\r\n     |         |                         |-------------------------->|                                                    |\r\n     |         |                         |                           |                                                    |\r\n     |         |                         |                           | CALL                                               |\r\n     |         |                         |                           |--------------------------------------------------->|\r\n     |         |                         |                           |                                                    |\r\n     |         |                         |                           |                                       SELFDESTRUCT |\r\n     |         |                         |                           |<---------------------------------------------------|\r\n     |         |                         |                           | ------------------------\\                          |\r\n     |         |                         |                           |-| Burn gas till run out |                          |\r\n     |         |                         |                           | |-----------------------|                          |\r\n     |         |                         |                           | ------------------------------------------\\        |\r\n     |         |                         |                           |-| Revert changes (including SELFDESTRUCT) |        |\r\n     |         |                         |                           | |-----------------------------------------|        |\r\n     |         |                         |                           |                                                    |\r\n     |         |                         |                Out of gas |                                                    |\r\n     |         |                         |<--------------------------|                                                    |\r\n     |         |                         |                           |                                                    |\r\n     |         |                         | CALL to retrieve storage value                                                 |\r\n     |         |                         |------------------------------------------------------------------------------->|\r\n     |         |                         |                           |                                                    | --------------------\\\r\n     |         |                         |                           |                                                    |-| SLOAD 33 & RETURN |\r\n     |         |                         |                           |                                                    | |-------------------|\r\n     |         |                         |                           |                                                    |\r\n     |         |                         |                           |                                    return value 44 |\r\n     |         |                         |<-------------------------------------------------------------------------------|\r\n     |         |                         | ---------------------\\    |                                                    |\r\n     |         |                         |-| assert value == 44 |    |                                                    |\r\n     |         |                         | |--------------------|    |                                                    |\r\n     |         |                         |                           |                                                    |\r\n     |         |                    exit |                           |                                                    |\r\n     |         |<------------------------|                           |                                                    |\r\n     |         |                         |                           |                                                    |\r\n```\r\n\r\nBuilt using https://textart.io/sequence with source:\r\n```\r\nobject Genesis Txn TestRunner Proxy SelfDestructive\r\nGenesis->Proxy: Deploy Contract\r\nGenesis->SelfDestructive: Deploy Contract & Set Storage Slot 33 to Value 44\r\nnote right of Txn: Start of block\r\nTxn->TestRunner: Launch Contract\r\nTestRunner->Proxy: CALL with limited gas\r\nProxy->SelfDestructive: CALL\r\nSelfDestructive->Proxy: SELFDESTRUCT\r\nnote right of Proxy: Burn gas till run out\r\nnote right of Proxy: Revert changes (including SELFDESTRUCT)\r\nProxy->TestRunner: Out of gas\r\nTestRunner->SelfDestructive: CALL to retrieve storage value\r\nnote right of SelfDestructive: SLOAD 33 & RETURN\r\nSelfDestructive->TestRunner: return value 44\r\nnote right of TestRunner: assert value == 44\r\nTestRunner->Txn: exit\r\n```\r\n\r\nAlso note that there is a variant of this that should be tested separately: where a separate storage load is triggered *before* the first call to `Contract1`.\r\n\r\nWhen building these two test cases, they should both fail on a commit before #1866 is merged, and then succeed after that's merged.\r\n\r\n(The failure case in both of these variants was that the returned value was 0 instead of 44.)",
  "closed_by": {
    "login": "carver",
    "id": 205327,
    "node_id": "MDQ6VXNlcjIwNTMyNw==",
    "avatar_url": "https://avatars.githubusercontent.com/u/205327?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/carver",
    "html_url": "https://github.com/carver",
    "followers_url": "https://api.github.com/users/carver/followers",
    "following_url": "https://api.github.com/users/carver/following{/other_user}",
    "gists_url": "https://api.github.com/users/carver/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/carver/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/carver/subscriptions",
    "organizations_url": "https://api.github.com/users/carver/orgs",
    "repos_url": "https://api.github.com/users/carver/repos",
    "events_url": "https://api.github.com/users/carver/events{/privacy}",
    "received_events_url": "https://api.github.com/users/carver/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/1867/reactions",
    "total_count": 1,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 1,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/py-evm/issues/1867/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/548606172",
    "html_url": "https://github.com/ethereum/py-evm/issues/1867#issuecomment-548606172",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/1867",
    "id": 548606172,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0ODYwNjE3Mg==",
    "user": {
      "login": "carver",
      "id": 205327,
      "node_id": "MDQ6VXNlcjIwNTMyNw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/205327?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/carver",
      "html_url": "https://github.com/carver",
      "followers_url": "https://api.github.com/users/carver/followers",
      "following_url": "https://api.github.com/users/carver/following{/other_user}",
      "gists_url": "https://api.github.com/users/carver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/carver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/carver/subscriptions",
      "organizations_url": "https://api.github.com/users/carver/orgs",
      "repos_url": "https://api.github.com/users/carver/repos",
      "events_url": "https://api.github.com/users/carver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/carver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-31T23:18:59Z",
    "updated_at": "2019-10-31T23:36:30Z",
    "author_association": "MEMBER",
    "body": "Here is a first shot at the relevant contracts in Solidity.\r\n\r\nDeploy `Proxy` in one block. Then in the next block, deploy `TestRunner` and initiate with `TestRunner.runTest(proxyAddress)`:\r\n\r\n```solidity\r\npragma solidity ^0.5.12;\r\n\r\ncontract SelfDestructive {\r\n    uint myStore;\r\n    constructor() public {\r\n        myStore = 42;\r\n    }\r\n    \r\n    function getStore() public view returns (uint) {\r\n        return myStore;\r\n    }\r\n    \r\n    function destroy() public {\r\n        selfdestruct(0x0000000000000000000000000000000000000000);\r\n    }\r\n}\r\n\r\ncontract Proxy {\r\n    SelfDestructive target;\r\n    \r\n    constructor() public {\r\n        target = new SelfDestructive();\r\n    }\r\n    \r\n    function getStore() public view returns (uint) {\r\n        return target.getStore();\r\n    }\r\n    \r\n    function destroyAndBurn() public {\r\n        target.destroy();\r\n\r\n        // burn the rest of the gas\r\n        for (uint i = 0; i < 2^20; i++) {\r\n            i += address(this).balance;\r\n            // Balance will always be 0, so won't actually affect i\r\n            // It's just a stab at avoiding any \"smart\" optimizations\r\n        }\r\n    }\r\n}\r\n\r\ncontract TestRunner {\r\n    function runTest(address proxyAddress) public returns (uint) {\r\n        // TODO: optionally read out of proxy.getStore() at the beginning of the method\r\n\r\n        bool success;\r\n        bytes memory resultMemory;\r\n        \r\n        // We need to use call() so we can continue even though it runs out of gas\r\n        (success, resultMemory) = proxyAddress.call.\r\n            // Pass enough gas to enable contract destruction, but not enough to\r\n            // exit destroyAndBurn cleanly.\r\n            gas(10000)(abi.encodeWithSignature(\"destroyAndBurn()\"));\r\n            \r\n        // Running out of gas should force the contract call to fail\r\n        assert(!success);\r\n        \r\n        Proxy proxy = Proxy(proxyAddress);\r\n        uint storedVal = proxy.getStore();\r\n        assert(storedVal == 42);\r\n        return 0xbeef;\r\n    }\r\n}\r\n```\r\n\r\nI haven't yet tested whether this triggers the relevant failure in old versions of py-evm.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/548606172/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/548712931",
    "html_url": "https://github.com/ethereum/py-evm/issues/1867#issuecomment-548712931",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/1867",
    "id": 548712931,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0ODcxMjkzMQ==",
    "user": {
      "login": "karalabe",
      "id": 129561,
      "node_id": "MDQ6VXNlcjEyOTU2MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/129561?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/karalabe",
      "html_url": "https://github.com/karalabe",
      "followers_url": "https://api.github.com/users/karalabe/followers",
      "following_url": "https://api.github.com/users/karalabe/following{/other_user}",
      "gists_url": "https://api.github.com/users/karalabe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/karalabe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/karalabe/subscriptions",
      "organizations_url": "https://api.github.com/users/karalabe/orgs",
      "repos_url": "https://api.github.com/users/karalabe/repos",
      "events_url": "https://api.github.com/users/karalabe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/karalabe/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-01T08:50:17Z",
    "updated_at": "2019-11-01T08:50:17Z",
    "author_association": "MEMBER",
    "body": "Your repro doesn't seem to set the field ever (apart from the constructor) so I'm not sure it actually reproduces the issue. I've extended it a bit for two cases:\r\n\r\nOne case is when we set the value within destroyAndBurn, which should be reverted back on failure: https://gist.github.com/karalabe/f9566349ac549e511c0260cfc783cef5\r\n\r\nThe second case is when we set the value before calling destroyAndBurn, which should not be reverted back on failure: https://gist.github.com/karalabe/3e9bbe40fe7a8401c00e7bcd31d6ff81\r\n\r\nBoth these cases seem to work in Geth. Am I missing something. Is my repro accurate? ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/548712931/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/548713317",
    "html_url": "https://github.com/ethereum/py-evm/issues/1867#issuecomment-548713317",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/1867",
    "id": 548713317,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0ODcxMzMxNw==",
    "user": {
      "login": "karalabe",
      "id": 129561,
      "node_id": "MDQ6VXNlcjEyOTU2MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/129561?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/karalabe",
      "html_url": "https://github.com/karalabe",
      "followers_url": "https://api.github.com/users/karalabe/followers",
      "following_url": "https://api.github.com/users/karalabe/following{/other_user}",
      "gists_url": "https://api.github.com/users/karalabe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/karalabe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/karalabe/subscriptions",
      "organizations_url": "https://api.github.com/users/karalabe/orgs",
      "repos_url": "https://api.github.com/users/karalabe/repos",
      "events_url": "https://api.github.com/users/karalabe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/karalabe/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-01T08:51:46Z",
    "updated_at": "2019-11-01T08:51:46Z",
    "author_association": "MEMBER",
    "body": "Ah, your repro was not about net sstore, rather just setting and reverting storage slots?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/548713317/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/548905854",
    "html_url": "https://github.com/ethereum/py-evm/issues/1867#issuecomment-548905854",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/1867",
    "id": 548905854,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0ODkwNTg1NA==",
    "user": {
      "login": "carver",
      "id": 205327,
      "node_id": "MDQ6VXNlcjIwNTMyNw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/205327?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/carver",
      "html_url": "https://github.com/carver",
      "followers_url": "https://api.github.com/users/carver/followers",
      "following_url": "https://api.github.com/users/carver/following{/other_user}",
      "gists_url": "https://api.github.com/users/carver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/carver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/carver/subscriptions",
      "organizations_url": "https://api.github.com/users/carver/orgs",
      "repos_url": "https://api.github.com/users/carver/repos",
      "events_url": "https://api.github.com/users/carver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/carver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-01T18:44:18Z",
    "updated_at": "2019-11-01T18:46:44Z",
    "author_association": "MEMBER",
    "body": "> Ah, your repro was not about net sstore, rather just setting and reverting storage slots?\r\n\r\nRight, we need to make sure that the self-destruct that wipes out the storage gets reverted so the storage is back to its original state.\r\n\r\nIn fact, trinity did *not* have the bug if the storage was ever set within the target block (which is why I had genesis set the storage in the repro).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/548905854/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/548966445",
    "html_url": "https://github.com/ethereum/py-evm/issues/1867#issuecomment-548966445",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/1867",
    "id": 548966445,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0ODk2NjQ0NQ==",
    "user": {
      "login": "carver",
      "id": 205327,
      "node_id": "MDQ6VXNlcjIwNTMyNw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/205327?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/carver",
      "html_url": "https://github.com/carver",
      "followers_url": "https://api.github.com/users/carver/followers",
      "following_url": "https://api.github.com/users/carver/following{/other_user}",
      "gists_url": "https://api.github.com/users/carver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/carver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/carver/subscriptions",
      "organizations_url": "https://api.github.com/users/carver/orgs",
      "repos_url": "https://api.github.com/users/carver/repos",
      "events_url": "https://api.github.com/users/carver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/carver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-01T22:04:28Z",
    "updated_at": "2019-11-01T22:04:28Z",
    "author_association": "MEMBER",
    "body": "Sorry, false alarm. It's only possible to construct this scenario *outside* of the EVM (which is how we first became aware of it, during gas estimation):\r\n\r\n1. snapshot the state\r\n2. delete an account\r\n3. roll back the state to the snapshot at 1\r\n\r\nStep 3 is impossible in-evm because account deletion is scheduled for the end of the transaction, and there is no way to trigger a fault after account deletion runs. So we never try to roll back the state after account deletion in-evm.\r\n\r\nWe do this during gas estimation, because we do:\r\n\r\n1. pick gas value to run transaction\r\n2. snapshot state\r\n3. execute transaction fully\r\n4. note if transaction runs out of gas\r\n4. roll back transaction\r\n6. go back to 1, looking for optimal gas value, with binary search\r\n\r\nSo we created an artificial scenario where it's possible to roll back after account deletion.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/548966445/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
