{
  "url": "https://api.github.com/repos/ethereum/py-evm/issues/1206",
  "repository_url": "https://api.github.com/repos/ethereum/py-evm",
  "labels_url": "https://api.github.com/repos/ethereum/py-evm/issues/1206/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/py-evm/issues/1206/comments",
  "events_url": "https://api.github.com/repos/ethereum/py-evm/issues/1206/events",
  "html_url": "https://github.com/ethereum/py-evm/issues/1206",
  "id": 352859522,
  "node_id": "MDU6SXNzdWUzNTI4NTk1MjI=",
  "number": 1206,
  "title": "A few ideas for the event bus",
  "user": {
    "login": "cburgdorf",
    "id": 521109,
    "node_id": "MDQ6VXNlcjUyMTEwOQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/521109?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cburgdorf",
    "html_url": "https://github.com/cburgdorf",
    "followers_url": "https://api.github.com/users/cburgdorf/followers",
    "following_url": "https://api.github.com/users/cburgdorf/following{/other_user}",
    "gists_url": "https://api.github.com/users/cburgdorf/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cburgdorf/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cburgdorf/subscriptions",
    "organizations_url": "https://api.github.com/users/cburgdorf/orgs",
    "repos_url": "https://api.github.com/users/cburgdorf/repos",
    "events_url": "https://api.github.com/users/cburgdorf/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cburgdorf/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 983614747,
      "node_id": "MDU6TGFiZWw5ODM2MTQ3NDc=",
      "url": "https://api.github.com/repos/ethereum/py-evm/labels/type:%20feature",
      "name": "type: feature",
      "color": "eeeeee",
      "default": false,
      "description": ""
    },
    {
      "id": 983615043,
      "node_id": "MDU6TGFiZWw5ODM2MTUwNDM=",
      "url": "https://api.github.com/repos/ethereum/py-evm/labels/type:%20performance",
      "name": "type: performance",
      "color": "eeeeee",
      "default": false,
      "description": ""
    },
    {
      "id": 983615867,
      "node_id": "MDU6TGFiZWw5ODM2MTU4Njc=",
      "url": "https://api.github.com/repos/ethereum/py-evm/labels/type:%20refactor",
      "name": "type: refactor",
      "color": "eeeeee",
      "default": false,
      "description": ""
    },
    {
      "id": 983616278,
      "node_id": "MDU6TGFiZWw5ODM2MTYyNzg=",
      "url": "https://api.github.com/repos/ethereum/py-evm/labels/type:%20RFC%20/%20discussion%20/%20question",
      "name": "type: RFC / discussion / question",
      "color": "eeeeee",
      "default": false,
      "description": ""
    },
    {
      "id": 983628230,
      "node_id": "MDU6TGFiZWw5ODM2MjgyMzA=",
      "url": "https://api.github.com/repos/ethereum/py-evm/labels/prio:%20P3%20important",
      "name": "prio: P3 important",
      "color": "fad8c7",
      "default": false,
      "description": ""
    },
    {
      "id": 983629919,
      "node_id": "MDU6TGFiZWw5ODM2Mjk5MTk=",
      "url": "https://api.github.com/repos/ethereum/py-evm/labels/effort:%20E2%20days",
      "name": "effort: E2 days",
      "color": "bfe5bf",
      "default": false,
      "description": ""
    },
    {
      "id": 983630187,
      "node_id": "MDU6TGFiZWw5ODM2MzAxODc=",
      "url": "https://api.github.com/repos/ethereum/py-evm/labels/effort:%20E3%20weeks",
      "name": "effort: E3 weeks",
      "color": "bfe5bf",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2018-08-22T08:51:11Z",
  "updated_at": "2018-08-30T15:00:26Z",
  "closed_at": "2018-08-30T15:00:26Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "### Inter-process communication in Trinity\r\n\r\nWe are currently experimenting with different architectures to figure out the best way forward to prepare for a multi process architecture in which having multiple processes doesn't feel fragile and cumbersome but rather robust, manageable and lightweight.\r\n\r\nIt currently seems that we are [leaning towards](https://github.com/ethereum/py-evm/issues/1075#issuecomment-413684135) an architecture that uses a single event bus to allow loose, decoupled, async communication between processes as explained in [this comment](https://github.com/ethereum/py-evm/issues/1075#issuecomment-413489849).\r\n\r\nThat idea is currently in a PoC phase with a [pre-mature event bus spike](https://github.com/cburgdorf/lahja/blob/master/README.md) as well as two PoC PRs that demo it's usage (https://github.com/ethereum/py-evm/pull/1202, https://github.com/ethereum/py-evm/pull/1172).\r\n\r\nThere are a number of issues today that I believe are crucial to move this forward hence I'm collecting and throwing them out here.\r\n\r\n### Random ideas for the event bus\r\n\r\n**1. Get objective performance metrics**\r\n\r\nI believe the number one reason why we want this architecture is simplicity and robustness. However, we also need to take performance into account. There are several things that may make this approach less performant out of the box (though, with much much room for improvements) and it would be nice to measure and compare rather than just guess.\r\n\r\n**2. Allow routed events**\r\n\r\nTo begin with, all events that are broadcasted are delivered to all endpoints of the event bus (where each endpoint is usually sitting in a different process). Then, inside these endpoints, the events are either processed because someone is listening to them via `subscribe` / `stream` APIs, or they are lost if no one is interested in them. Nevertheless, they are *delivered* to each endpoint no matter if they are actually consumed or not. \r\n\r\nWe can do better than that and allow events to be routed (related: [routed events in Chromium multi process architecture](https://www.chromium.org/developers/design-documents/inter-process-communication)).\r\n\r\nRouting can happen *implicitly* (more on that later) or *explicitly*. \r\n\r\n**3. Explicit routing via `broadcast` API**\r\n\r\nThe `broadcast` API could accept an optional configuration object that could allow things like:\r\n\r\n*Excluding specific endpoints for delivery*\r\n\r\n```python\r\nevent_bus.broadcast(SomeEvent(), Config(exclude_endpoints = [\"proc1\", \"proc2\"])\r\n```\r\n*Only delivering to explicitly named endpoints*\r\n\r\n```python\r\nevent_bus.broadcast(SomeEvent(), Config(filter_endpoints = [\"proc1\", \"proc3\"])\r\n```\r\n*Excluding specific endpoints **groups** for delivery*\r\n\r\n```python\r\nevent_bus.broadcast(SomeEvent(), Config(exclude_groups = [\"plugins\"])\r\n```\r\n*Only delivering to explicitly named endpoint **groups***\r\n\r\n```python\r\nevent_bus.broadcast(SomeEvent(), Config(filter_groups = [\"plugins\"])\r\n```\r\nGroups of endpoints can be a powerful concept for when the exact ids/names of endpoints are unknown at design time but a statement about them belonging to a specific group can well be codified at development time (think: plugins!)\r\n\r\n**4. implicit routing via `request` API**\r\n\r\nWhile one of the primary use cases for the event bus is loosly coupled, async communication (think: `PeerJoined` / `PeerLeft`), there does exist a valid use case for communication pattern that fall more into the traditional request / response category. While one *can* do this with the existing APIs, the current event bus PoC does not have great support for this to make this more ergonomic and efficient.\r\n\r\nIt would be great to have an API roughly as follows.\r\n\r\n```python\r\npeer_info = await event_bus.request(PeerInfoRequest(), Config(filter_endpoint=\"networking\"))\r\n```\r\n\r\nThis API would allow to:\r\n\r\n- request something and directly wait on the response in one API\r\n- ensure that the response is only delivered to this single callsite that was requesting it (implicit routing)\r\n\r\n**5. Allow all APIs to have timeouts**\r\n\r\nE.g.\r\n\r\n```\r\nresult = await event_bus.request(PeerInfoRequest(), Config(timeout=1.5))\r\n```\r\n\r\n**6. Make domestic events super efficient**\r\n\r\nEvents that are scoped to only be broadcasted inside the endpoint that raises them do not need to go through the central coordinator at all and hence can be much much more efficient.\r\n\r\n**7. Check if we can move the event bus into it's own process and check if that would actually be beneficial**\r\n\r\nCurrently, the event bus itself is sitting in the main process with endpoints being passed into other processes. That also means that all messaging is *always* going through this process. In other words an event raised in `proc1`, to be consumed in `plugin-proc-n` is always going through another hop `proc1 -> main -> plugin-proc-n`. That also means that there's a decent amount of processing going on in the process that hosts the event bus. But since the main process is at the very top of the hierarchy, it's kind of the natural / ideal place for this to happen. I believe our main process isn't performing much work anyway today but it would still be interesting to see if this work could move into another process.\r\n\r\n**8. Check if we can have an event bus without a central coordinator**\r\n\r\nMore radical thought. *Maybe* we can achieve this kind of API even without going through a central coordinator hop\r\n\r\n**9. Check and compare to existing well established messaging solutions such as ZeroMQ**\r\n\r\nSomething like `zmq` + `aiozmq` may actually provide better performance since the bulk of the work happens in native code. Yet it seems to have strong Python bindings. We might be even able to implement our event bus API on top of it or make the backend swappable. ",
  "closed_by": {
    "login": "cburgdorf",
    "id": 521109,
    "node_id": "MDQ6VXNlcjUyMTEwOQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/521109?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cburgdorf",
    "html_url": "https://github.com/cburgdorf",
    "followers_url": "https://api.github.com/users/cburgdorf/followers",
    "following_url": "https://api.github.com/users/cburgdorf/following{/other_user}",
    "gists_url": "https://api.github.com/users/cburgdorf/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cburgdorf/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cburgdorf/subscriptions",
    "organizations_url": "https://api.github.com/users/cburgdorf/orgs",
    "repos_url": "https://api.github.com/users/cburgdorf/repos",
    "events_url": "https://api.github.com/users/cburgdorf/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cburgdorf/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/1206/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/py-evm/issues/1206/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/414998285",
    "html_url": "https://github.com/ethereum/py-evm/issues/1206#issuecomment-414998285",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/1206",
    "id": 414998285,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNDk5ODI4NQ==",
    "user": {
      "login": "cburgdorf",
      "id": 521109,
      "node_id": "MDQ6VXNlcjUyMTEwOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/521109?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cburgdorf",
      "html_url": "https://github.com/cburgdorf",
      "followers_url": "https://api.github.com/users/cburgdorf/followers",
      "following_url": "https://api.github.com/users/cburgdorf/following{/other_user}",
      "gists_url": "https://api.github.com/users/cburgdorf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cburgdorf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cburgdorf/subscriptions",
      "organizations_url": "https://api.github.com/users/cburgdorf/orgs",
      "repos_url": "https://api.github.com/users/cburgdorf/repos",
      "events_url": "https://api.github.com/users/cburgdorf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cburgdorf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-22T11:17:43Z",
    "updated_at": "2018-08-22T11:17:43Z",
    "author_association": "MEMBER",
    "body": ">4. implicit routing via request API\r\n\r\nThis partly implemented in https://github.com/cburgdorf/lahja/commit/b3bda4cc74c9591edffa01a0a78827a20855b9d6\r\n\r\nand demoed in https://github.com/ethereum/py-evm/pull/1202",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/414998285/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/417351217",
    "html_url": "https://github.com/ethereum/py-evm/issues/1206#issuecomment-417351217",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/1206",
    "id": 417351217,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNzM1MTIxNw==",
    "user": {
      "login": "cburgdorf",
      "id": 521109,
      "node_id": "MDQ6VXNlcjUyMTEwOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/521109?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cburgdorf",
      "html_url": "https://github.com/cburgdorf",
      "followers_url": "https://api.github.com/users/cburgdorf/followers",
      "following_url": "https://api.github.com/users/cburgdorf/following{/other_user}",
      "gists_url": "https://api.github.com/users/cburgdorf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cburgdorf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cburgdorf/subscriptions",
      "organizations_url": "https://api.github.com/users/cburgdorf/orgs",
      "repos_url": "https://api.github.com/users/cburgdorf/repos",
      "events_url": "https://api.github.com/users/cburgdorf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cburgdorf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-30T15:00:26Z",
    "updated_at": "2018-08-30T15:00:26Z",
    "author_association": "MEMBER",
    "body": "Migrated this to https://github.com/ethereum/lahja/issues/1",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/417351217/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
